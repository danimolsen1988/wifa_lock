
c:/Users/Keld/Documents/engineer/IoT/tlsClient/target/1.5.2/argon/tlsClient.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00016db0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000eadd0  000eadd0  0001add0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000eadd8  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000f4  2003aeec  000eaddc  0002aeec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003810  2003afe0  2003afe0  0003afe0  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000eaed0  000eaed0  0003aed0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000eaef8  000eaef8  0003aef8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00109b7a  00000000  00000000  0003aefc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00016278  00000000  00000000  00144a76  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0004bb84  00000000  00000000  0015acee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003a68  00000000  00000000  001a6872  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00006680  00000000  00000000  001aa2da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003c190  00000000  00000000  001b095a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00037c3b  00000000  00000000  001ecaea  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001197ce  00000000  00000000  00224725  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00011318  00000000  00000000  0033def4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f012 ff8c 	bl	e6f4e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f012 ffac 	bl	e6f9a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003aeec 	.word	0x2003aeec
   d404c:	000eaddc 	.word	0x000eaddc
   d4050:	2003afe0 	.word	0x2003afe0
   d4054:	2003afe0 	.word	0x2003afe0
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f011 fd05 	bl	e5a6c <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000eadc4 	.word	0x000eadc4
   d4084:	000ead80 	.word	0x000ead80

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b816 	b.w	d40b8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f831 	bl	d40f4 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f011 bcab 	b.w	e59f0 <_post_loop>

000d409a <_Znwj>:
   d409a:	f011 b95f 	b.w	e535c <malloc>

000d409e <_ZdlPv>:
   d409e:	f011 b965 	b.w	e536c <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f011 b963 	b.w	e536c <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <setup>:

#include "TlsClientHandler.h"

TlsClientHandler client;

void setup() {
   d40b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Serial.begin(9600);
   d40ba:	f011 fded 	bl	e5c98 <_Z16_fetch_usbserialv>
   d40be:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40c2:	f011 fddd 	bl	e5c80 <_ZN9USBSerial5beginEl>
    Serial.print(Time.timeStr());
   d40c6:	f011 fde7 	bl	e5c98 <_Z16_fetch_usbserialv>
   d40ca:	4604      	mov	r4, r0
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d40cc:	f011 fc41 	bl	e5952 <_ZN9TimeClass3nowEv>
   d40d0:	4601      	mov	r1, r0
   d40d2:	4668      	mov	r0, sp
   d40d4:	f011 fbfa 	bl	e58cc <_ZN9TimeClass7timeStrEl>
   d40d8:	9900      	ldr	r1, [sp, #0]
   d40da:	4620      	mov	r0, r4
   d40dc:	f011 fba2 	bl	e5824 <_ZN5Print5printEPKc>
   d40e0:	4668      	mov	r0, sp
   d40e2:	f011 fa3f 	bl	e5564 <_ZN6StringD1Ev>
    client.setup();
   d40e6:	4802      	ldr	r0, [pc, #8]	; (d40f0 <setup+0x38>)
   d40e8:	f000 f880 	bl	d41ec <_ZN16TlsClientHandler5setupEv>
}
   d40ec:	b004      	add	sp, #16
   d40ee:	bd10      	pop	{r4, pc}
   d40f0:	2003afe8 	.word	0x2003afe8

000d40f4 <loop>:

void loop() {
   d40f4:	b508      	push	{r3, lr}
    // connect HTTPS server.
    client.Detect();
   d40f6:	4804      	ldr	r0, [pc, #16]	; (d4108 <loop+0x14>)
   d40f8:	f000 f890 	bl	d421c <_ZN16TlsClientHandler6DetectEv>
    delay(30000);
   d40fc:	f247 5030 	movw	r0, #30000	; 0x7530

   d4100:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void loop() {
    // connect HTTPS server.
    client.Detect();
    delay(30000);
   d4104:	f011 bc36 	b.w	e5974 <delay>
   d4108:	2003afe8 	.word	0x2003afe8

000d410c <_GLOBAL__sub_I_client>:

   d410c:	b510      	push	{r4, lr}
 * Date:
 */

#include "TlsClientHandler.h"

TlsClientHandler client;
   d410e:	4c06      	ldr	r4, [pc, #24]	; (d4128 <_GLOBAL__sub_I_client+0x1c>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4110:	f010 ff60 	bl	e4fd4 <HAL_Pin_Map>
   d4114:	4620      	mov	r0, r4
   d4116:	f000 f831 	bl	d417c <_ZN16TlsClientHandlerC1Ev>
   d411a:	4620      	mov	r0, r4
   d411c:	4a03      	ldr	r2, [pc, #12]	; (d412c <_GLOBAL__sub_I_client+0x20>)
   d411e:	4904      	ldr	r1, [pc, #16]	; (d4130 <_GLOBAL__sub_I_client+0x24>)
void loop() {
    // connect HTTPS server.
    client.Detect();
    delay(30000);

   d4120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * Date:
 */

#include "TlsClientHandler.h"

TlsClientHandler client;
   d4124:	f012 bade 	b.w	e66e4 <__aeabi_atexit>
   d4128:	2003afe8 	.word	0x2003afe8
   d412c:	2003afe0 	.word	0x2003afe0
   d4130:	000d41c9 	.word	0x000d41c9

000d4134 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4134:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4136:	6984      	ldr	r4, [r0, #24]
   d4138:	4b0a      	ldr	r3, [pc, #40]	; (d4164 <_ZN9TCPClientD1Ev+0x30>)
   d413a:	6003      	str	r3, [r0, #0]
   d413c:	4605      	mov	r5, r0
   d413e:	b17c      	cbz	r4, d4160 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4140:	6863      	ldr	r3, [r4, #4]
   d4142:	3b01      	subs	r3, #1
   d4144:	6063      	str	r3, [r4, #4]
   d4146:	b95b      	cbnz	r3, d4160 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d4148:	6823      	ldr	r3, [r4, #0]
   d414a:	4620      	mov	r0, r4
   d414c:	689b      	ldr	r3, [r3, #8]
   d414e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4150:	68a3      	ldr	r3, [r4, #8]
   d4152:	3b01      	subs	r3, #1
   d4154:	60a3      	str	r3, [r4, #8]
   d4156:	b91b      	cbnz	r3, d4160 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d4158:	6823      	ldr	r3, [r4, #0]
   d415a:	4620      	mov	r0, r4
   d415c:	68db      	ldr	r3, [r3, #12]
   d415e:	4798      	blx	r3
   d4160:	4628      	mov	r0, r5
   d4162:	bd38      	pop	{r3, r4, r5, pc}
   d4164:	000eaa64 	.word	0x000eaa64

000d4168 <_ZN9TCPClientD0Ev>:
   d4168:	b510      	push	{r4, lr}
   d416a:	4604      	mov	r4, r0
   d416c:	f7ff ffe2 	bl	d4134 <_ZN9TCPClientD1Ev>
   d4170:	4620      	mov	r0, r4
   d4172:	211c      	movs	r1, #28
   d4174:	f012 fabb 	bl	e66ee <_ZdlPvj>
   d4178:	4620      	mov	r0, r4
   d417a:	bd10      	pop	{r4, pc}

000d417c <_ZN16TlsClientHandlerC1Ev>:
#include "TlsClientHandler.h"
#define KEY "b32144abaff740cca01cf20584eb800d"

TlsClientHandler::TlsClientHandler(/* args */)
   d417c:	b510      	push	{r4, lr}
   d417e:	f240 72e1 	movw	r2, #2017	; 0x7e1
   d4182:	490f      	ldr	r1, [pc, #60]	; (d41c0 <_ZN16TlsClientHandlerC1Ev+0x44>)
   d4184:	4604      	mov	r4, r0
   d4186:	f012 fee2 	bl	e6f4e <memcpy>
   d418a:	4b0e      	ldr	r3, [pc, #56]	; (d41c4 <_ZN16TlsClientHandlerC1Ev+0x48>)
   d418c:	f204 72e1 	addw	r2, r4, #2017	; 0x7e1
   d4190:	f103 0134 	add.w	r1, r3, #52	; 0x34
   d4194:	f853 0b04 	ldr.w	r0, [r3], #4
   d4198:	f842 0b04 	str.w	r0, [r2], #4
   d419c:	428b      	cmp	r3, r1
   d419e:	d1f9      	bne.n	d4194 <_ZN16TlsClientHandlerC1Ev+0x18>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d41a0:	f010 ff30 	bl	e5004 <HAL_Timer_Get_Milli_Seconds>
   d41a4:	f8c4 0818 	str.w	r0, [r4, #2072]	; 0x818
   d41a8:	f504 6022 	add.w	r0, r4, #2592	; 0xa20
   d41ac:	f000 f8f4 	bl	d4398 <_ZN12TlsTcpClientC1Ev>
   d41b0:	f504 508e 	add.w	r0, r4, #4544	; 0x11c0
   d41b4:	3010      	adds	r0, #16
   d41b6:	f010 fddf 	bl	e4d78 <_ZN10HttpHelperC1Ev>
{
}
   d41ba:	4620      	mov	r0, r4
   d41bc:	bd10      	pop	{r4, pc}
   d41be:	bf00      	nop
   d41c0:	000e7828 	.word	0x000e7828
   d41c4:	000e8009 	.word	0x000e8009

000d41c8 <_ZN16TlsClientHandlerD1Ev>:

TlsClientHandler::~TlsClientHandler()
   d41c8:	b538      	push	{r3, r4, r5, lr}
   d41ca:	4604      	mov	r4, r0
   d41cc:	f500 508e 	add.w	r0, r0, #4544	; 0x11c0
   d41d0:	f504 6522 	add.w	r5, r4, #2592	; 0xa20
   d41d4:	3010      	adds	r0, #16
   d41d6:	f010 fe1d 	bl	e4e14 <_ZN10HttpHelperD1Ev>
    static int veryfyCert_Tls(void *data, mbedtls_x509_crt *crt, int depth, uint32_t *flags);
    int handShake();

public:
    TlsTcpClient();
    ~TlsTcpClient(){ close(); };
   d41da:	4628      	mov	r0, r5
   d41dc:	f000 fa1a 	bl	d4614 <_ZN12TlsTcpClient5closeEv>
   d41e0:	f205 708c 	addw	r0, r5, #1932	; 0x78c
   d41e4:	f7ff ffa6 	bl	d4134 <_ZN9TCPClientD1Ev>
{
}
   d41e8:	4620      	mov	r0, r4
   d41ea:	bd38      	pop	{r3, r4, r5, pc}

000d41ec <_ZN16TlsClientHandler5setupEv>:
void TlsClientHandler::setup() {
   d41ec:	b510      	push	{r4, lr}
   d41ee:	4604      	mov	r4, r0
   d41f0:	f010 ff08 	bl	e5004 <HAL_Timer_Get_Milli_Seconds>
        // need a Particle time sync for X509 certificates verify.
    if (millis() - lastSync > ONE_DAY_MILLIS) {
   d41f4:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
   d41f8:	1ac0      	subs	r0, r0, r3
   d41fa:	4b07      	ldr	r3, [pc, #28]	; (d4218 <_ZN16TlsClientHandler5setupEv+0x2c>)
   d41fc:	4298      	cmp	r0, r3
   d41fe:	d909      	bls.n	d4214 <_ZN16TlsClientHandler5setupEv+0x28>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4200:	f011 f88c 	bl	e531c <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d4204:	b110      	cbz	r0, d420c <_ZN16TlsClientHandler5setupEv+0x20>
            return false;
        }
        return spark_sync_time(NULL);
   d4206:	2000      	movs	r0, #0
   d4208:	f011 f890 	bl	e532c <spark_sync_time>
   d420c:	f010 fefa 	bl	e5004 <HAL_Timer_Get_Milli_Seconds>
        Particle.syncTime();
        lastSync = millis();
   d4210:	f8c4 0818 	str.w	r0, [r4, #2072]	; 0x818
   d4214:	bd10      	pop	{r4, pc}
   d4216:	bf00      	nop
   d4218:	05265c00 	.word	0x05265c00

000d421c <_ZN16TlsClientHandler6DetectEv>:
    }
}


char *TlsClientHandler::Detect() {
   d421c:	b5f0      	push	{r4, r5, r6, r7, lr}

    http.setPath("/face/v1.0/detect?returnFaceId=true");
   d421e:	f500 558e 	add.w	r5, r0, #4544	; 0x11c0
        lastSync = millis();
    }
}


char *TlsClientHandler::Detect() {
   d4222:	b085      	sub	sp, #20

    http.setPath("/face/v1.0/detect?returnFaceId=true");
   d4224:	3510      	adds	r5, #16
        lastSync = millis();
    }
}


char *TlsClientHandler::Detect() {
   d4226:	4604      	mov	r4, r0

    http.setPath("/face/v1.0/detect?returnFaceId=true");
   d4228:	493f      	ldr	r1, [pc, #252]	; (d4328 <_ZN16TlsClientHandler6DetectEv+0x10c>)
   d422a:	4668      	mov	r0, sp
   d422c:	f011 f9e1 	bl	e55f2 <_ZN6StringC1EPK19__FlashStringHelper>
   d4230:	4669      	mov	r1, sp
   d4232:	4628      	mov	r0, r5
   d4234:	f010 fe16 	bl	e4e64 <_ZN10HttpHelper7setPathE6String>
   d4238:	4668      	mov	r0, sp
   d423a:	f011 f993 	bl	e5564 <_ZN6StringD1Ev>
    http.setHost("iot-facial-compare-test.cognitiveservices.azure.com");
   d423e:	493b      	ldr	r1, [pc, #236]	; (d432c <_ZN16TlsClientHandler6DetectEv+0x110>)
   d4240:	4668      	mov	r0, sp
   d4242:	f011 f9d6 	bl	e55f2 <_ZN6StringC1EPK19__FlashStringHelper>
   d4246:	4669      	mov	r1, sp
   d4248:	4628      	mov	r0, r5
   d424a:	f010 fe0e 	bl	e4e6a <_ZN10HttpHelper7setHostE6String>
   d424e:	4668      	mov	r0, sp
   d4250:	f011 f988 	bl	e5564 <_ZN6StringD1Ev>
    http.setKey(KEY);
   d4254:	4936      	ldr	r1, [pc, #216]	; (d4330 <_ZN16TlsClientHandler6DetectEv+0x114>)
   d4256:	4668      	mov	r0, sp
   d4258:	f011 f9cb 	bl	e55f2 <_ZN6StringC1EPK19__FlashStringHelper>
   d425c:	4669      	mov	r1, sp
   d425e:	4628      	mov	r0, r5
   d4260:	f010 fe19 	bl	e4e96 <_ZN10HttpHelper6setKeyE6String>
   d4264:	4668      	mov	r0, sp
   d4266:	f011 f97d 	bl	e5564 <_ZN6StringD1Ev>
    http.setContent(http.HTTP_OCTET);
   d426a:	f504 5193 	add.w	r1, r4, #4704	; 0x1260
   d426e:	310c      	adds	r1, #12
   d4270:	4668      	mov	r0, sp
   d4272:	f011 f9fd 	bl	e5670 <_ZN6StringC1ERKS_>
   d4276:	4669      	mov	r1, sp
   d4278:	4628      	mov	r0, r5
   d427a:	f010 fe09 	bl	e4e90 <_ZN10HttpHelper10setContentE6String>
   d427e:	4668      	mov	r0, sp
   d4280:	f011 f970 	bl	e5564 <_ZN6StringD1Ev>
    http.setContentLength(0); //set to the right size
            // setup Root CA pem. have to be done before every connect! 
    client.init(letencryptCaPem, sizeof(letencryptCaPem));
   d4284:	f504 6622 	add.w	r6, r4, #2592	; 0xa20

    http.setPath("/face/v1.0/detect?returnFaceId=true");
    http.setHost("iot-facial-compare-test.cognitiveservices.azure.com");
    http.setKey(KEY);
    http.setContent(http.HTTP_OCTET);
    http.setContentLength(0); //set to the right size
   d4288:	2100      	movs	r1, #0
   d428a:	4628      	mov	r0, r5
   d428c:	f010 fdf0 	bl	e4e70 <_ZN10HttpHelper16setContentLengthEi>
            // setup Root CA pem. have to be done before every connect! 
    client.init(letencryptCaPem, sizeof(letencryptCaPem));
   d4290:	f240 72e1 	movw	r2, #2017	; 0x7e1
   d4294:	4621      	mov	r1, r4
   d4296:	4630      	mov	r0, r6
   d4298:	f000 f92a 	bl	d44f0 <_ZN12TlsTcpClient4initEPKcj>
    //connect to client on dis, port
    Serial.println(http.makeVerify());
   d429c:	f011 fcfc 	bl	e5c98 <_Z16_fetch_usbserialv>
   d42a0:	4607      	mov	r7, r0
   d42a2:	4628      	mov	r0, r5
   d42a4:	f010 fe6a 	bl	e4f7c <_ZN10HttpHelper10makeVerifyEv>
   d42a8:	4601      	mov	r1, r0
   d42aa:	4638      	mov	r0, r7
   d42ac:	f011 facd 	bl	e584a <_ZN5Print7printlnEPKc>
    client.connect(this->URL, 443);
   d42b0:	f240 12bb 	movw	r2, #443	; 0x1bb
   d42b4:	f204 71e1 	addw	r1, r4, #2017	; 0x7e1
   d42b8:	4630      	mov	r0, r6
   d42ba:	f000 f9e4 	bl	d4686 <_ZN12TlsTcpClient7connectEPct>

    // check server certificate. if verify failed, TLS connection is alive.
    if (!client.verify()) {
   d42be:	4630      	mov	r0, r6
   d42c0:	f000 f954 	bl	d456c <_ZN12TlsTcpClient6verifyEv>
   d42c4:	b920      	cbnz	r0, d42d0 <_ZN16TlsClientHandler6DetectEv+0xb4>
      Serial.println("TLS connection is alive\r\n");
   d42c6:	f011 fce7 	bl	e5c98 <_Z16_fetch_usbserialv>
   d42ca:	491a      	ldr	r1, [pc, #104]	; (d4334 <_ZN16TlsClientHandler6DetectEv+0x118>)
   d42cc:	f011 fabd 	bl	e584a <_ZN5Print7printlnEPKc>
    }

    // Send header to azure.
    int len = sprintf((char *)buff, http.makeVerify());
   d42d0:	4628      	mov	r0, r5
   d42d2:	f010 fe53 	bl	e4f7c <_ZN10HttpHelper10makeVerifyEv>
   d42d6:	f604 041c 	addw	r4, r4, #2076	; 0x81c
   d42da:	4601      	mov	r1, r0
   d42dc:	4620      	mov	r0, r4
   d42de:	f011 f855 	bl	e538c <sprintf>
    client.write(buff, len );
   d42e2:	4621      	mov	r1, r4
   d42e4:	4602      	mov	r2, r0
   d42e6:	4630      	mov	r0, r6
   d42e8:	f000 f936 	bl	d4558 <_ZN12TlsTcpClient5writeEPhi>

    // GET HTTPS response.
    memset(buff, 0, sizeof(buff));
    while(1) {
        // read renponse.
        memset(buff, 0, sizeof(buff));
   d42ec:	f44f 7200 	mov.w	r2, #512	; 0x200
   d42f0:	2100      	movs	r1, #0
   d42f2:	4620      	mov	r0, r4
   d42f4:	f012 fe51 	bl	e6f9a <memset>
        int ret = client.read(buff, sizeof(buff) - 1);
   d42f8:	f240 12ff 	movw	r2, #511	; 0x1ff
   d42fc:	4621      	mov	r1, r4
   d42fe:	4630      	mov	r0, r6
   d4300:	f000 f9a7 	bl	d4652 <_ZN12TlsTcpClient4readEPhi>
        if (ret == MBEDTLS_ERR_SSL_WANT_READ) {
   d4304:	f510 4fd2 	cmn.w	r0, #26880	; 0x6900
   d4308:	d103      	bne.n	d4312 <_ZN16TlsClientHandler6DetectEv+0xf6>
            delay(100);
   d430a:	2064      	movs	r0, #100	; 0x64
   d430c:	f011 fb32 	bl	e5974 <delay>
   d4310:	e7ec      	b.n	d42ec <_ZN16TlsClientHandler6DetectEv+0xd0>
        } else if (ret <= 0) {
   d4312:	2800      	cmp	r0, #0
   d4314:	dd05      	ble.n	d4322 <_ZN16TlsClientHandler6DetectEv+0x106>
            break;
        } else {
            Serial.println((char *)buff);
   d4316:	f011 fcbf 	bl	e5c98 <_Z16_fetch_usbserialv>
   d431a:	4621      	mov	r1, r4
   d431c:	f011 fa95 	bl	e584a <_ZN5Print7printlnEPKc>
   d4320:	e7e4      	b.n	d42ec <_ZN16TlsClientHandler6DetectEv+0xd0>
        }
    }
    return nullptr;

}
   d4322:	2000      	movs	r0, #0
   d4324:	b005      	add	sp, #20
   d4326:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4328:	000e803d 	.word	0x000e803d
   d432c:	000e8009 	.word	0x000e8009
   d4330:	000e8061 	.word	0x000e8061
   d4334:	000e8082 	.word	0x000e8082

000d4338 <_GLOBAL__sub_I__ZN16TlsClientHandlerC2Ev>:
   d4338:	f010 be4c 	b.w	e4fd4 <HAL_Pin_Map>

000d433c <_ZN12TlsTcpClient9debug_TlsEPviPKciS2_>:
  return 0;
}

void TlsTcpClient::debug_Tls( void *ctx, int level,
                      const char *file, int line,
                      const char *str ) {
   d433c:	4770      	bx	lr

000d433e <_ZN12TlsTcpClient7rng_TlsEPvPhj>:
    return MBEDTLS_ERR_SSL_WANT_READ;
  }
  return ret;
}

int TlsTcpClient::rng_Tls(void* handle, uint8_t* data, const size_t len_) {
   d433e:	b570      	push	{r4, r5, r6, lr}
   d4340:	460e      	mov	r6, r1
   d4342:	4615      	mov	r5, r2
   d4344:	460c      	mov	r4, r1
  size_t len = len_;
  while (len>=4) {
   d4346:	1b2b      	subs	r3, r5, r4
   d4348:	4433      	add	r3, r6
   d434a:	2b03      	cmp	r3, #3
   d434c:	d904      	bls.n	d4358 <_ZN12TlsTcpClient7rng_TlsEPvPhj+0x1a>
    *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
   d434e:	f010 fe51 	bl	e4ff4 <HAL_RNG_GetRandomNumber>
   d4352:	f844 0b04 	str.w	r0, [r4], #4
  return ret;
}

int TlsTcpClient::rng_Tls(void* handle, uint8_t* data, const size_t len_) {
  size_t len = len_;
  while (len>=4) {
   d4356:	e7f6      	b.n	d4346 <_ZN12TlsTcpClient7rng_TlsEPvPhj+0x8>
   d4358:	08ac      	lsrs	r4, r5, #2
   d435a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   d435e:	4435      	add	r5, r6
    *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
    data += 4;
    len -= 4;
  }
  while (len-->0) {
   d4360:	42ac      	cmp	r4, r5
   d4362:	d004      	beq.n	d436e <_ZN12TlsTcpClient7rng_TlsEPvPhj+0x30>
    *data++ = HAL_RNG_GetRandomNumber();
   d4364:	f010 fe46 	bl	e4ff4 <HAL_RNG_GetRandomNumber>
   d4368:	f804 0b01 	strb.w	r0, [r4], #1
  while (len>=4) {
    *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
    data += 4;
    len -= 4;
  }
  while (len-->0) {
   d436c:	e7f8      	b.n	d4360 <_ZN12TlsTcpClient7rng_TlsEPvPhj+0x22>
    *data++ = HAL_RNG_GetRandomNumber();
  }
  return 0;
}
   d436e:	2000      	movs	r0, #0
   d4370:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4374 <_ZN12TlsTcpClient14veryfyCert_TlsEPvP16mbedtls_x509_crtiPm>:

  *ttime = nowt;
  return nowt;
}

int TlsTcpClient::veryfyCert_Tls(void *data, mbedtls_x509_crt *crt, int depth, uint32_t *flags) {
   d4374:	b500      	push	{lr}
   d4376:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
  char buf[1024];
  ((void) data);

  debug_tls("Verify requested for (Depth %d):\n", depth);
  mbedtls_x509_crt_info(buf, sizeof(buf) - 1, "", crt);
   d437a:	460b      	mov	r3, r1
   d437c:	4a05      	ldr	r2, [pc, #20]	; (d4394 <_ZN12TlsTcpClient14veryfyCert_TlsEPvP16mbedtls_x509_crtiPm+0x20>)
   d437e:	f240 31ff 	movw	r1, #1023	; 0x3ff
   d4382:	4668      	mov	r0, sp
   d4384:	f008 fc34 	bl	dcbf0 <mbedtls_x509_crt_info>
  } else {
    debug_tls(buf, sizeof(buf), "  ! ", *flags);
    debug_tls("%s\n", buf);
  }
  return 0;
}
   d4388:	2000      	movs	r0, #0
   d438a:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
   d438e:	f85d fb04 	ldr.w	pc, [sp], #4
   d4392:	bf00      	nop
   d4394:	000e87fd 	.word	0x000e87fd

000d4398 <_ZN12TlsTcpClientC1Ev>:
#include "TlsTcpClient.h"

TlsTcpClient::TlsTcpClient() {
   d4398:	b510      	push	{r4, lr}
   d439a:	4604      	mov	r4, r0
   d439c:	f200 708c 	addw	r0, r0, #1932	; 0x78c
   d43a0:	f012 f8a0 	bl	e64e4 <_ZN9TCPClientC1Ev>
  connected = false;
   d43a4:	2300      	movs	r3, #0
   d43a6:	f884 37a8 	strb.w	r3, [r4, #1960]	; 0x7a8
}
   d43aa:	4620      	mov	r0, r4
   d43ac:	bd10      	pop	{r4, pc}
	...

000d43b0 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j>:
  return this->init(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int TlsTcpClient::init(const char *rootCaPem, const size_t rootCaPemSize,
         const char *clientCertPem, const size_t clientCertPemSize,
         const char *clientKeyPem, const size_t clientKeyPemSize) {
   d43b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d43b4:	4605      	mov	r5, r0
   d43b6:	b085      	sub	sp, #20
   d43b8:	4693      	mov	fp, r2

  int ret;
  connected = false;
  mbedtls_ssl_config_init(&conf);
   d43ba:	f200 4474 	addw	r4, r0, #1140	; 0x474
int TlsTcpClient::init(const char *rootCaPem, const size_t rootCaPemSize,
         const char *clientCertPem, const size_t clientCertPemSize,
         const char *clientKeyPem, const size_t clientKeyPemSize) {

  int ret;
  connected = false;
   d43be:	2200      	movs	r2, #0
   d43c0:	f880 27a8 	strb.w	r2, [r0, #1960]	; 0x7a8
  mbedtls_ssl_config_init(&conf);
  mbedtls_ssl_init(&ssl);
   d43c4:	f505 766e 	add.w	r6, r5, #952	; 0x3b8
         const char *clientCertPem, const size_t clientCertPemSize,
         const char *clientKeyPem, const size_t clientKeyPemSize) {

  int ret;
  connected = false;
  mbedtls_ssl_config_init(&conf);
   d43c8:	4620      	mov	r0, r4
  return this->init(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int TlsTcpClient::init(const char *rootCaPem, const size_t rootCaPemSize,
         const char *clientCertPem, const size_t clientCertPemSize,
         const char *clientKeyPem, const size_t clientKeyPemSize) {
   d43ca:	4699      	mov	r9, r3
   d43cc:	9102      	str	r1, [sp, #8]

  int ret;
  connected = false;
   d43ce:	9203      	str	r2, [sp, #12]
  mbedtls_ssl_config_init(&conf);
  mbedtls_ssl_init(&ssl);
  mbedtls_x509_crt_init(&cacert);
   d43d0:	f205 4af4 	addw	sl, r5, #1268	; 0x4f4
         const char *clientCertPem, const size_t clientCertPemSize,
         const char *clientKeyPem, const size_t clientKeyPemSize) {

  int ret;
  connected = false;
  mbedtls_ssl_config_init(&conf);
   d43d4:	f00b fad1 	bl	df97a <mbedtls_ssl_config_init>
  mbedtls_ssl_init(&ssl);
   d43d8:	4630      	mov	r0, r6
   d43da:	f00a ffa1 	bl	df320 <mbedtls_ssl_init>
  mbedtls_x509_crt_init(&cacert);
  mbedtls_x509_crt_init(&clicert);
   d43de:	f505 67c5 	add.w	r7, r5, #1576	; 0x628

  int ret;
  connected = false;
  mbedtls_ssl_config_init(&conf);
  mbedtls_ssl_init(&ssl);
  mbedtls_x509_crt_init(&cacert);
   d43e2:	4650      	mov	r0, sl
   d43e4:	f009 fa12 	bl	dd80c <mbedtls_x509_crt_init>
  mbedtls_x509_crt_init(&clicert);
  mbedtls_pk_init(&pkey);
   d43e8:	f205 785c 	addw	r8, r5, #1884	; 0x75c
  int ret;
  connected = false;
  mbedtls_ssl_config_init(&conf);
  mbedtls_ssl_init(&ssl);
  mbedtls_x509_crt_init(&cacert);
  mbedtls_x509_crt_init(&clicert);
   d43ec:	4638      	mov	r0, r7
   d43ee:	f009 fa0d 	bl	dd80c <mbedtls_x509_crt_init>
  mbedtls_pk_init(&pkey);
   d43f2:	4640      	mov	r0, r8
   d43f4:	f009 fe32 	bl	de05c <mbedtls_pk_init>

  mbedtls_ssl_conf_dbg(&conf, &TlsTcpClient::debug_Tls, nullptr);
   d43f8:	9a03      	ldr	r2, [sp, #12]
   d43fa:	4936      	ldr	r1, [pc, #216]	; (d44d4 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x124>)
   d43fc:	4620      	mov	r0, r4
   d43fe:	f00a ffa0 	bl	df342 <mbedtls_ssl_conf_dbg>
  #if defined(MBEDTLS_DEBUG_C)
    mbedtls_debug_set_threshold(DEBUG_TLS_CORE_LEVEL);
  #endif

  if ((ret = mbedtls_x509_crt_parse(&cacert, (const unsigned char *)rootCaPem, rootCaPemSize)) < 0) {
   d4402:	465a      	mov	r2, fp
   d4404:	9902      	ldr	r1, [sp, #8]
   d4406:	4650      	mov	r0, sl
   d4408:	f009 fdb6 	bl	ddf78 <mbedtls_x509_crt_parse>
   d440c:	2800      	cmp	r0, #0
   d440e:	db5d      	blt.n	d44cc <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x11c>
    debug_tls(" enableTls mbedtls_x509_crt_parse error : %d\n", ret);
    return ret;
  }

  if (clientCertPem != NULL && clientCertPemSize > 0) {
   d4410:	f1b9 0f00 	cmp.w	r9, #0
   d4414:	d102      	bne.n	d441c <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x6c>
      debug_tls(" tlsClientKey mbedtls_x509_crt_parse error : %d\n", ret);
      return ret;
    }
  }

  if (clientKeyPem != NULL && clientKeyPemSize > 0) {
   d4416:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d4418:	b95b      	cbnz	r3, d4432 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x82>
   d441a:	e00c      	b.n	d4436 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x86>
  if ((ret = mbedtls_x509_crt_parse(&cacert, (const unsigned char *)rootCaPem, rootCaPemSize)) < 0) {
    debug_tls(" enableTls mbedtls_x509_crt_parse error : %d\n", ret);
    return ret;
  }

  if (clientCertPem != NULL && clientCertPemSize > 0) {
   d441c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d441e:	2b00      	cmp	r3, #0
   d4420:	d0f9      	beq.n	d4416 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x66>
    if ((ret = mbedtls_x509_crt_parse(&clicert, (const unsigned char *)clientCertPem, clientCertPemSize)) < 0) {
   d4422:	461a      	mov	r2, r3
   d4424:	4649      	mov	r1, r9
   d4426:	4638      	mov	r0, r7
   d4428:	f009 fda6 	bl	ddf78 <mbedtls_x509_crt_parse>
   d442c:	2800      	cmp	r0, #0
   d442e:	daf2      	bge.n	d4416 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x66>
   d4430:	e04c      	b.n	d44cc <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x11c>
      debug_tls(" tlsClientKey mbedtls_x509_crt_parse error : %d\n", ret);
      return ret;
    }
  }

  if (clientKeyPem != NULL && clientKeyPemSize > 0) {
   d4432:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d4434:	b94b      	cbnz	r3, d444a <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x9a>
      debug_tls(" tlsClientKey mbedtls_pk_parse_key error : %d\n", ret);
      return ret;
    }
  }

  if ((ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,
   d4436:	2300      	movs	r3, #0
   d4438:	461a      	mov	r2, r3
   d443a:	4619      	mov	r1, r3
   d443c:	4620      	mov	r0, r4
   d443e:	f00b faa1 	bl	df984 <mbedtls_ssl_config_defaults>
   d4442:	4683      	mov	fp, r0
   d4444:	2800      	cmp	r0, #0
   d4446:	d141      	bne.n	d44cc <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x11c>
   d4448:	e009      	b.n	d445e <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0xae>
      return ret;
    }
  }

  if (clientKeyPem != NULL && clientKeyPemSize > 0) {
    if ((ret = mbedtls_pk_parse_key(&pkey, (const unsigned char *)clientKeyPem, clientKeyPemSize, NULL, 0)) != 0) {
   d444a:	2300      	movs	r3, #0
   d444c:	9300      	str	r3, [sp, #0]
   d444e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   d4450:	990f      	ldr	r1, [sp, #60]	; 0x3c
   d4452:	4640      	mov	r0, r8
   d4454:	f007 f9d2 	bl	db7fc <mbedtls_pk_parse_key>
   d4458:	2800      	cmp	r0, #0
   d445a:	d0ec      	beq.n	d4436 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x86>
   d445c:	e036      	b.n	d44cc <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x11c>

  if ((ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,
                 MBEDTLS_SSL_TRANSPORT_STREAM, MBEDTLS_SSL_PRESET_DEFAULT)) != 0) {
    return ret;
  }
  mbedtls_ssl_conf_min_version(&conf, MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3);
   d445e:	2203      	movs	r2, #3
   d4460:	4611      	mov	r1, r2
   d4462:	4620      	mov	r0, r4
   d4464:	f00a ffbc 	bl	df3e0 <mbedtls_ssl_conf_min_version>
  mbedtls_ssl_conf_verify(&conf, &TlsTcpClient::veryfyCert_Tls, NULL);
   d4468:	465a      	mov	r2, fp
   d446a:	491b      	ldr	r1, [pc, #108]	; (d44d8 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x128>)
   d446c:	4620      	mov	r0, r4
   d446e:	f00a ff62 	bl	df336 <mbedtls_ssl_conf_verify>

  // if server certificates is not valid, connection will success. check certificates on verify() function.
  mbedtls_ssl_conf_authmode(&conf, MBEDTLS_SSL_VERIFY_OPTIONAL);
   d4472:	2101      	movs	r1, #1
   d4474:	4620      	mov	r0, r4
   d4476:	f00a ff57 	bl	df328 <mbedtls_ssl_conf_authmode>
  mbedtls_ssl_conf_rng(&conf, &TlsTcpClient::rng_Tls, nullptr);
   d447a:	465a      	mov	r2, fp
   d447c:	4917      	ldr	r1, [pc, #92]	; (d44dc <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x12c>)
   d447e:	4620      	mov	r0, r4
   d4480:	f00a ff5c 	bl	df33c <mbedtls_ssl_conf_rng>
  mbedtls_ssl_conf_ca_chain(&conf, &cacert, nullptr);
   d4484:	465a      	mov	r2, fp
   d4486:	4651      	mov	r1, sl
   d4488:	4620      	mov	r0, r4
   d448a:	f00a ff6f 	bl	df36c <mbedtls_ssl_conf_ca_chain>

  if (clientCertPem != NULL && clientKeyPem != NULL) {
   d448e:	f1b9 0f00 	cmp.w	r9, #0
   d4492:	d006      	beq.n	d44a2 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0xf2>
   d4494:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d4496:	b123      	cbz	r3, d44a2 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0xf2>
    mbedtls_ssl_conf_own_cert(&conf, &clicert, &pkey);
   d4498:	4642      	mov	r2, r8
   d449a:	4639      	mov	r1, r7
   d449c:	4620      	mov	r0, r4
   d449e:	f00a ff62 	bl	df366 <mbedtls_ssl_conf_own_cert>
  }

  if((ret = mbedtls_ssl_setup(&ssl, &conf)) != 0) {
   d44a2:	4621      	mov	r1, r4
   d44a4:	4630      	mov	r0, r6
   d44a6:	f00b f9d9 	bl	df85c <mbedtls_ssl_setup>
   d44aa:	4604      	mov	r4, r0
   d44ac:	b968      	cbnz	r0, d44ca <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x11a>
    return ret;
  }

  mbedtls_ssl_set_timer_cb(&ssl, &timer, mbedtls_timing_set_delay, mbedtls_timing_get_delay);
   d44ae:	4b0c      	ldr	r3, [pc, #48]	; (d44e0 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x130>)
   d44b0:	4a0c      	ldr	r2, [pc, #48]	; (d44e4 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x134>)
   d44b2:	f205 7164 	addw	r1, r5, #1892	; 0x764
   d44b6:	4630      	mov	r0, r6
   d44b8:	f00a ff4c 	bl	df354 <mbedtls_ssl_set_timer_cb>
  mbedtls_ssl_set_bio(&ssl, this, &TlsTcpClient::send_Tls,  &TlsTcpClient::recv_Tls, nullptr);
   d44bc:	9400      	str	r4, [sp, #0]
   d44be:	4b0a      	ldr	r3, [pc, #40]	; (d44e8 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x138>)
   d44c0:	4a0a      	ldr	r2, [pc, #40]	; (d44ec <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x13c>)
   d44c2:	4629      	mov	r1, r5
   d44c4:	4630      	mov	r0, r6
   d44c6:	f00a ff3f 	bl	df348 <mbedtls_ssl_set_bio>
   d44ca:	4620      	mov	r0, r4
  return 0;
}
   d44cc:	b005      	add	sp, #20
   d44ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d44d2:	bf00      	nop
   d44d4:	000d433d 	.word	0x000d433d
   d44d8:	000d4375 	.word	0x000d4375
   d44dc:	000d433f 	.word	0x000d433f
   d44e0:	000da54f 	.word	0x000da54f
   d44e4:	000da541 	.word	0x000da541
   d44e8:	000d45d9 	.word	0x000d45d9
   d44ec:	000d45a1 	.word	0x000d45a1

000d44f0 <_ZN12TlsTcpClient4initEPKcj>:
    debug_tls("%s\n", buf);
  }
  return 0;
}

int TlsTcpClient::init(const char *rootCaPem, const size_t rootCaPemSize) {
   d44f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return this->init(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
   d44f2:	2300      	movs	r3, #0
   d44f4:	9302      	str	r3, [sp, #8]
   d44f6:	9301      	str	r3, [sp, #4]
   d44f8:	9300      	str	r3, [sp, #0]
   d44fa:	f7ff ff59 	bl	d43b0 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j>
}
   d44fe:	b005      	add	sp, #20
   d4500:	f85d fb04 	ldr.w	pc, [sp], #4

000d4504 <_ZN12TlsTcpClient9handShakeEv>:
  }

  return this->handShake();
}

int TlsTcpClient::handShake() {
   d4504:	b570      	push	{r4, r5, r6, lr}
   d4506:	4605      	mov	r5, r0
  int ret;
  do {
      while (ssl.state != MBEDTLS_SSL_HANDSHAKE_OVER) {
          ret = mbedtls_ssl_handshake_client_step(&ssl);
   d4508:	f500 766e 	add.w	r6, r0, #952	; 0x3b8
}

int TlsTcpClient::handShake() {
  int ret;
  do {
      while (ssl.state != MBEDTLS_SSL_HANDSHAKE_OVER) {
   d450c:	f8d5 33bc 	ldr.w	r3, [r5, #956]	; 0x3bc
   d4510:	2b10      	cmp	r3, #16
   d4512:	d005      	beq.n	d4520 <_ZN12TlsTcpClient9handShakeEv+0x1c>
          ret = mbedtls_ssl_handshake_client_step(&ssl);
   d4514:	4630      	mov	r0, r6
   d4516:	f00f fd79 	bl	e400c <mbedtls_ssl_handshake_client_step>
          if (ret != 0)
   d451a:	4604      	mov	r4, r0
   d451c:	2800      	cmp	r0, #0
   d451e:	d0f5      	beq.n	d450c <_ZN12TlsTcpClient9handShakeEv+0x8>
              break;
      }
  } while(ret == MBEDTLS_ERR_SSL_WANT_READ || ret == MBEDTLS_ERR_SSL_WANT_WRITE);
   d4520:	f514 4fd2 	cmn.w	r4, #26880	; 0x6900
   d4524:	d0f2      	beq.n	d450c <_ZN12TlsTcpClient9handShakeEv+0x8>
   d4526:	f514 4fd1 	cmn.w	r4, #26752	; 0x6880
   d452a:	d0ef      	beq.n	d450c <_ZN12TlsTcpClient9handShakeEv+0x8>

  // clean ca cert/crt/pkey
  mbedtls_x509_crt_free(&cacert);
   d452c:	f205 40f4 	addw	r0, r5, #1268	; 0x4f4
   d4530:	f009 f971 	bl	dd816 <mbedtls_x509_crt_free>
  mbedtls_x509_crt_free(&clicert);
   d4534:	f505 60c5 	add.w	r0, r5, #1576	; 0x628
   d4538:	f009 f96d 	bl	dd816 <mbedtls_x509_crt_free>
  mbedtls_pk_free(&pkey);
   d453c:	f205 705c 	addw	r0, r5, #1884	; 0x75c
   d4540:	f009 fd90 	bl	de064 <mbedtls_pk_free>

  if (ssl.state == MBEDTLS_SSL_HANDSHAKE_OVER) {
   d4544:	f8d5 33bc 	ldr.w	r3, [r5, #956]	; 0x3bc
   d4548:	2b10      	cmp	r3, #16
    connected = true;
   d454a:	bf03      	ittte	eq
   d454c:	2301      	moveq	r3, #1
   d454e:	f885 37a8 	strbeq.w	r3, [r5, #1960]	; 0x7a8
    return 0;
   d4552:	2000      	moveq	r0, #0
   d4554:	4620      	movne	r0, r4
  }
  return ret;
}
   d4556:	bd70      	pop	{r4, r5, r6, pc}

000d4558 <_ZN12TlsTcpClient5writeEPhi>:

int TlsTcpClient::write(unsigned char *buff, int length) {
  if (connected) {
   d4558:	f890 37a8 	ldrb.w	r3, [r0, #1960]	; 0x7a8
   d455c:	b11b      	cbz	r3, d4566 <_ZN12TlsTcpClient5writeEPhi+0xe>
      int ret = mbedtls_ssl_write( &ssl, buff, length );
   d455e:	f500 706e 	add.w	r0, r0, #952	; 0x3b8
   d4562:	f00b b83b 	b.w	df5dc <mbedtls_ssl_write>
      return ret;
  } else
    return -1;
}
   d4566:	f04f 30ff 	mov.w	r0, #4294967295
   d456a:	4770      	bx	lr

000d456c <_ZN12TlsTcpClient6verifyEv>:
  if (client.connected())
    return connected;
  return false;
}

bool TlsTcpClient::verify() {
   d456c:	b500      	push	{lr}
  int ret;
  if ((ret = mbedtls_ssl_get_verify_result(&ssl)) != 0 ) {
   d456e:	f500 706e 	add.w	r0, r0, #952	; 0x3b8
  if (client.connected())
    return connected;
  return false;
}

bool TlsTcpClient::verify() {
   d4572:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
  int ret;
  if ((ret = mbedtls_ssl_get_verify_result(&ssl)) != 0 ) {
   d4576:	f00a ff38 	bl	df3ea <mbedtls_ssl_get_verify_result>
   d457a:	4603      	mov	r3, r0
   d457c:	b138      	cbz	r0, d458e <_ZN12TlsTcpClient6verifyEv+0x22>
    char vrfy_buf[512];
    mbedtls_x509_crt_verify_info( vrfy_buf, sizeof( vrfy_buf ), "  ! ", ret );
   d457e:	4a06      	ldr	r2, [pc, #24]	; (d4598 <_ZN12TlsTcpClient6verifyEv+0x2c>)
   d4580:	f44f 7100 	mov.w	r1, #512	; 0x200
   d4584:	4668      	mov	r0, sp
   d4586:	f008 fe6b 	bl	dd260 <mbedtls_x509_crt_verify_info>
    debug_tls("%s\n", vrfy_buf);
    return false;
   d458a:	2000      	movs	r0, #0
   d458c:	e000      	b.n	d4590 <_ZN12TlsTcpClient6verifyEv+0x24>
  }
  return true;
   d458e:	2001      	movs	r0, #1
}
   d4590:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
   d4594:	f85d fb04 	ldr.w	pc, [sp], #4
   d4598:	000e8105 	.word	0x000e8105

000d459c <_GLOBAL__sub_I__ZN12TlsTcpClientC2Ev>:
   d459c:	f010 bd1a 	b.w	e4fd4 <HAL_Pin_Map>

000d45a0 <_ZN12TlsTcpClient8send_TlsEPvPKhj>:

TlsTcpClient::TlsTcpClient() {
  connected = false;
}

int TlsTcpClient::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
   d45a0:	b570      	push	{r4, r5, r6, lr}
  TlsTcpClient *sock = (TlsTcpClient *)ctx;

  if (!sock->client.connected()) {
   d45a2:	f200 758c 	addw	r5, r0, #1932	; 0x78c
   d45a6:	4628      	mov	r0, r5

TlsTcpClient::TlsTcpClient() {
  connected = false;
}

int TlsTcpClient::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
   d45a8:	460c      	mov	r4, r1
   d45aa:	4616      	mov	r6, r2
  TlsTcpClient *sock = (TlsTcpClient *)ctx;

  if (!sock->client.connected()) {
   d45ac:	f011 fd13 	bl	e5fd6 <_ZN9TCPClient9connectedEv>
   d45b0:	b158      	cbz	r0, d45ca <_ZN12TlsTcpClient8send_TlsEPvPKhj+0x2a>
    return -1;
  }

  int ret = sock->client.write(buf, len);
   d45b2:	4621      	mov	r1, r4
   d45b4:	4632      	mov	r2, r6
   d45b6:	4628      	mov	r0, r5
   d45b8:	f011 fcf7 	bl	e5faa <_ZN9TCPClient5writeEPKhj>
  if (ret == 0) {
   d45bc:	4604      	mov	r4, r0
   d45be:	b138      	cbz	r0, d45d0 <_ZN12TlsTcpClient8send_TlsEPvPKhj+0x30>
      return MBEDTLS_ERR_SSL_WANT_WRITE;
  }
  sock->client.flush();
   d45c0:	4628      	mov	r0, r5
   d45c2:	f011 fd07 	bl	e5fd4 <_ZN9TCPClient5flushEv>
  return ret;
   d45c6:	4620      	mov	r0, r4
   d45c8:	bd70      	pop	{r4, r5, r6, pc}

int TlsTcpClient::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
  TlsTcpClient *sock = (TlsTcpClient *)ctx;

  if (!sock->client.connected()) {
    return -1;
   d45ca:	f04f 30ff 	mov.w	r0, #4294967295
   d45ce:	bd70      	pop	{r4, r5, r6, pc}
  }

  int ret = sock->client.write(buf, len);
  if (ret == 0) {
      return MBEDTLS_ERR_SSL_WANT_WRITE;
   d45d0:	4800      	ldr	r0, [pc, #0]	; (d45d4 <_ZN12TlsTcpClient8send_TlsEPvPKhj+0x34>)
  }
  sock->client.flush();
  return ret;
}
   d45d2:	bd70      	pop	{r4, r5, r6, pc}
   d45d4:	ffff9780 	.word	0xffff9780

000d45d8 <_ZN12TlsTcpClient8recv_TlsEPvPhj>:

int TlsTcpClient::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
   d45d8:	b570      	push	{r4, r5, r6, lr}
   d45da:	4604      	mov	r4, r0
  TlsTcpClient *sock = (TlsTcpClient *)ctx;
  // TODO: need this delay?
  delay(10);

  if (!sock->client.connected()) {
   d45dc:	f204 748c 	addw	r4, r4, #1932	; 0x78c
}

int TlsTcpClient::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
  TlsTcpClient *sock = (TlsTcpClient *)ctx;
  // TODO: need this delay?
  delay(10);
   d45e0:	200a      	movs	r0, #10
  }
  sock->client.flush();
  return ret;
}

int TlsTcpClient::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
   d45e2:	460d      	mov	r5, r1
   d45e4:	4616      	mov	r6, r2
  TlsTcpClient *sock = (TlsTcpClient *)ctx;
  // TODO: need this delay?
  delay(10);
   d45e6:	f011 f9c5 	bl	e5974 <delay>

  if (!sock->client.connected()) {
   d45ea:	4620      	mov	r0, r4
   d45ec:	f011 fcf3 	bl	e5fd6 <_ZN9TCPClient9connectedEv>
   d45f0:	b158      	cbz	r0, d460a <_ZN12TlsTcpClient8recv_TlsEPvPhj+0x32>
    return -1;
  }

  if (sock->client.available() == 0) {
   d45f2:	4620      	mov	r0, r4
   d45f4:	f011 feda 	bl	e63ac <_ZN9TCPClient9availableEv>
   d45f8:	b128      	cbz	r0, d4606 <_ZN12TlsTcpClient8recv_TlsEPvPhj+0x2e>
    return MBEDTLS_ERR_SSL_WANT_READ;
  }

  int ret = sock->client.read(buf, len);
   d45fa:	4632      	mov	r2, r6
   d45fc:	4629      	mov	r1, r5
   d45fe:	4620      	mov	r0, r4
   d4600:	f011 fd97 	bl	e6132 <_ZN9TCPClient4readEPhj>
  if (ret == 0) {
   d4604:	b918      	cbnz	r0, d460e <_ZN12TlsTcpClient8recv_TlsEPvPhj+0x36>
    return MBEDTLS_ERR_SSL_WANT_READ;
   d4606:	4802      	ldr	r0, [pc, #8]	; (d4610 <_ZN12TlsTcpClient8recv_TlsEPvPhj+0x38>)
   d4608:	bd70      	pop	{r4, r5, r6, pc}
  TlsTcpClient *sock = (TlsTcpClient *)ctx;
  // TODO: need this delay?
  delay(10);

  if (!sock->client.connected()) {
    return -1;
   d460a:	f04f 30ff 	mov.w	r0, #4294967295
  int ret = sock->client.read(buf, len);
  if (ret == 0) {
    return MBEDTLS_ERR_SSL_WANT_READ;
  }
  return ret;
}
   d460e:	bd70      	pop	{r4, r5, r6, pc}
   d4610:	ffff9700 	.word	0xffff9700

000d4614 <_ZN12TlsTcpClient5closeEv>:
  mbedtls_ssl_set_bio(&ssl, this, &TlsTcpClient::send_Tls,  &TlsTcpClient::recv_Tls, nullptr);
  return 0;
}

void TlsTcpClient::close() {
  connected = false;
   d4614:	2300      	movs	r3, #0
  mbedtls_ssl_set_timer_cb(&ssl, &timer, mbedtls_timing_set_delay, mbedtls_timing_get_delay);
  mbedtls_ssl_set_bio(&ssl, this, &TlsTcpClient::send_Tls,  &TlsTcpClient::recv_Tls, nullptr);
  return 0;
}

void TlsTcpClient::close() {
   d4616:	b510      	push	{r4, lr}
   d4618:	4604      	mov	r4, r0
  connected = false;
   d461a:	f880 37a8 	strb.w	r3, [r0, #1960]	; 0x7a8
  mbedtls_x509_crt_free(&cacert);
   d461e:	f200 40f4 	addw	r0, r0, #1268	; 0x4f4
   d4622:	f009 f8f8 	bl	dd816 <mbedtls_x509_crt_free>
  mbedtls_x509_crt_free(&clicert);
   d4626:	f504 60c5 	add.w	r0, r4, #1576	; 0x628
   d462a:	f009 f8f4 	bl	dd816 <mbedtls_x509_crt_free>
  mbedtls_pk_free(&pkey);
   d462e:	f204 705c 	addw	r0, r4, #1884	; 0x75c
   d4632:	f009 fd17 	bl	de064 <mbedtls_pk_free>
  mbedtls_ssl_config_free (&conf);
   d4636:	f204 4074 	addw	r0, r4, #1140	; 0x474
   d463a:	f00b f9ed 	bl	dfa18 <mbedtls_ssl_config_free>
  mbedtls_ssl_free (&ssl);
   d463e:	f504 706e 	add.w	r0, r4, #952	; 0x3b8
   d4642:	f00b f94b 	bl	df8dc <mbedtls_ssl_free>
  client.stop();
   d4646:	f204 708c 	addw	r0, r4, #1932	; 0x78c
};
   d464a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  mbedtls_x509_crt_free(&cacert);
  mbedtls_x509_crt_free(&clicert);
  mbedtls_pk_free(&pkey);
  mbedtls_ssl_config_free (&conf);
  mbedtls_ssl_free (&ssl);
  client.stop();
   d464e:	f011 be95 	b.w	e637c <_ZN9TCPClient4stopEv>

000d4652 <_ZN12TlsTcpClient4readEPhi>:
  int ret = read(buff, 1);
  if (ret == 1) return buff[0];
  else    return ret;
}

int TlsTcpClient::read(unsigned char *buff, int length) {
   d4652:	b510      	push	{r4, lr}
  if (connected) {
   d4654:	f890 37a8 	ldrb.w	r3, [r0, #1960]	; 0x7a8
  int ret = read(buff, 1);
  if (ret == 1) return buff[0];
  else    return ret;
}

int TlsTcpClient::read(unsigned char *buff, int length) {
   d4658:	4604      	mov	r4, r0
  if (connected) {
   d465a:	b18b      	cbz	r3, d4680 <_ZN12TlsTcpClient4readEPhi+0x2e>
      int ret = mbedtls_ssl_read(&ssl, buff, length);
   d465c:	f500 706e 	add.w	r0, r0, #952	; 0x3b8
   d4660:	f00a ff34 	bl	df4cc <mbedtls_ssl_read>
      if (ret < 0) {
   d4664:	2800      	cmp	r0, #0
   d4666:	da0d      	bge.n	d4684 <_ZN12TlsTcpClient4readEPhi+0x32>
            switch (ret) {
   d4668:	f510 4fee 	cmn.w	r0, #30464	; 0x7700
   d466c:	d006      	beq.n	d467c <_ZN12TlsTcpClient4readEPhi+0x2a>
   d466e:	f510 4fd2 	cmn.w	r0, #26880	; 0x6900
   d4672:	d007      	beq.n	d4684 <_ZN12TlsTcpClient4readEPhi+0x32>
            case MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE:
                ret = 0;
                break;
            case MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY:
            default:
                close();
   d4674:	4620      	mov	r0, r4
   d4676:	f7ff ffcd 	bl	d4614 <_ZN12TlsTcpClient5closeEv>
   d467a:	e001      	b.n	d4680 <_ZN12TlsTcpClient4readEPhi+0x2e>
      if (ret < 0) {
            switch (ret) {
              case MBEDTLS_ERR_SSL_WANT_READ:
                break;
            case MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE:
                ret = 0;
   d467c:	2000      	movs	r0, #0
   d467e:	bd10      	pop	{r4, pc}
                return -1;
          }
      }
      return ret;
  } else
    return -1;
   d4680:	f04f 30ff 	mov.w	r0, #4294967295
}
   d4684:	bd10      	pop	{r4, pc}

000d4686 <_ZN12TlsTcpClient7connectEPct>:
  mbedtls_ssl_free (&ssl);
  client.stop();
};


int TlsTcpClient::connect(char* domain, uint16_t port) {
   d4686:	b538      	push	{r3, r4, r5, lr}
   d4688:	4604      	mov	r4, r0
  int ret;
  if (!client.connect(domain, port)) {
   d468a:	2300      	movs	r3, #0
   d468c:	f200 708c 	addw	r0, r0, #1932	; 0x78c
  mbedtls_ssl_free (&ssl);
  client.stop();
};


int TlsTcpClient::connect(char* domain, uint16_t port) {
   d4690:	460d      	mov	r5, r1
  int ret;
  if (!client.connect(domain, port)) {
   d4692:	f011 fd77 	bl	e6184 <_ZN9TCPClient7connectEPKctm>
   d4696:	b150      	cbz	r0, d46ae <_ZN12TlsTcpClient7connectEPct+0x28>
      debug_tls(" could not connect to server : %s\n", domain);
      return -1;
  }

  if((ret = mbedtls_ssl_set_hostname(&ssl, domain)) != 0) {
   d4698:	4629      	mov	r1, r5
   d469a:	f504 706e 	add.w	r0, r4, #952	; 0x3b8
   d469e:	f00a fe69 	bl	df374 <mbedtls_ssl_set_hostname>
   d46a2:	b930      	cbnz	r0, d46b2 <_ZN12TlsTcpClient7connectEPct+0x2c>
    return ret;
  }

  return this->handShake();
   d46a4:	4620      	mov	r0, r4
}
   d46a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if((ret = mbedtls_ssl_set_hostname(&ssl, domain)) != 0) {
    return ret;
  }

  return this->handShake();
   d46aa:	f7ff bf2b 	b.w	d4504 <_ZN12TlsTcpClient9handShakeEv>

int TlsTcpClient::connect(char* domain, uint16_t port) {
  int ret;
  if (!client.connect(domain, port)) {
      debug_tls(" could not connect to server : %s\n", domain);
      return -1;
   d46ae:	f04f 30ff 	mov.w	r0, #4294967295
  if((ret = mbedtls_ssl_set_hostname(&ssl, domain)) != 0) {
    return ret;
  }

  return this->handShake();
}
   d46b2:	bd38      	pop	{r3, r4, r5, pc}

000d46b4 <mbedtls_sha256_init>:

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
   d46b4:	226c      	movs	r2, #108	; 0x6c
   d46b6:	2100      	movs	r1, #0
   d46b8:	f012 bc6f 	b.w	e6f9a <memset>

000d46bc <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
   d46bc:	b110      	cbz	r0, d46c4 <mbedtls_sha256_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
   d46be:	216c      	movs	r1, #108	; 0x6c
   d46c0:	f005 bf0e 	b.w	da4e0 <mbedtls_platform_zeroize>
   d46c4:	4770      	bx	lr

000d46c6 <mbedtls_sha256_clone>:
}

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
   d46c6:	b508      	push	{r3, lr}
    SHA256_VALIDATE( dst != NULL );
    SHA256_VALIDATE( src != NULL );

    *dst = *src;
   d46c8:	226c      	movs	r2, #108	; 0x6c
   d46ca:	f012 fc40 	bl	e6f4e <memcpy>
   d46ce:	bd08      	pop	{r3, pc}

000d46d0 <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
   d46d0:	2300      	movs	r3, #0
   d46d2:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
   d46d4:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
   d46d6:	b9a1      	cbnz	r1, d4702 <mbedtls_sha256_starts_ret+0x32>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
   d46d8:	4b18      	ldr	r3, [pc, #96]	; (d473c <mbedtls_sha256_starts_ret+0x6c>)
   d46da:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
   d46dc:	4b18      	ldr	r3, [pc, #96]	; (d4740 <mbedtls_sha256_starts_ret+0x70>)
   d46de:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
   d46e0:	4b18      	ldr	r3, [pc, #96]	; (d4744 <mbedtls_sha256_starts_ret+0x74>)
   d46e2:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
   d46e4:	4b18      	ldr	r3, [pc, #96]	; (d4748 <mbedtls_sha256_starts_ret+0x78>)
   d46e6:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0x510E527F;
   d46e8:	4b18      	ldr	r3, [pc, #96]	; (d474c <mbedtls_sha256_starts_ret+0x7c>)
   d46ea:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x9B05688C;
   d46ec:	4b18      	ldr	r3, [pc, #96]	; (d4750 <mbedtls_sha256_starts_ret+0x80>)
   d46ee:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
   d46f0:	4b18      	ldr	r3, [pc, #96]	; (d4754 <mbedtls_sha256_starts_ret+0x84>)
   d46f2:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
   d46f4:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   d46f8:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   d46fc:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   d4700:	e018      	b.n	d4734 <mbedtls_sha256_starts_ret+0x64>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
   d4702:	4b15      	ldr	r3, [pc, #84]	; (d4758 <mbedtls_sha256_starts_ret+0x88>)
   d4704:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0x367CD507;
   d4706:	4b15      	ldr	r3, [pc, #84]	; (d475c <mbedtls_sha256_starts_ret+0x8c>)
   d4708:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3070DD17;
   d470a:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
   d470e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
   d4712:	f503 6301 	add.w	r3, r3, #2064	; 0x810
   d4716:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xF70E5939;
   d4718:	4b11      	ldr	r3, [pc, #68]	; (d4760 <mbedtls_sha256_starts_ret+0x90>)
   d471a:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
   d471c:	4b11      	ldr	r3, [pc, #68]	; (d4764 <mbedtls_sha256_starts_ret+0x94>)
   d471e:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x68581511;
   d4720:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
   d4724:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
   d4728:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
   d472c:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
   d472e:	4b0e      	ldr	r3, [pc, #56]	; (d4768 <mbedtls_sha256_starts_ret+0x98>)
   d4730:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
   d4732:	4b0e      	ldr	r3, [pc, #56]	; (d476c <mbedtls_sha256_starts_ret+0x9c>)
   d4734:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
   d4736:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
   d4738:	2000      	movs	r0, #0
   d473a:	4770      	bx	lr
   d473c:	6a09e667 	.word	0x6a09e667
   d4740:	bb67ae85 	.word	0xbb67ae85
   d4744:	3c6ef372 	.word	0x3c6ef372
   d4748:	a54ff53a 	.word	0xa54ff53a
   d474c:	510e527f 	.word	0x510e527f
   d4750:	9b05688c 	.word	0x9b05688c
   d4754:	1f83d9ab 	.word	0x1f83d9ab
   d4758:	c1059ed8 	.word	0xc1059ed8
   d475c:	367cd507 	.word	0x367cd507
   d4760:	f70e5939 	.word	0xf70e5939
   d4764:	ffc00b31 	.word	0xffc00b31
   d4768:	64f98fa7 	.word	0x64f98fa7
   d476c:	befa4fa4 	.word	0xbefa4fa4

000d4770 <mbedtls_internal_sha256_process>:
        (d) += temp1; (h) = temp1 + temp2;              \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
   d4770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4774:	b0cf      	sub	sp, #316	; 0x13c
   d4776:	1d03      	adds	r3, r0, #4
   d4778:	9305      	str	r3, [sp, #20]
   d477a:	461a      	mov	r2, r3
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
   d477c:	2300      	movs	r3, #0
        A[i] = ctx->state[i];
   d477e:	ac06      	add	r4, sp, #24
   d4780:	f852 0f04 	ldr.w	r0, [r2, #4]!
   d4784:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
   d4788:	3301      	adds	r3, #1
   d478a:	2b08      	cmp	r3, #8
   d478c:	d1f7      	bne.n	d477e <mbedtls_internal_sha256_process+0xe>
   d478e:	4608      	mov	r0, r1
   d4790:	2200      	movs	r2, #0
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
   d4792:	ac0e      	add	r4, sp, #56	; 0x38
   d4794:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
   d4798:	78c3      	ldrb	r3, [r0, #3]
   d479a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   d479e:	7845      	ldrb	r5, [r0, #1]
   d47a0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   d47a4:	7885      	ldrb	r5, [r0, #2]
   d47a6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   d47aa:	f844 3022 	str.w	r3, [r4, r2, lsl #2]

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
   d47ae:	3201      	adds	r2, #1
   d47b0:	2a10      	cmp	r2, #16
   d47b2:	f100 0004 	add.w	r0, r0, #4
   d47b6:	d1ed      	bne.n	d4794 <mbedtls_internal_sha256_process+0x24>
   d47b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d47ba:	4c9f      	ldr	r4, [pc, #636]	; (d4a38 <mbedtls_internal_sha256_process+0x2c8>)
   d47bc:	9300      	str	r3, [sp, #0]
   d47be:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   d47c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d47c2:	9f08      	ldr	r7, [sp, #32]
   d47c4:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   d47c8:	f8dd e01c 	ldr.w	lr, [sp, #28]
   d47cc:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   d47d0:	f8dd 9018 	ldr.w	r9, [sp, #24]
   d47d4:	ad0f      	add	r5, sp, #60	; 0x3c
   d47d6:	f104 0a40 	add.w	sl, r4, #64	; 0x40
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
   d47da:	f854 0c04 	ldr.w	r0, [r4, #-4]
   d47de:	f855 1c04 	ldr.w	r1, [r5, #-4]
   d47e2:	ea4f 22f8 	mov.w	r2, r8, ror #11
   d47e6:	ea86 0c0b 	eor.w	ip, r6, fp
   d47ea:	ea82 12b8 	eor.w	r2, r2, r8, ror #6
   d47ee:	4401      	add	r1, r0
   d47f0:	ea82 6278 	eor.w	r2, r2, r8, ror #25
   d47f4:	ea0c 0c08 	and.w	ip, ip, r8
   d47f8:	ea8c 0c06 	eor.w	ip, ip, r6
   d47fc:	440a      	add	r2, r1
   d47fe:	9900      	ldr	r1, [sp, #0]
   d4800:	4462      	add	r2, ip
   d4802:	ea4f 3079 	mov.w	r0, r9, ror #13
   d4806:	ea4e 0c09 	orr.w	ip, lr, r9
   d480a:	440a      	add	r2, r1
   d480c:	ea0c 0c07 	and.w	ip, ip, r7
   d4810:	ea0e 0109 	and.w	r1, lr, r9
   d4814:	ea80 00b9 	eor.w	r0, r0, r9, ror #2
   d4818:	ea4c 0101 	orr.w	r1, ip, r1
   d481c:	ea80 50b9 	eor.w	r0, r0, r9, ror #22
   d4820:	4408      	add	r0, r1
   d4822:	4413      	add	r3, r2
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
   d4824:	6829      	ldr	r1, [r5, #0]
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
   d4826:	4402      	add	r2, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
   d4828:	6820      	ldr	r0, [r4, #0]
   d482a:	ea8b 0c08 	eor.w	ip, fp, r8
   d482e:	4401      	add	r1, r0
   d4830:	ea0c 0c03 	and.w	ip, ip, r3
   d4834:	ea4f 20f3 	mov.w	r0, r3, ror #11
   d4838:	ea8c 0c0b 	eor.w	ip, ip, fp
   d483c:	440e      	add	r6, r1
   d483e:	ea80 10b3 	eor.w	r0, r0, r3, ror #6
   d4842:	eb06 010c 	add.w	r1, r6, ip
   d4846:	ea80 6073 	eor.w	r0, r0, r3, ror #25
   d484a:	180e      	adds	r6, r1, r0
   d484c:	eb06 0c07 	add.w	ip, r6, r7
   d4850:	ea42 0009 	orr.w	r0, r2, r9
   d4854:	ea4f 3772 	mov.w	r7, r2, ror #13
   d4858:	ea02 0109 	and.w	r1, r2, r9
   d485c:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
   d4860:	ea00 000e 	and.w	r0, r0, lr
   d4864:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
   d4868:	4308      	orrs	r0, r1
   d486a:	4438      	add	r0, r7
   d486c:	4430      	add	r0, r6
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
   d486e:	6869      	ldr	r1, [r5, #4]
   d4870:	6866      	ldr	r6, [r4, #4]
   d4872:	ea83 0708 	eor.w	r7, r3, r8
   d4876:	440e      	add	r6, r1
   d4878:	ea07 070c 	and.w	r7, r7, ip
   d487c:	ea4f 21fc 	mov.w	r1, ip, ror #11
   d4880:	ea87 0708 	eor.w	r7, r7, r8
   d4884:	44b3      	add	fp, r6
   d4886:	ea81 11bc 	eor.w	r1, r1, ip, ror #6
   d488a:	eb0b 0607 	add.w	r6, fp, r7
   d488e:	ea81 617c 	eor.w	r1, r1, ip, ror #25
   d4892:	eb06 0b01 	add.w	fp, r6, r1
   d4896:	ea4f 3770 	mov.w	r7, r0, ror #13
   d489a:	ea42 0100 	orr.w	r1, r2, r0
   d489e:	ea02 0600 	and.w	r6, r2, r0
   d48a2:	ea87 07b0 	eor.w	r7, r7, r0, ror #2
   d48a6:	ea01 0109 	and.w	r1, r1, r9
   d48aa:	ea87 57b0 	eor.w	r7, r7, r0, ror #22
   d48ae:	4331      	orrs	r1, r6
   d48b0:	4439      	add	r1, r7
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
   d48b2:	68ae      	ldr	r6, [r5, #8]
   d48b4:	68a7      	ldr	r7, [r4, #8]

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
   d48b6:	4459      	add	r1, fp
   d48b8:	44de      	add	lr, fp
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
   d48ba:	443e      	add	r6, r7
   d48bc:	ea83 0b0c 	eor.w	fp, r3, ip
   d48c0:	44b0      	add	r8, r6
   d48c2:	ea0b 0b0e 	and.w	fp, fp, lr
   d48c6:	ea4f 26fe 	mov.w	r6, lr, ror #11
   d48ca:	ea8b 0b03 	eor.w	fp, fp, r3
   d48ce:	ea86 16be 	eor.w	r6, r6, lr, ror #6
   d48d2:	44d8      	add	r8, fp
   d48d4:	ea86 667e 	eor.w	r6, r6, lr, ror #25
   d48d8:	4446      	add	r6, r8
   d48da:	ea4f 3b71 	mov.w	fp, r1, ror #13
   d48de:	ea40 0801 	orr.w	r8, r0, r1
   d48e2:	ea00 0701 	and.w	r7, r0, r1
   d48e6:	ea8b 0bb1 	eor.w	fp, fp, r1, ror #2
   d48ea:	ea08 0802 	and.w	r8, r8, r2
   d48ee:	ea8b 5bb1 	eor.w	fp, fp, r1, ror #22
   d48f2:	ea48 0807 	orr.w	r8, r8, r7
   d48f6:	44d8      	add	r8, fp
   d48f8:	44b0      	add	r8, r6
   d48fa:	44b1      	add	r9, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
   d48fc:	68e7      	ldr	r7, [r4, #12]
   d48fe:	68ee      	ldr	r6, [r5, #12]
   d4900:	ea8c 0b0e 	eor.w	fp, ip, lr
   d4904:	4437      	add	r7, r6
   d4906:	ea0b 0b09 	and.w	fp, fp, r9
   d490a:	ea8b 0b0c 	eor.w	fp, fp, ip
   d490e:	443b      	add	r3, r7
   d4910:	eb03 070b 	add.w	r7, r3, fp
   d4914:	ea4f 23f9 	mov.w	r3, r9, ror #11
   d4918:	ea83 13b9 	eor.w	r3, r3, r9, ror #6
   d491c:	ea83 6379 	eor.w	r3, r3, r9, ror #25
   d4920:	18fe      	adds	r6, r7, r3
   d4922:	1993      	adds	r3, r2, r6
   d4924:	9300      	str	r3, [sp, #0]
   d4926:	ea4f 3778 	mov.w	r7, r8, ror #13
   d492a:	ea41 0308 	orr.w	r3, r1, r8
   d492e:	ea01 0208 	and.w	r2, r1, r8
   d4932:	ea87 07b8 	eor.w	r7, r7, r8, ror #2
   d4936:	4003      	ands	r3, r0
   d4938:	ea87 57b8 	eor.w	r7, r7, r8, ror #22
   d493c:	4313      	orrs	r3, r2
   d493e:	443b      	add	r3, r7
   d4940:	4433      	add	r3, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
   d4942:	692a      	ldr	r2, [r5, #16]
   d4944:	6926      	ldr	r6, [r4, #16]
   d4946:	4432      	add	r2, r6
   d4948:	4494      	add	ip, r2
   d494a:	9a00      	ldr	r2, [sp, #0]
   d494c:	ea8e 0609 	eor.w	r6, lr, r9
   d4950:	4016      	ands	r6, r2
   d4952:	ea4f 27f2 	mov.w	r7, r2, ror #11
   d4956:	ea86 060e 	eor.w	r6, r6, lr
   d495a:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
   d495e:	44b4      	add	ip, r6
   d4960:	ea87 6772 	eor.w	r7, r7, r2, ror #25
   d4964:	eb0c 0207 	add.w	r2, ip, r7
   d4968:	ea4f 3b73 	mov.w	fp, r3, ror #13
   d496c:	ea48 0703 	orr.w	r7, r8, r3
   d4970:	1886      	adds	r6, r0, r2
   d4972:	400f      	ands	r7, r1
   d4974:	ea08 0003 	and.w	r0, r8, r3
   d4978:	ea8b 0bb3 	eor.w	fp, fp, r3, ror #2
   d497c:	ea8b 5bb3 	eor.w	fp, fp, r3, ror #22
   d4980:	4307      	orrs	r7, r0
   d4982:	445f      	add	r7, fp
   d4984:	4417      	add	r7, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
   d4986:	6960      	ldr	r0, [r4, #20]
   d4988:	696a      	ldr	r2, [r5, #20]
   d498a:	4410      	add	r0, r2
   d498c:	9a00      	ldr	r2, [sp, #0]
   d498e:	ea89 0c02 	eor.w	ip, r9, r2
   d4992:	ea0c 0c06 	and.w	ip, ip, r6
   d4996:	4486      	add	lr, r0
   d4998:	ea8c 0c09 	eor.w	ip, ip, r9
   d499c:	eb0e 000c 	add.w	r0, lr, ip
   d49a0:	ea4f 2ef6 	mov.w	lr, r6, ror #11
   d49a4:	ea8e 1eb6 	eor.w	lr, lr, r6, ror #6
   d49a8:	ea8e 6e76 	eor.w	lr, lr, r6, ror #25
   d49ac:	eb00 020e 	add.w	r2, r0, lr
   d49b0:	ea4f 3077 	mov.w	r0, r7, ror #13
   d49b4:	ea43 0e07 	orr.w	lr, r3, r7
   d49b8:	eb01 0b02 	add.w	fp, r1, r2
   d49bc:	ea0e 0e08 	and.w	lr, lr, r8
   d49c0:	ea03 0107 	and.w	r1, r3, r7
   d49c4:	ea80 00b7 	eor.w	r0, r0, r7, ror #2
   d49c8:	ea80 50b7 	eor.w	r0, r0, r7, ror #22
   d49cc:	ea4e 0e01 	orr.w	lr, lr, r1
   d49d0:	4486      	add	lr, r0
   d49d2:	4496      	add	lr, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
   d49d4:	69a1      	ldr	r1, [r4, #24]
   d49d6:	69aa      	ldr	r2, [r5, #24]
   d49d8:	4411      	add	r1, r2
   d49da:	9a00      	ldr	r2, [sp, #0]
   d49dc:	ea82 0006 	eor.w	r0, r2, r6
   d49e0:	ea00 000b 	and.w	r0, r0, fp
   d49e4:	4050      	eors	r0, r2
   d49e6:	4489      	add	r9, r1
   d49e8:	eb09 0100 	add.w	r1, r9, r0
   d49ec:	ea4f 29fb 	mov.w	r9, fp, ror #11
   d49f0:	ea89 19bb 	eor.w	r9, r9, fp, ror #6
   d49f4:	ea89 697b 	eor.w	r9, r9, fp, ror #25
   d49f8:	eb01 0209 	add.w	r2, r1, r9
   d49fc:	ea4f 307e 	mov.w	r0, lr, ror #13
   d4a00:	ea47 090e 	orr.w	r9, r7, lr
   d4a04:	ea80 00be 	eor.w	r0, r0, lr, ror #2
   d4a08:	ea09 0903 	and.w	r9, r9, r3
   d4a0c:	ea07 010e 	and.w	r1, r7, lr
   d4a10:	ea80 50be 	eor.w	r0, r0, lr, ror #22
   d4a14:	ea49 0901 	orr.w	r9, r9, r1
   d4a18:	3420      	adds	r4, #32
   d4a1a:	4481      	add	r9, r0
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
   d4a1c:	45a2      	cmp	sl, r4
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
   d4a1e:	4490      	add	r8, r2
   d4a20:	4491      	add	r9, r2
   d4a22:	f105 0520 	add.w	r5, r5, #32
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
   d4a26:	f47f aed8 	bne.w	d47da <mbedtls_internal_sha256_process+0x6a>
   d4a2a:	2200      	movs	r2, #0
   d4a2c:	f8df a00c 	ldr.w	sl, [pc, #12]	; d4a3c <mbedtls_internal_sha256_process+0x2cc>
   d4a30:	9204      	str	r2, [sp, #16]
   d4a32:	ac0e      	add	r4, sp, #56	; 0x38
   d4a34:	e004      	b.n	d4a40 <mbedtls_internal_sha256_process+0x2d0>
   d4a36:	bf00      	nop
   d4a38:	000e811c 	.word	0x000e811c
   d4a3c:	000e8118 	.word	0x000e8118
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
   d4a40:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   d4a42:	6860      	ldr	r0, [r4, #4]
   d4a44:	6a61      	ldr	r1, [r4, #36]	; 0x24
   d4a46:	ea4f 45f2 	mov.w	r5, r2, ror #19
   d4a4a:	ea85 4572 	eor.w	r5, r5, r2, ror #17
   d4a4e:	ea85 2592 	eor.w	r5, r5, r2, lsr #10
   d4a52:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
   d4a56:	9a04      	ldr	r2, [sp, #16]
   d4a58:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
   d4a5c:	ea4f 4cb0 	mov.w	ip, r0, ror #18
   d4a60:	440a      	add	r2, r1
   d4a62:	ea8c 1cf0 	eor.w	ip, ip, r0, ror #7
   d4a66:	ea4f 21f8 	mov.w	r1, r8, ror #11
   d4a6a:	ea8c 0cd0 	eor.w	ip, ip, r0, lsr #3
   d4a6e:	ea81 11b8 	eor.w	r1, r1, r8, ror #6
   d4a72:	4415      	add	r5, r2
   d4a74:	eb05 020c 	add.w	r2, r5, ip
   d4a78:	ea81 6578 	eor.w	r5, r1, r8, ror #25
   d4a7c:	ea86 010b 	eor.w	r1, r6, fp
   d4a80:	ea01 0108 	and.w	r1, r1, r8
   d4a84:	9203      	str	r2, [sp, #12]
   d4a86:	ea81 0206 	eor.w	r2, r1, r6
   d4a8a:	18a9      	adds	r1, r5, r2
   d4a8c:	f8da 2040 	ldr.w	r2, [sl, #64]	; 0x40
   d4a90:	440a      	add	r2, r1
   d4a92:	9903      	ldr	r1, [sp, #12]
   d4a94:	6421      	str	r1, [r4, #64]	; 0x40
   d4a96:	440a      	add	r2, r1
   d4a98:	9900      	ldr	r1, [sp, #0]
   d4a9a:	440a      	add	r2, r1
   d4a9c:	18d3      	adds	r3, r2, r3
   d4a9e:	ea4e 0509 	orr.w	r5, lr, r9
   d4aa2:	ea4f 3179 	mov.w	r1, r9, ror #13
   d4aa6:	9300      	str	r3, [sp, #0]
   d4aa8:	403d      	ands	r5, r7
   d4aaa:	ea0e 0309 	and.w	r3, lr, r9
   d4aae:	ea81 01b9 	eor.w	r1, r1, r9, ror #2
   d4ab2:	ea81 51b9 	eor.w	r1, r1, r9, ror #22
   d4ab6:	432b      	orrs	r3, r5
   d4ab8:	440b      	add	r3, r1
   d4aba:	441a      	add	r2, r3
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
   d4abc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d4abe:	68a5      	ldr	r5, [r4, #8]
   d4ac0:	ea4f 41f3 	mov.w	r1, r3, ror #19
   d4ac4:	ea81 4173 	eor.w	r1, r1, r3, ror #17
   d4ac8:	ea81 2193 	eor.w	r1, r1, r3, lsr #10
   d4acc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d4ace:	4403      	add	r3, r0
   d4ad0:	4419      	add	r1, r3
   d4ad2:	ea4f 43b5 	mov.w	r3, r5, ror #18
   d4ad6:	ea83 13f5 	eor.w	r3, r3, r5, ror #7
   d4ada:	ea83 0cd5 	eor.w	ip, r3, r5, lsr #3
   d4ade:	eb01 030c 	add.w	r3, r1, ip
   d4ae2:	f8da 0044 	ldr.w	r0, [sl, #68]	; 0x44
   d4ae6:	9900      	ldr	r1, [sp, #0]
   d4ae8:	6463      	str	r3, [r4, #68]	; 0x44
   d4aea:	ea8b 0c08 	eor.w	ip, fp, r8
   d4aee:	4430      	add	r0, r6
   d4af0:	ea0c 0c01 	and.w	ip, ip, r1
   d4af4:	ea8c 0c0b 	eor.w	ip, ip, fp
   d4af8:	18c1      	adds	r1, r0, r3
   d4afa:	448c      	add	ip, r1
   d4afc:	9900      	ldr	r1, [sp, #0]
   d4afe:	ea4f 20f1 	mov.w	r0, r1, ror #11
   d4b02:	ea80 10b1 	eor.w	r0, r0, r1, ror #6
   d4b06:	ea80 6071 	eor.w	r0, r0, r1, ror #25
   d4b0a:	eb00 010c 	add.w	r1, r0, ip
   d4b0e:	19c8      	adds	r0, r1, r7
   d4b10:	9001      	str	r0, [sp, #4]
   d4b12:	ea4f 3c72 	mov.w	ip, r2, ror #13
   d4b16:	ea42 0009 	orr.w	r0, r2, r9
   d4b1a:	ea02 0709 	and.w	r7, r2, r9
   d4b1e:	ea8c 0cb2 	eor.w	ip, ip, r2, ror #2
   d4b22:	ea00 000e 	and.w	r0, r0, lr
   d4b26:	ea8c 5cb2 	eor.w	ip, ip, r2, ror #22
   d4b2a:	4338      	orrs	r0, r7
   d4b2c:	4460      	add	r0, ip
   d4b2e:	4408      	add	r0, r1
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
   d4b30:	9903      	ldr	r1, [sp, #12]
   d4b32:	68e7      	ldr	r7, [r4, #12]
   d4b34:	ea4f 46f1 	mov.w	r6, r1, ror #19
   d4b38:	ea86 4671 	eor.w	r6, r6, r1, ror #17
   d4b3c:	ea86 2691 	eor.w	r6, r6, r1, lsr #10
   d4b40:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d4b42:	ea4f 4cb7 	mov.w	ip, r7, ror #18
   d4b46:	4429      	add	r1, r5
   d4b48:	440e      	add	r6, r1
   d4b4a:	ea8c 1cf7 	eor.w	ip, ip, r7, ror #7
   d4b4e:	9900      	ldr	r1, [sp, #0]
   d4b50:	ea8c 0cd7 	eor.w	ip, ip, r7, lsr #3
   d4b54:	4466      	add	r6, ip
   d4b56:	ea81 0c08 	eor.w	ip, r1, r8
   d4b5a:	9901      	ldr	r1, [sp, #4]
   d4b5c:	64a6      	str	r6, [r4, #72]	; 0x48
   d4b5e:	ea0c 0c01 	and.w	ip, ip, r1
   d4b62:	f8da 1048 	ldr.w	r1, [sl, #72]	; 0x48
   d4b66:	4459      	add	r1, fp
   d4b68:	198d      	adds	r5, r1, r6
   d4b6a:	ea8c 0c08 	eor.w	ip, ip, r8
   d4b6e:	9901      	ldr	r1, [sp, #4]
   d4b70:	44ac      	add	ip, r5
   d4b72:	9d01      	ldr	r5, [sp, #4]
   d4b74:	ea4f 21f1 	mov.w	r1, r1, ror #11
   d4b78:	ea81 11b5 	eor.w	r1, r1, r5, ror #6
   d4b7c:	ea81 6175 	eor.w	r1, r1, r5, ror #25
   d4b80:	eb01 050c 	add.w	r5, r1, ip
   d4b84:	ea42 0100 	orr.w	r1, r2, r0
   d4b88:	ea4f 3c70 	mov.w	ip, r0, ror #13
   d4b8c:	eb05 0b0e 	add.w	fp, r5, lr
   d4b90:	ea8c 0cb0 	eor.w	ip, ip, r0, ror #2
   d4b94:	ea02 0e00 	and.w	lr, r2, r0
   d4b98:	ea01 0109 	and.w	r1, r1, r9
   d4b9c:	ea8c 5cb0 	eor.w	ip, ip, r0, ror #22
   d4ba0:	ea41 010e 	orr.w	r1, r1, lr
   d4ba4:	4461      	add	r1, ip
   d4ba6:	4429      	add	r1, r5
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
   d4ba8:	ea4f 45f3 	mov.w	r5, r3, ror #19
   d4bac:	ea85 4573 	eor.w	r5, r5, r3, ror #17
   d4bb0:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
   d4bb4:	6b25      	ldr	r5, [r4, #48]	; 0x30
   d4bb6:	f8d4 c010 	ldr.w	ip, [r4, #16]
   d4bba:	442f      	add	r7, r5
   d4bbc:	443b      	add	r3, r7
   d4bbe:	ea4f 47bc 	mov.w	r7, ip, ror #18
   d4bc2:	ea87 17fc 	eor.w	r7, r7, ip, ror #7
   d4bc6:	ea87 0edc 	eor.w	lr, r7, ip, lsr #3
   d4bca:	eb03 070e 	add.w	r7, r3, lr
   d4bce:	e89d 0028 	ldmia.w	sp, {r3, r5}
   d4bd2:	405d      	eors	r5, r3
   d4bd4:	ea05 050b 	and.w	r5, r5, fp
   d4bd8:	405d      	eors	r5, r3
   d4bda:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
   d4bde:	64e7      	str	r7, [r4, #76]	; 0x4c
   d4be0:	4498      	add	r8, r3
   d4be2:	44b8      	add	r8, r7
   d4be4:	4445      	add	r5, r8
   d4be6:	ea4f 28fb 	mov.w	r8, fp, ror #11
   d4bea:	ea88 18bb 	eor.w	r8, r8, fp, ror #6
   d4bee:	ea88 687b 	eor.w	r8, r8, fp, ror #25
   d4bf2:	eb08 0305 	add.w	r3, r8, r5
   d4bf6:	eb03 0509 	add.w	r5, r3, r9
   d4bfa:	ea40 0801 	orr.w	r8, r0, r1
   d4bfe:	ea4f 3e71 	mov.w	lr, r1, ror #13
   d4c02:	9502      	str	r5, [sp, #8]
   d4c04:	ea8e 0eb1 	eor.w	lr, lr, r1, ror #2
   d4c08:	ea00 0501 	and.w	r5, r0, r1
   d4c0c:	ea08 0802 	and.w	r8, r8, r2
   d4c10:	ea8e 5eb1 	eor.w	lr, lr, r1, ror #22
   d4c14:	ea48 0805 	orr.w	r8, r8, r5
   d4c18:	44f0      	add	r8, lr
   d4c1a:	4498      	add	r8, r3
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   d4c1c:	ea4f 4ef6 	mov.w	lr, r6, ror #19
   d4c20:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d4c22:	6965      	ldr	r5, [r4, #20]
   d4c24:	ea8e 4e76 	eor.w	lr, lr, r6, ror #17
   d4c28:	ea8e 2696 	eor.w	r6, lr, r6, lsr #10
   d4c2c:	eb0c 0e03 	add.w	lr, ip, r3
   d4c30:	9b01      	ldr	r3, [sp, #4]
   d4c32:	4476      	add	r6, lr
   d4c34:	ea83 0c0b 	eor.w	ip, r3, fp
   d4c38:	ea4f 4eb5 	mov.w	lr, r5, ror #18
   d4c3c:	9b02      	ldr	r3, [sp, #8]
   d4c3e:	ea8e 1ef5 	eor.w	lr, lr, r5, ror #7
   d4c42:	ea8e 09d5 	eor.w	r9, lr, r5, lsr #3
   d4c46:	ea0c 0c03 	and.w	ip, ip, r3
   d4c4a:	9b01      	ldr	r3, [sp, #4]
   d4c4c:	eb06 0e09 	add.w	lr, r6, r9
   d4c50:	f8da 6050 	ldr.w	r6, [sl, #80]	; 0x50
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
   d4c54:	f8d4 9018 	ldr.w	r9, [r4, #24]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   d4c58:	f8c4 e050 	str.w	lr, [r4, #80]	; 0x50
   d4c5c:	ea8c 0c03 	eor.w	ip, ip, r3
   d4c60:	9b00      	ldr	r3, [sp, #0]
   d4c62:	4476      	add	r6, lr
   d4c64:	441e      	add	r6, r3
   d4c66:	9b02      	ldr	r3, [sp, #8]
   d4c68:	44b4      	add	ip, r6
   d4c6a:	9e02      	ldr	r6, [sp, #8]
   d4c6c:	ea4f 23f3 	mov.w	r3, r3, ror #11
   d4c70:	ea83 13b6 	eor.w	r3, r3, r6, ror #6
   d4c74:	ea83 6376 	eor.w	r3, r3, r6, ror #25
   d4c78:	eb03 060c 	add.w	r6, r3, ip
   d4c7c:	1993      	adds	r3, r2, r6
   d4c7e:	9300      	str	r3, [sp, #0]
   d4c80:	ea41 0308 	orr.w	r3, r1, r8
   d4c84:	ea01 0208 	and.w	r2, r1, r8
   d4c88:	4003      	ands	r3, r0
   d4c8a:	4313      	orrs	r3, r2
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
   d4c8c:	ea4f 42f7 	mov.w	r2, r7, ror #19
   d4c90:	ea82 4277 	eor.w	r2, r2, r7, ror #17
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   d4c94:	ea4f 3c78 	mov.w	ip, r8, ror #13
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
   d4c98:	ea82 2797 	eor.w	r7, r2, r7, lsr #10
   d4c9c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   d4c9e:	ea8c 0cb8 	eor.w	ip, ip, r8, ror #2
   d4ca2:	ea8c 5cb8 	eor.w	ip, ip, r8, ror #22
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
   d4ca6:	4415      	add	r5, r2
   d4ca8:	9a02      	ldr	r2, [sp, #8]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   d4caa:	4463      	add	r3, ip
   d4cac:	4433      	add	r3, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
   d4cae:	442f      	add	r7, r5
   d4cb0:	ea8b 0602 	eor.w	r6, fp, r2
   d4cb4:	ea4f 45b9 	mov.w	r5, r9, ror #18
   d4cb8:	9a00      	ldr	r2, [sp, #0]
   d4cba:	ea85 15f9 	eor.w	r5, r5, r9, ror #7
   d4cbe:	ea85 05d9 	eor.w	r5, r5, r9, lsr #3
   d4cc2:	4016      	ands	r6, r2
   d4cc4:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
   d4cc8:	443d      	add	r5, r7
   d4cca:	9f01      	ldr	r7, [sp, #4]
   d4ccc:	6565      	str	r5, [r4, #84]	; 0x54
   d4cce:	442a      	add	r2, r5
   d4cd0:	443a      	add	r2, r7
   d4cd2:	ea86 060b 	eor.w	r6, r6, fp
   d4cd6:	4416      	add	r6, r2
   d4cd8:	9a00      	ldr	r2, [sp, #0]
   d4cda:	ea4f 27f2 	mov.w	r7, r2, ror #11
   d4cde:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
   d4ce2:	ea87 6772 	eor.w	r7, r7, r2, ror #25
   d4ce6:	19ba      	adds	r2, r7, r6
   d4ce8:	1886      	adds	r6, r0, r2
   d4cea:	ea4f 3073 	mov.w	r0, r3, ror #13
   d4cee:	ea80 00b3 	eor.w	r0, r0, r3, ror #2
   d4cf2:	ea48 0703 	orr.w	r7, r8, r3
   d4cf6:	ea80 5cb3 	eor.w	ip, r0, r3, ror #22
   d4cfa:	400f      	ands	r7, r1
   d4cfc:	ea08 0003 	and.w	r0, r8, r3
   d4d00:	4307      	orrs	r7, r0
   d4d02:	4467      	add	r7, ip
   d4d04:	4417      	add	r7, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
   d4d06:	ea4f 42fe 	mov.w	r2, lr, ror #19
   d4d0a:	ea82 427e 	eor.w	r2, r2, lr, ror #17
   d4d0e:	ea82 2e9e 	eor.w	lr, r2, lr, lsr #10
   d4d12:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d4d14:	69e0      	ldr	r0, [r4, #28]
   d4d16:	4491      	add	r9, r2
   d4d18:	eb0e 0209 	add.w	r2, lr, r9
   d4d1c:	ea4f 49b0 	mov.w	r9, r0, ror #18
   d4d20:	ea89 19f0 	eor.w	r9, r9, r0, ror #7
   d4d24:	ea89 09d0 	eor.w	r9, r9, r0, lsr #3
   d4d28:	4491      	add	r9, r2
   d4d2a:	9a02      	ldr	r2, [sp, #8]
   d4d2c:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
   d4d30:	4696      	mov	lr, r2
   d4d32:	9a00      	ldr	r2, [sp, #0]
   d4d34:	ea8e 0c02 	eor.w	ip, lr, r2
   d4d38:	f8da 2058 	ldr.w	r2, [sl, #88]	; 0x58
   d4d3c:	ea0c 0c06 	and.w	ip, ip, r6
   d4d40:	ea8c 0c0e 	eor.w	ip, ip, lr
   d4d44:	444a      	add	r2, r9
   d4d46:	ea4f 2ef6 	mov.w	lr, r6, ror #11
   d4d4a:	445a      	add	r2, fp
   d4d4c:	ea8e 1eb6 	eor.w	lr, lr, r6, ror #6
   d4d50:	4462      	add	r2, ip
   d4d52:	ea8e 6e76 	eor.w	lr, lr, r6, ror #25
   d4d56:	4472      	add	r2, lr
   d4d58:	ea4f 3c77 	mov.w	ip, r7, ror #13
   d4d5c:	ea43 0e07 	orr.w	lr, r3, r7
   d4d60:	eb01 0b02 	add.w	fp, r1, r2
   d4d64:	ea0e 0e08 	and.w	lr, lr, r8
   d4d68:	ea03 0107 	and.w	r1, r3, r7
   d4d6c:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
   d4d70:	ea8c 5cb7 	eor.w	ip, ip, r7, ror #22
   d4d74:	ea4e 0e01 	orr.w	lr, lr, r1
   d4d78:	44e6      	add	lr, ip
   d4d7a:	4496      	add	lr, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
   d4d7c:	ea4f 42f5 	mov.w	r2, r5, ror #19
   d4d80:	6a21      	ldr	r1, [r4, #32]
   d4d82:	ea82 4275 	eor.w	r2, r2, r5, ror #17
   d4d86:	ea82 2595 	eor.w	r5, r2, r5, lsr #10
   d4d8a:	9a03      	ldr	r2, [sp, #12]
   d4d8c:	ea4f 4cb1 	mov.w	ip, r1, ror #18
   d4d90:	4410      	add	r0, r2
   d4d92:	ea8c 1cf1 	eor.w	ip, ip, r1, ror #7
   d4d96:	f8da 205c 	ldr.w	r2, [sl, #92]	; 0x5c
   d4d9a:	4405      	add	r5, r0
   d4d9c:	ea8c 01d1 	eor.w	r1, ip, r1, lsr #3
   d4da0:	440d      	add	r5, r1
   d4da2:	9902      	ldr	r1, [sp, #8]
   d4da4:	442a      	add	r2, r5
   d4da6:	eb02 0901 	add.w	r9, r2, r1
   d4daa:	9a00      	ldr	r2, [sp, #0]
   d4dac:	65e5      	str	r5, [r4, #92]	; 0x5c
   d4dae:	ea82 0106 	eor.w	r1, r2, r6
   d4db2:	ea01 010b 	and.w	r1, r1, fp
   d4db6:	4051      	eors	r1, r2
   d4db8:	ea4f 22fb 	mov.w	r2, fp, ror #11
   d4dbc:	ea82 12bb 	eor.w	r2, r2, fp, ror #6
   d4dc0:	4489      	add	r9, r1
   d4dc2:	ea82 627b 	eor.w	r2, r2, fp, ror #25
   d4dc6:	444a      	add	r2, r9
   d4dc8:	ea4f 307e 	mov.w	r0, lr, ror #13
   d4dcc:	ea47 090e 	orr.w	r9, r7, lr
   d4dd0:	ea80 00be 	eor.w	r0, r0, lr, ror #2
   d4dd4:	ea09 0903 	and.w	r9, r9, r3
   d4dd8:	ea07 010e 	and.w	r1, r7, lr
   d4ddc:	ea80 50be 	eor.w	r0, r0, lr, ror #22
   d4de0:	ea49 0901 	orr.w	r9, r9, r1
   d4de4:	4481      	add	r9, r0
   d4de6:	4490      	add	r8, r2
   d4de8:	4491      	add	r9, r2
   d4dea:	9a04      	ldr	r2, [sp, #16]
   d4dec:	3208      	adds	r2, #8
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
   d4dee:	2a30      	cmp	r2, #48	; 0x30
   d4df0:	9204      	str	r2, [sp, #16]
   d4df2:	f10a 0a20 	add.w	sl, sl, #32
   d4df6:	f104 0420 	add.w	r4, r4, #32
   d4dfa:	f47f ae21 	bne.w	d4a40 <mbedtls_internal_sha256_process+0x2d0>
   d4dfe:	9a00      	ldr	r2, [sp, #0]
   d4e00:	9309      	str	r3, [sp, #36]	; 0x24
   d4e02:	920d      	str	r2, [sp, #52]	; 0x34
   d4e04:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d4e08:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   d4e0c:	960c      	str	r6, [sp, #48]	; 0x30
   d4e0e:	f8cd 9018 	str.w	r9, [sp, #24]
   d4e12:	f8cd e01c 	str.w	lr, [sp, #28]
   d4e16:	9708      	str	r7, [sp, #32]
   d4e18:	2300      	movs	r3, #0
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
   d4e1a:	9a05      	ldr	r2, [sp, #20]
   d4e1c:	f852 1f04 	ldr.w	r1, [r2, #4]!
   d4e20:	9205      	str	r2, [sp, #20]
   d4e22:	aa06      	add	r2, sp, #24
   d4e24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
   d4e28:	3301      	adds	r3, #1
        ctx->state[i] += A[i];
   d4e2a:	440a      	add	r2, r1
   d4e2c:	9905      	ldr	r1, [sp, #20]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
   d4e2e:	2b08      	cmp	r3, #8
        ctx->state[i] += A[i];
   d4e30:	600a      	str	r2, [r1, #0]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
   d4e32:	d1f2      	bne.n	d4e1a <mbedtls_internal_sha256_process+0x6aa>
        ctx->state[i] += A[i];

    return( 0 );
}
   d4e34:	2000      	movs	r0, #0
   d4e36:	b04f      	add	sp, #316	; 0x13c
   d4e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4e3c <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
   d4e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4e40:	4604      	mov	r4, r0
   d4e42:	460e      	mov	r6, r1
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
   d4e44:	4615      	mov	r5, r2
   d4e46:	b382      	cbz	r2, d4eaa <mbedtls_sha256_update_ret+0x6e>
        return( 0 );

    left = ctx->total[0] & 0x3F;
   d4e48:	6803      	ldr	r3, [r0, #0]
   d4e4a:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
   d4e4e:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
   d4e50:	429a      	cmp	r2, r3
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
   d4e52:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
   d4e54:	bf82      	ittt	hi
   d4e56:	6863      	ldrhi	r3, [r4, #4]
   d4e58:	3301      	addhi	r3, #1
   d4e5a:	6063      	strhi	r3, [r4, #4]

    if( left && ilen >= fill )
   d4e5c:	b180      	cbz	r0, d4e80 <mbedtls_sha256_update_ret+0x44>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
   d4e5e:	f1c0 0740 	rsb	r7, r0, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
   d4e62:	42ba      	cmp	r2, r7
   d4e64:	d31b      	bcc.n	d4e9e <mbedtls_sha256_update_ret+0x62>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
   d4e66:	f104 0828 	add.w	r8, r4, #40	; 0x28
   d4e6a:	463a      	mov	r2, r7
   d4e6c:	4440      	add	r0, r8
   d4e6e:	f012 f86e 	bl	e6f4e <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   d4e72:	4641      	mov	r1, r8
   d4e74:	4620      	mov	r0, r4
   d4e76:	f7ff fc7b 	bl	d4770 <mbedtls_internal_sha256_process>
   d4e7a:	b9b8      	cbnz	r0, d4eac <mbedtls_sha256_update_ret+0x70>
            return( ret );

        input += fill;
   d4e7c:	443e      	add	r6, r7
        ilen  -= fill;
   d4e7e:	1bed      	subs	r5, r5, r7
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
   d4e80:	462f      	mov	r7, r5
   d4e82:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
   d4e84:	2f3f      	cmp	r7, #63	; 0x3f
   d4e86:	4431      	add	r1, r6
   d4e88:	d905      	bls.n	d4e96 <mbedtls_sha256_update_ret+0x5a>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
   d4e8a:	4620      	mov	r0, r4
   d4e8c:	f7ff fc70 	bl	d4770 <mbedtls_internal_sha256_process>
   d4e90:	b960      	cbnz	r0, d4eac <mbedtls_sha256_update_ret+0x70>
            return( ret );

        input += 64;
        ilen  -= 64;
   d4e92:	3f40      	subs	r7, #64	; 0x40
   d4e94:	e7f5      	b.n	d4e82 <mbedtls_sha256_update_ret+0x46>
    }

    if( ilen > 0 )
   d4e96:	b147      	cbz	r7, d4eaa <mbedtls_sha256_update_ret+0x6e>
   d4e98:	463d      	mov	r5, r7
   d4e9a:	460e      	mov	r6, r1
   d4e9c:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
   d4e9e:	3428      	adds	r4, #40	; 0x28
   d4ea0:	462a      	mov	r2, r5
   d4ea2:	4631      	mov	r1, r6
   d4ea4:	4420      	add	r0, r4
   d4ea6:	f012 f852 	bl	e6f4e <memcpy>

    return( 0 );
   d4eaa:	2000      	movs	r0, #0
}
   d4eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4eb0 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
   d4eb0:	b570      	push	{r4, r5, r6, lr}
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   d4eb2:	6803      	ldr	r3, [r0, #0]
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
   d4eb4:	4604      	mov	r4, r0
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   d4eb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
   d4eba:	1c58      	adds	r0, r3, #1
   d4ebc:	4423      	add	r3, r4
   d4ebe:	2280      	movs	r2, #128	; 0x80

    if( used <= 56 )
   d4ec0:	2838      	cmp	r0, #56	; 0x38
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
   d4ec2:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
   d4ec4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   d4ec8:	f104 0628 	add.w	r6, r4, #40	; 0x28

    if( used <= 56 )
   d4ecc:	d804      	bhi.n	d4ed8 <mbedtls_sha256_finish_ret+0x28>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
   d4ece:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   d4ed2:	2100      	movs	r1, #0
   d4ed4:	4430      	add	r0, r6
   d4ed6:	e00e      	b.n	d4ef6 <mbedtls_sha256_finish_ret+0x46>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
   d4ed8:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   d4edc:	2100      	movs	r1, #0
   d4ede:	4430      	add	r0, r6
   d4ee0:	f012 f85b 	bl	e6f9a <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   d4ee4:	4631      	mov	r1, r6
   d4ee6:	4620      	mov	r0, r4
   d4ee8:	f7ff fc42 	bl	d4770 <mbedtls_internal_sha256_process>
   d4eec:	2800      	cmp	r0, #0
   d4eee:	d172      	bne.n	d4fd6 <mbedtls_sha256_finish_ret+0x126>
            return( ret );

        memset( ctx->buffer, 0, 56 );
   d4ef0:	4601      	mov	r1, r0
   d4ef2:	2238      	movs	r2, #56	; 0x38
   d4ef4:	4630      	mov	r0, r6
   d4ef6:	f012 f850 	bl	e6f9a <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
   d4efa:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
   d4efc:	6861      	ldr	r1, [r4, #4]
   d4efe:	0f5a      	lsrs	r2, r3, #29
   d4f00:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   d4f04:	0e11      	lsrs	r1, r2, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
   d4f06:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   d4f08:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
   d4f0c:	0c11      	lsrs	r1, r2, #16
   d4f0e:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
   d4f12:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
   d4f16:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
   d4f18:	0e1a      	lsrs	r2, r3, #24
   d4f1a:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
   d4f1e:	0c1a      	lsrs	r2, r3, #16
   d4f20:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
   d4f24:	0a1a      	lsrs	r2, r3, #8
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   d4f26:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
   d4f2a:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
   d4f2e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   d4f32:	4631      	mov	r1, r6
   d4f34:	4620      	mov	r0, r4
   d4f36:	f7ff fc1b 	bl	d4770 <mbedtls_internal_sha256_process>
   d4f3a:	2800      	cmp	r0, #0
   d4f3c:	d14b      	bne.n	d4fd6 <mbedtls_sha256_finish_ret+0x126>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
   d4f3e:	7ae3      	ldrb	r3, [r4, #11]
   d4f40:	702b      	strb	r3, [r5, #0]
   d4f42:	8963      	ldrh	r3, [r4, #10]
   d4f44:	706b      	strb	r3, [r5, #1]
   d4f46:	68a3      	ldr	r3, [r4, #8]
   d4f48:	0a1b      	lsrs	r3, r3, #8
   d4f4a:	70ab      	strb	r3, [r5, #2]
   d4f4c:	68a3      	ldr	r3, [r4, #8]
   d4f4e:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
   d4f50:	7be3      	ldrb	r3, [r4, #15]
   d4f52:	712b      	strb	r3, [r5, #4]
   d4f54:	89e3      	ldrh	r3, [r4, #14]
   d4f56:	716b      	strb	r3, [r5, #5]
   d4f58:	68e3      	ldr	r3, [r4, #12]
   d4f5a:	0a1b      	lsrs	r3, r3, #8
   d4f5c:	71ab      	strb	r3, [r5, #6]
   d4f5e:	68e3      	ldr	r3, [r4, #12]
   d4f60:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
   d4f62:	7ce3      	ldrb	r3, [r4, #19]
   d4f64:	722b      	strb	r3, [r5, #8]
   d4f66:	8a63      	ldrh	r3, [r4, #18]
   d4f68:	726b      	strb	r3, [r5, #9]
   d4f6a:	6923      	ldr	r3, [r4, #16]
   d4f6c:	0a1b      	lsrs	r3, r3, #8
   d4f6e:	72ab      	strb	r3, [r5, #10]
   d4f70:	6923      	ldr	r3, [r4, #16]
   d4f72:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
   d4f74:	7de3      	ldrb	r3, [r4, #23]
   d4f76:	732b      	strb	r3, [r5, #12]
   d4f78:	8ae3      	ldrh	r3, [r4, #22]
   d4f7a:	736b      	strb	r3, [r5, #13]
   d4f7c:	6963      	ldr	r3, [r4, #20]
   d4f7e:	0a1b      	lsrs	r3, r3, #8
   d4f80:	73ab      	strb	r3, [r5, #14]
   d4f82:	6963      	ldr	r3, [r4, #20]
   d4f84:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
   d4f86:	7ee3      	ldrb	r3, [r4, #27]
   d4f88:	742b      	strb	r3, [r5, #16]
   d4f8a:	8b63      	ldrh	r3, [r4, #26]
   d4f8c:	746b      	strb	r3, [r5, #17]
   d4f8e:	69a3      	ldr	r3, [r4, #24]
   d4f90:	0a1b      	lsrs	r3, r3, #8
   d4f92:	74ab      	strb	r3, [r5, #18]
   d4f94:	69a3      	ldr	r3, [r4, #24]
   d4f96:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
   d4f98:	7fe3      	ldrb	r3, [r4, #31]
   d4f9a:	752b      	strb	r3, [r5, #20]
   d4f9c:	8be3      	ldrh	r3, [r4, #30]
   d4f9e:	756b      	strb	r3, [r5, #21]
   d4fa0:	69e3      	ldr	r3, [r4, #28]
   d4fa2:	0a1b      	lsrs	r3, r3, #8
   d4fa4:	75ab      	strb	r3, [r5, #22]
   d4fa6:	69e3      	ldr	r3, [r4, #28]
   d4fa8:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
   d4faa:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   d4fae:	762b      	strb	r3, [r5, #24]
   d4fb0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d4fb2:	766b      	strb	r3, [r5, #25]
   d4fb4:	6a23      	ldr	r3, [r4, #32]
   d4fb6:	0a1b      	lsrs	r3, r3, #8
   d4fb8:	76ab      	strb	r3, [r5, #26]
   d4fba:	6a23      	ldr	r3, [r4, #32]
   d4fbc:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
   d4fbe:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   d4fc0:	b94b      	cbnz	r3, d4fd6 <mbedtls_sha256_finish_ret+0x126>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
   d4fc2:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   d4fc6:	772b      	strb	r3, [r5, #28]
   d4fc8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   d4fca:	776b      	strb	r3, [r5, #29]
   d4fcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d4fce:	0a1b      	lsrs	r3, r3, #8
   d4fd0:	77ab      	strb	r3, [r5, #30]
   d4fd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d4fd4:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
   d4fd6:	bd70      	pop	{r4, r5, r6, pc}

000d4fd8 <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
   d4fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4fda:	b09d      	sub	sp, #116	; 0x74
   d4fdc:	461c      	mov	r4, r3
   d4fde:	4606      	mov	r6, r0

    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha256_init( &ctx );
   d4fe0:	a801      	add	r0, sp, #4
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
   d4fe2:	460f      	mov	r7, r1
   d4fe4:	4615      	mov	r5, r2

    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha256_init( &ctx );
   d4fe6:	f7ff fb65 	bl	d46b4 <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
   d4fea:	4621      	mov	r1, r4
   d4fec:	a801      	add	r0, sp, #4
   d4fee:	f7ff fb6f 	bl	d46d0 <mbedtls_sha256_starts_ret>
   d4ff2:	4604      	mov	r4, r0
   d4ff4:	b958      	cbnz	r0, d500e <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
   d4ff6:	463a      	mov	r2, r7
   d4ff8:	4631      	mov	r1, r6
   d4ffa:	a801      	add	r0, sp, #4
   d4ffc:	f7ff ff1e 	bl	d4e3c <mbedtls_sha256_update_ret>
   d5000:	4604      	mov	r4, r0
   d5002:	b920      	cbnz	r0, d500e <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
   d5004:	4629      	mov	r1, r5
   d5006:	a801      	add	r0, sp, #4
   d5008:	f7ff ff52 	bl	d4eb0 <mbedtls_sha256_finish_ret>
   d500c:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha256_free( &ctx );
   d500e:	a801      	add	r0, sp, #4
   d5010:	f7ff fb54 	bl	d46bc <mbedtls_sha256_free>

    return( ret );
}
   d5014:	4620      	mov	r0, r4
   d5016:	b01d      	add	sp, #116	; 0x74
   d5018:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d501a <mbedtls_asn1_write_len>:
#define mbedtls_calloc    calloc
#define mbedtls_free       free
#endif

int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
{
   d501a:	6803      	ldr	r3, [r0, #0]
    if( len < 0x80 )
   d501c:	2a7f      	cmp	r2, #127	; 0x7f
    {
        if( *p - start < 1 )
   d501e:	eba3 0101 	sub.w	r1, r3, r1
#define mbedtls_free       free
#endif

int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
{
    if( len < 0x80 )
   d5022:	d807      	bhi.n	d5034 <mbedtls_asn1_write_len+0x1a>
    {
        if( *p - start < 1 )
   d5024:	2900      	cmp	r1, #0
   d5026:	dd69      	ble.n	d50fc <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
   d5028:	1e59      	subs	r1, r3, #1
   d502a:	6001      	str	r1, [r0, #0]
   d502c:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 1 );
   d5030:	2001      	movs	r0, #1
   d5032:	4770      	bx	lr
    }

    if( len <= 0xFF )
   d5034:	2aff      	cmp	r2, #255	; 0xff
   d5036:	d80d      	bhi.n	d5054 <mbedtls_asn1_write_len+0x3a>
    {
        if( *p - start < 2 )
   d5038:	2901      	cmp	r1, #1
   d503a:	dd5f      	ble.n	d50fc <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
   d503c:	1e59      	subs	r1, r3, #1
   d503e:	6001      	str	r1, [r0, #0]
   d5040:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x81;
   d5044:	6803      	ldr	r3, [r0, #0]
   d5046:	1e5a      	subs	r2, r3, #1
   d5048:	6002      	str	r2, [r0, #0]
   d504a:	2281      	movs	r2, #129	; 0x81
   d504c:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 2 );
   d5050:	2002      	movs	r0, #2
   d5052:	4770      	bx	lr
    }

    if( len <= 0xFFFF )
   d5054:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   d5058:	d213      	bcs.n	d5082 <mbedtls_asn1_write_len+0x68>
    {
        if( *p - start < 3 )
   d505a:	2902      	cmp	r1, #2
   d505c:	dd4e      	ble.n	d50fc <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
   d505e:	1e59      	subs	r1, r3, #1
   d5060:	6001      	str	r1, [r0, #0]
   d5062:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
   d5066:	6803      	ldr	r3, [r0, #0]
   d5068:	0a12      	lsrs	r2, r2, #8
   d506a:	1e59      	subs	r1, r3, #1
   d506c:	6001      	str	r1, [r0, #0]
   d506e:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x82;
   d5072:	6803      	ldr	r3, [r0, #0]
   d5074:	1e5a      	subs	r2, r3, #1
   d5076:	6002      	str	r2, [r0, #0]
   d5078:	2282      	movs	r2, #130	; 0x82
   d507a:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 3 );
   d507e:	2003      	movs	r0, #3
   d5080:	4770      	bx	lr
    }

    if( len <= 0xFFFFFF )
   d5082:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   d5086:	d219      	bcs.n	d50bc <mbedtls_asn1_write_len+0xa2>
    {
        if( *p - start < 4 )
   d5088:	2903      	cmp	r1, #3
   d508a:	dd37      	ble.n	d50fc <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
   d508c:	1e59      	subs	r1, r3, #1
   d508e:	6001      	str	r1, [r0, #0]
   d5090:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
   d5094:	6803      	ldr	r3, [r0, #0]
   d5096:	1e59      	subs	r1, r3, #1
   d5098:	6001      	str	r1, [r0, #0]
   d509a:	0a11      	lsrs	r1, r2, #8
   d509c:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
   d50a0:	6803      	ldr	r3, [r0, #0]
   d50a2:	0c12      	lsrs	r2, r2, #16
   d50a4:	1e59      	subs	r1, r3, #1
   d50a6:	6001      	str	r1, [r0, #0]
   d50a8:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x83;
   d50ac:	6803      	ldr	r3, [r0, #0]
   d50ae:	1e5a      	subs	r2, r3, #1
   d50b0:	6002      	str	r2, [r0, #0]
   d50b2:	2283      	movs	r2, #131	; 0x83
   d50b4:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 4 );
   d50b8:	2004      	movs	r0, #4
   d50ba:	4770      	bx	lr

#if SIZE_MAX > 0xFFFFFFFF
    if( len <= 0xFFFFFFFF )
#endif
    {
        if( *p - start < 5 )
   d50bc:	2904      	cmp	r1, #4
   d50be:	dd1d      	ble.n	d50fc <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
   d50c0:	1e59      	subs	r1, r3, #1
   d50c2:	6001      	str	r1, [r0, #0]
   d50c4:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
   d50c8:	6803      	ldr	r3, [r0, #0]
   d50ca:	1e59      	subs	r1, r3, #1
   d50cc:	6001      	str	r1, [r0, #0]
   d50ce:	0a11      	lsrs	r1, r2, #8
   d50d0:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
   d50d4:	6803      	ldr	r3, [r0, #0]
   d50d6:	1e59      	subs	r1, r3, #1
   d50d8:	6001      	str	r1, [r0, #0]
   d50da:	0c11      	lsrs	r1, r2, #16
   d50dc:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 24 ) & 0xFF;
   d50e0:	6803      	ldr	r3, [r0, #0]
   d50e2:	0e12      	lsrs	r2, r2, #24
   d50e4:	1e59      	subs	r1, r3, #1
   d50e6:	6001      	str	r1, [r0, #0]
   d50e8:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x84;
   d50ec:	6803      	ldr	r3, [r0, #0]
   d50ee:	1e5a      	subs	r2, r3, #1
   d50f0:	6002      	str	r2, [r0, #0]
   d50f2:	2284      	movs	r2, #132	; 0x84
   d50f4:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 5 );
   d50f8:	2005      	movs	r0, #5
   d50fa:	4770      	bx	lr
int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
{
    if( len < 0x80 )
    {
        if( *p - start < 1 )
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   d50fc:	f06f 006b 	mvn.w	r0, #107	; 0x6b
    }

#if SIZE_MAX > 0xFFFFFFFF
    return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
#endif
}
   d5100:	4770      	bx	lr

000d5102 <mbedtls_asn1_write_tag>:

int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
{
    if( *p - start < 1 )
   d5102:	6803      	ldr	r3, [r0, #0]
   d5104:	1a59      	subs	r1, r3, r1
   d5106:	2900      	cmp	r1, #0
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    *--(*p) = tag;
   d5108:	bfc1      	itttt	gt
   d510a:	f103 31ff 	addgt.w	r1, r3, #4294967295
   d510e:	6001      	strgt	r1, [r0, #0]

    return( 1 );
   d5110:	2001      	movgt	r0, #1
int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
{
    if( *p - start < 1 )
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    *--(*p) = tag;
   d5112:	f803 2c01 	strbgt.w	r2, [r3, #-1]
}

int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
{
    if( *p - start < 1 )
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   d5116:	bfd8      	it	le
   d5118:	f06f 006b 	mvnle.w	r0, #107	; 0x6b

    *--(*p) = tag;

    return( 1 );
}
   d511c:	4770      	bx	lr

000d511e <mbedtls_asn1_write_mpi>:
    return( (int) len );
}

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_write_mpi( unsigned char **p, unsigned char *start, const mbedtls_mpi *X )
{
   d511e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5120:	4605      	mov	r5, r0
    int ret;
    size_t len = 0;

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );
   d5122:	4610      	mov	r0, r2
    return( (int) len );
}

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_write_mpi( unsigned char **p, unsigned char *start, const mbedtls_mpi *X )
{
   d5124:	460e      	mov	r6, r1
   d5126:	4617      	mov	r7, r2
    int ret;
    size_t len = 0;

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );
   d5128:	f00b f8fa 	bl	e0320 <mbedtls_mpi_size>

    if( *p < start || (size_t)( *p - start ) < len )
   d512c:	6829      	ldr	r1, [r5, #0]
   d512e:	42b1      	cmp	r1, r6
    int ret;
    size_t len = 0;

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );
   d5130:	4604      	mov	r4, r0

    if( *p < start || (size_t)( *p - start ) < len )
   d5132:	d202      	bcs.n	d513a <mbedtls_asn1_write_mpi+0x1c>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   d5134:	f06f 006b 	mvn.w	r0, #107	; 0x6b
   d5138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );

    if( *p < start || (size_t)( *p - start ) < len )
   d513a:	1b8b      	subs	r3, r1, r6
   d513c:	4298      	cmp	r0, r3
   d513e:	d8f9      	bhi.n	d5134 <mbedtls_asn1_write_mpi+0x16>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    (*p) -= len;
   d5140:	1a09      	subs	r1, r1, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
   d5142:	4602      	mov	r2, r0
    len = mbedtls_mpi_size( X );

    if( *p < start || (size_t)( *p - start ) < len )
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    (*p) -= len;
   d5144:	6029      	str	r1, [r5, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
   d5146:	4638      	mov	r0, r7
   d5148:	f00b f927 	bl	e039a <mbedtls_mpi_write_binary>
   d514c:	b9f8      	cbnz	r0, d518e <mbedtls_asn1_write_mpi+0x70>

    // DER format assumes 2s complement for numbers, so the leftmost bit
    // should be 0 for positive numbers and 1 for negative numbers.
    //
    if( X->s ==1 && **p & 0x80 )
   d514e:	683b      	ldr	r3, [r7, #0]
   d5150:	2b01      	cmp	r3, #1
   d5152:	d10c      	bne.n	d516e <mbedtls_asn1_write_mpi+0x50>
   d5154:	682b      	ldr	r3, [r5, #0]
   d5156:	f993 2000 	ldrsb.w	r2, [r3]
   d515a:	2a00      	cmp	r2, #0
   d515c:	da07      	bge.n	d516e <mbedtls_asn1_write_mpi+0x50>
    {
        if( *p - start < 1 )
   d515e:	1b9a      	subs	r2, r3, r6
   d5160:	2a00      	cmp	r2, #0
   d5162:	dde7      	ble.n	d5134 <mbedtls_asn1_write_mpi+0x16>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = 0x00;
   d5164:	1e5a      	subs	r2, r3, #1
   d5166:	602a      	str	r2, [r5, #0]
        len += 1;
   d5168:	3401      	adds	r4, #1
    if( X->s ==1 && **p & 0x80 )
    {
        if( *p - start < 1 )
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = 0x00;
   d516a:	f803 0c01 	strb.w	r0, [r3, #-1]
        len += 1;
    }

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
   d516e:	4622      	mov	r2, r4
   d5170:	4631      	mov	r1, r6
   d5172:	4628      	mov	r0, r5
   d5174:	f7ff ff51 	bl	d501a <mbedtls_asn1_write_len>
   d5178:	2800      	cmp	r0, #0
   d517a:	db08      	blt.n	d518e <mbedtls_asn1_write_mpi+0x70>
   d517c:	4404      	add	r4, r0
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
   d517e:	2202      	movs	r2, #2
   d5180:	4631      	mov	r1, r6
   d5182:	4628      	mov	r0, r5
   d5184:	f7ff ffbd 	bl	d5102 <mbedtls_asn1_write_tag>
   d5188:	2800      	cmp	r0, #0

    ret = (int) len;
   d518a:	bfa8      	it	ge
   d518c:	1900      	addge	r0, r0, r4

cleanup:
    return( ret );
}
   d518e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5190 <mbedtls_ecdh_gen_public>:
 * Generate public key
 */
int mbedtls_ecdh_gen_public( mbedtls_ecp_group *grp, mbedtls_mpi *d, mbedtls_ecp_point *Q,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   d5190:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5194:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   d5196:	461d      	mov	r5, r3
   d5198:	4617      	mov	r7, r2

    /* If multiplication is in progress, we already generated a privkey */
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx == NULL || rs_ctx->rsm == NULL )
#endif
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, d, f_rng, p_rng ) );
   d519a:	4633      	mov	r3, r6
   d519c:	462a      	mov	r2, r5
 * Generate public key
 */
int mbedtls_ecdh_gen_public( mbedtls_ecp_group *grp, mbedtls_mpi *d, mbedtls_ecp_point *Q,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   d519e:	4604      	mov	r4, r0
   d51a0:	4688      	mov	r8, r1

    /* If multiplication is in progress, we already generated a privkey */
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx == NULL || rs_ctx->rsm == NULL )
#endif
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, d, f_rng, p_rng ) );
   d51a2:	f003 ff25 	bl	d8ff0 <mbedtls_ecp_gen_privkey>
   d51a6:	b948      	cbnz	r0, d51bc <mbedtls_ecdh_gen_public+0x2c>

    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, Q, d, &grp->G,
   d51a8:	9002      	str	r0, [sp, #8]
   d51aa:	e88d 0060 	stmia.w	sp, {r5, r6}
   d51ae:	f104 0328 	add.w	r3, r4, #40	; 0x28
   d51b2:	4642      	mov	r2, r8
   d51b4:	4639      	mov	r1, r7
   d51b6:	4620      	mov	r0, r4
   d51b8:	f003 fd6c 	bl	d8c94 <mbedtls_ecp_mul_restartable>
    ECDH_VALIDATE_RET( grp != NULL );
    ECDH_VALIDATE_RET( d != NULL );
    ECDH_VALIDATE_RET( Q != NULL );
    ECDH_VALIDATE_RET( f_rng != NULL );
    return( ecdh_gen_public_restartable( grp, d, Q, f_rng, p_rng, NULL ) );
}
   d51bc:	b004      	add	sp, #16
   d51be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d51c4 <mbedtls_ecdh_compute_shared>:
 */
int mbedtls_ecdh_compute_shared( mbedtls_ecp_group *grp, mbedtls_mpi *z,
                         const mbedtls_ecp_point *Q, const mbedtls_mpi *d,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng )
{
   d51c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d51c6:	b08f      	sub	sp, #60	; 0x3c
   d51c8:	4604      	mov	r4, r0
                         mbedtls_ecp_restart_ctx *rs_ctx )
{
    int ret;
    mbedtls_ecp_point P;

    mbedtls_ecp_point_init( &P );
   d51ca:	a805      	add	r0, sp, #20
 */
int mbedtls_ecdh_compute_shared( mbedtls_ecp_group *grp, mbedtls_mpi *z,
                         const mbedtls_ecp_point *Q, const mbedtls_mpi *d,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng )
{
   d51cc:	4617      	mov	r7, r2
   d51ce:	461e      	mov	r6, r3
   d51d0:	460d      	mov	r5, r1
                         mbedtls_ecp_restart_ctx *rs_ctx )
{
    int ret;
    mbedtls_ecp_point P;

    mbedtls_ecp_point_init( &P );
   d51d2:	f002 ff99 	bl	d8108 <mbedtls_ecp_point_init>

    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &P, d, Q,
   d51d6:	2300      	movs	r3, #0
   d51d8:	9302      	str	r3, [sp, #8]
   d51da:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d51dc:	9301      	str	r3, [sp, #4]
   d51de:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d51e0:	9300      	str	r3, [sp, #0]
   d51e2:	4620      	mov	r0, r4
   d51e4:	463b      	mov	r3, r7
   d51e6:	4632      	mov	r2, r6
   d51e8:	a905      	add	r1, sp, #20
   d51ea:	f003 fd53 	bl	d8c94 <mbedtls_ecp_mul_restartable>
   d51ee:	4604      	mov	r4, r0
   d51f0:	b950      	cbnz	r0, d5208 <mbedtls_ecdh_compute_shared+0x44>
                                                  f_rng, p_rng, rs_ctx ) );

    if( mbedtls_ecp_is_zero( &P ) )
   d51f2:	a805      	add	r0, sp, #20
   d51f4:	f003 fb92 	bl	d891c <mbedtls_ecp_is_zero>
   d51f8:	b928      	cbnz	r0, d5206 <mbedtls_ecdh_compute_shared+0x42>
    {
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( z, &P.X ) );
   d51fa:	a905      	add	r1, sp, #20
   d51fc:	4628      	mov	r0, r5
   d51fe:	f00a ffc8 	bl	e0192 <mbedtls_mpi_copy>
   d5202:	4604      	mov	r4, r0
   d5204:	e000      	b.n	d5208 <mbedtls_ecdh_compute_shared+0x44>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &P, d, Q,
                                                  f_rng, p_rng, rs_ctx ) );

    if( mbedtls_ecp_is_zero( &P ) )
    {
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   d5206:	4c03      	ldr	r4, [pc, #12]	; (d5214 <mbedtls_ecdh_compute_shared+0x50>)
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( z, &P.X ) );

cleanup:
    mbedtls_ecp_point_free( &P );
   d5208:	a805      	add	r0, sp, #20
   d520a:	f002 ffba 	bl	d8182 <mbedtls_ecp_point_free>
    ECDH_VALIDATE_RET( Q != NULL );
    ECDH_VALIDATE_RET( d != NULL );
    ECDH_VALIDATE_RET( z != NULL );
    return( ecdh_compute_shared_restartable( grp, z, Q, d,
                                             f_rng, p_rng, NULL ) );
}
   d520e:	4620      	mov	r0, r4
   d5210:	b00f      	add	sp, #60	; 0x3c
   d5212:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5214:	ffffb080 	.word	0xffffb080

000d5218 <mbedtls_ecdh_init>:

/*
 * Initialize context
 */
void mbedtls_ecdh_init( mbedtls_ecdh_context *ctx )
{
   d5218:	b510      	push	{r4, lr}
   d521a:	4604      	mov	r4, r0
}
#endif /* !MBEDTLS_ECDH_COMPUTE_SHARED_ALT */

static void ecdh_init_internal( mbedtls_ecdh_context_mbed *ctx )
{
    mbedtls_ecp_group_init( &ctx->grp );
   d521c:	f002 ff82 	bl	d8124 <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &ctx->d  );
   d5220:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   d5224:	f00a ff35 	bl	e0092 <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &ctx->Q   );
   d5228:	f104 0088 	add.w	r0, r4, #136	; 0x88
   d522c:	f002 ff6c 	bl	d8108 <mbedtls_ecp_point_init>
    mbedtls_ecp_point_init( &ctx->Qp  );
   d5230:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   d5234:	f002 ff68 	bl	d8108 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &ctx->z  );
   d5238:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   d523c:	f00a ff29 	bl	e0092 <mbedtls_mpi_init>
{
    ECDH_VALIDATE( ctx != NULL );

#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    ecdh_init_internal( ctx );
    mbedtls_ecp_point_init( &ctx->Vi  );
   d5240:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   d5244:	f002 ff60 	bl	d8108 <mbedtls_ecp_point_init>
    mbedtls_ecp_point_init( &ctx->Vf  );
   d5248:	f504 7082 	add.w	r0, r4, #260	; 0x104
   d524c:	f002 ff5c 	bl	d8108 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &ctx->_d );
   d5250:	f504 7094 	add.w	r0, r4, #296	; 0x128
   d5254:	f00a ff1d 	bl	e0092 <mbedtls_mpi_init>
#else
    memset( ctx, 0, sizeof( mbedtls_ecdh_context ) );

    ctx->var = MBEDTLS_ECDH_VARIANT_NONE;
#endif
    ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
   d5258:	2300      	movs	r3, #0
   d525a:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   d525e:	bd10      	pop	{r4, pc}

000d5260 <mbedtls_ecdh_free>:

/*
 * Free context
 */
void mbedtls_ecdh_free( mbedtls_ecdh_context *ctx )
{
   d5260:	b510      	push	{r4, lr}
    if( ctx == NULL )
   d5262:	4604      	mov	r4, r0
   d5264:	b1f8      	cbz	r0, d52a6 <mbedtls_ecdh_free+0x46>
        return;

#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    mbedtls_ecp_point_free( &ctx->Vi );
   d5266:	30e0      	adds	r0, #224	; 0xe0
   d5268:	f002 ff8b 	bl	d8182 <mbedtls_ecp_point_free>
    mbedtls_ecp_point_free( &ctx->Vf );
   d526c:	f504 7082 	add.w	r0, r4, #260	; 0x104
   d5270:	f002 ff87 	bl	d8182 <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &ctx->_d );
   d5274:	f504 7094 	add.w	r0, r4, #296	; 0x128
   d5278:	f00a ff11 	bl	e009e <mbedtls_mpi_free>
#endif
}

static void ecdh_free_internal( mbedtls_ecdh_context_mbed *ctx )
{
    mbedtls_ecp_group_free( &ctx->grp );
   d527c:	4620      	mov	r0, r4
   d527e:	f002 ff90 	bl	d81a2 <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &ctx->d  );
   d5282:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   d5286:	f00a ff0a 	bl	e009e <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &ctx->Q   );
   d528a:	f104 0088 	add.w	r0, r4, #136	; 0x88
   d528e:	f002 ff78 	bl	d8182 <mbedtls_ecp_point_free>
    mbedtls_ecp_point_free( &ctx->Qp  );
   d5292:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   d5296:	f002 ff74 	bl	d8182 <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &ctx->z  );
   d529a:	f104 00d0 	add.w	r0, r4, #208	; 0xd0

    ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
    ctx->var = MBEDTLS_ECDH_VARIANT_NONE;
    ctx->grp_id = MBEDTLS_ECP_DP_NONE;
#endif
}
   d529e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    mbedtls_ecp_group_free( &ctx->grp );
    mbedtls_mpi_free( &ctx->d  );
    mbedtls_ecp_point_free( &ctx->Q   );
    mbedtls_ecp_point_free( &ctx->Qp  );
    mbedtls_mpi_free( &ctx->z  );
   d52a2:	f00a befc 	b.w	e009e <mbedtls_mpi_free>
   d52a6:	bd10      	pop	{r4, pc}

000d52a8 <mbedtls_ecdh_read_params>:
 *      } ServerECDHParams;
 */
int mbedtls_ecdh_read_params( mbedtls_ecdh_context *ctx,
                              const unsigned char **buf,
                              const unsigned char *end )
{
   d52a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d52aa:	4616      	mov	r6, r2
    ECDH_VALIDATE_RET( ctx != NULL );
    ECDH_VALIDATE_RET( buf != NULL );
    ECDH_VALIDATE_RET( *buf != NULL );
    ECDH_VALIDATE_RET( end != NULL );

    if( ( ret = mbedtls_ecp_tls_read_group_id( &grp_id, buf, end - *buf ) )
   d52ac:	680a      	ldr	r2, [r1, #0]
 *      } ServerECDHParams;
 */
int mbedtls_ecdh_read_params( mbedtls_ecdh_context *ctx,
                              const unsigned char **buf,
                              const unsigned char *end )
{
   d52ae:	4604      	mov	r4, r0
    ECDH_VALIDATE_RET( ctx != NULL );
    ECDH_VALIDATE_RET( buf != NULL );
    ECDH_VALIDATE_RET( *buf != NULL );
    ECDH_VALIDATE_RET( end != NULL );

    if( ( ret = mbedtls_ecp_tls_read_group_id( &grp_id, buf, end - *buf ) )
   d52b0:	1ab2      	subs	r2, r6, r2
   d52b2:	f10d 0007 	add.w	r0, sp, #7
 *      } ServerECDHParams;
 */
int mbedtls_ecdh_read_params( mbedtls_ecdh_context *ctx,
                              const unsigned char **buf,
                              const unsigned char *end )
{
   d52b6:	460d      	mov	r5, r1
    ECDH_VALIDATE_RET( ctx != NULL );
    ECDH_VALIDATE_RET( buf != NULL );
    ECDH_VALIDATE_RET( *buf != NULL );
    ECDH_VALIDATE_RET( end != NULL );

    if( ( ret = mbedtls_ecp_tls_read_group_id( &grp_id, buf, end - *buf ) )
   d52b8:	f003 fbf0 	bl	d8a9c <mbedtls_ecp_tls_read_group_id>
   d52bc:	b978      	cbnz	r0, d52de <mbedtls_ecdh_read_params+0x36>
static int ecdh_setup_internal( mbedtls_ecdh_context_mbed *ctx,
                                mbedtls_ecp_group_id grp_id )
{
    int ret;

    ret = mbedtls_ecp_group_load( &ctx->grp, grp_id );
   d52be:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d52c2:	4620      	mov	r0, r4
   d52c4:	f007 fb6a 	bl	dc99c <mbedtls_ecp_group_load>
    if( ret != 0 )
   d52c8:	b108      	cbz	r0, d52ce <mbedtls_ecdh_read_params+0x26>
    {
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   d52ca:	4806      	ldr	r0, [pc, #24]	; (d52e4 <mbedtls_ecdh_read_params+0x3c>)
   d52cc:	e007      	b.n	d52de <mbedtls_ecdh_read_params+0x36>
static int ecdh_read_params_internal( mbedtls_ecdh_context_mbed *ctx,
                                      const unsigned char **buf,
                                      const unsigned char *end )
{
    return( mbedtls_ecp_tls_read_point( &ctx->grp, &ctx->Qp, buf,
                                        end - *buf ) );
   d52ce:	682b      	ldr	r3, [r5, #0]
   d52d0:	462a      	mov	r2, r5
   d52d2:	1af3      	subs	r3, r6, r3
   d52d4:	f104 01ac 	add.w	r1, r4, #172	; 0xac
   d52d8:	4620      	mov	r0, r4
   d52da:	f003 fbaf 	bl	d8a3c <mbedtls_ecp_tls_read_point>
                                               buf, end ) );
        default:
            return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
    }
#endif
}
   d52de:	b002      	add	sp, #8
   d52e0:	bd70      	pop	{r4, r5, r6, pc}
   d52e2:	bf00      	nop
   d52e4:	ffffb180 	.word	0xffffb180

000d52e8 <mbedtls_ecdh_make_public>:
 */
int mbedtls_ecdh_make_public( mbedtls_ecdh_context *ctx, size_t *olen,
                              unsigned char *buf, size_t blen,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng )
{
   d52e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d52ec:	460f      	mov	r7, r1
    int ret;
#if defined(MBEDTLS_ECP_RESTARTABLE)
    mbedtls_ecp_restart_ctx *rs_ctx = NULL;
#endif

    if( ctx->grp.pbits == 0 )
   d52ee:	6d81      	ldr	r1, [r0, #88]	; 0x58
#if defined(MBEDTLS_ECP_RESTARTABLE)
    restart_enabled = ctx->restart_enabled;
#endif

#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    return( ecdh_make_public_internal( ctx, olen, ctx->point_format, buf, blen,
   d52f0:	f8d0 60dc 	ldr.w	r6, [r0, #220]	; 0xdc
 */
int mbedtls_ecdh_make_public( mbedtls_ecdh_context *ctx, size_t *olen,
                              unsigned char *buf, size_t blen,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng )
{
   d52f4:	4690      	mov	r8, r2
   d52f6:	4699      	mov	r9, r3
   d52f8:	4604      	mov	r4, r0
   d52fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d52fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    int ret;
#if defined(MBEDTLS_ECP_RESTARTABLE)
    mbedtls_ecp_restart_ctx *rs_ctx = NULL;
#endif

    if( ctx->grp.pbits == 0 )
   d52fe:	b1a9      	cbz	r1, d532c <mbedtls_ecdh_make_public+0x44>
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( ( ret = ecdh_gen_public_restartable( &ctx->grp, &ctx->d, &ctx->Q,
                                             f_rng, p_rng, rs_ctx ) ) != 0 )
        return( ret );
#else
    if( ( ret = mbedtls_ecdh_gen_public( &ctx->grp, &ctx->d, &ctx->Q,
   d5300:	f100 0588 	add.w	r5, r0, #136	; 0x88
   d5304:	9200      	str	r2, [sp, #0]
   d5306:	f100 017c 	add.w	r1, r0, #124	; 0x7c
   d530a:	462a      	mov	r2, r5
   d530c:	f7ff ff40 	bl	d5190 <mbedtls_ecdh_gen_public>
   d5310:	b968      	cbnz	r0, d532e <mbedtls_ecdh_make_public+0x46>
                                         f_rng, p_rng ) ) != 0 )
        return( ret );
#endif /* MBEDTLS_ECP_RESTARTABLE */

    return mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, point_format, olen,
                                        buf, blen );
   d5312:	463b      	mov	r3, r7
   d5314:	4632      	mov	r2, r6
   d5316:	4629      	mov	r1, r5
   d5318:	4620      	mov	r0, r4
   d531a:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   d531e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
                                               restart_enabled ) );
        default:
            return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
    }
#endif
}
   d5322:	b003      	add	sp, #12
   d5324:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                                         f_rng, p_rng ) ) != 0 )
        return( ret );
#endif /* MBEDTLS_ECP_RESTARTABLE */

    return mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, point_format, olen,
                                        buf, blen );
   d5328:	f003 bba0 	b.w	d8a6c <mbedtls_ecp_tls_write_point>
#if defined(MBEDTLS_ECP_RESTARTABLE)
    mbedtls_ecp_restart_ctx *rs_ctx = NULL;
#endif

    if( ctx->grp.pbits == 0 )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d532c:	4801      	ldr	r0, [pc, #4]	; (d5334 <mbedtls_ecdh_make_public+0x4c>)
                                               restart_enabled ) );
        default:
            return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
    }
#endif
}
   d532e:	b003      	add	sp, #12
   d5330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5334:	ffffb080 	.word	0xffffb080

000d5338 <mbedtls_ecdh_calc_secret>:
 */
int mbedtls_ecdh_calc_secret( mbedtls_ecdh_context *ctx, size_t *olen,
                              unsigned char *buf, size_t blen,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng )
{
   d5338:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d533c:	4616      	mov	r6, r2
   d533e:	4698      	mov	r8, r3
   d5340:	460f      	mov	r7, r1
   d5342:	9b08      	ldr	r3, [sp, #32]
   d5344:	9a09      	ldr	r2, [sp, #36]	; 0x24
    int ret;
#if defined(MBEDTLS_ECP_RESTARTABLE)
    mbedtls_ecp_restart_ctx *rs_ctx = NULL;
#endif

    if( ctx == NULL || ctx->grp.pbits == 0 )
   d5346:	4604      	mov	r4, r0
   d5348:	b908      	cbnz	r0, d534e <mbedtls_ecdh_calc_secret+0x16>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d534a:	4814      	ldr	r0, [pc, #80]	; (d539c <mbedtls_ecdh_calc_secret+0x64>)
   d534c:	e022      	b.n	d5394 <mbedtls_ecdh_calc_secret+0x5c>
    int ret;
#if defined(MBEDTLS_ECP_RESTARTABLE)
    mbedtls_ecp_restart_ctx *rs_ctx = NULL;
#endif

    if( ctx == NULL || ctx->grp.pbits == 0 )
   d534e:	6d81      	ldr	r1, [r0, #88]	; 0x58
   d5350:	2900      	cmp	r1, #0
   d5352:	d0fa      	beq.n	d534a <mbedtls_ecdh_calc_secret+0x12>
                                                 rs_ctx ) ) != 0 )
    {
        return( ret );
    }
#else
    if( ( ret = mbedtls_ecdh_compute_shared( &ctx->grp, &ctx->z, &ctx->Qp,
   d5354:	f100 05d0 	add.w	r5, r0, #208	; 0xd0
   d5358:	9201      	str	r2, [sp, #4]
   d535a:	9300      	str	r3, [sp, #0]
   d535c:	f100 02ac 	add.w	r2, r0, #172	; 0xac
   d5360:	f100 037c 	add.w	r3, r0, #124	; 0x7c
   d5364:	4629      	mov	r1, r5
   d5366:	f7ff ff2d 	bl	d51c4 <mbedtls_ecdh_compute_shared>
   d536a:	b998      	cbnz	r0, d5394 <mbedtls_ecdh_calc_secret+0x5c>
    {
        return( ret );
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    if( mbedtls_mpi_size( &ctx->z ) > blen )
   d536c:	4628      	mov	r0, r5
   d536e:	f00a ffd7 	bl	e0320 <mbedtls_mpi_size>
   d5372:	4580      	cmp	r8, r0
   d5374:	d3e9      	bcc.n	d534a <mbedtls_ecdh_calc_secret+0x12>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
   d5376:	6da2      	ldr	r2, [r4, #88]	; 0x58
   d5378:	f012 0307 	ands.w	r3, r2, #7
   d537c:	bf18      	it	ne
   d537e:	2301      	movne	r3, #1
   d5380:	eb03 02d2 	add.w	r2, r3, r2, lsr #3
    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );
   d5384:	4631      	mov	r1, r6
   d5386:	4628      	mov	r0, r5
#endif /* MBEDTLS_ECP_RESTARTABLE */

    if( mbedtls_mpi_size( &ctx->z ) > blen )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
   d5388:	603a      	str	r2, [r7, #0]
                                               restart_enabled ) );
        default:
            return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }
#endif
}
   d538a:	b002      	add	sp, #8
   d538c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

    if( mbedtls_mpi_size( &ctx->z ) > blen )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );
   d5390:	f00b b803 	b.w	e039a <mbedtls_mpi_write_binary>
                                               restart_enabled ) );
        default:
            return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }
#endif
}
   d5394:	b002      	add	sp, #8
   d5396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d539a:	bf00      	nop
   d539c:	ffffb080 	.word	0xffffb080

000d53a0 <mbedtls_cipher_info_from_type>:

    return( mbedtls_cipher_supported );
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_type( const mbedtls_cipher_type_t cipher_type )
{
   d53a0:	4b05      	ldr	r3, [pc, #20]	; (d53b8 <mbedtls_cipher_info_from_type+0x18>)
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
   d53a2:	f853 2c04 	ldr.w	r2, [r3, #-4]
   d53a6:	b122      	cbz	r2, d53b2 <mbedtls_cipher_info_from_type+0x12>
   d53a8:	3308      	adds	r3, #8
        if( def->type == cipher_type )
   d53aa:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d53ae:	4281      	cmp	r1, r0
   d53b0:	d1f7      	bne.n	d53a2 <mbedtls_cipher_info_from_type+0x2>
            return( def->info );

    return( NULL );
}
   d53b2:	4610      	mov	r0, r2
   d53b4:	4770      	bx	lr
   d53b6:	bf00      	nop
   d53b8:	000e91ec 	.word	0x000e91ec

000d53bc <mbedtls_cipher_info_from_values>:
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
   d53bc:	b530      	push	{r4, r5, lr}
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
   d53be:	4c08      	ldr	r4, [pc, #32]	; (d53e0 <mbedtls_cipher_info_from_values+0x24>)
   d53c0:	6863      	ldr	r3, [r4, #4]
   d53c2:	b15b      	cbz	r3, d53dc <mbedtls_cipher_info_from_values+0x20>
        if( def->info->base->cipher == cipher_id &&
   d53c4:	699d      	ldr	r5, [r3, #24]
   d53c6:	782d      	ldrb	r5, [r5, #0]
   d53c8:	4285      	cmp	r5, r0
   d53ca:	d105      	bne.n	d53d8 <mbedtls_cipher_info_from_values+0x1c>
   d53cc:	685d      	ldr	r5, [r3, #4]
   d53ce:	428d      	cmp	r5, r1
   d53d0:	d102      	bne.n	d53d8 <mbedtls_cipher_info_from_values+0x1c>
            def->info->key_bitlen == (unsigned) key_bitlen &&
   d53d2:	785d      	ldrb	r5, [r3, #1]
   d53d4:	4295      	cmp	r5, r2
   d53d6:	d001      	beq.n	d53dc <mbedtls_cipher_info_from_values+0x20>
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
   d53d8:	3408      	adds	r4, #8
   d53da:	e7f1      	b.n	d53c0 <mbedtls_cipher_info_from_values+0x4>
            def->info->key_bitlen == (unsigned) key_bitlen &&
            def->info->mode == mode )
            return( def->info );

    return( NULL );
}
   d53dc:	4618      	mov	r0, r3
   d53de:	bd30      	pop	{r4, r5, pc}
   d53e0:	000e91e4 	.word	0x000e91e4

000d53e4 <mbedtls_cipher_init>:

void mbedtls_cipher_init( mbedtls_cipher_context_t *ctx )
{
    CIPHER_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
   d53e4:	2238      	movs	r2, #56	; 0x38
   d53e6:	2100      	movs	r1, #0
   d53e8:	f011 bdd7 	b.w	e6f9a <memset>

000d53ec <mbedtls_cipher_free>:
}

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
   d53ec:	b510      	push	{r4, lr}
    if( ctx == NULL )
   d53ee:	4604      	mov	r4, r0
   d53f0:	b158      	cbz	r0, d540a <mbedtls_cipher_free+0x1e>
                                 sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
    }
#endif

    if( ctx->cipher_ctx )
   d53f2:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d53f4:	b118      	cbz	r0, d53fe <mbedtls_cipher_free+0x12>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
   d53f6:	6823      	ldr	r3, [r4, #0]
   d53f8:	699b      	ldr	r3, [r3, #24]
   d53fa:	695b      	ldr	r3, [r3, #20]
   d53fc:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
   d53fe:	4620      	mov	r0, r4
   d5400:	2138      	movs	r1, #56	; 0x38
}
   d5402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif

    if( ctx->cipher_ctx )
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );

    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
   d5406:	f005 b86b 	b.w	da4e0 <mbedtls_platform_zeroize>
   d540a:	bd10      	pop	{r4, pc}

000d540c <mbedtls_cipher_setup>:
}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
   d540c:	b538      	push	{r3, r4, r5, lr}
   d540e:	4605      	mov	r5, r0
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( cipher_info == NULL )
   d5410:	460c      	mov	r4, r1
   d5412:	b159      	cbz	r1, d542c <mbedtls_cipher_setup+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
   d5414:	2238      	movs	r2, #56	; 0x38
   d5416:	2100      	movs	r1, #0
   d5418:	f011 fdbf 	bl	e6f9a <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
   d541c:	69a3      	ldr	r3, [r4, #24]
   d541e:	691b      	ldr	r3, [r3, #16]
   d5420:	4798      	blx	r3
   d5422:	6368      	str	r0, [r5, #52]	; 0x34
   d5424:	b120      	cbz	r0, d5430 <mbedtls_cipher_setup+0x24>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );

    ctx->cipher_info = cipher_info;
   d5426:	602c      	str	r4, [r5, #0]
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
   d5428:	2000      	movs	r0, #0
   d542a:	bd38      	pop	{r3, r4, r5, pc}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d542c:	4801      	ldr	r0, [pc, #4]	; (d5434 <mbedtls_cipher_setup+0x28>)
   d542e:	bd38      	pop	{r3, r4, r5, pc}

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
   d5430:	4801      	ldr	r0, [pc, #4]	; (d5438 <mbedtls_cipher_setup+0x2c>)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
}
   d5432:	bd38      	pop	{r3, r4, r5, pc}
   d5434:	ffff9f00 	.word	0xffff9f00
   d5438:	ffff9e80 	.word	0xffff9e80

000d543c <mbedtls_cipher_setkey>:

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx,
                           const unsigned char *key,
                           int key_bitlen,
                           const mbedtls_operation_t operation )
{
   d543c:	b430      	push	{r4, r5}
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( key != NULL );
    CIPHER_VALIDATE_RET( operation == MBEDTLS_ENCRYPT ||
                         operation == MBEDTLS_DECRYPT );
    if( ctx->cipher_info == NULL )
   d543e:	6804      	ldr	r4, [r0, #0]
   d5440:	b1b4      	cbz	r4, d5470 <mbedtls_cipher_setkey+0x34>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
   d5442:	6925      	ldr	r5, [r4, #16]
   d5444:	07ad      	lsls	r5, r5, #30
   d5446:	d402      	bmi.n	d544e <mbedtls_cipher_setkey+0x12>
   d5448:	6865      	ldr	r5, [r4, #4]
   d544a:	4295      	cmp	r5, r2
   d544c:	d110      	bne.n	d5470 <mbedtls_cipher_setkey+0x34>
    ctx->operation = operation;

    /*
     * For OFB, CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
   d544e:	2b01      	cmp	r3, #1
        (int) ctx->cipher_info->key_bitlen != key_bitlen )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    ctx->key_bitlen = key_bitlen;
   d5450:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
   d5452:	7203      	strb	r3, [r0, #8]

    /*
     * For OFB, CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
   d5454:	d003      	beq.n	d545e <mbedtls_cipher_setkey+0x22>
   d5456:	7865      	ldrb	r5, [r4, #1]
   d5458:	3d03      	subs	r5, #3
   d545a:	2d02      	cmp	r5, #2
   d545c:	d802      	bhi.n	d5464 <mbedtls_cipher_setkey+0x28>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
    {
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
   d545e:	69a3      	ldr	r3, [r4, #24]
                                                         ctx->key_bitlen ) );
   d5460:	689b      	ldr	r3, [r3, #8]
   d5462:	e002      	b.n	d546a <mbedtls_cipher_setkey+0x2e>
    }

    if( MBEDTLS_DECRYPT == operation )
   d5464:	b923      	cbnz	r3, d5470 <mbedtls_cipher_setkey+0x34>
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
   d5466:	69a3      	ldr	r3, [r4, #24]
                                                         ctx->key_bitlen ) );
   d5468:	68db      	ldr	r3, [r3, #12]
   d546a:	6b40      	ldr	r0, [r0, #52]	; 0x34

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
   d546c:	bc30      	pop	{r4, r5}
                                                         ctx->key_bitlen ) );
    }

    if( MBEDTLS_DECRYPT == operation )
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
                                                         ctx->key_bitlen ) );
   d546e:	4718      	bx	r3

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
   d5470:	4801      	ldr	r0, [pc, #4]	; (d5478 <mbedtls_cipher_setkey+0x3c>)
   d5472:	bc30      	pop	{r4, r5}
   d5474:	4770      	bx	lr
   d5476:	bf00      	nop
   d5478:	ffff9f00 	.word	0xffff9f00

000d547c <mbedtls_cipher_set_iv>:

int mbedtls_cipher_set_iv( mbedtls_cipher_context_t *ctx,
                           const unsigned char *iv,
                           size_t iv_len )
{
   d547c:	b538      	push	{r3, r4, r5, lr}
    size_t actual_iv_size;

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( iv_len == 0 || iv != NULL );
    if( ctx->cipher_info == NULL )
   d547e:	6803      	ldr	r3, [r0, #0]
}

int mbedtls_cipher_set_iv( mbedtls_cipher_context_t *ctx,
                           const unsigned char *iv,
                           size_t iv_len )
{
   d5480:	4605      	mov	r5, r0
    size_t actual_iv_size;

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( iv_len == 0 || iv != NULL );
    if( ctx->cipher_info == NULL )
   d5482:	b1a3      	cbz	r3, d54ae <mbedtls_cipher_set_iv+0x32>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
   d5484:	2a10      	cmp	r2, #16
   d5486:	d810      	bhi.n	d54aa <mbedtls_cipher_set_iv+0x2e>
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
   d5488:	6918      	ldr	r0, [r3, #16]
   d548a:	07c0      	lsls	r0, r0, #31
   d548c:	d403      	bmi.n	d5496 <mbedtls_cipher_set_iv+0x1a>
        actual_iv_size = iv_len;
    else
    {
        actual_iv_size = ctx->cipher_info->iv_size;
   d548e:	68dc      	ldr	r4, [r3, #12]

        /* avoid reading past the end of input buffer */
        if( actual_iv_size > iv_len )
   d5490:	42a2      	cmp	r2, r4
   d5492:	d201      	bcs.n	d5498 <mbedtls_cipher_set_iv+0x1c>
   d5494:	e00b      	b.n	d54ae <mbedtls_cipher_set_iv+0x32>
   d5496:	4614      	mov	r4, r2
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
        }
    }
#endif

    if ( actual_iv_size != 0 )
   d5498:	b12c      	cbz	r4, d54a6 <mbedtls_cipher_set_iv+0x2a>
    {
        memcpy( ctx->iv, iv, actual_iv_size );
   d549a:	4622      	mov	r2, r4
   d549c:	f105 0020 	add.w	r0, r5, #32
   d54a0:	f011 fd55 	bl	e6f4e <memcpy>
        ctx->iv_size = actual_iv_size;
   d54a4:	632c      	str	r4, [r5, #48]	; 0x30
    }

    return( 0 );
   d54a6:	2000      	movs	r0, #0
   d54a8:	bd38      	pop	{r3, r4, r5, pc}
    if( ctx->cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
   d54aa:	4802      	ldr	r0, [pc, #8]	; (d54b4 <mbedtls_cipher_set_iv+0x38>)
   d54ac:	bd38      	pop	{r3, r4, r5, pc}
    size_t actual_iv_size;

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( iv_len == 0 || iv != NULL );
    if( ctx->cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d54ae:	4802      	ldr	r0, [pc, #8]	; (d54b8 <mbedtls_cipher_set_iv+0x3c>)
   d54b0:	bd38      	pop	{r3, r4, r5, pc}
   d54b2:	bf00      	nop
   d54b4:	ffff9f80 	.word	0xffff9f80
   d54b8:	ffff9f00 	.word	0xffff9f00

000d54bc <mbedtls_cipher_reset>:
}

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( ctx->cipher_info == NULL )
   d54bc:	6803      	ldr	r3, [r0, #0]
   d54be:	b11b      	cbz	r3, d54c8 <mbedtls_cipher_reset+0xc>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    ctx->unprocessed_len = 0;
   d54c0:	2300      	movs	r3, #0
   d54c2:	61c3      	str	r3, [r0, #28]

    return( 0 );
   d54c4:	4618      	mov	r0, r3
   d54c6:	4770      	bx	lr

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( ctx->cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d54c8:	4800      	ldr	r0, [pc, #0]	; (d54cc <mbedtls_cipher_reset+0x10>)

    ctx->unprocessed_len = 0;

    return( 0 );
}
   d54ca:	4770      	bx	lr
   d54cc:	ffff9f00 	.word	0xffff9f00

000d54d0 <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
   d54d0:	b470      	push	{r4, r5, r6}
   d54d2:	4614      	mov	r4, r2

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
   d54d4:	6802      	ldr	r2, [r0, #0]
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
   d54d6:	9e03      	ldr	r6, [sp, #12]

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
   d54d8:	b90a      	cbnz	r2, d54de <mbedtls_cipher_update+0xe>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d54da:	481b      	ldr	r0, [pc, #108]	; (d5548 <mbedtls_cipher_update+0x78>)
   d54dc:	e031      	b.n	d5542 <mbedtls_cipher_update+0x72>

    *olen = 0;
   d54de:	2200      	movs	r2, #0
   d54e0:	6032      	str	r2, [r6, #0]
   d54e2:	6805      	ldr	r5, [r0, #0]
 */
static inline unsigned int mbedtls_cipher_get_block_size(
    const mbedtls_cipher_context_t *ctx )
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
   d54e4:	b10d      	cbz	r5, d54ea <mbedtls_cipher_update+0x1a>
        return 0;

    return ctx->cipher_info->block_size;
   d54e6:	696a      	ldr	r2, [r5, #20]
   d54e8:	e000      	b.n	d54ec <mbedtls_cipher_update+0x1c>
static inline unsigned int mbedtls_cipher_get_block_size(
    const mbedtls_cipher_context_t *ctx )
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
        return 0;
   d54ea:	462a      	mov	r2, r5
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
   d54ec:	786d      	ldrb	r5, [r5, #1]
   d54ee:	2d01      	cmp	r5, #1
   d54f0:	d10c      	bne.n	d550c <mbedtls_cipher_update+0x3c>
    {
        if( ilen != block_size )
   d54f2:	4294      	cmp	r4, r2
   d54f4:	d120      	bne.n	d5538 <mbedtls_cipher_update+0x68>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;
   d54f6:	6034      	str	r4, [r6, #0]

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
   d54f8:	6802      	ldr	r2, [r0, #0]
   d54fa:	6992      	ldr	r2, [r2, #24]
   d54fc:	6854      	ldr	r4, [r2, #4]
   d54fe:	460a      	mov	r2, r1
   d5500:	46a4      	mov	ip, r4
   d5502:	f990 1008 	ldrsb.w	r1, [r0, #8]
   d5506:	6b40      	ldr	r0, [r0, #52]	; 0x34
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
   d5508:	bc70      	pop	{r4, r5, r6}
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
   d550a:	4760      	bx	ip

        return( 0 );
    }

#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
   d550c:	2d06      	cmp	r5, #6
   d550e:	d106      	bne.n	d551e <mbedtls_cipher_update+0x4e>
    {
        *olen = ilen;
   d5510:	6034      	str	r4, [r6, #0]
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
                                    output ) );
   d5512:	460a      	mov	r2, r1
   d5514:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d5516:	4621      	mov	r1, r4
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
   d5518:	bc70      	pop	{r4, r5, r6}
#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
    {
        *olen = ilen;
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
                                    output ) );
   d551a:	f006 bca2 	b.w	dbe62 <mbedtls_gcm_update>
        return( mbedtls_chachapoly_update( (mbedtls_chachapoly_context*) ctx->cipher_ctx,
                                           ilen, input, output ) );
    }
#endif

    if ( 0 == block_size )
   d551e:	b16a      	cbz	r2, d553c <mbedtls_cipher_update+0x6c>
    {
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
    }

    if( input == output &&
   d5520:	4299      	cmp	r1, r3
   d5522:	d10d      	bne.n	d5540 <mbedtls_cipher_update+0x70>
   d5524:	69c3      	ldr	r3, [r0, #28]
   d5526:	2b00      	cmp	r3, #0
   d5528:	d1d7      	bne.n	d54da <mbedtls_cipher_update+0xa>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
   d552a:	fbb4 f1f2 	udiv	r1, r4, r2
   d552e:	fb02 4411 	mls	r4, r2, r1, r4
   d5532:	2c00      	cmp	r4, #0
   d5534:	d1d1      	bne.n	d54da <mbedtls_cipher_update+0xa>
   d5536:	e003      	b.n	d5540 <mbedtls_cipher_update+0x70>
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
    {
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
   d5538:	4804      	ldr	r0, [pc, #16]	; (d554c <mbedtls_cipher_update+0x7c>)
   d553a:	e002      	b.n	d5542 <mbedtls_cipher_update+0x72>
    }
#endif

    if ( 0 == block_size )
    {
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
   d553c:	4804      	ldr	r0, [pc, #16]	; (d5550 <mbedtls_cipher_update+0x80>)
   d553e:	e000      	b.n	d5542 <mbedtls_cipher_update+0x72>

        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
   d5540:	4804      	ldr	r0, [pc, #16]	; (d5554 <mbedtls_cipher_update+0x84>)
}
   d5542:	bc70      	pop	{r4, r5, r6}
   d5544:	4770      	bx	lr
   d5546:	bf00      	nop
   d5548:	ffff9f00 	.word	0xffff9f00
   d554c:	ffff9d80 	.word	0xffff9d80
   d5550:	ffff9c80 	.word	0xffff9c80
   d5554:	ffff9f80 	.word	0xffff9f80

000d5558 <mbedtls_cipher_finish>:
}
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
   d5558:	b510      	push	{r4, lr}
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
   d555a:	6801      	ldr	r1, [r0, #0]
}
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
   d555c:	4603      	mov	r3, r0
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
   d555e:	b1a9      	cbz	r1, d558c <mbedtls_cipher_finish+0x34>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
   d5560:	2000      	movs	r0, #0
   d5562:	6010      	str	r0, [r2, #0]

    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
   d5564:	6819      	ldr	r1, [r3, #0]
   d5566:	784a      	ldrb	r2, [r1, #1]
   d5568:	1ed4      	subs	r4, r2, #3
   d556a:	2c04      	cmp	r4, #4
   d556c:	d911      	bls.n	d5592 <mbedtls_cipher_finish+0x3a>
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode ||
        MBEDTLS_MODE_GCM == ctx->cipher_info->mode ||
   d556e:	2a09      	cmp	r2, #9
   d5570:	d00f      	beq.n	d5592 <mbedtls_cipher_finish+0x3a>
        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )
    {
        return( 0 );
    }

    if ( ( MBEDTLS_CIPHER_CHACHA20          == ctx->cipher_info->type ) ||
   d5572:	7809      	ldrb	r1, [r1, #0]
   d5574:	3948      	subs	r1, #72	; 0x48
   d5576:	2901      	cmp	r1, #1
   d5578:	d90b      	bls.n	d5592 <mbedtls_cipher_finish+0x3a>
         ( MBEDTLS_CIPHER_CHACHA20_POLY1305 == ctx->cipher_info->type ) )
    {
        return( 0 );
    }

    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
   d557a:	2a01      	cmp	r2, #1
   d557c:	d108      	bne.n	d5590 <mbedtls_cipher_finish+0x38>
    {
        if( ctx->unprocessed_len != 0 )
   d557e:	69db      	ldr	r3, [r3, #28]
   d5580:	4283      	cmp	r3, r0
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
   d5582:	f5a0 40c5 	sub.w	r0, r0, #25216	; 0x6280
   d5586:	bf08      	it	eq
   d5588:	2000      	moveq	r0, #0
   d558a:	bd10      	pop	{r4, pc}
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d558c:	4801      	ldr	r0, [pc, #4]	; (d5594 <mbedtls_cipher_finish+0x3c>)
   d558e:	bd10      	pop	{r4, pc}
    }
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
   d5590:	4801      	ldr	r0, [pc, #4]	; (d5598 <mbedtls_cipher_finish+0x40>)
}
   d5592:	bd10      	pop	{r4, pc}
   d5594:	ffff9f00 	.word	0xffff9f00
   d5598:	ffff9f80 	.word	0xffff9f80

000d559c <mbedtls_cipher_crypt>:
 */
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen )
{
   d559c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d559e:	b085      	sub	sp, #20
   d55a0:	4605      	mov	r5, r0
   d55a2:	461f      	mov	r7, r3
   d55a4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d55a6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    CIPHER_VALIDATE_RET( iv_len == 0 || iv != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );

    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )
   d55a8:	f7ff ff68 	bl	d547c <mbedtls_cipher_set_iv>
   d55ac:	b9b8      	cbnz	r0, d55de <mbedtls_cipher_crypt+0x42>
}

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( ctx->cipher_info == NULL )
   d55ae:	682b      	ldr	r3, [r5, #0]
   d55b0:	b1a3      	cbz	r3, d55dc <mbedtls_cipher_crypt+0x40>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    ctx->unprocessed_len = 0;
   d55b2:	61e8      	str	r0, [r5, #28]
        return( ret );

    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_cipher_update( ctx, input, ilen, output, olen ) ) != 0 )
   d55b4:	9400      	str	r4, [sp, #0]
   d55b6:	4633      	mov	r3, r6
   d55b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d55ba:	4639      	mov	r1, r7
   d55bc:	4628      	mov	r0, r5
   d55be:	f7ff ff87 	bl	d54d0 <mbedtls_cipher_update>
   d55c2:	b960      	cbnz	r0, d55de <mbedtls_cipher_crypt+0x42>
        return( ret );

    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen, &finish_olen ) ) != 0 )
   d55c4:	6821      	ldr	r1, [r4, #0]
   d55c6:	aa03      	add	r2, sp, #12
   d55c8:	4431      	add	r1, r6
   d55ca:	4628      	mov	r0, r5
   d55cc:	f7ff ffc4 	bl	d5558 <mbedtls_cipher_finish>
   d55d0:	b928      	cbnz	r0, d55de <mbedtls_cipher_crypt+0x42>
        return( ret );

    *olen += finish_olen;
   d55d2:	6822      	ldr	r2, [r4, #0]
   d55d4:	9b03      	ldr	r3, [sp, #12]
   d55d6:	4413      	add	r3, r2
   d55d8:	6023      	str	r3, [r4, #0]

    return( 0 );
   d55da:	e000      	b.n	d55de <mbedtls_cipher_crypt+0x42>

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( ctx->cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d55dc:	4801      	ldr	r0, [pc, #4]	; (d55e4 <mbedtls_cipher_crypt+0x48>)
        return( ret );

    *olen += finish_olen;

    return( 0 );
}
   d55de:	b005      	add	sp, #20
   d55e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d55e2:	bf00      	nop
   d55e4:	ffff9f00 	.word	0xffff9f00

000d55e8 <mbedtls_cipher_auth_encrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
   d55e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d55ec:	6807      	ldr	r7, [r0, #0]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
   d55ee:	9d07      	ldr	r5, [sp, #28]
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d55f0:	787f      	ldrb	r7, [r7, #1]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
   d55f2:	9e08      	ldr	r6, [sp, #32]
   d55f4:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
   d55f8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   d55fc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d5600:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d5604:	2f06      	cmp	r7, #6
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
   d5606:	4614      	mov	r4, r2
   d5608:	9a09      	ldr	r2, [sp, #36]	; 0x24
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d560a:	d112      	bne.n	d5632 <mbedtls_cipher_auth_encrypt+0x4a>
    {
        *olen = ilen;
   d560c:	f8c9 2000 	str.w	r2, [r9]
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
                                   iv, iv_len, ad, ad_len, input, output,
                                   tag_len, tag ) );
   d5610:	9308      	str	r3, [sp, #32]
   d5612:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   d5616:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
   d561a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   d561e:	960a      	str	r6, [sp, #40]	; 0x28
   d5620:	9509      	str	r5, [sp, #36]	; 0x24
   d5622:	9407      	str	r4, [sp, #28]
   d5624:	460b      	mov	r3, r1
   d5626:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d5628:	2101      	movs	r1, #1
                                ilen, iv, ad, ad_len, input, output, tag ) );
    }
#endif /* MBEDTLS_CHACHAPOLY_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
   d562a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
    {
        *olen = ilen;
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
                                   iv, iv_len, ad, ad_len, input, output,
                                   tag_len, tag ) );
   d562e:	f006 bd04 	b.w	dc03a <mbedtls_gcm_crypt_and_tag>
                                ilen, iv, ad, ad_len, input, output, tag ) );
    }
#endif /* MBEDTLS_CHACHAPOLY_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
   d5632:	4801      	ldr	r0, [pc, #4]	; (d5638 <mbedtls_cipher_auth_encrypt+0x50>)
   d5634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5638:	ffff9f80 	.word	0xffff9f80

000d563c <mbedtls_cipher_auth_decrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
   d563c:	b530      	push	{r4, r5, lr}
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d563e:	6805      	ldr	r5, [r0, #0]
   d5640:	786d      	ldrb	r5, [r5, #1]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
   d5642:	b087      	sub	sp, #28
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d5644:	2d06      	cmp	r5, #6
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
   d5646:	460c      	mov	r4, r1
   d5648:	990c      	ldr	r1, [sp, #48]	; 0x30
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d564a:	d117      	bne.n	d567c <mbedtls_cipher_auth_decrypt+0x40>
    {
        int ret;

        *olen = ilen;
   d564c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   d564e:	6029      	str	r1, [r5, #0]
        ret = mbedtls_gcm_auth_decrypt( (mbedtls_gcm_context *)ctx->cipher_ctx, ilen,
   d5650:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   d5652:	9505      	str	r5, [sp, #20]
   d5654:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   d5656:	9504      	str	r5, [sp, #16]
   d5658:	9d10      	ldr	r5, [sp, #64]	; 0x40
   d565a:	9503      	str	r5, [sp, #12]
   d565c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   d565e:	9502      	str	r5, [sp, #8]
   d5660:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d5662:	e88d 0028 	stmia.w	sp, {r3, r5}
   d5666:	4613      	mov	r3, r2
   d5668:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d566a:	4622      	mov	r2, r4
   d566c:	f006 fd0a 	bl	dc084 <mbedtls_gcm_auth_decrypt>
                                iv, iv_len, ad, ad_len,
                                tag, tag_len, input, output );

        if( ret == MBEDTLS_ERR_GCM_AUTH_FAILED )
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
   d5670:	4b04      	ldr	r3, [pc, #16]	; (d5684 <mbedtls_cipher_auth_decrypt+0x48>)
   d5672:	f110 0f12 	cmn.w	r0, #18
   d5676:	bf08      	it	eq
   d5678:	4618      	moveq	r0, r3
   d567a:	e000      	b.n	d567e <mbedtls_cipher_auth_decrypt+0x42>

        return( ret );
    }
#endif /* MBEDTLS_CHACHAPOLY_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
   d567c:	4802      	ldr	r0, [pc, #8]	; (d5688 <mbedtls_cipher_auth_decrypt+0x4c>)
}
   d567e:	b007      	add	sp, #28
   d5680:	bd30      	pop	{r4, r5, pc}
   d5682:	bf00      	nop
   d5684:	ffff9d00 	.word	0xffff9d00
   d5688:	ffff9f80 	.word	0xffff9f80

000d568c <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
   d568c:	b530      	push	{r4, r5, lr}
    if( ( end - *p ) < 1 )
   d568e:	6803      	ldr	r3, [r0, #0]
   d5690:	1acd      	subs	r5, r1, r3
   d5692:	2d00      	cmp	r5, #0
   d5694:	dc02      	bgt.n	d569c <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d5696:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   d569a:	bd30      	pop	{r4, r5, pc}

    if( ( **p & 0x80 ) == 0 )
   d569c:	781c      	ldrb	r4, [r3, #0]
   d569e:	f014 0f80 	tst.w	r4, #128	; 0x80
   d56a2:	d104      	bne.n	d56ae <mbedtls_asn1_get_len+0x22>
        *len = *(*p)++;
   d56a4:	1c5c      	adds	r4, r3, #1
   d56a6:	6004      	str	r4, [r0, #0]
   d56a8:	781b      	ldrb	r3, [r3, #0]
   d56aa:	6013      	str	r3, [r2, #0]
   d56ac:	e036      	b.n	d571c <mbedtls_asn1_get_len+0x90>
    else
    {
        switch( **p & 0x7F )
   d56ae:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d56b2:	3c01      	subs	r4, #1
   d56b4:	2c03      	cmp	r4, #3
   d56b6:	d838      	bhi.n	d572a <mbedtls_asn1_get_len+0x9e>
   d56b8:	e8df f004 	tbb	[pc, r4]
   d56bc:	20130902 	.word	0x20130902
        {
        case 1:
            if( ( end - *p ) < 2 )
   d56c0:	2d01      	cmp	r5, #1
   d56c2:	d0e8      	beq.n	d5696 <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = (*p)[1];
   d56c4:	785b      	ldrb	r3, [r3, #1]
   d56c6:	6013      	str	r3, [r2, #0]
            (*p) += 2;
   d56c8:	6803      	ldr	r3, [r0, #0]
   d56ca:	3302      	adds	r3, #2
   d56cc:	e025      	b.n	d571a <mbedtls_asn1_get_len+0x8e>
            break;

        case 2:
            if( ( end - *p ) < 3 )
   d56ce:	2d02      	cmp	r5, #2
   d56d0:	dde1      	ble.n	d5696 <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
   d56d2:	785c      	ldrb	r4, [r3, #1]
   d56d4:	789b      	ldrb	r3, [r3, #2]
   d56d6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   d56da:	6013      	str	r3, [r2, #0]
            (*p) += 3;
   d56dc:	6803      	ldr	r3, [r0, #0]
   d56de:	3303      	adds	r3, #3
   d56e0:	e01b      	b.n	d571a <mbedtls_asn1_get_len+0x8e>
            break;

        case 3:
            if( ( end - *p ) < 4 )
   d56e2:	2d03      	cmp	r5, #3
   d56e4:	ddd7      	ble.n	d5696 <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 16 ) |
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
   d56e6:	789c      	ldrb	r4, [r3, #2]
   d56e8:	785d      	ldrb	r5, [r3, #1]
   d56ea:	78db      	ldrb	r3, [r3, #3]
   d56ec:	0224      	lsls	r4, r4, #8
   d56ee:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   d56f2:	431c      	orrs	r4, r3
   d56f4:	6014      	str	r4, [r2, #0]
            (*p) += 4;
   d56f6:	6803      	ldr	r3, [r0, #0]
   d56f8:	3304      	adds	r3, #4
   d56fa:	e00e      	b.n	d571a <mbedtls_asn1_get_len+0x8e>
            break;

        case 4:
            if( ( end - *p ) < 5 )
   d56fc:	2d04      	cmp	r5, #4
   d56fe:	ddca      	ble.n	d5696 <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
   d5700:	789c      	ldrb	r4, [r3, #2]
   d5702:	785d      	ldrb	r5, [r3, #1]
   d5704:	0424      	lsls	r4, r4, #16
   d5706:	ea44 6505 	orr.w	r5, r4, r5, lsl #24
   d570a:	791c      	ldrb	r4, [r3, #4]
   d570c:	78db      	ldrb	r3, [r3, #3]
   d570e:	432c      	orrs	r4, r5
   d5710:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5714:	6013      	str	r3, [r2, #0]
            (*p) += 5;
   d5716:	6803      	ldr	r3, [r0, #0]
   d5718:	3305      	adds	r3, #5
   d571a:	6003      	str	r3, [r0, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
   d571c:	6803      	ldr	r3, [r0, #0]
   d571e:	1ac9      	subs	r1, r1, r3
   d5720:	6813      	ldr	r3, [r2, #0]
   d5722:	428b      	cmp	r3, r1
   d5724:	d8b7      	bhi.n	d5696 <mbedtls_asn1_get_len+0xa>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
   d5726:	2000      	movs	r0, #0
   d5728:	bd30      	pop	{r4, r5, pc}
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
            (*p) += 5;
            break;

        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   d572a:	f06f 0063 	mvn.w	r0, #99	; 0x63

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
   d572e:	bd30      	pop	{r4, r5, pc}

000d5730 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
   d5730:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
   d5732:	6804      	ldr	r4, [r0, #0]
   d5734:	1b0e      	subs	r6, r1, r4
   d5736:	2e00      	cmp	r6, #0
   d5738:	dd07      	ble.n	d574a <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
   d573a:	7826      	ldrb	r6, [r4, #0]
   d573c:	429e      	cmp	r6, r3
   d573e:	d107      	bne.n	d5750 <mbedtls_asn1_get_tag+0x20>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
   d5740:	3401      	adds	r4, #1
   d5742:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
   d5744:	bc70      	pop	{r4, r5, r6}
    if( **p != tag )
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;

    return( mbedtls_asn1_get_len( p, end, len ) );
   d5746:	f7ff bfa1 	b.w	d568c <mbedtls_asn1_get_len>
int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d574a:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   d574e:	e001      	b.n	d5754 <mbedtls_asn1_get_tag+0x24>

    if( **p != tag )
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   d5750:	f06f 0061 	mvn.w	r0, #97	; 0x61

    (*p)++;

    return( mbedtls_asn1_get_len( p, end, len ) );
}
   d5754:	bc70      	pop	{r4, r5, r6}
   d5756:	4770      	bx	lr

000d5758 <mbedtls_asn1_get_bool>:

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
   d5758:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
   d575a:	2301      	movs	r3, #1
}

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
   d575c:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
   d575e:	aa01      	add	r2, sp, #4
}

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
   d5760:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
   d5762:	f7ff ffe5 	bl	d5730 <mbedtls_asn1_get_tag>
   d5766:	b970      	cbnz	r0, d5786 <mbedtls_asn1_get_bool+0x2e>
        return( ret );

    if( len != 1 )
   d5768:	9b01      	ldr	r3, [sp, #4]
   d576a:	2b01      	cmp	r3, #1
   d576c:	d109      	bne.n	d5782 <mbedtls_asn1_get_bool+0x2a>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = ( **p != 0 ) ? 1 : 0;
   d576e:	6823      	ldr	r3, [r4, #0]
   d5770:	781b      	ldrb	r3, [r3, #0]
   d5772:	3300      	adds	r3, #0
   d5774:	bf18      	it	ne
   d5776:	2301      	movne	r3, #1
   d5778:	602b      	str	r3, [r5, #0]
    (*p)++;
   d577a:	6823      	ldr	r3, [r4, #0]
   d577c:	3301      	adds	r3, #1
   d577e:	6023      	str	r3, [r4, #0]

    return( 0 );
   d5780:	e001      	b.n	d5786 <mbedtls_asn1_get_bool+0x2e>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
        return( ret );

    if( len != 1 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   d5782:	f06f 0063 	mvn.w	r0, #99	; 0x63

    *val = ( **p != 0 ) ? 1 : 0;
    (*p)++;

    return( 0 );
}
   d5786:	b003      	add	sp, #12
   d5788:	bd30      	pop	{r4, r5, pc}

000d578a <mbedtls_asn1_get_int>:

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
   d578a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d578c:	2302      	movs	r3, #2
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
   d578e:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d5790:	aa01      	add	r2, sp, #4
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
   d5792:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d5794:	f7ff ffcc 	bl	d5730 <mbedtls_asn1_get_tag>
   d5798:	b9c8      	cbnz	r0, d57ce <mbedtls_asn1_get_int+0x44>
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
   d579a:	9b01      	ldr	r3, [sp, #4]
   d579c:	3b01      	subs	r3, #1
   d579e:	2b03      	cmp	r3, #3
   d57a0:	d813      	bhi.n	d57ca <mbedtls_asn1_get_int+0x40>
   d57a2:	6823      	ldr	r3, [r4, #0]
   d57a4:	f993 3000 	ldrsb.w	r3, [r3]
   d57a8:	2b00      	cmp	r3, #0
   d57aa:	db0e      	blt.n	d57ca <mbedtls_asn1_get_int+0x40>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;
   d57ac:	6028      	str	r0, [r5, #0]

    while( len-- > 0 )
   d57ae:	9b01      	ldr	r3, [sp, #4]
   d57b0:	1e5a      	subs	r2, r3, #1
   d57b2:	9201      	str	r2, [sp, #4]
   d57b4:	b15b      	cbz	r3, d57ce <mbedtls_asn1_get_int+0x44>
    {
        *val = ( *val << 8 ) | **p;
   d57b6:	6823      	ldr	r3, [r4, #0]
   d57b8:	682a      	ldr	r2, [r5, #0]
   d57ba:	781b      	ldrb	r3, [r3, #0]
   d57bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d57c0:	602b      	str	r3, [r5, #0]
        (*p)++;
   d57c2:	6823      	ldr	r3, [r4, #0]
   d57c4:	3301      	adds	r3, #1
   d57c6:	6023      	str	r3, [r4, #0]
    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;

    while( len-- > 0 )
   d57c8:	e7f1      	b.n	d57ae <mbedtls_asn1_get_int+0x24>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   d57ca:	f06f 0063 	mvn.w	r0, #99	; 0x63
        *val = ( *val << 8 ) | **p;
        (*p)++;
    }

    return( 0 );
}
   d57ce:	b003      	add	sp, #12
   d57d0:	bd30      	pop	{r4, r5, pc}

000d57d2 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
   d57d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d57d4:	2302      	movs	r3, #2

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
   d57d6:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d57d8:	aa01      	add	r2, sp, #4

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
   d57da:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d57dc:	f7ff ffa8 	bl	d5730 <mbedtls_asn1_get_tag>
   d57e0:	b940      	cbnz	r0, d57f4 <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
   d57e2:	9a01      	ldr	r2, [sp, #4]
   d57e4:	6821      	ldr	r1, [r4, #0]
   d57e6:	4628      	mov	r0, r5
   d57e8:	f00a fda0 	bl	e032c <mbedtls_mpi_read_binary>

    *p += len;
   d57ec:	6822      	ldr	r2, [r4, #0]
   d57ee:	9b01      	ldr	r3, [sp, #4]
   d57f0:	4413      	add	r3, r2
   d57f2:	6023      	str	r3, [r4, #0]

    return( ret );
}
   d57f4:	b003      	add	sp, #12
   d57f6:	bd30      	pop	{r4, r5, pc}

000d57f8 <mbedtls_asn1_get_bitstring>:
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
   d57f8:	b570      	push	{r4, r5, r6, lr}
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
   d57fa:	2303      	movs	r3, #3
}
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
   d57fc:	4604      	mov	r4, r0
   d57fe:	460e      	mov	r6, r1
   d5800:	4615      	mov	r5, r2
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
   d5802:	f7ff ff95 	bl	d5730 <mbedtls_asn1_get_tag>
   d5806:	b9d8      	cbnz	r0, d5840 <mbedtls_asn1_get_bitstring+0x48>
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
   d5808:	6813      	ldr	r3, [r2, #0]
   d580a:	b1a3      	cbz	r3, d5836 <mbedtls_asn1_get_bitstring+0x3e>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;
   d580c:	3b01      	subs	r3, #1
   d580e:	6013      	str	r3, [r2, #0]

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
   d5810:	6823      	ldr	r3, [r4, #0]
   d5812:	781b      	ldrb	r3, [r3, #0]
   d5814:	7113      	strb	r3, [r2, #4]
    if( bs->unused_bits > 7 )
   d5816:	2b07      	cmp	r3, #7
   d5818:	d810      	bhi.n	d583c <mbedtls_asn1_get_bitstring+0x44>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;
   d581a:	6823      	ldr	r3, [r4, #0]
   d581c:	3301      	adds	r3, #1
   d581e:	6023      	str	r3, [r4, #0]

    /* Get actual bitstring */
    bs->p = *p;
   d5820:	6093      	str	r3, [r2, #8]
    *p += bs->len;
   d5822:	6822      	ldr	r2, [r4, #0]
   d5824:	682b      	ldr	r3, [r5, #0]
   d5826:	4413      	add	r3, r2

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d5828:	429e      	cmp	r6, r3
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;

    /* Get actual bitstring */
    bs->p = *p;
    *p += bs->len;
   d582a:	6023      	str	r3, [r4, #0]

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d582c:	bf0c      	ite	eq
   d582e:	2000      	moveq	r0, #0
   d5830:	f06f 0065 	mvnne.w	r0, #101	; 0x65
   d5834:	bd70      	pop	{r4, r5, r6, pc}
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d5836:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   d583a:	bd70      	pop	{r4, r5, r6, pc}
    bs->len -= 1;

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
    if( bs->unused_bits > 7 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   d583c:	f06f 0063 	mvn.w	r0, #99	; 0x63

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
   d5840:	bd70      	pop	{r4, r5, r6, pc}

000d5842 <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
   d5842:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
   d5844:	2303      	movs	r3, #3
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
   d5846:	4604      	mov	r4, r0
   d5848:	4615      	mov	r5, r2
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
   d584a:	f7ff ff71 	bl	d5730 <mbedtls_asn1_get_tag>
   d584e:	b958      	cbnz	r0, d5868 <mbedtls_asn1_get_bitstring_null+0x26>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
   d5850:	6813      	ldr	r3, [r2, #0]
   d5852:	1e5a      	subs	r2, r3, #1
   d5854:	2b01      	cmp	r3, #1
   d5856:	602a      	str	r2, [r5, #0]
   d5858:	d904      	bls.n	d5864 <mbedtls_asn1_get_bitstring_null+0x22>
   d585a:	6823      	ldr	r3, [r4, #0]
   d585c:	1c5a      	adds	r2, r3, #1
   d585e:	6022      	str	r2, [r4, #0]
   d5860:	781b      	ldrb	r3, [r3, #0]
   d5862:	b10b      	cbz	r3, d5868 <mbedtls_asn1_get_bitstring_null+0x26>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
   d5864:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
   d5868:	bd38      	pop	{r3, r4, r5, pc}

000d586a <mbedtls_asn1_get_sequence_of>:
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
   d586a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d586e:	4615      	mov	r5, r2
   d5870:	4698      	mov	r8, r3
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d5872:	aa01      	add	r2, sp, #4
   d5874:	2330      	movs	r3, #48	; 0x30
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
   d5876:	4604      	mov	r4, r0
   d5878:	460f      	mov	r7, r1
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d587a:	f7ff ff59 	bl	d5730 <mbedtls_asn1_get_tag>
   d587e:	4606      	mov	r6, r0
   d5880:	bb78      	cbnz	r0, d58e2 <mbedtls_asn1_get_sequence_of+0x78>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( *p + len != end )
   d5882:	6822      	ldr	r2, [r4, #0]
   d5884:	9b01      	ldr	r3, [sp, #4]
   d5886:	4413      	add	r3, r2
   d5888:	429f      	cmp	r7, r3
   d588a:	d01d      	beq.n	d58c8 <mbedtls_asn1_get_sequence_of+0x5e>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d588c:	f06f 0665 	mvn.w	r6, #101	; 0x65
   d5890:	e027      	b.n	d58e2 <mbedtls_asn1_get_sequence_of+0x78>

    while( *p < end )
   d5892:	6823      	ldr	r3, [r4, #0]
   d5894:	429f      	cmp	r7, r3
   d5896:	d91a      	bls.n	d58ce <mbedtls_asn1_get_sequence_of+0x64>
    {
        buf = &(cur->buf);
        buf->tag = **p;
   d5898:	781b      	ldrb	r3, [r3, #0]
   d589a:	602b      	str	r3, [r5, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
   d589c:	464a      	mov	r2, r9
   d589e:	4643      	mov	r3, r8
   d58a0:	4639      	mov	r1, r7
   d58a2:	4620      	mov	r0, r4
   d58a4:	f7ff ff44 	bl	d5730 <mbedtls_asn1_get_tag>
   d58a8:	b9b8      	cbnz	r0, d58da <mbedtls_asn1_get_sequence_of+0x70>
            return( ret );

        buf->p = *p;
   d58aa:	6823      	ldr	r3, [r4, #0]
   d58ac:	60ab      	str	r3, [r5, #8]
        *p += buf->len;
   d58ae:	6822      	ldr	r2, [r4, #0]
   d58b0:	686b      	ldr	r3, [r5, #4]
   d58b2:	4413      	add	r3, r2

        /* Allocate and assign next pointer */
        if( *p < end )
   d58b4:	429f      	cmp	r7, r3

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
            return( ret );

        buf->p = *p;
        *p += buf->len;
   d58b6:	6023      	str	r3, [r4, #0]

        /* Allocate and assign next pointer */
        if( *p < end )
   d58b8:	d9eb      	bls.n	d5892 <mbedtls_asn1_get_sequence_of+0x28>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
   d58ba:	2110      	movs	r1, #16
   d58bc:	2001      	movs	r0, #1
   d58be:	f011 fa29 	bl	e6d14 <calloc>
                                            sizeof( mbedtls_asn1_sequence ) );
   d58c2:	60e8      	str	r0, [r5, #12]

            if( cur->next == NULL )
   d58c4:	b158      	cbz	r0, d58de <mbedtls_asn1_get_sequence_of+0x74>
   d58c6:	4605      	mov	r5, r0
    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
   d58c8:	f105 0904 	add.w	r9, r5, #4
   d58cc:	e7e1      	b.n	d5892 <mbedtls_asn1_get_sequence_of+0x28>
            cur = cur->next;
        }
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
   d58ce:	2300      	movs	r3, #0
   d58d0:	60eb      	str	r3, [r5, #12]

    if( *p != end )
   d58d2:	6823      	ldr	r3, [r4, #0]
   d58d4:	429f      	cmp	r7, r3
   d58d6:	d004      	beq.n	d58e2 <mbedtls_asn1_get_sequence_of+0x78>
   d58d8:	e7d8      	b.n	d588c <mbedtls_asn1_get_sequence_of+0x22>
    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
   d58da:	4606      	mov	r6, r0
   d58dc:	e001      	b.n	d58e2 <mbedtls_asn1_get_sequence_of+0x78>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
                                            sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
   d58de:	f06f 0669 	mvn.w	r6, #105	; 0x69

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
   d58e2:	4630      	mov	r0, r6
   d58e4:	b003      	add	sp, #12
   d58e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d58ea <mbedtls_asn1_get_alg>:

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
   d58ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d58ee:	4690      	mov	r8, r2
   d58f0:	461f      	mov	r7, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d58f2:	aa01      	add	r2, sp, #4
   d58f4:	2330      	movs	r3, #48	; 0x30
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
   d58f6:	4604      	mov	r4, r0
   d58f8:	460e      	mov	r6, r1
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d58fa:	f7ff ff19 	bl	d5730 <mbedtls_asn1_get_tag>
   d58fe:	4605      	mov	r5, r0
   d5900:	2800      	cmp	r0, #0
   d5902:	d13b      	bne.n	d597c <mbedtls_asn1_get_alg+0x92>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
   d5904:	6823      	ldr	r3, [r4, #0]
   d5906:	1af6      	subs	r6, r6, r3
   d5908:	2e00      	cmp	r6, #0
   d590a:	dd35      	ble.n	d5978 <mbedtls_asn1_get_alg+0x8e>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
   d590c:	4642      	mov	r2, r8
   d590e:	781b      	ldrb	r3, [r3, #0]
   d5910:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
   d5914:	9b01      	ldr	r3, [sp, #4]
   d5916:	6826      	ldr	r6, [r4, #0]
   d5918:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
   d591a:	4631      	mov	r1, r6
   d591c:	2306      	movs	r3, #6
   d591e:	4620      	mov	r0, r4
   d5920:	f7ff ff06 	bl	d5730 <mbedtls_asn1_get_tag>
   d5924:	4605      	mov	r5, r0
   d5926:	bb48      	cbnz	r0, d597c <mbedtls_asn1_get_alg+0x92>
        return( ret );

    alg->p = *p;
   d5928:	6823      	ldr	r3, [r4, #0]
   d592a:	f8c8 3008 	str.w	r3, [r8, #8]
    *p += alg->len;
   d592e:	6822      	ldr	r2, [r4, #0]
   d5930:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d5934:	18d1      	adds	r1, r2, r3

    if( *p == end )
   d5936:	428e      	cmp	r6, r1

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( ret );

    alg->p = *p;
    *p += alg->len;
   d5938:	6021      	str	r1, [r4, #0]

    if( *p == end )
   d593a:	d104      	bne.n	d5946 <mbedtls_asn1_get_alg+0x5c>
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
   d593c:	210c      	movs	r1, #12
   d593e:	4638      	mov	r0, r7
   d5940:	f004 fdce 	bl	da4e0 <mbedtls_platform_zeroize>
        return( 0 );
   d5944:	e01a      	b.n	d597c <mbedtls_asn1_get_alg+0x92>
    }

    params->tag = **p;
   d5946:	5cd3      	ldrb	r3, [r2, r3]
   d5948:	463a      	mov	r2, r7
    (*p)++;

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
   d594a:	4631      	mov	r1, r6
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
        return( 0 );
    }

    params->tag = **p;
   d594c:	f842 3b04 	str.w	r3, [r2], #4
    (*p)++;
   d5950:	6823      	ldr	r3, [r4, #0]
   d5952:	3301      	adds	r3, #1
   d5954:	6023      	str	r3, [r4, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
   d5956:	4620      	mov	r0, r4
   d5958:	f7ff fe98 	bl	d568c <mbedtls_asn1_get_len>
   d595c:	4605      	mov	r5, r0
   d595e:	b968      	cbnz	r0, d597c <mbedtls_asn1_get_alg+0x92>
        return( ret );

    params->p = *p;
   d5960:	6823      	ldr	r3, [r4, #0]
   d5962:	60bb      	str	r3, [r7, #8]
    *p += params->len;
   d5964:	6822      	ldr	r2, [r4, #0]
   d5966:	687b      	ldr	r3, [r7, #4]
   d5968:	4413      	add	r3, r2

    if( *p != end )
   d596a:	429e      	cmp	r6, r3

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
        return( ret );

    params->p = *p;
    *p += params->len;
   d596c:	6023      	str	r3, [r4, #0]

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d596e:	bf0c      	ite	eq
   d5970:	4605      	moveq	r5, r0
   d5972:	f06f 0565 	mvnne.w	r5, #101	; 0x65
   d5976:	e001      	b.n	d597c <mbedtls_asn1_get_alg+0x92>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d5978:	f06f 055f 	mvn.w	r5, #95	; 0x5f

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
   d597c:	4628      	mov	r0, r5
   d597e:	b002      	add	sp, #8
   d5980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5984 <mbedtls_asn1_get_alg_null>:

int mbedtls_asn1_get_alg_null( unsigned char **p,
                       const unsigned char *end,
                       mbedtls_asn1_buf *alg )
{
   d5984:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int ret;
    mbedtls_asn1_buf params;

    memset( &params, 0, sizeof(mbedtls_asn1_buf) );
   d5986:	2300      	movs	r3, #0
   d5988:	9301      	str	r3, [sp, #4]
   d598a:	9302      	str	r3, [sp, #8]
   d598c:	9303      	str	r3, [sp, #12]

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
   d598e:	ab01      	add	r3, sp, #4
   d5990:	f7ff ffab 	bl	d58ea <mbedtls_asn1_get_alg>
   d5994:	b960      	cbnz	r0, d59b0 <mbedtls_asn1_get_alg_null+0x2c>
        return( ret );

    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
   d5996:	9b01      	ldr	r3, [sp, #4]
   d5998:	2b05      	cmp	r3, #5
   d599a:	d000      	beq.n	d599e <mbedtls_asn1_get_alg_null+0x1a>
   d599c:	b933      	cbnz	r3, d59ac <mbedtls_asn1_get_alg_null+0x28>
   d599e:	9b02      	ldr	r3, [sp, #8]
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
   d59a0:	2b00      	cmp	r3, #0
   d59a2:	bf0c      	ite	eq
   d59a4:	2000      	moveq	r0, #0
   d59a6:	f06f 0067 	mvnne.w	r0, #103	; 0x67
   d59aa:	e001      	b.n	d59b0 <mbedtls_asn1_get_alg_null+0x2c>
   d59ac:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
   d59b0:	b005      	add	sp, #20
   d59b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d59b8 <_ZL14x509_parse_intPPhjPi>:
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;
   d59b8:	2300      	movs	r3, #0
        cur = cur->next;
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
   d59ba:	b530      	push	{r4, r5, lr}
    *res = 0;
   d59bc:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
   d59be:	250a      	movs	r5, #10

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
   d59c0:	b189      	cbz	r1, d59e6 <_ZL14x509_parse_intPPhjPi+0x2e>
    {
        if( ( **p < '0') || ( **p > '9' ) )
   d59c2:	6803      	ldr	r3, [r0, #0]
   d59c4:	781b      	ldrb	r3, [r3, #0]
   d59c6:	3b30      	subs	r3, #48	; 0x30
   d59c8:	2b09      	cmp	r3, #9
   d59ca:	d80e      	bhi.n	d59ea <_ZL14x509_parse_intPPhjPi+0x32>
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
   d59cc:	6813      	ldr	r3, [r2, #0]
   d59ce:	436b      	muls	r3, r5
   d59d0:	6013      	str	r3, [r2, #0]
        *res += ( *(*p)++ - '0' );
   d59d2:	6803      	ldr	r3, [r0, #0]
   d59d4:	1c5c      	adds	r4, r3, #1
   d59d6:	6004      	str	r4, [r0, #0]
   d59d8:	781b      	ldrb	r3, [r3, #0]
   d59da:	6814      	ldr	r4, [r2, #0]
   d59dc:	3b30      	subs	r3, #48	; 0x30
   d59de:	4423      	add	r3, r4
   d59e0:	6013      	str	r3, [r2, #0]

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
   d59e2:	3901      	subs	r1, #1
   d59e4:	e7ec      	b.n	d59c0 <_ZL14x509_parse_intPPhjPi+0x8>

        *res *= 10;
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
   d59e6:	4608      	mov	r0, r1
   d59e8:	bd30      	pop	{r4, r5, pc}
    *res = 0;

    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );
   d59ea:	4801      	ldr	r0, [pc, #4]	; (d59f0 <_ZL14x509_parse_intPPhjPi+0x38>)
        *res *= 10;
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
}
   d59ec:	bd30      	pop	{r4, r5, pc}
   d59ee:	bf00      	nop
   d59f0:	ffffdc00 	.word	0xffffdc00

000d59f4 <mbedtls_x509_get_serial>:
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
   d59f4:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( end - *p ) < 1 )
   d59f6:	6803      	ldr	r3, [r0, #0]
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
   d59f8:	4615      	mov	r5, r2
    int ret;

    if( ( end - *p ) < 1 )
   d59fa:	1aca      	subs	r2, r1, r3
   d59fc:	2a00      	cmp	r2, #0
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
   d59fe:	4604      	mov	r4, r0
    int ret;

    if( ( end - *p ) < 1 )
   d5a00:	dd17      	ble.n	d5a32 <mbedtls_x509_get_serial+0x3e>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
   d5a02:	781a      	ldrb	r2, [r3, #0]
   d5a04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   d5a08:	2a02      	cmp	r2, #2
   d5a0a:	d114      	bne.n	d5a36 <mbedtls_x509_get_serial+0x42>
        **p !=   MBEDTLS_ASN1_INTEGER )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    serial->tag = *(*p)++;
   d5a0c:	1c5a      	adds	r2, r3, #1
   d5a0e:	6002      	str	r2, [r0, #0]
   d5a10:	462a      	mov	r2, r5
   d5a12:	781b      	ldrb	r3, [r3, #0]
   d5a14:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
   d5a18:	f7ff fe38 	bl	d568c <mbedtls_asn1_get_len>
   d5a1c:	b110      	cbz	r0, d5a24 <mbedtls_x509_get_serial+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
   d5a1e:	f5a0 500a 	sub.w	r0, r0, #8832	; 0x2280
   d5a22:	bd38      	pop	{r3, r4, r5, pc}

    serial->p = *p;
   d5a24:	6823      	ldr	r3, [r4, #0]
   d5a26:	60ab      	str	r3, [r5, #8]
    *p += serial->len;
   d5a28:	6822      	ldr	r2, [r4, #0]
   d5a2a:	686b      	ldr	r3, [r5, #4]
   d5a2c:	4413      	add	r3, r2
   d5a2e:	6023      	str	r3, [r4, #0]

    return( 0 );
   d5a30:	bd38      	pop	{r3, r4, r5, pc}
{
    int ret;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d5a32:	4802      	ldr	r0, [pc, #8]	; (d5a3c <mbedtls_x509_get_serial+0x48>)
   d5a34:	bd38      	pop	{r3, r4, r5, pc}

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
        **p !=   MBEDTLS_ASN1_INTEGER )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   d5a36:	4802      	ldr	r0, [pc, #8]	; (d5a40 <mbedtls_x509_get_serial+0x4c>)

    serial->p = *p;
    *p += serial->len;

    return( 0 );
}
   d5a38:	bd38      	pop	{r3, r4, r5, pc}
   d5a3a:	bf00      	nop
   d5a3c:	ffffdd20 	.word	0xffffdd20
   d5a40:	ffffdd1e 	.word	0xffffdd1e

000d5a44 <mbedtls_x509_get_alg_null>:
 *       algorithm               OBJECT IDENTIFIER,
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
int mbedtls_x509_get_alg_null( unsigned char **p, const unsigned char *end,
                       mbedtls_x509_buf *alg )
{
   d5a44:	b508      	push	{r3, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_alg_null( p, end, alg ) ) != 0 )
   d5a46:	f7ff ff9d 	bl	d5984 <mbedtls_asn1_get_alg_null>
   d5a4a:	b108      	cbz	r0, d5a50 <mbedtls_x509_get_alg_null+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
   d5a4c:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300

    return( 0 );
}
   d5a50:	bd08      	pop	{r3, pc}

000d5a52 <mbedtls_x509_get_alg>:
/*
 * Parse an algorithm identifier with (optional) parameters
 */
int mbedtls_x509_get_alg( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *alg, mbedtls_x509_buf *params )
{
   d5a52:	b508      	push	{r3, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
   d5a54:	f7ff ff49 	bl	d58ea <mbedtls_asn1_get_alg>
   d5a58:	b108      	cbz	r0, d5a5e <mbedtls_x509_get_alg+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
   d5a5a:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300

    return( 0 );
}
   d5a5e:	bd08      	pop	{r3, pc}

000d5a60 <mbedtls_x509_get_rsassa_pss_params>:
 * option. Enfore this at parsing time.
 */
int mbedtls_x509_get_rsassa_pss_params( const mbedtls_x509_buf *params,
                                mbedtls_md_type_t *md_alg, mbedtls_md_type_t *mgf_md,
                                int *salt_len )
{
   d5a60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5a64:	461d      	mov	r5, r3
    const unsigned char *end, *end2;
    size_t len;
    mbedtls_x509_buf alg_id, alg_params;

    /* First set everything to defaults */
    *md_alg = MBEDTLS_MD_SHA1;
   d5a66:	2304      	movs	r3, #4
   d5a68:	700b      	strb	r3, [r1, #0]
    *mgf_md = MBEDTLS_MD_SHA1;
   d5a6a:	7013      	strb	r3, [r2, #0]
    *salt_len = 20;
   d5a6c:	2314      	movs	r3, #20
   d5a6e:	602b      	str	r3, [r5, #0]

    /* Make sure params is a SEQUENCE and setup bounds */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   d5a70:	6803      	ldr	r3, [r0, #0]
   d5a72:	2b30      	cmp	r3, #48	; 0x30
 * option. Enfore this at parsing time.
 */
int mbedtls_x509_get_rsassa_pss_params( const mbedtls_x509_buf *params,
                                mbedtls_md_type_t *md_alg, mbedtls_md_type_t *mgf_md,
                                int *salt_len )
{
   d5a74:	b08f      	sub	sp, #60	; 0x3c
   d5a76:	4688      	mov	r8, r1
   d5a78:	4616      	mov	r6, r2
    *md_alg = MBEDTLS_MD_SHA1;
    *mgf_md = MBEDTLS_MD_SHA1;
    *salt_len = 20;

    /* Make sure params is a SEQUENCE and setup bounds */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   d5a7a:	f040 80ca 	bne.w	d5c12 <mbedtls_x509_get_rsassa_pss_params+0x1b2>
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    p = (unsigned char *) params->p;
   d5a7e:	6883      	ldr	r3, [r0, #8]
    end = p + params->len;
   d5a80:	6844      	ldr	r4, [r0, #4]
    /* Make sure params is a SEQUENCE and setup bounds */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    p = (unsigned char *) params->p;
   d5a82:	9301      	str	r3, [sp, #4]
    end = p + params->len;
   d5a84:	441c      	add	r4, r3

    if( p == end )
   d5a86:	42a3      	cmp	r3, r4
   d5a88:	f000 80c1 	beq.w	d5c0e <mbedtls_x509_get_rsassa_pss_params+0x1ae>
        return( 0 );

    /*
     * HashAlgorithm
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   d5a8c:	23a0      	movs	r3, #160	; 0xa0
   d5a8e:	aa02      	add	r2, sp, #8
   d5a90:	4621      	mov	r1, r4
   d5a92:	a801      	add	r0, sp, #4
   d5a94:	f7ff fe4c 	bl	d5730 <mbedtls_asn1_get_tag>
   d5a98:	b9a8      	cbnz	r0, d5ac6 <mbedtls_x509_get_rsassa_pss_params+0x66>
                    MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )
    {
        end2 = p + len;
   d5a9a:	9b02      	ldr	r3, [sp, #8]
   d5a9c:	9f01      	ldr	r7, [sp, #4]
   d5a9e:	441f      	add	r7, r3

        /* HashAlgorithm ::= AlgorithmIdentifier (without parameters) */
        if( ( ret = mbedtls_x509_get_alg_null( &p, end2, &alg_id ) ) != 0 )
   d5aa0:	aa05      	add	r2, sp, #20
   d5aa2:	4639      	mov	r1, r7
   d5aa4:	a801      	add	r0, sp, #4
   d5aa6:	f7ff ffcd 	bl	d5a44 <mbedtls_x509_get_alg_null>
   d5aaa:	2800      	cmp	r0, #0
   d5aac:	f040 80b9 	bne.w	d5c22 <mbedtls_x509_get_rsassa_pss_params+0x1c2>
            return( ret );

        if( ( ret = mbedtls_oid_get_md_alg( &alg_id, md_alg ) ) != 0 )
   d5ab0:	4641      	mov	r1, r8
   d5ab2:	a805      	add	r0, sp, #20
   d5ab4:	f003 fc06 	bl	d92c4 <mbedtls_oid_get_md_alg>
   d5ab8:	2800      	cmp	r0, #0
   d5aba:	f040 80a5 	bne.w	d5c08 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
            return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

        if( p != end2 )
   d5abe:	9b01      	ldr	r3, [sp, #4]
   d5ac0:	429f      	cmp	r7, r3
   d5ac2:	d004      	beq.n	d5ace <mbedtls_x509_get_rsassa_pss_params+0x6e>
   d5ac4:	e09e      	b.n	d5c04 <mbedtls_x509_get_rsassa_pss_params+0x1a4>
            return( MBEDTLS_ERR_X509_INVALID_ALG +
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   d5ac6:	f110 0f62 	cmn.w	r0, #98	; 0x62
   d5aca:	f040 809d 	bne.w	d5c08 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    if( p == end )
   d5ace:	9b01      	ldr	r3, [sp, #4]
   d5ad0:	429c      	cmp	r4, r3
   d5ad2:	f000 809c 	beq.w	d5c0e <mbedtls_x509_get_rsassa_pss_params+0x1ae>
        return( 0 );

    /*
     * MaskGenAlgorithm
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   d5ad6:	23a1      	movs	r3, #161	; 0xa1
   d5ad8:	aa02      	add	r2, sp, #8
   d5ada:	4621      	mov	r1, r4
   d5adc:	a801      	add	r0, sp, #4
   d5ade:	f7ff fe27 	bl	d5730 <mbedtls_asn1_get_tag>
   d5ae2:	2800      	cmp	r0, #0
   d5ae4:	d150      	bne.n	d5b88 <mbedtls_x509_get_rsassa_pss_params+0x128>
                    MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 1 ) ) == 0 )
    {
        end2 = p + len;
   d5ae6:	9b02      	ldr	r3, [sp, #8]
   d5ae8:	9f01      	ldr	r7, [sp, #4]
   d5aea:	441f      	add	r7, r3

        /* MaskGenAlgorithm ::= AlgorithmIdentifier (params = HashAlgorithm) */
        if( ( ret = mbedtls_x509_get_alg( &p, end2, &alg_id, &alg_params ) ) != 0 )
   d5aec:	aa05      	add	r2, sp, #20
   d5aee:	ab08      	add	r3, sp, #32
   d5af0:	4639      	mov	r1, r7
   d5af2:	a801      	add	r0, sp, #4
   d5af4:	f7ff ffad 	bl	d5a52 <mbedtls_x509_get_alg>
   d5af8:	2800      	cmp	r0, #0
   d5afa:	f040 8092 	bne.w	d5c22 <mbedtls_x509_get_rsassa_pss_params+0x1c2>
            return( ret );

        /* Only MFG1 is recognised for now */
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_MGF1, &alg_id ) != 0 )
   d5afe:	9a06      	ldr	r2, [sp, #24]
   d5b00:	2a09      	cmp	r2, #9
   d5b02:	f040 8088 	bne.w	d5c16 <mbedtls_x509_get_rsassa_pss_params+0x1b6>
   d5b06:	9907      	ldr	r1, [sp, #28]
   d5b08:	4847      	ldr	r0, [pc, #284]	; (d5c28 <mbedtls_x509_get_rsassa_pss_params+0x1c8>)
   d5b0a:	f011 fa11 	bl	e6f30 <memcmp>
   d5b0e:	2800      	cmp	r0, #0
   d5b10:	f040 8081 	bne.w	d5c16 <mbedtls_x509_get_rsassa_pss_params+0x1b6>
    const unsigned char *end;
    mbedtls_x509_buf md_oid;
    size_t len;

    /* Make sure we got a SEQUENCE and setup bounds */
    if( alg->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   d5b14:	9b08      	ldr	r3, [sp, #32]
   d5b16:	2b30      	cmp	r3, #48	; 0x30
   d5b18:	d17b      	bne.n	d5c12 <mbedtls_x509_get_rsassa_pss_params+0x1b2>
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    p = (unsigned char *) alg->p;
   d5b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    end = p + alg->len;
   d5b1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    /* Make sure we got a SEQUENCE and setup bounds */
    if( alg->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    p = (unsigned char *) alg->p;
   d5b1e:	9303      	str	r3, [sp, #12]
    end = p + alg->len;
   d5b20:	eb03 0802 	add.w	r8, r3, r2

    if( p >= end )
   d5b24:	4543      	cmp	r3, r8
   d5b26:	d226      	bcs.n	d5b76 <mbedtls_x509_get_rsassa_pss_params+0x116>
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    /* Parse md_oid */
    md_oid.tag = *p;
   d5b28:	f10d 0938 	add.w	r9, sp, #56	; 0x38
   d5b2c:	781b      	ldrb	r3, [r3, #0]
   d5b2e:	f849 3d0c 	str.w	r3, [r9, #-12]!

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &md_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
   d5b32:	aa0c      	add	r2, sp, #48	; 0x30
   d5b34:	2306      	movs	r3, #6
   d5b36:	4641      	mov	r1, r8
   d5b38:	a803      	add	r0, sp, #12
   d5b3a:	f7ff fdf9 	bl	d5730 <mbedtls_asn1_get_tag>
   d5b3e:	2800      	cmp	r0, #0
   d5b40:	d16b      	bne.n	d5c1a <mbedtls_x509_get_rsassa_pss_params+0x1ba>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    md_oid.p = p;
   d5b42:	9a03      	ldr	r2, [sp, #12]
    p += md_oid.len;
   d5b44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    md_oid.tag = *p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &md_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    md_oid.p = p;
   d5b46:	920d      	str	r2, [sp, #52]	; 0x34
    p += md_oid.len;
   d5b48:	4413      	add	r3, r2

    /* Get md_alg from md_oid */
    if( ( ret = mbedtls_oid_get_md_alg( &md_oid, md_alg ) ) != 0 )
   d5b4a:	4631      	mov	r1, r6
   d5b4c:	4648      	mov	r0, r9

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &md_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    md_oid.p = p;
    p += md_oid.len;
   d5b4e:	9303      	str	r3, [sp, #12]

    /* Get md_alg from md_oid */
    if( ( ret = mbedtls_oid_get_md_alg( &md_oid, md_alg ) ) != 0 )
   d5b50:	f003 fbb8 	bl	d92c4 <mbedtls_oid_get_md_alg>
   d5b54:	2800      	cmp	r0, #0
   d5b56:	d160      	bne.n	d5c1a <mbedtls_x509_get_rsassa_pss_params+0x1ba>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    /* Make sure params is absent of NULL */
    if( p == end )
   d5b58:	9b03      	ldr	r3, [sp, #12]
   d5b5a:	4598      	cmp	r8, r3
   d5b5c:	d010      	beq.n	d5b80 <mbedtls_x509_get_rsassa_pss_params+0x120>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_NULL ) ) != 0 || len != 0 )
   d5b5e:	2305      	movs	r3, #5
   d5b60:	aa04      	add	r2, sp, #16
   d5b62:	4641      	mov	r1, r8
   d5b64:	a803      	add	r0, sp, #12
   d5b66:	f7ff fde3 	bl	d5730 <mbedtls_asn1_get_tag>
   d5b6a:	2800      	cmp	r0, #0
   d5b6c:	d155      	bne.n	d5c1a <mbedtls_x509_get_rsassa_pss_params+0x1ba>
   d5b6e:	9b04      	ldr	r3, [sp, #16]
   d5b70:	2b00      	cmp	r3, #0
   d5b72:	d152      	bne.n	d5c1a <mbedtls_x509_get_rsassa_pss_params+0x1ba>
   d5b74:	e001      	b.n	d5b7a <mbedtls_x509_get_rsassa_pss_params+0x11a>
    p = (unsigned char *) alg->p;
    end = p + alg->len;

    if( p >= end )
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d5b76:	482d      	ldr	r0, [pc, #180]	; (d5c2c <mbedtls_x509_get_rsassa_pss_params+0x1cc>)
   d5b78:	e053      	b.n	d5c22 <mbedtls_x509_get_rsassa_pss_params+0x1c2>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_NULL ) ) != 0 || len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    if( p != end )
   d5b7a:	9b03      	ldr	r3, [sp, #12]
   d5b7c:	4598      	cmp	r8, r3
   d5b7e:	d141      	bne.n	d5c04 <mbedtls_x509_get_rsassa_pss_params+0x1a4>

        /* Parse HashAlgorithm */
        if( ( ret = x509_get_hash_alg( &alg_params, mgf_md ) ) != 0 )
            return( ret );

        if( p != end2 )
   d5b80:	9b01      	ldr	r3, [sp, #4]
   d5b82:	429f      	cmp	r7, r3
   d5b84:	d003      	beq.n	d5b8e <mbedtls_x509_get_rsassa_pss_params+0x12e>
   d5b86:	e03d      	b.n	d5c04 <mbedtls_x509_get_rsassa_pss_params+0x1a4>
            return( MBEDTLS_ERR_X509_INVALID_ALG +
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   d5b88:	f110 0f62 	cmn.w	r0, #98	; 0x62
   d5b8c:	d13c      	bne.n	d5c08 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    if( p == end )
   d5b8e:	9b01      	ldr	r3, [sp, #4]
   d5b90:	429c      	cmp	r4, r3
   d5b92:	d03c      	beq.n	d5c0e <mbedtls_x509_get_rsassa_pss_params+0x1ae>
        return( 0 );

    /*
     * salt_len
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   d5b94:	23a2      	movs	r3, #162	; 0xa2
   d5b96:	aa02      	add	r2, sp, #8
   d5b98:	4621      	mov	r1, r4
   d5b9a:	a801      	add	r0, sp, #4
   d5b9c:	f7ff fdc8 	bl	d5730 <mbedtls_asn1_get_tag>
   d5ba0:	b960      	cbnz	r0, d5bbc <mbedtls_x509_get_rsassa_pss_params+0x15c>
                    MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 2 ) ) == 0 )
    {
        end2 = p + len;
   d5ba2:	9b02      	ldr	r3, [sp, #8]
   d5ba4:	9e01      	ldr	r6, [sp, #4]
   d5ba6:	441e      	add	r6, r3

        if( ( ret = mbedtls_asn1_get_int( &p, end2, salt_len ) ) != 0 )
   d5ba8:	462a      	mov	r2, r5
   d5baa:	4631      	mov	r1, r6
   d5bac:	a801      	add	r0, sp, #4
   d5bae:	f7ff fdec 	bl	d578a <mbedtls_asn1_get_int>
   d5bb2:	bb48      	cbnz	r0, d5c08 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
            return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

        if( p != end2 )
   d5bb4:	9b01      	ldr	r3, [sp, #4]
   d5bb6:	429e      	cmp	r6, r3
   d5bb8:	d003      	beq.n	d5bc2 <mbedtls_x509_get_rsassa_pss_params+0x162>
   d5bba:	e023      	b.n	d5c04 <mbedtls_x509_get_rsassa_pss_params+0x1a4>
            return( MBEDTLS_ERR_X509_INVALID_ALG +
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   d5bbc:	f110 0f62 	cmn.w	r0, #98	; 0x62
   d5bc0:	d122      	bne.n	d5c08 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    if( p == end )
   d5bc2:	9b01      	ldr	r3, [sp, #4]
   d5bc4:	429c      	cmp	r4, r3
   d5bc6:	d022      	beq.n	d5c0e <mbedtls_x509_get_rsassa_pss_params+0x1ae>
        return( 0 );

    /*
     * trailer_field (if present, must be 1)
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   d5bc8:	23a3      	movs	r3, #163	; 0xa3
   d5bca:	aa02      	add	r2, sp, #8
   d5bcc:	4621      	mov	r1, r4
   d5bce:	a801      	add	r0, sp, #4
   d5bd0:	f7ff fdae 	bl	d5730 <mbedtls_asn1_get_tag>
   d5bd4:	b980      	cbnz	r0, d5bf8 <mbedtls_x509_get_rsassa_pss_params+0x198>
                    MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 3 ) ) == 0 )
    {
        int trailer_field;

        end2 = p + len;
   d5bd6:	9b02      	ldr	r3, [sp, #8]
   d5bd8:	9d01      	ldr	r5, [sp, #4]
   d5bda:	441d      	add	r5, r3

        if( ( ret = mbedtls_asn1_get_int( &p, end2, &trailer_field ) ) != 0 )
   d5bdc:	aa0b      	add	r2, sp, #44	; 0x2c
   d5bde:	4629      	mov	r1, r5
   d5be0:	a801      	add	r0, sp, #4
   d5be2:	f7ff fdd2 	bl	d578a <mbedtls_asn1_get_int>
   d5be6:	b978      	cbnz	r0, d5c08 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
            return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

        if( p != end2 )
   d5be8:	9b01      	ldr	r3, [sp, #4]
   d5bea:	429d      	cmp	r5, r3
   d5bec:	d10a      	bne.n	d5c04 <mbedtls_x509_get_rsassa_pss_params+0x1a4>
            return( MBEDTLS_ERR_X509_INVALID_ALG +
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

        if( trailer_field != 1 )
   d5bee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d5bf0:	2b01      	cmp	r3, #1
   d5bf2:	d004      	beq.n	d5bfe <mbedtls_x509_get_rsassa_pss_params+0x19e>
            return( MBEDTLS_ERR_X509_INVALID_ALG );
   d5bf4:	480e      	ldr	r0, [pc, #56]	; (d5c30 <mbedtls_x509_get_rsassa_pss_params+0x1d0>)
   d5bf6:	e014      	b.n	d5c22 <mbedtls_x509_get_rsassa_pss_params+0x1c2>
    }
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   d5bf8:	f110 0f62 	cmn.w	r0, #98	; 0x62
   d5bfc:	d104      	bne.n	d5c08 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    if( p != end )
   d5bfe:	9b01      	ldr	r3, [sp, #4]
   d5c00:	429c      	cmp	r4, r3
   d5c02:	d004      	beq.n	d5c0e <mbedtls_x509_get_rsassa_pss_params+0x1ae>
        if( ( ret = mbedtls_asn1_get_int( &p, end2, &trailer_field ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

        if( p != end2 )
            return( MBEDTLS_ERR_X509_INVALID_ALG +
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d5c04:	480b      	ldr	r0, [pc, #44]	; (d5c34 <mbedtls_x509_get_rsassa_pss_params+0x1d4>)
   d5c06:	e00c      	b.n	d5c22 <mbedtls_x509_get_rsassa_pss_params+0x1c2>

        if( trailer_field != 1 )
            return( MBEDTLS_ERR_X509_INVALID_ALG );
    }
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
   d5c08:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
   d5c0c:	e009      	b.n	d5c22 <mbedtls_x509_get_rsassa_pss_params+0x1c2>

    if( p != end )
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
   d5c0e:	2000      	movs	r0, #0
   d5c10:	e007      	b.n	d5c22 <mbedtls_x509_get_rsassa_pss_params+0x1c2>
    *salt_len = 20;

    /* Make sure params is a SEQUENCE and setup bounds */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   d5c12:	4809      	ldr	r0, [pc, #36]	; (d5c38 <mbedtls_x509_get_rsassa_pss_params+0x1d8>)
   d5c14:	e005      	b.n	d5c22 <mbedtls_x509_get_rsassa_pss_params+0x1c2>
            return( ret );

        /* Only MFG1 is recognised for now */
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_MGF1, &alg_id ) != 0 )
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE +
                    MBEDTLS_ERR_OID_NOT_FOUND );
   d5c16:	4809      	ldr	r0, [pc, #36]	; (d5c3c <mbedtls_x509_get_rsassa_pss_params+0x1dc>)
   d5c18:	e003      	b.n	d5c22 <mbedtls_x509_get_rsassa_pss_params+0x1c2>
    /* Make sure params is absent of NULL */
    if( p == end )
        return( 0 );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_NULL ) ) != 0 || len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
   d5c1a:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_MGF1, &alg_id ) != 0 )
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE +
                    MBEDTLS_ERR_OID_NOT_FOUND );

        /* Parse HashAlgorithm */
        if( ( ret = x509_get_hash_alg( &alg_params, mgf_md ) ) != 0 )
   d5c1e:	2800      	cmp	r0, #0
   d5c20:	d0ae      	beq.n	d5b80 <mbedtls_x509_get_rsassa_pss_params+0x120>
    if( p != end )
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
   d5c22:	b00f      	add	sp, #60	; 0x3c
   d5c24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5c28:	000e8218 	.word	0x000e8218
   d5c2c:	ffffdca0 	.word	0xffffdca0
   d5c30:	ffffdd00 	.word	0xffffdd00
   d5c34:	ffffdc9a 	.word	0xffffdc9a
   d5c38:	ffffdc9e 	.word	0xffffdc9e
   d5c3c:	ffffdf52 	.word	0xffffdf52

000d5c40 <mbedtls_x509_get_name>:
 * same set so that they are "merged" together in the functions that consume
 * this list, eg mbedtls_x509_dn_gets().
 */
int mbedtls_x509_get_name( unsigned char **p, const unsigned char *end,
                   mbedtls_x509_name *cur )
{
   d5c40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
   d5c44:	f8df 80f4 	ldr.w	r8, [pc, #244]	; d5d3c <mbedtls_x509_get_name+0xfc>
 * same set so that they are "merged" together in the functions that consume
 * this list, eg mbedtls_x509_dn_gets().
 */
int mbedtls_x509_get_name( unsigned char **p, const unsigned char *end,
                   mbedtls_x509_name *cur )
{
   d5c48:	4604      	mov	r4, r0
   d5c4a:	460f      	mov	r7, r1
   d5c4c:	4691      	mov	r9, r2
    while( 1 )
    {
        /*
         * parse SET
         */
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
   d5c4e:	2331      	movs	r3, #49	; 0x31
   d5c50:	466a      	mov	r2, sp
   d5c52:	4639      	mov	r1, r7
   d5c54:	4620      	mov	r0, r4
   d5c56:	f7ff fd6b 	bl	d5730 <mbedtls_asn1_get_tag>
   d5c5a:	b110      	cbz	r0, d5c62 <mbedtls_x509_get_name+0x22>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SET ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
   d5c5c:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
   d5c60:	e061      	b.n	d5d26 <mbedtls_x509_get_name+0xe6>

        end_set  = *p + set_len;
   d5c62:	6826      	ldr	r6, [r4, #0]
   d5c64:	9b00      	ldr	r3, [sp, #0]
   d5c66:	464d      	mov	r5, r9
   d5c68:	441e      	add	r6, r3
    int ret;
    size_t len;
    mbedtls_x509_buf *oid;
    mbedtls_x509_buf *val;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d5c6a:	2330      	movs	r3, #48	; 0x30
   d5c6c:	aa01      	add	r2, sp, #4
   d5c6e:	4631      	mov	r1, r6
   d5c70:	4620      	mov	r0, r4
   d5c72:	f7ff fd5d 	bl	d5730 <mbedtls_asn1_get_tag>
   d5c76:	bb68      	cbnz	r0, d5cd4 <mbedtls_x509_get_name+0x94>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    end = *p + len;
   d5c78:	9a01      	ldr	r2, [sp, #4]
   d5c7a:	6823      	ldr	r3, [r4, #0]

    if( ( end - *p ) < 1 )
   d5c7c:	2a00      	cmp	r2, #0

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    end = *p + len;
   d5c7e:	eb03 0902 	add.w	r9, r3, r2

    if( ( end - *p ) < 1 )
   d5c82:	dc01      	bgt.n	d5c88 <mbedtls_x509_get_name+0x48>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d5c84:	4829      	ldr	r0, [pc, #164]	; (d5d2c <mbedtls_x509_get_name+0xec>)
   d5c86:	e04e      	b.n	d5d26 <mbedtls_x509_get_name+0xe6>

    oid = &cur->oid;
    oid->tag = **p;
   d5c88:	462a      	mov	r2, r5
   d5c8a:	781b      	ldrb	r3, [r3, #0]
   d5c8c:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
   d5c90:	4649      	mov	r1, r9
   d5c92:	2306      	movs	r3, #6
   d5c94:	4620      	mov	r0, r4
   d5c96:	f7ff fd4b 	bl	d5730 <mbedtls_asn1_get_tag>
   d5c9a:	b9d8      	cbnz	r0, d5cd4 <mbedtls_x509_get_name+0x94>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
   d5c9c:	6823      	ldr	r3, [r4, #0]
   d5c9e:	60ab      	str	r3, [r5, #8]
    *p += oid->len;
   d5ca0:	6820      	ldr	r0, [r4, #0]
   d5ca2:	6869      	ldr	r1, [r5, #4]
   d5ca4:	1843      	adds	r3, r0, r1

    if( ( end - *p ) < 1 )
   d5ca6:	ebc3 0209 	rsb	r2, r3, r9
   d5caa:	2a00      	cmp	r2, #0

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
    *p += oid->len;
   d5cac:	6023      	str	r3, [r4, #0]

    if( ( end - *p ) < 1 )
   d5cae:	dde9      	ble.n	d5c84 <mbedtls_x509_get_name+0x44>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
   d5cb0:	5c42      	ldrb	r2, [r0, r1]
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
   d5cb2:	2a1e      	cmp	r2, #30
   d5cb4:	d81c      	bhi.n	d5cf0 <mbedtls_x509_get_name+0xb0>
   d5cb6:	fa28 f202 	lsr.w	r2, r8, r2
   d5cba:	07d2      	lsls	r2, r2, #31
   d5cbc:	d518      	bpl.n	d5cf0 <mbedtls_x509_get_name+0xb0>
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    val = &cur->val;
    val->tag = *(*p)++;
   d5cbe:	3301      	adds	r3, #1
   d5cc0:	6023      	str	r3, [r4, #0]
   d5cc2:	5c43      	ldrb	r3, [r0, r1]
   d5cc4:	60eb      	str	r3, [r5, #12]

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
   d5cc6:	f105 0210 	add.w	r2, r5, #16
   d5cca:	4649      	mov	r1, r9
   d5ccc:	4620      	mov	r0, r4
   d5cce:	f7ff fcdd 	bl	d568c <mbedtls_asn1_get_len>
   d5cd2:	b118      	cbz	r0, d5cdc <mbedtls_x509_get_name+0x9c>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
   d5cd4:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380

        end_set  = *p + set_len;

        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
   d5cd8:	b170      	cbz	r0, d5cf8 <mbedtls_x509_get_name+0xb8>
   d5cda:	e024      	b.n	d5d26 <mbedtls_x509_get_name+0xe6>
    val->tag = *(*p)++;

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    val->p = *p;
   d5cdc:	6823      	ldr	r3, [r4, #0]
   d5cde:	616b      	str	r3, [r5, #20]
    *p += val->len;
   d5ce0:	6822      	ldr	r2, [r4, #0]
   d5ce2:	692b      	ldr	r3, [r5, #16]
   d5ce4:	4413      	add	r3, r2

    if( *p != end )
   d5ce6:	4599      	cmp	r9, r3

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    val->p = *p;
    *p += val->len;
   d5ce8:	6023      	str	r3, [r4, #0]

    if( *p != end )
   d5cea:	d103      	bne.n	d5cf4 <mbedtls_x509_get_name+0xb4>
    {
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }

    cur->next = NULL;
   d5cec:	61a8      	str	r0, [r5, #24]
   d5cee:	e003      	b.n	d5cf8 <mbedtls_x509_get_name+0xb8>
    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   d5cf0:	480f      	ldr	r0, [pc, #60]	; (d5d30 <mbedtls_x509_get_name+0xf0>)
   d5cf2:	e018      	b.n	d5d26 <mbedtls_x509_get_name+0xe6>
    *p += val->len;

    if( *p != end )
    {
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d5cf4:	480f      	ldr	r0, [pc, #60]	; (d5d34 <mbedtls_x509_get_name+0xf4>)
   d5cf6:	e016      	b.n	d5d26 <mbedtls_x509_get_name+0xe6>
        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
                return( ret );

            if( *p == end_set )
   d5cf8:	6823      	ldr	r3, [r4, #0]
   d5cfa:	429e      	cmp	r6, r3
   d5cfc:	d008      	beq.n	d5d10 <mbedtls_x509_get_name+0xd0>
                break;

            /* Mark this item as being no the only one in a set */
            cur->next_merged = 1;
   d5cfe:	2001      	movs	r0, #1
   d5d00:	7728      	strb	r0, [r5, #28]

            cur->next = (mbedtls_asn1_named_data *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
   d5d02:	2120      	movs	r1, #32
   d5d04:	f011 f806 	bl	e6d14 <calloc>
   d5d08:	61a8      	str	r0, [r5, #24]

            if( cur->next == NULL )
   d5d0a:	b158      	cbz	r0, d5d24 <mbedtls_x509_get_name+0xe4>
   d5d0c:	4605      	mov	r5, r0
   d5d0e:	e7ac      	b.n	d5c6a <mbedtls_x509_get_name+0x2a>
        }

        /*
         * continue until end of SEQUENCE is reached
         */
        if( *p == end )
   d5d10:	42b7      	cmp	r7, r6
   d5d12:	d008      	beq.n	d5d26 <mbedtls_x509_get_name+0xe6>
            return( 0 );

        cur->next = (mbedtls_asn1_named_data *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
   d5d14:	2120      	movs	r1, #32
   d5d16:	2001      	movs	r0, #1
   d5d18:	f010 fffc 	bl	e6d14 <calloc>
   d5d1c:	4681      	mov	r9, r0
   d5d1e:	61a8      	str	r0, [r5, #24]

        if( cur->next == NULL )
   d5d20:	2800      	cmp	r0, #0
   d5d22:	d194      	bne.n	d5c4e <mbedtls_x509_get_name+0xe>
            cur->next_merged = 1;

            cur->next = (mbedtls_asn1_named_data *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   d5d24:	4804      	ldr	r0, [pc, #16]	; (d5d38 <mbedtls_x509_get_name+0xf8>)
        if( cur->next == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        cur = cur->next;
    }
}
   d5d26:	b003      	add	sp, #12
   d5d28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5d2c:	ffffdc20 	.word	0xffffdc20
   d5d30:	ffffdc1e 	.word	0xffffdc1e
   d5d34:	ffffdc1a 	.word	0xffffdc1a
   d5d38:	ffffd780 	.word	0xffffd780
   d5d3c:	50581008 	.word	0x50581008

000d5d40 <mbedtls_x509_get_time>:
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
   d5d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
   d5d42:	6803      	ldr	r3, [r0, #0]
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
   d5d44:	4614      	mov	r4, r2
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
   d5d46:	1aca      	subs	r2, r1, r3
   d5d48:	2a00      	cmp	r2, #0
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
   d5d4a:	4605      	mov	r5, r0
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
   d5d4c:	f340 80a0 	ble.w	d5e90 <mbedtls_x509_get_time+0x150>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;
   d5d50:	781a      	ldrb	r2, [r3, #0]

    if( tag == MBEDTLS_ASN1_UTC_TIME )
   d5d52:	2a17      	cmp	r2, #23
   d5d54:	d004      	beq.n	d5d60 <mbedtls_x509_get_time+0x20>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
   d5d56:	2a18      	cmp	r2, #24
   d5d58:	f040 809c 	bne.w	d5e94 <mbedtls_x509_get_time+0x154>
        year_len = 4;
   d5d5c:	2704      	movs	r7, #4
   d5d5e:	e000      	b.n	d5d62 <mbedtls_x509_get_time+0x22>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;

    if( tag == MBEDTLS_ASN1_UTC_TIME )
        year_len = 2;
   d5d60:	2702      	movs	r7, #2
        year_len = 4;
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
   d5d62:	3301      	adds	r3, #1
   d5d64:	602b      	str	r3, [r5, #0]
    ret = mbedtls_asn1_get_len( p, end, &len );
   d5d66:	aa01      	add	r2, sp, #4
   d5d68:	4628      	mov	r0, r5
   d5d6a:	f7ff fc8f 	bl	d568c <mbedtls_asn1_get_len>

    if( ret != 0 )
   d5d6e:	b110      	cbz	r0, d5d76 <mbedtls_x509_get_time+0x36>
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
   d5d70:	f5a0 5010 	sub.w	r0, r0, #9216	; 0x2400
   d5d74:	e091      	b.n	d5e9a <mbedtls_x509_get_time+0x15a>

    return x509_parse_time( p, len, year_len, tm );
   d5d76:	9e01      	ldr	r6, [sp, #4]
    int ret;

    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
   d5d78:	f107 0308 	add.w	r3, r7, #8
   d5d7c:	429e      	cmp	r6, r3
   d5d7e:	f0c0 808b 	bcc.w	d5e98 <mbedtls_x509_get_time+0x158>
    len -= yearlen + 8;

    /*
     * Parse year, month, day, hour, minute
     */
    CHECK( x509_parse_int( p, yearlen, &tm->year ) );
   d5d82:	4622      	mov	r2, r4
   d5d84:	4639      	mov	r1, r7
   d5d86:	4628      	mov	r0, r5
   d5d88:	f7ff fe16 	bl	d59b8 <_ZL14x509_parse_intPPhjPi>
   d5d8c:	2800      	cmp	r0, #0
   d5d8e:	f040 8084 	bne.w	d5e9a <mbedtls_x509_get_time+0x15a>
    if ( 2 == yearlen )
   d5d92:	2f02      	cmp	r7, #2
   d5d94:	d108      	bne.n	d5da8 <mbedtls_x509_get_time+0x68>
    {
        if ( tm->year < 50 )
   d5d96:	6823      	ldr	r3, [r4, #0]
   d5d98:	2b31      	cmp	r3, #49	; 0x31
            tm->year += 100;
   d5d9a:	bfdc      	itt	le
   d5d9c:	3364      	addle	r3, #100	; 0x64
   d5d9e:	6023      	strle	r3, [r4, #0]

        tm->year += 1900;
   d5da0:	6823      	ldr	r3, [r4, #0]
   d5da2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d5da6:	6023      	str	r3, [r4, #0]
    }

    CHECK( x509_parse_int( p, 2, &tm->mon ) );
   d5da8:	1d22      	adds	r2, r4, #4
   d5daa:	2102      	movs	r1, #2
   d5dac:	4628      	mov	r0, r5
   d5dae:	f7ff fe03 	bl	d59b8 <_ZL14x509_parse_intPPhjPi>
   d5db2:	2800      	cmp	r0, #0
   d5db4:	d171      	bne.n	d5e9a <mbedtls_x509_get_time+0x15a>
    CHECK( x509_parse_int( p, 2, &tm->day ) );
   d5db6:	f104 0208 	add.w	r2, r4, #8
   d5dba:	2102      	movs	r1, #2
   d5dbc:	4628      	mov	r0, r5
   d5dbe:	f7ff fdfb 	bl	d59b8 <_ZL14x509_parse_intPPhjPi>
   d5dc2:	2800      	cmp	r0, #0
   d5dc4:	d169      	bne.n	d5e9a <mbedtls_x509_get_time+0x15a>
    CHECK( x509_parse_int( p, 2, &tm->hour ) );
   d5dc6:	f104 020c 	add.w	r2, r4, #12
   d5dca:	2102      	movs	r1, #2
   d5dcc:	4628      	mov	r0, r5
   d5dce:	f7ff fdf3 	bl	d59b8 <_ZL14x509_parse_intPPhjPi>
   d5dd2:	2800      	cmp	r0, #0
   d5dd4:	d161      	bne.n	d5e9a <mbedtls_x509_get_time+0x15a>
    CHECK( x509_parse_int( p, 2, &tm->min ) );
   d5dd6:	f104 0210 	add.w	r2, r4, #16
   d5dda:	2102      	movs	r1, #2
   d5ddc:	4628      	mov	r0, r5
   d5dde:	f7ff fdeb 	bl	d59b8 <_ZL14x509_parse_intPPhjPi>
   d5de2:	2800      	cmp	r0, #0
   d5de4:	d159      	bne.n	d5e9a <mbedtls_x509_get_time+0x15a>
    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
        return ( MBEDTLS_ERR_X509_INVALID_DATE );
    len -= yearlen + 8;
   d5de6:	1bf6      	subs	r6, r6, r7
    CHECK( x509_parse_int( p, 2, &tm->min ) );

    /*
     * Parse seconds if present
     */
    if ( len >= 2 )
   d5de8:	f1a6 0308 	sub.w	r3, r6, #8
   d5dec:	2b01      	cmp	r3, #1
   d5dee:	d953      	bls.n	d5e98 <mbedtls_x509_get_time+0x158>
    {
        CHECK( x509_parse_int( p, 2, &tm->sec ) );
   d5df0:	f104 0214 	add.w	r2, r4, #20
   d5df4:	2102      	movs	r1, #2
   d5df6:	4628      	mov	r0, r5
   d5df8:	f7ff fdde 	bl	d59b8 <_ZL14x509_parse_intPPhjPi>
   d5dfc:	2800      	cmp	r0, #0
   d5dfe:	d14c      	bne.n	d5e9a <mbedtls_x509_get_time+0x15a>
        len -= 2;
   d5e00:	f1a6 030a 	sub.w	r3, r6, #10
        return ( MBEDTLS_ERR_X509_INVALID_DATE );

    /*
     * Parse trailing 'Z' if present
     */
    if ( 1 == len && 'Z' == **p )
   d5e04:	2b01      	cmp	r3, #1
   d5e06:	d107      	bne.n	d5e18 <mbedtls_x509_get_time+0xd8>
   d5e08:	682b      	ldr	r3, [r5, #0]
   d5e0a:	781a      	ldrb	r2, [r3, #0]
   d5e0c:	2a5a      	cmp	r2, #90	; 0x5a
   d5e0e:	d143      	bne.n	d5e98 <mbedtls_x509_get_time+0x158>
    {
        (*p)++;
   d5e10:	3301      	adds	r3, #1
   d5e12:	602b      	str	r3, [r5, #0]
        len--;
   d5e14:	f1a6 030b 	sub.w	r3, r6, #11
    }

    /*
     * We should have parsed all characters at this point
     */
    if ( 0 != len )
   d5e18:	2b00      	cmp	r3, #0
   d5e1a:	d13d      	bne.n	d5e98 <mbedtls_x509_get_time+0x158>
static int x509_date_is_valid(const mbedtls_x509_time *t )
{
    int ret = MBEDTLS_ERR_X509_INVALID_DATE;
    int month_len;

    CHECK_RANGE( 0, 9999, t->year );
   d5e1c:	6823      	ldr	r3, [r4, #0]
   d5e1e:	f242 720f 	movw	r2, #9999	; 0x270f
   d5e22:	4293      	cmp	r3, r2
   d5e24:	d838      	bhi.n	d5e98 <mbedtls_x509_get_time+0x158>
    CHECK_RANGE( 0, 23,   t->hour );
   d5e26:	68e2      	ldr	r2, [r4, #12]
   d5e28:	2a17      	cmp	r2, #23
   d5e2a:	d835      	bhi.n	d5e98 <mbedtls_x509_get_time+0x158>
    CHECK_RANGE( 0, 59,   t->min  );
   d5e2c:	6922      	ldr	r2, [r4, #16]
   d5e2e:	2a3b      	cmp	r2, #59	; 0x3b
   d5e30:	d832      	bhi.n	d5e98 <mbedtls_x509_get_time+0x158>
    CHECK_RANGE( 0, 59,   t->sec  );
   d5e32:	6962      	ldr	r2, [r4, #20]
   d5e34:	2a3b      	cmp	r2, #59	; 0x3b
   d5e36:	d82f      	bhi.n	d5e98 <mbedtls_x509_get_time+0x158>
   d5e38:	6861      	ldr	r1, [r4, #4]
   d5e3a:	290c      	cmp	r1, #12
   d5e3c:	d82c      	bhi.n	d5e98 <mbedtls_x509_get_time+0x158>
   d5e3e:	2201      	movs	r2, #1
   d5e40:	408a      	lsls	r2, r1
   d5e42:	f241 51aa 	movw	r1, #5546	; 0x15aa
   d5e46:	4011      	ands	r1, r2
   d5e48:	b9b9      	cbnz	r1, d5e7a <mbedtls_x509_get_time+0x13a>
   d5e4a:	f412 6f25 	tst.w	r2, #2640	; 0xa50
   d5e4e:	d116      	bne.n	d5e7e <mbedtls_x509_get_time+0x13e>
   d5e50:	0751      	lsls	r1, r2, #29
   d5e52:	d521      	bpl.n	d5e98 <mbedtls_x509_get_time+0x158>
            break;
        case 4: case 6: case 9: case 11:
            month_len = 30;
            break;
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
   d5e54:	079a      	lsls	r2, r3, #30
   d5e56:	d105      	bne.n	d5e64 <mbedtls_x509_get_time+0x124>
   d5e58:	2164      	movs	r1, #100	; 0x64
   d5e5a:	fb93 f2f1 	sdiv	r2, r3, r1
   d5e5e:	fb01 3212 	mls	r2, r1, r2, r3
   d5e62:	b972      	cbnz	r2, d5e82 <mbedtls_x509_get_time+0x142>
   d5e64:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d5e68:	fb93 f2f1 	sdiv	r2, r3, r1
   d5e6c:	fb01 3312 	mls	r3, r1, r2, r3
                !( t->year % 400 ) )
                month_len = 29;
            else
                month_len = 28;
   d5e70:	2b00      	cmp	r3, #0
   d5e72:	bf0c      	ite	eq
   d5e74:	231d      	moveq	r3, #29
   d5e76:	231c      	movne	r3, #28
   d5e78:	e004      	b.n	d5e84 <mbedtls_x509_get_time+0x144>
    CHECK_RANGE( 0, 59,   t->sec  );

    switch( t->mon )
    {
        case 1: case 3: case 5: case 7: case 8: case 10: case 12:
            month_len = 31;
   d5e7a:	231f      	movs	r3, #31
   d5e7c:	e002      	b.n	d5e84 <mbedtls_x509_get_time+0x144>
            break;
        case 4: case 6: case 9: case 11:
            month_len = 30;
   d5e7e:	231e      	movs	r3, #30
   d5e80:	e000      	b.n	d5e84 <mbedtls_x509_get_time+0x144>
            break;
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
                !( t->year % 400 ) )
                month_len = 29;
   d5e82:	231d      	movs	r3, #29
                month_len = 28;
            break;
        default:
            return( ret );
    }
    CHECK_RANGE( 1, month_len, t->day );
   d5e84:	68a2      	ldr	r2, [r4, #8]
   d5e86:	2a00      	cmp	r2, #0
   d5e88:	dd06      	ble.n	d5e98 <mbedtls_x509_get_time+0x158>
   d5e8a:	429a      	cmp	r2, r3
   d5e8c:	dd05      	ble.n	d5e9a <mbedtls_x509_get_time+0x15a>
   d5e8e:	e003      	b.n	d5e98 <mbedtls_x509_get_time+0x158>
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d5e90:	4803      	ldr	r0, [pc, #12]	; (d5ea0 <mbedtls_x509_get_time+0x160>)
   d5e92:	e002      	b.n	d5e9a <mbedtls_x509_get_time+0x15a>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
        year_len = 4;
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   d5e94:	4803      	ldr	r0, [pc, #12]	; (d5ea4 <mbedtls_x509_get_time+0x164>)
   d5e96:	e000      	b.n	d5e9a <mbedtls_x509_get_time+0x15a>
   d5e98:	4803      	ldr	r0, [pc, #12]	; (d5ea8 <mbedtls_x509_get_time+0x168>)

    if( ret != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    return x509_parse_time( p, len, year_len, tm );
}
   d5e9a:	b003      	add	sp, #12
   d5e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5e9e:	bf00      	nop
   d5ea0:	ffffdba0 	.word	0xffffdba0
   d5ea4:	ffffdb9e 	.word	0xffffdb9e
   d5ea8:	ffffdc00 	.word	0xffffdc00

000d5eac <mbedtls_x509_get_sig>:

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
   d5eac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
   d5eae:	6803      	ldr	r3, [r0, #0]

    return x509_parse_time( p, len, year_len, tm );
}

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
   d5eb0:	4615      	mov	r5, r2
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
   d5eb2:	1aca      	subs	r2, r1, r3
   d5eb4:	2a00      	cmp	r2, #0

    return x509_parse_time( p, len, year_len, tm );
}

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
   d5eb6:	4604      	mov	r4, r0
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
   d5eb8:	dd10      	ble.n	d5edc <mbedtls_x509_get_sig+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
   d5eba:	aa01      	add	r2, sp, #4

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;
   d5ebc:	781e      	ldrb	r6, [r3, #0]

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
   d5ebe:	f7ff fcc0 	bl	d5842 <mbedtls_asn1_get_bitstring_null>
   d5ec2:	b110      	cbz	r0, d5eca <mbedtls_x509_get_sig+0x1e>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
   d5ec4:	f5a0 5012 	sub.w	r0, r0, #9344	; 0x2480
   d5ec8:	e009      	b.n	d5ede <mbedtls_x509_get_sig+0x32>

    sig->tag = tag_type;
    sig->len = len;
   d5eca:	9b01      	ldr	r3, [sp, #4]
   d5ecc:	606b      	str	r3, [r5, #4]
    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );

    sig->tag = tag_type;
   d5ece:	602e      	str	r6, [r5, #0]
    sig->len = len;
    sig->p = *p;
   d5ed0:	6822      	ldr	r2, [r4, #0]
   d5ed2:	60aa      	str	r2, [r5, #8]

    *p += len;
   d5ed4:	6822      	ldr	r2, [r4, #0]
   d5ed6:	4413      	add	r3, r2
   d5ed8:	6023      	str	r3, [r4, #0]

    return( 0 );
   d5eda:	e000      	b.n	d5ede <mbedtls_x509_get_sig+0x32>
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d5edc:	4801      	ldr	r0, [pc, #4]	; (d5ee4 <mbedtls_x509_get_sig+0x38>)
    sig->p = *p;

    *p += len;

    return( 0 );
}
   d5ede:	b002      	add	sp, #8
   d5ee0:	bd70      	pop	{r4, r5, r6, pc}
   d5ee2:	bf00      	nop
   d5ee4:	ffffdb20 	.word	0xffffdb20

000d5ee8 <mbedtls_x509_get_sig_alg>:
 * Get signature algorithm from alg OID and optional parameters
 */
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts )
{
   d5ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5eec:	9f06      	ldr	r7, [sp, #24]
   d5eee:	461d      	mov	r5, r3
    int ret;

    if( *sig_opts != NULL )
   d5ef0:	683b      	ldr	r3, [r7, #0]
 * Get signature algorithm from alg OID and optional parameters
 */
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts )
{
   d5ef2:	460e      	mov	r6, r1
   d5ef4:	4690      	mov	r8, r2
    int ret;

    if( *sig_opts != NULL )
   d5ef6:	bb43      	cbnz	r3, d5f4a <mbedtls_x509_get_sig_alg+0x62>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
   d5ef8:	462a      	mov	r2, r5
   d5efa:	4641      	mov	r1, r8
   d5efc:	f003 f984 	bl	d9208 <mbedtls_oid_get_sig_alg>
   d5f00:	b110      	cbz	r0, d5f08 <mbedtls_x509_get_sig_alg+0x20>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
   d5f02:	f5a0 5418 	sub.w	r4, r0, #9728	; 0x2600
   d5f06:	e025      	b.n	d5f54 <mbedtls_x509_get_sig_alg+0x6c>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
    if( *pk_alg == MBEDTLS_PK_RSASSA_PSS )
   d5f08:	782b      	ldrb	r3, [r5, #0]
   d5f0a:	2b06      	cmp	r3, #6
   d5f0c:	d113      	bne.n	d5f36 <mbedtls_x509_get_sig_alg+0x4e>
    {
        mbedtls_pk_rsassa_pss_options *pss_opts;

        pss_opts = (mbedtls_pk_rsassa_pss_options *)mbedtls_calloc( 1, sizeof( mbedtls_pk_rsassa_pss_options ) );
   d5f0e:	2108      	movs	r1, #8
   d5f10:	2001      	movs	r0, #1
   d5f12:	f010 feff 	bl	e6d14 <calloc>
        if( pss_opts == NULL )
   d5f16:	4605      	mov	r5, r0
   d5f18:	b1c8      	cbz	r0, d5f4e <mbedtls_x509_get_sig_alg+0x66>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        ret = mbedtls_x509_get_rsassa_pss_params( sig_params,
   d5f1a:	1d03      	adds	r3, r0, #4
   d5f1c:	4602      	mov	r2, r0
   d5f1e:	4641      	mov	r1, r8
   d5f20:	4630      	mov	r0, r6
   d5f22:	f7ff fd9d 	bl	d5a60 <mbedtls_x509_get_rsassa_pss_params>
                                          md_alg,
                                          &pss_opts->mgf1_hash_id,
                                          &pss_opts->expected_salt_len );
        if( ret != 0 )
   d5f26:	4604      	mov	r4, r0
   d5f28:	b118      	cbz	r0, d5f32 <mbedtls_x509_get_sig_alg+0x4a>
        {
            mbedtls_free( pss_opts );
   d5f2a:	4628      	mov	r0, r5
   d5f2c:	f00f fa1e 	bl	e536c <free>
            return( ret );
   d5f30:	e010      	b.n	d5f54 <mbedtls_x509_get_sig_alg+0x6c>
        }

        *sig_opts = (void *) pss_opts;
   d5f32:	603d      	str	r5, [r7, #0]
   d5f34:	e00e      	b.n	d5f54 <mbedtls_x509_get_sig_alg+0x6c>
    }
    else
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
   d5f36:	6833      	ldr	r3, [r6, #0]
   d5f38:	2b05      	cmp	r3, #5
   d5f3a:	d000      	beq.n	d5f3e <mbedtls_x509_get_sig_alg+0x56>
   d5f3c:	b94b      	cbnz	r3, d5f52 <mbedtls_x509_get_sig_alg+0x6a>
   d5f3e:	6873      	ldr	r3, [r6, #4]
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
   d5f40:	4c06      	ldr	r4, [pc, #24]	; (d5f5c <mbedtls_x509_get_sig_alg+0x74>)
   d5f42:	2b00      	cmp	r3, #0
   d5f44:	bf08      	it	eq
   d5f46:	2400      	moveq	r4, #0
   d5f48:	e004      	b.n	d5f54 <mbedtls_x509_get_sig_alg+0x6c>
                      void **sig_opts )
{
    int ret;

    if( *sig_opts != NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   d5f4a:	4c05      	ldr	r4, [pc, #20]	; (d5f60 <mbedtls_x509_get_sig_alg+0x78>)
   d5f4c:	e002      	b.n	d5f54 <mbedtls_x509_get_sig_alg+0x6c>
    {
        mbedtls_pk_rsassa_pss_options *pss_opts;

        pss_opts = (mbedtls_pk_rsassa_pss_options *)mbedtls_calloc( 1, sizeof( mbedtls_pk_rsassa_pss_options ) );
        if( pss_opts == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   d5f4e:	4c05      	ldr	r4, [pc, #20]	; (d5f64 <mbedtls_x509_get_sig_alg+0x7c>)
   d5f50:	e000      	b.n	d5f54 <mbedtls_x509_get_sig_alg+0x6c>
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
   d5f52:	4c02      	ldr	r4, [pc, #8]	; (d5f5c <mbedtls_x509_get_sig_alg+0x74>)
    }

    return( 0 );
}
   d5f54:	4620      	mov	r0, r4
   d5f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5f5a:	bf00      	nop
   d5f5c:	ffffdd00 	.word	0xffffdd00
   d5f60:	ffffd800 	.word	0xffffd800
   d5f64:	ffffd780 	.word	0xffffd780

000d5f68 <mbedtls_x509_get_ext>:
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                          mbedtls_x509_buf *ext, int tag )
{
   d5f68:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t len;

    /* Extension structure use EXPLICIT tagging. That is, the actual
     * `Extensions` structure is wrapped by a tag-length pair using
     * the respective context-specific tag. */
    ret = mbedtls_asn1_get_tag( p, end, &ext->len,
   d5f6a:	f043 04a0 	orr.w	r4, r3, #160	; 0xa0
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                          mbedtls_x509_buf *ext, int tag )
{
   d5f6e:	4616      	mov	r6, r2

    /* Extension structure use EXPLICIT tagging. That is, the actual
     * `Extensions` structure is wrapped by a tag-length pair using
     * the respective context-specific tag. */
    ret = mbedtls_asn1_get_tag( p, end, &ext->len,
              MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag );
   d5f70:	4623      	mov	r3, r4
   d5f72:	3204      	adds	r2, #4
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                          mbedtls_x509_buf *ext, int tag )
{
   d5f74:	4605      	mov	r5, r0

    /* Extension structure use EXPLICIT tagging. That is, the actual
     * `Extensions` structure is wrapped by a tag-length pair using
     * the respective context-specific tag. */
    ret = mbedtls_asn1_get_tag( p, end, &ext->len,
              MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag );
   d5f76:	f7ff fbdb 	bl	d5730 <mbedtls_asn1_get_tag>
    if( ret != 0 )
   d5f7a:	b960      	cbnz	r0, d5f96 <mbedtls_x509_get_ext+0x2e>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    ext->tag = MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag;
   d5f7c:	6034      	str	r4, [r6, #0]
    ext->p   = *p;
   d5f7e:	682b      	ldr	r3, [r5, #0]
   d5f80:	60b3      	str	r3, [r6, #8]
    end      = *p + ext->len;
   d5f82:	6828      	ldr	r0, [r5, #0]
   d5f84:	6873      	ldr	r3, [r6, #4]
   d5f86:	18c4      	adds	r4, r0, r3

    /*
     * Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d5f88:	aa01      	add	r2, sp, #4
   d5f8a:	2330      	movs	r3, #48	; 0x30
   d5f8c:	4621      	mov	r1, r4
   d5f8e:	4628      	mov	r0, r5
   d5f90:	f7ff fbce 	bl	d5730 <mbedtls_asn1_get_tag>
   d5f94:	b110      	cbz	r0, d5f9c <mbedtls_x509_get_ext+0x34>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
   d5f96:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
   d5f9a:	e007      	b.n	d5fac <mbedtls_x509_get_ext+0x44>

    if( end != *p + len )
   d5f9c:	9b01      	ldr	r3, [sp, #4]
   d5f9e:	6828      	ldr	r0, [r5, #0]
   d5fa0:	4418      	add	r0, r3
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
   d5fa2:	4b03      	ldr	r3, [pc, #12]	; (d5fb0 <mbedtls_x509_get_ext+0x48>)
   d5fa4:	4284      	cmp	r4, r0
   d5fa6:	bf14      	ite	ne
   d5fa8:	4618      	movne	r0, r3
   d5faa:	2000      	moveq	r0, #0
}
   d5fac:	b002      	add	sp, #8
   d5fae:	bd70      	pop	{r4, r5, r6, pc}
   d5fb0:	ffffda9a 	.word	0xffffda9a

000d5fb4 <mbedtls_x509_dn_gets>:
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
   d5fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5fb8:	b0c2      	sub	sp, #264	; 0x108
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
   d5fba:	f04f 0a00 	mov.w	sl, #0
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
   d5fbe:	f10d 0808 	add.w	r8, sp, #8
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
   d5fc2:	460f      	mov	r7, r1
   d5fc4:	4691      	mov	r9, r2
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
   d5fc6:	4651      	mov	r1, sl
   d5fc8:	f44f 7280 	mov.w	r2, #256	; 0x100
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
   d5fcc:	4604      	mov	r4, r0
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
   d5fce:	4640      	mov	r0, r8
{
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
   d5fd0:	f8cd a004 	str.w	sl, [sp, #4]
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );

    name = dn;
   d5fd4:	464e      	mov	r6, r9
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
   d5fd6:	f010 ffe0 	bl	e6f9a <memset>

    name = dn;
    p = buf;
    n = size;
   d5fda:	463d      	mov	r5, r7
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
   d5fdc:	4652      	mov	r2, sl
            if( i >= sizeof( s ) - 1 )
                break;

            c = name->val.p[i];
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
                 s[i] = '?';
   d5fde:	f04f 0a3f 	mov.w	sl, #63	; 0x3f

    name = dn;
    p = buf;
    n = size;

    while( name != NULL )
   d5fe2:	2e00      	cmp	r6, #0
   d5fe4:	d057      	beq.n	d6096 <mbedtls_x509_dn_gets+0xe2>
    {
        if( !name->oid.p )
   d5fe6:	68b3      	ldr	r3, [r6, #8]
   d5fe8:	2b00      	cmp	r3, #0
   d5fea:	d052      	beq.n	d6092 <mbedtls_x509_dn_gets+0xde>
        {
            name = name->next;
            continue;
        }

        if( name != dn )
   d5fec:	454e      	cmp	r6, r9
   d5fee:	d011      	beq.n	d6014 <mbedtls_x509_dn_gets+0x60>
        {
            ret = mbedtls_snprintf( p, n, merge ? " + " : ", " );
   d5ff0:	4b2b      	ldr	r3, [pc, #172]	; (d60a0 <mbedtls_x509_dn_gets+0xec>)
   d5ff2:	492c      	ldr	r1, [pc, #176]	; (d60a4 <mbedtls_x509_dn_gets+0xf0>)
   d5ff4:	4620      	mov	r0, r4
   d5ff6:	2a00      	cmp	r2, #0
   d5ff8:	bf14      	ite	ne
   d5ffa:	460a      	movne	r2, r1
   d5ffc:	461a      	moveq	r2, r3
   d5ffe:	4629      	mov	r1, r5
   d6000:	f00f f9dc 	bl	e53bc <snprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
   d6004:	2800      	cmp	r0, #0
   d6006:	da01      	bge.n	d600c <mbedtls_x509_dn_gets+0x58>
   d6008:	4827      	ldr	r0, [pc, #156]	; (d60a8 <mbedtls_x509_dn_gets+0xf4>)
   d600a:	e045      	b.n	d6098 <mbedtls_x509_dn_gets+0xe4>
   d600c:	4285      	cmp	r5, r0
   d600e:	d9fb      	bls.n	d6008 <mbedtls_x509_dn_gets+0x54>
   d6010:	1a2d      	subs	r5, r5, r0
   d6012:	4404      	add	r4, r0
        }

        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );
   d6014:	a901      	add	r1, sp, #4
   d6016:	4630      	mov	r0, r6
   d6018:	f003 f89c 	bl	d9154 <mbedtls_oid_get_attr_short_name>

        if( ret == 0 )
   d601c:	b930      	cbnz	r0, d602c <mbedtls_x509_dn_gets+0x78>
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
   d601e:	9b01      	ldr	r3, [sp, #4]
   d6020:	4a22      	ldr	r2, [pc, #136]	; (d60ac <mbedtls_x509_dn_gets+0xf8>)
   d6022:	4629      	mov	r1, r5
   d6024:	4620      	mov	r0, r4
   d6026:	f00f f9c9 	bl	e53bc <snprintf>
   d602a:	e004      	b.n	d6036 <mbedtls_x509_dn_gets+0x82>
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
   d602c:	4a20      	ldr	r2, [pc, #128]	; (d60b0 <mbedtls_x509_dn_gets+0xfc>)
   d602e:	4629      	mov	r1, r5
   d6030:	4620      	mov	r0, r4
   d6032:	f00f f9c3 	bl	e53bc <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   d6036:	2800      	cmp	r0, #0
   d6038:	dbe6      	blt.n	d6008 <mbedtls_x509_dn_gets+0x54>
   d603a:	4285      	cmp	r5, r0
   d603c:	d9e4      	bls.n	d6008 <mbedtls_x509_dn_gets+0x54>
   d603e:	1a2d      	subs	r5, r5, r0
   d6040:	4404      	add	r4, r0

        for( i = 0; i < name->val.len; i++ )
   d6042:	2300      	movs	r3, #0
   d6044:	6932      	ldr	r2, [r6, #16]
   d6046:	4293      	cmp	r3, r2
   d6048:	d213      	bcs.n	d6072 <mbedtls_x509_dn_gets+0xbe>
        {
            if( i >= sizeof( s ) - 1 )
   d604a:	2bff      	cmp	r3, #255	; 0xff
   d604c:	d011      	beq.n	d6072 <mbedtls_x509_dn_gets+0xbe>
                break;

            c = name->val.p[i];
   d604e:	6972      	ldr	r2, [r6, #20]
   d6050:	5cd2      	ldrb	r2, [r2, r3]
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
   d6052:	2a1f      	cmp	r2, #31
   d6054:	d906      	bls.n	d6064 <mbedtls_x509_dn_gets+0xb0>
   d6056:	2a7f      	cmp	r2, #127	; 0x7f
   d6058:	d004      	beq.n	d6064 <mbedtls_x509_dn_gets+0xb0>
   d605a:	f102 017f 	add.w	r1, r2, #127	; 0x7f
   d605e:	b2c9      	uxtb	r1, r1
   d6060:	291e      	cmp	r1, #30
   d6062:	d802      	bhi.n	d606a <mbedtls_x509_dn_gets+0xb6>
                 s[i] = '?';
   d6064:	f808 a003 	strb.w	sl, [r8, r3]
   d6068:	e001      	b.n	d606e <mbedtls_x509_dn_gets+0xba>
            else s[i] = c;
   d606a:	f808 2003 	strb.w	r2, [r8, r3]
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
        MBEDTLS_X509_SAFE_SNPRINTF;

        for( i = 0; i < name->val.len; i++ )
   d606e:	3301      	adds	r3, #1
   d6070:	e7e8      	b.n	d6044 <mbedtls_x509_dn_gets+0x90>
            c = name->val.p[i];
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
                 s[i] = '?';
            else s[i] = c;
        }
        s[i] = '\0';
   d6072:	2200      	movs	r2, #0
   d6074:	f808 2003 	strb.w	r2, [r8, r3]
        ret = mbedtls_snprintf( p, n, "%s", s );
   d6078:	4629      	mov	r1, r5
   d607a:	4643      	mov	r3, r8
   d607c:	4a0d      	ldr	r2, [pc, #52]	; (d60b4 <mbedtls_x509_dn_gets+0x100>)
   d607e:	4620      	mov	r0, r4
   d6080:	f00f f99c 	bl	e53bc <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   d6084:	2800      	cmp	r0, #0
   d6086:	dbbf      	blt.n	d6008 <mbedtls_x509_dn_gets+0x54>
   d6088:	4285      	cmp	r5, r0
   d608a:	d9bd      	bls.n	d6008 <mbedtls_x509_dn_gets+0x54>

        merge = name->next_merged;
   d608c:	7f32      	ldrb	r2, [r6, #28]
                 s[i] = '?';
            else s[i] = c;
        }
        s[i] = '\0';
        ret = mbedtls_snprintf( p, n, "%s", s );
        MBEDTLS_X509_SAFE_SNPRINTF;
   d608e:	1a2d      	subs	r5, r5, r0
   d6090:	4404      	add	r4, r0

        merge = name->next_merged;
        name = name->next;
   d6092:	69b6      	ldr	r6, [r6, #24]
   d6094:	e7a5      	b.n	d5fe2 <mbedtls_x509_dn_gets+0x2e>
    }

    return( (int) ( size - n ) );
   d6096:	1b78      	subs	r0, r7, r5
}
   d6098:	b042      	add	sp, #264	; 0x108
   d609a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d609e:	bf00      	nop
   d60a0:	000e8226 	.word	0x000e8226
   d60a4:	000e8222 	.word	0x000e8222
   d60a8:	ffffd680 	.word	0xffffd680
   d60ac:	000e8229 	.word	0x000e8229
   d60b0:	000e822d 	.word	0x000e822d
   d60b4:	000e98f9 	.word	0x000e98f9

000d60b8 <mbedtls_x509_serial_gets>:
/*
 * Store the serial in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )
{
   d60b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *p;

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
   d60bc:	6856      	ldr	r6, [r2, #4]
    for( i = 0; i < nr; i++ )
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
   d60be:	f8df a084 	ldr.w	sl, [pc, #132]	; d6144 <mbedtls_x509_serial_gets+0x8c>
   d60c2:	f8df b084 	ldr.w	fp, [pc, #132]	; d6148 <mbedtls_x509_serial_gets+0x90>

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;
   d60c6:	2e21      	cmp	r6, #33	; 0x21
/*
 * Store the serial in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )
{
   d60c8:	4680      	mov	r8, r0
   d60ca:	460f      	mov	r7, r1
   d60cc:	4691      	mov	r9, r2

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;
   d60ce:	bf28      	it	cs
   d60d0:	261c      	movcs	r6, #28
    int ret;
    size_t i, n, nr;
    char *p;

    p = buf;
    n = size;
   d60d2:	460c      	mov	r4, r1

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;

    for( i = 0; i < nr; i++ )
   d60d4:	2500      	movs	r5, #0
   d60d6:	42b5      	cmp	r5, r6
   d60d8:	d01c      	beq.n	d6114 <mbedtls_x509_serial_gets+0x5c>
   d60da:	f8d9 3008 	ldr.w	r3, [r9, #8]
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
   d60de:	b91d      	cbnz	r5, d60e8 <mbedtls_x509_serial_gets+0x30>
   d60e0:	2e01      	cmp	r6, #1
   d60e2:	d001      	beq.n	d60e8 <mbedtls_x509_serial_gets+0x30>
   d60e4:	781a      	ldrb	r2, [r3, #0]
   d60e6:	b19a      	cbz	r2, d6110 <mbedtls_x509_serial_gets+0x58>
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
   d60e8:	1e72      	subs	r2, r6, #1
   d60ea:	4295      	cmp	r5, r2
   d60ec:	bf34      	ite	cc
   d60ee:	4652      	movcc	r2, sl
   d60f0:	465a      	movcs	r2, fp
   d60f2:	5d5b      	ldrb	r3, [r3, r5]
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
   d60f4:	9200      	str	r2, [sp, #0]
   d60f6:	4621      	mov	r1, r4
   d60f8:	4a0f      	ldr	r2, [pc, #60]	; (d6138 <mbedtls_x509_serial_gets+0x80>)
   d60fa:	4640      	mov	r0, r8
   d60fc:	f00f f95e 	bl	e53bc <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   d6100:	2800      	cmp	r0, #0
   d6102:	da01      	bge.n	d6108 <mbedtls_x509_serial_gets+0x50>
   d6104:	480d      	ldr	r0, [pc, #52]	; (d613c <mbedtls_x509_serial_gets+0x84>)
   d6106:	e014      	b.n	d6132 <mbedtls_x509_serial_gets+0x7a>
   d6108:	4284      	cmp	r4, r0
   d610a:	d9fb      	bls.n	d6104 <mbedtls_x509_serial_gets+0x4c>
   d610c:	1a24      	subs	r4, r4, r0
   d610e:	4480      	add	r8, r0
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;

    for( i = 0; i < nr; i++ )
   d6110:	3501      	adds	r5, #1
   d6112:	e7e0      	b.n	d60d6 <mbedtls_x509_serial_gets+0x1e>
        ret = mbedtls_snprintf( p, n, "%02X%s",
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
        MBEDTLS_X509_SAFE_SNPRINTF;
    }

    if( nr != serial->len )
   d6114:	f8d9 3004 	ldr.w	r3, [r9, #4]
   d6118:	429d      	cmp	r5, r3
   d611a:	d009      	beq.n	d6130 <mbedtls_x509_serial_gets+0x78>
    {
        ret = mbedtls_snprintf( p, n, "...." );
   d611c:	4a08      	ldr	r2, [pc, #32]	; (d6140 <mbedtls_x509_serial_gets+0x88>)
   d611e:	4621      	mov	r1, r4
   d6120:	4640      	mov	r0, r8
   d6122:	f00f f94b 	bl	e53bc <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   d6126:	2800      	cmp	r0, #0
   d6128:	dbec      	blt.n	d6104 <mbedtls_x509_serial_gets+0x4c>
   d612a:	4284      	cmp	r4, r0
   d612c:	d9ea      	bls.n	d6104 <mbedtls_x509_serial_gets+0x4c>
   d612e:	1a24      	subs	r4, r4, r0
    }

    return( (int) ( size - n ) );
   d6130:	1b38      	subs	r0, r7, r4
}
   d6132:	b003      	add	sp, #12
   d6134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6138:	000e8231 	.word	0x000e8231
   d613c:	ffffd680 	.word	0xffffd680
   d6140:	000e8238 	.word	0x000e8238
   d6144:	000ea852 	.word	0x000ea852
   d6148:	000e87fd 	.word	0x000e87fd

000d614c <mbedtls_x509_sig_alg_gets>:
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
   d614c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   d6150:	460c      	mov	r4, r1
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
   d6152:	a904      	add	r1, sp, #16
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
   d6154:	4698      	mov	r8, r3
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
   d6156:	2300      	movs	r3, #0
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
   d6158:	4607      	mov	r7, r0
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
   d615a:	f841 3d04 	str.w	r3, [r1, #-4]!

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
   d615e:	4610      	mov	r0, r2
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
   d6160:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
   d6164:	f003 f844 	bl	d91f0 <mbedtls_oid_get_sig_alg_desc>
    if( ret != 0 )
   d6168:	b128      	cbz	r0, d6176 <mbedtls_x509_sig_alg_gets+0x2a>
        ret = mbedtls_snprintf( p, n, "???"  );
   d616a:	4a23      	ldr	r2, [pc, #140]	; (d61f8 <mbedtls_x509_sig_alg_gets+0xac>)
   d616c:	4621      	mov	r1, r4
   d616e:	4638      	mov	r0, r7
   d6170:	f00f f924 	bl	e53bc <snprintf>
   d6174:	e005      	b.n	d6182 <mbedtls_x509_sig_alg_gets+0x36>
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
   d6176:	9b03      	ldr	r3, [sp, #12]
   d6178:	4a20      	ldr	r2, [pc, #128]	; (d61fc <mbedtls_x509_sig_alg_gets+0xb0>)
   d617a:	4621      	mov	r1, r4
   d617c:	4638      	mov	r0, r7
   d617e:	f00f f91d 	bl	e53bc <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   d6182:	2800      	cmp	r0, #0

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
    if( ret != 0 )
        ret = mbedtls_snprintf( p, n, "???"  );
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
   d6184:	4606      	mov	r6, r0
    MBEDTLS_X509_SAFE_SNPRINTF;
   d6186:	da01      	bge.n	d618c <mbedtls_x509_sig_alg_gets+0x40>
   d6188:	481d      	ldr	r0, [pc, #116]	; (d6200 <mbedtls_x509_sig_alg_gets+0xb4>)
   d618a:	e032      	b.n	d61f2 <mbedtls_x509_sig_alg_gets+0xa6>
   d618c:	4284      	cmp	r4, r0
   d618e:	d9fb      	bls.n	d6188 <mbedtls_x509_sig_alg_gets+0x3c>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
    if( pk_alg == MBEDTLS_PK_RSASSA_PSS )
   d6190:	f1b8 0f06 	cmp.w	r8, #6
    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
    if( ret != 0 )
        ret = mbedtls_snprintf( p, n, "???"  );
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
    MBEDTLS_X509_SAFE_SNPRINTF;
   d6194:	eba4 0500 	sub.w	r5, r4, r0

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
    if( pk_alg == MBEDTLS_PK_RSASSA_PSS )
   d6198:	d12a      	bne.n	d61f0 <mbedtls_x509_sig_alg_gets+0xa4>
        const mbedtls_pk_rsassa_pss_options *pss_opts;
        const mbedtls_md_info_t *md_info, *mgf_md_info;

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) sig_opts;

        md_info = mbedtls_md_info_from_type( md_alg );
   d619a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   d619e:	f006 f843 	bl	dc228 <mbedtls_md_info_from_type>
   d61a2:	4680      	mov	r8, r0
        mgf_md_info = mbedtls_md_info_from_type( pss_opts->mgf1_hash_id );
   d61a4:	f899 0000 	ldrb.w	r0, [r9]
   d61a8:	f006 f83e 	bl	dc228 <mbedtls_md_info_from_type>
   d61ac:	4682      	mov	sl, r0

        ret = mbedtls_snprintf( p, n, " (%s, MGF1-%s, 0x%02X)",
   d61ae:	f1b8 0f00 	cmp.w	r8, #0
   d61b2:	d004      	beq.n	d61be <mbedtls_x509_sig_alg_gets+0x72>
   d61b4:	4640      	mov	r0, r8
   d61b6:	f006 f972 	bl	dc49e <mbedtls_md_get_name>
   d61ba:	4680      	mov	r8, r0
   d61bc:	e001      	b.n	d61c2 <mbedtls_x509_sig_alg_gets+0x76>
   d61be:	f8df 8038 	ldr.w	r8, [pc, #56]	; d61f8 <mbedtls_x509_sig_alg_gets+0xac>
   d61c2:	f1ba 0f00 	cmp.w	sl, #0
   d61c6:	d003      	beq.n	d61d0 <mbedtls_x509_sig_alg_gets+0x84>
   d61c8:	4650      	mov	r0, sl
   d61ca:	f006 f968 	bl	dc49e <mbedtls_md_get_name>
   d61ce:	e000      	b.n	d61d2 <mbedtls_x509_sig_alg_gets+0x86>
   d61d0:	4809      	ldr	r0, [pc, #36]	; (d61f8 <mbedtls_x509_sig_alg_gets+0xac>)
                              md_info ? mbedtls_md_get_name( md_info ) : "???",
                              mgf_md_info ? mbedtls_md_get_name( mgf_md_info ) : "???",
                              pss_opts->expected_salt_len );
   d61d2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   d61d6:	4a0b      	ldr	r2, [pc, #44]	; (d6204 <mbedtls_x509_sig_alg_gets+0xb8>)
   d61d8:	e88d 0009 	stmia.w	sp, {r0, r3}
   d61dc:	4629      	mov	r1, r5
   d61de:	4643      	mov	r3, r8
   d61e0:	19b8      	adds	r0, r7, r6
   d61e2:	f00f f8eb 	bl	e53bc <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   d61e6:	2800      	cmp	r0, #0
   d61e8:	dbce      	blt.n	d6188 <mbedtls_x509_sig_alg_gets+0x3c>
   d61ea:	4285      	cmp	r5, r0
   d61ec:	d9cc      	bls.n	d6188 <mbedtls_x509_sig_alg_gets+0x3c>
   d61ee:	1a2d      	subs	r5, r5, r0
    ((void) pk_alg);
    ((void) md_alg);
    ((void) sig_opts);
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */

    return( (int)( size - n ) );
   d61f0:	1b60      	subs	r0, r4, r5
}
   d61f2:	b004      	add	sp, #16
   d61f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d61f8:	000e823d 	.word	0x000e823d
   d61fc:	000e98f9 	.word	0x000e98f9
   d6200:	ffffd680 	.word	0xffffd680
   d6204:	000e8241 	.word	0x000e8241

000d6208 <mbedtls_x509_key_size_helper>:

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
   d6208:	b510      	push	{r4, lr}
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
   d620a:	4613      	mov	r3, r2
   d620c:	4a06      	ldr	r2, [pc, #24]	; (d6228 <mbedtls_x509_key_size_helper+0x20>)

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
   d620e:	460c      	mov	r4, r1
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
   d6210:	f00f f8d4 	bl	e53bc <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   d6214:	2800      	cmp	r0, #0
   d6216:	db05      	blt.n	d6224 <mbedtls_x509_key_size_helper+0x1c>

    return( 0 );
   d6218:	4b04      	ldr	r3, [pc, #16]	; (d622c <mbedtls_x509_key_size_helper+0x24>)
   d621a:	4284      	cmp	r4, r0
   d621c:	bf94      	ite	ls
   d621e:	4618      	movls	r0, r3
   d6220:	2000      	movhi	r0, #0
   d6222:	bd10      	pop	{r4, pc}
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
    MBEDTLS_X509_SAFE_SNPRINTF;
   d6224:	4801      	ldr	r0, [pc, #4]	; (d622c <mbedtls_x509_key_size_helper+0x24>)

    return( 0 );
}
   d6226:	bd10      	pop	{r4, pc}
   d6228:	000e8258 	.word	0x000e8258
   d622c:	ffffd680 	.word	0xffffd680

000d6230 <mbedtls_x509_time_is_past>:
   d6230:	2000      	movs	r0, #0
   d6232:	4770      	bx	lr

000d6234 <mbedtls_x509_time_is_future>:

int mbedtls_x509_time_is_future( const mbedtls_x509_time *from )
{
    ((void) from);
    return( 0 );
}
   d6234:	2000      	movs	r0, #0
   d6236:	4770      	bx	lr

000d6238 <_ZL17sha1_process_wrapPvPKh>:
}

static int sha1_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha1_process( (mbedtls_sha1_context *) ctx,
                                           data ) );
   d6238:	f003 b8d0 	b.w	d93dc <mbedtls_internal_sha1_process>

000d623c <_ZL15sha1_clone_wrapPvPKv>:
}

static void sha1_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha1_clone( (mbedtls_sha1_context *) dst,
                  (const mbedtls_sha1_context *) src );
   d623c:	f003 b8af 	b.w	d939e <mbedtls_sha1_clone>

000d6240 <_ZL13sha1_ctx_freePv>:
}

static void sha1_ctx_free( void *ctx )
{
   d6240:	b510      	push	{r4, lr}
   d6242:	4604      	mov	r4, r0
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
   d6244:	f003 f8a6 	bl	d9394 <mbedtls_sha1_free>
    mbedtls_free( ctx );
   d6248:	4620      	mov	r0, r4
}
   d624a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha1_ctx_free( void *ctx )
{
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
    mbedtls_free( ctx );
   d624e:	f00f b88d 	b.w	e536c <free>

000d6252 <_ZL14sha1_ctx_allocv>:
{
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
}

static void *sha1_ctx_alloc( void )
{
   d6252:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );
   d6254:	215c      	movs	r1, #92	; 0x5c
   d6256:	2001      	movs	r0, #1
   d6258:	f010 fd5c 	bl	e6d14 <calloc>

    if( ctx != NULL )
   d625c:	4604      	mov	r4, r0
   d625e:	b108      	cbz	r0, d6264 <_ZL14sha1_ctx_allocv+0x12>
        mbedtls_sha1_init( (mbedtls_sha1_context *) ctx );
   d6260:	f003 f894 	bl	d938c <mbedtls_sha1_init>

    return( ctx );
}
   d6264:	4620      	mov	r0, r4
   d6266:	bd10      	pop	{r4, pc}

000d6268 <_ZL16sha1_finish_wrapPvPh>:
                                     input, ilen ) );
}

static int sha1_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
   d6268:	f004 b8a6 	b.w	da3b8 <mbedtls_sha1_finish_ret>

000d626c <_ZL16sha1_update_wrapPvPKhj>:

static int sha1_update_wrap( void *ctx, const unsigned char *input,
                              size_t ilen )
{
    return( mbedtls_sha1_update_ret( (mbedtls_sha1_context *) ctx,
                                     input, ilen ) );
   d626c:	f004 b86a 	b.w	da344 <mbedtls_sha1_update_ret>

000d6270 <_ZL16sha1_starts_wrapPv>:

#if defined(MBEDTLS_SHA1_C)

static int sha1_starts_wrap( void *ctx )
{
    return( mbedtls_sha1_starts_ret( (mbedtls_sha1_context *) ctx ) );
   d6270:	f003 b89a 	b.w	d93a8 <mbedtls_sha1_starts_ret>

000d6274 <_ZL19sha224_process_wrapPvPKh>:
}

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
                                             data ) );
   d6274:	f7fe ba7c 	b.w	d4770 <mbedtls_internal_sha256_process>

000d6278 <_ZL17sha224_clone_wrapPvPKv>:
}

static void sha224_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
                    (const mbedtls_sha256_context *) src );
   d6278:	f7fe ba25 	b.w	d46c6 <mbedtls_sha256_clone>

000d627c <_ZL15sha224_ctx_freePv>:

    return( ctx );
}

static void sha224_ctx_free( void *ctx )
{
   d627c:	b510      	push	{r4, lr}
   d627e:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
   d6280:	f7fe fa1c 	bl	d46bc <mbedtls_sha256_free>
    mbedtls_free( ctx );
   d6284:	4620      	mov	r0, r4
}
   d6286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha224_ctx_free( void *ctx )
{
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
    mbedtls_free( ctx );
   d628a:	f00f b86f 	b.w	e536c <free>

000d628e <_ZL16sha224_ctx_allocv>:
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
}

static void *sha224_ctx_alloc( void )
{
   d628e:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
   d6290:	216c      	movs	r1, #108	; 0x6c
   d6292:	2001      	movs	r0, #1
   d6294:	f010 fd3e 	bl	e6d14 <calloc>

    if( ctx != NULL )
   d6298:	4604      	mov	r4, r0
   d629a:	b108      	cbz	r0, d62a0 <_ZL16sha224_ctx_allocv+0x12>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
   d629c:	f7fe fa0a 	bl	d46b4 <mbedtls_sha256_init>

    return( ctx );
}
   d62a0:	4620      	mov	r0, r4
   d62a2:	bd10      	pop	{r4, pc}

000d62a4 <_ZL11sha224_wrapPKhjPh>:
}

static int sha224_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
   d62a4:	2301      	movs	r3, #1
   d62a6:	f7fe be97 	b.w	d4fd8 <mbedtls_sha256_ret>

000d62aa <_ZL11sha256_wrapPKhjPh>:
}

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
   d62aa:	2300      	movs	r3, #0
   d62ac:	f7fe be94 	b.w	d4fd8 <mbedtls_sha256_ret>

000d62b0 <_ZL18sha224_finish_wrapPvPh>:
}

static int sha224_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
                                       output ) );
   d62b0:	f7fe bdfe 	b.w	d4eb0 <mbedtls_sha256_finish_ret>

000d62b4 <_ZL18sha224_update_wrapPvPKhj>:

static int sha224_update_wrap( void *ctx, const unsigned char *input,
                                size_t ilen )
{
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
                                       input, ilen ) );
   d62b4:	f7fe bdc2 	b.w	d4e3c <mbedtls_sha256_update_ret>

000d62b8 <_ZL18sha224_starts_wrapPv>:
 */
#if defined(MBEDTLS_SHA256_C)

static int sha224_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
   d62b8:	2101      	movs	r1, #1
   d62ba:	f7fe ba09 	b.w	d46d0 <mbedtls_sha256_starts_ret>

000d62be <_ZL18sha256_starts_wrapPv>:
    sha224_process_wrap,
};

static int sha256_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
   d62be:	2100      	movs	r1, #0
   d62c0:	f7fe ba06 	b.w	d46d0 <mbedtls_sha256_starts_ret>

000d62c4 <_ZL19sha384_process_wrapPvPKh>:
}

static int sha384_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha512_process( (mbedtls_sha512_context *) ctx,
                                             data ) );
   d62c4:	f00c ba4c 	b.w	e2760 <mbedtls_internal_sha512_process>

000d62c8 <_ZL17sha384_clone_wrapPvPKv>:
}

static void sha384_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha512_clone( (mbedtls_sha512_context *) dst,
                    (const mbedtls_sha512_context *) src );
   d62c8:	f00c b9a9 	b.w	e261e <mbedtls_sha512_clone>

000d62cc <_ZL15sha384_ctx_freePv>:

    return( ctx );
}

static void sha384_ctx_free( void *ctx )
{
   d62cc:	b510      	push	{r4, lr}
   d62ce:	4604      	mov	r4, r0
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
   d62d0:	f00c f9a0 	bl	e2614 <mbedtls_sha512_free>
    mbedtls_free( ctx );
   d62d4:	4620      	mov	r0, r4
}
   d62d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha384_ctx_free( void *ctx )
{
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
    mbedtls_free( ctx );
   d62da:	f00f b847 	b.w	e536c <free>

000d62de <_ZL16sha384_ctx_allocv>:
{
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
}

static void *sha384_ctx_alloc( void )
{
   d62de:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
   d62e0:	21d8      	movs	r1, #216	; 0xd8
   d62e2:	2001      	movs	r0, #1
   d62e4:	f010 fd16 	bl	e6d14 <calloc>

    if( ctx != NULL )
   d62e8:	4604      	mov	r4, r0
   d62ea:	b108      	cbz	r0, d62f0 <_ZL16sha384_ctx_allocv+0x12>
        mbedtls_sha512_init( (mbedtls_sha512_context *) ctx );
   d62ec:	f00c f98e 	bl	e260c <mbedtls_sha512_init>

    return( ctx );
}
   d62f0:	4620      	mov	r0, r4
   d62f2:	bd10      	pop	{r4, pc}

000d62f4 <_ZL11sha384_wrapPKhjPh>:
}

static int sha384_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
   d62f4:	2301      	movs	r3, #1
   d62f6:	f00d ba05 	b.w	e3704 <mbedtls_sha512_ret>

000d62fa <_ZL11sha512_wrapPKhjPh>:
}

static int sha512_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 0 ) );
   d62fa:	2300      	movs	r3, #0
   d62fc:	f00d ba02 	b.w	e3704 <mbedtls_sha512_ret>

000d6300 <_ZL18sha384_finish_wrapPvPh>:
}

static int sha384_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha512_finish_ret( (mbedtls_sha512_context *) ctx,
                                       output ) );
   d6300:	f00d b8d0 	b.w	e34a4 <mbedtls_sha512_finish_ret>

000d6304 <_ZL18sha384_update_wrapPvPKhj>:

static int sha384_update_wrap( void *ctx, const unsigned char *input,
                               size_t ilen )
{
    return( mbedtls_sha512_update_ret( (mbedtls_sha512_context *) ctx,
                                       input, ilen ) );
   d6304:	f00d b886 	b.w	e3414 <mbedtls_sha512_update_ret>

000d6308 <_ZL18sha384_starts_wrapPv>:

#if defined(MBEDTLS_SHA512_C)

static int sha384_starts_wrap( void *ctx )
{
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 1 ) );
   d6308:	2101      	movs	r1, #1
   d630a:	f00c b98d 	b.w	e2628 <mbedtls_sha512_starts_ret>

000d630e <_ZL18sha512_starts_wrapPv>:
    sha384_process_wrap,
};

static int sha512_starts_wrap( void *ctx )
{
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 0 ) );
   d630e:	2100      	movs	r1, #0
   d6310:	f00c b98a 	b.w	e2628 <mbedtls_sha512_starts_ret>

000d6314 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>:
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
   d6314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6318:	b095      	sub	sp, #84	; 0x54
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
   d631a:	ae04      	add	r6, sp, #16
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
   d631c:	9d1e      	ldr	r5, [sp, #120]	; 0x78
   d631e:	9301      	str	r3, [sp, #4]
   d6320:	4607      	mov	r7, r0
   d6322:	460c      	mov	r4, r1
   d6324:	4691      	mov	r9, r2
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
   d6326:	2100      	movs	r1, #0
   d6328:	2240      	movs	r2, #64	; 0x40
   d632a:	4630      	mov	r0, r6
    memset( counter, 0, 4 );
   d632c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
   d6330:	f010 fe33 	bl	e6f9a <memset>
    memset( counter, 0, 4 );
   d6334:	2300      	movs	r3, #0

    hlen = mbedtls_md_get_size( md_ctx->md_info );
   d6336:	6828      	ldr	r0, [r5, #0]
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
    memset( counter, 0, 4 );
   d6338:	f848 3d44 	str.w	r3, [r8, #-68]!

    hlen = mbedtls_md_get_size( md_ctx->md_info );
   d633c:	f006 f8ac 	bl	dc498 <mbedtls_md_get_size>
   d6340:	4682      	mov	sl, r0

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
   d6342:	b37c      	cbz	r4, d63a4 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x90>
   d6344:	4554      	cmp	r4, sl
    {
        use_len = hlen;
        if( dlen < hlen )
            use_len = dlen;

        if( ( ret = mbedtls_md_starts( md_ctx ) ) != 0 )
   d6346:	4628      	mov	r0, r5
   d6348:	46a3      	mov	fp, r4
   d634a:	bf28      	it	cs
   d634c:	46d3      	movcs	fp, sl
   d634e:	f005 ffb9 	bl	dc2c4 <mbedtls_md_starts>
   d6352:	4603      	mov	r3, r0
   d6354:	bb38      	cbnz	r0, d63a6 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, src, slen ) ) != 0 )
   d6356:	9a01      	ldr	r2, [sp, #4]
   d6358:	4649      	mov	r1, r9
   d635a:	4628      	mov	r0, r5
   d635c:	f005 ffbc 	bl	dc2d8 <mbedtls_md_update>
   d6360:	4603      	mov	r3, r0
   d6362:	bb00      	cbnz	r0, d63a6 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
   d6364:	2204      	movs	r2, #4
   d6366:	4641      	mov	r1, r8
   d6368:	4628      	mov	r0, r5
   d636a:	f005 ffb5 	bl	dc2d8 <mbedtls_md_update>
   d636e:	4603      	mov	r3, r0
   d6370:	b9c8      	cbnz	r0, d63a6 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
   d6372:	4631      	mov	r1, r6
   d6374:	4628      	mov	r0, r5
   d6376:	f005 ffb9 	bl	dc2ec <mbedtls_md_finish>
   d637a:	4603      	mov	r3, r0
   d637c:	b998      	cbnz	r0, d63a6 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
   d637e:	463a      	mov	r2, r7
            goto exit;

        for( i = 0; i < use_len; ++i )
   d6380:	455b      	cmp	r3, fp
   d6382:	d007      	beq.n	d6394 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x80>
            *p++ ^= mask[i];
   d6384:	f812 0b01 	ldrb.w	r0, [r2], #1
   d6388:	5cf1      	ldrb	r1, [r6, r3]
   d638a:	4041      	eors	r1, r0
   d638c:	f802 1c01 	strb.w	r1, [r2, #-1]
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
            goto exit;

        for( i = 0; i < use_len; ++i )
   d6390:	3301      	adds	r3, #1
   d6392:	e7f5      	b.n	d6380 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x6c>
            *p++ ^= mask[i];

        counter[3]++;
   d6394:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d6398:	3201      	adds	r2, #1
   d639a:	441f      	add	r7, r3
   d639c:	f88d 200f 	strb.w	r2, [sp, #15]

        dlen -= use_len;
   d63a0:	1ae4      	subs	r4, r4, r3
    hlen = mbedtls_md_get_size( md_ctx->md_info );

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
   d63a2:	e7ce      	b.n	d6342 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x2e>
   d63a4:	4623      	mov	r3, r4

        dlen -= use_len;
    }

exit:
    mbedtls_platform_zeroize( mask, sizeof( mask ) );
   d63a6:	4630      	mov	r0, r6
   d63a8:	2140      	movs	r1, #64	; 0x40
   d63aa:	9301      	str	r3, [sp, #4]
   d63ac:	f004 f898 	bl	da4e0 <mbedtls_platform_zeroize>

    return( ret );
}
   d63b0:	9b01      	ldr	r3, [sp, #4]
   d63b2:	4618      	mov	r0, r3
   d63b4:	b015      	add	sp, #84	; 0x54
   d63b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d63bc <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>:
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
   d63bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d63c0:	461d      	mov	r5, r3
    size_t oid_size  = 0;
   d63c2:	2300      	movs	r3, #0
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
   d63c4:	460e      	mov	r6, r1
   d63c6:	4691      	mov	r9, r2
   d63c8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    size_t oid_size  = 0;
   d63cc:	9300      	str	r3, [sp, #0]
    size_t nb_pad    = dst_len;
    unsigned char *p = dst;
    const char *oid  = NULL;
   d63ce:	9301      	str	r3, [sp, #4]

    /* Are we signing hashed or raw data? */
    if( md_alg != MBEDTLS_MD_NONE )
   d63d0:	4604      	mov	r4, r0
   d63d2:	b328      	cbz	r0, d6420 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x64>
    {
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
   d63d4:	f005 ff28 	bl	dc228 <mbedtls_md_info_from_type>
        if( md_info == NULL )
   d63d8:	4606      	mov	r6, r0
   d63da:	2800      	cmp	r0, #0
   d63dc:	d063      	beq.n	d64a6 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
   d63de:	4620      	mov	r0, r4
   d63e0:	466a      	mov	r2, sp
   d63e2:	a901      	add	r1, sp, #4
   d63e4:	f002 ff88 	bl	d92f8 <mbedtls_oid_get_oid_by_md>
   d63e8:	4604      	mov	r4, r0
   d63ea:	2800      	cmp	r0, #0
   d63ec:	d15b      	bne.n	d64a6 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
   d63ee:	4630      	mov	r0, r6
   d63f0:	f006 f852 	bl	dc498 <mbedtls_md_get_size>

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
   d63f4:	9f00      	ldr	r7, [sp, #0]
   d63f6:	4407      	add	r7, r0
   d63f8:	f107 0308 	add.w	r3, r7, #8
   d63fc:	2b7f      	cmp	r3, #127	; 0x7f
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
   d63fe:	4606      	mov	r6, r0

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
   d6400:	d851      	bhi.n	d64a6 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
   d6402:	f110 020a 	adds.w	r2, r0, #10
   d6406:	d24e      	bcs.n	d64a6 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            10 + hashlen            <  hashlen      ||
            10 + hashlen + oid_size <  10 + hashlen )
   d6408:	f107 030a 	add.w	r3, r7, #10
        hashlen = mbedtls_md_get_size( md_info );

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
            10 + hashlen            <  hashlen      ||
   d640c:	429a      	cmp	r2, r3
   d640e:	d84a      	bhi.n	d64a6 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
         *   (Insist on 1-byte length encodings to protect against variants of
         *    Bleichenbacher's forgery attack against lax PKCS#1v1.5 verification)
         * - Need hashlen bytes for hash
         * - Need oid_size bytes for hash alg OID.
         */
        if( nb_pad < 10 + hashlen + oid_size )
   d6410:	429d      	cmp	r5, r3
   d6412:	d348      	bcc.n	d64a6 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
        nb_pad -= 10 + hashlen + oid_size;
   d6414:	f1a5 030a 	sub.w	r3, r5, #10
   d6418:	1bdf      	subs	r7, r3, r7
        nb_pad -= hashlen;
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
   d641a:	2f0a      	cmp	r7, #10
   d641c:	d806      	bhi.n	d642c <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x70>
   d641e:	e042      	b.n	d64a6 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
        nb_pad -= 10 + hashlen + oid_size;
    }
    else
    {
        if( nb_pad < hashlen )
   d6420:	428d      	cmp	r5, r1
   d6422:	d340      	bcc.n	d64a6 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        nb_pad -= hashlen;
   d6424:	1a6d      	subs	r5, r5, r1
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
   d6426:	2d0a      	cmp	r5, #10
   d6428:	d93d      	bls.n	d64a6 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
   d642a:	e03e      	b.n	d64aa <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xee>

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
   d642c:	46c2      	mov	sl, r8

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    nb_pad -= 3;
   d642e:	3f03      	subs	r7, #3

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
   d6430:	f80a 4b02 	strb.w	r4, [sl], #2
    *p++ = MBEDTLS_RSA_SIGN;
   d6434:	2301      	movs	r3, #1
    memset( p, 0xFF, nb_pad );
   d6436:	463a      	mov	r2, r7
    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
    *p++ = MBEDTLS_RSA_SIGN;
   d6438:	f888 3001 	strb.w	r3, [r8, #1]
    memset( p, 0xFF, nb_pad );
   d643c:	21ff      	movs	r1, #255	; 0xff
   d643e:	4650      	mov	r0, sl
   d6440:	f010 fdab 	bl	e6f9a <memset>
    p += nb_pad;
   d6444:	eb0a 0307 	add.w	r3, sl, r7
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
   d6448:	2130      	movs	r1, #48	; 0x30
    /* Write signature header and padding */
    *p++ = 0;
    *p++ = MBEDTLS_RSA_SIGN;
    memset( p, 0xFF, nb_pad );
    p += nb_pad;
    *p++ = 0;
   d644a:	f80a 4007 	strb.w	r4, [sl, r7]
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
   d644e:	7059      	strb	r1, [r3, #1]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
   d6450:	9f00      	ldr	r7, [sp, #0]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
   d6452:	70d9      	strb	r1, [r3, #3]
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
   d6454:	f107 0208 	add.w	r2, r7, #8
   d6458:	4432      	add	r2, r6
   d645a:	709a      	strb	r2, [r3, #2]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
   d645c:	b2fa      	uxtb	r2, r7
   d645e:	1d11      	adds	r1, r2, #4
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
   d6460:	f103 0a07 	add.w	sl, r3, #7
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
   d6464:	7119      	strb	r1, [r3, #4]
    *p++ = MBEDTLS_ASN1_OID;
   d6466:	2106      	movs	r1, #6
   d6468:	7159      	strb	r1, [r3, #5]
    *p++ = (unsigned char) oid_size;
   d646a:	719a      	strb	r2, [r3, #6]
    memcpy( p, oid, oid_size );
   d646c:	9901      	ldr	r1, [sp, #4]
   d646e:	463a      	mov	r2, r7
   d6470:	4650      	mov	r0, sl
   d6472:	f010 fd6c 	bl	e6f4e <memcpy>
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
   d6476:	2205      	movs	r2, #5
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
   d6478:	eb0a 0307 	add.w	r3, sl, r7
    *p++ = MBEDTLS_ASN1_NULL;
   d647c:	f80a 2007 	strb.w	r2, [sl, r7]
    *p++ = 0x00;
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
   d6480:	2204      	movs	r2, #4
    *p++ = (unsigned char) hashlen;
   d6482:	189f      	adds	r7, r3, r2
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
    *p++ = 0x00;
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
   d6484:	709a      	strb	r2, [r3, #2]
    *p++ = (unsigned char) hashlen;
   d6486:	70de      	strb	r6, [r3, #3]
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
    *p++ = 0x00;
   d6488:	705c      	strb	r4, [r3, #1]
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
    *p++ = (unsigned char) hashlen;
    memcpy( p, hash, hashlen );
   d648a:	4632      	mov	r2, r6
   d648c:	4649      	mov	r1, r9
   d648e:	4638      	mov	r0, r7
   d6490:	f010 fd5d 	bl	e6f4e <memcpy>
    p += hashlen;

    /* Just a sanity-check, should be automatic
     * after the initial bounds check. */
    if( p != dst + dst_len )
   d6494:	443e      	add	r6, r7
   d6496:	eb08 0305 	add.w	r3, r8, r5
   d649a:	429e      	cmp	r6, r3
   d649c:	d019      	beq.n	d64d2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x116>
    {
        mbedtls_platform_zeroize( dst, dst_len );
   d649e:	4629      	mov	r1, r5
   d64a0:	4640      	mov	r0, r8
   d64a2:	f004 f81d 	bl	da4e0 <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d64a6:	4c0d      	ldr	r4, [pc, #52]	; (d64dc <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x120>)
   d64a8:	e013      	b.n	d64d2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x116>

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
   d64aa:	4643      	mov	r3, r8

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    nb_pad -= 3;
   d64ac:	1eef      	subs	r7, r5, #3

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
   d64ae:	f803 0b02 	strb.w	r0, [r3], #2
    *p++ = MBEDTLS_RSA_SIGN;
   d64b2:	2201      	movs	r2, #1
   d64b4:	f888 2001 	strb.w	r2, [r8, #1]
    memset( p, 0xFF, nb_pad );
   d64b8:	21ff      	movs	r1, #255	; 0xff
   d64ba:	463a      	mov	r2, r7
   d64bc:	4618      	mov	r0, r3
   d64be:	f010 fd6c 	bl	e6f9a <memset>
   d64c2:	4603      	mov	r3, r0
    p += nb_pad;
    *p++ = 0;
   d64c4:	55c4      	strb	r4, [r0, r7]

    /* Are we signing raw data? */
    if( md_alg == MBEDTLS_MD_NONE )
    {
        memcpy( p, hash, hashlen );
   d64c6:	1ea8      	subs	r0, r5, #2
   d64c8:	4632      	mov	r2, r6
   d64ca:	4649      	mov	r1, r9
   d64cc:	4418      	add	r0, r3
   d64ce:	f010 fd3e 	bl	e6f4e <memcpy>
        mbedtls_platform_zeroize( dst, dst_len );
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }

    return( 0 );
}
   d64d2:	4620      	mov	r0, r4
   d64d4:	b002      	add	sp, #8
   d64d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d64da:	bf00      	nop
   d64dc:	ffffbf80 	.word	0xffffbf80

000d64e0 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
   d64e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
   d64e2:	f100 0508 	add.w	r5, r0, #8
   d64e6:	6847      	ldr	r7, [r0, #4]
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
   d64e8:	4604      	mov	r4, r0
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
   d64ea:	4628      	mov	r0, r5
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
   d64ec:	460e      	mov	r6, r1
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
   d64ee:	f009 ff17 	bl	e0320 <mbedtls_mpi_size>
   d64f2:	4287      	cmp	r7, r0
   d64f4:	d117      	bne.n	d6526 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
   d64f6:	6863      	ldr	r3, [r4, #4]
   d64f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   d64fc:	d813      	bhi.n	d6526 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
   d64fe:	2100      	movs	r1, #0
   d6500:	4628      	mov	r0, r5
   d6502:	f00a f8f2 	bl	e06ea <mbedtls_mpi_cmp_int>
   d6506:	2800      	cmp	r0, #0
   d6508:	dd0d      	ble.n	d6526 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
   d650a:	2100      	movs	r1, #0
   d650c:	4628      	mov	r0, r5
   d650e:	f009 febd 	bl	e028c <mbedtls_mpi_get_bit>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
   d6512:	b140      	cbz	r0, d6526 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
   d6514:	b1ee      	cbz	r6, d6552 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x72>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
   d6516:	f104 052c 	add.w	r5, r4, #44	; 0x2c
   d651a:	2100      	movs	r1, #0
   d651c:	4628      	mov	r0, r5
   d651e:	f00a f8e4 	bl	e06ea <mbedtls_mpi_cmp_int>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
   d6522:	2800      	cmp	r0, #0
   d6524:	dc01      	bgt.n	d652a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x4a>
    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d6526:	481a      	ldr	r0, [pc, #104]	; (d6590 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0xb0>)
   d6528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
   d652a:	2100      	movs	r1, #0
   d652c:	4628      	mov	r0, r5
   d652e:	f009 fead 	bl	e028c <mbedtls_mpi_get_bit>
#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
   d6532:	2800      	cmp	r0, #0
   d6534:	d0f7      	beq.n	d6526 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
   d6536:	f104 0538 	add.w	r5, r4, #56	; 0x38
   d653a:	2100      	movs	r1, #0
   d653c:	4628      	mov	r0, r5
   d653e:	f00a f8d4 	bl	e06ea <mbedtls_mpi_cmp_int>
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
   d6542:	2800      	cmp	r0, #0
   d6544:	ddef      	ble.n	d6526 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
   d6546:	2100      	movs	r1, #0
   d6548:	4628      	mov	r0, r5
   d654a:	f009 fe9f 	bl	e028c <mbedtls_mpi_get_bit>
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
   d654e:	2800      	cmp	r0, #0
   d6550:	d0e9      	beq.n	d6526 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
   d6552:	2100      	movs	r1, #0
   d6554:	f104 0014 	add.w	r0, r4, #20
   d6558:	f00a f8c7 	bl	e06ea <mbedtls_mpi_cmp_int>
   d655c:	2800      	cmp	r0, #0
   d655e:	dde2      	ble.n	d6526 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
   d6560:	b1a6      	cbz	r6, d658c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0xac>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
   d6562:	2100      	movs	r1, #0
   d6564:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d6568:	f00a f8bf 	bl	e06ea <mbedtls_mpi_cmp_int>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
   d656c:	2800      	cmp	r0, #0
   d656e:	ddda      	ble.n	d6526 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
   d6570:	2100      	movs	r1, #0
   d6572:	f104 0050 	add.w	r0, r4, #80	; 0x50
   d6576:	f00a f8b8 	bl	e06ea <mbedtls_mpi_cmp_int>
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
   d657a:	2800      	cmp	r0, #0
   d657c:	ddd3      	ble.n	d6526 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
   d657e:	2100      	movs	r1, #0
   d6580:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   d6584:	f00a f8b1 	bl	e06ea <mbedtls_mpi_cmp_int>
#endif

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
   d6588:	2800      	cmp	r0, #0
   d658a:	ddcc      	ble.n	d6526 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }
#endif

    return( 0 );
   d658c:	2000      	movs	r0, #0
   d658e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6590:	ffffbf80 	.word	0xffffbf80

000d6594 <mbedtls_rsa_import_raw>:
                            unsigned char const *N, size_t N_len,
                            unsigned char const *P, size_t P_len,
                            unsigned char const *Q, size_t Q_len,
                            unsigned char const *D, size_t D_len,
                            unsigned char const *E, size_t E_len )
{
   d6594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6598:	9f09      	ldr	r7, [sp, #36]	; 0x24
   d659a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d659c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   d659e:	4604      	mov	r4, r0
   d65a0:	4698      	mov	r8, r3
    int ret = 0;
    RSA_VALIDATE_RET( ctx != NULL );

    if( N != NULL )
   d65a2:	b149      	cbz	r1, d65b8 <mbedtls_rsa_import_raw+0x24>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
   d65a4:	f100 0908 	add.w	r9, r0, #8
   d65a8:	4648      	mov	r0, r9
   d65aa:	f009 febf 	bl	e032c <mbedtls_mpi_read_binary>
   d65ae:	bb50      	cbnz	r0, d6606 <mbedtls_rsa_import_raw+0x72>
        ctx->len = mbedtls_mpi_size( &ctx->N );
   d65b0:	4648      	mov	r0, r9
   d65b2:	f009 feb5 	bl	e0320 <mbedtls_mpi_size>
   d65b6:	6060      	str	r0, [r4, #4]
    }

    if( P != NULL )
   d65b8:	f1b8 0f00 	cmp.w	r8, #0
   d65bc:	d101      	bne.n	d65c2 <mbedtls_rsa_import_raw+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );

    if( Q != NULL )
   d65be:	b947      	cbnz	r7, d65d2 <mbedtls_rsa_import_raw+0x3e>
   d65c0:	e00e      	b.n	d65e0 <mbedtls_rsa_import_raw+0x4c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
        ctx->len = mbedtls_mpi_size( &ctx->N );
    }

    if( P != NULL )
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
   d65c2:	9a08      	ldr	r2, [sp, #32]
   d65c4:	4641      	mov	r1, r8
   d65c6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d65ca:	f009 feaf 	bl	e032c <mbedtls_mpi_read_binary>
   d65ce:	b9d0      	cbnz	r0, d6606 <mbedtls_rsa_import_raw+0x72>
   d65d0:	e7f5      	b.n	d65be <mbedtls_rsa_import_raw+0x2a>

    if( Q != NULL )
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
   d65d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d65d4:	4639      	mov	r1, r7
   d65d6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d65da:	f009 fea7 	bl	e032c <mbedtls_mpi_read_binary>
   d65de:	b990      	cbnz	r0, d6606 <mbedtls_rsa_import_raw+0x72>

    if( D != NULL )
   d65e0:	b136      	cbz	r6, d65f0 <mbedtls_rsa_import_raw+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
   d65e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   d65e4:	4631      	mov	r1, r6
   d65e6:	f104 0020 	add.w	r0, r4, #32
   d65ea:	f009 fe9f 	bl	e032c <mbedtls_mpi_read_binary>
   d65ee:	b950      	cbnz	r0, d6606 <mbedtls_rsa_import_raw+0x72>

    if( E != NULL )
   d65f0:	b135      	cbz	r5, d6600 <mbedtls_rsa_import_raw+0x6c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );
   d65f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d65f4:	4629      	mov	r1, r5
   d65f6:	f104 0014 	add.w	r0, r4, #20
   d65fa:	f009 fe97 	bl	e032c <mbedtls_mpi_read_binary>

cleanup:

    if( ret != 0 )
   d65fe:	b910      	cbnz	r0, d6606 <mbedtls_rsa_import_raw+0x72>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );

    return( 0 );
   d6600:	2000      	movs	r0, #0
   d6602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );

cleanup:

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
   d6606:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080

    return( 0 );
}
   d660a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000d6610 <mbedtls_rsa_complete>:

    return( 0 );
}

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
   d6610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int have_N, have_P, have_Q, have_D, have_E;
    int n_missing, pq_missing, d_missing, is_pub, is_priv;

    RSA_VALIDATE_RET( ctx != NULL );

    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
   d6614:	f100 0b08 	add.w	fp, r0, #8

    return( 0 );
}

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
   d6618:	b087      	sub	sp, #28
   d661a:	4607      	mov	r7, r0
    int have_N, have_P, have_Q, have_D, have_E;
    int n_missing, pq_missing, d_missing, is_pub, is_priv;

    RSA_VALIDATE_RET( ctx != NULL );

    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
   d661c:	2100      	movs	r1, #0
   d661e:	4658      	mov	r0, fp
   d6620:	f00a f863 	bl	e06ea <mbedtls_mpi_cmp_int>
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
   d6624:	f107 092c 	add.w	r9, r7, #44	; 0x2c
   d6628:	2100      	movs	r1, #0
    int have_N, have_P, have_Q, have_D, have_E;
    int n_missing, pq_missing, d_missing, is_pub, is_priv;

    RSA_VALIDATE_RET( ctx != NULL );

    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
   d662a:	4680      	mov	r8, r0
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
   d662c:	4648      	mov	r0, r9
   d662e:	f00a f85c 	bl	e06ea <mbedtls_mpi_cmp_int>
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
   d6632:	f107 0a38 	add.w	sl, r7, #56	; 0x38
    int n_missing, pq_missing, d_missing, is_pub, is_priv;

    RSA_VALIDATE_RET( ctx != NULL );

    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
   d6636:	9005      	str	r0, [sp, #20]
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
   d6638:	2100      	movs	r1, #0
   d663a:	4650      	mov	r0, sl
   d663c:	f00a f855 	bl	e06ea <mbedtls_mpi_cmp_int>
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
   d6640:	f107 0320 	add.w	r3, r7, #32
   d6644:	2100      	movs	r1, #0

    RSA_VALIDATE_RET( ctx != NULL );

    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
   d6646:	4605      	mov	r5, r0
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
   d6648:	4618      	mov	r0, r3
   d664a:	9302      	str	r3, [sp, #8]
   d664c:	f00a f84d 	bl	e06ea <mbedtls_mpi_cmp_int>
    have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
   d6650:	f107 0314 	add.w	r3, r7, #20
    RSA_VALIDATE_RET( ctx != NULL );

    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
   d6654:	9004      	str	r0, [sp, #16]
    have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
   d6656:	2100      	movs	r1, #0
   d6658:	4618      	mov	r0, r3
   d665a:	9303      	str	r3, [sp, #12]
   d665c:	f00a f845 	bl	e06ea <mbedtls_mpi_cmp_int>
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
   d6660:	9b05      	ldr	r3, [sp, #20]
   d6662:	9a04      	ldr	r2, [sp, #16]
   d6664:	b14b      	cbz	r3, d667a <mbedtls_rsa_complete+0x6a>
   d6666:	b125      	cbz	r5, d6672 <mbedtls_rsa_complete+0x62>
   d6668:	b12a      	cbz	r2, d6676 <mbedtls_rsa_complete+0x66>
   d666a:	1c06      	adds	r6, r0, #0
   d666c:	bf18      	it	ne
   d666e:	2601      	movne	r6, #1
   d6670:	e013      	b.n	d669a <mbedtls_rsa_complete+0x8a>
   d6672:	462e      	mov	r6, r5
   d6674:	e011      	b.n	d669a <mbedtls_rsa_complete+0x8a>
   d6676:	4616      	mov	r6, r2
   d6678:	e00f      	b.n	d669a <mbedtls_rsa_complete+0x8a>
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
   d667a:	f1b8 0f00 	cmp.w	r8, #0
   d667e:	d103      	bne.n	d6688 <mbedtls_rsa_complete+0x78>
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
   d6680:	4644      	mov	r4, r8
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
   d6682:	4646      	mov	r6, r8
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
   d6684:	2200      	movs	r2, #0
   d6686:	e024      	b.n	d66d2 <mbedtls_rsa_complete+0xc2>
     * (2) D and potentially N missing.
     *
     */

    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
   d6688:	b9cd      	cbnz	r5, d66be <mbedtls_rsa_complete+0xae>
   d668a:	b11a      	cbz	r2, d6694 <mbedtls_rsa_complete+0x84>
   d668c:	b9f0      	cbnz	r0, d66cc <mbedtls_rsa_complete+0xbc>
   d668e:	4606      	mov	r6, r0
   d6690:	4604      	mov	r4, r0
   d6692:	e00e      	b.n	d66b2 <mbedtls_rsa_complete+0xa2>
   d6694:	462e      	mov	r6, r5
   d6696:	462c      	mov	r4, r5
   d6698:	e00d      	b.n	d66b6 <mbedtls_rsa_complete+0xa6>
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
   d669a:	b1ad      	cbz	r5, d66c8 <mbedtls_rsa_complete+0xb8>
   d669c:	b992      	cbnz	r2, d66c4 <mbedtls_rsa_complete+0xb4>
   d669e:	1c04      	adds	r4, r0, #0
   d66a0:	bf18      	it	ne
   d66a2:	2401      	movne	r4, #1
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
   d66a4:	f1b8 0f00 	cmp.w	r8, #0
   d66a8:	d0ec      	beq.n	d6684 <mbedtls_rsa_complete+0x74>
   d66aa:	2b00      	cmp	r3, #0
   d66ac:	d1ea      	bne.n	d6684 <mbedtls_rsa_complete+0x74>
   d66ae:	2d00      	cmp	r5, #0
   d66b0:	d1e8      	bne.n	d6684 <mbedtls_rsa_complete+0x74>
   d66b2:	2a00      	cmp	r2, #0
   d66b4:	d1e6      	bne.n	d6684 <mbedtls_rsa_complete+0x74>
   d66b6:	2800      	cmp	r0, #0
   d66b8:	d0e4      	beq.n	d6684 <mbedtls_rsa_complete+0x74>
   d66ba:	2201      	movs	r2, #1
   d66bc:	e009      	b.n	d66d2 <mbedtls_rsa_complete+0xc2>
     *
     */

    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
   d66be:	461c      	mov	r4, r3
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
   d66c0:	461e      	mov	r6, r3
   d66c2:	e7df      	b.n	d6684 <mbedtls_rsa_complete+0x74>
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
   d66c4:	2400      	movs	r4, #0
   d66c6:	e7ed      	b.n	d66a4 <mbedtls_rsa_complete+0x94>
   d66c8:	462c      	mov	r4, r5
   d66ca:	e7db      	b.n	d6684 <mbedtls_rsa_complete+0x74>
     * (2) D and potentially N missing.
     *
     */

    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
   d66cc:	2601      	movs	r6, #1
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
   d66ce:	462c      	mov	r4, r5
   d66d0:	e002      	b.n	d66d8 <mbedtls_rsa_complete+0xc8>
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;

    /* These three alternatives are mutually exclusive */
    is_priv = n_missing || pq_missing || d_missing;
   d66d2:	2e00      	cmp	r6, #0
   d66d4:	d03d      	beq.n	d6752 <mbedtls_rsa_complete+0x142>
   d66d6:	2600      	movs	r6, #0
   d66d8:	9404      	str	r4, [sp, #16]
   d66da:	2401      	movs	r4, #1

    /*
     * Step 1: Deduce N if P, Q are provided.
     */

    if( !have_N && have_P && have_Q )
   d66dc:	f1b8 0f00 	cmp.w	r8, #0
   d66e0:	d10b      	bne.n	d66fa <mbedtls_rsa_complete+0xea>
   d66e2:	b153      	cbz	r3, d66fa <mbedtls_rsa_complete+0xea>
   d66e4:	b14d      	cbz	r5, d66fa <mbedtls_rsa_complete+0xea>
    {
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
   d66e6:	4652      	mov	r2, sl
   d66e8:	4649      	mov	r1, r9
   d66ea:	4658      	mov	r0, fp
   d66ec:	f00a f91c 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d66f0:	bb28      	cbnz	r0, d673e <mbedtls_rsa_complete+0x12e>
                                         &ctx->Q ) ) != 0 )
        {
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
        }

        ctx->len = mbedtls_mpi_size( &ctx->N );
   d66f2:	4658      	mov	r0, fp
   d66f4:	f009 fe14 	bl	e0320 <mbedtls_mpi_size>
   d66f8:	6078      	str	r0, [r7, #4]

    /*
     * Step 2: Deduce and verify all remaining core parameters.
     */

    if( pq_missing )
   d66fa:	b146      	cbz	r6, d670e <mbedtls_rsa_complete+0xfe>
    {
        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,
                                         &ctx->P, &ctx->Q );
   d66fc:	f8cd a000 	str.w	sl, [sp]
   d6700:	464b      	mov	r3, r9
   d6702:	9a02      	ldr	r2, [sp, #8]
   d6704:	9903      	ldr	r1, [sp, #12]
   d6706:	4658      	mov	r0, fp
   d6708:	f00d f920 	bl	e394c <mbedtls_rsa_deduce_primes>
   d670c:	e007      	b.n	d671e <mbedtls_rsa_complete+0x10e>
        if( ret != 0 )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );

    }
    else if( d_missing )
   d670e:	9b04      	ldr	r3, [sp, #16]
   d6710:	b133      	cbz	r3, d6720 <mbedtls_rsa_complete+0x110>
    {
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
   d6712:	9b02      	ldr	r3, [sp, #8]
   d6714:	9a03      	ldr	r2, [sp, #12]
   d6716:	4651      	mov	r1, sl
   d6718:	4648      	mov	r0, r9
   d671a:	f00d fa13 	bl	e3b44 <mbedtls_rsa_deduce_private_exponent>
   d671e:	b970      	cbnz	r0, d673e <mbedtls_rsa_complete+0x12e>
     * Step 3: Deduce all additional parameters specific
     *         to our current RSA implementation.
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
   d6720:	b184      	cbz	r4, d6744 <mbedtls_rsa_complete+0x134>
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
   d6722:	f107 035c 	add.w	r3, r7, #92	; 0x5c
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
   d6726:	9301      	str	r3, [sp, #4]
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
   d6728:	f107 0350 	add.w	r3, r7, #80	; 0x50
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
   d672c:	9300      	str	r3, [sp, #0]
   d672e:	9a02      	ldr	r2, [sp, #8]
   d6730:	f107 0344 	add.w	r3, r7, #68	; 0x44
   d6734:	4651      	mov	r1, sl
   d6736:	4648      	mov	r0, r9
   d6738:	f00d fba8 	bl	e3e8c <mbedtls_rsa_deduce_crt>
        if( ret != 0 )
   d673c:	b110      	cbz	r0, d6744 <mbedtls_rsa_complete+0x134>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
   d673e:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
   d6742:	e00c      	b.n	d675e <mbedtls_rsa_complete+0x14e>

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
   d6744:	4621      	mov	r1, r4
   d6746:	4638      	mov	r0, r7
}
   d6748:	b007      	add	sp, #28
   d674a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
   d674e:	f7ff bec7 	b.w	d64e0 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;

    /* These three alternatives are mutually exclusive */
    is_priv = n_missing || pq_missing || d_missing;

    if( !is_priv && !is_pub )
   d6752:	b90c      	cbnz	r4, d6758 <mbedtls_rsa_complete+0x148>
   d6754:	b112      	cbz	r2, d675c <mbedtls_rsa_complete+0x14c>
   d6756:	4626      	mov	r6, r4
   d6758:	9404      	str	r4, [sp, #16]
   d675a:	e7bf      	b.n	d66dc <mbedtls_rsa_complete+0xcc>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d675c:	4801      	ldr	r0, [pc, #4]	; (d6764 <mbedtls_rsa_complete+0x154>)
    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
}
   d675e:	b007      	add	sp, #28
   d6760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6764:	ffffbf80 	.word	0xffffbf80

000d6768 <mbedtls_rsa_init>:
 * Initialize an RSA context
 */
void mbedtls_rsa_init( mbedtls_rsa_context *ctx,
               int padding,
               int hash_id )
{
   d6768:	b570      	push	{r4, r5, r6, lr}
   d676a:	4604      	mov	r4, r0
   d676c:	460e      	mov	r6, r1
   d676e:	4615      	mov	r5, r2
    RSA_VALIDATE( ctx != NULL );
    RSA_VALIDATE( padding == MBEDTLS_RSA_PKCS_V15 ||
                  padding == MBEDTLS_RSA_PKCS_V21 );

    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
   d6770:	2100      	movs	r1, #0
   d6772:	22ac      	movs	r2, #172	; 0xac
   d6774:	f010 fc11 	bl	e6f9a <memset>
{
    RSA_VALIDATE( ctx != NULL );
    RSA_VALIDATE( padding == MBEDTLS_RSA_PKCS_V15 ||
                  padding == MBEDTLS_RSA_PKCS_V21 );

    ctx->padding = padding;
   d6778:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    ctx->hash_id = hash_id;
   d677c:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
   d6780:	bd70      	pop	{r4, r5, r6, pc}

000d6782 <mbedtls_rsa_get_len>:
 */

size_t mbedtls_rsa_get_len( const mbedtls_rsa_context *ctx )
{
    return( ctx->len );
}
   d6782:	6840      	ldr	r0, [r0, #4]
   d6784:	4770      	bx	lr
	...

000d6788 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
   d6788:	b570      	push	{r4, r5, r6, lr}
    RSA_VALIDATE_RET( ctx != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
   d678a:	2100      	movs	r1, #0

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
   d678c:	4604      	mov	r4, r0
    RSA_VALIDATE_RET( ctx != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
   d678e:	f7ff fea7 	bl	d64e0 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
   d6792:	4605      	mov	r5, r0
   d6794:	b9b8      	cbnz	r0, d67c6 <mbedtls_rsa_check_pubkey+0x3e>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
   d6796:	f104 0608 	add.w	r6, r4, #8
   d679a:	4630      	mov	r0, r6
   d679c:	f009 fda0 	bl	e02e0 <mbedtls_mpi_bitlen>
   d67a0:	287f      	cmp	r0, #127	; 0x7f
   d67a2:	d910      	bls.n	d67c6 <mbedtls_rsa_check_pubkey+0x3e>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
   d67a4:	3414      	adds	r4, #20
   d67a6:	4629      	mov	r1, r5
   d67a8:	4620      	mov	r0, r4
   d67aa:	f009 fd6f 	bl	e028c <mbedtls_mpi_get_bit>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
   d67ae:	b150      	cbz	r0, d67c6 <mbedtls_rsa_check_pubkey+0x3e>
   d67b0:	4620      	mov	r0, r4
   d67b2:	f009 fd95 	bl	e02e0 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
   d67b6:	2801      	cmp	r0, #1
   d67b8:	d905      	bls.n	d67c6 <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
   d67ba:	4631      	mov	r1, r6
   d67bc:	4620      	mov	r0, r4
   d67be:	f009 ff4f 	bl	e0660 <mbedtls_mpi_cmp_mpi>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
   d67c2:	2800      	cmp	r0, #0
   d67c4:	db00      	blt.n	d67c8 <mbedtls_rsa_check_pubkey+0x40>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
   d67c6:	4d01      	ldr	r5, [pc, #4]	; (d67cc <mbedtls_rsa_check_pubkey+0x44>)
    }

    return( 0 );
}
   d67c8:	4628      	mov	r0, r5
   d67ca:	bd70      	pop	{r4, r5, r6, pc}
   d67cc:	ffffbe00 	.word	0xffffbe00

000d67d0 <mbedtls_rsa_check_privkey>:

/*
 * Check for the consistency of all fields in an RSA private key context
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
   d67d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d67d2:	b085      	sub	sp, #20
   d67d4:	4604      	mov	r4, r0
    RSA_VALIDATE_RET( ctx != NULL );

    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
   d67d6:	f7ff ffd7 	bl	d6788 <mbedtls_rsa_check_pubkey>
   d67da:	bb28      	cbnz	r0, d6828 <mbedtls_rsa_check_privkey+0x58>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
   d67dc:	2101      	movs	r1, #1
   d67de:	4620      	mov	r0, r4
   d67e0:	f7ff fe7e 	bl	d64e0 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
    RSA_VALIDATE_RET( ctx != NULL );

    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
   d67e4:	bb00      	cbnz	r0, d6828 <mbedtls_rsa_check_privkey+0x58>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,
   d67e6:	f104 0314 	add.w	r3, r4, #20
   d67ea:	f104 052c 	add.w	r5, r4, #44	; 0x2c
   d67ee:	f104 0638 	add.w	r6, r4, #56	; 0x38
   d67f2:	f104 0720 	add.w	r7, r4, #32
   d67f6:	9002      	str	r0, [sp, #8]
   d67f8:	9001      	str	r0, [sp, #4]
   d67fa:	9300      	str	r3, [sp, #0]
   d67fc:	4632      	mov	r2, r6
   d67fe:	463b      	mov	r3, r7
   d6800:	4629      	mov	r1, r5
   d6802:	f104 0008 	add.w	r0, r4, #8
   d6806:	f00d fa7b 	bl	e3d00 <mbedtls_rsa_validate_params>
   d680a:	b968      	cbnz	r0, d6828 <mbedtls_rsa_check_privkey+0x58>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,
   d680c:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   d6810:	9301      	str	r3, [sp, #4]
   d6812:	f104 0350 	add.w	r3, r4, #80	; 0x50
   d6816:	9300      	str	r3, [sp, #0]
   d6818:	463a      	mov	r2, r7
   d681a:	f104 0344 	add.w	r3, r4, #68	; 0x44
   d681e:	4631      	mov	r1, r6
   d6820:	4628      	mov	r0, r5
   d6822:	f00d f9ed 	bl	e3c00 <mbedtls_rsa_validate_crt>
   d6826:	b100      	cbz	r0, d682a <mbedtls_rsa_check_privkey+0x5a>
    RSA_VALIDATE_RET( ctx != NULL );

    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
   d6828:	4801      	ldr	r0, [pc, #4]	; (d6830 <mbedtls_rsa_check_privkey+0x60>)
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }
#endif

    return( 0 );
}
   d682a:	b005      	add	sp, #20
   d682c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d682e:	bf00      	nop
   d6830:	ffffbe00 	.word	0xffffbe00

000d6834 <mbedtls_rsa_check_pub_priv>:
/*
 * Check if contexts holding a public and private key match
 */
int mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,
                                const mbedtls_rsa_context *prv )
{
   d6834:	b538      	push	{r3, r4, r5, lr}
   d6836:	4605      	mov	r5, r0
   d6838:	460c      	mov	r4, r1
    RSA_VALIDATE_RET( pub != NULL );
    RSA_VALIDATE_RET( prv != NULL );

    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
   d683a:	f7ff ffa5 	bl	d6788 <mbedtls_rsa_check_pubkey>
   d683e:	b950      	cbnz	r0, d6856 <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
   d6840:	4620      	mov	r0, r4
   d6842:	f7ff ffc5 	bl	d67d0 <mbedtls_rsa_check_privkey>
                                const mbedtls_rsa_context *prv )
{
    RSA_VALIDATE_RET( pub != NULL );
    RSA_VALIDATE_RET( prv != NULL );

    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
   d6846:	b930      	cbnz	r0, d6856 <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
   d6848:	f104 0108 	add.w	r1, r4, #8
   d684c:	f105 0008 	add.w	r0, r5, #8
   d6850:	f009 ff06 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   d6854:	b108      	cbz	r0, d685a <mbedtls_rsa_check_pub_priv+0x26>
    RSA_VALIDATE_RET( prv != NULL );

    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
   d6856:	4805      	ldr	r0, [pc, #20]	; (d686c <mbedtls_rsa_check_pub_priv+0x38>)
   d6858:	bd38      	pop	{r3, r4, r5, pc}
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
   d685a:	f104 0114 	add.w	r1, r4, #20
   d685e:	f105 0014 	add.w	r0, r5, #20
   d6862:	f009 fefd 	bl	e0660 <mbedtls_mpi_cmp_mpi>
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
   d6866:	2800      	cmp	r0, #0
   d6868:	d1f5      	bne.n	d6856 <mbedtls_rsa_check_pub_priv+0x22>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    return( 0 );
}
   d686a:	bd38      	pop	{r3, r4, r5, pc}
   d686c:	ffffbe00 	.word	0xffffbe00

000d6870 <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
   d6870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6874:	460c      	mov	r4, r1
   d6876:	b086      	sub	sp, #24
    mbedtls_mpi T;
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
   d6878:	2100      	movs	r1, #0
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
   d687a:	4605      	mov	r5, r0
   d687c:	4617      	mov	r7, r2
    mbedtls_mpi T;
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
   d687e:	f7ff fe2f 	bl	d64e0 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
   d6882:	4606      	mov	r6, r0
   d6884:	bb78      	cbnz	r0, d68e6 <mbedtls_rsa_public+0x76>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
   d6886:	a803      	add	r0, sp, #12
   d6888:	f009 fc03 	bl	e0092 <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
   d688c:	4621      	mov	r1, r4
   d688e:	686a      	ldr	r2, [r5, #4]
   d6890:	a803      	add	r0, sp, #12
   d6892:	f009 fd4b 	bl	e032c <mbedtls_mpi_read_binary>
   d6896:	4604      	mov	r4, r0
   d6898:	b9f0      	cbnz	r0, d68d8 <mbedtls_rsa_public+0x68>

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
   d689a:	f105 0408 	add.w	r4, r5, #8
   d689e:	4621      	mov	r1, r4
   d68a0:	a803      	add	r0, sp, #12
   d68a2:	f009 fedd 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   d68a6:	2800      	cmp	r0, #0
   d68a8:	da14      	bge.n	d68d4 <mbedtls_rsa_public+0x64>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
   d68aa:	f105 0368 	add.w	r3, r5, #104	; 0x68
   d68ae:	a903      	add	r1, sp, #12
   d68b0:	9300      	str	r3, [sp, #0]
   d68b2:	f105 0214 	add.w	r2, r5, #20
   d68b6:	4623      	mov	r3, r4
   d68b8:	4608      	mov	r0, r1
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
   d68ba:	f8d5 8004 	ldr.w	r8, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
   d68be:	f00a faa1 	bl	e0e04 <mbedtls_mpi_exp_mod>
   d68c2:	4604      	mov	r4, r0
   d68c4:	b940      	cbnz	r0, d68d8 <mbedtls_rsa_public+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
   d68c6:	4642      	mov	r2, r8
   d68c8:	4639      	mov	r1, r7
   d68ca:	a803      	add	r0, sp, #12
   d68cc:	f009 fd65 	bl	e039a <mbedtls_mpi_write_binary>
   d68d0:	4604      	mov	r4, r0
   d68d2:	e001      	b.n	d68d8 <mbedtls_rsa_public+0x68>

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
   d68d4:	f06f 0403 	mvn.w	r4, #3
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
   d68d8:	a803      	add	r0, sp, #12
   d68da:	f009 fbe0 	bl	e009e <mbedtls_mpi_free>

    if( ret != 0 )
   d68de:	b11c      	cbz	r4, d68e8 <mbedtls_rsa_public+0x78>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
   d68e0:	f5a4 4685 	sub.w	r6, r4, #17024	; 0x4280
   d68e4:	e000      	b.n	d68e8 <mbedtls_rsa_public+0x78>
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d68e6:	4e02      	ldr	r6, [pc, #8]	; (d68f0 <mbedtls_rsa_public+0x80>)

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );

    return( 0 );
}
   d68e8:	4630      	mov	r0, r6
   d68ea:	b006      	add	sp, #24
   d68ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d68f0:	ffffbf80 	.word	0xffffbf80

000d68f4 <mbedtls_rsa_private>:
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
   d68f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d68f8:	460e      	mov	r6, r1
   d68fa:	b0a5      	sub	sp, #148	; 0x94

    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input  != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 1             /* private key checks */,
   d68fc:	2101      	movs	r1, #1
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
   d68fe:	4604      	mov	r4, r0
   d6900:	4692      	mov	sl, r2
   d6902:	461d      	mov	r5, r3

    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input  != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 1             /* private key checks */,
   d6904:	f7ff fdec 	bl	d64e0 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
   d6908:	9003      	str	r0, [sp, #12]
   d690a:	2800      	cmp	r0, #0
   d690c:	f040 819b 	bne.w	d6c46 <mbedtls_rsa_private+0x352>
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    /* MPI Initialization */
    mbedtls_mpi_init( &T );
   d6910:	a806      	add	r0, sp, #24
   d6912:	f009 fbbe 	bl	e0092 <mbedtls_mpi_init>

    mbedtls_mpi_init( &P1 );
   d6916:	a809      	add	r0, sp, #36	; 0x24
   d6918:	f009 fbbb 	bl	e0092 <mbedtls_mpi_init>
    mbedtls_mpi_init( &Q1 );
   d691c:	a80c      	add	r0, sp, #48	; 0x30
   d691e:	f009 fbb8 	bl	e0092 <mbedtls_mpi_init>
    mbedtls_mpi_init( &R );
   d6922:	a80f      	add	r0, sp, #60	; 0x3c
   d6924:	f009 fbb5 	bl	e0092 <mbedtls_mpi_init>

    if( f_rng != NULL )
   d6928:	b12e      	cbz	r6, d6936 <mbedtls_rsa_private+0x42>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_init( &D_blind );
#else
        mbedtls_mpi_init( &DP_blind );
   d692a:	a818      	add	r0, sp, #96	; 0x60
   d692c:	f009 fbb1 	bl	e0092 <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
   d6930:	a81b      	add	r0, sp, #108	; 0x6c
   d6932:	f009 fbae 	bl	e0092 <mbedtls_mpi_init>
#endif
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
   d6936:	a812      	add	r0, sp, #72	; 0x48
   d6938:	f009 fbab 	bl	e0092 <mbedtls_mpi_init>
   d693c:	a815      	add	r0, sp, #84	; 0x54
   d693e:	f009 fba8 	bl	e0092 <mbedtls_mpi_init>
#endif

    mbedtls_mpi_init( &I );
   d6942:	a81e      	add	r0, sp, #120	; 0x78
   d6944:	f009 fba5 	bl	e0092 <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
   d6948:	a821      	add	r0, sp, #132	; 0x84
   d694a:	f009 fba2 	bl	e0092 <mbedtls_mpi_init>

    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
   d694e:	6862      	ldr	r2, [r4, #4]
   d6950:	4629      	mov	r1, r5
   d6952:	a806      	add	r0, sp, #24
   d6954:	f009 fcea 	bl	e032c <mbedtls_mpi_read_binary>
   d6958:	4607      	mov	r7, r0
   d695a:	2800      	cmp	r0, #0
   d695c:	f040 8150 	bne.w	d6c00 <mbedtls_rsa_private+0x30c>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
   d6960:	f104 0508 	add.w	r5, r4, #8
   d6964:	4629      	mov	r1, r5
   d6966:	a806      	add	r0, sp, #24
   d6968:	f009 fe7a 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   d696c:	2800      	cmp	r0, #0
   d696e:	f280 8143 	bge.w	d6bf8 <mbedtls_rsa_private+0x304>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
   d6972:	a906      	add	r1, sp, #24
   d6974:	a81e      	add	r0, sp, #120	; 0x78
   d6976:	f009 fc0c 	bl	e0192 <mbedtls_mpi_copy>
   d697a:	4607      	mov	r7, r0
   d697c:	2800      	cmp	r0, #0
   d697e:	f040 813f 	bne.w	d6c00 <mbedtls_rsa_private+0x30c>
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
    mbedtls_mpi *DQ = &ctx->DQ;
   d6982:	f104 0350 	add.w	r3, r4, #80	; 0x50
     * the mod p resp. mod q computation (if used). */
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
   d6986:	f104 0944 	add.w	r9, r4, #68	; 0x44
    mbedtls_mpi *DQ = &ctx->DQ;
   d698a:	9304      	str	r3, [sp, #16]
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );

    if( f_rng != NULL )
   d698c:	2e00      	cmp	r6, #0
   d698e:	f000 80c5 	beq.w	d6b1c <mbedtls_rsa_private+0x228>
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    int ret, count = 0;

    if( ctx->Vf.p != NULL )
   d6992:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   d6996:	b323      	cbz	r3, d69e2 <mbedtls_rsa_private+0xee>
    {
        /* We already have blinding values, just update them by squaring */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
   d6998:	f104 088c 	add.w	r8, r4, #140	; 0x8c
   d699c:	4642      	mov	r2, r8
   d699e:	4641      	mov	r1, r8
   d69a0:	4640      	mov	r0, r8
   d69a2:	f009 ffc1 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d69a6:	4607      	mov	r7, r0
   d69a8:	2800      	cmp	r0, #0
   d69aa:	f040 8129 	bne.w	d6c00 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
   d69ae:	462a      	mov	r2, r5
   d69b0:	4641      	mov	r1, r8
   d69b2:	4640      	mov	r0, r8
   d69b4:	f00a f9f4 	bl	e0da0 <mbedtls_mpi_mod_mpi>
   d69b8:	4607      	mov	r7, r0
   d69ba:	2800      	cmp	r0, #0
   d69bc:	f040 8120 	bne.w	d6c00 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
   d69c0:	f104 0898 	add.w	r8, r4, #152	; 0x98
   d69c4:	4642      	mov	r2, r8
   d69c6:	4641      	mov	r1, r8
   d69c8:	4640      	mov	r0, r8
   d69ca:	f009 ffad 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d69ce:	4607      	mov	r7, r0
   d69d0:	2800      	cmp	r0, #0
   d69d2:	f040 8115 	bne.w	d6c00 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
   d69d6:	462a      	mov	r2, r5
   d69d8:	4641      	mov	r1, r8
   d69da:	4640      	mov	r0, r8
   d69dc:	f00a f9e0 	bl	e0da0 <mbedtls_mpi_mod_mpi>
   d69e0:	e037      	b.n	d6a52 <mbedtls_rsa_private+0x15e>
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    int ret, count = 0;

    if( ctx->Vf.p != NULL )
   d69e2:	230c      	movs	r3, #12
   d69e4:	9305      	str	r3, [sp, #20]
    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
            return( MBEDTLS_ERR_RSA_RNG_FAILED );

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
   d69e6:	f104 0b98 	add.w	fp, r4, #152	; 0x98
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
   d69ea:	f104 088c 	add.w	r8, r4, #140	; 0x8c
        goto cleanup;
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
   d69ee:	9b05      	ldr	r3, [sp, #20]
   d69f0:	3b01      	subs	r3, #1
   d69f2:	9305      	str	r3, [sp, #20]
   d69f4:	f000 812a 	beq.w	d6c4c <mbedtls_rsa_private+0x358>
            return( MBEDTLS_ERR_RSA_RNG_FAILED );

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
   d69f8:	6861      	ldr	r1, [r4, #4]
   d69fa:	4653      	mov	r3, sl
   d69fc:	4632      	mov	r2, r6
   d69fe:	3901      	subs	r1, #1
   d6a00:	4658      	mov	r0, fp
   d6a02:	f00a fca3 	bl	e134c <mbedtls_mpi_fill_random>
   d6a06:	4607      	mov	r7, r0
   d6a08:	2800      	cmp	r0, #0
   d6a0a:	f040 80f9 	bne.w	d6c00 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
   d6a0e:	462a      	mov	r2, r5
   d6a10:	4659      	mov	r1, fp
   d6a12:	4640      	mov	r0, r8
   d6a14:	f00a fc15 	bl	e1242 <mbedtls_mpi_gcd>
   d6a18:	4607      	mov	r7, r0
   d6a1a:	2800      	cmp	r0, #0
   d6a1c:	f040 80f0 	bne.w	d6c00 <mbedtls_rsa_private+0x30c>
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
   d6a20:	2101      	movs	r1, #1
   d6a22:	4640      	mov	r0, r8
   d6a24:	f009 fe61 	bl	e06ea <mbedtls_mpi_cmp_int>

        goto cleanup;
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
   d6a28:	2800      	cmp	r0, #0
   d6a2a:	d1e0      	bne.n	d69ee <mbedtls_rsa_private+0xfa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );

    /* Blinding value: Vi =  Vf^(-e) mod N */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
   d6a2c:	462a      	mov	r2, r5
   d6a2e:	4659      	mov	r1, fp
   d6a30:	4640      	mov	r0, r8
   d6a32:	f00a fcbf 	bl	e13b4 <mbedtls_mpi_inv_mod>
   d6a36:	4607      	mov	r7, r0
   d6a38:	2800      	cmp	r0, #0
   d6a3a:	f040 80e1 	bne.w	d6c00 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
   d6a3e:	f104 0368 	add.w	r3, r4, #104	; 0x68
   d6a42:	9300      	str	r3, [sp, #0]
   d6a44:	f104 0214 	add.w	r2, r4, #20
   d6a48:	462b      	mov	r3, r5
   d6a4a:	4641      	mov	r1, r8
   d6a4c:	4640      	mov	r0, r8
   d6a4e:	f00a f9d9 	bl	e0e04 <mbedtls_mpi_exp_mod>
   d6a52:	4607      	mov	r7, r0
    {
        /*
         * Blinding
         * T = T * Vi mod N
         */
        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
   d6a54:	2800      	cmp	r0, #0
   d6a56:	f040 80d3 	bne.w	d6c00 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
   d6a5a:	a906      	add	r1, sp, #24
   d6a5c:	f104 028c 	add.w	r2, r4, #140	; 0x8c
   d6a60:	4608      	mov	r0, r1
   d6a62:	f009 ff61 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d6a66:	4607      	mov	r7, r0
   d6a68:	2800      	cmp	r0, #0
   d6a6a:	f040 80c9 	bne.w	d6c00 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
   d6a6e:	a906      	add	r1, sp, #24
   d6a70:	462a      	mov	r2, r5
   d6a72:	4608      	mov	r0, r1
   d6a74:	f00a f994 	bl	e0da0 <mbedtls_mpi_mod_mpi>
   d6a78:	4607      	mov	r7, r0
   d6a7a:	2800      	cmp	r0, #0
   d6a7c:	f040 80c0 	bne.w	d6c00 <mbedtls_rsa_private+0x30c>

        /*
         * Exponent blinding
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
   d6a80:	2201      	movs	r2, #1
   d6a82:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   d6a86:	a809      	add	r0, sp, #36	; 0x24
   d6a88:	f009 ff38 	bl	e08fc <mbedtls_mpi_sub_int>
   d6a8c:	4607      	mov	r7, r0
   d6a8e:	2800      	cmp	r0, #0
   d6a90:	f040 80b6 	bne.w	d6c00 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
   d6a94:	2201      	movs	r2, #1
   d6a96:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d6a9a:	a80c      	add	r0, sp, #48	; 0x30
   d6a9c:	f009 ff2e 	bl	e08fc <mbedtls_mpi_sub_int>
   d6aa0:	4607      	mov	r7, r0
   d6aa2:	2800      	cmp	r0, #0
   d6aa4:	f040 80ac 	bne.w	d6c00 <mbedtls_rsa_private+0x30c>
        D = &D_blind;
#else
        /*
         * DP_blind = ( P - 1 ) * R + DP
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
   d6aa8:	4653      	mov	r3, sl
   d6aaa:	4632      	mov	r2, r6
   d6aac:	211c      	movs	r1, #28
   d6aae:	a80f      	add	r0, sp, #60	; 0x3c
   d6ab0:	f00a fc4c 	bl	e134c <mbedtls_mpi_fill_random>
   d6ab4:	4607      	mov	r7, r0
   d6ab6:	2800      	cmp	r0, #0
   d6ab8:	f040 80a2 	bne.w	d6c00 <mbedtls_rsa_private+0x30c>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
   d6abc:	aa0f      	add	r2, sp, #60	; 0x3c
   d6abe:	a909      	add	r1, sp, #36	; 0x24
   d6ac0:	a818      	add	r0, sp, #96	; 0x60
   d6ac2:	f009 ff31 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d6ac6:	4607      	mov	r7, r0
   d6ac8:	2800      	cmp	r0, #0
   d6aca:	f040 8099 	bne.w	d6c00 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
   d6ace:	a918      	add	r1, sp, #96	; 0x60
   d6ad0:	464a      	mov	r2, r9
   d6ad2:	4608      	mov	r0, r1
   d6ad4:	f009 feb9 	bl	e084a <mbedtls_mpi_add_mpi>
   d6ad8:	4607      	mov	r7, r0
   d6ada:	2800      	cmp	r0, #0
   d6adc:	f040 8090 	bne.w	d6c00 <mbedtls_rsa_private+0x30c>
        DP = &DP_blind;

        /*
         * DQ_blind = ( Q - 1 ) * R + DQ
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
   d6ae0:	4653      	mov	r3, sl
   d6ae2:	4632      	mov	r2, r6
   d6ae4:	211c      	movs	r1, #28
   d6ae6:	a80f      	add	r0, sp, #60	; 0x3c
   d6ae8:	f00a fc30 	bl	e134c <mbedtls_mpi_fill_random>
   d6aec:	4607      	mov	r7, r0
   d6aee:	2800      	cmp	r0, #0
   d6af0:	f040 8086 	bne.w	d6c00 <mbedtls_rsa_private+0x30c>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
   d6af4:	aa0f      	add	r2, sp, #60	; 0x3c
   d6af6:	a90c      	add	r1, sp, #48	; 0x30
   d6af8:	a81b      	add	r0, sp, #108	; 0x6c
   d6afa:	f009 ff15 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d6afe:	4607      	mov	r7, r0
   d6b00:	2800      	cmp	r0, #0
   d6b02:	d17d      	bne.n	d6c00 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
   d6b04:	a91b      	add	r1, sp, #108	; 0x6c
   d6b06:	9a04      	ldr	r2, [sp, #16]
   d6b08:	4608      	mov	r0, r1
   d6b0a:	f009 fe9e 	bl	e084a <mbedtls_mpi_add_mpi>
   d6b0e:	4607      	mov	r7, r0
   d6b10:	2800      	cmp	r0, #0
   d6b12:	d175      	bne.n	d6c00 <mbedtls_rsa_private+0x30c>
                    &ctx->DQ ) );

        DQ = &DQ_blind;
   d6b14:	ab1b      	add	r3, sp, #108	; 0x6c
   d6b16:	9304      	str	r3, [sp, #16]
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
                    &ctx->DP ) );

        DP = &DP_blind;
   d6b18:	f10d 0960 	add.w	r9, sp, #96	; 0x60
     *
     * TP = input ^ dP mod P
     * TQ = input ^ dQ mod Q
     */

    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
   d6b1c:	f104 0374 	add.w	r3, r4, #116	; 0x74
   d6b20:	f104 082c 	add.w	r8, r4, #44	; 0x2c
   d6b24:	9300      	str	r3, [sp, #0]
   d6b26:	464a      	mov	r2, r9
   d6b28:	4643      	mov	r3, r8
   d6b2a:	a906      	add	r1, sp, #24
   d6b2c:	a812      	add	r0, sp, #72	; 0x48
   d6b2e:	f00a f969 	bl	e0e04 <mbedtls_mpi_exp_mod>
   d6b32:	4607      	mov	r7, r0
   d6b34:	2800      	cmp	r0, #0
   d6b36:	d163      	bne.n	d6c00 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
   d6b38:	f104 0380 	add.w	r3, r4, #128	; 0x80
   d6b3c:	f104 0938 	add.w	r9, r4, #56	; 0x38
   d6b40:	9300      	str	r3, [sp, #0]
   d6b42:	9a04      	ldr	r2, [sp, #16]
   d6b44:	464b      	mov	r3, r9
   d6b46:	a906      	add	r1, sp, #24
   d6b48:	a815      	add	r0, sp, #84	; 0x54
   d6b4a:	f00a f95b 	bl	e0e04 <mbedtls_mpi_exp_mod>
   d6b4e:	4607      	mov	r7, r0
   d6b50:	2800      	cmp	r0, #0
   d6b52:	d155      	bne.n	d6c00 <mbedtls_rsa_private+0x30c>

    /*
     * T = (TP - TQ) * (Q^-1 mod P) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
   d6b54:	aa15      	add	r2, sp, #84	; 0x54
   d6b56:	a912      	add	r1, sp, #72	; 0x48
   d6b58:	a806      	add	r0, sp, #24
   d6b5a:	f009 fe97 	bl	e088c <mbedtls_mpi_sub_mpi>
   d6b5e:	4607      	mov	r7, r0
   d6b60:	2800      	cmp	r0, #0
   d6b62:	d14d      	bne.n	d6c00 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
   d6b64:	f104 025c 	add.w	r2, r4, #92	; 0x5c
   d6b68:	a906      	add	r1, sp, #24
   d6b6a:	a812      	add	r0, sp, #72	; 0x48
   d6b6c:	f009 fedc 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d6b70:	4607      	mov	r7, r0
   d6b72:	2800      	cmp	r0, #0
   d6b74:	d144      	bne.n	d6c00 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
   d6b76:	4642      	mov	r2, r8
   d6b78:	a912      	add	r1, sp, #72	; 0x48
   d6b7a:	a806      	add	r0, sp, #24
   d6b7c:	f00a f910 	bl	e0da0 <mbedtls_mpi_mod_mpi>
   d6b80:	4607      	mov	r7, r0
   d6b82:	2800      	cmp	r0, #0
   d6b84:	d13c      	bne.n	d6c00 <mbedtls_rsa_private+0x30c>

    /*
     * T = TQ + T * Q
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
   d6b86:	464a      	mov	r2, r9
   d6b88:	a906      	add	r1, sp, #24
   d6b8a:	a812      	add	r0, sp, #72	; 0x48
   d6b8c:	f009 fecc 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d6b90:	4607      	mov	r7, r0
   d6b92:	2800      	cmp	r0, #0
   d6b94:	d134      	bne.n	d6c00 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
   d6b96:	aa12      	add	r2, sp, #72	; 0x48
   d6b98:	a915      	add	r1, sp, #84	; 0x54
   d6b9a:	a806      	add	r0, sp, #24
   d6b9c:	f009 fe55 	bl	e084a <mbedtls_mpi_add_mpi>
   d6ba0:	4607      	mov	r7, r0
   d6ba2:	bb68      	cbnz	r0, d6c00 <mbedtls_rsa_private+0x30c>
#endif /* MBEDTLS_RSA_NO_CRT */

    if( f_rng != NULL )
   d6ba4:	b966      	cbnz	r6, d6bc0 <mbedtls_rsa_private+0x2cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
   d6ba6:	f104 0368 	add.w	r3, r4, #104	; 0x68
   d6baa:	9300      	str	r3, [sp, #0]
   d6bac:	f104 0214 	add.w	r2, r4, #20
   d6bb0:	462b      	mov	r3, r5
   d6bb2:	a906      	add	r1, sp, #24
   d6bb4:	a821      	add	r0, sp, #132	; 0x84
   d6bb6:	f00a f925 	bl	e0e04 <mbedtls_mpi_exp_mod>
   d6bba:	4607      	mov	r7, r0
   d6bbc:	bb00      	cbnz	r0, d6c00 <mbedtls_rsa_private+0x30c>
   d6bbe:	e00f      	b.n	d6be0 <mbedtls_rsa_private+0x2ec>
    {
        /*
         * Unblind
         * T = T * Vf mod N
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
   d6bc0:	a906      	add	r1, sp, #24
   d6bc2:	f104 0298 	add.w	r2, r4, #152	; 0x98
   d6bc6:	4608      	mov	r0, r1
   d6bc8:	f009 feae 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d6bcc:	4607      	mov	r7, r0
   d6bce:	b9b8      	cbnz	r0, d6c00 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
   d6bd0:	a906      	add	r1, sp, #24
   d6bd2:	462a      	mov	r2, r5
   d6bd4:	4608      	mov	r0, r1
   d6bd6:	f00a f8e3 	bl	e0da0 <mbedtls_mpi_mod_mpi>
   d6bda:	4607      	mov	r7, r0
   d6bdc:	b980      	cbnz	r0, d6c00 <mbedtls_rsa_private+0x30c>
   d6bde:	e7e2      	b.n	d6ba6 <mbedtls_rsa_private+0x2b2>
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
   d6be0:	a91e      	add	r1, sp, #120	; 0x78
   d6be2:	a821      	add	r0, sp, #132	; 0x84
   d6be4:	f009 fd3c 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   d6be8:	b948      	cbnz	r0, d6bfe <mbedtls_rsa_private+0x30a>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
   d6bea:	6862      	ldr	r2, [r4, #4]
   d6bec:	992e      	ldr	r1, [sp, #184]	; 0xb8
   d6bee:	a806      	add	r0, sp, #24
   d6bf0:	f009 fbd3 	bl	e039a <mbedtls_mpi_write_binary>
   d6bf4:	4607      	mov	r7, r0
   d6bf6:	e003      	b.n	d6c00 <mbedtls_rsa_private+0x30c>
    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
   d6bf8:	f06f 0703 	mvn.w	r7, #3
   d6bfc:	e000      	b.n	d6c00 <mbedtls_rsa_private+0x30c>
    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
   d6bfe:	4f16      	ldr	r7, [pc, #88]	; (d6c58 <mbedtls_rsa_private+0x364>)
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &P1 );
   d6c00:	a809      	add	r0, sp, #36	; 0x24
   d6c02:	f009 fa4c 	bl	e009e <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
   d6c06:	a80c      	add	r0, sp, #48	; 0x30
   d6c08:	f009 fa49 	bl	e009e <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
   d6c0c:	a80f      	add	r0, sp, #60	; 0x3c
   d6c0e:	f009 fa46 	bl	e009e <mbedtls_mpi_free>

    if( f_rng != NULL )
   d6c12:	b12e      	cbz	r6, d6c20 <mbedtls_rsa_private+0x32c>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_free( &D_blind );
#else
        mbedtls_mpi_free( &DP_blind );
   d6c14:	a818      	add	r0, sp, #96	; 0x60
   d6c16:	f009 fa42 	bl	e009e <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
   d6c1a:	a81b      	add	r0, sp, #108	; 0x6c
   d6c1c:	f009 fa3f 	bl	e009e <mbedtls_mpi_free>
#endif
    }

    mbedtls_mpi_free( &T );
   d6c20:	a806      	add	r0, sp, #24
   d6c22:	f009 fa3c 	bl	e009e <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
   d6c26:	a812      	add	r0, sp, #72	; 0x48
   d6c28:	f009 fa39 	bl	e009e <mbedtls_mpi_free>
   d6c2c:	a815      	add	r0, sp, #84	; 0x54
   d6c2e:	f009 fa36 	bl	e009e <mbedtls_mpi_free>
#endif

    mbedtls_mpi_free( &C );
   d6c32:	a821      	add	r0, sp, #132	; 0x84
   d6c34:	f009 fa33 	bl	e009e <mbedtls_mpi_free>
    mbedtls_mpi_free( &I );
   d6c38:	a81e      	add	r0, sp, #120	; 0x78
   d6c3a:	f009 fa30 	bl	e009e <mbedtls_mpi_free>

    if( ret != 0 )
   d6c3e:	b13f      	cbz	r7, d6c50 <mbedtls_rsa_private+0x35c>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
   d6c40:	f5a7 4386 	sub.w	r3, r7, #17152	; 0x4300
   d6c44:	e000      	b.n	d6c48 <mbedtls_rsa_private+0x354>
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 1             /* private key checks */,
                                f_rng != NULL /* blinding y/n       */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d6c46:	4b05      	ldr	r3, [pc, #20]	; (d6c5c <mbedtls_rsa_private+0x368>)
   d6c48:	9303      	str	r3, [sp, #12]
   d6c4a:	e001      	b.n	d6c50 <mbedtls_rsa_private+0x35c>
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
            return( MBEDTLS_ERR_RSA_RNG_FAILED );
   d6c4c:	4f04      	ldr	r7, [pc, #16]	; (d6c60 <mbedtls_rsa_private+0x36c>)
   d6c4e:	e7d7      	b.n	d6c00 <mbedtls_rsa_private+0x30c>

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );

    return( 0 );
}
   d6c50:	9803      	ldr	r0, [sp, #12]
   d6c52:	b025      	add	sp, #148	; 0x94
   d6c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6c58:	ffffbc80 	.word	0xffffbc80
   d6c5c:	ffffbf80 	.word	0xffffbf80
   d6c60:	ffffbb80 	.word	0xffffbb80

000d6c64 <mbedtls_rsa_rsaes_oaep_encrypt>:
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
   d6c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6c68:	b08d      	sub	sp, #52	; 0x34
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( label_len == 0 || label != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d6c6a:	2b01      	cmp	r3, #1
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
   d6c6c:	4680      	mov	r8, r0
   d6c6e:	468b      	mov	fp, r1
   d6c70:	9205      	str	r2, [sp, #20]
   d6c72:	9306      	str	r3, [sp, #24]
   d6c74:	9f18      	ldr	r7, [sp, #96]	; 0x60
   d6c76:	9e1a      	ldr	r6, [sp, #104]	; 0x68
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( label_len == 0 || label != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d6c78:	d105      	bne.n	d6c86 <mbedtls_rsa_rsaes_oaep_encrypt+0x22>
   d6c7a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   d6c7e:	2b01      	cmp	r3, #1
   d6c80:	d001      	beq.n	d6c86 <mbedtls_rsa_rsaes_oaep_encrypt+0x22>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d6c82:	4b41      	ldr	r3, [pc, #260]	; (d6d88 <mbedtls_rsa_rsaes_oaep_encrypt+0x124>)
   d6c84:	e07b      	b.n	d6d7e <mbedtls_rsa_rsaes_oaep_encrypt+0x11a>

    if( f_rng == NULL )
   d6c86:	f1bb 0f00 	cmp.w	fp, #0
   d6c8a:	d0fa      	beq.n	d6c82 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
   d6c8c:	f898 00a8 	ldrb.w	r0, [r8, #168]	; 0xa8
   d6c90:	f005 faca 	bl	dc228 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   d6c94:	9003      	str	r0, [sp, #12]
   d6c96:	2800      	cmp	r0, #0
   d6c98:	d0f3      	beq.n	d6c82 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
   d6c9a:	f8d8 4004 	ldr.w	r4, [r8, #4]
    hlen = mbedtls_md_get_size( md_info );
   d6c9e:	f005 fbfb 	bl	dc498 <mbedtls_md_get_size>
   d6ca2:	4605      	mov	r5, r0

    /* first comparison checks for overflow */
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
   d6ca4:	b200      	sxth	r0, r0
   d6ca6:	0043      	lsls	r3, r0, #1
   d6ca8:	9304      	str	r3, [sp, #16]
   d6caa:	9a04      	ldr	r2, [sp, #16]
   d6cac:	1cbb      	adds	r3, r7, #2
   d6cae:	4413      	add	r3, r2
   d6cb0:	429f      	cmp	r7, r3
   d6cb2:	d8e6      	bhi.n	d6c82 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
   d6cb4:	429c      	cmp	r4, r3
   d6cb6:	d3e4      	bcc.n	d6c82 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    memset( output, 0, olen );
   d6cb8:	4622      	mov	r2, r4
   d6cba:	2100      	movs	r1, #0
   d6cbc:	4630      	mov	r0, r6
   d6cbe:	f010 f96c 	bl	e6f9a <memset>

    *p++ = 0;
   d6cc2:	f106 0901 	add.w	r9, r6, #1
   d6cc6:	2300      	movs	r3, #0
   d6cc8:	7033      	strb	r3, [r6, #0]

    /* Generate a random octet string seed */
    if( ( ret = f_rng( p_rng, p, hlen ) ) != 0 )
   d6cca:	462a      	mov	r2, r5
   d6ccc:	4649      	mov	r1, r9
   d6cce:	9805      	ldr	r0, [sp, #20]
   d6cd0:	47d8      	blx	fp
   d6cd2:	b110      	cbz	r0, d6cda <mbedtls_rsa_rsaes_oaep_encrypt+0x76>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
   d6cd4:	f5a0 4389 	sub.w	r3, r0, #17536	; 0x4480
   d6cd8:	e051      	b.n	d6d7e <mbedtls_rsa_rsaes_oaep_encrypt+0x11a>

    p += hlen;
   d6cda:	eb09 0a05 	add.w	sl, r9, r5

    /* Construct DB */
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
   d6cde:	4653      	mov	r3, sl
   d6ce0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d6ce2:	9916      	ldr	r1, [sp, #88]	; 0x58
   d6ce4:	9803      	ldr	r0, [sp, #12]
   d6ce6:	f005 fb0b 	bl	dc300 <mbedtls_md>
   d6cea:	4603      	mov	r3, r0
   d6cec:	2800      	cmp	r0, #0
   d6cee:	d146      	bne.n	d6d7e <mbedtls_rsa_rsaes_oaep_encrypt+0x11a>
   d6cf0:	9007      	str	r0, [sp, #28]
   d6cf2:	1ea0      	subs	r0, r4, #2
   d6cf4:	9b04      	ldr	r3, [sp, #16]
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
    memcpy( p, input, ilen );
   d6cf6:	9919      	ldr	r1, [sp, #100]	; 0x64
   d6cf8:	1bc0      	subs	r0, r0, r7
   d6cfa:	4428      	add	r0, r5
   d6cfc:	1ac0      	subs	r0, r0, r3
    /* Construct DB */
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
   d6cfe:	2201      	movs	r2, #1
   d6d00:	f80a 2000 	strb.w	r2, [sl, r0]
    memcpy( p, input, ilen );
   d6d04:	4410      	add	r0, r2
   d6d06:	4450      	add	r0, sl
   d6d08:	463a      	mov	r2, r7

    mbedtls_md_init( &md_ctx );
   d6d0a:	af09      	add	r7, sp, #36	; 0x24
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
    memcpy( p, input, ilen );
   d6d0c:	f010 f91f 	bl	e6f4e <memcpy>

    mbedtls_md_init( &md_ctx );
   d6d10:	4638      	mov	r0, r7
   d6d12:	f005 fa95 	bl	dc240 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   d6d16:	9b07      	ldr	r3, [sp, #28]
   d6d18:	9903      	ldr	r1, [sp, #12]
   d6d1a:	461a      	mov	r2, r3
   d6d1c:	4638      	mov	r0, r7
   d6d1e:	f005 faaf 	bl	dc280 <mbedtls_md_setup>
   d6d22:	4603      	mov	r3, r0
   d6d24:	b9a8      	cbnz	r0, d6d52 <mbedtls_rsa_rsaes_oaep_encrypt+0xee>
        goto exit;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( output + hlen + 1, olen - hlen - 1, output + 1, hlen,
   d6d26:	f105 0a01 	add.w	sl, r5, #1
   d6d2a:	3c01      	subs	r4, #1
   d6d2c:	44b2      	add	sl, r6
   d6d2e:	1b64      	subs	r4, r4, r5
   d6d30:	462b      	mov	r3, r5
   d6d32:	9700      	str	r7, [sp, #0]
   d6d34:	464a      	mov	r2, r9
   d6d36:	4621      	mov	r1, r4
   d6d38:	4650      	mov	r0, sl
   d6d3a:	f7ff faeb 	bl	d6314 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
   d6d3e:	4603      	mov	r3, r0
   d6d40:	b938      	cbnz	r0, d6d52 <mbedtls_rsa_rsaes_oaep_encrypt+0xee>
                          &md_ctx ) ) != 0 )
        goto exit;

    /* maskedSeed: Apply seedMask to seed */
    if( ( ret = mgf_mask( output + 1, hlen, output + hlen + 1, olen - hlen - 1,
   d6d42:	4623      	mov	r3, r4
   d6d44:	9700      	str	r7, [sp, #0]
   d6d46:	4652      	mov	r2, sl
   d6d48:	4629      	mov	r1, r5
   d6d4a:	4648      	mov	r0, r9
   d6d4c:	f7ff fae2 	bl	d6314 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
   d6d50:	4603      	mov	r3, r0
                          &md_ctx ) ) != 0 )
        goto exit;

exit:
    mbedtls_md_free( &md_ctx );
   d6d52:	a809      	add	r0, sp, #36	; 0x24
   d6d54:	9303      	str	r3, [sp, #12]
   d6d56:	f005 fa78 	bl	dc24a <mbedtls_md_free>

    if( ret != 0 )
   d6d5a:	9b03      	ldr	r3, [sp, #12]
   d6d5c:	b97b      	cbnz	r3, d6d7e <mbedtls_rsa_rsaes_oaep_encrypt+0x11a>
        return( ret );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
   d6d5e:	9b06      	ldr	r3, [sp, #24]
   d6d60:	b92b      	cbnz	r3, d6d6e <mbedtls_rsa_rsaes_oaep_encrypt+0x10a>
   d6d62:	4632      	mov	r2, r6
   d6d64:	4631      	mov	r1, r6
   d6d66:	4640      	mov	r0, r8
   d6d68:	f7ff fd82 	bl	d6870 <mbedtls_rsa_public>
   d6d6c:	e006      	b.n	d6d7c <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
   d6d6e:	9600      	str	r6, [sp, #0]
   d6d70:	4633      	mov	r3, r6
   d6d72:	9a05      	ldr	r2, [sp, #20]
   d6d74:	4659      	mov	r1, fp
   d6d76:	4640      	mov	r0, r8
   d6d78:	f7ff fdbc 	bl	d68f4 <mbedtls_rsa_private>
   d6d7c:	4603      	mov	r3, r0
}
   d6d7e:	4618      	mov	r0, r3
   d6d80:	b00d      	add	sp, #52	; 0x34
   d6d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6d86:	bf00      	nop
   d6d88:	ffffbf80 	.word	0xffffbf80

000d6d8c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
   d6d8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6d90:	469a      	mov	sl, r3
    RSA_VALIDATE_RET( mode == MBEDTLS_RSA_PRIVATE ||
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output != NULL );
    RSA_VALIDATE_RET( input != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d6d92:	f1ba 0f01 	cmp.w	sl, #1
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
   d6d96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d6d98:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d6d9c:	9300      	str	r3, [sp, #0]
   d6d9e:	4607      	mov	r7, r0
   d6da0:	4689      	mov	r9, r1
   d6da2:	4693      	mov	fp, r2
   d6da4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    RSA_VALIDATE_RET( mode == MBEDTLS_RSA_PRIVATE ||
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output != NULL );
    RSA_VALIDATE_RET( input != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d6da6:	d104      	bne.n	d6db2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x26>
   d6da8:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   d6dac:	b10b      	cbz	r3, d6db2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x26>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d6dae:	482c      	ldr	r0, [pc, #176]	; (d6e60 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd4>)
   d6db0:	e052      	b.n	d6e58 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xcc>

    olen = ctx->len;

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
   d6db2:	f118 030b 	adds.w	r3, r8, #11
    RSA_VALIDATE_RET( input != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
   d6db6:	687c      	ldr	r4, [r7, #4]

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
   d6db8:	d2f9      	bcs.n	d6dae <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x22>
   d6dba:	429c      	cmp	r4, r3
   d6dbc:	d3f7      	bcc.n	d6dae <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x22>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;
   d6dbe:	3c03      	subs	r4, #3

    *p++ = 0;
   d6dc0:	2300      	movs	r3, #0

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;
   d6dc2:	ebc8 0404 	rsb	r4, r8, r4

    *p++ = 0;
   d6dc6:	702b      	strb	r3, [r5, #0]
    if( mode == MBEDTLS_RSA_PUBLIC )
   d6dc8:	f1ba 0f00 	cmp.w	sl, #0
   d6dcc:	d119      	bne.n	d6e02 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x76>
    {
        if( f_rng == NULL )
   d6dce:	f1b9 0f00 	cmp.w	r9, #0
   d6dd2:	d0ec      	beq.n	d6dae <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x22>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        *p++ = MBEDTLS_RSA_CRYPT;
   d6dd4:	1cae      	adds	r6, r5, #2
   d6dd6:	2302      	movs	r3, #2
   d6dd8:	706b      	strb	r3, [r5, #1]
   d6dda:	4434      	add	r4, r6

        while( nb_pad-- > 0 )
   d6ddc:	42a6      	cmp	r6, r4
   d6dde:	d01a      	beq.n	d6e16 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x8a>
   d6de0:	2364      	movs	r3, #100	; 0x64
        {
            int rng_dl = 100;

            do {
                ret = f_rng( p_rng, p, 1 );
   d6de2:	2201      	movs	r2, #1
   d6de4:	4631      	mov	r1, r6
   d6de6:	4658      	mov	r0, fp
   d6de8:	9301      	str	r3, [sp, #4]
   d6dea:	47c8      	blx	r9
            } while( *p == 0 && --rng_dl && ret == 0 );
   d6dec:	7832      	ldrb	r2, [r6, #0]
   d6dee:	bb7a      	cbnz	r2, d6e50 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xc4>
   d6df0:	9b01      	ldr	r3, [sp, #4]
   d6df2:	3b01      	subs	r3, #1
   d6df4:	d102      	bne.n	d6dfc <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x70>

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
   d6df6:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
   d6dfa:	e02d      	b.n	d6e58 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xcc>
        {
            int rng_dl = 100;

            do {
                ret = f_rng( p_rng, p, 1 );
            } while( *p == 0 && --rng_dl && ret == 0 );
   d6dfc:	2800      	cmp	r0, #0
   d6dfe:	d0f0      	beq.n	d6de2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x56>
   d6e00:	e7f9      	b.n	d6df6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x6a>
            p++;
        }
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;
   d6e02:	2201      	movs	r2, #1
   d6e04:	1cab      	adds	r3, r5, #2
   d6e06:	706a      	strb	r2, [r5, #1]
   d6e08:	441c      	add	r4, r3

        while( nb_pad-- > 0 )
            *p++ = 0xFF;
   d6e0a:	22ff      	movs	r2, #255	; 0xff
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;

        while( nb_pad-- > 0 )
   d6e0c:	429c      	cmp	r4, r3
   d6e0e:	d002      	beq.n	d6e16 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x8a>
            *p++ = 0xFF;
   d6e10:	f803 2b01 	strb.w	r2, [r3], #1
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;

        while( nb_pad-- > 0 )
   d6e14:	e7fa      	b.n	d6e0c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x80>
            *p++ = 0xFF;
    }

    *p++ = 0;
   d6e16:	4620      	mov	r0, r4
   d6e18:	2300      	movs	r3, #0
   d6e1a:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy( p, input, ilen );
   d6e1e:	4642      	mov	r2, r8
   d6e20:	9900      	ldr	r1, [sp, #0]
   d6e22:	f010 f894 	bl	e6f4e <memcpy>

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
   d6e26:	f1ba 0f00 	cmp.w	sl, #0
   d6e2a:	d107      	bne.n	d6e3c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xb0>
   d6e2c:	462a      	mov	r2, r5
   d6e2e:	4629      	mov	r1, r5
   d6e30:	4638      	mov	r0, r7
}
   d6e32:	b003      	add	sp, #12
   d6e34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *p++ = 0;
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
   d6e38:	f7ff bd1a 	b.w	d6870 <mbedtls_rsa_public>
   d6e3c:	462b      	mov	r3, r5
   d6e3e:	465a      	mov	r2, fp
   d6e40:	4649      	mov	r1, r9
   d6e42:	4638      	mov	r0, r7
   d6e44:	950c      	str	r5, [sp, #48]	; 0x30
}
   d6e46:	b003      	add	sp, #12
   d6e48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *p++ = 0;
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
   d6e4c:	f7ff bd52 	b.w	d68f4 <mbedtls_rsa_private>
            do {
                ret = f_rng( p_rng, p, 1 );
            } while( *p == 0 && --rng_dl && ret == 0 );

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
   d6e50:	2800      	cmp	r0, #0
   d6e52:	d1d0      	bne.n	d6df6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x6a>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

            p++;
   d6e54:	3601      	adds	r6, #1
        if( f_rng == NULL )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        *p++ = MBEDTLS_RSA_CRYPT;

        while( nb_pad-- > 0 )
   d6e56:	e7c1      	b.n	d6ddc <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x50>
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
}
   d6e58:	b003      	add	sp, #12
   d6e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6e5e:	bf00      	nop
   d6e60:	ffffbf80 	.word	0xffffbf80

000d6e64 <mbedtls_rsa_pkcs1_encrypt>:
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
   d6e64:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6e66:	b087      	sub	sp, #28
    RSA_VALIDATE_RET( mode == MBEDTLS_RSA_PRIVATE ||
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output != NULL );
    RSA_VALIDATE_RET( input != NULL );

    switch( ctx->padding )
   d6e68:	f8d0 70a4 	ldr.w	r7, [r0, #164]	; 0xa4
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
   d6e6c:	ac0c      	add	r4, sp, #48	; 0x30
   d6e6e:	cc70      	ldmia	r4, {r4, r5, r6}
    RSA_VALIDATE_RET( mode == MBEDTLS_RSA_PRIVATE ||
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output != NULL );
    RSA_VALIDATE_RET( input != NULL );

    switch( ctx->padding )
   d6e70:	b157      	cbz	r7, d6e88 <mbedtls_rsa_pkcs1_encrypt+0x24>
   d6e72:	2f01      	cmp	r7, #1
   d6e74:	d110      	bne.n	d6e98 <mbedtls_rsa_pkcs1_encrypt+0x34>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
   d6e76:	9402      	str	r4, [sp, #8]
   d6e78:	2400      	movs	r4, #0
   d6e7a:	9604      	str	r6, [sp, #16]
   d6e7c:	9503      	str	r5, [sp, #12]
   d6e7e:	9401      	str	r4, [sp, #4]
   d6e80:	9400      	str	r4, [sp, #0]
   d6e82:	f7ff feef 	bl	d6c64 <mbedtls_rsa_rsaes_oaep_encrypt>
   d6e86:	e008      	b.n	d6e9a <mbedtls_rsa_pkcs1_encrypt+0x36>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
                                                input, output );
   d6e88:	960e      	str	r6, [sp, #56]	; 0x38
   d6e8a:	950d      	str	r5, [sp, #52]	; 0x34
   d6e8c:	940c      	str	r4, [sp, #48]	; 0x30
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   d6e8e:	b007      	add	sp, #28
   d6e90:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
                                                input, output );
   d6e94:	f7ff bf7a 	b.w	d6d8c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   d6e98:	4801      	ldr	r0, [pc, #4]	; (d6ea0 <mbedtls_rsa_pkcs1_encrypt+0x3c>)
    }
}
   d6e9a:	b007      	add	sp, #28
   d6e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6e9e:	bf00      	nop
   d6ea0:	ffffbf00 	.word	0xffffbf00

000d6ea4 <mbedtls_rsa_rsaes_oaep_decrypt>:
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
   d6ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6ea8:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
    RSA_VALIDATE_RET( olen != NULL );

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d6eac:	2b01      	cmp	r3, #1
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
   d6eae:	4606      	mov	r6, r0
   d6eb0:	468a      	mov	sl, r1
   d6eb2:	9203      	str	r2, [sp, #12]
   d6eb4:	469b      	mov	fp, r3
    RSA_VALIDATE_RET( olen != NULL );

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d6eb6:	d105      	bne.n	d6ec4 <mbedtls_rsa_rsaes_oaep_decrypt+0x20>
   d6eb8:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   d6ebc:	2b01      	cmp	r3, #1
   d6ebe:	d001      	beq.n	d6ec4 <mbedtls_rsa_rsaes_oaep_decrypt+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d6ec0:	485c      	ldr	r0, [pc, #368]	; (d7034 <mbedtls_rsa_rsaes_oaep_decrypt+0x190>)
   d6ec2:	e0b2      	b.n	d702a <mbedtls_rsa_rsaes_oaep_decrypt+0x186>

    ilen = ctx->len;
   d6ec4:	6877      	ldr	r7, [r6, #4]

    if( ilen < 16 || ilen > sizeof( buf ) )
   d6ec6:	f1a7 0310 	sub.w	r3, r7, #16
   d6eca:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
   d6ece:	d8f7      	bhi.n	d6ec0 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
   d6ed0:	f896 00a8 	ldrb.w	r0, [r6, #168]	; 0xa8
   d6ed4:	f005 f9a8 	bl	dc228 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   d6ed8:	9002      	str	r0, [sp, #8]
   d6eda:	2800      	cmp	r0, #0
   d6edc:	d0f0      	beq.n	d6ec0 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
   d6ede:	f005 fadb 	bl	dc498 <mbedtls_md_get_size>

    // checking for integer underflow
    if( 2 * hlen + 2 > ilen )
   d6ee2:	f100 0801 	add.w	r8, r0, #1
   d6ee6:	ea4f 0548 	mov.w	r5, r8, lsl #1
   d6eea:	42af      	cmp	r7, r5

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
   d6eec:	4604      	mov	r4, r0

    // checking for integer underflow
    if( 2 * hlen + 2 > ilen )
   d6eee:	d3e7      	bcc.n	d6ec0 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
   d6ef0:	f10d 0960 	add.w	r9, sp, #96	; 0x60
    /*
     * RSA operation
     */
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
   d6ef4:	f1bb 0f00 	cmp.w	fp, #0
   d6ef8:	d106      	bne.n	d6f08 <mbedtls_rsa_rsaes_oaep_decrypt+0x64>
   d6efa:	464a      	mov	r2, r9
   d6efc:	f8dd 1494 	ldr.w	r1, [sp, #1172]	; 0x494
   d6f00:	4630      	mov	r0, r6
   d6f02:	f7ff fcb5 	bl	d6870 <mbedtls_rsa_public>
   d6f06:	e008      	b.n	d6f1a <mbedtls_rsa_rsaes_oaep_decrypt+0x76>
   d6f08:	f8cd 9000 	str.w	r9, [sp]
   d6f0c:	f8dd 3494 	ldr.w	r3, [sp, #1172]	; 0x494
   d6f10:	9a03      	ldr	r2, [sp, #12]
   d6f12:	4651      	mov	r1, sl
   d6f14:	4630      	mov	r0, r6
   d6f16:	f7ff fced 	bl	d68f4 <mbedtls_rsa_private>
   d6f1a:	4682      	mov	sl, r0

    if( ret != 0 )
   d6f1c:	2800      	cmp	r0, #0
   d6f1e:	d13c      	bne.n	d6f9a <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
        goto cleanup;

    /*
     * Unmask data and generate lHash
     */
    mbedtls_md_init( &md_ctx );
   d6f20:	ae05      	add	r6, sp, #20
   d6f22:	4630      	mov	r0, r6
   d6f24:	f005 f98c 	bl	dc240 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   d6f28:	4652      	mov	r2, sl
   d6f2a:	9902      	ldr	r1, [sp, #8]
   d6f2c:	4630      	mov	r0, r6
   d6f2e:	f005 f9a7 	bl	dc280 <mbedtls_md_setup>
   d6f32:	4682      	mov	sl, r0
   d6f34:	b108      	cbz	r0, d6f3a <mbedtls_rsa_rsaes_oaep_decrypt+0x96>
    {
        mbedtls_md_free( &md_ctx );
   d6f36:	4630      	mov	r0, r6
   d6f38:	e03b      	b.n	d6fb2 <mbedtls_rsa_rsaes_oaep_decrypt+0x10e>
        goto cleanup;
    }

    /* seed: Apply seedMask to maskedSeed */
    if( ( ret = mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
   d6f3a:	f107 3bff 	add.w	fp, r7, #4294967295
   d6f3e:	44c8      	add	r8, r9
   d6f40:	ebc4 0b0b 	rsb	fp, r4, fp
   d6f44:	9600      	str	r6, [sp, #0]
   d6f46:	465b      	mov	r3, fp
   d6f48:	4642      	mov	r2, r8
   d6f4a:	4621      	mov	r1, r4
   d6f4c:	f10d 0061 	add.w	r0, sp, #97	; 0x61
   d6f50:	f7ff f9e0 	bl	d6314 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
                          &md_ctx ) ) != 0 ||
   d6f54:	4682      	mov	sl, r0
   d6f56:	bb58      	cbnz	r0, d6fb0 <mbedtls_rsa_rsaes_oaep_decrypt+0x10c>
    /* DB: Apply dbMask to maskedDB */
        ( ret = mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,
   d6f58:	9600      	str	r6, [sp, #0]
   d6f5a:	4623      	mov	r3, r4
   d6f5c:	f10d 0261 	add.w	r2, sp, #97	; 0x61
   d6f60:	4659      	mov	r1, fp
   d6f62:	4640      	mov	r0, r8
   d6f64:	f7ff f9d6 	bl	d6314 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
        goto cleanup;
    }

    /* seed: Apply seedMask to maskedSeed */
    if( ( ret = mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
                          &md_ctx ) ) != 0 ||
   d6f68:	4682      	mov	sl, r0
   d6f6a:	bb08      	cbnz	r0, d6fb0 <mbedtls_rsa_rsaes_oaep_decrypt+0x10c>
   d6f6c:	e024      	b.n	d6fb8 <mbedtls_rsa_rsaes_oaep_decrypt+0x114>
     * The only information "leaked" is whether the padding was correct or not
     * (eg, no data is copied if it was not correct). This meets the
     * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between
     * the different error conditions.
     */
    if( bad != 0 )
   d6f6e:	5c88      	ldrb	r0, [r1, r2]
   d6f70:	f080 0001 	eor.w	r0, r0, #1
   d6f74:	ea50 030e 	orrs.w	r3, r0, lr
   d6f78:	d151      	bne.n	d701e <mbedtls_rsa_rsaes_oaep_decrypt+0x17a>
        pad_done |= p[i];
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
    }

    p += pad_len;
    bad |= *p++ ^ 0x01;
   d6f7a:	3201      	adds	r2, #1
   d6f7c:	4411      	add	r1, r2
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
   d6f7e:	aa18      	add	r2, sp, #96	; 0x60
   d6f80:	1a8a      	subs	r2, r1, r2
   d6f82:	f8dd 049c 	ldr.w	r0, [sp, #1180]	; 0x49c
   d6f86:	1aba      	subs	r2, r7, r2
   d6f88:	4282      	cmp	r2, r0
   d6f8a:	d84b      	bhi.n	d7024 <mbedtls_rsa_rsaes_oaep_decrypt+0x180>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
   d6f8c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   d6f90:	6002      	str	r2, [r0, #0]
    memcpy( output, p, *olen );
   d6f92:	f8dd 0498 	ldr.w	r0, [sp, #1176]	; 0x498
   d6f96:	f00f ffda 	bl	e6f4e <memcpy>
    ret = 0;

cleanup:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
   d6f9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   d6f9e:	a818      	add	r0, sp, #96	; 0x60
   d6fa0:	f003 fa9e 	bl	da4e0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( lhash, sizeof( lhash ) );
   d6fa4:	a808      	add	r0, sp, #32
   d6fa6:	2140      	movs	r1, #64	; 0x40
   d6fa8:	f003 fa9a 	bl	da4e0 <mbedtls_platform_zeroize>

    return( ret );
   d6fac:	4650      	mov	r0, sl
   d6fae:	e03c      	b.n	d702a <mbedtls_rsa_rsaes_oaep_decrypt+0x186>
                          &md_ctx ) ) != 0 ||
    /* DB: Apply dbMask to maskedDB */
        ( ret = mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,
                          &md_ctx ) ) != 0 )
    {
        mbedtls_md_free( &md_ctx );
   d6fb0:	a805      	add	r0, sp, #20
   d6fb2:	f005 f94a 	bl	dc24a <mbedtls_md_free>
        goto cleanup;
   d6fb6:	e7f0      	b.n	d6f9a <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
    }

    mbedtls_md_free( &md_ctx );
   d6fb8:	4630      	mov	r0, r6

    /* Generate lHash */
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
   d6fba:	ae08      	add	r6, sp, #32
    {
        mbedtls_md_free( &md_ctx );
        goto cleanup;
    }

    mbedtls_md_free( &md_ctx );
   d6fbc:	f005 f945 	bl	dc24a <mbedtls_md_free>

    /* Generate lHash */
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
   d6fc0:	4633      	mov	r3, r6
   d6fc2:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
   d6fc6:	f8dd 1488 	ldr.w	r1, [sp, #1160]	; 0x488
   d6fca:	9802      	ldr	r0, [sp, #8]
   d6fcc:	f005 f998 	bl	dc300 <mbedtls_md>
   d6fd0:	4682      	mov	sl, r0
   d6fd2:	2800      	cmp	r0, #0
   d6fd4:	d1e1      	bne.n	d6f9a <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
    p = buf;
    bad = 0;

    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */
   d6fd6:	f10d 0361 	add.w	r3, sp, #97	; 0x61
     * Check contents, in "constant-time"
     */
    p = buf;
    bad = 0;

    bad |= *p++; /* First byte must be 0 */
   d6fda:	f899 e000 	ldrb.w	lr, [r9]

    p += hlen; /* Skip seed */
   d6fde:	1919      	adds	r1, r3, r4

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
   d6fe0:	4650      	mov	r0, sl
   d6fe2:	42a0      	cmp	r0, r4
   d6fe4:	d208      	bcs.n	d6ff8 <mbedtls_rsa_rsaes_oaep_decrypt+0x154>
        bad |= lhash[i] ^ *p++;
   d6fe6:	5c32      	ldrb	r2, [r6, r0]
   d6fe8:	f811 c000 	ldrb.w	ip, [r1, r0]
   d6fec:	ea82 0c0c 	eor.w	ip, r2, ip
   d6ff0:	ea4c 0e0e 	orr.w	lr, ip, lr
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
   d6ff4:	3001      	adds	r0, #1
   d6ff6:	e7f4      	b.n	d6fe2 <mbedtls_rsa_rsaes_oaep_decrypt+0x13e>
   d6ff8:	4421      	add	r1, r4
   d6ffa:	1b7d      	subs	r5, r7, r5

    /* Get zero-padding len, but always read till end of buffer
     * (minus one, for the 01 byte) */
    pad_len = 0;
    pad_done = 0;
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
   d6ffc:	2400      	movs	r4, #0
   d6ffe:	460e      	mov	r6, r1
   d7000:	440d      	add	r5, r1
   d7002:	4622      	mov	r2, r4
   d7004:	42b5      	cmp	r5, r6
   d7006:	d0b2      	beq.n	d6f6e <mbedtls_rsa_rsaes_oaep_decrypt+0xca>
    {
        pad_done |= p[i];
   d7008:	f816 0b01 	ldrb.w	r0, [r6], #1
   d700c:	4304      	orrs	r4, r0
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
   d700e:	4260      	negs	r0, r4
   d7010:	4320      	orrs	r0, r4
   d7012:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   d7016:	f080 0001 	eor.w	r0, r0, #1
   d701a:	4402      	add	r2, r0

    /* Get zero-padding len, but always read till end of buffer
     * (minus one, for the 01 byte) */
    pad_len = 0;
    pad_done = 0;
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
   d701c:	e7f2      	b.n	d7004 <mbedtls_rsa_rsaes_oaep_decrypt+0x160>
     * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between
     * the different error conditions.
     */
    if( bad != 0 )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
   d701e:	f8df a018 	ldr.w	sl, [pc, #24]	; d7038 <mbedtls_rsa_rsaes_oaep_decrypt+0x194>
   d7022:	e7ba      	b.n	d6f9a <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
   d7024:	f8df a014 	ldr.w	sl, [pc, #20]	; d703c <mbedtls_rsa_rsaes_oaep_decrypt+0x198>
   d7028:	e7b7      	b.n	d6f9a <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
cleanup:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
    mbedtls_platform_zeroize( lhash, sizeof( lhash ) );

    return( ret );
}
   d702a:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
   d702e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7032:	bf00      	nop
   d7034:	ffffbf80 	.word	0xffffbf80
   d7038:	ffffbf00 	.word	0xffffbf00
   d703c:	ffffbc00 	.word	0xffffbc00

000d7040 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len )
{
   d7040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ilen = ctx->len;
    plaintext_max_size = ( output_max_len > ilen - 11 ?
                           ilen - 11 :
                           output_max_len );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d7044:	2b01      	cmp	r3, #1
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len )
{
   d7046:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
   d704a:	461f      	mov	r7, r3
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output_max_len == 0 || output != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( olen != NULL );

    ilen = ctx->len;
   d704c:	6845      	ldr	r5, [r0, #4]
    plaintext_max_size = ( output_max_len > ilen - 11 ?
                           ilen - 11 :
                           output_max_len );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d704e:	d104      	bne.n	d705a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1a>
   d7050:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   d7054:	2b00      	cmp	r3, #0
   d7056:	f040 80be 	bne.w	d71d6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x196>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    if( ilen < 16 || ilen > sizeof( buf ) )
   d705a:	f1a5 0310 	sub.w	r3, r5, #16
   d705e:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
   d7062:	f200 80b8 	bhi.w	d71d6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x196>
   d7066:	ae02      	add	r6, sp, #8
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
   d7068:	b94f      	cbnz	r7, d707e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x3e>
   d706a:	4632      	mov	r2, r6
   d706c:	f8dd 142c 	ldr.w	r1, [sp, #1068]	; 0x42c
   d7070:	f7ff fbfe 	bl	d6870 <mbedtls_rsa_public>

    if( ret != 0 )
   d7074:	4604      	mov	r4, r0
   d7076:	2800      	cmp	r0, #0
   d7078:	f040 80a6 	bne.w	d71c8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x188>
   d707c:	e025      	b.n	d70ca <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x8a>
    if( ilen < 16 || ilen > sizeof( buf ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
   d707e:	9600      	str	r6, [sp, #0]
   d7080:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
   d7084:	f7ff fc36 	bl	d68f4 <mbedtls_rsa_private>

    if( ret != 0 )
   d7088:	4604      	mov	r4, r0
   d708a:	2800      	cmp	r0, #0
   d708c:	f040 809c 	bne.w	d71c8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x188>

    /* Check and get padding length in constant time and constant
     * memory trace. The first byte must be 0. */
    bad |= buf[0];

    if( mode == MBEDTLS_RSA_PRIVATE )
   d7090:	2f01      	cmp	r7, #1
    if( ret != 0 )
        goto cleanup;

    /* Check and get padding length in constant time and constant
     * memory trace. The first byte must be 0. */
    bad |= buf[0];
   d7092:	7832      	ldrb	r2, [r6, #0]

    if( mode == MBEDTLS_RSA_PRIVATE )
   d7094:	d11a      	bne.n	d70cc <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x8c>
    {
        /* Decode EME-PKCS1-v1_5 padding: 0x00 || 0x02 || PS || 0x00
         * where PS must be at least 8 nonzero bytes. */
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;
   d7096:	7873      	ldrb	r3, [r6, #1]
   d7098:	f083 0302 	eor.w	r3, r3, #2
   d709c:	4313      	orrs	r3, r2
     * attack. Potential side channels include overall timing, memory
     * access patterns (especially visible to an adversary who has access
     * to a shared memory cache), and branches (especially visible to
     * an adversary who has access to a shared code cache or to a shared
     * branch predictor). */
    size_t pad_count = 0;
   d709e:	4601      	mov	r1, r0
         * where PS must be at least 8 nonzero bytes. */
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count. */
        for( i = 2; i < ilen; i++ )
   d70a0:	2402      	movs	r4, #2
        {
            pad_done  |= ((buf[i] | (unsigned char)-buf[i]) >> 7) ^ 1;
   d70a2:	5d37      	ldrb	r7, [r6, r4]
   d70a4:	427a      	negs	r2, r7
   d70a6:	433a      	orrs	r2, r7
   d70a8:	f3c2 12c0 	ubfx	r2, r2, #7, #1
   d70ac:	f082 0201 	eor.w	r2, r2, #1
   d70b0:	4310      	orrs	r0, r2
   d70b2:	b2c0      	uxtb	r0, r0
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
   d70b4:	4242      	negs	r2, r0
   d70b6:	4302      	orrs	r2, r0
   d70b8:	f3c2 12c0 	ubfx	r2, r2, #7, #1
         * where PS must be at least 8 nonzero bytes. */
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count. */
        for( i = 2; i < ilen; i++ )
   d70bc:	3401      	adds	r4, #1
        {
            pad_done  |= ((buf[i] | (unsigned char)-buf[i]) >> 7) ^ 1;
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
   d70be:	f082 0201 	eor.w	r2, r2, #1
         * where PS must be at least 8 nonzero bytes. */
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count. */
        for( i = 2; i < ilen; i++ )
   d70c2:	42a5      	cmp	r5, r4
        {
            pad_done  |= ((buf[i] | (unsigned char)-buf[i]) >> 7) ^ 1;
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
   d70c4:	4411      	add	r1, r2
         * where PS must be at least 8 nonzero bytes. */
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count. */
        for( i = 2; i < ilen; i++ )
   d70c6:	d1ec      	bne.n	d70a2 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x62>
   d70c8:	e01b      	b.n	d7102 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xc2>
    if( ret != 0 )
        goto cleanup;

    /* Check and get padding length in constant time and constant
     * memory trace. The first byte must be 0. */
    bad |= buf[0];
   d70ca:	7832      	ldrb	r2, [r6, #0]
    }
    else
    {
        /* Decode EMSA-PKCS1-v1_5 padding: 0x00 || 0x01 || PS || 0x00
         * where PS must be at least 8 bytes with the value 0xFF. */
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;
   d70cc:	7873      	ldrb	r3, [r6, #1]
     * to a shared memory cache), and branches (especially visible to
     * an adversary who has access to a shared code cache or to a shared
     * branch predictor). */
    size_t pad_count = 0;
    unsigned bad = 0;
    unsigned char pad_done = 0;
   d70ce:	2000      	movs	r0, #0
    }
    else
    {
        /* Decode EMSA-PKCS1-v1_5 padding: 0x00 || 0x01 || PS || 0x00
         * where PS must be at least 8 bytes with the value 0xFF. */
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;
   d70d0:	f083 0301 	eor.w	r3, r3, #1
   d70d4:	4313      	orrs	r3, r2
     * attack. Potential side channels include overall timing, memory
     * access patterns (especially visible to an adversary who has access
     * to a shared memory cache), and branches (especially visible to
     * an adversary who has access to a shared code cache or to a shared
     * branch predictor). */
    size_t pad_count = 0;
   d70d6:	4601      	mov	r1, r0
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count.
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
   d70d8:	2702      	movs	r7, #2
        {
            pad_done |= if_int( buf[i], 0, 1 );
   d70da:	5df2      	ldrb	r2, [r6, r7]
   d70dc:	2a00      	cmp	r2, #0
   d70de:	bf08      	it	eq
   d70e0:	f040 0001 	orreq.w	r0, r0, #1
   d70e4:	b2c0      	uxtb	r0, r0
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   d70e6:	4244      	negs	r4, r0
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
        {
            pad_done |= if_int( buf[i], 0, 1 );
            pad_count += if_int( pad_done, 0, 1 );
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
   d70e8:	43d2      	mvns	r2, r2
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   d70ea:	17e4      	asrs	r4, r4, #31
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
        {
            pad_done |= if_int( buf[i], 0, 1 );
            pad_count += if_int( pad_done, 0, 1 );
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
   d70ec:	b2d2      	uxtb	r2, r2
         * the 0x00 byte and remember the padding length in pad_count.
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
        {
            pad_done |= if_int( buf[i], 0, 1 );
            pad_count += if_int( pad_done, 0, 1 );
   d70ee:	f104 0e01 	add.w	lr, r4, #1
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count.
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
   d70f2:	3701      	adds	r7, #1
        {
            pad_done |= if_int( buf[i], 0, 1 );
            pad_count += if_int( pad_done, 0, 1 );
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
   d70f4:	4014      	ands	r4, r2
   d70f6:	4062      	eors	r2, r4
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count.
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
   d70f8:	42bd      	cmp	r5, r7
        {
            pad_done |= if_int( buf[i], 0, 1 );
            pad_count += if_int( pad_done, 0, 1 );
   d70fa:	4471      	add	r1, lr
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
   d70fc:	ea43 0302 	orr.w	r3, r3, r2
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count.
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
   d7100:	d1eb      	bne.n	d70da <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x9a>
    RSA_VALIDATE_RET( olen != NULL );

    ilen = ctx->len;
    plaintext_max_size = ( output_max_len > ilen - 11 ?
                           ilen - 11 :
                           output_max_len );
   d7102:	f8dd 4434 	ldr.w	r4, [sp, #1076]	; 0x434
   d7106:	f1a5 020b 	sub.w	r2, r5, #11
   d710a:	42a2      	cmp	r2, r4
   d710c:	bf28      	it	cs
   d710e:	4622      	movcs	r2, r4
   d7110:	f1a1 0408 	sub.w	r4, r1, #8
   d7114:	ea43 73d4 	orr.w	r3, r3, r4, lsr #31

    /* If pad_done is still zero, there's no data, only unfinished padding. */
    bad |= if_int( pad_done, 0, 1 );

    /* There must be at least 8 bytes of padding. */
    bad |= size_greater_than( 8, pad_count );
   d7118:	4244      	negs	r4, r0
   d711a:	4320      	orrs	r0, r4
   d711c:	2800      	cmp	r0, #0
   d711e:	bfb4      	ite	lt
   d7120:	4618      	movlt	r0, r3
   d7122:	f043 0001 	orrge.w	r0, r3, #1
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   d7126:	4243      	negs	r3, r0
   d7128:	4303      	orrs	r3, r0
     * is invalid, avoid leaking this fact through the size of the
     * output: use the maximum message size that fits in the output
     * buffer. Do it without branches to avoid leaking the padding
     * validity through timing. RSA keys are small enough that all the
     * size_t values involved fit in unsigned int. */
    plaintext_size = if_int( bad,
   d712a:	1eef      	subs	r7, r5, #3
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   d712c:	17db      	asrs	r3, r3, #31
     * is invalid, avoid leaking this fact through the size of the
     * output: use the maximum message size that fits in the output
     * buffer. Do it without branches to avoid leaking the padding
     * validity through timing. RSA keys are small enough that all the
     * size_t values involved fit in unsigned int. */
    plaintext_size = if_int( bad,
   d712e:	1a7f      	subs	r7, r7, r1
 * \return          \c if1 if \p cond is nonzero, otherwise \c if0.
 */
static unsigned if_int( unsigned cond, unsigned if1, unsigned if0 )
{
    unsigned mask = all_or_nothing_int( cond );
    return( ( mask & if1 ) | (~mask & if0 ) );
   d7130:	2b00      	cmp	r3, #0
   d7132:	bf18      	it	ne
   d7134:	4617      	movne	r7, r2
 * \return          \c 1 if `size > max`.
 */
static unsigned size_greater_than( size_t size, size_t max )
{
    /* Return the sign bit (1 for negative) of (max - size). */
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
   d7136:	1bd1      	subs	r1, r2, r7
   d7138:	0fc9      	lsrs	r1, r1, #31
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   d713a:	f1c1 0e00 	rsb	lr, r1, #0
     * data that we're about to copy to the output buffer.
     * We need to copy the same amount of data
     * from the same buffer whether the padding is good or not to
     * avoid leaking the padding validity through overall timing or
     * through memory or cache access patterns. */
    bad = all_or_nothing_int( bad | output_too_large );
   d713e:	4308      	orrs	r0, r1
   d7140:	f40e 4488 	and.w	r4, lr, #17408	; 0x4400
     * - OUTPUT_TOO_LARGE if the padding is good but the decrypted
     *   plaintext does not fit in the output buffer.
     * - 0 if the padding is correct. */
    ret = - (int) if_int( bad, - MBEDTLS_ERR_RSA_INVALID_PADDING,
                  if_int( output_too_large, - MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE,
                          0 ) );
   d7144:	2b00      	cmp	r3, #0
   d7146:	bf18      	it	ne
   d7148:	f44f 4482 	movne.w	r4, #16640	; 0x4100
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   d714c:	4243      	negs	r3, r0
   d714e:	4318      	orrs	r0, r3
   d7150:	17c0      	asrs	r0, r0, #31
     * - OUTPUT_TOO_LARGE if the padding is good but the decrypted
     *   plaintext does not fit in the output buffer.
     * - 0 if the padding is correct. */
    ret = - (int) if_int( bad, - MBEDTLS_ERR_RSA_INVALID_PADDING,
                  if_int( output_too_large, - MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE,
                          0 ) );
   d7152:	4264      	negs	r4, r4
   d7154:	f10d 0313 	add.w	r3, sp, #19
     * from the same buffer whether the padding is good or not to
     * avoid leaking the padding validity through overall timing or
     * through memory or cache access patterns. */
    bad = all_or_nothing_int( bad | output_too_large );
    for( i = 11; i < ilen; i++ )
        buf[i] &= ~bad;
   d7158:	43c0      	mvns	r0, r0
   d715a:	7819      	ldrb	r1, [r3, #0]
   d715c:	4001      	ands	r1, r0
   d715e:	f803 1b01 	strb.w	r1, [r3], #1
     * We need to copy the same amount of data
     * from the same buffer whether the padding is good or not to
     * avoid leaking the padding validity through overall timing or
     * through memory or cache access patterns. */
    bad = all_or_nothing_int( bad | output_too_large );
    for( i = 11; i < ilen; i++ )
   d7162:	1b99      	subs	r1, r3, r6
   d7164:	428d      	cmp	r5, r1
   d7166:	d8f8      	bhi.n	d715a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x11a>
     * the working buffer, i.e. make it start plaintext_max_size from
     * the end of the buffer. Do this with a memory access trace that
     * does not depend on the plaintext size. After this move, the
     * starting location of the plaintext is no longer sensitive
     * information. */
    mem_move_to_left( buf + ilen - plaintext_max_size,
   d7168:	1aa9      	subs	r1, r5, r2
 * \return          \c if1 if \p cond is nonzero, otherwise \c if0.
 */
static unsigned if_int( unsigned cond, unsigned if1, unsigned if0 )
{
    unsigned mask = all_or_nothing_int( cond );
    return( ( mask & if1 ) | (~mask & if0 ) );
   d716a:	f1be 0f00 	cmp.w	lr, #0
   d716e:	bf18      	it	ne
   d7170:	4617      	movne	r7, r2
     * the working buffer, i.e. make it start plaintext_max_size from
     * the end of the buffer. Do this with a memory access trace that
     * does not depend on the plaintext size. After this move, the
     * starting location of the plaintext is no longer sensitive
     * information. */
    mem_move_to_left( buf + ilen - plaintext_max_size,
   d7172:	4431      	add	r1, r6
                              size_t total,
                              size_t offset )
{
    volatile unsigned char *buf = (volatile unsigned char *)start;
    size_t i, n;
    if( total == 0 )
   d7174:	b93a      	cbnz	r2, d7186 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x146>
                      plaintext_max_size,
                      plaintext_max_size - plaintext_size );

    /* Finally copy the decrypted plaintext plus trailing zeros
     * into the output buffer. */
    memcpy( output, buf + ilen - plaintext_max_size, plaintext_max_size );
   d7176:	f8dd 0430 	ldr.w	r0, [sp, #1072]	; 0x430
   d717a:	f00f fee8 	bl	e6f4e <memcpy>

    /* Report the amount of data we copied to the output buffer. In case
     * of errors (bad padding or output too large), the value of *olen
     * when this function returns is not specified. Making it equivalent
     * to the good case limits the risks of leaking the padding validity. */
    *olen = plaintext_size;
   d717e:	f8dd 3428 	ldr.w	r3, [sp, #1064]	; 0x428
   d7182:	601f      	str	r7, [r3, #0]
   d7184:	e020      	b.n	d71c8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x188>
    {
        unsigned no_op = size_greater_than( total - offset, i );
        /* The first `total - offset` passes are a no-op. The last
         * `offset` passes shift the data one byte to the left and
         * zero out the last byte. */
        for( n = 0; n < total - 1; n++ )
   d7186:	f102 38ff 	add.w	r8, r2, #4294967295
                              size_t total,
                              size_t offset )
{
    volatile unsigned char *buf = (volatile unsigned char *)start;
    size_t i, n;
    if( total == 0 )
   d718a:	2500      	movs	r5, #0
        {
            unsigned char current = buf[n];
            unsigned char next = buf[n+1];
            buf[n] = if_int( no_op, current, next );
        }
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
   d718c:	eb01 0c08 	add.w	ip, r1, r8
 * \return          \c 1 if `size > max`.
 */
static unsigned size_greater_than( size_t size, size_t max )
{
    /* Return the sign bit (1 for negative) of (max - size). */
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
   d7190:	1beb      	subs	r3, r5, r7
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   d7192:	17db      	asrs	r3, r3, #31
    {
        unsigned no_op = size_greater_than( total - offset, i );
        /* The first `total - offset` passes are a no-op. The last
         * `offset` passes shift the data one byte to the left and
         * zero out the last byte. */
        for( n = 0; n < total - 1; n++ )
   d7194:	2000      	movs	r0, #0
   d7196:	4580      	cmp	r8, r0
   d7198:	d90c      	bls.n	d71b4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x174>
        {
            unsigned char current = buf[n];
   d719a:	f811 e000 	ldrb.w	lr, [r1, r0]
   d719e:	eb01 0900 	add.w	r9, r1, r0
            unsigned char next = buf[n+1];
   d71a2:	3001      	adds	r0, #1
   d71a4:	f811 a000 	ldrb.w	sl, [r1, r0]
            buf[n] = if_int( no_op, current, next );
   d71a8:	2b00      	cmp	r3, #0
   d71aa:	bf08      	it	eq
   d71ac:	46d6      	moveq	lr, sl
   d71ae:	f889 e000 	strb.w	lr, [r9]
   d71b2:	e7f0      	b.n	d7196 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x156>
        }
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
   d71b4:	f89c 0000 	ldrb.w	r0, [ip]
{
    volatile unsigned char *buf = (volatile unsigned char *)start;
    size_t i, n;
    if( total == 0 )
        return;
    for( i = 0; i < total; i++ )
   d71b8:	3501      	adds	r5, #1
        {
            unsigned char current = buf[n];
            unsigned char next = buf[n+1];
            buf[n] = if_int( no_op, current, next );
        }
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
   d71ba:	4003      	ands	r3, r0
   d71bc:	b2db      	uxtb	r3, r3
{
    volatile unsigned char *buf = (volatile unsigned char *)start;
    size_t i, n;
    if( total == 0 )
        return;
    for( i = 0; i < total; i++ )
   d71be:	42aa      	cmp	r2, r5
        {
            unsigned char current = buf[n];
            unsigned char next = buf[n+1];
            buf[n] = if_int( no_op, current, next );
        }
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
   d71c0:	f88c 3000 	strb.w	r3, [ip]
{
    volatile unsigned char *buf = (volatile unsigned char *)start;
    size_t i, n;
    if( total == 0 )
        return;
    for( i = 0; i < total; i++ )
   d71c4:	d1e4      	bne.n	d7190 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x150>
   d71c6:	e7d6      	b.n	d7176 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x136>
     * when this function returns is not specified. Making it equivalent
     * to the good case limits the risks of leaking the padding validity. */
    *olen = plaintext_size;

cleanup:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
   d71c8:	4630      	mov	r0, r6
   d71ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
   d71ce:	f003 f987 	bl	da4e0 <mbedtls_platform_zeroize>

    return( ret );
   d71d2:	4620      	mov	r0, r4
   d71d4:	e000      	b.n	d71d8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x198>
    plaintext_max_size = ( output_max_len > ilen - 11 ?
                           ilen - 11 :
                           output_max_len );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d71d6:	4802      	ldr	r0, [pc, #8]	; (d71e0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1a0>)

cleanup:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );

    return( ret );
}
   d71d8:	f50d 6d81 	add.w	sp, sp, #1032	; 0x408
   d71dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d71e0:	ffffbf80 	.word	0xffffbf80

000d71e4 <mbedtls_rsa_pkcs1_decrypt>:
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
   d71e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d71e6:	b087      	sub	sp, #28
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output_max_len == 0 || output != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( olen != NULL );

    switch( ctx->padding )
   d71e8:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
   d71ec:	ac0c      	add	r4, sp, #48	; 0x30
   d71ee:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output_max_len == 0 || output != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( olen != NULL );

    switch( ctx->padding )
   d71f0:	f1be 0f00 	cmp.w	lr, #0
   d71f4:	d00c      	beq.n	d7210 <mbedtls_rsa_pkcs1_decrypt+0x2c>
   d71f6:	f1be 0f01 	cmp.w	lr, #1
   d71fa:	d112      	bne.n	d7222 <mbedtls_rsa_pkcs1_decrypt+0x3e>

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsaes_oaep_decrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           olen, input, output,
                                           output_max_len );
   d71fc:	9402      	str	r4, [sp, #8]
   d71fe:	2400      	movs	r4, #0
   d7200:	9705      	str	r7, [sp, #20]
   d7202:	9604      	str	r6, [sp, #16]
   d7204:	9503      	str	r5, [sp, #12]
   d7206:	9401      	str	r4, [sp, #4]
   d7208:	9400      	str	r4, [sp, #0]
   d720a:	f7ff fe4b 	bl	d6ea4 <mbedtls_rsa_rsaes_oaep_decrypt>
   d720e:	e009      	b.n	d7224 <mbedtls_rsa_pkcs1_decrypt+0x40>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
                                                input, output, output_max_len );
   d7210:	970f      	str	r7, [sp, #60]	; 0x3c
   d7212:	960e      	str	r6, [sp, #56]	; 0x38
   d7214:	950d      	str	r5, [sp, #52]	; 0x34
   d7216:	940c      	str	r4, [sp, #48]	; 0x30
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   d7218:	b007      	add	sp, #28
   d721a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
                                                input, output, output_max_len );
   d721e:	f7ff bf0f 	b.w	d7040 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
                                           olen, input, output,
                                           output_max_len );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   d7222:	4801      	ldr	r0, [pc, #4]	; (d7228 <mbedtls_rsa_pkcs1_decrypt+0x44>)
    }
}
   d7224:	b007      	add	sp, #28
   d7226:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7228:	ffffbf00 	.word	0xffffbf00

000d722c <mbedtls_rsa_rsassa_pss_sign>:
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
   d722c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7230:	b09f      	sub	sp, #124	; 0x7c
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d7232:	2b01      	cmp	r3, #1
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
   d7234:	4681      	mov	r9, r0
   d7236:	468b      	mov	fp, r1
   d7238:	9205      	str	r2, [sp, #20]
   d723a:	9306      	str	r3, [sp, #24]
   d723c:	f89d 00a0 	ldrb.w	r0, [sp, #160]	; 0xa0
   d7240:	9d2b      	ldr	r5, [sp, #172]	; 0xac
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d7242:	d105      	bne.n	d7250 <mbedtls_rsa_rsassa_pss_sign+0x24>
   d7244:	f8d9 30a4 	ldr.w	r3, [r9, #164]	; 0xa4
   d7248:	2b01      	cmp	r3, #1
   d724a:	d001      	beq.n	d7250 <mbedtls_rsa_rsassa_pss_sign+0x24>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d724c:	485c      	ldr	r0, [pc, #368]	; (d73c0 <mbedtls_rsa_rsassa_pss_sign+0x194>)
   d724e:	e0b4      	b.n	d73ba <mbedtls_rsa_rsassa_pss_sign+0x18e>

    if( f_rng == NULL )
   d7250:	f1bb 0f00 	cmp.w	fp, #0
   d7254:	d0fa      	beq.n	d724c <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
   d7256:	f8d9 4004 	ldr.w	r4, [r9, #4]

    if( md_alg != MBEDTLS_MD_NONE )
   d725a:	b130      	cbz	r0, d726a <mbedtls_rsa_rsassa_pss_sign+0x3e>
    {
        /* Gather length of hash to sign */
        md_info = mbedtls_md_info_from_type( md_alg );
   d725c:	f004 ffe4 	bl	dc228 <mbedtls_md_info_from_type>
        if( md_info == NULL )
   d7260:	2800      	cmp	r0, #0
   d7262:	d0f3      	beq.n	d724c <mbedtls_rsa_rsassa_pss_sign+0x20>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
   d7264:	f005 f918 	bl	dc498 <mbedtls_md_get_size>
   d7268:	9029      	str	r0, [sp, #164]	; 0xa4
    }

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
   d726a:	f899 00a8 	ldrb.w	r0, [r9, #168]	; 0xa8
   d726e:	f004 ffdb 	bl	dc228 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   d7272:	9007      	str	r0, [sp, #28]
   d7274:	2800      	cmp	r0, #0
   d7276:	d0e9      	beq.n	d724c <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
   d7278:	f005 f90e 	bl	dc498 <mbedtls_md_get_size>
     * enough room, use the maximum salt length that fits. The constraint is
     * that the hash length plus the salt length plus 2 bytes must be at most
     * the key length. This complies with FIPS 186-4 §5.5 (e) and RFC 8017
     * (PKCS#1 v2.2) §9.1.1 step 3. */
    min_slen = hlen - 2;
    if( olen < hlen + min_slen + 2 )
   d727c:	0043      	lsls	r3, r0, #1
   d727e:	429c      	cmp	r4, r3

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
   d7280:	4682      	mov	sl, r0
     * enough room, use the maximum salt length that fits. The constraint is
     * that the hash length plus the salt length plus 2 bytes must be at most
     * the key length. This complies with FIPS 186-4 §5.5 (e) and RFC 8017
     * (PKCS#1 v2.2) §9.1.1 step 3. */
    min_slen = hlen - 2;
    if( olen < hlen + min_slen + 2 )
   d7282:	d3e3      	bcc.n	d724c <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    else if( olen >= hlen + hlen + 2 )
   d7284:	3302      	adds	r3, #2
   d7286:	429c      	cmp	r4, r3
        slen = hlen;
    else
        slen = olen - hlen - 2;
   d7288:	bf3a      	itte	cc
   d728a:	f1a4 0802 	subcc.w	r8, r4, #2
   d728e:	ebc0 0808 	rsbcc	r8, r0, r8
     * (PKCS#1 v2.2) §9.1.1 step 3. */
    min_slen = hlen - 2;
    if( olen < hlen + min_slen + 2 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    else if( olen >= hlen + hlen + 2 )
        slen = hlen;
   d7292:	4680      	movcs	r8, r0
    else
        slen = olen - hlen - 2;

    memset( sig, 0, olen );
   d7294:	4622      	mov	r2, r4
   d7296:	2100      	movs	r1, #0
   d7298:	4628      	mov	r0, r5
   d729a:	f00f fe7e 	bl	e6f9a <memset>

    /* Generate salt of length slen */
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
   d729e:	4642      	mov	r2, r8
   d72a0:	a90e      	add	r1, sp, #56	; 0x38
   d72a2:	9805      	ldr	r0, [sp, #20]
   d72a4:	47d8      	blx	fp
   d72a6:	b110      	cbz	r0, d72ae <mbedtls_rsa_rsassa_pss_sign+0x82>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
   d72a8:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
   d72ac:	e085      	b.n	d73ba <mbedtls_rsa_rsassa_pss_sign+0x18e>

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   d72ae:	f109 0308 	add.w	r3, r9, #8
   d72b2:	9009      	str	r0, [sp, #36]	; 0x24
   d72b4:	4618      	mov	r0, r3
   d72b6:	9303      	str	r3, [sp, #12]
   d72b8:	f009 f812 	bl	e02e0 <mbedtls_mpi_bitlen>
    p += olen - hlen - slen - 2;
   d72bc:	ebca 0304 	rsb	r3, sl, r4
   d72c0:	ebc8 0203 	rsb	r2, r8, r3
    *p++ = 0x01;
   d72c4:	1e56      	subs	r6, r2, #1
   d72c6:	442a      	add	r2, r5
   d72c8:	2101      	movs	r1, #1
   d72ca:	442e      	add	r6, r5
   d72cc:	f802 1c02 	strb.w	r1, [r2, #-2]
    /* Generate salt of length slen */
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   d72d0:	9008      	str	r0, [sp, #32]
    p += olen - hlen - slen - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
   d72d2:	4642      	mov	r2, r8
   d72d4:	a90e      	add	r1, sp, #56	; 0x38
    p += slen;

    mbedtls_md_init( &md_ctx );
   d72d6:	af0b      	add	r7, sp, #44	; 0x2c

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen - slen - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
   d72d8:	4630      	mov	r0, r6
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen - slen - 2;
   d72da:	9304      	str	r3, [sp, #16]
    *p++ = 0x01;
    memcpy( p, salt, slen );
   d72dc:	f00f fe37 	bl	e6f4e <memcpy>
    p += slen;

    mbedtls_md_init( &md_ctx );
   d72e0:	4638      	mov	r0, r7
   d72e2:	f004 ffad 	bl	dc240 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   d72e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d72e8:	9907      	ldr	r1, [sp, #28]
   d72ea:	461a      	mov	r2, r3
   d72ec:	4638      	mov	r0, r7
   d72ee:	f004 ffc7 	bl	dc280 <mbedtls_md_setup>
   d72f2:	4602      	mov	r2, r0
   d72f4:	2800      	cmp	r0, #0
   d72f6:	d149      	bne.n	d738c <mbedtls_rsa_rsassa_pss_sign+0x160>
        goto exit;

    /* Generate H = Hash( M' ) */
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
   d72f8:	4638      	mov	r0, r7
   d72fa:	f004 ffe3 	bl	dc2c4 <mbedtls_md_starts>
   d72fe:	4602      	mov	r2, r0
   d7300:	2800      	cmp	r0, #0
   d7302:	d143      	bne.n	d738c <mbedtls_rsa_rsassa_pss_sign+0x160>
    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen - slen - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
    p += slen;
   d7304:	4446      	add	r6, r8
        goto exit;

    /* Generate H = Hash( M' ) */
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, p, 8 ) ) != 0 )
   d7306:	2208      	movs	r2, #8
   d7308:	4631      	mov	r1, r6
   d730a:	4638      	mov	r0, r7
   d730c:	f004 ffe4 	bl	dc2d8 <mbedtls_md_update>
   d7310:	4602      	mov	r2, r0
   d7312:	2800      	cmp	r0, #0
   d7314:	d13a      	bne.n	d738c <mbedtls_rsa_rsassa_pss_sign+0x160>
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, hash, hashlen ) ) != 0 )
   d7316:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   d7318:	992a      	ldr	r1, [sp, #168]	; 0xa8
   d731a:	4638      	mov	r0, r7
   d731c:	f004 ffdc 	bl	dc2d8 <mbedtls_md_update>
   d7320:	4602      	mov	r2, r0
   d7322:	bb98      	cbnz	r0, d738c <mbedtls_rsa_rsassa_pss_sign+0x160>
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, salt, slen ) ) != 0 )
   d7324:	4642      	mov	r2, r8
   d7326:	a90e      	add	r1, sp, #56	; 0x38
   d7328:	4638      	mov	r0, r7
   d732a:	f004 ffd5 	bl	dc2d8 <mbedtls_md_update>
   d732e:	4602      	mov	r2, r0
   d7330:	bb60      	cbnz	r0, d738c <mbedtls_rsa_rsassa_pss_sign+0x160>
        goto exit;
    if( ( ret = mbedtls_md_finish( &md_ctx, p ) ) != 0 )
   d7332:	4631      	mov	r1, r6
   d7334:	4638      	mov	r0, r7
   d7336:	f004 ffd9 	bl	dc2ec <mbedtls_md_finish>
   d733a:	4602      	mov	r2, r0
   d733c:	bb30      	cbnz	r0, d738c <mbedtls_rsa_rsassa_pss_sign+0x160>
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    size_t slen, min_slen, hlen, offset = 0;
   d733e:	9b08      	ldr	r3, [sp, #32]
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
   d7340:	9700      	str	r7, [sp, #0]
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    size_t slen, min_slen, hlen, offset = 0;
   d7342:	3b01      	subs	r3, #1
   d7344:	f013 0f07 	tst.w	r3, #7
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
   d7348:	9b04      	ldr	r3, [sp, #16]
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    size_t slen, min_slen, hlen, offset = 0;
   d734a:	bf0c      	ite	eq
   d734c:	2001      	moveq	r0, #1
   d734e:	2000      	movne	r0, #0
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
   d7350:	1e59      	subs	r1, r3, #1
   d7352:	4632      	mov	r2, r6
   d7354:	1a09      	subs	r1, r1, r0
   d7356:	4653      	mov	r3, sl
   d7358:	4428      	add	r0, r5
   d735a:	f7fe ffdb 	bl	d6314 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
   d735e:	4602      	mov	r2, r0
   d7360:	b9a0      	cbnz	r0, d738c <mbedtls_rsa_rsassa_pss_sign+0x160>
   d7362:	9004      	str	r0, [sp, #16]
                          &md_ctx ) ) != 0 )
        goto exit;

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   d7364:	9803      	ldr	r0, [sp, #12]
   d7366:	f008 ffbb 	bl	e02e0 <mbedtls_mpi_bitlen>
    sig[0] &= 0xFF >> ( olen * 8 - msb );
   d736a:	ebc0 00c4 	rsb	r0, r0, r4, lsl #3
   d736e:	782b      	ldrb	r3, [r5, #0]
   d7370:	3001      	adds	r0, #1
   d7372:	24ff      	movs	r4, #255	; 0xff
   d7374:	fa44 f000 	asr.w	r0, r4, r0
   d7378:	4018      	ands	r0, r3

    p += hlen;
    *p++ = 0xBC;
   d737a:	23bc      	movs	r3, #188	; 0xbc
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
                          &md_ctx ) ) != 0 )
        goto exit;

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    sig[0] &= 0xFF >> ( olen * 8 - msb );
   d737c:	7028      	strb	r0, [r5, #0]

    p += hlen;
    *p++ = 0xBC;

    mbedtls_platform_zeroize( salt, sizeof( salt ) );
   d737e:	2140      	movs	r1, #64	; 0x40

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    sig[0] &= 0xFF >> ( olen * 8 - msb );

    p += hlen;
    *p++ = 0xBC;
   d7380:	f806 300a 	strb.w	r3, [r6, sl]

    mbedtls_platform_zeroize( salt, sizeof( salt ) );
   d7384:	a80e      	add	r0, sp, #56	; 0x38
   d7386:	f003 f8ab 	bl	da4e0 <mbedtls_platform_zeroize>
   d738a:	9a04      	ldr	r2, [sp, #16]
   d738c:	9203      	str	r2, [sp, #12]

exit:
    mbedtls_md_free( &md_ctx );
   d738e:	a80b      	add	r0, sp, #44	; 0x2c
   d7390:	f004 ff5b 	bl	dc24a <mbedtls_md_free>

    if( ret != 0 )
   d7394:	9a03      	ldr	r2, [sp, #12]
   d7396:	b97a      	cbnz	r2, d73b8 <mbedtls_rsa_rsassa_pss_sign+0x18c>
        return( ret );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, sig, sig )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
   d7398:	9b06      	ldr	r3, [sp, #24]
   d739a:	b92b      	cbnz	r3, d73a8 <mbedtls_rsa_rsassa_pss_sign+0x17c>
   d739c:	462a      	mov	r2, r5
   d739e:	4629      	mov	r1, r5
   d73a0:	4648      	mov	r0, r9
   d73a2:	f7ff fa65 	bl	d6870 <mbedtls_rsa_public>
   d73a6:	e008      	b.n	d73ba <mbedtls_rsa_rsassa_pss_sign+0x18e>
   d73a8:	9500      	str	r5, [sp, #0]
   d73aa:	462b      	mov	r3, r5
   d73ac:	9a05      	ldr	r2, [sp, #20]
   d73ae:	4659      	mov	r1, fp
   d73b0:	4648      	mov	r0, r9
   d73b2:	f7ff fa9f 	bl	d68f4 <mbedtls_rsa_private>
   d73b6:	e000      	b.n	d73ba <mbedtls_rsa_rsassa_pss_sign+0x18e>
   d73b8:	4610      	mov	r0, r2
}
   d73ba:	b01f      	add	sp, #124	; 0x7c
   d73bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d73c0:	ffffbf80 	.word	0xffffbf80

000d73c4 <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
   d73c4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d73c8:	2b01      	cmp	r3, #1
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
   d73ca:	4689      	mov	r9, r1
   d73cc:	a90b      	add	r1, sp, #44	; 0x2c
   d73ce:	4605      	mov	r5, r0
   d73d0:	4692      	mov	sl, r2
   d73d2:	461c      	mov	r4, r3
   d73d4:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
   d73d8:	c986      	ldmia	r1, {r1, r2, r7}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d73da:	d103      	bne.n	d73e4 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x20>
   d73dc:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   d73e0:	2b00      	cmp	r3, #0
   d73e2:	d14b      	bne.n	d747c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xb8>

    /*
     * Prepare PKCS1-v1.5 encoding (padding and hash identifier)
     */

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,
   d73e4:	9700      	str	r7, [sp, #0]
   d73e6:	686b      	ldr	r3, [r5, #4]
   d73e8:	f7fe ffe8 	bl	d63bc <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
   d73ec:	2800      	cmp	r0, #0
   d73ee:	d149      	bne.n	d7484 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>

    /*
     * Call respective RSA primitive
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
   d73f0:	b93c      	cbnz	r4, d7402 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x3e>
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
   d73f2:	463a      	mov	r2, r7
   d73f4:	4639      	mov	r1, r7
   d73f6:	4628      	mov	r0, r5
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
   d73f8:	b002      	add	sp, #8
   d73fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
   d73fe:	f7ff ba37 	b.w	d6870 <mbedtls_rsa_public>
     *
     * In order to prevent Lenstra's attack, make the signature in a
     * temporary buffer and check it before returning it.
     */

    sig_try = (unsigned char *)mbedtls_calloc( 1, ctx->len );
   d7402:	686c      	ldr	r4, [r5, #4]
   d7404:	2001      	movs	r0, #1
   d7406:	4621      	mov	r1, r4
   d7408:	f00f fc84 	bl	e6d14 <calloc>
    if( sig_try == NULL )
   d740c:	4606      	mov	r6, r0
   d740e:	b3b8      	cbz	r0, d7480 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

    verif = (unsigned char *)mbedtls_calloc( 1, ctx->len );
   d7410:	4621      	mov	r1, r4
   d7412:	2001      	movs	r0, #1
   d7414:	f00f fc7e 	bl	e6d14 <calloc>
    if( verif == NULL )
   d7418:	4680      	mov	r8, r0
   d741a:	b918      	cbnz	r0, d7424 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x60>
    {
        mbedtls_free( sig_try );
   d741c:	4630      	mov	r0, r6
   d741e:	f00d ffa5 	bl	e536c <free>
   d7422:	e02d      	b.n	d7480 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
   d7424:	9600      	str	r6, [sp, #0]
   d7426:	463b      	mov	r3, r7
   d7428:	4652      	mov	r2, sl
   d742a:	4649      	mov	r1, r9
   d742c:	4628      	mov	r0, r5
   d742e:	f7ff fa61 	bl	d68f4 <mbedtls_rsa_private>
   d7432:	4604      	mov	r4, r0
   d7434:	b9d0      	cbnz	r0, d746c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
   d7436:	4642      	mov	r2, r8
   d7438:	4631      	mov	r1, r6
   d743a:	4628      	mov	r0, r5
   d743c:	f7ff fa18 	bl	d6870 <mbedtls_rsa_public>
   d7440:	4604      	mov	r4, r0
   d7442:	b998      	cbnz	r0, d746c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
   d7444:	686d      	ldr	r5, [r5, #4]
static inline int mbedtls_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;
   d7446:	4603      	mov	r3, r0

    for( i = 0; i < n; i++ )
   d7448:	4602      	mov	r2, r0
   d744a:	42aa      	cmp	r2, r5
   d744c:	d007      	beq.n	d745e <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x9a>
        diff |= A[i] ^ B[i];
   d744e:	f818 0002 	ldrb.w	r0, [r8, r2]
   d7452:	5cb9      	ldrb	r1, [r7, r2]
   d7454:	4041      	eors	r1, r0
   d7456:	430b      	orrs	r3, r1
   d7458:	b2db      	uxtb	r3, r3
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
   d745a:	3201      	adds	r2, #1
   d745c:	e7f5      	b.n	d744a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x86>
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
   d745e:	b923      	cbnz	r3, d746a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa6>
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
        goto cleanup;
    }

    memcpy( sig, sig_try, ctx->len );
   d7460:	4631      	mov	r1, r6
   d7462:	4638      	mov	r0, r7
   d7464:	f00f fd73 	bl	e6f4e <memcpy>
   d7468:	e000      	b.n	d746c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
   d746a:	4c08      	ldr	r4, [pc, #32]	; (d748c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc8>)
    }

    memcpy( sig, sig_try, ctx->len );

cleanup:
    mbedtls_free( sig_try );
   d746c:	4630      	mov	r0, r6
   d746e:	f00d ff7d 	bl	e536c <free>
    mbedtls_free( verif );
   d7472:	4640      	mov	r0, r8
   d7474:	f00d ff7a 	bl	e536c <free>

    return( ret );
   d7478:	4620      	mov	r0, r4
   d747a:	e003      	b.n	d7484 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d747c:	4804      	ldr	r0, [pc, #16]	; (d7490 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xcc>)
   d747e:	e001      	b.n	d7484 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>
     * temporary buffer and check it before returning it.
     */

    sig_try = (unsigned char *)mbedtls_calloc( 1, ctx->len );
    if( sig_try == NULL )
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
   d7480:	f06f 000f 	mvn.w	r0, #15
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
   d7484:	b002      	add	sp, #8
   d7486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d748a:	bf00      	nop
   d748c:	ffffbd00 	.word	0xffffbd00
   d7490:	ffffbf80 	.word	0xffffbf80

000d7494 <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
   d7494:	b5f0      	push	{r4, r5, r6, r7, lr}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    switch( ctx->padding )
   d7496:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
   d749a:	f89d 4014 	ldrb.w	r4, [sp, #20]
   d749e:	ad06      	add	r5, sp, #24
   d74a0:	cde0      	ldmia	r5, {r5, r6, r7}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    switch( ctx->padding )
   d74a2:	f1be 0f00 	cmp.w	lr, #0
   d74a6:	d00a      	beq.n	d74be <mbedtls_rsa_pkcs1_sign+0x2a>
   d74a8:	f1be 0f01 	cmp.w	lr, #1
   d74ac:	d10f      	bne.n	d74ce <mbedtls_rsa_pkcs1_sign+0x3a>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
   d74ae:	9708      	str	r7, [sp, #32]
   d74b0:	9607      	str	r6, [sp, #28]
   d74b2:	9506      	str	r5, [sp, #24]
   d74b4:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   d74b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
   d74ba:	f7ff beb7 	b.w	d722c <mbedtls_rsa_rsassa_pss_sign>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
                                              hashlen, hash, sig );
   d74be:	9708      	str	r7, [sp, #32]
   d74c0:	9607      	str	r6, [sp, #28]
   d74c2:	9506      	str	r5, [sp, #24]
   d74c4:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   d74c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
                                              hashlen, hash, sig );
   d74ca:	f7ff bf7b 	b.w	d73c4 <mbedtls_rsa_rsassa_pkcs1_v15_sign>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   d74ce:	4801      	ldr	r0, [pc, #4]	; (d74d4 <mbedtls_rsa_pkcs1_sign+0x40>)
   d74d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d74d2:	bf00      	nop
   d74d4:	ffffbf00 	.word	0xffffbf00

000d74d8 <mbedtls_rsa_rsassa_pss_verify_ext>:
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
   d74d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d74dc:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d74e0:	2b01      	cmp	r3, #1
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
   d74e2:	4605      	mov	r5, r0
   d74e4:	f89d 8488 	ldrb.w	r8, [sp, #1160]	; 0x488
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d74e8:	d105      	bne.n	d74f6 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
   d74ea:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   d74ee:	2801      	cmp	r0, #1
   d74f0:	d001      	beq.n	d74f6 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d74f2:	4861      	ldr	r0, [pc, #388]	; (d7678 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a0>)
   d74f4:	e0bb      	b.n	d766e <mbedtls_rsa_rsassa_pss_verify_ext+0x196>

    siglen = ctx->len;
   d74f6:	686f      	ldr	r7, [r5, #4]

    if( siglen < 16 || siglen > sizeof( buf ) )
   d74f8:	f1a7 0010 	sub.w	r0, r7, #16
   d74fc:	f5b0 7f7c 	cmp.w	r0, #1008	; 0x3f0
   d7500:	d8f7      	bhi.n	d74f2 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
   d7502:	ae18      	add	r6, sp, #96	; 0x60
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
   d7504:	b933      	cbnz	r3, d7514 <mbedtls_rsa_rsassa_pss_verify_ext+0x3c>
   d7506:	4632      	mov	r2, r6
   d7508:	f8dd 149c 	ldr.w	r1, [sp, #1180]	; 0x49c
   d750c:	4628      	mov	r0, r5
   d750e:	f7ff f9af 	bl	d6870 <mbedtls_rsa_public>
   d7512:	e005      	b.n	d7520 <mbedtls_rsa_rsassa_pss_verify_ext+0x48>
   d7514:	9600      	str	r6, [sp, #0]
   d7516:	f8dd 349c 	ldr.w	r3, [sp, #1180]	; 0x49c
   d751a:	4628      	mov	r0, r5
   d751c:	f7ff f9ea 	bl	d68f4 <mbedtls_rsa_private>

    if( ret != 0 )
   d7520:	2800      	cmp	r0, #0
   d7522:	f040 80a4 	bne.w	d766e <mbedtls_rsa_rsassa_pss_verify_ext+0x196>
        return( ret );

    p = buf;

    if( buf[siglen - 1] != 0xBC )
   d7526:	1e7c      	subs	r4, r7, #1
   d7528:	5d33      	ldrb	r3, [r6, r4]
   d752a:	2bbc      	cmp	r3, #188	; 0xbc
   d752c:	f040 809e 	bne.w	d766c <mbedtls_rsa_rsassa_pss_verify_ext+0x194>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );

    if( md_alg != MBEDTLS_MD_NONE )
   d7530:	f1b8 0f00 	cmp.w	r8, #0
   d7534:	d008      	beq.n	d7548 <mbedtls_rsa_rsassa_pss_verify_ext+0x70>
    {
        /* Gather length of hash to sign */
        md_info = mbedtls_md_info_from_type( md_alg );
   d7536:	4640      	mov	r0, r8
   d7538:	f004 fe76 	bl	dc228 <mbedtls_md_info_from_type>
        if( md_info == NULL )
   d753c:	2800      	cmp	r0, #0
   d753e:	d0d8      	beq.n	d74f2 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
   d7540:	f004 ffaa 	bl	dc498 <mbedtls_md_get_size>
   d7544:	f8cd 048c 	str.w	r0, [sp, #1164]	; 0x48c
    }

    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
   d7548:	f89d 0494 	ldrb.w	r0, [sp, #1172]	; 0x494
   d754c:	f004 fe6c 	bl	dc228 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   d7550:	4681      	mov	r9, r0
   d7552:	2800      	cmp	r0, #0
   d7554:	d0cd      	beq.n	d74f2 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
   d7556:	f004 ff9f 	bl	dc498 <mbedtls_md_get_size>

    memset( zeros, 0, 8 );
   d755a:	2300      	movs	r3, #0

    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
   d755c:	4682      	mov	sl, r0
    memset( zeros, 0, 8 );

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   d755e:	f105 0008 	add.w	r0, r5, #8
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );

    memset( zeros, 0, 8 );
   d7562:	9303      	str	r3, [sp, #12]
   d7564:	9304      	str	r3, [sp, #16]

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   d7566:	f008 febb 	bl	e02e0 <mbedtls_mpi_bitlen>

    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
   d756a:	00fb      	lsls	r3, r7, #3
    memset( zeros, 0, 8 );

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   d756c:	f100 38ff 	add.w	r8, r0, #4294967295

    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
   d7570:	7832      	ldrb	r2, [r6, #0]
   d7572:	f1c3 0308 	rsb	r3, r3, #8
   d7576:	4443      	add	r3, r8
   d7578:	fa52 f303 	asrs.w	r3, r2, r3
   d757c:	d1b9      	bne.n	d74f2 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
   d757e:	f018 0f07 	tst.w	r8, #7
    {
        p++;
        siglen -= 1;
   d7582:	bf08      	it	eq
   d7584:	4627      	moveq	r7, r4
    }

    if( siglen < hlen + 2 )
   d7586:	f10a 0302 	add.w	r3, sl, #2
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
    {
        p++;
   d758a:	bf0c      	ite	eq
   d758c:	f10d 0561 	addeq.w	r5, sp, #97	; 0x61
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );

    if( ret != 0 )
        return( ret );

    p = buf;
   d7590:	4635      	movne	r5, r6
    {
        p++;
        siglen -= 1;
    }

    if( siglen < hlen + 2 )
   d7592:	429f      	cmp	r7, r3
   d7594:	d3ad      	bcc.n	d74f2 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    hash_start = p + siglen - hlen - 1;

    mbedtls_md_init( &md_ctx );
   d7596:	ac05      	add	r4, sp, #20
   d7598:	4620      	mov	r0, r4
   d759a:	f004 fe51 	bl	dc240 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   d759e:	2200      	movs	r2, #0
   d75a0:	4649      	mov	r1, r9
   d75a2:	4620      	mov	r0, r4
   d75a4:	f004 fe6c 	bl	dc280 <mbedtls_md_setup>
   d75a8:	4683      	mov	fp, r0
   d75aa:	2800      	cmp	r0, #0
   d75ac:	d159      	bne.n	d7662 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        siglen -= 1;
    }

    if( siglen < hlen + 2 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    hash_start = p + siglen - hlen - 1;
   d75ae:	ea6f 010a 	mvn.w	r1, sl
   d75b2:	4439      	add	r1, r7
   d75b4:	eb05 0901 	add.w	r9, r5, r1

    mbedtls_md_init( &md_ctx );
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
        goto exit;

    ret = mgf_mask( p, siglen - hlen - 1, hash_start, hlen, &md_ctx );
   d75b8:	9400      	str	r4, [sp, #0]
   d75ba:	4653      	mov	r3, sl
   d75bc:	464a      	mov	r2, r9
   d75be:	4628      	mov	r0, r5
   d75c0:	f7fe fea8 	bl	d6314 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
    if( ret != 0 )
   d75c4:	4683      	mov	fp, r0
   d75c6:	2800      	cmp	r0, #0
   d75c8:	d14b      	bne.n	d7662 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;

    buf[0] &= 0xFF >> ( siglen * 8 - msb );
   d75ca:	ebc8 07c7 	rsb	r7, r8, r7, lsl #3
   d75ce:	7833      	ldrb	r3, [r6, #0]
   d75d0:	f04f 08ff 	mov.w	r8, #255	; 0xff
   d75d4:	fa48 f707 	asr.w	r7, r8, r7
   d75d8:	401f      	ands	r7, r3
   d75da:	7037      	strb	r7, [r6, #0]

    while( p < hash_start - 1 && *p == 0 )
   d75dc:	f109 32ff 	add.w	r2, r9, #4294967295
   d75e0:	4295      	cmp	r5, r2
   d75e2:	4629      	mov	r1, r5
   d75e4:	d203      	bcs.n	d75ee <mbedtls_rsa_rsassa_pss_verify_ext+0x116>
   d75e6:	780b      	ldrb	r3, [r1, #0]
   d75e8:	3501      	adds	r5, #1
   d75ea:	2b00      	cmp	r3, #0
   d75ec:	d0f8      	beq.n	d75e0 <mbedtls_rsa_rsassa_pss_verify_ext+0x108>
        p++;

    if( *p++ != 0x01 )
   d75ee:	780b      	ldrb	r3, [r1, #0]
   d75f0:	2b01      	cmp	r3, #1
   d75f2:	d134      	bne.n	d765e <mbedtls_rsa_rsassa_pss_verify_ext+0x186>
        goto exit;
    }

    observed_salt_len = hash_start - p;

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
   d75f4:	f8dd 3498 	ldr.w	r3, [sp, #1176]	; 0x498
    buf[0] &= 0xFF >> ( siglen * 8 - msb );

    while( p < hash_start - 1 && *p == 0 )
        p++;

    if( *p++ != 0x01 )
   d75f8:	1c4d      	adds	r5, r1, #1
        goto exit;
    }

    observed_salt_len = hash_start - p;

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
   d75fa:	1c5a      	adds	r2, r3, #1
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto exit;
    }

    observed_salt_len = hash_start - p;
   d75fc:	ebc5 0609 	rsb	r6, r5, r9

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
   d7600:	d001      	beq.n	d7606 <mbedtls_rsa_rsassa_pss_verify_ext+0x12e>
   d7602:	429e      	cmp	r6, r3
   d7604:	d12b      	bne.n	d765e <mbedtls_rsa_rsassa_pss_verify_ext+0x186>
    }

    /*
     * Generate H = Hash( M' )
     */
    ret = mbedtls_md_starts( &md_ctx );
   d7606:	4620      	mov	r0, r4
   d7608:	f004 fe5c 	bl	dc2c4 <mbedtls_md_starts>
    if ( ret != 0 )
   d760c:	4683      	mov	fp, r0
   d760e:	bb40      	cbnz	r0, d7662 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, zeros, 8 );
   d7610:	2208      	movs	r2, #8
   d7612:	a903      	add	r1, sp, #12
   d7614:	4620      	mov	r0, r4
   d7616:	f004 fe5f 	bl	dc2d8 <mbedtls_md_update>
    if ( ret != 0 )
   d761a:	4683      	mov	fp, r0
   d761c:	bb08      	cbnz	r0, d7662 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, hash, hashlen );
   d761e:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
   d7622:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   d7626:	4620      	mov	r0, r4
   d7628:	f004 fe56 	bl	dc2d8 <mbedtls_md_update>
    if ( ret != 0 )
   d762c:	4683      	mov	fp, r0
   d762e:	b9c0      	cbnz	r0, d7662 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, p, observed_salt_len );
   d7630:	4632      	mov	r2, r6
   d7632:	4629      	mov	r1, r5
   d7634:	4620      	mov	r0, r4
   d7636:	f004 fe4f 	bl	dc2d8 <mbedtls_md_update>
    if ( ret != 0 )
   d763a:	4683      	mov	fp, r0
   d763c:	b988      	cbnz	r0, d7662 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_finish( &md_ctx, result );
   d763e:	a908      	add	r1, sp, #32
   d7640:	4620      	mov	r0, r4
   d7642:	f004 fe53 	bl	dc2ec <mbedtls_md_finish>
    if ( ret != 0 )
   d7646:	4683      	mov	fp, r0
   d7648:	b958      	cbnz	r0, d7662 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;

    if( memcmp( hash_start, result, hlen ) != 0 )
   d764a:	4652      	mov	r2, sl
   d764c:	a908      	add	r1, sp, #32
   d764e:	4648      	mov	r0, r9
   d7650:	f00f fc6e 	bl	e6f30 <memcmp>
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
   d7654:	4a09      	ldr	r2, [pc, #36]	; (d767c <mbedtls_rsa_rsassa_pss_verify_ext+0x1a4>)
   d7656:	2800      	cmp	r0, #0
   d7658:	bf18      	it	ne
   d765a:	4693      	movne	fp, r2
   d765c:	e001      	b.n	d7662 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
    while( p < hash_start - 1 && *p == 0 )
        p++;

    if( *p++ != 0x01 )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
   d765e:	f8df b020 	ldr.w	fp, [pc, #32]	; d7680 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
        goto exit;
    }

exit:
    mbedtls_md_free( &md_ctx );
   d7662:	4620      	mov	r0, r4
   d7664:	f004 fdf1 	bl	dc24a <mbedtls_md_free>

    return( ret );
   d7668:	4658      	mov	r0, fp
   d766a:	e000      	b.n	d766e <mbedtls_rsa_rsassa_pss_verify_ext+0x196>
        return( ret );

    p = buf;

    if( buf[siglen - 1] != 0xBC )
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   d766c:	4804      	ldr	r0, [pc, #16]	; (d7680 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>)

exit:
    mbedtls_md_free( &md_ctx );

    return( ret );
}
   d766e:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
   d7672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7676:	bf00      	nop
   d7678:	ffffbf80 	.word	0xffffbf80
   d767c:	ffffbc80 	.word	0xffffbc80
   d7680:	ffffbf00 	.word	0xffffbf00

000d7684 <mbedtls_rsa_rsassa_pss_verify>:
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
   d7684:	b570      	push	{r4, r5, r6, lr}
   d7686:	b086      	sub	sp, #24
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
   d7688:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
   d768c:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
                        hashlen == 0 ) ||
                      hash != NULL );

    mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
                             ? (mbedtls_md_type_t) ctx->hash_id
                             : md_alg;
   d7690:	b10c      	cbz	r4, d7696 <mbedtls_rsa_rsassa_pss_verify+0x12>
   d7692:	b2e4      	uxtb	r4, r4
   d7694:	e000      	b.n	d7698 <mbedtls_rsa_rsassa_pss_verify+0x14>
   d7696:	462c      	mov	r4, r5

    return( mbedtls_rsa_rsassa_pss_verify_ext( ctx, f_rng, p_rng, mode,
                                       md_alg, hashlen, hash,
                                       mgf1_hash_id, MBEDTLS_RSA_SALT_LEN_ANY,
                                       sig ) );
   d7698:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   d769a:	9403      	str	r4, [sp, #12]
   d769c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d769e:	9605      	str	r6, [sp, #20]
   d76a0:	9402      	str	r4, [sp, #8]
   d76a2:	f04f 36ff 	mov.w	r6, #4294967295
   d76a6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   d76a8:	9604      	str	r6, [sp, #16]
   d76aa:	9401      	str	r4, [sp, #4]
   d76ac:	9500      	str	r5, [sp, #0]
   d76ae:	f7ff ff13 	bl	d74d8 <mbedtls_rsa_rsassa_pss_verify_ext>

}
   d76b2:	b006      	add	sp, #24
   d76b4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d76b8 <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
   d76b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
                        hashlen == 0 ) ||
                      hash != NULL );

    sig_len = ctx->len;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d76bc:	2b01      	cmp	r3, #1
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
   d76be:	4680      	mov	r8, r0
   d76c0:	468a      	mov	sl, r1
   d76c2:	4693      	mov	fp, r2
   d76c4:	4699      	mov	r9, r3
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    sig_len = ctx->len;
   d76c6:	6845      	ldr	r5, [r0, #4]

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d76c8:	d102      	bne.n	d76d0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x18>
   d76ca:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   d76ce:	b9eb      	cbnz	r3, d770c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x54>

    /*
     * Prepare expected PKCS1 v1.5 encoding of hash.
     */

    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
   d76d0:	4629      	mov	r1, r5
   d76d2:	2001      	movs	r0, #1
   d76d4:	f00f fb1e 	bl	e6d14 <calloc>
   d76d8:	4606      	mov	r6, r0
   d76da:	b1c8      	cbz	r0, d7710 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x58>
   d76dc:	4629      	mov	r1, r5
   d76de:	2001      	movs	r0, #1
   d76e0:	f00f fb18 	bl	e6d14 <calloc>
   d76e4:	4607      	mov	r7, r0
   d76e6:	b9c0      	cbnz	r0, d771a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x62>
        ( encoded_expected = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL )
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
   d76e8:	f06f 040f 	mvn.w	r4, #15

cleanup:

    if( encoded != NULL )
    {
        mbedtls_platform_zeroize( encoded, sig_len );
   d76ec:	4630      	mov	r0, r6
   d76ee:	4629      	mov	r1, r5
   d76f0:	f002 fef6 	bl	da4e0 <mbedtls_platform_zeroize>
        mbedtls_free( encoded );
   d76f4:	4630      	mov	r0, r6
   d76f6:	f00d fe39 	bl	e536c <free>
    }

    if( encoded_expected != NULL )
   d76fa:	b167      	cbz	r7, d7716 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5e>
    {
        mbedtls_platform_zeroize( encoded_expected, sig_len );
   d76fc:	4638      	mov	r0, r7
   d76fe:	4629      	mov	r1, r5
   d7700:	f002 feee 	bl	da4e0 <mbedtls_platform_zeroize>
        mbedtls_free( encoded_expected );
   d7704:	4638      	mov	r0, r7
   d7706:	f00d fe31 	bl	e536c <free>
   d770a:	e004      	b.n	d7716 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5e>
                      hash != NULL );

    sig_len = ctx->len;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d770c:	481b      	ldr	r0, [pc, #108]	; (d777c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc4>)
   d770e:	e031      	b.n	d7774 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
     */

    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
        ( encoded_expected = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL )
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
   d7710:	f06f 000f 	mvn.w	r0, #15
   d7714:	e02e      	b.n	d7774 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
   d7716:	4620      	mov	r0, r4
   d7718:	e02c      	b.n	d7774 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
        goto cleanup;
    }

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,
   d771a:	9000      	str	r0, [sp, #0]
   d771c:	462b      	mov	r3, r5
   d771e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d7720:	990d      	ldr	r1, [sp, #52]	; 0x34
   d7722:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   d7726:	f7fe fe49 	bl	d63bc <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
   d772a:	4604      	mov	r4, r0
   d772c:	2800      	cmp	r0, #0
   d772e:	d1dd      	bne.n	d76ec <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
     * Apply RSA primitive to get what should be PKCS1 encoded hash.
     */

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, encoded )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
   d7730:	f1b9 0f00 	cmp.w	r9, #0
   d7734:	d105      	bne.n	d7742 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8a>
   d7736:	4632      	mov	r2, r6
   d7738:	990f      	ldr	r1, [sp, #60]	; 0x3c
   d773a:	4640      	mov	r0, r8
   d773c:	f7ff f898 	bl	d6870 <mbedtls_rsa_public>
   d7740:	e006      	b.n	d7750 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x98>
   d7742:	9600      	str	r6, [sp, #0]
   d7744:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d7746:	465a      	mov	r2, fp
   d7748:	4651      	mov	r1, sl
   d774a:	4640      	mov	r0, r8
   d774c:	f7ff f8d2 	bl	d68f4 <mbedtls_rsa_private>
   d7750:	4604      	mov	r4, r0
    if( ret != 0 )
   d7752:	2800      	cmp	r0, #0
   d7754:	d1ca      	bne.n	d76ec <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
   d7756:	4603      	mov	r3, r0
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
   d7758:	429d      	cmp	r5, r3
   d775a:	d006      	beq.n	d776a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb2>
        diff |= A[i] ^ B[i];
   d775c:	5cf0      	ldrb	r0, [r6, r3]
   d775e:	5cfa      	ldrb	r2, [r7, r3]
   d7760:	4050      	eors	r0, r2
   d7762:	4304      	orrs	r4, r0
   d7764:	b2e4      	uxtb	r4, r4
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
   d7766:	3301      	adds	r3, #1
   d7768:	e7f6      	b.n	d7758 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa0>
     */

    if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,
                                      sig_len ) ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
   d776a:	2c00      	cmp	r4, #0
   d776c:	4c04      	ldr	r4, [pc, #16]	; (d7780 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>)
   d776e:	bf08      	it	eq
   d7770:	2400      	moveq	r4, #0
   d7772:	e7bb      	b.n	d76ec <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
        mbedtls_platform_zeroize( encoded_expected, sig_len );
        mbedtls_free( encoded_expected );
    }

    return( ret );
}
   d7774:	b003      	add	sp, #12
   d7776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d777a:	bf00      	nop
   d777c:	ffffbf80 	.word	0xffffbf80
   d7780:	ffffbc80 	.word	0xffffbc80

000d7784 <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
   d7784:	b5f0      	push	{r4, r5, r6, r7, lr}
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    switch( ctx->padding )
   d7786:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
   d778a:	f89d 4014 	ldrb.w	r4, [sp, #20]
   d778e:	ad06      	add	r5, sp, #24
   d7790:	cde0      	ldmia	r5, {r5, r6, r7}
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    switch( ctx->padding )
   d7792:	f1be 0f00 	cmp.w	lr, #0
   d7796:	d00a      	beq.n	d77ae <mbedtls_rsa_pkcs1_verify+0x2a>
   d7798:	f1be 0f01 	cmp.w	lr, #1
   d779c:	d10f      	bne.n	d77be <mbedtls_rsa_pkcs1_verify+0x3a>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
   d779e:	9708      	str	r7, [sp, #32]
   d77a0:	9607      	str	r6, [sp, #28]
   d77a2:	9506      	str	r5, [sp, #24]
   d77a4:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   d77a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
   d77aa:	f7ff bf6b 	b.w	d7684 <mbedtls_rsa_rsassa_pss_verify>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
                                                hashlen, hash, sig );
   d77ae:	9708      	str	r7, [sp, #32]
   d77b0:	9607      	str	r6, [sp, #28]
   d77b2:	9506      	str	r5, [sp, #24]
   d77b4:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   d77b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
                                                hashlen, hash, sig );
   d77ba:	f7ff bf7d 	b.w	d76b8 <mbedtls_rsa_rsassa_pkcs1_v15_verify>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   d77be:	4801      	ldr	r0, [pc, #4]	; (d77c4 <mbedtls_rsa_pkcs1_verify+0x40>)
   d77c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d77c2:	bf00      	nop
   d77c4:	ffffbf00 	.word	0xffffbf00

000d77c8 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
   d77c8:	b510      	push	{r4, lr}
    if( ctx == NULL )
   d77ca:	4604      	mov	r4, r0
   d77cc:	b3a0      	cbz	r0, d7838 <mbedtls_rsa_free+0x70>
        return;

    mbedtls_mpi_free( &ctx->Vi );
   d77ce:	308c      	adds	r0, #140	; 0x8c
   d77d0:	f008 fc65 	bl	e009e <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
   d77d4:	f104 0098 	add.w	r0, r4, #152	; 0x98
   d77d8:	f008 fc61 	bl	e009e <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
   d77dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d77e0:	f008 fc5d 	bl	e009e <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
   d77e4:	f104 0020 	add.w	r0, r4, #32
   d77e8:	f008 fc59 	bl	e009e <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
   d77ec:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d77f0:	f008 fc55 	bl	e009e <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
   d77f4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d77f8:	f008 fc51 	bl	e009e <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
   d77fc:	f104 0014 	add.w	r0, r4, #20
   d7800:	f008 fc4d 	bl	e009e <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
   d7804:	f104 0008 	add.w	r0, r4, #8
   d7808:	f008 fc49 	bl	e009e <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
   d780c:	f104 0080 	add.w	r0, r4, #128	; 0x80
   d7810:	f008 fc45 	bl	e009e <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
   d7814:	f104 0074 	add.w	r0, r4, #116	; 0x74
   d7818:	f008 fc41 	bl	e009e <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
   d781c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   d7820:	f008 fc3d 	bl	e009e <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
   d7824:	f104 0050 	add.w	r0, r4, #80	; 0x50
   d7828:	f008 fc39 	bl	e009e <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
   d782c:	f104 0044 	add.w	r0, r4, #68	; 0x44
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
   d7830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
    mbedtls_mpi_free( &ctx->RP );
    mbedtls_mpi_free( &ctx->QP );
    mbedtls_mpi_free( &ctx->DQ );
    mbedtls_mpi_free( &ctx->DP );
   d7834:	f008 bc33 	b.w	e009e <mbedtls_mpi_free>
   d7838:	bd10      	pop	{r4, pc}

000d783a <_ZL12ecp_get_typePK17mbedtls_ecp_group>:
/*
 * Get the type of a curve
 */
static inline ecp_curve_type ecp_get_type( const mbedtls_ecp_group *grp )
{
    if( grp->G.X.p == NULL )
   d783a:	6b03      	ldr	r3, [r0, #48]	; 0x30
   d783c:	b12b      	cbz	r3, d784a <_ZL12ecp_get_typePK17mbedtls_ecp_group+0x10>
        return( ECP_TYPE_NONE );

    if( grp->G.Y.p == NULL )
   d783e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   d7840:	2b00      	cmp	r3, #0
        return( ECP_TYPE_MONTGOMERY );
    else
        return( ECP_TYPE_SHORT_WEIERSTRASS );
   d7842:	bf0c      	ite	eq
   d7844:	2002      	moveq	r0, #2
   d7846:	2001      	movne	r0, #1
   d7848:	4770      	bx	lr
 * Get the type of a curve
 */
static inline ecp_curve_type ecp_get_type( const mbedtls_ecp_group *grp )
{
    if( grp->G.X.p == NULL )
        return( ECP_TYPE_NONE );
   d784a:	4618      	mov	r0, r3

    if( grp->G.Y.p == NULL )
        return( ECP_TYPE_MONTGOMERY );
    else
        return( ECP_TYPE_SHORT_WEIERSTRASS );
}
   d784c:	4770      	bx	lr
	...

000d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>:
 * See the documentation of struct mbedtls_ecp_group.
 *
 * This function is in the critial loop for mbedtls_ecp_mul, so pay attention to perf.
 */
static int ecp_modp( mbedtls_mpi *N, const mbedtls_ecp_group *grp )
{
   d7850:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( grp->modp == NULL )
   d7852:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 * See the documentation of struct mbedtls_ecp_group.
 *
 * This function is in the critial loop for mbedtls_ecp_mul, so pay attention to perf.
 */
static int ecp_modp( mbedtls_mpi *N, const mbedtls_ecp_group *grp )
{
   d7854:	4604      	mov	r4, r0
   d7856:	460d      	mov	r5, r1
    int ret;

    if( grp->modp == NULL )
   d7858:	b92b      	cbnz	r3, d7866 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x16>
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
   d785a:	1d0a      	adds	r2, r1, #4
        /* we known P, N and the result are positive */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );

cleanup:
    return( ret );
}
   d785c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static int ecp_modp( mbedtls_mpi *N, const mbedtls_ecp_group *grp )
{
    int ret;

    if( grp->modp == NULL )
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
   d7860:	4601      	mov	r1, r0
   d7862:	f009 ba9d 	b.w	e0da0 <mbedtls_mpi_mod_mpi>

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
   d7866:	6803      	ldr	r3, [r0, #0]
   d7868:	2b00      	cmp	r3, #0
   d786a:	db07      	blt.n	d787c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x2c>
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
   d786c:	4620      	mov	r0, r4
   d786e:	f008 fd37 	bl	e02e0 <mbedtls_mpi_bitlen>

    if( grp->modp == NULL )
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
   d7872:	6dab      	ldr	r3, [r5, #88]	; 0x58
   d7874:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
   d7878:	d822      	bhi.n	d78c0 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x70>
   d787a:	e004      	b.n	d7886 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x36>
   d787c:	2100      	movs	r1, #0
   d787e:	f008 ff34 	bl	e06ea <mbedtls_mpi_cmp_int>
   d7882:	b9e8      	cbnz	r0, d78c0 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x70>
   d7884:	e7f2      	b.n	d786c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x1c>
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }

    MBEDTLS_MPI_CHK( grp->modp( N ) );
   d7886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   d7888:	4620      	mov	r0, r4
   d788a:	4798      	blx	r3
   d788c:	bb08      	cbnz	r0, d78d2 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x82>
   d788e:	3504      	adds	r5, #4

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
   d7890:	6823      	ldr	r3, [r4, #0]
   d7892:	2b00      	cmp	r3, #0
   d7894:	da04      	bge.n	d78a0 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x50>
   d7896:	2100      	movs	r1, #0
   d7898:	4620      	mov	r0, r4
   d789a:	f008 ff26 	bl	e06ea <mbedtls_mpi_cmp_int>
   d789e:	b988      	cbnz	r0, d78c4 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );

    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
   d78a0:	4629      	mov	r1, r5
   d78a2:	4620      	mov	r0, r4
   d78a4:	f008 fedc 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   d78a8:	2800      	cmp	r0, #0
   d78aa:	db07      	blt.n	d78bc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x6c>
        /* we known P, N and the result are positive */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
   d78ac:	462a      	mov	r2, r5
   d78ae:	4621      	mov	r1, r4
   d78b0:	4620      	mov	r0, r4
   d78b2:	f008 ff8a 	bl	e07ca <mbedtls_mpi_sub_abs>
   d78b6:	2800      	cmp	r0, #0
   d78b8:	d0f2      	beq.n	d78a0 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x50>
   d78ba:	bd38      	pop	{r3, r4, r5, pc}
   d78bc:	2000      	movs	r0, #0
   d78be:	bd38      	pop	{r3, r4, r5, pc}

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d78c0:	4804      	ldr	r0, [pc, #16]	; (d78d4 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x84>)
   d78c2:	bd38      	pop	{r3, r4, r5, pc}

    MBEDTLS_MPI_CHK( grp->modp( N ) );

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );
   d78c4:	462a      	mov	r2, r5
   d78c6:	4621      	mov	r1, r4
   d78c8:	4620      	mov	r0, r4
   d78ca:	f008 ffbe 	bl	e084a <mbedtls_mpi_add_mpi>
   d78ce:	2800      	cmp	r0, #0
   d78d0:	d0de      	beq.n	d7890 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x40>
        /* we known P, N and the result are positive */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );

cleanup:
    return( ret );
}
   d78d2:	bd38      	pop	{r3, r4, r5, pc}
   d78d4:	ffffb080 	.word	0xffffb080

000d78d8 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_>:
 *             4M + 4S          (A == -3)
 *             3M + 6S + 1a     otherwise
 */
static int ecp_double_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                           const mbedtls_ecp_point *P )
{
   d78d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d78dc:	b08d      	sub	sp, #52	; 0x34
   d78de:	4606      	mov	r6, r0
#if defined(MBEDTLS_ECP_DOUBLE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_double_jac( grp, R, P ) );
#endif /* MBEDTLS_ECP_DOUBLE_JAC_ALT */

    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
   d78e0:	ad03      	add	r5, sp, #12
   d78e2:	4668      	mov	r0, sp
 *             4M + 4S          (A == -3)
 *             3M + 6S + 1a     otherwise
 */
static int ecp_double_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                           const mbedtls_ecp_point *P )
{
   d78e4:	4689      	mov	r9, r1
   d78e6:	4690      	mov	r8, r2
#if defined(MBEDTLS_ECP_DOUBLE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_double_jac( grp, R, P ) );
#endif /* MBEDTLS_ECP_DOUBLE_JAC_ALT */

    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
   d78e8:	f008 fbd3 	bl	e0092 <mbedtls_mpi_init>
   d78ec:	4628      	mov	r0, r5
   d78ee:	f008 fbd0 	bl	e0092 <mbedtls_mpi_init>
   d78f2:	a806      	add	r0, sp, #24
   d78f4:	f008 fbcd 	bl	e0092 <mbedtls_mpi_init>
   d78f8:	a809      	add	r0, sp, #36	; 0x24
   d78fa:	f008 fbca 	bl	e0092 <mbedtls_mpi_init>

    /* Special case for A = -3 */
    if( grp->A.p == NULL )
   d78fe:	69b3      	ldr	r3, [r6, #24]
   d7900:	2b00      	cmp	r3, #0
   d7902:	d13f      	bne.n	d7984 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0xac>
    {
        /* M = 3(X + Z^2)(X - Z^2) */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
   d7904:	f108 0218 	add.w	r2, r8, #24
   d7908:	4611      	mov	r1, r2
   d790a:	4628      	mov	r0, r5
   d790c:	f009 f80c 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d7910:	4604      	mov	r4, r0
   d7912:	2800      	cmp	r0, #0
   d7914:	f040 8205 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d7918:	4631      	mov	r1, r6
   d791a:	4628      	mov	r0, r5
   d791c:	f7ff ff98 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d7920:	4604      	mov	r4, r0
   d7922:	2800      	cmp	r0, #0
   d7924:	f040 81fd 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
   d7928:	462a      	mov	r2, r5
   d792a:	4641      	mov	r1, r8
   d792c:	a806      	add	r0, sp, #24
   d792e:	f008 ff8c 	bl	e084a <mbedtls_mpi_add_mpi>
   d7932:	4604      	mov	r4, r0
   d7934:	2800      	cmp	r0, #0
   d7936:	f040 81f4 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d793a:	1d37      	adds	r7, r6, #4
   d793c:	4639      	mov	r1, r7
   d793e:	a806      	add	r0, sp, #24
   d7940:	f008 fe8e 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   d7944:	2800      	cmp	r0, #0
   d7946:	db08      	blt.n	d795a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x82>
   d7948:	a906      	add	r1, sp, #24
   d794a:	463a      	mov	r2, r7
   d794c:	4608      	mov	r0, r1
   d794e:	f008 ff3c 	bl	e07ca <mbedtls_mpi_sub_abs>
   d7952:	4604      	mov	r4, r0
   d7954:	2800      	cmp	r0, #0
   d7956:	d0f1      	beq.n	d793c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x64>
   d7958:	e1e3      	b.n	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
   d795a:	462a      	mov	r2, r5
   d795c:	4641      	mov	r1, r8
   d795e:	a809      	add	r0, sp, #36	; 0x24
   d7960:	f008 ff94 	bl	e088c <mbedtls_mpi_sub_mpi>
   d7964:	4604      	mov	r4, r0
   d7966:	2800      	cmp	r0, #0
   d7968:	f040 81db 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d796c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d796e:	2b00      	cmp	r3, #0
   d7970:	f280 8120 	bge.w	d7bb4 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x2dc>
   d7974:	2100      	movs	r1, #0
   d7976:	a809      	add	r0, sp, #36	; 0x24
   d7978:	f008 feb7 	bl	e06ea <mbedtls_mpi_cmp_int>
   d797c:	2800      	cmp	r0, #0
   d797e:	f040 8140 	bne.w	d7c02 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x32a>
   d7982:	e117      	b.n	d7bb4 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x2dc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
    }
    else
    {
        /* M = 3.X^2 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
   d7984:	4642      	mov	r2, r8
   d7986:	4641      	mov	r1, r8
   d7988:	4628      	mov	r0, r5
   d798a:	f008 ffcd 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d798e:	4604      	mov	r4, r0
   d7990:	2800      	cmp	r0, #0
   d7992:	f040 81c6 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d7996:	4631      	mov	r1, r6
   d7998:	4628      	mov	r0, r5
   d799a:	f7ff ff59 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d799e:	4604      	mov	r4, r0
   d79a0:	2800      	cmp	r0, #0
   d79a2:	f040 81be 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
   d79a6:	2203      	movs	r2, #3
   d79a8:	4629      	mov	r1, r5
   d79aa:	4668      	mov	r0, sp
   d79ac:	f009 f82b 	bl	e0a06 <mbedtls_mpi_mul_int>
   d79b0:	4604      	mov	r4, r0
   d79b2:	2800      	cmp	r0, #0
   d79b4:	f040 81b5 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d79b8:	1d37      	adds	r7, r6, #4
   d79ba:	4639      	mov	r1, r7
   d79bc:	4668      	mov	r0, sp
   d79be:	f008 fe4f 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   d79c2:	2800      	cmp	r0, #0
   d79c4:	db08      	blt.n	d79d8 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x100>
   d79c6:	463a      	mov	r2, r7
   d79c8:	4669      	mov	r1, sp
   d79ca:	4668      	mov	r0, sp
   d79cc:	f008 fefd 	bl	e07ca <mbedtls_mpi_sub_abs>
   d79d0:	4604      	mov	r4, r0
   d79d2:	2800      	cmp	r0, #0
   d79d4:	d0f1      	beq.n	d79ba <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0xe2>
   d79d6:	e1a4      	b.n	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>

        /* Optimize away for "koblitz" curves with A = 0 */
        if( mbedtls_mpi_cmp_int( &grp->A, 0 ) != 0 )
   d79d8:	f106 0a10 	add.w	sl, r6, #16
   d79dc:	2100      	movs	r1, #0
   d79de:	4650      	mov	r0, sl
   d79e0:	f008 fe83 	bl	e06ea <mbedtls_mpi_cmp_int>
   d79e4:	2800      	cmp	r0, #0
   d79e6:	d048      	beq.n	d7a7a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x1a2>
        {
            /* M += A.Z^4 */
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
   d79e8:	f108 0218 	add.w	r2, r8, #24
   d79ec:	4611      	mov	r1, r2
   d79ee:	4628      	mov	r0, r5
   d79f0:	f008 ff9a 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d79f4:	4604      	mov	r4, r0
   d79f6:	2800      	cmp	r0, #0
   d79f8:	f040 8193 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d79fc:	4631      	mov	r1, r6
   d79fe:	4628      	mov	r0, r5
   d7a00:	f7ff ff26 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d7a04:	4604      	mov	r4, r0
   d7a06:	2800      	cmp	r0, #0
   d7a08:	f040 818b 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
   d7a0c:	462a      	mov	r2, r5
   d7a0e:	4629      	mov	r1, r5
   d7a10:	a806      	add	r0, sp, #24
   d7a12:	f008 ff89 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d7a16:	4604      	mov	r4, r0
   d7a18:	2800      	cmp	r0, #0
   d7a1a:	f040 8182 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d7a1e:	4631      	mov	r1, r6
   d7a20:	a806      	add	r0, sp, #24
   d7a22:	f7ff ff15 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d7a26:	4604      	mov	r4, r0
   d7a28:	2800      	cmp	r0, #0
   d7a2a:	f040 817a 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
   d7a2e:	4652      	mov	r2, sl
   d7a30:	a906      	add	r1, sp, #24
   d7a32:	4628      	mov	r0, r5
   d7a34:	f008 ff78 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d7a38:	4604      	mov	r4, r0
   d7a3a:	2800      	cmp	r0, #0
   d7a3c:	f040 8171 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d7a40:	4631      	mov	r1, r6
   d7a42:	4628      	mov	r0, r5
   d7a44:	f7ff ff04 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d7a48:	4604      	mov	r4, r0
   d7a4a:	2800      	cmp	r0, #0
   d7a4c:	f040 8169 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
   d7a50:	462a      	mov	r2, r5
   d7a52:	4669      	mov	r1, sp
   d7a54:	4668      	mov	r0, sp
   d7a56:	f008 fef8 	bl	e084a <mbedtls_mpi_add_mpi>
   d7a5a:	4604      	mov	r4, r0
   d7a5c:	2800      	cmp	r0, #0
   d7a5e:	f040 8160 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d7a62:	4639      	mov	r1, r7
   d7a64:	4668      	mov	r0, sp
   d7a66:	f008 fdfb 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   d7a6a:	2800      	cmp	r0, #0
   d7a6c:	db05      	blt.n	d7a7a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x1a2>
   d7a6e:	463a      	mov	r2, r7
   d7a70:	4669      	mov	r1, sp
   d7a72:	4668      	mov	r0, sp
   d7a74:	f008 fea9 	bl	e07ca <mbedtls_mpi_sub_abs>
   d7a78:	e7ef      	b.n	d7a5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x182>
        }
    }

    /* S = 4.X.Y^2 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
   d7a7a:	f108 0b0c 	add.w	fp, r8, #12
   d7a7e:	465a      	mov	r2, fp
   d7a80:	4659      	mov	r1, fp
   d7a82:	a806      	add	r0, sp, #24
   d7a84:	f008 ff50 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d7a88:	4604      	mov	r4, r0
   d7a8a:	2800      	cmp	r0, #0
   d7a8c:	f040 8149 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d7a90:	4631      	mov	r1, r6
   d7a92:	a806      	add	r0, sp, #24
   d7a94:	f7ff fedc 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d7a98:	4604      	mov	r4, r0
   d7a9a:	2800      	cmp	r0, #0
   d7a9c:	f040 8141 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
   d7aa0:	2101      	movs	r1, #1
   d7aa2:	a806      	add	r0, sp, #24
   d7aa4:	f008 fcae 	bl	e0404 <mbedtls_mpi_shift_l>
   d7aa8:	4604      	mov	r4, r0
   d7aaa:	2800      	cmp	r0, #0
   d7aac:	f040 8139 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d7ab0:	1d37      	adds	r7, r6, #4
   d7ab2:	4639      	mov	r1, r7
   d7ab4:	a806      	add	r0, sp, #24
   d7ab6:	f008 fdd3 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   d7aba:	2800      	cmp	r0, #0
   d7abc:	db08      	blt.n	d7ad0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x1f8>
   d7abe:	a906      	add	r1, sp, #24
   d7ac0:	463a      	mov	r2, r7
   d7ac2:	4608      	mov	r0, r1
   d7ac4:	f008 fe81 	bl	e07ca <mbedtls_mpi_sub_abs>
   d7ac8:	4604      	mov	r4, r0
   d7aca:	2800      	cmp	r0, #0
   d7acc:	d0f1      	beq.n	d7ab2 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x1da>
   d7ace:	e128      	b.n	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
   d7ad0:	aa06      	add	r2, sp, #24
   d7ad2:	4641      	mov	r1, r8
   d7ad4:	4628      	mov	r0, r5
   d7ad6:	f008 ff27 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d7ada:	4604      	mov	r4, r0
   d7adc:	2800      	cmp	r0, #0
   d7ade:	f040 8120 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d7ae2:	4631      	mov	r1, r6
   d7ae4:	4628      	mov	r0, r5
   d7ae6:	f7ff feb3 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d7aea:	4604      	mov	r4, r0
   d7aec:	2800      	cmp	r0, #0
   d7aee:	f040 8118 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
   d7af2:	2101      	movs	r1, #1
   d7af4:	4628      	mov	r0, r5
   d7af6:	f008 fc85 	bl	e0404 <mbedtls_mpi_shift_l>
   d7afa:	4604      	mov	r4, r0
   d7afc:	2800      	cmp	r0, #0
   d7afe:	f040 8110 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d7b02:	4639      	mov	r1, r7
   d7b04:	4628      	mov	r0, r5
   d7b06:	f008 fdab 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   d7b0a:	2800      	cmp	r0, #0
   d7b0c:	db05      	blt.n	d7b1a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x242>
   d7b0e:	463a      	mov	r2, r7
   d7b10:	4629      	mov	r1, r5
   d7b12:	4628      	mov	r0, r5
   d7b14:	f008 fe59 	bl	e07ca <mbedtls_mpi_sub_abs>
   d7b18:	e7ef      	b.n	d7afa <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x222>

    /* U = 8.Y^4 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
   d7b1a:	aa06      	add	r2, sp, #24
   d7b1c:	4611      	mov	r1, r2
   d7b1e:	a809      	add	r0, sp, #36	; 0x24
   d7b20:	f008 ff02 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d7b24:	4604      	mov	r4, r0
   d7b26:	2800      	cmp	r0, #0
   d7b28:	f040 80fb 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d7b2c:	4631      	mov	r1, r6
   d7b2e:	a809      	add	r0, sp, #36	; 0x24
   d7b30:	f7ff fe8e 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d7b34:	4604      	mov	r4, r0
   d7b36:	2800      	cmp	r0, #0
   d7b38:	f040 80f3 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
   d7b3c:	2101      	movs	r1, #1
   d7b3e:	a809      	add	r0, sp, #36	; 0x24
   d7b40:	f008 fc60 	bl	e0404 <mbedtls_mpi_shift_l>
   d7b44:	4604      	mov	r4, r0
   d7b46:	2800      	cmp	r0, #0
   d7b48:	f040 80eb 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d7b4c:	4639      	mov	r1, r7
   d7b4e:	a809      	add	r0, sp, #36	; 0x24
   d7b50:	f008 fd86 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   d7b54:	2800      	cmp	r0, #0
   d7b56:	db05      	blt.n	d7b64 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x28c>
   d7b58:	a909      	add	r1, sp, #36	; 0x24
   d7b5a:	463a      	mov	r2, r7
   d7b5c:	4608      	mov	r0, r1
   d7b5e:	f008 fe34 	bl	e07ca <mbedtls_mpi_sub_abs>
   d7b62:	e7ef      	b.n	d7b44 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x26c>

    /* T = M^2 - 2.S */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
   d7b64:	466a      	mov	r2, sp
   d7b66:	4669      	mov	r1, sp
   d7b68:	a806      	add	r0, sp, #24
   d7b6a:	f008 fedd 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d7b6e:	4604      	mov	r4, r0
   d7b70:	2800      	cmp	r0, #0
   d7b72:	f040 80d6 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d7b76:	4631      	mov	r1, r6
   d7b78:	a806      	add	r0, sp, #24
   d7b7a:	f7ff fe69 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d7b7e:	4604      	mov	r4, r0
   d7b80:	2800      	cmp	r0, #0
   d7b82:	f040 80ce 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
   d7b86:	a906      	add	r1, sp, #24
   d7b88:	462a      	mov	r2, r5
   d7b8a:	4608      	mov	r0, r1
   d7b8c:	f008 fe7e 	bl	e088c <mbedtls_mpi_sub_mpi>
   d7b90:	4604      	mov	r4, r0
   d7b92:	2800      	cmp	r0, #0
   d7b94:	f040 80c5 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d7b98:	9b06      	ldr	r3, [sp, #24]
   d7b9a:	2b00      	cmp	r3, #0
   d7b9c:	da37      	bge.n	d7c0e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x336>
   d7b9e:	2100      	movs	r1, #0
   d7ba0:	a806      	add	r0, sp, #24
   d7ba2:	f008 fda2 	bl	e06ea <mbedtls_mpi_cmp_int>
   d7ba6:	b390      	cbz	r0, d7c0e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x336>
   d7ba8:	a906      	add	r1, sp, #24
   d7baa:	463a      	mov	r2, r7
   d7bac:	4608      	mov	r0, r1
   d7bae:	f008 fe4c 	bl	e084a <mbedtls_mpi_add_mpi>
   d7bb2:	e7ed      	b.n	d7b90 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x2b8>
    {
        /* M = 3(X + Z^2)(X - Z^2) */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
   d7bb4:	aa09      	add	r2, sp, #36	; 0x24
   d7bb6:	a906      	add	r1, sp, #24
   d7bb8:	4628      	mov	r0, r5
   d7bba:	f008 feb5 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d7bbe:	4604      	mov	r4, r0
   d7bc0:	2800      	cmp	r0, #0
   d7bc2:	f040 80ae 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d7bc6:	4631      	mov	r1, r6
   d7bc8:	4628      	mov	r0, r5
   d7bca:	f7ff fe41 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d7bce:	4604      	mov	r4, r0
   d7bd0:	2800      	cmp	r0, #0
   d7bd2:	f040 80a6 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
   d7bd6:	2203      	movs	r2, #3
   d7bd8:	4629      	mov	r1, r5
   d7bda:	4668      	mov	r0, sp
   d7bdc:	f008 ff13 	bl	e0a06 <mbedtls_mpi_mul_int>
   d7be0:	4604      	mov	r4, r0
   d7be2:	2800      	cmp	r0, #0
   d7be4:	f040 809d 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d7be8:	4639      	mov	r1, r7
   d7bea:	4668      	mov	r0, sp
   d7bec:	f008 fd38 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   d7bf0:	2800      	cmp	r0, #0
   d7bf2:	f6ff af42 	blt.w	d7a7a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x1a2>
   d7bf6:	463a      	mov	r2, r7
   d7bf8:	4669      	mov	r1, sp
   d7bfa:	4668      	mov	r0, sp
   d7bfc:	f008 fde5 	bl	e07ca <mbedtls_mpi_sub_abs>
   d7c00:	e7ee      	b.n	d7be0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x308>
    if( grp->A.p == NULL )
    {
        /* M = 3(X + Z^2)(X - Z^2) */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
   d7c02:	a909      	add	r1, sp, #36	; 0x24
   d7c04:	463a      	mov	r2, r7
   d7c06:	4608      	mov	r0, r1
   d7c08:	f008 fe1f 	bl	e084a <mbedtls_mpi_add_mpi>
   d7c0c:	e6aa      	b.n	d7964 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x8c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );

    /* T = M^2 - 2.S */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
   d7c0e:	a906      	add	r1, sp, #24
   d7c10:	462a      	mov	r2, r5
   d7c12:	4608      	mov	r0, r1
   d7c14:	f008 fe3a 	bl	e088c <mbedtls_mpi_sub_mpi>
   d7c18:	4604      	mov	r4, r0
   d7c1a:	2800      	cmp	r0, #0
   d7c1c:	f040 8081 	bne.w	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d7c20:	9b06      	ldr	r3, [sp, #24]
   d7c22:	2b00      	cmp	r3, #0
   d7c24:	da04      	bge.n	d7c30 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x358>
   d7c26:	2100      	movs	r1, #0
   d7c28:	a806      	add	r0, sp, #24
   d7c2a:	f008 fd5e 	bl	e06ea <mbedtls_mpi_cmp_int>
   d7c2e:	b928      	cbnz	r0, d7c3c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x364>

    /* S = M(S - T) - U */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
   d7c30:	aa06      	add	r2, sp, #24
   d7c32:	4629      	mov	r1, r5
   d7c34:	4628      	mov	r0, r5
   d7c36:	f008 fe29 	bl	e088c <mbedtls_mpi_sub_mpi>
   d7c3a:	e012      	b.n	d7c62 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x38a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );

    /* T = M^2 - 2.S */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
   d7c3c:	a906      	add	r1, sp, #24
   d7c3e:	463a      	mov	r2, r7
   d7c40:	4608      	mov	r0, r1
   d7c42:	f008 fe02 	bl	e084a <mbedtls_mpi_add_mpi>
   d7c46:	e7e7      	b.n	d7c18 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x340>

    /* S = M(S - T) - U */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
   d7c48:	9b03      	ldr	r3, [sp, #12]
   d7c4a:	2b00      	cmp	r3, #0
   d7c4c:	da0d      	bge.n	d7c6a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x392>
   d7c4e:	2100      	movs	r1, #0
   d7c50:	4628      	mov	r0, r5
   d7c52:	f008 fd4a 	bl	e06ea <mbedtls_mpi_cmp_int>
   d7c56:	b140      	cbz	r0, d7c6a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x392>
   d7c58:	463a      	mov	r2, r7
   d7c5a:	4629      	mov	r1, r5
   d7c5c:	4628      	mov	r0, r5
   d7c5e:	f008 fdf4 	bl	e084a <mbedtls_mpi_add_mpi>
   d7c62:	4604      	mov	r4, r0
   d7c64:	2800      	cmp	r0, #0
   d7c66:	d0ef      	beq.n	d7c48 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x370>
   d7c68:	e05b      	b.n	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
   d7c6a:	466a      	mov	r2, sp
   d7c6c:	4629      	mov	r1, r5
   d7c6e:	4628      	mov	r0, r5
   d7c70:	f008 fe5a 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d7c74:	4604      	mov	r4, r0
   d7c76:	2800      	cmp	r0, #0
   d7c78:	d153      	bne.n	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d7c7a:	4631      	mov	r1, r6
   d7c7c:	4628      	mov	r0, r5
   d7c7e:	f7ff fde7 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d7c82:	4604      	mov	r4, r0
   d7c84:	2800      	cmp	r0, #0
   d7c86:	d14c      	bne.n	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
   d7c88:	aa09      	add	r2, sp, #36	; 0x24
   d7c8a:	4629      	mov	r1, r5
   d7c8c:	4628      	mov	r0, r5
   d7c8e:	f008 fdfd 	bl	e088c <mbedtls_mpi_sub_mpi>
   d7c92:	4604      	mov	r4, r0
   d7c94:	2800      	cmp	r0, #0
   d7c96:	d144      	bne.n	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d7c98:	46aa      	mov	sl, r5
   d7c9a:	9b03      	ldr	r3, [sp, #12]
   d7c9c:	2b00      	cmp	r3, #0
   d7c9e:	da04      	bge.n	d7caa <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x3d2>
   d7ca0:	2100      	movs	r1, #0
   d7ca2:	4650      	mov	r0, sl
   d7ca4:	f008 fd21 	bl	e06ea <mbedtls_mpi_cmp_int>
   d7ca8:	bb98      	cbnz	r0, d7d12 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x43a>

    /* U = 2.Y.Z */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
   d7caa:	f108 0218 	add.w	r2, r8, #24
   d7cae:	4659      	mov	r1, fp
   d7cb0:	a809      	add	r0, sp, #36	; 0x24
   d7cb2:	f008 fe39 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d7cb6:	4604      	mov	r4, r0
   d7cb8:	bb98      	cbnz	r0, d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d7cba:	4631      	mov	r1, r6
   d7cbc:	a809      	add	r0, sp, #36	; 0x24
   d7cbe:	f7ff fdc7 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d7cc2:	4604      	mov	r4, r0
   d7cc4:	bb68      	cbnz	r0, d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
   d7cc6:	2101      	movs	r1, #1
   d7cc8:	a809      	add	r0, sp, #36	; 0x24
   d7cca:	f008 fb9b 	bl	e0404 <mbedtls_mpi_shift_l>
   d7cce:	4604      	mov	r4, r0
   d7cd0:	bb38      	cbnz	r0, d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
   d7cd2:	4639      	mov	r1, r7
   d7cd4:	a809      	add	r0, sp, #36	; 0x24
   d7cd6:	f008 fcc3 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   d7cda:	2800      	cmp	r0, #0
   d7cdc:	db05      	blt.n	d7cea <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x412>
   d7cde:	a909      	add	r1, sp, #36	; 0x24
   d7ce0:	463a      	mov	r2, r7
   d7ce2:	4608      	mov	r0, r1
   d7ce4:	f008 fd71 	bl	e07ca <mbedtls_mpi_sub_abs>
   d7ce8:	e7f1      	b.n	d7cce <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x3f6>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
   d7cea:	a906      	add	r1, sp, #24
   d7cec:	4648      	mov	r0, r9
   d7cee:	f008 fa50 	bl	e0192 <mbedtls_mpi_copy>
   d7cf2:	4604      	mov	r4, r0
   d7cf4:	b9a8      	cbnz	r0, d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
   d7cf6:	a903      	add	r1, sp, #12
   d7cf8:	f109 000c 	add.w	r0, r9, #12
   d7cfc:	f008 fa49 	bl	e0192 <mbedtls_mpi_copy>
   d7d00:	4604      	mov	r4, r0
   d7d02:	b970      	cbnz	r0, d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );
   d7d04:	a909      	add	r1, sp, #36	; 0x24
   d7d06:	f109 0018 	add.w	r0, r9, #24
   d7d0a:	f008 fa42 	bl	e0192 <mbedtls_mpi_copy>
   d7d0e:	4604      	mov	r4, r0
   d7d10:	e007      	b.n	d7d22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );

    /* S = M(S - T) - U */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
   d7d12:	463a      	mov	r2, r7
   d7d14:	4651      	mov	r1, sl
   d7d16:	4650      	mov	r0, sl
   d7d18:	f008 fd97 	bl	e084a <mbedtls_mpi_add_mpi>
   d7d1c:	4604      	mov	r4, r0
   d7d1e:	2800      	cmp	r0, #0
   d7d20:	d0bb      	beq.n	d7c9a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x3c2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );

cleanup:
    mbedtls_mpi_free( &M ); mbedtls_mpi_free( &S ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &U );
   d7d22:	4668      	mov	r0, sp
   d7d24:	f008 f9bb 	bl	e009e <mbedtls_mpi_free>
   d7d28:	4628      	mov	r0, r5
   d7d2a:	f008 f9b8 	bl	e009e <mbedtls_mpi_free>
   d7d2e:	a806      	add	r0, sp, #24
   d7d30:	f008 f9b5 	bl	e009e <mbedtls_mpi_free>
   d7d34:	a809      	add	r0, sp, #36	; 0x24
   d7d36:	f008 f9b2 	bl	e009e <mbedtls_mpi_free>

    return( ret );
}
   d7d3a:	4620      	mov	r0, r4
   d7d3c:	b00d      	add	sp, #52	; 0x34
   d7d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7d42 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point>:
/*
 * Normalize jacobian coordinates so that Z == 0 || Z == 1  (GECC 3.2.1)
 * Cost: 1N := 1I + 3M + 1S
 */
static int ecp_normalize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt )
{
   d7d42:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    mbedtls_mpi Zi, ZZi;

    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
   d7d44:	f101 0718 	add.w	r7, r1, #24
/*
 * Normalize jacobian coordinates so that Z == 0 || Z == 1  (GECC 3.2.1)
 * Cost: 1N := 1I + 3M + 1S
 */
static int ecp_normalize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt )
{
   d7d48:	b087      	sub	sp, #28
   d7d4a:	4606      	mov	r6, r0
   d7d4c:	460d      	mov	r5, r1
    int ret;
    mbedtls_mpi Zi, ZZi;

    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
   d7d4e:	4638      	mov	r0, r7
   d7d50:	2100      	movs	r1, #0
   d7d52:	f008 fcca 	bl	e06ea <mbedtls_mpi_cmp_int>
   d7d56:	2800      	cmp	r0, #0
   d7d58:	d04d      	beq.n	d7df6 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xb4>
#if defined(MBEDTLS_ECP_NORMALIZE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_jac( grp, pt ) );
#endif /* MBEDTLS_ECP_NORMALIZE_JAC_ALT */

    mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
   d7d5a:	4668      	mov	r0, sp
   d7d5c:	f008 f999 	bl	e0092 <mbedtls_mpi_init>
   d7d60:	a803      	add	r0, sp, #12
   d7d62:	f008 f996 	bl	e0092 <mbedtls_mpi_init>

    /*
     * X = X / Z^2  mod p
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );
   d7d66:	1d32      	adds	r2, r6, #4
   d7d68:	4639      	mov	r1, r7
   d7d6a:	4668      	mov	r0, sp
   d7d6c:	f009 fb22 	bl	e13b4 <mbedtls_mpi_inv_mod>
   d7d70:	4604      	mov	r4, r0
   d7d72:	bbc8      	cbnz	r0, d7de8 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
   d7d74:	466a      	mov	r2, sp
   d7d76:	4669      	mov	r1, sp
   d7d78:	a803      	add	r0, sp, #12
   d7d7a:	f008 fdd5 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d7d7e:	4604      	mov	r4, r0
   d7d80:	bb90      	cbnz	r0, d7de8 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>
   d7d82:	4631      	mov	r1, r6
   d7d84:	a803      	add	r0, sp, #12
   d7d86:	f7ff fd63 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d7d8a:	4604      	mov	r4, r0
   d7d8c:	bb60      	cbnz	r0, d7de8 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
   d7d8e:	aa03      	add	r2, sp, #12
   d7d90:	4629      	mov	r1, r5
   d7d92:	4628      	mov	r0, r5
   d7d94:	f008 fdc8 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d7d98:	4604      	mov	r4, r0
   d7d9a:	bb28      	cbnz	r0, d7de8 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>
   d7d9c:	4631      	mov	r1, r6
   d7d9e:	4628      	mov	r0, r5
   d7da0:	f7ff fd56 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d7da4:	4604      	mov	r4, r0
   d7da6:	b9f8      	cbnz	r0, d7de8 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>

    /*
     * Y = Y / Z^3  mod p
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
   d7da8:	350c      	adds	r5, #12
   d7daa:	aa03      	add	r2, sp, #12
   d7dac:	4629      	mov	r1, r5
   d7dae:	4628      	mov	r0, r5
   d7db0:	f008 fdba 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d7db4:	4604      	mov	r4, r0
   d7db6:	b9b8      	cbnz	r0, d7de8 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>
   d7db8:	4631      	mov	r1, r6
   d7dba:	4628      	mov	r0, r5
   d7dbc:	f7ff fd48 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d7dc0:	4604      	mov	r4, r0
   d7dc2:	b988      	cbnz	r0, d7de8 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
   d7dc4:	466a      	mov	r2, sp
   d7dc6:	4629      	mov	r1, r5
   d7dc8:	4628      	mov	r0, r5
   d7dca:	f008 fdad 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d7dce:	4604      	mov	r4, r0
   d7dd0:	b950      	cbnz	r0, d7de8 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>
   d7dd2:	4631      	mov	r1, r6
   d7dd4:	4628      	mov	r0, r5
   d7dd6:	f7ff fd3b 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d7dda:	4604      	mov	r4, r0
   d7ddc:	b920      	cbnz	r0, d7de8 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>

    /*
     * Z = 1
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
   d7dde:	2101      	movs	r1, #1
   d7de0:	4638      	mov	r0, r7
   d7de2:	f008 fa37 	bl	e0254 <mbedtls_mpi_lset>
   d7de6:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
   d7de8:	4668      	mov	r0, sp
   d7dea:	f008 f958 	bl	e009e <mbedtls_mpi_free>
   d7dee:	a803      	add	r0, sp, #12
   d7df0:	f008 f955 	bl	e009e <mbedtls_mpi_free>

    return( ret );
   d7df4:	4620      	mov	r0, r4
}
   d7df6:	b007      	add	sp, #28
   d7df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d7dfc <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj>:
 *
 * Cost: 1N(t) := 1I + (6t - 3)M + 1S
 */
static int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,
                                   mbedtls_ecp_point *T[], size_t T_size )
{
   d7dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret;
    size_t i;
    mbedtls_mpi *c, u, Zi, ZZi;

    if( T_size < 2 )
   d7e00:	2a01      	cmp	r2, #1
 *
 * Cost: 1N(t) := 1I + (6t - 3)M + 1S
 */
static int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,
                                   mbedtls_ecp_point *T[], size_t T_size )
{
   d7e02:	b08a      	sub	sp, #40	; 0x28
   d7e04:	4607      	mov	r7, r0
   d7e06:	460d      	mov	r5, r1
   d7e08:	4691      	mov	r9, r2
    int ret;
    size_t i;
    mbedtls_mpi *c, u, Zi, ZZi;

    if( T_size < 2 )
   d7e0a:	d803      	bhi.n	d7e14 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x18>
        return( ecp_normalize_jac( grp, *T ) );
   d7e0c:	6809      	ldr	r1, [r1, #0]
   d7e0e:	f7ff ff98 	bl	d7d42 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point>
   d7e12:	e0f1      	b.n	d7ff8 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1fc>
#if defined(MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_jac_many( grp, T, T_size ) );
#endif

    if( ( c = (mbedtls_mpi *)mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
   d7e14:	210c      	movs	r1, #12
   d7e16:	4610      	mov	r0, r2
   d7e18:	f00e ff7c 	bl	e6d14 <calloc>
   d7e1c:	4680      	mov	r8, r0
   d7e1e:	2800      	cmp	r0, #0
   d7e20:	f000 80e9 	beq.w	d7ff6 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1fa>
   d7e24:	2400      	movs	r4, #0
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );

    for( i = 0; i < T_size; i++ )
        mbedtls_mpi_init( &c[i] );
   d7e26:	260c      	movs	r6, #12
   d7e28:	fb06 8004 	mla	r0, r6, r4, r8
#endif

    if( ( c = (mbedtls_mpi *)mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );

    for( i = 0; i < T_size; i++ )
   d7e2c:	3401      	adds	r4, #1
        mbedtls_mpi_init( &c[i] );
   d7e2e:	f008 f930 	bl	e0092 <mbedtls_mpi_init>
#endif

    if( ( c = (mbedtls_mpi *)mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );

    for( i = 0; i < T_size; i++ )
   d7e32:	45a1      	cmp	r9, r4
   d7e34:	d1f8      	bne.n	d7e28 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x2c>
        mbedtls_mpi_init( &c[i] );

    mbedtls_mpi_init( &u ); mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
   d7e36:	a801      	add	r0, sp, #4
   d7e38:	f008 f92b 	bl	e0092 <mbedtls_mpi_init>
   d7e3c:	a804      	add	r0, sp, #16
   d7e3e:	f008 f928 	bl	e0092 <mbedtls_mpi_init>
   d7e42:	a807      	add	r0, sp, #28
   d7e44:	f008 f925 	bl	e0092 <mbedtls_mpi_init>

    /*
     * c[i] = Z_0 * ... * Z_i
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
   d7e48:	6829      	ldr	r1, [r5, #0]
   d7e4a:	4640      	mov	r0, r8
   d7e4c:	3118      	adds	r1, #24
   d7e4e:	f008 f9a0 	bl	e0192 <mbedtls_mpi_copy>
   d7e52:	4604      	mov	r4, r0
   d7e54:	2800      	cmp	r0, #0
   d7e56:	f040 80b7 	bne.w	d7fc8 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
   d7e5a:	f108 060c 	add.w	r6, r8, #12
   d7e5e:	f04f 0a01 	mov.w	sl, #1
    for( i = 1; i < T_size; i++ )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &c[i], &c[i-1], &T[i]->Z ) );
   d7e62:	f855 202a 	ldr.w	r2, [r5, sl, lsl #2]
   d7e66:	f1a6 010c 	sub.w	r1, r6, #12
   d7e6a:	3218      	adds	r2, #24
   d7e6c:	4630      	mov	r0, r6
   d7e6e:	f008 fd5b 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d7e72:	4604      	mov	r4, r0
   d7e74:	2800      	cmp	r0, #0
   d7e76:	f040 80a7 	bne.w	d7fc8 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        MOD_MUL( c[i] );
   d7e7a:	4639      	mov	r1, r7
   d7e7c:	4630      	mov	r0, r6
   d7e7e:	f7ff fce7 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d7e82:	4604      	mov	r4, r0
   d7e84:	2800      	cmp	r0, #0
   d7e86:	f040 809f 	bne.w	d7fc8 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>

    /*
     * c[i] = Z_0 * ... * Z_i
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
    for( i = 1; i < T_size; i++ )
   d7e8a:	f10a 0a01 	add.w	sl, sl, #1
   d7e8e:	45d1      	cmp	r9, sl
   d7e90:	f106 060c 	add.w	r6, r6, #12
   d7e94:	d1e5      	bne.n	d7e62 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x66>
    }

    /*
     * u = 1 / (Z_0 * ... * Z_n) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[T_size-1], &grp->P ) );
   d7e96:	260c      	movs	r6, #12
   d7e98:	fb06 f609 	mul.w	r6, r6, r9
   d7e9c:	f1a6 010c 	sub.w	r1, r6, #12
   d7ea0:	1d3a      	adds	r2, r7, #4
   d7ea2:	4441      	add	r1, r8
   d7ea4:	a801      	add	r0, sp, #4
   d7ea6:	f009 fa85 	bl	e13b4 <mbedtls_mpi_inv_mod>
   d7eaa:	4604      	mov	r4, r0
   d7eac:	2800      	cmp	r0, #0
   d7eae:	f040 808b 	bne.w	d7fc8 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
   d7eb2:	3e18      	subs	r6, #24

    for( i = T_size - 1; ; i-- )
   d7eb4:	f109 3aff 	add.w	sl, r9, #4294967295
   d7eb8:	eb05 0589 	add.w	r5, r5, r9, lsl #2
   d7ebc:	4446      	add	r6, r8
    {
        /*
         * Zi = 1 / Z_i mod p
         * u = 1 / (Z_0 * ... * Z_i) mod P
         */
        if( i == 0 ) {
   d7ebe:	f1ba 0f00 	cmp.w	sl, #0
   d7ec2:	d10e      	bne.n	d7ee2 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0xe6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );
   d7ec4:	a901      	add	r1, sp, #4
   d7ec6:	a804      	add	r0, sp, #16
   d7ec8:	f008 f963 	bl	e0192 <mbedtls_mpi_copy>
   d7ecc:	4604      	mov	r4, r0
   d7ece:	2800      	cmp	r0, #0
   d7ed0:	d17a      	bne.n	d7fc8 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        }

        /*
         * proceed as in normalize()
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
   d7ed2:	aa04      	add	r2, sp, #16
   d7ed4:	4611      	mov	r1, r2
   d7ed6:	a807      	add	r0, sp, #28
   d7ed8:	f008 fd26 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d7edc:	4604      	mov	r4, r0
   d7ede:	b1f0      	cbz	r0, d7f1e <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x122>
   d7ee0:	e072      	b.n	d7fc8 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        if( i == 0 ) {
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
   d7ee2:	4632      	mov	r2, r6
   d7ee4:	a901      	add	r1, sp, #4
   d7ee6:	a804      	add	r0, sp, #16
   d7ee8:	f008 fd1e 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d7eec:	4604      	mov	r4, r0
   d7eee:	2800      	cmp	r0, #0
   d7ef0:	d16a      	bne.n	d7fc8 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
   d7ef2:	4639      	mov	r1, r7
   d7ef4:	a804      	add	r0, sp, #16
   d7ef6:	f7ff fcab 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d7efa:	4604      	mov	r4, r0
   d7efc:	2800      	cmp	r0, #0
   d7efe:	d163      	bne.n	d7fc8 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
   d7f00:	f855 2c04 	ldr.w	r2, [r5, #-4]
   d7f04:	a901      	add	r1, sp, #4
   d7f06:	3218      	adds	r2, #24
   d7f08:	4608      	mov	r0, r1
   d7f0a:	f008 fd0d 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d7f0e:	4604      	mov	r4, r0
   d7f10:	2800      	cmp	r0, #0
   d7f12:	d159      	bne.n	d7fc8 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
   d7f14:	4639      	mov	r1, r7
   d7f16:	a801      	add	r0, sp, #4
   d7f18:	f7ff fc9a 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d7f1c:	e7d6      	b.n	d7ecc <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0xd0>
        }

        /*
         * proceed as in normalize()
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
   d7f1e:	4639      	mov	r1, r7
   d7f20:	a807      	add	r0, sp, #28
   d7f22:	f7ff fc95 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d7f26:	4604      	mov	r4, r0
   d7f28:	2800      	cmp	r0, #0
   d7f2a:	d14d      	bne.n	d7fc8 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
   d7f2c:	f855 1c04 	ldr.w	r1, [r5, #-4]
   d7f30:	aa07      	add	r2, sp, #28
   d7f32:	4608      	mov	r0, r1
   d7f34:	f008 fcf8 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d7f38:	4604      	mov	r4, r0
   d7f3a:	2800      	cmp	r0, #0
   d7f3c:	d144      	bne.n	d7fc8 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
   d7f3e:	4639      	mov	r1, r7
   d7f40:	f855 0c04 	ldr.w	r0, [r5, #-4]
   d7f44:	f7ff fc84 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d7f48:	4604      	mov	r4, r0
   d7f4a:	2800      	cmp	r0, #0
   d7f4c:	d13c      	bne.n	d7fc8 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
   d7f4e:	f855 1c04 	ldr.w	r1, [r5, #-4]
   d7f52:	310c      	adds	r1, #12
   d7f54:	aa07      	add	r2, sp, #28
   d7f56:	4608      	mov	r0, r1
   d7f58:	f008 fce6 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d7f5c:	4604      	mov	r4, r0
   d7f5e:	bb98      	cbnz	r0, d7fc8 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
   d7f60:	f855 0c04 	ldr.w	r0, [r5, #-4]
   d7f64:	4639      	mov	r1, r7
   d7f66:	300c      	adds	r0, #12
   d7f68:	f7ff fc72 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d7f6c:	4604      	mov	r4, r0
   d7f6e:	bb58      	cbnz	r0, d7fc8 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
   d7f70:	f855 1c04 	ldr.w	r1, [r5, #-4]
   d7f74:	310c      	adds	r1, #12
   d7f76:	aa04      	add	r2, sp, #16
   d7f78:	4608      	mov	r0, r1
   d7f7a:	f008 fcd5 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d7f7e:	4604      	mov	r4, r0
   d7f80:	bb10      	cbnz	r0, d7fc8 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
   d7f82:	f855 0c04 	ldr.w	r0, [r5, #-4]
   d7f86:	4639      	mov	r1, r7
   d7f88:	300c      	adds	r0, #12
   d7f8a:	f7ff fc61 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d7f8e:	4604      	mov	r4, r0
   d7f90:	b9d0      	cbnz	r0, d7fc8 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
         * Post-precessing: reclaim some memory by shrinking coordinates
         * - not storing Z (always 1)
         * - shrinking other coordinates, but still keeping the same number of
         *   limbs as P, as otherwise it will too likely be regrown too fast.
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
   d7f92:	68b9      	ldr	r1, [r7, #8]
   d7f94:	f855 0c04 	ldr.w	r0, [r5, #-4]
   d7f98:	f008 f8bd 	bl	e0116 <mbedtls_mpi_shrink>
   d7f9c:	4604      	mov	r4, r0
   d7f9e:	b998      	cbnz	r0, d7fc8 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );
   d7fa0:	f855 0c04 	ldr.w	r0, [r5, #-4]
   d7fa4:	68b9      	ldr	r1, [r7, #8]
   d7fa6:	300c      	adds	r0, #12
   d7fa8:	f008 f8b5 	bl	e0116 <mbedtls_mpi_shrink>
   d7fac:	4604      	mov	r4, r0
   d7fae:	b958      	cbnz	r0, d7fc8 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        mbedtls_mpi_free( &T[i]->Z );
   d7fb0:	f855 0d04 	ldr.w	r0, [r5, #-4]!
   d7fb4:	3018      	adds	r0, #24
   d7fb6:	f008 f872 	bl	e009e <mbedtls_mpi_free>
   d7fba:	3e0c      	subs	r6, #12

        if( i == 0 )
   d7fbc:	f1ba 0f00 	cmp.w	sl, #0
   d7fc0:	d002      	beq.n	d7fc8 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
    /*
     * u = 1 / (Z_0 * ... * Z_n) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[T_size-1], &grp->P ) );

    for( i = T_size - 1; ; i-- )
   d7fc2:	f10a 3aff 	add.w	sl, sl, #4294967295
   d7fc6:	e77a      	b.n	d7ebe <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0xc2>
            break;
    }

cleanup:

    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
   d7fc8:	a801      	add	r0, sp, #4
   d7fca:	f008 f868 	bl	e009e <mbedtls_mpi_free>
   d7fce:	a804      	add	r0, sp, #16
   d7fd0:	f008 f865 	bl	e009e <mbedtls_mpi_free>
   d7fd4:	a807      	add	r0, sp, #28
   d7fd6:	f008 f862 	bl	e009e <mbedtls_mpi_free>
    for( i = 0; i < T_size; i++ )
   d7fda:	2500      	movs	r5, #0
        mbedtls_mpi_free( &c[i] );
   d7fdc:	260c      	movs	r6, #12
   d7fde:	fb06 8005 	mla	r0, r6, r5, r8
    }

cleanup:

    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
    for( i = 0; i < T_size; i++ )
   d7fe2:	3501      	adds	r5, #1
        mbedtls_mpi_free( &c[i] );
   d7fe4:	f008 f85b 	bl	e009e <mbedtls_mpi_free>
    }

cleanup:

    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
    for( i = 0; i < T_size; i++ )
   d7fe8:	45a9      	cmp	r9, r5
   d7fea:	d1f8      	bne.n	d7fde <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1e2>
        mbedtls_mpi_free( &c[i] );
    mbedtls_free( c );
   d7fec:	4640      	mov	r0, r8
   d7fee:	f00d f9bd 	bl	e536c <free>

    return( ret );
   d7ff2:	4620      	mov	r0, r4
   d7ff4:	e000      	b.n	d7ff8 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1fc>
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_jac_many( grp, T, T_size ) );
#endif

    if( ( c = (mbedtls_mpi *)mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );
   d7ff6:	4802      	ldr	r0, [pc, #8]	; (d8000 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x204>)
    for( i = 0; i < T_size; i++ )
        mbedtls_mpi_free( &c[i] );
    mbedtls_free( c );

    return( ret );
}
   d7ff8:	b00a      	add	sp, #40	; 0x28
   d7ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7ffe:	bf00      	nop
   d8000:	ffffb280 	.word	0xffffb280

000d8004 <_ZL19ecp_safe_invert_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointh>:
 * "inv" must be 0 (don't invert) or 1 (invert) or the result will be invalid
 */
static int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,
                            mbedtls_ecp_point *Q,
                            unsigned char inv )
{
   d8004:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d8006:	460c      	mov	r4, r1
   d8008:	4605      	mov	r5, r0
    mbedtls_mpi mQY;

    mbedtls_mpi_init( &mQY );

    /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
   d800a:	340c      	adds	r4, #12
{
    int ret;
    unsigned char nonzero;
    mbedtls_mpi mQY;

    mbedtls_mpi_init( &mQY );
   d800c:	a801      	add	r0, sp, #4
 * "inv" must be 0 (don't invert) or 1 (invert) or the result will be invalid
 */
static int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,
                            mbedtls_ecp_point *Q,
                            unsigned char inv )
{
   d800e:	4616      	mov	r6, r2
    int ret;
    unsigned char nonzero;
    mbedtls_mpi mQY;

    mbedtls_mpi_init( &mQY );
   d8010:	f008 f83f 	bl	e0092 <mbedtls_mpi_init>

    /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
   d8014:	1d29      	adds	r1, r5, #4
   d8016:	4622      	mov	r2, r4
   d8018:	a801      	add	r0, sp, #4
   d801a:	f008 fc37 	bl	e088c <mbedtls_mpi_sub_mpi>
   d801e:	4605      	mov	r5, r0
   d8020:	b968      	cbnz	r0, d803e <_ZL19ecp_safe_invert_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointh+0x3a>
    nonzero = mbedtls_mpi_cmp_int( &Q->Y, 0 ) != 0;
   d8022:	4601      	mov	r1, r0
   d8024:	4620      	mov	r0, r4
   d8026:	f008 fb60 	bl	e06ea <mbedtls_mpi_cmp_int>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &Q->Y, &mQY, inv & nonzero ) );
   d802a:	a901      	add	r1, sp, #4
   d802c:	2800      	cmp	r0, #0
   d802e:	bf0c      	ite	eq
   d8030:	2200      	moveq	r2, #0
   d8032:	f006 0201 	andne.w	r2, r6, #1
   d8036:	4620      	mov	r0, r4
   d8038:	f008 f8d7 	bl	e01ea <mbedtls_mpi_safe_cond_assign>
   d803c:	4605      	mov	r5, r0

cleanup:
    mbedtls_mpi_free( &mQY );
   d803e:	a801      	add	r0, sp, #4
   d8040:	f008 f82d 	bl	e009e <mbedtls_mpi_free>

    return( ret );
}
   d8044:	4628      	mov	r0, r5
   d8046:	b004      	add	sp, #16
   d8048:	bd70      	pop	{r4, r5, r6, pc}

000d804a <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh>:
 * See ecp_comb_recode_core() for background
 */
static int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                            const mbedtls_ecp_point T[], unsigned char T_size,
                            unsigned char i )
{
   d804a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d804e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
   d8052:	4680      	mov	r8, r0
   d8054:	460e      	mov	r6, r1
   d8056:	469b      	mov	fp, r3
    int ret;
    unsigned char ii, j;

    /* Ignore the "sign" bit and scale down */
    ii =  ( i & 0x7Fu ) >> 1;
   d8058:	f3c7 0a45 	ubfx	sl, r7, #1, #6
   d805c:	f102 040c 	add.w	r4, r2, #12
   d8060:	2500      	movs	r5, #0

    /* Read the whole table to thwart cache-based timing attacks */
    for( j = 0; j < T_size; j++ )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
   d8062:	f101 090c 	add.w	r9, r1, #12

    /* Ignore the "sign" bit and scale down */
    ii =  ( i & 0x7Fu ) >> 1;

    /* Read the whole table to thwart cache-based timing attacks */
    for( j = 0; j < T_size; j++ )
   d8066:	455d      	cmp	r5, fp
   d8068:	d017      	beq.n	d809a <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh+0x50>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
   d806a:	b2eb      	uxtb	r3, r5
   d806c:	ebca 0203 	rsb	r2, sl, r3
   d8070:	4253      	negs	r3, r2
   d8072:	4153      	adcs	r3, r2
   d8074:	461a      	mov	r2, r3
   d8076:	f1a4 010c 	sub.w	r1, r4, #12
   d807a:	4630      	mov	r0, r6
   d807c:	9301      	str	r3, [sp, #4]
   d807e:	f008 f8b4 	bl	e01ea <mbedtls_mpi_safe_cond_assign>
   d8082:	b990      	cbnz	r0, d80aa <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh+0x60>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
   d8084:	9b01      	ldr	r3, [sp, #4]
   d8086:	4621      	mov	r1, r4
   d8088:	461a      	mov	r2, r3
   d808a:	4648      	mov	r0, r9
   d808c:	f008 f8ad 	bl	e01ea <mbedtls_mpi_safe_cond_assign>
   d8090:	3501      	adds	r5, #1
   d8092:	3424      	adds	r4, #36	; 0x24
   d8094:	2800      	cmp	r0, #0
   d8096:	d0e6      	beq.n	d8066 <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh+0x1c>
   d8098:	e007      	b.n	d80aa <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh+0x60>
    }

    /* Safely invert result if i is "negative" */
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
   d809a:	09fa      	lsrs	r2, r7, #7
   d809c:	4631      	mov	r1, r6
   d809e:	4640      	mov	r0, r8

cleanup:
    return( ret );
}
   d80a0:	b003      	add	sp, #12
   d80a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
    }

    /* Safely invert result if i is "negative" */
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
   d80a6:	f7ff bfad 	b.w	d8004 <_ZL19ecp_safe_invert_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointh>

cleanup:
    return( ret );
}
   d80aa:	b003      	add	sp, #12
   d80ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d80b0 <mbedtls_ecp_grp_id_list>:
 */
const mbedtls_ecp_group_id *mbedtls_ecp_grp_id_list( void )
{
    static int init_done = 0;

    if( ! init_done )
   d80b0:	4b05      	ldr	r3, [pc, #20]	; (d80c8 <mbedtls_ecp_grp_id_list+0x18>)
   d80b2:	6819      	ldr	r1, [r3, #0]
   d80b4:	b929      	cbnz	r1, d80c2 <mbedtls_ecp_grp_id_list+0x12>

        for( curve_info = mbedtls_ecp_curve_list();
             curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
             curve_info++ )
        {
            ecp_supported_grp_id[i++] = curve_info->grp_id;
   d80b6:	4a05      	ldr	r2, [pc, #20]	; (d80cc <mbedtls_ecp_grp_id_list+0x1c>)
   d80b8:	2003      	movs	r0, #3
   d80ba:	7010      	strb	r0, [r2, #0]
        }
        ecp_supported_grp_id[i] = MBEDTLS_ECP_DP_NONE;
   d80bc:	7051      	strb	r1, [r2, #1]

        init_done = 1;
   d80be:	2201      	movs	r2, #1
   d80c0:	601a      	str	r2, [r3, #0]
    }

    return( ecp_supported_grp_id );
}
   d80c2:	4802      	ldr	r0, [pc, #8]	; (d80cc <mbedtls_ecp_grp_id_list+0x1c>)
   d80c4:	4770      	bx	lr
   d80c6:	bf00      	nop
   d80c8:	2003c268 	.word	0x2003c268
   d80cc:	2003c26c 	.word	0x2003c26c

000d80d0 <mbedtls_ecp_curve_info_from_grp_id>:
 */
const mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_grp_id( mbedtls_ecp_group_id grp_id )
{
    const mbedtls_ecp_curve_info *curve_info;

    for( curve_info = mbedtls_ecp_curve_list();
   d80d0:	4b05      	ldr	r3, [pc, #20]	; (d80e8 <mbedtls_ecp_curve_info_from_grp_id+0x18>)
         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
   d80d2:	781a      	ldrb	r2, [r3, #0]
   d80d4:	b11a      	cbz	r2, d80de <mbedtls_ecp_curve_info_from_grp_id+0xe>
         curve_info++ )
    {
        if( curve_info->grp_id == grp_id )
   d80d6:	4282      	cmp	r2, r0
   d80d8:	d003      	beq.n	d80e2 <mbedtls_ecp_curve_info_from_grp_id+0x12>
 */
const mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_grp_id( mbedtls_ecp_group_id grp_id )
{
    const mbedtls_ecp_curve_info *curve_info;

    for( curve_info = mbedtls_ecp_curve_list();
   d80da:	330c      	adds	r3, #12
   d80dc:	e7f9      	b.n	d80d2 <mbedtls_ecp_curve_info_from_grp_id+0x2>
    {
        if( curve_info->grp_id == grp_id )
            return( curve_info );
    }

    return( NULL );
   d80de:	4610      	mov	r0, r2
   d80e0:	4770      	bx	lr
   d80e2:	4618      	mov	r0, r3
}
   d80e4:	4770      	bx	lr
   d80e6:	bf00      	nop
   d80e8:	000e8360 	.word	0x000e8360

000d80ec <mbedtls_ecp_curve_info_from_tls_id>:
 */
const mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_tls_id( uint16_t tls_id )
{
    const mbedtls_ecp_curve_info *curve_info;

    for( curve_info = mbedtls_ecp_curve_list();
   d80ec:	4b05      	ldr	r3, [pc, #20]	; (d8104 <mbedtls_ecp_curve_info_from_tls_id+0x18>)
         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
   d80ee:	781a      	ldrb	r2, [r3, #0]
   d80f0:	b122      	cbz	r2, d80fc <mbedtls_ecp_curve_info_from_tls_id+0x10>
         curve_info++ )
    {
        if( curve_info->tls_id == tls_id )
   d80f2:	885a      	ldrh	r2, [r3, #2]
   d80f4:	4282      	cmp	r2, r0
   d80f6:	d003      	beq.n	d8100 <mbedtls_ecp_curve_info_from_tls_id+0x14>
 */
const mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_tls_id( uint16_t tls_id )
{
    const mbedtls_ecp_curve_info *curve_info;

    for( curve_info = mbedtls_ecp_curve_list();
   d80f8:	330c      	adds	r3, #12
   d80fa:	e7f8      	b.n	d80ee <mbedtls_ecp_curve_info_from_tls_id+0x2>
    {
        if( curve_info->tls_id == tls_id )
            return( curve_info );
    }

    return( NULL );
   d80fc:	4610      	mov	r0, r2
   d80fe:	4770      	bx	lr
   d8100:	4618      	mov	r0, r3
}
   d8102:	4770      	bx	lr
   d8104:	000e8360 	.word	0x000e8360

000d8108 <mbedtls_ecp_point_init>:

/*
 * Initialize (the components of) a point
 */
void mbedtls_ecp_point_init( mbedtls_ecp_point *pt )
{
   d8108:	b510      	push	{r4, lr}
   d810a:	4604      	mov	r4, r0
    ECP_VALIDATE( pt != NULL );

    mbedtls_mpi_init( &pt->X );
   d810c:	f007 ffc1 	bl	e0092 <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Y );
   d8110:	f104 000c 	add.w	r0, r4, #12
   d8114:	f007 ffbd 	bl	e0092 <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Z );
   d8118:	f104 0018 	add.w	r0, r4, #24
}
   d811c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    ECP_VALIDATE( pt != NULL );

    mbedtls_mpi_init( &pt->X );
    mbedtls_mpi_init( &pt->Y );
    mbedtls_mpi_init( &pt->Z );
   d8120:	f007 bfb7 	b.w	e0092 <mbedtls_mpi_init>

000d8124 <mbedtls_ecp_group_init>:

/*
 * Initialize (the components of) a group
 */
void mbedtls_ecp_group_init( mbedtls_ecp_group *grp )
{
   d8124:	b538      	push	{r3, r4, r5, lr}
    ECP_VALIDATE( grp != NULL );

    grp->id = MBEDTLS_ECP_DP_NONE;
   d8126:	2500      	movs	r5, #0

/*
 * Initialize (the components of) a group
 */
void mbedtls_ecp_group_init( mbedtls_ecp_group *grp )
{
   d8128:	4604      	mov	r4, r0
    ECP_VALIDATE( grp != NULL );

    grp->id = MBEDTLS_ECP_DP_NONE;
   d812a:	f800 5b04 	strb.w	r5, [r0], #4
    mbedtls_mpi_init( &grp->P );
   d812e:	f007 ffb0 	bl	e0092 <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->A );
   d8132:	f104 0010 	add.w	r0, r4, #16
   d8136:	f007 ffac 	bl	e0092 <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->B );
   d813a:	f104 001c 	add.w	r0, r4, #28
   d813e:	f007 ffa8 	bl	e0092 <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &grp->G );
   d8142:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d8146:	f7ff ffdf 	bl	d8108 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &grp->N );
   d814a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d814e:	f007 ffa0 	bl	e0092 <mbedtls_mpi_init>
    grp->pbits = 0;
   d8152:	65a5      	str	r5, [r4, #88]	; 0x58
    grp->nbits = 0;
   d8154:	65e5      	str	r5, [r4, #92]	; 0x5c
    grp->h = 0;
   d8156:	6625      	str	r5, [r4, #96]	; 0x60
    grp->modp = NULL;
   d8158:	6665      	str	r5, [r4, #100]	; 0x64
    grp->t_pre = NULL;
   d815a:	66a5      	str	r5, [r4, #104]	; 0x68
    grp->t_post = NULL;
   d815c:	66e5      	str	r5, [r4, #108]	; 0x6c
    grp->t_data = NULL;
   d815e:	6725      	str	r5, [r4, #112]	; 0x70
    grp->T = NULL;
   d8160:	6765      	str	r5, [r4, #116]	; 0x74
    grp->T_size = 0;
   d8162:	67a5      	str	r5, [r4, #120]	; 0x78
   d8164:	bd38      	pop	{r3, r4, r5, pc}

000d8166 <mbedtls_ecp_keypair_init>:

/*
 * Initialize (the components of) a key pair
 */
void mbedtls_ecp_keypair_init( mbedtls_ecp_keypair *key )
{
   d8166:	b510      	push	{r4, lr}
   d8168:	4604      	mov	r4, r0
    ECP_VALIDATE( key != NULL );

    mbedtls_ecp_group_init( &key->grp );
   d816a:	f7ff ffdb 	bl	d8124 <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &key->d );
   d816e:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   d8172:	f007 ff8e 	bl	e0092 <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &key->Q );
   d8176:	f104 0088 	add.w	r0, r4, #136	; 0x88
}
   d817a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    ECP_VALIDATE( key != NULL );

    mbedtls_ecp_group_init( &key->grp );
    mbedtls_mpi_init( &key->d );
    mbedtls_ecp_point_init( &key->Q );
   d817e:	f7ff bfc3 	b.w	d8108 <mbedtls_ecp_point_init>

000d8182 <mbedtls_ecp_point_free>:

/*
 * Unallocate (the components of) a point
 */
void mbedtls_ecp_point_free( mbedtls_ecp_point *pt )
{
   d8182:	b510      	push	{r4, lr}
    if( pt == NULL )
   d8184:	4604      	mov	r4, r0
   d8186:	b158      	cbz	r0, d81a0 <mbedtls_ecp_point_free+0x1e>
        return;

    mbedtls_mpi_free( &( pt->X ) );
   d8188:	f007 ff89 	bl	e009e <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Y ) );
   d818c:	f104 000c 	add.w	r0, r4, #12
   d8190:	f007 ff85 	bl	e009e <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Z ) );
   d8194:	f104 0018 	add.w	r0, r4, #24
}
   d8198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if( pt == NULL )
        return;

    mbedtls_mpi_free( &( pt->X ) );
    mbedtls_mpi_free( &( pt->Y ) );
    mbedtls_mpi_free( &( pt->Z ) );
   d819c:	f007 bf7f 	b.w	e009e <mbedtls_mpi_free>
   d81a0:	bd10      	pop	{r4, pc}

000d81a2 <mbedtls_ecp_group_free>:

/*
 * Unallocate (the components of) a group
 */
void mbedtls_ecp_group_free( mbedtls_ecp_group *grp )
{
   d81a2:	b570      	push	{r4, r5, r6, lr}
    size_t i;

    if( grp == NULL )
   d81a4:	4604      	mov	r4, r0
   d81a6:	b358      	cbz	r0, d8200 <mbedtls_ecp_group_free+0x5e>
        return;

    if( grp->h != 1 )
   d81a8:	6e03      	ldr	r3, [r0, #96]	; 0x60
   d81aa:	2b01      	cmp	r3, #1
   d81ac:	d012      	beq.n	d81d4 <mbedtls_ecp_group_free+0x32>
    {
        mbedtls_mpi_free( &grp->P );
   d81ae:	3004      	adds	r0, #4
   d81b0:	f007 ff75 	bl	e009e <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->A );
   d81b4:	f104 0010 	add.w	r0, r4, #16
   d81b8:	f007 ff71 	bl	e009e <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->B );
   d81bc:	f104 001c 	add.w	r0, r4, #28
   d81c0:	f007 ff6d 	bl	e009e <mbedtls_mpi_free>
        mbedtls_ecp_point_free( &grp->G );
   d81c4:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d81c8:	f7ff ffdb 	bl	d8182 <mbedtls_ecp_point_free>
        mbedtls_mpi_free( &grp->N );
   d81cc:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d81d0:	f007 ff65 	bl	e009e <mbedtls_mpi_free>
    }

    if( grp->T != NULL )
   d81d4:	6f63      	ldr	r3, [r4, #116]	; 0x74
   d81d6:	b16b      	cbz	r3, d81f4 <mbedtls_ecp_group_free+0x52>
   d81d8:	2500      	movs	r5, #0
    {
        for( i = 0; i < grp->T_size; i++ )
            mbedtls_ecp_point_free( &grp->T[i] );
   d81da:	2624      	movs	r6, #36	; 0x24
        mbedtls_mpi_free( &grp->N );
    }

    if( grp->T != NULL )
    {
        for( i = 0; i < grp->T_size; i++ )
   d81dc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
            mbedtls_ecp_point_free( &grp->T[i] );
        mbedtls_free( grp->T );
   d81de:	6f60      	ldr	r0, [r4, #116]	; 0x74
        mbedtls_mpi_free( &grp->N );
    }

    if( grp->T != NULL )
    {
        for( i = 0; i < grp->T_size; i++ )
   d81e0:	429d      	cmp	r5, r3
   d81e2:	d205      	bcs.n	d81f0 <mbedtls_ecp_group_free+0x4e>
            mbedtls_ecp_point_free( &grp->T[i] );
   d81e4:	fb06 0005 	mla	r0, r6, r5, r0
   d81e8:	f7ff ffcb 	bl	d8182 <mbedtls_ecp_point_free>
        mbedtls_mpi_free( &grp->N );
    }

    if( grp->T != NULL )
    {
        for( i = 0; i < grp->T_size; i++ )
   d81ec:	3501      	adds	r5, #1
   d81ee:	e7f5      	b.n	d81dc <mbedtls_ecp_group_free+0x3a>
            mbedtls_ecp_point_free( &grp->T[i] );
        mbedtls_free( grp->T );
   d81f0:	f00d f8bc 	bl	e536c <free>
    }

    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
   d81f4:	4620      	mov	r0, r4
   d81f6:	217c      	movs	r1, #124	; 0x7c
}
   d81f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        for( i = 0; i < grp->T_size; i++ )
            mbedtls_ecp_point_free( &grp->T[i] );
        mbedtls_free( grp->T );
    }

    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
   d81fc:	f002 b970 	b.w	da4e0 <mbedtls_platform_zeroize>
   d8200:	bd70      	pop	{r4, r5, r6, pc}

000d8202 <mbedtls_ecp_keypair_free>:

/*
 * Unallocate (the components of) a key pair
 */
void mbedtls_ecp_keypair_free( mbedtls_ecp_keypair *key )
{
   d8202:	b510      	push	{r4, lr}
    if( key == NULL )
   d8204:	4604      	mov	r4, r0
   d8206:	b158      	cbz	r0, d8220 <mbedtls_ecp_keypair_free+0x1e>
        return;

    mbedtls_ecp_group_free( &key->grp );
   d8208:	f7ff ffcb 	bl	d81a2 <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &key->d );
   d820c:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   d8210:	f007 ff45 	bl	e009e <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &key->Q );
   d8214:	f104 0088 	add.w	r0, r4, #136	; 0x88
}
   d8218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if( key == NULL )
        return;

    mbedtls_ecp_group_free( &key->grp );
    mbedtls_mpi_free( &key->d );
    mbedtls_ecp_point_free( &key->Q );
   d821c:	f7ff bfb1 	b.w	d8182 <mbedtls_ecp_point_free>
   d8220:	bd10      	pop	{r4, pc}

000d8222 <mbedtls_ecp_copy>:

/*
 * Copy the contents of a point
 */
int mbedtls_ecp_copy( mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
   d8222:	b538      	push	{r3, r4, r5, lr}
   d8224:	4604      	mov	r4, r0
   d8226:	460d      	mov	r5, r1
    int ret;
    ECP_VALIDATE_RET( P != NULL );
    ECP_VALIDATE_RET( Q != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
   d8228:	f007 ffb3 	bl	e0192 <mbedtls_mpi_copy>
   d822c:	b970      	cbnz	r0, d824c <mbedtls_ecp_copy+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
   d822e:	f105 010c 	add.w	r1, r5, #12
   d8232:	f104 000c 	add.w	r0, r4, #12
   d8236:	f007 ffac 	bl	e0192 <mbedtls_mpi_copy>
   d823a:	b938      	cbnz	r0, d824c <mbedtls_ecp_copy+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
   d823c:	f105 0118 	add.w	r1, r5, #24
   d8240:	f104 0018 	add.w	r0, r4, #24

cleanup:
    return( ret );
}
   d8244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ECP_VALIDATE_RET( P != NULL );
    ECP_VALIDATE_RET( Q != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
   d8248:	f007 bfa3 	b.w	e0192 <mbedtls_mpi_copy>

cleanup:
    return( ret );
}
   d824c:	bd38      	pop	{r3, r4, r5, pc}

000d824e <mbedtls_ecp_group_copy>:
int mbedtls_ecp_group_copy( mbedtls_ecp_group *dst, const mbedtls_ecp_group *src )
{
    ECP_VALIDATE_RET( dst != NULL );
    ECP_VALIDATE_RET( src != NULL );

    return( mbedtls_ecp_group_load( dst, src->id ) );
   d824e:	7809      	ldrb	r1, [r1, #0]
   d8250:	f004 bba4 	b.w	dc99c <mbedtls_ecp_group_load>

000d8254 <mbedtls_ecp_set_zero>:

/*
 * Set point to zero
 */
int mbedtls_ecp_set_zero( mbedtls_ecp_point *pt )
{
   d8254:	b510      	push	{r4, lr}
    int ret;
    ECP_VALIDATE_RET( pt != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
   d8256:	2101      	movs	r1, #1

/*
 * Set point to zero
 */
int mbedtls_ecp_set_zero( mbedtls_ecp_point *pt )
{
   d8258:	4604      	mov	r4, r0
    int ret;
    ECP_VALIDATE_RET( pt != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
   d825a:	f007 fffb 	bl	e0254 <mbedtls_mpi_lset>
   d825e:	b960      	cbnz	r0, d827a <mbedtls_ecp_set_zero+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
   d8260:	2101      	movs	r1, #1
   d8262:	f104 000c 	add.w	r0, r4, #12
   d8266:	f007 fff5 	bl	e0254 <mbedtls_mpi_lset>
   d826a:	b930      	cbnz	r0, d827a <mbedtls_ecp_set_zero+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
   d826c:	4601      	mov	r1, r0
   d826e:	f104 0018 	add.w	r0, r4, #24

cleanup:
    return( ret );
}
   d8272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    int ret;
    ECP_VALIDATE_RET( pt != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
   d8276:	f007 bfed 	b.w	e0254 <mbedtls_mpi_lset>

cleanup:
    return( ret );
}
   d827a:	bd10      	pop	{r4, pc}

000d827c <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_>:
 *
 * Cost: 1A := 8M + 3S
 */
static int ecp_add_mixed( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                          const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
   d827c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#endif /* MBEDTLS_ECP_ADD_MIXED_ALT */

    /*
     * Trivial cases: P == 0 or Q == 0 (case 1)
     */
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   d8280:	f102 0918 	add.w	r9, r2, #24
 *
 * Cost: 1A := 8M + 3S
 */
static int ecp_add_mixed( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                          const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
   d8284:	b096      	sub	sp, #88	; 0x58
   d8286:	4605      	mov	r5, r0
   d8288:	460e      	mov	r6, r1
#endif /* MBEDTLS_ECP_ADD_MIXED_ALT */

    /*
     * Trivial cases: P == 0 or Q == 0 (case 1)
     */
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   d828a:	4648      	mov	r0, r9
   d828c:	2100      	movs	r1, #0
 *
 * Cost: 1A := 8M + 3S
 */
static int ecp_add_mixed( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                          const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
   d828e:	4690      	mov	r8, r2
   d8290:	461f      	mov	r7, r3
#endif /* MBEDTLS_ECP_ADD_MIXED_ALT */

    /*
     * Trivial cases: P == 0 or Q == 0 (case 1)
     */
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   d8292:	f008 fa2a 	bl	e06ea <mbedtls_mpi_cmp_int>
   d8296:	b908      	cbnz	r0, d829c <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x20>
        return( mbedtls_ecp_copy( R, Q ) );
   d8298:	4639      	mov	r1, r7
   d829a:	e008      	b.n	d82ae <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x32>

    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )
   d829c:	6a3b      	ldr	r3, [r7, #32]
   d829e:	b153      	cbz	r3, d82b6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3a>
   d82a0:	2100      	movs	r1, #0
   d82a2:	f107 0018 	add.w	r0, r7, #24
   d82a6:	f008 fa20 	bl	e06ea <mbedtls_mpi_cmp_int>
   d82aa:	b920      	cbnz	r0, d82b6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3a>
        return( mbedtls_ecp_copy( R, P ) );
   d82ac:	4641      	mov	r1, r8
   d82ae:	4630      	mov	r0, r6
   d82b0:	f7ff ffb7 	bl	d8222 <mbedtls_ecp_copy>
   d82b4:	e1bd      	b.n	d8632 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3b6>

    /*
     * Make sure Q coordinates are normalized
     */
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
   d82b6:	6a3b      	ldr	r3, [r7, #32]
   d82b8:	b13b      	cbz	r3, d82ca <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x4e>
   d82ba:	2101      	movs	r1, #1
   d82bc:	f107 0018 	add.w	r0, r7, #24
   d82c0:	f008 fa13 	bl	e06ea <mbedtls_mpi_cmp_int>
   d82c4:	2800      	cmp	r0, #0
   d82c6:	f040 8095 	bne.w	d83f4 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x178>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 ); mbedtls_mpi_init( &T3 ); mbedtls_mpi_init( &T4 );
   d82ca:	a801      	add	r0, sp, #4
   d82cc:	f007 fee1 	bl	e0092 <mbedtls_mpi_init>
   d82d0:	a804      	add	r0, sp, #16
   d82d2:	f007 fede 	bl	e0092 <mbedtls_mpi_init>
   d82d6:	a807      	add	r0, sp, #28
   d82d8:	f007 fedb 	bl	e0092 <mbedtls_mpi_init>
   d82dc:	a80a      	add	r0, sp, #40	; 0x28
   d82de:	f007 fed8 	bl	e0092 <mbedtls_mpi_init>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
   d82e2:	a80d      	add	r0, sp, #52	; 0x34
   d82e4:	f007 fed5 	bl	e0092 <mbedtls_mpi_init>
   d82e8:	a810      	add	r0, sp, #64	; 0x40
   d82ea:	f007 fed2 	bl	e0092 <mbedtls_mpi_init>
   d82ee:	a813      	add	r0, sp, #76	; 0x4c
   d82f0:	f007 fecf 	bl	e0092 <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
   d82f4:	464a      	mov	r2, r9
   d82f6:	4649      	mov	r1, r9
   d82f8:	a801      	add	r0, sp, #4
   d82fa:	f008 fb15 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d82fe:	4604      	mov	r4, r0
   d8300:	2800      	cmp	r0, #0
   d8302:	d160      	bne.n	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d8304:	4629      	mov	r1, r5
   d8306:	a801      	add	r0, sp, #4
   d8308:	f7ff faa2 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d830c:	4604      	mov	r4, r0
   d830e:	2800      	cmp	r0, #0
   d8310:	d159      	bne.n	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
   d8312:	464a      	mov	r2, r9
   d8314:	a901      	add	r1, sp, #4
   d8316:	a804      	add	r0, sp, #16
   d8318:	f008 fb06 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d831c:	4604      	mov	r4, r0
   d831e:	2800      	cmp	r0, #0
   d8320:	d151      	bne.n	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d8322:	4629      	mov	r1, r5
   d8324:	a804      	add	r0, sp, #16
   d8326:	f7ff fa93 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d832a:	4604      	mov	r4, r0
   d832c:	2800      	cmp	r0, #0
   d832e:	d14a      	bne.n	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
   d8330:	a901      	add	r1, sp, #4
   d8332:	463a      	mov	r2, r7
   d8334:	4608      	mov	r0, r1
   d8336:	f008 faf7 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d833a:	4604      	mov	r4, r0
   d833c:	2800      	cmp	r0, #0
   d833e:	d142      	bne.n	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d8340:	4629      	mov	r1, r5
   d8342:	a801      	add	r0, sp, #4
   d8344:	f7ff fa84 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8348:	4604      	mov	r4, r0
   d834a:	2800      	cmp	r0, #0
   d834c:	d13b      	bne.n	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
   d834e:	a904      	add	r1, sp, #16
   d8350:	f107 020c 	add.w	r2, r7, #12
   d8354:	4608      	mov	r0, r1
   d8356:	f008 fae7 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d835a:	4604      	mov	r4, r0
   d835c:	2800      	cmp	r0, #0
   d835e:	d132      	bne.n	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d8360:	4629      	mov	r1, r5
   d8362:	a804      	add	r0, sp, #16
   d8364:	f7ff fa74 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8368:	4604      	mov	r4, r0
   d836a:	bb60      	cbnz	r0, d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
   d836c:	a901      	add	r1, sp, #4
   d836e:	4642      	mov	r2, r8
   d8370:	4608      	mov	r0, r1
   d8372:	f008 fa8b 	bl	e088c <mbedtls_mpi_sub_mpi>
   d8376:	4604      	mov	r4, r0
   d8378:	bb28      	cbnz	r0, d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d837a:	1d2f      	adds	r7, r5, #4
   d837c:	9b01      	ldr	r3, [sp, #4]
   d837e:	2b00      	cmp	r3, #0
   d8380:	da05      	bge.n	d838e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x112>
   d8382:	2100      	movs	r1, #0
   d8384:	a801      	add	r0, sp, #4
   d8386:	f008 f9b0 	bl	e06ea <mbedtls_mpi_cmp_int>
   d838a:	2800      	cmp	r0, #0
   d838c:	d134      	bne.n	d83f8 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x17c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
   d838e:	a904      	add	r1, sp, #16
   d8390:	f108 0a0c 	add.w	sl, r8, #12
   d8394:	4652      	mov	r2, sl
   d8396:	4608      	mov	r0, r1
   d8398:	f008 fa78 	bl	e088c <mbedtls_mpi_sub_mpi>
   d839c:	4604      	mov	r4, r0
   d839e:	b990      	cbnz	r0, d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d83a0:	1d2f      	adds	r7, r5, #4
   d83a2:	9b04      	ldr	r3, [sp, #16]
   d83a4:	2b00      	cmp	r3, #0
   d83a6:	db30      	blt.n	d840a <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x18e>

    /* Special cases (2) and (3) */
    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )
   d83a8:	2100      	movs	r1, #0
   d83aa:	a801      	add	r0, sp, #4
   d83ac:	f008 f99d 	bl	e06ea <mbedtls_mpi_cmp_int>
   d83b0:	4601      	mov	r1, r0
   d83b2:	2800      	cmp	r0, #0
   d83b4:	d038      	beq.n	d8428 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x1ac>
            ret = mbedtls_ecp_set_zero( R );
            goto cleanup;
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
   d83b6:	aa01      	add	r2, sp, #4
   d83b8:	4649      	mov	r1, r9
   d83ba:	a813      	add	r0, sp, #76	; 0x4c
   d83bc:	f008 fab4 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d83c0:	4604      	mov	r4, r0
   d83c2:	2800      	cmp	r0, #0
   d83c4:	d03e      	beq.n	d8444 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x1c8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );

cleanup:

    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );
   d83c6:	a801      	add	r0, sp, #4
   d83c8:	f007 fe69 	bl	e009e <mbedtls_mpi_free>
   d83cc:	a804      	add	r0, sp, #16
   d83ce:	f007 fe66 	bl	e009e <mbedtls_mpi_free>
   d83d2:	a807      	add	r0, sp, #28
   d83d4:	f007 fe63 	bl	e009e <mbedtls_mpi_free>
   d83d8:	a80a      	add	r0, sp, #40	; 0x28
   d83da:	f007 fe60 	bl	e009e <mbedtls_mpi_free>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
   d83de:	a80d      	add	r0, sp, #52	; 0x34
   d83e0:	f007 fe5d 	bl	e009e <mbedtls_mpi_free>
   d83e4:	a810      	add	r0, sp, #64	; 0x40
   d83e6:	f007 fe5a 	bl	e009e <mbedtls_mpi_free>
   d83ea:	a813      	add	r0, sp, #76	; 0x4c
   d83ec:	f007 fe57 	bl	e009e <mbedtls_mpi_free>

    return( ret );
   d83f0:	4620      	mov	r0, r4
   d83f2:	e11e      	b.n	d8632 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3b6>

    /*
     * Make sure Q coordinates are normalized
     */
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d83f4:	4890      	ldr	r0, [pc, #576]	; (d8638 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3bc>)
   d83f6:	e11c      	b.n	d8632 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3b6>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
   d83f8:	a901      	add	r1, sp, #4
   d83fa:	463a      	mov	r2, r7
   d83fc:	4608      	mov	r0, r1
   d83fe:	f008 fa24 	bl	e084a <mbedtls_mpi_add_mpi>
   d8402:	4604      	mov	r4, r0
   d8404:	2800      	cmp	r0, #0
   d8406:	d0b9      	beq.n	d837c <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x100>
   d8408:	e7dd      	b.n	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
   d840a:	2100      	movs	r1, #0
   d840c:	a804      	add	r0, sp, #16
   d840e:	f008 f96c 	bl	e06ea <mbedtls_mpi_cmp_int>
   d8412:	2800      	cmp	r0, #0
   d8414:	d0c8      	beq.n	d83a8 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x12c>
   d8416:	a904      	add	r1, sp, #16
   d8418:	463a      	mov	r2, r7
   d841a:	4608      	mov	r0, r1
   d841c:	f008 fa15 	bl	e084a <mbedtls_mpi_add_mpi>
   d8420:	4604      	mov	r4, r0
   d8422:	2800      	cmp	r0, #0
   d8424:	d0bd      	beq.n	d83a2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x126>
   d8426:	e7ce      	b.n	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>

    /* Special cases (2) and (3) */
    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )
    {
        if( mbedtls_mpi_cmp_int( &T2, 0 ) == 0 )
   d8428:	a804      	add	r0, sp, #16
   d842a:	f008 f95e 	bl	e06ea <mbedtls_mpi_cmp_int>
   d842e:	b928      	cbnz	r0, d843c <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x1c0>
        {
            ret = ecp_double_jac( grp, R, P );
   d8430:	4642      	mov	r2, r8
   d8432:	4631      	mov	r1, r6
   d8434:	4628      	mov	r0, r5
   d8436:	f7ff fa4f 	bl	d78d8 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_>
   d843a:	e0ce      	b.n	d85da <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x35e>
            goto cleanup;
        }
        else
        {
            ret = mbedtls_ecp_set_zero( R );
   d843c:	4630      	mov	r0, r6
   d843e:	f7ff ff09 	bl	d8254 <mbedtls_ecp_set_zero>
   d8442:	e0ca      	b.n	d85da <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x35e>
            goto cleanup;
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
   d8444:	4629      	mov	r1, r5
   d8446:	a813      	add	r0, sp, #76	; 0x4c
   d8448:	f7ff fa02 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d844c:	4604      	mov	r4, r0
   d844e:	2800      	cmp	r0, #0
   d8450:	d1b9      	bne.n	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
   d8452:	aa01      	add	r2, sp, #4
   d8454:	4611      	mov	r1, r2
   d8456:	a807      	add	r0, sp, #28
   d8458:	f008 fa66 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d845c:	4604      	mov	r4, r0
   d845e:	2800      	cmp	r0, #0
   d8460:	d1b1      	bne.n	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d8462:	4629      	mov	r1, r5
   d8464:	a807      	add	r0, sp, #28
   d8466:	f7ff f9f3 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d846a:	4604      	mov	r4, r0
   d846c:	2800      	cmp	r0, #0
   d846e:	d1aa      	bne.n	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
   d8470:	aa01      	add	r2, sp, #4
   d8472:	a907      	add	r1, sp, #28
   d8474:	a80a      	add	r0, sp, #40	; 0x28
   d8476:	f008 fa57 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d847a:	4604      	mov	r4, r0
   d847c:	2800      	cmp	r0, #0
   d847e:	d1a2      	bne.n	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d8480:	4629      	mov	r1, r5
   d8482:	a80a      	add	r0, sp, #40	; 0x28
   d8484:	f7ff f9e4 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8488:	4604      	mov	r4, r0
   d848a:	2800      	cmp	r0, #0
   d848c:	d19b      	bne.n	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
   d848e:	a907      	add	r1, sp, #28
   d8490:	4642      	mov	r2, r8
   d8492:	4608      	mov	r0, r1
   d8494:	f008 fa48 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d8498:	4604      	mov	r4, r0
   d849a:	2800      	cmp	r0, #0
   d849c:	d193      	bne.n	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d849e:	4629      	mov	r1, r5
   d84a0:	a807      	add	r0, sp, #28
   d84a2:	f7ff f9d5 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d84a6:	4604      	mov	r4, r0
   d84a8:	2800      	cmp	r0, #0
   d84aa:	d18c      	bne.n	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
   d84ac:	2202      	movs	r2, #2
   d84ae:	a907      	add	r1, sp, #28
   d84b0:	a801      	add	r0, sp, #4
   d84b2:	f008 faa8 	bl	e0a06 <mbedtls_mpi_mul_int>
   d84b6:	4604      	mov	r4, r0
   d84b8:	2800      	cmp	r0, #0
   d84ba:	d184      	bne.n	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d84bc:	1d2f      	adds	r7, r5, #4
   d84be:	4639      	mov	r1, r7
   d84c0:	a801      	add	r0, sp, #4
   d84c2:	f008 f8cd 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   d84c6:	2800      	cmp	r0, #0
   d84c8:	db08      	blt.n	d84dc <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x260>
   d84ca:	a901      	add	r1, sp, #4
   d84cc:	463a      	mov	r2, r7
   d84ce:	4608      	mov	r0, r1
   d84d0:	f008 f97b 	bl	e07ca <mbedtls_mpi_sub_abs>
   d84d4:	4604      	mov	r4, r0
   d84d6:	2800      	cmp	r0, #0
   d84d8:	d0f1      	beq.n	d84be <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x242>
   d84da:	e774      	b.n	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
   d84dc:	aa04      	add	r2, sp, #16
   d84de:	4611      	mov	r1, r2
   d84e0:	a80d      	add	r0, sp, #52	; 0x34
   d84e2:	f008 fa21 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d84e6:	4604      	mov	r4, r0
   d84e8:	2800      	cmp	r0, #0
   d84ea:	f47f af6c 	bne.w	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d84ee:	4629      	mov	r1, r5
   d84f0:	a80d      	add	r0, sp, #52	; 0x34
   d84f2:	f7ff f9ad 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d84f6:	4604      	mov	r4, r0
   d84f8:	2800      	cmp	r0, #0
   d84fa:	f47f af64 	bne.w	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
   d84fe:	a90d      	add	r1, sp, #52	; 0x34
   d8500:	aa01      	add	r2, sp, #4
   d8502:	4608      	mov	r0, r1
   d8504:	f008 f9c2 	bl	e088c <mbedtls_mpi_sub_mpi>
   d8508:	4604      	mov	r4, r0
   d850a:	2800      	cmp	r0, #0
   d850c:	f47f af5b 	bne.w	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d8510:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d8512:	2b00      	cmp	r3, #0
   d8514:	da05      	bge.n	d8522 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2a6>
   d8516:	2100      	movs	r1, #0
   d8518:	a80d      	add	r0, sp, #52	; 0x34
   d851a:	f008 f8e6 	bl	e06ea <mbedtls_mpi_cmp_int>
   d851e:	2800      	cmp	r0, #0
   d8520:	d15d      	bne.n	d85de <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x362>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
   d8522:	a90d      	add	r1, sp, #52	; 0x34
   d8524:	aa0a      	add	r2, sp, #40	; 0x28
   d8526:	4608      	mov	r0, r1
   d8528:	f008 f9b0 	bl	e088c <mbedtls_mpi_sub_mpi>
   d852c:	4604      	mov	r4, r0
   d852e:	2800      	cmp	r0, #0
   d8530:	f47f af49 	bne.w	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d8534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d8536:	2b00      	cmp	r3, #0
   d8538:	db57      	blt.n	d85ea <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x36e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
   d853a:	a907      	add	r1, sp, #28
   d853c:	aa0d      	add	r2, sp, #52	; 0x34
   d853e:	4608      	mov	r0, r1
   d8540:	f008 f9a4 	bl	e088c <mbedtls_mpi_sub_mpi>
   d8544:	4604      	mov	r4, r0
   d8546:	2800      	cmp	r0, #0
   d8548:	f47f af3d 	bne.w	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d854c:	9b07      	ldr	r3, [sp, #28]
   d854e:	2b00      	cmp	r3, #0
   d8550:	db57      	blt.n	d8602 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x386>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
   d8552:	a907      	add	r1, sp, #28
   d8554:	aa04      	add	r2, sp, #16
   d8556:	4608      	mov	r0, r1
   d8558:	f008 f9e6 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d855c:	4604      	mov	r4, r0
   d855e:	2800      	cmp	r0, #0
   d8560:	f47f af31 	bne.w	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d8564:	4629      	mov	r1, r5
   d8566:	a807      	add	r0, sp, #28
   d8568:	f7ff f972 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d856c:	4604      	mov	r4, r0
   d856e:	2800      	cmp	r0, #0
   d8570:	f47f af29 	bne.w	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
   d8574:	a90a      	add	r1, sp, #40	; 0x28
   d8576:	4652      	mov	r2, sl
   d8578:	4608      	mov	r0, r1
   d857a:	f008 f9d5 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d857e:	4604      	mov	r4, r0
   d8580:	2800      	cmp	r0, #0
   d8582:	f47f af20 	bne.w	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d8586:	4629      	mov	r1, r5
   d8588:	a80a      	add	r0, sp, #40	; 0x28
   d858a:	f7ff f961 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d858e:	4604      	mov	r4, r0
   d8590:	2800      	cmp	r0, #0
   d8592:	f47f af18 	bne.w	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
   d8596:	aa0a      	add	r2, sp, #40	; 0x28
   d8598:	a907      	add	r1, sp, #28
   d859a:	a810      	add	r0, sp, #64	; 0x40
   d859c:	f008 f976 	bl	e088c <mbedtls_mpi_sub_mpi>
   d85a0:	4604      	mov	r4, r0
   d85a2:	2800      	cmp	r0, #0
   d85a4:	f47f af0f 	bne.w	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
   d85a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d85aa:	2b00      	cmp	r3, #0
   d85ac:	db35      	blt.n	d861a <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x39e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );
   d85ae:	a90d      	add	r1, sp, #52	; 0x34
   d85b0:	4630      	mov	r0, r6
   d85b2:	f007 fdee 	bl	e0192 <mbedtls_mpi_copy>
   d85b6:	4604      	mov	r4, r0
   d85b8:	2800      	cmp	r0, #0
   d85ba:	f47f af04 	bne.w	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
   d85be:	a910      	add	r1, sp, #64	; 0x40
   d85c0:	f106 000c 	add.w	r0, r6, #12
   d85c4:	f007 fde5 	bl	e0192 <mbedtls_mpi_copy>
   d85c8:	4604      	mov	r4, r0
   d85ca:	2800      	cmp	r0, #0
   d85cc:	f47f aefb 	bne.w	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
   d85d0:	a913      	add	r1, sp, #76	; 0x4c
   d85d2:	f106 0018 	add.w	r0, r6, #24
   d85d6:	f007 fddc 	bl	e0192 <mbedtls_mpi_copy>
   d85da:	4604      	mov	r4, r0
   d85dc:	e6f3      	b.n	d83c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
   d85de:	a90d      	add	r1, sp, #52	; 0x34
   d85e0:	463a      	mov	r2, r7
   d85e2:	4608      	mov	r0, r1
   d85e4:	f008 f931 	bl	e084a <mbedtls_mpi_add_mpi>
   d85e8:	e78e      	b.n	d8508 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x28c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
   d85ea:	2100      	movs	r1, #0
   d85ec:	a80d      	add	r0, sp, #52	; 0x34
   d85ee:	f008 f87c 	bl	e06ea <mbedtls_mpi_cmp_int>
   d85f2:	2800      	cmp	r0, #0
   d85f4:	d0a1      	beq.n	d853a <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2be>
   d85f6:	a90d      	add	r1, sp, #52	; 0x34
   d85f8:	463a      	mov	r2, r7
   d85fa:	4608      	mov	r0, r1
   d85fc:	f008 f925 	bl	e084a <mbedtls_mpi_add_mpi>
   d8600:	e794      	b.n	d852c <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2b0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
   d8602:	2100      	movs	r1, #0
   d8604:	a807      	add	r0, sp, #28
   d8606:	f008 f870 	bl	e06ea <mbedtls_mpi_cmp_int>
   d860a:	2800      	cmp	r0, #0
   d860c:	d0a1      	beq.n	d8552 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2d6>
   d860e:	a907      	add	r1, sp, #28
   d8610:	463a      	mov	r2, r7
   d8612:	4608      	mov	r0, r1
   d8614:	f008 f919 	bl	e084a <mbedtls_mpi_add_mpi>
   d8618:	e794      	b.n	d8544 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2c8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
   d861a:	2100      	movs	r1, #0
   d861c:	a810      	add	r0, sp, #64	; 0x40
   d861e:	f008 f864 	bl	e06ea <mbedtls_mpi_cmp_int>
   d8622:	2800      	cmp	r0, #0
   d8624:	d0c3      	beq.n	d85ae <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x332>
   d8626:	a910      	add	r1, sp, #64	; 0x40
   d8628:	463a      	mov	r2, r7
   d862a:	4608      	mov	r0, r1
   d862c:	f008 f90d 	bl	e084a <mbedtls_mpi_add_mpi>
   d8630:	e7b6      	b.n	d85a0 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x324>

    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );

    return( ret );
}
   d8632:	b016      	add	sp, #88	; 0x58
   d8634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8638:	ffffb080 	.word	0xffffb080

000d863c <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6>:
 * once the auxiliary table has been pre-computed.
 *
 * Scalar recoding may use a parity trick that makes us compute -m * P,
 * if that is the case we'll need to recover m * P at the end.
 */
static int ecp_mul_comb_after_precomp( const mbedtls_ecp_group *grp,
   d863c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8640:	b0d9      	sub	sp, #356	; 0x164
                                   unsigned char *parity_trick )
{
    int ret;
    mbedtls_mpi M, mm;

    mbedtls_mpi_init( &M );
   d8642:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 * once the auxiliary table has been pre-computed.
 *
 * Scalar recoding may use a parity trick that makes us compute -m * P,
 * if that is the case we'll need to recover m * P at the end.
 */
static int ecp_mul_comb_after_precomp( const mbedtls_ecp_group *grp,
   d8646:	4605      	mov	r5, r0
   d8648:	9302      	str	r3, [sp, #8]
                                   unsigned char *parity_trick )
{
    int ret;
    mbedtls_mpi M, mm;

    mbedtls_mpi_init( &M );
   d864a:	4658      	mov	r0, fp
 * once the auxiliary table has been pre-computed.
 *
 * Scalar recoding may use a parity trick that makes us compute -m * P,
 * if that is the case we'll need to recover m * P at the end.
 */
static int ecp_mul_comb_after_precomp( const mbedtls_ecp_group *grp,
   d864c:	f89d 3188 	ldrb.w	r3, [sp, #392]	; 0x188
   d8650:	9303      	str	r3, [sp, #12]
   d8652:	460e      	mov	r6, r1
   d8654:	4617      	mov	r7, r2
   d8656:	f89d a18c 	ldrb.w	sl, [sp, #396]	; 0x18c

    mbedtls_mpi_init( &M );
    mbedtls_mpi_init( &mm );

    /* N is always odd (see above), just make extra sure */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
   d865a:	f105 094c 	add.w	r9, r5, #76	; 0x4c
                                   unsigned char *parity_trick )
{
    int ret;
    mbedtls_mpi M, mm;

    mbedtls_mpi_init( &M );
   d865e:	f007 fd18 	bl	e0092 <mbedtls_mpi_init>
    mbedtls_mpi_init( &mm );
   d8662:	a80d      	add	r0, sp, #52	; 0x34
   d8664:	f007 fd15 	bl	e0092 <mbedtls_mpi_init>

    /* N is always odd (see above), just make extra sure */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
   d8668:	2100      	movs	r1, #0
   d866a:	4648      	mov	r0, r9
   d866c:	f007 fe0e 	bl	e028c <mbedtls_mpi_get_bit>
   d8670:	2801      	cmp	r0, #1
   d8672:	d178      	bne.n	d8766 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x12a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /* do we need the parity trick? */
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
   d8674:	2100      	movs	r1, #0
   d8676:	4638      	mov	r0, r7
   d8678:	f007 fe08 	bl	e028c <mbedtls_mpi_get_bit>

    /* execute parity fix in constant time */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
   d867c:	4639      	mov	r1, r7
    /* N is always odd (see above), just make extra sure */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /* do we need the parity trick? */
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
   d867e:	fab0 f880 	clz	r8, r0

    /* execute parity fix in constant time */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
   d8682:	4658      	mov	r0, fp
   d8684:	f007 fd85 	bl	e0192 <mbedtls_mpi_copy>
    /* N is always odd (see above), just make extra sure */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /* do we need the parity trick? */
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
   d8688:	ea4f 1858 	mov.w	r8, r8, lsr #5

    /* execute parity fix in constant time */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
   d868c:	4604      	mov	r4, r0
   d868e:	2800      	cmp	r0, #0
   d8690:	d15f      	bne.n	d8752 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x116>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );
   d8692:	463a      	mov	r2, r7
   d8694:	4649      	mov	r1, r9
   d8696:	a80d      	add	r0, sp, #52	; 0x34
   d8698:	f008 f8f8 	bl	e088c <mbedtls_mpi_sub_mpi>
   d869c:	4604      	mov	r4, r0
   d869e:	2800      	cmp	r0, #0
   d86a0:	d157      	bne.n	d8752 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x116>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, *parity_trick ) );
   d86a2:	4642      	mov	r2, r8
   d86a4:	a90d      	add	r1, sp, #52	; 0x34
   d86a6:	4658      	mov	r0, fp
   d86a8:	f007 fd9f 	bl	e01ea <mbedtls_mpi_safe_cond_assign>
   d86ac:	4604      	mov	r4, r0
   d86ae:	2800      	cmp	r0, #0
   d86b0:	d14f      	bne.n	d8752 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x116>
                                  unsigned char w, const mbedtls_mpi *m )
{
    size_t i, j;
    unsigned char c, cc, adjust;

    memset( x, 0, d+1 );
   d86b2:	9b64      	ldr	r3, [sp, #400]	; 0x190
   d86b4:	f10d 0958 	add.w	r9, sp, #88	; 0x58
   d86b8:	1c5a      	adds	r2, r3, #1
   d86ba:	4601      	mov	r1, r0
   d86bc:	4648      	mov	r0, r9
   d86be:	f00e fc6c 	bl	e6f9a <memset>

    /* First get the classical comb values (except for x_d = 0) */
    for( i = 0; i < d; i++ )
   d86c2:	4627      	mov	r7, r4
        for( j = 0; j < w; j++ )
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
   d86c4:	465b      	mov	r3, fp
    unsigned char c, cc, adjust;

    memset( x, 0, d+1 );

    /* First get the classical comb values (except for x_d = 0) */
    for( i = 0; i < d; i++ )
   d86c6:	9a64      	ldr	r2, [sp, #400]	; 0x190
   d86c8:	42ba      	cmp	r2, r7
   d86ca:	d01a      	beq.n	d8702 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0xc6>
   d86cc:	f04f 0b00 	mov.w	fp, #0
   d86d0:	463a      	mov	r2, r7
        for( j = 0; j < w; j++ )
   d86d2:	45da      	cmp	sl, fp
   d86d4:	d913      	bls.n	d86fe <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0xc2>
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
   d86d6:	4611      	mov	r1, r2
   d86d8:	4618      	mov	r0, r3
   d86da:	9205      	str	r2, [sp, #20]
   d86dc:	9304      	str	r3, [sp, #16]
   d86de:	f007 fdd5 	bl	e028c <mbedtls_mpi_get_bit>
   d86e2:	f817 1009 	ldrb.w	r1, [r7, r9]
   d86e6:	9b64      	ldr	r3, [sp, #400]	; 0x190
   d86e8:	9a05      	ldr	r2, [sp, #20]
   d86ea:	fa00 f00b 	lsl.w	r0, r0, fp
   d86ee:	4308      	orrs	r0, r1
   d86f0:	441a      	add	r2, r3
   d86f2:	f807 0009 	strb.w	r0, [r7, r9]

    memset( x, 0, d+1 );

    /* First get the classical comb values (except for x_d = 0) */
    for( i = 0; i < d; i++ )
        for( j = 0; j < w; j++ )
   d86f6:	f10b 0b01 	add.w	fp, fp, #1
   d86fa:	9b04      	ldr	r3, [sp, #16]
   d86fc:	e7e9      	b.n	d86d2 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x96>
    unsigned char c, cc, adjust;

    memset( x, 0, d+1 );

    /* First get the classical comb values (except for x_d = 0) */
    for( i = 0; i < d; i++ )
   d86fe:	3701      	adds	r7, #1
   d8700:	e7e1      	b.n	d86c6 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x8a>
   d8702:	ab16      	add	r3, sp, #88	; 0x58
   d8704:	f04f 0900 	mov.w	r9, #0
   d8708:	f04f 0c01 	mov.w	ip, #1
        for( j = 0; j < w; j++ )
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;

    /* Now make sure x_1 .. x_d are odd */
    c = 0;
    for( i = 1; i <= d; i++ )
   d870c:	9a64      	ldr	r2, [sp, #400]	; 0x190
   d870e:	4562      	cmp	r2, ip
   d8710:	f103 0301 	add.w	r3, r3, #1
   d8714:	d31d      	bcc.n	d8752 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x116>
    {
        /* Add carry and update it */
        cc   = x[i] & c;
   d8716:	7819      	ldrb	r1, [r3, #0]
        x[i] = x[i] ^ c;
        c = cc;

        /* Adjust if needed, avoiding branches */
        adjust = 1 - ( x[i] & 0x01 );
        c   |= x[i] & ( x[i-1] * adjust );
   d8718:	f813 7c01 	ldrb.w	r7, [r3, #-1]
    c = 0;
    for( i = 1; i <= d; i++ )
    {
        /* Add carry and update it */
        cc   = x[i] & c;
        x[i] = x[i] ^ c;
   d871c:	ea81 0009 	eor.w	r0, r1, r9
   d8720:	f000 0e01 	and.w	lr, r0, #1
   d8724:	f08e 0e01 	eor.w	lr, lr, #1
        c = cc;

        /* Adjust if needed, avoiding branches */
        adjust = 1 - ( x[i] & 0x01 );
        c   |= x[i] & ( x[i-1] * adjust );
   d8728:	fb17 f20e 	smulbb	r2, r7, lr
   d872c:	b240      	sxtb	r0, r0
   d872e:	b252      	sxtb	r2, r2
   d8730:	ea00 0a02 	and.w	sl, r0, r2
   d8734:	ea01 0109 	and.w	r1, r1, r9
   d8738:	ea4a 0901 	orr.w	r9, sl, r1
        x[i] = x[i] ^ ( x[i-1] * adjust );
   d873c:	4042      	eors	r2, r0
        x[i-1] |= adjust << 7;
   d873e:	ea47 17ce 	orr.w	r7, r7, lr, lsl #7
        x[i] = x[i] ^ c;
        c = cc;

        /* Adjust if needed, avoiding branches */
        adjust = 1 - ( x[i] & 0x01 );
        c   |= x[i] & ( x[i-1] * adjust );
   d8742:	fa5f f989 	uxtb.w	r9, r9
        x[i] = x[i] ^ ( x[i-1] * adjust );
   d8746:	701a      	strb	r2, [r3, #0]
        x[i-1] |= adjust << 7;
   d8748:	f803 7c01 	strb.w	r7, [r3, #-1]
        for( j = 0; j < w; j++ )
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;

    /* Now make sure x_1 .. x_d are odd */
    c = 0;
    for( i = 1; i <= d; i++ )
   d874c:	f10c 0c01 	add.w	ip, ip, #1
   d8750:	e7dc      	b.n	d870c <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0xd0>

    /* actual scalar recoding */
    ecp_comb_recode_core( k, d, w, &M );

cleanup:
    mbedtls_mpi_free( &mm );
   d8752:	a80d      	add	r0, sp, #52	; 0x34
   d8754:	f007 fca3 	bl	e009e <mbedtls_mpi_free>
    mbedtls_mpi_free( &M );
   d8758:	a80a      	add	r0, sp, #40	; 0x28
   d875a:	f007 fca0 	bl	e009e <mbedtls_mpi_free>
        if( rs_ctx->rsm->state == ecp_rsm_final_norm )
            goto final_norm;
    }
#endif

    MBEDTLS_MPI_CHK( ecp_comb_recode_scalar( grp, m, k, d, w,
   d875e:	2c00      	cmp	r4, #0
   d8760:	f040 80d3 	bne.w	d890a <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ce>
   d8764:	e001      	b.n	d876a <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x12e>
    mbedtls_mpi_init( &M );
    mbedtls_mpi_init( &mm );

    /* N is always odd (see above), just make extra sure */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d8766:	4c6b      	ldr	r4, [pc, #428]	; (d8914 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2d8>)
   d8768:	e0cf      	b.n	d890a <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ce>
{
    int ret;
    mbedtls_ecp_point Txi;
    size_t i;

    mbedtls_ecp_point_init( &Txi );
   d876a:	a80d      	add	r0, sp, #52	; 0x34
   d876c:	f7ff fccc 	bl	d8108 <mbedtls_ecp_point_init>
    else
#endif
    {
        /* Start with a non-zero point and randomize its coordinates */
        i = d;
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, T_size, x[i] ) );
   d8770:	9a64      	ldr	r2, [sp, #400]	; 0x190
   d8772:	ab16      	add	r3, sp, #88	; 0x58
   d8774:	4631      	mov	r1, r6
   d8776:	5c9b      	ldrb	r3, [r3, r2]
   d8778:	9300      	str	r3, [sp, #0]
   d877a:	9a02      	ldr	r2, [sp, #8]
   d877c:	9b03      	ldr	r3, [sp, #12]
   d877e:	4628      	mov	r0, r5
   d8780:	f7ff fc63 	bl	d804a <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh>
   d8784:	4604      	mov	r4, r0
   d8786:	2800      	cmp	r0, #0
   d8788:	f040 80af 	bne.w	d88ea <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ae>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
   d878c:	f106 0918 	add.w	r9, r6, #24
   d8790:	2101      	movs	r1, #1
   d8792:	4648      	mov	r0, r9
   d8794:	f007 fd5e 	bl	e0254 <mbedtls_mpi_lset>
   d8798:	4604      	mov	r4, r0
   d879a:	2800      	cmp	r0, #0
   d879c:	f040 80a5 	bne.w	d88ea <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ae>
        if( f_rng != 0 )
   d87a0:	9b65      	ldr	r3, [sp, #404]	; 0x194
   d87a2:	b943      	cbnz	r3, d87b6 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x17a>
   d87a4:	9a64      	ldr	r2, [sp, #400]	; 0x190
   d87a6:	ab58      	add	r3, sp, #352	; 0x160
   d87a8:	189f      	adds	r7, r3, r2
   d87aa:	f46f 7384 	mvn.w	r3, #264	; 0x108
   d87ae:	441f      	add	r7, r3
   d87b0:	f10d 0957 	add.w	r9, sp, #87	; 0x57
   d87b4:	e093      	b.n	d88de <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2a2>
#if defined(MBEDTLS_ECP_RANDOMIZE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_randomize_jac( grp, pt, f_rng, p_rng ) );
#endif /* MBEDTLS_ECP_RANDOMIZE_JAC_ALT */

    p_size = ( grp->pbits + 7 ) / 8;
   d87b6:	6dab      	ldr	r3, [r5, #88]	; 0x58
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
   d87b8:	af07      	add	r7, sp, #28
#if defined(MBEDTLS_ECP_RANDOMIZE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_randomize_jac( grp, pt, f_rng, p_rng ) );
#endif /* MBEDTLS_ECP_RANDOMIZE_JAC_ALT */

    p_size = ( grp->pbits + 7 ) / 8;
   d87ba:	3307      	adds	r3, #7
   d87bc:	08db      	lsrs	r3, r3, #3
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
   d87be:	4638      	mov	r0, r7
#if defined(MBEDTLS_ECP_RANDOMIZE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_randomize_jac( grp, pt, f_rng, p_rng ) );
#endif /* MBEDTLS_ECP_RANDOMIZE_JAC_ALT */

    p_size = ( grp->pbits + 7 ) / 8;
   d87c0:	9304      	str	r3, [sp, #16]
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
   d87c2:	f007 fc66 	bl	e0092 <mbedtls_mpi_init>
   d87c6:	a80a      	add	r0, sp, #40	; 0x28
   d87c8:	f007 fc63 	bl	e0092 <mbedtls_mpi_init>
   d87cc:	f04f 0a0c 	mov.w	sl, #12
    /* Generate l such that 1 < l < p */
    do
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );

        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
   d87d0:	f105 0b04 	add.w	fp, r5, #4
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );

    /* Generate l such that 1 < l < p */
    do
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
   d87d4:	9b66      	ldr	r3, [sp, #408]	; 0x198
   d87d6:	9a65      	ldr	r2, [sp, #404]	; 0x194
   d87d8:	9904      	ldr	r1, [sp, #16]
   d87da:	4638      	mov	r0, r7
   d87dc:	f008 fdb6 	bl	e134c <mbedtls_mpi_fill_random>
   d87e0:	4603      	mov	r3, r0
   d87e2:	2800      	cmp	r0, #0
   d87e4:	d156      	bne.n	d8894 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>

        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
   d87e6:	4659      	mov	r1, fp
   d87e8:	4638      	mov	r0, r7
   d87ea:	f007 ff39 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   d87ee:	2800      	cmp	r0, #0
   d87f0:	db04      	blt.n	d87fc <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x1c0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
   d87f2:	2101      	movs	r1, #1
   d87f4:	4638      	mov	r0, r7
   d87f6:	f007 fe54 	bl	e04a2 <mbedtls_mpi_shift_r>
   d87fa:	e7f1      	b.n	d87e0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x1a4>

        if( count++ > 10 )
   d87fc:	f1ba 0a01 	subs.w	sl, sl, #1
   d8800:	d054      	beq.n	d88ac <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x270>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
    }
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
   d8802:	2101      	movs	r1, #1
   d8804:	4638      	mov	r0, r7
   d8806:	f007 ff70 	bl	e06ea <mbedtls_mpi_cmp_int>

    p_size = ( grp->pbits + 7 ) / 8;
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );

    /* Generate l such that 1 < l < p */
    do
   d880a:	2800      	cmp	r0, #0
   d880c:	dde2      	ble.n	d87d4 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x198>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
    }
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );

    /* Z = l * Z */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
   d880e:	463a      	mov	r2, r7
   d8810:	4649      	mov	r1, r9
   d8812:	4648      	mov	r0, r9
   d8814:	f008 f888 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d8818:	4603      	mov	r3, r0
   d881a:	2800      	cmp	r0, #0
   d881c:	d13a      	bne.n	d8894 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>
   d881e:	4629      	mov	r1, r5
   d8820:	4648      	mov	r0, r9
   d8822:	f7ff f815 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8826:	4603      	mov	r3, r0
   d8828:	bba0      	cbnz	r0, d8894 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>

    /* X = l^2 * X */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
   d882a:	463a      	mov	r2, r7
   d882c:	4639      	mov	r1, r7
   d882e:	a80a      	add	r0, sp, #40	; 0x28
   d8830:	f008 f87a 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d8834:	4603      	mov	r3, r0
   d8836:	bb68      	cbnz	r0, d8894 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>
   d8838:	4629      	mov	r1, r5
   d883a:	a80a      	add	r0, sp, #40	; 0x28
   d883c:	f7ff f808 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8840:	4603      	mov	r3, r0
   d8842:	bb38      	cbnz	r0, d8894 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
   d8844:	aa0a      	add	r2, sp, #40	; 0x28
   d8846:	4631      	mov	r1, r6
   d8848:	4630      	mov	r0, r6
   d884a:	f008 f86d 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d884e:	4603      	mov	r3, r0
   d8850:	bb00      	cbnz	r0, d8894 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>
   d8852:	4629      	mov	r1, r5
   d8854:	4630      	mov	r0, r6
   d8856:	f7fe fffb 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d885a:	4603      	mov	r3, r0
   d885c:	b9d0      	cbnz	r0, d8894 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>

    /* Y = l^3 * Y */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
   d885e:	a90a      	add	r1, sp, #40	; 0x28
   d8860:	463a      	mov	r2, r7
   d8862:	4608      	mov	r0, r1
   d8864:	f008 f860 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d8868:	4603      	mov	r3, r0
   d886a:	b998      	cbnz	r0, d8894 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>
   d886c:	4629      	mov	r1, r5
   d886e:	a80a      	add	r0, sp, #40	; 0x28
   d8870:	f7fe ffee 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8874:	4603      	mov	r3, r0
   d8876:	b968      	cbnz	r0, d8894 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ll ) ); MOD_MUL( pt->Y );
   d8878:	f106 090c 	add.w	r9, r6, #12
   d887c:	aa0a      	add	r2, sp, #40	; 0x28
   d887e:	4649      	mov	r1, r9
   d8880:	4648      	mov	r0, r9
   d8882:	f008 f851 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d8886:	4603      	mov	r3, r0
   d8888:	b920      	cbnz	r0, d8894 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x258>
   d888a:	4629      	mov	r1, r5
   d888c:	4648      	mov	r0, r9
   d888e:	f7fe ffdf 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8892:	4603      	mov	r3, r0

cleanup:
    mbedtls_mpi_free( &l ); mbedtls_mpi_free( &ll );
   d8894:	4638      	mov	r0, r7
   d8896:	9304      	str	r3, [sp, #16]
   d8898:	f007 fc01 	bl	e009e <mbedtls_mpi_free>
   d889c:	a80a      	add	r0, sp, #40	; 0x28
   d889e:	f007 fbfe 	bl	e009e <mbedtls_mpi_free>
        /* Start with a non-zero point and randomize its coordinates */
        i = d;
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, T_size, x[i] ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
        if( f_rng != 0 )
            MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
   d88a2:	9b04      	ldr	r3, [sp, #16]
   d88a4:	2b00      	cmp	r3, #0
   d88a6:	f43f af7d 	beq.w	d87a4 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x168>
   d88aa:	e01b      	b.n	d88e4 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2a8>

        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );

        if( count++ > 10 )
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
   d88ac:	4b1a      	ldr	r3, [pc, #104]	; (d8918 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2dc>)
   d88ae:	e019      	b.n	d88e4 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2a8>
    while( i != 0 )
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL + MBEDTLS_ECP_OPS_ADD );
        --i;

        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
   d88b0:	4632      	mov	r2, r6
   d88b2:	4631      	mov	r1, r6
   d88b4:	4628      	mov	r0, r5
   d88b6:	f7ff f80f 	bl	d78d8 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_>
   d88ba:	b9a8      	cbnz	r0, d88e8 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ac>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
   d88bc:	f817 3901 	ldrb.w	r3, [r7], #-1
   d88c0:	9300      	str	r3, [sp, #0]
   d88c2:	9a02      	ldr	r2, [sp, #8]
   d88c4:	9b03      	ldr	r3, [sp, #12]
   d88c6:	a90d      	add	r1, sp, #52	; 0x34
   d88c8:	4628      	mov	r0, r5
   d88ca:	f7ff fbbe 	bl	d804a <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh>
   d88ce:	b958      	cbnz	r0, d88e8 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ac>
        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
   d88d0:	ab0d      	add	r3, sp, #52	; 0x34
   d88d2:	4632      	mov	r2, r6
   d88d4:	4631      	mov	r1, r6
   d88d6:	4628      	mov	r0, r5
   d88d8:	f7ff fcd0 	bl	d827c <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_>
   d88dc:	b920      	cbnz	r0, d88e8 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ac>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
        if( f_rng != 0 )
            MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
    }

    while( i != 0 )
   d88de:	454f      	cmp	r7, r9
   d88e0:	d1e6      	bne.n	d88b0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x274>
   d88e2:	e002      	b.n	d88ea <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ae>
        /* Start with a non-zero point and randomize its coordinates */
        i = d;
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, T_size, x[i] ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
        if( f_rng != 0 )
            MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
   d88e4:	461c      	mov	r4, r3
   d88e6:	e000      	b.n	d88ea <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ae>
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL + MBEDTLS_ECP_OPS_ADD );
        --i;

        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
   d88e8:	4604      	mov	r4, r0
        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
    }

cleanup:

    mbedtls_ecp_point_free( &Txi );
   d88ea:	a80d      	add	r0, sp, #52	; 0x34
   d88ec:	f7ff fc49 	bl	d8182 <mbedtls_ecp_point_free>
    }
#endif

    MBEDTLS_MPI_CHK( ecp_comb_recode_scalar( grp, m, k, d, w,
                                            &parity_trick ) );
    MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, RR, T, T_size, k, d,
   d88f0:	b95c      	cbnz	r4, d890a <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ce>
                                        f_rng, p_rng, rs_ctx ) );
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, RR, parity_trick ) );
   d88f2:	4642      	mov	r2, r8
   d88f4:	4631      	mov	r1, r6
   d88f6:	4628      	mov	r0, r5
   d88f8:	f7ff fb84 	bl	d8004 <_ZL19ecp_safe_invert_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointh>
   d88fc:	4604      	mov	r4, r0
   d88fe:	b920      	cbnz	r0, d890a <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ce>
        rs_ctx->rsm->state = ecp_rsm_final_norm;

final_norm:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV );
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, RR ) );
   d8900:	4631      	mov	r1, r6
   d8902:	4628      	mov	r0, r5
   d8904:	f7ff fa1d 	bl	d7d42 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point>
   d8908:	4604      	mov	r4, r0
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, RR ) );
#endif

cleanup:
    return( ret );
}
   d890a:	4620      	mov	r0, r4
   d890c:	b059      	add	sp, #356	; 0x164
   d890e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8912:	bf00      	nop
   d8914:	ffffb080 	.word	0xffffb080
   d8918:	ffffb300 	.word	0xffffb300

000d891c <mbedtls_ecp_is_zero>:

/*
 * Tell if a point is zero
 */
int mbedtls_ecp_is_zero( mbedtls_ecp_point *pt )
{
   d891c:	b508      	push	{r3, lr}
    ECP_VALIDATE_RET( pt != NULL );

    return( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 );
   d891e:	2100      	movs	r1, #0
   d8920:	3018      	adds	r0, #24
   d8922:	f007 fee2 	bl	e06ea <mbedtls_mpi_cmp_int>
}
   d8926:	fab0 f080 	clz	r0, r0
   d892a:	0940      	lsrs	r0, r0, #5
   d892c:	bd08      	pop	{r3, pc}
	...

000d8930 <mbedtls_ecp_point_write_binary>:
 */
int mbedtls_ecp_point_write_binary( const mbedtls_ecp_group *grp,
                                    const mbedtls_ecp_point *P,
                                    int format, size_t *olen,
                                    unsigned char *buf, size_t buflen )
{
   d8930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8934:	460e      	mov	r6, r1
   d8936:	4605      	mov	r5, r0
                      format == MBEDTLS_ECP_PF_COMPRESSED );

    /*
     * Common case: P == 0
     */
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   d8938:	2100      	movs	r1, #0
   d893a:	f106 0018 	add.w	r0, r6, #24
 */
int mbedtls_ecp_point_write_binary( const mbedtls_ecp_group *grp,
                                    const mbedtls_ecp_point *P,
                                    int format, size_t *olen,
                                    unsigned char *buf, size_t buflen )
{
   d893e:	4691      	mov	r9, r2
   d8940:	4698      	mov	r8, r3
   d8942:	9c08      	ldr	r4, [sp, #32]
   d8944:	9f09      	ldr	r7, [sp, #36]	; 0x24
                      format == MBEDTLS_ECP_PF_COMPRESSED );

    /*
     * Common case: P == 0
     */
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   d8946:	f007 fed0 	bl	e06ea <mbedtls_mpi_cmp_int>
   d894a:	b948      	cbnz	r0, d8960 <mbedtls_ecp_point_write_binary+0x30>
    {
        if( buflen < 1 )
   d894c:	b917      	cbnz	r7, d8954 <mbedtls_ecp_point_write_binary+0x24>
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
   d894e:	481f      	ldr	r0, [pc, #124]	; (d89cc <mbedtls_ecp_point_write_binary+0x9c>)
   d8950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

        buf[0] = 0x00;
        *olen = 1;
   d8954:	2301      	movs	r3, #1
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
    {
        if( buflen < 1 )
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );

        buf[0] = 0x00;
   d8956:	7020      	strb	r0, [r4, #0]
        *olen = 1;
   d8958:	f8c8 3000 	str.w	r3, [r8]

        return( 0 );
   d895c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }

    plen = mbedtls_mpi_size( &grp->P );
   d8960:	1d28      	adds	r0, r5, #4
   d8962:	f007 fcdd 	bl	e0320 <mbedtls_mpi_size>
   d8966:	4605      	mov	r5, r0

    if( format == MBEDTLS_ECP_PF_UNCOMPRESSED )
   d8968:	f1b9 0f00 	cmp.w	r9, #0
   d896c:	d114      	bne.n	d8998 <mbedtls_ecp_point_write_binary+0x68>
    {
        *olen = 2 * plen + 1;
   d896e:	0042      	lsls	r2, r0, #1
   d8970:	3201      	adds	r2, #1

        if( buflen < *olen )
   d8972:	4297      	cmp	r7, r2

    plen = mbedtls_mpi_size( &grp->P );

    if( format == MBEDTLS_ECP_PF_UNCOMPRESSED )
    {
        *olen = 2 * plen + 1;
   d8974:	f8c8 2000 	str.w	r2, [r8]

        if( buflen < *olen )
   d8978:	d3e9      	bcc.n	d894e <mbedtls_ecp_point_write_binary+0x1e>
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );

        buf[0] = 0x04;
   d897a:	4621      	mov	r1, r4
   d897c:	2304      	movs	r3, #4
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
   d897e:	4602      	mov	r2, r0
        *olen = 2 * plen + 1;

        if( buflen < *olen )
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );

        buf[0] = 0x04;
   d8980:	f801 3b01 	strb.w	r3, [r1], #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
   d8984:	4630      	mov	r0, r6
   d8986:	f007 fd08 	bl	e039a <mbedtls_mpi_write_binary>
   d898a:	b9e8      	cbnz	r0, d89c8 <mbedtls_ecp_point_write_binary+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->Y, buf + 1 + plen, plen ) );
   d898c:	1c69      	adds	r1, r5, #1
   d898e:	462a      	mov	r2, r5
   d8990:	4421      	add	r1, r4
   d8992:	f106 000c 	add.w	r0, r6, #12
   d8996:	e012      	b.n	d89be <mbedtls_ecp_point_write_binary+0x8e>
    }
    else if( format == MBEDTLS_ECP_PF_COMPRESSED )
   d8998:	f1b9 0f01 	cmp.w	r9, #1
   d899c:	d113      	bne.n	d89c6 <mbedtls_ecp_point_write_binary+0x96>
    {
        *olen = plen + 1;
   d899e:	1c43      	adds	r3, r0, #1

        if( buflen < *olen )
   d89a0:	429f      	cmp	r7, r3
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->Y, buf + 1 + plen, plen ) );
    }
    else if( format == MBEDTLS_ECP_PF_COMPRESSED )
    {
        *olen = plen + 1;
   d89a2:	f8c8 3000 	str.w	r3, [r8]

        if( buflen < *olen )
   d89a6:	d3d2      	bcc.n	d894e <mbedtls_ecp_point_write_binary+0x1e>
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );

        buf[0] = 0x02 + mbedtls_mpi_get_bit( &P->Y, 0 );
   d89a8:	2100      	movs	r1, #0
   d89aa:	f106 000c 	add.w	r0, r6, #12
   d89ae:	f007 fc6d 	bl	e028c <mbedtls_mpi_get_bit>
   d89b2:	4621      	mov	r1, r4
   d89b4:	3002      	adds	r0, #2
   d89b6:	f801 0b01 	strb.w	r0, [r1], #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
   d89ba:	462a      	mov	r2, r5
   d89bc:	4630      	mov	r0, r6
    }

cleanup:
    return( ret );
}
   d89be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

        if( buflen < *olen )
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );

        buf[0] = 0x02 + mbedtls_mpi_get_bit( &P->Y, 0 );
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
   d89c2:	f007 bcea 	b.w	e039a <mbedtls_mpi_write_binary>
int mbedtls_ecp_point_write_binary( const mbedtls_ecp_group *grp,
                                    const mbedtls_ecp_point *P,
                                    int format, size_t *olen,
                                    unsigned char *buf, size_t buflen )
{
    int ret = 0;
   d89c6:	2000      	movs	r0, #0
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
    }

cleanup:
    return( ret );
}
   d89c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d89cc:	ffffb100 	.word	0xffffb100

000d89d0 <mbedtls_ecp_point_read_binary>:
 * Import a point from unsigned binary data (SEC1 2.3.4)
 */
int mbedtls_ecp_point_read_binary( const mbedtls_ecp_group *grp,
                                   mbedtls_ecp_point *pt,
                                   const unsigned char *buf, size_t ilen )
{
   d89d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d89d2:	460c      	mov	r4, r1
   d89d4:	4615      	mov	r5, r2
    size_t plen;
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( pt  != NULL );
    ECP_VALIDATE_RET( buf != NULL );

    if( ilen < 1 )
   d89d6:	461f      	mov	r7, r3
   d89d8:	b90b      	cbnz	r3, d89de <mbedtls_ecp_point_read_binary+0xe>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d89da:	4816      	ldr	r0, [pc, #88]	; (d8a34 <mbedtls_ecp_point_read_binary+0x64>)
   d89dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( buf[0] == 0x00 )
   d89de:	7813      	ldrb	r3, [r2, #0]
   d89e0:	b933      	cbnz	r3, d89f0 <mbedtls_ecp_point_read_binary+0x20>
    {
        if( ilen == 1 )
   d89e2:	2f01      	cmp	r7, #1
   d89e4:	d1f9      	bne.n	d89da <mbedtls_ecp_point_read_binary+0xa>
            return( mbedtls_ecp_set_zero( pt ) );
   d89e6:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );

cleanup:
    return( ret );
}
   d89e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    if( buf[0] == 0x00 )
    {
        if( ilen == 1 )
            return( mbedtls_ecp_set_zero( pt ) );
   d89ec:	f7ff bc32 	b.w	d8254 <mbedtls_ecp_set_zero>
        else
            return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }

    plen = mbedtls_mpi_size( &grp->P );
   d89f0:	3004      	adds	r0, #4
   d89f2:	f007 fc95 	bl	e0320 <mbedtls_mpi_size>

    if( buf[0] != 0x04 )
   d89f6:	782b      	ldrb	r3, [r5, #0]
   d89f8:	2b04      	cmp	r3, #4
            return( mbedtls_ecp_set_zero( pt ) );
        else
            return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }

    plen = mbedtls_mpi_size( &grp->P );
   d89fa:	4606      	mov	r6, r0

    if( buf[0] != 0x04 )
   d89fc:	d118      	bne.n	d8a30 <mbedtls_ecp_point_read_binary+0x60>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );

    if( ilen != 2 * plen + 1 )
   d89fe:	0042      	lsls	r2, r0, #1
   d8a00:	3201      	adds	r2, #1
   d8a02:	4297      	cmp	r7, r2
   d8a04:	d1e9      	bne.n	d89da <mbedtls_ecp_point_read_binary+0xa>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->X, buf + 1, plen ) );
   d8a06:	4602      	mov	r2, r0
   d8a08:	1c69      	adds	r1, r5, #1
   d8a0a:	4620      	mov	r0, r4
   d8a0c:	f007 fc8e 	bl	e032c <mbedtls_mpi_read_binary>
   d8a10:	b978      	cbnz	r0, d8a32 <mbedtls_ecp_point_read_binary+0x62>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );
   d8a12:	1c71      	adds	r1, r6, #1
   d8a14:	4632      	mov	r2, r6
   d8a16:	4429      	add	r1, r5
   d8a18:	f104 000c 	add.w	r0, r4, #12
   d8a1c:	f007 fc86 	bl	e032c <mbedtls_mpi_read_binary>
   d8a20:	b938      	cbnz	r0, d8a32 <mbedtls_ecp_point_read_binary+0x62>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
   d8a22:	f104 0018 	add.w	r0, r4, #24
   d8a26:	2101      	movs	r1, #1

cleanup:
    return( ret );
}
   d8a28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if( ilen != 2 * plen + 1 )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->X, buf + 1, plen ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
   d8a2c:	f007 bc12 	b.w	e0254 <mbedtls_mpi_lset>
    }

    plen = mbedtls_mpi_size( &grp->P );

    if( buf[0] != 0x04 )
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   d8a30:	4801      	ldr	r0, [pc, #4]	; (d8a38 <mbedtls_ecp_point_read_binary+0x68>)
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );

cleanup:
    return( ret );
}
   d8a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8a34:	ffffb080 	.word	0xffffb080
   d8a38:	ffffb180 	.word	0xffffb180

000d8a3c <mbedtls_ecp_tls_read_point>:
    ECP_VALIDATE_RET( *buf != NULL );

    /*
     * We must have at least two bytes (1 for length, at least one for data)
     */
    if( buf_len < 2 )
   d8a3c:	2b01      	cmp	r3, #1
 *      } ECPoint;
 */
int mbedtls_ecp_tls_read_point( const mbedtls_ecp_group *grp,
                                mbedtls_ecp_point *pt,
                                const unsigned char **buf, size_t buf_len )
{
   d8a3e:	b430      	push	{r4, r5}
   d8a40:	4615      	mov	r5, r2
    ECP_VALIDATE_RET( *buf != NULL );

    /*
     * We must have at least two bytes (1 for length, at least one for data)
     */
    if( buf_len < 2 )
   d8a42:	d90d      	bls.n	d8a60 <mbedtls_ecp_tls_read_point+0x24>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    data_len = *(*buf)++;
   d8a44:	6814      	ldr	r4, [r2, #0]
   d8a46:	1c62      	adds	r2, r4, #1
   d8a48:	602a      	str	r2, [r5, #0]
   d8a4a:	7824      	ldrb	r4, [r4, #0]
    if( data_len < 1 || data_len > buf_len - 1 )
   d8a4c:	b144      	cbz	r4, d8a60 <mbedtls_ecp_tls_read_point+0x24>
   d8a4e:	3b01      	subs	r3, #1
   d8a50:	429c      	cmp	r4, r3
   d8a52:	d805      	bhi.n	d8a60 <mbedtls_ecp_tls_read_point+0x24>

    /*
     * Save buffer start for read_binary and update buf
     */
    buf_start = *buf;
    *buf += data_len;
   d8a54:	1913      	adds	r3, r2, r4
   d8a56:	602b      	str	r3, [r5, #0]

    return( mbedtls_ecp_point_read_binary( grp, pt, buf_start, data_len ) );
   d8a58:	4623      	mov	r3, r4
}
   d8a5a:	bc30      	pop	{r4, r5}
     * Save buffer start for read_binary and update buf
     */
    buf_start = *buf;
    *buf += data_len;

    return( mbedtls_ecp_point_read_binary( grp, pt, buf_start, data_len ) );
   d8a5c:	f7ff bfb8 	b.w	d89d0 <mbedtls_ecp_point_read_binary>
}
   d8a60:	4801      	ldr	r0, [pc, #4]	; (d8a68 <mbedtls_ecp_tls_read_point+0x2c>)
   d8a62:	bc30      	pop	{r4, r5}
   d8a64:	4770      	bx	lr
   d8a66:	bf00      	nop
   d8a68:	ffffb080 	.word	0xffffb080

000d8a6c <mbedtls_ecp_tls_write_point>:
 *      } ECPoint;
 */
int mbedtls_ecp_tls_write_point( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt,
                         int format, size_t *olen,
                         unsigned char *buf, size_t blen )
{
   d8a6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8a6e:	9c07      	ldr	r4, [sp, #28]
   d8a70:	9e06      	ldr	r6, [sp, #24]
   d8a72:	461d      	mov	r5, r3
                      format == MBEDTLS_ECP_PF_COMPRESSED );

    /*
     * buffer length must be at least one, for our length byte
     */
    if( blen < 1 )
   d8a74:	b164      	cbz	r4, d8a90 <mbedtls_ecp_tls_write_point+0x24>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    if( ( ret = mbedtls_ecp_point_write_binary( grp, pt, format,
   d8a76:	3c01      	subs	r4, #1
   d8a78:	9401      	str	r4, [sp, #4]
   d8a7a:	1c74      	adds	r4, r6, #1
   d8a7c:	9400      	str	r4, [sp, #0]
   d8a7e:	f7ff ff57 	bl	d8930 <mbedtls_ecp_point_write_binary>
   d8a82:	b930      	cbnz	r0, d8a92 <mbedtls_ecp_tls_write_point+0x26>
        return( ret );

    /*
     * write length to the first byte and update total length
     */
    buf[0] = (unsigned char) *olen;
   d8a84:	682b      	ldr	r3, [r5, #0]
   d8a86:	7033      	strb	r3, [r6, #0]
    ++*olen;
   d8a88:	682b      	ldr	r3, [r5, #0]
   d8a8a:	3301      	adds	r3, #1
   d8a8c:	602b      	str	r3, [r5, #0]

    return( 0 );
   d8a8e:	e000      	b.n	d8a92 <mbedtls_ecp_tls_write_point+0x26>

    /*
     * buffer length must be at least one, for our length byte
     */
    if( blen < 1 )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d8a90:	4801      	ldr	r0, [pc, #4]	; (d8a98 <mbedtls_ecp_tls_write_point+0x2c>)
     */
    buf[0] = (unsigned char) *olen;
    ++*olen;

    return( 0 );
}
   d8a92:	b002      	add	sp, #8
   d8a94:	bd70      	pop	{r4, r5, r6, pc}
   d8a96:	bf00      	nop
   d8a98:	ffffb080 	.word	0xffffb080

000d8a9c <mbedtls_ecp_tls_read_group_id>:
    ECP_VALIDATE_RET( *buf != NULL );

    /*
     * We expect at least three bytes (see below)
     */
    if( len < 3 )
   d8a9c:	2a02      	cmp	r2, #2
 * Read a group id from an ECParameters record (RFC 4492) and convert it to
 * mbedtls_ecp_group_id.
 */
int mbedtls_ecp_tls_read_group_id( mbedtls_ecp_group_id *grp,
                                   const unsigned char **buf, size_t len )
{
   d8a9e:	b510      	push	{r4, lr}
   d8aa0:	4604      	mov	r4, r0
    ECP_VALIDATE_RET( *buf != NULL );

    /*
     * We expect at least three bytes (see below)
     */
    if( len < 3 )
   d8aa2:	d801      	bhi.n	d8aa8 <mbedtls_ecp_tls_read_group_id+0xc>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d8aa4:	480c      	ldr	r0, [pc, #48]	; (d8ad8 <mbedtls_ecp_tls_read_group_id+0x3c>)
   d8aa6:	bd10      	pop	{r4, pc}

    /*
     * First byte is curve_type; only named_curve is handled
     */
    if( *(*buf)++ != MBEDTLS_ECP_TLS_NAMED_CURVE )
   d8aa8:	680b      	ldr	r3, [r1, #0]
   d8aaa:	1c5a      	adds	r2, r3, #1
   d8aac:	600a      	str	r2, [r1, #0]
   d8aae:	781a      	ldrb	r2, [r3, #0]
   d8ab0:	2a03      	cmp	r2, #3
   d8ab2:	d1f7      	bne.n	d8aa4 <mbedtls_ecp_tls_read_group_id+0x8>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /*
     * Next two bytes are the namedcurve value
     */
    tls_id = *(*buf)++;
   d8ab4:	1c9a      	adds	r2, r3, #2
   d8ab6:	600a      	str	r2, [r1, #0]
    tls_id <<= 8;
    tls_id |= *(*buf)++;
   d8ab8:	1cda      	adds	r2, r3, #3
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /*
     * Next two bytes are the namedcurve value
     */
    tls_id = *(*buf)++;
   d8aba:	7858      	ldrb	r0, [r3, #1]
    tls_id <<= 8;
    tls_id |= *(*buf)++;
   d8abc:	600a      	str	r2, [r1, #0]

    if( ( curve_info = mbedtls_ecp_curve_info_from_tls_id( tls_id ) ) == NULL )
   d8abe:	789b      	ldrb	r3, [r3, #2]
   d8ac0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d8ac4:	f7ff fb12 	bl	d80ec <mbedtls_ecp_curve_info_from_tls_id>
   d8ac8:	b118      	cbz	r0, d8ad2 <mbedtls_ecp_tls_read_group_id+0x36>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );

    *grp = curve_info->grp_id;
   d8aca:	7803      	ldrb	r3, [r0, #0]
   d8acc:	7023      	strb	r3, [r4, #0]

    return( 0 );
   d8ace:	2000      	movs	r0, #0
   d8ad0:	bd10      	pop	{r4, pc}
    tls_id = *(*buf)++;
    tls_id <<= 8;
    tls_id |= *(*buf)++;

    if( ( curve_info = mbedtls_ecp_curve_info_from_tls_id( tls_id ) ) == NULL )
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   d8ad2:	4802      	ldr	r0, [pc, #8]	; (d8adc <mbedtls_ecp_tls_read_group_id+0x40>)

    *grp = curve_info->grp_id;

    return( 0 );
}
   d8ad4:	bd10      	pop	{r4, pc}
   d8ad6:	bf00      	nop
   d8ad8:	ffffb080 	.word	0xffffb080
   d8adc:	ffffb180 	.word	0xffffb180

000d8ae0 <mbedtls_ecp_check_pubkey>:
/*
 * Check that a point is valid as a public key
 */
int mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp,
                              const mbedtls_ecp_point *pt )
{
   d8ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8ae2:	460f      	mov	r7, r1
   d8ae4:	b087      	sub	sp, #28
   d8ae6:	4605      	mov	r5, r0
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( pt  != NULL );

    /* Must use affine coordinates */
    if( mbedtls_mpi_cmp_int( &pt->Z, 1 ) != 0 )
   d8ae8:	2101      	movs	r1, #1
   d8aea:	f107 0018 	add.w	r0, r7, #24
   d8aee:	f007 fdfc 	bl	e06ea <mbedtls_mpi_cmp_int>
   d8af2:	4606      	mov	r6, r0
   d8af4:	bb10      	cbnz	r0, d8b3c <mbedtls_ecp_check_pubkey+0x5c>
#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
        return( ecp_check_pubkey_mx( grp, pt ) );
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d8af6:	4628      	mov	r0, r5
   d8af8:	f7fe fe9f 	bl	d783a <_ZL12ecp_get_typePK17mbedtls_ecp_group>
   d8afc:	2801      	cmp	r0, #1
   d8afe:	d11b      	bne.n	d8b38 <mbedtls_ecp_check_pubkey+0x58>
{
    int ret;
    mbedtls_mpi YY, RHS;

    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
   d8b00:	4631      	mov	r1, r6
   d8b02:	4638      	mov	r0, r7
   d8b04:	f007 fdf1 	bl	e06ea <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
   d8b08:	2800      	cmp	r0, #0
   d8b0a:	db17      	blt.n	d8b3c <mbedtls_ecp_check_pubkey+0x5c>
    int ret;
    mbedtls_mpi YY, RHS;

    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
   d8b0c:	f107 040c 	add.w	r4, r7, #12
   d8b10:	4631      	mov	r1, r6
   d8b12:	4620      	mov	r0, r4
   d8b14:	f007 fde9 	bl	e06ea <mbedtls_mpi_cmp_int>
{
    int ret;
    mbedtls_mpi YY, RHS;

    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
   d8b18:	2800      	cmp	r0, #0
   d8b1a:	db0f      	blt.n	d8b3c <mbedtls_ecp_check_pubkey+0x5c>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
   d8b1c:	1d2e      	adds	r6, r5, #4
   d8b1e:	4631      	mov	r1, r6
   d8b20:	4638      	mov	r0, r7
   d8b22:	f007 fd9d 	bl	e0660 <mbedtls_mpi_cmp_mpi>
    int ret;
    mbedtls_mpi YY, RHS;

    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
   d8b26:	2800      	cmp	r0, #0
   d8b28:	da08      	bge.n	d8b3c <mbedtls_ecp_check_pubkey+0x5c>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )
   d8b2a:	4631      	mov	r1, r6
   d8b2c:	4620      	mov	r0, r4
   d8b2e:	f007 fd97 	bl	e0660 <mbedtls_mpi_cmp_mpi>
    mbedtls_mpi YY, RHS;

    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
   d8b32:	2800      	cmp	r0, #0
   d8b34:	da02      	bge.n	d8b3c <mbedtls_ecp_check_pubkey+0x5c>
   d8b36:	e003      	b.n	d8b40 <mbedtls_ecp_check_pubkey+0x60>
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
        return( ecp_check_pubkey_sw( grp, pt ) );
#endif
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d8b38:	4845      	ldr	r0, [pc, #276]	; (d8c50 <mbedtls_ecp_check_pubkey+0x170>)
   d8b3a:	e086      	b.n	d8c4a <mbedtls_ecp_check_pubkey+0x16a>
    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
   d8b3c:	4845      	ldr	r0, [pc, #276]	; (d8c54 <mbedtls_ecp_check_pubkey+0x174>)
   d8b3e:	e084      	b.n	d8c4a <mbedtls_ecp_check_pubkey+0x16a>

    mbedtls_mpi_init( &YY ); mbedtls_mpi_init( &RHS );
   d8b40:	4668      	mov	r0, sp
   d8b42:	f007 faa6 	bl	e0092 <mbedtls_mpi_init>
   d8b46:	a803      	add	r0, sp, #12
   d8b48:	f007 faa3 	bl	e0092 <mbedtls_mpi_init>

    /*
     * YY = Y^2
     * RHS = X (X^2 + A) + B = X^3 + A X + B
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
   d8b4c:	4622      	mov	r2, r4
   d8b4e:	4621      	mov	r1, r4
   d8b50:	4668      	mov	r0, sp
   d8b52:	f007 fee9 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d8b56:	4604      	mov	r4, r0
   d8b58:	2800      	cmp	r0, #0
   d8b5a:	d14d      	bne.n	d8bf8 <mbedtls_ecp_check_pubkey+0x118>
   d8b5c:	4629      	mov	r1, r5
   d8b5e:	4668      	mov	r0, sp
   d8b60:	f7fe fe76 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8b64:	4604      	mov	r4, r0
   d8b66:	2800      	cmp	r0, #0
   d8b68:	d146      	bne.n	d8bf8 <mbedtls_ecp_check_pubkey+0x118>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
   d8b6a:	463a      	mov	r2, r7
   d8b6c:	4639      	mov	r1, r7
   d8b6e:	a803      	add	r0, sp, #12
   d8b70:	f007 feda 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d8b74:	4604      	mov	r4, r0
   d8b76:	2800      	cmp	r0, #0
   d8b78:	d13e      	bne.n	d8bf8 <mbedtls_ecp_check_pubkey+0x118>
   d8b7a:	4629      	mov	r1, r5
   d8b7c:	a803      	add	r0, sp, #12
   d8b7e:	f7fe fe67 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8b82:	4604      	mov	r4, r0
   d8b84:	2800      	cmp	r0, #0
   d8b86:	d137      	bne.n	d8bf8 <mbedtls_ecp_check_pubkey+0x118>

    /* Special case for A = -3 */
    if( grp->A.p == NULL )
   d8b88:	69ab      	ldr	r3, [r5, #24]
   d8b8a:	b9a3      	cbnz	r3, d8bb6 <mbedtls_ecp_check_pubkey+0xd6>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
   d8b8c:	a903      	add	r1, sp, #12
   d8b8e:	2203      	movs	r2, #3
   d8b90:	4608      	mov	r0, r1
   d8b92:	f007 feb3 	bl	e08fc <mbedtls_mpi_sub_int>
   d8b96:	4604      	mov	r4, r0
   d8b98:	bb70      	cbnz	r0, d8bf8 <mbedtls_ecp_check_pubkey+0x118>
   d8b9a:	9b03      	ldr	r3, [sp, #12]
   d8b9c:	2b00      	cmp	r3, #0
   d8b9e:	da1e      	bge.n	d8bde <mbedtls_ecp_check_pubkey+0xfe>
   d8ba0:	2100      	movs	r1, #0
   d8ba2:	a803      	add	r0, sp, #12
   d8ba4:	f007 fda1 	bl	e06ea <mbedtls_mpi_cmp_int>
   d8ba8:	b1c8      	cbz	r0, d8bde <mbedtls_ecp_check_pubkey+0xfe>
   d8baa:	a903      	add	r1, sp, #12
   d8bac:	4632      	mov	r2, r6
   d8bae:	4608      	mov	r0, r1
   d8bb0:	f007 fe4b 	bl	e084a <mbedtls_mpi_add_mpi>
   d8bb4:	e7ef      	b.n	d8b96 <mbedtls_ecp_check_pubkey+0xb6>
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );
   d8bb6:	a903      	add	r1, sp, #12
   d8bb8:	f105 0210 	add.w	r2, r5, #16
   d8bbc:	4608      	mov	r0, r1
   d8bbe:	f007 fe44 	bl	e084a <mbedtls_mpi_add_mpi>
   d8bc2:	4604      	mov	r4, r0
   d8bc4:	b9c0      	cbnz	r0, d8bf8 <mbedtls_ecp_check_pubkey+0x118>
   d8bc6:	4631      	mov	r1, r6
   d8bc8:	a803      	add	r0, sp, #12
   d8bca:	f007 fd49 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   d8bce:	2800      	cmp	r0, #0
   d8bd0:	db05      	blt.n	d8bde <mbedtls_ecp_check_pubkey+0xfe>
   d8bd2:	a903      	add	r1, sp, #12
   d8bd4:	4632      	mov	r2, r6
   d8bd6:	4608      	mov	r0, r1
   d8bd8:	f007 fdf7 	bl	e07ca <mbedtls_mpi_sub_abs>
   d8bdc:	e7f1      	b.n	d8bc2 <mbedtls_ecp_check_pubkey+0xe2>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
   d8bde:	a903      	add	r1, sp, #12
   d8be0:	463a      	mov	r2, r7
   d8be2:	4608      	mov	r0, r1
   d8be4:	f007 fea0 	bl	e0928 <mbedtls_mpi_mul_mpi>
   d8be8:	4604      	mov	r4, r0
   d8bea:	b928      	cbnz	r0, d8bf8 <mbedtls_ecp_check_pubkey+0x118>
   d8bec:	4629      	mov	r1, r5
   d8bee:	a803      	add	r0, sp, #12
   d8bf0:	f7fe fe2e 	bl	d7850 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8bf4:	4604      	mov	r4, r0
   d8bf6:	b138      	cbz	r0, d8c08 <mbedtls_ecp_check_pubkey+0x128>
    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )
        ret = MBEDTLS_ERR_ECP_INVALID_KEY;

cleanup:

    mbedtls_mpi_free( &YY ); mbedtls_mpi_free( &RHS );
   d8bf8:	4668      	mov	r0, sp
   d8bfa:	f007 fa50 	bl	e009e <mbedtls_mpi_free>
   d8bfe:	a803      	add	r0, sp, #12
   d8c00:	f007 fa4d 	bl	e009e <mbedtls_mpi_free>

    return( ret );
   d8c04:	4620      	mov	r0, r4
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
        return( ecp_check_pubkey_mx( grp, pt ) );
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
        return( ecp_check_pubkey_sw( grp, pt ) );
   d8c06:	e020      	b.n	d8c4a <mbedtls_ecp_check_pubkey+0x16a>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
   d8c08:	a903      	add	r1, sp, #12
   d8c0a:	f105 021c 	add.w	r2, r5, #28
   d8c0e:	4608      	mov	r0, r1
   d8c10:	f007 fe1b 	bl	e084a <mbedtls_mpi_add_mpi>
   d8c14:	4604      	mov	r4, r0
   d8c16:	2800      	cmp	r0, #0
   d8c18:	d1ee      	bne.n	d8bf8 <mbedtls_ecp_check_pubkey+0x118>
   d8c1a:	4631      	mov	r1, r6
   d8c1c:	a803      	add	r0, sp, #12
   d8c1e:	f007 fd1f 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   d8c22:	2800      	cmp	r0, #0
   d8c24:	db08      	blt.n	d8c38 <mbedtls_ecp_check_pubkey+0x158>
   d8c26:	a903      	add	r1, sp, #12
   d8c28:	4632      	mov	r2, r6
   d8c2a:	4608      	mov	r0, r1
   d8c2c:	f007 fdcd 	bl	e07ca <mbedtls_mpi_sub_abs>
   d8c30:	2800      	cmp	r0, #0
   d8c32:	d0f2      	beq.n	d8c1a <mbedtls_ecp_check_pubkey+0x13a>
   d8c34:	4604      	mov	r4, r0
   d8c36:	e7df      	b.n	d8bf8 <mbedtls_ecp_check_pubkey+0x118>

    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )
   d8c38:	a903      	add	r1, sp, #12
   d8c3a:	4668      	mov	r0, sp
   d8c3c:	f007 fd10 	bl	e0660 <mbedtls_mpi_cmp_mpi>
        ret = MBEDTLS_ERR_ECP_INVALID_KEY;
   d8c40:	2800      	cmp	r0, #0
   d8c42:	4c04      	ldr	r4, [pc, #16]	; (d8c54 <mbedtls_ecp_check_pubkey+0x174>)
   d8c44:	bf08      	it	eq
   d8c46:	2400      	moveq	r4, #0
   d8c48:	e7d6      	b.n	d8bf8 <mbedtls_ecp_check_pubkey+0x118>
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
        return( ecp_check_pubkey_sw( grp, pt ) );
#endif
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
   d8c4a:	b007      	add	sp, #28
   d8c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8c4e:	bf00      	nop
   d8c50:	ffffb080 	.word	0xffffb080
   d8c54:	ffffb380 	.word	0xffffb380

000d8c58 <mbedtls_ecp_check_privkey>:
/*
 * Check that an mbedtls_mpi is valid as a private key
 */
int mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp,
                               const mbedtls_mpi *d )
{
   d8c58:	b538      	push	{r3, r4, r5, lr}
   d8c5a:	460c      	mov	r4, r1
   d8c5c:	4605      	mov	r5, r0

        return( 0 );
    }
#endif /* ECP_MONTGOMERY */
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d8c5e:	f7fe fdec 	bl	d783a <_ZL12ecp_get_typePK17mbedtls_ecp_group>
   d8c62:	2801      	cmp	r0, #1
   d8c64:	4601      	mov	r1, r0
   d8c66:	d10d      	bne.n	d8c84 <mbedtls_ecp_check_privkey+0x2c>
    {
        /* see SEC1 3.2 */
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
   d8c68:	4620      	mov	r0, r4
   d8c6a:	f007 fd3e 	bl	e06ea <mbedtls_mpi_cmp_int>
   d8c6e:	2800      	cmp	r0, #0
   d8c70:	db0a      	blt.n	d8c88 <mbedtls_ecp_check_privkey+0x30>
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
   d8c72:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   d8c76:	4620      	mov	r0, r4
   d8c78:	f007 fcf2 	bl	e0660 <mbedtls_mpi_cmp_mpi>
#endif /* ECP_MONTGOMERY */
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
    {
        /* see SEC1 3.2 */
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
   d8c7c:	2800      	cmp	r0, #0
   d8c7e:	da03      	bge.n	d8c88 <mbedtls_ecp_check_privkey+0x30>
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
        else
            return( 0 );
   d8c80:	2000      	movs	r0, #0
   d8c82:	bd38      	pop	{r3, r4, r5, pc}
    }
#endif /* ECP_SHORTWEIERSTRASS */

    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d8c84:	4801      	ldr	r0, [pc, #4]	; (d8c8c <mbedtls_ecp_check_privkey+0x34>)
   d8c86:	bd38      	pop	{r3, r4, r5, pc}
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
    {
        /* see SEC1 3.2 */
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
   d8c88:	4801      	ldr	r0, [pc, #4]	; (d8c90 <mbedtls_ecp_check_privkey+0x38>)
            return( 0 );
    }
#endif /* ECP_SHORTWEIERSTRASS */

    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
   d8c8a:	bd38      	pop	{r3, r4, r5, pc}
   d8c8c:	ffffb080 	.word	0xffffb080
   d8c90:	ffffb380 	.word	0xffffb380

000d8c94 <mbedtls_ecp_mul_restartable>:
 */
int mbedtls_ecp_mul_restartable( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
   d8c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8c98:	b0af      	sub	sp, #188	; 0xbc
   d8c9a:	4605      	mov	r5, r0
   d8c9c:	910a      	str	r1, [sp, #40]	; 0x28
    {
        /* check_privkey is free */
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_CHK );

        /* Common sanity checks */
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
   d8c9e:	4611      	mov	r1, r2
 */
int mbedtls_ecp_mul_restartable( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
   d8ca0:	920b      	str	r2, [sp, #44]	; 0x2c
   d8ca2:	461e      	mov	r6, r3
    {
        /* check_privkey is free */
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_CHK );

        /* Common sanity checks */
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
   d8ca4:	f7ff ffd8 	bl	d8c58 <mbedtls_ecp_check_privkey>
   d8ca8:	4683      	mov	fp, r0
   d8caa:	2800      	cmp	r0, #0
   d8cac:	f040 8113 	bne.w	d8ed6 <mbedtls_ecp_mul_restartable+0x242>
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, P ) );
   d8cb0:	4631      	mov	r1, r6
   d8cb2:	4628      	mov	r0, r5
   d8cb4:	f7ff ff14 	bl	d8ae0 <mbedtls_ecp_check_pubkey>
   d8cb8:	4683      	mov	fp, r0
   d8cba:	2800      	cmp	r0, #0
   d8cbc:	f040 810b 	bne.w	d8ed6 <mbedtls_ecp_mul_restartable+0x242>
#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
        MBEDTLS_MPI_CHK( ecp_mul_mxz( grp, R, m, P, f_rng, p_rng ) );
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d8cc0:	4628      	mov	r0, r5
   d8cc2:	f7fe fdba 	bl	d783a <_ZL12ecp_get_typePK17mbedtls_ecp_group>
   d8cc6:	2801      	cmp	r0, #1
   d8cc8:	f040 8084 	bne.w	d8dd4 <mbedtls_ecp_mul_restartable+0x140>

    ECP_RS_ENTER( rsm );

    /* Is P the base point ? */
#if MBEDTLS_ECP_FIXED_POINT_OPTIM == 1
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
   d8ccc:	f105 0134 	add.w	r1, r5, #52	; 0x34
   d8cd0:	f106 000c 	add.w	r0, r6, #12
   d8cd4:	f007 fcc4 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   d8cd8:	b948      	cbnz	r0, d8cee <mbedtls_ecp_mul_restartable+0x5a>
               mbedtls_mpi_cmp_mpi( &P->X, &grp->G.X ) == 0 );
   d8cda:	f105 0128 	add.w	r1, r5, #40	; 0x28
   d8cde:	4630      	mov	r0, r6
   d8ce0:	f007 fcbe 	bl	e0660 <mbedtls_mpi_cmp_mpi>

    ECP_RS_ENTER( rsm );

    /* Is P the base point ? */
#if MBEDTLS_ECP_FIXED_POINT_OPTIM == 1
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
   d8ce4:	fab0 f980 	clz	r9, r0
   d8ce8:	ea4f 1959 	mov.w	r9, r9, lsr #5
   d8cec:	e000      	b.n	d8cf0 <mbedtls_ecp_mul_restartable+0x5c>
   d8cee:	46d9      	mov	r9, fp
   d8cf0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    /*
     * Minimize the number of multiplications, that is minimize
     * 10 * d * w + 18 * 2^(w-1) + 11 * d + 7 * w, with d = ceil( nbits / w )
     * (see costs of the various parts, with 1S = 1M)
     */
    w = grp->nbits >= 384 ? 5 : 4;
   d8cf2:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   d8cf6:	bf2c      	ite	cs
   d8cf8:	2705      	movcs	r7, #5
   d8cfa:	2704      	movcc	r7, #4
    /*
     * If P == G, pre-compute a bit more, since this may be re-used later.
     * Just adding one avoids upping the cost of the first mul too much,
     * and the memory cost too.
     */
    if( p_eq_g )
   d8cfc:	f1b9 0f00 	cmp.w	r9, #0
   d8d00:	d000      	beq.n	d8d04 <mbedtls_ecp_mul_restartable+0x70>
        w++;
   d8d02:	3701      	adds	r7, #1
     * (The last test is useful only for very small curves in the test suite.)
     */
    if( w > MBEDTLS_ECP_WINDOW_SIZE )
        w = MBEDTLS_ECP_WINDOW_SIZE;
    if( w >= grp->nbits )
        w = 2;
   d8d04:	42bb      	cmp	r3, r7
   d8d06:	bf98      	it	ls
   d8d08:	2702      	movls	r7, #2
    p_eq_g = 0;
#endif

    /* Pick window size and deduce related sizes */
    w = ecp_pick_window_size( grp, p_eq_g );
    T_size = 1U << ( w - 1 );
   d8d0a:	f107 38ff 	add.w	r8, r7, #4294967295
   d8d0e:	2201      	movs	r2, #1
   d8d10:	fa02 f208 	lsl.w	r2, r2, r8
   d8d14:	9207      	str	r2, [sp, #28]
   d8d16:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d8d1a:	9208      	str	r2, [sp, #32]
    d = ( grp->nbits + w - 1 ) / w;
   d8d1c:	3b01      	subs	r3, #1
   d8d1e:	443b      	add	r3, r7
   d8d20:	fbb3 f3f7 	udiv	r3, r3, r7
   d8d24:	9309      	str	r3, [sp, #36]	; 0x24

    /* Pre-computed table: do we have it already for the base point? */
    if( p_eq_g && grp->T != NULL )
   d8d26:	f1b9 0f00 	cmp.w	r9, #0
   d8d2a:	d001      	beq.n	d8d30 <mbedtls_ecp_mul_restartable+0x9c>
   d8d2c:	6f6c      	ldr	r4, [r5, #116]	; 0x74
   d8d2e:	bb24      	cbnz	r4, d8d7a <mbedtls_ecp_mul_restartable+0xe6>
    }
    else
#endif
    /* Allocate table if we didn't have any */
    {
        T = (mbedtls_ecp_point *)mbedtls_calloc( T_size, sizeof( mbedtls_ecp_point ) );
   d8d30:	2124      	movs	r1, #36	; 0x24
   d8d32:	9807      	ldr	r0, [sp, #28]
   d8d34:	f00d ffee 	bl	e6d14 <calloc>
        if( T == NULL )
   d8d38:	4604      	mov	r4, r0
   d8d3a:	2800      	cmp	r0, #0
   d8d3c:	d02e      	beq.n	d8d9c <mbedtls_ecp_mul_restartable+0x108>
   d8d3e:	f04f 0a00 	mov.w	sl, #0
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
            goto cleanup;
        }

        for( i = 0; i < T_size; i++ )
            mbedtls_ecp_point_init( &T[i] );
   d8d42:	f04f 0b24 	mov.w	fp, #36	; 0x24
   d8d46:	fb0b 400a 	mla	r0, fp, sl, r4
   d8d4a:	f7ff f9dd 	bl	d8108 <mbedtls_ecp_point_init>
   d8d4e:	f10a 0a01 	add.w	sl, sl, #1
        {
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
            goto cleanup;
        }

        for( i = 0; i < T_size; i++ )
   d8d52:	9a08      	ldr	r2, [sp, #32]
   d8d54:	fa5f f38a 	uxtb.w	r3, sl
   d8d58:	429a      	cmp	r2, r3
   d8d5a:	d8f4      	bhi.n	d8d46 <mbedtls_ecp_mul_restartable+0xb2>
   d8d5c:	e03d      	b.n	d8dda <mbedtls_ecp_mul_restartable+0x146>
    for( j = 0; j + 1 < T_size; j++ )
        TT[j] = T + j + 1;

    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV + 6 * j - 2 );

    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
   d8d5e:	9b07      	ldr	r3, [sp, #28]
   d8d60:	a90f      	add	r1, sp, #60	; 0x3c
   d8d62:	1e5a      	subs	r2, r3, #1
   d8d64:	4628      	mov	r0, r5
   d8d66:	f7ff f849 	bl	d7dfc <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj>
    }

    /* Compute table (or finish computing it) if not done already */
    if( !T_ok )
    {
        MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d, rs_ctx ) );
   d8d6a:	4683      	mov	fp, r0
   d8d6c:	b9c0      	cbnz	r0, d8da0 <mbedtls_ecp_mul_restartable+0x10c>

        if( p_eq_g )
   d8d6e:	f1b9 0f00 	cmp.w	r9, #0
   d8d72:	d002      	beq.n	d8d7a <mbedtls_ecp_mul_restartable+0xe6>
        {
            /* almost transfer ownership of T to the group, but keep a copy of
             * the pointer to use for calling the next function more easily */
            grp->T = T;
            grp->T_size = T_size;
   d8d74:	9b07      	ldr	r3, [sp, #28]

        if( p_eq_g )
        {
            /* almost transfer ownership of T to the group, but keep a copy of
             * the pointer to use for calling the next function more easily */
            grp->T = T;
   d8d76:	676c      	str	r4, [r5, #116]	; 0x74
            grp->T_size = T_size;
   d8d78:	67ab      	str	r3, [r5, #120]	; 0x78
        }
    }

    /* Actual comb multiplication using precomputed points */
    MBEDTLS_MPI_CHK( ecp_mul_comb_after_precomp( grp, R, m,
   d8d7a:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   d8d7c:	9304      	str	r3, [sp, #16]
   d8d7e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   d8d80:	9303      	str	r3, [sp, #12]
   d8d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d8d84:	9302      	str	r3, [sp, #8]
   d8d86:	9b08      	ldr	r3, [sp, #32]
   d8d88:	9300      	str	r3, [sp, #0]
   d8d8a:	9701      	str	r7, [sp, #4]
   d8d8c:	4623      	mov	r3, r4
   d8d8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d8d90:	990a      	ldr	r1, [sp, #40]	; 0x28
   d8d92:	4628      	mov	r0, r5
   d8d94:	f7ff fc52 	bl	d863c <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6>
   d8d98:	4683      	mov	fp, r0
   d8d9a:	e001      	b.n	d8da0 <mbedtls_ecp_mul_restartable+0x10c>
    /* Allocate table if we didn't have any */
    {
        T = (mbedtls_ecp_point *)mbedtls_calloc( T_size, sizeof( mbedtls_ecp_point ) );
        if( T == NULL )
        {
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
   d8d9c:	f8df b140 	ldr.w	fp, [pc, #320]	; d8ee0 <mbedtls_ecp_mul_restartable+0x24c>
                                                 f_rng, p_rng, rs_ctx ) );

cleanup:

    /* does T belong to the group? */
    if( T == grp->T )
   d8da0:	6f6a      	ldr	r2, [r5, #116]	; 0x74
   d8da2:	42a2      	cmp	r2, r4
   d8da4:	d00e      	beq.n	d8dc4 <mbedtls_ecp_mul_restartable+0x130>
        T = NULL;
    }
#endif

    /* did T belong to us? then let's destroy it! */
    if( T != NULL )
   d8da6:	b16c      	cbz	r4, d8dc4 <mbedtls_ecp_mul_restartable+0x130>
   d8da8:	2500      	movs	r5, #0
    {
        for( i = 0; i < T_size; i++ )
            mbedtls_ecp_point_free( &T[i] );
   d8daa:	2624      	movs	r6, #36	; 0x24
   d8dac:	fb06 4005 	mla	r0, r6, r5, r4
   d8db0:	f7ff f9e7 	bl	d8182 <mbedtls_ecp_point_free>
   d8db4:	3501      	adds	r5, #1
#endif

    /* did T belong to us? then let's destroy it! */
    if( T != NULL )
    {
        for( i = 0; i < T_size; i++ )
   d8db6:	9b08      	ldr	r3, [sp, #32]
   d8db8:	b2ea      	uxtb	r2, r5
   d8dba:	4293      	cmp	r3, r2
   d8dbc:	d8f6      	bhi.n	d8dac <mbedtls_ecp_mul_restartable+0x118>
            mbedtls_ecp_point_free( &T[i] );
        mbedtls_free( T );
   d8dbe:	4620      	mov	r0, r4
   d8dc0:	f00c fad4 	bl	e536c <free>
    /* don't free R while in progress in case R == P */
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( ret != MBEDTLS_ERR_ECP_IN_PROGRESS )
#endif
    /* prevent caller from using invalid value */
    if( ret != 0 )
   d8dc4:	f1bb 0f00 	cmp.w	fp, #0
   d8dc8:	f000 8085 	beq.w	d8ed6 <mbedtls_ecp_mul_restartable+0x242>
        mbedtls_ecp_point_free( R );
   d8dcc:	980a      	ldr	r0, [sp, #40]	; 0x28
   d8dce:	f7ff f9d8 	bl	d8182 <mbedtls_ecp_point_free>
   d8dd2:	e080      	b.n	d8ed6 <mbedtls_ecp_mul_restartable+0x242>
        /* Common sanity checks */
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, P ) );
    }

    ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   d8dd4:	f8df b10c 	ldr.w	fp, [pc, #268]	; d8ee4 <mbedtls_ecp_mul_restartable+0x250>
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL )
        rs_ctx->depth--;
#endif

    return( ret );
   d8dd8:	e07d      	b.n	d8ed6 <mbedtls_ecp_mul_restartable+0x242>
#endif
    /*
     * Set T[0] = P and
     * T[2^{l-1}] = 2^{dl} P for l = 1 .. w-1 (this is not the final value)
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );
   d8dda:	4631      	mov	r1, r6
   d8ddc:	4620      	mov	r0, r4
   d8dde:	f7ff fa20 	bl	d8222 <mbedtls_ecp_copy>
   d8de2:	4683      	mov	fp, r0
   d8de4:	2800      	cmp	r0, #0
   d8de6:	d1db      	bne.n	d8da0 <mbedtls_ecp_mul_restartable+0x10c>
        j = rs_ctx->rsm->i;
    else
#endif
        j = 0;

    for( ; j < d * ( w - 1 ); j++ )
   d8de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d8dea:	fb03 f308 	mul.w	r3, r3, r8
   d8dee:	930c      	str	r3, [sp, #48]	; 0x30
   d8df0:	46d8      	mov	r8, fp
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL );

        i = 1U << ( j / d );
        cur = T + i;
   d8df2:	2624      	movs	r6, #36	; 0x24
        j = rs_ctx->rsm->i;
    else
#endif
        j = 0;

    for( ; j < d * ( w - 1 ); j++ )
   d8df4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d8df6:	4543      	cmp	r3, r8
   d8df8:	d023      	beq.n	d8e42 <mbedtls_ecp_mul_restartable+0x1ae>
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL );

        i = 1U << ( j / d );
   d8dfa:	2201      	movs	r2, #1
   d8dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d8dfe:	fbb8 f3f3 	udiv	r3, r8, r3
   d8e02:	fa02 f103 	lsl.w	r1, r2, r3
        cur = T + i;

        if( j % d == 0 )
   d8e06:	9a09      	ldr	r2, [sp, #36]	; 0x24
    for( ; j < d * ( w - 1 ); j++ )
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL );

        i = 1U << ( j / d );
        cur = T + i;
   d8e08:	fa5f fa81 	uxtb.w	sl, r1

        if( j % d == 0 )
   d8e0c:	fb02 8313 	mls	r3, r2, r3, r8
    for( ; j < d * ( w - 1 ); j++ )
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL );

        i = 1U << ( j / d );
        cur = T + i;
   d8e10:	fb06 4a0a 	mla	sl, r6, sl, r4

        if( j % d == 0 )
   d8e14:	b153      	cbz	r3, d8e2c <mbedtls_ecp_mul_restartable+0x198>
            MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );

        MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );
   d8e16:	4652      	mov	r2, sl
   d8e18:	4651      	mov	r1, sl
   d8e1a:	4628      	mov	r0, r5
   d8e1c:	f7fe fd5c 	bl	d78d8 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_>
   d8e20:	4683      	mov	fp, r0
   d8e22:	2800      	cmp	r0, #0
   d8e24:	d1bc      	bne.n	d8da0 <mbedtls_ecp_mul_restartable+0x10c>
        j = rs_ctx->rsm->i;
    else
#endif
        j = 0;

    for( ; j < d * ( w - 1 ); j++ )
   d8e26:	f108 0801 	add.w	r8, r8, #1
   d8e2a:	e7e3      	b.n	d8df4 <mbedtls_ecp_mul_restartable+0x160>

        i = 1U << ( j / d );
        cur = T + i;

        if( j % d == 0 )
            MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
   d8e2c:	f3c1 0146 	ubfx	r1, r1, #1, #7
   d8e30:	fb06 4101 	mla	r1, r6, r1, r4
   d8e34:	4650      	mov	r0, sl
   d8e36:	f7ff f9f4 	bl	d8222 <mbedtls_ecp_copy>
   d8e3a:	4683      	mov	fp, r0
   d8e3c:	2800      	cmp	r0, #0
   d8e3e:	d0ea      	beq.n	d8e16 <mbedtls_ecp_mul_restartable+0x182>
   d8e40:	e7ae      	b.n	d8da0 <mbedtls_ecp_mul_restartable+0x10c>
        j = rs_ctx->rsm->i;
    else
#endif
        j = 0;

    for( ; j < d * ( w - 1 ); j++ )
   d8e42:	2200      	movs	r2, #0
   d8e44:	2301      	movs	r3, #1
     * Normalize current elements in T. As T has holes,
     * use an auxiliary array of pointers to elements in T.
     */
    j = 0;
    for( i = 1; i < T_size; i <<= 1 )
        TT[j++] = T + i;
   d8e46:	eb03 00c3 	add.w	r0, r3, r3, lsl #3
   d8e4a:	a90f      	add	r1, sp, #60	; 0x3c
   d8e4c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   d8e50:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
    /*
     * Normalize current elements in T. As T has holes,
     * use an auxiliary array of pointers to elements in T.
     */
    j = 0;
    for( i = 1; i < T_size; i <<= 1 )
   d8e54:	005b      	lsls	r3, r3, #1
   d8e56:	9808      	ldr	r0, [sp, #32]
   d8e58:	b2db      	uxtb	r3, r3
   d8e5a:	4298      	cmp	r0, r3
   d8e5c:	f102 0201 	add.w	r2, r2, #1
   d8e60:	d8f1      	bhi.n	d8e46 <mbedtls_ecp_mul_restartable+0x1b2>
        TT[j++] = T + i;

    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV + 6 * j - 2 );

    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
   d8e62:	4628      	mov	r0, r5
   d8e64:	f7fe ffca 	bl	d7dfc <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj>
   d8e68:	4683      	mov	fp, r0
   d8e6a:	2800      	cmp	r0, #0
   d8e6c:	d198      	bne.n	d8da0 <mbedtls_ecp_mul_restartable+0x10c>
   d8e6e:	2601      	movs	r6, #1

    for( i = 1; i < T_size; i <<= 1 )
    {
        j = i;
        while( j-- )
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
   d8e70:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
   d8e74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   d8e78:	f06f 0223 	mvn.w	r2, #35	; 0x23
   d8e7c:	930d      	str	r3, [sp, #52]	; 0x34
   d8e7e:	2348      	movs	r3, #72	; 0x48
   d8e80:	fb13 2a06 	smlabb	sl, r3, r6, r2
   d8e84:	4613      	mov	r3, r2
   d8e86:	4373      	muls	r3, r6
   d8e88:	44a2      	add	sl, r4
   d8e8a:	930c      	str	r3, [sp, #48]	; 0x30
   d8e8c:	46b0      	mov	r8, r6
   d8e8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   d8e90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d8e92:	4452      	add	r2, sl
   d8e94:	4651      	mov	r1, sl
   d8e96:	4628      	mov	r0, r5
   d8e98:	f7ff f9f0 	bl	d827c <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_>
   d8e9c:	f108 38ff 	add.w	r8, r8, #4294967295
   d8ea0:	f1aa 0a24 	sub.w	sl, sl, #36	; 0x24
   d8ea4:	4683      	mov	fp, r0
   d8ea6:	2800      	cmp	r0, #0
   d8ea8:	f47f af7a 	bne.w	d8da0 <mbedtls_ecp_mul_restartable+0x10c>
    MBEDTLS_ECP_BUDGET( ( T_size - 1 ) * MBEDTLS_ECP_OPS_ADD );

    for( i = 1; i < T_size; i <<= 1 )
    {
        j = i;
        while( j-- )
   d8eac:	f1b8 0f00 	cmp.w	r8, #0
   d8eb0:	d1ed      	bne.n	d8e8e <mbedtls_ecp_mul_restartable+0x1fa>
     * Compute the remaining ones using the minimal number of additions
     * Be careful to update T[2^l] only after using it!
     */
    MBEDTLS_ECP_BUDGET( ( T_size - 1 ) * MBEDTLS_ECP_OPS_ADD );

    for( i = 1; i < T_size; i <<= 1 )
   d8eb2:	0076      	lsls	r6, r6, #1
   d8eb4:	9b08      	ldr	r3, [sp, #32]
   d8eb6:	b2f6      	uxtb	r6, r6
   d8eb8:	42b3      	cmp	r3, r6
   d8eba:	d8d9      	bhi.n	d8e70 <mbedtls_ecp_mul_restartable+0x1dc>
   d8ebc:	ab0e      	add	r3, sp, #56	; 0x38
     * Normalize final elements in T. Even though there are no holes now, we
     * still need the auxiliary array for homogeneity with the previous
     * call. Also, skip T[0] which is already normalised, being a copy of P.
     */
    for( j = 0; j + 1 < T_size; j++ )
        TT[j] = T + j + 1;
   d8ebe:	2124      	movs	r1, #36	; 0x24
    /*
     * Normalize final elements in T. Even though there are no holes now, we
     * still need the auxiliary array for homogeneity with the previous
     * call. Also, skip T[0] which is already normalised, being a copy of P.
     */
    for( j = 0; j + 1 < T_size; j++ )
   d8ec0:	9a07      	ldr	r2, [sp, #28]
   d8ec2:	f108 0801 	add.w	r8, r8, #1
   d8ec6:	4542      	cmp	r2, r8
   d8ec8:	f43f af49 	beq.w	d8d5e <mbedtls_ecp_mul_restartable+0xca>
        TT[j] = T + j + 1;
   d8ecc:	fb01 4208 	mla	r2, r1, r8, r4
   d8ed0:	f843 2f04 	str.w	r2, [r3, #4]!
   d8ed4:	e7f4      	b.n	d8ec0 <mbedtls_ecp_mul_restartable+0x22c>
    if( rs_ctx != NULL )
        rs_ctx->depth--;
#endif

    return( ret );
}
   d8ed6:	4658      	mov	r0, fp
   d8ed8:	b02f      	add	sp, #188	; 0xbc
   d8eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8ede:	bf00      	nop
   d8ee0:	ffffb280 	.word	0xffffb280
   d8ee4:	ffffb080 	.word	0xffffb080

000d8ee8 <mbedtls_ecp_mul>:
 * Multiplication R = m * P
 */
int mbedtls_ecp_mul( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   d8ee8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( R   != NULL );
    ECP_VALIDATE_RET( m   != NULL );
    ECP_VALIDATE_RET( P   != NULL );
    return( mbedtls_ecp_mul_restartable( grp, R, m, P, f_rng, p_rng, NULL ) );
   d8eea:	2400      	movs	r4, #0
   d8eec:	9402      	str	r4, [sp, #8]
   d8eee:	9c07      	ldr	r4, [sp, #28]
   d8ef0:	9401      	str	r4, [sp, #4]
   d8ef2:	9c06      	ldr	r4, [sp, #24]
   d8ef4:	9400      	str	r4, [sp, #0]
   d8ef6:	f7ff fecd 	bl	d8c94 <mbedtls_ecp_mul_restartable>
}
   d8efa:	b004      	add	sp, #16
   d8efc:	bd10      	pop	{r4, pc}

000d8efe <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv>:
static int mbedtls_ecp_mul_shortcuts( mbedtls_ecp_group *grp,
                                      mbedtls_ecp_point *R,
                                      const mbedtls_mpi *m,
                                      const mbedtls_ecp_point *P,
                                      mbedtls_ecp_restart_ctx *rs_ctx )
{
   d8efe:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d8f02:	4607      	mov	r7, r0
   d8f04:	460c      	mov	r4, r1
    int ret;

    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
   d8f06:	4610      	mov	r0, r2
   d8f08:	2101      	movs	r1, #1
static int mbedtls_ecp_mul_shortcuts( mbedtls_ecp_group *grp,
                                      mbedtls_ecp_point *R,
                                      const mbedtls_mpi *m,
                                      const mbedtls_ecp_point *P,
                                      mbedtls_ecp_restart_ctx *rs_ctx )
{
   d8f0a:	4615      	mov	r5, r2
   d8f0c:	461e      	mov	r6, r3
   d8f0e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    int ret;

    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
   d8f12:	f007 fbea 	bl	e06ea <mbedtls_mpi_cmp_int>
   d8f16:	b930      	cbnz	r0, d8f26 <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv+0x28>
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
   d8f18:	4631      	mov	r1, r6
   d8f1a:	4620      	mov	r0, r4
                                                      NULL, NULL, rs_ctx ) );
    }

cleanup:
    return( ret );
}
   d8f1c:	b004      	add	sp, #16
   d8f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
{
    int ret;

    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
   d8f22:	f7ff b97e 	b.w	d8222 <mbedtls_ecp_copy>
    }
    else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )
   d8f26:	f04f 31ff 	mov.w	r1, #4294967295
   d8f2a:	4628      	mov	r0, r5
   d8f2c:	f007 fbdd 	bl	e06ea <mbedtls_mpi_cmp_int>
   d8f30:	b998      	cbnz	r0, d8f5a <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv+0x5c>
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
   d8f32:	4631      	mov	r1, r6
   d8f34:	4620      	mov	r0, r4
   d8f36:	f7ff f974 	bl	d8222 <mbedtls_ecp_copy>
   d8f3a:	4605      	mov	r5, r0
   d8f3c:	b9c8      	cbnz	r0, d8f72 <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv+0x74>
        if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )
   d8f3e:	340c      	adds	r4, #12
   d8f40:	4601      	mov	r1, r0
   d8f42:	4620      	mov	r0, r4
   d8f44:	f007 fbd1 	bl	e06ea <mbedtls_mpi_cmp_int>
   d8f48:	b198      	cbz	r0, d8f72 <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv+0x74>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
   d8f4a:	4622      	mov	r2, r4
   d8f4c:	1d39      	adds	r1, r7, #4
   d8f4e:	4620      	mov	r0, r4
                                                      NULL, NULL, rs_ctx ) );
    }

cleanup:
    return( ret );
}
   d8f50:	b004      	add	sp, #16
   d8f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    }
    else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
        if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
   d8f56:	f007 bc99 	b.w	e088c <mbedtls_mpi_sub_mpi>
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, R, m, P,
   d8f5a:	2300      	movs	r3, #0
   d8f5c:	9301      	str	r3, [sp, #4]
   d8f5e:	9300      	str	r3, [sp, #0]
   d8f60:	462a      	mov	r2, r5
   d8f62:	f8cd 8008 	str.w	r8, [sp, #8]
   d8f66:	4633      	mov	r3, r6
   d8f68:	4621      	mov	r1, r4
   d8f6a:	4638      	mov	r0, r7
   d8f6c:	f7ff fe92 	bl	d8c94 <mbedtls_ecp_mul_restartable>
   d8f70:	4605      	mov	r5, r0
                                                      NULL, NULL, rs_ctx ) );
    }

cleanup:
    return( ret );
}
   d8f72:	4628      	mov	r0, r5
   d8f74:	b004      	add	sp, #16
   d8f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d8f7c <mbedtls_ecp_muladd_restartable>:
int mbedtls_ecp_muladd_restartable(
             mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             const mbedtls_mpi *n, const mbedtls_ecp_point *Q,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
   d8f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8f80:	b08c      	sub	sp, #48	; 0x30
   d8f82:	4605      	mov	r5, r0
   d8f84:	460e      	mov	r6, r1
   d8f86:	4614      	mov	r4, r2
   d8f88:	4698      	mov	r8, r3
    ECP_VALIDATE_RET( m   != NULL );
    ECP_VALIDATE_RET( P   != NULL );
    ECP_VALIDATE_RET( n   != NULL );
    ECP_VALIDATE_RET( Q   != NULL );

    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
   d8f8a:	f7fe fc56 	bl	d783a <_ZL12ecp_get_typePK17mbedtls_ecp_group>
   d8f8e:	2801      	cmp	r0, #1
int mbedtls_ecp_muladd_restartable(
             mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             const mbedtls_mpi *n, const mbedtls_ecp_point *Q,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
   d8f90:	9f14      	ldr	r7, [sp, #80]	; 0x50
    ECP_VALIDATE_RET( m   != NULL );
    ECP_VALIDATE_RET( P   != NULL );
    ECP_VALIDATE_RET( n   != NULL );
    ECP_VALIDATE_RET( Q   != NULL );

    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
   d8f92:	d126      	bne.n	d8fe2 <mbedtls_ecp_muladd_restartable+0x66>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );

    mbedtls_ecp_point_init( &mP );
   d8f94:	a803      	add	r0, sp, #12
   d8f96:	f7ff f8b7 	bl	d8108 <mbedtls_ecp_point_init>
        if( rs_ctx->ma->state == ecp_rsma_norm )
            goto norm;
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pmP, m, P, rs_ctx ) );
   d8f9a:	4622      	mov	r2, r4
   d8f9c:	9700      	str	r7, [sp, #0]
   d8f9e:	4643      	mov	r3, r8
   d8fa0:	a903      	add	r1, sp, #12
   d8fa2:	4628      	mov	r0, r5
   d8fa4:	f7ff ffab 	bl	d8efe <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv>
   d8fa8:	4604      	mov	r4, r0
   d8faa:	b9a8      	cbnz	r0, d8fd8 <mbedtls_ecp_muladd_restartable+0x5c>
    if( rs_ctx != NULL && rs_ctx->ma != NULL )
        rs_ctx->ma->state = ecp_rsma_mul2;

mul2:
#endif
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pR,  n, Q, rs_ctx ) );
   d8fac:	9700      	str	r7, [sp, #0]
   d8fae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d8fb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d8fb2:	4631      	mov	r1, r6
   d8fb4:	4628      	mov	r0, r5
   d8fb6:	f7ff ffa2 	bl	d8efe <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv>
   d8fba:	4604      	mov	r4, r0
   d8fbc:	b960      	cbnz	r0, d8fd8 <mbedtls_ecp_muladd_restartable+0x5c>
        rs_ctx->ma->state = ecp_rsma_add;

add:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_ADD );
    MBEDTLS_MPI_CHK( ecp_add_mixed( grp, pR, pmP, pR ) );
   d8fbe:	4633      	mov	r3, r6
   d8fc0:	aa03      	add	r2, sp, #12
   d8fc2:	4631      	mov	r1, r6
   d8fc4:	4628      	mov	r0, r5
   d8fc6:	f7ff f959 	bl	d827c <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_>
   d8fca:	4604      	mov	r4, r0
   d8fcc:	b920      	cbnz	r0, d8fd8 <mbedtls_ecp_muladd_restartable+0x5c>
        rs_ctx->ma->state = ecp_rsma_norm;

norm:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV );
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, pR ) );
   d8fce:	4631      	mov	r1, r6
   d8fd0:	4628      	mov	r0, r5
   d8fd2:	f7fe feb6 	bl	d7d42 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point>
   d8fd6:	4604      	mov	r4, r0
#if defined(MBEDTLS_ECP_INTERNAL_ALT)
    if( is_grp_capable )
        mbedtls_internal_ecp_free( grp );
#endif /* MBEDTLS_ECP_INTERNAL_ALT */

    mbedtls_ecp_point_free( &mP );
   d8fd8:	a803      	add	r0, sp, #12
   d8fda:	f7ff f8d2 	bl	d8182 <mbedtls_ecp_point_free>

    ECP_RS_LEAVE( ma );

    return( ret );
   d8fde:	4620      	mov	r0, r4
   d8fe0:	e000      	b.n	d8fe4 <mbedtls_ecp_muladd_restartable+0x68>
    ECP_VALIDATE_RET( P   != NULL );
    ECP_VALIDATE_RET( n   != NULL );
    ECP_VALIDATE_RET( Q   != NULL );

    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   d8fe2:	4802      	ldr	r0, [pc, #8]	; (d8fec <mbedtls_ecp_muladd_restartable+0x70>)
    mbedtls_ecp_point_free( &mP );

    ECP_RS_LEAVE( ma );

    return( ret );
}
   d8fe4:	b00c      	add	sp, #48	; 0x30
   d8fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8fea:	bf00      	nop
   d8fec:	ffffb180 	.word	0xffffb180

000d8ff0 <mbedtls_ecp_gen_privkey>:
 */
int mbedtls_ecp_gen_privkey( const mbedtls_ecp_group *grp,
                     mbedtls_mpi *d,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   d8ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8ff4:	4607      	mov	r7, r0

    ECP_VALIDATE_RET( grp   != NULL );
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    n_size = ( grp->nbits + 7 ) / 8;
   d8ff6:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 */
int mbedtls_ecp_gen_privkey( const mbedtls_ecp_group *grp,
                     mbedtls_mpi *d,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   d8ff8:	460d      	mov	r5, r1
   d8ffa:	4692      	mov	sl, r2
   d8ffc:	469b      	mov	fp, r3
        }
    }
#endif /* ECP_MONTGOMERY */

#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d8ffe:	f7fe fc1c 	bl	d783a <_ZL12ecp_get_typePK17mbedtls_ecp_group>

    ECP_VALIDATE_RET( grp   != NULL );
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    n_size = ( grp->nbits + 7 ) / 8;
   d9002:	3407      	adds	r4, #7
        }
    }
#endif /* ECP_MONTGOMERY */

#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d9004:	2801      	cmp	r0, #1

    ECP_VALIDATE_RET( grp   != NULL );
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    n_size = ( grp->nbits + 7 ) / 8;
   d9006:	ea4f 04d4 	mov.w	r4, r4, lsr #3
        }
    }
#endif /* ECP_MONTGOMERY */

#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d900a:	d124      	bne.n	d9056 <mbedtls_ecp_gen_privkey+0x66>
             */
            if( ++count > 30 )
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
        }
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
   d900c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
         * This also avoids any biais, which is especially important for ECDSA.
         */
        do
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
   d9010:	ea4f 09c4 	mov.w	r9, r4, lsl #3
   d9014:	261f      	movs	r6, #31
             */
            if( ++count > 30 )
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
        }
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
   d9016:	9301      	str	r3, [sp, #4]
         * - try until result is in the desired range.
         * This also avoids any biais, which is especially important for ECDSA.
         */
        do
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
   d9018:	465b      	mov	r3, fp
   d901a:	4652      	mov	r2, sl
   d901c:	4621      	mov	r1, r4
   d901e:	4628      	mov	r0, r5
   d9020:	f008 f994 	bl	e134c <mbedtls_mpi_fill_random>
   d9024:	4680      	mov	r8, r0
   d9026:	b9d8      	cbnz	r0, d9060 <mbedtls_ecp_gen_privkey+0x70>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
   d9028:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   d902a:	4628      	mov	r0, r5
   d902c:	ebc1 0109 	rsb	r1, r1, r9
   d9030:	f007 fa37 	bl	e04a2 <mbedtls_mpi_shift_r>
   d9034:	4680      	mov	r8, r0
   d9036:	b998      	cbnz	r0, d9060 <mbedtls_ecp_gen_privkey+0x70>
             *
             * For most curves, 1 try is enough with overwhelming probability,
             * since N starts with a lot of 1s in binary, but some curves
             * such as secp224k1 are actually very close to the worst case.
             */
            if( ++count > 30 )
   d9038:	3e01      	subs	r6, #1
   d903a:	d00f      	beq.n	d905c <mbedtls_ecp_gen_privkey+0x6c>
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
        }
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
   d903c:	2101      	movs	r1, #1
   d903e:	4628      	mov	r0, r5
   d9040:	f007 fb53 	bl	e06ea <mbedtls_mpi_cmp_int>
   d9044:	2800      	cmp	r0, #0
   d9046:	dbe7      	blt.n	d9018 <mbedtls_ecp_gen_privkey+0x28>
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
   d9048:	9901      	ldr	r1, [sp, #4]
   d904a:	4628      	mov	r0, r5
   d904c:	f007 fb08 	bl	e0660 <mbedtls_mpi_cmp_mpi>
             * such as secp224k1 are actually very close to the worst case.
             */
            if( ++count > 30 )
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
        }
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
   d9050:	2800      	cmp	r0, #0
   d9052:	dae1      	bge.n	d9018 <mbedtls_ecp_gen_privkey+0x28>
   d9054:	e004      	b.n	d9060 <mbedtls_ecp_gen_privkey+0x70>
int mbedtls_ecp_gen_privkey( const mbedtls_ecp_group *grp,
                     mbedtls_mpi *d,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
    int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   d9056:	f8df 8010 	ldr.w	r8, [pc, #16]	; d9068 <mbedtls_ecp_gen_privkey+0x78>
   d905a:	e001      	b.n	d9060 <mbedtls_ecp_gen_privkey+0x70>
             * For most curves, 1 try is enough with overwhelming probability,
             * since N starts with a lot of 1s in binary, but some curves
             * such as secp224k1 are actually very close to the worst case.
             */
            if( ++count > 30 )
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
   d905c:	f8df 800c 	ldr.w	r8, [pc, #12]	; d906c <mbedtls_ecp_gen_privkey+0x7c>
    }
#endif /* ECP_SHORTWEIERSTRASS */

cleanup:
    return( ret );
}
   d9060:	4640      	mov	r0, r8
   d9062:	b003      	add	sp, #12
   d9064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9068:	ffffb080 	.word	0xffffb080
   d906c:	ffffb300 	.word	0xffffb300

000d9070 <mbedtls_ecp_check_pub_priv>:

/*
 * Check a public-private key pair
 */
int mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv )
{
   d9070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    mbedtls_ecp_point Q;
    mbedtls_ecp_group grp;
    ECP_VALIDATE_RET( pub != NULL );
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
   d9074:	7803      	ldrb	r3, [r0, #0]

/*
 * Check a public-private key pair
 */
int mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv )
{
   d9076:	b0aa      	sub	sp, #168	; 0xa8
   d9078:	4605      	mov	r5, r0
   d907a:	460c      	mov	r4, r1
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
   d907c:	2b00      	cmp	r3, #0
   d907e:	d049      	beq.n	d9114 <mbedtls_ecp_check_pub_priv+0xa4>
    mbedtls_ecp_point Q;
    mbedtls_ecp_group grp;
    ECP_VALIDATE_RET( pub != NULL );
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
   d9080:	780a      	ldrb	r2, [r1, #0]
   d9082:	429a      	cmp	r2, r3
   d9084:	d146      	bne.n	d9114 <mbedtls_ecp_check_pub_priv+0xa4>
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
   d9086:	f101 0688 	add.w	r6, r1, #136	; 0x88
   d908a:	4631      	mov	r1, r6
   d908c:	3088      	adds	r0, #136	; 0x88
   d908e:	f007 fae7 	bl	e0660 <mbedtls_mpi_cmp_mpi>
    mbedtls_ecp_group grp;
    ECP_VALIDATE_RET( pub != NULL );
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
        pub->grp.id != prv->grp.id ||
   d9092:	2800      	cmp	r0, #0
   d9094:	d13e      	bne.n	d9114 <mbedtls_ecp_check_pub_priv+0xa4>
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
   d9096:	f104 0794 	add.w	r7, r4, #148	; 0x94
   d909a:	4639      	mov	r1, r7
   d909c:	f105 0094 	add.w	r0, r5, #148	; 0x94
   d90a0:	f007 fade 	bl	e0660 <mbedtls_mpi_cmp_mpi>
    ECP_VALIDATE_RET( pub != NULL );
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
   d90a4:	2800      	cmp	r0, #0
   d90a6:	d135      	bne.n	d9114 <mbedtls_ecp_check_pub_priv+0xa4>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
   d90a8:	f104 08a0 	add.w	r8, r4, #160	; 0xa0
   d90ac:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
   d90b0:	4641      	mov	r1, r8
   d90b2:	f007 fad5 	bl	e0660 <mbedtls_mpi_cmp_mpi>
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
   d90b6:	4605      	mov	r5, r0
   d90b8:	bb60      	cbnz	r0, d9114 <mbedtls_ecp_check_pub_priv+0xa4>
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }

    mbedtls_ecp_point_init( &Q );
   d90ba:	a802      	add	r0, sp, #8
   d90bc:	f7ff f824 	bl	d8108 <mbedtls_ecp_point_init>
    mbedtls_ecp_group_init( &grp );
   d90c0:	a80b      	add	r0, sp, #44	; 0x2c
   d90c2:	f7ff f82f 	bl	d8124 <mbedtls_ecp_group_init>

    /* mbedtls_ecp_mul() needs a non-const group... */
    mbedtls_ecp_group_copy( &grp, &prv->grp );
   d90c6:	4621      	mov	r1, r4
   d90c8:	a80b      	add	r0, sp, #44	; 0x2c
   d90ca:	f7ff f8c0 	bl	d824e <mbedtls_ecp_group_copy>

    /* Also checks d is valid */
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );
   d90ce:	f104 0328 	add.w	r3, r4, #40	; 0x28
   d90d2:	f104 027c 	add.w	r2, r4, #124	; 0x7c
   d90d6:	9501      	str	r5, [sp, #4]
   d90d8:	9500      	str	r5, [sp, #0]
   d90da:	a902      	add	r1, sp, #8
   d90dc:	a80b      	add	r0, sp, #44	; 0x2c
   d90de:	f7ff ff03 	bl	d8ee8 <mbedtls_ecp_mul>
   d90e2:	4604      	mov	r4, r0
   d90e4:	b970      	cbnz	r0, d9104 <mbedtls_ecp_check_pub_priv+0x94>

    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
   d90e6:	4631      	mov	r1, r6
   d90e8:	a802      	add	r0, sp, #8
   d90ea:	f007 fab9 	bl	e0660 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
   d90ee:	b998      	cbnz	r0, d9118 <mbedtls_ecp_check_pub_priv+0xa8>
   d90f0:	4639      	mov	r1, r7
   d90f2:	a805      	add	r0, sp, #20
   d90f4:	f007 fab4 	bl	e0660 <mbedtls_mpi_cmp_mpi>
    mbedtls_ecp_group_copy( &grp, &prv->grp );

    /* Also checks d is valid */
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );

    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
   d90f8:	b970      	cbnz	r0, d9118 <mbedtls_ecp_check_pub_priv+0xa8>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
        mbedtls_mpi_cmp_mpi( &Q.Z, &prv->Q.Z ) )
   d90fa:	4641      	mov	r1, r8
   d90fc:	a808      	add	r0, sp, #32
   d90fe:	f007 faaf 	bl	e0660 <mbedtls_mpi_cmp_mpi>

    /* Also checks d is valid */
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );

    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
   d9102:	b948      	cbnz	r0, d9118 <mbedtls_ecp_check_pub_priv+0xa8>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
        goto cleanup;
    }

cleanup:
    mbedtls_ecp_point_free( &Q );
   d9104:	a802      	add	r0, sp, #8
   d9106:	f7ff f83c 	bl	d8182 <mbedtls_ecp_point_free>
    mbedtls_ecp_group_free( &grp );
   d910a:	a80b      	add	r0, sp, #44	; 0x2c
   d910c:	f7ff f849 	bl	d81a2 <mbedtls_ecp_group_free>

    return( ret );
   d9110:	4620      	mov	r0, r4
   d9112:	e003      	b.n	d911c <mbedtls_ecp_check_pub_priv+0xac>
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d9114:	4803      	ldr	r0, [pc, #12]	; (d9124 <mbedtls_ecp_check_pub_priv+0xb4>)
   d9116:	e001      	b.n	d911c <mbedtls_ecp_check_pub_priv+0xac>

    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
        mbedtls_mpi_cmp_mpi( &Q.Z, &prv->Q.Z ) )
    {
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   d9118:	4c02      	ldr	r4, [pc, #8]	; (d9124 <mbedtls_ecp_check_pub_priv+0xb4>)
   d911a:	e7f3      	b.n	d9104 <mbedtls_ecp_check_pub_priv+0x94>
cleanup:
    mbedtls_ecp_point_free( &Q );
    mbedtls_ecp_group_free( &grp );

    return( ret );
}
   d911c:	b02a      	add	sp, #168	; 0xa8
   d911e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9122:	bf00      	nop
   d9124:	ffffb080 	.word	0xffffb080

000d9128 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
   d9128:	b538      	push	{r3, r4, r5, lr}
   d912a:	4605      	mov	r5, r0
   d912c:	b160      	cbz	r0, d9148 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x20>
   d912e:	4c08      	ldr	r4, [pc, #32]	; (d9150 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x28>)
   d9130:	6820      	ldr	r0, [r4, #0]
   d9132:	b158      	cbz	r0, d914c <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x24>
   d9134:	6862      	ldr	r2, [r4, #4]
   d9136:	686b      	ldr	r3, [r5, #4]
   d9138:	429a      	cmp	r2, r3
   d913a:	d103      	bne.n	d9144 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x1c>
   d913c:	68a9      	ldr	r1, [r5, #8]
   d913e:	f00d fef7 	bl	e6f30 <memcmp>
   d9142:	b110      	cbz	r0, d914a <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x22>
   d9144:	3414      	adds	r4, #20
   d9146:	e7f3      	b.n	d9130 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x8>
   d9148:	bd38      	pop	{r3, r4, r5, pc}
   d914a:	4620      	mov	r0, r4
   d914c:	bd38      	pop	{r3, r4, r5, pc}
   d914e:	bf00      	nop
   d9150:	000e8f94 	.word	0x000e8f94

000d9154 <mbedtls_oid_get_attr_short_name>:
        NULL,
    }
};

FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
   d9154:	b570      	push	{r4, r5, r6, lr}
   d9156:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        NULL,
    }
};

FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
   d9158:	4605      	mov	r5, r0
   d915a:	b160      	cbz	r0, d9176 <mbedtls_oid_get_attr_short_name+0x22>
   d915c:	4c09      	ldr	r4, [pc, #36]	; (d9184 <mbedtls_oid_get_attr_short_name+0x30>)
   d915e:	6820      	ldr	r0, [r4, #0]
   d9160:	b148      	cbz	r0, d9176 <mbedtls_oid_get_attr_short_name+0x22>
   d9162:	6862      	ldr	r2, [r4, #4]
   d9164:	686b      	ldr	r3, [r5, #4]
   d9166:	429a      	cmp	r2, r3
   d9168:	d103      	bne.n	d9172 <mbedtls_oid_get_attr_short_name+0x1e>
   d916a:	68a9      	ldr	r1, [r5, #8]
   d916c:	f00d fee0 	bl	e6f30 <memcmp>
   d9170:	b120      	cbz	r0, d917c <mbedtls_oid_get_attr_short_name+0x28>
   d9172:	3414      	adds	r4, #20
   d9174:	e7f3      	b.n	d915e <mbedtls_oid_get_attr_short_name+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
   d9176:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d917a:	bd70      	pop	{r4, r5, r6, pc}
   d917c:	6923      	ldr	r3, [r4, #16]
   d917e:	6033      	str	r3, [r6, #0]
   d9180:	bd70      	pop	{r4, r5, r6, pc}
   d9182:	bf00      	nop
   d9184:	000e8378 	.word	0x000e8378

000d9188 <mbedtls_oid_get_x509_ext_type>:
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
   d9188:	b570      	push	{r4, r5, r6, lr}
   d918a:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
   d918c:	4605      	mov	r5, r0
   d918e:	b160      	cbz	r0, d91aa <mbedtls_oid_get_x509_ext_type+0x22>
   d9190:	4c09      	ldr	r4, [pc, #36]	; (d91b8 <mbedtls_oid_get_x509_ext_type+0x30>)
   d9192:	6820      	ldr	r0, [r4, #0]
   d9194:	b148      	cbz	r0, d91aa <mbedtls_oid_get_x509_ext_type+0x22>
   d9196:	6862      	ldr	r2, [r4, #4]
   d9198:	686b      	ldr	r3, [r5, #4]
   d919a:	429a      	cmp	r2, r3
   d919c:	d103      	bne.n	d91a6 <mbedtls_oid_get_x509_ext_type+0x1e>
   d919e:	68a9      	ldr	r1, [r5, #8]
   d91a0:	f00d fec6 	bl	e6f30 <memcmp>
   d91a4:	b120      	cbz	r0, d91b0 <mbedtls_oid_get_x509_ext_type+0x28>
   d91a6:	3414      	adds	r4, #20
   d91a8:	e7f3      	b.n	d9192 <mbedtls_oid_get_x509_ext_type+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
   d91aa:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d91ae:	bd70      	pop	{r4, r5, r6, pc}
   d91b0:	6923      	ldr	r3, [r4, #16]
   d91b2:	6033      	str	r3, [r6, #0]
   d91b4:	bd70      	pop	{r4, r5, r6, pc}
   d91b6:	bf00      	nop
   d91b8:	000e9110 	.word	0x000e9110

000d91bc <mbedtls_oid_get_extended_key_usage>:
    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     "id-kp-OCSPSigning",     "OCSP Signing" },
    { NULL, 0, NULL, NULL },
};

FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
   d91bc:	b570      	push	{r4, r5, r6, lr}
   d91be:	460e      	mov	r6, r1
    { ADD_LEN( MBEDTLS_OID_TIME_STAMPING ),    "id-kp-timeStamping",    "Time Stamping" },
    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     "id-kp-OCSPSigning",     "OCSP Signing" },
    { NULL, 0, NULL, NULL },
};

FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
   d91c0:	4605      	mov	r5, r0
   d91c2:	b160      	cbz	r0, d91de <mbedtls_oid_get_extended_key_usage+0x22>
   d91c4:	4c09      	ldr	r4, [pc, #36]	; (d91ec <mbedtls_oid_get_extended_key_usage+0x30>)
   d91c6:	6820      	ldr	r0, [r4, #0]
   d91c8:	b148      	cbz	r0, d91de <mbedtls_oid_get_extended_key_usage+0x22>
   d91ca:	6862      	ldr	r2, [r4, #4]
   d91cc:	686b      	ldr	r3, [r5, #4]
   d91ce:	429a      	cmp	r2, r3
   d91d0:	d103      	bne.n	d91da <mbedtls_oid_get_extended_key_usage+0x1e>
   d91d2:	68a9      	ldr	r1, [r5, #8]
   d91d4:	f00d feac 	bl	e6f30 <memcmp>
   d91d8:	b120      	cbz	r0, d91e4 <mbedtls_oid_get_extended_key_usage+0x28>
   d91da:	3410      	adds	r4, #16
   d91dc:	e7f3      	b.n	d91c6 <mbedtls_oid_get_extended_key_usage+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
   d91de:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d91e2:	bd70      	pop	{r4, r5, r6, pc}
   d91e4:	68e3      	ldr	r3, [r4, #12]
   d91e6:	6033      	str	r3, [r6, #0]
   d91e8:	bd70      	pop	{r4, r5, r6, pc}
   d91ea:	bf00      	nop
   d91ec:	000e8508 	.word	0x000e8508

000d91f0 <mbedtls_oid_get_sig_alg_desc>:
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
   d91f0:	b510      	push	{r4, lr}
   d91f2:	460c      	mov	r4, r1
   d91f4:	f7ff ff98 	bl	d9128 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>
   d91f8:	b118      	cbz	r0, d9202 <mbedtls_oid_get_sig_alg_desc+0x12>
   d91fa:	68c3      	ldr	r3, [r0, #12]
   d91fc:	6023      	str	r3, [r4, #0]
   d91fe:	2000      	movs	r0, #0
   d9200:	bd10      	pop	{r4, pc}
   d9202:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9206:	bd10      	pop	{r4, pc}

000d9208 <mbedtls_oid_get_sig_alg>:
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
   d9208:	b538      	push	{r3, r4, r5, lr}
   d920a:	460d      	mov	r5, r1
   d920c:	4614      	mov	r4, r2
   d920e:	f7ff ff8b 	bl	d9128 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>
   d9212:	b128      	cbz	r0, d9220 <mbedtls_oid_get_sig_alg+0x18>
   d9214:	7c03      	ldrb	r3, [r0, #16]
   d9216:	702b      	strb	r3, [r5, #0]
   d9218:	7c43      	ldrb	r3, [r0, #17]
   d921a:	7023      	strb	r3, [r4, #0]
   d921c:	2000      	movs	r0, #0
   d921e:	bd38      	pop	{r3, r4, r5, pc}
   d9220:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9224:	bd38      	pop	{r3, r4, r5, pc}
	...

000d9228 <mbedtls_oid_get_pk_alg>:
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
   d9228:	b570      	push	{r4, r5, r6, lr}
   d922a:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
   d922c:	4605      	mov	r5, r0
   d922e:	b160      	cbz	r0, d924a <mbedtls_oid_get_pk_alg+0x22>
   d9230:	4c09      	ldr	r4, [pc, #36]	; (d9258 <mbedtls_oid_get_pk_alg+0x30>)
   d9232:	6820      	ldr	r0, [r4, #0]
   d9234:	b148      	cbz	r0, d924a <mbedtls_oid_get_pk_alg+0x22>
   d9236:	6862      	ldr	r2, [r4, #4]
   d9238:	686b      	ldr	r3, [r5, #4]
   d923a:	429a      	cmp	r2, r3
   d923c:	d103      	bne.n	d9246 <mbedtls_oid_get_pk_alg+0x1e>
   d923e:	68a9      	ldr	r1, [r5, #8]
   d9240:	f00d fe76 	bl	e6f30 <memcmp>
   d9244:	b120      	cbz	r0, d9250 <mbedtls_oid_get_pk_alg+0x28>
   d9246:	3414      	adds	r4, #20
   d9248:	e7f3      	b.n	d9232 <mbedtls_oid_get_pk_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
   d924a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d924e:	bd70      	pop	{r4, r5, r6, pc}
   d9250:	7c23      	ldrb	r3, [r4, #16]
   d9252:	7033      	strb	r3, [r6, #0]
   d9254:	bd70      	pop	{r4, r5, r6, pc}
   d9256:	bf00      	nop
   d9258:	000e8578 	.word	0x000e8578

000d925c <mbedtls_oid_get_ec_grp>:
        MBEDTLS_ECP_DP_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
   d925c:	b570      	push	{r4, r5, r6, lr}
   d925e:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_ECP_DP_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
   d9260:	4605      	mov	r5, r0
   d9262:	b160      	cbz	r0, d927e <mbedtls_oid_get_ec_grp+0x22>
   d9264:	4c09      	ldr	r4, [pc, #36]	; (d928c <mbedtls_oid_get_ec_grp+0x30>)
   d9266:	6820      	ldr	r0, [r4, #0]
   d9268:	b148      	cbz	r0, d927e <mbedtls_oid_get_ec_grp+0x22>
   d926a:	6862      	ldr	r2, [r4, #4]
   d926c:	686b      	ldr	r3, [r5, #4]
   d926e:	429a      	cmp	r2, r3
   d9270:	d103      	bne.n	d927a <mbedtls_oid_get_ec_grp+0x1e>
   d9272:	68a9      	ldr	r1, [r5, #8]
   d9274:	f00d fe5c 	bl	e6f30 <memcmp>
   d9278:	b120      	cbz	r0, d9284 <mbedtls_oid_get_ec_grp+0x28>
   d927a:	3414      	adds	r4, #20
   d927c:	e7f3      	b.n	d9266 <mbedtls_oid_get_ec_grp+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
   d927e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9282:	bd70      	pop	{r4, r5, r6, pc}
   d9284:	7c23      	ldrb	r3, [r4, #16]
   d9286:	7033      	strb	r3, [r6, #0]
   d9288:	bd70      	pop	{r4, r5, r6, pc}
   d928a:	bf00      	nop
   d928c:	000e8604 	.word	0x000e8604

000d9290 <mbedtls_oid_get_cipher_alg>:
        MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
   d9290:	b570      	push	{r4, r5, r6, lr}
   d9292:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
   d9294:	4605      	mov	r5, r0
   d9296:	b160      	cbz	r0, d92b2 <mbedtls_oid_get_cipher_alg+0x22>
   d9298:	4c09      	ldr	r4, [pc, #36]	; (d92c0 <mbedtls_oid_get_cipher_alg+0x30>)
   d929a:	6820      	ldr	r0, [r4, #0]
   d929c:	b148      	cbz	r0, d92b2 <mbedtls_oid_get_cipher_alg+0x22>
   d929e:	6862      	ldr	r2, [r4, #4]
   d92a0:	686b      	ldr	r3, [r5, #4]
   d92a2:	429a      	cmp	r2, r3
   d92a4:	d103      	bne.n	d92ae <mbedtls_oid_get_cipher_alg+0x1e>
   d92a6:	68a9      	ldr	r1, [r5, #8]
   d92a8:	f00d fe42 	bl	e6f30 <memcmp>
   d92ac:	b120      	cbz	r0, d92b8 <mbedtls_oid_get_cipher_alg+0x28>
   d92ae:	3414      	adds	r4, #20
   d92b0:	e7f3      	b.n	d929a <mbedtls_oid_get_cipher_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
   d92b2:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d92b6:	bd70      	pop	{r4, r5, r6, pc}
   d92b8:	7c23      	ldrb	r3, [r4, #16]
   d92ba:	7033      	strb	r3, [r6, #0]
   d92bc:	bd70      	pop	{r4, r5, r6, pc}
   d92be:	bf00      	nop
   d92c0:	000e85c8 	.word	0x000e85c8

000d92c4 <mbedtls_oid_get_md_alg>:
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
   d92c4:	b570      	push	{r4, r5, r6, lr}
   d92c6:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
   d92c8:	4605      	mov	r5, r0
   d92ca:	b160      	cbz	r0, d92e6 <mbedtls_oid_get_md_alg+0x22>
   d92cc:	4c09      	ldr	r4, [pc, #36]	; (d92f4 <mbedtls_oid_get_md_alg+0x30>)
   d92ce:	6820      	ldr	r0, [r4, #0]
   d92d0:	b148      	cbz	r0, d92e6 <mbedtls_oid_get_md_alg+0x22>
   d92d2:	6862      	ldr	r2, [r4, #4]
   d92d4:	686b      	ldr	r3, [r5, #4]
   d92d6:	429a      	cmp	r2, r3
   d92d8:	d103      	bne.n	d92e2 <mbedtls_oid_get_md_alg+0x1e>
   d92da:	68a9      	ldr	r1, [r5, #8]
   d92dc:	f00d fe28 	bl	e6f30 <memcmp>
   d92e0:	b120      	cbz	r0, d92ec <mbedtls_oid_get_md_alg+0x28>
   d92e2:	3414      	adds	r4, #20
   d92e4:	e7f3      	b.n	d92ce <mbedtls_oid_get_md_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
   d92e6:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d92ea:	bd70      	pop	{r4, r5, r6, pc}
   d92ec:	7c23      	ldrb	r3, [r4, #16]
   d92ee:	7033      	strb	r3, [r6, #0]
   d92f0:	bd70      	pop	{r4, r5, r6, pc}
   d92f2:	bf00      	nop
   d92f4:	000e8f1c 	.word	0x000e8f1c

000d92f8 <mbedtls_oid_get_oid_by_md>:
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
   d92f8:	b530      	push	{r4, r5, lr}
   d92fa:	4b08      	ldr	r3, [pc, #32]	; (d931c <mbedtls_oid_get_oid_by_md+0x24>)
   d92fc:	681c      	ldr	r4, [r3, #0]
   d92fe:	b14c      	cbz	r4, d9314 <mbedtls_oid_get_oid_by_md+0x1c>
   d9300:	7c1d      	ldrb	r5, [r3, #16]
   d9302:	4285      	cmp	r5, r0
   d9304:	d104      	bne.n	d9310 <mbedtls_oid_get_oid_by_md+0x18>
   d9306:	600c      	str	r4, [r1, #0]
   d9308:	685b      	ldr	r3, [r3, #4]
   d930a:	6013      	str	r3, [r2, #0]
   d930c:	2000      	movs	r0, #0
   d930e:	bd30      	pop	{r4, r5, pc}
   d9310:	3314      	adds	r3, #20
   d9312:	e7f3      	b.n	d92fc <mbedtls_oid_get_oid_by_md+0x4>
   d9314:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9318:	bd30      	pop	{r4, r5, pc}
   d931a:	bf00      	nop
   d931c:	000e8f1c 	.word	0x000e8f1c

000d9320 <mbedtls_oid_get_md_hmac>:
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
   d9320:	b570      	push	{r4, r5, r6, lr}
   d9322:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
   d9324:	4605      	mov	r5, r0
   d9326:	b160      	cbz	r0, d9342 <mbedtls_oid_get_md_hmac+0x22>
   d9328:	4c09      	ldr	r4, [pc, #36]	; (d9350 <mbedtls_oid_get_md_hmac+0x30>)
   d932a:	6820      	ldr	r0, [r4, #0]
   d932c:	b148      	cbz	r0, d9342 <mbedtls_oid_get_md_hmac+0x22>
   d932e:	6862      	ldr	r2, [r4, #4]
   d9330:	686b      	ldr	r3, [r5, #4]
   d9332:	429a      	cmp	r2, r3
   d9334:	d103      	bne.n	d933e <mbedtls_oid_get_md_hmac+0x1e>
   d9336:	68a9      	ldr	r1, [r5, #8]
   d9338:	f00d fdfa 	bl	e6f30 <memcmp>
   d933c:	b120      	cbz	r0, d9348 <mbedtls_oid_get_md_hmac+0x28>
   d933e:	3414      	adds	r4, #20
   d9340:	e7f3      	b.n	d932a <mbedtls_oid_get_md_hmac+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
   d9342:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9346:	bd70      	pop	{r4, r5, r6, pc}
   d9348:	7c23      	ldrb	r3, [r4, #16]
   d934a:	7033      	strb	r3, [r6, #0]
   d934c:	bd70      	pop	{r4, r5, r6, pc}
   d934e:	bf00      	nop
   d9350:	000e9098 	.word	0x000e9098

000d9354 <mbedtls_oid_get_pkcs12_pbe_alg>:
        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
   d9354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9356:	460f      	mov	r7, r1
   d9358:	4616      	mov	r6, r2
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
   d935a:	4605      	mov	r5, r0
   d935c:	b160      	cbz	r0, d9378 <mbedtls_oid_get_pkcs12_pbe_alg+0x24>
   d935e:	4c0a      	ldr	r4, [pc, #40]	; (d9388 <mbedtls_oid_get_pkcs12_pbe_alg+0x34>)
   d9360:	6820      	ldr	r0, [r4, #0]
   d9362:	b148      	cbz	r0, d9378 <mbedtls_oid_get_pkcs12_pbe_alg+0x24>
   d9364:	6862      	ldr	r2, [r4, #4]
   d9366:	686b      	ldr	r3, [r5, #4]
   d9368:	429a      	cmp	r2, r3
   d936a:	d103      	bne.n	d9374 <mbedtls_oid_get_pkcs12_pbe_alg+0x20>
   d936c:	68a9      	ldr	r1, [r5, #8]
   d936e:	f00d fddf 	bl	e6f30 <memcmp>
   d9372:	b120      	cbz	r0, d937e <mbedtls_oid_get_pkcs12_pbe_alg+0x2a>
   d9374:	3414      	adds	r4, #20
   d9376:	e7f3      	b.n	d9360 <mbedtls_oid_get_pkcs12_pbe_alg+0xc>
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
   d9378:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d937c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d937e:	7c23      	ldrb	r3, [r4, #16]
   d9380:	703b      	strb	r3, [r7, #0]
   d9382:	7c63      	ldrb	r3, [r4, #17]
   d9384:	7033      	strb	r3, [r6, #0]
   d9386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d9388:	000e8ee0 	.word	0x000e8ee0

000d938c <mbedtls_sha1_init>:

void mbedtls_sha1_init( mbedtls_sha1_context *ctx )
{
    SHA1_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha1_context ) );
   d938c:	225c      	movs	r2, #92	; 0x5c
   d938e:	2100      	movs	r1, #0
   d9390:	f00d be03 	b.w	e6f9a <memset>

000d9394 <mbedtls_sha1_free>:
}

void mbedtls_sha1_free( mbedtls_sha1_context *ctx )
{
    if( ctx == NULL )
   d9394:	b110      	cbz	r0, d939c <mbedtls_sha1_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha1_context ) );
   d9396:	215c      	movs	r1, #92	; 0x5c
   d9398:	f001 b8a2 	b.w	da4e0 <mbedtls_platform_zeroize>
   d939c:	4770      	bx	lr

000d939e <mbedtls_sha1_clone>:
}

void mbedtls_sha1_clone( mbedtls_sha1_context *dst,
                         const mbedtls_sha1_context *src )
{
   d939e:	b508      	push	{r3, lr}
    SHA1_VALIDATE( dst != NULL );
    SHA1_VALIDATE( src != NULL );

    *dst = *src;
   d93a0:	225c      	movs	r2, #92	; 0x5c
   d93a2:	f00d fdd4 	bl	e6f4e <memcpy>
   d93a6:	bd08      	pop	{r3, pc}

000d93a8 <mbedtls_sha1_starts_ret>:

/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
   d93a8:	4603      	mov	r3, r0
    SHA1_VALIDATE_RET( ctx != NULL );

    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
   d93aa:	4a0a      	ldr	r2, [pc, #40]	; (d93d4 <mbedtls_sha1_starts_ret+0x2c>)
   d93ac:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
   d93ae:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
   d93b2:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
   d93b4:	f102 4229 	add.w	r2, r2, #2835349504	; 0xa9000000
   d93b8:	f5a2 1296 	sub.w	r2, r2, #1228800	; 0x12c000
   d93bc:	f6a2 628b 	subw	r2, r2, #3723	; 0xe8b
   d93c0:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
   d93c2:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
    SHA1_VALIDATE_RET( ctx != NULL );

    ctx->total[0] = 0;
   d93c6:	2000      	movs	r0, #0
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
    ctx->state[1] = 0xEFCDAB89;
    ctx->state[2] = 0x98BADCFE;
    ctx->state[3] = 0x10325476;
   d93c8:	615a      	str	r2, [r3, #20]
    ctx->state[4] = 0xC3D2E1F0;
   d93ca:	4a03      	ldr	r2, [pc, #12]	; (d93d8 <mbedtls_sha1_starts_ret+0x30>)
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
    SHA1_VALIDATE_RET( ctx != NULL );

    ctx->total[0] = 0;
   d93cc:	6018      	str	r0, [r3, #0]
    ctx->total[1] = 0;
   d93ce:	6058      	str	r0, [r3, #4]

    ctx->state[0] = 0x67452301;
    ctx->state[1] = 0xEFCDAB89;
    ctx->state[2] = 0x98BADCFE;
    ctx->state[3] = 0x10325476;
    ctx->state[4] = 0xC3D2E1F0;
   d93d0:	619a      	str	r2, [r3, #24]

    return( 0 );
}
   d93d2:	4770      	bx	lr
   d93d4:	67452301 	.word	0x67452301
   d93d8:	c3d2e1f0 	.word	0xc3d2e1f0

000d93dc <mbedtls_internal_sha1_process>:
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
   d93dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t temp, W[16], A, B, C, D, E;

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( (const unsigned char *)data != NULL );

    GET_UINT32_BE( W[ 0], data,  0 );
   d93e0:	784b      	ldrb	r3, [r1, #1]
   d93e2:	780c      	ldrb	r4, [r1, #0]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
   d93e4:	f891 9008 	ldrb.w	r9, [r1, #8]
    GET_UINT32_BE( W[ 3], data, 12 );
   d93e8:	f891 a00c 	ldrb.w	sl, [r1, #12]
    GET_UINT32_BE( W[ 4], data, 16 );
   d93ec:	7c0a      	ldrb	r2, [r1, #16]
    GET_UINT32_BE( W[ 5], data, 20 );
   d93ee:	f891 8014 	ldrb.w	r8, [r1, #20]
    GET_UINT32_BE( W[ 6], data, 24 );
   d93f2:	f891 c018 	ldrb.w	ip, [r1, #24]
    uint32_t temp, W[16], A, B, C, D, E;

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( (const unsigned char *)data != NULL );

    GET_UINT32_BE( W[ 0], data,  0 );
   d93f6:	041b      	lsls	r3, r3, #16
   d93f8:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   d93fc:	78cc      	ldrb	r4, [r1, #3]
   d93fe:	4323      	orrs	r3, r4
   d9400:	788c      	ldrb	r4, [r1, #2]
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
   d9402:	b097      	sub	sp, #92	; 0x5c
    uint32_t temp, W[16], A, B, C, D, E;

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( (const unsigned char *)data != NULL );

    GET_UINT32_BE( W[ 0], data,  0 );
   d9404:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   d9408:	9306      	str	r3, [sp, #24]
    GET_UINT32_BE( W[ 1], data,  4 );
   d940a:	794b      	ldrb	r3, [r1, #5]
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
   d940c:	9001      	str	r0, [sp, #4]

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( (const unsigned char *)data != NULL );

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
   d940e:	7908      	ldrb	r0, [r1, #4]
   d9410:	041b      	lsls	r3, r3, #16
   d9412:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   d9416:	79c8      	ldrb	r0, [r1, #7]
   d9418:	4303      	orrs	r3, r0
   d941a:	7988      	ldrb	r0, [r1, #6]
   d941c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   d9420:	9307      	str	r3, [sp, #28]
    GET_UINT32_BE( W[ 2], data,  8 );
   d9422:	7a4b      	ldrb	r3, [r1, #9]
   d9424:	041b      	lsls	r3, r3, #16
   d9426:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
   d942a:	f891 900b 	ldrb.w	r9, [r1, #11]
   d942e:	ea43 0309 	orr.w	r3, r3, r9
   d9432:	f891 900a 	ldrb.w	r9, [r1, #10]
   d9436:	ea43 2909 	orr.w	r9, r3, r9, lsl #8
    GET_UINT32_BE( W[ 3], data, 12 );
   d943a:	7b4b      	ldrb	r3, [r1, #13]
   d943c:	041b      	lsls	r3, r3, #16
   d943e:	ea43 630a 	orr.w	r3, r3, sl, lsl #24
   d9442:	f891 a00f 	ldrb.w	sl, [r1, #15]
   d9446:	ea43 030a 	orr.w	r3, r3, sl
   d944a:	f891 a00e 	ldrb.w	sl, [r1, #14]
   d944e:	ea43 2a0a 	orr.w	sl, r3, sl, lsl #8
    GET_UINT32_BE( W[ 4], data, 16 );
   d9452:	7c4b      	ldrb	r3, [r1, #17]
   d9454:	041b      	lsls	r3, r3, #16
   d9456:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   d945a:	7cca      	ldrb	r2, [r1, #19]
   d945c:	4313      	orrs	r3, r2
   d945e:	7c8a      	ldrb	r2, [r1, #18]
   d9460:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d9464:	930e      	str	r3, [sp, #56]	; 0x38
    GET_UINT32_BE( W[ 5], data, 20 );
   d9466:	7d4b      	ldrb	r3, [r1, #21]
   d9468:	041b      	lsls	r3, r3, #16
   d946a:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
   d946e:	f891 8017 	ldrb.w	r8, [r1, #23]
   d9472:	ea43 0308 	orr.w	r3, r3, r8
   d9476:	f891 8016 	ldrb.w	r8, [r1, #22]
   d947a:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
   d947e:	930f      	str	r3, [sp, #60]	; 0x3c
    GET_UINT32_BE( W[ 6], data, 24 );
   d9480:	7e4b      	ldrb	r3, [r1, #25]
   d9482:	041b      	lsls	r3, r3, #16
   d9484:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   d9488:	f891 c01b 	ldrb.w	ip, [r1, #27]
    GET_UINT32_BE( W[ 7], data, 28 );
   d948c:	f891 e01c 	ldrb.w	lr, [r1, #28]
    GET_UINT32_BE( W[ 8], data, 32 );
   d9490:	f891 6020 	ldrb.w	r6, [r1, #32]
    GET_UINT32_BE( W[ 9], data, 36 );
   d9494:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
    GET_UINT32_BE( W[10], data, 40 );
   d9498:	f891 0028 	ldrb.w	r0, [r1, #40]	; 0x28
    GET_UINT32_BE( W[11], data, 44 );
    GET_UINT32_BE( W[12], data, 48 );
   d949c:	f891 4030 	ldrb.w	r4, [r1, #48]	; 0x30
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
   d94a0:	ea43 030c 	orr.w	r3, r3, ip
   d94a4:	f891 c01a 	ldrb.w	ip, [r1, #26]
   d94a8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   d94ac:	9310      	str	r3, [sp, #64]	; 0x40
    GET_UINT32_BE( W[ 7], data, 28 );
   d94ae:	7f4b      	ldrb	r3, [r1, #29]
   d94b0:	041b      	lsls	r3, r3, #16
   d94b2:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
   d94b6:	f891 e01f 	ldrb.w	lr, [r1, #31]
   d94ba:	ea43 030e 	orr.w	r3, r3, lr
   d94be:	f891 e01e 	ldrb.w	lr, [r1, #30]
   d94c2:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
   d94c6:	9313      	str	r3, [sp, #76]	; 0x4c
    GET_UINT32_BE( W[ 8], data, 32 );
   d94c8:	f891 3021 	ldrb.w	r3, [r1, #33]	; 0x21
   d94cc:	041b      	lsls	r3, r3, #16
   d94ce:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   d94d2:	f891 6023 	ldrb.w	r6, [r1, #35]	; 0x23
   d94d6:	4333      	orrs	r3, r6
   d94d8:	f891 6022 	ldrb.w	r6, [r1, #34]	; 0x22
   d94dc:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
   d94e0:	9309      	str	r3, [sp, #36]	; 0x24
    GET_UINT32_BE( W[ 9], data, 36 );
   d94e2:	f891 3025 	ldrb.w	r3, [r1, #37]	; 0x25
   d94e6:	041b      	lsls	r3, r3, #16
   d94e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   d94ec:	f891 2027 	ldrb.w	r2, [r1, #39]	; 0x27
   d94f0:	4313      	orrs	r3, r2
   d94f2:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
   d94f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d94fa:	930a      	str	r3, [sp, #40]	; 0x28
    GET_UINT32_BE( W[10], data, 40 );
   d94fc:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
    GET_UINT32_BE( W[11], data, 44 );
   d9500:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
    GET_UINT32_BE( W[ 7], data, 28 );
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
    GET_UINT32_BE( W[10], data, 40 );
   d9504:	041b      	lsls	r3, r3, #16
   d9506:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   d950a:	f891 002b 	ldrb.w	r0, [r1, #43]	; 0x2b
   d950e:	4303      	orrs	r3, r0
   d9510:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
   d9514:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   d9518:	930b      	str	r3, [sp, #44]	; 0x2c
    GET_UINT32_BE( W[11], data, 44 );
   d951a:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
   d951e:	041b      	lsls	r3, r3, #16
   d9520:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   d9524:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
   d9528:	4313      	orrs	r3, r2
   d952a:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
   d952e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d9532:	930c      	str	r3, [sp, #48]	; 0x30
    GET_UINT32_BE( W[12], data, 48 );
   d9534:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
   d9538:	041b      	lsls	r3, r3, #16
   d953a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   d953e:	f891 4033 	ldrb.w	r4, [r1, #51]	; 0x33
   d9542:	4323      	orrs	r3, r4
   d9544:	f891 4032 	ldrb.w	r4, [r1, #50]	; 0x32
   d9548:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   d954c:	930d      	str	r3, [sp, #52]	; 0x34
    GET_UINT32_BE( W[13], data, 52 );
   d954e:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
   d9552:	f891 2034 	ldrb.w	r2, [r1, #52]	; 0x34
   d9556:	041b      	lsls	r3, r3, #16
   d9558:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   d955c:	f891 2037 	ldrb.w	r2, [r1, #55]	; 0x37
   d9560:	4313      	orrs	r3, r2
   d9562:	f891 2036 	ldrb.w	r2, [r1, #54]	; 0x36
   d9566:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d956a:	9302      	str	r3, [sp, #8]
    GET_UINT32_BE( W[14], data, 56 );
   d956c:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
   d9570:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
   d9574:	041b      	lsls	r3, r3, #16
   d9576:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   d957a:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
   d957e:	4313      	orrs	r3, r2
   d9580:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
   d9584:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d9588:	9303      	str	r3, [sp, #12]
    GET_UINT32_BE( W[15], data, 60 );
   d958a:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
   d958e:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
   d9592:	041b      	lsls	r3, r3, #16
   d9594:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   d9598:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
   d959c:	f891 103e 	ldrb.w	r1, [r1, #62]	; 0x3e
   d95a0:	4313      	orrs	r3, r2
   d95a2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   d95a6:	9304      	str	r3, [sp, #16]
    {                                                           \
        (e) += S((a),5) + F((b),(c),(d)) + K + (x);             \
        (b) = S((b),30);                                        \
    } while( 0 )

    A = ctx->state[0];
   d95a8:	9b01      	ldr	r3, [sp, #4]
   d95aa:	689b      	ldr	r3, [r3, #8]
   d95ac:	9311      	str	r3, [sp, #68]	; 0x44
    B = ctx->state[1];
   d95ae:	9b01      	ldr	r3, [sp, #4]
   d95b0:	68db      	ldr	r3, [r3, #12]
   d95b2:	9314      	str	r3, [sp, #80]	; 0x50
    C = ctx->state[2];
   d95b4:	9b01      	ldr	r3, [sp, #4]
   d95b6:	691b      	ldr	r3, [r3, #16]
   d95b8:	9305      	str	r3, [sp, #20]
    D = ctx->state[3];
   d95ba:	9b01      	ldr	r3, [sp, #4]
   d95bc:	695b      	ldr	r3, [r3, #20]
   d95be:	9312      	str	r3, [sp, #72]	; 0x48
    E = ctx->state[4];
   d95c0:	9b01      	ldr	r3, [sp, #4]

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
   d95c2:	9a12      	ldr	r2, [sp, #72]	; 0x48

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
   d95c4:	699b      	ldr	r3, [r3, #24]
   d95c6:	9315      	str	r3, [sp, #84]	; 0x54

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
   d95c8:	9b05      	ldr	r3, [sp, #20]
   d95ca:	ea83 0002 	eor.w	r0, r3, r2
   d95ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d95d0:	9911      	ldr	r1, [sp, #68]	; 0x44
   d95d2:	4018      	ands	r0, r3
   d95d4:	4050      	eors	r0, r2
   d95d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d95d8:	4ade      	ldr	r2, [pc, #888]	; (d9954 <mbedtls_internal_sha1_process+0x578>)
   d95da:	4413      	add	r3, r2
   d95dc:	eb03 63f1 	add.w	r3, r3, r1, ror #27
   d95e0:	4418      	add	r0, r3
   d95e2:	9b06      	ldr	r3, [sp, #24]
   d95e4:	4418      	add	r0, r3
   d95e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d95e8:	ea4f 05b3 	mov.w	r5, r3, ror #2
    P( E, A, B, C, D, W[1]  );
   d95ec:	9b05      	ldr	r3, [sp, #20]
   d95ee:	ea83 0c05 	eor.w	ip, r3, r5
   d95f2:	9b05      	ldr	r3, [sp, #20]
   d95f4:	ea0c 0c01 	and.w	ip, ip, r1
   d95f8:	ea8c 0c03 	eor.w	ip, ip, r3
   d95fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d95fe:	4413      	add	r3, r2
   d9600:	449c      	add	ip, r3
   d9602:	9b07      	ldr	r3, [sp, #28]
   d9604:	ea4f 04b1 	mov.w	r4, r1, ror #2
   d9608:	449c      	add	ip, r3
    P( D, E, A, B, C, W[2]  );
   d960a:	9b05      	ldr	r3, [sp, #20]
   d960c:	ea85 0804 	eor.w	r8, r5, r4

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
   d9610:	eb0c 6cf0 	add.w	ip, ip, r0, ror #27
    P( D, E, A, B, C, W[2]  );
   d9614:	ea08 0800 	and.w	r8, r8, r0
   d9618:	4413      	add	r3, r2
   d961a:	ea4f 00b0 	mov.w	r0, r0, ror #2
   d961e:	444b      	add	r3, r9
    P( C, D, E, A, B, W[3]  );
   d9620:	ea84 0100 	eor.w	r1, r4, r0
#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
   d9624:	ea88 0805 	eor.w	r8, r8, r5
   d9628:	4498      	add	r8, r3
    P( C, D, E, A, B, W[3]  );
   d962a:	ea01 010c 	and.w	r1, r1, ip
   d962e:	18ab      	adds	r3, r5, r2
#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
   d9630:	eb08 68fc 	add.w	r8, r8, ip, ror #27
    P( C, D, E, A, B, W[3]  );
   d9634:	4061      	eors	r1, r4
   d9636:	ea4f 0cbc 	mov.w	ip, ip, ror #2
   d963a:	4453      	add	r3, sl
    P( B, C, D, E, A, W[4]  );
   d963c:	18a7      	adds	r7, r4, r2
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
   d963e:	440b      	add	r3, r1
    P( B, C, D, E, A, W[4]  );
   d9640:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   d9642:	ea80 010c 	eor.w	r1, r0, ip
   d9646:	ea01 0108 	and.w	r1, r1, r8
   d964a:	4041      	eors	r1, r0
   d964c:	4427      	add	r7, r4
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
   d964e:	eb03 63f8 	add.w	r3, r3, r8, ror #27
    P( B, C, D, E, A, W[4]  );
   d9652:	440f      	add	r7, r1
   d9654:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( A, B, C, D, E, W[5]  );
   d9658:	990f      	ldr	r1, [sp, #60]	; 0x3c
   d965a:	ea8c 0408 	eor.w	r4, ip, r8
   d965e:	401c      	ands	r4, r3
   d9660:	4411      	add	r1, r2
   d9662:	ea84 040c 	eor.w	r4, r4, ip
   d9666:	4401      	add	r1, r0

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
   d9668:	eb07 67f3 	add.w	r7, r7, r3, ror #27
    P( A, B, C, D, E, W[5]  );
   d966c:	4421      	add	r1, r4
   d966e:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( E, A, B, C, D, W[6]  );
   d9672:	9c10      	ldr	r4, [sp, #64]	; 0x40
   d9674:	ea88 0003 	eor.w	r0, r8, r3
   d9678:	18a6      	adds	r6, r4, r2
   d967a:	4038      	ands	r0, r7
    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
   d967c:	eb01 61f7 	add.w	r1, r1, r7, ror #27
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
   d9680:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
   d9682:	ea4f 07b7 	mov.w	r7, r7, ror #2
   d9686:	ea80 0008 	eor.w	r0, r0, r8
   d968a:	4466      	add	r6, ip
   d968c:	4406      	add	r6, r0
    P( D, E, A, B, C, W[7]  );
   d968e:	ea83 0007 	eor.w	r0, r3, r7
   d9692:	eb04 0e02 	add.w	lr, r4, r2
   d9696:	4008      	ands	r0, r1
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
   d9698:	eb06 66f1 	add.w	r6, r6, r1, ror #27
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
   d969c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
   d969e:	ea4f 01b1 	mov.w	r1, r1, ror #2
   d96a2:	4058      	eors	r0, r3
   d96a4:	44c6      	add	lr, r8
   d96a6:	4486      	add	lr, r0
    P( C, D, E, A, B, W[8]  );
   d96a8:	ea87 0001 	eor.w	r0, r7, r1
   d96ac:	18a5      	adds	r5, r4, r2
   d96ae:	4030      	ands	r0, r6
   d96b0:	4078      	eors	r0, r7
   d96b2:	441d      	add	r5, r3
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
   d96b4:	eb0e 6ef6 	add.w	lr, lr, r6, ror #27
    P( C, D, E, A, B, W[8]  );
   d96b8:	4405      	add	r5, r0
   d96ba:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( B, C, D, E, A, W[9]  );
   d96be:	980a      	ldr	r0, [sp, #40]	; 0x28
   d96c0:	ea81 0306 	eor.w	r3, r1, r6
   d96c4:	1884      	adds	r4, r0, r2
   d96c6:	ea03 030e 	and.w	r3, r3, lr
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
   d96ca:	eb05 65fe 	add.w	r5, r5, lr, ror #27
    P( B, C, D, E, A, W[9]  );
   d96ce:	404b      	eors	r3, r1
   d96d0:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( A, B, C, D, E, W[10] );
   d96d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
   d96d6:	443c      	add	r4, r7
   d96d8:	441c      	add	r4, r3
    P( A, B, C, D, E, W[10] );
   d96da:	ea86 030e 	eor.w	r3, r6, lr
   d96de:	402b      	ands	r3, r5
   d96e0:	4410      	add	r0, r2
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
   d96e2:	eb04 64f5 	add.w	r4, r4, r5, ror #27
    P( A, B, C, D, E, W[10] );
   d96e6:	4073      	eors	r3, r6
   d96e8:	ea4f 05b5 	mov.w	r5, r5, ror #2
   d96ec:	4408      	add	r0, r1
    P( E, A, B, C, D, W[11] );
   d96ee:	990c      	ldr	r1, [sp, #48]	; 0x30
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
   d96f0:	4418      	add	r0, r3
    P( E, A, B, C, D, W[11] );
   d96f2:	ea8e 0305 	eor.w	r3, lr, r5
   d96f6:	eb01 0b02 	add.w	fp, r1, r2
   d96fa:	4023      	ands	r3, r4
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
   d96fc:	eb00 60f4 	add.w	r0, r0, r4, ror #27
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
   d9700:	990d      	ldr	r1, [sp, #52]	; 0x34
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
   d9702:	ea4f 04b4 	mov.w	r4, r4, ror #2
   d9706:	ea83 030e 	eor.w	r3, r3, lr
   d970a:	44b3      	add	fp, r6
   d970c:	449b      	add	fp, r3
    P( D, E, A, B, C, W[12] );
   d970e:	ea85 0304 	eor.w	r3, r5, r4
   d9712:	eb01 0802 	add.w	r8, r1, r2
   d9716:	4003      	ands	r3, r0
   d9718:	406b      	eors	r3, r5
   d971a:	44f0      	add	r8, lr
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
   d971c:	eb0b 6bf0 	add.w	fp, fp, r0, ror #27
    P( D, E, A, B, C, W[12] );
   d9720:	4498      	add	r8, r3
   d9722:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( C, D, E, A, B, W[13] );
   d9726:	9b02      	ldr	r3, [sp, #8]
   d9728:	ea84 0100 	eor.w	r1, r4, r0
   d972c:	ea01 010b 	and.w	r1, r1, fp
   d9730:	4413      	add	r3, r2
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
   d9732:	eb08 68fb 	add.w	r8, r8, fp, ror #27
    P( C, D, E, A, B, W[13] );
   d9736:	4061      	eors	r1, r4
   d9738:	ea4f 0bbb 	mov.w	fp, fp, ror #2
   d973c:	442b      	add	r3, r5
    P( B, C, D, E, A, W[14] );
   d973e:	9d03      	ldr	r5, [sp, #12]
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
   d9740:	440b      	add	r3, r1
    P( B, C, D, E, A, W[14] );
   d9742:	ea80 010b 	eor.w	r1, r0, fp
   d9746:	18af      	adds	r7, r5, r2
   d9748:	ea01 0108 	and.w	r1, r1, r8
   d974c:	4041      	eors	r1, r0
   d974e:	4427      	add	r7, r4
   d9750:	440f      	add	r7, r1
    P( A, B, C, D, E, W[15] );
   d9752:	9904      	ldr	r1, [sp, #16]
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
   d9754:	eb03 63f8 	add.w	r3, r3, r8, ror #27
    P( B, C, D, E, A, W[14] );
   d9758:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( A, B, C, D, E, W[15] );
   d975c:	ea8b 0408 	eor.w	r4, fp, r8
   d9760:	4411      	add	r1, r2
   d9762:	401c      	ands	r4, r3
   d9764:	4401      	add	r1, r0
    P( E, A, B, C, D, R(16) );
   d9766:	9806      	ldr	r0, [sp, #24]
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
   d9768:	ea84 040b 	eor.w	r4, r4, fp
   d976c:	4421      	add	r1, r4
    P( E, A, B, C, D, R(16) );
   d976e:	ea80 0409 	eor.w	r4, r0, r9
   d9772:	9809      	ldr	r0, [sp, #36]	; 0x24
   d9774:	4044      	eors	r4, r0
   d9776:	9802      	ldr	r0, [sp, #8]
   d9778:	4044      	eors	r4, r0
   d977a:	ea4f 70f4 	mov.w	r0, r4, ror #31
   d977e:	9006      	str	r0, [sp, #24]
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
   d9780:	eb07 67f3 	add.w	r7, r7, r3, ror #27
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
   d9784:	9c06      	ldr	r4, [sp, #24]
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
   d9786:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( E, A, B, C, D, R(16) );
   d978a:	ea88 0003 	eor.w	r0, r8, r3
   d978e:	eb04 0c02 	add.w	ip, r4, r2
   d9792:	4038      	ands	r0, r7
   d9794:	ea80 0008 	eor.w	r0, r0, r8
   d9798:	44dc      	add	ip, fp
   d979a:	4484      	add	ip, r0
    P( D, E, A, B, C, R(17) );
   d979c:	9807      	ldr	r0, [sp, #28]
   d979e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   d97a0:	ea80 000a 	eor.w	r0, r0, sl
   d97a4:	4060      	eors	r0, r4
   d97a6:	4068      	eors	r0, r5
   d97a8:	ea4f 70f0 	mov.w	r0, r0, ror #31
   d97ac:	9007      	str	r0, [sp, #28]
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
   d97ae:	eb01 61f7 	add.w	r1, r1, r7, ror #27
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
   d97b2:	9c07      	ldr	r4, [sp, #28]
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
   d97b4:	ea4f 07b7 	mov.w	r7, r7, ror #2
    P( D, E, A, B, C, R(17) );
   d97b8:	ea83 0007 	eor.w	r0, r3, r7
   d97bc:	eb04 0e02 	add.w	lr, r4, r2
   d97c0:	4008      	ands	r0, r1
   d97c2:	4058      	eors	r0, r3
   d97c4:	44c6      	add	lr, r8
   d97c6:	4486      	add	lr, r0
    P( C, D, E, A, B, R(18) );
   d97c8:	980e      	ldr	r0, [sp, #56]	; 0x38
   d97ca:	ea89 0900 	eor.w	r9, r9, r0
   d97ce:	980b      	ldr	r0, [sp, #44]	; 0x2c
   d97d0:	ea89 0900 	eor.w	r9, r9, r0
   d97d4:	9804      	ldr	r0, [sp, #16]
   d97d6:	ea89 0900 	eor.w	r9, r9, r0
   d97da:	ea4f 70f9 	mov.w	r0, r9, ror #31
   d97de:	9008      	str	r0, [sp, #32]
   d97e0:	9c08      	ldr	r4, [sp, #32]
   d97e2:	18a6      	adds	r6, r4, r2
   d97e4:	441e      	add	r6, r3
    P( B, C, D, E, A, R(19) );
   d97e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d97e8:	ea8a 0a03 	eor.w	sl, sl, r3
   d97ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
   d97ee:	eb0c 6cf1 	add.w	ip, ip, r1, ror #27
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
   d97f2:	ea8a 0a03 	eor.w	sl, sl, r3
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
   d97f6:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
   d97fa:	9b06      	ldr	r3, [sp, #24]
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
   d97fc:	ea87 0001 	eor.w	r0, r7, r1
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
   d9800:	eb0e 6efc 	add.w	lr, lr, ip, ror #27
    P( C, D, E, A, B, R(18) );
   d9804:	ea00 000c 	and.w	r0, r0, ip
    P( B, C, D, E, A, R(19) );
   d9808:	ea8a 0a03 	eor.w	sl, sl, r3
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
   d980c:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( B, C, D, E, A, R(19) );
   d9810:	ea4f 7afa 	mov.w	sl, sl, ror #31
   d9814:	ea81 030c 	eor.w	r3, r1, ip
   d9818:	ea03 030e 	and.w	r3, r3, lr
   d981c:	4452      	add	r2, sl
   d981e:	404b      	eors	r3, r1
   d9820:	443a      	add	r2, r7
   d9822:	189d      	adds	r5, r3, r2
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
   d9824:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d9826:	9a10      	ldr	r2, [sp, #64]	; 0x40
   d9828:	ea83 0902 	eor.w	r9, r3, r2
   d982c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(21) );
   d982e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
   d9830:	ea89 0903 	eor.w	r9, r9, r3
   d9834:	9b07      	ldr	r3, [sp, #28]
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
   d9836:	4078      	eors	r0, r7
   d9838:	4406      	add	r6, r0
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
   d983a:	4f47      	ldr	r7, [pc, #284]	; (d9958 <mbedtls_internal_sha1_process+0x57c>)
   d983c:	ea89 0903 	eor.w	r9, r9, r3
   d9840:	ea4f 79f9 	mov.w	r9, r9, ror #31
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
   d9844:	eb06 66fe 	add.w	r6, r6, lr, ror #27
    P( B, C, D, E, A, R(19) );
   d9848:	ea4f 0ebe 	mov.w	lr, lr, ror #2
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
   d984c:	ea8c 030e 	eor.w	r3, ip, lr
   d9850:	eb09 0007 	add.w	r0, r9, r7
   d9854:	4073      	eors	r3, r6
   d9856:	4408      	add	r0, r1
   d9858:	4418      	add	r0, r3
    P( E, A, B, C, D, R(21) );
   d985a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( D, E, A, B, C, R(22) );
   d985c:	9909      	ldr	r1, [sp, #36]	; 0x24

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
   d985e:	ea83 0802 	eor.w	r8, r3, r2
   d9862:	9b02      	ldr	r3, [sp, #8]
   d9864:	ea88 0803 	eor.w	r8, r8, r3
   d9868:	ea88 0804 	eor.w	r8, r8, r4
   d986c:	ea4f 78f8 	mov.w	r8, r8, ror #31
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
   d9870:	eb05 65f6 	add.w	r5, r5, r6, ror #27
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
   d9874:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( E, A, B, C, D, R(21) );
   d9878:	ea8e 0306 	eor.w	r3, lr, r6
   d987c:	eb08 0207 	add.w	r2, r8, r7
   d9880:	406b      	eors	r3, r5
   d9882:	4462      	add	r2, ip
   d9884:	441a      	add	r2, r3
    P( D, E, A, B, C, R(22) );
   d9886:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d9888:	ea83 0c01 	eor.w	ip, r3, r1
   d988c:	9b03      	ldr	r3, [sp, #12]
    P( C, D, E, A, B, R(23) );
   d988e:	990a      	ldr	r1, [sp, #40]	; 0x28
#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
   d9890:	ea8c 0c03 	eor.w	ip, ip, r3
   d9894:	ea8c 0c0a 	eor.w	ip, ip, sl
   d9898:	ea4f 7cfc 	mov.w	ip, ip, ror #31
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
   d989c:	eb00 60f5 	add.w	r0, r0, r5, ror #27
    P( E, A, B, C, D, R(21) );
   d98a0:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( D, E, A, B, C, R(22) );
   d98a4:	ea86 0305 	eor.w	r3, r6, r5
   d98a8:	eb0c 0407 	add.w	r4, ip, r7
   d98ac:	4043      	eors	r3, r0
   d98ae:	4474      	add	r4, lr
   d98b0:	441c      	add	r4, r3
    P( C, D, E, A, B, R(23) );
   d98b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d98b4:	ea83 0e01 	eor.w	lr, r3, r1
   d98b8:	9b04      	ldr	r3, [sp, #16]
   d98ba:	ea8e 0e03 	eor.w	lr, lr, r3
   d98be:	ea8e 0e09 	eor.w	lr, lr, r9
   d98c2:	ea4f 7efe 	mov.w	lr, lr, ror #31

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
   d98c6:	eb02 62f0 	add.w	r2, r2, r0, ror #27
    P( D, E, A, B, C, R(22) );
   d98ca:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( C, D, E, A, B, R(23) );
   d98ce:	ea85 0100 	eor.w	r1, r5, r0
   d98d2:	eb0e 0307 	add.w	r3, lr, r7
   d98d6:	4051      	eors	r1, r2
   d98d8:	4433      	add	r3, r6
   d98da:	440b      	add	r3, r1
    P( B, C, D, E, A, R(24) );
   d98dc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d98de:	9909      	ldr	r1, [sp, #36]	; 0x24
   d98e0:	404e      	eors	r6, r1
   d98e2:	9906      	ldr	r1, [sp, #24]
   d98e4:	404e      	eors	r6, r1
   d98e6:	ea86 0608 	eor.w	r6, r6, r8
   d98ea:	ea4f 71f6 	mov.w	r1, r6, ror #31
   d98ee:	9109      	str	r1, [sp, #36]	; 0x24
   d98f0:	9e09      	ldr	r6, [sp, #36]	; 0x24
#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
   d98f2:	eb04 64f2 	add.w	r4, r4, r2, ror #27
    P( C, D, E, A, B, R(23) );
   d98f6:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, R(24) );
   d98fa:	ea80 0102 	eor.w	r1, r0, r2
   d98fe:	eb06 0b07 	add.w	fp, r6, r7
   d9902:	4061      	eors	r1, r4
   d9904:	44ab      	add	fp, r5
   d9906:	448b      	add	fp, r1
    P( A, B, C, D, E, R(25) );
   d9908:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   d990a:	990a      	ldr	r1, [sp, #40]	; 0x28
   d990c:	4069      	eors	r1, r5
   d990e:	9d07      	ldr	r5, [sp, #28]
   d9910:	4069      	eors	r1, r5
   d9912:	ea81 010c 	eor.w	r1, r1, ip
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
   d9916:	eb03 63f4 	add.w	r3, r3, r4, ror #27
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
   d991a:	ea4f 71f1 	mov.w	r1, r1, ror #31

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
   d991e:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( A, B, C, D, E, R(25) );
   d9922:	910a      	str	r1, [sp, #40]	; 0x28
   d9924:	ea82 0504 	eor.w	r5, r2, r4
   d9928:	4439      	add	r1, r7
   d992a:	405d      	eors	r5, r3
   d992c:	4401      	add	r1, r0
   d992e:	4429      	add	r1, r5
    P( E, A, B, C, D, R(26) );
   d9930:	980b      	ldr	r0, [sp, #44]	; 0x2c
   d9932:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   d9934:	4068      	eors	r0, r5
   d9936:	9d08      	ldr	r5, [sp, #32]
   d9938:	4068      	eors	r0, r5
   d993a:	ea80 000e 	eor.w	r0, r0, lr

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
   d993e:	eb0b 6bf3 	add.w	fp, fp, r3, ror #27
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
   d9942:	ea4f 70f0 	mov.w	r0, r0, ror #31
    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
   d9946:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( E, A, B, C, D, R(26) );
   d994a:	900b      	str	r0, [sp, #44]	; 0x2c
   d994c:	ea84 0503 	eor.w	r5, r4, r3
   d9950:	e004      	b.n	d995c <mbedtls_internal_sha1_process+0x580>
   d9952:	bf00      	nop
   d9954:	5a827999 	.word	0x5a827999
   d9958:	6ed9eba1 	.word	0x6ed9eba1
   d995c:	4438      	add	r0, r7
   d995e:	ea85 050b 	eor.w	r5, r5, fp
   d9962:	4410      	add	r0, r2
   d9964:	4428      	add	r0, r5
    P( D, E, A, B, C, R(27) );
   d9966:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   d9968:	9d02      	ldr	r5, [sp, #8]
   d996a:	406a      	eors	r2, r5
   d996c:	ea82 020a 	eor.w	r2, r2, sl
   d9970:	4072      	eors	r2, r6
    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
   d9972:	eb01 61fb 	add.w	r1, r1, fp, ror #27
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
   d9976:	ea4f 72f2 	mov.w	r2, r2, ror #31
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
   d997a:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( D, E, A, B, C, R(27) );
   d997e:	920c      	str	r2, [sp, #48]	; 0x30
   d9980:	ea83 050b 	eor.w	r5, r3, fp
   d9984:	443a      	add	r2, r7
   d9986:	404d      	eors	r5, r1
   d9988:	4422      	add	r2, r4
   d998a:	442a      	add	r2, r5
    P( C, D, E, A, B, R(28) );
   d998c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   d998e:	9d03      	ldr	r5, [sp, #12]
   d9990:	406c      	eors	r4, r5
   d9992:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d9994:	ea84 0409 	eor.w	r4, r4, r9
   d9998:	406c      	eors	r4, r5
   d999a:	ea4f 74f4 	mov.w	r4, r4, ror #31
   d999e:	940d      	str	r4, [sp, #52]	; 0x34
   d99a0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
   d99a2:	eb00 60f1 	add.w	r0, r0, r1, ror #27
    P( D, E, A, B, C, R(27) );
   d99a6:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(28) );
   d99aa:	ea8b 0401 	eor.w	r4, fp, r1
   d99ae:	443d      	add	r5, r7
   d99b0:	4044      	eors	r4, r0
   d99b2:	441d      	add	r5, r3
   d99b4:	4425      	add	r5, r4
    P( B, C, D, E, A, R(29) );
   d99b6:	9b02      	ldr	r3, [sp, #8]
   d99b8:	9c04      	ldr	r4, [sp, #16]
   d99ba:	4063      	eors	r3, r4
   d99bc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   d99be:	ea83 0308 	eor.w	r3, r3, r8
   d99c2:	4063      	eors	r3, r4
   d99c4:	ea4f 73f3 	mov.w	r3, r3, ror #31
   d99c8:	9302      	str	r3, [sp, #8]
   d99ca:	9c02      	ldr	r4, [sp, #8]
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
   d99cc:	eb02 62f0 	add.w	r2, r2, r0, ror #27
    P( C, D, E, A, B, R(28) );
   d99d0:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( B, C, D, E, A, R(29) );
   d99d4:	ea81 0300 	eor.w	r3, r1, r0
   d99d8:	443c      	add	r4, r7
   d99da:	4053      	eors	r3, r2
   d99dc:	445c      	add	r4, fp
   d99de:	441c      	add	r4, r3
    P( A, B, C, D, E, R(30) );
   d99e0:	9b03      	ldr	r3, [sp, #12]
   d99e2:	461e      	mov	r6, r3
   d99e4:	9b06      	ldr	r3, [sp, #24]
   d99e6:	4073      	eors	r3, r6
   d99e8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   d99ea:	ea83 030c 	eor.w	r3, r3, ip
   d99ee:	4073      	eors	r3, r6
   d99f0:	ea4f 73f3 	mov.w	r3, r3, ror #31
   d99f4:	9303      	str	r3, [sp, #12]
   d99f6:	443b      	add	r3, r7
    P( E, A, B, C, D, R(31) );
   d99f8:	9e07      	ldr	r6, [sp, #28]
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
   d99fa:	440b      	add	r3, r1
    P( E, A, B, C, D, R(31) );
   d99fc:	9904      	ldr	r1, [sp, #16]
   d99fe:	4071      	eors	r1, r6
   d9a00:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
   d9a02:	eb05 65f2 	add.w	r5, r5, r2, ror #27
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
   d9a06:	ea81 010e 	eor.w	r1, r1, lr
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
   d9a0a:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( A, B, C, D, E, R(30) );
   d9a0e:	ea80 0b02 	eor.w	fp, r0, r2
    P( E, A, B, C, D, R(31) );
   d9a12:	4071      	eors	r1, r6
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
   d9a14:	eb04 64f5 	add.w	r4, r4, r5, ror #27
    P( A, B, C, D, E, R(30) );
   d9a18:	ea8b 0b05 	eor.w	fp, fp, r5
    P( E, A, B, C, D, R(31) );
   d9a1c:	ea4f 71f1 	mov.w	r1, r1, ror #31
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
   d9a20:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( E, A, B, C, D, R(31) );
   d9a24:	9104      	str	r1, [sp, #16]
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
   d9a26:	445b      	add	r3, fp
    P( E, A, B, C, D, R(31) );
   d9a28:	4439      	add	r1, r7
   d9a2a:	ea82 0b05 	eor.w	fp, r2, r5
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
   d9a2e:	eb03 63f4 	add.w	r3, r3, r4, ror #27
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
   d9a32:	9e08      	ldr	r6, [sp, #32]
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
   d9a34:	ea8b 0b04 	eor.w	fp, fp, r4
   d9a38:	4401      	add	r1, r0
   d9a3a:	ea4f 00b4 	mov.w	r0, r4, ror #2
    P( D, E, A, B, C, R(32) );
   d9a3e:	9c06      	ldr	r4, [sp, #24]
   d9a40:	4074      	eors	r4, r6
   d9a42:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d9a44:	4074      	eors	r4, r6
   d9a46:	9e02      	ldr	r6, [sp, #8]
   d9a48:	4074      	eors	r4, r6
   d9a4a:	ea4f 74f4 	mov.w	r4, r4, ror #31
   d9a4e:	9406      	str	r4, [sp, #24]
   d9a50:	9e06      	ldr	r6, [sp, #24]
   d9a52:	ea85 0400 	eor.w	r4, r5, r0
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
   d9a56:	4459      	add	r1, fp
    P( D, E, A, B, C, R(32) );
   d9a58:	eb06 0b07 	add.w	fp, r6, r7
   d9a5c:	445a      	add	r2, fp
   d9a5e:	405c      	eors	r4, r3
   d9a60:	4414      	add	r4, r2
    P( C, D, E, A, B, R(33) );
   d9a62:	9a07      	ldr	r2, [sp, #28]
   d9a64:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   d9a66:	ea82 020a 	eor.w	r2, r2, sl
   d9a6a:	4072      	eors	r2, r6
   d9a6c:	9e03      	ldr	r6, [sp, #12]
   d9a6e:	4072      	eors	r2, r6
   d9a70:	ea4f 72f2 	mov.w	r2, r2, ror #31
   d9a74:	9207      	str	r2, [sp, #28]
   d9a76:	9e07      	ldr	r6, [sp, #28]
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
   d9a78:	eb01 61f3 	add.w	r1, r1, r3, ror #27
    P( D, E, A, B, C, R(32) );
   d9a7c:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( C, D, E, A, B, R(33) );
   d9a80:	eb06 0b07 	add.w	fp, r6, r7
   d9a84:	ea80 0203 	eor.w	r2, r0, r3
   d9a88:	445d      	add	r5, fp
   d9a8a:	404a      	eors	r2, r1
   d9a8c:	442a      	add	r2, r5
    P( B, C, D, E, A, R(34) );
   d9a8e:	9d08      	ldr	r5, [sp, #32]
   d9a90:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d9a92:	ea85 0509 	eor.w	r5, r5, r9
   d9a96:	4075      	eors	r5, r6
   d9a98:	9e04      	ldr	r6, [sp, #16]
   d9a9a:	4075      	eors	r5, r6
   d9a9c:	ea4f 75f5 	mov.w	r5, r5, ror #31
   d9aa0:	9508      	str	r5, [sp, #32]
   d9aa2:	9e08      	ldr	r6, [sp, #32]
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
   d9aa4:	eb04 64f1 	add.w	r4, r4, r1, ror #27
    P( C, D, E, A, B, R(33) );
   d9aa8:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( B, C, D, E, A, R(34) );
   d9aac:	eb06 0b07 	add.w	fp, r6, r7
   d9ab0:	ea83 0501 	eor.w	r5, r3, r1
   d9ab4:	4458      	add	r0, fp
   d9ab6:	4065      	eors	r5, r4
   d9ab8:	4405      	add	r5, r0
    P( A, B, C, D, E, R(35) );
   d9aba:	980c      	ldr	r0, [sp, #48]	; 0x30
   d9abc:	ea8a 0a08 	eor.w	sl, sl, r8
   d9ac0:	ea8a 0a00 	eor.w	sl, sl, r0
   d9ac4:	9806      	ldr	r0, [sp, #24]
   d9ac6:	ea8a 0a00 	eor.w	sl, sl, r0
   d9aca:	ea4f 7bfa 	mov.w	fp, sl, ror #31
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
   d9ace:	eb02 62f4 	add.w	r2, r2, r4, ror #27
    P( B, C, D, E, A, R(34) );
   d9ad2:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( A, B, C, D, E, R(35) );
   d9ad6:	eb0b 0a07 	add.w	sl, fp, r7
   d9ada:	ea81 0004 	eor.w	r0, r1, r4
   d9ade:	4050      	eors	r0, r2
   d9ae0:	4453      	add	r3, sl
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
   d9ae2:	eb05 65f2 	add.w	r5, r5, r2, ror #27
    P( A, B, C, D, E, R(35) );
   d9ae6:	4403      	add	r3, r0
   d9ae8:	eb03 60f5 	add.w	r0, r3, r5, ror #27
    P( E, A, B, C, D, R(36) );
   d9aec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d9aee:	ea89 090c 	eor.w	r9, r9, ip
   d9af2:	ea89 0903 	eor.w	r9, r9, r3
   d9af6:	9b07      	ldr	r3, [sp, #28]
   d9af8:	ea89 0903 	eor.w	r9, r9, r3
   d9afc:	ea4f 7af9 	mov.w	sl, r9, ror #31
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
   d9b00:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(36) );
   d9b04:	eb0a 0907 	add.w	r9, sl, r7
   d9b08:	ea84 0302 	eor.w	r3, r4, r2
   d9b0c:	406b      	eors	r3, r5
   d9b0e:	4449      	add	r1, r9
   d9b10:	4419      	add	r1, r3
   d9b12:	eb01 63f0 	add.w	r3, r1, r0, ror #27
    P( D, E, A, B, C, R(37) );
   d9b16:	9902      	ldr	r1, [sp, #8]
   d9b18:	ea88 080e 	eor.w	r8, r8, lr
   d9b1c:	ea88 0801 	eor.w	r8, r8, r1
   d9b20:	ea88 0806 	eor.w	r8, r8, r6
   d9b24:	ea4f 71f8 	mov.w	r1, r8, ror #31
   d9b28:	910e      	str	r1, [sp, #56]	; 0x38
   d9b2a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
   d9b2c:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( D, E, A, B, C, R(37) );
   d9b30:	eb06 0807 	add.w	r8, r6, r7
   d9b34:	ea82 0105 	eor.w	r1, r2, r5
   d9b38:	4041      	eors	r1, r0
   d9b3a:	4444      	add	r4, r8
   d9b3c:	440c      	add	r4, r1
   d9b3e:	eb04 61f3 	add.w	r1, r4, r3, ror #27
    P( C, D, E, A, B, R(38) );
   d9b42:	9c09      	ldr	r4, [sp, #36]	; 0x24
   d9b44:	ea8c 0c04 	eor.w	ip, ip, r4
   d9b48:	9c03      	ldr	r4, [sp, #12]
   d9b4a:	ea8c 0c04 	eor.w	ip, ip, r4
   d9b4e:	ea8c 0c0b 	eor.w	ip, ip, fp
   d9b52:	ea4f 74fc 	mov.w	r4, ip, ror #31
   d9b56:	940f      	str	r4, [sp, #60]	; 0x3c
   d9b58:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
   d9b5a:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( C, D, E, A, B, R(38) );
   d9b5e:	eb06 0c07 	add.w	ip, r6, r7
   d9b62:	ea85 0400 	eor.w	r4, r5, r0
   d9b66:	405c      	eors	r4, r3
   d9b68:	4462      	add	r2, ip
   d9b6a:	4422      	add	r2, r4
   d9b6c:	eb02 64f1 	add.w	r4, r2, r1, ror #27
    P( B, C, D, E, A, R(39) );
   d9b70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d9b72:	ea8e 0e02 	eor.w	lr, lr, r2
   d9b76:	9a04      	ldr	r2, [sp, #16]
   d9b78:	ea8e 0e02 	eor.w	lr, lr, r2
   d9b7c:	ea8e 0e0a 	eor.w	lr, lr, sl
   d9b80:	ea4f 72fe 	mov.w	r2, lr, ror #31
   d9b84:	9210      	str	r2, [sp, #64]	; 0x40
   d9b86:	9e10      	ldr	r6, [sp, #64]	; 0x40
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
   d9b88:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(39) );
   d9b8c:	ea80 0203 	eor.w	r2, r0, r3
   d9b90:	4437      	add	r7, r6
   d9b92:	404a      	eors	r2, r1
   d9b94:	443d      	add	r5, r7
#undef F

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
   d9b96:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d9b98:	4fd2      	ldr	r7, [pc, #840]	; (d9ee4 <mbedtls_internal_sha1_process+0xb08>)
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
   d9b9a:	4415      	add	r5, r2
#undef F

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
   d9b9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d9b9e:	4056      	eors	r6, r2
   d9ba0:	9a06      	ldr	r2, [sp, #24]
   d9ba2:	4056      	eors	r6, r2
   d9ba4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d9ba6:	4056      	eors	r6, r2
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
   d9ba8:	ea4f 08b1 	mov.w	r8, r1, ror #2
#undef F

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
   d9bac:	ea4f 72f6 	mov.w	r2, r6, ror #31
   d9bb0:	9209      	str	r2, [sp, #36]	; 0x24
   d9bb2:	ea44 0208 	orr.w	r2, r4, r8
   d9bb6:	ea04 0108 	and.w	r1, r4, r8
   d9bba:	401a      	ands	r2, r3
   d9bbc:	430a      	orrs	r2, r1
   d9bbe:	9909      	ldr	r1, [sp, #36]	; 0x24
   d9bc0:	4439      	add	r1, r7
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
   d9bc2:	eb05 65f4 	add.w	r5, r5, r4, ror #27
#undef F

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
   d9bc6:	4408      	add	r0, r1
   d9bc8:	eb00 60f5 	add.w	r0, r0, r5, ror #27
   d9bcc:	4402      	add	r2, r0
    P( E, A, B, C, D, R(41) );
   d9bce:	990a      	ldr	r1, [sp, #40]	; 0x28
   d9bd0:	980c      	ldr	r0, [sp, #48]	; 0x30
   d9bd2:	4041      	eors	r1, r0
   d9bd4:	9807      	ldr	r0, [sp, #28]
   d9bd6:	4041      	eors	r1, r0
   d9bd8:	980f      	ldr	r0, [sp, #60]	; 0x3c
#undef F

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
   d9bda:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(41) );
   d9bde:	4041      	eors	r1, r0
   d9be0:	ea4f 71f1 	mov.w	r1, r1, ror #31
   d9be4:	ea45 0004 	orr.w	r0, r5, r4
   d9be8:	910a      	str	r1, [sp, #40]	; 0x28
   d9bea:	ea00 0008 	and.w	r0, r0, r8
   d9bee:	ea05 0104 	and.w	r1, r5, r4
   d9bf2:	4308      	orrs	r0, r1
   d9bf4:	990a      	ldr	r1, [sp, #40]	; 0x28
   d9bf6:	4439      	add	r1, r7
   d9bf8:	440b      	add	r3, r1
   d9bfa:	4403      	add	r3, r0
    P( D, E, A, B, C, R(42) );
   d9bfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d9bfe:	980d      	ldr	r0, [sp, #52]	; 0x34
   d9c00:	4048      	eors	r0, r1
   d9c02:	9908      	ldr	r1, [sp, #32]
   d9c04:	4048      	eors	r0, r1
   d9c06:	9910      	ldr	r1, [sp, #64]	; 0x40

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
   d9c08:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( D, E, A, B, C, R(42) );
   d9c0c:	4048      	eors	r0, r1
   d9c0e:	ea4f 71f0 	mov.w	r1, r0, ror #31
   d9c12:	ea42 0005 	orr.w	r0, r2, r5
   d9c16:	910b      	str	r1, [sp, #44]	; 0x2c
   d9c18:	4020      	ands	r0, r4
   d9c1a:	ea02 0105 	and.w	r1, r2, r5
   d9c1e:	4308      	orrs	r0, r1
   d9c20:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d9c22:	4439      	add	r1, r7

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
   d9c24:	eb03 63f2 	add.w	r3, r3, r2, ror #27
    P( D, E, A, B, C, R(42) );
   d9c28:	4441      	add	r1, r8
   d9c2a:	eb01 61f3 	add.w	r1, r1, r3, ror #27
   d9c2e:	ea4f 06b2 	mov.w	r6, r2, ror #2
   d9c32:	4408      	add	r0, r1
    P( C, D, E, A, B, R(43) );
   d9c34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   d9c36:	9902      	ldr	r1, [sp, #8]
   d9c38:	4051      	eors	r1, r2
   d9c3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d9c3c:	ea81 010b 	eor.w	r1, r1, fp
   d9c40:	4051      	eors	r1, r2
   d9c42:	ea4f 72f1 	mov.w	r2, r1, ror #31
   d9c46:	ea43 0106 	orr.w	r1, r3, r6
   d9c4a:	920c      	str	r2, [sp, #48]	; 0x30
   d9c4c:	4029      	ands	r1, r5
   d9c4e:	ea03 0206 	and.w	r2, r3, r6
   d9c52:	4311      	orrs	r1, r2
   d9c54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   d9c56:	443a      	add	r2, r7
   d9c58:	ea4f 0eb3 	mov.w	lr, r3, ror #2
   d9c5c:	4414      	add	r4, r2
    P( B, C, D, E, A, R(44) );
   d9c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d9c60:	9a03      	ldr	r2, [sp, #12]
   d9c62:	4053      	eors	r3, r2
   d9c64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d9c66:	ea83 030a 	eor.w	r3, r3, sl
   d9c6a:	4053      	eors	r3, r2
   d9c6c:	ea4f 73f3 	mov.w	r3, r3, ror #31
   d9c70:	930d      	str	r3, [sp, #52]	; 0x34
   d9c72:	ea40 030e 	orr.w	r3, r0, lr
   d9c76:	ea03 0206 	and.w	r2, r3, r6
   d9c7a:	ea00 030e 	and.w	r3, r0, lr
   d9c7e:	4313      	orrs	r3, r2
   d9c80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
   d9c82:	440c      	add	r4, r1
    P( B, C, D, E, A, R(44) );
   d9c84:	443a      	add	r2, r7
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
   d9c86:	eb04 61f0 	add.w	r1, r4, r0, ror #27
    P( B, C, D, E, A, R(44) );
   d9c8a:	4415      	add	r5, r2
   d9c8c:	eb05 65f1 	add.w	r5, r5, r1, ror #27
   d9c90:	441d      	add	r5, r3
    P( A, B, C, D, E, R(45) );
   d9c92:	9a04      	ldr	r2, [sp, #16]
   d9c94:	9b02      	ldr	r3, [sp, #8]
   d9c96:	405a      	eors	r2, r3
   d9c98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d9c9a:	405a      	eors	r2, r3
   d9c9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d9c9e:	405a      	eors	r2, r3
   d9ca0:	ea4f 73f2 	mov.w	r3, r2, ror #31
   d9ca4:	9302      	str	r3, [sp, #8]

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
   d9ca6:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( A, B, C, D, E, R(45) );
   d9caa:	9a02      	ldr	r2, [sp, #8]
   d9cac:	ea41 0300 	orr.w	r3, r1, r0
   d9cb0:	ea03 0c0e 	and.w	ip, r3, lr
   d9cb4:	443a      	add	r2, r7
   d9cb6:	ea01 0300 	and.w	r3, r1, r0
   d9cba:	ea4c 0303 	orr.w	r3, ip, r3
   d9cbe:	4432      	add	r2, r6
   d9cc0:	441a      	add	r2, r3
   d9cc2:	eb02 6cf5 	add.w	ip, r2, r5, ror #27
    P( E, A, B, C, D, R(46) );
   d9cc6:	9b03      	ldr	r3, [sp, #12]
    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
   d9cc8:	ea4f 02b1 	mov.w	r2, r1, ror #2
    P( E, A, B, C, D, R(46) );
   d9ccc:	9906      	ldr	r1, [sp, #24]
   d9cce:	ea83 0901 	eor.w	r9, r3, r1
   d9cd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( D, E, A, B, C, R(47) );
   d9cd4:	9904      	ldr	r1, [sp, #16]
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
   d9cd6:	ea89 0903 	eor.w	r9, r9, r3
   d9cda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9cdc:	ea89 0903 	eor.w	r9, r9, r3
   d9ce0:	ea4f 73f9 	mov.w	r3, r9, ror #31
   d9ce4:	ea45 0402 	orr.w	r4, r5, r2
   d9ce8:	9303      	str	r3, [sp, #12]
   d9cea:	4004      	ands	r4, r0
   d9cec:	ea05 0302 	and.w	r3, r5, r2
   d9cf0:	431c      	orrs	r4, r3
   d9cf2:	9b03      	ldr	r3, [sp, #12]
   d9cf4:	443b      	add	r3, r7
   d9cf6:	449e      	add	lr, r3
   d9cf8:	eb0e 6efc 	add.w	lr, lr, ip, ror #27
   d9cfc:	44a6      	add	lr, r4
    P( D, E, A, B, C, R(47) );
   d9cfe:	9c07      	ldr	r4, [sp, #28]
   d9d00:	ea81 0804 	eor.w	r8, r1, r4
   d9d04:	9910      	ldr	r1, [sp, #64]	; 0x40
   d9d06:	ea88 0801 	eor.w	r8, r8, r1
   d9d0a:	990d      	ldr	r1, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
   d9d0c:	ea4f 03b5 	mov.w	r3, r5, ror #2
    P( D, E, A, B, C, R(47) );
   d9d10:	ea88 0801 	eor.w	r8, r8, r1
   d9d14:	ea4f 71f8 	mov.w	r1, r8, ror #31
   d9d18:	ea4c 0403 	orr.w	r4, ip, r3
   d9d1c:	9104      	str	r1, [sp, #16]
   d9d1e:	4014      	ands	r4, r2
   d9d20:	ea0c 0103 	and.w	r1, ip, r3
   d9d24:	430c      	orrs	r4, r1
   d9d26:	9904      	ldr	r1, [sp, #16]
   d9d28:	eb01 0807 	add.w	r8, r1, r7
   d9d2c:	4440      	add	r0, r8
    P( C, D, E, A, B, R(48) );
   d9d2e:	9906      	ldr	r1, [sp, #24]
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
   d9d30:	eb04 0800 	add.w	r8, r4, r0
    P( C, D, E, A, B, R(48) );
   d9d34:	9808      	ldr	r0, [sp, #32]
   d9d36:	ea81 0900 	eor.w	r9, r1, r0
   d9d3a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d9d3c:	ea89 0901 	eor.w	r9, r9, r1
   d9d40:	9902      	ldr	r1, [sp, #8]
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
   d9d42:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( C, D, E, A, B, R(48) );
   d9d46:	ea89 0901 	eor.w	r9, r9, r1
   d9d4a:	ea4f 71f9 	mov.w	r1, r9, ror #31
   d9d4e:	ea4e 040c 	orr.w	r4, lr, ip
   d9d52:	9106      	str	r1, [sp, #24]
   d9d54:	401c      	ands	r4, r3
   d9d56:	ea0e 010c 	and.w	r1, lr, ip
   d9d5a:	ea44 0001 	orr.w	r0, r4, r1
   d9d5e:	9906      	ldr	r1, [sp, #24]
   d9d60:	4439      	add	r1, r7
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
   d9d62:	eb08 68fe 	add.w	r8, r8, lr, ror #27
    P( C, D, E, A, B, R(48) );
   d9d66:	4411      	add	r1, r2
   d9d68:	eb01 65f8 	add.w	r5, r1, r8, ror #27
    P( B, C, D, E, A, R(49) );
   d9d6c:	9a07      	ldr	r2, [sp, #28]
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
   d9d6e:	1944      	adds	r4, r0, r5
    P( B, C, D, E, A, R(49) );
   d9d70:	980a      	ldr	r0, [sp, #40]	; 0x28
   d9d72:	ea82 020b 	eor.w	r2, r2, fp
   d9d76:	4042      	eors	r2, r0
   d9d78:	9803      	ldr	r0, [sp, #12]
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
   d9d7a:	ea4f 01be 	mov.w	r1, lr, ror #2
    P( B, C, D, E, A, R(49) );
   d9d7e:	4042      	eors	r2, r0
   d9d80:	ea4f 72f2 	mov.w	r2, r2, ror #31
   d9d84:	ea48 0001 	orr.w	r0, r8, r1
   d9d88:	9207      	str	r2, [sp, #28]
   d9d8a:	ea00 000c 	and.w	r0, r0, ip
   d9d8e:	ea08 0201 	and.w	r2, r8, r1
   d9d92:	4310      	orrs	r0, r2
   d9d94:	9a07      	ldr	r2, [sp, #28]
   d9d96:	19d6      	adds	r6, r2, r7
   d9d98:	4433      	add	r3, r6
   d9d9a:	18c6      	adds	r6, r0, r3
    P( A, B, C, D, E, R(50) );
   d9d9c:	9b08      	ldr	r3, [sp, #32]
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
   d9d9e:	eb06 69f4 	add.w	r9, r6, r4, ror #27
    P( A, B, C, D, E, R(50) );
   d9da2:	ea83 060a 	eor.w	r6, r3, sl
   d9da6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d9da8:	405e      	eors	r6, r3
   d9daa:	9b04      	ldr	r3, [sp, #16]
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
   d9dac:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( A, B, C, D, E, R(50) );
   d9db0:	405e      	eors	r6, r3
   d9db2:	ea44 0208 	orr.w	r2, r4, r8
   d9db6:	ea4f 7ef6 	mov.w	lr, r6, ror #31
   d9dba:	400a      	ands	r2, r1
   d9dbc:	ea04 0308 	and.w	r3, r4, r8
   d9dc0:	4313      	orrs	r3, r2
   d9dc2:	eb0e 0207 	add.w	r2, lr, r7
   d9dc6:	4462      	add	r2, ip
   d9dc8:	eb02 62f9 	add.w	r2, r2, r9, ror #27
   d9dcc:	441a      	add	r2, r3
    P( E, A, B, C, D, R(51) );
   d9dce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d9dd0:	ea8b 0c03 	eor.w	ip, fp, r3
   d9dd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9dd6:	ea8c 0c03 	eor.w	ip, ip, r3
   d9dda:	9b06      	ldr	r3, [sp, #24]
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
   d9ddc:	ea4f 05b4 	mov.w	r5, r4, ror #2
    P( E, A, B, C, D, R(51) );
   d9de0:	ea8c 0c03 	eor.w	ip, ip, r3
   d9de4:	ea49 0305 	orr.w	r3, r9, r5
   d9de8:	ea4f 7cfc 	mov.w	ip, ip, ror #31
   d9dec:	ea03 0b08 	and.w	fp, r3, r8
   d9df0:	ea09 0305 	and.w	r3, r9, r5
   d9df4:	ea4b 0303 	orr.w	r3, fp, r3
   d9df8:	eb0c 0b07 	add.w	fp, ip, r7
   d9dfc:	448b      	add	fp, r1
   d9dfe:	449b      	add	fp, r3
    P( D, E, A, B, C, R(52) );
   d9e00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9e02:	990d      	ldr	r1, [sp, #52]	; 0x34
   d9e04:	ea8a 0303 	eor.w	r3, sl, r3
   d9e08:	404b      	eors	r3, r1
   d9e0a:	9907      	ldr	r1, [sp, #28]
   d9e0c:	404b      	eors	r3, r1
   d9e0e:	ea4f 73f3 	mov.w	r3, r3, ror #31
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
   d9e12:	ea4f 06b9 	mov.w	r6, r9, ror #2
    P( D, E, A, B, C, R(52) );
   d9e16:	9308      	str	r3, [sp, #32]
   d9e18:	9908      	ldr	r1, [sp, #32]
   d9e1a:	ea42 0006 	orr.w	r0, r2, r6
   d9e1e:	4028      	ands	r0, r5
   d9e20:	ea02 0306 	and.w	r3, r2, r6
   d9e24:	4303      	orrs	r3, r0
   d9e26:	19c8      	adds	r0, r1, r7
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
   d9e28:	eb0b 6bf2 	add.w	fp, fp, r2, ror #27
    P( D, E, A, B, C, R(52) );
   d9e2c:	4440      	add	r0, r8
   d9e2e:	eb00 60fb 	add.w	r0, r0, fp, ror #27
   d9e32:	4418      	add	r0, r3
    P( C, D, E, A, B, R(53) );
   d9e34:	9910      	ldr	r1, [sp, #64]	; 0x40
   d9e36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d9e38:	404b      	eors	r3, r1
   d9e3a:	9902      	ldr	r1, [sp, #8]
   d9e3c:	404b      	eors	r3, r1
   d9e3e:	ea83 030e 	eor.w	r3, r3, lr
   d9e42:	ea4f 73f3 	mov.w	r3, r3, ror #31
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
   d9e46:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( C, D, E, A, B, R(53) );
   d9e4a:	930e      	str	r3, [sp, #56]	; 0x38
   d9e4c:	990e      	ldr	r1, [sp, #56]	; 0x38
   d9e4e:	ea4b 0302 	orr.w	r3, fp, r2
   d9e52:	ea03 0406 	and.w	r4, r3, r6
   d9e56:	ea0b 0302 	and.w	r3, fp, r2
   d9e5a:	4323      	orrs	r3, r4
   d9e5c:	19cc      	adds	r4, r1, r7
   d9e5e:	442c      	add	r4, r5
    P( B, C, D, E, A, R(54) );
   d9e60:	9909      	ldr	r1, [sp, #36]	; 0x24
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
   d9e62:	441c      	add	r4, r3
    P( B, C, D, E, A, R(54) );
   d9e64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9e66:	ea83 0901 	eor.w	r9, r3, r1
   d9e6a:	9b03      	ldr	r3, [sp, #12]
   d9e6c:	ea89 0903 	eor.w	r9, r9, r3
   d9e70:	ea89 090c 	eor.w	r9, r9, ip
   d9e74:	ea4f 73f9 	mov.w	r3, r9, ror #31
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
   d9e78:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( B, C, D, E, A, R(54) );
   d9e7c:	930f      	str	r3, [sp, #60]	; 0x3c
   d9e7e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   d9e80:	ea40 090b 	orr.w	r9, r0, fp
   d9e84:	ea09 0902 	and.w	r9, r9, r2
   d9e88:	ea00 030b 	and.w	r3, r0, fp
   d9e8c:	ea49 0303 	orr.w	r3, r9, r3
   d9e90:	eb01 0907 	add.w	r9, r1, r7
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
   d9e94:	eb04 64f0 	add.w	r4, r4, r0, ror #27
    P( B, C, D, E, A, R(54) );
   d9e98:	44b1      	add	r9, r6
   d9e9a:	eb09 69f4 	add.w	r9, r9, r4, ror #27
   d9e9e:	4499      	add	r9, r3
    P( A, B, C, D, E, R(55) );
   d9ea0:	990a      	ldr	r1, [sp, #40]	; 0x28
   d9ea2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d9ea4:	ea83 0801 	eor.w	r8, r3, r1
   d9ea8:	9b04      	ldr	r3, [sp, #16]
   d9eaa:	ea88 0803 	eor.w	r8, r8, r3
   d9eae:	9b08      	ldr	r3, [sp, #32]
   d9eb0:	ea88 0803 	eor.w	r8, r8, r3
   d9eb4:	ea4f 73f8 	mov.w	r3, r8, ror #31
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
   d9eb8:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( A, B, C, D, E, R(55) );
   d9ebc:	9310      	str	r3, [sp, #64]	; 0x40
   d9ebe:	9910      	ldr	r1, [sp, #64]	; 0x40
   d9ec0:	ea44 0300 	orr.w	r3, r4, r0
   d9ec4:	ea03 080b 	and.w	r8, r3, fp
   d9ec8:	ea04 0300 	and.w	r3, r4, r0
   d9ecc:	ea48 0303 	orr.w	r3, r8, r3
   d9ed0:	eb01 0807 	add.w	r8, r1, r7
   d9ed4:	4490      	add	r8, r2
   d9ed6:	4498      	add	r8, r3
    P( E, A, B, C, D, R(56) );
   d9ed8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d9eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9edc:	ea83 0602 	eor.w	r6, r3, r2
   d9ee0:	9b06      	ldr	r3, [sp, #24]
   d9ee2:	e001      	b.n	d9ee8 <mbedtls_internal_sha1_process+0xb0c>
   d9ee4:	8f1bbcdc 	.word	0x8f1bbcdc
   d9ee8:	405e      	eors	r6, r3
   d9eea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d9eec:	405e      	eors	r6, r3
   d9eee:	ea4f 73f6 	mov.w	r3, r6, ror #31
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
   d9ef2:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(56) );
   d9ef6:	9309      	str	r3, [sp, #36]	; 0x24
   d9ef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d9efa:	ea49 0604 	orr.w	r6, r9, r4
   d9efe:	4006      	ands	r6, r0
   d9f00:	ea09 0304 	and.w	r3, r9, r4
   d9f04:	4333      	orrs	r3, r6
   d9f06:	19d6      	adds	r6, r2, r7
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
   d9f08:	eb08 68f9 	add.w	r8, r8, r9, ror #27
    P( E, A, B, C, D, R(56) );
   d9f0c:	445e      	add	r6, fp
   d9f0e:	eb06 66f8 	add.w	r6, r6, r8, ror #27
   d9f12:	441e      	add	r6, r3
    P( D, E, A, B, C, R(57) );
   d9f14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   d9f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9f18:	ea83 0b02 	eor.w	fp, r3, r2
   d9f1c:	9b07      	ldr	r3, [sp, #28]
    P( C, D, E, A, B, R(58) );
   d9f1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
   d9f20:	ea8b 0b03 	eor.w	fp, fp, r3
   d9f24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
   d9f26:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( D, E, A, B, C, R(57) );
   d9f2a:	ea8b 0b03 	eor.w	fp, fp, r3
   d9f2e:	ea48 0309 	orr.w	r3, r8, r9
   d9f32:	ea4f 7bfb 	mov.w	fp, fp, ror #31
   d9f36:	ea03 0a04 	and.w	sl, r3, r4
   d9f3a:	ea08 0309 	and.w	r3, r8, r9
   d9f3e:	ea4a 0303 	orr.w	r3, sl, r3
   d9f42:	eb0b 0a07 	add.w	sl, fp, r7
   d9f46:	4482      	add	sl, r0
   d9f48:	449a      	add	sl, r3
    P( C, D, E, A, B, R(58) );
   d9f4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
   d9f4c:	9804      	ldr	r0, [sp, #16]
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
   d9f4e:	ea83 0502 	eor.w	r5, r3, r2
   d9f52:	ea85 050e 	eor.w	r5, r5, lr
   d9f56:	404d      	eors	r5, r1
   d9f58:	ea4f 73f5 	mov.w	r3, r5, ror #31
   d9f5c:	19dd      	adds	r5, r3, r7
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
   d9f5e:	eb0a 6af6 	add.w	sl, sl, r6, ror #27
   d9f62:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( C, D, E, A, B, R(58) );
   d9f66:	4425      	add	r5, r4
   d9f68:	930a      	str	r3, [sp, #40]	; 0x28
   d9f6a:	eb05 63fa 	add.w	r3, r5, sl, ror #27
   d9f6e:	ea46 0508 	orr.w	r5, r6, r8
   d9f72:	ea06 0208 	and.w	r2, r6, r8
   d9f76:	ea05 0509 	and.w	r5, r5, r9
   d9f7a:	4315      	orrs	r5, r2
   d9f7c:	441d      	add	r5, r3
    P( B, C, D, E, A, R(59) );
   d9f7e:	9a02      	ldr	r2, [sp, #8]
   d9f80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9f82:	ea83 0102 	eor.w	r1, r3, r2
   d9f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9f88:	ea81 010c 	eor.w	r1, r1, ip
   d9f8c:	4059      	eors	r1, r3
   d9f8e:	ea4f 73f1 	mov.w	r3, r1, ror #31
   d9f92:	930b      	str	r3, [sp, #44]	; 0x2c
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
   d9f94:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( B, C, D, E, A, R(59) );
   d9f98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d9f9a:	ea4a 0106 	orr.w	r1, sl, r6
   d9f9e:	ea01 0108 	and.w	r1, r1, r8
   d9fa2:	ea0a 0306 	and.w	r3, sl, r6
   d9fa6:	4417      	add	r7, r2
   d9fa8:	444f      	add	r7, r9
   d9faa:	430b      	orrs	r3, r1
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
   d9fac:	9a03      	ldr	r2, [sp, #12]
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
   d9fae:	19d9      	adds	r1, r3, r7
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
   d9fb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d9fb2:	4fd9      	ldr	r7, [pc, #868]	; (da318 <mbedtls_internal_sha1_process+0xf3c>)
   d9fb4:	4053      	eors	r3, r2
   d9fb6:	9a08      	ldr	r2, [sp, #32]
   d9fb8:	4053      	eors	r3, r2
   d9fba:	ea83 030b 	eor.w	r3, r3, fp
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
   d9fbe:	ea4f 0aba 	mov.w	sl, sl, ror #2
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
   d9fc2:	ea4f 73f3 	mov.w	r3, r3, ror #31
   d9fc6:	930c      	str	r3, [sp, #48]	; 0x30
   d9fc8:	ea86 020a 	eor.w	r2, r6, sl
   d9fcc:	443b      	add	r3, r7
   d9fce:	406a      	eors	r2, r5
   d9fd0:	4443      	add	r3, r8
   d9fd2:	4413      	add	r3, r2
    P( E, A, B, C, D, R(61) );
   d9fd4:	9a02      	ldr	r2, [sp, #8]
   d9fd6:	4042      	eors	r2, r0
   d9fd8:	980e      	ldr	r0, [sp, #56]	; 0x38
   d9fda:	4042      	eors	r2, r0
   d9fdc:	980a      	ldr	r0, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(62) );
   d9fde:	9c06      	ldr	r4, [sp, #24]

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
   d9fe0:	4042      	eors	r2, r0
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
   d9fe2:	eb01 61f5 	add.w	r1, r1, r5, ror #27

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
   d9fe6:	ea4f 72f2 	mov.w	r2, r2, ror #31
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
   d9fea:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( E, A, B, C, D, R(61) );
   d9fee:	9202      	str	r2, [sp, #8]
   d9ff0:	ea8a 0005 	eor.w	r0, sl, r5
   d9ff4:	443a      	add	r2, r7
   d9ff6:	4048      	eors	r0, r1
   d9ff8:	4432      	add	r2, r6
   d9ffa:	4402      	add	r2, r0
    P( D, E, A, B, C, R(62) );
   d9ffc:	9803      	ldr	r0, [sp, #12]
    P( C, D, E, A, B, R(63) );
   d9ffe:	9e07      	ldr	r6, [sp, #28]
#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
   da000:	ea80 0904 	eor.w	r9, r0, r4
   da004:	980f      	ldr	r0, [sp, #60]	; 0x3c
   da006:	ea89 0900 	eor.w	r9, r9, r0
   da00a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   da00c:	ea89 0900 	eor.w	r9, r9, r0
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
   da010:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
   da014:	ea4f 70f9 	mov.w	r0, r9, ror #31

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
   da018:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, R(62) );
   da01c:	9003      	str	r0, [sp, #12]
   da01e:	ea85 0401 	eor.w	r4, r5, r1
   da022:	4438      	add	r0, r7
   da024:	405c      	eors	r4, r3
   da026:	4450      	add	r0, sl
   da028:	4420      	add	r0, r4
    P( C, D, E, A, B, R(63) );
   da02a:	9c04      	ldr	r4, [sp, #16]
   da02c:	ea84 0806 	eor.w	r8, r4, r6
   da030:	9c10      	ldr	r4, [sp, #64]	; 0x40
   da032:	ea88 0804 	eor.w	r8, r8, r4
   da036:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   da038:	ea88 0804 	eor.w	r8, r8, r4
   da03c:	ea4f 74f8 	mov.w	r4, r8, ror #31
   da040:	9404      	str	r4, [sp, #16]
   da042:	443c      	add	r4, r7
   da044:	442c      	add	r4, r5
    P( B, C, D, E, A, R(64) );
   da046:	9d06      	ldr	r5, [sp, #24]
   da048:	ea85 090e 	eor.w	r9, r5, lr
   da04c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   da04e:	ea89 0905 	eor.w	r9, r9, r5
   da052:	9d02      	ldr	r5, [sp, #8]

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
   da054:	eb02 62f3 	add.w	r2, r2, r3, ror #27
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
   da058:	ea89 0905 	eor.w	r9, r9, r5
#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
   da05c:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( C, D, E, A, B, R(63) );
   da060:	ea81 0603 	eor.w	r6, r1, r3
    P( B, C, D, E, A, R(64) );
   da064:	ea4f 75f9 	mov.w	r5, r9, ror #31
   da068:	9506      	str	r5, [sp, #24]
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
   da06a:	4056      	eors	r6, r2
   da06c:	4434      	add	r4, r6
    P( B, C, D, E, A, R(64) );
   da06e:	9e06      	ldr	r6, [sp, #24]
   da070:	eb06 0907 	add.w	r9, r6, r7
   da074:	4489      	add	r9, r1
    P( A, B, C, D, E, R(65) );
   da076:	9907      	ldr	r1, [sp, #28]
   da078:	ea81 080c 	eor.w	r8, r1, ip
   da07c:	9903      	ldr	r1, [sp, #12]
   da07e:	ea88 080b 	eor.w	r8, r8, fp
#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
   da082:	eb00 60f2 	add.w	r0, r0, r2, ror #27
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
   da086:	ea88 0801 	eor.w	r8, r8, r1
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
   da08a:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, R(64) );
   da08e:	ea83 0502 	eor.w	r5, r3, r2
    P( A, B, C, D, E, R(65) );
   da092:	ea4f 71f8 	mov.w	r1, r8, ror #31
   da096:	9107      	str	r1, [sp, #28]

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
   da098:	4045      	eors	r5, r0
   da09a:	44a9      	add	r9, r5
    P( A, B, C, D, E, R(65) );
   da09c:	9d07      	ldr	r5, [sp, #28]
   da09e:	eb05 0807 	add.w	r8, r5, r7
   da0a2:	4498      	add	r8, r3
    P( E, A, B, C, D, R(66) );
   da0a4:	9b08      	ldr	r3, [sp, #32]
   da0a6:	ea8e 0603 	eor.w	r6, lr, r3
   da0aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da0ac:	405e      	eors	r6, r3
   da0ae:	9b04      	ldr	r3, [sp, #16]
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
   da0b0:	eb04 64f0 	add.w	r4, r4, r0, ror #27
    P( B, C, D, E, A, R(64) );
   da0b4:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( A, B, C, D, E, R(65) );
   da0b8:	ea82 0100 	eor.w	r1, r2, r0
    P( E, A, B, C, D, R(66) );
   da0bc:	405e      	eors	r6, r3

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
   da0be:	eb09 69f4 	add.w	r9, r9, r4, ror #27
    P( A, B, C, D, E, R(65) );
   da0c2:	4061      	eors	r1, r4
    P( E, A, B, C, D, R(66) );
   da0c4:	ea4f 76f6 	mov.w	r6, r6, ror #31
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
   da0c8:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(66) );
   da0cc:	ea80 0304 	eor.w	r3, r0, r4
   da0d0:	eb06 0e07 	add.w	lr, r6, r7
   da0d4:	ea83 0309 	eor.w	r3, r3, r9
   da0d8:	4496      	add	lr, r2
   da0da:	449e      	add	lr, r3
    P( D, E, A, B, C, R(67) );
   da0dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    P( C, D, E, A, B, R(68) );
   da0de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
   da0e0:	ea8c 0a03 	eor.w	sl, ip, r3
   da0e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   da0e6:	ea8a 0a03 	eor.w	sl, sl, r3
   da0ea:	9b06      	ldr	r3, [sp, #24]
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
   da0ec:	4488      	add	r8, r1
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
   da0ee:	ea8a 0a03 	eor.w	sl, sl, r3
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
   da0f2:	eb08 68f9 	add.w	r8, r8, r9, ror #27
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
   da0f6:	ea4f 7afa 	mov.w	sl, sl, ror #31
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
   da0fa:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( D, E, A, B, C, R(67) );
   da0fe:	ea84 0309 	eor.w	r3, r4, r9
   da102:	eb0a 0c07 	add.w	ip, sl, r7
   da106:	ea83 0308 	eor.w	r3, r3, r8
   da10a:	4484      	add	ip, r0
   da10c:	449c      	add	ip, r3
    P( C, D, E, A, B, R(68) );
   da10e:	9b08      	ldr	r3, [sp, #32]
   da110:	4053      	eors	r3, r2
   da112:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   da114:	4053      	eors	r3, r2
   da116:	406b      	eors	r3, r5
   da118:	ea4f 73f3 	mov.w	r3, r3, ror #31
   da11c:	9308      	str	r3, [sp, #32]
   da11e:	9a08      	ldr	r2, [sp, #32]
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
   da120:	eb0e 6ef8 	add.w	lr, lr, r8, ror #27
    P( D, E, A, B, C, R(67) );
   da124:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( C, D, E, A, B, R(68) );
   da128:	ea89 0308 	eor.w	r3, r9, r8
   da12c:	19d5      	adds	r5, r2, r7
   da12e:	ea83 030e 	eor.w	r3, r3, lr
   da132:	4425      	add	r5, r4
   da134:	441d      	add	r5, r3
    P( B, C, D, E, A, R(69) );
   da136:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   da138:	9a10      	ldr	r2, [sp, #64]	; 0x40
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
   da13a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
   da13c:	4053      	eors	r3, r2
   da13e:	9a02      	ldr	r2, [sp, #8]
   da140:	4053      	eors	r3, r2
   da142:	4073      	eors	r3, r6
   da144:	ea4f 73f3 	mov.w	r3, r3, ror #31
   da148:	930d      	str	r3, [sp, #52]	; 0x34
   da14a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
   da14c:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
    P( C, D, E, A, B, R(68) );
   da150:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( B, C, D, E, A, R(69) );
   da154:	ea88 030e 	eor.w	r3, r8, lr
   da158:	19d1      	adds	r1, r2, r7
   da15a:	ea83 030c 	eor.w	r3, r3, ip
   da15e:	4449      	add	r1, r9
    P( A, B, C, D, E, R(70) );
   da160:	9a09      	ldr	r2, [sp, #36]	; 0x24
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
   da162:	4419      	add	r1, r3
    P( A, B, C, D, E, R(70) );
   da164:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da166:	ea83 0902 	eor.w	r9, r3, r2
   da16a:	9b03      	ldr	r3, [sp, #12]
   da16c:	ea89 0903 	eor.w	r9, r9, r3
   da170:	ea89 090a 	eor.w	r9, r9, sl
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
   da174:	eb05 65fc 	add.w	r5, r5, ip, ror #27
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
   da178:	ea4f 79f9 	mov.w	r9, r9, ror #31
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
   da17c:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( A, B, C, D, E, R(70) );
   da180:	ea8e 020c 	eor.w	r2, lr, ip
   da184:	eb09 0307 	add.w	r3, r9, r7
   da188:	406a      	eors	r2, r5
   da18a:	4443      	add	r3, r8
   da18c:	4413      	add	r3, r2
    P( E, A, B, C, D, R(71) );
   da18e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   da190:	ea82 080b 	eor.w	r8, r2, fp
   da194:	9a04      	ldr	r2, [sp, #16]
   da196:	ea88 0802 	eor.w	r8, r8, r2
   da19a:	9a08      	ldr	r2, [sp, #32]
   da19c:	ea88 0802 	eor.w	r8, r8, r2
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
   da1a0:	eb01 61f5 	add.w	r1, r1, r5, ror #27
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
   da1a4:	ea4f 78f8 	mov.w	r8, r8, ror #31
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
   da1a8:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( E, A, B, C, D, R(71) );
   da1ac:	ea8c 0005 	eor.w	r0, ip, r5
   da1b0:	eb08 0207 	add.w	r2, r8, r7
   da1b4:	4048      	eors	r0, r1
   da1b6:	4472      	add	r2, lr
   da1b8:	4402      	add	r2, r0
    P( D, E, A, B, C, R(72) );
   da1ba:	9809      	ldr	r0, [sp, #36]	; 0x24
   da1bc:	ea80 0e04 	eor.w	lr, r0, r4
   da1c0:	9806      	ldr	r0, [sp, #24]
   da1c2:	ea8e 0e00 	eor.w	lr, lr, r0
   da1c6:	980d      	ldr	r0, [sp, #52]	; 0x34
   da1c8:	ea8e 0e00 	eor.w	lr, lr, r0
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
   da1cc:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
   da1d0:	ea4f 7efe 	mov.w	lr, lr, ror #31
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
   da1d4:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, R(72) );
   da1d8:	ea85 0401 	eor.w	r4, r5, r1
   da1dc:	eb0e 0007 	add.w	r0, lr, r7
   da1e0:	405c      	eors	r4, r3
   da1e2:	4460      	add	r0, ip
   da1e4:	4420      	add	r0, r4
    P( C, D, E, A, B, R(73) );
   da1e6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   da1e8:	ea8b 0c04 	eor.w	ip, fp, r4
   da1ec:	9c07      	ldr	r4, [sp, #28]
   da1ee:	ea8c 0c04 	eor.w	ip, ip, r4
   da1f2:	ea8c 0c09 	eor.w	ip, ip, r9
   da1f6:	ea4f 7cfc 	mov.w	ip, ip, ror #31
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
   da1fa:	eb02 62f3 	add.w	r2, r2, r3, ror #27
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
   da1fe:	eb0c 0407 	add.w	r4, ip, r7
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
   da202:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( C, D, E, A, B, R(73) );
   da206:	ea81 0b03 	eor.w	fp, r1, r3
   da20a:	442c      	add	r4, r5
    P( B, C, D, E, A, R(74) );
   da20c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
   da20e:	ea8b 0b02 	eor.w	fp, fp, r2
   da212:	445c      	add	r4, fp
    P( B, C, D, E, A, R(74) );
   da214:	46ab      	mov	fp, r5
   da216:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   da218:	ea8b 0505 	eor.w	r5, fp, r5
   da21c:	406e      	eors	r6, r5
   da21e:	ea86 0608 	eor.w	r6, r6, r8
   da222:	ea4f 75f6 	mov.w	r5, r6, ror #31
   da226:	9509      	str	r5, [sp, #36]	; 0x24
   da228:	9e09      	ldr	r6, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
   da22a:	eb00 60f2 	add.w	r0, r0, r2, ror #27
    P( C, D, E, A, B, R(73) );
   da22e:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, R(74) );
   da232:	eb06 0b07 	add.w	fp, r6, r7
   da236:	ea83 0502 	eor.w	r5, r3, r2
   da23a:	4459      	add	r1, fp
   da23c:	4045      	eors	r5, r0
   da23e:	440d      	add	r5, r1
    P( A, B, C, D, E, R(75) );
   da240:	990b      	ldr	r1, [sp, #44]	; 0x2c
   da242:	460e      	mov	r6, r1
   da244:	9902      	ldr	r1, [sp, #8]
   da246:	4071      	eors	r1, r6
   da248:	ea81 0a0a 	eor.w	sl, r1, sl
   da24c:	ea8a 0e0e 	eor.w	lr, sl, lr
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
   da250:	eb04 64f0 	add.w	r4, r4, r0, ror #27
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
   da254:	ea4f 7efe 	mov.w	lr, lr, ror #31
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
   da258:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( A, B, C, D, E, R(75) );
   da25c:	eb0e 0a07 	add.w	sl, lr, r7
   da260:	ea82 0100 	eor.w	r1, r2, r0
   da264:	4453      	add	r3, sl
   da266:	4061      	eors	r1, r4
   da268:	4419      	add	r1, r3
    P( E, A, B, C, D, R(76) );
   da26a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   da26c:	461e      	mov	r6, r3
   da26e:	9b03      	ldr	r3, [sp, #12]
   da270:	4073      	eors	r3, r6
   da272:	9e08      	ldr	r6, [sp, #32]
   da274:	4073      	eors	r3, r6
   da276:	ea83 0c0c 	eor.w	ip, r3, ip
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
   da27a:	eb05 65f4 	add.w	r5, r5, r4, ror #27
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
   da27e:	ea4f 7cfc 	mov.w	ip, ip, ror #31
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
   da282:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(76) );
   da286:	eb0c 0a07 	add.w	sl, ip, r7
   da28a:	ea80 0304 	eor.w	r3, r0, r4
   da28e:	4452      	add	r2, sl
   da290:	406b      	eors	r3, r5
    P( D, E, A, B, C, R(77) );
   da292:	9e04      	ldr	r6, [sp, #16]
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
   da294:	4413      	add	r3, r2
    P( D, E, A, B, C, R(77) );
   da296:	9a02      	ldr	r2, [sp, #8]
   da298:	4072      	eors	r2, r6
   da29a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   da29c:	4072      	eors	r2, r6
   da29e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   da2a0:	4072      	eors	r2, r6
   da2a2:	eb07 72f2 	add.w	r2, r7, r2, ror #31
    P( C, D, E, A, B, R(78) );
   da2a6:	9e06      	ldr	r6, [sp, #24]
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
   da2a8:	4410      	add	r0, r2
    P( C, D, E, A, B, R(78) );
   da2aa:	9a03      	ldr	r2, [sp, #12]
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
   da2ac:	eb01 61f5 	add.w	r1, r1, r5, ror #27
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
   da2b0:	4072      	eors	r2, r6
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
   da2b2:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( D, E, A, B, C, R(77) );
   da2b6:	ea84 0a05 	eor.w	sl, r4, r5
    P( C, D, E, A, B, R(78) );
   da2ba:	ea82 0909 	eor.w	r9, r2, r9
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
   da2be:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( D, E, A, B, C, R(77) );
   da2c2:	ea8a 0a01 	eor.w	sl, sl, r1
    P( C, D, E, A, B, R(78) );
   da2c6:	ea89 090e 	eor.w	r9, r9, lr
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
   da2ca:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(78) );
   da2ce:	eb07 79f9 	add.w	r9, r7, r9, ror #31
   da2d2:	ea85 0601 	eor.w	r6, r5, r1
   da2d6:	405e      	eors	r6, r3
   da2d8:	444c      	add	r4, r9
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
   da2da:	9a04      	ldr	r2, [sp, #16]
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
   da2dc:	4434      	add	r4, r6
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
   da2de:	9e07      	ldr	r6, [sp, #28]
   da2e0:	4072      	eors	r2, r6
   da2e2:	ea82 0808 	eor.w	r8, r2, r8
   da2e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
   da2e8:	4450      	add	r0, sl
   da2ea:	eb00 60f3 	add.w	r0, r0, r3, ror #27
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
   da2ee:	4417      	add	r7, r2
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
   da2f0:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
   da2f4:	ea88 0c0c 	eor.w	ip, r8, ip
   da2f8:	ea81 0603 	eor.w	r6, r1, r3
   da2fc:	eb07 7cfc 	add.w	ip, r7, ip, ror #31
   da300:	4046      	eors	r6, r0
   da302:	4465      	add	r5, ip
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
   da304:	eb04 64f0 	add.w	r4, r4, r0, ror #27
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
   da308:	9a01      	ldr	r2, [sp, #4]
   da30a:	4435      	add	r5, r6
   da30c:	eb05 65f4 	add.w	r5, r5, r4, ror #27
   da310:	6095      	str	r5, [r2, #8]
    ctx->state[1] += B;
   da312:	9a14      	ldr	r2, [sp, #80]	; 0x50
   da314:	e002      	b.n	da31c <mbedtls_internal_sha1_process+0xf40>
   da316:	bf00      	nop
   da318:	ca62c1d6 	.word	0xca62c1d6
   da31c:	4414      	add	r4, r2
   da31e:	9a01      	ldr	r2, [sp, #4]
   da320:	60d4      	str	r4, [r2, #12]
    ctx->state[2] += C;
   da322:	9a05      	ldr	r2, [sp, #20]
   da324:	eb02 00b0 	add.w	r0, r2, r0, ror #2
   da328:	9a01      	ldr	r2, [sp, #4]
   da32a:	6110      	str	r0, [r2, #16]
    ctx->state[3] += D;
   da32c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   da32e:	4413      	add	r3, r2
   da330:	9a01      	ldr	r2, [sp, #4]
   da332:	6153      	str	r3, [r2, #20]
    ctx->state[4] += E;
   da334:	9b15      	ldr	r3, [sp, #84]	; 0x54

    return( 0 );
}
   da336:	2000      	movs	r0, #0

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
   da338:	4419      	add	r1, r3
   da33a:	6191      	str	r1, [r2, #24]

    return( 0 );
}
   da33c:	b017      	add	sp, #92	; 0x5c
   da33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da342:	bf00      	nop

000da344 <mbedtls_sha1_update_ret>:
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
   da344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da348:	4604      	mov	r4, r0
   da34a:	460e      	mov	r6, r1
    uint32_t left;

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
   da34c:	4615      	mov	r5, r2
   da34e:	b382      	cbz	r2, da3b2 <mbedtls_sha1_update_ret+0x6e>
        return( 0 );

    left = ctx->total[0] & 0x3F;
   da350:	6803      	ldr	r3, [r0, #0]
   da352:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
   da356:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
   da358:	429a      	cmp	r2, r3
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
   da35a:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
   da35c:	bf82      	ittt	hi
   da35e:	6863      	ldrhi	r3, [r4, #4]
   da360:	3301      	addhi	r3, #1
   da362:	6063      	strhi	r3, [r4, #4]

    if( left && ilen >= fill )
   da364:	b180      	cbz	r0, da388 <mbedtls_sha1_update_ret+0x44>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
   da366:	f1c0 0740 	rsb	r7, r0, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
   da36a:	42ba      	cmp	r2, r7
   da36c:	d31b      	bcc.n	da3a6 <mbedtls_sha1_update_ret+0x62>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
   da36e:	f104 081c 	add.w	r8, r4, #28
   da372:	463a      	mov	r2, r7
   da374:	4440      	add	r0, r8
   da376:	f00c fdea 	bl	e6f4e <memcpy>

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
   da37a:	4641      	mov	r1, r8
   da37c:	4620      	mov	r0, r4
   da37e:	f7ff f82d 	bl	d93dc <mbedtls_internal_sha1_process>
   da382:	b9b8      	cbnz	r0, da3b4 <mbedtls_sha1_update_ret+0x70>
            return( ret );

        input += fill;
   da384:	443e      	add	r6, r7
        ilen  -= fill;
   da386:	1bed      	subs	r5, r5, r7
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
   da388:	462f      	mov	r7, r5
   da38a:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
   da38c:	2f3f      	cmp	r7, #63	; 0x3f
   da38e:	4431      	add	r1, r6
   da390:	d905      	bls.n	da39e <mbedtls_sha1_update_ret+0x5a>
    {
        if( ( ret = mbedtls_internal_sha1_process( ctx, input ) ) != 0 )
   da392:	4620      	mov	r0, r4
   da394:	f7ff f822 	bl	d93dc <mbedtls_internal_sha1_process>
   da398:	b960      	cbnz	r0, da3b4 <mbedtls_sha1_update_ret+0x70>
            return( ret );

        input += 64;
        ilen  -= 64;
   da39a:	3f40      	subs	r7, #64	; 0x40
   da39c:	e7f5      	b.n	da38a <mbedtls_sha1_update_ret+0x46>
    }

    if( ilen > 0 )
   da39e:	b147      	cbz	r7, da3b2 <mbedtls_sha1_update_ret+0x6e>
   da3a0:	463d      	mov	r5, r7
   da3a2:	460e      	mov	r6, r1
   da3a4:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
   da3a6:	341c      	adds	r4, #28
   da3a8:	462a      	mov	r2, r5
   da3aa:	4631      	mov	r1, r6
   da3ac:	4420      	add	r0, r4
   da3ae:	f00c fdce 	bl	e6f4e <memcpy>

    return( 0 );
   da3b2:	2000      	movs	r0, #0
}
   da3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da3b8 <mbedtls_sha1_finish_ret>:
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
   da3b8:	b570      	push	{r4, r5, r6, lr}
    SHA1_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   da3ba:	6803      	ldr	r3, [r0, #0]
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
   da3bc:	4604      	mov	r4, r0
    SHA1_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   da3be:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
   da3c2:	1c58      	adds	r0, r3, #1
   da3c4:	4423      	add	r3, r4
   da3c6:	2280      	movs	r2, #128	; 0x80

    if( used <= 56 )
   da3c8:	2838      	cmp	r0, #56	; 0x38
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
   da3ca:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
   da3cc:	771a      	strb	r2, [r3, #28]
   da3ce:	f104 061c 	add.w	r6, r4, #28

    if( used <= 56 )
   da3d2:	d804      	bhi.n	da3de <mbedtls_sha1_finish_ret+0x26>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
   da3d4:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   da3d8:	2100      	movs	r1, #0
   da3da:	4430      	add	r0, r6
   da3dc:	e00e      	b.n	da3fc <mbedtls_sha1_finish_ret+0x44>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
   da3de:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   da3e2:	2100      	movs	r1, #0
   da3e4:	4430      	add	r0, r6
   da3e6:	f00c fdd8 	bl	e6f9a <memset>

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
   da3ea:	4631      	mov	r1, r6
   da3ec:	4620      	mov	r0, r4
   da3ee:	f7fe fff5 	bl	d93dc <mbedtls_internal_sha1_process>
   da3f2:	2800      	cmp	r0, #0
   da3f4:	d153      	bne.n	da49e <mbedtls_sha1_finish_ret+0xe6>
            return( ret );

        memset( ctx->buffer, 0, 56 );
   da3f6:	4601      	mov	r1, r0
   da3f8:	2238      	movs	r2, #56	; 0x38
   da3fa:	4630      	mov	r0, r6
   da3fc:	f00c fdcd 	bl	e6f9a <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
   da400:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
   da402:	6861      	ldr	r1, [r4, #4]
   da404:	0f5a      	lsrs	r2, r3, #29
   da406:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   da40a:	0e11      	lsrs	r1, r2, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
   da40c:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   da40e:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
   da412:	0c11      	lsrs	r1, r2, #16
   da414:	f884 1055 	strb.w	r1, [r4, #85]	; 0x55
   da418:	f884 2057 	strb.w	r2, [r4, #87]	; 0x57
   da41c:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
   da41e:	0e1a      	lsrs	r2, r3, #24
   da420:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
   da424:	0c1a      	lsrs	r2, r3, #16
   da426:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
   da42a:	0a1a      	lsrs	r2, r3, #8
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   da42c:	f884 1056 	strb.w	r1, [r4, #86]	; 0x56
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
   da430:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
   da434:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b

    if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
   da438:	4631      	mov	r1, r6
   da43a:	4620      	mov	r0, r4
   da43c:	f7fe ffce 	bl	d93dc <mbedtls_internal_sha1_process>
   da440:	2800      	cmp	r0, #0
   da442:	d12c      	bne.n	da49e <mbedtls_sha1_finish_ret+0xe6>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
   da444:	7ae3      	ldrb	r3, [r4, #11]
   da446:	702b      	strb	r3, [r5, #0]
   da448:	8963      	ldrh	r3, [r4, #10]
   da44a:	706b      	strb	r3, [r5, #1]
   da44c:	68a3      	ldr	r3, [r4, #8]
   da44e:	0a1b      	lsrs	r3, r3, #8
   da450:	70ab      	strb	r3, [r5, #2]
   da452:	68a3      	ldr	r3, [r4, #8]
   da454:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
   da456:	7be3      	ldrb	r3, [r4, #15]
   da458:	712b      	strb	r3, [r5, #4]
   da45a:	89e3      	ldrh	r3, [r4, #14]
   da45c:	716b      	strb	r3, [r5, #5]
   da45e:	68e3      	ldr	r3, [r4, #12]
   da460:	0a1b      	lsrs	r3, r3, #8
   da462:	71ab      	strb	r3, [r5, #6]
   da464:	68e3      	ldr	r3, [r4, #12]
   da466:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
   da468:	7ce3      	ldrb	r3, [r4, #19]
   da46a:	722b      	strb	r3, [r5, #8]
   da46c:	8a63      	ldrh	r3, [r4, #18]
   da46e:	726b      	strb	r3, [r5, #9]
   da470:	6923      	ldr	r3, [r4, #16]
   da472:	0a1b      	lsrs	r3, r3, #8
   da474:	72ab      	strb	r3, [r5, #10]
   da476:	6923      	ldr	r3, [r4, #16]
   da478:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
   da47a:	7de3      	ldrb	r3, [r4, #23]
   da47c:	732b      	strb	r3, [r5, #12]
   da47e:	8ae3      	ldrh	r3, [r4, #22]
   da480:	736b      	strb	r3, [r5, #13]
   da482:	6963      	ldr	r3, [r4, #20]
   da484:	0a1b      	lsrs	r3, r3, #8
   da486:	73ab      	strb	r3, [r5, #14]
   da488:	6963      	ldr	r3, [r4, #20]
   da48a:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
   da48c:	7ee3      	ldrb	r3, [r4, #27]
   da48e:	742b      	strb	r3, [r5, #16]
   da490:	8b63      	ldrh	r3, [r4, #26]
   da492:	746b      	strb	r3, [r5, #17]
   da494:	69a3      	ldr	r3, [r4, #24]
   da496:	0a1b      	lsrs	r3, r3, #8
   da498:	74ab      	strb	r3, [r5, #18]
   da49a:	69a3      	ldr	r3, [r4, #24]
   da49c:	74eb      	strb	r3, [r5, #19]

    return( 0 );
}
   da49e:	bd70      	pop	{r4, r5, r6, pc}

000da4a0 <mbedtls_sha1_ret>:
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
   da4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   da4a2:	b099      	sub	sp, #100	; 0x64
   da4a4:	4606      	mov	r6, r0
    mbedtls_sha1_context ctx;

    SHA1_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA1_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha1_init( &ctx );
   da4a6:	a801      	add	r0, sp, #4
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
   da4a8:	460f      	mov	r7, r1
   da4aa:	4615      	mov	r5, r2
    mbedtls_sha1_context ctx;

    SHA1_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA1_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha1_init( &ctx );
   da4ac:	f7fe ff6e 	bl	d938c <mbedtls_sha1_init>

    if( ( ret = mbedtls_sha1_starts_ret( &ctx ) ) != 0 )
   da4b0:	a801      	add	r0, sp, #4
   da4b2:	f7fe ff79 	bl	d93a8 <mbedtls_sha1_starts_ret>
   da4b6:	4604      	mov	r4, r0
   da4b8:	b958      	cbnz	r0, da4d2 <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_update_ret( &ctx, input, ilen ) ) != 0 )
   da4ba:	463a      	mov	r2, r7
   da4bc:	4631      	mov	r1, r6
   da4be:	a801      	add	r0, sp, #4
   da4c0:	f7ff ff40 	bl	da344 <mbedtls_sha1_update_ret>
   da4c4:	4604      	mov	r4, r0
   da4c6:	b920      	cbnz	r0, da4d2 <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_finish_ret( &ctx, output ) ) != 0 )
   da4c8:	4629      	mov	r1, r5
   da4ca:	a801      	add	r0, sp, #4
   da4cc:	f7ff ff74 	bl	da3b8 <mbedtls_sha1_finish_ret>
   da4d0:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha1_free( &ctx );
   da4d2:	a801      	add	r0, sp, #4
   da4d4:	f7fe ff5e 	bl	d9394 <mbedtls_sha1_free>

    return( ret );
}
   da4d8:	4620      	mov	r0, r4
   da4da:	b019      	add	sp, #100	; 0x64
   da4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000da4e0 <mbedtls_platform_zeroize>:

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
   da4e0:	460a      	mov	r2, r1
   da4e2:	b119      	cbz	r1, da4ec <mbedtls_platform_zeroize+0xc>
        memset_func( buf, 0, len );
   da4e4:	4b02      	ldr	r3, [pc, #8]	; (da4f0 <mbedtls_platform_zeroize+0x10>)
   da4e6:	2100      	movs	r1, #0
   da4e8:	681b      	ldr	r3, [r3, #0]
   da4ea:	4718      	bx	r3
   da4ec:	4770      	bx	lr
   da4ee:	bf00      	nop
   da4f0:	2003aeec 	.word	0x2003aeec

000da4f4 <mbedtls_timing_get_timer.part.0>:
    (void) _beginthread( TimerProc, 0, NULL );
}

#else /* _WIN32 && !EFIX64 && !EFI32 */

unsigned long mbedtls_timing_get_timer( struct mbedtls_timing_hr_time *val, int reset )
   da4f4:	b513      	push	{r0, r1, r4, lr}
   da4f6:	4604      	mov	r4, r0
    }
    else
    {
        unsigned long delta;
        struct timeval now;
        gettimeofday( &now, NULL );
   da4f8:	2100      	movs	r1, #0
   da4fa:	4668      	mov	r0, sp
   da4fc:	f00c fe5e 	bl	e71bc <gettimeofday>
        delta = ( now.tv_sec  - t->start.tv_sec  ) * 1000ul
              + ( now.tv_usec - t->start.tv_usec ) / 1000;
   da500:	9b00      	ldr	r3, [sp, #0]
   da502:	6822      	ldr	r2, [r4, #0]
   da504:	6861      	ldr	r1, [r4, #4]
   da506:	1a9a      	subs	r2, r3, r2
   da508:	9b01      	ldr	r3, [sp, #4]
   da50a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   da50e:	1a5b      	subs	r3, r3, r1
   da510:	fb93 f3f0 	sdiv	r3, r3, r0
        return( delta );
    }
}
   da514:	fb00 3002 	mla	r0, r0, r2, r3
   da518:	b002      	add	sp, #8
   da51a:	bd10      	pop	{r4, pc}

000da51c <_gettimeofday>:
#define HAVE_HARDCLOCK

#include "rtc_hal.h"
#include "timer_hal.h"
extern "C" int _gettimeofday( struct timeval *tv, void *tzvp )
{
   da51c:	b538      	push	{r3, r4, r5, lr}
   da51e:	4604      	mov	r4, r0
    uint32_t t = HAL_Timer_Milliseconds();  // get uptime
   da520:	f00a fd70 	bl	e5004 <HAL_Timer_Get_Milli_Seconds>
   da524:	4605      	mov	r5, r0
    tv->tv_sec = HAL_RTC_Get_UnixTime();    // get rtc time before Particle.syncTime()
   da526:	f00a fd75 	bl	e5014 <HAL_RTC_Get_UnixTime>
    tv->tv_usec = ( t % 1000 )*1000;        // get remaining microseconds
   da52a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
#include "rtc_hal.h"
#include "timer_hal.h"
extern "C" int _gettimeofday( struct timeval *tv, void *tzvp )
{
    uint32_t t = HAL_Timer_Milliseconds();  // get uptime
    tv->tv_sec = HAL_RTC_Get_UnixTime();    // get rtc time before Particle.syncTime()
   da52e:	6020      	str	r0, [r4, #0]
    tv->tv_usec = ( t % 1000 )*1000;        // get remaining microseconds
   da530:	fbb5 f0f3 	udiv	r0, r5, r3
   da534:	fb03 5010 	mls	r0, r3, r0, r5
   da538:	4343      	muls	r3, r0
   da53a:	6063      	str	r3, [r4, #4]
    return 0;
} // end _gettimeofday()
   da53c:	2000      	movs	r0, #0
   da53e:	bd38      	pop	{r3, r4, r5, pc}

000da540 <mbedtls_timing_set_delay>:
 */
void mbedtls_timing_set_delay( void *data, uint32_t int_ms, uint32_t fin_ms )
{
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;

    ctx->int_ms = int_ms;
   da540:	6201      	str	r1, [r0, #32]
    ctx->fin_ms = fin_ms;
   da542:	6242      	str	r2, [r0, #36]	; 0x24

    if( fin_ms != 0 )
   da544:	b112      	cbz	r2, da54c <mbedtls_timing_set_delay+0xc>
{
    struct _hr_time *t = (struct _hr_time *) val;

    if( reset )
    {
        gettimeofday( &t->start, NULL );
   da546:	2100      	movs	r1, #0
   da548:	f00c be38 	b.w	e71bc <gettimeofday>
   da54c:	4770      	bx	lr

000da54e <mbedtls_timing_get_delay>:

/*
 * Get number of delays expired
 */
int mbedtls_timing_get_delay( void *data )
{
   da54e:	b510      	push	{r4, lr}
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
   da550:	6a43      	ldr	r3, [r0, #36]	; 0x24

/*
 * Get number of delays expired
 */
int mbedtls_timing_get_delay( void *data )
{
   da552:	4604      	mov	r4, r0
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
   da554:	b153      	cbz	r3, da56c <mbedtls_timing_get_delay+0x1e>
   da556:	f7ff ffcd 	bl	da4f4 <mbedtls_timing_get_timer.part.0>
        return( -1 );

    elapsed_ms = mbedtls_timing_get_timer( &ctx->timer, 0 );

    if( elapsed_ms >= ctx->fin_ms )
   da55a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da55c:	4283      	cmp	r3, r0
   da55e:	d908      	bls.n	da572 <mbedtls_timing_get_delay+0x24>
{
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
        return( -1 );
   da560:	6a23      	ldr	r3, [r4, #32]
   da562:	4283      	cmp	r3, r0
   da564:	bf8c      	ite	hi
   da566:	2000      	movhi	r0, #0
   da568:	2001      	movls	r0, #1
   da56a:	bd10      	pop	{r4, pc}
   da56c:	f04f 30ff 	mov.w	r0, #4294967295
   da570:	bd10      	pop	{r4, pc}

    elapsed_ms = mbedtls_timing_get_timer( &ctx->timer, 0 );

    if( elapsed_ms >= ctx->fin_ms )
        return( 2 );
   da572:	2002      	movs	r0, #2

    if( elapsed_ms >= ctx->int_ms )
        return( 1 );

    return( 0 );
}
   da574:	bd10      	pop	{r4, pc}

000da576 <mbedtls_pkcs5_pbkdf2_hmac>:

int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx, const unsigned char *password,
                       size_t plen, const unsigned char *salt, size_t slen,
                       unsigned int iteration_count,
                       uint32_t key_length, unsigned char *output )
{
   da576:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da57a:	b0a5      	sub	sp, #148	; 0x94
   da57c:	4604      	mov	r4, r0
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
   da57e:	6800      	ldr	r0, [r0, #0]

int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx, const unsigned char *password,
                       size_t plen, const unsigned char *salt, size_t slen,
                       unsigned int iteration_count,
                       uint32_t key_length, unsigned char *output )
{
   da580:	9301      	str	r3, [sp, #4]
   da582:	460f      	mov	r7, r1
   da584:	4693      	mov	fp, r2
   da586:	9e30      	ldr	r6, [sp, #192]	; 0xc0
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
   da588:	f001 ff86 	bl	dc498 <mbedtls_md_get_size>
    size_t use_len;
    unsigned char *out_p = output;
    unsigned char counter[4];

    memset( counter, 0, 4 );
   da58c:	2300      	movs	r3, #0
   da58e:	9303      	str	r3, [sp, #12]
    counter[3] = 1;
   da590:	2301      	movs	r3, #1
{
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
   da592:	4681      	mov	r9, r0
    size_t use_len;
    unsigned char *out_p = output;
    unsigned char counter[4];

    memset( counter, 0, 4 );
    counter[3] = 1;
   da594:	f88d 300f 	strb.w	r3, [sp, #15]
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
            return( ret );

        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
   da598:	f10d 0850 	add.w	r8, sp, #80	; 0x50
#if UINT_MAX > 0xFFFFFFFF
    if( iteration_count > 0xFFFFFFFF )
        return( MBEDTLS_ERR_PKCS5_BAD_INPUT_DATA );
#endif

    while( key_length )
   da59c:	2e00      	cmp	r6, #0
   da59e:	d05c      	beq.n	da65a <mbedtls_pkcs5_pbkdf2_hmac+0xe4>
    {
        // U1 ends up in work
        //
        if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
   da5a0:	465a      	mov	r2, fp
   da5a2:	4639      	mov	r1, r7
   da5a4:	4620      	mov	r0, r4
   da5a6:	f001 febb 	bl	dc320 <mbedtls_md_hmac_starts>
   da5aa:	2800      	cmp	r0, #0
   da5ac:	d156      	bne.n	da65c <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, salt, slen ) ) != 0 )
   da5ae:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   da5b0:	9901      	ldr	r1, [sp, #4]
   da5b2:	4620      	mov	r0, r4
   da5b4:	f001 ff14 	bl	dc3e0 <mbedtls_md_hmac_update>
   da5b8:	2800      	cmp	r0, #0
   da5ba:	d14f      	bne.n	da65c <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
   da5bc:	2204      	movs	r2, #4
   da5be:	a903      	add	r1, sp, #12
   da5c0:	4620      	mov	r0, r4
   da5c2:	f001 ff0d 	bl	dc3e0 <mbedtls_md_hmac_update>
   da5c6:	2800      	cmp	r0, #0
   da5c8:	d148      	bne.n	da65c <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
   da5ca:	4641      	mov	r1, r8
   da5cc:	4620      	mov	r0, r4
   da5ce:	f001 ff19 	bl	dc404 <mbedtls_md_hmac_finish>
   da5d2:	2800      	cmp	r0, #0
   da5d4:	d142      	bne.n	da65c <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        memcpy( md1, work, md_size );
   da5d6:	ad04      	add	r5, sp, #16
   da5d8:	464a      	mov	r2, r9
   da5da:	4641      	mov	r1, r8
   da5dc:	4628      	mov	r0, r5
   da5de:	f00c fcb6 	bl	e6f4e <memcpy>

        for( i = 1; i < iteration_count; i++ )
   da5e2:	f04f 0a01 	mov.w	sl, #1
   da5e6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   da5e8:	459a      	cmp	sl, r3
   da5ea:	d21d      	bcs.n	da628 <mbedtls_pkcs5_pbkdf2_hmac+0xb2>
        {
            // U2 ends up in md1
            //
            if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
   da5ec:	465a      	mov	r2, fp
   da5ee:	4639      	mov	r1, r7
   da5f0:	4620      	mov	r0, r4
   da5f2:	f001 fe95 	bl	dc320 <mbedtls_md_hmac_starts>
   da5f6:	bb88      	cbnz	r0, da65c <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            if( ( ret = mbedtls_md_hmac_update( ctx, md1, md_size ) ) != 0 )
   da5f8:	464a      	mov	r2, r9
   da5fa:	4629      	mov	r1, r5
   da5fc:	4620      	mov	r0, r4
   da5fe:	f001 feef 	bl	dc3e0 <mbedtls_md_hmac_update>
   da602:	bb58      	cbnz	r0, da65c <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
   da604:	4629      	mov	r1, r5
   da606:	4620      	mov	r0, r4
   da608:	f001 fefc 	bl	dc404 <mbedtls_md_hmac_finish>
   da60c:	bb30      	cbnz	r0, da65c <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            // U1 xor U2
            //
            for( j = 0; j < md_size; j++ )
   da60e:	4548      	cmp	r0, r9
   da610:	da07      	bge.n	da622 <mbedtls_pkcs5_pbkdf2_hmac+0xac>
                work[j] ^= md1[j];
   da612:	f810 2008 	ldrb.w	r2, [r0, r8]
   da616:	5d43      	ldrb	r3, [r0, r5]
   da618:	4053      	eors	r3, r2
   da61a:	f800 3008 	strb.w	r3, [r0, r8]
            if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
                return( ret );

            // U1 xor U2
            //
            for( j = 0; j < md_size; j++ )
   da61e:	3001      	adds	r0, #1
   da620:	e7f5      	b.n	da60e <mbedtls_pkcs5_pbkdf2_hmac+0x98>
        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
            return( ret );

        memcpy( md1, work, md_size );

        for( i = 1; i < iteration_count; i++ )
   da622:	f10a 0a01 	add.w	sl, sl, #1
   da626:	e7de      	b.n	da5e6 <mbedtls_pkcs5_pbkdf2_hmac+0x70>
            //
            for( j = 0; j < md_size; j++ )
                work[j] ^= md1[j];
        }

        use_len = ( key_length < md_size ) ? key_length : md_size;
   da628:	454e      	cmp	r6, r9
   da62a:	4635      	mov	r5, r6
   da62c:	bf28      	it	cs
   da62e:	464d      	movcs	r5, r9
        memcpy( out_p, work, use_len );
   da630:	462a      	mov	r2, r5
   da632:	4641      	mov	r1, r8
   da634:	9831      	ldr	r0, [sp, #196]	; 0xc4
   da636:	f00c fc8a 	bl	e6f4e <memcpy>

        key_length -= (uint32_t) use_len;
        out_p += use_len;
   da63a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
   da63c:	442b      	add	r3, r5
        }

        use_len = ( key_length < md_size ) ? key_length : md_size;
        memcpy( out_p, work, use_len );

        key_length -= (uint32_t) use_len;
   da63e:	1b76      	subs	r6, r6, r5
        out_p += use_len;
   da640:	9331      	str	r3, [sp, #196]	; 0xc4
   da642:	aa04      	add	r2, sp, #16

        for( i = 4; i > 0; i-- )
            if( ++counter[i - 1] != 0 )
   da644:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
   da648:	3301      	adds	r3, #1
   da64a:	b2db      	uxtb	r3, r3
   da64c:	7013      	strb	r3, [r2, #0]
   da64e:	2b00      	cmp	r3, #0
   da650:	d1a4      	bne.n	da59c <mbedtls_pkcs5_pbkdf2_hmac+0x26>
        memcpy( out_p, work, use_len );

        key_length -= (uint32_t) use_len;
        out_p += use_len;

        for( i = 4; i > 0; i-- )
   da652:	ab03      	add	r3, sp, #12
   da654:	4293      	cmp	r3, r2
   da656:	d1f5      	bne.n	da644 <mbedtls_pkcs5_pbkdf2_hmac+0xce>
   da658:	e7a0      	b.n	da59c <mbedtls_pkcs5_pbkdf2_hmac+0x26>
            if( ++counter[i - 1] != 0 )
                break;
    }

    return( 0 );
   da65a:	4630      	mov	r0, r6
}
   da65c:	b025      	add	sp, #148	; 0x94
   da65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000da664 <mbedtls_pkcs5_pbes2>:

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
   da664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da668:	b0bb      	sub	sp, #236	; 0xec
   da66a:	461f      	mov	r7, r3
    int ret, iterations = 0, keylen = 0;
   da66c:	2300      	movs	r3, #0
   da66e:	9306      	str	r3, [sp, #24]
   da670:	9307      	str	r3, [sp, #28]
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
    unsigned char key[32], iv[32];
    size_t olen = 0;
   da672:	9309      	str	r3, [sp, #36]	; 0x24
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
    end = p + pbe_params->len;
   da674:	6844      	ldr	r4, [r0, #4]
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
   da676:	6883      	ldr	r3, [r0, #8]
   da678:	9308      	str	r3, [sp, #32]
    end = p + pbe_params->len;
   da67a:	441c      	add	r4, r3
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   da67c:	6803      	ldr	r3, [r0, #0]
{
    int ret, iterations = 0, keylen = 0;
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
   da67e:	f04f 0904 	mov.w	r9, #4
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   da682:	2b30      	cmp	r3, #48	; 0x30

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
   da684:	460d      	mov	r5, r1
   da686:	4616      	mov	r6, r2
    int ret, iterations = 0, keylen = 0;
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
   da688:	f88d 9016 	strb.w	r9, [sp, #22]
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   da68c:	f040 80c9 	bne.w	da822 <mbedtls_pkcs5_pbes2+0x1be>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &kdf_alg_oid, &kdf_alg_params ) ) != 0 )
   da690:	ab10      	add	r3, sp, #64	; 0x40
   da692:	aa0a      	add	r2, sp, #40	; 0x28
   da694:	4621      	mov	r1, r4
   da696:	a808      	add	r0, sp, #32
   da698:	f7fb f927 	bl	d58ea <mbedtls_asn1_get_alg>
   da69c:	2800      	cmp	r0, #0
   da69e:	d158      	bne.n	da752 <mbedtls_pkcs5_pbes2+0xee>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    // Only PBKDF2 supported at the moment
    //
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
   da6a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   da6a2:	2a09      	cmp	r2, #9
   da6a4:	d14c      	bne.n	da740 <mbedtls_pkcs5_pbes2+0xdc>
   da6a6:	990c      	ldr	r1, [sp, #48]	; 0x30
   da6a8:	4861      	ldr	r0, [pc, #388]	; (da830 <mbedtls_pkcs5_pbes2+0x1cc>)
   da6aa:	f00c fc41 	bl	e6f30 <memcmp>
   da6ae:	2800      	cmp	r0, #0
   da6b0:	d146      	bne.n	da740 <mbedtls_pkcs5_pbes2+0xdc>
                                      mbedtls_asn1_buf *salt, int *iterations,
                                      int *keylen, mbedtls_md_type_t *md_type )
{
    int ret;
    mbedtls_asn1_buf prf_alg_oid;
    unsigned char *p = params->p;
   da6b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    const unsigned char *end = params->p + params->len;
   da6b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
                                      mbedtls_asn1_buf *salt, int *iterations,
                                      int *keylen, mbedtls_md_type_t *md_type )
{
    int ret;
    mbedtls_asn1_buf prf_alg_oid;
    unsigned char *p = params->p;
   da6b6:	9324      	str	r3, [sp, #144]	; 0x90
    const unsigned char *end = params->p + params->len;
   da6b8:	eb03 0802 	add.w	r8, r3, r2

    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   da6bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   da6be:	2b30      	cmp	r3, #48	; 0x30
   da6c0:	f040 80af 	bne.w	da822 <mbedtls_pkcs5_pbes2+0x1be>
     *    keyLength         INTEGER OPTIONAL
     *    prf               AlgorithmIdentifier DEFAULT algid-hmacWithSHA1
     *  }
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   da6c4:	464b      	mov	r3, r9
   da6c6:	aa17      	add	r2, sp, #92	; 0x5c
   da6c8:	4641      	mov	r1, r8
   da6ca:	a824      	add	r0, sp, #144	; 0x90
   da6cc:	f7fb f830 	bl	d5730 <mbedtls_asn1_get_tag>
   da6d0:	b9f8      	cbnz	r0, da712 <mbedtls_pkcs5_pbes2+0xae>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
   da6d2:	9a24      	ldr	r2, [sp, #144]	; 0x90
    p += salt->len;
   da6d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
   da6d6:	9218      	str	r2, [sp, #96]	; 0x60
    p += salt->len;
   da6d8:	4413      	add	r3, r2

    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
   da6da:	4641      	mov	r1, r8
   da6dc:	aa06      	add	r2, sp, #24
   da6de:	a824      	add	r0, sp, #144	; 0x90
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
    p += salt->len;
   da6e0:	9324      	str	r3, [sp, #144]	; 0x90

    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
   da6e2:	f7fb f852 	bl	d578a <mbedtls_asn1_get_int>
   da6e6:	b9a0      	cbnz	r0, da712 <mbedtls_pkcs5_pbes2+0xae>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( p == end )
   da6e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   da6ea:	4598      	cmp	r8, r3
   da6ec:	d022      	beq.n	da734 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_int( &p, end, keylen ) ) != 0 )
   da6ee:	aa07      	add	r2, sp, #28
   da6f0:	4641      	mov	r1, r8
   da6f2:	a824      	add	r0, sp, #144	; 0x90
   da6f4:	f7fb f849 	bl	d578a <mbedtls_asn1_get_int>
   da6f8:	b110      	cbz	r0, da700 <mbedtls_pkcs5_pbes2+0x9c>
    {
        if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   da6fa:	f110 0f62 	cmn.w	r0, #98	; 0x62
   da6fe:	d108      	bne.n	da712 <mbedtls_pkcs5_pbes2+0xae>
            return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
    }

    if( p == end )
   da700:	9b24      	ldr	r3, [sp, #144]	; 0x90
   da702:	4598      	cmp	r8, r3
   da704:	d016      	beq.n	da734 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
   da706:	aa2c      	add	r2, sp, #176	; 0xb0
   da708:	4641      	mov	r1, r8
   da70a:	a824      	add	r0, sp, #144	; 0x90
   da70c:	f7fb f93a 	bl	d5984 <mbedtls_asn1_get_alg_null>
   da710:	b128      	cbz	r0, da71e <mbedtls_pkcs5_pbes2+0xba>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
   da712:	f5a0 503c 	sub.w	r0, r0, #12032	; 0x2f00
    // Only PBKDF2 supported at the moment
    //
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( ( ret = pkcs5_parse_pbkdf2_params( &kdf_alg_params,
   da716:	2800      	cmp	r0, #0
   da718:	f040 8086 	bne.w	da828 <mbedtls_pkcs5_pbes2+0x1c4>
   da71c:	e00a      	b.n	da734 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
   da71e:	f10d 0116 	add.w	r1, sp, #22
   da722:	a82c      	add	r0, sp, #176	; 0xb0
   da724:	f7fe fdfc 	bl	d9320 <mbedtls_oid_get_md_hmac>
   da728:	b950      	cbnz	r0, da740 <mbedtls_pkcs5_pbes2+0xdc>
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( p != end )
   da72a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   da72c:	4598      	cmp	r8, r3
   da72e:	d001      	beq.n	da734 <mbedtls_pkcs5_pbes2+0xd0>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   da730:	4840      	ldr	r0, [pc, #256]	; (da834 <mbedtls_pkcs5_pbes2+0x1d0>)
   da732:	e079      	b.n	da828 <mbedtls_pkcs5_pbes2+0x1c4>
                                           &md_type ) ) != 0 )
    {
        return( ret );
    }

    md_info = mbedtls_md_info_from_type( md_type );
   da734:	f89d 0016 	ldrb.w	r0, [sp, #22]
   da738:	f001 fd76 	bl	dc228 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   da73c:	4681      	mov	r9, r0
   da73e:	b908      	cbnz	r0, da744 <mbedtls_pkcs5_pbes2+0xe0>

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );
   da740:	483d      	ldr	r0, [pc, #244]	; (da838 <mbedtls_pkcs5_pbes2+0x1d4>)
   da742:	e071      	b.n	da828 <mbedtls_pkcs5_pbes2+0x1c4>

    md_info = mbedtls_md_info_from_type( md_type );
    if( md_info == NULL )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &enc_scheme_oid,
   da744:	ab13      	add	r3, sp, #76	; 0x4c
   da746:	aa0d      	add	r2, sp, #52	; 0x34
   da748:	4621      	mov	r1, r4
   da74a:	a808      	add	r0, sp, #32
   da74c:	f7fb f8cd 	bl	d58ea <mbedtls_asn1_get_alg>
   da750:	b110      	cbz	r0, da758 <mbedtls_pkcs5_pbes2+0xf4>
                              &enc_scheme_params ) ) != 0 )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
   da752:	f5a0 503c 	sub.w	r0, r0, #12032	; 0x2f00
   da756:	e067      	b.n	da828 <mbedtls_pkcs5_pbes2+0x1c4>
    }

    if( mbedtls_oid_get_cipher_alg( &enc_scheme_oid, &cipher_alg ) != 0 )
   da758:	f10d 0117 	add.w	r1, sp, #23
   da75c:	a80d      	add	r0, sp, #52	; 0x34
   da75e:	f7fe fd97 	bl	d9290 <mbedtls_oid_get_cipher_alg>
   da762:	2800      	cmp	r0, #0
   da764:	d1ec      	bne.n	da740 <mbedtls_pkcs5_pbes2+0xdc>
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    cipher_info = mbedtls_cipher_info_from_type( cipher_alg );
   da766:	f89d 0017 	ldrb.w	r0, [sp, #23]
   da76a:	f7fa fe19 	bl	d53a0 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
   da76e:	4680      	mov	r8, r0
   da770:	2800      	cmp	r0, #0
   da772:	d0e5      	beq.n	da740 <mbedtls_pkcs5_pbes2+0xdc>

    /*
     * The value of keylen from pkcs5_parse_pbkdf2_params() is ignored
     * since it is optional and we don't know if it was set or not
     */
    keylen = cipher_info->key_bitlen / 8;
   da774:	6843      	ldr	r3, [r0, #4]
   da776:	08db      	lsrs	r3, r3, #3
   da778:	9307      	str	r3, [sp, #28]

    if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
   da77a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   da77c:	2b04      	cmp	r3, #4
   da77e:	d152      	bne.n	da826 <mbedtls_pkcs5_pbes2+0x1c2>
   da780:	68c3      	ldr	r3, [r0, #12]
   da782:	9a14      	ldr	r2, [sp, #80]	; 0x50
   da784:	429a      	cmp	r2, r3
   da786:	d14e      	bne.n	da826 <mbedtls_pkcs5_pbes2+0x1c2>
        enc_scheme_params.len != cipher_info->iv_size )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
    }

    mbedtls_md_init( &md_ctx );
   da788:	a819      	add	r0, sp, #100	; 0x64
   da78a:	f001 fd59 	bl	dc240 <mbedtls_md_init>
    mbedtls_cipher_init( &cipher_ctx );
   da78e:	a82c      	add	r0, sp, #176	; 0xb0
   da790:	f7fa fe28 	bl	d53e4 <mbedtls_cipher_init>

    memcpy( iv, enc_scheme_params.p, enc_scheme_params.len );
   da794:	9a14      	ldr	r2, [sp, #80]	; 0x50
   da796:	9915      	ldr	r1, [sp, #84]	; 0x54
   da798:	a824      	add	r0, sp, #144	; 0x90
   da79a:	f00c fbd8 	bl	e6f4e <memcpy>

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
   da79e:	2201      	movs	r2, #1
   da7a0:	4649      	mov	r1, r9
   da7a2:	a819      	add	r0, sp, #100	; 0x64
   da7a4:	f001 fd6c 	bl	dc280 <mbedtls_md_setup>
   da7a8:	4604      	mov	r4, r0
   da7aa:	2800      	cmp	r0, #0
   da7ac:	d131      	bne.n	da812 <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_pkcs5_pbkdf2_hmac( &md_ctx, pwd, pwdlen, salt.p, salt.len,
   da7ae:	9b07      	ldr	r3, [sp, #28]
   da7b0:	9302      	str	r3, [sp, #8]
   da7b2:	9b06      	ldr	r3, [sp, #24]
   da7b4:	9301      	str	r3, [sp, #4]
   da7b6:	f10d 0970 	add.w	r9, sp, #112	; 0x70
   da7ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   da7bc:	9300      	str	r3, [sp, #0]
   da7be:	f8cd 900c 	str.w	r9, [sp, #12]
   da7c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   da7c4:	463a      	mov	r2, r7
   da7c6:	4631      	mov	r1, r6
   da7c8:	a819      	add	r0, sp, #100	; 0x64
   da7ca:	f7ff fed4 	bl	da576 <mbedtls_pkcs5_pbkdf2_hmac>
   da7ce:	4604      	mov	r4, r0
   da7d0:	b9f8      	cbnz	r0, da812 <mbedtls_pkcs5_pbes2+0x1ae>
                                   iterations, keylen, key ) ) != 0 )
    {
        goto exit;
    }

    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
   da7d2:	4641      	mov	r1, r8
   da7d4:	a82c      	add	r0, sp, #176	; 0xb0
   da7d6:	f7fa fe19 	bl	d540c <mbedtls_cipher_setup>
   da7da:	4604      	mov	r4, r0
   da7dc:	b9c8      	cbnz	r0, da812 <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
   da7de:	9a07      	ldr	r2, [sp, #28]
   da7e0:	b26b      	sxtb	r3, r5
   da7e2:	00d2      	lsls	r2, r2, #3
   da7e4:	4649      	mov	r1, r9
   da7e6:	a82c      	add	r0, sp, #176	; 0xb0
   da7e8:	f7fa fe28 	bl	d543c <mbedtls_cipher_setkey>
   da7ec:	4604      	mov	r4, r0
   da7ee:	b980      	cbnz	r0, da812 <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_cipher_crypt( &cipher_ctx, iv, enc_scheme_params.len,
   da7f0:	ab09      	add	r3, sp, #36	; 0x24
   da7f2:	9302      	str	r3, [sp, #8]
   da7f4:	9b44      	ldr	r3, [sp, #272]	; 0x110
   da7f6:	9301      	str	r3, [sp, #4]
   da7f8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   da7fa:	9300      	str	r3, [sp, #0]
   da7fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   da7fe:	9b42      	ldr	r3, [sp, #264]	; 0x108
   da800:	a924      	add	r1, sp, #144	; 0x90
   da802:	a82c      	add	r0, sp, #176	; 0xb0
   da804:	f7fa feca 	bl	d559c <mbedtls_cipher_crypt>
                              data, datalen, output, &olen ) ) != 0 )
        ret = MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH;
   da808:	f5a4 5438 	sub.w	r4, r4, #11776	; 0x2e00
   da80c:	2800      	cmp	r0, #0
   da80e:	bf08      	it	eq
   da810:	2400      	moveq	r4, #0

exit:
    mbedtls_md_free( &md_ctx );
   da812:	a819      	add	r0, sp, #100	; 0x64
   da814:	f001 fd19 	bl	dc24a <mbedtls_md_free>
    mbedtls_cipher_free( &cipher_ctx );
   da818:	a82c      	add	r0, sp, #176	; 0xb0
   da81a:	f7fa fde7 	bl	d53ec <mbedtls_cipher_free>

    return( ret );
   da81e:	4620      	mov	r0, r4
   da820:	e002      	b.n	da828 <mbedtls_pkcs5_pbes2+0x1c4>
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   da822:	4806      	ldr	r0, [pc, #24]	; (da83c <mbedtls_pkcs5_pbes2+0x1d8>)
   da824:	e000      	b.n	da828 <mbedtls_pkcs5_pbes2+0x1c4>
    keylen = cipher_info->key_bitlen / 8;

    if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
        enc_scheme_params.len != cipher_info->iv_size )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
   da826:	4806      	ldr	r0, [pc, #24]	; (da840 <mbedtls_pkcs5_pbes2+0x1dc>)
exit:
    mbedtls_md_free( &md_ctx );
    mbedtls_cipher_free( &cipher_ctx );

    return( ret );
}
   da828:	b03b      	add	sp, #236	; 0xec
   da82a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da82e:	bf00      	nop
   da830:	000e9188 	.word	0x000e9188
   da834:	ffffd09a 	.word	0xffffd09a
   da838:	ffffd180 	.word	0xffffd180
   da83c:	ffffd09e 	.word	0xffffd09e
   da840:	ffffd100 	.word	0xffffd100

000da844 <_ZL12gcm_ctx_freePv>:

    return( ctx );
}

static void gcm_ctx_free( void *ctx )
{
   da844:	b510      	push	{r4, lr}
   da846:	4604      	mov	r4, r0
    mbedtls_gcm_free( (mbedtls_gcm_context *)ctx );
   da848:	f001 fc48 	bl	dc0dc <mbedtls_gcm_free>
    mbedtls_free( ctx );
   da84c:	4620      	mov	r0, r4
}
   da84e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void gcm_ctx_free( void *ctx )
{
    mbedtls_gcm_free( (mbedtls_gcm_context *)ctx );
    mbedtls_free( ctx );
   da852:	f00a bd8b 	b.w	e536c <free>

000da856 <_ZL13gcm_ctx_allocv>:
#endif

#if defined(MBEDTLS_GCM_C)
/* shared by all GCM ciphers */
static void *gcm_ctx_alloc( void )
{
   da856:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
   da858:	f44f 71c0 	mov.w	r1, #384	; 0x180
   da85c:	2001      	movs	r0, #1
   da85e:	f00c fa59 	bl	e6d14 <calloc>

    if( ctx != NULL )
   da862:	4604      	mov	r4, r0
   da864:	b108      	cbz	r0, da86a <_ZL13gcm_ctx_allocv+0x14>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
   da866:	f001 f9a3 	bl	dbbb0 <mbedtls_gcm_init>

    return( ctx );
}
   da86a:	4620      	mov	r0, r4
   da86c:	bd10      	pop	{r4, pc}

000da86e <_ZL19gcm_aes_setkey_wrapPvPKhj>:
#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
                     key, key_bitlen );
   da86e:	4613      	mov	r3, r2
   da870:	460a      	mov	r2, r1
   da872:	2102      	movs	r1, #2
   da874:	f001 b9a1 	b.w	dbbba <mbedtls_gcm_setkey>

000da878 <_ZL12aes_ctx_freePv>:

    return( aes );
}

static void aes_ctx_free( void *ctx )
{
   da878:	b510      	push	{r4, lr}
   da87a:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
   da87c:	f006 fff9 	bl	e1872 <mbedtls_aes_free>
    mbedtls_free( ctx );
   da880:	4620      	mov	r0, r4
}
   da882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void aes_ctx_free( void *ctx )
{
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
    mbedtls_free( ctx );
   da886:	f00a bd71 	b.w	e536c <free>

000da88a <_ZL13aes_ctx_allocv>:
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
}

static void * aes_ctx_alloc( void )
{
   da88a:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = (mbedtls_aes_context *)mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
   da88c:	f44f 718c 	mov.w	r1, #280	; 0x118
   da890:	2001      	movs	r0, #1
   da892:	f00c fa3f 	bl	e6d14 <calloc>

    if( aes == NULL )
   da896:	4604      	mov	r4, r0
   da898:	b108      	cbz	r0, da89e <_ZL13aes_ctx_allocv+0x14>
        return( NULL );

    mbedtls_aes_init( aes );
   da89a:	f006 ffe5 	bl	e1868 <mbedtls_aes_init>

    return( aes );
}
   da89e:	4620      	mov	r0, r4
   da8a0:	bd10      	pop	{r4, pc}

000da8a2 <_ZL19aes_setkey_dec_wrapPvPKhj>:
#endif /* MBEDTLS_CIPHER_MODE_XTS */

static int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
   da8a2:	f007 b8e7 	b.w	e1a74 <mbedtls_aes_setkey_dec>

000da8a6 <_ZL19aes_setkey_enc_wrapPvPKhj>:
}

static int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
   da8a6:	f006 bfeb 	b.w	e1880 <mbedtls_aes_setkey_enc>

000da8aa <_ZL18aes_crypt_ecb_wrapPv19mbedtls_operation_tPKhPh>:
#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
   da8aa:	f007 bce1 	b.w	e2270 <mbedtls_aes_crypt_ecb>

000da8ae <_ZL10rsa_can_do17mbedtls_pk_type_t>:
#include <stdint.h>

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_RSA ||
   da8ae:	2801      	cmp	r0, #1
   da8b0:	d002      	beq.n	da8b8 <_ZL10rsa_can_do17mbedtls_pk_type_t+0xa>
   da8b2:	1f83      	subs	r3, r0, #6
   da8b4:	4258      	negs	r0, r3
   da8b6:	4158      	adcs	r0, r3
            type == MBEDTLS_PK_RSASSA_PSS );
}
   da8b8:	4770      	bx	lr
	...

000da8bc <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item>:
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
   da8bc:	2301      	movs	r3, #1
    items->name = "rsa.N";
   da8be:	4a06      	ldr	r2, [pc, #24]	; (da8d8 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x1c>)
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
   da8c0:	700b      	strb	r3, [r1, #0]
    items->name = "rsa.N";
   da8c2:	604a      	str	r2, [r1, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
   da8c4:	730b      	strb	r3, [r1, #12]

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.N";
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
   da8c6:	f100 0208 	add.w	r2, r0, #8

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
   da8ca:	4b04      	ldr	r3, [pc, #16]	; (da8dc <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x20>)

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.N";
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
   da8cc:	608a      	str	r2, [r1, #8]

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
   da8ce:	3014      	adds	r0, #20
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
   da8d0:	610b      	str	r3, [r1, #16]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
   da8d2:	6148      	str	r0, [r1, #20]
   da8d4:	4770      	bx	lr
   da8d6:	bf00      	nop
   da8d8:	000e92ec 	.word	0x000e92ec
   da8dc:	000e92f2 	.word	0x000e92f2

000da8e0 <_ZL12eckey_can_do17mbedtls_pk_type_t>:
 */
static int eckey_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
            type == MBEDTLS_PK_ECKEY_DH ||
            type == MBEDTLS_PK_ECDSA );
   da8e0:	3802      	subs	r0, #2
}
   da8e2:	2802      	cmp	r0, #2
   da8e4:	bf8c      	ite	hi
   da8e6:	2000      	movhi	r0, #0
   da8e8:	2001      	movls	r0, #1
   da8ea:	4770      	bx	lr

000da8ec <_ZL16eckey_get_bitlenPKv>:

static size_t eckey_get_bitlen( const void *ctx )
{
    return( ((mbedtls_ecp_keypair *) ctx)->grp.pbits );
}
   da8ec:	6d80      	ldr	r0, [r0, #88]	; 0x58
   da8ee:	4770      	bx	lr

000da8f0 <_ZL11eckey_debugPKvP21mbedtls_pk_debug_item>:
    mbedtls_free( ctx );
}

static void eckey_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_ECP;
   da8f0:	2302      	movs	r3, #2
   da8f2:	700b      	strb	r3, [r1, #0]
    items->name = "eckey.Q";
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
   da8f4:	3088      	adds	r0, #136	; 0x88
}

static void eckey_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_ECP;
    items->name = "eckey.Q";
   da8f6:	4b02      	ldr	r3, [pc, #8]	; (da900 <_ZL11eckey_debugPKvP21mbedtls_pk_debug_item+0x10>)
   da8f8:	604b      	str	r3, [r1, #4]
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
   da8fa:	6088      	str	r0, [r1, #8]
   da8fc:	4770      	bx	lr
   da8fe:	bf00      	nop
   da900:	000e92f8 	.word	0x000e92f8

000da904 <_ZL14eckeydh_can_do17mbedtls_pk_type_t>:
 * EC key restricted to ECDH
 */
static int eckeydh_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
            type == MBEDTLS_PK_ECKEY_DH );
   da904:	3802      	subs	r0, #2
}
   da906:	2801      	cmp	r0, #1
   da908:	bf8c      	ite	hi
   da90a:	2000      	movhi	r0, #0
   da90c:	2001      	movls	r0, #1
   da90e:	4770      	bx	lr

000da910 <_ZL12ecdsa_can_do17mbedtls_pk_type_t>:

#if defined(MBEDTLS_ECDSA_C)
static int ecdsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECDSA );
}
   da910:	1f03      	subs	r3, r0, #4
   da912:	4258      	negs	r0, r3
   da914:	4158      	adcs	r0, r3
   da916:	4770      	bx	lr

000da918 <_ZL13rsa_free_wrapPv>:

    return( ctx );
}

static void rsa_free_wrap( void *ctx )
{
   da918:	b510      	push	{r4, lr}
   da91a:	4604      	mov	r4, r0
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
   da91c:	f7fc ff54 	bl	d77c8 <mbedtls_rsa_free>
    mbedtls_free( ctx );
   da920:	4620      	mov	r0, r4
}
   da922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void rsa_free_wrap( void *ctx )
{
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
    mbedtls_free( ctx );
   da926:	f00a bd21 	b.w	e536c <free>

000da92a <_ZL14rsa_alloc_wrapv>:
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
                                (const mbedtls_rsa_context *) prv ) );
}

static void *rsa_alloc_wrap( void )
{
   da92a:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
   da92c:	21ac      	movs	r1, #172	; 0xac
   da92e:	2001      	movs	r0, #1
   da930:	f00c f9f0 	bl	e6d14 <calloc>

    if( ctx != NULL )
   da934:	4604      	mov	r4, r0
   da936:	b118      	cbz	r0, da940 <_ZL14rsa_alloc_wrapv+0x16>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
   da938:	2200      	movs	r2, #0
   da93a:	4611      	mov	r1, r2
   da93c:	f7fb ff14 	bl	d6768 <mbedtls_rsa_init>

    return( ctx );
}
   da940:	4620      	mov	r0, r4
   da942:	bd10      	pop	{r4, pc}

000da944 <_ZL19rsa_check_pair_wrapPKvS0_>:
}

static int rsa_check_pair_wrap( const void *pub, const void *prv )
{
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
                                (const mbedtls_rsa_context *) prv ) );
   da944:	f7fb bf76 	b.w	d6834 <mbedtls_rsa_check_pub_priv>

000da948 <_ZL14rsa_get_bitlenPKv>:
    return( type == MBEDTLS_PK_RSA ||
            type == MBEDTLS_PK_RSASSA_PSS );
}

static size_t rsa_get_bitlen( const void *ctx )
{
   da948:	b508      	push	{r3, lr}
    const mbedtls_rsa_context * rsa = (const mbedtls_rsa_context *) ctx;
    return( 8 * mbedtls_rsa_get_len( rsa ) );
   da94a:	f7fb ff1a 	bl	d6782 <mbedtls_rsa_get_len>
}
   da94e:	00c0      	lsls	r0, r0, #3
   da950:	bd08      	pop	{r3, pc}
	...

000da954 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:

static int rsa_encrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   da954:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da958:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   da95c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   da960:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   da962:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   da964:	4604      	mov	r4, r0
   da966:	4688      	mov	r8, r1
   da968:	4617      	mov	r7, r2
   da96a:	4699      	mov	r9, r3
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    *olen = mbedtls_rsa_get_len( rsa );
   da96c:	f7fb ff09 	bl	d6782 <mbedtls_rsa_get_len>

    if( *olen > osize )
   da970:	4550      	cmp	r0, sl
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    *olen = mbedtls_rsa_get_len( rsa );
   da972:	f8cb 0000 	str.w	r0, [fp]

    if( *olen > osize )
   da976:	d80d      	bhi.n	da994 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x40>
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
                                       ilen, input, output ) );
   da978:	2300      	movs	r3, #0
   da97a:	4632      	mov	r2, r6
   da97c:	4629      	mov	r1, r5
   da97e:	4620      	mov	r0, r4
   da980:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
   da984:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   da988:	970a      	str	r7, [sp, #40]	; 0x28
}
   da98a:	b001      	add	sp, #4
   da98c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if( *olen > osize )
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
                                       ilen, input, output ) );
   da990:	f7fc ba68 	b.w	d6e64 <mbedtls_rsa_pkcs1_encrypt>
}
   da994:	4801      	ldr	r0, [pc, #4]	; (da99c <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x48>)
   da996:	b001      	add	sp, #4
   da998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da99c:	ffffbc00 	.word	0xffffbc00

000da9a0 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:

static int rsa_decrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   da9a0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da9a4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   da9a6:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   da9aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   da9ac:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   da9ae:	4693      	mov	fp, r2
   da9b0:	4604      	mov	r4, r0
   da9b2:	4688      	mov	r8, r1
   da9b4:	4699      	mov	r9, r3
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;

    if( ilen != mbedtls_rsa_get_len( rsa ) )
   da9b6:	f7fb fee4 	bl	d6782 <mbedtls_rsa_get_len>
   da9ba:	4558      	cmp	r0, fp
   da9bc:	d10f      	bne.n	da9de <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x3e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
   da9be:	2301      	movs	r3, #1
   da9c0:	4632      	mov	r2, r6
   da9c2:	4629      	mov	r1, r5
   da9c4:	4620      	mov	r0, r4
   da9c6:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   da9ca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
   da9ce:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   da9d2:	970a      	str	r7, [sp, #40]	; 0x28
}
   da9d4:	b001      	add	sp, #4
   da9d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if( ilen != mbedtls_rsa_get_len( rsa ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
   da9da:	f7fc bc03 	b.w	d71e4 <mbedtls_rsa_pkcs1_decrypt>
}
   da9de:	4802      	ldr	r0, [pc, #8]	; (da9e8 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x48>)
   da9e0:	b001      	add	sp, #4
   da9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da9e6:	bf00      	nop
   da9e8:	ffffbf80 	.word	0xffffbf80

000da9ec <_ZL13rsa_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_>:

static int rsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   da9ec:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da9f0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   da9f4:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   da9f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   da9fa:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   da9fc:	460f      	mov	r7, r1
   da9fe:	4691      	mov	r9, r2
   daa00:	4698      	mov	r8, r3
   daa02:	4604      	mov	r4, r0
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
   daa04:	f7fb febd 	bl	d6782 <mbedtls_rsa_get_len>

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
   daa08:	2301      	movs	r3, #1
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
   daa0a:	f8cb 0000 	str.w	r0, [fp]

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
   daa0e:	4632      	mov	r2, r6
   daa10:	4629      	mov	r1, r5
   daa12:	4620      	mov	r0, r4
   daa14:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   daa18:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
   daa1c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   daa20:	970a      	str	r7, [sp, #40]	; 0x28
}
   daa22:	b001      	add	sp, #4
   daa24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
   daa28:	f7fc bd34 	b.w	d7494 <mbedtls_rsa_pkcs1_sign>

000daa2c <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>:
}

static int rsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
   daa2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   daa30:	b085      	sub	sp, #20
   daa32:	4606      	mov	r6, r0
   daa34:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   daa36:	460f      	mov	r7, r1
   daa38:	4691      	mov	r9, r2
   daa3a:	4698      	mov	r8, r3
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
   daa3c:	f7fb fea1 	bl	d6782 <mbedtls_rsa_get_len>
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
   daa40:	42a0      	cmp	r0, r4
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
   daa42:	4605      	mov	r5, r0
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
   daa44:	d80f      	bhi.n	daa66 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3a>
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );

    if( ( ret = mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL,
   daa46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   daa48:	9303      	str	r3, [sp, #12]
   daa4a:	2300      	movs	r3, #0
   daa4c:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
   daa50:	461a      	mov	r2, r3
   daa52:	4619      	mov	r1, r3
   daa54:	4630      	mov	r0, r6
   daa56:	f7fc fe95 	bl	d7784 <mbedtls_rsa_pkcs1_verify>
   daa5a:	b928      	cbnz	r0, daa68 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3c>
     * We have a special error code for that so that so that callers can
     * use mbedtls_pk_verify() to check "Does the buffer start with a
     * valid signature?" and not just "Does the buffer contain a valid
     * signature?". */
    if( sig_len > rsa_len )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
   daa5c:	4b04      	ldr	r3, [pc, #16]	; (daa70 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x44>)
   daa5e:	42a5      	cmp	r5, r4
   daa60:	bf38      	it	cc
   daa62:	4618      	movcc	r0, r3
   daa64:	e000      	b.n	daa68 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3c>
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
   daa66:	4803      	ldr	r0, [pc, #12]	; (daa74 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x48>)
     * signature?". */
    if( sig_len > rsa_len )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

    return( 0 );
}
   daa68:	b005      	add	sp, #20
   daa6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   daa6e:	bf00      	nop
   daa70:	ffffc700 	.word	0xffffc700
   daa74:	ffffbc80 	.word	0xffffbc80

000daa78 <_ZL15eckey_free_wrapPv>:

    return( ctx );
}

static void eckey_free_wrap( void *ctx )
{
   daa78:	b510      	push	{r4, lr}
   daa7a:	4604      	mov	r4, r0
    mbedtls_ecp_keypair_free( (mbedtls_ecp_keypair *) ctx );
   daa7c:	f7fd fbc1 	bl	d8202 <mbedtls_ecp_keypair_free>
    mbedtls_free( ctx );
   daa80:	4620      	mov	r0, r4
}
   daa82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void eckey_free_wrap( void *ctx )
{
    mbedtls_ecp_keypair_free( (mbedtls_ecp_keypair *) ctx );
    mbedtls_free( ctx );
   daa86:	f00a bc71 	b.w	e536c <free>

000daa8a <_ZL16eckey_alloc_wrapv>:
    return( mbedtls_ecp_check_pub_priv( (const mbedtls_ecp_keypair *) pub,
                                (const mbedtls_ecp_keypair *) prv ) );
}

static void *eckey_alloc_wrap( void )
{
   daa8a:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );
   daa8c:	21ac      	movs	r1, #172	; 0xac
   daa8e:	2001      	movs	r0, #1
   daa90:	f00c f940 	bl	e6d14 <calloc>

    if( ctx != NULL )
   daa94:	4604      	mov	r4, r0
   daa96:	b108      	cbz	r0, daa9c <_ZL16eckey_alloc_wrapv+0x12>
        mbedtls_ecp_keypair_init( (mbedtls_ecp_keypair *)ctx );
   daa98:	f7fd fb65 	bl	d8166 <mbedtls_ecp_keypair_init>

    return( ctx );
}
   daa9c:	4620      	mov	r0, r4
   daa9e:	bd10      	pop	{r4, pc}

000daaa0 <_ZL16eckey_check_pairPKvS0_>:
#endif /* MBEDTLS_ECDSA_C */

static int eckey_check_pair( const void *pub, const void *prv )
{
    return( mbedtls_ecp_check_pub_priv( (const mbedtls_ecp_keypair *) pub,
                                (const mbedtls_ecp_keypair *) prv ) );
   daaa0:	f7fe bae6 	b.w	d9070 <mbedtls_ecp_check_pub_priv>

000daaa4 <_ZL16ecdsa_alloc_wrapv>:

}
#endif /* MBEDTLS_ECP_RESTARTABLE */

static void *ecdsa_alloc_wrap( void )
{
   daaa4:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecdsa_context ) );
   daaa6:	21ac      	movs	r1, #172	; 0xac
   daaa8:	2001      	movs	r0, #1
   daaaa:	f00c f933 	bl	e6d14 <calloc>

    if( ctx != NULL )
   daaae:	4604      	mov	r4, r0
   daab0:	b108      	cbz	r0, daab6 <_ZL16ecdsa_alloc_wrapv+0x12>
        mbedtls_ecdsa_init( (mbedtls_ecdsa_context *) ctx );
   daab2:	f000 fab2 	bl	db01a <mbedtls_ecdsa_init>

    return( ctx );
}
   daab6:	4620      	mov	r0, r4
   daab8:	bd10      	pop	{r4, pc}

000daaba <_ZL15ecdsa_free_wrapPv>:

static void ecdsa_free_wrap( void *ctx )
{
   daaba:	b510      	push	{r4, lr}
   daabc:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( (mbedtls_ecdsa_context *) ctx );
   daabe:	f000 faae 	bl	db01e <mbedtls_ecdsa_free>
    mbedtls_free( ctx );
   daac2:	4620      	mov	r0, r4
}
   daac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void ecdsa_free_wrap( void *ctx )
{
    mbedtls_ecdsa_free( (mbedtls_ecdsa_context *) ctx );
    mbedtls_free( ctx );
   daac8:	f00a bc50 	b.w	e536c <free>

000daacc <_ZL15ecdsa_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_>:

static int ecdsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   daacc:	b410      	push	{r4}
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
                md_alg, hash, hash_len, sig, sig_len, f_rng, p_rng ) );
}
   daace:	f85d 4b04 	ldr.w	r4, [sp], #4
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
                md_alg, hash, hash_len, sig, sig_len, f_rng, p_rng ) );
   daad2:	f000 ba3b 	b.w	daf4c <mbedtls_ecdsa_write_signature>

000daad6 <_ZL15eckey_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_>:

static int eckey_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   daad6:	b5f0      	push	{r4, r5, r6, r7, lr}
   daad8:	b0b1      	sub	sp, #196	; 0xc4
   daada:	4604      	mov	r4, r0
    int ret;
    mbedtls_ecdsa_context ecdsa;

    mbedtls_ecdsa_init( &ecdsa );
   daadc:	a805      	add	r0, sp, #20

static int eckey_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   daade:	460d      	mov	r5, r1
   daae0:	4616      	mov	r6, r2
   daae2:	461f      	mov	r7, r3
    int ret;
    mbedtls_ecdsa_context ecdsa;

    mbedtls_ecdsa_init( &ecdsa );
   daae4:	f000 fa99 	bl	db01a <mbedtls_ecdsa_init>

    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, (const mbedtls_ecp_keypair *)ctx ) ) == 0 )
   daae8:	4621      	mov	r1, r4
   daaea:	a805      	add	r0, sp, #20
   daaec:	f000 fa9b 	bl	db026 <mbedtls_ecdsa_from_keypair>
   daaf0:	4604      	mov	r4, r0
   daaf2:	b970      	cbnz	r0, dab12 <_ZL15eckey_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_+0x3c>
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
                md_alg, hash, hash_len, sig, sig_len, f_rng, p_rng ) );
   daaf4:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   daaf6:	9303      	str	r3, [sp, #12]
   daaf8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   daafa:	9302      	str	r3, [sp, #8]
   daafc:	9b37      	ldr	r3, [sp, #220]	; 0xdc
   daafe:	9301      	str	r3, [sp, #4]
   dab00:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   dab02:	9300      	str	r3, [sp, #0]
   dab04:	4632      	mov	r2, r6
   dab06:	463b      	mov	r3, r7
   dab08:	4629      	mov	r1, r5
   dab0a:	a805      	add	r0, sp, #20
   dab0c:	f000 fa1e 	bl	daf4c <mbedtls_ecdsa_write_signature>
   dab10:	4604      	mov	r4, r0

    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, (const mbedtls_ecp_keypair *)ctx ) ) == 0 )
        ret = ecdsa_sign_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len,
                               f_rng, p_rng );

    mbedtls_ecdsa_free( &ecdsa );
   dab12:	a805      	add	r0, sp, #20
   dab14:	f000 fa83 	bl	db01e <mbedtls_ecdsa_free>

    return( ret );
}
   dab18:	4620      	mov	r0, r4
   dab1a:	b031      	add	sp, #196	; 0xc4
   dab1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000dab20 <_ZL17ecdsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>:
}

static int ecdsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                       const unsigned char *hash, size_t hash_len,
                       const unsigned char *sig, size_t sig_len )
{
   dab20:	b507      	push	{r0, r1, r2, lr}
   dab22:	4611      	mov	r1, r2
   dab24:	461a      	mov	r2, r3
    int ret;
    ((void) md_alg);

    ret = mbedtls_ecdsa_read_signature( (mbedtls_ecdsa_context *) ctx,
   dab26:	9b05      	ldr	r3, [sp, #20]
   dab28:	9300      	str	r3, [sp, #0]
   dab2a:	9b04      	ldr	r3, [sp, #16]
   dab2c:	f000 fa6c 	bl	db008 <mbedtls_ecdsa_read_signature>

    if( ret == MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

    return( ret );
}
   dab30:	4b03      	ldr	r3, [pc, #12]	; (dab40 <_ZL17ecdsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x20>)
   dab32:	f510 4f98 	cmn.w	r0, #19456	; 0x4c00
   dab36:	bf08      	it	eq
   dab38:	4618      	moveq	r0, r3
   dab3a:	b003      	add	sp, #12
   dab3c:	f85d fb04 	ldr.w	pc, [sp], #4
   dab40:	ffffc700 	.word	0xffffc700

000dab44 <_ZL17eckey_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>:
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );

static int eckey_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                       const unsigned char *hash, size_t hash_len,
                       const unsigned char *sig, size_t sig_len )
{
   dab44:	b5f0      	push	{r4, r5, r6, r7, lr}
   dab46:	b0af      	sub	sp, #188	; 0xbc
   dab48:	4604      	mov	r4, r0
    int ret;
    mbedtls_ecdsa_context ecdsa;

    mbedtls_ecdsa_init( &ecdsa );
   dab4a:	a803      	add	r0, sp, #12
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );

static int eckey_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                       const unsigned char *hash, size_t hash_len,
                       const unsigned char *sig, size_t sig_len )
{
   dab4c:	460d      	mov	r5, r1
   dab4e:	4616      	mov	r6, r2
   dab50:	461f      	mov	r7, r3
    int ret;
    mbedtls_ecdsa_context ecdsa;

    mbedtls_ecdsa_init( &ecdsa );
   dab52:	f000 fa62 	bl	db01a <mbedtls_ecdsa_init>

    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, (const mbedtls_ecp_keypair *)ctx ) ) == 0 )
   dab56:	4621      	mov	r1, r4
   dab58:	a803      	add	r0, sp, #12
   dab5a:	f000 fa64 	bl	db026 <mbedtls_ecdsa_from_keypair>
   dab5e:	4604      	mov	r4, r0
   dab60:	b950      	cbnz	r0, dab78 <_ZL17eckey_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x34>
        ret = ecdsa_verify_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len );
   dab62:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   dab64:	9301      	str	r3, [sp, #4]
   dab66:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   dab68:	9300      	str	r3, [sp, #0]
   dab6a:	4632      	mov	r2, r6
   dab6c:	463b      	mov	r3, r7
   dab6e:	4629      	mov	r1, r5
   dab70:	a803      	add	r0, sp, #12
   dab72:	f7ff ffd5 	bl	dab20 <_ZL17ecdsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>
   dab76:	4604      	mov	r4, r0

    mbedtls_ecdsa_free( &ecdsa );
   dab78:	a803      	add	r0, sp, #12
   dab7a:	f000 fa50 	bl	db01e <mbedtls_ecdsa_free>

    return( ret );
}
   dab7e:	4620      	mov	r0, r4
   dab80:	b02f      	add	sp, #188	; 0xbc
   dab82:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dab84 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj>:
 * Derive a suitable integer for group grp from a buffer of length len
 * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3
 */
static int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,
                       const unsigned char *buf, size_t blen )
{
   dab84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret;
    size_t n_size = ( grp->nbits + 7 ) / 8;
   dab86:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
   dab88:	3407      	adds	r4, #7
   dab8a:	08e4      	lsrs	r4, r4, #3
   dab8c:	429c      	cmp	r4, r3
 * Derive a suitable integer for group grp from a buffer of length len
 * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3
 */
static int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,
                       const unsigned char *buf, size_t blen )
{
   dab8e:	460e      	mov	r6, r1
   dab90:	bf28      	it	cs
   dab92:	461c      	movcs	r4, r3
   dab94:	4611      	mov	r1, r2
   dab96:	4605      	mov	r5, r0
    int ret;
    size_t n_size = ( grp->nbits + 7 ) / 8;
    size_t use_size = blen > n_size ? n_size : blen;

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
   dab98:	4622      	mov	r2, r4
   dab9a:	4630      	mov	r0, r6
   dab9c:	f005 fbc6 	bl	e032c <mbedtls_mpi_read_binary>
   daba0:	4607      	mov	r7, r0
   daba2:	b9c0      	cbnz	r0, dabd6 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj+0x52>
    if( use_size * 8 > grp->nbits )
   daba4:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   daba6:	00e4      	lsls	r4, r4, #3
   daba8:	428c      	cmp	r4, r1
   dabaa:	d80d      	bhi.n	dabc8 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj+0x44>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );

    /* While at it, reduce modulo N */
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
   dabac:	354c      	adds	r5, #76	; 0x4c
   dabae:	4629      	mov	r1, r5
   dabb0:	4630      	mov	r0, r6
   dabb2:	f005 fd55 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   dabb6:	2800      	cmp	r0, #0
   dabb8:	db0d      	blt.n	dabd6 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj+0x52>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
   dabba:	462a      	mov	r2, r5
   dabbc:	4631      	mov	r1, r6
   dabbe:	4630      	mov	r0, r6

cleanup:
    return( ret );
}
   dabc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if( use_size * 8 > grp->nbits )
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );

    /* While at it, reduce modulo N */
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
   dabc4:	f005 be62 	b.w	e088c <mbedtls_mpi_sub_mpi>
    size_t n_size = ( grp->nbits + 7 ) / 8;
    size_t use_size = blen > n_size ? n_size : blen;

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
    if( use_size * 8 > grp->nbits )
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );
   dabc8:	1a61      	subs	r1, r4, r1
   dabca:	4630      	mov	r0, r6
   dabcc:	f005 fc69 	bl	e04a2 <mbedtls_mpi_shift_r>
   dabd0:	2800      	cmp	r0, #0
   dabd2:	d0eb      	beq.n	dabac <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj+0x28>
   dabd4:	4607      	mov	r7, r0
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );

cleanup:
    return( ret );
}
   dabd6:	4638      	mov	r0, r7
   dabd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000dabdc <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0>:
#if !defined(MBEDTLS_ECDSA_SIGN_ALT)
/*
 * Compute ECDSA signature of a hashed message (SEC1 4.1.3)
 * Obviously, compared to SEC1 4.1.3, we skip step 4 (hash message)
 */
static int ecdsa_sign_restartable( mbedtls_ecp_group *grp,
   dabdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dabe0:	469b      	mov	fp, r3
    mbedtls_ecp_point R;
    mbedtls_mpi k, e, t;
    mbedtls_mpi *pk = &k, *pr = r;

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
   dabe2:	6d43      	ldr	r3, [r0, #84]	; 0x54
#if !defined(MBEDTLS_ECDSA_SIGN_ALT)
/*
 * Compute ECDSA signature of a hashed message (SEC1 4.1.3)
 * Obviously, compared to SEC1 4.1.3, we skip step 4 (hash message)
 */
static int ecdsa_sign_restartable( mbedtls_ecp_group *grp,
   dabe4:	b09b      	sub	sp, #108	; 0x6c
   dabe6:	4606      	mov	r6, r0
   dabe8:	468a      	mov	sl, r1
   dabea:	4615      	mov	r5, r2
    mbedtls_ecp_point R;
    mbedtls_mpi k, e, t;
    mbedtls_mpi *pk = &k, *pr = r;

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
   dabec:	b173      	cbz	r3, dac0c <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x30>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /* Make sure d is in range 1..n-1 */
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
   dabee:	2101      	movs	r1, #1
   dabf0:	4658      	mov	r0, fp
   dabf2:	f005 fd7a 	bl	e06ea <mbedtls_mpi_cmp_int>
   dabf6:	2800      	cmp	r0, #0
   dabf8:	db0a      	blt.n	dac10 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x34>
   dabfa:	f106 074c 	add.w	r7, r6, #76	; 0x4c
   dabfe:	4639      	mov	r1, r7
   dac00:	4658      	mov	r0, fp
   dac02:	f005 fd2d 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   dac06:	2800      	cmp	r0, #0
   dac08:	da02      	bge.n	dac10 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x34>
   dac0a:	e003      	b.n	dac14 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x38>
    mbedtls_mpi k, e, t;
    mbedtls_mpi *pk = &k, *pr = r;

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   dac0c:	4854      	ldr	r0, [pc, #336]	; (dad60 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x184>)
   dac0e:	e0a4      	b.n	dad5a <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x17e>

    /* Make sure d is in range 1..n-1 */
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
   dac10:	4854      	ldr	r0, [pc, #336]	; (dad64 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x188>)
   dac12:	e0a2      	b.n	dad5a <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x17e>

    mbedtls_ecp_point_init( &R );
   dac14:	a811      	add	r0, sp, #68	; 0x44
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
   dac16:	ac08      	add	r4, sp, #32

    /* Make sure d is in range 1..n-1 */
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
        return( MBEDTLS_ERR_ECP_INVALID_KEY );

    mbedtls_ecp_point_init( &R );
   dac18:	f7fd fa76 	bl	d8108 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
   dac1c:	4620      	mov	r0, r4
   dac1e:	f005 fa38 	bl	e0092 <mbedtls_mpi_init>
   dac22:	a80b      	add	r0, sp, #44	; 0x2c
   dac24:	f005 fa35 	bl	e0092 <mbedtls_mpi_init>
   dac28:	a80e      	add	r0, sp, #56	; 0x38
   dac2a:	f005 fa32 	bl	e0092 <mbedtls_mpi_init>
   dac2e:	f10d 0918 	add.w	r9, sp, #24
        if( rs_ctx->sig->state == ecdsa_sig_modn )
            goto modn;
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    *p_sign_tries = 0;
   dac32:	2300      	movs	r3, #0
   dac34:	9307      	str	r3, [sp, #28]
                int (*f_rng_blind)(void *, unsigned char *, size_t),
                void *p_rng_blind,
                mbedtls_ecdsa_restart_ctx *rs_ctx )
{
    int ret, key_tries, sign_tries;
    int *p_sign_tries = &sign_tries, *p_key_tries = &key_tries;
   dac36:	46c8      	mov	r8, r9

        /*
         * Steps 1-3: generate a suitable ephemeral keypair
         * and set r = xR mod n
         */
        *p_key_tries = 0;
   dac38:	9305      	str	r3, [sp, #20]
#endif /* MBEDTLS_ECP_RESTARTABLE */

    *p_sign_tries = 0;
    do
    {
        if( *p_sign_tries++ > 10 )
   dac3a:	f859 3f04 	ldr.w	r3, [r9, #4]!
   dac3e:	2b0a      	cmp	r3, #10
   dac40:	dd01      	ble.n	dac46 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x6a>
        {
            ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
   dac42:	4b49      	ldr	r3, [pc, #292]	; (dad68 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x18c>)
   dac44:	e07a      	b.n	dad3c <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>

        /*
         * Steps 1-3: generate a suitable ephemeral keypair
         * and set r = xR mod n
         */
        *p_key_tries = 0;
   dac46:	9b05      	ldr	r3, [sp, #20]
   dac48:	f8c8 3000 	str.w	r3, [r8]
            if( rs_ctx != NULL && rs_ctx->sig != NULL )
                rs_ctx->sig->state = ecdsa_sig_mul;

mul:
#endif
            MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &R, pk, &grp->G,
   dac4c:	f106 0328 	add.w	r3, r6, #40	; 0x28
   dac50:	9304      	str	r3, [sp, #16]
         * and set r = xR mod n
         */
        *p_key_tries = 0;
        do
        {
            if( *p_key_tries++ > 10 )
   dac52:	f858 3b04 	ldr.w	r3, [r8], #4
   dac56:	2b0a      	cmp	r3, #10
   dac58:	dcf3      	bgt.n	dac42 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x66>
            {
                ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
                goto cleanup;
            }

            MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, pk, f_rng, p_rng ) );
   dac5a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   dac5c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   dac5e:	4621      	mov	r1, r4
   dac60:	4630      	mov	r0, r6
   dac62:	f7fe f9c5 	bl	d8ff0 <mbedtls_ecp_gen_privkey>
   dac66:	4603      	mov	r3, r0
   dac68:	2800      	cmp	r0, #0
   dac6a:	d167      	bne.n	dad3c <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
            if( rs_ctx != NULL && rs_ctx->sig != NULL )
                rs_ctx->sig->state = ecdsa_sig_mul;

mul:
#endif
            MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &R, pk, &grp->G,
   dac6c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   dac6e:	9301      	str	r3, [sp, #4]
   dac70:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   dac72:	9002      	str	r0, [sp, #8]
   dac74:	9300      	str	r3, [sp, #0]
   dac76:	4622      	mov	r2, r4
   dac78:	9b04      	ldr	r3, [sp, #16]
   dac7a:	a911      	add	r1, sp, #68	; 0x44
   dac7c:	4630      	mov	r0, r6
   dac7e:	f7fe f809 	bl	d8c94 <mbedtls_ecp_mul_restartable>
   dac82:	4603      	mov	r3, r0
   dac84:	2800      	cmp	r0, #0
   dac86:	d159      	bne.n	dad3c <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
                                                          f_rng_blind,
                                                          p_rng_blind,
                                                          ECDSA_RS_ECP ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pr, &R.X, &grp->N ) );
   dac88:	463a      	mov	r2, r7
   dac8a:	a911      	add	r1, sp, #68	; 0x44
   dac8c:	4650      	mov	r0, sl
   dac8e:	f006 f887 	bl	e0da0 <mbedtls_mpi_mod_mpi>
   dac92:	4603      	mov	r3, r0
   dac94:	2800      	cmp	r0, #0
   dac96:	d151      	bne.n	dad3c <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
        }
        while( mbedtls_mpi_cmp_int( pr, 0 ) == 0 );
   dac98:	4601      	mov	r1, r0
   dac9a:	4650      	mov	r0, sl
   dac9c:	f005 fd25 	bl	e06ea <mbedtls_mpi_cmp_int>
        /*
         * Steps 1-3: generate a suitable ephemeral keypair
         * and set r = xR mod n
         */
        *p_key_tries = 0;
        do
   daca0:	2800      	cmp	r0, #0
   daca2:	d0d6      	beq.n	dac52 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x76>
        ECDSA_BUDGET( MBEDTLS_ECP_OPS_INV + 4 );

        /*
         * Step 5: derive MPI from hashed message
         */
        MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
   daca4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   daca6:	9a24      	ldr	r2, [sp, #144]	; 0x90
   daca8:	a90b      	add	r1, sp, #44	; 0x2c
   dacaa:	4630      	mov	r0, r6
   dacac:	f7ff ff6a 	bl	dab84 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj>
   dacb0:	4603      	mov	r3, r0
   dacb2:	2800      	cmp	r0, #0
   dacb4:	d142      	bne.n	dad3c <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>

        /*
         * Generate a random value to blind inv_mod in next step,
         * avoiding a potential timing leak.
         */
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, &t, f_rng_blind,
   dacb6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   dacb8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   dacba:	a90e      	add	r1, sp, #56	; 0x38
   dacbc:	4630      	mov	r0, r6
   dacbe:	f7fe f997 	bl	d8ff0 <mbedtls_ecp_gen_privkey>
   dacc2:	4603      	mov	r3, r0
   dacc4:	2800      	cmp	r0, #0
   dacc6:	d139      	bne.n	dad3c <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
                                                  p_rng_blind ) );

        /*
         * Step 6: compute s = (e + r * d) / k = t (e + rd) / (kt) mod n
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, pr, d ) );
   dacc8:	465a      	mov	r2, fp
   dacca:	4651      	mov	r1, sl
   daccc:	4628      	mov	r0, r5
   dacce:	f005 fe2b 	bl	e0928 <mbedtls_mpi_mul_mpi>
   dacd2:	4603      	mov	r3, r0
   dacd4:	bb90      	cbnz	r0, dad3c <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &e, &e, s ) );
   dacd6:	a90b      	add	r1, sp, #44	; 0x2c
   dacd8:	462a      	mov	r2, r5
   dacda:	4608      	mov	r0, r1
   dacdc:	f005 fdb5 	bl	e084a <mbedtls_mpi_add_mpi>
   dace0:	4603      	mov	r3, r0
   dace2:	bb58      	cbnz	r0, dad3c <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &e, &e, &t ) );
   dace4:	a90b      	add	r1, sp, #44	; 0x2c
   dace6:	aa0e      	add	r2, sp, #56	; 0x38
   dace8:	4608      	mov	r0, r1
   dacea:	f005 fe1d 	bl	e0928 <mbedtls_mpi_mul_mpi>
   dacee:	4603      	mov	r3, r0
   dacf0:	bb20      	cbnz	r0, dad3c <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pk, pk, &t ) );
   dacf2:	aa0e      	add	r2, sp, #56	; 0x38
   dacf4:	4621      	mov	r1, r4
   dacf6:	4620      	mov	r0, r4
   dacf8:	f005 fe16 	bl	e0928 <mbedtls_mpi_mul_mpi>
   dacfc:	4603      	mov	r3, r0
   dacfe:	b9e8      	cbnz	r0, dad3c <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( s, pk, &grp->N ) );
   dad00:	463a      	mov	r2, r7
   dad02:	4621      	mov	r1, r4
   dad04:	4628      	mov	r0, r5
   dad06:	f006 fb55 	bl	e13b4 <mbedtls_mpi_inv_mod>
   dad0a:	4603      	mov	r3, r0
   dad0c:	b9b0      	cbnz	r0, dad3c <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, s, &e ) );
   dad0e:	aa0b      	add	r2, sp, #44	; 0x2c
   dad10:	4629      	mov	r1, r5
   dad12:	4628      	mov	r0, r5
   dad14:	f005 fe08 	bl	e0928 <mbedtls_mpi_mul_mpi>
   dad18:	4603      	mov	r3, r0
   dad1a:	b978      	cbnz	r0, dad3c <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( s, s, &grp->N ) );
   dad1c:	463a      	mov	r2, r7
   dad1e:	4629      	mov	r1, r5
   dad20:	4628      	mov	r0, r5
   dad22:	f006 f83d 	bl	e0da0 <mbedtls_mpi_mod_mpi>
   dad26:	4603      	mov	r3, r0
   dad28:	b940      	cbnz	r0, dad3c <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
    }
    while( mbedtls_mpi_cmp_int( s, 0 ) == 0 );
   dad2a:	4601      	mov	r1, r0
   dad2c:	9004      	str	r0, [sp, #16]
   dad2e:	4628      	mov	r0, r5
   dad30:	f005 fcdb 	bl	e06ea <mbedtls_mpi_cmp_int>
            goto modn;
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    *p_sign_tries = 0;
    do
   dad34:	9b04      	ldr	r3, [sp, #16]
   dad36:	2800      	cmp	r0, #0
   dad38:	f43f af7f 	beq.w	dac3a <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x5e>
    if( rs_ctx != NULL && rs_ctx->sig != NULL )
        mbedtls_mpi_copy( r, pr );
#endif

cleanup:
    mbedtls_ecp_point_free( &R );
   dad3c:	a811      	add	r0, sp, #68	; 0x44
   dad3e:	9304      	str	r3, [sp, #16]
   dad40:	f7fd fa1f 	bl	d8182 <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );
   dad44:	a808      	add	r0, sp, #32
   dad46:	f005 f9aa 	bl	e009e <mbedtls_mpi_free>
   dad4a:	a80b      	add	r0, sp, #44	; 0x2c
   dad4c:	f005 f9a7 	bl	e009e <mbedtls_mpi_free>
   dad50:	a80e      	add	r0, sp, #56	; 0x38
   dad52:	f005 f9a4 	bl	e009e <mbedtls_mpi_free>

    ECDSA_RS_LEAVE( sig );

    return( ret );
   dad56:	9b04      	ldr	r3, [sp, #16]
   dad58:	4618      	mov	r0, r3
}
   dad5a:	b01b      	add	sp, #108	; 0x6c
   dad5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dad60:	ffffb080 	.word	0xffffb080
   dad64:	ffffb380 	.word	0xffffb380
   dad68:	ffffb300 	.word	0xffffb300

000dad6c <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1>:
#if !defined(MBEDTLS_ECDSA_VERIFY_ALT)
/*
 * Verify ECDSA signature of hashed message (SEC1 4.1.4)
 * Obviously, compared to SEC1 4.1.3, we skip step 2 (hash message)
 */
static int ecdsa_verify_restartable( mbedtls_ecp_group *grp,
   dad6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dad70:	b09a      	sub	sp, #104	; 0x68
   dad72:	4606      	mov	r6, r0
    int ret;
    mbedtls_mpi e, s_inv, u1, u2;
    mbedtls_ecp_point R;
    mbedtls_mpi *pu1 = &u1, *pu2 = &u2;

    mbedtls_ecp_point_init( &R );
   dad74:	a811      	add	r0, sp, #68	; 0x44
#if !defined(MBEDTLS_ECDSA_VERIFY_ALT)
/*
 * Verify ECDSA signature of hashed message (SEC1 4.1.4)
 * Obviously, compared to SEC1 4.1.3, we skip step 2 (hash message)
 */
static int ecdsa_verify_restartable( mbedtls_ecp_group *grp,
   dad76:	4698      	mov	r8, r3
   dad78:	460c      	mov	r4, r1
   dad7a:	4617      	mov	r7, r2
    int ret;
    mbedtls_mpi e, s_inv, u1, u2;
    mbedtls_ecp_point R;
    mbedtls_mpi *pu1 = &u1, *pu2 = &u2;

    mbedtls_ecp_point_init( &R );
   dad7c:	f7fd f9c4 	bl	d8108 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv );
   dad80:	a805      	add	r0, sp, #20
   dad82:	f005 f986 	bl	e0092 <mbedtls_mpi_init>
   dad86:	a808      	add	r0, sp, #32
   dad88:	f005 f983 	bl	e0092 <mbedtls_mpi_init>
    mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );
   dad8c:	a80b      	add	r0, sp, #44	; 0x2c
   dad8e:	f005 f980 	bl	e0092 <mbedtls_mpi_init>
   dad92:	a80e      	add	r0, sp, #56	; 0x38
   dad94:	f005 f97d 	bl	e0092 <mbedtls_mpi_init>

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
   dad98:	6d73      	ldr	r3, [r6, #84]	; 0x54
   dad9a:	2b00      	cmp	r3, #0
   dad9c:	d068      	beq.n	dae70 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0x104>
#endif /* MBEDTLS_ECP_RESTARTABLE */

    /*
     * Step 1: make sure r and s are in range 1..n-1
     */
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
   dad9e:	2101      	movs	r1, #1
   dada0:	9820      	ldr	r0, [sp, #128]	; 0x80
   dada2:	f005 fca2 	bl	e06ea <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
   dada6:	2800      	cmp	r0, #0
   dada8:	db50      	blt.n	dae4c <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe0>
#endif /* MBEDTLS_ECP_RESTARTABLE */

    /*
     * Step 1: make sure r and s are in range 1..n-1
     */
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
   dadaa:	f106 054c 	add.w	r5, r6, #76	; 0x4c
   dadae:	4629      	mov	r1, r5
   dadb0:	9820      	ldr	r0, [sp, #128]	; 0x80
   dadb2:	f005 fc55 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   dadb6:	2800      	cmp	r0, #0
   dadb8:	da48      	bge.n	dae4c <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe0>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
   dadba:	2101      	movs	r1, #1
   dadbc:	9821      	ldr	r0, [sp, #132]	; 0x84
   dadbe:	f005 fc94 	bl	e06ea <mbedtls_mpi_cmp_int>
#endif /* MBEDTLS_ECP_RESTARTABLE */

    /*
     * Step 1: make sure r and s are in range 1..n-1
     */
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
   dadc2:	2800      	cmp	r0, #0
   dadc4:	db42      	blt.n	dae4c <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe0>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
   dadc6:	4629      	mov	r1, r5
   dadc8:	9821      	ldr	r0, [sp, #132]	; 0x84
   dadca:	f005 fc49 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   dadce:	2800      	cmp	r0, #0
   dadd0:	da3c      	bge.n	dae4c <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe0>
    }

    /*
     * Step 3: derive MPI from hashed message
     */
    MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
   dadd2:	4622      	mov	r2, r4
   dadd4:	463b      	mov	r3, r7
   dadd6:	a905      	add	r1, sp, #20
   dadd8:	4630      	mov	r0, r6
   dadda:	f7ff fed3 	bl	dab84 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj>
   dadde:	4604      	mov	r4, r0
   dade0:	2800      	cmp	r0, #0
   dade2:	d134      	bne.n	dae4e <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>
    /*
     * Step 4: u1 = e / s mod n, u2 = r / s mod n
     */
    ECDSA_BUDGET( MBEDTLS_ECP_OPS_CHK + MBEDTLS_ECP_OPS_INV + 2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &s_inv, s, &grp->N ) );
   dade4:	462a      	mov	r2, r5
   dade6:	9921      	ldr	r1, [sp, #132]	; 0x84
   dade8:	a808      	add	r0, sp, #32
   dadea:	f006 fae3 	bl	e13b4 <mbedtls_mpi_inv_mod>
   dadee:	4604      	mov	r4, r0
   dadf0:	bb68      	cbnz	r0, dae4e <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu1, &e, &s_inv ) );
   dadf2:	aa08      	add	r2, sp, #32
   dadf4:	a905      	add	r1, sp, #20
   dadf6:	a80b      	add	r0, sp, #44	; 0x2c
   dadf8:	f005 fd96 	bl	e0928 <mbedtls_mpi_mul_mpi>
   dadfc:	4604      	mov	r4, r0
   dadfe:	bb30      	cbnz	r0, dae4e <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu1, pu1, &grp->N ) );
   dae00:	a90b      	add	r1, sp, #44	; 0x2c
   dae02:	462a      	mov	r2, r5
   dae04:	4608      	mov	r0, r1
   dae06:	f005 ffcb 	bl	e0da0 <mbedtls_mpi_mod_mpi>
   dae0a:	4604      	mov	r4, r0
   dae0c:	b9f8      	cbnz	r0, dae4e <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu2, r, &s_inv ) );
   dae0e:	aa08      	add	r2, sp, #32
   dae10:	9920      	ldr	r1, [sp, #128]	; 0x80
   dae12:	a80e      	add	r0, sp, #56	; 0x38
   dae14:	f005 fd88 	bl	e0928 <mbedtls_mpi_mul_mpi>
   dae18:	4604      	mov	r4, r0
   dae1a:	b9c0      	cbnz	r0, dae4e <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu2, pu2, &grp->N ) );
   dae1c:	af0e      	add	r7, sp, #56	; 0x38
   dae1e:	462a      	mov	r2, r5
   dae20:	4639      	mov	r1, r7
   dae22:	4638      	mov	r0, r7
   dae24:	f005 ffbc 	bl	e0da0 <mbedtls_mpi_mod_mpi>
   dae28:	4604      	mov	r4, r0
   dae2a:	b980      	cbnz	r0, dae4e <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>
muladd:
#endif
    /*
     * Step 5: R = u1 G + u2 Q
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_muladd_restartable( grp,
   dae2c:	9002      	str	r0, [sp, #8]
   dae2e:	e88d 0180 	stmia.w	sp, {r7, r8}
   dae32:	f106 0328 	add.w	r3, r6, #40	; 0x28
   dae36:	aa0b      	add	r2, sp, #44	; 0x2c
   dae38:	a911      	add	r1, sp, #68	; 0x44
   dae3a:	4630      	mov	r0, r6
   dae3c:	f7fe f89e 	bl	d8f7c <mbedtls_ecp_muladd_restartable>
   dae40:	4604      	mov	r4, r0
   dae42:	b920      	cbnz	r0, dae4e <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>
                     &R, pu1, &grp->G, pu2, Q, ECDSA_RS_ECP ) );

    if( mbedtls_ecp_is_zero( &R ) )
   dae44:	a811      	add	r0, sp, #68	; 0x44
   dae46:	f7fd fd69 	bl	d891c <mbedtls_ecp_is_zero>
   dae4a:	b198      	cbz	r0, dae74 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0x108>
    /*
     * Step 8: check if v (that is, R.X) is equal to r
     */
    if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
   dae4c:	4c12      	ldr	r4, [pc, #72]	; (dae98 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0x12c>)
        goto cleanup;
    }

cleanup:
    mbedtls_ecp_point_free( &R );
   dae4e:	a811      	add	r0, sp, #68	; 0x44
   dae50:	f7fd f997 	bl	d8182 <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &e ); mbedtls_mpi_free( &s_inv );
   dae54:	a805      	add	r0, sp, #20
   dae56:	f005 f922 	bl	e009e <mbedtls_mpi_free>
   dae5a:	a808      	add	r0, sp, #32
   dae5c:	f005 f91f 	bl	e009e <mbedtls_mpi_free>
    mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );
   dae60:	a80b      	add	r0, sp, #44	; 0x2c
   dae62:	f005 f91c 	bl	e009e <mbedtls_mpi_free>
   dae66:	a80e      	add	r0, sp, #56	; 0x38
   dae68:	f005 f919 	bl	e009e <mbedtls_mpi_free>

    ECDSA_RS_LEAVE( ver );

    return( ret );
   dae6c:	4620      	mov	r0, r4
   dae6e:	e010      	b.n	dae92 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0x126>
    mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv );
    mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   dae70:	480a      	ldr	r0, [pc, #40]	; (dae9c <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0x130>)
   dae72:	e00e      	b.n	dae92 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0x126>

    /*
     * Step 6: convert xR to an integer (no-op)
     * Step 7: reduce xR mod n (gives v)
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &R.X, &R.X, &grp->N ) );
   dae74:	a911      	add	r1, sp, #68	; 0x44
   dae76:	462a      	mov	r2, r5
   dae78:	4608      	mov	r0, r1
   dae7a:	f005 ff91 	bl	e0da0 <mbedtls_mpi_mod_mpi>
   dae7e:	4604      	mov	r4, r0
   dae80:	2800      	cmp	r0, #0
   dae82:	d1e4      	bne.n	dae4e <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>

    /*
     * Step 8: check if v (that is, R.X) is equal to r
     */
    if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )
   dae84:	9920      	ldr	r1, [sp, #128]	; 0x80
   dae86:	a811      	add	r0, sp, #68	; 0x44
   dae88:	f005 fbea 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   dae8c:	2800      	cmp	r0, #0
   dae8e:	d0de      	beq.n	dae4e <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>
   dae90:	e7dc      	b.n	dae4c <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe0>
    mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );

    ECDSA_RS_LEAVE( ver );

    return( ret );
}
   dae92:	b01a      	add	sp, #104	; 0x68
   dae94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dae98:	ffffb200 	.word	0xffffb200
   dae9c:	ffffb080 	.word	0xffffb080

000daea0 <mbedtls_ecdsa_write_signature_restartable>:
                           const unsigned char *hash, size_t hlen,
                           unsigned char *sig, size_t *slen,
                           int (*f_rng)(void *, unsigned char *, size_t),
                           void *p_rng,
                           mbedtls_ecdsa_restart_ctx *rs_ctx )
{
   daea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   daea4:	b0b2      	sub	sp, #200	; 0xc8
   daea6:	4604      	mov	r4, r0
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );

    mbedtls_mpi_init( &r );
   daea8:	a808      	add	r0, sp, #32
                           const unsigned char *hash, size_t hlen,
                           unsigned char *sig, size_t *slen,
                           int (*f_rng)(void *, unsigned char *, size_t),
                           void *p_rng,
                           mbedtls_ecdsa_restart_ctx *rs_ctx )
{
   daeaa:	4617      	mov	r7, r2
   daeac:	4698      	mov	r8, r3
   daeae:	9d3a      	ldr	r5, [sp, #232]	; 0xe8
   daeb0:	9e3b      	ldr	r6, [sp, #236]	; 0xec
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );

    mbedtls_mpi_init( &r );
   daeb2:	f005 f8ee 	bl	e0092 <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
   daeb6:	a80b      	add	r0, sp, #44	; 0x2c
   daeb8:	f005 f8eb 	bl	e0092 <mbedtls_mpi_init>
#if defined(MBEDTLS_ECDSA_SIGN_ALT)
    MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign( &ctx->grp, &r, &s, &ctx->d,
                         hash, hlen, f_rng, p_rng ) );
#else
    /* Use the same RNG for both blinding and ephemeral key generation */
    MBEDTLS_MPI_CHK( ecdsa_sign_restartable( &ctx->grp, &r, &s, &ctx->d,
   daebc:	e88d 0180 	stmia.w	sp, {r7, r8}
   daec0:	9605      	str	r6, [sp, #20]
   daec2:	9504      	str	r5, [sp, #16]
   daec4:	9603      	str	r6, [sp, #12]
   daec6:	9502      	str	r5, [sp, #8]
   daec8:	f104 037c 	add.w	r3, r4, #124	; 0x7c
   daecc:	aa0b      	add	r2, sp, #44	; 0x2c
   daece:	a908      	add	r1, sp, #32
   daed0:	4620      	mov	r0, r4
   daed2:	f7ff fe83 	bl	dabdc <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0>
   daed6:	4607      	mov	r7, r0
   daed8:	bb70      	cbnz	r0, daf38 <mbedtls_ecdsa_write_signature_restartable+0x98>
static int ecdsa_signature_to_asn1( const mbedtls_mpi *r, const mbedtls_mpi *s,
                                    unsigned char *sig, size_t *slen )
{
    int ret;
    unsigned char buf[MBEDTLS_ECDSA_MAX_LEN];
    unsigned char *p = buf + sizeof( buf );
   daeda:	ae32      	add	r6, sp, #200	; 0xc8
   daedc:	f10d 03c5 	add.w	r3, sp, #197	; 0xc5
   daee0:	f846 3dac 	str.w	r3, [r6, #-172]!
    size_t len = 0;

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
   daee4:	aa0b      	add	r2, sp, #44	; 0x2c
   daee6:	a90e      	add	r1, sp, #56	; 0x38
   daee8:	4630      	mov	r0, r6
   daeea:	f7fa f918 	bl	d511e <mbedtls_asn1_write_mpi>
   daeee:	1e04      	subs	r4, r0, #0
   daef0:	db21      	blt.n	daf36 <mbedtls_ecdsa_write_signature_restartable+0x96>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );
   daef2:	aa08      	add	r2, sp, #32
   daef4:	a90e      	add	r1, sp, #56	; 0x38
   daef6:	4630      	mov	r0, r6
   daef8:	f7fa f911 	bl	d511e <mbedtls_asn1_write_mpi>
   daefc:	2800      	cmp	r0, #0
   daefe:	db19      	blt.n	daf34 <mbedtls_ecdsa_write_signature_restartable+0x94>
   daf00:	1825      	adds	r5, r4, r0

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
   daf02:	462a      	mov	r2, r5
   daf04:	a90e      	add	r1, sp, #56	; 0x38
   daf06:	4630      	mov	r0, r6
   daf08:	f7fa f887 	bl	d501a <mbedtls_asn1_write_len>
   daf0c:	1e04      	subs	r4, r0, #0
   daf0e:	db12      	blt.n	daf36 <mbedtls_ecdsa_write_signature_restartable+0x96>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
   daf10:	2230      	movs	r2, #48	; 0x30
   daf12:	a90e      	add	r1, sp, #56	; 0x38
   daf14:	4630      	mov	r0, r6
   daf16:	f7fa f8f4 	bl	d5102 <mbedtls_asn1_write_tag>
   daf1a:	2800      	cmp	r0, #0
   daf1c:	db0a      	blt.n	daf34 <mbedtls_ecdsa_write_signature_restartable+0x94>
   daf1e:	442c      	add	r4, r5
   daf20:	4404      	add	r4, r0
                                       MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) );

    memcpy( sig, p, len );
   daf22:	4622      	mov	r2, r4
   daf24:	9907      	ldr	r1, [sp, #28]
   daf26:	9838      	ldr	r0, [sp, #224]	; 0xe0
   daf28:	f00c f811 	bl	e6f4e <memcpy>
    *slen = len;
   daf2c:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   daf2e:	601c      	str	r4, [r3, #0]

    return( 0 );
   daf30:	463c      	mov	r4, r7
   daf32:	e000      	b.n	daf36 <mbedtls_ecdsa_write_signature_restartable+0x96>

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
   daf34:	4604      	mov	r4, r0
                                             hash, hlen, f_rng, p_rng, f_rng,
                                             p_rng, rs_ctx ) );
#endif /* MBEDTLS_ECDSA_SIGN_ALT */
#endif /* MBEDTLS_ECDSA_DETERMINISTIC */

    MBEDTLS_MPI_CHK( ecdsa_signature_to_asn1( &r, &s, sig, slen ) );
   daf36:	4627      	mov	r7, r4

cleanup:
    mbedtls_mpi_free( &r );
   daf38:	a808      	add	r0, sp, #32
   daf3a:	f005 f8b0 	bl	e009e <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
   daf3e:	a80b      	add	r0, sp, #44	; 0x2c
   daf40:	f005 f8ad 	bl	e009e <mbedtls_mpi_free>

    return( ret );
}
   daf44:	4638      	mov	r0, r7
   daf46:	b032      	add	sp, #200	; 0xc8
   daf48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000daf4c <mbedtls_ecdsa_write_signature>:
                                 mbedtls_md_type_t md_alg,
                                 const unsigned char *hash, size_t hlen,
                                 unsigned char *sig, size_t *slen,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
   daf4c:	b510      	push	{r4, lr}
   daf4e:	b086      	sub	sp, #24
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );
    return( mbedtls_ecdsa_write_signature_restartable(
                ctx, md_alg, hash, hlen, sig, slen, f_rng, p_rng, NULL ) );
   daf50:	2400      	movs	r4, #0
   daf52:	9404      	str	r4, [sp, #16]
   daf54:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   daf56:	9403      	str	r4, [sp, #12]
   daf58:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   daf5a:	9402      	str	r4, [sp, #8]
   daf5c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   daf5e:	9401      	str	r4, [sp, #4]
   daf60:	9c08      	ldr	r4, [sp, #32]
   daf62:	9400      	str	r4, [sp, #0]
   daf64:	f7ff ff9c 	bl	daea0 <mbedtls_ecdsa_write_signature_restartable>
}
   daf68:	b006      	add	sp, #24
   daf6a:	bd10      	pop	{r4, pc}

000daf6c <mbedtls_ecdsa_read_signature_restartable>:
 */
int mbedtls_ecdsa_read_signature_restartable( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
   daf6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   daf70:	b08b      	sub	sp, #44	; 0x2c
    mbedtls_mpi r, s;
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );

    mbedtls_mpi_init( &r );
   daf72:	ae04      	add	r6, sp, #16
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
    int ret;
    unsigned char *p = (unsigned char *) sig;
    const unsigned char *end = sig + slen;
   daf74:	9d12      	ldr	r5, [sp, #72]	; 0x48
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
    int ret;
    unsigned char *p = (unsigned char *) sig;
   daf76:	9302      	str	r3, [sp, #8]
 */
int mbedtls_ecdsa_read_signature_restartable( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
   daf78:	4604      	mov	r4, r0
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );

    mbedtls_mpi_init( &r );
    mbedtls_mpi_init( &s );
   daf7a:	af07      	add	r7, sp, #28
    mbedtls_mpi r, s;
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );

    mbedtls_mpi_init( &r );
   daf7c:	4630      	mov	r0, r6
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
    int ret;
    unsigned char *p = (unsigned char *) sig;
    const unsigned char *end = sig + slen;
   daf7e:	441d      	add	r5, r3
 */
int mbedtls_ecdsa_read_signature_restartable( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
   daf80:	4688      	mov	r8, r1
   daf82:	4691      	mov	r9, r2
    mbedtls_mpi r, s;
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );

    mbedtls_mpi_init( &r );
   daf84:	f005 f885 	bl	e0092 <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
   daf88:	4638      	mov	r0, r7
   daf8a:	f005 f882 	bl	e0092 <mbedtls_mpi_init>

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   daf8e:	2330      	movs	r3, #48	; 0x30
   daf90:	aa03      	add	r2, sp, #12
   daf92:	4629      	mov	r1, r5
   daf94:	a802      	add	r0, sp, #8
   daf96:	f7fa fbcb 	bl	d5730 <mbedtls_asn1_get_tag>
   daf9a:	b998      	cbnz	r0, dafc4 <mbedtls_ecdsa_read_signature_restartable+0x58>
    {
        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
        goto cleanup;
    }

    if( p + len != end )
   daf9c:	9b03      	ldr	r3, [sp, #12]
   daf9e:	9a02      	ldr	r2, [sp, #8]
   dafa0:	4413      	add	r3, r2
   dafa2:	429d      	cmp	r5, r3
   dafa4:	d10c      	bne.n	dafc0 <mbedtls_ecdsa_read_signature_restartable+0x54>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
        goto cleanup;
    }

    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
   dafa6:	4632      	mov	r2, r6
   dafa8:	4629      	mov	r1, r5
   dafaa:	a802      	add	r0, sp, #8
   dafac:	f7fa fc11 	bl	d57d2 <mbedtls_asn1_get_mpi>
   dafb0:	b940      	cbnz	r0, dafc4 <mbedtls_ecdsa_read_signature_restartable+0x58>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
   dafb2:	463a      	mov	r2, r7
   dafb4:	4629      	mov	r1, r5
   dafb6:	a802      	add	r0, sp, #8
   dafb8:	f7fa fc0b 	bl	d57d2 <mbedtls_asn1_get_mpi>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
        goto cleanup;
    }

    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
   dafbc:	b910      	cbnz	r0, dafc4 <mbedtls_ecdsa_read_signature_restartable+0x58>
   dafbe:	e004      	b.n	dafca <mbedtls_ecdsa_read_signature_restartable+0x5e>
    }

    if( p + len != end )
    {
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
   dafc0:	4c0f      	ldr	r4, [pc, #60]	; (db000 <mbedtls_ecdsa_read_signature_restartable+0x94>)
   dafc2:	e012      	b.n	dafea <mbedtls_ecdsa_read_signature_restartable+0x7e>
    }

    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
    {
        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   dafc4:	f5a0 449f 	sub.w	r4, r0, #20352	; 0x4f80
        goto cleanup;
   dafc8:	e00f      	b.n	dafea <mbedtls_ecdsa_read_signature_restartable+0x7e>
#if defined(MBEDTLS_ECDSA_VERIFY_ALT)
    if( ( ret = mbedtls_ecdsa_verify( &ctx->grp, hash, hlen,
                                      &ctx->Q, &r, &s ) ) != 0 )
        goto cleanup;
#else
    if( ( ret = ecdsa_verify_restartable( &ctx->grp, hash, hlen,
   dafca:	f104 0388 	add.w	r3, r4, #136	; 0x88
   dafce:	4620      	mov	r0, r4
   dafd0:	e88d 00c0 	stmia.w	sp, {r6, r7}
   dafd4:	464a      	mov	r2, r9
   dafd6:	4641      	mov	r1, r8
   dafd8:	f7ff fec8 	bl	dad6c <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1>
   dafdc:	4604      	mov	r4, r0
   dafde:	b920      	cbnz	r0, dafea <mbedtls_ecdsa_read_signature_restartable+0x7e>

    /* At this point we know that the buffer starts with a valid signature.
     * Return 0 if the buffer just contains the signature, and a specific
     * error code if the valid signature is followed by more data. */
    if( p != end )
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;
   dafe0:	4b08      	ldr	r3, [pc, #32]	; (db004 <mbedtls_ecdsa_read_signature_restartable+0x98>)
   dafe2:	9a02      	ldr	r2, [sp, #8]
   dafe4:	4295      	cmp	r5, r2
   dafe6:	bf18      	it	ne
   dafe8:	461c      	movne	r4, r3

cleanup:
    mbedtls_mpi_free( &r );
   dafea:	4630      	mov	r0, r6
   dafec:	f005 f857 	bl	e009e <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
   daff0:	4638      	mov	r0, r7
   daff2:	f005 f854 	bl	e009e <mbedtls_mpi_free>

    return( ret );
}
   daff6:	4620      	mov	r0, r4
   daff8:	b00b      	add	sp, #44	; 0x2c
   daffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   daffe:	bf00      	nop
   db000:	ffffb01a 	.word	0xffffb01a
   db004:	ffffb400 	.word	0xffffb400

000db008 <mbedtls_ecdsa_read_signature>:
 * Read and check signature
 */
int mbedtls_ecdsa_read_signature( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen )
{
   db008:	b513      	push	{r0, r1, r4, lr}
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    return( mbedtls_ecdsa_read_signature_restartable(
                ctx, hash, hlen, sig, slen, NULL ) );
   db00a:	2400      	movs	r4, #0
   db00c:	9401      	str	r4, [sp, #4]
   db00e:	9c04      	ldr	r4, [sp, #16]
   db010:	9400      	str	r4, [sp, #0]
   db012:	f7ff ffab 	bl	daf6c <mbedtls_ecdsa_read_signature_restartable>
}
   db016:	b002      	add	sp, #8
   db018:	bd10      	pop	{r4, pc}

000db01a <mbedtls_ecdsa_init>:
 */
void mbedtls_ecdsa_init( mbedtls_ecdsa_context *ctx )
{
    ECDSA_VALIDATE( ctx != NULL );

    mbedtls_ecp_keypair_init( ctx );
   db01a:	f7fd b8a4 	b.w	d8166 <mbedtls_ecp_keypair_init>

000db01e <mbedtls_ecdsa_free>:
/*
 * Free context
 */
void mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx )
{
    if( ctx == NULL )
   db01e:	b108      	cbz	r0, db024 <mbedtls_ecdsa_free+0x6>
        return;

    mbedtls_ecp_keypair_free( ctx );
   db020:	f7fd b8ef 	b.w	d8202 <mbedtls_ecp_keypair_free>
   db024:	4770      	bx	lr

000db026 <mbedtls_ecdsa_from_keypair>:

/*
 * Set context from an mbedtls_ecp_keypair
 */
int mbedtls_ecdsa_from_keypair( mbedtls_ecdsa_context *ctx, const mbedtls_ecp_keypair *key )
{
   db026:	b570      	push	{r4, r5, r6, lr}
   db028:	4605      	mov	r5, r0
   db02a:	460e      	mov	r6, r1
    int ret;
    ECDSA_VALIDATE_RET( ctx != NULL );
    ECDSA_VALIDATE_RET( key != NULL );

    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
   db02c:	f7fd f90f 	bl	d824e <mbedtls_ecp_group_copy>
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
   db030:	4604      	mov	r4, r0
   db032:	b978      	cbnz	r0, db054 <mbedtls_ecdsa_from_keypair+0x2e>
   db034:	f106 017c 	add.w	r1, r6, #124	; 0x7c
   db038:	f105 007c 	add.w	r0, r5, #124	; 0x7c
   db03c:	f005 f8a9 	bl	e0192 <mbedtls_mpi_copy>
{
    int ret;
    ECDSA_VALIDATE_RET( ctx != NULL );
    ECDSA_VALIDATE_RET( key != NULL );

    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
   db040:	4604      	mov	r4, r0
   db042:	b938      	cbnz	r0, db054 <mbedtls_ecdsa_from_keypair+0x2e>
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
        ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 )
   db044:	f106 0188 	add.w	r1, r6, #136	; 0x88
   db048:	f105 0088 	add.w	r0, r5, #136	; 0x88
   db04c:	f7fd f8e9 	bl	d8222 <mbedtls_ecp_copy>
    int ret;
    ECDSA_VALIDATE_RET( ctx != NULL );
    ECDSA_VALIDATE_RET( key != NULL );

    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
   db050:	4604      	mov	r4, r0
   db052:	b110      	cbz	r0, db05a <mbedtls_ecdsa_from_keypair+0x34>
        ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 )
    {
        mbedtls_ecdsa_free( ctx );
   db054:	4628      	mov	r0, r5
   db056:	f7ff ffe2 	bl	db01e <mbedtls_ecdsa_free>
    }

    return( ret );
}
   db05a:	4620      	mov	r0, r4
   db05c:	bd70      	pop	{r4, r5, r6, pc}
	...

000db060 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context>:
 *  }
 */
static int pk_get_rsapubkey( unsigned char **p,
                             const unsigned char *end,
                             mbedtls_rsa_context *rsa )
{
   db060:	b570      	push	{r4, r5, r6, lr}
   db062:	b08a      	sub	sp, #40	; 0x28
   db064:	4616      	mov	r6, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   db066:	2330      	movs	r3, #48	; 0x30
   db068:	aa09      	add	r2, sp, #36	; 0x24
 *  }
 */
static int pk_get_rsapubkey( unsigned char **p,
                             const unsigned char *end,
                             mbedtls_rsa_context *rsa )
{
   db06a:	4604      	mov	r4, r0
   db06c:	460d      	mov	r5, r1
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   db06e:	f7fa fb5f 	bl	d5730 <mbedtls_asn1_get_tag>
   db072:	bb30      	cbnz	r0, db0c2 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x62>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( *p + len != end )
   db074:	6822      	ldr	r2, [r4, #0]
   db076:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db078:	4413      	add	r3, r2
   db07a:	429d      	cmp	r5, r3
   db07c:	d001      	beq.n	db082 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x22>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   db07e:	4824      	ldr	r0, [pc, #144]	; (db110 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xb0>)
   db080:	e043      	b.n	db10a <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xaa>

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   db082:	2302      	movs	r3, #2
   db084:	aa09      	add	r2, sp, #36	; 0x24
   db086:	4629      	mov	r1, r5
   db088:	4620      	mov	r0, r4
   db08a:	f7fa fb51 	bl	d5730 <mbedtls_asn1_get_tag>
   db08e:	b9c0      	cbnz	r0, db0c2 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x62>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
   db090:	9006      	str	r0, [sp, #24]
   db092:	9005      	str	r0, [sp, #20]
   db094:	9004      	str	r0, [sp, #16]
   db096:	9003      	str	r0, [sp, #12]
   db098:	9002      	str	r0, [sp, #8]
   db09a:	9001      	str	r0, [sp, #4]
   db09c:	9000      	str	r0, [sp, #0]
   db09e:	4603      	mov	r3, r0
   db0a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   db0a2:	6821      	ldr	r1, [r4, #0]
   db0a4:	4630      	mov	r0, r6
   db0a6:	f7fb fa75 	bl	d6594 <mbedtls_rsa_import_raw>
   db0aa:	bb68      	cbnz	r0, db108 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xa8>
                                        NULL, 0, NULL, 0 ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
   db0ac:	6822      	ldr	r2, [r4, #0]
   db0ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db0b0:	4413      	add	r3, r2
   db0b2:	6023      	str	r3, [r4, #0]

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   db0b4:	aa09      	add	r2, sp, #36	; 0x24
   db0b6:	2302      	movs	r3, #2
   db0b8:	4629      	mov	r1, r5
   db0ba:	4620      	mov	r0, r4
   db0bc:	f7fa fb38 	bl	d5730 <mbedtls_asn1_get_tag>
   db0c0:	b110      	cbz	r0, db0c8 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x68>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
   db0c2:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
   db0c6:	e020      	b.n	db10a <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xaa>

    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
   db0c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db0ca:	9306      	str	r3, [sp, #24]
   db0cc:	6823      	ldr	r3, [r4, #0]
   db0ce:	9305      	str	r3, [sp, #20]
   db0d0:	9004      	str	r0, [sp, #16]
   db0d2:	9003      	str	r0, [sp, #12]
   db0d4:	9002      	str	r0, [sp, #8]
   db0d6:	9001      	str	r0, [sp, #4]
   db0d8:	9000      	str	r0, [sp, #0]
   db0da:	4603      	mov	r3, r0
   db0dc:	4602      	mov	r2, r0
   db0de:	4601      	mov	r1, r0
   db0e0:	4630      	mov	r0, r6
   db0e2:	f7fb fa57 	bl	d6594 <mbedtls_rsa_import_raw>
   db0e6:	b978      	cbnz	r0, db108 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xa8>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
   db0e8:	6822      	ldr	r2, [r4, #0]
   db0ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db0ec:	4413      	add	r3, r2
   db0ee:	6023      	str	r3, [r4, #0]

    if( mbedtls_rsa_complete( rsa ) != 0 ||
   db0f0:	4630      	mov	r0, r6
   db0f2:	f7fb fa8d 	bl	d6610 <mbedtls_rsa_complete>
   db0f6:	b938      	cbnz	r0, db108 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xa8>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
   db0f8:	4630      	mov	r0, r6
   db0fa:	f7fb fb45 	bl	d6788 <mbedtls_rsa_check_pubkey>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;

    if( mbedtls_rsa_complete( rsa ) != 0 ||
   db0fe:	b918      	cbnz	r0, db108 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xa8>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
    }

    if( *p != end )
   db100:	6823      	ldr	r3, [r4, #0]
   db102:	429d      	cmp	r5, r3
   db104:	d001      	beq.n	db10a <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xaa>
   db106:	e7ba      	b.n	db07e <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x1e>
    *p += len;

    if( mbedtls_rsa_complete( rsa ) != 0 ||
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
   db108:	4802      	ldr	r0, [pc, #8]	; (db114 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xb4>)
    if( *p != end )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
   db10a:	b00a      	add	sp, #40	; 0x28
   db10c:	bd70      	pop	{r4, r5, r6, pc}
   db10e:	bf00      	nop
   db110:	ffffc49a 	.word	0xffffc49a
   db114:	ffffc500 	.word	0xffffc500

000db118 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group>:
 *   namedCurve         OBJECT IDENTIFIER
 *   specifiedCurve     SpecifiedECDomain -- = SEQUENCE { ... }
 *   -- implicitCurve   NULL
 */
static int pk_use_ecparams( const mbedtls_asn1_buf *params, mbedtls_ecp_group *grp )
{
   db118:	b513      	push	{r0, r1, r4, lr}
    int ret;
    mbedtls_ecp_group_id grp_id;

    if( params->tag == MBEDTLS_ASN1_OID )
   db11a:	6803      	ldr	r3, [r0, #0]
   db11c:	2b06      	cmp	r3, #6
 *   namedCurve         OBJECT IDENTIFIER
 *   specifiedCurve     SpecifiedECDomain -- = SEQUENCE { ... }
 *   -- implicitCurve   NULL
 */
static int pk_use_ecparams( const mbedtls_asn1_buf *params, mbedtls_ecp_group *grp )
{
   db11e:	460c      	mov	r4, r1
    int ret;
    mbedtls_ecp_group_id grp_id;

    if( params->tag == MBEDTLS_ASN1_OID )
   db120:	d001      	beq.n	db126 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0xe>
    {
#if defined(MBEDTLS_PK_PARSE_EC_EXTENDED)
        if( ( ret = pk_group_id_from_specified( params, &grp_id ) ) != 0 )
            return( ret );
#else
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
   db122:	480a      	ldr	r0, [pc, #40]	; (db14c <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x34>)
   db124:	e00f      	b.n	db146 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x2e>
    int ret;
    mbedtls_ecp_group_id grp_id;

    if( params->tag == MBEDTLS_ASN1_OID )
    {
        if( mbedtls_oid_get_ec_grp( params, &grp_id ) != 0 )
   db126:	f10d 0107 	add.w	r1, sp, #7
   db12a:	f7fe f897 	bl	d925c <mbedtls_oid_get_ec_grp>
   db12e:	b948      	cbnz	r0, db144 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x2c>
    }

    /*
     * grp may already be initilialized; if so, make sure IDs match
     */
    if( grp->id != MBEDTLS_ECP_DP_NONE && grp->id != grp_id )
   db130:	7823      	ldrb	r3, [r4, #0]
   db132:	f89d 1007 	ldrb.w	r1, [sp, #7]
   db136:	b10b      	cbz	r3, db13c <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x24>
   db138:	4299      	cmp	r1, r3
   db13a:	d1f2      	bne.n	db122 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0xa>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );

    if( ( ret = mbedtls_ecp_group_load( grp, grp_id ) ) != 0 )
   db13c:	4620      	mov	r0, r4
   db13e:	f001 fc2d 	bl	dc99c <mbedtls_ecp_group_load>
   db142:	e000      	b.n	db146 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x2e>
    mbedtls_ecp_group_id grp_id;

    if( params->tag == MBEDTLS_ASN1_OID )
    {
        if( mbedtls_oid_get_ec_grp( params, &grp_id ) != 0 )
            return( MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE );
   db144:	4802      	ldr	r0, [pc, #8]	; (db150 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x38>)

    if( ( ret = mbedtls_ecp_group_load( grp, grp_id ) ) != 0 )
        return( ret );

    return( 0 );
}
   db146:	b002      	add	sp, #8
   db148:	bd10      	pop	{r4, pc}
   db14a:	bf00      	nop
   db14c:	ffffc300 	.word	0xffffc300
   db150:	ffffc600 	.word	0xffffc600

000db154 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>:
 * Parse a PKCS#1 encoded private RSA key
 */
static int pk_parse_key_pkcs1_der( mbedtls_rsa_context *rsa,
                                   const unsigned char *key,
                                   size_t keylen )
{
   db154:	b5f0      	push	{r4, r5, r6, r7, lr}
   db156:	b08f      	sub	sp, #60	; 0x3c
   db158:	460c      	mov	r4, r1
   db15a:	4615      	mov	r5, r2
   db15c:	4607      	mov	r7, r0
    int ret, version;
    size_t len;
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );
   db15e:	a80b      	add	r0, sp, #44	; 0x2c
   db160:	f004 ff97 	bl	e0092 <mbedtls_mpi_init>
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   db164:	2330      	movs	r3, #48	; 0x30
   db166:	aa09      	add	r2, sp, #36	; 0x24
   db168:	1961      	adds	r1, r4, r5
   db16a:	a80a      	add	r0, sp, #40	; 0x28
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );

    p = (unsigned char *) key;
   db16c:	940a      	str	r4, [sp, #40]	; 0x28
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   db16e:	f7fa fadf 	bl	d5730 <mbedtls_asn1_get_tag>
   db172:	b940      	cbnz	r0, db186 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x32>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
   db174:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db176:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   db178:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
   db17a:	aa08      	add	r2, sp, #32
   db17c:	4631      	mov	r1, r6
   db17e:	a80a      	add	r0, sp, #40	; 0x28
   db180:	f7fa fb03 	bl	d578a <mbedtls_asn1_get_int>
   db184:	b110      	cbz	r0, db18c <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x38>
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   db186:	f5a0 5574 	sub.w	r5, r0, #15616	; 0x3d00
   db18a:	e0d4      	b.n	db336 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    }

    if( version != 0 )
   db18c:	9d08      	ldr	r5, [sp, #32]
   db18e:	b9dd      	cbnz	r5, db1c8 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x74>
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
    }

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   db190:	2302      	movs	r3, #2
   db192:	aa09      	add	r2, sp, #36	; 0x24
   db194:	4631      	mov	r1, r6
   db196:	a80a      	add	r0, sp, #40	; 0x28
   db198:	f7fa faca 	bl	d5730 <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   db19c:	4604      	mov	r4, r0
   db19e:	2800      	cmp	r0, #0
   db1a0:	f040 80c5 	bne.w	db32e <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
   db1a4:	9006      	str	r0, [sp, #24]
   db1a6:	9005      	str	r0, [sp, #20]
   db1a8:	9004      	str	r0, [sp, #16]
   db1aa:	9003      	str	r0, [sp, #12]
   db1ac:	9002      	str	r0, [sp, #8]
   db1ae:	9001      	str	r0, [sp, #4]
   db1b0:	9000      	str	r0, [sp, #0]
   db1b2:	4603      	mov	r3, r0
   db1b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   db1b6:	990a      	ldr	r1, [sp, #40]	; 0x28
   db1b8:	4638      	mov	r0, r7
   db1ba:	f7fb f9eb 	bl	d6594 <mbedtls_rsa_import_raw>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
    }

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   db1be:	4604      	mov	r4, r0
   db1c0:	2800      	cmp	r0, #0
   db1c2:	f040 80b4 	bne.w	db32e <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
   db1c6:	e001      	b.n	db1cc <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x78>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    if( version != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
   db1c8:	4d5c      	ldr	r5, [pc, #368]	; (db33c <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e8>)
   db1ca:	e0b4      	b.n	db336 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
   db1cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   db1ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db1d0:	4413      	add	r3, r2
   db1d2:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   db1d4:	aa09      	add	r2, sp, #36	; 0x24
   db1d6:	2302      	movs	r3, #2
   db1d8:	4631      	mov	r1, r6
   db1da:	a80a      	add	r0, sp, #40	; 0x28
   db1dc:	f7fa faa8 	bl	d5730 <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   db1e0:	4604      	mov	r4, r0
   db1e2:	2800      	cmp	r0, #0
   db1e4:	f040 80a3 	bne.w	db32e <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
   db1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db1ea:	9306      	str	r3, [sp, #24]
   db1ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db1ee:	9305      	str	r3, [sp, #20]
   db1f0:	9404      	str	r4, [sp, #16]
   db1f2:	9403      	str	r4, [sp, #12]
   db1f4:	9402      	str	r4, [sp, #8]
   db1f6:	9401      	str	r4, [sp, #4]
   db1f8:	9400      	str	r4, [sp, #0]
   db1fa:	4623      	mov	r3, r4
   db1fc:	4622      	mov	r2, r4
   db1fe:	4621      	mov	r1, r4
   db200:	4638      	mov	r0, r7
   db202:	f7fb f9c7 	bl	d6594 <mbedtls_rsa_import_raw>
        goto cleanup;
    p += len;

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   db206:	4604      	mov	r4, r0
   db208:	2800      	cmp	r0, #0
   db20a:	f040 8090 	bne.w	db32e <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, p, len ) ) != 0 )
        goto cleanup;
    p += len;
   db20e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   db210:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db212:	4413      	add	r3, r2
   db214:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import D */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   db216:	aa09      	add	r2, sp, #36	; 0x24
   db218:	2302      	movs	r3, #2
   db21a:	4631      	mov	r1, r6
   db21c:	a80a      	add	r0, sp, #40	; 0x28
   db21e:	f7fa fa87 	bl	d5730 <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   db222:	4604      	mov	r4, r0
   db224:	2800      	cmp	r0, #0
   db226:	f040 8082 	bne.w	db32e <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
   db22a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db22c:	9304      	str	r3, [sp, #16]
   db22e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db230:	9406      	str	r4, [sp, #24]
   db232:	9405      	str	r4, [sp, #20]
   db234:	9303      	str	r3, [sp, #12]
   db236:	9402      	str	r4, [sp, #8]
   db238:	9401      	str	r4, [sp, #4]
   db23a:	9400      	str	r4, [sp, #0]
   db23c:	4623      	mov	r3, r4
   db23e:	4622      	mov	r2, r4
   db240:	4621      	mov	r1, r4
   db242:	4638      	mov	r0, r7
   db244:	f7fb f9a6 	bl	d6594 <mbedtls_rsa_import_raw>
        goto cleanup;
    p += len;

    /* Import D */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   db248:	4604      	mov	r4, r0
   db24a:	2800      	cmp	r0, #0
   db24c:	d16f      	bne.n	db32e <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        p, len, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
   db24e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   db250:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db252:	4413      	add	r3, r2
   db254:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import P */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   db256:	aa09      	add	r2, sp, #36	; 0x24
   db258:	2302      	movs	r3, #2
   db25a:	4631      	mov	r1, r6
   db25c:	a80a      	add	r0, sp, #40	; 0x28
   db25e:	f7fa fa67 	bl	d5730 <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   db262:	4604      	mov	r4, r0
   db264:	2800      	cmp	r0, #0
   db266:	d162      	bne.n	db32e <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
   db268:	2200      	movs	r2, #0
   db26a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db26c:	9300      	str	r3, [sp, #0]
   db26e:	9206      	str	r2, [sp, #24]
   db270:	9205      	str	r2, [sp, #20]
   db272:	9204      	str	r2, [sp, #16]
   db274:	9203      	str	r2, [sp, #12]
   db276:	9202      	str	r2, [sp, #8]
   db278:	9201      	str	r2, [sp, #4]
   db27a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db27c:	4611      	mov	r1, r2
   db27e:	4638      	mov	r0, r7
   db280:	f7fb f988 	bl	d6594 <mbedtls_rsa_import_raw>
        goto cleanup;
    p += len;

    /* Import P */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   db284:	4604      	mov	r4, r0
   db286:	2800      	cmp	r0, #0
   db288:	d151      	bne.n	db32e <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
   db28a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   db28c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db28e:	4413      	add	r3, r2
   db290:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import Q */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   db292:	aa09      	add	r2, sp, #36	; 0x24
   db294:	2302      	movs	r3, #2
   db296:	4631      	mov	r1, r6
   db298:	a80a      	add	r0, sp, #40	; 0x28
   db29a:	f7fa fa49 	bl	d5730 <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   db29e:	4604      	mov	r4, r0
   db2a0:	2800      	cmp	r0, #0
   db2a2:	d144      	bne.n	db32e <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
   db2a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db2a6:	9302      	str	r3, [sp, #8]
   db2a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   db2aa:	9406      	str	r4, [sp, #24]
   db2ac:	9405      	str	r4, [sp, #20]
   db2ae:	9404      	str	r4, [sp, #16]
   db2b0:	9403      	str	r4, [sp, #12]
   db2b2:	9301      	str	r3, [sp, #4]
   db2b4:	9400      	str	r4, [sp, #0]
   db2b6:	4623      	mov	r3, r4
   db2b8:	4622      	mov	r2, r4
   db2ba:	4621      	mov	r1, r4
   db2bc:	4638      	mov	r0, r7
   db2be:	f7fb f969 	bl	d6594 <mbedtls_rsa_import_raw>
        goto cleanup;
    p += len;

    /* Import Q */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   db2c2:	4604      	mov	r4, r0
   db2c4:	2800      	cmp	r0, #0
   db2c6:	d132      	bne.n	db32e <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
   db2c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   db2ca:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
   db2cc:	4638      	mov	r0, r7
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
   db2ce:	4413      	add	r3, r2
   db2d0:	930a      	str	r3, [sp, #40]	; 0x28

    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
   db2d2:	f7fb f99d 	bl	d6610 <mbedtls_rsa_complete>
   db2d6:	4604      	mov	r4, r0
   db2d8:	b9c8      	cbnz	r0, db30e <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1ba>
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
   db2da:	aa0b      	add	r2, sp, #44	; 0x2c
   db2dc:	4631      	mov	r1, r6
   db2de:	a80a      	add	r0, sp, #40	; 0x28
   db2e0:	f7fa fa77 	bl	d57d2 <mbedtls_asn1_get_mpi>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
   db2e4:	4604      	mov	r4, r0
   db2e6:	bb10      	cbnz	r0, db32e <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
   db2e8:	aa0b      	add	r2, sp, #44	; 0x2c
   db2ea:	4631      	mov	r1, r6
   db2ec:	a80a      	add	r0, sp, #40	; 0x28
   db2ee:	f7fa fa70 	bl	d57d2 <mbedtls_asn1_get_mpi>
    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
   db2f2:	4604      	mov	r4, r0
   db2f4:	b9d8      	cbnz	r0, db32e <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 )
   db2f6:	aa0b      	add	r2, sp, #44	; 0x2c
   db2f8:	4631      	mov	r1, r6
   db2fa:	a80a      	add	r0, sp, #40	; 0x28
   db2fc:	f7fa fa69 	bl	d57d2 <mbedtls_asn1_get_mpi>
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
   db300:	4604      	mov	r4, r0
   db302:	b9a0      	cbnz	r0, db32e <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        goto cleanup;

    if( p != end )
    {
        ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH ;
   db304:	4b0e      	ldr	r3, [pc, #56]	; (db340 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1ec>)
   db306:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   db308:	4296      	cmp	r6, r2
   db30a:	bf18      	it	ne
   db30c:	461c      	movne	r4, r3
    }

cleanup:

    mbedtls_mpi_free( &T );
   db30e:	a80b      	add	r0, sp, #44	; 0x2c
   db310:	f004 fec5 	bl	e009e <mbedtls_mpi_free>

    if( ret != 0 )
   db314:	b17c      	cbz	r4, db336 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    {
        /* Wrap error code if it's coming from a lower level */
        if( ( ret & 0xff80 ) == 0 )
   db316:	f64f 7380 	movw	r3, #65408	; 0xff80
   db31a:	4023      	ands	r3, r4
   db31c:	b913      	cbnz	r3, db324 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1d0>
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret;
   db31e:	f5a4 5574 	sub.w	r5, r4, #15616	; 0x3d00
   db322:	e000      	b.n	db326 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1d2>
        else
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT;
   db324:	4d07      	ldr	r5, [pc, #28]	; (db344 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1f0>)

        mbedtls_rsa_free( rsa );
   db326:	4638      	mov	r0, r7
   db328:	f7fc fa4e 	bl	d77c8 <mbedtls_rsa_free>
   db32c:	e003      	b.n	db336 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH ;
    }

cleanup:

    mbedtls_mpi_free( &T );
   db32e:	a80b      	add	r0, sp, #44	; 0x2c
   db330:	f004 feb5 	bl	e009e <mbedtls_mpi_free>
   db334:	e7ef      	b.n	db316 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1c2>

        mbedtls_rsa_free( rsa );
    }

    return( ret );
}
   db336:	4628      	mov	r0, r5
   db338:	b00f      	add	sp, #60	; 0x3c
   db33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db33c:	ffffc280 	.word	0xffffc280
   db340:	ffffc29a 	.word	0xffffc29a
   db344:	ffffc300 	.word	0xffffc300

000db348 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>:
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
   db348:	b530      	push	{r4, r5, lr}
   db34a:	4615      	mov	r5, r2
   db34c:	b085      	sub	sp, #20
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );
   db34e:	2200      	movs	r2, #0
   db350:	601a      	str	r2, [r3, #0]
   db352:	605a      	str	r2, [r3, #4]
   db354:	609a      	str	r2, [r3, #8]

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
   db356:	aa01      	add	r2, sp, #4
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
   db358:	461c      	mov	r4, r3
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
   db35a:	f7fa fac6 	bl	d58ea <mbedtls_asn1_get_alg>
   db35e:	b110      	cbz	r0, db366 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x1e>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
   db360:	f5a0 506a 	sub.w	r0, r0, #14976	; 0x3a80
   db364:	e014      	b.n	db390 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
   db366:	4629      	mov	r1, r5
   db368:	a801      	add	r0, sp, #4
   db36a:	f7fd ff5d 	bl	d9228 <mbedtls_oid_get_pk_alg>
   db36e:	b960      	cbnz	r0, db38a <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x42>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
   db370:	782b      	ldrb	r3, [r5, #0]
   db372:	2b01      	cmp	r3, #1
   db374:	d10c      	bne.n	db390 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
   db376:	6823      	ldr	r3, [r4, #0]
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
   db378:	2b05      	cmp	r3, #5
   db37a:	d000      	beq.n	db37e <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x36>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
   db37c:	b93b      	cbnz	r3, db38e <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x46>
   db37e:	6863      	ldr	r3, [r4, #4]
                params->len != 0 ) )
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
   db380:	4804      	ldr	r0, [pc, #16]	; (db394 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
   db382:	2b00      	cmp	r3, #0
   db384:	bf08      	it	eq
   db386:	2000      	moveq	r0, #0
   db388:	e002      	b.n	db390 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
   db38a:	4803      	ldr	r0, [pc, #12]	; (db398 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x50>)
   db38c:	e000      	b.n	db390 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
                params->len != 0 ) )
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
   db38e:	4801      	ldr	r0, [pc, #4]	; (db394 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
    }

    return( 0 );
}
   db390:	b005      	add	sp, #20
   db392:	bd30      	pop	{r4, r5, pc}
   db394:	ffffc580 	.word	0xffffc580
   db398:	ffffc380 	.word	0xffffc380

000db39c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj>:
 * Parse a SEC1 encoded private EC key
 */
static int pk_parse_key_sec1_der( mbedtls_ecp_keypair *eck,
                                  const unsigned char *key,
                                  size_t keylen )
{
   db39c:	b5f0      	push	{r4, r5, r6, r7, lr}
   db39e:	b089      	sub	sp, #36	; 0x24
   db3a0:	4605      	mov	r5, r0
    int ret;
    int version, pubkey_done;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
   db3a2:	9104      	str	r1, [sp, #16]
     *      privateKey     OCTET STRING,
     *      parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,
     *      publicKey  [1] BIT STRING OPTIONAL
     *    }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   db3a4:	2330      	movs	r3, #48	; 0x30
   db3a6:	4411      	add	r1, r2
   db3a8:	a804      	add	r0, sp, #16
   db3aa:	aa03      	add	r2, sp, #12
   db3ac:	f7fa f9c0 	bl	d5730 <mbedtls_asn1_get_tag>
   db3b0:	2800      	cmp	r0, #0
   db3b2:	d168      	bne.n	db486 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xea>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
   db3b4:	9b03      	ldr	r3, [sp, #12]
   db3b6:	9f04      	ldr	r7, [sp, #16]
   db3b8:	441f      	add	r7, r3

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
   db3ba:	aa02      	add	r2, sp, #8
   db3bc:	4639      	mov	r1, r7
   db3be:	a804      	add	r0, sp, #16
   db3c0:	f7fa f9e3 	bl	d578a <mbedtls_asn1_get_int>
   db3c4:	2800      	cmp	r0, #0
   db3c6:	d15e      	bne.n	db486 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xea>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 1 )
   db3c8:	9b02      	ldr	r3, [sp, #8]
   db3ca:	2b01      	cmp	r3, #1
   db3cc:	f040 8094 	bne.w	db4f8 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x15c>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   db3d0:	2304      	movs	r3, #4
   db3d2:	aa03      	add	r2, sp, #12
   db3d4:	4639      	mov	r1, r7
   db3d6:	a804      	add	r0, sp, #16
   db3d8:	f7fa f9aa 	bl	d5730 <mbedtls_asn1_get_tag>
   db3dc:	2800      	cmp	r0, #0
   db3de:	d152      	bne.n	db486 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xea>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_mpi_read_binary( &eck->d, p, len ) ) != 0 )
   db3e0:	f105 067c 	add.w	r6, r5, #124	; 0x7c
   db3e4:	9a03      	ldr	r2, [sp, #12]
   db3e6:	9904      	ldr	r1, [sp, #16]
   db3e8:	4630      	mov	r0, r6
   db3ea:	f004 ff9f 	bl	e032c <mbedtls_mpi_read_binary>
   db3ee:	4604      	mov	r4, r0
   db3f0:	2800      	cmp	r0, #0
   db3f2:	d166      	bne.n	db4c2 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x126>
    {
        mbedtls_ecp_keypair_free( eck );
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    p += len;
   db3f4:	9a04      	ldr	r2, [sp, #16]
   db3f6:	9b03      	ldr	r3, [sp, #12]
   db3f8:	4413      	add	r3, r2

    pubkey_done = 0;
    if( p != end )
   db3fa:	429f      	cmp	r7, r3
    {
        mbedtls_ecp_keypair_free( eck );
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    p += len;
   db3fc:	9304      	str	r3, [sp, #16]

    pubkey_done = 0;
    if( p != end )
   db3fe:	d02e      	beq.n	db45e <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xc2>
    {
        /*
         * Is 'parameters' present?
         */
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   db400:	23a0      	movs	r3, #160	; 0xa0
   db402:	aa03      	add	r2, sp, #12
   db404:	4639      	mov	r1, r7
   db406:	a804      	add	r0, sp, #16
   db408:	f7fa f992 	bl	d5730 <mbedtls_asn1_get_tag>
   db40c:	4604      	mov	r4, r0
   db40e:	bb18      	cbnz	r0, db458 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xbc>
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )
        {
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
   db410:	9a03      	ldr	r2, [sp, #12]
   db412:	9b04      	ldr	r3, [sp, #16]
static int pk_get_ecparams( unsigned char **p, const unsigned char *end,
                            mbedtls_asn1_buf *params )
{
    int ret;

    if ( end - *p < 1 )
   db414:	2a00      	cmp	r2, #0
         * Is 'parameters' present?
         */
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )
        {
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
   db416:	eb03 0402 	add.w	r4, r3, r2
static int pk_get_ecparams( unsigned char **p, const unsigned char *end,
                            mbedtls_asn1_buf *params )
{
    int ret;

    if ( end - *p < 1 )
   db41a:	dd71      	ble.n	db500 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x164>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    /* Tag may be either OID or SEQUENCE */
    params->tag = **p;
   db41c:	781b      	ldrb	r3, [r3, #0]
   db41e:	9305      	str	r3, [sp, #20]
    if( params->tag != MBEDTLS_ASN1_OID
   db420:	2b06      	cmp	r3, #6
   db422:	d16f      	bne.n	db504 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x168>
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    }

    if( ( ret = mbedtls_asn1_get_tag( p, end, &params->len, params->tag ) ) != 0 )
   db424:	aa06      	add	r2, sp, #24
   db426:	4621      	mov	r1, r4
   db428:	a804      	add	r0, sp, #16
   db42a:	f7fa f981 	bl	d5730 <mbedtls_asn1_get_tag>
   db42e:	b150      	cbz	r0, db446 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xaa>
         * Is 'parameters' present?
         */
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )
        {
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
   db430:	f5b0 5474 	subs.w	r4, r0, #15616	; 0x3d00
   db434:	d167      	bne.n	db506 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x16a>
                ( ret = pk_use_ecparams( &params, &eck->grp )  ) != 0 )
   db436:	4629      	mov	r1, r5
   db438:	a805      	add	r0, sp, #20
   db43a:	f7ff fe6d 	bl	db118 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group>
         * Is 'parameters' present?
         */
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )
        {
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
   db43e:	4604      	mov	r4, r0
   db440:	2800      	cmp	r0, #0
   db442:	d160      	bne.n	db506 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x16a>
   db444:	e00b      	b.n	db45e <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xc2>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &params->len, params->tag ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    params->p = *p;
   db446:	9a04      	ldr	r2, [sp, #16]
    *p += params->len;
   db448:	9b06      	ldr	r3, [sp, #24]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &params->len, params->tag ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    params->p = *p;
   db44a:	9207      	str	r2, [sp, #28]
    *p += params->len;
   db44c:	4413      	add	r3, r2

    if( *p != end )
   db44e:	429c      	cmp	r4, r3
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    params->p = *p;
    *p += params->len;
   db450:	9304      	str	r3, [sp, #16]

    if( *p != end )
   db452:	d0f0      	beq.n	db436 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x9a>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   db454:	4c2f      	ldr	r4, [pc, #188]	; (db514 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x178>)
   db456:	e056      	b.n	db506 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x16a>
            {
                mbedtls_ecp_keypair_free( eck );
                return( ret );
            }
        }
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   db458:	f110 0f62 	cmn.w	r0, #98	; 0x62
   db45c:	d131      	bne.n	db4c2 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x126>
            mbedtls_ecp_keypair_free( eck );
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
        }
    }

    if( p != end )
   db45e:	9b04      	ldr	r3, [sp, #16]
   db460:	429f      	cmp	r7, r3
   db462:	d034      	beq.n	db4ce <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x132>
    {
        /*
         * Is 'publickey' present? If not, or if we can't read it (eg because it
         * is compressed), create it from the private key.
         */
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   db464:	23a1      	movs	r3, #161	; 0xa1
   db466:	aa03      	add	r2, sp, #12
   db468:	4639      	mov	r1, r7
   db46a:	a804      	add	r0, sp, #16
   db46c:	f7fa f960 	bl	d5730 <mbedtls_asn1_get_tag>
   db470:	4604      	mov	r4, r0
   db472:	bb18      	cbnz	r0, db4bc <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x120>
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 1 ) ) == 0 )
        {
            end2 = p + len;
   db474:	9b03      	ldr	r3, [sp, #12]
   db476:	9c04      	ldr	r4, [sp, #16]
   db478:	441c      	add	r4, r3

            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
   db47a:	aa03      	add	r2, sp, #12
   db47c:	4621      	mov	r1, r4
   db47e:	a804      	add	r0, sp, #16
   db480:	f7fa f9df 	bl	d5842 <mbedtls_asn1_get_bitstring_null>
   db484:	b110      	cbz	r0, db48c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xf0>
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   db486:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
   db48a:	e03f      	b.n	db50c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x170>

            if( p + len != end2 )
   db48c:	9a04      	ldr	r2, [sp, #16]
   db48e:	9b03      	ldr	r3, [sp, #12]
   db490:	4413      	add	r3, r2
   db492:	429c      	cmp	r4, r3
   db494:	d132      	bne.n	db4fc <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x160>
static int pk_get_ecpubkey( unsigned char **p, const unsigned char *end,
                            mbedtls_ecp_keypair *key )
{
    int ret;

    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
   db496:	f105 0788 	add.w	r7, r5, #136	; 0x88
   db49a:	1aa3      	subs	r3, r4, r2
   db49c:	4639      	mov	r1, r7
   db49e:	4628      	mov	r0, r5
   db4a0:	f7fd fa96 	bl	d89d0 <mbedtls_ecp_point_read_binary>
   db4a4:	b918      	cbnz	r0, db4ae <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x112>
                    (const unsigned char *) *p, end - *p ) ) == 0 )
    {
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
   db4a6:	4639      	mov	r1, r7
   db4a8:	4628      	mov	r0, r5
   db4aa:	f7fd fb19 	bl	d8ae0 <mbedtls_ecp_check_pubkey>
    }

    /*
     * We know mbedtls_ecp_point_read_binary consumed all bytes or failed
     */
    *p = (unsigned char *) end;
   db4ae:	9404      	str	r4, [sp, #16]

            if( p + len != end2 )
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                        MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

            if( ( ret = pk_get_ecpubkey( &p, end2, eck ) ) == 0 )
   db4b0:	b1d8      	cbz	r0, db4ea <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x14e>
            {
                /*
                 * The only acceptable failure mode of pk_get_ecpubkey() above
                 * is if the point format is not recognized.
                 */
                if( ret != MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE )
   db4b2:	f510 4f9d 	cmn.w	r0, #20096	; 0x4e80
   db4b6:	d00a      	beq.n	db4ce <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x132>
                    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
   db4b8:	4c17      	ldr	r4, [pc, #92]	; (db518 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x17c>)
   db4ba:	e027      	b.n	db50c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x170>
            }
        }
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   db4bc:	f110 0f62 	cmn.w	r0, #98	; 0x62
   db4c0:	d005      	beq.n	db4ce <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x132>

    if( ! pubkey_done &&
        ( ret = mbedtls_ecp_mul( &eck->grp, &eck->Q, &eck->d, &eck->grp.G,
                                                      NULL, NULL ) ) != 0 )
    {
        mbedtls_ecp_keypair_free( eck );
   db4c2:	4628      	mov	r0, r5
   db4c4:	f7fc fe9d 	bl	d8202 <mbedtls_ecp_keypair_free>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   db4c8:	f5a4 5474 	sub.w	r4, r4, #15616	; 0x3d00
   db4cc:	e01e      	b.n	db50c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x170>
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
        }
    }

    if( ! pubkey_done &&
        ( ret = mbedtls_ecp_mul( &eck->grp, &eck->Q, &eck->d, &eck->grp.G,
   db4ce:	2300      	movs	r3, #0
   db4d0:	9301      	str	r3, [sp, #4]
   db4d2:	9300      	str	r3, [sp, #0]
   db4d4:	4632      	mov	r2, r6
   db4d6:	f105 0328 	add.w	r3, r5, #40	; 0x28
   db4da:	f105 0188 	add.w	r1, r5, #136	; 0x88
   db4de:	4628      	mov	r0, r5
   db4e0:	f7fd fd02 	bl	d8ee8 <mbedtls_ecp_mul>
            mbedtls_ecp_keypair_free( eck );
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
        }
    }

    if( ! pubkey_done &&
   db4e4:	4604      	mov	r4, r0
   db4e6:	2800      	cmp	r0, #0
   db4e8:	d1eb      	bne.n	db4c2 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x126>
    {
        mbedtls_ecp_keypair_free( eck );
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    if( ( ret = mbedtls_ecp_check_privkey( &eck->grp, &eck->d ) ) != 0 )
   db4ea:	4631      	mov	r1, r6
   db4ec:	4628      	mov	r0, r5
   db4ee:	f7fd fbb3 	bl	d8c58 <mbedtls_ecp_check_privkey>
   db4f2:	4604      	mov	r4, r0
   db4f4:	b150      	cbz	r0, db50c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x170>
   db4f6:	e006      	b.n	db506 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x16a>

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 1 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
   db4f8:	4c08      	ldr	r4, [pc, #32]	; (db51c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x180>)
   db4fa:	e007      	b.n	db50c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x170>
            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

            if( p + len != end2 )
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                        MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   db4fc:	4c05      	ldr	r4, [pc, #20]	; (db514 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x178>)
   db4fe:	e005      	b.n	db50c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x170>
{
    int ret;

    if ( end - *p < 1 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   db500:	4c07      	ldr	r4, [pc, #28]	; (db520 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x184>)
   db502:	e000      	b.n	db506 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x16a>
            && params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE )
#endif
            )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   db504:	4c07      	ldr	r4, [pc, #28]	; (db524 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x188>)
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )
        {
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
                ( ret = pk_use_ecparams( &params, &eck->grp )  ) != 0 )
            {
                mbedtls_ecp_keypair_free( eck );
   db506:	4628      	mov	r0, r5
   db508:	f7fc fe7b 	bl	d8202 <mbedtls_ecp_keypair_free>
        mbedtls_ecp_keypair_free( eck );
        return( ret );
    }

    return( 0 );
}
   db50c:	4620      	mov	r0, r4
   db50e:	b009      	add	sp, #36	; 0x24
   db510:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db512:	bf00      	nop
   db514:	ffffc29a 	.word	0xffffc29a
   db518:	ffffc300 	.word	0xffffc300
   db51c:	ffffc280 	.word	0xffffc280
   db520:	ffffc2a0 	.word	0xffffc2a0
   db524:	ffffc29e 	.word	0xffffc29e

000db528 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>:
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
   db528:	b570      	push	{r4, r5, r6, lr}
   db52a:	b088      	sub	sp, #32
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
   db52c:	2300      	movs	r3, #0
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
   db52e:	4605      	mov	r5, r0
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
   db530:	9104      	str	r1, [sp, #16]
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
   db532:	f88d 3007 	strb.w	r3, [sp, #7]
     *    PrivateKey ::= OCTET STRING
     *
     *  The PrivateKey OCTET STRING is a SEC1 ECPrivateKey
     */

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   db536:	4411      	add	r1, r2
   db538:	2330      	movs	r3, #48	; 0x30
   db53a:	aa03      	add	r2, sp, #12
   db53c:	a804      	add	r0, sp, #16
   db53e:	f7fa f8f7 	bl	d5730 <mbedtls_asn1_get_tag>
   db542:	b9d0      	cbnz	r0, db57a <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x52>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
   db544:	9b03      	ldr	r3, [sp, #12]
   db546:	9e04      	ldr	r6, [sp, #16]
   db548:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
   db54a:	aa02      	add	r2, sp, #8
   db54c:	4631      	mov	r1, r6
   db54e:	a804      	add	r0, sp, #16
   db550:	f7fa f91b 	bl	d578a <mbedtls_asn1_get_int>
   db554:	b988      	cbnz	r0, db57a <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x52>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 0 )
   db556:	9c02      	ldr	r4, [sp, #8]
   db558:	2c00      	cmp	r4, #0
   db55a:	d13f      	bne.n	db5dc <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xb4>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );

    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
   db55c:	ab05      	add	r3, sp, #20
   db55e:	f10d 0207 	add.w	r2, sp, #7
   db562:	4631      	mov	r1, r6
   db564:	a804      	add	r0, sp, #16
   db566:	f7ff feef 	bl	db348 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
   db56a:	b930      	cbnz	r0, db57a <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x52>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   db56c:	2304      	movs	r3, #4
   db56e:	aa03      	add	r2, sp, #12
   db570:	4631      	mov	r1, r6
   db572:	a804      	add	r0, sp, #16
   db574:	f7fa f8dc 	bl	d5730 <mbedtls_asn1_get_tag>
   db578:	b110      	cbz	r0, db580 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x58>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   db57a:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
   db57e:	e039      	b.n	db5f4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>

    if( len < 1 )
   db580:	9b03      	ldr	r3, [sp, #12]
   db582:	b36b      	cbz	r3, db5e0 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xb8>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
   db584:	f89d 0007 	ldrb.w	r0, [sp, #7]
   db588:	f002 fd7c 	bl	de084 <mbedtls_pk_info_from_type>
   db58c:	4601      	mov	r1, r0
   db58e:	b908      	cbnz	r0, db594 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x6c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
   db590:	4c1a      	ldr	r4, [pc, #104]	; (db5fc <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xd4>)
   db592:	e02f      	b.n	db5f4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
   db594:	4628      	mov	r0, r5
   db596:	f002 fd81 	bl	de09c <mbedtls_pk_setup>
   db59a:	bb18      	cbnz	r0, db5e4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xbc>
        return( ret );

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA )
   db59c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   db5a0:	2b01      	cmp	r3, #1
   db5a2:	d10a      	bne.n	db5ba <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x92>
    {
        if( ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), p, len ) ) != 0 )
   db5a4:	9a03      	ldr	r2, [sp, #12]
   db5a6:	9904      	ldr	r1, [sp, #16]
   db5a8:	6868      	ldr	r0, [r5, #4]
   db5aa:	f7ff fdd3 	bl	db154 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
   db5ae:	4604      	mov	r4, r0
   db5b0:	b1d0      	cbz	r0, db5e8 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xc0>
        {
            mbedtls_pk_free( pk );
   db5b2:	4628      	mov	r0, r5
   db5b4:	f002 fd56 	bl	de064 <mbedtls_pk_free>
            return( ret );
   db5b8:	e01c      	b.n	db5f4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>
        }
    } else
#endif /* MBEDTLS_RSA_C */
#if defined(MBEDTLS_ECP_C)
    if( pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH )
   db5ba:	3b02      	subs	r3, #2
   db5bc:	2b01      	cmp	r3, #1
   db5be:	d8e7      	bhi.n	db590 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x68>
    {
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
   db5c0:	6869      	ldr	r1, [r5, #4]
   db5c2:	a805      	add	r0, sp, #20
   db5c4:	f7ff fda8 	bl	db118 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group>
   db5c8:	4606      	mov	r6, r0
   db5ca:	b978      	cbnz	r0, db5ec <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xc4>
            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ), p, len )  ) != 0 )
   db5cc:	9a03      	ldr	r2, [sp, #12]
   db5ce:	9904      	ldr	r1, [sp, #16]
   db5d0:	6868      	ldr	r0, [r5, #4]
   db5d2:	f7ff fee3 	bl	db39c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj>
    } else
#endif /* MBEDTLS_RSA_C */
#if defined(MBEDTLS_ECP_C)
    if( pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH )
    {
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
   db5d6:	4606      	mov	r6, r0
   db5d8:	b940      	cbnz	r0, db5ec <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xc4>
   db5da:	e00b      	b.n	db5f4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );
   db5dc:	4c08      	ldr	r4, [pc, #32]	; (db600 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xd8>)
   db5de:	e009      	b.n	db5f4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( len < 1 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   db5e0:	4c08      	ldr	r4, [pc, #32]	; (db604 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xdc>)
   db5e2:	e007      	b.n	db5f4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>
   db5e4:	4604      	mov	r4, r0
   db5e6:	e005      	b.n	db5f4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>
        }
    } else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    return( 0 );
   db5e8:	2400      	movs	r4, #0
   db5ea:	e003      	b.n	db5f4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>
    if( pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH )
    {
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ), p, len )  ) != 0 )
        {
            mbedtls_pk_free( pk );
   db5ec:	4628      	mov	r0, r5
   db5ee:	f002 fd39 	bl	de064 <mbedtls_pk_free>
            return( ret );
   db5f2:	4634      	mov	r4, r6
    } else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    return( 0 );
}
   db5f4:	4620      	mov	r0, r4
   db5f6:	b008      	add	sp, #32
   db5f8:	bd70      	pop	{r4, r5, r6, pc}
   db5fa:	bf00      	nop
   db5fc:	ffffc380 	.word	0xffffc380
   db600:	ffffc280 	.word	0xffffc280
   db604:	ffffc2a0 	.word	0xffffc2a0

000db608 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>:
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
static int pk_parse_key_pkcs8_encrypted_der(
                                    mbedtls_pk_context *pk,
                                    unsigned char *key, size_t keylen,
                                    const unsigned char *pwd, size_t pwdlen )
{
   db608:	b5f0      	push	{r4, r5, r6, r7, lr}
   db60a:	b091      	sub	sp, #68	; 0x44
   db60c:	4606      	mov	r6, r0
   db60e:	9d16      	ldr	r5, [sp, #88]	; 0x58
#if defined(MBEDTLS_PKCS12_C)
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_md_type_t md_alg;
#endif

    p = key;
   db610:	9109      	str	r1, [sp, #36]	; 0x24
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
static int pk_parse_key_pkcs8_encrypted_der(
                                    mbedtls_pk_context *pk,
                                    unsigned char *key, size_t keylen,
                                    const unsigned char *pwd, size_t pwdlen )
{
   db612:	461f      	mov	r7, r3
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_md_type_t md_alg;
#endif

    p = key;
    end = p + keylen;
   db614:	4411      	add	r1, r2

    if( pwdlen == 0 )
   db616:	2d00      	cmp	r5, #0
   db618:	d066      	beq.n	db6e8 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe0>
     *  EncryptedData ::= OCTET STRING
     *
     *  The EncryptedData OCTET STRING is a PKCS#8 PrivateKeyInfo
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   db61a:	2330      	movs	r3, #48	; 0x30
   db61c:	aa08      	add	r2, sp, #32
   db61e:	a809      	add	r0, sp, #36	; 0x24
   db620:	f7fa f886 	bl	d5730 <mbedtls_asn1_get_tag>
   db624:	b980      	cbnz	r0, db648 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x40>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
   db626:	9b08      	ldr	r3, [sp, #32]
   db628:	9c09      	ldr	r4, [sp, #36]	; 0x24
   db62a:	441c      	add	r4, r3

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
   db62c:	aa0a      	add	r2, sp, #40	; 0x28
   db62e:	ab0d      	add	r3, sp, #52	; 0x34
   db630:	4621      	mov	r1, r4
   db632:	a809      	add	r0, sp, #36	; 0x24
   db634:	f7fa f959 	bl	d58ea <mbedtls_asn1_get_alg>
   db638:	b930      	cbnz	r0, db648 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x40>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   db63a:	2304      	movs	r3, #4
   db63c:	aa08      	add	r2, sp, #32
   db63e:	4621      	mov	r1, r4
   db640:	a809      	add	r0, sp, #36	; 0x24
   db642:	f7fa f875 	bl	d5730 <mbedtls_asn1_get_tag>
   db646:	b110      	cbz	r0, db64e <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x46>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   db648:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
   db64c:	e055      	b.n	db6fa <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>

    /*
     * Decrypt EncryptedData with appropriate PBE
     */
#if defined(MBEDTLS_PKCS12_C)
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
   db64e:	f10d 011f 	add.w	r1, sp, #31
   db652:	f10d 021e 	add.w	r2, sp, #30
   db656:	a80a      	add	r0, sp, #40	; 0x28
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    buf = p;
   db658:	9c09      	ldr	r4, [sp, #36]	; 0x24

    /*
     * Decrypt EncryptedData with appropriate PBE
     */
#if defined(MBEDTLS_PKCS12_C)
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
   db65a:	f7fd fe7b 	bl	d9354 <mbedtls_oid_get_pkcs12_pbe_alg>
   db65e:	4601      	mov	r1, r0
   db660:	b9a0      	cbnz	r0, db68c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x84>
    {
        if( ( ret = mbedtls_pkcs12_pbe( &pbe_params, MBEDTLS_PKCS12_PBE_DECRYPT,
   db662:	9808      	ldr	r0, [sp, #32]
   db664:	9003      	str	r0, [sp, #12]
   db666:	9809      	ldr	r0, [sp, #36]	; 0x24
   db668:	9002      	str	r0, [sp, #8]
   db66a:	f89d 301f 	ldrb.w	r3, [sp, #31]
   db66e:	f89d 201e 	ldrb.w	r2, [sp, #30]
   db672:	9404      	str	r4, [sp, #16]
   db674:	9501      	str	r5, [sp, #4]
   db676:	9700      	str	r7, [sp, #0]
   db678:	a80d      	add	r0, sp, #52	; 0x34
   db67a:	f006 fefb 	bl	e2474 <mbedtls_pkcs12_pbe>
   db67e:	2800      	cmp	r0, #0
   db680:	d036      	beq.n	db6f0 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
                                cipher_alg, md_alg,
                                pwd, pwdlen, p, len, buf ) ) != 0 )
        {
            if( ret == MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH )
   db682:	f510 5ff0 	cmn.w	r0, #7680	; 0x1e00
   db686:	d138      	bne.n	db6fa <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
                return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
   db688:	481d      	ldr	r0, [pc, #116]	; (db700 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf8>)
   db68a:	e036      	b.n	db6fa <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
            return( ret );
        }

        decrypted = 1;
    }
    else if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS12_PBE_SHA1_RC4_128, &pbe_alg_oid ) == 0 )
   db68c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   db68e:	2a0a      	cmp	r2, #10
   db690:	d114      	bne.n	db6bc <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xb4>
   db692:	990c      	ldr	r1, [sp, #48]	; 0x30
   db694:	481b      	ldr	r0, [pc, #108]	; (db704 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xfc>)
   db696:	f00b fc4b 	bl	e6f30 <memcmp>
   db69a:	4601      	mov	r1, r0
   db69c:	bb30      	cbnz	r0, db6ec <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
    {
        if( ( ret = mbedtls_pkcs12_pbe_sha1_rc4_128( &pbe_params,
   db69e:	9b08      	ldr	r3, [sp, #32]
   db6a0:	9301      	str	r3, [sp, #4]
   db6a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db6a4:	9300      	str	r3, [sp, #0]
   db6a6:	9402      	str	r4, [sp, #8]
   db6a8:	462b      	mov	r3, r5
   db6aa:	463a      	mov	r2, r7
   db6ac:	a80d      	add	r0, sp, #52	; 0x34
   db6ae:	f006 fe03 	bl	e22b8 <mbedtls_pkcs12_pbe_sha1_rc4_128>
   db6b2:	bb10      	cbnz	r0, db6fa <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
        }

        // Best guess for password mismatch when using RC4. If first tag is
        // not MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE
        //
        if( *buf != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   db6b4:	7823      	ldrb	r3, [r4, #0]
   db6b6:	2b30      	cmp	r3, #48	; 0x30
   db6b8:	d01a      	beq.n	db6f0 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
   db6ba:	e7e5      	b.n	db688 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x80>
        decrypted = 1;
    }
    else
#endif /* MBEDTLS_PKCS12_C */
#if defined(MBEDTLS_PKCS5_C)
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBES2, &pbe_alg_oid ) == 0 )
   db6bc:	2a09      	cmp	r2, #9
   db6be:	d115      	bne.n	db6ec <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
   db6c0:	990c      	ldr	r1, [sp, #48]	; 0x30
   db6c2:	4811      	ldr	r0, [pc, #68]	; (db708 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x100>)
   db6c4:	f00b fc34 	bl	e6f30 <memcmp>
   db6c8:	4601      	mov	r1, r0
   db6ca:	b978      	cbnz	r0, db6ec <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
    {
        if( ( ret = mbedtls_pkcs5_pbes2( &pbe_params, MBEDTLS_PKCS5_DECRYPT, pwd, pwdlen,
   db6cc:	9b08      	ldr	r3, [sp, #32]
   db6ce:	9301      	str	r3, [sp, #4]
   db6d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   db6d2:	9300      	str	r3, [sp, #0]
   db6d4:	9402      	str	r4, [sp, #8]
   db6d6:	462b      	mov	r3, r5
   db6d8:	463a      	mov	r2, r7
   db6da:	a80d      	add	r0, sp, #52	; 0x34
   db6dc:	f7fe ffc2 	bl	da664 <mbedtls_pkcs5_pbes2>
   db6e0:	b130      	cbz	r0, db6f0 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
                                  p, len, buf ) ) != 0 )
        {
            if( ret == MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH )
   db6e2:	f510 5f38 	cmn.w	r0, #11776	; 0x2e00
   db6e6:	e7ce      	b.n	db686 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x7e>

    p = key;
    end = p + keylen;

    if( pwdlen == 0 )
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
   db6e8:	4808      	ldr	r0, [pc, #32]	; (db70c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x104>)
   db6ea:	e006      	b.n	db6fa <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
    {
        ((void) pwd);
    }

    if( decrypted == 0 )
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
   db6ec:	4808      	ldr	r0, [pc, #32]	; (db710 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x108>)
   db6ee:	e004      	b.n	db6fa <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>

    return( pk_parse_key_pkcs8_unencrypted_der( pk, buf, len ) );
   db6f0:	9a08      	ldr	r2, [sp, #32]
   db6f2:	4621      	mov	r1, r4
   db6f4:	4630      	mov	r0, r6
   db6f6:	f7ff ff17 	bl	db528 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
}
   db6fa:	b011      	add	sp, #68	; 0x44
   db6fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db6fe:	bf00      	nop
   db700:	ffffc480 	.word	0xffffc480
   db704:	000e93d0 	.word	0x000e93d0
   db708:	000e93db 	.word	0x000e93db
   db70c:	ffffc400 	.word	0xffffc400
   db710:	ffffc680 	.word	0xffffc680

000db714 <mbedtls_pk_parse_subpubkey>:
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
   db714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db718:	b087      	sub	sp, #28
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
   db71a:	2300      	movs	r3, #0
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
   db71c:	4617      	mov	r7, r2
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
   db71e:	f88d 3007 	strb.w	r3, [sp, #7]
    PK_VALIDATE_RET( p != NULL );
    PK_VALIDATE_RET( *p != NULL );
    PK_VALIDATE_RET( end != NULL );
    PK_VALIDATE_RET( pk != NULL );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   db722:	aa02      	add	r2, sp, #8
   db724:	2330      	movs	r3, #48	; 0x30
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
   db726:	4606      	mov	r6, r0
    PK_VALIDATE_RET( p != NULL );
    PK_VALIDATE_RET( *p != NULL );
    PK_VALIDATE_RET( end != NULL );
    PK_VALIDATE_RET( pk != NULL );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   db728:	f7fa f802 	bl	d5730 <mbedtls_asn1_get_tag>
   db72c:	b110      	cbz	r0, db734 <mbedtls_pk_parse_subpubkey+0x20>
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   db72e:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
   db732:	e05c      	b.n	db7ee <mbedtls_pk_parse_subpubkey+0xda>
    }

    end = *p + len;
   db734:	9b02      	ldr	r3, [sp, #8]
   db736:	6835      	ldr	r5, [r6, #0]
   db738:	441d      	add	r5, r3

    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
   db73a:	f10d 0207 	add.w	r2, sp, #7
   db73e:	ab03      	add	r3, sp, #12
   db740:	4629      	mov	r1, r5
   db742:	4630      	mov	r0, r6
   db744:	f7ff fe00 	bl	db348 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
   db748:	2800      	cmp	r0, #0
   db74a:	d150      	bne.n	db7ee <mbedtls_pk_parse_subpubkey+0xda>
        return( ret );

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
   db74c:	aa02      	add	r2, sp, #8
   db74e:	4629      	mov	r1, r5
   db750:	4630      	mov	r0, r6
   db752:	f7fa f876 	bl	d5842 <mbedtls_asn1_get_bitstring_null>
   db756:	b110      	cbz	r0, db75e <mbedtls_pk_parse_subpubkey+0x4a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
   db758:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
   db75c:	e047      	b.n	db7ee <mbedtls_pk_parse_subpubkey+0xda>

    if( *p + len != end )
   db75e:	6832      	ldr	r2, [r6, #0]
   db760:	9b02      	ldr	r3, [sp, #8]
   db762:	4413      	add	r3, r2
   db764:	429d      	cmp	r5, r3
   db766:	d139      	bne.n	db7dc <mbedtls_pk_parse_subpubkey+0xc8>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
   db768:	f89d 0007 	ldrb.w	r0, [sp, #7]
   db76c:	f002 fc8a 	bl	de084 <mbedtls_pk_info_from_type>
   db770:	4601      	mov	r1, r0
   db772:	b3a8      	cbz	r0, db7e0 <mbedtls_pk_parse_subpubkey+0xcc>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
   db774:	4638      	mov	r0, r7
   db776:	f002 fc91 	bl	de09c <mbedtls_pk_setup>
   db77a:	2800      	cmp	r0, #0
   db77c:	d137      	bne.n	db7ee <mbedtls_pk_parse_subpubkey+0xda>
        return( ret );

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA )
   db77e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   db782:	2b01      	cmp	r3, #1
   db784:	d107      	bne.n	db796 <mbedtls_pk_parse_subpubkey+0x82>
    {
        ret = pk_get_rsapubkey( p, end, mbedtls_pk_rsa( *pk ) );
   db786:	687a      	ldr	r2, [r7, #4]
   db788:	4629      	mov	r1, r5
   db78a:	4630      	mov	r0, r6
   db78c:	f7ff fc68 	bl	db060 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context>
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;

    if( ret == 0 && *p != end )
   db790:	4604      	mov	r4, r0
   db792:	b1f0      	cbz	r0, db7d2 <mbedtls_pk_parse_subpubkey+0xbe>
   db794:	e027      	b.n	db7e6 <mbedtls_pk_parse_subpubkey+0xd2>
    {
        ret = pk_get_rsapubkey( p, end, mbedtls_pk_rsa( *pk ) );
    } else
#endif /* MBEDTLS_RSA_C */
#if defined(MBEDTLS_ECP_C)
    if( pk_alg == MBEDTLS_PK_ECKEY_DH || pk_alg == MBEDTLS_PK_ECKEY )
   db796:	3b02      	subs	r3, #2
   db798:	2b01      	cmp	r3, #1
   db79a:	d823      	bhi.n	db7e4 <mbedtls_pk_parse_subpubkey+0xd0>
    {
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
   db79c:	6879      	ldr	r1, [r7, #4]
   db79e:	a803      	add	r0, sp, #12
   db7a0:	f7ff fcba 	bl	db118 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group>
        if( ret == 0 )
   db7a4:	4604      	mov	r4, r0
   db7a6:	b9f0      	cbnz	r0, db7e6 <mbedtls_pk_parse_subpubkey+0xd2>
   db7a8:	f8d7 8004 	ldr.w	r8, [r7, #4]
                            mbedtls_ecp_keypair *key )
{
    int ret;

    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
                    (const unsigned char *) *p, end - *p ) ) == 0 )
   db7ac:	6832      	ldr	r2, [r6, #0]
static int pk_get_ecpubkey( unsigned char **p, const unsigned char *end,
                            mbedtls_ecp_keypair *key )
{
    int ret;

    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
   db7ae:	f108 0988 	add.w	r9, r8, #136	; 0x88
   db7b2:	1aab      	subs	r3, r5, r2
   db7b4:	4649      	mov	r1, r9
   db7b6:	4640      	mov	r0, r8
   db7b8:	f7fd f90a 	bl	d89d0 <mbedtls_ecp_point_read_binary>
   db7bc:	4604      	mov	r4, r0
   db7be:	b920      	cbnz	r0, db7ca <mbedtls_pk_parse_subpubkey+0xb6>
                    (const unsigned char *) *p, end - *p ) ) == 0 )
    {
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
   db7c0:	4649      	mov	r1, r9
   db7c2:	4640      	mov	r0, r8
   db7c4:	f7fd f98c 	bl	d8ae0 <mbedtls_ecp_check_pubkey>
   db7c8:	4604      	mov	r4, r0
    }

    /*
     * We know mbedtls_ecp_point_read_binary consumed all bytes or failed
     */
    *p = (unsigned char *) end;
   db7ca:	6035      	str	r5, [r6, #0]
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;

    if( ret == 0 && *p != end )
   db7cc:	b95c      	cbnz	r4, db7e6 <mbedtls_pk_parse_subpubkey+0xd2>
   db7ce:	2000      	movs	r0, #0
   db7d0:	e00d      	b.n	db7ee <mbedtls_pk_parse_subpubkey+0xda>
   db7d2:	6833      	ldr	r3, [r6, #0]
   db7d4:	429d      	cmp	r5, r3
   db7d6:	d0fa      	beq.n	db7ce <mbedtls_pk_parse_subpubkey+0xba>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
   db7d8:	4c06      	ldr	r4, [pc, #24]	; (db7f4 <mbedtls_pk_parse_subpubkey+0xe0>)
   db7da:	e004      	b.n	db7e6 <mbedtls_pk_parse_subpubkey+0xd2>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( *p + len != end )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   db7dc:	4805      	ldr	r0, [pc, #20]	; (db7f4 <mbedtls_pk_parse_subpubkey+0xe0>)
   db7de:	e006      	b.n	db7ee <mbedtls_pk_parse_subpubkey+0xda>

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
   db7e0:	4805      	ldr	r0, [pc, #20]	; (db7f8 <mbedtls_pk_parse_subpubkey+0xe4>)
   db7e2:	e004      	b.n	db7ee <mbedtls_pk_parse_subpubkey+0xda>
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
        if( ret == 0 )
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
   db7e4:	4c04      	ldr	r4, [pc, #16]	; (db7f8 <mbedtls_pk_parse_subpubkey+0xe4>)
    if( ret == 0 && *p != end )
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;

    if( ret != 0 )
        mbedtls_pk_free( pk );
   db7e6:	4638      	mov	r0, r7
   db7e8:	f002 fc3c 	bl	de064 <mbedtls_pk_free>
   db7ec:	4620      	mov	r0, r4

    return( ret );
}
   db7ee:	b007      	add	sp, #28
   db7f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db7f4:	ffffc49a 	.word	0xffffc49a
   db7f8:	ffffc380 	.word	0xffffc380

000db7fc <mbedtls_pk_parse_key>:
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
   db7fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db800:	b089      	sub	sp, #36	; 0x24
   db802:	4605      	mov	r5, r0
   db804:	460c      	mov	r4, r1
   db806:	461f      	mov	r7, r3
   db808:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    size_t len;
    mbedtls_pem_context pem;
#endif

    PK_VALIDATE_RET( pk != NULL );
    if( keylen == 0 )
   db80c:	4616      	mov	r6, r2
   db80e:	2a00      	cmp	r2, #0
   db810:	f000 80f7 	beq.w	dba02 <mbedtls_pk_parse_key+0x206>
#if defined(MBEDTLS_PEM_PARSE_C)
   mbedtls_pem_init( &pem );

#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
   db814:	f106 39ff 	add.w	r9, r6, #4294967295
    if( keylen == 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
    PK_VALIDATE_RET( key != NULL );

#if defined(MBEDTLS_PEM_PARSE_C)
   mbedtls_pem_init( &pem );
   db818:	a805      	add	r0, sp, #20
   db81a:	f007 ff94 	bl	e3746 <mbedtls_pem_init>

#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
   db81e:	f814 3009 	ldrb.w	r3, [r4, r9]
   db822:	b123      	cbz	r3, db82e <mbedtls_pk_parse_key+0x32>
        return( ret );
#endif /* MBEDTLS_RSA_C */

#if defined(MBEDTLS_ECP_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
   db824:	f814 3009 	ldrb.w	r3, [r4, r9]
   db828:	2b00      	cmp	r3, #0
   db82a:	d13f      	bne.n	db8ac <mbedtls_pk_parse_key+0xb0>
   db82c:	e029      	b.n	db882 <mbedtls_pk_parse_key+0x86>
#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
   db82e:	ab04      	add	r3, sp, #16
   db830:	9302      	str	r3, [sp, #8]
   db832:	e88d 0180 	stmia.w	sp, {r7, r8}
   db836:	4623      	mov	r3, r4
   db838:	4a75      	ldr	r2, [pc, #468]	; (dba10 <mbedtls_pk_parse_key+0x214>)
   db83a:	4976      	ldr	r1, [pc, #472]	; (dba14 <mbedtls_pk_parse_key+0x218>)
   db83c:	a805      	add	r0, sp, #20
   db83e:	f007 ff87 	bl	e3750 <mbedtls_pem_read_buffer>
                               "-----BEGIN RSA PRIVATE KEY-----",
                               "-----END RSA PRIVATE KEY-----",
                               key, pwd, pwdlen, &len );

    if( ret == 0 )
   db842:	b978      	cbnz	r0, db864 <mbedtls_pk_parse_key+0x68>
    {
        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
   db844:	2001      	movs	r0, #1
   db846:	f002 fc1d 	bl	de084 <mbedtls_pk_info_from_type>
        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
   db84a:	4601      	mov	r1, r0
   db84c:	4628      	mov	r0, r5
   db84e:	f002 fc25 	bl	de09c <mbedtls_pk_setup>
   db852:	4604      	mov	r4, r0
   db854:	2800      	cmp	r0, #0
   db856:	d177      	bne.n	db948 <mbedtls_pk_parse_key+0x14c>
            ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ),
   db858:	9a06      	ldr	r2, [sp, #24]
   db85a:	9905      	ldr	r1, [sp, #20]
   db85c:	6868      	ldr	r0, [r5, #4]
   db85e:	f7ff fc79 	bl	db154 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
   db862:	e06f      	b.n	db944 <mbedtls_pk_parse_key+0x148>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
   db864:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
   db868:	d101      	bne.n	db86e <mbedtls_pk_parse_key+0x72>
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
   db86a:	486b      	ldr	r0, [pc, #428]	; (dba18 <mbedtls_pk_parse_key+0x21c>)
   db86c:	e0cc      	b.n	dba08 <mbedtls_pk_parse_key+0x20c>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
   db86e:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
   db872:	d101      	bne.n	db878 <mbedtls_pk_parse_key+0x7c>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
   db874:	4869      	ldr	r0, [pc, #420]	; (dba1c <mbedtls_pk_parse_key+0x220>)
   db876:	e0c7      	b.n	dba08 <mbedtls_pk_parse_key+0x20c>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   db878:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   db87c:	f040 80c4 	bne.w	dba08 <mbedtls_pk_parse_key+0x20c>
   db880:	e7d0      	b.n	db824 <mbedtls_pk_parse_key+0x28>
#if defined(MBEDTLS_ECP_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
   db882:	ab04      	add	r3, sp, #16
   db884:	9302      	str	r3, [sp, #8]
   db886:	e88d 0180 	stmia.w	sp, {r7, r8}
   db88a:	4623      	mov	r3, r4
   db88c:	4a64      	ldr	r2, [pc, #400]	; (dba20 <mbedtls_pk_parse_key+0x224>)
   db88e:	4965      	ldr	r1, [pc, #404]	; (dba24 <mbedtls_pk_parse_key+0x228>)
   db890:	a805      	add	r0, sp, #20
   db892:	f007 ff5d 	bl	e3750 <mbedtls_pem_read_buffer>
                               "-----BEGIN EC PRIVATE KEY-----",
                               "-----END EC PRIVATE KEY-----",
                               key, pwd, pwdlen, &len );
    if( ret == 0 )
   db896:	b168      	cbz	r0, db8b4 <mbedtls_pk_parse_key+0xb8>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
   db898:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
   db89c:	d0e5      	beq.n	db86a <mbedtls_pk_parse_key+0x6e>
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
   db89e:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
   db8a2:	d0e7      	beq.n	db874 <mbedtls_pk_parse_key+0x78>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   db8a4:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   db8a8:	f040 80ae 	bne.w	dba08 <mbedtls_pk_parse_key+0x20c>
        return( ret );
#endif /* MBEDTLS_ECP_C */

    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
   db8ac:	f814 3009 	ldrb.w	r3, [r4, r9]
   db8b0:	b9a3      	cbnz	r3, db8dc <mbedtls_pk_parse_key+0xe0>
   db8b2:	e017      	b.n	db8e4 <mbedtls_pk_parse_key+0xe8>
                               "-----BEGIN EC PRIVATE KEY-----",
                               "-----END EC PRIVATE KEY-----",
                               key, pwd, pwdlen, &len );
    if( ret == 0 )
    {
        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );
   db8b4:	2002      	movs	r0, #2
   db8b6:	f002 fbe5 	bl	de084 <mbedtls_pk_info_from_type>

        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
   db8ba:	4601      	mov	r1, r0
   db8bc:	4628      	mov	r0, r5
   db8be:	f002 fbed 	bl	de09c <mbedtls_pk_setup>
   db8c2:	4604      	mov	r4, r0
   db8c4:	2800      	cmp	r0, #0
   db8c6:	d13f      	bne.n	db948 <mbedtls_pk_parse_key+0x14c>
            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
   db8c8:	9a06      	ldr	r2, [sp, #24]
   db8ca:	9905      	ldr	r1, [sp, #20]
   db8cc:	6868      	ldr	r0, [r5, #4]
   db8ce:	f7ff fd65 	bl	db39c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj>
   db8d2:	e037      	b.n	db944 <mbedtls_pk_parse_key+0x148>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   db8d4:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   db8d8:	f040 8096 	bne.w	dba08 <mbedtls_pk_parse_key+0x20c>
        return( ret );

#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
   db8dc:	f814 3009 	ldrb.w	r3, [r4, r9]
   db8e0:	b9ab      	cbnz	r3, db90e <mbedtls_pk_parse_key+0x112>
   db8e2:	e01b      	b.n	db91c <mbedtls_pk_parse_key+0x120>

    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
   db8e4:	aa04      	add	r2, sp, #16
   db8e6:	9202      	str	r2, [sp, #8]
   db8e8:	9301      	str	r3, [sp, #4]
   db8ea:	9300      	str	r3, [sp, #0]
   db8ec:	4a4e      	ldr	r2, [pc, #312]	; (dba28 <mbedtls_pk_parse_key+0x22c>)
   db8ee:	494f      	ldr	r1, [pc, #316]	; (dba2c <mbedtls_pk_parse_key+0x230>)
   db8f0:	4623      	mov	r3, r4
   db8f2:	a805      	add	r0, sp, #20
   db8f4:	f007 ff2c 	bl	e3750 <mbedtls_pem_read_buffer>
                               "-----BEGIN PRIVATE KEY-----",
                               "-----END PRIVATE KEY-----",
                               key, NULL, 0, &len );
    if( ret == 0 )
   db8f8:	2800      	cmp	r0, #0
   db8fa:	d1eb      	bne.n	db8d4 <mbedtls_pk_parse_key+0xd8>
    {
        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
   db8fc:	9a06      	ldr	r2, [sp, #24]
   db8fe:	9905      	ldr	r1, [sp, #20]
   db900:	4628      	mov	r0, r5
   db902:	f7ff fe11 	bl	db528 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
   db906:	e01d      	b.n	db944 <mbedtls_pk_parse_key+0x148>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   db908:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   db90c:	d17c      	bne.n	dba08 <mbedtls_pk_parse_key+0x20c>
     */
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
    {
        unsigned char *key_copy;

        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
   db90e:	4631      	mov	r1, r6
   db910:	2001      	movs	r0, #1
   db912:	f00b f9ff 	bl	e6d14 <calloc>
   db916:	4681      	mov	r9, r0
   db918:	b9f0      	cbnz	r0, db958 <mbedtls_pk_parse_key+0x15c>
   db91a:	e074      	b.n	dba06 <mbedtls_pk_parse_key+0x20a>
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
   db91c:	aa04      	add	r2, sp, #16
   db91e:	9202      	str	r2, [sp, #8]
   db920:	9301      	str	r3, [sp, #4]
   db922:	9300      	str	r3, [sp, #0]
   db924:	4a42      	ldr	r2, [pc, #264]	; (dba30 <mbedtls_pk_parse_key+0x234>)
   db926:	4943      	ldr	r1, [pc, #268]	; (dba34 <mbedtls_pk_parse_key+0x238>)
   db928:	4623      	mov	r3, r4
   db92a:	a805      	add	r0, sp, #20
   db92c:	f007 ff10 	bl	e3750 <mbedtls_pem_read_buffer>
                               "-----BEGIN ENCRYPTED PRIVATE KEY-----",
                               "-----END ENCRYPTED PRIVATE KEY-----",
                               key, NULL, 0, &len );
    if( ret == 0 )
   db930:	2800      	cmp	r0, #0
   db932:	d1e9      	bne.n	db908 <mbedtls_pk_parse_key+0x10c>
    {
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
   db934:	f8cd 8000 	str.w	r8, [sp]
   db938:	463b      	mov	r3, r7
   db93a:	9a06      	ldr	r2, [sp, #24]
   db93c:	9905      	ldr	r1, [sp, #20]
   db93e:	4628      	mov	r0, r5
   db940:	f7ff fe62 	bl	db608 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>
   db944:	4604      	mov	r4, r0
   db946:	b110      	cbz	r0, db94e <mbedtls_pk_parse_key+0x152>
                                                      pem.buf, pem.buflen,
                                                      pwd, pwdlen ) ) != 0 )
        {
            mbedtls_pk_free( pk );
   db948:	4628      	mov	r0, r5
   db94a:	f002 fb8b 	bl	de064 <mbedtls_pk_free>
        }

        mbedtls_pem_free( &pem );
   db94e:	a805      	add	r0, sp, #20
   db950:	f007 ff88 	bl	e3864 <mbedtls_pem_free>
                               "-----BEGIN ENCRYPTED PRIVATE KEY-----",
                               "-----END ENCRYPTED PRIVATE KEY-----",
                               key, NULL, 0, &len );
    if( ret == 0 )
    {
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
   db954:	4620      	mov	r0, r4
        {
            mbedtls_pk_free( pk );
        }

        mbedtls_pem_free( &pem );
        return( ret );
   db956:	e057      	b.n	dba08 <mbedtls_pk_parse_key+0x20c>
        unsigned char *key_copy;

        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );

        memcpy( key_copy, key, keylen );
   db958:	4632      	mov	r2, r6
   db95a:	4621      	mov	r1, r4
   db95c:	f00b faf7 	bl	e6f4e <memcpy>

        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
   db960:	463b      	mov	r3, r7
   db962:	4632      	mov	r2, r6
   db964:	4649      	mov	r1, r9
   db966:	f8cd 8000 	str.w	r8, [sp]
   db96a:	4628      	mov	r0, r5
   db96c:	f7ff fe4c 	bl	db608 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>
                                                pwd, pwdlen );

        mbedtls_platform_zeroize( key_copy, keylen );
   db970:	4631      	mov	r1, r6
        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );

        memcpy( key_copy, key, keylen );

        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
   db972:	4607      	mov	r7, r0
                                                pwd, pwdlen );

        mbedtls_platform_zeroize( key_copy, keylen );
   db974:	4648      	mov	r0, r9
   db976:	f7fe fdb3 	bl	da4e0 <mbedtls_platform_zeroize>
        mbedtls_free( key_copy );
   db97a:	4648      	mov	r0, r9
   db97c:	f009 fcf6 	bl	e536c <free>
    }

    if( ret == 0 )
   db980:	b90f      	cbnz	r7, db986 <mbedtls_pk_parse_key+0x18a>
        return( 0 );
   db982:	2000      	movs	r0, #0
   db984:	e040      	b.n	dba08 <mbedtls_pk_parse_key+0x20c>

    mbedtls_pk_free( pk );
   db986:	4628      	mov	r0, r5
   db988:	f002 fb6c 	bl	de064 <mbedtls_pk_free>
    mbedtls_pk_init( pk );
   db98c:	4628      	mov	r0, r5
   db98e:	f002 fb65 	bl	de05c <mbedtls_pk_init>

    if( ret == MBEDTLS_ERR_PK_PASSWORD_MISMATCH )
   db992:	f517 5f6e 	cmn.w	r7, #15232	; 0x3b80
   db996:	f43f af68 	beq.w	db86a <mbedtls_pk_parse_key+0x6e>
    {
        return( ret );
    }
#endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */

    if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk, key, keylen ) ) == 0 )
   db99a:	4632      	mov	r2, r6
   db99c:	4621      	mov	r1, r4
   db99e:	4628      	mov	r0, r5
   db9a0:	f7ff fdc2 	bl	db528 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
   db9a4:	2800      	cmp	r0, #0
   db9a6:	d0ec      	beq.n	db982 <mbedtls_pk_parse_key+0x186>
        return( 0 );

    mbedtls_pk_free( pk );
   db9a8:	4628      	mov	r0, r5
   db9aa:	f002 fb5b 	bl	de064 <mbedtls_pk_free>
    mbedtls_pk_init( pk );
   db9ae:	4628      	mov	r0, r5
   db9b0:	f002 fb54 	bl	de05c <mbedtls_pk_init>

#if defined(MBEDTLS_RSA_C)

    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
   db9b4:	2001      	movs	r0, #1
   db9b6:	f002 fb65 	bl	de084 <mbedtls_pk_info_from_type>
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
   db9ba:	4601      	mov	r1, r0
   db9bc:	4628      	mov	r0, r5
   db9be:	f002 fb6d 	bl	de09c <mbedtls_pk_setup>
   db9c2:	b930      	cbnz	r0, db9d2 <mbedtls_pk_parse_key+0x1d6>
        pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), key, keylen ) == 0 )
   db9c4:	4632      	mov	r2, r6
   db9c6:	4621      	mov	r1, r4
   db9c8:	6868      	ldr	r0, [r5, #4]
   db9ca:	f7ff fbc3 	bl	db154 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
    mbedtls_pk_init( pk );

#if defined(MBEDTLS_RSA_C)

    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
   db9ce:	2800      	cmp	r0, #0
   db9d0:	d0d7      	beq.n	db982 <mbedtls_pk_parse_key+0x186>
        pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), key, keylen ) == 0 )
    {
        return( 0 );
    }

    mbedtls_pk_free( pk );
   db9d2:	4628      	mov	r0, r5
   db9d4:	f002 fb46 	bl	de064 <mbedtls_pk_free>
    mbedtls_pk_init( pk );
   db9d8:	4628      	mov	r0, r5
   db9da:	f002 fb3f 	bl	de05c <mbedtls_pk_init>
#endif /* MBEDTLS_RSA_C */

#if defined(MBEDTLS_ECP_C)
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );
   db9de:	2002      	movs	r0, #2
   db9e0:	f002 fb50 	bl	de084 <mbedtls_pk_info_from_type>
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
   db9e4:	4601      	mov	r1, r0
   db9e6:	4628      	mov	r0, r5
   db9e8:	f002 fb58 	bl	de09c <mbedtls_pk_setup>
   db9ec:	b930      	cbnz	r0, db9fc <mbedtls_pk_parse_key+0x200>
        pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
   db9ee:	4632      	mov	r2, r6
   db9f0:	4621      	mov	r1, r4
   db9f2:	6868      	ldr	r0, [r5, #4]
   db9f4:	f7ff fcd2 	bl	db39c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj>
    mbedtls_pk_init( pk );
#endif /* MBEDTLS_RSA_C */

#if defined(MBEDTLS_ECP_C)
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
   db9f8:	2800      	cmp	r0, #0
   db9fa:	d0c2      	beq.n	db982 <mbedtls_pk_parse_key+0x186>
        pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
                               key, keylen ) == 0 )
    {
        return( 0 );
    }
    mbedtls_pk_free( pk );
   db9fc:	4628      	mov	r0, r5
   db9fe:	f002 fb31 	bl	de064 <mbedtls_pk_free>
    mbedtls_pem_context pem;
#endif

    PK_VALIDATE_RET( pk != NULL );
    if( keylen == 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
   dba02:	480d      	ldr	r0, [pc, #52]	; (dba38 <mbedtls_pk_parse_key+0x23c>)
   dba04:	e000      	b.n	dba08 <mbedtls_pk_parse_key+0x20c>
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
    {
        unsigned char *key_copy;

        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );
   dba06:	480d      	ldr	r0, [pc, #52]	; (dba3c <mbedtls_pk_parse_key+0x240>)
     * twice, once here and once by the caller, but this is
     * also ok and in line with the mbedtls_pk_free() calls
     * on failed PEM parsing attempts. */

    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
}
   dba08:	b009      	add	sp, #36	; 0x24
   dba0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dba0e:	bf00      	nop
   dba10:	000e93e5 	.word	0x000e93e5
   dba14:	000e9403 	.word	0x000e9403
   dba18:	ffffc480 	.word	0xffffc480
   dba1c:	ffffc400 	.word	0xffffc400
   dba20:	000e9423 	.word	0x000e9423
   dba24:	000e9440 	.word	0x000e9440
   dba28:	000e945f 	.word	0x000e945f
   dba2c:	000e9479 	.word	0x000e9479
   dba30:	000e9495 	.word	0x000e9495
   dba34:	000e94b9 	.word	0x000e94b9
   dba38:	ffffc300 	.word	0xffffc300
   dba3c:	ffffc080 	.word	0xffffc080

000dba40 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
   dba40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        mbedtls_aesni_gcm_mult( output, x, h );
        return;
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;
   dba44:	7bcb      	ldrb	r3, [r1, #15]
        if( i != 15 )
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
   dba46:	f8df c164 	ldr.w	ip, [pc, #356]	; dbbac <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x16c>
   dba4a:	f003 030f 	and.w	r3, r3, #15
   dba4e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
   dba52:	b093      	sub	sp, #76	; 0x4c
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
   dba54:	e9d3 672e 	ldrd	r6, r7, [r3, #184]	; 0xb8
    zl = ctx->HL[lo];
   dba58:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
   dba5c:	f101 0310 	add.w	r3, r1, #16
   dba60:	9310      	str	r3, [sp, #64]	; 0x40

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
   dba62:	9b10      	ldr	r3, [sp, #64]	; 0x40
   dba64:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
   dba68:	9310      	str	r3, [sp, #64]	; 0x40
   dba6a:	f00e 030f 	and.w	r3, lr, #15
   dba6e:	9311      	str	r3, [sp, #68]	; 0x44
        hi = x[i] >> 4;

        if( i != 15 )
   dba70:	9b10      	ldr	r3, [sp, #64]	; 0x40
   dba72:	ebc1 0803 	rsb	r8, r1, r3
   dba76:	f1b8 0f0f 	cmp.w	r8, #15
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
        hi = x[i] >> 4;
   dba7a:	ea4f 1e2e 	mov.w	lr, lr, asr #4

        if( i != 15 )
   dba7e:	d03a      	beq.n	dbaf6 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0xb6>
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
   dba80:	0733      	lsls	r3, r6, #28
   dba82:	9309      	str	r3, [sp, #36]	; 0x24
   dba84:	2300      	movs	r3, #0
   dba86:	9308      	str	r3, [sp, #32]
   dba88:	0923      	lsrs	r3, r4, #4
   dba8a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   dba8e:	9300      	str	r3, [sp, #0]
   dba90:	092b      	lsrs	r3, r5, #4
   dba92:	9301      	str	r3, [sp, #4]
   dba94:	9b11      	ldr	r3, [sp, #68]	; 0x44
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
   dba96:	f004 040f 	and.w	r4, r4, #15
        hi = x[i] >> 4;

        if( i != 15 )
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
   dba9a:	e9dd ab00 	ldrd	sl, fp, [sp]
   dba9e:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
   dbaa2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   dbaa6:	0933      	lsrs	r3, r6, #4
   dbaa8:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
            zh ^= ctx->HH[lo];
   dbaac:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
   dbab0:	9302      	str	r3, [sp, #8]
   dbab2:	093b      	lsrs	r3, r7, #4
        hi = x[i] >> 4;

        if( i != 15 )
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
   dbab4:	ea48 080a 	orr.w	r8, r8, sl
   dbab8:	ea49 090b 	orr.w	r9, r9, fp
   dbabc:	9303      	str	r3, [sp, #12]
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
            zh ^= ctx->HH[lo];
   dbabe:	0423      	lsls	r3, r4, #16
   dbac0:	e9d5 672e 	ldrd	r6, r7, [r5, #184]	; 0xb8
        hi = x[i] >> 4;

        if( i != 15 )
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
   dbac4:	46c2      	mov	sl, r8
   dbac6:	46cb      	mov	fp, r9
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
            zh ^= ctx->HH[lo];
   dbac8:	930d      	str	r3, [sp, #52]	; 0x34
   dbaca:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   dbace:	2300      	movs	r3, #0
   dbad0:	930c      	str	r3, [sp, #48]	; 0x30
   dbad2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
   dbad6:	ea89 0907 	eor.w	r9, r9, r7
   dbada:	464f      	mov	r7, r9
   dbadc:	407c      	eors	r4, r7
   dbade:	ea88 0806 	eor.w	r8, r8, r6
   dbae2:	4627      	mov	r7, r4
            zl ^= ctx->HL[lo];
   dbae4:	e9d5 450e 	ldrd	r4, r5, [r5, #56]	; 0x38
   dbae8:	4646      	mov	r6, r8
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
            zh ^= ctx->HH[lo];
   dbaea:	4073      	eors	r3, r6
   dbaec:	461e      	mov	r6, r3
            zl ^= ctx->HL[lo];
   dbaee:	ea84 040a 	eor.w	r4, r4, sl
   dbaf2:	ea85 050b 	eor.w	r5, r5, fp

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
   dbaf6:	0733      	lsls	r3, r6, #28
   dbaf8:	930b      	str	r3, [sp, #44]	; 0x2c
   dbafa:	2300      	movs	r3, #0
   dbafc:	930a      	str	r3, [sp, #40]	; 0x28
   dbafe:	0923      	lsrs	r3, r4, #4
   dbb00:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   dbb04:	9304      	str	r3, [sp, #16]
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
   dbb06:	f004 040f 	and.w	r4, r4, #15
            zl ^= ctx->HL[lo];

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
   dbb0a:	092b      	lsrs	r3, r5, #4
   dbb0c:	9305      	str	r3, [sp, #20]
   dbb0e:	0933      	lsrs	r3, r6, #4
   dbb10:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   dbb14:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   dbb18:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
   dbb1c:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
   dbb20:	9306      	str	r3, [sp, #24]
   dbb22:	093b      	lsrs	r3, r7, #4
   dbb24:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
   dbb28:	9307      	str	r3, [sp, #28]
   dbb2a:	0423      	lsls	r3, r4, #16
   dbb2c:	e9de 672e 	ldrd	r6, r7, [lr, #184]	; 0xb8
            zl ^= ctx->HL[lo];

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
   dbb30:	ea48 080a 	orr.w	r8, r8, sl
   dbb34:	ea49 090b 	orr.w	r9, r9, fp
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
   dbb38:	930f      	str	r3, [sp, #60]	; 0x3c
   dbb3a:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
   dbb3e:	2300      	movs	r3, #0
   dbb40:	930e      	str	r3, [sp, #56]	; 0x38
   dbb42:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
   dbb46:	ea8a 0a06 	eor.w	sl, sl, r6
   dbb4a:	ea8b 0b07 	eor.w	fp, fp, r7
   dbb4e:	4656      	mov	r6, sl
   dbb50:	465f      	mov	r7, fp
   dbb52:	4073      	eors	r3, r6
   dbb54:	407c      	eors	r4, r7
   dbb56:	461e      	mov	r6, r3
   dbb58:	4627      	mov	r7, r4
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
   dbb5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
   dbb5c:	e9de 450e 	ldrd	r4, r5, [lr, #56]	; 0x38
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
   dbb60:	4299      	cmp	r1, r3
        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
   dbb62:	ea84 0408 	eor.w	r4, r4, r8
   dbb66:	ea85 0509 	eor.w	r5, r5, r9
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
   dbb6a:	f47f af7a 	bne.w	dba62 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x22>
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
   dbb6e:	0e3b      	lsrs	r3, r7, #24
   dbb70:	7013      	strb	r3, [r2, #0]
   dbb72:	0c3b      	lsrs	r3, r7, #16
   dbb74:	7053      	strb	r3, [r2, #1]
   dbb76:	0a3b      	lsrs	r3, r7, #8
   dbb78:	7093      	strb	r3, [r2, #2]
    PUT_UINT32_BE( zh, output, 4 );
   dbb7a:	0e33      	lsrs	r3, r6, #24
   dbb7c:	7113      	strb	r3, [r2, #4]
   dbb7e:	0c33      	lsrs	r3, r6, #16
   dbb80:	7153      	strb	r3, [r2, #5]
   dbb82:	0a33      	lsrs	r3, r6, #8
   dbb84:	7193      	strb	r3, [r2, #6]
    PUT_UINT32_BE( zl >> 32, output, 8 );
   dbb86:	0e2b      	lsrs	r3, r5, #24
   dbb88:	7213      	strb	r3, [r2, #8]
   dbb8a:	0c2b      	lsrs	r3, r5, #16
   dbb8c:	7253      	strb	r3, [r2, #9]
   dbb8e:	0a2b      	lsrs	r3, r5, #8
   dbb90:	7293      	strb	r3, [r2, #10]
    PUT_UINT32_BE( zl, output, 12 );
   dbb92:	0e23      	lsrs	r3, r4, #24
   dbb94:	7313      	strb	r3, [r2, #12]
   dbb96:	0c23      	lsrs	r3, r4, #16
   dbb98:	7353      	strb	r3, [r2, #13]
   dbb9a:	0a23      	lsrs	r3, r4, #8
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
   dbb9c:	70d7      	strb	r7, [r2, #3]
    PUT_UINT32_BE( zh, output, 4 );
   dbb9e:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_BE( zl >> 32, output, 8 );
   dbba0:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_BE( zl, output, 12 );
   dbba2:	7393      	strb	r3, [r2, #14]
   dbba4:	73d4      	strb	r4, [r2, #15]
}
   dbba6:	b013      	add	sp, #76	; 0x4c
   dbba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbbac:	000e9550 	.word	0x000e9550

000dbbb0 <mbedtls_gcm_init>:
 * Initialize a context
 */
void mbedtls_gcm_init( mbedtls_gcm_context *ctx )
{
    GCM_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
   dbbb0:	f44f 72c0 	mov.w	r2, #384	; 0x180
   dbbb4:	2100      	movs	r1, #0
   dbbb6:	f00b b9f0 	b.w	e6f9a <memset>

000dbbba <mbedtls_gcm_setkey>:

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
   dbbba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbbbe:	4604      	mov	r4, r0
   dbbc0:	b08d      	sub	sp, #52	; 0x34
   dbbc2:	4608      	mov	r0, r1
   dbbc4:	4691      	mov	r9, r2

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( key != NULL );
    GCM_VALIDATE_RET( keybits == 128 || keybits == 192 || keybits == 256 );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
   dbbc6:	4619      	mov	r1, r3
   dbbc8:	2201      	movs	r2, #1

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
   dbbca:	4698      	mov	r8, r3

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( key != NULL );
    GCM_VALIDATE_RET( keybits == 128 || keybits == 192 || keybits == 256 );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
   dbbcc:	f7f9 fbf6 	bl	d53bc <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
   dbbd0:	2800      	cmp	r0, #0
   dbbd2:	f000 809c 	beq.w	dbd0e <mbedtls_gcm_setkey+0x154>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    if( cipher_info->block_size != 16 )
   dbbd6:	6945      	ldr	r5, [r0, #20]
   dbbd8:	9002      	str	r0, [sp, #8]
   dbbda:	2d10      	cmp	r5, #16
   dbbdc:	f040 8097 	bne.w	dbd0e <mbedtls_gcm_setkey+0x154>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    mbedtls_cipher_free( &ctx->cipher_ctx );
   dbbe0:	4620      	mov	r0, r4
   dbbe2:	f7f9 fc03 	bl	d53ec <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
   dbbe6:	9902      	ldr	r1, [sp, #8]
   dbbe8:	4620      	mov	r0, r4
   dbbea:	f7f9 fc0f 	bl	d540c <mbedtls_cipher_setup>
   dbbee:	4684      	mov	ip, r0
   dbbf0:	2800      	cmp	r0, #0
   dbbf2:	f040 808e 	bne.w	dbd12 <mbedtls_gcm_setkey+0x158>
        return( ret );

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
   dbbf6:	2301      	movs	r3, #1
   dbbf8:	4642      	mov	r2, r8
   dbbfa:	4649      	mov	r1, r9
   dbbfc:	4620      	mov	r0, r4
   dbbfe:	f7f9 fc1d 	bl	d543c <mbedtls_cipher_setkey>
   dbc02:	4684      	mov	ip, r0
   dbc04:	2800      	cmp	r0, #0
   dbc06:	f040 8084 	bne.w	dbd12 <mbedtls_gcm_setkey+0x158>
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;

    memset( h, 0, 16 );
   dbc0a:	4601      	mov	r1, r0
{
    int ret, i, j;
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;
   dbc0c:	9007      	str	r0, [sp, #28]

    memset( h, 0, 16 );
   dbc0e:	462a      	mov	r2, r5
   dbc10:	a808      	add	r0, sp, #32
   dbc12:	f00b f9c2 	bl	e6f9a <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
   dbc16:	ab07      	add	r3, sp, #28
   dbc18:	9300      	str	r3, [sp, #0]
   dbc1a:	ab08      	add	r3, sp, #32
   dbc1c:	462a      	mov	r2, r5
   dbc1e:	4619      	mov	r1, r3
   dbc20:	4620      	mov	r0, r4
   dbc22:	f7f9 fc55 	bl	d54d0 <mbedtls_cipher_update>
   dbc26:	4684      	mov	ip, r0
   dbc28:	2800      	cmp	r0, #0
   dbc2a:	d172      	bne.n	dbd12 <mbedtls_gcm_setkey+0x158>
   dbc2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
        return( ret );

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
    GET_UINT32_BE( lo, h,  4  );
    vh = (uint64_t) hi << 32 | lo;
   dbc2e:	9908      	ldr	r1, [sp, #32]

    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;
   dbc30:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   dbc32:	ba18      	rev	r0, r3
        return( ret );

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
    GET_UINT32_BE( lo, h,  4  );
    vh = (uint64_t) hi << 32 | lo;
   dbc34:	ba0b      	rev	r3, r1
   dbc36:	990b      	ldr	r1, [sp, #44]	; 0x2c
   dbc38:	4662      	mov	r2, ip
   dbc3a:	fa91 fe81 	rev.w	lr, r1
   dbc3e:	4302      	orrs	r2, r0

    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;
   dbc40:	ba29      	rev	r1, r5
   dbc42:	ea4c 000e 	orr.w	r0, ip, lr

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
   dbc46:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    ctx->HH[8] = vh;
   dbc4a:	e9c4 233e 	strd	r2, r3, [r4, #248]	; 0xf8
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
   dbc4e:	f04f 0900 	mov.w	r9, #0
   dbc52:	f04f 0800 	mov.w	r8, #0
   dbc56:	e9c4 892e 	strd	r8, r9, [r4, #184]	; 0xb8
    ctx->HL[0] = 0;
   dbc5a:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
   dbc5e:	f04f 0e03 	mov.w	lr, #3

    for( i = 4; i > 0; i >>= 1 )
   dbc62:	2504      	movs	r5, #4
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
   dbc64:	f04f 4961 	mov.w	r9, #3774873600	; 0xe1000000
   dbc68:	f000 0801 	and.w	r8, r0, #1
        vl  = ( vh << 63 ) | ( vl >> 1 );
   dbc6c:	07d7      	lsls	r7, r2, #31
   dbc6e:	0849      	lsrs	r1, r1, #1
   dbc70:	ea4f 0030 	mov.w	r0, r0, rrx
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
   dbc74:	085b      	lsrs	r3, r3, #1
   dbc76:	ea4f 0232 	mov.w	r2, r2, rrx
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
   dbc7a:	2600      	movs	r6, #0
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
   dbc7c:	fb09 fb08 	mul.w	fp, r9, r8
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
   dbc80:	4330      	orrs	r0, r6
   dbc82:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
   dbc86:	4339      	orrs	r1, r7
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
   dbc88:	4072      	eors	r2, r6
   dbc8a:	ea83 030b 	eor.w	r3, r3, fp

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
   dbc8e:	f1be 0e01 	subs.w	lr, lr, #1
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);

        ctx->HL[i] = vl;
   dbc92:	e9c8 010e 	strd	r0, r1, [r8, #56]	; 0x38
        ctx->HH[i] = vh;
   dbc96:	e9c8 232e 	strd	r2, r3, [r8, #184]	; 0xb8

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
   dbc9a:	ea4f 0565 	mov.w	r5, r5, asr #1
   dbc9e:	d1e3      	bne.n	dbc68 <mbedtls_gcm_setkey+0xae>
   dbca0:	f04f 0803 	mov.w	r8, #3
   dbca4:	2202      	movs	r2, #2
        ctx->HH[i] = vh;
    }

    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
   dbca6:	f104 0938 	add.w	r9, r4, #56	; 0x38
   dbcaa:	f104 0eb8 	add.w	lr, r4, #184	; 0xb8
   dbcae:	00d3      	lsls	r3, r2, #3
   dbcb0:	eb09 0703 	add.w	r7, r9, r3
   dbcb4:	4473      	add	r3, lr
        vh = *HiH;
   dbcb6:	e9d3 0100 	ldrd	r0, r1, [r3]
   dbcba:	e9cd 0102 	strd	r0, r1, [sp, #8]
        vl = *HiL;
   dbcbe:	e9d7 0100 	ldrd	r0, r1, [r7]
   dbcc2:	4676      	mov	r6, lr
   dbcc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
   dbcc8:	4648      	mov	r0, r9
        for( j = 1; j < i; j++ )
   dbcca:	2101      	movs	r1, #1
        {
            HiH[j] = vh ^ ctx->HH[j];
   dbccc:	e9f6 4502 	ldrd	r4, r5, [r6, #8]!
   dbcd0:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   dbcd4:	ea8a 0a04 	eor.w	sl, sl, r4
   dbcd8:	ea8b 0b05 	eor.w	fp, fp, r5
   dbcdc:	4654      	mov	r4, sl
   dbcde:	465d      	mov	r5, fp
   dbce0:	e9e3 4502 	strd	r4, r5, [r3, #8]!
            HiL[j] = vl ^ ctx->HL[j];
   dbce4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   dbce8:	e9f0 4502 	ldrd	r4, r5, [r0, #8]!
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
   dbcec:	3101      	adds	r1, #1
        {
            HiH[j] = vh ^ ctx->HH[j];
            HiL[j] = vl ^ ctx->HL[j];
   dbcee:	ea8a 0a04 	eor.w	sl, sl, r4
   dbcf2:	ea8b 0b05 	eor.w	fp, fp, r5
   dbcf6:	4654      	mov	r4, sl
   dbcf8:	465d      	mov	r5, fp
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
   dbcfa:	4291      	cmp	r1, r2
        {
            HiH[j] = vh ^ ctx->HH[j];
            HiL[j] = vl ^ ctx->HL[j];
   dbcfc:	e9e7 4502 	strd	r4, r5, [r7, #8]!
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
   dbd00:	d1e4      	bne.n	dbccc <mbedtls_gcm_setkey+0x112>

        ctx->HL[i] = vl;
        ctx->HH[i] = vh;
    }

    for( i = 2; i <= 8; i *= 2 )
   dbd02:	f1b8 0801 	subs.w	r8, r8, #1
   dbd06:	ea4f 0242 	mov.w	r2, r2, lsl #1
   dbd0a:	d1d0      	bne.n	dbcae <mbedtls_gcm_setkey+0xf4>
   dbd0c:	e001      	b.n	dbd12 <mbedtls_gcm_setkey+0x158>
    GCM_VALIDATE_RET( key != NULL );
    GCM_VALIDATE_RET( keybits == 128 || keybits == 192 || keybits == 256 );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
   dbd0e:	f06f 0c13 	mvn.w	ip, #19

    if( ( ret = gcm_gen_table( ctx ) ) != 0 )
        return( ret );

    return( 0 );
}
   dbd12:	4660      	mov	r0, ip
   dbd14:	b00d      	add	sp, #52	; 0x34
   dbd16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dbd1a <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
   dbd1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbd1e:	b08b      	sub	sp, #44	; 0x2c
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
   dbd20:	f04f 0900 	mov.w	r9, #0
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
   dbd24:	4604      	mov	r4, r0
   dbd26:	468b      	mov	fp, r1
   dbd28:	4617      	mov	r7, r2
   dbd2a:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
   dbd2e:	f8cd 9014 	str.w	r9, [sp, #20]
    GCM_VALIDATE_RET( iv != NULL );
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
   dbd32:	461d      	mov	r5, r3
   dbd34:	2b00      	cmp	r3, #0
   dbd36:	f000 808e 	beq.w	dbe56 <mbedtls_gcm_starts+0x13c>
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
   dbd3a:	f500 76ac 	add.w	r6, r0, #344	; 0x158
   dbd3e:	2210      	movs	r2, #16
   dbd40:	4649      	mov	r1, r9
   dbd42:	4630      	mov	r0, r6
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
   dbd44:	f504 7ab4 	add.w	sl, r4, #360	; 0x168
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
   dbd48:	f00b f927 	bl	e6f9a <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
   dbd4c:	4649      	mov	r1, r9
   dbd4e:	2210      	movs	r2, #16
   dbd50:	4650      	mov	r0, sl
   dbd52:	f00b f922 	bl	e6f9a <memset>

    ctx->mode = mode;
   dbd56:	f8c4 b178 	str.w	fp, [r4, #376]	; 0x178
    ctx->len = 0;
   dbd5a:	2000      	movs	r0, #0
   dbd5c:	2100      	movs	r1, #0
   dbd5e:	f504 739c 	add.w	r3, r4, #312	; 0x138
    ctx->add_len = 0;
   dbd62:	46a3      	mov	fp, r4

    if( iv_len == 12 )
   dbd64:	2d0c      	cmp	r5, #12

    memset( ctx->y, 0x00, sizeof(ctx->y) );
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );

    ctx->mode = mode;
    ctx->len = 0;
   dbd66:	e9c3 0100 	strd	r0, r1, [r3]
    ctx->add_len = 0;
   dbd6a:	e9eb 0150 	strd	r0, r1, [fp, #320]!	; 0x140

    if( iv_len == 12 )
   dbd6e:	d10a      	bne.n	dbd86 <mbedtls_gcm_starts+0x6c>
    {
        memcpy( ctx->y, iv, iv_len );
   dbd70:	683b      	ldr	r3, [r7, #0]
   dbd72:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   dbd76:	687b      	ldr	r3, [r7, #4]
   dbd78:	6073      	str	r3, [r6, #4]
   dbd7a:	68bb      	ldr	r3, [r7, #8]
   dbd7c:	60b3      	str	r3, [r6, #8]
        ctx->y[15] = 1;
   dbd7e:	2301      	movs	r3, #1
   dbd80:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
   dbd84:	e03a      	b.n	dbdfc <mbedtls_gcm_starts+0xe2>
    }
    else
    {
        memset( work_buf, 0x00, 16 );
   dbd86:	2210      	movs	r2, #16
   dbd88:	4649      	mov	r1, r9
   dbd8a:	a806      	add	r0, sp, #24
   dbd8c:	f00b f905 	bl	e6f9a <memset>
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
   dbd90:	00eb      	lsls	r3, r5, #3
   dbd92:	0e1a      	lsrs	r2, r3, #24
   dbd94:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
   dbd98:	0c1a      	lsrs	r2, r3, #16
   dbd9a:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   dbd9e:	0a1a      	lsrs	r2, r3, #8
   dbda0:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
   dbda4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27

        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;
   dbda8:	2d10      	cmp	r5, #16
   dbdaa:	462b      	mov	r3, r5
   dbdac:	f204 1957 	addw	r9, r4, #343	; 0x157
   dbdb0:	bf28      	it	cs
   dbdb2:	2310      	movcs	r3, #16
   dbdb4:	463a      	mov	r2, r7
   dbdb6:	4649      	mov	r1, r9
   dbdb8:	441f      	add	r7, r3

            for( i = 0; i < use_len; i++ )
                ctx->y[i] ^= p[i];
   dbdba:	f812 eb01 	ldrb.w	lr, [r2], #1
   dbdbe:	f811 0f01 	ldrb.w	r0, [r1, #1]!
        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;

            for( i = 0; i < use_len; i++ )
   dbdc2:	42ba      	cmp	r2, r7
                ctx->y[i] ^= p[i];
   dbdc4:	ea8e 0000 	eor.w	r0, lr, r0
   dbdc8:	7008      	strb	r0, [r1, #0]
        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;

            for( i = 0; i < use_len; i++ )
   dbdca:	d1f6      	bne.n	dbdba <mbedtls_gcm_starts+0xa0>
                ctx->y[i] ^= p[i];

            gcm_mult( ctx, ctx->y, ctx->y );
   dbdcc:	4632      	mov	r2, r6
   dbdce:	4631      	mov	r1, r6
   dbdd0:	4620      	mov	r0, r4
   dbdd2:	9303      	str	r3, [sp, #12]
   dbdd4:	f7ff fe34 	bl	dba40 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
    {
        memset( work_buf, 0x00, 16 );
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );

        p = iv;
        while( iv_len > 0 )
   dbdd8:	9b03      	ldr	r3, [sp, #12]
   dbdda:	1aed      	subs	r5, r5, r3
   dbddc:	d1e4      	bne.n	dbda8 <mbedtls_gcm_starts+0x8e>
            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
            ctx->y[i] ^= work_buf[i];
   dbdde:	ab06      	add	r3, sp, #24
   dbde0:	f819 2f01 	ldrb.w	r2, [r9, #1]!
   dbde4:	5d5b      	ldrb	r3, [r3, r5]

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
   dbde6:	3501      	adds	r5, #1
            ctx->y[i] ^= work_buf[i];
   dbde8:	4053      	eors	r3, r2

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
   dbdea:	2d10      	cmp	r5, #16
            ctx->y[i] ^= work_buf[i];
   dbdec:	f889 3000 	strb.w	r3, [r9]

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
   dbdf0:	d1f5      	bne.n	dbdde <mbedtls_gcm_starts+0xc4>
            ctx->y[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->y, ctx->y );
   dbdf2:	4632      	mov	r2, r6
   dbdf4:	4631      	mov	r1, r6
   dbdf6:	4620      	mov	r0, r4
   dbdf8:	f7ff fe22 	bl	dba40 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
   dbdfc:	ab05      	add	r3, sp, #20
   dbdfe:	9300      	str	r3, [sp, #0]
   dbe00:	2210      	movs	r2, #16
   dbe02:	f504 73a4 	add.w	r3, r4, #328	; 0x148
   dbe06:	4631      	mov	r1, r6
   dbe08:	4620      	mov	r0, r4
   dbe0a:	f7f9 fb61 	bl	d54d0 <mbedtls_cipher_update>
   dbe0e:	4605      	mov	r5, r0
   dbe10:	bb18      	cbnz	r0, dbe5a <mbedtls_gcm_starts+0x140>
                             &olen ) ) != 0 )
    {
        return( ret );
    }

    ctx->add_len = add_len;
   dbe12:	f8c4 8140 	str.w	r8, [r4, #320]	; 0x140
   dbe16:	f8cb 0004 	str.w	r0, [fp, #4]
    p = add;
    while( add_len > 0 )
   dbe1a:	f1b8 0f00 	cmp.w	r8, #0
   dbe1e:	d01c      	beq.n	dbe5a <mbedtls_gcm_starts+0x140>
    {
        use_len = ( add_len < 16 ) ? add_len : 16;
   dbe20:	4646      	mov	r6, r8
   dbe22:	9b14      	ldr	r3, [sp, #80]	; 0x50
   dbe24:	2e10      	cmp	r6, #16
   dbe26:	bf28      	it	cs
   dbe28:	2610      	movcs	r6, #16
   dbe2a:	4619      	mov	r1, r3
   dbe2c:	4431      	add	r1, r6
   dbe2e:	f204 1267 	addw	r2, r4, #359	; 0x167
   dbe32:	9114      	str	r1, [sp, #80]	; 0x50

        for( i = 0; i < use_len; i++ )
            ctx->buf[i] ^= p[i];
   dbe34:	f813 0b01 	ldrb.w	r0, [r3], #1
   dbe38:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   dbe3c:	4041      	eors	r1, r0
   dbe3e:	7011      	strb	r1, [r2, #0]
    p = add;
    while( add_len > 0 )
    {
        use_len = ( add_len < 16 ) ? add_len : 16;

        for( i = 0; i < use_len; i++ )
   dbe40:	9914      	ldr	r1, [sp, #80]	; 0x50
   dbe42:	4299      	cmp	r1, r3
   dbe44:	d1f6      	bne.n	dbe34 <mbedtls_gcm_starts+0x11a>
            ctx->buf[i] ^= p[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );
   dbe46:	4652      	mov	r2, sl
   dbe48:	4651      	mov	r1, sl
   dbe4a:	4620      	mov	r0, r4
   dbe4c:	f7ff fdf8 	bl	dba40 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        add_len -= use_len;
   dbe50:	ebc6 0808 	rsb	r8, r6, r8
        return( ret );
    }

    ctx->add_len = add_len;
    p = add;
    while( add_len > 0 )
   dbe54:	e7e1      	b.n	dbe1a <mbedtls_gcm_starts+0x100>
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
      ( (uint64_t) iv_len  ) >> 61 != 0 ||
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
   dbe56:	f06f 0513 	mvn.w	r5, #19
        add_len -= use_len;
        p += use_len;
    }

    return( 0 );
}
   dbe5a:	4628      	mov	r0, r5
   dbe5c:	b00b      	add	sp, #44	; 0x2c
   dbe5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dbe62 <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
   dbe62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dbe66:	461f      	mov	r7, r3
   dbe68:	b08b      	sub	sp, #44	; 0x2c
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
   dbe6a:	2300      	movs	r3, #0

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( output > input && (size_t) ( output - input ) < length )
   dbe6c:	4297      	cmp	r7, r2

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
   dbe6e:	4604      	mov	r4, r0
   dbe70:	460e      	mov	r6, r1
   dbe72:	4690      	mov	r8, r2
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
   dbe74:	9305      	str	r3, [sp, #20]

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( output > input && (size_t) ( output - input ) < length )
   dbe76:	d902      	bls.n	dbe7e <mbedtls_gcm_update+0x1c>
   dbe78:	1abb      	subs	r3, r7, r2
   dbe7a:	428b      	cmp	r3, r1
   dbe7c:	d35d      	bcc.n	dbf3a <mbedtls_gcm_update+0xd8>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
   dbe7e:	4625      	mov	r5, r4
   dbe80:	e9f5 014e 	ldrd	r0, r1, [r5, #312]!	; 0x138
   dbe84:	1982      	adds	r2, r0, r6
   dbe86:	f141 0300 	adc.w	r3, r1, #0
   dbe8a:	428b      	cmp	r3, r1
   dbe8c:	bf08      	it	eq
   dbe8e:	4282      	cmpeq	r2, r0
   dbe90:	d353      	bcc.n	dbf3a <mbedtls_gcm_update+0xd8>
   dbe92:	210f      	movs	r1, #15
   dbe94:	f06f 001f 	mvn.w	r0, #31
   dbe98:	4299      	cmp	r1, r3
   dbe9a:	bf08      	it	eq
   dbe9c:	4290      	cmpeq	r0, r2
   dbe9e:	d34c      	bcc.n	dbf3a <mbedtls_gcm_update+0xd8>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    ctx->len += length;
   dbea0:	e9c5 2300 	strd	r2, r3, [r5]
   dbea4:	f504 73b2 	add.w	r3, r4, #356	; 0x164
   dbea8:	9302      	str	r3, [sp, #8]

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
   dbeaa:	f504 73ac 	add.w	r3, r4, #344	; 0x158
   dbeae:	f10d 0a18 	add.w	sl, sp, #24
   dbeb2:	9303      	str	r3, [sp, #12]
    }

    ctx->len += length;

    p = input;
    while( length > 0 )
   dbeb4:	2e00      	cmp	r6, #0
   dbeb6:	d043      	beq.n	dbf40 <mbedtls_gcm_update+0xde>
   dbeb8:	f504 75b4 	add.w	r5, r4, #360	; 0x168
    {
        use_len = ( length < 16 ) ? length : 16;
   dbebc:	2e10      	cmp	r6, #16
   dbebe:	46b1      	mov	r9, r6
   dbec0:	462a      	mov	r2, r5
   dbec2:	bf28      	it	cs
   dbec4:	f04f 0910 	movcs.w	r9, #16
   dbec8:	46ab      	mov	fp, r5

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
   dbeca:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
   dbece:	3301      	adds	r3, #1
   dbed0:	b2db      	uxtb	r3, r3
   dbed2:	7013      	strb	r3, [r2, #0]
   dbed4:	b913      	cbnz	r3, dbedc <mbedtls_gcm_update+0x7a>
    p = input;
    while( length > 0 )
    {
        use_len = ( length < 16 ) ? length : 16;

        for( i = 16; i > 12; i-- )
   dbed6:	9b02      	ldr	r3, [sp, #8]
   dbed8:	429a      	cmp	r2, r3
   dbeda:	d1f6      	bne.n	dbeca <mbedtls_gcm_update+0x68>
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
   dbedc:	ab05      	add	r3, sp, #20
   dbede:	9300      	str	r3, [sp, #0]
   dbee0:	2210      	movs	r2, #16
   dbee2:	4653      	mov	r3, sl
   dbee4:	9903      	ldr	r1, [sp, #12]
   dbee6:	4620      	mov	r0, r4
   dbee8:	f7f9 faf2 	bl	d54d0 <mbedtls_cipher_update>
   dbeec:	bb48      	cbnz	r0, dbf42 <mbedtls_gcm_update+0xe0>
   dbeee:	4642      	mov	r2, r8
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
   dbef0:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
   dbef4:	b91b      	cbnz	r3, dbefe <mbedtls_gcm_update+0x9c>
                ctx->buf[i] ^= p[i];
   dbef6:	7829      	ldrb	r1, [r5, #0]
   dbef8:	7813      	ldrb	r3, [r2, #0]
   dbefa:	404b      	eors	r3, r1
   dbefc:	702b      	strb	r3, [r5, #0]
            out_p[i] = ectr[i] ^ p[i];
   dbefe:	f812 1b01 	ldrb.w	r1, [r2], #1
   dbf02:	f81a 3000 	ldrb.w	r3, [sl, r0]
   dbf06:	404b      	eors	r3, r1
   dbf08:	543b      	strb	r3, [r7, r0]
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
   dbf0a:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
   dbf0e:	2901      	cmp	r1, #1
                ctx->buf[i] ^= out_p[i];
   dbf10:	bf08      	it	eq
   dbf12:	7829      	ldrbeq	r1, [r5, #0]
                                   &olen ) ) != 0 )
        {
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
   dbf14:	f100 0001 	add.w	r0, r0, #1
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
                ctx->buf[i] ^= p[i];
            out_p[i] = ectr[i] ^ p[i];
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
                ctx->buf[i] ^= out_p[i];
   dbf18:	bf04      	itt	eq
   dbf1a:	404b      	eoreq	r3, r1
   dbf1c:	702b      	strbeq	r3, [r5, #0]
                                   &olen ) ) != 0 )
        {
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
   dbf1e:	4581      	cmp	r9, r0
   dbf20:	f105 0501 	add.w	r5, r5, #1
   dbf24:	d1e4      	bne.n	dbef0 <mbedtls_gcm_update+0x8e>
            out_p[i] = ectr[i] ^ p[i];
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
                ctx->buf[i] ^= out_p[i];
        }

        gcm_mult( ctx, ctx->buf, ctx->buf );
   dbf26:	465a      	mov	r2, fp
   dbf28:	4659      	mov	r1, fp
   dbf2a:	4620      	mov	r0, r4
   dbf2c:	f7ff fd88 	bl	dba40 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        length -= use_len;
   dbf30:	ebc9 0606 	rsb	r6, r9, r6
        p += use_len;
   dbf34:	44c8      	add	r8, r9
        out_p += use_len;
   dbf36:	444f      	add	r7, r9
    }

    ctx->len += length;

    p = input;
    while( length > 0 )
   dbf38:	e7bc      	b.n	dbeb4 <mbedtls_gcm_update+0x52>
    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( output > input && (size_t) ( output - input ) < length )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
   dbf3a:	f06f 0013 	mvn.w	r0, #19
   dbf3e:	e000      	b.n	dbf42 <mbedtls_gcm_update+0xe0>
        length -= use_len;
        p += use_len;
        out_p += use_len;
    }

    return( 0 );
   dbf40:	4630      	mov	r0, r6
}
   dbf42:	b00b      	add	sp, #44	; 0x2c
   dbf44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dbf48 <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
   dbf48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   dbf4c:	4688      	mov	r8, r1
    uint64_t orig_add_len;

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    orig_len = ctx->len * 8;
   dbf4e:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
   dbf52:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
   dbf56:	00cd      	lsls	r5, r1, #3
    orig_add_len = ctx->add_len * 8;
   dbf58:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
    uint64_t orig_add_len;

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    orig_len = ctx->len * 8;
   dbf5c:	ea45 7553 	orr.w	r5, r5, r3, lsr #29
   dbf60:	00dc      	lsls	r4, r3, #3
    orig_add_len = ctx->add_len * 8;
   dbf62:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
   dbf66:	00cf      	lsls	r7, r1, #3
   dbf68:	ea47 7753 	orr.w	r7, r7, r3, lsr #29
   dbf6c:	00de      	lsls	r6, r3, #3

    if( tag_len > 16 || tag_len < 4 )
   dbf6e:	1f13      	subs	r3, r2, #4
   dbf70:	2b0c      	cmp	r3, #12
}

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
   dbf72:	4681      	mov	r9, r0
   dbf74:	4692      	mov	sl, r2
    GCM_VALIDATE_RET( tag != NULL );

    orig_len = ctx->len * 8;
    orig_add_len = ctx->add_len * 8;

    if( tag_len > 16 || tag_len < 4 )
   dbf76:	d85b      	bhi.n	dc030 <mbedtls_gcm_finish+0xe8>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    memcpy( tag, ctx->base_ectr, tag_len );
   dbf78:	f500 71a4 	add.w	r1, r0, #328	; 0x148
   dbf7c:	4640      	mov	r0, r8
   dbf7e:	f00a ffe6 	bl	e6f4e <memcpy>

    if( orig_len || orig_add_len )
   dbf82:	ea54 0305 	orrs.w	r3, r4, r5
   dbf86:	d104      	bne.n	dbf92 <mbedtls_gcm_finish+0x4a>
   dbf88:	ea56 0307 	orrs.w	r3, r6, r7
   dbf8c:	d101      	bne.n	dbf92 <mbedtls_gcm_finish+0x4a>

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
   dbf8e:	2000      	movs	r0, #0
   dbf90:	e050      	b.n	dc034 <mbedtls_gcm_finish+0xec>

    memcpy( tag, ctx->base_ectr, tag_len );

    if( orig_len || orig_add_len )
    {
        memset( work_buf, 0x00, 16 );
   dbf92:	2210      	movs	r2, #16
   dbf94:	2100      	movs	r1, #0
   dbf96:	4668      	mov	r0, sp
   dbf98:	f00a ffff 	bl	e6f9a <memset>

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
   dbf9c:	0e3b      	lsrs	r3, r7, #24
   dbf9e:	f88d 3000 	strb.w	r3, [sp]
   dbfa2:	0c3b      	lsrs	r3, r7, #16
   dbfa4:	f88d 3001 	strb.w	r3, [sp, #1]
   dbfa8:	0a3b      	lsrs	r3, r7, #8
   dbfaa:	f88d 3002 	strb.w	r3, [sp, #2]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
   dbfae:	0e33      	lsrs	r3, r6, #24
   dbfb0:	f88d 3004 	strb.w	r3, [sp, #4]
   dbfb4:	0c33      	lsrs	r3, r6, #16
   dbfb6:	f88d 3005 	strb.w	r3, [sp, #5]
   dbfba:	0a33      	lsrs	r3, r6, #8
   dbfbc:	f88d 3006 	strb.w	r3, [sp, #6]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
   dbfc0:	0e2b      	lsrs	r3, r5, #24
   dbfc2:	f88d 3008 	strb.w	r3, [sp, #8]
   dbfc6:	0c2b      	lsrs	r3, r5, #16
   dbfc8:	f88d 3009 	strb.w	r3, [sp, #9]
   dbfcc:	0a2b      	lsrs	r3, r5, #8
   dbfce:	f88d 300a 	strb.w	r3, [sp, #10]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
   dbfd2:	0e23      	lsrs	r3, r4, #24
   dbfd4:	f88d 300c 	strb.w	r3, [sp, #12]
   dbfd8:	0c23      	lsrs	r3, r4, #16
   dbfda:	f88d 300d 	strb.w	r3, [sp, #13]
   dbfde:	f88d 400f 	strb.w	r4, [sp, #15]
   dbfe2:	0a23      	lsrs	r3, r4, #8
   dbfe4:	f209 1467 	addw	r4, r9, #359	; 0x167
   dbfe8:	f88d 300e 	strb.w	r3, [sp, #14]

    if( orig_len || orig_add_len )
    {
        memset( work_buf, 0x00, 16 );

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
   dbfec:	f88d 7003 	strb.w	r7, [sp, #3]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
   dbff0:	f88d 6007 	strb.w	r6, [sp, #7]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
   dbff4:	f88d 500b 	strb.w	r5, [sp, #11]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
   dbff8:	4622      	mov	r2, r4

        for( i = 0; i < 16; i++ )
   dbffa:	2300      	movs	r3, #0
            ctx->buf[i] ^= work_buf[i];
   dbffc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   dc000:	f81d 1003 	ldrb.w	r1, [sp, r3]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
   dc004:	3301      	adds	r3, #1
            ctx->buf[i] ^= work_buf[i];
   dc006:	4041      	eors	r1, r0
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
   dc008:	2b10      	cmp	r3, #16
            ctx->buf[i] ^= work_buf[i];
   dc00a:	7011      	strb	r1, [r2, #0]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
   dc00c:	d1f6      	bne.n	dbffc <mbedtls_gcm_finish+0xb4>
            ctx->buf[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );
   dc00e:	f509 72b4 	add.w	r2, r9, #360	; 0x168
   dc012:	4611      	mov	r1, r2
   dc014:	4648      	mov	r0, r9
   dc016:	f7ff fd13 	bl	dba40 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
   dc01a:	44c2      	add	sl, r8
   dc01c:	4641      	mov	r1, r8

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
   dc01e:	780a      	ldrb	r2, [r1, #0]
   dc020:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   dc024:	4053      	eors	r3, r2
   dc026:	f801 3b01 	strb.w	r3, [r1], #1
        for( i = 0; i < 16; i++ )
            ctx->buf[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );

        for( i = 0; i < tag_len; i++ )
   dc02a:	4551      	cmp	r1, sl
   dc02c:	d1f7      	bne.n	dc01e <mbedtls_gcm_finish+0xd6>
   dc02e:	e7ae      	b.n	dbf8e <mbedtls_gcm_finish+0x46>

    orig_len = ctx->len * 8;
    orig_add_len = ctx->add_len * 8;

    if( tag_len > 16 || tag_len < 4 )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
   dc030:	f06f 0013 	mvn.w	r0, #19
        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
}
   dc034:	b004      	add	sp, #16
   dc036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000dc03a <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
   dc03a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dc03e:	4617      	mov	r7, r2
   dc040:	461a      	mov	r2, r3
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
   dc042:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dc044:	9301      	str	r3, [sp, #4]
   dc046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dc048:	9300      	str	r3, [sp, #0]
   dc04a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
   dc04c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   dc050:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
   dc054:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   dc056:	9d10      	ldr	r5, [sp, #64]	; 0x40
   dc058:	4604      	mov	r4, r0
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
   dc05a:	f7ff fe5e 	bl	dbd1a <mbedtls_gcm_starts>
   dc05e:	b970      	cbnz	r0, dc07e <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
   dc060:	464b      	mov	r3, r9
   dc062:	4642      	mov	r2, r8
   dc064:	4639      	mov	r1, r7
   dc066:	4620      	mov	r0, r4
   dc068:	f7ff fefb 	bl	dbe62 <mbedtls_gcm_update>
   dc06c:	b938      	cbnz	r0, dc07e <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
   dc06e:	4632      	mov	r2, r6
   dc070:	4629      	mov	r1, r5
   dc072:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
   dc074:	b003      	add	sp, #12
   dc076:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
   dc07a:	f7ff bf65 	b.w	dbf48 <mbedtls_gcm_finish>
        return( ret );

    return( 0 );
}
   dc07e:	b003      	add	sp, #12
   dc080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dc084 <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
   dc084:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc086:	b08d      	sub	sp, #52	; 0x34
   dc088:	460e      	mov	r6, r1
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( tag != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
   dc08a:	9916      	ldr	r1, [sp, #88]	; 0x58
   dc08c:	9103      	str	r1, [sp, #12]
   dc08e:	9913      	ldr	r1, [sp, #76]	; 0x4c
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
   dc090:	9c15      	ldr	r4, [sp, #84]	; 0x54
   dc092:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( tag != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
   dc094:	9102      	str	r1, [sp, #8]
   dc096:	af08      	add	r7, sp, #32
   dc098:	9912      	ldr	r1, [sp, #72]	; 0x48
   dc09a:	9101      	str	r1, [sp, #4]
   dc09c:	9300      	str	r3, [sp, #0]
   dc09e:	9706      	str	r7, [sp, #24]
   dc0a0:	4613      	mov	r3, r2
   dc0a2:	9405      	str	r4, [sp, #20]
   dc0a4:	9504      	str	r5, [sp, #16]
   dc0a6:	4632      	mov	r2, r6
   dc0a8:	2100      	movs	r1, #0
   dc0aa:	f7ff ffc6 	bl	dc03a <mbedtls_gcm_crypt_and_tag>
   dc0ae:	b998      	cbnz	r0, dc0d8 <mbedtls_gcm_auth_decrypt+0x54>
   dc0b0:	4602      	mov	r2, r0
   dc0b2:	4603      	mov	r3, r0
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
   dc0b4:	42a3      	cmp	r3, r4
   dc0b6:	d008      	beq.n	dc0ca <mbedtls_gcm_auth_decrypt+0x46>
        diff |= tag[i] ^ check_tag[i];
   dc0b8:	9914      	ldr	r1, [sp, #80]	; 0x50
   dc0ba:	f811 e003 	ldrb.w	lr, [r1, r3]
   dc0be:	5cf9      	ldrb	r1, [r7, r3]
   dc0c0:	ea8e 0101 	eor.w	r1, lr, r1
   dc0c4:	430a      	orrs	r2, r1
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
   dc0c6:	3301      	adds	r3, #1
   dc0c8:	e7f4      	b.n	dc0b4 <mbedtls_gcm_auth_decrypt+0x30>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
   dc0ca:	b12a      	cbz	r2, dc0d8 <mbedtls_gcm_auth_decrypt+0x54>
    {
        mbedtls_platform_zeroize( output, length );
   dc0cc:	4628      	mov	r0, r5
   dc0ce:	4631      	mov	r1, r6
   dc0d0:	f7fe fa06 	bl	da4e0 <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
   dc0d4:	f06f 0011 	mvn.w	r0, #17
    }

    return( 0 );
}
   dc0d8:	b00d      	add	sp, #52	; 0x34
   dc0da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dc0dc <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
   dc0dc:	b510      	push	{r4, lr}
    if( ctx == NULL )
   dc0de:	4604      	mov	r4, r0
   dc0e0:	b140      	cbz	r0, dc0f4 <mbedtls_gcm_free+0x18>
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
   dc0e2:	f7f9 f983 	bl	d53ec <mbedtls_cipher_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
   dc0e6:	4620      	mov	r0, r4
   dc0e8:	f44f 71c0 	mov.w	r1, #384	; 0x180
}
   dc0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
    if( ctx == NULL )
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
   dc0f0:	f7fe b9f6 	b.w	da4e0 <mbedtls_platform_zeroize>
   dc0f4:	bd10      	pop	{r4, pc}
	...

000dc0f8 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
   dc0f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dc0fc:	f8dd e01c 	ldr.w	lr, [sp, #28]
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
   dc100:	f8df 811c 	ldr.w	r8, [pc, #284]	; dc220 <mbedtls_base64_decode+0x128>
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
   dc104:	2700      	movs	r7, #0
   dc106:	463c      	mov	r4, r7
   dc108:	463d      	mov	r5, r7
   dc10a:	4575      	cmp	r5, lr
   dc10c:	d22d      	bcs.n	dc16a <mbedtls_base64_decode+0x72>
   dc10e:	f04f 0c00 	mov.w	ip, #0
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
   dc112:	5d5e      	ldrb	r6, [r3, r5]
   dc114:	2e20      	cmp	r6, #32
   dc116:	d104      	bne.n	dc122 <mbedtls_base64_decode+0x2a>
        {
            ++i;
   dc118:	3501      	adds	r5, #1
    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
   dc11a:	45ae      	cmp	lr, r5
        {
            ++i;
            ++x;
   dc11c:	f10c 0c01 	add.w	ip, ip, #1
    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
   dc120:	d8f7      	bhi.n	dc112 <mbedtls_base64_decode+0x1a>
            ++i;
            ++x;
        }

        /* Spaces at end of buffer are OK */
        if( i == slen )
   dc122:	45ae      	cmp	lr, r5
   dc124:	d021      	beq.n	dc16a <mbedtls_base64_decode+0x72>
            break;

        if( ( slen - i ) >= 2 &&
   dc126:	ebc5 060e 	rsb	r6, r5, lr
   dc12a:	2e01      	cmp	r6, #1
   dc12c:	d906      	bls.n	dc13c <mbedtls_base64_decode+0x44>
   dc12e:	5d5e      	ldrb	r6, [r3, r5]
   dc130:	2e0d      	cmp	r6, #13
   dc132:	d103      	bne.n	dc13c <mbedtls_base64_decode+0x44>
            src[i] == '\r' && src[i + 1] == '\n' )
   dc134:	195e      	adds	r6, r3, r5
   dc136:	7876      	ldrb	r6, [r6, #1]
   dc138:	2e0a      	cmp	r6, #10
   dc13a:	d014      	beq.n	dc166 <mbedtls_base64_decode+0x6e>
            continue;

        if( src[i] == '\n' )
   dc13c:	5d5e      	ldrb	r6, [r3, r5]
   dc13e:	2e0a      	cmp	r6, #10
   dc140:	d011      	beq.n	dc166 <mbedtls_base64_decode+0x6e>
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
   dc142:	f1bc 0f00 	cmp.w	ip, #0
   dc146:	d166      	bne.n	dc216 <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
   dc148:	2e3d      	cmp	r6, #61	; 0x3d
   dc14a:	d102      	bne.n	dc152 <mbedtls_base64_decode+0x5a>
   dc14c:	3701      	adds	r7, #1
   dc14e:	2f02      	cmp	r7, #2
   dc150:	d861      	bhi.n	dc216 <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
   dc152:	f016 0f80 	tst.w	r6, #128	; 0x80
   dc156:	d15e      	bne.n	dc216 <mbedtls_base64_decode+0x11e>
   dc158:	f818 6006 	ldrb.w	r6, [r8, r6]
   dc15c:	2e7f      	cmp	r6, #127	; 0x7f
   dc15e:	d05a      	beq.n	dc216 <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
   dc160:	2e3f      	cmp	r6, #63	; 0x3f
   dc162:	d956      	bls.n	dc212 <mbedtls_base64_decode+0x11a>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
   dc164:	3401      	adds	r4, #1
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
   dc166:	3501      	adds	r5, #1
   dc168:	e7cf      	b.n	dc10a <mbedtls_base64_decode+0x12>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
    }

    if( n == 0 )
   dc16a:	b91c      	cbnz	r4, dc174 <mbedtls_base64_decode+0x7c>
    {
        *olen = 0;
   dc16c:	6014      	str	r4, [r2, #0]
        return( 0 );
   dc16e:	4620      	mov	r0, r4
   dc170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
    n -= j;
   dc174:	f004 0e07 	and.w	lr, r4, #7
   dc178:	2606      	movs	r6, #6
   dc17a:	08e4      	lsrs	r4, r4, #3
   dc17c:	fb06 fe0e 	mul.w	lr, r6, lr
   dc180:	4366      	muls	r6, r4
   dc182:	f10e 0e07 	add.w	lr, lr, #7
   dc186:	1bf6      	subs	r6, r6, r7
   dc188:	eb06 04de 	add.w	r4, r6, lr, lsr #3

    if( dst == NULL || dlen < n )
   dc18c:	b160      	cbz	r0, dc1a8 <mbedtls_base64_decode+0xb0>
   dc18e:	428c      	cmp	r4, r1
   dc190:	d80a      	bhi.n	dc1a8 <mbedtls_base64_decode+0xb0>
   dc192:	2600      	movs	r6, #0
   dc194:	eb03 0e05 	add.w	lr, r3, r5
   dc198:	4601      	mov	r1, r0
   dc19a:	2503      	movs	r5, #3
   dc19c:	4634      	mov	r4, r6
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
   dc19e:	f8df c080 	ldr.w	ip, [pc, #128]	; dc220 <mbedtls_base64_decode+0x128>
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
   dc1a2:	f8df 8080 	ldr.w	r8, [pc, #128]	; dc224 <mbedtls_base64_decode+0x12c>
   dc1a6:	e00f      	b.n	dc1c8 <mbedtls_base64_decode+0xd0>
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
    n -= j;

    if( dst == NULL || dlen < n )
    {
        *olen = n;
   dc1a8:	6014      	str	r4, [r2, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
   dc1aa:	f06f 0029 	mvn.w	r0, #41	; 0x29
   dc1ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
   dc1b2:	f813 9b01 	ldrb.w	r9, [r3], #1
   dc1b6:	f1a9 070a 	sub.w	r7, r9, #10
   dc1ba:	b2ff      	uxtb	r7, r7
   dc1bc:	2f16      	cmp	r7, #22
   dc1be:	d806      	bhi.n	dc1ce <mbedtls_base64_decode+0xd6>
   dc1c0:	fa28 f707 	lsr.w	r7, r8, r7
   dc1c4:	07ff      	lsls	r7, r7, #31
   dc1c6:	d502      	bpl.n	dc1ce <mbedtls_base64_decode+0xd6>
    {
        *olen = n;
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   dc1c8:	4573      	cmp	r3, lr
   dc1ca:	d1f2      	bne.n	dc1b2 <mbedtls_base64_decode+0xba>
   dc1cc:	e01c      	b.n	dc208 <mbedtls_base64_decode+0x110>
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
   dc1ce:	f81c 7009 	ldrb.w	r7, [ip, r9]
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
   dc1d2:	3401      	adds	r4, #1
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
   dc1d4:	2f40      	cmp	r7, #64	; 0x40
   dc1d6:	bf08      	it	eq
   dc1d8:	3d01      	subeq	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
   dc1da:	f007 073f 	and.w	r7, r7, #63	; 0x3f

        if( ++n == 4 )
   dc1de:	2c04      	cmp	r4, #4
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
   dc1e0:	ea47 1686 	orr.w	r6, r7, r6, lsl #6

        if( ++n == 4 )
   dc1e4:	d1f0      	bne.n	dc1c8 <mbedtls_base64_decode+0xd0>
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
   dc1e6:	b16d      	cbz	r5, dc204 <mbedtls_base64_decode+0x10c>
   dc1e8:	0c34      	lsrs	r4, r6, #16
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
   dc1ea:	2d01      	cmp	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
   dc1ec:	700c      	strb	r4, [r1, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
   dc1ee:	d101      	bne.n	dc1f4 <mbedtls_base64_decode+0xfc>
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
   dc1f0:	3101      	adds	r1, #1
   dc1f2:	e007      	b.n	dc204 <mbedtls_base64_decode+0x10c>
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
            if( j > 2 ) *p++ = (unsigned char)( x       );
   dc1f4:	2d02      	cmp	r5, #2

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
   dc1f6:	ea4f 2416 	mov.w	r4, r6, lsr #8
   dc1fa:	704c      	strb	r4, [r1, #1]
            if( j > 2 ) *p++ = (unsigned char)( x       );
   dc1fc:	bf16      	itet	ne
   dc1fe:	708e      	strbne	r6, [r1, #2]

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
   dc200:	3102      	addeq	r1, #2
            if( j > 2 ) *p++ = (unsigned char)( x       );
   dc202:	3103      	addne	r1, #3
        j -= ( base64_dec_map[*src] == 64 );
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
   dc204:	2400      	movs	r4, #0
   dc206:	e7df      	b.n	dc1c8 <mbedtls_base64_decode+0xd0>
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
            if( j > 2 ) *p++ = (unsigned char)( x       );
        }
    }

    *olen = p - dst;
   dc208:	1a08      	subs	r0, r1, r0
   dc20a:	6010      	str	r0, [r2, #0]

    return( 0 );
   dc20c:	2000      	movs	r0, #0
   dc20e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
   dc212:	2f00      	cmp	r7, #0
   dc214:	d0a6      	beq.n	dc164 <mbedtls_base64_decode+0x6c>
        if( src[i] == '\n' )
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
   dc216:	f06f 002b 	mvn.w	r0, #43	; 0x2b
   dc21a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dc21e:	bf00      	nop
   dc220:	000e95d0 	.word	0x000e95d0
   dc224:	00400009 	.word	0x00400009

000dc228 <mbedtls_md_info_from_type>:
#endif
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
   dc228:	3804      	subs	r0, #4
   dc22a:	b2c0      	uxtb	r0, r0
   dc22c:	2804      	cmp	r0, #4
   dc22e:	bf9a      	itte	ls
   dc230:	4b02      	ldrls	r3, [pc, #8]	; (dc23c <mbedtls_md_info_from_type+0x14>)
   dc232:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   dc236:	2000      	movhi	r0, #0
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
    }
}
   dc238:	4770      	bx	lr
   dc23a:	bf00      	nop
   dc23c:	000e9650 	.word	0x000e9650

000dc240 <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
   dc240:	2300      	movs	r3, #0
   dc242:	6003      	str	r3, [r0, #0]
   dc244:	6043      	str	r3, [r0, #4]
   dc246:	6083      	str	r3, [r0, #8]
   dc248:	4770      	bx	lr

000dc24a <mbedtls_md_free>:
}

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
   dc24a:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL )
   dc24c:	4604      	mov	r4, r0
   dc24e:	b1a8      	cbz	r0, dc27c <mbedtls_md_free+0x32>
   dc250:	6803      	ldr	r3, [r0, #0]
   dc252:	b19b      	cbz	r3, dc27c <mbedtls_md_free+0x32>
        return;

    if( ctx->md_ctx != NULL )
   dc254:	6840      	ldr	r0, [r0, #4]
   dc256:	b108      	cbz	r0, dc25c <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
   dc258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dc25a:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
   dc25c:	68a0      	ldr	r0, [r4, #8]
   dc25e:	b138      	cbz	r0, dc270 <mbedtls_md_free+0x26>
    {
        mbedtls_platform_zeroize( ctx->hmac_ctx,
                                  2 * ctx->md_info->block_size );
   dc260:	6823      	ldr	r3, [r4, #0]
   dc262:	68d9      	ldr	r1, [r3, #12]
   dc264:	0049      	lsls	r1, r1, #1
   dc266:	f7fe f93b 	bl	da4e0 <mbedtls_platform_zeroize>
        mbedtls_free( ctx->hmac_ctx );
   dc26a:	68a0      	ldr	r0, [r4, #8]
   dc26c:	f009 f87e 	bl	e536c <free>
    }

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
   dc270:	4620      	mov	r0, r4
   dc272:	210c      	movs	r1, #12
}
   dc274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mbedtls_platform_zeroize( ctx->hmac_ctx,
                                  2 * ctx->md_info->block_size );
        mbedtls_free( ctx->hmac_ctx );
    }

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
   dc278:	f7fe b932 	b.w	da4e0 <mbedtls_platform_zeroize>
   dc27c:	bd10      	pop	{r4, pc}
	...

000dc280 <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
   dc280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dc282:	4605      	mov	r5, r0
   dc284:	4617      	mov	r7, r2
    if( md_info == NULL || ctx == NULL )
   dc286:	460c      	mov	r4, r1
   dc288:	b199      	cbz	r1, dc2b2 <mbedtls_md_setup+0x32>
   dc28a:	b190      	cbz	r0, dc2b2 <mbedtls_md_setup+0x32>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
   dc28c:	6a0b      	ldr	r3, [r1, #32]
   dc28e:	4798      	blx	r3
   dc290:	4606      	mov	r6, r0
   dc292:	6068      	str	r0, [r5, #4]
   dc294:	b178      	cbz	r0, dc2b6 <mbedtls_md_setup+0x36>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
   dc296:	b14f      	cbz	r7, dc2ac <mbedtls_md_setup+0x2c>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
   dc298:	68e1      	ldr	r1, [r4, #12]
   dc29a:	2002      	movs	r0, #2
   dc29c:	f00a fd3a 	bl	e6d14 <calloc>
   dc2a0:	60a8      	str	r0, [r5, #8]
        if( ctx->hmac_ctx == NULL )
   dc2a2:	b918      	cbnz	r0, dc2ac <mbedtls_md_setup+0x2c>
        {
            md_info->ctx_free_func( ctx->md_ctx );
   dc2a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dc2a6:	4630      	mov	r0, r6
   dc2a8:	4798      	blx	r3
   dc2aa:	e004      	b.n	dc2b6 <mbedtls_md_setup+0x36>
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
        }
    }

    ctx->md_info = md_info;
   dc2ac:	602c      	str	r4, [r5, #0]

    return( 0 );
   dc2ae:	2000      	movs	r0, #0
   dc2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
    if( md_info == NULL || ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   dc2b2:	4802      	ldr	r0, [pc, #8]	; (dc2bc <mbedtls_md_setup+0x3c>)
   dc2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
   dc2b6:	4802      	ldr	r0, [pc, #8]	; (dc2c0 <mbedtls_md_setup+0x40>)
    }

    ctx->md_info = md_info;

    return( 0 );
}
   dc2b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dc2ba:	bf00      	nop
   dc2bc:	ffffaf00 	.word	0xffffaf00
   dc2c0:	ffffae80 	.word	0xffffae80

000dc2c4 <mbedtls_md_starts>:

int mbedtls_md_starts( mbedtls_md_context_t *ctx )
{
    if( ctx == NULL || ctx->md_info == NULL )
   dc2c4:	b120      	cbz	r0, dc2d0 <mbedtls_md_starts+0xc>
   dc2c6:	6803      	ldr	r3, [r0, #0]
   dc2c8:	b113      	cbz	r3, dc2d0 <mbedtls_md_starts+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->starts_func( ctx->md_ctx ) );
   dc2ca:	691b      	ldr	r3, [r3, #16]
   dc2cc:	6840      	ldr	r0, [r0, #4]
   dc2ce:	4718      	bx	r3
}
   dc2d0:	4800      	ldr	r0, [pc, #0]	; (dc2d4 <mbedtls_md_starts+0x10>)
   dc2d2:	4770      	bx	lr
   dc2d4:	ffffaf00 	.word	0xffffaf00

000dc2d8 <mbedtls_md_update>:

int mbedtls_md_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL )
   dc2d8:	b120      	cbz	r0, dc2e4 <mbedtls_md_update+0xc>
   dc2da:	6803      	ldr	r3, [r0, #0]
   dc2dc:	b113      	cbz	r3, dc2e4 <mbedtls_md_update+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
   dc2de:	695b      	ldr	r3, [r3, #20]
   dc2e0:	6840      	ldr	r0, [r0, #4]
   dc2e2:	4718      	bx	r3
}
   dc2e4:	4800      	ldr	r0, [pc, #0]	; (dc2e8 <mbedtls_md_update+0x10>)
   dc2e6:	4770      	bx	lr
   dc2e8:	ffffaf00 	.word	0xffffaf00

000dc2ec <mbedtls_md_finish>:

int mbedtls_md_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
    if( ctx == NULL || ctx->md_info == NULL )
   dc2ec:	b120      	cbz	r0, dc2f8 <mbedtls_md_finish+0xc>
   dc2ee:	6803      	ldr	r3, [r0, #0]
   dc2f0:	b113      	cbz	r3, dc2f8 <mbedtls_md_finish+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
   dc2f2:	699b      	ldr	r3, [r3, #24]
   dc2f4:	6840      	ldr	r0, [r0, #4]
   dc2f6:	4718      	bx	r3
}
   dc2f8:	4800      	ldr	r0, [pc, #0]	; (dc2fc <mbedtls_md_finish+0x10>)
   dc2fa:	4770      	bx	lr
   dc2fc:	ffffaf00 	.word	0xffffaf00

000dc300 <mbedtls_md>:

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
   dc300:	b430      	push	{r4, r5}
   dc302:	460d      	mov	r5, r1
   dc304:	4611      	mov	r1, r2
    if( md_info == NULL )
   dc306:	b128      	cbz	r0, dc314 <mbedtls_md+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
   dc308:	69c4      	ldr	r4, [r0, #28]
   dc30a:	461a      	mov	r2, r3
   dc30c:	4628      	mov	r0, r5
   dc30e:	4623      	mov	r3, r4
}
   dc310:	bc30      	pop	{r4, r5}
            unsigned char *output )
{
    if( md_info == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
   dc312:	4718      	bx	r3
}
   dc314:	4801      	ldr	r0, [pc, #4]	; (dc31c <mbedtls_md+0x1c>)
   dc316:	bc30      	pop	{r4, r5}
   dc318:	4770      	bx	lr
   dc31a:	bf00      	nop
   dc31c:	ffffaf00 	.word	0xffffaf00

000dc320 <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
   dc320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc324:	460e      	mov	r6, r1
   dc326:	b090      	sub	sp, #64	; 0x40
   dc328:	4690      	mov	r8, r2
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   dc32a:	4604      	mov	r4, r0
   dc32c:	2800      	cmp	r0, #0
   dc32e:	d050      	beq.n	dc3d2 <mbedtls_md_hmac_starts+0xb2>
   dc330:	6803      	ldr	r3, [r0, #0]
   dc332:	2b00      	cmp	r3, #0
   dc334:	d04d      	beq.n	dc3d2 <mbedtls_md_hmac_starts+0xb2>
   dc336:	6882      	ldr	r2, [r0, #8]
   dc338:	2a00      	cmp	r2, #0
   dc33a:	d04a      	beq.n	dc3d2 <mbedtls_md_hmac_starts+0xb2>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
   dc33c:	68da      	ldr	r2, [r3, #12]
   dc33e:	4542      	cmp	r2, r8
   dc340:	d219      	bcs.n	dc376 <mbedtls_md_hmac_starts+0x56>
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
   dc342:	691b      	ldr	r3, [r3, #16]
   dc344:	6840      	ldr	r0, [r0, #4]
   dc346:	4798      	blx	r3
   dc348:	4605      	mov	r5, r0
   dc34a:	2800      	cmp	r0, #0
   dc34c:	d13b      	bne.n	dc3c6 <mbedtls_md_hmac_starts+0xa6>
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
   dc34e:	6823      	ldr	r3, [r4, #0]
   dc350:	6860      	ldr	r0, [r4, #4]
   dc352:	695b      	ldr	r3, [r3, #20]
   dc354:	4642      	mov	r2, r8
   dc356:	4631      	mov	r1, r6
   dc358:	4798      	blx	r3
   dc35a:	4605      	mov	r5, r0
   dc35c:	2800      	cmp	r0, #0
   dc35e:	d132      	bne.n	dc3c6 <mbedtls_md_hmac_starts+0xa6>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
   dc360:	6823      	ldr	r3, [r4, #0]
   dc362:	6860      	ldr	r0, [r4, #4]
   dc364:	699b      	ldr	r3, [r3, #24]
   dc366:	4669      	mov	r1, sp
   dc368:	4798      	blx	r3
   dc36a:	4605      	mov	r5, r0
   dc36c:	bb58      	cbnz	r0, dc3c6 <mbedtls_md_hmac_starts+0xa6>
            goto cleanup;

        keylen = ctx->md_info->size;
   dc36e:	6823      	ldr	r3, [r4, #0]
   dc370:	f8d3 8008 	ldr.w	r8, [r3, #8]
        key = sum;
   dc374:	466e      	mov	r6, sp
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
   dc376:	6823      	ldr	r3, [r4, #0]

        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
   dc378:	68a7      	ldr	r7, [r4, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
   dc37a:	68da      	ldr	r2, [r3, #12]

    memset( ipad, 0x36, ctx->md_info->block_size );
   dc37c:	2136      	movs	r1, #54	; 0x36
   dc37e:	4638      	mov	r0, r7
        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
   dc380:	18bd      	adds	r5, r7, r2

    memset( ipad, 0x36, ctx->md_info->block_size );
   dc382:	f00a fe0a 	bl	e6f9a <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
   dc386:	6823      	ldr	r3, [r4, #0]
   dc388:	215c      	movs	r1, #92	; 0x5c
   dc38a:	68da      	ldr	r2, [r3, #12]
   dc38c:	4628      	mov	r0, r5
   dc38e:	f00a fe04 	bl	e6f9a <memset>

    for( i = 0; i < keylen; i++ )
   dc392:	2300      	movs	r3, #0
   dc394:	4598      	cmp	r8, r3
   dc396:	d009      	beq.n	dc3ac <mbedtls_md_hmac_starts+0x8c>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
   dc398:	5cf9      	ldrb	r1, [r7, r3]
   dc39a:	5cf2      	ldrb	r2, [r6, r3]
   dc39c:	404a      	eors	r2, r1
   dc39e:	54fa      	strb	r2, [r7, r3]
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
   dc3a0:	5ce9      	ldrb	r1, [r5, r3]
   dc3a2:	5cf2      	ldrb	r2, [r6, r3]
   dc3a4:	404a      	eors	r2, r1
   dc3a6:	54ea      	strb	r2, [r5, r3]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
   dc3a8:	3301      	adds	r3, #1
   dc3aa:	e7f3      	b.n	dc394 <mbedtls_md_hmac_starts+0x74>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
   dc3ac:	6823      	ldr	r3, [r4, #0]
   dc3ae:	6860      	ldr	r0, [r4, #4]
   dc3b0:	691b      	ldr	r3, [r3, #16]
   dc3b2:	4798      	blx	r3
   dc3b4:	4605      	mov	r5, r0
   dc3b6:	b930      	cbnz	r0, dc3c6 <mbedtls_md_hmac_starts+0xa6>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
   dc3b8:	6823      	ldr	r3, [r4, #0]
   dc3ba:	6860      	ldr	r0, [r4, #4]
   dc3bc:	695d      	ldr	r5, [r3, #20]
   dc3be:	68da      	ldr	r2, [r3, #12]
   dc3c0:	4639      	mov	r1, r7
   dc3c2:	47a8      	blx	r5
   dc3c4:	4605      	mov	r5, r0
                                           ctx->md_info->block_size ) ) != 0 )
        goto cleanup;

cleanup:
    mbedtls_platform_zeroize( sum, sizeof( sum ) );
   dc3c6:	4668      	mov	r0, sp
   dc3c8:	2140      	movs	r1, #64	; 0x40
   dc3ca:	f7fe f889 	bl	da4e0 <mbedtls_platform_zeroize>

    return( ret );
   dc3ce:	4628      	mov	r0, r5
   dc3d0:	e000      	b.n	dc3d4 <mbedtls_md_hmac_starts+0xb4>
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   dc3d2:	4802      	ldr	r0, [pc, #8]	; (dc3dc <mbedtls_md_hmac_starts+0xbc>)

cleanup:
    mbedtls_platform_zeroize( sum, sizeof( sum ) );

    return( ret );
}
   dc3d4:	b010      	add	sp, #64	; 0x40
   dc3d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc3da:	bf00      	nop
   dc3dc:	ffffaf00 	.word	0xffffaf00

000dc3e0 <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
   dc3e0:	b410      	push	{r4}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   dc3e2:	b140      	cbz	r0, dc3f6 <mbedtls_md_hmac_update+0x16>
   dc3e4:	6803      	ldr	r3, [r0, #0]
   dc3e6:	b133      	cbz	r3, dc3f6 <mbedtls_md_hmac_update+0x16>
   dc3e8:	6884      	ldr	r4, [r0, #8]
   dc3ea:	b124      	cbz	r4, dc3f6 <mbedtls_md_hmac_update+0x16>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
   dc3ec:	695b      	ldr	r3, [r3, #20]
   dc3ee:	6840      	ldr	r0, [r0, #4]
}
   dc3f0:	f85d 4b04 	ldr.w	r4, [sp], #4
int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
   dc3f4:	4718      	bx	r3
}
   dc3f6:	4802      	ldr	r0, [pc, #8]	; (dc400 <mbedtls_md_hmac_update+0x20>)
   dc3f8:	f85d 4b04 	ldr.w	r4, [sp], #4
   dc3fc:	4770      	bx	lr
   dc3fe:	bf00      	nop
   dc400:	ffffaf00 	.word	0xffffaf00

000dc404 <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
   dc404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dc408:	460e      	mov	r6, r1
   dc40a:	b090      	sub	sp, #64	; 0x40
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   dc40c:	4604      	mov	r4, r0
   dc40e:	b320      	cbz	r0, dc45a <mbedtls_md_hmac_finish+0x56>
   dc410:	6803      	ldr	r3, [r0, #0]
   dc412:	b313      	cbz	r3, dc45a <mbedtls_md_hmac_finish+0x56>
   dc414:	6885      	ldr	r5, [r0, #8]
   dc416:	b305      	cbz	r5, dc45a <mbedtls_md_hmac_finish+0x56>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
   dc418:	f8d3 800c 	ldr.w	r8, [r3, #12]

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
   dc41c:	6840      	ldr	r0, [r0, #4]
   dc41e:	699b      	ldr	r3, [r3, #24]
   dc420:	4669      	mov	r1, sp
   dc422:	4798      	blx	r3
   dc424:	b9d0      	cbnz	r0, dc45c <mbedtls_md_hmac_finish+0x58>
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
   dc426:	6823      	ldr	r3, [r4, #0]
   dc428:	6860      	ldr	r0, [r4, #4]
   dc42a:	691b      	ldr	r3, [r3, #16]
   dc42c:	4798      	blx	r3
   dc42e:	b9a8      	cbnz	r0, dc45c <mbedtls_md_hmac_finish+0x58>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
   dc430:	6823      	ldr	r3, [r4, #0]
   dc432:	6860      	ldr	r0, [r4, #4]
   dc434:	695f      	ldr	r7, [r3, #20]
   dc436:	68da      	ldr	r2, [r3, #12]
   dc438:	eb05 0108 	add.w	r1, r5, r8
   dc43c:	47b8      	blx	r7
   dc43e:	b968      	cbnz	r0, dc45c <mbedtls_md_hmac_finish+0x58>
                                           ctx->md_info->block_size ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
   dc440:	6823      	ldr	r3, [r4, #0]
   dc442:	6860      	ldr	r0, [r4, #4]
   dc444:	695d      	ldr	r5, [r3, #20]
   dc446:	689a      	ldr	r2, [r3, #8]
   dc448:	4669      	mov	r1, sp
   dc44a:	47a8      	blx	r5
   dc44c:	b930      	cbnz	r0, dc45c <mbedtls_md_hmac_finish+0x58>
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
   dc44e:	6823      	ldr	r3, [r4, #0]
   dc450:	6860      	ldr	r0, [r4, #4]
   dc452:	699b      	ldr	r3, [r3, #24]
   dc454:	4631      	mov	r1, r6
   dc456:	4798      	blx	r3
   dc458:	e000      	b.n	dc45c <mbedtls_md_hmac_finish+0x58>
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   dc45a:	4802      	ldr	r0, [pc, #8]	; (dc464 <mbedtls_md_hmac_finish+0x60>)
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}
   dc45c:	b010      	add	sp, #64	; 0x40
   dc45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dc462:	bf00      	nop
   dc464:	ffffaf00 	.word	0xffffaf00

000dc468 <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
   dc468:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   dc46a:	4604      	mov	r4, r0
   dc46c:	b180      	cbz	r0, dc490 <mbedtls_md_hmac_reset+0x28>
   dc46e:	6803      	ldr	r3, [r0, #0]
   dc470:	b173      	cbz	r3, dc490 <mbedtls_md_hmac_reset+0x28>
   dc472:	6885      	ldr	r5, [r0, #8]
   dc474:	b165      	cbz	r5, dc490 <mbedtls_md_hmac_reset+0x28>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
   dc476:	691b      	ldr	r3, [r3, #16]
   dc478:	6840      	ldr	r0, [r0, #4]
   dc47a:	4798      	blx	r3
   dc47c:	b948      	cbnz	r0, dc492 <mbedtls_md_hmac_reset+0x2a>
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
   dc47e:	6823      	ldr	r3, [r4, #0]
                                       ctx->md_info->block_size ) );
   dc480:	6860      	ldr	r0, [r4, #4]
   dc482:	695e      	ldr	r6, [r3, #20]
   dc484:	68da      	ldr	r2, [r3, #12]
   dc486:	4629      	mov	r1, r5
   dc488:	4633      	mov	r3, r6
}
   dc48a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
   dc48e:	4718      	bx	r3
{
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   dc490:	4800      	ldr	r0, [pc, #0]	; (dc494 <mbedtls_md_hmac_reset+0x2c>)

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
}
   dc492:	bd70      	pop	{r4, r5, r6, pc}
   dc494:	ffffaf00 	.word	0xffffaf00

000dc498 <mbedtls_md_get_size>:
    return( ctx->md_info->process_func( ctx->md_ctx, data ) );
}

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
   dc498:	b100      	cbz	r0, dc49c <mbedtls_md_get_size+0x4>
        return( 0 );

    return md_info->size;
   dc49a:	7a00      	ldrb	r0, [r0, #8]
}
   dc49c:	4770      	bx	lr

000dc49e <mbedtls_md_get_name>:
    return md_info->type;
}

const char *mbedtls_md_get_name( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
   dc49e:	b100      	cbz	r0, dc4a2 <mbedtls_md_get_name+0x4>
        return( NULL );

    return md_info->name;
   dc4a0:	6840      	ldr	r0, [r0, #4]
}
   dc4a2:	4770      	bx	lr

000dc4a4 <_ZL5add32PmmPa>:
/*
 * Helpers for addition and subtraction of chunks, with signed carry.
 */
static inline void add32( uint32_t *dst, uint32_t src, signed char *carry )
{
    *dst += src;
   dc4a4:	6803      	ldr	r3, [r0, #0]
   dc4a6:	440b      	add	r3, r1
   dc4a8:	6003      	str	r3, [r0, #0]
    *carry += ( *dst < src );
   dc4aa:	7810      	ldrb	r0, [r2, #0]
   dc4ac:	4299      	cmp	r1, r3
   dc4ae:	bf94      	ite	ls
   dc4b0:	4603      	movls	r3, r0
   dc4b2:	1c43      	addhi	r3, r0, #1
   dc4b4:	7013      	strb	r3, [r2, #0]
   dc4b6:	4770      	bx	lr

000dc4b8 <_ZL5sub32PmmPa>:
}

static inline void sub32( uint32_t *dst, uint32_t src, signed char *carry )
{
    *carry -= ( *dst < src );
   dc4b8:	6803      	ldr	r3, [r0, #0]
    *dst += src;
    *carry += ( *dst < src );
}

static inline void sub32( uint32_t *dst, uint32_t src, signed char *carry )
{
   dc4ba:	b510      	push	{r4, lr}
    *carry -= ( *dst < src );
   dc4bc:	7814      	ldrb	r4, [r2, #0]
   dc4be:	428b      	cmp	r3, r1
   dc4c0:	bf38      	it	cc
   dc4c2:	3c01      	subcc	r4, #1
   dc4c4:	7014      	strb	r4, [r2, #0]
    *dst -= src;
   dc4c6:	6803      	ldr	r3, [r0, #0]
   dc4c8:	1a5b      	subs	r3, r3, r1
   dc4ca:	6003      	str	r3, [r0, #0]
   dc4cc:	bd10      	pop	{r4, pc}

000dc4ce <_ZL12ecp_mod_p256P11mbedtls_mpi>:
#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
/*
 * Fast quasi-reduction modulo p256 (FIPS 186-3 D.2.3)
 */
static int ecp_mod_p256( mbedtls_mpi *N )
{
   dc4ce:	b530      	push	{r4, r5, lr}
   dc4d0:	b08f      	sub	sp, #60	; 0x3c
    INIT( 256 );
   dc4d2:	2301      	movs	r3, #1
   dc4d4:	2100      	movs	r1, #0
#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
/*
 * Fast quasi-reduction modulo p256 (FIPS 186-3 D.2.3)
 */
static int ecp_mod_p256( mbedtls_mpi *N )
{
   dc4d6:	4604      	mov	r4, r0
    INIT( 256 );
   dc4d8:	9302      	str	r3, [sp, #8]
   dc4da:	a805      	add	r0, sp, #20
   dc4dc:	2309      	movs	r3, #9
   dc4de:	2224      	movs	r2, #36	; 0x24
   dc4e0:	f88d 1003 	strb.w	r1, [sp, #3]
   dc4e4:	9303      	str	r3, [sp, #12]
   dc4e6:	9004      	str	r0, [sp, #16]
   dc4e8:	f00a fd57 	bl	e6f9a <memset>
   dc4ec:	2110      	movs	r1, #16
   dc4ee:	4620      	mov	r0, r4
   dc4f0:	f003 fde7 	bl	e00c2 <mbedtls_mpi_grow>
   dc4f4:	4605      	mov	r5, r0
   dc4f6:	2800      	cmp	r0, #0
   dc4f8:	f040 824d 	bne.w	dc996 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x4c8>
   dc4fc:	68a3      	ldr	r3, [r4, #8]
   dc4fe:	681a      	ldr	r2, [r3, #0]

    ADD(  8 ); ADD(  9 );
   dc500:	6a19      	ldr	r1, [r3, #32]
/*
 * Fast quasi-reduction modulo p256 (FIPS 186-3 D.2.3)
 */
static int ecp_mod_p256( mbedtls_mpi *N )
{
    INIT( 256 );
   dc502:	9201      	str	r2, [sp, #4]

    ADD(  8 ); ADD(  9 );
   dc504:	a801      	add	r0, sp, #4
   dc506:	f10d 0203 	add.w	r2, sp, #3
   dc50a:	f7ff ffcb 	bl	dc4a4 <_ZL5add32PmmPa>
   dc50e:	68a3      	ldr	r3, [r4, #8]
   dc510:	f10d 0203 	add.w	r2, sp, #3
   dc514:	6a59      	ldr	r1, [r3, #36]	; 0x24
   dc516:	a801      	add	r0, sp, #4
   dc518:	f7ff ffc4 	bl	dc4a4 <_ZL5add32PmmPa>
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
   dc51c:	68a3      	ldr	r3, [r4, #8]
   dc51e:	f10d 0203 	add.w	r2, sp, #3
   dc522:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   dc524:	a801      	add	r0, sp, #4
   dc526:	f7ff ffc7 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc52a:	68a3      	ldr	r3, [r4, #8]
   dc52c:	f10d 0203 	add.w	r2, sp, #3
   dc530:	6b19      	ldr	r1, [r3, #48]	; 0x30
   dc532:	a801      	add	r0, sp, #4
   dc534:	f7ff ffc0 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc538:	68a3      	ldr	r3, [r4, #8]
   dc53a:	f10d 0203 	add.w	r2, sp, #3
   dc53e:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dc540:	a801      	add	r0, sp, #4
   dc542:	f7ff ffb9 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc546:	68a3      	ldr	r3, [r4, #8]
   dc548:	f10d 0203 	add.w	r2, sp, #3
   dc54c:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dc54e:	a801      	add	r0, sp, #4
   dc550:	f7ff ffb2 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc554:	68a3      	ldr	r3, [r4, #8]
   dc556:	9a01      	ldr	r2, [sp, #4]
   dc558:	601a      	str	r2, [r3, #0]
   dc55a:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   dc55e:	68a3      	ldr	r3, [r4, #8]
   dc560:	f88d 5003 	strb.w	r5, [sp, #3]
   dc564:	685b      	ldr	r3, [r3, #4]
   dc566:	9301      	str	r3, [sp, #4]
   dc568:	2900      	cmp	r1, #0
   dc56a:	f10d 0203 	add.w	r2, sp, #3
   dc56e:	da04      	bge.n	dc57a <_ZL12ecp_mod_p256P11mbedtls_mpi+0xac>
   dc570:	4249      	negs	r1, r1
   dc572:	a801      	add	r0, sp, #4
   dc574:	f7ff ffa0 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc578:	e002      	b.n	dc580 <_ZL12ecp_mod_p256P11mbedtls_mpi+0xb2>
   dc57a:	a801      	add	r0, sp, #4
   dc57c:	f7ff ff92 	bl	dc4a4 <_ZL5add32PmmPa>

    ADD(  9 ); ADD( 10 );
   dc580:	68a3      	ldr	r3, [r4, #8]
   dc582:	f10d 0203 	add.w	r2, sp, #3
   dc586:	6a59      	ldr	r1, [r3, #36]	; 0x24
   dc588:	a801      	add	r0, sp, #4
   dc58a:	f7ff ff8b 	bl	dc4a4 <_ZL5add32PmmPa>
   dc58e:	68a3      	ldr	r3, [r4, #8]
   dc590:	f10d 0203 	add.w	r2, sp, #3
   dc594:	6a99      	ldr	r1, [r3, #40]	; 0x28
   dc596:	a801      	add	r0, sp, #4
   dc598:	f7ff ff84 	bl	dc4a4 <_ZL5add32PmmPa>
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
   dc59c:	68a3      	ldr	r3, [r4, #8]
   dc59e:	f10d 0203 	add.w	r2, sp, #3
   dc5a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
   dc5a4:	a801      	add	r0, sp, #4
   dc5a6:	f7ff ff87 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc5aa:	68a3      	ldr	r3, [r4, #8]
   dc5ac:	f10d 0203 	add.w	r2, sp, #3
   dc5b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dc5b2:	a801      	add	r0, sp, #4
   dc5b4:	f7ff ff80 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc5b8:	68a3      	ldr	r3, [r4, #8]
   dc5ba:	f10d 0203 	add.w	r2, sp, #3
   dc5be:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dc5c0:	a801      	add	r0, sp, #4
   dc5c2:	f7ff ff79 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc5c6:	68a3      	ldr	r3, [r4, #8]
   dc5c8:	f10d 0203 	add.w	r2, sp, #3
   dc5cc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dc5ce:	a801      	add	r0, sp, #4
   dc5d0:	f7ff ff72 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc5d4:	68a3      	ldr	r3, [r4, #8]
   dc5d6:	9a01      	ldr	r2, [sp, #4]
   dc5d8:	605a      	str	r2, [r3, #4]
   dc5da:	68a3      	ldr	r3, [r4, #8]
   dc5dc:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   dc5e0:	689b      	ldr	r3, [r3, #8]
   dc5e2:	9301      	str	r3, [sp, #4]
   dc5e4:	2300      	movs	r3, #0
   dc5e6:	4299      	cmp	r1, r3
   dc5e8:	f88d 3003 	strb.w	r3, [sp, #3]
   dc5ec:	f10d 0203 	add.w	r2, sp, #3
   dc5f0:	da04      	bge.n	dc5fc <_ZL12ecp_mod_p256P11mbedtls_mpi+0x12e>
   dc5f2:	4249      	negs	r1, r1
   dc5f4:	a801      	add	r0, sp, #4
   dc5f6:	f7ff ff5f 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc5fa:	e002      	b.n	dc602 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x134>
   dc5fc:	a801      	add	r0, sp, #4
   dc5fe:	f7ff ff51 	bl	dc4a4 <_ZL5add32PmmPa>

    ADD( 10 ); ADD( 11 );
   dc602:	68a3      	ldr	r3, [r4, #8]
   dc604:	f10d 0203 	add.w	r2, sp, #3
   dc608:	6a99      	ldr	r1, [r3, #40]	; 0x28
   dc60a:	a801      	add	r0, sp, #4
   dc60c:	f7ff ff4a 	bl	dc4a4 <_ZL5add32PmmPa>
   dc610:	68a3      	ldr	r3, [r4, #8]
   dc612:	f10d 0203 	add.w	r2, sp, #3
   dc616:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   dc618:	a801      	add	r0, sp, #4
   dc61a:	f7ff ff43 	bl	dc4a4 <_ZL5add32PmmPa>
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
   dc61e:	68a3      	ldr	r3, [r4, #8]
   dc620:	f10d 0203 	add.w	r2, sp, #3
   dc624:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dc626:	a801      	add	r0, sp, #4
   dc628:	f7ff ff46 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc62c:	68a3      	ldr	r3, [r4, #8]
   dc62e:	f10d 0203 	add.w	r2, sp, #3
   dc632:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dc634:	a801      	add	r0, sp, #4
   dc636:	f7ff ff3f 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc63a:	68a3      	ldr	r3, [r4, #8]
   dc63c:	f10d 0203 	add.w	r2, sp, #3
   dc640:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dc642:	a801      	add	r0, sp, #4
   dc644:	f7ff ff38 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc648:	68a3      	ldr	r3, [r4, #8]
   dc64a:	9a01      	ldr	r2, [sp, #4]
   dc64c:	609a      	str	r2, [r3, #8]
   dc64e:	68a3      	ldr	r3, [r4, #8]
   dc650:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   dc654:	68db      	ldr	r3, [r3, #12]
   dc656:	9301      	str	r3, [sp, #4]
   dc658:	2300      	movs	r3, #0
   dc65a:	4299      	cmp	r1, r3
   dc65c:	f88d 3003 	strb.w	r3, [sp, #3]
   dc660:	f10d 0203 	add.w	r2, sp, #3
   dc664:	da04      	bge.n	dc670 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x1a2>
   dc666:	4249      	negs	r1, r1
   dc668:	a801      	add	r0, sp, #4
   dc66a:	f7ff ff25 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc66e:	e002      	b.n	dc676 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x1a8>
   dc670:	a801      	add	r0, sp, #4
   dc672:	f7ff ff17 	bl	dc4a4 <_ZL5add32PmmPa>

    ADD( 11 ); ADD( 11 ); ADD( 12 ); ADD( 12 ); ADD( 13 );
   dc676:	68a3      	ldr	r3, [r4, #8]
   dc678:	f10d 0203 	add.w	r2, sp, #3
   dc67c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   dc67e:	a801      	add	r0, sp, #4
   dc680:	f7ff ff10 	bl	dc4a4 <_ZL5add32PmmPa>
   dc684:	68a3      	ldr	r3, [r4, #8]
   dc686:	f10d 0203 	add.w	r2, sp, #3
   dc68a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   dc68c:	a801      	add	r0, sp, #4
   dc68e:	f7ff ff09 	bl	dc4a4 <_ZL5add32PmmPa>
   dc692:	68a3      	ldr	r3, [r4, #8]
   dc694:	f10d 0203 	add.w	r2, sp, #3
   dc698:	6b19      	ldr	r1, [r3, #48]	; 0x30
   dc69a:	a801      	add	r0, sp, #4
   dc69c:	f7ff ff02 	bl	dc4a4 <_ZL5add32PmmPa>
   dc6a0:	68a3      	ldr	r3, [r4, #8]
   dc6a2:	f10d 0203 	add.w	r2, sp, #3
   dc6a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
   dc6a8:	a801      	add	r0, sp, #4
   dc6aa:	f7ff fefb 	bl	dc4a4 <_ZL5add32PmmPa>
   dc6ae:	68a3      	ldr	r3, [r4, #8]
   dc6b0:	f10d 0203 	add.w	r2, sp, #3
   dc6b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dc6b6:	a801      	add	r0, sp, #4
   dc6b8:	f7ff fef4 	bl	dc4a4 <_ZL5add32PmmPa>
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
   dc6bc:	68a3      	ldr	r3, [r4, #8]
   dc6be:	f10d 0203 	add.w	r2, sp, #3
   dc6c2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dc6c4:	a801      	add	r0, sp, #4
   dc6c6:	f7ff fef7 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc6ca:	68a3      	ldr	r3, [r4, #8]
   dc6cc:	f10d 0203 	add.w	r2, sp, #3
   dc6d0:	6a19      	ldr	r1, [r3, #32]
   dc6d2:	a801      	add	r0, sp, #4
   dc6d4:	f7ff fef0 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc6d8:	68a3      	ldr	r3, [r4, #8]
   dc6da:	f10d 0203 	add.w	r2, sp, #3
   dc6de:	6a59      	ldr	r1, [r3, #36]	; 0x24
   dc6e0:	a801      	add	r0, sp, #4
   dc6e2:	f7ff fee9 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc6e6:	68a3      	ldr	r3, [r4, #8]
   dc6e8:	9a01      	ldr	r2, [sp, #4]
   dc6ea:	60da      	str	r2, [r3, #12]
   dc6ec:	68a3      	ldr	r3, [r4, #8]
   dc6ee:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   dc6f2:	691b      	ldr	r3, [r3, #16]
   dc6f4:	9301      	str	r3, [sp, #4]
   dc6f6:	2300      	movs	r3, #0
   dc6f8:	4299      	cmp	r1, r3
   dc6fa:	f88d 3003 	strb.w	r3, [sp, #3]
   dc6fe:	f10d 0203 	add.w	r2, sp, #3
   dc702:	da04      	bge.n	dc70e <_ZL12ecp_mod_p256P11mbedtls_mpi+0x240>
   dc704:	4249      	negs	r1, r1
   dc706:	a801      	add	r0, sp, #4
   dc708:	f7ff fed6 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc70c:	e002      	b.n	dc714 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x246>
   dc70e:	a801      	add	r0, sp, #4
   dc710:	f7ff fec8 	bl	dc4a4 <_ZL5add32PmmPa>

    ADD( 12 ); ADD( 12 ); ADD( 13 ); ADD( 13 ); ADD( 14 );
   dc714:	68a3      	ldr	r3, [r4, #8]
   dc716:	f10d 0203 	add.w	r2, sp, #3
   dc71a:	6b19      	ldr	r1, [r3, #48]	; 0x30
   dc71c:	a801      	add	r0, sp, #4
   dc71e:	f7ff fec1 	bl	dc4a4 <_ZL5add32PmmPa>
   dc722:	68a3      	ldr	r3, [r4, #8]
   dc724:	f10d 0203 	add.w	r2, sp, #3
   dc728:	6b19      	ldr	r1, [r3, #48]	; 0x30
   dc72a:	a801      	add	r0, sp, #4
   dc72c:	f7ff feba 	bl	dc4a4 <_ZL5add32PmmPa>
   dc730:	68a3      	ldr	r3, [r4, #8]
   dc732:	f10d 0203 	add.w	r2, sp, #3
   dc736:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dc738:	a801      	add	r0, sp, #4
   dc73a:	f7ff feb3 	bl	dc4a4 <_ZL5add32PmmPa>
   dc73e:	68a3      	ldr	r3, [r4, #8]
   dc740:	f10d 0203 	add.w	r2, sp, #3
   dc744:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dc746:	a801      	add	r0, sp, #4
   dc748:	f7ff feac 	bl	dc4a4 <_ZL5add32PmmPa>
   dc74c:	68a3      	ldr	r3, [r4, #8]
   dc74e:	f10d 0203 	add.w	r2, sp, #3
   dc752:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dc754:	a801      	add	r0, sp, #4
   dc756:	f7ff fea5 	bl	dc4a4 <_ZL5add32PmmPa>
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
   dc75a:	68a3      	ldr	r3, [r4, #8]
   dc75c:	f10d 0203 	add.w	r2, sp, #3
   dc760:	6a59      	ldr	r1, [r3, #36]	; 0x24
   dc762:	a801      	add	r0, sp, #4
   dc764:	f7ff fea8 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc768:	68a3      	ldr	r3, [r4, #8]
   dc76a:	f10d 0203 	add.w	r2, sp, #3
   dc76e:	6a99      	ldr	r1, [r3, #40]	; 0x28
   dc770:	a801      	add	r0, sp, #4
   dc772:	f7ff fea1 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc776:	68a3      	ldr	r3, [r4, #8]
   dc778:	9a01      	ldr	r2, [sp, #4]
   dc77a:	611a      	str	r2, [r3, #16]
   dc77c:	68a3      	ldr	r3, [r4, #8]
   dc77e:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   dc782:	695b      	ldr	r3, [r3, #20]
   dc784:	9301      	str	r3, [sp, #4]
   dc786:	2300      	movs	r3, #0
   dc788:	4299      	cmp	r1, r3
   dc78a:	f88d 3003 	strb.w	r3, [sp, #3]
   dc78e:	f10d 0203 	add.w	r2, sp, #3
   dc792:	da04      	bge.n	dc79e <_ZL12ecp_mod_p256P11mbedtls_mpi+0x2d0>
   dc794:	4249      	negs	r1, r1
   dc796:	a801      	add	r0, sp, #4
   dc798:	f7ff fe8e 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc79c:	e002      	b.n	dc7a4 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x2d6>
   dc79e:	a801      	add	r0, sp, #4
   dc7a0:	f7ff fe80 	bl	dc4a4 <_ZL5add32PmmPa>

    ADD( 13 ); ADD( 13 ); ADD( 14 ); ADD( 14 ); ADD( 15 );
   dc7a4:	68a3      	ldr	r3, [r4, #8]
   dc7a6:	f10d 0203 	add.w	r2, sp, #3
   dc7aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dc7ac:	a801      	add	r0, sp, #4
   dc7ae:	f7ff fe79 	bl	dc4a4 <_ZL5add32PmmPa>
   dc7b2:	68a3      	ldr	r3, [r4, #8]
   dc7b4:	f10d 0203 	add.w	r2, sp, #3
   dc7b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dc7ba:	a801      	add	r0, sp, #4
   dc7bc:	f7ff fe72 	bl	dc4a4 <_ZL5add32PmmPa>
   dc7c0:	68a3      	ldr	r3, [r4, #8]
   dc7c2:	f10d 0203 	add.w	r2, sp, #3
   dc7c6:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dc7c8:	a801      	add	r0, sp, #4
   dc7ca:	f7ff fe6b 	bl	dc4a4 <_ZL5add32PmmPa>
   dc7ce:	68a3      	ldr	r3, [r4, #8]
   dc7d0:	f10d 0203 	add.w	r2, sp, #3
   dc7d4:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dc7d6:	a801      	add	r0, sp, #4
   dc7d8:	f7ff fe64 	bl	dc4a4 <_ZL5add32PmmPa>
   dc7dc:	68a3      	ldr	r3, [r4, #8]
   dc7de:	f10d 0203 	add.w	r2, sp, #3
   dc7e2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dc7e4:	a801      	add	r0, sp, #4
   dc7e6:	f7ff fe5d 	bl	dc4a4 <_ZL5add32PmmPa>
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
   dc7ea:	68a3      	ldr	r3, [r4, #8]
   dc7ec:	f10d 0203 	add.w	r2, sp, #3
   dc7f0:	6a99      	ldr	r1, [r3, #40]	; 0x28
   dc7f2:	a801      	add	r0, sp, #4
   dc7f4:	f7ff fe60 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc7f8:	68a3      	ldr	r3, [r4, #8]
   dc7fa:	f10d 0203 	add.w	r2, sp, #3
   dc7fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   dc800:	a801      	add	r0, sp, #4
   dc802:	f7ff fe59 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc806:	68a3      	ldr	r3, [r4, #8]
   dc808:	9a01      	ldr	r2, [sp, #4]
   dc80a:	615a      	str	r2, [r3, #20]
   dc80c:	68a3      	ldr	r3, [r4, #8]
   dc80e:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   dc812:	699b      	ldr	r3, [r3, #24]
   dc814:	9301      	str	r3, [sp, #4]
   dc816:	2300      	movs	r3, #0
   dc818:	4299      	cmp	r1, r3
   dc81a:	f88d 3003 	strb.w	r3, [sp, #3]
   dc81e:	f10d 0203 	add.w	r2, sp, #3
   dc822:	da04      	bge.n	dc82e <_ZL12ecp_mod_p256P11mbedtls_mpi+0x360>
   dc824:	4249      	negs	r1, r1
   dc826:	a801      	add	r0, sp, #4
   dc828:	f7ff fe46 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc82c:	e002      	b.n	dc834 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x366>
   dc82e:	a801      	add	r0, sp, #4
   dc830:	f7ff fe38 	bl	dc4a4 <_ZL5add32PmmPa>

    ADD( 14 ); ADD( 14 ); ADD( 15 ); ADD( 15 ); ADD( 14 ); ADD( 13 );
   dc834:	68a3      	ldr	r3, [r4, #8]
   dc836:	f10d 0203 	add.w	r2, sp, #3
   dc83a:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dc83c:	a801      	add	r0, sp, #4
   dc83e:	f7ff fe31 	bl	dc4a4 <_ZL5add32PmmPa>
   dc842:	68a3      	ldr	r3, [r4, #8]
   dc844:	f10d 0203 	add.w	r2, sp, #3
   dc848:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dc84a:	a801      	add	r0, sp, #4
   dc84c:	f7ff fe2a 	bl	dc4a4 <_ZL5add32PmmPa>
   dc850:	68a3      	ldr	r3, [r4, #8]
   dc852:	f10d 0203 	add.w	r2, sp, #3
   dc856:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dc858:	a801      	add	r0, sp, #4
   dc85a:	f7ff fe23 	bl	dc4a4 <_ZL5add32PmmPa>
   dc85e:	68a3      	ldr	r3, [r4, #8]
   dc860:	f10d 0203 	add.w	r2, sp, #3
   dc864:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dc866:	a801      	add	r0, sp, #4
   dc868:	f7ff fe1c 	bl	dc4a4 <_ZL5add32PmmPa>
   dc86c:	68a3      	ldr	r3, [r4, #8]
   dc86e:	f10d 0203 	add.w	r2, sp, #3
   dc872:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dc874:	a801      	add	r0, sp, #4
   dc876:	f7ff fe15 	bl	dc4a4 <_ZL5add32PmmPa>
   dc87a:	68a3      	ldr	r3, [r4, #8]
   dc87c:	f10d 0203 	add.w	r2, sp, #3
   dc880:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dc882:	a801      	add	r0, sp, #4
   dc884:	f7ff fe0e 	bl	dc4a4 <_ZL5add32PmmPa>
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
   dc888:	68a3      	ldr	r3, [r4, #8]
   dc88a:	f10d 0203 	add.w	r2, sp, #3
   dc88e:	6a19      	ldr	r1, [r3, #32]
   dc890:	a801      	add	r0, sp, #4
   dc892:	f7ff fe11 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc896:	68a3      	ldr	r3, [r4, #8]
   dc898:	f10d 0203 	add.w	r2, sp, #3
   dc89c:	6a59      	ldr	r1, [r3, #36]	; 0x24
   dc89e:	a801      	add	r0, sp, #4
   dc8a0:	f7ff fe0a 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc8a4:	68a3      	ldr	r3, [r4, #8]
   dc8a6:	9a01      	ldr	r2, [sp, #4]
   dc8a8:	619a      	str	r2, [r3, #24]
   dc8aa:	68a3      	ldr	r3, [r4, #8]
   dc8ac:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   dc8b0:	69db      	ldr	r3, [r3, #28]
   dc8b2:	9301      	str	r3, [sp, #4]
   dc8b4:	2300      	movs	r3, #0
   dc8b6:	4299      	cmp	r1, r3
   dc8b8:	f88d 3003 	strb.w	r3, [sp, #3]
   dc8bc:	f10d 0203 	add.w	r2, sp, #3
   dc8c0:	da04      	bge.n	dc8cc <_ZL12ecp_mod_p256P11mbedtls_mpi+0x3fe>
   dc8c2:	4249      	negs	r1, r1
   dc8c4:	a801      	add	r0, sp, #4
   dc8c6:	f7ff fdf7 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc8ca:	e002      	b.n	dc8d2 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x404>
   dc8cc:	a801      	add	r0, sp, #4
   dc8ce:	f7ff fde9 	bl	dc4a4 <_ZL5add32PmmPa>

    ADD( 15 ); ADD( 15 ); ADD( 15 ); ADD( 8 );
   dc8d2:	68a3      	ldr	r3, [r4, #8]
   dc8d4:	f10d 0203 	add.w	r2, sp, #3
   dc8d8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dc8da:	a801      	add	r0, sp, #4
   dc8dc:	f7ff fde2 	bl	dc4a4 <_ZL5add32PmmPa>
   dc8e0:	68a3      	ldr	r3, [r4, #8]
   dc8e2:	f10d 0203 	add.w	r2, sp, #3
   dc8e6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dc8e8:	a801      	add	r0, sp, #4
   dc8ea:	f7ff fddb 	bl	dc4a4 <_ZL5add32PmmPa>
   dc8ee:	68a3      	ldr	r3, [r4, #8]
   dc8f0:	f10d 0203 	add.w	r2, sp, #3
   dc8f4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dc8f6:	a801      	add	r0, sp, #4
   dc8f8:	f7ff fdd4 	bl	dc4a4 <_ZL5add32PmmPa>
   dc8fc:	68a3      	ldr	r3, [r4, #8]
   dc8fe:	f10d 0203 	add.w	r2, sp, #3
   dc902:	6a19      	ldr	r1, [r3, #32]
   dc904:	a801      	add	r0, sp, #4
   dc906:	f7ff fdcd 	bl	dc4a4 <_ZL5add32PmmPa>
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
   dc90a:	68a3      	ldr	r3, [r4, #8]
   dc90c:	f10d 0203 	add.w	r2, sp, #3
   dc910:	6a99      	ldr	r1, [r3, #40]	; 0x28
   dc912:	a801      	add	r0, sp, #4
   dc914:	f7ff fdd0 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc918:	68a3      	ldr	r3, [r4, #8]
   dc91a:	f10d 0203 	add.w	r2, sp, #3
   dc91e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   dc920:	a801      	add	r0, sp, #4
   dc922:	f7ff fdc9 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc926:	68a3      	ldr	r3, [r4, #8]
   dc928:	f10d 0203 	add.w	r2, sp, #3
   dc92c:	6b19      	ldr	r1, [r3, #48]	; 0x30
   dc92e:	a801      	add	r0, sp, #4
   dc930:	f7ff fdc2 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc934:	68a3      	ldr	r3, [r4, #8]
   dc936:	f10d 0203 	add.w	r2, sp, #3
   dc93a:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dc93c:	a801      	add	r0, sp, #4
   dc93e:	f7ff fdbb 	bl	dc4b8 <_ZL5sub32PmmPa>
   dc942:	68a3      	ldr	r3, [r4, #8]
   dc944:	9a01      	ldr	r2, [sp, #4]
   dc946:	61da      	str	r2, [r3, #28]
   dc948:	f99d 3003 	ldrsb.w	r3, [sp, #3]
   dc94c:	68a2      	ldr	r2, [r4, #8]
   dc94e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   dc952:	6213      	str	r3, [r2, #32]
   dc954:	2300      	movs	r3, #0
   dc956:	9301      	str	r3, [sp, #4]
   dc958:	2308      	movs	r3, #8
   dc95a:	6862      	ldr	r2, [r4, #4]
   dc95c:	3301      	adds	r3, #1
   dc95e:	4293      	cmp	r3, r2
   dc960:	d204      	bcs.n	dc96c <_ZL12ecp_mod_p256P11mbedtls_mpi+0x49e>
   dc962:	68a2      	ldr	r2, [r4, #8]
   dc964:	9901      	ldr	r1, [sp, #4]
   dc966:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   dc96a:	e7f6      	b.n	dc95a <_ZL12ecp_mod_p256P11mbedtls_mpi+0x48c>
   dc96c:	f99d 2003 	ldrsb.w	r2, [sp, #3]
   dc970:	2a00      	cmp	r2, #0
   dc972:	da10      	bge.n	dc996 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x4c8>
#else
    if( bits == 224 )
        C->p[ C->n - 1 ] = ((mbedtls_mpi_uint) -c) << 32;
    else
#endif
        C->p[ C->n - 1 ] = (mbedtls_mpi_uint) -c;
   dc974:	9b03      	ldr	r3, [sp, #12]
   dc976:	9904      	ldr	r1, [sp, #16]
   dc978:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   dc97c:	3b01      	subs	r3, #1
   dc97e:	4252      	negs	r2, r2
   dc980:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* N = - ( C - N ) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, C, N ) );
   dc984:	4620      	mov	r0, r4
   dc986:	4622      	mov	r2, r4
   dc988:	a902      	add	r1, sp, #8
   dc98a:	f003 ff1e 	bl	e07ca <mbedtls_mpi_sub_abs>
   dc98e:	b910      	cbnz	r0, dc996 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x4c8>
    N->s = -1;
   dc990:	f04f 33ff 	mov.w	r3, #4294967295
   dc994:	6023      	str	r3, [r4, #0]
    ADD( 15 ); ADD( 15 ); ADD( 15 ); ADD( 8 );
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7

cleanup:
    return( ret );
}
   dc996:	4628      	mov	r0, r5
   dc998:	b00f      	add	sp, #60	; 0x3c
   dc99a:	bd30      	pop	{r4, r5, pc}

000dc99c <mbedtls_ecp_group_load>:

/*
 * Set a group using well-known domain parameters
 */
int mbedtls_ecp_group_load( mbedtls_ecp_group *grp, mbedtls_ecp_group_id id )
{
   dc99c:	b538      	push	{r3, r4, r5, lr}
   dc99e:	460d      	mov	r5, r1
   dc9a0:	4604      	mov	r4, r0
    ECP_VALIDATE_RET( grp != NULL );
    mbedtls_ecp_group_free( grp );
   dc9a2:	f7fb fbfe 	bl	d81a2 <mbedtls_ecp_group_free>

    grp->id = id;

    switch( id )
   dc9a6:	2d03      	cmp	r5, #3
int mbedtls_ecp_group_load( mbedtls_ecp_group *grp, mbedtls_ecp_group_id id )
{
    ECP_VALIDATE_RET( grp != NULL );
    mbedtls_ecp_group_free( grp );

    grp->id = id;
   dc9a8:	7025      	strb	r5, [r4, #0]

    switch( id )
   dc9aa:	d127      	bne.n	dc9fc <mbedtls_ecp_group_load+0x60>
            return( LOAD_GROUP( secp224r1 ) );
#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP256R1:
            NIST_MODP( p256 );
   dc9ac:	4b16      	ldr	r3, [pc, #88]	; (dca08 <mbedtls_ecp_group_load+0x6c>)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
    X->n = len / sizeof( mbedtls_mpi_uint );
    X->p = (mbedtls_mpi_uint *) p;
   dc9ae:	4a17      	ldr	r2, [pc, #92]	; (dca0c <mbedtls_ecp_group_load+0x70>)
            return( LOAD_GROUP( secp224r1 ) );
#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP256R1:
            NIST_MODP( p256 );
   dc9b0:	6663      	str	r3, [r4, #100]	; 0x64
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
    X->n = len / sizeof( mbedtls_mpi_uint );
    X->p = (mbedtls_mpi_uint *) p;
   dc9b2:	60e2      	str	r2, [r4, #12]
 * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
    X->n = len / sizeof( mbedtls_mpi_uint );
   dc9b4:	2308      	movs	r3, #8
    X->p = (mbedtls_mpi_uint *) p;
   dc9b6:	4a16      	ldr	r2, [pc, #88]	; (dca10 <mbedtls_ecp_group_load+0x74>)
 * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
    X->n = len / sizeof( mbedtls_mpi_uint );
   dc9b8:	60a3      	str	r3, [r4, #8]
   dc9ba:	6223      	str	r3, [r4, #32]
    X->p = (mbedtls_mpi_uint *) p;
   dc9bc:	6262      	str	r2, [r4, #36]	; 0x24
 * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
    X->n = len / sizeof( mbedtls_mpi_uint );
   dc9be:	6523      	str	r3, [r4, #80]	; 0x50
   dc9c0:	62e3      	str	r3, [r4, #44]	; 0x2c
   dc9c2:	63a3      	str	r3, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
   dc9c4:	4a13      	ldr	r2, [pc, #76]	; (dca14 <mbedtls_ecp_group_load+0x78>)
   dc9c6:	4b14      	ldr	r3, [pc, #80]	; (dca18 <mbedtls_ecp_group_load+0x7c>)
   dc9c8:	6562      	str	r2, [r4, #84]	; 0x54
 * Create an MPI from embedded constants
 * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
   dc9ca:	2501      	movs	r5, #1
    X->n = len / sizeof( mbedtls_mpi_uint );
    X->p = (mbedtls_mpi_uint *) p;
   dc9cc:	4a13      	ldr	r2, [pc, #76]	; (dca1c <mbedtls_ecp_group_load+0x80>)
   dc9ce:	63e3      	str	r3, [r4, #60]	; 0x3c
static inline void ecp_mpi_set1( mbedtls_mpi *X )
{
    static mbedtls_mpi_uint one[] = { 1 };
    X->s = 1;
    X->n = 1;
    X->p = one;
   dc9d0:	4b13      	ldr	r3, [pc, #76]	; (dca20 <mbedtls_ecp_group_load+0x84>)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
    X->n = len / sizeof( mbedtls_mpi_uint );
    X->p = (mbedtls_mpi_uint *) p;
   dc9d2:	6322      	str	r2, [r4, #48]	; 0x30
static inline void ecp_mpi_set1( mbedtls_mpi *X )
{
    static mbedtls_mpi_uint one[] = { 1 };
    X->s = 1;
    X->n = 1;
    X->p = one;
   dc9d4:	64a3      	str	r3, [r4, #72]	; 0x48
 * Create an MPI from embedded constants
 * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
   dc9d6:	6065      	str	r5, [r4, #4]
   dc9d8:	61e5      	str	r5, [r4, #28]
   dc9da:	64e5      	str	r5, [r4, #76]	; 0x4c
   dc9dc:	62a5      	str	r5, [r4, #40]	; 0x28
   dc9de:	6365      	str	r5, [r4, #52]	; 0x34
 * Set an MPI to static value 1
 */
static inline void ecp_mpi_set1( mbedtls_mpi *X )
{
    static mbedtls_mpi_uint one[] = { 1 };
    X->s = 1;
   dc9e0:	6425      	str	r5, [r4, #64]	; 0x40
    X->n = 1;
   dc9e2:	6465      	str	r5, [r4, #68]	; 0x44

    ecp_mpi_load( &grp->G.X, gx, gxlen );
    ecp_mpi_load( &grp->G.Y, gy, gylen );
    ecp_mpi_set1( &grp->G.Z );

    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
   dc9e4:	1d20      	adds	r0, r4, #4
   dc9e6:	f003 fc7b 	bl	e02e0 <mbedtls_mpi_bitlen>
   dc9ea:	65a0      	str	r0, [r4, #88]	; 0x58
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
   dc9ec:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   dc9f0:	f003 fc76 	bl	e02e0 <mbedtls_mpi_bitlen>

    grp->h = 1;
   dc9f4:	6625      	str	r5, [r4, #96]	; 0x60
    ecp_mpi_load( &grp->G.X, gx, gxlen );
    ecp_mpi_load( &grp->G.Y, gy, gylen );
    ecp_mpi_set1( &grp->G.Z );

    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
   dc9f6:	65e0      	str	r0, [r4, #92]	; 0x5c
#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP256R1:
            NIST_MODP( p256 );
            return( LOAD_GROUP( secp256r1 ) );
   dc9f8:	2000      	movs	r0, #0
   dc9fa:	bd38      	pop	{r3, r4, r5, pc}
            grp->modp = ecp_mod_p448;
            return( ecp_use_curve448( grp ) );
#endif /* MBEDTLS_ECP_DP_CURVE448_ENABLED */

        default:
            mbedtls_ecp_group_free( grp );
   dc9fc:	4620      	mov	r0, r4
   dc9fe:	f7fb fbd0 	bl	d81a2 <mbedtls_ecp_group_free>
            return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   dca02:	4808      	ldr	r0, [pc, #32]	; (dca24 <mbedtls_ecp_group_load+0x88>)
    }
}
   dca04:	bd38      	pop	{r3, r4, r5, pc}
   dca06:	bf00      	nop
   dca08:	000dc4cf 	.word	0x000dc4cf
   dca0c:	000e96a4 	.word	0x000e96a4
   dca10:	000e9664 	.word	0x000e9664
   dca14:	000e9684 	.word	0x000e9684
   dca18:	000e96e4 	.word	0x000e96e4
   dca1c:	000e96c4 	.word	0x000e96c4
   dca20:	2003aef0 	.word	0x2003aef0
   dca24:	ffffb180 	.word	0xffffb180

000dca28 <_ZL15x509_memcasecmpPKvS0_j>:

/*
 * Like memcmp, but case-insensitive and always returns -1 if different
 */
static int x509_memcasecmp( const void *s1, const void *s2, size_t len )
{
   dca28:	b530      	push	{r4, r5, lr}
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = (const unsigned char *)s1, *n2 = (const unsigned char *)s2;

    for( i = 0; i < len; i++ )
   dca2a:	2400      	movs	r4, #0
   dca2c:	4294      	cmp	r4, r2
   dca2e:	d00c      	beq.n	dca4a <_ZL15x509_memcasecmpPKvS0_j+0x22>
    {
        diff = n1[i] ^ n2[i];
   dca30:	5d03      	ldrb	r3, [r0, r4]
   dca32:	5d0d      	ldrb	r5, [r1, r4]

        if( diff == 0 )
   dca34:	405d      	eors	r5, r3
   dca36:	d006      	beq.n	dca46 <_ZL15x509_memcasecmpPKvS0_j+0x1e>
            continue;

        if( diff == 32 &&
   dca38:	2d20      	cmp	r5, #32
   dca3a:	d108      	bne.n	dca4e <_ZL15x509_memcasecmpPKvS0_j+0x26>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
   dca3c:	f023 0320 	bic.w	r3, r3, #32
   dca40:	3b41      	subs	r3, #65	; 0x41
   dca42:	2b19      	cmp	r3, #25
   dca44:	d803      	bhi.n	dca4e <_ZL15x509_memcasecmpPKvS0_j+0x26>
{
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = (const unsigned char *)s1, *n2 = (const unsigned char *)s2;

    for( i = 0; i < len; i++ )
   dca46:	3401      	adds	r4, #1
   dca48:	e7f0      	b.n	dca2c <_ZL15x509_memcasecmpPKvS0_j+0x4>
        }

        return( -1 );
    }

    return( 0 );
   dca4a:	2000      	movs	r0, #0
   dca4c:	bd30      	pop	{r4, r5, pc}
              ( n1[i] >= 'A' && n1[i] <= 'Z' ) ) )
        {
            continue;
        }

        return( -1 );
   dca4e:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return( 0 );
}
   dca52:	bd30      	pop	{r4, r5, pc}

000dca54 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>:
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
   dca54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dca56:	4605      	mov	r5, r0
   dca58:	460c      	mov	r4, r1
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
   dca5a:	b925      	cbnz	r5, dca66 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x12>
   dca5c:	1c20      	adds	r0, r4, #0
   dca5e:	bf18      	it	ne
   dca60:	2001      	movne	r0, #1
   dca62:	4240      	negs	r0, r0
   dca64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        if( a == NULL || b == NULL )
   dca66:	2c00      	cmp	r4, #0
   dca68:	d031      	beq.n	dcace <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
   dca6a:	682a      	ldr	r2, [r5, #0]
   dca6c:	6823      	ldr	r3, [r4, #0]
   dca6e:	429a      	cmp	r2, r3
   dca70:	d12d      	bne.n	dcace <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            a->oid.len != b->oid.len ||
   dca72:	686a      	ldr	r2, [r5, #4]
    {
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
   dca74:	6863      	ldr	r3, [r4, #4]
   dca76:	429a      	cmp	r2, r3
   dca78:	d129      	bne.n	dcace <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            a->oid.len != b->oid.len ||
            memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
   dca7a:	68a1      	ldr	r1, [r4, #8]
   dca7c:	68a8      	ldr	r0, [r5, #8]
   dca7e:	f00a fa57 	bl	e6f30 <memcmp>
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
            a->oid.len != b->oid.len ||
   dca82:	bb20      	cbnz	r0, dcace <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
   dca84:	68ef      	ldr	r7, [r5, #12]
   dca86:	68e6      	ldr	r6, [r4, #12]
   dca88:	42b7      	cmp	r7, r6
   dca8a:	d108      	bne.n	dca9e <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        a->len == b->len &&
   dca8c:	692a      	ldr	r2, [r5, #16]
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
   dca8e:	6923      	ldr	r3, [r4, #16]
   dca90:	429a      	cmp	r2, r3
   dca92:	d104      	bne.n	dca9e <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        a->len == b->len &&
        memcmp( a->p, b->p, b->len ) == 0 )
   dca94:	6961      	ldr	r1, [r4, #20]
   dca96:	6968      	ldr	r0, [r5, #20]
   dca98:	f00a fa4a 	bl	e6f30 <memcmp>
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
        a->len == b->len &&
   dca9c:	b180      	cbz	r0, dcac0 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6c>
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        a->len == b->len &&
   dca9e:	2f0c      	cmp	r7, #12
   dcaa0:	d001      	beq.n	dcaa6 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x52>
        memcmp( a->p, b->p, b->len ) == 0 )
    {
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
   dcaa2:	2f13      	cmp	r7, #19
   dcaa4:	d113      	bne.n	dcace <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
   dcaa6:	2e0c      	cmp	r6, #12
   dcaa8:	d001      	beq.n	dcaae <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x5a>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
   dcaaa:	2e13      	cmp	r6, #19
   dcaac:	d10f      	bne.n	dcace <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a->len == b->len &&
   dcaae:	692a      	ldr	r2, [r5, #16]
    {
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
   dcab0:	6923      	ldr	r3, [r4, #16]
   dcab2:	429a      	cmp	r2, r3
   dcab4:	d10b      	bne.n	dcace <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a->len == b->len &&
        x509_memcasecmp( a->p, b->p, b->len ) == 0 )
   dcab6:	6961      	ldr	r1, [r4, #20]
   dcab8:	6968      	ldr	r0, [r5, #20]
   dcaba:	f7ff ffb5 	bl	dca28 <_ZL15x509_memcasecmpPKvS0_j>
        {
            return( -1 );
        }

        /* value */
        if( x509_string_cmp( &a->val, &b->val ) != 0 )
   dcabe:	b930      	cbnz	r0, dcace <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        /* structure of the list of sets */
        if( a->next_merged != b->next_merged )
   dcac0:	7f2a      	ldrb	r2, [r5, #28]
   dcac2:	7f23      	ldrb	r3, [r4, #28]
   dcac4:	429a      	cmp	r2, r3
   dcac6:	d102      	bne.n	dcace <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        a = a->next;
   dcac8:	69ad      	ldr	r5, [r5, #24]
        b = b->next;
   dcaca:	69a4      	ldr	r4, [r4, #24]
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
   dcacc:	e7c5      	b.n	dca5a <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6>
    {
        if( a == NULL || b == NULL )
            return( -1 );
   dcace:	f04f 30ff 	mov.w	r0, #4294967295
        b = b->next;
    }

    /* a == NULL == b */
    return( 0 );
}
   dcad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dcad4 <_ZL25x509_profile_check_md_algPK24mbedtls_x509_crt_profile17mbedtls_md_type_t.isra.1>:
 * Return 0 if pk_alg is acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( pk_alg == MBEDTLS_PK_NONE )
   dcad4:	b151      	cbz	r1, dcaec <_ZL25x509_profile_check_md_algPK24mbedtls_x509_crt_profile17mbedtls_md_type_t.isra.1+0x18>
        return( -1 );

    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
   dcad6:	2301      	movs	r3, #1
   dcad8:	3901      	subs	r1, #1
   dcada:	fa03 f101 	lsl.w	r1, r3, r1
   dcade:	6803      	ldr	r3, [r0, #0]
   dcae0:	4219      	tst	r1, r3
   dcae2:	bf0c      	ite	eq
   dcae4:	f04f 30ff 	moveq.w	r0, #4294967295
   dcae8:	2000      	movne	r0, #0
   dcaea:	4770      	bx	lr
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( pk_alg == MBEDTLS_PK_NONE )
        return( -1 );
   dcaec:	f04f 30ff 	mov.w	r0, #4294967295

    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
        return( 0 );

    return( -1 );
}
   dcaf0:	4770      	bx	lr

000dcaf2 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>:
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
   dcaf2:	b570      	push	{r4, r5, r6, lr}
   dcaf4:	4615      	mov	r5, r2
    int ret;

    if( *p == end )
   dcaf6:	6802      	ldr	r2, [r0, #0]
   dcaf8:	428a      	cmp	r2, r1
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
   dcafa:	4604      	mov	r4, r0
    int ret;

    if( *p == end )
   dcafc:	d101      	bne.n	dcb02 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x10>
        return( 0 );
   dcafe:	2000      	movs	r0, #0
   dcb00:	bd70      	pop	{r4, r5, r6, pc}

    uid->tag = **p;
   dcb02:	7816      	ldrb	r6, [r2, #0]
   dcb04:	462a      	mov	r2, r5

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
   dcb06:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    int ret;

    if( *p == end )
        return( 0 );

    uid->tag = **p;
   dcb0a:	f842 6b04 	str.w	r6, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
   dcb0e:	f7f8 fe0f 	bl	d5730 <mbedtls_asn1_get_tag>
   dcb12:	b128      	cbz	r0, dcb20 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x2e>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | n ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   dcb14:	f110 0f62 	cmn.w	r0, #98	; 0x62
   dcb18:	d0f1      	beq.n	dcafe <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0xc>
            return( 0 );

        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
   dcb1a:	f5a0 5006 	sub.w	r0, r0, #8576	; 0x2180
   dcb1e:	bd70      	pop	{r4, r5, r6, pc}
    }

    uid->p = *p;
   dcb20:	6823      	ldr	r3, [r4, #0]
   dcb22:	60ab      	str	r3, [r5, #8]
    *p += uid->len;
   dcb24:	6822      	ldr	r2, [r4, #0]
   dcb26:	686b      	ldr	r3, [r5, #4]
   dcb28:	4413      	add	r3, r2
   dcb2a:	6023      	str	r3, [r4, #0]

    return( 0 );
}
   dcb2c:	bd70      	pop	{r4, r5, r6, pc}

000dcb2e <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context>:
 * Check key against profile
 * Return 0 if pk is acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
                                   const mbedtls_pk_context *pk )
{
   dcb2e:	b538      	push	{r3, r4, r5, lr}
   dcb30:	4604      	mov	r4, r0
    const mbedtls_pk_type_t pk_alg = mbedtls_pk_get_type( pk );
   dcb32:	4608      	mov	r0, r1
 * Check key against profile
 * Return 0 if pk is acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
                                   const mbedtls_pk_context *pk )
{
   dcb34:	460d      	mov	r5, r1
    const mbedtls_pk_type_t pk_alg = mbedtls_pk_get_type( pk );
   dcb36:	f001 fbbb 	bl	de2b0 <mbedtls_pk_get_type>

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
   dcb3a:	2801      	cmp	r0, #1
   dcb3c:	d001      	beq.n	dcb42 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context+0x14>
   dcb3e:	2806      	cmp	r0, #6
   dcb40:	d109      	bne.n	dcb56 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context+0x28>
    {
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
   dcb42:	4628      	mov	r0, r5
   dcb44:	f001 fb48 	bl	de1d8 <mbedtls_pk_get_bitlen>
   dcb48:	68e3      	ldr	r3, [r4, #12]
   dcb4a:	4298      	cmp	r0, r3
   dcb4c:	f04f 30ff 	mov.w	r0, #4294967295
   dcb50:	bf28      	it	cs
   dcb52:	2000      	movcs	r0, #0
   dcb54:	bd38      	pop	{r3, r4, r5, pc}
        return( -1 );
    }
#endif

#if defined(MBEDTLS_ECP_C)
    if( pk_alg == MBEDTLS_PK_ECDSA ||
   dcb56:	3802      	subs	r0, #2
   dcb58:	b2c0      	uxtb	r0, r0
   dcb5a:	2802      	cmp	r0, #2
   dcb5c:	d80d      	bhi.n	dcb7a <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context+0x4c>
        pk_alg == MBEDTLS_PK_ECKEY ||
        pk_alg == MBEDTLS_PK_ECKEY_DH )
    {
        const mbedtls_ecp_group_id gid = mbedtls_pk_ec( *pk )->grp.id;
   dcb5e:	686b      	ldr	r3, [r5, #4]
   dcb60:	781b      	ldrb	r3, [r3, #0]

        if( gid == MBEDTLS_ECP_DP_NONE )
   dcb62:	b153      	cbz	r3, dcb7a <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context+0x4c>
            return( -1 );

        if( ( profile->allowed_curves & MBEDTLS_X509_ID_FLAG( gid ) ) != 0 )
   dcb64:	2201      	movs	r2, #1
   dcb66:	3b01      	subs	r3, #1
   dcb68:	fa02 f303 	lsl.w	r3, r2, r3
   dcb6c:	68a2      	ldr	r2, [r4, #8]
   dcb6e:	4213      	tst	r3, r2
   dcb70:	bf0c      	ite	eq
   dcb72:	f04f 30ff 	moveq.w	r0, #4294967295
   dcb76:	2000      	movne	r0, #0
   dcb78:	bd38      	pop	{r3, r4, r5, pc}

        return( -1 );
    }
#endif

    return( -1 );
   dcb7a:	f04f 30ff 	mov.w	r0, #4294967295
}
   dcb7e:	bd38      	pop	{r3, r4, r5, pc}

000dcb80 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj>:
/*
 * Check for CN match
 */
static int x509_crt_check_cn( const mbedtls_x509_buf *name,
                              const char *cn, size_t cn_len )
{
   dcb80:	b570      	push	{r4, r5, r6, lr}
    /* try exact match */
    if( name->len == cn_len &&
   dcb82:	6845      	ldr	r5, [r0, #4]
   dcb84:	4295      	cmp	r5, r2
/*
 * Check for CN match
 */
static int x509_crt_check_cn( const mbedtls_x509_buf *name,
                              const char *cn, size_t cn_len )
{
   dcb86:	4606      	mov	r6, r0
   dcb88:	460c      	mov	r4, r1
    /* try exact match */
    if( name->len == cn_len &&
   dcb8a:	d104      	bne.n	dcb96 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x16>
        x509_memcasecmp( cn, name->p, cn_len ) == 0 )
   dcb8c:	6881      	ldr	r1, [r0, #8]
   dcb8e:	4620      	mov	r0, r4
   dcb90:	f7ff ff4a 	bl	dca28 <_ZL15x509_memcasecmpPKvS0_j>
 */
static int x509_crt_check_cn( const mbedtls_x509_buf *name,
                              const char *cn, size_t cn_len )
{
    /* try exact match */
    if( name->len == cn_len &&
   dcb94:	b350      	cbz	r0, dcbec <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x6c>
 * Return 0 if name matches wildcard, -1 otherwise
 */
static int x509_check_wildcard( const char *cn, const mbedtls_x509_buf *name )
{
    size_t i;
    size_t cn_idx = 0, cn_len = strlen( cn );
   dcb96:	4620      	mov	r0, r4
   dcb98:	f00a fa50 	bl	e703c <strlen>

    /* We can't have a match if there is no wildcard to match */
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
   dcb9c:	2d02      	cmp	r5, #2
   dcb9e:	d922      	bls.n	dcbe6 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x66>
   dcba0:	68b3      	ldr	r3, [r6, #8]
   dcba2:	781a      	ldrb	r2, [r3, #0]
   dcba4:	2a2a      	cmp	r2, #42	; 0x2a
   dcba6:	d11e      	bne.n	dcbe6 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x66>
   dcba8:	785a      	ldrb	r2, [r3, #1]
   dcbaa:	2a2e      	cmp	r2, #46	; 0x2e
   dcbac:	d11b      	bne.n	dcbe6 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x66>
   dcbae:	2200      	movs	r2, #0
        return( -1 );

    for( i = 0; i < cn_len; ++i )
   dcbb0:	4290      	cmp	r0, r2
   dcbb2:	d013      	beq.n	dcbdc <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x5c>
    {
        if( cn[i] == '.' )
   dcbb4:	4621      	mov	r1, r4
   dcbb6:	3401      	adds	r4, #1
   dcbb8:	780e      	ldrb	r6, [r1, #0]
   dcbba:	2e2e      	cmp	r6, #46	; 0x2e
   dcbbc:	d001      	beq.n	dcbc2 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x42>

    /* We can't have a match if there is no wildcard to match */
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
        return( -1 );

    for( i = 0; i < cn_len; ++i )
   dcbbe:	3201      	adds	r2, #1
   dcbc0:	e7f6      	b.n	dcbb0 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x30>
            cn_idx = i;
            break;
        }
    }

    if( cn_idx == 0 )
   dcbc2:	b182      	cbz	r2, dcbe6 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x66>
        return( -1 );

    if( cn_len - cn_idx == name->len - 1 &&
   dcbc4:	1a82      	subs	r2, r0, r2
   dcbc6:	3d01      	subs	r5, #1
   dcbc8:	42aa      	cmp	r2, r5
   dcbca:	d107      	bne.n	dcbdc <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x5c>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
   dcbcc:	1c58      	adds	r0, r3, #1
   dcbce:	f7ff ff2b 	bl	dca28 <_ZL15x509_memcasecmpPKvS0_j>
    }

    if( cn_idx == 0 )
        return( -1 );

    if( cn_len - cn_idx == name->len - 1 &&
   dcbd2:	3000      	adds	r0, #0
   dcbd4:	bf18      	it	ne
   dcbd6:	2001      	movne	r0, #1
   dcbd8:	4240      	negs	r0, r0
   dcbda:	e001      	b.n	dcbe0 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x60>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
    {
        return( 0 );
    }

    return( -1 );
   dcbdc:	f04f 30ff 	mov.w	r0, #4294967295
    {
        return( 0 );
    }

    /* try wildcard match */
    if( x509_check_wildcard( cn, name ) == 0 )
   dcbe0:	4240      	negs	r0, r0
   dcbe2:	4240      	negs	r0, r0
   dcbe4:	bd70      	pop	{r4, r5, r6, pc}
    {
        return( 0 );
    }

    return( -1 );
   dcbe6:	f04f 30ff 	mov.w	r0, #4294967295
   dcbea:	bd70      	pop	{r4, r5, r6, pc}
}
   dcbec:	bd70      	pop	{r4, r5, r6, pc}
	...

000dcbf0 <mbedtls_x509_crt_info>:
 */
#define BEFORE_COLON    18
#define BC              "18"
int mbedtls_x509_crt_info( char *buf, size_t size, const char *prefix,
                   const mbedtls_x509_crt *crt )
{
   dcbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcbf4:	4681      	mov	r9, r0
   dcbf6:	b08d      	sub	sp, #52	; 0x34
   dcbf8:	460f      	mov	r7, r1
   dcbfa:	4690      	mov	r8, r2
    char key_size_str[BEFORE_COLON];

    p = buf;
    n = size;

    if( NULL == crt )
   dcbfc:	461e      	mov	r6, r3
   dcbfe:	b94b      	cbnz	r3, dcc14 <mbedtls_x509_crt_info+0x24>
    {
        ret = mbedtls_snprintf( p, n, "\nCertificate is uninitialised!\n" );
   dcc00:	4aa9      	ldr	r2, [pc, #676]	; (dcea8 <mbedtls_x509_crt_info+0x2b8>)
   dcc02:	f008 fbdb 	bl	e53bc <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   dcc06:	2800      	cmp	r0, #0
   dcc08:	f2c0 82f2 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcc0c:	4287      	cmp	r7, r0
   dcc0e:	f200 82f0 	bhi.w	dd1f2 <mbedtls_x509_crt_info+0x602>
   dcc12:	e2ed      	b.n	dd1f0 <mbedtls_x509_crt_info+0x600>

        return( (int) ( size - n ) );
    }

    ret = mbedtls_snprintf( p, n, "%scert. version     : %d\n",
   dcc14:	699b      	ldr	r3, [r3, #24]
   dcc16:	9300      	str	r3, [sp, #0]
   dcc18:	4613      	mov	r3, r2
   dcc1a:	4aa4      	ldr	r2, [pc, #656]	; (dceac <mbedtls_x509_crt_info+0x2bc>)
   dcc1c:	f008 fbce 	bl	e53bc <snprintf>
                               prefix, crt->version );
    MBEDTLS_X509_SAFE_SNPRINTF;
   dcc20:	2800      	cmp	r0, #0
   dcc22:	f2c0 82e5 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcc26:	4287      	cmp	r7, r0
   dcc28:	f240 82e2 	bls.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcc2c:	1a3c      	subs	r4, r7, r0
   dcc2e:	4481      	add	r9, r0
    ret = mbedtls_snprintf( p, n, "%sserial number     : ",
   dcc30:	4643      	mov	r3, r8
   dcc32:	4a9f      	ldr	r2, [pc, #636]	; (dceb0 <mbedtls_x509_crt_info+0x2c0>)
   dcc34:	4621      	mov	r1, r4
   dcc36:	4648      	mov	r0, r9
   dcc38:	f008 fbc0 	bl	e53bc <snprintf>
                               prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
   dcc3c:	2800      	cmp	r0, #0
   dcc3e:	f2c0 82d7 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcc42:	4284      	cmp	r4, r0
   dcc44:	f240 82d4 	bls.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcc48:	1a24      	subs	r4, r4, r0
   dcc4a:	4481      	add	r9, r0

    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
   dcc4c:	f106 021c 	add.w	r2, r6, #28
   dcc50:	4621      	mov	r1, r4
   dcc52:	4648      	mov	r0, r9
   dcc54:	f7f9 fa30 	bl	d60b8 <mbedtls_x509_serial_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dcc58:	2800      	cmp	r0, #0
   dcc5a:	f2c0 82c9 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcc5e:	4284      	cmp	r4, r0
   dcc60:	f240 82c6 	bls.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcc64:	1a24      	subs	r4, r4, r0
   dcc66:	4481      	add	r9, r0

    ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
   dcc68:	4643      	mov	r3, r8
   dcc6a:	4a92      	ldr	r2, [pc, #584]	; (dceb4 <mbedtls_x509_crt_info+0x2c4>)
   dcc6c:	4621      	mov	r1, r4
   dcc6e:	4648      	mov	r0, r9
   dcc70:	f008 fba4 	bl	e53bc <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dcc74:	2800      	cmp	r0, #0
   dcc76:	f2c0 82bb 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcc7a:	4284      	cmp	r4, r0
   dcc7c:	f240 82b8 	bls.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcc80:	1a24      	subs	r4, r4, r0
   dcc82:	4481      	add	r9, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
   dcc84:	f106 024c 	add.w	r2, r6, #76	; 0x4c
   dcc88:	4621      	mov	r1, r4
   dcc8a:	4648      	mov	r0, r9
   dcc8c:	f7f9 f992 	bl	d5fb4 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dcc90:	2800      	cmp	r0, #0
   dcc92:	f2c0 82ad 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcc96:	4284      	cmp	r4, r0
   dcc98:	f240 82aa 	bls.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcc9c:	1a24      	subs	r4, r4, r0
   dcc9e:	4481      	add	r9, r0

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
   dcca0:	4643      	mov	r3, r8
   dcca2:	4a85      	ldr	r2, [pc, #532]	; (dceb8 <mbedtls_x509_crt_info+0x2c8>)
   dcca4:	4621      	mov	r1, r4
   dcca6:	4648      	mov	r0, r9
   dcca8:	f008 fb88 	bl	e53bc <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dccac:	2800      	cmp	r0, #0
   dccae:	f2c0 829f 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dccb2:	4284      	cmp	r4, r0
   dccb4:	f240 829c 	bls.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dccb8:	1a24      	subs	r4, r4, r0
   dccba:	4481      	add	r9, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
   dccbc:	f106 026c 	add.w	r2, r6, #108	; 0x6c
   dccc0:	4621      	mov	r1, r4
   dccc2:	4648      	mov	r0, r9
   dccc4:	f7f9 f976 	bl	d5fb4 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dccc8:	2800      	cmp	r0, #0
   dccca:	f2c0 8291 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dccce:	4284      	cmp	r4, r0
   dccd0:	f240 828e 	bls.w	dd1f0 <mbedtls_x509_crt_info+0x600>

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
   dccd4:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
   dccd8:	9305      	str	r3, [sp, #20]
   dccda:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
   dccde:	9304      	str	r3, [sp, #16]
   dcce0:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
   dcce4:	9303      	str	r3, [sp, #12]
   dcce6:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
   dccea:	9302      	str	r3, [sp, #8]
   dccec:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
   dccf0:	9301      	str	r3, [sp, #4]
   dccf2:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
   dccf6:	9300      	str	r3, [sp, #0]
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
    MBEDTLS_X509_SAFE_SNPRINTF;
   dccf8:	1a24      	subs	r4, r4, r0
   dccfa:	4481      	add	r9, r0

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
   dccfc:	4643      	mov	r3, r8
   dccfe:	4a6f      	ldr	r2, [pc, #444]	; (dcebc <mbedtls_x509_crt_info+0x2cc>)
   dcd00:	4621      	mov	r1, r4
   dcd02:	4648      	mov	r0, r9
   dcd04:	f008 fb5a 	bl	e53bc <snprintf>
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
   dcd08:	2800      	cmp	r0, #0
   dcd0a:	f2c0 8271 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcd0e:	4284      	cmp	r4, r0
   dcd10:	f240 826e 	bls.w	dd1f0 <mbedtls_x509_crt_info+0x600>

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
   dcd14:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
   dcd18:	9305      	str	r3, [sp, #20]
   dcd1a:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
   dcd1e:	9304      	str	r3, [sp, #16]
   dcd20:	f8d6 30b0 	ldr.w	r3, [r6, #176]	; 0xb0
   dcd24:	9303      	str	r3, [sp, #12]
   dcd26:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
   dcd2a:	9302      	str	r3, [sp, #8]
   dcd2c:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
   dcd30:	9301      	str	r3, [sp, #4]
   dcd32:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
   dcd36:	9300      	str	r3, [sp, #0]
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
   dcd38:	1a24      	subs	r4, r4, r0
   dcd3a:	4481      	add	r9, r0

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
   dcd3c:	4643      	mov	r3, r8
   dcd3e:	4a60      	ldr	r2, [pc, #384]	; (dcec0 <mbedtls_x509_crt_info+0x2d0>)
   dcd40:	4621      	mov	r1, r4
   dcd42:	4648      	mov	r0, r9
   dcd44:	f008 fb3a 	bl	e53bc <snprintf>
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
   dcd48:	2800      	cmp	r0, #0
   dcd4a:	f2c0 8251 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcd4e:	4284      	cmp	r4, r0
   dcd50:	f240 824e 	bls.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcd54:	1a24      	subs	r4, r4, r0
   dcd56:	4481      	add	r9, r0

    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
   dcd58:	4643      	mov	r3, r8
   dcd5a:	4a5a      	ldr	r2, [pc, #360]	; (dcec4 <mbedtls_x509_crt_info+0x2d4>)
   dcd5c:	4621      	mov	r1, r4
   dcd5e:	4648      	mov	r0, r9
   dcd60:	f008 fb2c 	bl	e53bc <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dcd64:	2800      	cmp	r0, #0
   dcd66:	f2c0 8243 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcd6a:	4284      	cmp	r4, r0
   dcd6c:	f240 8240 	bls.w	dd1f0 <mbedtls_x509_crt_info+0x600>

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
   dcd70:	f8d6 212c 	ldr.w	r2, [r6, #300]	; 0x12c
   dcd74:	f896 3129 	ldrb.w	r3, [r6, #297]	; 0x129
   dcd78:	9201      	str	r2, [sp, #4]
   dcd7a:	f896 2128 	ldrb.w	r2, [r6, #296]	; 0x128
   dcd7e:	9200      	str	r2, [sp, #0]
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
   dcd80:	1a24      	subs	r4, r4, r0
   dcd82:	4481      	add	r9, r0

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
   dcd84:	f106 0228 	add.w	r2, r6, #40	; 0x28
   dcd88:	4621      	mov	r1, r4
   dcd8a:	4648      	mov	r0, r9
   dcd8c:	f7f9 f9de 	bl	d614c <mbedtls_x509_sig_alg_gets>
                             crt->sig_md, crt->sig_opts );
    MBEDTLS_X509_SAFE_SNPRINTF;
   dcd90:	1e05      	subs	r5, r0, #0
   dcd92:	f2c0 822d 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcd96:	42ac      	cmp	r4, r5
   dcd98:	f240 822a 	bls.w	dd1f0 <mbedtls_x509_crt_info+0x600>

    /* Key size */
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
   dcd9c:	f106 0bbc 	add.w	fp, r6, #188	; 0xbc
   dcda0:	4658      	mov	r0, fp
   dcda2:	f001 fa7b 	bl	de29c <mbedtls_pk_get_name>
   dcda6:	f10d 0a1c 	add.w	sl, sp, #28
   dcdaa:	4602      	mov	r2, r0
   dcdac:	2112      	movs	r1, #18
   dcdae:	4650      	mov	r0, sl
   dcdb0:	f7f9 fa2a 	bl	d6208 <mbedtls_x509_key_size_helper>
   dcdb4:	2800      	cmp	r0, #0
   dcdb6:	f040 821c 	bne.w	dd1f2 <mbedtls_x509_crt_info+0x602>
    {
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
   dcdba:	4658      	mov	r0, fp
   dcdbc:	f001 fa0c 	bl	de1d8 <mbedtls_pk_get_bitlen>
    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
                             crt->sig_md, crt->sig_opts );
    MBEDTLS_X509_SAFE_SNPRINTF;
   dcdc0:	1b64      	subs	r4, r4, r5
   dcdc2:	444d      	add	r5, r9
                                      mbedtls_pk_get_name( &crt->pk ) ) ) != 0 )
    {
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
   dcdc4:	9001      	str	r0, [sp, #4]
   dcdc6:	f8cd a000 	str.w	sl, [sp]
   dcdca:	4643      	mov	r3, r8
   dcdcc:	4a3e      	ldr	r2, [pc, #248]	; (dcec8 <mbedtls_x509_crt_info+0x2d8>)
   dcdce:	4621      	mov	r1, r4
   dcdd0:	4628      	mov	r0, r5
   dcdd2:	f008 faf3 	bl	e53bc <snprintf>
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
    MBEDTLS_X509_SAFE_SNPRINTF;
   dcdd6:	2800      	cmp	r0, #0
   dcdd8:	f2c0 820a 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcddc:	4284      	cmp	r4, r0
   dcdde:	f240 8207 	bls.w	dd1f0 <mbedtls_x509_crt_info+0x600>

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
   dcde2:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   dcde6:	05db      	lsls	r3, r3, #23
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
    MBEDTLS_X509_SAFE_SNPRINTF;
   dcde8:	eba4 0400 	sub.w	r4, r4, r0
   dcdec:	4405      	add	r5, r0

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
   dcdee:	d528      	bpl.n	dce42 <mbedtls_x509_crt_info+0x252>
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
   dcdf0:	f8d6 10fc 	ldr.w	r1, [r6, #252]	; 0xfc
   dcdf4:	4a35      	ldr	r2, [pc, #212]	; (dcecc <mbedtls_x509_crt_info+0x2dc>)
   dcdf6:	4b36      	ldr	r3, [pc, #216]	; (dced0 <mbedtls_x509_crt_info+0x2e0>)
   dcdf8:	2900      	cmp	r1, #0
   dcdfa:	bf18      	it	ne
   dcdfc:	4613      	movne	r3, r2
   dcdfe:	9300      	str	r3, [sp, #0]
   dce00:	4a34      	ldr	r2, [pc, #208]	; (dced4 <mbedtls_x509_crt_info+0x2e4>)
   dce02:	4643      	mov	r3, r8
   dce04:	4621      	mov	r1, r4
   dce06:	4628      	mov	r0, r5
   dce08:	f008 fad8 	bl	e53bc <snprintf>
                        crt->ca_istrue ? "true" : "false" );
        MBEDTLS_X509_SAFE_SNPRINTF;
   dce0c:	2800      	cmp	r0, #0
   dce0e:	f2c0 81ef 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dce12:	4284      	cmp	r4, r0
   dce14:	f240 81ec 	bls.w	dd1f0 <mbedtls_x509_crt_info+0x600>

        if( crt->max_pathlen > 0 )
   dce18:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
   dce1c:	2b00      	cmp	r3, #0

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
                        crt->ca_istrue ? "true" : "false" );
        MBEDTLS_X509_SAFE_SNPRINTF;
   dce1e:	eba4 0400 	sub.w	r4, r4, r0
   dce22:	4405      	add	r5, r0

        if( crt->max_pathlen > 0 )
   dce24:	dd0d      	ble.n	dce42 <mbedtls_x509_crt_info+0x252>
        {
            ret = mbedtls_snprintf( p, n, ", max_pathlen=%d", crt->max_pathlen - 1 );
   dce26:	3b01      	subs	r3, #1
   dce28:	4a2b      	ldr	r2, [pc, #172]	; (dced8 <mbedtls_x509_crt_info+0x2e8>)
   dce2a:	4621      	mov	r1, r4
   dce2c:	4628      	mov	r0, r5
   dce2e:	f008 fac5 	bl	e53bc <snprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
   dce32:	2800      	cmp	r0, #0
   dce34:	f2c0 81dc 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dce38:	4284      	cmp	r4, r0
   dce3a:	f240 81d9 	bls.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dce3e:	1a24      	subs	r4, r4, r0
   dce40:	4405      	add	r5, r0
        }
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
   dce42:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   dce46:	0698      	lsls	r0, r3, #26
   dce48:	d553      	bpl.n	dcef2 <mbedtls_x509_crt_info+0x302>
    {
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
   dce4a:	4643      	mov	r3, r8
   dce4c:	4a23      	ldr	r2, [pc, #140]	; (dcedc <mbedtls_x509_crt_info+0x2ec>)
   dce4e:	4621      	mov	r1, r4
   dce50:	4628      	mov	r0, r5
   dce52:	f008 fab3 	bl	e53bc <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   dce56:	2800      	cmp	r0, #0
   dce58:	f2c0 81ca 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dce5c:	42a0      	cmp	r0, r4
   dce5e:	f080 81c7 	bcs.w	dd1f0 <mbedtls_x509_crt_info+0x600>
{
    size_t i;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
   dce62:	f8df e07c 	ldr.w	lr, [pc, #124]	; dcee0 <mbedtls_x509_crt_info+0x2f0>
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
    {
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
   dce66:	1a24      	subs	r4, r4, r0
   dce68:	4405      	add	r5, r0

        if( ( ret = x509_info_subject_alt_name( &p, &n,
   dce6a:	f106 02e8 	add.w	r2, r6, #232	; 0xe8
    size_t i;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
    size_t sep_len = 0;
   dce6e:	2000      	movs	r0, #0

    while( cur != NULL )
    {
        if( cur->buf.len + sep_len >= n )
   dce70:	6851      	ldr	r1, [r2, #4]
   dce72:	4401      	add	r1, r0
   dce74:	42a1      	cmp	r1, r4
   dce76:	f04f 0300 	mov.w	r3, #0
   dce7a:	d301      	bcc.n	dce80 <mbedtls_x509_crt_info+0x290>
        {
            *p = '\0';
   dce7c:	702b      	strb	r3, [r5, #0]
   dce7e:	e1b7      	b.n	dd1f0 <mbedtls_x509_crt_info+0x600>
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
        }

        n -= cur->buf.len + sep_len;
   dce80:	1a64      	subs	r4, r4, r1
        for( i = 0; i < sep_len; i++ )
   dce82:	4283      	cmp	r3, r0
   dce84:	d004      	beq.n	dce90 <mbedtls_x509_crt_info+0x2a0>
            *p++ = sep[i];
   dce86:	f81e 1003 	ldrb.w	r1, [lr, r3]
   dce8a:	54e9      	strb	r1, [r5, r3]
            *p = '\0';
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
        }

        n -= cur->buf.len + sep_len;
        for( i = 0; i < sep_len; i++ )
   dce8c:	3301      	adds	r3, #1
   dce8e:	e7f8      	b.n	dce82 <mbedtls_x509_crt_info+0x292>
   dce90:	441d      	add	r5, r3
   dce92:	4628      	mov	r0, r5
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
   dce94:	6851      	ldr	r1, [r2, #4]
   dce96:	1a2b      	subs	r3, r5, r0
   dce98:	4299      	cmp	r1, r3
   dce9a:	d923      	bls.n	dcee4 <mbedtls_x509_crt_info+0x2f4>
            *p++ = cur->buf.p[i];
   dce9c:	6891      	ldr	r1, [r2, #8]
   dce9e:	5ccb      	ldrb	r3, [r1, r3]
   dcea0:	f805 3b01 	strb.w	r3, [r5], #1
   dcea4:	e7f6      	b.n	dce94 <mbedtls_x509_crt_info+0x2a4>
   dcea6:	bf00      	nop
   dcea8:	000e97ca 	.word	0x000e97ca
   dceac:	000e97ea 	.word	0x000e97ea
   dceb0:	000e9804 	.word	0x000e9804
   dceb4:	000e981b 	.word	0x000e981b
   dceb8:	000e9833 	.word	0x000e9833
   dcebc:	000e984b 	.word	0x000e984b
   dcec0:	000e9880 	.word	0x000e9880
   dcec4:	000e98b5 	.word	0x000e98b5
   dcec8:	000e98cd 	.word	0x000e98cd
   dcecc:	000e805c 	.word	0x000e805c
   dced0:	000e97c4 	.word	0x000e97c4
   dced4:	000e98df 	.word	0x000e98df
   dced8:	000e98fc 	.word	0x000e98fc
   dcedc:	000e990d 	.word	0x000e990d
   dcee0:	000e87fd 	.word	0x000e87fd

        sep = ", ";
        sep_len = 2;

        cur = cur->next;
   dcee4:	68d2      	ldr	r2, [r2, #12]
        for( i = 0; i < sep_len; i++ )
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
            *p++ = cur->buf.p[i];

        sep = ", ";
   dcee6:	f8df e31c 	ldr.w	lr, [pc, #796]	; dd204 <mbedtls_x509_crt_info+0x614>
        sep_len = 2;
   dceea:	2002      	movs	r0, #2
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
    size_t sep_len = 0;

    while( cur != NULL )
   dceec:	2a00      	cmp	r2, #0
   dceee:	d1bf      	bne.n	dce70 <mbedtls_x509_crt_info+0x280>
        sep_len = 2;

        cur = cur->next;
    }

    *p = '\0';
   dcef0:	702a      	strb	r2, [r5, #0]
        if( ( ret = x509_info_subject_alt_name( &p, &n,
                                            &crt->subject_alt_names ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
   dcef2:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   dcef6:	03d9      	lsls	r1, r3, #15
   dcef8:	f140 8099 	bpl.w	dd02e <mbedtls_x509_crt_info+0x43e>
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
   dcefc:	4643      	mov	r3, r8
   dcefe:	4abe      	ldr	r2, [pc, #760]	; (dd1f8 <mbedtls_x509_crt_info+0x608>)
   dcf00:	4621      	mov	r1, r4
   dcf02:	4628      	mov	r0, r5
   dcf04:	f008 fa5a 	bl	e53bc <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   dcf08:	2800      	cmp	r0, #0
   dcf0a:	f2c0 8171 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcf0e:	42a0      	cmp	r0, r4
   dcf10:	f080 816e 	bcs.w	dd1f0 <mbedtls_x509_crt_info+0x600>

        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
   dcf14:	f896 9118 	ldrb.w	r9, [r6, #280]	; 0x118
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
   dcf18:	4bb8      	ldr	r3, [pc, #736]	; (dd1fc <mbedtls_x509_crt_info+0x60c>)
   dcf1a:	f019 0f80 	tst.w	r9, #128	; 0x80
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
   dcf1e:	eba4 0400 	sub.w	r4, r4, r0
   dcf22:	4405      	add	r5, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
   dcf24:	d00d      	beq.n	dcf42 <mbedtls_x509_crt_info+0x352>
   dcf26:	4ab6      	ldr	r2, [pc, #728]	; (dd200 <mbedtls_x509_crt_info+0x610>)
   dcf28:	4621      	mov	r1, r4
   dcf2a:	4628      	mov	r0, r5
   dcf2c:	f008 fa46 	bl	e53bc <snprintf>
   dcf30:	2800      	cmp	r0, #0
   dcf32:	f2c0 815d 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcf36:	4284      	cmp	r4, r0
   dcf38:	f240 815a 	bls.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcf3c:	4bb1      	ldr	r3, [pc, #708]	; (dd204 <mbedtls_x509_crt_info+0x614>)
   dcf3e:	1a24      	subs	r4, r4, r0
   dcf40:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
   dcf42:	f019 0f40 	tst.w	r9, #64	; 0x40
   dcf46:	d00d      	beq.n	dcf64 <mbedtls_x509_crt_info+0x374>
   dcf48:	4aaf      	ldr	r2, [pc, #700]	; (dd208 <mbedtls_x509_crt_info+0x618>)
   dcf4a:	4621      	mov	r1, r4
   dcf4c:	4628      	mov	r0, r5
   dcf4e:	f008 fa35 	bl	e53bc <snprintf>
   dcf52:	2800      	cmp	r0, #0
   dcf54:	f2c0 814c 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcf58:	4284      	cmp	r4, r0
   dcf5a:	f240 8149 	bls.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcf5e:	4ba9      	ldr	r3, [pc, #676]	; (dd204 <mbedtls_x509_crt_info+0x614>)
   dcf60:	1a24      	subs	r4, r4, r0
   dcf62:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
   dcf64:	f019 0f20 	tst.w	r9, #32
   dcf68:	d00d      	beq.n	dcf86 <mbedtls_x509_crt_info+0x396>
   dcf6a:	4aa8      	ldr	r2, [pc, #672]	; (dd20c <mbedtls_x509_crt_info+0x61c>)
   dcf6c:	4621      	mov	r1, r4
   dcf6e:	4628      	mov	r0, r5
   dcf70:	f008 fa24 	bl	e53bc <snprintf>
   dcf74:	2800      	cmp	r0, #0
   dcf76:	f2c0 813b 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcf7a:	4284      	cmp	r4, r0
   dcf7c:	f240 8138 	bls.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcf80:	4ba0      	ldr	r3, [pc, #640]	; (dd204 <mbedtls_x509_crt_info+0x614>)
   dcf82:	1a24      	subs	r4, r4, r0
   dcf84:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
   dcf86:	f019 0f10 	tst.w	r9, #16
   dcf8a:	d00d      	beq.n	dcfa8 <mbedtls_x509_crt_info+0x3b8>
   dcf8c:	4aa0      	ldr	r2, [pc, #640]	; (dd210 <mbedtls_x509_crt_info+0x620>)
   dcf8e:	4621      	mov	r1, r4
   dcf90:	4628      	mov	r0, r5
   dcf92:	f008 fa13 	bl	e53bc <snprintf>
   dcf96:	2800      	cmp	r0, #0
   dcf98:	f2c0 812a 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcf9c:	4284      	cmp	r4, r0
   dcf9e:	f240 8127 	bls.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcfa2:	4b98      	ldr	r3, [pc, #608]	; (dd204 <mbedtls_x509_crt_info+0x614>)
   dcfa4:	1a24      	subs	r4, r4, r0
   dcfa6:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
   dcfa8:	f019 0f08 	tst.w	r9, #8
   dcfac:	d00d      	beq.n	dcfca <mbedtls_x509_crt_info+0x3da>
   dcfae:	4a99      	ldr	r2, [pc, #612]	; (dd214 <mbedtls_x509_crt_info+0x624>)
   dcfb0:	4621      	mov	r1, r4
   dcfb2:	4628      	mov	r0, r5
   dcfb4:	f008 fa02 	bl	e53bc <snprintf>
   dcfb8:	2800      	cmp	r0, #0
   dcfba:	f2c0 8119 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcfbe:	4284      	cmp	r4, r0
   dcfc0:	f240 8116 	bls.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcfc4:	4b8f      	ldr	r3, [pc, #572]	; (dd204 <mbedtls_x509_crt_info+0x614>)
   dcfc6:	1a24      	subs	r4, r4, r0
   dcfc8:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
   dcfca:	f019 0f04 	tst.w	r9, #4
   dcfce:	d00d      	beq.n	dcfec <mbedtls_x509_crt_info+0x3fc>
   dcfd0:	4a91      	ldr	r2, [pc, #580]	; (dd218 <mbedtls_x509_crt_info+0x628>)
   dcfd2:	4621      	mov	r1, r4
   dcfd4:	4628      	mov	r0, r5
   dcfd6:	f008 f9f1 	bl	e53bc <snprintf>
   dcfda:	2800      	cmp	r0, #0
   dcfdc:	f2c0 8108 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcfe0:	4284      	cmp	r4, r0
   dcfe2:	f240 8105 	bls.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dcfe6:	4b87      	ldr	r3, [pc, #540]	; (dd204 <mbedtls_x509_crt_info+0x614>)
   dcfe8:	1a24      	subs	r4, r4, r0
   dcfea:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
   dcfec:	f019 0f02 	tst.w	r9, #2
   dcff0:	d00d      	beq.n	dd00e <mbedtls_x509_crt_info+0x41e>
   dcff2:	4a8a      	ldr	r2, [pc, #552]	; (dd21c <mbedtls_x509_crt_info+0x62c>)
   dcff4:	4621      	mov	r1, r4
   dcff6:	4628      	mov	r0, r5
   dcff8:	f008 f9e0 	bl	e53bc <snprintf>
   dcffc:	2800      	cmp	r0, #0
   dcffe:	f2c0 80f7 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dd002:	4284      	cmp	r4, r0
   dd004:	f240 80f4 	bls.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dd008:	4b7e      	ldr	r3, [pc, #504]	; (dd204 <mbedtls_x509_crt_info+0x614>)
   dd00a:	1a24      	subs	r4, r4, r0
   dd00c:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA,  "Object Signing CA" );
   dd00e:	f019 0f01 	tst.w	r9, #1
   dd012:	d00c      	beq.n	dd02e <mbedtls_x509_crt_info+0x43e>
   dd014:	4a82      	ldr	r2, [pc, #520]	; (dd220 <mbedtls_x509_crt_info+0x630>)
   dd016:	4621      	mov	r1, r4
   dd018:	4628      	mov	r0, r5
   dd01a:	f008 f9cf 	bl	e53bc <snprintf>
   dd01e:	2800      	cmp	r0, #0
   dd020:	f2c0 80e6 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dd024:	4284      	cmp	r4, r0
   dd026:	f240 80e3 	bls.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dd02a:	1a24      	subs	r4, r4, r0
   dd02c:	4405      	add	r5, r0

        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
   dd02e:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   dd032:	075a      	lsls	r2, r3, #29
   dd034:	f140 80a0 	bpl.w	dd178 <mbedtls_x509_crt_info+0x588>
    {
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
   dd038:	4643      	mov	r3, r8
   dd03a:	4a7a      	ldr	r2, [pc, #488]	; (dd224 <mbedtls_x509_crt_info+0x634>)
   dd03c:	4621      	mov	r1, r4
   dd03e:	4628      	mov	r0, r5
   dd040:	f008 f9bc 	bl	e53bc <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   dd044:	2800      	cmp	r0, #0
   dd046:	f2c0 80d3 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dd04a:	42a0      	cmp	r0, r4
   dd04c:	f080 80d0 	bcs.w	dd1f0 <mbedtls_x509_crt_info+0x600>

        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
   dd050:	f8d6 9104 	ldr.w	r9, [r6, #260]	; 0x104
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
   dd054:	4b69      	ldr	r3, [pc, #420]	; (dd1fc <mbedtls_x509_crt_info+0x60c>)
   dd056:	f019 0f80 	tst.w	r9, #128	; 0x80
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
    {
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
   dd05a:	eba4 0400 	sub.w	r4, r4, r0
   dd05e:	4405      	add	r5, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
   dd060:	d00d      	beq.n	dd07e <mbedtls_x509_crt_info+0x48e>
   dd062:	4a71      	ldr	r2, [pc, #452]	; (dd228 <mbedtls_x509_crt_info+0x638>)
   dd064:	4621      	mov	r1, r4
   dd066:	4628      	mov	r0, r5
   dd068:	f008 f9a8 	bl	e53bc <snprintf>
   dd06c:	2800      	cmp	r0, #0
   dd06e:	f2c0 80bf 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dd072:	4284      	cmp	r4, r0
   dd074:	f240 80bc 	bls.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dd078:	4b62      	ldr	r3, [pc, #392]	; (dd204 <mbedtls_x509_crt_info+0x614>)
   dd07a:	1a24      	subs	r4, r4, r0
   dd07c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
   dd07e:	f019 0f40 	tst.w	r9, #64	; 0x40
   dd082:	d00d      	beq.n	dd0a0 <mbedtls_x509_crt_info+0x4b0>
   dd084:	4a69      	ldr	r2, [pc, #420]	; (dd22c <mbedtls_x509_crt_info+0x63c>)
   dd086:	4621      	mov	r1, r4
   dd088:	4628      	mov	r0, r5
   dd08a:	f008 f997 	bl	e53bc <snprintf>
   dd08e:	2800      	cmp	r0, #0
   dd090:	f2c0 80ae 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dd094:	4284      	cmp	r4, r0
   dd096:	f240 80ab 	bls.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dd09a:	4b5a      	ldr	r3, [pc, #360]	; (dd204 <mbedtls_x509_crt_info+0x614>)
   dd09c:	1a24      	subs	r4, r4, r0
   dd09e:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
   dd0a0:	f019 0f20 	tst.w	r9, #32
   dd0a4:	d00d      	beq.n	dd0c2 <mbedtls_x509_crt_info+0x4d2>
   dd0a6:	4a62      	ldr	r2, [pc, #392]	; (dd230 <mbedtls_x509_crt_info+0x640>)
   dd0a8:	4621      	mov	r1, r4
   dd0aa:	4628      	mov	r0, r5
   dd0ac:	f008 f986 	bl	e53bc <snprintf>
   dd0b0:	2800      	cmp	r0, #0
   dd0b2:	f2c0 809d 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dd0b6:	4284      	cmp	r4, r0
   dd0b8:	f240 809a 	bls.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dd0bc:	4b51      	ldr	r3, [pc, #324]	; (dd204 <mbedtls_x509_crt_info+0x614>)
   dd0be:	1a24      	subs	r4, r4, r0
   dd0c0:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
   dd0c2:	f019 0f10 	tst.w	r9, #16
   dd0c6:	d00d      	beq.n	dd0e4 <mbedtls_x509_crt_info+0x4f4>
   dd0c8:	4a5a      	ldr	r2, [pc, #360]	; (dd234 <mbedtls_x509_crt_info+0x644>)
   dd0ca:	4621      	mov	r1, r4
   dd0cc:	4628      	mov	r0, r5
   dd0ce:	f008 f975 	bl	e53bc <snprintf>
   dd0d2:	2800      	cmp	r0, #0
   dd0d4:	f2c0 808c 	blt.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dd0d8:	4284      	cmp	r4, r0
   dd0da:	f240 8089 	bls.w	dd1f0 <mbedtls_x509_crt_info+0x600>
   dd0de:	4b49      	ldr	r3, [pc, #292]	; (dd204 <mbedtls_x509_crt_info+0x614>)
   dd0e0:	1a24      	subs	r4, r4, r0
   dd0e2:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
   dd0e4:	f019 0f08 	tst.w	r9, #8
   dd0e8:	d00b      	beq.n	dd102 <mbedtls_x509_crt_info+0x512>
   dd0ea:	4a53      	ldr	r2, [pc, #332]	; (dd238 <mbedtls_x509_crt_info+0x648>)
   dd0ec:	4621      	mov	r1, r4
   dd0ee:	4628      	mov	r0, r5
   dd0f0:	f008 f964 	bl	e53bc <snprintf>
   dd0f4:	2800      	cmp	r0, #0
   dd0f6:	db7b      	blt.n	dd1f0 <mbedtls_x509_crt_info+0x600>
   dd0f8:	4284      	cmp	r4, r0
   dd0fa:	d979      	bls.n	dd1f0 <mbedtls_x509_crt_info+0x600>
   dd0fc:	4b41      	ldr	r3, [pc, #260]	; (dd204 <mbedtls_x509_crt_info+0x614>)
   dd0fe:	1a24      	subs	r4, r4, r0
   dd100:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
   dd102:	f019 0f04 	tst.w	r9, #4
   dd106:	d00b      	beq.n	dd120 <mbedtls_x509_crt_info+0x530>
   dd108:	4a4c      	ldr	r2, [pc, #304]	; (dd23c <mbedtls_x509_crt_info+0x64c>)
   dd10a:	4621      	mov	r1, r4
   dd10c:	4628      	mov	r0, r5
   dd10e:	f008 f955 	bl	e53bc <snprintf>
   dd112:	2800      	cmp	r0, #0
   dd114:	db6c      	blt.n	dd1f0 <mbedtls_x509_crt_info+0x600>
   dd116:	4284      	cmp	r4, r0
   dd118:	d96a      	bls.n	dd1f0 <mbedtls_x509_crt_info+0x600>
   dd11a:	4b3a      	ldr	r3, [pc, #232]	; (dd204 <mbedtls_x509_crt_info+0x614>)
   dd11c:	1a24      	subs	r4, r4, r0
   dd11e:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
   dd120:	f019 0f02 	tst.w	r9, #2
   dd124:	d00b      	beq.n	dd13e <mbedtls_x509_crt_info+0x54e>
   dd126:	4a46      	ldr	r2, [pc, #280]	; (dd240 <mbedtls_x509_crt_info+0x650>)
   dd128:	4621      	mov	r1, r4
   dd12a:	4628      	mov	r0, r5
   dd12c:	f008 f946 	bl	e53bc <snprintf>
   dd130:	2800      	cmp	r0, #0
   dd132:	db5d      	blt.n	dd1f0 <mbedtls_x509_crt_info+0x600>
   dd134:	4284      	cmp	r4, r0
   dd136:	d95b      	bls.n	dd1f0 <mbedtls_x509_crt_info+0x600>
   dd138:	4b32      	ldr	r3, [pc, #200]	; (dd204 <mbedtls_x509_crt_info+0x614>)
   dd13a:	1a24      	subs	r4, r4, r0
   dd13c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
   dd13e:	f019 0f01 	tst.w	r9, #1
   dd142:	d00b      	beq.n	dd15c <mbedtls_x509_crt_info+0x56c>
   dd144:	4a3f      	ldr	r2, [pc, #252]	; (dd244 <mbedtls_x509_crt_info+0x654>)
   dd146:	4621      	mov	r1, r4
   dd148:	4628      	mov	r0, r5
   dd14a:	f008 f937 	bl	e53bc <snprintf>
   dd14e:	2800      	cmp	r0, #0
   dd150:	db4e      	blt.n	dd1f0 <mbedtls_x509_crt_info+0x600>
   dd152:	4284      	cmp	r4, r0
   dd154:	d94c      	bls.n	dd1f0 <mbedtls_x509_crt_info+0x600>
   dd156:	4b2b      	ldr	r3, [pc, #172]	; (dd204 <mbedtls_x509_crt_info+0x614>)
   dd158:	1a24      	subs	r4, r4, r0
   dd15a:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DECIPHER_ONLY,        "Decipher Only" );
   dd15c:	f419 4f00 	tst.w	r9, #32768	; 0x8000
   dd160:	d00a      	beq.n	dd178 <mbedtls_x509_crt_info+0x588>
   dd162:	4a39      	ldr	r2, [pc, #228]	; (dd248 <mbedtls_x509_crt_info+0x658>)
   dd164:	4621      	mov	r1, r4
   dd166:	4628      	mov	r0, r5
   dd168:	f008 f928 	bl	e53bc <snprintf>
   dd16c:	2800      	cmp	r0, #0
   dd16e:	db3f      	blt.n	dd1f0 <mbedtls_x509_crt_info+0x600>
   dd170:	4284      	cmp	r4, r0
   dd172:	d93d      	bls.n	dd1f0 <mbedtls_x509_crt_info+0x600>
   dd174:	1a24      	subs	r4, r4, r0
   dd176:	4405      	add	r5, r0

        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
   dd178:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   dd17c:	051b      	lsls	r3, r3, #20
   dd17e:	d52b      	bpl.n	dd1d8 <mbedtls_x509_crt_info+0x5e8>
    {
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
   dd180:	4643      	mov	r3, r8
   dd182:	4a32      	ldr	r2, [pc, #200]	; (dd24c <mbedtls_x509_crt_info+0x65c>)
   dd184:	4621      	mov	r1, r4
   dd186:	4628      	mov	r0, r5
   dd188:	f008 f918 	bl	e53bc <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   dd18c:	2800      	cmp	r0, #0
   dd18e:	db2f      	blt.n	dd1f0 <mbedtls_x509_crt_info+0x600>
   dd190:	42a0      	cmp	r0, r4
   dd192:	d22d      	bcs.n	dd1f0 <mbedtls_x509_crt_info+0x600>
    int ret;
    const char *desc;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";
   dd194:	f8df 8064 	ldr.w	r8, [pc, #100]	; dd1fc <mbedtls_x509_crt_info+0x60c>

    while( cur != NULL )
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
            desc = "???";
   dd198:	f8df 90c0 	ldr.w	r9, [pc, #192]	; dd25c <mbedtls_x509_crt_info+0x66c>
    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
    {
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;

        if( ( ret = x509_info_ext_key_usage( &p, &n,
   dd19c:	f506 7684 	add.w	r6, r6, #264	; 0x108
static int x509_info_ext_key_usage( char **buf, size_t *size,
                                    const mbedtls_x509_sequence *extended_key_usage )
{
    int ret;
    const char *desc;
    size_t n = *size;
   dd1a0:	1a24      	subs	r4, r4, r0
    char *p = *buf;
   dd1a2:	4405      	add	r5, r0
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";

    while( cur != NULL )
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
   dd1a4:	a906      	add	r1, sp, #24
   dd1a6:	4630      	mov	r0, r6
   dd1a8:	f7fc f808 	bl	d91bc <mbedtls_oid_get_extended_key_usage>
   dd1ac:	b108      	cbz	r0, dd1b2 <mbedtls_x509_crt_info+0x5c2>
            desc = "???";
   dd1ae:	f8cd 9018 	str.w	r9, [sp, #24]

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
   dd1b2:	9b06      	ldr	r3, [sp, #24]
   dd1b4:	9300      	str	r3, [sp, #0]
   dd1b6:	4a26      	ldr	r2, [pc, #152]	; (dd250 <mbedtls_x509_crt_info+0x660>)
   dd1b8:	4643      	mov	r3, r8
   dd1ba:	4621      	mov	r1, r4
   dd1bc:	4628      	mov	r0, r5
   dd1be:	f008 f8fd 	bl	e53bc <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   dd1c2:	2800      	cmp	r0, #0
   dd1c4:	db14      	blt.n	dd1f0 <mbedtls_x509_crt_info+0x600>
   dd1c6:	42a0      	cmp	r0, r4
   dd1c8:	d212      	bcs.n	dd1f0 <mbedtls_x509_crt_info+0x600>

        sep = ", ";

        cur = cur->next;
   dd1ca:	68f6      	ldr	r6, [r6, #12]
            desc = "???";

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
        MBEDTLS_X509_SAFE_SNPRINTF;

        sep = ", ";
   dd1cc:	f8df 8034 	ldr.w	r8, [pc, #52]	; dd204 <mbedtls_x509_crt_info+0x614>
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
            desc = "???";

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
        MBEDTLS_X509_SAFE_SNPRINTF;
   dd1d0:	1a24      	subs	r4, r4, r0
   dd1d2:	4405      	add	r5, r0
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";

    while( cur != NULL )
   dd1d4:	2e00      	cmp	r6, #0
   dd1d6:	d1e5      	bne.n	dd1a4 <mbedtls_x509_crt_info+0x5b4>
        if( ( ret = x509_info_ext_key_usage( &p, &n,
                                             &crt->ext_key_usage ) ) != 0 )
            return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n" );
   dd1d8:	4a1e      	ldr	r2, [pc, #120]	; (dd254 <mbedtls_x509_crt_info+0x664>)
   dd1da:	4621      	mov	r1, r4
   dd1dc:	4628      	mov	r0, r5
   dd1de:	f008 f8ed 	bl	e53bc <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd1e2:	2800      	cmp	r0, #0
   dd1e4:	db04      	blt.n	dd1f0 <mbedtls_x509_crt_info+0x600>
   dd1e6:	4284      	cmp	r4, r0
   dd1e8:	d902      	bls.n	dd1f0 <mbedtls_x509_crt_info+0x600>

    return( (int) ( size - n ) );
   dd1ea:	1a20      	subs	r0, r4, r0
   dd1ec:	1a38      	subs	r0, r7, r0
   dd1ee:	e000      	b.n	dd1f2 <mbedtls_x509_crt_info+0x602>
    while( cur != NULL )
    {
        if( cur->buf.len + sep_len >= n )
        {
            *p = '\0';
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
   dd1f0:	4819      	ldr	r0, [pc, #100]	; (dd258 <mbedtls_x509_crt_info+0x668>)

    ret = mbedtls_snprintf( p, n, "\n" );
    MBEDTLS_X509_SAFE_SNPRINTF;

    return( (int) ( size - n ) );
}
   dd1f2:	b00d      	add	sp, #52	; 0x34
   dd1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd1f8:	000e9925 	.word	0x000e9925
   dd1fc:	000e87fd 	.word	0x000e87fd
   dd200:	000e993d 	.word	0x000e993d
   dd204:	000e8226 	.word	0x000e8226
   dd208:	000e994a 	.word	0x000e994a
   dd20c:	000e9957 	.word	0x000e9957
   dd210:	000e995f 	.word	0x000e995f
   dd214:	000e9970 	.word	0x000e9970
   dd218:	000e997b 	.word	0x000e997b
   dd21c:	000e9984 	.word	0x000e9984
   dd220:	000e998f 	.word	0x000e998f
   dd224:	000e99a3 	.word	0x000e99a3
   dd228:	000e99bb 	.word	0x000e99bb
   dd22c:	000e99cf 	.word	0x000e99cf
   dd230:	000e99e1 	.word	0x000e99e1
   dd234:	000e99f4 	.word	0x000e99f4
   dd238:	000e9a08 	.word	0x000e9a08
   dd23c:	000e9a18 	.word	0x000e9a18
   dd240:	000e9a28 	.word	0x000e9a28
   dd244:	000e9a33 	.word	0x000e9a33
   dd248:	000e9a43 	.word	0x000e9a43
   dd24c:	000e9a53 	.word	0x000e9a53
   dd250:	000e9a6b 	.word	0x000e9a6b
   dd254:	000e8a39 	.word	0x000e8a39
   dd258:	ffffd680 	.word	0xffffd680
   dd25c:	000e823d 	.word	0x000e823d

000dd260 <mbedtls_x509_crt_verify_info>:
    { 0, NULL }
};

int mbedtls_x509_crt_verify_info( char *buf, size_t size, const char *prefix,
                          uint32_t flags )
{
   dd260:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dd264:	4e1a      	ldr	r6, [pc, #104]	; (dd2d0 <mbedtls_x509_crt_verify_info+0x70>)
   dd266:	4607      	mov	r7, r0
   dd268:	460d      	mov	r5, r1
   dd26a:	4691      	mov	r9, r2
   dd26c:	4698      	mov	r8, r3
    int ret;
    const struct x509_crt_verify_string *cur;
    char *p = buf;
    size_t n = size;
   dd26e:	460c      	mov	r4, r1

    for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
   dd270:	f856 3c04 	ldr.w	r3, [r6, #-4]
   dd274:	b1cb      	cbz	r3, dd2aa <mbedtls_x509_crt_verify_info+0x4a>
    {
        if( ( flags & cur->code ) == 0 )
   dd276:	f856 2c08 	ldr.w	r2, [r6, #-8]
   dd27a:	ea18 0f02 	tst.w	r8, r2
   dd27e:	d012      	beq.n	dd2a6 <mbedtls_x509_crt_verify_info+0x46>
            continue;

        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
   dd280:	9300      	str	r3, [sp, #0]
   dd282:	4a14      	ldr	r2, [pc, #80]	; (dd2d4 <mbedtls_x509_crt_verify_info+0x74>)
   dd284:	464b      	mov	r3, r9
   dd286:	4621      	mov	r1, r4
   dd288:	4638      	mov	r0, r7
   dd28a:	f008 f897 	bl	e53bc <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   dd28e:	2800      	cmp	r0, #0
   dd290:	da01      	bge.n	dd296 <mbedtls_x509_crt_verify_info+0x36>
   dd292:	4811      	ldr	r0, [pc, #68]	; (dd2d8 <mbedtls_x509_crt_verify_info+0x78>)
   dd294:	e018      	b.n	dd2c8 <mbedtls_x509_crt_verify_info+0x68>
   dd296:	4284      	cmp	r4, r0
   dd298:	d9fb      	bls.n	dd292 <mbedtls_x509_crt_verify_info+0x32>
        flags ^= cur->code;
   dd29a:	f856 3c08 	ldr.w	r3, [r6, #-8]
    {
        if( ( flags & cur->code ) == 0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
        MBEDTLS_X509_SAFE_SNPRINTF;
   dd29e:	1a24      	subs	r4, r4, r0
   dd2a0:	4407      	add	r7, r0
        flags ^= cur->code;
   dd2a2:	ea88 0803 	eor.w	r8, r8, r3
   dd2a6:	3608      	adds	r6, #8
    int ret;
    const struct x509_crt_verify_string *cur;
    char *p = buf;
    size_t n = size;

    for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
   dd2a8:	e7e2      	b.n	dd270 <mbedtls_x509_crt_verify_info+0x10>
        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
        MBEDTLS_X509_SAFE_SNPRINTF;
        flags ^= cur->code;
    }

    if( flags != 0 )
   dd2aa:	f1b8 0f00 	cmp.w	r8, #0
   dd2ae:	d00a      	beq.n	dd2c6 <mbedtls_x509_crt_verify_info+0x66>
    {
        ret = mbedtls_snprintf( p, n, "%sUnknown reason "
                                       "(this should not happen)\n", prefix );
   dd2b0:	464b      	mov	r3, r9
   dd2b2:	4a0a      	ldr	r2, [pc, #40]	; (dd2dc <mbedtls_x509_crt_verify_info+0x7c>)
   dd2b4:	4621      	mov	r1, r4
   dd2b6:	4638      	mov	r0, r7
   dd2b8:	f008 f880 	bl	e53bc <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   dd2bc:	2800      	cmp	r0, #0
   dd2be:	dbe8      	blt.n	dd292 <mbedtls_x509_crt_verify_info+0x32>
   dd2c0:	4284      	cmp	r4, r0
   dd2c2:	d9e6      	bls.n	dd292 <mbedtls_x509_crt_verify_info+0x32>
   dd2c4:	1a24      	subs	r4, r4, r0
    }

    return( (int) ( size - n ) );
   dd2c6:	1b28      	subs	r0, r5, r4
}
   dd2c8:	b003      	add	sp, #12
   dd2ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dd2ce:	bf00      	nop
   dd2d0:	000e9714 	.word	0x000e9714
   dd2d4:	000e9a70 	.word	0x000e9a70
   dd2d8:	ffffd680 	.word	0xffffd680
   dd2dc:	000e9a76 	.word	0x000e9a76

000dd2e0 <mbedtls_x509_crt_check_key_usage>:
{
    unsigned int usage_must, usage_may;
    unsigned int may_mask = MBEDTLS_X509_KU_ENCIPHER_ONLY
                          | MBEDTLS_X509_KU_DECIPHER_ONLY;

    if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
   dd2e0:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   dd2e4:	f013 0304 	ands.w	r3, r3, #4
   dd2e8:	d01a      	beq.n	dd320 <mbedtls_x509_crt_check_key_usage+0x40>
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
   dd2ea:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   dd2ee:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
   dd2f2:	f421 4000 	bic.w	r0, r1, #32768	; 0x8000
   dd2f6:	f023 0301 	bic.w	r3, r3, #1
   dd2fa:	f020 0001 	bic.w	r0, r0, #1
   dd2fe:	400b      	ands	r3, r1
   dd300:	4298      	cmp	r0, r3
   dd302:	d10c      	bne.n	dd31e <mbedtls_x509_crt_check_key_usage+0x3e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    usage_may = usage & may_mask;

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
   dd304:	430a      	orrs	r2, r1
   dd306:	f248 0301 	movw	r3, #32769	; 0x8001
   dd30a:	4013      	ands	r3, r2
   dd30c:	f248 0001 	movw	r0, #32769	; 0x8001
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   dd310:	4a04      	ldr	r2, [pc, #16]	; (dd324 <mbedtls_x509_crt_check_key_usage+0x44>)

    usage_may = usage & may_mask;

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
   dd312:	4008      	ands	r0, r1
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   dd314:	4298      	cmp	r0, r3
   dd316:	bf14      	ite	ne
   dd318:	4613      	movne	r3, r2
   dd31a:	2300      	moveq	r3, #0
   dd31c:	e000      	b.n	dd320 <mbedtls_x509_crt_check_key_usage+0x40>
   dd31e:	4b01      	ldr	r3, [pc, #4]	; (dd324 <mbedtls_x509_crt_check_key_usage+0x44>)

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    return( 0 );
}
   dd320:	4618      	mov	r0, r3
   dd322:	4770      	bx	lr
   dd324:	ffffd800 	.word	0xffffd800

000dd328 <mbedtls_x509_crt_check_extended_key_usage>:

#if defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)
int mbedtls_x509_crt_check_extended_key_usage( const mbedtls_x509_crt *crt,
                                       const char *usage_oid,
                                       size_t usage_len )
{
   dd328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const mbedtls_x509_sequence *cur;

    /* Extension is not mandatory, absent means no restriction */
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
   dd32a:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8

#if defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)
int mbedtls_x509_crt_check_extended_key_usage( const mbedtls_x509_crt *crt,
                                       const char *usage_oid,
                                       size_t usage_len )
{
   dd32e:	4604      	mov	r4, r0
    const mbedtls_x509_sequence *cur;

    /* Extension is not mandatory, absent means no restriction */
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
   dd330:	f413 6000 	ands.w	r0, r3, #2048	; 0x800

#if defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)
int mbedtls_x509_crt_check_extended_key_usage( const mbedtls_x509_crt *crt,
                                       const char *usage_oid,
                                       size_t usage_len )
{
   dd334:	460f      	mov	r7, r1
   dd336:	4616      	mov	r6, r2
    const mbedtls_x509_sequence *cur;

    /* Extension is not mandatory, absent means no restriction */
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
   dd338:	d016      	beq.n	dd368 <mbedtls_x509_crt_check_extended_key_usage+0x40>
        return( 0 );

    /*
     * Look for the requested usage (or wildcard ANY) in our list
     */
    for( cur = &crt->ext_key_usage; cur != NULL; cur = cur->next )
   dd33a:	f504 7484 	add.w	r4, r4, #264	; 0x108
    {
        const mbedtls_x509_buf *cur_oid = &cur->buf;

        if( cur_oid->len == usage_len &&
   dd33e:	6865      	ldr	r5, [r4, #4]
   dd340:	42b5      	cmp	r5, r6
   dd342:	d105      	bne.n	dd350 <mbedtls_x509_crt_check_extended_key_usage+0x28>
            memcmp( cur_oid->p, usage_oid, usage_len ) == 0 )
   dd344:	4632      	mov	r2, r6
   dd346:	4639      	mov	r1, r7
   dd348:	68a0      	ldr	r0, [r4, #8]
   dd34a:	f009 fdf1 	bl	e6f30 <memcmp>
     */
    for( cur = &crt->ext_key_usage; cur != NULL; cur = cur->next )
    {
        const mbedtls_x509_buf *cur_oid = &cur->buf;

        if( cur_oid->len == usage_len &&
   dd34e:	b158      	cbz	r0, dd368 <mbedtls_x509_crt_check_extended_key_usage+0x40>
            memcmp( cur_oid->p, usage_oid, usage_len ) == 0 )
        {
            return( 0 );
        }

        if( MBEDTLS_OID_CMP( MBEDTLS_OID_ANY_EXTENDED_KEY_USAGE, cur_oid ) == 0 )
   dd350:	2d04      	cmp	r5, #4
   dd352:	d105      	bne.n	dd360 <mbedtls_x509_crt_check_extended_key_usage+0x38>
   dd354:	462a      	mov	r2, r5
   dd356:	68a1      	ldr	r1, [r4, #8]
   dd358:	4804      	ldr	r0, [pc, #16]	; (dd36c <mbedtls_x509_crt_check_extended_key_usage+0x44>)
   dd35a:	f009 fde9 	bl	e6f30 <memcmp>
   dd35e:	b118      	cbz	r0, dd368 <mbedtls_x509_crt_check_extended_key_usage+0x40>
        return( 0 );

    /*
     * Look for the requested usage (or wildcard ANY) in our list
     */
    for( cur = &crt->ext_key_usage; cur != NULL; cur = cur->next )
   dd360:	68e4      	ldr	r4, [r4, #12]
   dd362:	2c00      	cmp	r4, #0
   dd364:	d1eb      	bne.n	dd33e <mbedtls_x509_crt_check_extended_key_usage+0x16>

        if( MBEDTLS_OID_CMP( MBEDTLS_OID_ANY_EXTENDED_KEY_USAGE, cur_oid ) == 0 )
            return( 0 );
    }

    return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   dd366:	4802      	ldr	r0, [pc, #8]	; (dd370 <mbedtls_x509_crt_check_extended_key_usage+0x48>)
}
   dd368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dd36a:	bf00      	nop
   dd36c:	000e9704 	.word	0x000e9704
   dd370:	ffffd800 	.word	0xffffd800

000dd374 <mbedtls_x509_crt_is_revoked>:
#if defined(MBEDTLS_X509_CRL_PARSE_C)
/*
 * Return 1 if the certificate is revoked, or 0 otherwise.
 */
int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl )
{
   dd374:	b538      	push	{r3, r4, r5, lr}
   dd376:	4605      	mov	r5, r0
    const mbedtls_x509_crl_entry *cur = &crl->entry;
   dd378:	f101 0484 	add.w	r4, r1, #132	; 0x84

    while( cur != NULL && cur->serial.len != 0 )
   dd37c:	b1a4      	cbz	r4, dd3a8 <mbedtls_x509_crt_is_revoked+0x34>
   dd37e:	6922      	ldr	r2, [r4, #16]
   dd380:	b1a2      	cbz	r2, dd3ac <mbedtls_x509_crt_is_revoked+0x38>
    {
        if( crt->serial.len == cur->serial.len &&
   dd382:	6a2b      	ldr	r3, [r5, #32]
   dd384:	429a      	cmp	r2, r3
   dd386:	d001      	beq.n	dd38c <mbedtls_x509_crt_is_revoked+0x18>
        {
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
                return( 1 );
        }

        cur = cur->next;
   dd388:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 */
int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl )
{
    const mbedtls_x509_crl_entry *cur = &crl->entry;

    while( cur != NULL && cur->serial.len != 0 )
   dd38a:	e7f7      	b.n	dd37c <mbedtls_x509_crt_is_revoked+0x8>
    {
        if( crt->serial.len == cur->serial.len &&
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
   dd38c:	6961      	ldr	r1, [r4, #20]
   dd38e:	6a68      	ldr	r0, [r5, #36]	; 0x24
   dd390:	f009 fdce 	bl	e6f30 <memcmp>
{
    const mbedtls_x509_crl_entry *cur = &crl->entry;

    while( cur != NULL && cur->serial.len != 0 )
    {
        if( crt->serial.len == cur->serial.len &&
   dd394:	2800      	cmp	r0, #0
   dd396:	d1f7      	bne.n	dd388 <mbedtls_x509_crt_is_revoked+0x14>
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
        {
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
   dd398:	f104 0018 	add.w	r0, r4, #24
   dd39c:	f7f8 ff48 	bl	d6230 <mbedtls_x509_time_is_past>
   dd3a0:	2800      	cmp	r0, #0
   dd3a2:	d0f1      	beq.n	dd388 <mbedtls_x509_crt_is_revoked+0x14>
                return( 1 );
   dd3a4:	2001      	movs	r0, #1
   dd3a6:	bd38      	pop	{r3, r4, r5, pc}
        }

        cur = cur->next;
    }

    return( 0 );
   dd3a8:	4620      	mov	r0, r4
   dd3aa:	bd38      	pop	{r3, r4, r5, pc}
   dd3ac:	4610      	mov	r0, r2
}
   dd3ae:	bd38      	pop	{r3, r4, r5, pc}

000dd3b0 <mbedtls_x509_crt_verify_restartable>:
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy,
                     mbedtls_x509_crt_restart_ctx *rs_ctx )
{
   dd3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd3b4:	b0b7      	sub	sp, #220	; 0xdc
   dd3b6:	4604      	mov	r4, r0
   dd3b8:	920c      	str	r2, [sp, #48]	; 0x30
    int ret;
    mbedtls_pk_type_t pk_type;
    mbedtls_x509_crt_verify_chain ver_chain;
    uint32_t ee_flags;

    *flags = 0;
   dd3ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy,
                     mbedtls_x509_crt_restart_ctx *rs_ctx )
{
   dd3bc:	9305      	str	r3, [sp, #20]
   dd3be:	9e40      	ldr	r6, [sp, #256]	; 0x100
   dd3c0:	9109      	str	r1, [sp, #36]	; 0x24
    int ret;
    mbedtls_pk_type_t pk_type;
    mbedtls_x509_crt_verify_chain ver_chain;
    uint32_t ee_flags;

    *flags = 0;
   dd3c2:	2300      	movs	r3, #0
   dd3c4:	6013      	str	r3, [r2, #0]
{
    size_t i;

    for( i = 0; i < MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE; i++ )
    {
        ver_chain->items[i].crt = NULL;
   dd3c6:	ad21      	add	r5, sp, #132	; 0x84
   dd3c8:	4618      	mov	r0, r3
        ver_chain->items[i].flags = (uint32_t) -1;
   dd3ca:	f04f 31ff 	mov.w	r1, #4294967295
{
    size_t i;

    for( i = 0; i < MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE; i++ )
    {
        ver_chain->items[i].crt = NULL;
   dd3ce:	5158      	str	r0, [r3, r5]
        ver_chain->items[i].flags = (uint32_t) -1;
   dd3d0:	18ea      	adds	r2, r5, r3
   dd3d2:	3308      	adds	r3, #8
static void x509_crt_verify_chain_reset(
    mbedtls_x509_crt_verify_chain *ver_chain )
{
    size_t i;

    for( i = 0; i < MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE; i++ )
   dd3d4:	2b50      	cmp	r3, #80	; 0x50
    {
        ver_chain->items[i].crt = NULL;
        ver_chain->items[i].flags = (uint32_t) -1;
   dd3d6:	6051      	str	r1, [r2, #4]
static void x509_crt_verify_chain_reset(
    mbedtls_x509_crt_verify_chain *ver_chain )
{
    size_t i;

    for( i = 0; i < MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE; i++ )
   dd3d8:	d1f9      	bne.n	dd3ce <mbedtls_x509_crt_verify_restartable+0x1e>

    *flags = 0;
    ee_flags = 0;
    x509_crt_verify_chain_reset( &ver_chain );

    if( profile == NULL )
   dd3da:	9b05      	ldr	r3, [sp, #20]
   dd3dc:	2b00      	cmp	r3, #0
   dd3de:	f000 8120 	beq.w	dd622 <mbedtls_x509_crt_verify_restartable+0x272>
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
        goto exit;
    }

    /* check name if requested */
    if( cn != NULL )
   dd3e2:	b34e      	cbz	r6, dd438 <mbedtls_x509_crt_verify_restartable+0x88>
                                  const char *cn,
                                  uint32_t *flags )
{
    const mbedtls_x509_name *name;
    const mbedtls_x509_sequence *cur;
    size_t cn_len = strlen( cn );
   dd3e4:	4630      	mov	r0, r6
   dd3e6:	f009 fe29 	bl	e703c <strlen>

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
   dd3ea:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   dd3ee:	069b      	lsls	r3, r3, #26
                                  const char *cn,
                                  uint32_t *flags )
{
    const mbedtls_x509_name *name;
    const mbedtls_x509_sequence *cur;
    size_t cn_len = strlen( cn );
   dd3f0:	4607      	mov	r7, r0

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
   dd3f2:	d50d      	bpl.n	dd410 <mbedtls_x509_crt_verify_restartable+0x60>
    {
        for( cur = &crt->subject_alt_names; cur != NULL; cur = cur->next )
   dd3f4:	f104 08e8 	add.w	r8, r4, #232	; 0xe8
        {
            if( x509_crt_check_cn( &cur->buf, cn, cn_len ) == 0 )
   dd3f8:	463a      	mov	r2, r7
   dd3fa:	4631      	mov	r1, r6
   dd3fc:	4640      	mov	r0, r8
   dd3fe:	f7ff fbbf 	bl	dcb80 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj>
   dd402:	b1d8      	cbz	r0, dd43c <mbedtls_x509_crt_verify_restartable+0x8c>
    const mbedtls_x509_sequence *cur;
    size_t cn_len = strlen( cn );

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
    {
        for( cur = &crt->subject_alt_names; cur != NULL; cur = cur->next )
   dd404:	f8d8 800c 	ldr.w	r8, [r8, #12]
   dd408:	f1b8 0f00 	cmp.w	r8, #0
   dd40c:	d1f4      	bne.n	dd3f8 <mbedtls_x509_crt_verify_restartable+0x48>
   dd40e:	e01c      	b.n	dd44a <mbedtls_x509_crt_verify_restartable+0x9a>
        if( cur == NULL )
            *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
    }
    else
    {
        for( name = &crt->subject; name != NULL; name = name->next )
   dd410:	f104 086c 	add.w	r8, r4, #108	; 0x6c
        {
            if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 &&
   dd414:	f8d8 2004 	ldr.w	r2, [r8, #4]
   dd418:	2a03      	cmp	r2, #3
   dd41a:	d111      	bne.n	dd440 <mbedtls_x509_crt_verify_restartable+0x90>
   dd41c:	f8d8 1008 	ldr.w	r1, [r8, #8]
   dd420:	4893      	ldr	r0, [pc, #588]	; (dd670 <mbedtls_x509_crt_verify_restartable+0x2c0>)
   dd422:	f009 fd85 	bl	e6f30 <memcmp>
   dd426:	b958      	cbnz	r0, dd440 <mbedtls_x509_crt_verify_restartable+0x90>
                x509_crt_check_cn( &name->val, cn, cn_len ) == 0 )
   dd428:	463a      	mov	r2, r7
   dd42a:	4631      	mov	r1, r6
   dd42c:	f108 000c 	add.w	r0, r8, #12
   dd430:	f7ff fba6 	bl	dcb80 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj>
    }
    else
    {
        for( name = &crt->subject; name != NULL; name = name->next )
        {
            if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 &&
   dd434:	b920      	cbnz	r0, dd440 <mbedtls_x509_crt_verify_restartable+0x90>
   dd436:	e001      	b.n	dd43c <mbedtls_x509_crt_verify_restartable+0x8c>
    mbedtls_pk_type_t pk_type;
    mbedtls_x509_crt_verify_chain ver_chain;
    uint32_t ee_flags;

    *flags = 0;
    ee_flags = 0;
   dd438:	46b3      	mov	fp, r6
   dd43a:	e008      	b.n	dd44e <mbedtls_x509_crt_verify_restartable+0x9e>
   dd43c:	4683      	mov	fp, r0
   dd43e:	e006      	b.n	dd44e <mbedtls_x509_crt_verify_restartable+0x9e>
        if( cur == NULL )
            *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
    }
    else
    {
        for( name = &crt->subject; name != NULL; name = name->next )
   dd440:	f8d8 8018 	ldr.w	r8, [r8, #24]
   dd444:	f1b8 0f00 	cmp.w	r8, #0
   dd448:	d1e4      	bne.n	dd414 <mbedtls_x509_crt_verify_restartable+0x64>
                break;
            }
        }

        if( name == NULL )
            *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
   dd44a:	f04f 0b04 	mov.w	fp, #4
    /* check name if requested */
    if( cn != NULL )
        x509_crt_verify_name( crt, cn, &ee_flags );

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
   dd44e:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
   dd452:	4630      	mov	r0, r6
   dd454:	f000 ff2c 	bl	de2b0 <mbedtls_pk_get_type>
   dd458:	9b05      	ldr	r3, [sp, #20]
   dd45a:	3304      	adds	r3, #4

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
   dd45c:	4601      	mov	r1, r0
   dd45e:	4618      	mov	r0, r3
   dd460:	9306      	str	r3, [sp, #24]
   dd462:	f7ff fb37 	bl	dcad4 <_ZL25x509_profile_check_md_algPK24mbedtls_x509_crt_profile17mbedtls_md_type_t.isra.1>
   dd466:	b108      	cbz	r0, dd46c <mbedtls_x509_crt_verify_restartable+0xbc>
        ee_flags |= MBEDTLS_X509_BADCERT_BAD_PK;
   dd468:	f44b 4b00 	orr.w	fp, fp, #32768	; 0x8000

    if( x509_profile_check_key( profile, &crt->pk ) != 0 )
   dd46c:	4631      	mov	r1, r6
   dd46e:	9805      	ldr	r0, [sp, #20]
   dd470:	f7ff fb5d 	bl	dcb2e <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context>
   dd474:	b108      	cbz	r0, dd47a <mbedtls_x509_crt_verify_restartable+0xca>
        ee_flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
   dd476:	f44b 3b80 	orr.w	fp, fp, #65536	; 0x10000
    {
        ver_chain->items[i].crt = NULL;
        ver_chain->items[i].flags = (uint32_t) -1;
    }

    ver_chain->len = 0;
   dd47a:	2700      	movs	r7, #0
        goto find_parent;
    }
#endif /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */

    child = crt;
    self_cnt = 0;
   dd47c:	9707      	str	r7, [sp, #28]
    parent_is_trusted = 0;
    child_is_trusted = 0;
   dd47e:	463e      	mov	r6, r7

    while( 1 ) {
        /* Add certificate to the verification chain */
        cur = &ver_chain->items[ver_chain->len];
        cur->crt = child;
   dd480:	ab21      	add	r3, sp, #132	; 0x84
        cur->flags = 0;
        ver_chain->len++;
        flags = &cur->flags;

        /* Check time-validity (all certificates) */
        if( mbedtls_x509_time_is_past( &child->valid_to ) )
   dd482:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
    child_is_trusted = 0;

    while( 1 ) {
        /* Add certificate to the verification chain */
        cur = &ver_chain->items[ver_chain->len];
        cur->crt = child;
   dd486:	f843 4037 	str.w	r4, [r3, r7, lsl #3]
        cur->flags = 0;
   dd48a:	2300      	movs	r3, #0
   dd48c:	606b      	str	r3, [r5, #4]
        ver_chain->len++;
   dd48e:	f107 0a01 	add.w	sl, r7, #1
        flags = &cur->flags;

        /* Check time-validity (all certificates) */
        if( mbedtls_x509_time_is_past( &child->valid_to ) )
   dd492:	f7f8 fecd 	bl	d6230 <mbedtls_x509_time_is_past>
   dd496:	b108      	cbz	r0, dd49c <mbedtls_x509_crt_verify_restartable+0xec>
            *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
   dd498:	2301      	movs	r3, #1
   dd49a:	606b      	str	r3, [r5, #4]

        if( mbedtls_x509_time_is_future( &child->valid_from ) )
   dd49c:	f104 008c 	add.w	r0, r4, #140	; 0x8c
   dd4a0:	f7f8 fec8 	bl	d6234 <mbedtls_x509_time_is_future>
   dd4a4:	b118      	cbz	r0, dd4ae <mbedtls_x509_crt_verify_restartable+0xfe>
            *flags |= MBEDTLS_X509_BADCERT_FUTURE;
   dd4a6:	686b      	ldr	r3, [r5, #4]
   dd4a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   dd4ac:	606b      	str	r3, [r5, #4]

        /* Stop here for trusted roots (but not for trusted EE certs) */
        if( child_is_trusted )
   dd4ae:	2e00      	cmp	r6, #0
   dd4b0:	f040 8194 	bne.w	dd7dc <mbedtls_x509_crt_verify_restartable+0x42c>
            return( 0 );

        /* Check signature algorithm: MD & PK algs */
        if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
   dd4b4:	f894 1128 	ldrb.w	r1, [r4, #296]	; 0x128
   dd4b8:	9805      	ldr	r0, [sp, #20]
   dd4ba:	f7ff fb0b 	bl	dcad4 <_ZL25x509_profile_check_md_algPK24mbedtls_x509_crt_profile17mbedtls_md_type_t.isra.1>
   dd4be:	b118      	cbz	r0, dd4c8 <mbedtls_x509_crt_verify_restartable+0x118>
            *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
   dd4c0:	686b      	ldr	r3, [r5, #4]
   dd4c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   dd4c6:	606b      	str	r3, [r5, #4]

        if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
   dd4c8:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
   dd4cc:	9806      	ldr	r0, [sp, #24]
   dd4ce:	f7ff fb01 	bl	dcad4 <_ZL25x509_profile_check_md_algPK24mbedtls_x509_crt_profile17mbedtls_md_type_t.isra.1>
   dd4d2:	b118      	cbz	r0, dd4dc <mbedtls_x509_crt_verify_restartable+0x12c>
            *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
   dd4d4:	686b      	ldr	r3, [r5, #4]
   dd4d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   dd4da:	606b      	str	r3, [r5, #4]

        /* Special case: EE certs that are locally trusted */
        if( ver_chain->len == 1 &&
   dd4dc:	f1ba 0f01 	cmp.w	sl, #1
   dd4e0:	d119      	bne.n	dd516 <mbedtls_x509_crt_verify_restartable+0x166>
                    mbedtls_x509_crt *trust_ca )
{
    mbedtls_x509_crt *cur;

    /* must be self-issued */
    if( x509_name_cmp( &crt->issuer, &crt->subject ) != 0 )
   dd4e2:	f104 016c 	add.w	r1, r4, #108	; 0x6c
   dd4e6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   dd4ea:	f7ff fab3 	bl	dca54 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
   dd4ee:	b978      	cbnz	r0, dd510 <mbedtls_x509_crt_verify_restartable+0x160>
   dd4f0:	9e09      	ldr	r6, [sp, #36]	; 0x24
        return( -1 );

    /* look for an exact match with trusted cert */
    for( cur = trust_ca; cur != NULL; cur = cur->next )
   dd4f2:	b186      	cbz	r6, dd516 <mbedtls_x509_crt_verify_restartable+0x166>
    {
        if( crt->raw.len == cur->raw.len &&
   dd4f4:	6862      	ldr	r2, [r4, #4]
   dd4f6:	6873      	ldr	r3, [r6, #4]
   dd4f8:	429a      	cmp	r2, r3
   dd4fa:	d106      	bne.n	dd50a <mbedtls_x509_crt_verify_restartable+0x15a>
            memcmp( crt->raw.p, cur->raw.p, crt->raw.len ) == 0 )
   dd4fc:	68b1      	ldr	r1, [r6, #8]
   dd4fe:	68a0      	ldr	r0, [r4, #8]
   dd500:	f009 fd16 	bl	e6f30 <memcmp>
        return( -1 );

    /* look for an exact match with trusted cert */
    for( cur = trust_ca; cur != NULL; cur = cur->next )
    {
        if( crt->raw.len == cur->raw.len &&
   dd504:	2800      	cmp	r0, #0
   dd506:	f000 8169 	beq.w	dd7dc <mbedtls_x509_crt_verify_restartable+0x42c>
    /* must be self-issued */
    if( x509_name_cmp( &crt->issuer, &crt->subject ) != 0 )
        return( -1 );

    /* look for an exact match with trusted cert */
    for( cur = trust_ca; cur != NULL; cur = cur->next )
   dd50a:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
   dd50e:	e7f0      	b.n	dd4f2 <mbedtls_x509_crt_verify_restartable+0x142>
                    mbedtls_x509_crt *trust_ca )
{
    mbedtls_x509_crt *cur;

    /* must be self-issued */
    if( x509_name_cmp( &crt->issuer, &crt->subject ) != 0 )
   dd510:	f8cd a010 	str.w	sl, [sp, #16]
   dd514:	e001      	b.n	dd51a <mbedtls_x509_crt_verify_restartable+0x16a>
        return( -1 );

    /* look for an exact match with trusted cert */
    for( cur = trust_ca; cur != NULL; cur = cur->next )
   dd516:	2301      	movs	r3, #1
   dd518:	9304      	str	r3, [sp, #16]
                                  int top )
{
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
   dd51a:	f104 034c 	add.w	r3, r4, #76	; 0x4c
   dd51e:	930d      	str	r3, [sp, #52]	; 0x34
        rs_ctx->parent_is_trusted = -1;
    }
#endif

    while( 1 ) {
        search_list = *parent_is_trusted ? trust_ca : child->next;
   dd520:	9b04      	ldr	r3, [sp, #16]
   dd522:	b913      	cbnz	r3, dd52a <mbedtls_x509_crt_verify_restartable+0x17a>
   dd524:	f8d4 6130 	ldr.w	r6, [r4, #304]	; 0x130
   dd528:	e000      	b.n	dd52c <mbedtls_x509_crt_verify_restartable+0x17c>
   dd52a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   dd52c:	2300      	movs	r3, #0
   dd52e:	9308      	str	r3, [sp, #32]
   dd530:	4698      	mov	r8, r3
#endif

    fallback_parent = NULL;
    fallback_signature_is_good = 0;

    for( parent = candidates; parent != NULL; parent = parent->next )
   dd532:	2e00      	cmp	r6, #0
   dd534:	d06b      	beq.n	dd60e <mbedtls_x509_crt_verify_restartable+0x25e>
                                  int top )
{
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
   dd536:	f106 016c 	add.w	r1, r6, #108	; 0x6c
   dd53a:	980d      	ldr	r0, [sp, #52]	; 0x34
   dd53c:	f7ff fa8a 	bl	dca54 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
   dd540:	2800      	cmp	r0, #0
   dd542:	d161      	bne.n	dd608 <mbedtls_x509_crt_verify_restartable+0x258>

    /* Parent must have the basicConstraints CA bit set as a general rule */
    need_ca_bit = 1;

    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
   dd544:	9b04      	ldr	r3, [sp, #16]
   dd546:	b113      	cbz	r3, dd54e <mbedtls_x509_crt_verify_restartable+0x19e>
   dd548:	69b3      	ldr	r3, [r6, #24]
   dd54a:	2b02      	cmp	r3, #2
   dd54c:	dd09      	ble.n	dd562 <mbedtls_x509_crt_verify_restartable+0x1b2>
        need_ca_bit = 0;

    if( need_ca_bit && ! parent->ca_istrue )
   dd54e:	f8d6 30fc 	ldr.w	r3, [r6, #252]	; 0xfc
   dd552:	2b00      	cmp	r3, #0
   dd554:	d058      	beq.n	dd608 <mbedtls_x509_crt_verify_restartable+0x258>
        return( -1 );

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( need_ca_bit &&
        mbedtls_x509_crt_check_key_usage( parent, MBEDTLS_X509_KU_KEY_CERT_SIGN ) != 0 )
   dd556:	2104      	movs	r1, #4
   dd558:	4630      	mov	r0, r6
   dd55a:	f7ff fec1 	bl	dd2e0 <mbedtls_x509_crt_check_key_usage>
    fallback_signature_is_good = 0;

    for( parent = candidates; parent != NULL; parent = parent->next )
    {
        /* basic parenting skills (name, CA bit, key usage) */
        if( x509_crt_check_parent( child, parent, top ) != 0 )
   dd55e:	2800      	cmp	r0, #0
   dd560:	d152      	bne.n	dd608 <mbedtls_x509_crt_verify_restartable+0x258>
            continue;

        /* +1 because stored max_pathlen is 1 higher that the actual value */
        if( parent->max_pathlen > 0 &&
   dd562:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
   dd566:	2b00      	cmp	r3, #0
   dd568:	dd04      	ble.n	dd574 <mbedtls_x509_crt_verify_restartable+0x1c4>
   dd56a:	9a07      	ldr	r2, [sp, #28]
   dd56c:	ebc2 020a 	rsb	r2, r2, sl
   dd570:	4293      	cmp	r3, r2
   dd572:	d349      	bcc.n	dd608 <mbedtls_x509_crt_verify_restartable+0x258>
                                     mbedtls_x509_crt_restart_ctx *rs_ctx )
{
    const mbedtls_md_info_t *md_info;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];

    md_info = mbedtls_md_info_from_type( child->sig_md );
   dd574:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   dd578:	f7fe fe56 	bl	dc228 <mbedtls_md_info_from_type>
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
   dd57c:	ab11      	add	r3, sp, #68	; 0x44
   dd57e:	6922      	ldr	r2, [r4, #16]
   dd580:	6961      	ldr	r1, [r4, #20]
                                     mbedtls_x509_crt_restart_ctx *rs_ctx )
{
    const mbedtls_md_info_t *md_info;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];

    md_info = mbedtls_md_info_from_type( child->sig_md );
   dd582:	900a      	str	r0, [sp, #40]	; 0x28
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
   dd584:	f7fe febc 	bl	dc300 <mbedtls_md>
   dd588:	b110      	cbz	r0, dd590 <mbedtls_x509_crt_verify_restartable+0x1e0>
    {
        /* Note: this can't happen except after an internal error */
        return( -1 );
   dd58a:	f04f 30ff 	mov.w	r0, #4294967295
   dd58e:	e023      	b.n	dd5d8 <mbedtls_x509_crt_verify_restartable+0x228>
    }

    /* Skip expensive computation on obvious mismatch */
    if( ! mbedtls_pk_can_do( &parent->pk, child->sig_pk ) )
   dd590:	f106 09bc 	add.w	r9, r6, #188	; 0xbc
   dd594:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
   dd598:	4648      	mov	r0, r9
   dd59a:	f000 fd95 	bl	de0c8 <mbedtls_pk_can_do>
   dd59e:	2800      	cmp	r0, #0
   dd5a0:	d0f3      	beq.n	dd58a <mbedtls_x509_crt_verify_restartable+0x1da>
    }
#else
    (void) rs_ctx;
#endif

    return( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
   dd5a2:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   dd5a6:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   dd5aa:	930b      	str	r3, [sp, #44]	; 0x2c
                child->sig_md, hash, mbedtls_md_get_size( md_info ),
   dd5ac:	980a      	ldr	r0, [sp, #40]	; 0x28
   dd5ae:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    }
#else
    (void) rs_ctx;
#endif

    return( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
   dd5b2:	910f      	str	r1, [sp, #60]	; 0x3c
                child->sig_md, hash, mbedtls_md_get_size( md_info ),
   dd5b4:	930e      	str	r3, [sp, #56]	; 0x38
   dd5b6:	f7fe ff6f 	bl	dc498 <mbedtls_md_get_size>
                child->sig.p, child->sig.len ) );
   dd5ba:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   dd5be:	9203      	str	r2, [sp, #12]
   dd5c0:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   dd5c4:	9202      	str	r2, [sp, #8]
   dd5c6:	ab11      	add	r3, sp, #68	; 0x44
   dd5c8:	9001      	str	r0, [sp, #4]
   dd5ca:	9300      	str	r3, [sp, #0]
   dd5cc:	464a      	mov	r2, r9
   dd5ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   dd5d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   dd5d2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   dd5d4:	f000 fe08 	bl	de1e8 <mbedtls_pk_verify_ext>
#else
        (void) ret;
#endif

        signature_is_good = ret == 0;
        if( top && ! signature_is_good )
   dd5d8:	9b04      	ldr	r3, [sp, #16]
   dd5da:	b103      	cbz	r3, dd5de <mbedtls_x509_crt_verify_restartable+0x22e>
   dd5dc:	b9a0      	cbnz	r0, dd608 <mbedtls_x509_crt_verify_restartable+0x258>
        }
#else
        (void) ret;
#endif

        signature_is_good = ret == 0;
   dd5de:	fab0 f980 	clz	r9, r0
        if( top && ! signature_is_good )
            continue;

        /* optional time check */
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
   dd5e2:	f106 00a4 	add.w	r0, r6, #164	; 0xa4
        }
#else
        (void) ret;
#endif

        signature_is_good = ret == 0;
   dd5e6:	ea4f 1959 	mov.w	r9, r9, lsr #5
        if( top && ! signature_is_good )
            continue;

        /* optional time check */
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
   dd5ea:	f7f8 fe21 	bl	d6230 <mbedtls_x509_time_is_past>
   dd5ee:	b928      	cbnz	r0, dd5fc <mbedtls_x509_crt_verify_restartable+0x24c>
            mbedtls_x509_time_is_future( &parent->valid_from ) )
   dd5f0:	f106 008c 	add.w	r0, r6, #140	; 0x8c
   dd5f4:	f7f8 fe1e 	bl	d6234 <mbedtls_x509_time_is_future>
        signature_is_good = ret == 0;
        if( top && ! signature_is_good )
            continue;

        /* optional time check */
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
   dd5f8:	2800      	cmp	r0, #0
   dd5fa:	d040      	beq.n	dd67e <mbedtls_x509_crt_verify_restartable+0x2ce>
            mbedtls_x509_time_is_future( &parent->valid_from ) )
        {
            if( fallback_parent == NULL )
   dd5fc:	f1b8 0f00 	cmp.w	r8, #0
   dd600:	d102      	bne.n	dd608 <mbedtls_x509_crt_verify_restartable+0x258>
        }
#else
        (void) ret;
#endif

        signature_is_good = ret == 0;
   dd602:	f8cd 9020 	str.w	r9, [sp, #32]

        /* optional time check */
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
            mbedtls_x509_time_is_future( &parent->valid_from ) )
        {
            if( fallback_parent == NULL )
   dd606:	46b0      	mov	r8, r6
#endif

    fallback_parent = NULL;
    fallback_signature_is_good = 0;

    for( parent = candidates; parent != NULL; parent = parent->next )
   dd608:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
   dd60c:	e791      	b.n	dd532 <mbedtls_x509_crt_verify_restartable+0x182>
#else
        (void) ret;
#endif

        /* stop here if found or already in second iteration */
        if( *parent != NULL || *parent_is_trusted == 0 )
   dd60e:	f1b8 0f00 	cmp.w	r8, #0
   dd612:	d131      	bne.n	dd678 <mbedtls_x509_crt_verify_restartable+0x2c8>
   dd614:	9b04      	ldr	r3, [sp, #16]
   dd616:	2b00      	cmp	r3, #0
   dd618:	f000 8095 	beq.w	dd746 <mbedtls_x509_crt_verify_restartable+0x396>
            break;

        /* prepare second iteration */
        *parent_is_trusted = 0;
   dd61c:	f8cd 8010 	str.w	r8, [sp, #16]
   dd620:	e780      	b.n	dd524 <mbedtls_x509_crt_verify_restartable+0x174>
    ee_flags = 0;
    x509_crt_verify_chain_reset( &ver_chain );

    if( profile == NULL )
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
   dd622:	4814      	ldr	r0, [pc, #80]	; (dd674 <mbedtls_x509_crt_verify_restartable+0x2c4>)
   dd624:	e01f      	b.n	dd666 <mbedtls_x509_crt_verify_restartable+0x2b6>

        if( NULL != f_vrfy )
            if( ( ret = f_vrfy( p_vrfy, cur->crt, (int) i-1, &cur_flags ) ) != 0 )
                return( ret );

        *flags |= cur_flags;
   dd626:	9b41      	ldr	r3, [sp, #260]	; 0x104
   dd628:	681a      	ldr	r2, [r3, #0]
   dd62a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   dd62c:	4313      	orrs	r3, r2
   dd62e:	9a41      	ldr	r2, [sp, #260]	; 0x104
   dd630:	3d08      	subs	r5, #8
   dd632:	6013      	str	r3, [r2, #0]
   dd634:	4622      	mov	r2, r4
    int ret;
    unsigned i;
    uint32_t cur_flags;
    const mbedtls_x509_crt_verify_chain_item *cur;

    for( i = ver_chain->len; i != 0; --i )
   dd636:	2c00      	cmp	r4, #0
   dd638:	f000 80da 	beq.w	dd7f0 <mbedtls_x509_crt_verify_restartable+0x440>
    {
        cur = &ver_chain->items[i-1];
        cur_flags = cur->flags;
   dd63c:	682b      	ldr	r3, [r5, #0]
   dd63e:	9311      	str	r3, [sp, #68]	; 0x44

        if( NULL != f_vrfy )
   dd640:	9b42      	ldr	r3, [sp, #264]	; 0x108
   dd642:	1e54      	subs	r4, r2, #1
   dd644:	2b00      	cmp	r3, #0
   dd646:	d0ee      	beq.n	dd626 <mbedtls_x509_crt_verify_restartable+0x276>
            if( ( ret = f_vrfy( p_vrfy, cur->crt, (int) i-1, &cur_flags ) ) != 0 )
   dd648:	ab11      	add	r3, sp, #68	; 0x44
   dd64a:	4622      	mov	r2, r4
   dd64c:	f855 1c04 	ldr.w	r1, [r5, #-4]
   dd650:	9843      	ldr	r0, [sp, #268]	; 0x10c
   dd652:	9e42      	ldr	r6, [sp, #264]	; 0x108
   dd654:	47b0      	blx	r6
   dd656:	2800      	cmp	r0, #0
   dd658:	d0e5      	beq.n	dd626 <mbedtls_x509_crt_verify_restartable+0x276>
#endif

    /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
   dd65a:	f510 5f1c 	cmn.w	r0, #9984	; 0x2700
   dd65e:	d070      	beq.n	dd742 <mbedtls_x509_crt_verify_restartable+0x392>
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;

    if( ret != 0 )
   dd660:	2800      	cmp	r0, #0
   dd662:	f000 80c5 	beq.w	dd7f0 <mbedtls_x509_crt_verify_restartable+0x440>
    {
        *flags = (uint32_t) -1;
   dd666:	9a41      	ldr	r2, [sp, #260]	; 0x104
   dd668:	f04f 33ff 	mov.w	r3, #4294967295
   dd66c:	6013      	str	r3, [r2, #0]
        return( ret );
   dd66e:	e0c5      	b.n	dd7fc <mbedtls_x509_crt_verify_restartable+0x44c>
   dd670:	000e8c2d 	.word	0x000e8c2d
   dd674:	ffffd800 	.word	0xffffd800
#else
        (void) ret;
#endif

        /* stop here if found or already in second iteration */
        if( *parent != NULL || *parent_is_trusted == 0 )
   dd678:	f8dd 9020 	ldr.w	r9, [sp, #32]
   dd67c:	4646      	mov	r6, r8
        }

        /* Count intermediate self-issued (not necessarily self-signed) certs.
         * These can occur with some strategies for key rollover, see [SIRO],
         * and should be excluded from max_pathlen checks. */
        if( ver_chain->len != 1 &&
   dd67e:	f1ba 0f01 	cmp.w	sl, #1
   dd682:	d00c      	beq.n	dd69e <mbedtls_x509_crt_verify_restartable+0x2ee>
            x509_name_cmp( &child->issuer, &child->subject ) == 0 )
   dd684:	f104 016c 	add.w	r1, r4, #108	; 0x6c
   dd688:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   dd68c:	f7ff f9e2 	bl	dca54 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
        }

        /* Count intermediate self-issued (not necessarily self-signed) certs.
         * These can occur with some strategies for key rollover, see [SIRO],
         * and should be excluded from max_pathlen checks. */
        if( ver_chain->len != 1 &&
   dd690:	2800      	cmp	r0, #0
   dd692:	d062      	beq.n	dd75a <mbedtls_x509_crt_verify_restartable+0x3aa>
            self_cnt++;
        }

        /* path_cnt is 0 for the first intermediate CA,
         * and if parent is trusted it's not an intermediate CA */
        if( ! parent_is_trusted &&
   dd694:	9b04      	ldr	r3, [sp, #16]
   dd696:	b913      	cbnz	r3, dd69e <mbedtls_x509_crt_verify_restartable+0x2ee>
   dd698:	f1ba 0f08 	cmp.w	sl, #8
   dd69c:	d851      	bhi.n	dd742 <mbedtls_x509_crt_verify_restartable+0x392>
            /* return immediately to avoid overflow the chain array */
            return( MBEDTLS_ERR_X509_FATAL_ERROR );
        }

        /* signature was checked while searching parent */
        if( ! signature_is_good )
   dd69e:	f1b9 0f00 	cmp.w	r9, #0
   dd6a2:	d103      	bne.n	dd6ac <mbedtls_x509_crt_verify_restartable+0x2fc>
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
   dd6a4:	686b      	ldr	r3, [r5, #4]
   dd6a6:	f043 0308 	orr.w	r3, r3, #8
   dd6aa:	606b      	str	r3, [r5, #4]

        /* check size of signing key */
        if( x509_profile_check_key( profile, &parent->pk ) != 0 )
   dd6ac:	f106 09bc 	add.w	r9, r6, #188	; 0xbc
   dd6b0:	4649      	mov	r1, r9
   dd6b2:	9805      	ldr	r0, [sp, #20]
   dd6b4:	f7ff fa3b 	bl	dcb2e <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context>
   dd6b8:	b118      	cbz	r0, dd6c2 <mbedtls_x509_crt_verify_restartable+0x312>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
   dd6ba:	686b      	ldr	r3, [r5, #4]
   dd6bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   dd6c0:	606b      	str	r3, [r5, #4]
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
            x509_name_cmp( &crl_list->issuer, &ca->subject ) != 0 )
   dd6c2:	f106 036c 	add.w	r3, r6, #108	; 0x6c

        /* optional time check */
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
            mbedtls_x509_time_is_future( &parent->valid_from ) )
        {
            if( fallback_parent == NULL )
   dd6c6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
            x509_name_cmp( &crl_list->issuer, &ca->subject ) != 0 )
   dd6ca:	930b      	str	r3, [sp, #44]	; 0x2c

        /* optional time check */
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
            mbedtls_x509_time_is_future( &parent->valid_from ) )
        {
            if( fallback_parent == NULL )
   dd6cc:	2700      	movs	r7, #0
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
        return( flags );

    while( crl_list != NULL )
   dd6ce:	f1b8 0f00 	cmp.w	r8, #0
   dd6d2:	d02e      	beq.n	dd732 <mbedtls_x509_crt_verify_restartable+0x382>
    {
        if( crl_list->version == 0 ||
   dd6d4:	f8d8 3018 	ldr.w	r3, [r8, #24]
   dd6d8:	2b00      	cmp	r3, #0
   dd6da:	d07c      	beq.n	dd7d6 <mbedtls_x509_crt_verify_restartable+0x426>
            x509_name_cmp( &crl_list->issuer, &ca->subject ) != 0 )
   dd6dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   dd6de:	f108 0034 	add.w	r0, r8, #52	; 0x34
   dd6e2:	f7ff f9b7 	bl	dca54 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
    if( ca == NULL )
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
   dd6e6:	2800      	cmp	r0, #0
   dd6e8:	d175      	bne.n	dd7d6 <mbedtls_x509_crt_verify_restartable+0x426>

        /*
         * Check if the CA is configured to sign CRLs
         */
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
        if( mbedtls_x509_crt_check_key_usage( ca,
   dd6ea:	2102      	movs	r1, #2
   dd6ec:	4630      	mov	r0, r6
   dd6ee:	f7ff fdf7 	bl	dd2e0 <mbedtls_x509_crt_check_key_usage>
   dd6f2:	b9e0      	cbnz	r0, dd72e <mbedtls_x509_crt_verify_restartable+0x37e>
#endif

        /*
         * Check if CRL is correctly signed by the trusted CA
         */
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
   dd6f4:	f898 20e8 	ldrb.w	r2, [r8, #232]	; 0xe8
   dd6f8:	9805      	ldr	r0, [sp, #20]
   dd6fa:	4611      	mov	r1, r2
   dd6fc:	f7ff f9ea 	bl	dcad4 <_ZL25x509_profile_check_md_algPK24mbedtls_x509_crt_profile17mbedtls_md_type_t.isra.1>
   dd700:	b108      	cbz	r0, dd706 <mbedtls_x509_crt_verify_restartable+0x356>
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;
   dd702:	f447 3700 	orr.w	r7, r7, #131072	; 0x20000

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
   dd706:	f898 10e9 	ldrb.w	r1, [r8, #233]	; 0xe9
   dd70a:	9806      	ldr	r0, [sp, #24]
   dd70c:	f7ff f9e2 	bl	dcad4 <_ZL25x509_profile_check_md_algPK24mbedtls_x509_crt_profile17mbedtls_md_type_t.isra.1>
   dd710:	b108      	cbz	r0, dd716 <mbedtls_x509_crt_verify_restartable+0x366>
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;
   dd712:	f447 2780 	orr.w	r7, r7, #262144	; 0x40000

        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
   dd716:	4610      	mov	r0, r2
   dd718:	f7fe fd86 	bl	dc228 <mbedtls_md_info_from_type>
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
   dd71c:	ab11      	add	r3, sp, #68	; 0x44
   dd71e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dd722:	f8d8 1014 	ldr.w	r1, [r8, #20]
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;

        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
   dd726:	9008      	str	r0, [sp, #32]
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
   dd728:	f7fe fdea 	bl	dc300 <mbedtls_md>
   dd72c:	b1c8      	cbz	r0, dd762 <mbedtls_x509_crt_verify_restartable+0x3b2>

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
                           crl_list->sig.p, crl_list->sig.len ) != 0 )
        {
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
   dd72e:	f047 0710 	orr.w	r7, r7, #16
        if( x509_profile_check_key( profile, &parent->pk ) != 0 )
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

#if defined(MBEDTLS_X509_CRL_PARSE_C)
        /* Check trusted CA's CRL for the given crt */
        *flags |= x509_crt_verifycrl( child, parent, ca_crl, profile );
   dd732:	686b      	ldr	r3, [r5, #4]
   dd734:	431f      	orrs	r7, r3
   dd736:	606f      	str	r7, [r5, #4]
   dd738:	4634      	mov	r4, r6
   dd73a:	3508      	adds	r5, #8
    while( 1 ) {
        /* Add certificate to the verification chain */
        cur = &ver_chain->items[ver_chain->len];
        cur->crt = child;
        cur->flags = 0;
        ver_chain->len++;
   dd73c:	4657      	mov	r7, sl
   dd73e:	9e04      	ldr	r6, [sp, #16]
   dd740:	e69e      	b.n	dd480 <mbedtls_x509_crt_verify_restartable+0xd0>

    /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;
   dd742:	4830      	ldr	r0, [pc, #192]	; (dd804 <mbedtls_x509_crt_verify_restartable+0x454>)
   dd744:	e78f      	b.n	dd666 <mbedtls_x509_crt_verify_restartable+0x2b6>
#endif

        /* No parent? We're done here */
        if( parent == NULL )
        {
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
   dd746:	ab36      	add	r3, sp, #216	; 0xd8
   dd748:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   dd74c:	f857 3c50 	ldr.w	r3, [r7, #-80]
   dd750:	f043 0308 	orr.w	r3, r3, #8
   dd754:	f847 3c50 	str.w	r3, [r7, #-80]
   dd758:	e040      	b.n	dd7dc <mbedtls_x509_crt_verify_restartable+0x42c>
         * These can occur with some strategies for key rollover, see [SIRO],
         * and should be excluded from max_pathlen checks. */
        if( ver_chain->len != 1 &&
            x509_name_cmp( &child->issuer, &child->subject ) == 0 )
        {
            self_cnt++;
   dd75a:	9b07      	ldr	r3, [sp, #28]
   dd75c:	3301      	adds	r3, #1
   dd75e:	9307      	str	r3, [sp, #28]
   dd760:	e798      	b.n	dd694 <mbedtls_x509_crt_verify_restartable+0x2e4>
            /* Note: this can't happen except after an internal error */
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
            break;
        }

        if( x509_profile_check_key( profile, &ca->pk ) != 0 )
   dd762:	4649      	mov	r1, r9
   dd764:	9805      	ldr	r0, [sp, #20]
   dd766:	f7ff f9e2 	bl	dcb2e <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context>
   dd76a:	b108      	cbz	r0, dd770 <mbedtls_x509_crt_verify_restartable+0x3c0>
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
   dd76c:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
   dd770:	f898 30e9 	ldrb.w	r3, [r8, #233]	; 0xe9
   dd774:	f8d8 10ec 	ldr.w	r1, [r8, #236]	; 0xec
   dd778:	930a      	str	r3, [sp, #40]	; 0x28
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
   dd77a:	9808      	ldr	r0, [sp, #32]
        }

        if( x509_profile_check_key( profile, &ca->pk ) != 0 )
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
   dd77c:	f898 30e8 	ldrb.w	r3, [r8, #232]	; 0xe8
   dd780:	910e      	str	r1, [sp, #56]	; 0x38
   dd782:	930d      	str	r3, [sp, #52]	; 0x34
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
   dd784:	f7fe fe88 	bl	dc498 <mbedtls_md_get_size>
        }

        if( x509_profile_check_key( profile, &ca->pk ) != 0 )
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
   dd788:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
   dd78c:	9203      	str	r2, [sp, #12]
   dd78e:	f8d8 20e4 	ldr.w	r2, [r8, #228]	; 0xe4
   dd792:	9202      	str	r2, [sp, #8]
   dd794:	ab11      	add	r3, sp, #68	; 0x44
   dd796:	9001      	str	r0, [sp, #4]
   dd798:	9300      	str	r3, [sp, #0]
   dd79a:	464a      	mov	r2, r9
   dd79c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   dd79e:	990e      	ldr	r1, [sp, #56]	; 0x38
   dd7a0:	980a      	ldr	r0, [sp, #40]	; 0x28
   dd7a2:	f000 fd21 	bl	de1e8 <mbedtls_pk_verify_ext>
   dd7a6:	2800      	cmp	r0, #0
   dd7a8:	d1c1      	bne.n	dd72e <mbedtls_x509_crt_verify_restartable+0x37e>
        }

        /*
         * Check for validity of CRL (Do not drop out)
         */
        if( mbedtls_x509_time_is_past( &crl_list->next_update ) )
   dd7aa:	f108 006c 	add.w	r0, r8, #108	; 0x6c
   dd7ae:	f7f8 fd3f 	bl	d6230 <mbedtls_x509_time_is_past>
   dd7b2:	b108      	cbz	r0, dd7b8 <mbedtls_x509_crt_verify_restartable+0x408>
            flags |= MBEDTLS_X509_BADCRL_EXPIRED;
   dd7b4:	f047 0720 	orr.w	r7, r7, #32

        if( mbedtls_x509_time_is_future( &crl_list->this_update ) )
   dd7b8:	f108 0054 	add.w	r0, r8, #84	; 0x54
   dd7bc:	f7f8 fd3a 	bl	d6234 <mbedtls_x509_time_is_future>
   dd7c0:	b108      	cbz	r0, dd7c6 <mbedtls_x509_crt_verify_restartable+0x416>
            flags |= MBEDTLS_X509_BADCRL_FUTURE;
   dd7c2:	f447 6780 	orr.w	r7, r7, #1024	; 0x400

        /*
         * Check if certificate is revoked
         */
        if( mbedtls_x509_crt_is_revoked( crt, crl_list ) )
   dd7c6:	4641      	mov	r1, r8
   dd7c8:	4620      	mov	r0, r4
   dd7ca:	f7ff fdd3 	bl	dd374 <mbedtls_x509_crt_is_revoked>
   dd7ce:	b110      	cbz	r0, dd7d6 <mbedtls_x509_crt_verify_restartable+0x426>
        {
            flags |= MBEDTLS_X509_BADCERT_REVOKED;
   dd7d0:	f047 0702 	orr.w	r7, r7, #2
   dd7d4:	e7ad      	b.n	dd732 <mbedtls_x509_crt_verify_restartable+0x382>
    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
            x509_name_cmp( &crl_list->issuer, &ca->subject ) != 0 )
        {
            crl_list = crl_list->next;
   dd7d6:	f8d8 80f0 	ldr.w	r8, [r8, #240]	; 0xf0
   dd7da:	e778      	b.n	dd6ce <mbedtls_x509_crt_verify_restartable+0x31e>

    if( ret != 0 )
        goto exit;

    /* Merge end-entity flags */
    ver_chain.items[0].flags |= ee_flags;
   dd7dc:	9822      	ldr	r0, [sp, #136]	; 0x88
   dd7de:	ab36      	add	r3, sp, #216	; 0xd8
   dd7e0:	ea40 000b 	orr.w	r0, r0, fp
   dd7e4:	eb03 05ca 	add.w	r5, r3, sl, lsl #3
   dd7e8:	9022      	str	r0, [sp, #136]	; 0x88
   dd7ea:	3d58      	subs	r5, #88	; 0x58
   dd7ec:	4652      	mov	r2, sl
   dd7ee:	e725      	b.n	dd63c <mbedtls_x509_crt_verify_restartable+0x28c>
    {
        *flags = (uint32_t) -1;
        return( ret );
    }

    if( *flags != 0 )
   dd7f0:	9b41      	ldr	r3, [sp, #260]	; 0x104
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );
   dd7f2:	4805      	ldr	r0, [pc, #20]	; (dd808 <mbedtls_x509_crt_verify_restartable+0x458>)
    {
        *flags = (uint32_t) -1;
        return( ret );
    }

    if( *flags != 0 )
   dd7f4:	681b      	ldr	r3, [r3, #0]
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );
   dd7f6:	2b00      	cmp	r3, #0
   dd7f8:	bf08      	it	eq
   dd7fa:	2000      	moveq	r0, #0

    return( 0 );
}
   dd7fc:	b037      	add	sp, #220	; 0xdc
   dd7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dd802:	bf00      	nop
   dd804:	ffffd000 	.word	0xffffd000
   dd808:	ffffd900 	.word	0xffffd900

000dd80c <mbedtls_x509_crt_init>:
/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
   dd80c:	f44f 729a 	mov.w	r2, #308	; 0x134
   dd810:	2100      	movs	r1, #0
   dd812:	f009 bbc2 	b.w	e6f9a <memset>

000dd816 <mbedtls_x509_crt_free>:

/*
 * Unallocate all certificate data
 */
void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
{
   dd816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_sequence *seq_cur;
    mbedtls_x509_sequence *seq_prv;

    if( crt == NULL )
   dd818:	4606      	mov	r6, r0
   dd81a:	2800      	cmp	r0, #0
   dd81c:	d057      	beq.n	dd8ce <mbedtls_x509_crt_free+0xb8>
   dd81e:	4604      	mov	r4, r0
        return;

    do
    {
        mbedtls_pk_free( &cert_cur->pk );
   dd820:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   dd824:	f000 fc1e 	bl	de064 <mbedtls_pk_free>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
   dd828:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
   dd82c:	f007 fd9e 	bl	e536c <free>
#endif

        name_cur = cert_cur->issuer.next;
   dd830:	6e65      	ldr	r5, [r4, #100]	; 0x64
        while( name_cur != NULL )
   dd832:	b14d      	cbz	r5, dd848 <mbedtls_x509_crt_free+0x32>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   dd834:	4628      	mov	r0, r5

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
   dd836:	69af      	ldr	r7, [r5, #24]
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   dd838:	2120      	movs	r1, #32
   dd83a:	f7fc fe51 	bl	da4e0 <mbedtls_platform_zeroize>
            mbedtls_free( name_prv );
   dd83e:	4628      	mov	r0, r5
   dd840:	f007 fd94 	bl	e536c <free>

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
   dd844:	463d      	mov	r5, r7
#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
   dd846:	e7f4      	b.n	dd832 <mbedtls_x509_crt_free+0x1c>
            name_cur = name_cur->next;
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
   dd848:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        while( name_cur != NULL )
   dd84c:	b14d      	cbz	r5, dd862 <mbedtls_x509_crt_free+0x4c>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   dd84e:	4628      	mov	r0, r5

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
   dd850:	69af      	ldr	r7, [r5, #24]
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   dd852:	2120      	movs	r1, #32
   dd854:	f7fc fe44 	bl	da4e0 <mbedtls_platform_zeroize>
            mbedtls_free( name_prv );
   dd858:	4628      	mov	r0, r5
   dd85a:	f007 fd87 	bl	e536c <free>

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
   dd85e:	463d      	mov	r5, r7
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
   dd860:	e7f4      	b.n	dd84c <mbedtls_x509_crt_free+0x36>
            name_cur = name_cur->next;
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
   dd862:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
        while( seq_cur != NULL )
   dd866:	b14d      	cbz	r5, dd87c <mbedtls_x509_crt_free+0x66>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_platform_zeroize( seq_prv,
                                      sizeof( mbedtls_x509_sequence ) );
   dd868:	4628      	mov	r0, r5

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
   dd86a:	68ef      	ldr	r7, [r5, #12]
            mbedtls_platform_zeroize( seq_prv,
                                      sizeof( mbedtls_x509_sequence ) );
   dd86c:	2110      	movs	r1, #16
   dd86e:	f7fc fe37 	bl	da4e0 <mbedtls_platform_zeroize>
            mbedtls_free( seq_prv );
   dd872:	4628      	mov	r0, r5
   dd874:	f007 fd7a 	bl	e536c <free>

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
   dd878:	463d      	mov	r5, r7
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
   dd87a:	e7f4      	b.n	dd866 <mbedtls_x509_crt_free+0x50>
            mbedtls_platform_zeroize( seq_prv,
                                      sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
   dd87c:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
        while( seq_cur != NULL )
   dd880:	b14d      	cbz	r5, dd896 <mbedtls_x509_crt_free+0x80>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_platform_zeroize( seq_prv,
                                      sizeof( mbedtls_x509_sequence ) );
   dd882:	4628      	mov	r0, r5

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
   dd884:	68ef      	ldr	r7, [r5, #12]
            mbedtls_platform_zeroize( seq_prv,
                                      sizeof( mbedtls_x509_sequence ) );
   dd886:	2110      	movs	r1, #16
   dd888:	f7fc fe2a 	bl	da4e0 <mbedtls_platform_zeroize>
            mbedtls_free( seq_prv );
   dd88c:	4628      	mov	r0, r5
   dd88e:	f007 fd6d 	bl	e536c <free>

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
   dd892:	463d      	mov	r5, r7
                                      sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
   dd894:	e7f4      	b.n	dd880 <mbedtls_x509_crt_free+0x6a>
            mbedtls_platform_zeroize( seq_prv,
                                      sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        if( cert_cur->raw.p != NULL )
   dd896:	68a0      	ldr	r0, [r4, #8]
   dd898:	b128      	cbz	r0, dd8a6 <mbedtls_x509_crt_free+0x90>
        {
            mbedtls_platform_zeroize( cert_cur->raw.p, cert_cur->raw.len );
   dd89a:	6861      	ldr	r1, [r4, #4]
   dd89c:	f7fc fe20 	bl	da4e0 <mbedtls_platform_zeroize>
            mbedtls_free( cert_cur->raw.p );
   dd8a0:	68a0      	ldr	r0, [r4, #8]
   dd8a2:	f007 fd63 	bl	e536c <free>
        }

        cert_cur = cert_cur->next;
   dd8a6:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    }
    while( cert_cur != NULL );
   dd8aa:	2c00      	cmp	r4, #0
   dd8ac:	d1b8      	bne.n	dd820 <mbedtls_x509_crt_free+0xa>
   dd8ae:	4634      	mov	r4, r6
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;

        mbedtls_platform_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
   dd8b0:	f44f 719a 	mov.w	r1, #308	; 0x134
   dd8b4:	4620      	mov	r0, r4

    cert_cur = crt;
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;
   dd8b6:	f8d4 5130 	ldr.w	r5, [r4, #304]	; 0x130

        mbedtls_platform_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
   dd8ba:	f7fc fe11 	bl	da4e0 <mbedtls_platform_zeroize>
        if( cert_prv != crt )
   dd8be:	42b4      	cmp	r4, r6
   dd8c0:	d002      	beq.n	dd8c8 <mbedtls_x509_crt_free+0xb2>
            mbedtls_free( cert_prv );
   dd8c2:	4620      	mov	r0, r4
   dd8c4:	f007 fd52 	bl	e536c <free>
    }
    while( cert_cur != NULL );
   dd8c8:	462c      	mov	r4, r5
   dd8ca:	2d00      	cmp	r5, #0
   dd8cc:	d1f0      	bne.n	dd8b0 <mbedtls_x509_crt_free+0x9a>
   dd8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dd8d0 <mbedtls_x509_crt_parse_der>:
 * Parse one X.509 certificate in DER format from a buffer and add them to a
 * chained list
 */
int mbedtls_x509_crt_parse_der( mbedtls_x509_crt *chain, const unsigned char *buf,
                        size_t buflen )
{
   dd8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd8d4:	4688      	mov	r8, r1
   dd8d6:	b09b      	sub	sp, #108	; 0x6c
   dd8d8:	4615      	mov	r5, r2
    mbedtls_x509_crt *crt = chain, *prev = NULL;

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
   dd8da:	4682      	mov	sl, r0
   dd8dc:	2800      	cmp	r0, #0
   dd8de:	f000 81bd 	beq.w	ddc5c <mbedtls_x509_crt_parse_der+0x38c>
   dd8e2:	2900      	cmp	r1, #0
   dd8e4:	f000 81ba 	beq.w	ddc5c <mbedtls_x509_crt_parse_der+0x38c>
   dd8e8:	4604      	mov	r4, r0
   dd8ea:	f04f 0900 	mov.w	r9, #0
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    while( crt->version != 0 && crt->next != NULL )
   dd8ee:	69a3      	ldr	r3, [r4, #24]
   dd8f0:	b1a3      	cbz	r3, dd91c <mbedtls_x509_crt_parse_der+0x4c>
   dd8f2:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   dd8f6:	46a1      	mov	r9, r4
   dd8f8:	b10b      	cbz	r3, dd8fe <mbedtls_x509_crt_parse_der+0x2e>
   dd8fa:	461c      	mov	r4, r3
   dd8fc:	e7f7      	b.n	dd8ee <mbedtls_x509_crt_parse_der+0x1e>
    /*
     * Add new certificate on the end of the chain if needed.
     */
    if( crt->version != 0 && crt->next == NULL )
    {
        crt->next = (mbedtls_x509_crt *)mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
   dd8fe:	f44f 719a 	mov.w	r1, #308	; 0x134
   dd902:	2001      	movs	r0, #1
   dd904:	f009 fa06 	bl	e6d14 <calloc>
   dd908:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130

        if( crt->next == NULL )
   dd90c:	2800      	cmp	r0, #0
   dd90e:	f000 81a7 	beq.w	ddc60 <mbedtls_x509_crt_parse_der+0x390>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        prev = crt;
        mbedtls_x509_crt_init( crt->next );
   dd912:	f7ff ff7b 	bl	dd80c <mbedtls_x509_crt_init>
   dd916:	46a1      	mov	r9, r4
        crt = crt->next;
   dd918:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    int ret;
    size_t len;
    unsigned char *p, *end, *crt_end;
    mbedtls_x509_buf sig_params1, sig_params2, sig_oid2;

    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
   dd91c:	2300      	movs	r3, #0
   dd91e:	930b      	str	r3, [sp, #44]	; 0x2c
   dd920:	930c      	str	r3, [sp, #48]	; 0x30
   dd922:	930d      	str	r3, [sp, #52]	; 0x34
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
   dd924:	930e      	str	r3, [sp, #56]	; 0x38
   dd926:	930f      	str	r3, [sp, #60]	; 0x3c
   dd928:	9310      	str	r3, [sp, #64]	; 0x40
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
   dd92a:	9311      	str	r3, [sp, #68]	; 0x44
   dd92c:	9312      	str	r3, [sp, #72]	; 0x48
   dd92e:	9313      	str	r3, [sp, #76]	; 0x4c

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
   dd930:	2c00      	cmp	r4, #0
   dd932:	f000 80ef 	beq.w	ddb14 <mbedtls_x509_crt_parse_der+0x244>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
    len = buflen;
   dd936:	ae1a      	add	r6, sp, #104	; 0x68
    end = p + len;
   dd938:	eb08 0b05 	add.w	fp, r8, r5
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
    len = buflen;
   dd93c:	f846 5d54 	str.w	r5, [r6, #-84]!
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dd940:	2330      	movs	r3, #48	; 0x30
   dd942:	4632      	mov	r2, r6
   dd944:	4659      	mov	r1, fp
   dd946:	a806      	add	r0, sp, #24
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
   dd948:	f8cd 8018 	str.w	r8, [sp, #24]
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dd94c:	f7f7 fef0 	bl	d5730 <mbedtls_asn1_get_tag>
   dd950:	b120      	cbz	r0, dd95c <mbedtls_x509_crt_parse_der+0x8c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
   dd952:	4620      	mov	r0, r4
   dd954:	f7ff ff5f 	bl	dd816 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
   dd958:	4dbb      	ldr	r5, [pc, #748]	; (ddc48 <mbedtls_x509_crt_parse_der+0x378>)
   dd95a:	e168      	b.n	ddc2e <mbedtls_x509_crt_parse_der+0x35e>
    }

    if( len > (size_t) ( end - p ) )
   dd95c:	9d06      	ldr	r5, [sp, #24]
   dd95e:	9f05      	ldr	r7, [sp, #20]
   dd960:	ebc5 0b0b 	rsb	fp, r5, fp
   dd964:	45bb      	cmp	fp, r7
   dd966:	f0c0 80d0 	bcc.w	ddb0a <mbedtls_x509_crt_parse_der+0x23a>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }
    crt_end = p + len;

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
   dd96a:	443d      	add	r5, r7
   dd96c:	ebc8 0505 	rsb	r5, r8, r5
   dd970:	6065      	str	r5, [r4, #4]
    crt->raw.p = p = (unsigned char *)mbedtls_calloc( 1, crt->raw.len );
   dd972:	4629      	mov	r1, r5
   dd974:	2001      	movs	r0, #1
   dd976:	f009 f9cd 	bl	e6d14 <calloc>
   dd97a:	4683      	mov	fp, r0
   dd97c:	9006      	str	r0, [sp, #24]
   dd97e:	60a0      	str	r0, [r4, #8]
    if( p == NULL )
   dd980:	2800      	cmp	r0, #0
   dd982:	f000 80c9 	beq.w	ddb18 <mbedtls_x509_crt_parse_der+0x248>
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
   dd986:	462a      	mov	r2, r5

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
   dd988:	1bed      	subs	r5, r5, r7
   dd98a:	445d      	add	r5, fp
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char *)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
   dd98c:	4641      	mov	r1, r8

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
    end = crt_end = p + len;
   dd98e:	442f      	add	r7, r5
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char *)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
   dd990:	f009 fadd 	bl	e6f4e <memcpy>
    end = crt_end = p + len;

    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;
   dd994:	6165      	str	r5, [r4, #20]

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dd996:	2330      	movs	r3, #48	; 0x30
   dd998:	4632      	mov	r2, r6
   dd99a:	4639      	mov	r1, r7
   dd99c:	a806      	add	r0, sp, #24
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
   dd99e:	9506      	str	r5, [sp, #24]
    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dd9a0:	f7f7 fec6 	bl	d5730 <mbedtls_asn1_get_tag>
   dd9a4:	4605      	mov	r5, r0
   dd9a6:	2800      	cmp	r0, #0
   dd9a8:	d15b      	bne.n	dda62 <mbedtls_x509_crt_parse_der+0x192>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    end = p + len;
   dd9aa:	9b05      	ldr	r3, [sp, #20]
   dd9ac:	9e06      	ldr	r6, [sp, #24]
   dd9ae:	441e      	add	r6, r3
    crt->tbs.len = end - crt->tbs.p;
   dd9b0:	6963      	ldr	r3, [r4, #20]
   dd9b2:	1af3      	subs	r3, r6, r3
   dd9b4:	6123      	str	r3, [r4, #16]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   dd9b6:	aa17      	add	r2, sp, #92	; 0x5c
   dd9b8:	23a0      	movs	r3, #160	; 0xa0
   dd9ba:	4631      	mov	r1, r6
   dd9bc:	a806      	add	r0, sp, #24
   dd9be:	f7f7 feb7 	bl	d5730 <mbedtls_asn1_get_tag>
   dd9c2:	b138      	cbz	r0, dd9d4 <mbedtls_x509_crt_parse_der+0x104>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   dd9c4:	f110 0f62 	cmn.w	r0, #98	; 0x62
   dd9c8:	d101      	bne.n	dd9ce <mbedtls_x509_crt_parse_der+0xfe>
        {
            *ver = 0;
   dd9ca:	61a5      	str	r5, [r4, #24]
   dd9cc:	e017      	b.n	dd9fe <mbedtls_x509_crt_parse_der+0x12e>
            return( 0 );
        }

        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
   dd9ce:	f5a0 5506 	sub.w	r5, r0, #8576	; 0x2180
   dd9d2:	e011      	b.n	dd9f8 <mbedtls_x509_crt_parse_der+0x128>
    }

    end = *p + len;
   dd9d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   dd9d6:	9d06      	ldr	r5, [sp, #24]
   dd9d8:	441d      	add	r5, r3

    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
   dd9da:	f104 0218 	add.w	r2, r4, #24
   dd9de:	4629      	mov	r1, r5
   dd9e0:	a806      	add	r0, sp, #24
   dd9e2:	f7f7 fed2 	bl	d578a <mbedtls_asn1_get_int>
   dd9e6:	b110      	cbz	r0, dd9ee <mbedtls_x509_crt_parse_der+0x11e>
        return( MBEDTLS_ERR_X509_INVALID_VERSION + ret );
   dd9e8:	f5a0 5508 	sub.w	r5, r0, #8704	; 0x2200
   dd9ec:	e004      	b.n	dd9f8 <mbedtls_x509_crt_parse_der+0x128>

    if( *p != end )
   dd9ee:	9b06      	ldr	r3, [sp, #24]
   dd9f0:	429d      	cmp	r5, r3
   dd9f2:	d004      	beq.n	dd9fe <mbedtls_x509_crt_parse_der+0x12e>
        return( MBEDTLS_ERR_X509_INVALID_VERSION +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   dd9f4:	4d95      	ldr	r5, [pc, #596]	; (ddc4c <mbedtls_x509_crt_parse_der+0x37c>)
   dd9f6:	e1b3      	b.n	ddd60 <mbedtls_x509_crt_parse_der+0x490>
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
   dd9f8:	2d00      	cmp	r5, #0
   dd9fa:	f040 81b1 	bne.w	ddd60 <mbedtls_x509_crt_parse_der+0x490>
   dd9fe:	f104 021c 	add.w	r2, r4, #28
   dda02:	4631      	mov	r1, r6
   dda04:	a806      	add	r0, sp, #24
   dda06:	f7f7 fff5 	bl	d59f4 <mbedtls_x509_get_serial>
     *
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
   dda0a:	4605      	mov	r5, r0
   dda0c:	2800      	cmp	r0, #0
   dda0e:	f040 81a7 	bne.w	ddd60 <mbedtls_x509_crt_parse_der+0x490>
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
        ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
   dda12:	f104 0828 	add.w	r8, r4, #40	; 0x28
   dda16:	ab0b      	add	r3, sp, #44	; 0x2c
   dda18:	4642      	mov	r2, r8
   dda1a:	4631      	mov	r1, r6
   dda1c:	a806      	add	r0, sp, #24
   dda1e:	f7f8 f818 	bl	d5a52 <mbedtls_x509_get_alg>
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
   dda22:	4605      	mov	r5, r0
   dda24:	2800      	cmp	r0, #0
   dda26:	f040 819b 	bne.w	ddd60 <mbedtls_x509_crt_parse_der+0x490>
   dda2a:	e11b      	b.n	ddc64 <mbedtls_x509_crt_parse_der+0x394>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
    }

    crt->version++;
   dda2c:	3301      	adds	r3, #1
   dda2e:	61a3      	str	r3, [r4, #24]

    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
   dda30:	f504 7396 	add.w	r3, r4, #300	; 0x12c
   dda34:	9300      	str	r3, [sp, #0]
   dda36:	f504 7294 	add.w	r2, r4, #296	; 0x128
   dda3a:	f204 1329 	addw	r3, r4, #297	; 0x129
   dda3e:	a90b      	add	r1, sp, #44	; 0x2c
   dda40:	4640      	mov	r0, r8
   dda42:	f7f8 fa51 	bl	d5ee8 <mbedtls_x509_get_sig_alg>
   dda46:	4605      	mov	r5, r0
   dda48:	2800      	cmp	r0, #0
   dda4a:	f040 8189 	bne.w	ddd60 <mbedtls_x509_crt_parse_der+0x490>
    }

    /*
     * issuer               Name
     */
    crt->issuer_raw.p = p;
   dda4e:	9b06      	ldr	r3, [sp, #24]
   dda50:	63e3      	str	r3, [r4, #60]	; 0x3c

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dda52:	aa05      	add	r2, sp, #20
   dda54:	2330      	movs	r3, #48	; 0x30
   dda56:	4631      	mov	r1, r6
   dda58:	a806      	add	r0, sp, #24
   dda5a:	f7f7 fe69 	bl	d5730 <mbedtls_asn1_get_tag>
   dda5e:	4605      	mov	r5, r0
   dda60:	b128      	cbz	r0, dda6e <mbedtls_x509_crt_parse_der+0x19e>
    crt->subject_raw.p = p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
   dda62:	4620      	mov	r0, r4
   dda64:	f7ff fed7 	bl	dd816 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
   dda68:	f5a5 5506 	sub.w	r5, r5, #8576	; 0x2180
   dda6c:	e0dc      	b.n	ddc28 <mbedtls_x509_crt_parse_der+0x358>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
   dda6e:	9b05      	ldr	r3, [sp, #20]
   dda70:	9906      	ldr	r1, [sp, #24]
   dda72:	f104 024c 	add.w	r2, r4, #76	; 0x4c
   dda76:	4419      	add	r1, r3
   dda78:	a806      	add	r0, sp, #24
   dda7a:	f7f8 f8e1 	bl	d5c40 <mbedtls_x509_get_name>
   dda7e:	4605      	mov	r5, r0
   dda80:	2800      	cmp	r0, #0
   dda82:	f040 816d 	bne.w	ddd60 <mbedtls_x509_crt_parse_der+0x490>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->issuer_raw.len = p - crt->issuer_raw.p;
   dda86:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   dda88:	9b06      	ldr	r3, [sp, #24]
   dda8a:	1a9b      	subs	r3, r3, r2
   dda8c:	63a3      	str	r3, [r4, #56]	; 0x38
                           mbedtls_x509_time *to )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   dda8e:	aa17      	add	r2, sp, #92	; 0x5c
   dda90:	2330      	movs	r3, #48	; 0x30
   dda92:	4631      	mov	r1, r6
   dda94:	a806      	add	r0, sp, #24
   dda96:	f7f7 fe4b 	bl	d5730 <mbedtls_asn1_get_tag>
   dda9a:	2800      	cmp	r0, #0
   dda9c:	f000 80eb 	beq.w	ddc76 <mbedtls_x509_crt_parse_der+0x3a6>
     * Validity ::= SEQUENCE {
     *      notBefore      Time,
     *      notAfter       Time }
     *
     */
    if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
   ddaa0:	f5b0 5510 	subs.w	r5, r0, #9216	; 0x2400
   ddaa4:	f040 815c 	bne.w	ddd60 <mbedtls_x509_crt_parse_der+0x490>
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
   ddaa8:	f10d 0868 	add.w	r8, sp, #104	; 0x68

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   ddaac:	aa05      	add	r2, sp, #20
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
   ddaae:	f858 3d50 	ldr.w	r3, [r8, #-80]!
   ddab2:	64a3      	str	r3, [r4, #72]	; 0x48

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   ddab4:	4631      	mov	r1, r6
   ddab6:	2330      	movs	r3, #48	; 0x30
   ddab8:	4640      	mov	r0, r8
   ddaba:	f7f7 fe39 	bl	d5730 <mbedtls_asn1_get_tag>
   ddabe:	4605      	mov	r5, r0
   ddac0:	2800      	cmp	r0, #0
   ddac2:	d1ce      	bne.n	dda62 <mbedtls_x509_crt_parse_der+0x192>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
   ddac4:	9b05      	ldr	r3, [sp, #20]
   ddac6:	2b00      	cmp	r3, #0
   ddac8:	f040 80f1 	bne.w	ddcae <mbedtls_x509_crt_parse_der+0x3de>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->subject_raw.len = p - crt->subject_raw.p;
   ddacc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   ddace:	9b06      	ldr	r3, [sp, #24]
   ddad0:	1a9b      	subs	r3, r3, r2
   ddad2:	6463      	str	r3, [r4, #68]	; 0x44

    /*
     * SubjectPublicKeyInfo
     */
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
   ddad4:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
   ddad8:	4631      	mov	r1, r6
   ddada:	4640      	mov	r0, r8
   ddadc:	f7fd fe1a 	bl	db714 <mbedtls_pk_parse_subpubkey>
   ddae0:	4605      	mov	r5, r0
   ddae2:	2800      	cmp	r0, #0
   ddae4:	f040 813c 	bne.w	ddd60 <mbedtls_x509_crt_parse_der+0x490>
     *  subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
     *                       -- If present, version shall be v2 or v3
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
   ddae8:	69a3      	ldr	r3, [r4, #24]
   ddaea:	3b02      	subs	r3, #2
   ddaec:	2b01      	cmp	r3, #1
   ddaee:	f240 80e9 	bls.w	ddcc4 <mbedtls_x509_crt_parse_der+0x3f4>
            mbedtls_x509_crt_free( crt );
            return( ret );
        }
    }

    if( crt->version == 2 || crt->version == 3 )
   ddaf2:	69a3      	ldr	r3, [r4, #24]
   ddaf4:	3b02      	subs	r3, #2
   ddaf6:	2b01      	cmp	r3, #1
   ddaf8:	f240 80f0 	bls.w	ddcdc <mbedtls_x509_crt_parse_der+0x40c>
            return( ret );
        }
    }

#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
   ddafc:	69a3      	ldr	r3, [r4, #24]
   ddafe:	2b03      	cmp	r3, #3
   ddb00:	d00c      	beq.n	ddb1c <mbedtls_x509_crt_parse_der+0x24c>
            mbedtls_x509_crt_free( crt );
            return( ret );
        }
    }

    if( p != end )
   ddb02:	9b06      	ldr	r3, [sp, #24]
   ddb04:	429e      	cmp	r6, r3
   ddb06:	f000 80fe 	beq.w	ddd06 <mbedtls_x509_crt_parse_der+0x436>
        return( ret );
    }

    if( p != end )
    {
        mbedtls_x509_crt_free( crt );
   ddb0a:	4620      	mov	r0, r4
   ddb0c:	f7ff fe83 	bl	dd816 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   ddb10:	4d4f      	ldr	r5, [pc, #316]	; (ddc50 <mbedtls_x509_crt_parse_der+0x380>)
   ddb12:	e08c      	b.n	ddc2e <mbedtls_x509_crt_parse_der+0x35e>

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   ddb14:	4d4f      	ldr	r5, [pc, #316]	; (ddc54 <mbedtls_x509_crt_parse_der+0x384>)
   ddb16:	e08a      	b.n	ddc2e <mbedtls_x509_crt_parse_der+0x35e>

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char *)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   ddb18:	4d4f      	ldr	r5, [pc, #316]	; (ddc58 <mbedtls_x509_crt_parse_der+0x388>)
   ddb1a:	e088      	b.n	ddc2e <mbedtls_x509_crt_parse_der+0x35e>
{
    int ret;
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( *p == end )
   ddb1c:	9a06      	ldr	r2, [sp, #24]
   ddb1e:	4296      	cmp	r6, r2
   ddb20:	d0ef      	beq.n	ddb02 <mbedtls_x509_crt_parse_der+0x232>
        return( 0 );

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
   ddb22:	f104 02dc 	add.w	r2, r4, #220	; 0xdc
   ddb26:	4631      	mov	r1, r6
   ddb28:	4640      	mov	r0, r8
   ddb2a:	f7f8 fa1d 	bl	d5f68 <mbedtls_x509_get_ext>
   ddb2e:	4603      	mov	r3, r0
   ddb30:	2800      	cmp	r0, #0
   ddb32:	d173      	bne.n	ddc1c <mbedtls_x509_crt_parse_der+0x34c>
        return( ret );

    end = crt->v3_ext.p + crt->v3_ext.len;
   ddb34:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   ddb38:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
   ddb3c:	188a      	adds	r2, r1, r2
   ddb3e:	9202      	str	r2, [sp, #8]
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
   ddb40:	4680      	mov	r8, r0

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
        return( ret );

    end = crt->v3_ext.p + crt->v3_ext.len;
    while( *p < end )
   ddb42:	9b06      	ldr	r3, [sp, #24]
   ddb44:	9a02      	ldr	r2, [sp, #8]
   ddb46:	429a      	cmp	r2, r3
   ddb48:	f240 80d9 	bls.w	ddcfe <mbedtls_x509_crt_parse_der+0x42e>
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
        int is_critical = 0; /* DEFAULT FALSE */
        int ext_type = 0;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   ddb4c:	2330      	movs	r3, #48	; 0x30
   ddb4e:	aa07      	add	r2, sp, #28
   ddb50:	9902      	ldr	r1, [sp, #8]
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
   ddb52:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
        int is_critical = 0; /* DEFAULT FALSE */
        int ext_type = 0;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   ddb56:	a806      	add	r0, sp, #24
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
   ddb58:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
   ddb5c:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
        int is_critical = 0; /* DEFAULT FALSE */
   ddb60:	f8cd 8020 	str.w	r8, [sp, #32]
        int ext_type = 0;
   ddb64:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   ddb68:	f7f7 fde2 	bl	d5730 <mbedtls_asn1_get_tag>
   ddb6c:	2800      	cmp	r0, #0
   ddb6e:	f040 80fb 	bne.w	ddd68 <mbedtls_x509_crt_parse_der+0x498>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;
   ddb72:	9b07      	ldr	r3, [sp, #28]
   ddb74:	9d06      	ldr	r5, [sp, #24]
   ddb76:	441d      	add	r5, r3

        /* Get extension ID */
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &extn_oid.len,
   ddb78:	aa15      	add	r2, sp, #84	; 0x54
   ddb7a:	2306      	movs	r3, #6
   ddb7c:	4629      	mov	r1, r5
   ddb7e:	a806      	add	r0, sp, #24
   ddb80:	f7f7 fdd6 	bl	d5730 <mbedtls_asn1_get_tag>
   ddb84:	2800      	cmp	r0, #0
   ddb86:	f040 80ef 	bne.w	ddd68 <mbedtls_x509_crt_parse_der+0x498>
                                          MBEDTLS_ASN1_OID ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.tag = MBEDTLS_ASN1_OID;
   ddb8a:	2306      	movs	r3, #6
        extn_oid.p = *p;
   ddb8c:	9a06      	ldr	r2, [sp, #24]
        /* Get extension ID */
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &extn_oid.len,
                                          MBEDTLS_ASN1_OID ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.tag = MBEDTLS_ASN1_OID;
   ddb8e:	9314      	str	r3, [sp, #80]	; 0x50
        extn_oid.p = *p;
        *p += extn_oid.len;
   ddb90:	9b15      	ldr	r3, [sp, #84]	; 0x54
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &extn_oid.len,
                                          MBEDTLS_ASN1_OID ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.tag = MBEDTLS_ASN1_OID;
        extn_oid.p = *p;
   ddb92:	9216      	str	r2, [sp, #88]	; 0x58
        *p += extn_oid.len;
   ddb94:	4413      	add	r3, r2

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
   ddb96:	4629      	mov	r1, r5
   ddb98:	aa08      	add	r2, sp, #32
   ddb9a:	a806      	add	r0, sp, #24
                                          MBEDTLS_ASN1_OID ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.tag = MBEDTLS_ASN1_OID;
        extn_oid.p = *p;
        *p += extn_oid.len;
   ddb9c:	9306      	str	r3, [sp, #24]

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
   ddb9e:	f7f7 fddb 	bl	d5758 <mbedtls_asn1_get_bool>
   ddba2:	2800      	cmp	r0, #0
   ddba4:	f040 80a6 	bne.w	ddcf4 <mbedtls_x509_crt_parse_der+0x424>
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        /* Data should be octet string type */
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
   ddba8:	2304      	movs	r3, #4
   ddbaa:	aa07      	add	r2, sp, #28
   ddbac:	4629      	mov	r1, r5
   ddbae:	a806      	add	r0, sp, #24
   ddbb0:	f7f7 fdbe 	bl	d5730 <mbedtls_asn1_get_tag>
   ddbb4:	2800      	cmp	r0, #0
   ddbb6:	f040 80d7 	bne.w	ddd68 <mbedtls_x509_crt_parse_der+0x498>
                MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_octet = *p + len;

        if( end_ext_octet != end_ext_data )
   ddbba:	9b07      	ldr	r3, [sp, #28]
   ddbbc:	9a06      	ldr	r2, [sp, #24]
   ddbbe:	4413      	add	r3, r2
   ddbc0:	429d      	cmp	r5, r3
   ddbc2:	f040 809e 	bne.w	ddd02 <mbedtls_x509_crt_parse_der+0x432>
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

        /*
         * Detect supported extensions
         */
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
   ddbc6:	a909      	add	r1, sp, #36	; 0x24
   ddbc8:	a814      	add	r0, sp, #80	; 0x50
   ddbca:	f7fb fadd 	bl	d9188 <mbedtls_oid_get_x509_ext_type>

        if( ret != 0 )
   ddbce:	2800      	cmp	r0, #0
   ddbd0:	f040 80d0 	bne.w	ddd74 <mbedtls_x509_crt_parse_der+0x4a4>
#endif
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
   ddbd4:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
   ddbd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   ddbda:	ea11 0302 	ands.w	r3, r1, r2
   ddbde:	f040 81b9 	bne.w	ddf54 <mbedtls_x509_crt_parse_der+0x684>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;
   ddbe2:	4311      	orrs	r1, r2

        switch( ext_type )
   ddbe4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;
   ddbe8:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8

        switch( ext_type )
   ddbec:	f040 80c8 	bne.w	ddd80 <mbedtls_x509_crt_parse_der+0x4b0>
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
   ddbf0:	f504 7280 	add.w	r2, r4, #256	; 0x100
   ddbf4:	9203      	str	r2, [sp, #12]
    /*
     * BasicConstraints ::= SEQUENCE {
     *      cA                      BOOLEAN DEFAULT FALSE,
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
   ddbf6:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    *max_pathlen = 0; /* endless */
   ddbfa:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   ddbfe:	aa17      	add	r2, sp, #92	; 0x5c
   ddc00:	2330      	movs	r3, #48	; 0x30
   ddc02:	4629      	mov	r1, r5
   ddc04:	a806      	add	r0, sp, #24

        switch( ext_type )
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
   ddc06:	f104 0bfc 	add.w	fp, r4, #252	; 0xfc
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
    *max_pathlen = 0; /* endless */

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   ddc0a:	f7f7 fd91 	bl	d5730 <mbedtls_asn1_get_tag>
   ddc0e:	2800      	cmp	r0, #0
   ddc10:	f000 80c4 	beq.w	ddd9c <mbedtls_x509_crt_parse_der+0x4cc>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
   ddc14:	f5a0 5314 	sub.w	r3, r0, #9472	; 0x2500
                return( ret );
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
   ddc18:	2b00      	cmp	r3, #0
   ddc1a:	d092      	beq.n	ddb42 <mbedtls_x509_crt_parse_der+0x272>
#endif
    {
        ret = x509_get_crt_ext( &p, end, crt );
        if( ret != 0 )
        {
            mbedtls_x509_crt_free( crt );
   ddc1c:	4620      	mov	r0, r4
   ddc1e:	9302      	str	r3, [sp, #8]
   ddc20:	f7ff fdf9 	bl	dd816 <mbedtls_x509_crt_free>
   ddc24:	9b02      	ldr	r3, [sp, #8]
   ddc26:	461d      	mov	r5, r3
        prev = crt;
        mbedtls_x509_crt_init( crt->next );
        crt = crt->next;
    }

    if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
   ddc28:	2d00      	cmp	r5, #0
   ddc2a:	f000 8199 	beq.w	ddf60 <mbedtls_x509_crt_parse_der+0x690>
    {
        if( prev )
   ddc2e:	f1b9 0f00 	cmp.w	r9, #0
   ddc32:	d002      	beq.n	ddc3a <mbedtls_x509_crt_parse_der+0x36a>
            prev->next = NULL;
   ddc34:	2300      	movs	r3, #0
   ddc36:	f8c9 3130 	str.w	r3, [r9, #304]	; 0x130

        if( crt != chain )
   ddc3a:	4554      	cmp	r4, sl
   ddc3c:	f000 8190 	beq.w	ddf60 <mbedtls_x509_crt_parse_der+0x690>
            mbedtls_free( crt );
   ddc40:	4620      	mov	r0, r4
   ddc42:	f007 fb93 	bl	e536c <free>
   ddc46:	e18b      	b.n	ddf60 <mbedtls_x509_crt_parse_der+0x690>
   ddc48:	ffffde80 	.word	0xffffde80
   ddc4c:	ffffdd9a 	.word	0xffffdd9a
   ddc50:	ffffde1a 	.word	0xffffde1a
   ddc54:	ffffd800 	.word	0xffffd800
   ddc58:	ffffd780 	.word	0xffffd780

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   ddc5c:	4db0      	ldr	r5, [pc, #704]	; (ddf20 <mbedtls_x509_crt_parse_der+0x650>)
   ddc5e:	e17f      	b.n	ddf60 <mbedtls_x509_crt_parse_der+0x690>
    if( crt->version != 0 && crt->next == NULL )
    {
        crt->next = (mbedtls_x509_crt *)mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );

        if( crt->next == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   ddc60:	4db0      	ldr	r5, [pc, #704]	; (ddf24 <mbedtls_x509_crt_parse_der+0x654>)
   ddc62:	e17d      	b.n	ddf60 <mbedtls_x509_crt_parse_der+0x690>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->version < 0 || crt->version > 2 )
   ddc64:	69a3      	ldr	r3, [r4, #24]
   ddc66:	2b02      	cmp	r3, #2
   ddc68:	f67f aee0 	bls.w	dda2c <mbedtls_x509_crt_parse_der+0x15c>
    {
        mbedtls_x509_crt_free( crt );
   ddc6c:	4620      	mov	r0, r4
   ddc6e:	f7ff fdd2 	bl	dd816 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
   ddc72:	4dad      	ldr	r5, [pc, #692]	; (ddf28 <mbedtls_x509_crt_parse_der+0x658>)
   ddc74:	e7db      	b.n	ddc2e <mbedtls_x509_crt_parse_der+0x35e>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    end = *p + len;
   ddc76:	9a06      	ldr	r2, [sp, #24]
   ddc78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ddc7a:	eb02 0803 	add.w	r8, r2, r3

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
   ddc7e:	4641      	mov	r1, r8
   ddc80:	f104 028c 	add.w	r2, r4, #140	; 0x8c
   ddc84:	a806      	add	r0, sp, #24
   ddc86:	f7f8 f85b 	bl	d5d40 <mbedtls_x509_get_time>
   ddc8a:	4605      	mov	r5, r0
   ddc8c:	2800      	cmp	r0, #0
   ddc8e:	d167      	bne.n	ddd60 <mbedtls_x509_crt_parse_der+0x490>
        return( ret );

    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
   ddc90:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
   ddc94:	4641      	mov	r1, r8
   ddc96:	a806      	add	r0, sp, #24
   ddc98:	f7f8 f852 	bl	d5d40 <mbedtls_x509_get_time>
   ddc9c:	4605      	mov	r5, r0
   ddc9e:	2800      	cmp	r0, #0
   ddca0:	d15e      	bne.n	ddd60 <mbedtls_x509_crt_parse_der+0x490>
        return( ret );

    if( *p != end )
   ddca2:	9b06      	ldr	r3, [sp, #24]
   ddca4:	4598      	cmp	r8, r3
   ddca6:	f43f aeff 	beq.w	ddaa8 <mbedtls_x509_crt_parse_der+0x1d8>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   ddcaa:	4da0      	ldr	r5, [pc, #640]	; (ddf2c <mbedtls_x509_crt_parse_der+0x65c>)
   ddcac:	e058      	b.n	ddd60 <mbedtls_x509_crt_parse_der+0x490>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
   ddcae:	9906      	ldr	r1, [sp, #24]
   ddcb0:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   ddcb4:	4419      	add	r1, r3
   ddcb6:	4640      	mov	r0, r8
   ddcb8:	f7f7 ffc2 	bl	d5c40 <mbedtls_x509_get_name>
   ddcbc:	4605      	mov	r5, r0
   ddcbe:	2800      	cmp	r0, #0
   ddcc0:	d14e      	bne.n	ddd60 <mbedtls_x509_crt_parse_der+0x490>
   ddcc2:	e703      	b.n	ddacc <mbedtls_x509_crt_parse_der+0x1fc>
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
    {
        ret = x509_get_uid( &p, end, &crt->issuer_id,  1 );
   ddcc4:	2301      	movs	r3, #1
   ddcc6:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
   ddcca:	4631      	mov	r1, r6
   ddccc:	4640      	mov	r0, r8
   ddcce:	f7fe ff10 	bl	dcaf2 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
   ddcd2:	4605      	mov	r5, r0
   ddcd4:	2800      	cmp	r0, #0
   ddcd6:	f43f af0c 	beq.w	ddaf2 <mbedtls_x509_crt_parse_der+0x222>
   ddcda:	e041      	b.n	ddd60 <mbedtls_x509_crt_parse_der+0x490>
        }
    }

    if( crt->version == 2 || crt->version == 3 )
    {
        ret = x509_get_uid( &p, end, &crt->subject_id,  2 );
   ddcdc:	2302      	movs	r3, #2
   ddcde:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
   ddce2:	4631      	mov	r1, r6
   ddce4:	4640      	mov	r0, r8
   ddce6:	f7fe ff04 	bl	dcaf2 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
   ddcea:	4605      	mov	r5, r0
   ddcec:	2800      	cmp	r0, #0
   ddcee:	f43f af05 	beq.w	ddafc <mbedtls_x509_crt_parse_der+0x22c>
   ddcf2:	e035      	b.n	ddd60 <mbedtls_x509_crt_parse_der+0x490>
        extn_oid.tag = MBEDTLS_ASN1_OID;
        extn_oid.p = *p;
        *p += extn_oid.len;

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
   ddcf4:	f110 0f62 	cmn.w	r0, #98	; 0x62
   ddcf8:	f43f af56 	beq.w	ddba8 <mbedtls_x509_crt_parse_der+0x2d8>
   ddcfc:	e034      	b.n	ddd68 <mbedtls_x509_crt_parse_der+0x498>
        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
        }
    }

    if( *p != end )
   ddcfe:	f43f af00 	beq.w	ddb02 <mbedtls_x509_crt_parse_der+0x232>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   ddd02:	4b8b      	ldr	r3, [pc, #556]	; (ddf30 <mbedtls_x509_crt_parse_der+0x660>)
   ddd04:	e78a      	b.n	ddc1c <mbedtls_x509_crt_parse_der+0x34c>
     *  -- end of TBSCertificate
     *
     *  signatureAlgorithm   AlgorithmIdentifier,
     *  signatureValue       BIT STRING
     */
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
   ddd06:	ab0e      	add	r3, sp, #56	; 0x38
   ddd08:	aa11      	add	r2, sp, #68	; 0x44
   ddd0a:	4639      	mov	r1, r7
   ddd0c:	a806      	add	r0, sp, #24
   ddd0e:	f7f7 fea0 	bl	d5a52 <mbedtls_x509_get_alg>
   ddd12:	4605      	mov	r5, r0
   ddd14:	bb20      	cbnz	r0, ddd60 <mbedtls_x509_crt_parse_der+0x490>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
   ddd16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   ddd18:	9b12      	ldr	r3, [sp, #72]	; 0x48
   ddd1a:	429a      	cmp	r2, r3
   ddd1c:	d10e      	bne.n	ddd3c <mbedtls_x509_crt_parse_der+0x46c>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
   ddd1e:	9913      	ldr	r1, [sp, #76]	; 0x4c
   ddd20:	6b20      	ldr	r0, [r4, #48]	; 0x30
   ddd22:	f009 f905 	bl	e6f30 <memcmp>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
   ddd26:	b948      	cbnz	r0, ddd3c <mbedtls_x509_crt_parse_der+0x46c>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
        sig_params1.len != sig_params2.len ||
   ddd28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
   ddd2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   ddd2c:	429a      	cmp	r2, r3
   ddd2e:	d105      	bne.n	ddd3c <mbedtls_x509_crt_parse_der+0x46c>
        sig_params1.len != sig_params2.len ||
   ddd30:	b14a      	cbz	r2, ddd46 <mbedtls_x509_crt_parse_der+0x476>
        ( sig_params1.len != 0 &&
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
   ddd32:	9910      	ldr	r1, [sp, #64]	; 0x40
   ddd34:	980d      	ldr	r0, [sp, #52]	; 0x34
   ddd36:	f009 f8fb 	bl	e6f30 <memcmp>
    }

    if( crt->sig_oid.len != sig_oid2.len ||
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
        sig_params1.len != sig_params2.len ||
        ( sig_params1.len != 0 &&
   ddd3a:	b120      	cbz	r0, ddd46 <mbedtls_x509_crt_parse_der+0x476>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
    {
        mbedtls_x509_crt_free( crt );
   ddd3c:	4620      	mov	r0, r4
   ddd3e:	f7ff fd6a 	bl	dd816 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
   ddd42:	4d7c      	ldr	r5, [pc, #496]	; (ddf34 <mbedtls_x509_crt_parse_der+0x664>)
   ddd44:	e773      	b.n	ddc2e <mbedtls_x509_crt_parse_der+0x35e>
    }

    if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
   ddd46:	f504 728e 	add.w	r2, r4, #284	; 0x11c
   ddd4a:	4639      	mov	r1, r7
   ddd4c:	a806      	add	r0, sp, #24
   ddd4e:	f7f8 f8ad 	bl	d5eac <mbedtls_x509_get_sig>
   ddd52:	4605      	mov	r5, r0
   ddd54:	b920      	cbnz	r0, ddd60 <mbedtls_x509_crt_parse_der+0x490>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( p != end )
   ddd56:	9b06      	ldr	r3, [sp, #24]
   ddd58:	429f      	cmp	r7, r3
   ddd5a:	f000 8101 	beq.w	ddf60 <mbedtls_x509_crt_parse_der+0x690>
   ddd5e:	e6d4      	b.n	ddb0a <mbedtls_x509_crt_parse_der+0x23a>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
   ddd60:	4620      	mov	r0, r4
   ddd62:	f7ff fd58 	bl	dd816 <mbedtls_x509_crt_free>
   ddd66:	e75f      	b.n	ddc28 <mbedtls_x509_crt_parse_der+0x358>
        *p += extn_oid.len;

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
   ddd68:	f5a0 5314 	sub.w	r3, r0, #9472	; 0x2500
#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
#endif
    {
        ret = x509_get_crt_ext( &p, end, crt );
        if( ret != 0 )
   ddd6c:	2b00      	cmp	r3, #0
   ddd6e:	f43f aec8 	beq.w	ddb02 <mbedtls_x509_crt_parse_der+0x232>
   ddd72:	e753      	b.n	ddc1c <mbedtls_x509_crt_parse_der+0x34c>
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
   ddd74:	9b08      	ldr	r3, [sp, #32]
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );

        if( ret != 0 )
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;
   ddd76:	9506      	str	r5, [sp, #24]

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
   ddd78:	2b00      	cmp	r3, #0
   ddd7a:	f43f aee2 	beq.w	ddb42 <mbedtls_x509_crt_parse_der+0x272>
   ddd7e:	e0e7      	b.n	ddf50 <mbedtls_x509_crt_parse_der+0x680>
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;

        switch( ext_type )
   ddd80:	dc04      	bgt.n	ddd8c <mbedtls_x509_crt_parse_der+0x4bc>
   ddd82:	2a04      	cmp	r2, #4
   ddd84:	d03b      	beq.n	dddfe <mbedtls_x509_crt_parse_der+0x52e>
   ddd86:	2a20      	cmp	r2, #32
   ddd88:	d069      	beq.n	dde5e <mbedtls_x509_crt_parse_der+0x58e>
   ddd8a:	e0e5      	b.n	ddf58 <mbedtls_x509_crt_parse_der+0x688>
   ddd8c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   ddd90:	d056      	beq.n	dde40 <mbedtls_x509_crt_parse_der+0x570>
   ddd92:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   ddd96:	f000 80b3 	beq.w	ddf00 <mbedtls_x509_crt_parse_der+0x630>
   ddd9a:	e0dd      	b.n	ddf58 <mbedtls_x509_crt_parse_der+0x688>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p == end )
   ddd9c:	9b06      	ldr	r3, [sp, #24]
   ddd9e:	429d      	cmp	r5, r3
   ddda0:	f43f aecf 	beq.w	ddb42 <mbedtls_x509_crt_parse_der+0x272>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
   ddda4:	465a      	mov	r2, fp
   ddda6:	4629      	mov	r1, r5
   ddda8:	a806      	add	r0, sp, #24
   dddaa:	f7f7 fcd5 	bl	d5758 <mbedtls_asn1_get_bool>
   dddae:	b188      	cbz	r0, dddd4 <mbedtls_x509_crt_parse_der+0x504>
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   dddb0:	f110 0f62 	cmn.w	r0, #98	; 0x62
   dddb4:	f47f af2e 	bne.w	ddc14 <mbedtls_x509_crt_parse_der+0x344>
            ret = mbedtls_asn1_get_int( p, end, ca_istrue );
   dddb8:	465a      	mov	r2, fp
   dddba:	4629      	mov	r1, r5
   dddbc:	a806      	add	r0, sp, #24
   dddbe:	f7f7 fce4 	bl	d578a <mbedtls_asn1_get_int>

        if( ret != 0 )
   dddc2:	2800      	cmp	r0, #0
   dddc4:	f47f af26 	bne.w	ddc14 <mbedtls_x509_crt_parse_der+0x344>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        if( *ca_istrue != 0 )
   dddc8:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   dddcc:	b113      	cbz	r3, dddd4 <mbedtls_x509_crt_parse_der+0x504>
            *ca_istrue = 1;
   dddce:	2301      	movs	r3, #1
   dddd0:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    }

    if( *p == end )
   dddd4:	9b06      	ldr	r3, [sp, #24]
   dddd6:	429d      	cmp	r5, r3
   dddd8:	f43f aeb3 	beq.w	ddb42 <mbedtls_x509_crt_parse_der+0x272>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
   ddddc:	9a03      	ldr	r2, [sp, #12]
   dddde:	4629      	mov	r1, r5
   ddde0:	a806      	add	r0, sp, #24
   ddde2:	f7f7 fcd2 	bl	d578a <mbedtls_asn1_get_int>
   ddde6:	2800      	cmp	r0, #0
   ddde8:	f47f af14 	bne.w	ddc14 <mbedtls_x509_crt_parse_der+0x344>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p != end )
   dddec:	9b06      	ldr	r3, [sp, #24]
   dddee:	429d      	cmp	r5, r3
   dddf0:	d187      	bne.n	ddd02 <mbedtls_x509_crt_parse_der+0x432>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    (*max_pathlen)++;
   dddf2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   dddf6:	3301      	adds	r3, #1
   dddf8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   dddfc:	e6a1      	b.n	ddb42 <mbedtls_x509_crt_parse_der+0x272>
{
    int ret;
    size_t i;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
   dddfe:	aa17      	add	r2, sp, #92	; 0x5c
   dde00:	4629      	mov	r1, r5
   dde02:	a806      	add	r0, sp, #24
                               const unsigned char *end,
                               unsigned int *key_usage)
{
    int ret;
    size_t i;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
   dde04:	9317      	str	r3, [sp, #92]	; 0x5c
   dde06:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
   dde0a:	9319      	str	r3, [sp, #100]	; 0x64

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
   dde0c:	f7f7 fcf4 	bl	d57f8 <mbedtls_asn1_get_bitstring>
   dde10:	2800      	cmp	r0, #0
   dde12:	d17f      	bne.n	ddf14 <mbedtls_x509_crt_parse_der+0x644>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( bs.len < 1 )
   dde14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   dde16:	2a00      	cmp	r2, #0
   dde18:	f000 80a0 	beq.w	ddf5c <mbedtls_x509_crt_parse_der+0x68c>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
   dde1c:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
   dde20:	9d19      	ldr	r5, [sp, #100]	; 0x64
   dde22:	5c2b      	ldrb	r3, [r5, r0]
   dde24:	00c1      	lsls	r1, r0, #3
   dde26:	408b      	lsls	r3, r1
   dde28:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
   dde2c:	3001      	adds	r0, #1
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
   dde2e:	430b      	orrs	r3, r1
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
   dde30:	4282      	cmp	r2, r0
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
   dde32:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
   dde36:	f43f ae84 	beq.w	ddb42 <mbedtls_x509_crt_parse_der+0x272>
   dde3a:	2804      	cmp	r0, #4
   dde3c:	d1f1      	bne.n	dde22 <mbedtls_x509_crt_parse_der+0x552>
   dde3e:	e680      	b.n	ddb42 <mbedtls_x509_crt_parse_der+0x272>
                               const unsigned char *end,
                               mbedtls_x509_sequence *ext_key_usage)
{
    int ret;

    if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
   dde40:	2306      	movs	r3, #6
   dde42:	f504 7284 	add.w	r2, r4, #264	; 0x108
   dde46:	4629      	mov	r1, r5
   dde48:	a806      	add	r0, sp, #24
   dde4a:	f7f7 fd0e 	bl	d586a <mbedtls_asn1_get_sequence_of>
   dde4e:	2800      	cmp	r0, #0
   dde50:	d160      	bne.n	ddf14 <mbedtls_x509_crt_parse_der+0x644>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
   dde52:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   dde56:	2b00      	cmp	r3, #0
   dde58:	f47f ae73 	bne.w	ddb42 <mbedtls_x509_crt_parse_der+0x272>
   dde5c:	e07e      	b.n	ddf5c <mbedtls_x509_crt_parse_der+0x68c>
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   dde5e:	2330      	movs	r3, #48	; 0x30
   dde60:	aa0a      	add	r2, sp, #40	; 0x28
   dde62:	4629      	mov	r1, r5
   dde64:	a806      	add	r0, sp, #24
                return( ret );
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
   dde66:	f104 0be8 	add.w	fp, r4, #232	; 0xe8
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   dde6a:	f7f7 fc61 	bl	d5730 <mbedtls_asn1_get_tag>
   dde6e:	2800      	cmp	r0, #0
   dde70:	f47f aed0 	bne.w	ddc14 <mbedtls_x509_crt_parse_der+0x344>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p + len != end )
   dde74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dde76:	9a06      	ldr	r2, [sp, #24]
   dde78:	4413      	add	r3, r2
   dde7a:	429d      	cmp	r5, r3
   dde7c:	f47f af41 	bne.w	ddd02 <mbedtls_x509_crt_parse_der+0x432>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    while( *p < end )
   dde80:	9a06      	ldr	r2, [sp, #24]
   dde82:	4295      	cmp	r5, r2
   dde84:	d933      	bls.n	ddeee <mbedtls_x509_crt_parse_der+0x61e>
    {
        if( ( end - *p ) < 1 )
   dde86:	1aab      	subs	r3, r5, r2
   dde88:	2b00      	cmp	r3, #0
   dde8a:	dd35      	ble.n	ddef8 <mbedtls_x509_crt_parse_der+0x628>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
   dde8c:	f812 3b01 	ldrb.w	r3, [r2], #1
        (*p)++;
   dde90:	9206      	str	r2, [sp, #24]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
   dde92:	4629      	mov	r1, r5
   dde94:	aa17      	add	r2, sp, #92	; 0x5c
   dde96:	a806      	add	r0, sp, #24
    {
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
   dde98:	9303      	str	r3, [sp, #12]
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
   dde9a:	f7f7 fbf7 	bl	d568c <mbedtls_asn1_get_len>
   dde9e:	9b03      	ldr	r3, [sp, #12]
   ddea0:	2800      	cmp	r0, #0
   ddea2:	f47f aeb7 	bne.w	ddc14 <mbedtls_x509_crt_parse_der+0x344>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        if( ( tag & MBEDTLS_ASN1_TAG_CLASS_MASK ) !=
   ddea6:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   ddeaa:	2a80      	cmp	r2, #128	; 0x80
   ddeac:	d150      	bne.n	ddf50 <mbedtls_x509_crt_parse_der+0x680>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
        }

        /* Skip everything but DNS name */
        if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
   ddeae:	2b82      	cmp	r3, #130	; 0x82
   ddeb0:	d002      	beq.n	ddeb8 <mbedtls_x509_crt_parse_der+0x5e8>
        {
            *p += tag_len;
   ddeb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ddeb4:	9a06      	ldr	r2, [sp, #24]
   ddeb6:	e017      	b.n	ddee8 <mbedtls_x509_crt_parse_der+0x618>
            continue;
        }

        /* Allocate and assign next pointer */
        if( cur->buf.p != NULL )
   ddeb8:	f8db 3008 	ldr.w	r3, [fp, #8]
   ddebc:	b15b      	cbz	r3, dded6 <mbedtls_x509_crt_parse_der+0x606>
        {
            if( cur->next != NULL )
   ddebe:	f8db 300c 	ldr.w	r3, [fp, #12]
   ddec2:	2b00      	cmp	r3, #0
   ddec4:	d146      	bne.n	ddf54 <mbedtls_x509_crt_parse_der+0x684>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

            cur->next = (mbedtls_asn1_sequence *)mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
   ddec6:	2110      	movs	r1, #16
   ddec8:	2001      	movs	r0, #1
   ddeca:	f008 ff23 	bl	e6d14 <calloc>
   ddece:	f8cb 000c 	str.w	r0, [fp, #12]

            if( cur->next == NULL )
   dded2:	b198      	cbz	r0, ddefc <mbedtls_x509_crt_parse_der+0x62c>
   dded4:	4683      	mov	fp, r0

            cur = cur->next;
        }

        buf = &(cur->buf);
        buf->tag = tag;
   dded6:	2382      	movs	r3, #130	; 0x82
   dded8:	f8cb 3000 	str.w	r3, [fp]
        buf->p = *p;
   ddedc:	9a06      	ldr	r2, [sp, #24]
   ddede:	f8cb 2008 	str.w	r2, [fp, #8]
        buf->len = tag_len;
   ddee2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ddee4:	f8cb 3004 	str.w	r3, [fp, #4]
        *p += buf->len;
   ddee8:	4413      	add	r3, r2
   ddeea:	9306      	str	r3, [sp, #24]
   ddeec:	e7c8      	b.n	dde80 <mbedtls_x509_crt_parse_der+0x5b0>
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
   ddeee:	f8cb 800c 	str.w	r8, [fp, #12]

    if( *p != end )
   ddef2:	f43f ae26 	beq.w	ddb42 <mbedtls_x509_crt_parse_der+0x272>
   ddef6:	e704      	b.n	ddd02 <mbedtls_x509_crt_parse_der+0x432>

    while( *p < end )
    {
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   ddef8:	4b0f      	ldr	r3, [pc, #60]	; (ddf38 <mbedtls_x509_crt_parse_der+0x668>)
   ddefa:	e68f      	b.n	ddc1c <mbedtls_x509_crt_parse_der+0x34c>

            cur->next = (mbedtls_asn1_sequence *)mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                        MBEDTLS_ERR_ASN1_ALLOC_FAILED );
   ddefc:	4b0f      	ldr	r3, [pc, #60]	; (ddf3c <mbedtls_x509_crt_parse_der+0x66c>)
   ddefe:	e68d      	b.n	ddc1c <mbedtls_x509_crt_parse_der+0x34c>
                                       unsigned char *ns_cert_type)
{
    int ret;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
   ddf00:	aa17      	add	r2, sp, #92	; 0x5c
   ddf02:	4629      	mov	r1, r5
   ddf04:	a806      	add	r0, sp, #24
static int x509_get_ns_cert_type( unsigned char **p,
                                       const unsigned char *end,
                                       unsigned char *ns_cert_type)
{
    int ret;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
   ddf06:	9317      	str	r3, [sp, #92]	; 0x5c
   ddf08:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
   ddf0c:	9319      	str	r3, [sp, #100]	; 0x64

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
   ddf0e:	f7f7 fc73 	bl	d57f8 <mbedtls_asn1_get_bitstring>
   ddf12:	b1a8      	cbz	r0, ddf40 <mbedtls_x509_crt_parse_der+0x670>
                return( ret );
            break;

        case MBEDTLS_X509_EXT_NS_CERT_TYPE:
            /* Parse netscape certificate type */
            if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
   ddf14:	f5b0 5314 	subs.w	r3, r0, #9472	; 0x2500
   ddf18:	f43f ae13 	beq.w	ddb42 <mbedtls_x509_crt_parse_der+0x272>
   ddf1c:	e67e      	b.n	ddc1c <mbedtls_x509_crt_parse_der+0x34c>
   ddf1e:	bf00      	nop
   ddf20:	ffffd800 	.word	0xffffd800
   ddf24:	ffffd780 	.word	0xffffd780
   ddf28:	ffffda80 	.word	0xffffda80
   ddf2c:	ffffdb9a 	.word	0xffffdb9a
   ddf30:	ffffda9a 	.word	0xffffda9a
   ddf34:	ffffd980 	.word	0xffffd980
   ddf38:	ffffdaa0 	.word	0xffffdaa0
   ddf3c:	ffffda96 	.word	0xffffda96
    mbedtls_x509_bitstring bs = { 0, 0, NULL };

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( bs.len != 1 )
   ddf40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ddf42:	2b01      	cmp	r3, #1
   ddf44:	d10a      	bne.n	ddf5c <mbedtls_x509_crt_parse_der+0x68c>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *ns_cert_type = *bs.p;
   ddf46:	9b19      	ldr	r3, [sp, #100]	; 0x64
   ddf48:	781b      	ldrb	r3, [r3, #0]
   ddf4a:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
   ddf4e:	e5f8      	b.n	ddb42 <mbedtls_x509_crt_parse_der+0x272>
#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
            {
                /* Data is marked as critical: fail */
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                        MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   ddf50:	4b05      	ldr	r3, [pc, #20]	; (ddf68 <mbedtls_x509_crt_parse_der+0x698>)
   ddf52:	e663      	b.n	ddc1c <mbedtls_x509_crt_parse_der+0x34c>
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
   ddf54:	4b05      	ldr	r3, [pc, #20]	; (ddf6c <mbedtls_x509_crt_parse_der+0x69c>)
   ddf56:	e661      	b.n	ddc1c <mbedtls_x509_crt_parse_der+0x34c>
                    &crt->ns_cert_type ) ) != 0 )
                return( ret );
            break;

        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
   ddf58:	4b05      	ldr	r3, [pc, #20]	; (ddf70 <mbedtls_x509_crt_parse_der+0x6a0>)
   ddf5a:	e65f      	b.n	ddc1c <mbedtls_x509_crt_parse_der+0x34c>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   ddf5c:	4b05      	ldr	r3, [pc, #20]	; (ddf74 <mbedtls_x509_crt_parse_der+0x6a4>)
   ddf5e:	e65d      	b.n	ddc1c <mbedtls_x509_crt_parse_der+0x34c>

        return( ret );
    }

    return( 0 );
}
   ddf60:	4628      	mov	r0, r5
   ddf62:	b01b      	add	sp, #108	; 0x6c
   ddf64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddf68:	ffffda9e 	.word	0xffffda9e
   ddf6c:	ffffdb00 	.word	0xffffdb00
   ddf70:	ffffdf80 	.word	0xffffdf80
   ddf74:	ffffda9c 	.word	0xffffda9c

000ddf78 <mbedtls_x509_crt_parse>:
/*
 * Parse one or more PEM certificates from a buffer and add them to the chained
 * list
 */
int mbedtls_x509_crt_parse( mbedtls_x509_crt *chain, const unsigned char *buf, size_t buflen )
{
   ddf78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ddf7c:	460d      	mov	r5, r1
   ddf7e:	b088      	sub	sp, #32
   ddf80:	4617      	mov	r7, r2
#endif

    /*
     * Check for valid input
     */
    if( chain == NULL || buf == NULL )
   ddf82:	4681      	mov	r9, r0
   ddf84:	2800      	cmp	r0, #0
   ddf86:	d054      	beq.n	de032 <mbedtls_x509_crt_parse+0xba>
   ddf88:	2900      	cmp	r1, #0
   ddf8a:	d052      	beq.n	de032 <mbedtls_x509_crt_parse+0xba>
    /*
     * Determine buffer content. Buffer contains either one DER certificate or
     * one or more PEM certificates.
     */
#if defined(MBEDTLS_PEM_PARSE_C)
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
   ddf8c:	2a00      	cmp	r2, #0
   ddf8e:	d054      	beq.n	de03a <mbedtls_x509_crt_parse+0xc2>
   ddf90:	188b      	adds	r3, r1, r2
   ddf92:	f813 4c01 	ldrb.w	r4, [r3, #-1]
   ddf96:	2c00      	cmp	r4, #0
   ddf98:	d14f      	bne.n	de03a <mbedtls_x509_crt_parse+0xc2>
        strstr( (const char *) buf, "-----BEGIN CERTIFICATE-----" ) != NULL )
   ddf9a:	492c      	ldr	r1, [pc, #176]	; (de04c <mbedtls_x509_crt_parse+0xd4>)
   ddf9c:	4628      	mov	r0, r5
   ddf9e:	f009 f86a 	bl	e7076 <strstr>
    /*
     * Determine buffer content. Buffer contains either one DER certificate or
     * one or more PEM certificates.
     */
#if defined(MBEDTLS_PEM_PARSE_C)
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
   ddfa2:	2800      	cmp	r0, #0
   ddfa4:	d049      	beq.n	de03a <mbedtls_x509_crt_parse+0xc2>
   ddfa6:	46a0      	mov	r8, r4
   ddfa8:	46a2      	mov	sl, r4
    {
        int ret;
        mbedtls_pem_context pem;

        /* 1 rather than 0 since the terminating NULL byte is counted in */
        while( buflen > 1 )
   ddfaa:	2f01      	cmp	r7, #1
   ddfac:	d938      	bls.n	de020 <mbedtls_x509_crt_parse+0xa8>
        {
            size_t use_len;
            mbedtls_pem_init( &pem );
   ddfae:	a805      	add	r0, sp, #20
   ddfb0:	f005 fbc9 	bl	e3746 <mbedtls_pem_init>

            /* If we get there, we know the string is null-terminated */
            ret = mbedtls_pem_read_buffer( &pem,
   ddfb4:	ab04      	add	r3, sp, #16
   ddfb6:	9302      	str	r3, [sp, #8]
   ddfb8:	2300      	movs	r3, #0
   ddfba:	9301      	str	r3, [sp, #4]
   ddfbc:	9300      	str	r3, [sp, #0]
   ddfbe:	4a24      	ldr	r2, [pc, #144]	; (de050 <mbedtls_x509_crt_parse+0xd8>)
   ddfc0:	4922      	ldr	r1, [pc, #136]	; (de04c <mbedtls_x509_crt_parse+0xd4>)
   ddfc2:	462b      	mov	r3, r5
   ddfc4:	a805      	add	r0, sp, #20
   ddfc6:	f005 fbc3 	bl	e3750 <mbedtls_pem_read_buffer>
                           "-----BEGIN CERTIFICATE-----",
                           "-----END CERTIFICATE-----",
                           buf, NULL, 0, &use_len );

            if( ret == 0 )
   ddfca:	4606      	mov	r6, r0
   ddfcc:	b968      	cbnz	r0, ddfea <mbedtls_x509_crt_parse+0x72>
            {
                /*
                 * Was PEM encoded
                 */
                buflen -= use_len;
   ddfce:	9b04      	ldr	r3, [sp, #16]
                continue;
            }
            else
                break;

            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
   ddfd0:	9a06      	ldr	r2, [sp, #24]
   ddfd2:	9905      	ldr	r1, [sp, #20]
   ddfd4:	4648      	mov	r0, r9
            if( ret == 0 )
            {
                /*
                 * Was PEM encoded
                 */
                buflen -= use_len;
   ddfd6:	1aff      	subs	r7, r7, r3
                buf += use_len;
   ddfd8:	441d      	add	r5, r3
                continue;
            }
            else
                break;

            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
   ddfda:	f7ff fc79 	bl	dd8d0 <mbedtls_x509_crt_parse_der>
   ddfde:	4606      	mov	r6, r0

            mbedtls_pem_free( &pem );
   ddfe0:	a805      	add	r0, sp, #20
   ddfe2:	f005 fc3f 	bl	e3864 <mbedtls_pem_free>

            if( ret != 0 )
   ddfe6:	b96e      	cbnz	r6, de004 <mbedtls_x509_crt_parse+0x8c>
   ddfe8:	e015      	b.n	de016 <mbedtls_x509_crt_parse+0x9e>
                 * Was PEM encoded
                 */
                buflen -= use_len;
                buf += use_len;
            }
            else if( ret == MBEDTLS_ERR_PEM_BAD_INPUT_DATA )
   ddfea:	f510 5fa4 	cmn.w	r0, #5248	; 0x1480
   ddfee:	d015      	beq.n	de01c <mbedtls_x509_crt_parse+0xa4>
            {
                return( ret );
            }
            else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   ddff0:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   ddff4:	d014      	beq.n	de020 <mbedtls_x509_crt_parse+0xa8>
            {
                mbedtls_pem_free( &pem );
   ddff6:	a805      	add	r0, sp, #20
   ddff8:	f005 fc34 	bl	e3864 <mbedtls_pem_free>

                /*
                 * PEM header and footer were found
                 */
                buflen -= use_len;
   ddffc:	9b04      	ldr	r3, [sp, #16]
   ddffe:	1aff      	subs	r7, r7, r3
                buf += use_len;
   de000:	441d      	add	r5, r3
   de002:	e002      	b.n	de00a <mbedtls_x509_crt_parse+0x92>
            if( ret != 0 )
            {
                /*
                 * Quit parsing on a memory error
                 */
                if( ret == MBEDTLS_ERR_X509_ALLOC_FAILED )
   de004:	f516 5f22 	cmn.w	r6, #10368	; 0x2880
   de008:	d008      	beq.n	de01c <mbedtls_x509_crt_parse+0xa4>
                    return( ret );

                if( first_error == 0 )
   de00a:	f1b8 0f00 	cmp.w	r8, #0
   de00e:	bf08      	it	eq
   de010:	46b0      	moveq	r8, r6
                    first_error = ret;

                total_failed++;
   de012:	3401      	adds	r4, #1
                continue;
   de014:	e7c9      	b.n	ddfaa <mbedtls_x509_crt_parse+0x32>
            }

            success = 1;
   de016:	f04f 0a01 	mov.w	sl, #1
   de01a:	e7c6      	b.n	ddfaa <mbedtls_x509_crt_parse+0x32>
   de01c:	4630      	mov	r0, r6
   de01e:	e011      	b.n	de044 <mbedtls_x509_crt_parse+0xcc>
        }
    }

    if( success )
   de020:	f1ba 0f00 	cmp.w	sl, #0
   de024:	d107      	bne.n	de036 <mbedtls_x509_crt_parse+0xbe>
        return( total_failed );
    else if( first_error )
   de026:	480b      	ldr	r0, [pc, #44]	; (de054 <mbedtls_x509_crt_parse+0xdc>)
   de028:	f1b8 0f00 	cmp.w	r8, #0
   de02c:	bf18      	it	ne
   de02e:	4640      	movne	r0, r8
   de030:	e008      	b.n	de044 <mbedtls_x509_crt_parse+0xcc>

    /*
     * Check for valid input
     */
    if( chain == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   de032:	4809      	ldr	r0, [pc, #36]	; (de058 <mbedtls_x509_crt_parse+0xe0>)
   de034:	e006      	b.n	de044 <mbedtls_x509_crt_parse+0xcc>
   de036:	4620      	mov	r0, r4
   de038:	e004      	b.n	de044 <mbedtls_x509_crt_parse+0xcc>
    {
        buf_format = MBEDTLS_X509_FORMAT_PEM;
    }

    if( buf_format == MBEDTLS_X509_FORMAT_DER )
        return mbedtls_x509_crt_parse_der( chain, buf, buflen );
   de03a:	463a      	mov	r2, r7
   de03c:	4629      	mov	r1, r5
   de03e:	4648      	mov	r0, r9
   de040:	f7ff fc46 	bl	dd8d0 <mbedtls_x509_crt_parse_der>
    else if( first_error )
        return( first_error );
    else
        return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
#endif /* MBEDTLS_PEM_PARSE_C */
}
   de044:	b008      	add	sp, #32
   de046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de04a:	bf00      	nop
   de04c:	000e9aa1 	.word	0x000e9aa1
   de050:	000e9abd 	.word	0x000e9abd
   de054:	ffffd880 	.word	0xffffd880
   de058:	ffffd800 	.word	0xffffd800

000de05c <mbedtls_pk_init>:
 */
void mbedtls_pk_init( mbedtls_pk_context *ctx )
{
    PK_VALIDATE( ctx != NULL );

    ctx->pk_info = NULL;
   de05c:	2300      	movs	r3, #0
   de05e:	6003      	str	r3, [r0, #0]
    ctx->pk_ctx = NULL;
   de060:	6043      	str	r3, [r0, #4]
   de062:	4770      	bx	lr

000de064 <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
   de064:	b510      	push	{r4, lr}
    if( ctx == NULL )
   de066:	4604      	mov	r4, r0
   de068:	b150      	cbz	r0, de080 <mbedtls_pk_free+0x1c>
        return;

    if ( ctx->pk_info != NULL )
   de06a:	6803      	ldr	r3, [r0, #0]
   de06c:	b113      	cbz	r3, de074 <mbedtls_pk_free+0x10>
        ctx->pk_info->ctx_free_func( ctx->pk_ctx );
   de06e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   de070:	6840      	ldr	r0, [r0, #4]
   de072:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );
   de074:	4620      	mov	r0, r4
   de076:	2108      	movs	r1, #8
}
   de078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return;

    if ( ctx->pk_info != NULL )
        ctx->pk_info->ctx_free_func( ctx->pk_ctx );

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );
   de07c:	f7fc ba30 	b.w	da4e0 <mbedtls_platform_zeroize>
   de080:	bd10      	pop	{r4, pc}
	...

000de084 <mbedtls_pk_info_from_type>:

/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
   de084:	3801      	subs	r0, #1
   de086:	b2c0      	uxtb	r0, r0
   de088:	2803      	cmp	r0, #3
   de08a:	bf9a      	itte	ls
   de08c:	4b02      	ldrls	r3, [pc, #8]	; (de098 <mbedtls_pk_info_from_type+0x14>)
   de08e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   de092:	2000      	movhi	r0, #0
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
    }
}
   de094:	4770      	bx	lr
   de096:	bf00      	nop
   de098:	000e9ed8 	.word	0x000e9ed8

000de09c <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
   de09c:	b570      	push	{r4, r5, r6, lr}
   de09e:	4605      	mov	r5, r0
    PK_VALIDATE_RET( ctx != NULL );
    if( info == NULL || ctx->pk_info != NULL )
   de0a0:	460e      	mov	r6, r1
   de0a2:	b141      	cbz	r1, de0b6 <mbedtls_pk_setup+0x1a>
   de0a4:	6804      	ldr	r4, [r0, #0]
   de0a6:	b934      	cbnz	r4, de0b6 <mbedtls_pk_setup+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
   de0a8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   de0aa:	4798      	blx	r3
   de0ac:	6068      	str	r0, [r5, #4]
   de0ae:	b120      	cbz	r0, de0ba <mbedtls_pk_setup+0x1e>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );

    ctx->pk_info = info;
   de0b0:	602e      	str	r6, [r5, #0]

    return( 0 );
   de0b2:	4620      	mov	r0, r4
   de0b4:	bd70      	pop	{r4, r5, r6, pc}
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
    PK_VALIDATE_RET( ctx != NULL );
    if( info == NULL || ctx->pk_info != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   de0b6:	4802      	ldr	r0, [pc, #8]	; (de0c0 <mbedtls_pk_setup+0x24>)
   de0b8:	bd70      	pop	{r4, r5, r6, pc}

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
   de0ba:	4802      	ldr	r0, [pc, #8]	; (de0c4 <mbedtls_pk_setup+0x28>)

    ctx->pk_info = info;

    return( 0 );
}
   de0bc:	bd70      	pop	{r4, r5, r6, pc}
   de0be:	bf00      	nop
   de0c0:	ffffc180 	.word	0xffffc180
   de0c4:	ffffc080 	.word	0xffffc080

000de0c8 <mbedtls_pk_can_do>:
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
    /* A context with null pk_info is not set up yet and can't do anything.
     * For backward compatibility, also accept NULL instead of a context
     * pointer. */
    if( ctx == NULL || ctx->pk_info == NULL )
   de0c8:	b120      	cbz	r0, de0d4 <mbedtls_pk_can_do+0xc>
   de0ca:	6803      	ldr	r3, [r0, #0]
   de0cc:	b113      	cbz	r3, de0d4 <mbedtls_pk_can_do+0xc>
        return( 0 );

    return( ctx->pk_info->can_do( type ) );
   de0ce:	68db      	ldr	r3, [r3, #12]
   de0d0:	4608      	mov	r0, r1
   de0d2:	4718      	bx	r3
}
   de0d4:	2000      	movs	r0, #0
   de0d6:	4770      	bx	lr

000de0d8 <mbedtls_pk_verify_restartable>:
int mbedtls_pk_verify_restartable( mbedtls_pk_context *ctx,
               mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len,
               mbedtls_pk_restart_ctx *rs_ctx )
{
   de0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   de0dc:	4617      	mov	r7, r2
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL ||
   de0de:	6802      	ldr	r2, [r0, #0]
int mbedtls_pk_verify_restartable( mbedtls_pk_context *ctx,
               mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len,
               mbedtls_pk_restart_ctx *rs_ctx )
{
   de0e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
   de0e4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   de0e8:	4604      	mov	r4, r0
   de0ea:	460e      	mov	r6, r1
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL ||
   de0ec:	b912      	cbnz	r2, de0f4 <mbedtls_pk_verify_restartable+0x1c>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   de0ee:	480e      	ldr	r0, [pc, #56]	; (de128 <mbedtls_pk_verify_restartable+0x50>)
   de0f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
   de0f4:	b93b      	cbnz	r3, de106 <mbedtls_pk_verify_restartable+0x2e>
        return( 0 );

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
   de0f6:	4608      	mov	r0, r1
   de0f8:	f7fe f896 	bl	dc228 <mbedtls_md_info_from_type>
   de0fc:	2800      	cmp	r0, #0
   de0fe:	d0f6      	beq.n	de0ee <mbedtls_pk_verify_restartable+0x16>
        return( -1 );

    *hash_len = mbedtls_md_get_size( md_info );
   de100:	f7fe f9ca 	bl	dc498 <mbedtls_md_get_size>
   de104:	4603      	mov	r3, r0
    }
#else /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */
    (void) rs_ctx;
#endif /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */

    if( ctx->pk_info->verify_func == NULL )
   de106:	6822      	ldr	r2, [r4, #0]
   de108:	6915      	ldr	r5, [r2, #16]
   de10a:	b155      	cbz	r5, de122 <mbedtls_pk_verify_restartable+0x4a>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
   de10c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   de110:	f8cd 8020 	str.w	r8, [sp, #32]
   de114:	463a      	mov	r2, r7
   de116:	4631      	mov	r1, r6
   de118:	6860      	ldr	r0, [r4, #4]
   de11a:	46ac      	mov	ip, r5
}
   de11c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
   de120:	4760      	bx	ip
#else /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */
    (void) rs_ctx;
#endif /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */

    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
   de122:	4802      	ldr	r0, [pc, #8]	; (de12c <mbedtls_pk_verify_restartable+0x54>)
   de124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de128:	ffffc180 	.word	0xffffc180
   de12c:	ffffc100 	.word	0xffffc100

000de130 <mbedtls_pk_verify>:
 * Verify a signature
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
   de130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( mbedtls_pk_verify_restartable( ctx, md_alg, hash, hash_len,
                                           sig, sig_len, NULL ) );
   de132:	2400      	movs	r4, #0
   de134:	9402      	str	r4, [sp, #8]
   de136:	9c07      	ldr	r4, [sp, #28]
   de138:	9401      	str	r4, [sp, #4]
   de13a:	9c06      	ldr	r4, [sp, #24]
   de13c:	9400      	str	r4, [sp, #0]
   de13e:	f7ff ffcb 	bl	de0d8 <mbedtls_pk_verify_restartable>
}
   de142:	b004      	add	sp, #16
   de144:	bd10      	pop	{r4, pc}
	...

000de148 <mbedtls_pk_sign_restartable>:
             mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_pk_restart_ctx *rs_ctx )
{
   de148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   de14c:	4616      	mov	r6, r2
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL ||
   de14e:	6802      	ldr	r2, [r0, #0]
             mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_pk_restart_ctx *rs_ctx )
{
   de150:	af08      	add	r7, sp, #32
   de152:	4604      	mov	r4, r0
   de154:	460d      	mov	r5, r1
   de156:	e897 0780 	ldmia.w	r7, {r7, r8, r9, sl}
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL ||
   de15a:	b912      	cbnz	r2, de162 <mbedtls_pk_sign_restartable+0x1a>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   de15c:	4811      	ldr	r0, [pc, #68]	; (de1a4 <mbedtls_pk_sign_restartable+0x5c>)
   de15e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
   de162:	b93b      	cbnz	r3, de174 <mbedtls_pk_sign_restartable+0x2c>
        return( 0 );

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
   de164:	4608      	mov	r0, r1
   de166:	f7fe f85f 	bl	dc228 <mbedtls_md_info_from_type>
   de16a:	2800      	cmp	r0, #0
   de16c:	d0f6      	beq.n	de15c <mbedtls_pk_sign_restartable+0x14>
        return( -1 );

    *hash_len = mbedtls_md_get_size( md_info );
   de16e:	f7fe f993 	bl	dc498 <mbedtls_md_get_size>
   de172:	4603      	mov	r3, r0
    }
#else /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */
    (void) rs_ctx;
#endif /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */

    if( ctx->pk_info->sign_func == NULL )
   de174:	6822      	ldr	r2, [r4, #0]
   de176:	f8d2 e014 	ldr.w	lr, [r2, #20]
   de17a:	f1be 0f00 	cmp.w	lr, #0
   de17e:	d00d      	beq.n	de19c <mbedtls_pk_sign_restartable+0x54>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
   de180:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   de184:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   de188:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   de18c:	9708      	str	r7, [sp, #32]
   de18e:	4632      	mov	r2, r6
   de190:	4629      	mov	r1, r5
   de192:	6860      	ldr	r0, [r4, #4]
   de194:	46f4      	mov	ip, lr
}
   de196:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
   de19a:	4760      	bx	ip
#else /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */
    (void) rs_ctx;
#endif /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */

    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
   de19c:	4802      	ldr	r0, [pc, #8]	; (de1a8 <mbedtls_pk_sign_restartable+0x60>)
   de19e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   de1a2:	bf00      	nop
   de1a4:	ffffc180 	.word	0xffffc180
   de1a8:	ffffc100 	.word	0xffffc100

000de1ac <mbedtls_pk_encrypt>:
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   de1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( input != NULL || ilen == 0 );
    PK_VALIDATE_RET( output != NULL || osize == 0 );
    PK_VALIDATE_RET( olen != NULL );

    if( ctx->pk_info == NULL )
   de1ae:	6804      	ldr	r4, [r0, #0]
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   de1b0:	ad05      	add	r5, sp, #20
   de1b2:	e895 40e0 	ldmia.w	r5, {r5, r6, r7, lr}
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( input != NULL || ilen == 0 );
    PK_VALIDATE_RET( output != NULL || osize == 0 );
    PK_VALIDATE_RET( olen != NULL );

    if( ctx->pk_info == NULL )
   de1b6:	b134      	cbz	r4, de1c6 <mbedtls_pk_encrypt+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->encrypt_func == NULL )
   de1b8:	69e4      	ldr	r4, [r4, #28]
   de1ba:	b134      	cbz	r4, de1ca <mbedtls_pk_encrypt+0x1e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
   de1bc:	46a4      	mov	ip, r4
   de1be:	6840      	ldr	r0, [r0, #4]
}
   de1c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    if( ctx->pk_info->encrypt_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
   de1c4:	4760      	bx	ip
    PK_VALIDATE_RET( input != NULL || ilen == 0 );
    PK_VALIDATE_RET( output != NULL || osize == 0 );
    PK_VALIDATE_RET( olen != NULL );

    if( ctx->pk_info == NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   de1c6:	4802      	ldr	r0, [pc, #8]	; (de1d0 <mbedtls_pk_encrypt+0x24>)
   de1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

    if( ctx->pk_info->encrypt_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
   de1ca:	4802      	ldr	r0, [pc, #8]	; (de1d4 <mbedtls_pk_encrypt+0x28>)

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
}
   de1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   de1ce:	bf00      	nop
   de1d0:	ffffc180 	.word	0xffffc180
   de1d4:	ffffc100 	.word	0xffffc100

000de1d8 <mbedtls_pk_get_bitlen>:
 */
size_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )
{
    /* For backward compatibility, accept NULL or a context that
     * isn't set up yet, and return a fake value that should be safe. */
    if( ctx == NULL || ctx->pk_info == NULL )
   de1d8:	b120      	cbz	r0, de1e4 <mbedtls_pk_get_bitlen+0xc>
   de1da:	6803      	ldr	r3, [r0, #0]
   de1dc:	b113      	cbz	r3, de1e4 <mbedtls_pk_get_bitlen+0xc>
        return( 0 );

    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
   de1de:	689b      	ldr	r3, [r3, #8]
   de1e0:	6840      	ldr	r0, [r0, #4]
   de1e2:	4718      	bx	r3
}
   de1e4:	2000      	movs	r0, #0
   de1e6:	4770      	bx	lr

000de1e8 <mbedtls_pk_verify_ext>:
 */
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
   de1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de1ec:	461f      	mov	r7, r3
   de1ee:	b087      	sub	sp, #28
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL )
   de1f0:	6813      	ldr	r3, [r2, #0]
 */
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
   de1f2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   de1f4:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   de1f8:	4683      	mov	fp, r0
   de1fa:	460d      	mov	r5, r1
   de1fc:	4614      	mov	r4, r2
   de1fe:	e898 0700 	ldmia.w	r8, {r8, r9, sl}
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL )
   de202:	b90b      	cbnz	r3, de208 <mbedtls_pk_verify_ext+0x20>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   de204:	4821      	ldr	r0, [pc, #132]	; (de28c <mbedtls_pk_verify_ext+0xa4>)
   de206:	e03d      	b.n	de284 <mbedtls_pk_verify_ext+0x9c>

    if( ! mbedtls_pk_can_do( ctx, type ) )
   de208:	4601      	mov	r1, r0
   de20a:	4610      	mov	r0, r2
   de20c:	f7ff ff5c 	bl	de0c8 <mbedtls_pk_can_do>
   de210:	2800      	cmp	r0, #0
   de212:	d034      	beq.n	de27e <mbedtls_pk_verify_ext+0x96>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    if( type == MBEDTLS_PK_RSASSA_PSS )
   de214:	f1bb 0f06 	cmp.w	fp, #6
   de218:	d123      	bne.n	de262 <mbedtls_pk_verify_ext+0x7a>
#if SIZE_MAX > UINT_MAX
        if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

        if( options == NULL )
   de21a:	2d00      	cmp	r5, #0
   de21c:	d0f2      	beq.n	de204 <mbedtls_pk_verify_ext+0x1c>
 *
 * \return          Key length in bytes, or 0 on error
 */
static inline size_t mbedtls_pk_get_len( const mbedtls_pk_context *ctx )
{
    return( ( mbedtls_pk_get_bitlen( ctx ) + 7 ) / 8 );
   de21e:	4620      	mov	r0, r4
   de220:	f7ff ffda 	bl	de1d8 <mbedtls_pk_get_bitlen>
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) options;

        if( sig_len < mbedtls_pk_get_len( ctx ) )
   de224:	3007      	adds	r0, #7
   de226:	ebb6 0fd0 	cmp.w	r6, r0, lsr #3
   de22a:	d32a      	bcc.n	de282 <mbedtls_pk_verify_ext+0x9a>
            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );

        ret = mbedtls_rsa_rsassa_pss_verify_ext( mbedtls_pk_rsa( *ctx ),
   de22c:	686b      	ldr	r3, [r5, #4]
   de22e:	9304      	str	r3, [sp, #16]
   de230:	782b      	ldrb	r3, [r5, #0]
   de232:	9303      	str	r3, [sp, #12]
   de234:	2300      	movs	r3, #0
   de236:	f8cd a014 	str.w	sl, [sp, #20]
   de23a:	f8cd 8008 	str.w	r8, [sp, #8]
   de23e:	e88d 0280 	stmia.w	sp, {r7, r9}
   de242:	461a      	mov	r2, r3
   de244:	4619      	mov	r1, r3
   de246:	6860      	ldr	r0, [r4, #4]
   de248:	f7f9 f946 	bl	d74d8 <mbedtls_rsa_rsassa_pss_verify_ext>
                NULL, NULL, MBEDTLS_RSA_PUBLIC,
                md_alg, (unsigned int) hash_len, hash,
                pss_opts->mgf1_hash_id,
                pss_opts->expected_salt_len,
                sig );
        if( ret != 0 )
   de24c:	b9d0      	cbnz	r0, de284 <mbedtls_pk_verify_ext+0x9c>
   de24e:	4620      	mov	r0, r4
   de250:	f7ff ffc2 	bl	de1d8 <mbedtls_pk_get_bitlen>
            return( ret );

        if( sig_len > mbedtls_pk_get_len( ctx ) )
   de254:	3007      	adds	r0, #7
            return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

        return( 0 );
   de256:	ebb6 0fd0 	cmp.w	r6, r0, lsr #3
   de25a:	480d      	ldr	r0, [pc, #52]	; (de290 <mbedtls_pk_verify_ext+0xa8>)
   de25c:	bf98      	it	ls
   de25e:	2000      	movls	r0, #0
   de260:	e010      	b.n	de284 <mbedtls_pk_verify_ext+0x9c>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_RSA_C && MBEDTLS_PKCS1_V21 */
    }

    /* General case: no options */
    if( options != NULL )
   de262:	2d00      	cmp	r5, #0
   de264:	d1ce      	bne.n	de204 <mbedtls_pk_verify_ext+0x1c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
   de266:	464b      	mov	r3, r9
   de268:	4642      	mov	r2, r8
   de26a:	4639      	mov	r1, r7
   de26c:	4620      	mov	r0, r4
   de26e:	9611      	str	r6, [sp, #68]	; 0x44
   de270:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
}
   de274:	b007      	add	sp, #28
   de276:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
   de27a:	f7ff bf59 	b.w	de130 <mbedtls_pk_verify>

    if( ctx->pk_info == NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ! mbedtls_pk_can_do( ctx, type ) )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
   de27e:	4805      	ldr	r0, [pc, #20]	; (de294 <mbedtls_pk_verify_ext+0xac>)
   de280:	e000      	b.n	de284 <mbedtls_pk_verify_ext+0x9c>
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) options;

        if( sig_len < mbedtls_pk_get_len( ctx ) )
            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
   de282:	4805      	ldr	r0, [pc, #20]	; (de298 <mbedtls_pk_verify_ext+0xb0>)
    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
}
   de284:	b007      	add	sp, #28
   de286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de28a:	bf00      	nop
   de28c:	ffffc180 	.word	0xffffc180
   de290:	ffffc700 	.word	0xffffc700
   de294:	ffffc100 	.word	0xffffc100
   de298:	ffffbc80 	.word	0xffffbc80

000de29c <mbedtls_pk_get_name>:
/*
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
   de29c:	b118      	cbz	r0, de2a6 <mbedtls_pk_get_name+0xa>
   de29e:	6803      	ldr	r3, [r0, #0]
   de2a0:	b10b      	cbz	r3, de2a6 <mbedtls_pk_get_name+0xa>
        return( "invalid PK" );

    return( ctx->pk_info->name );
   de2a2:	6858      	ldr	r0, [r3, #4]
   de2a4:	4770      	bx	lr
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( "invalid PK" );
   de2a6:	4801      	ldr	r0, [pc, #4]	; (de2ac <mbedtls_pk_get_name+0x10>)

    return( ctx->pk_info->name );
}
   de2a8:	4770      	bx	lr
   de2aa:	bf00      	nop
   de2ac:	000e9ecc 	.word	0x000e9ecc

000de2b0 <mbedtls_pk_get_type>:
/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
   de2b0:	b110      	cbz	r0, de2b8 <mbedtls_pk_get_type+0x8>
   de2b2:	6800      	ldr	r0, [r0, #0]
   de2b4:	b100      	cbz	r0, de2b8 <mbedtls_pk_get_type+0x8>
        return( MBEDTLS_PK_NONE );

    return( ctx->pk_info->type );
   de2b6:	7800      	ldrb	r0, [r0, #0]
}
   de2b8:	4770      	bx	lr

000de2ba <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>:
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
    if( ssl->f_set_timer == NULL )
   de2ba:	6c83      	ldr	r3, [r0, #72]	; 0x48
/*
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
   de2bc:	460a      	mov	r2, r1
    if( ssl->f_set_timer == NULL )
   de2be:	b113      	cbz	r3, de2c6 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm+0xc>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "set_timer to %d ms", (int) millisecs ) );
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
   de2c0:	0889      	lsrs	r1, r1, #2
   de2c2:	6c40      	ldr	r0, [r0, #68]	; 0x44
   de2c4:	4718      	bx	r3
   de2c6:	4770      	bx	lr

000de2c8 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>:
        ssl->out_iv  = ssl->out_hdr + 13;
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_hdr - 8;
   de2c8:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
   de2cc:	f1a3 0208 	sub.w	r2, r3, #8
   de2d0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
        ssl->out_len = ssl->out_hdr + 3;
   de2d4:	1cda      	adds	r2, r3, #3
        ssl->out_iv  = ssl->out_hdr + 5;
   de2d6:	3305      	adds	r3, #5
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_hdr - 8;
        ssl->out_len = ssl->out_hdr + 3;
   de2d8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
        ssl->out_iv  = ssl->out_hdr + 5;
   de2dc:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    }

    /* Adjust out_msg to make space for explicit IV, if used. */
    if( transform != NULL &&
   de2e0:	b131      	cbz	r1, de2f0 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform+0x28>
   de2e2:	68c2      	ldr	r2, [r0, #12]
   de2e4:	2a01      	cmp	r2, #1
        ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->out_msg = ssl->out_iv + transform->ivlen - transform->fixed_ivlen;
   de2e6:	bfc1      	itttt	gt
   de2e8:	68ca      	ldrgt	r2, [r1, #12]
   de2ea:	6909      	ldrgt	r1, [r1, #16]
   de2ec:	1a52      	subgt	r2, r2, r1
   de2ee:	189b      	addgt	r3, r3, r2
    }
    else
        ssl->out_msg = ssl->out_iv;
   de2f0:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
   de2f4:	4770      	bx	lr
	...

000de2f8 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi>:

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
   de2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int len = 12;
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
   de2fa:	6ac5      	ldr	r5, [r0, #44]	; 0x2c

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
   de2fc:	b0a9      	sub	sp, #164	; 0xa4
   de2fe:	4604      	mov	r4, r0
   de300:	460f      	mov	r7, r1
   de302:	4616      	mov	r6, r2
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
    if( !session )
   de304:	b905      	cbnz	r5, de308 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
   de306:	6a85      	ldr	r5, [r0, #40]	; 0x28

    mbedtls_sha256_init( &sha256 );
   de308:	a80d      	add	r0, sp, #52	; 0x34
   de30a:	f7f6 f9d3 	bl	d46b4 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha256" ) );

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
   de30e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   de310:	a80d      	add	r0, sp, #52	; 0x34
   de312:	f501 71ac 	add.w	r1, r1, #344	; 0x158
   de316:	f7f6 f9d6 	bl	d46c6 <mbedtls_sha256_clone>
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
   de31a:	4b10      	ldr	r3, [pc, #64]	; (de35c <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x64>)
   de31c:	4910      	ldr	r1, [pc, #64]	; (de360 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x68>)

    mbedtls_sha256_finish_ret( &sha256, padbuf );
   de31e:	a80d      	add	r0, sp, #52	; 0x34
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
   de320:	2e00      	cmp	r6, #0
   de322:	bf0c      	ite	eq
   de324:	461e      	moveq	r6, r3
   de326:	460e      	movne	r6, r1

    mbedtls_sha256_finish_ret( &sha256, padbuf );
   de328:	a905      	add	r1, sp, #20
   de32a:	f7f6 fdc1 	bl	d4eb0 <mbedtls_sha256_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
   de32e:	6b23      	ldr	r3, [r4, #48]	; 0x30
                             padbuf, 32, buf, len );
   de330:	9701      	str	r7, [sp, #4]
   de332:	2420      	movs	r4, #32
   de334:	220c      	movs	r2, #12
   de336:	9202      	str	r2, [sp, #8]
   de338:	9400      	str	r4, [sp, #0]
   de33a:	4632      	mov	r2, r6
   de33c:	f8d3 72ac 	ldr.w	r7, [r3, #684]	; 0x2ac
   de340:	2130      	movs	r1, #48	; 0x30
   de342:	ab05      	add	r3, sp, #20
   de344:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   de348:	47b8      	blx	r7

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );

    mbedtls_sha256_free( &sha256 );
   de34a:	a80d      	add	r0, sp, #52	; 0x34
   de34c:	f7f6 f9b6 	bl	d46bc <mbedtls_sha256_free>

    mbedtls_platform_zeroize(  padbuf, sizeof(  padbuf ) );
   de350:	4621      	mov	r1, r4
   de352:	a805      	add	r0, sp, #20
   de354:	f7fc f8c4 	bl	da4e0 <mbedtls_platform_zeroize>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
}
   de358:	b029      	add	sp, #164	; 0xa4
   de35a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   de35c:	000e9eed 	.word	0x000e9eed
   de360:	000e9efd 	.word	0x000e9efd

000de364 <_ZL26ssl_calc_verify_tls_sha256P19mbedtls_ssl_contextPh>:
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
void ssl_calc_verify_tls_sha256( mbedtls_ssl_context *ssl, unsigned char hash[32] )
{
   de364:	b530      	push	{r4, r5, lr}
   de366:	4605      	mov	r5, r0
   de368:	b09d      	sub	sp, #116	; 0x74
    mbedtls_sha256_context sha256;

    mbedtls_sha256_init( &sha256 );
   de36a:	a801      	add	r0, sp, #4
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
void ssl_calc_verify_tls_sha256( mbedtls_ssl_context *ssl, unsigned char hash[32] )
{
   de36c:	460c      	mov	r4, r1
    mbedtls_sha256_context sha256;

    mbedtls_sha256_init( &sha256 );
   de36e:	f7f6 f9a1 	bl	d46b4 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
   de372:	6b29      	ldr	r1, [r5, #48]	; 0x30
   de374:	a801      	add	r0, sp, #4
   de376:	f501 71ac 	add.w	r1, r1, #344	; 0x158
   de37a:	f7f6 f9a4 	bl	d46c6 <mbedtls_sha256_clone>
    mbedtls_sha256_finish_ret( &sha256, hash );
   de37e:	4621      	mov	r1, r4
   de380:	a801      	add	r0, sp, #4
   de382:	f7f6 fd95 	bl	d4eb0 <mbedtls_sha256_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 32 );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );

    mbedtls_sha256_free( &sha256 );
   de386:	a801      	add	r0, sp, #4
   de388:	f7f6 f998 	bl	d46bc <mbedtls_sha256_free>

    return;
}
   de38c:	b01d      	add	sp, #116	; 0x74
   de38e:	bd30      	pop	{r4, r5, pc}

000de390 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>:
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
   de390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de394:	b0b7      	sub	sp, #220	; 0xdc
   de396:	4604      	mov	r4, r0
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
   de398:	a803      	add	r0, sp, #12
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
   de39a:	468a      	mov	sl, r1
   de39c:	4693      	mov	fp, r2
   de39e:	4699      	mov	r9, r3
   de3a0:	9e43      	ldr	r6, [sp, #268]	; 0x10c
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
   de3a2:	f7fd ff4d 	bl	dc240 <mbedtls_md_init>

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
   de3a6:	4620      	mov	r0, r4
   de3a8:	f7fd ff3e 	bl	dc228 <mbedtls_md_info_from_type>
   de3ac:	4607      	mov	r7, r0
   de3ae:	2800      	cmp	r0, #0
   de3b0:	d074      	beq.n	de49c <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10c>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );

    md_len = mbedtls_md_get_size( md_info );
   de3b2:	f7fe f871 	bl	dc498 <mbedtls_md_get_size>
   de3b6:	4604      	mov	r4, r0

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
   de3b8:	4648      	mov	r0, r9
   de3ba:	f008 fe3f 	bl	e703c <strlen>
   de3be:	9a41      	ldr	r2, [sp, #260]	; 0x104
   de3c0:	1823      	adds	r3, r4, r0
   de3c2:	189a      	adds	r2, r3, r2
   de3c4:	2a80      	cmp	r2, #128	; 0x80
   de3c6:	4605      	mov	r5, r0
   de3c8:	9301      	str	r3, [sp, #4]
   de3ca:	d869      	bhi.n	de4a0 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x110>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
   de3cc:	ab16      	add	r3, sp, #88	; 0x58
   de3ce:	eb03 0804 	add.w	r8, r3, r4
   de3d2:	4602      	mov	r2, r0
   de3d4:	4649      	mov	r1, r9
   de3d6:	4640      	mov	r0, r8
   de3d8:	f008 fdb9 	bl	e6f4e <memcpy>
    memcpy( tmp + md_len + nb, random, rlen );
   de3dc:	9b01      	ldr	r3, [sp, #4]
   de3de:	9a41      	ldr	r2, [sp, #260]	; 0x104
   de3e0:	9940      	ldr	r1, [sp, #256]	; 0x100
   de3e2:	a816      	add	r0, sp, #88	; 0x58
   de3e4:	4418      	add	r0, r3
   de3e6:	f008 fdb2 	bl	e6f4e <memcpy>
    nb += rlen;

    /*
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
   de3ea:	4639      	mov	r1, r7
   de3ec:	2201      	movs	r2, #1
   de3ee:	a803      	add	r0, sp, #12
   de3f0:	f7fd ff46 	bl	dc280 <mbedtls_md_setup>
   de3f4:	4607      	mov	r7, r0
   de3f6:	2800      	cmp	r0, #0
   de3f8:	d153      	bne.n	de4a2 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x112>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
    memcpy( tmp + md_len + nb, random, rlen );
    nb += rlen;
   de3fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
        return( ret );

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
   de3fc:	4651      	mov	r1, sl
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
    memcpy( tmp + md_len + nb, random, rlen );
    nb += rlen;
   de3fe:	441d      	add	r5, r3
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
        return( ret );

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
   de400:	465a      	mov	r2, fp
   de402:	a803      	add	r0, sp, #12
   de404:	f7fd ff8c 	bl	dc320 <mbedtls_md_hmac_starts>
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
   de408:	462a      	mov	r2, r5
   de40a:	4641      	mov	r1, r8
   de40c:	a803      	add	r0, sp, #12
   de40e:	f7fd ffe7 	bl	dc3e0 <mbedtls_md_hmac_update>
    mbedtls_md_hmac_finish( &md_ctx, tmp );
   de412:	a916      	add	r1, sp, #88	; 0x58
   de414:	a803      	add	r0, sp, #12
   de416:	f7fd fff5 	bl	dc404 <mbedtls_md_hmac_finish>

    for( i = 0; i < dlen; i += md_len )
   de41a:	46b8      	mov	r8, r7
   de41c:	f10d 0a18 	add.w	sl, sp, #24
    {
        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
   de420:	4425      	add	r5, r4

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
    mbedtls_md_hmac_finish( &md_ctx, tmp );

    for( i = 0; i < dlen; i += md_len )
   de422:	45b0      	cmp	r8, r6

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
    }

    mbedtls_md_free( &md_ctx );
   de424:	a803      	add	r0, sp, #12

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
    mbedtls_md_hmac_finish( &md_ctx, tmp );

    for( i = 0; i < dlen; i += md_len )
   de426:	d22e      	bcs.n	de486 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xf6>
    {
        mbedtls_md_hmac_reset ( &md_ctx );
   de428:	f7fe f81e 	bl	dc468 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
   de42c:	462a      	mov	r2, r5
   de42e:	a916      	add	r1, sp, #88	; 0x58
   de430:	a803      	add	r0, sp, #12
   de432:	f7fd ffd5 	bl	dc3e0 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, h_i );
   de436:	4651      	mov	r1, sl
   de438:	a803      	add	r0, sp, #12
   de43a:	f7fd ffe3 	bl	dc404 <mbedtls_md_hmac_finish>

        mbedtls_md_hmac_reset ( &md_ctx );
   de43e:	a803      	add	r0, sp, #12
   de440:	f7fe f812 	bl	dc468 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
   de444:	4622      	mov	r2, r4
   de446:	a916      	add	r1, sp, #88	; 0x58
   de448:	a803      	add	r0, sp, #12
   de44a:	f7fd ffc9 	bl	dc3e0 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, tmp );
   de44e:	a916      	add	r1, sp, #88	; 0x58
   de450:	a803      	add	r0, sp, #12
   de452:	f7fd ffd7 	bl	dc404 <mbedtls_md_hmac_finish>

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
   de456:	eb08 0104 	add.w	r1, r8, r4

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
   de45a:	9842      	ldr	r0, [sp, #264]	; 0x108

        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
   de45c:	428e      	cmp	r6, r1
   de45e:	bf2c      	ite	cs
   de460:	4622      	movcs	r2, r4
   de462:	fbb6 f2f4 	udivcc	r2, r6, r4

        for( j = 0; j < k; j++ )
   de466:	f04f 0300 	mov.w	r3, #0

        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
   de46a:	bf38      	it	cc
   de46c:	fb04 6212 	mlscc	r2, r4, r2, r6

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
   de470:	4480      	add	r8, r0
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
   de472:	4293      	cmp	r3, r2
   de474:	d101      	bne.n	de47a <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xea>

        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
   de476:	4688      	mov	r8, r1
   de478:	e7d3      	b.n	de422 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x92>

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
   de47a:	f81a 0003 	ldrb.w	r0, [sl, r3]
   de47e:	f808 0003 	strb.w	r0, [r8, r3]
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
   de482:	3301      	adds	r3, #1
   de484:	e7f5      	b.n	de472 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xe2>
            dstbuf[i + j]  = h_i[j];
    }

    mbedtls_md_free( &md_ctx );
   de486:	f7fd fee0 	bl	dc24a <mbedtls_md_free>

    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
   de48a:	a816      	add	r0, sp, #88	; 0x58
   de48c:	2180      	movs	r1, #128	; 0x80
   de48e:	f7fc f827 	bl	da4e0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( h_i, sizeof( h_i ) );
   de492:	2140      	movs	r1, #64	; 0x40
   de494:	4650      	mov	r0, sl
   de496:	f7fc f823 	bl	da4e0 <mbedtls_platform_zeroize>

    return( 0 );
   de49a:	e002      	b.n	de4a2 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x112>
    int ret;

    mbedtls_md_init( &md_ctx );

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   de49c:	4f03      	ldr	r7, [pc, #12]	; (de4ac <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x11c>)
   de49e:	e000      	b.n	de4a2 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x112>

    md_len = mbedtls_md_get_size( md_info );

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   de4a0:	4f03      	ldr	r7, [pc, #12]	; (de4b0 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x120>)

    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
    mbedtls_platform_zeroize( h_i, sizeof( h_i ) );

    return( 0 );
}
   de4a2:	4638      	mov	r0, r7
   de4a4:	b037      	add	sp, #220	; 0xdc
   de4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de4aa:	bf00      	nop
   de4ac:	ffff9400 	.word	0xffff9400
   de4b0:	ffff8f00 	.word	0xffff8f00

000de4b4 <_ZL14tls_prf_sha256PKhjPKcS0_jPhj>:
#if defined(MBEDTLS_SHA256_C)
static int tls_prf_sha256( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
   de4b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
                             label, random, rlen, dstbuf, dlen ) );
   de4b6:	9c08      	ldr	r4, [sp, #32]
   de4b8:	9403      	str	r4, [sp, #12]
   de4ba:	9c07      	ldr	r4, [sp, #28]
   de4bc:	9402      	str	r4, [sp, #8]
   de4be:	9c06      	ldr	r4, [sp, #24]
   de4c0:	e88d 0018 	stmia.w	sp, {r3, r4}
   de4c4:	4613      	mov	r3, r2
   de4c6:	460a      	mov	r2, r1
   de4c8:	4601      	mov	r1, r0
   de4ca:	2006      	movs	r0, #6
   de4cc:	f7ff ff60 	bl	de390 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
   de4d0:	b004      	add	sp, #16
   de4d2:	bd10      	pop	{r4, pc}

000de4d4 <_ZL14tls_prf_sha384PKhjPKcS0_jPhj>:
#if defined(MBEDTLS_SHA512_C)
static int tls_prf_sha384( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
   de4d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA384, secret, slen,
                             label, random, rlen, dstbuf, dlen ) );
   de4d6:	9c08      	ldr	r4, [sp, #32]
   de4d8:	9403      	str	r4, [sp, #12]
   de4da:	9c07      	ldr	r4, [sp, #28]
   de4dc:	9402      	str	r4, [sp, #8]
   de4de:	9c06      	ldr	r4, [sp, #24]
   de4e0:	e88d 0018 	stmia.w	sp, {r3, r4}
   de4e4:	4613      	mov	r3, r2
   de4e6:	460a      	mov	r2, r1
   de4e8:	4601      	mov	r1, r0
   de4ea:	2007      	movs	r0, #7
   de4ec:	f7ff ff50 	bl	de390 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
   de4f0:	b004      	add	sp, #16
   de4f2:	bd10      	pop	{r4, pc}

000de4f4 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi>:
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
static void ssl_calc_finished_tls_sha384(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
   de4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int len = 12;
    const char *sender;
    mbedtls_sha512_context sha512;
    unsigned char padbuf[48];

    mbedtls_ssl_session *session = ssl->session_negotiate;
   de4f6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
static void ssl_calc_finished_tls_sha384(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
   de4f8:	b0c7      	sub	sp, #284	; 0x11c
   de4fa:	4604      	mov	r4, r0
   de4fc:	460f      	mov	r7, r1
   de4fe:	4616      	mov	r6, r2
    const char *sender;
    mbedtls_sha512_context sha512;
    unsigned char padbuf[48];

    mbedtls_ssl_session *session = ssl->session_negotiate;
    if( !session )
   de500:	b905      	cbnz	r5, de504 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
   de502:	6a85      	ldr	r5, [r0, #40]	; 0x28

    mbedtls_sha512_init( &sha512 );
   de504:	a810      	add	r0, sp, #64	; 0x40
   de506:	f004 f881 	bl	e260c <mbedtls_sha512_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha384" ) );

    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
   de50a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   de50c:	a810      	add	r0, sp, #64	; 0x40
   de50e:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
   de512:	f004 f884 	bl	e261e <mbedtls_sha512_clone>
                   sha512.state, sizeof( sha512.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
   de516:	4b10      	ldr	r3, [pc, #64]	; (de558 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x64>)
   de518:	4910      	ldr	r1, [pc, #64]	; (de55c <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x68>)

    mbedtls_sha512_finish_ret( &sha512, padbuf );
   de51a:	a810      	add	r0, sp, #64	; 0x40
                   sha512.state, sizeof( sha512.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
   de51c:	2e00      	cmp	r6, #0
   de51e:	bf0c      	ite	eq
   de520:	461e      	moveq	r6, r3
   de522:	460e      	movne	r6, r1

    mbedtls_sha512_finish_ret( &sha512, padbuf );
   de524:	a904      	add	r1, sp, #16
   de526:	f004 ffbd 	bl	e34a4 <mbedtls_sha512_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
   de52a:	6b23      	ldr	r3, [r4, #48]	; 0x30
                             padbuf, 48, buf, len );
   de52c:	9701      	str	r7, [sp, #4]
   de52e:	2430      	movs	r4, #48	; 0x30
   de530:	220c      	movs	r2, #12
   de532:	9202      	str	r2, [sp, #8]
   de534:	9400      	str	r4, [sp, #0]
   de536:	4632      	mov	r2, r6
   de538:	4621      	mov	r1, r4
   de53a:	f8d3 72ac 	ldr.w	r7, [r3, #684]	; 0x2ac
   de53e:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   de542:	ab04      	add	r3, sp, #16
   de544:	47b8      	blx	r7

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );

    mbedtls_sha512_free( &sha512 );
   de546:	a810      	add	r0, sp, #64	; 0x40
   de548:	f004 f864 	bl	e2614 <mbedtls_sha512_free>

    mbedtls_platform_zeroize(  padbuf, sizeof( padbuf ) );
   de54c:	4621      	mov	r1, r4
   de54e:	a804      	add	r0, sp, #16
   de550:	f7fb ffc6 	bl	da4e0 <mbedtls_platform_zeroize>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
}
   de554:	b047      	add	sp, #284	; 0x11c
   de556:	bdf0      	pop	{r4, r5, r6, r7, pc}
   de558:	000e9eed 	.word	0x000e9eed
   de55c:	000e9efd 	.word	0x000e9efd

000de560 <_ZL26ssl_calc_verify_tls_sha384P19mbedtls_ssl_contextPh>:
}
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
void ssl_calc_verify_tls_sha384( mbedtls_ssl_context *ssl, unsigned char hash[48] )
{
   de560:	b530      	push	{r4, r5, lr}
   de562:	4605      	mov	r5, r0
   de564:	b0b7      	sub	sp, #220	; 0xdc
    mbedtls_sha512_context sha512;

    mbedtls_sha512_init( &sha512 );
   de566:	4668      	mov	r0, sp
}
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
void ssl_calc_verify_tls_sha384( mbedtls_ssl_context *ssl, unsigned char hash[48] )
{
   de568:	460c      	mov	r4, r1
    mbedtls_sha512_context sha512;

    mbedtls_sha512_init( &sha512 );
   de56a:	f004 f84f 	bl	e260c <mbedtls_sha512_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha384" ) );

    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
   de56e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   de570:	4668      	mov	r0, sp
   de572:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
   de576:	f004 f852 	bl	e261e <mbedtls_sha512_clone>
    mbedtls_sha512_finish_ret( &sha512, hash );
   de57a:	4621      	mov	r1, r4
   de57c:	4668      	mov	r0, sp
   de57e:	f004 ff91 	bl	e34a4 <mbedtls_sha512_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 48 );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );

    mbedtls_sha512_free( &sha512 );
   de582:	4668      	mov	r0, sp
   de584:	f004 f846 	bl	e2614 <mbedtls_sha512_free>

    return;
}
   de588:	b037      	add	sp, #220	; 0xdc
   de58a:	bd30      	pop	{r4, r5, pc}

000de58c <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context>:

/* Append a new keycert entry to a (possibly empty) list */
static int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
   de58c:	b570      	push	{r4, r5, r6, lr}
   de58e:	4604      	mov	r4, r0
   de590:	460e      	mov	r6, r1
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
   de592:	2001      	movs	r0, #1
   de594:	210c      	movs	r1, #12

/* Append a new keycert entry to a (possibly empty) list */
static int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
   de596:	4615      	mov	r5, r2
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
   de598:	f008 fbbc 	bl	e6d14 <calloc>
    if( new_cert == NULL )
   de59c:	b178      	cbz	r0, de5be <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x32>
    new_cert->cert = cert;
    new_cert->key  = key;
    new_cert->next = NULL;

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
   de59e:	6822      	ldr	r2, [r4, #0]

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new_cert->cert = cert;
   de5a0:	6006      	str	r6, [r0, #0]
    new_cert->key  = key;
    new_cert->next = NULL;
   de5a2:	2300      	movs	r3, #0
    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new_cert->cert = cert;
    new_cert->key  = key;
   de5a4:	6045      	str	r5, [r0, #4]
    new_cert->next = NULL;
   de5a6:	6083      	str	r3, [r0, #8]

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
   de5a8:	b912      	cbnz	r2, de5b0 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x24>
    {
        *head = new_cert;
   de5aa:	6020      	str	r0, [r4, #0]
        while( cur->next != NULL )
            cur = cur->next;
        cur->next = new_cert;
    }

    return( 0 );
   de5ac:	4610      	mov	r0, r2
   de5ae:	bd70      	pop	{r4, r5, r6, pc}
        *head = new_cert;
    }
    else
    {
        mbedtls_ssl_key_cert *cur = *head;
        while( cur->next != NULL )
   de5b0:	6893      	ldr	r3, [r2, #8]
   de5b2:	b10b      	cbz	r3, de5b8 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x2c>
   de5b4:	461a      	mov	r2, r3
   de5b6:	e7fb      	b.n	de5b0 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x24>
            cur = cur->next;
        cur->next = new_cert;
   de5b8:	6090      	str	r0, [r2, #8]
    }

    return( 0 );
   de5ba:	4618      	mov	r0, r3
   de5bc:	bd70      	pop	{r4, r5, r6, pc}
{
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   de5be:	4801      	ldr	r0, [pc, #4]	; (de5c4 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x38>)
            cur = cur->next;
        cur->next = new_cert;
    }

    return( 0 );
}
   de5c0:	bd70      	pop	{r4, r5, r6, pc}
   de5c2:	bf00      	nop
   de5c4:	ffff8100 	.word	0xffff8100

000de5c8 <_ZL26ssl_update_checksum_sha256P19mbedtls_ssl_contextPKhj>:
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_update_checksum_sha256( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
   de5c8:	6b00      	ldr	r0, [r0, #48]	; 0x30
   de5ca:	f500 70ac 	add.w	r0, r0, #344	; 0x158
   de5ce:	f7f6 bc35 	b.w	d4e3c <mbedtls_sha256_update_ret>

000de5d2 <_ZL26ssl_update_checksum_sha384P19mbedtls_ssl_contextPKhj>:

#if defined(MBEDTLS_SHA512_C)
static void ssl_update_checksum_sha384( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
   de5d2:	6b00      	ldr	r0, [r0, #48]	; 0x30
   de5d4:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
   de5d8:	f004 bf1c 	b.w	e3414 <mbedtls_sha512_update_ret>

000de5dc <_ZL25ssl_update_checksum_startP19mbedtls_ssl_contextPKhj>:
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}

static void ssl_update_checksum_start( mbedtls_ssl_context *ssl,
                                       const unsigned char *buf, size_t len )
{
   de5dc:	b570      	push	{r4, r5, r6, lr}
   de5de:	4604      	mov	r4, r0
     mbedtls_md5_update_ret( &ssl->handshake->fin_md5 , buf, len );
    mbedtls_sha1_update_ret( &ssl->handshake->fin_sha1, buf, len );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
   de5e0:	6b00      	ldr	r0, [r0, #48]	; 0x30
   de5e2:	f500 70ac 	add.w	r0, r0, #344	; 0x158
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}

static void ssl_update_checksum_start( mbedtls_ssl_context *ssl,
                                       const unsigned char *buf, size_t len )
{
   de5e6:	460d      	mov	r5, r1
   de5e8:	4616      	mov	r6, r2
     mbedtls_md5_update_ret( &ssl->handshake->fin_md5 , buf, len );
    mbedtls_sha1_update_ret( &ssl->handshake->fin_sha1, buf, len );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
   de5ea:	f7f6 fc27 	bl	d4e3c <mbedtls_sha256_update_ret>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
   de5ee:	6b20      	ldr	r0, [r4, #48]	; 0x30
   de5f0:	4632      	mov	r2, r6
   de5f2:	4629      	mov	r1, r5
   de5f4:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}
   de5f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
   de5fc:	f004 bf0a 	b.w	e3414 <mbedtls_sha512_update_ret>

000de600 <_ZL25ssl_reset_in_out_pointersP19mbedtls_ssl_context>:
        ssl->in_hdr  = ssl->in_buf;
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    {
        ssl->out_hdr = ssl->out_buf + 8;
   de600:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
   de604:	3308      	adds	r3, #8
   de606:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
        ssl->in_hdr  = ssl->in_buf  + 8;
   de60a:	6d03      	ldr	r3, [r0, #80]	; 0x50
   de60c:	3308      	adds	r3, #8
   de60e:	6583      	str	r3, [r0, #88]	; 0x58
/*
 * Setup an SSL context
 */

static void ssl_reset_in_out_pointers( mbedtls_ssl_context *ssl )
{
   de610:	b510      	push	{r4, lr}
        ssl->out_hdr = ssl->out_buf + 8;
        ssl->in_hdr  = ssl->in_buf  + 8;
    }

    /* Derive other internal pointers. */
    ssl_update_out_pointers( ssl, NULL /* no transform enabled */ );
   de612:	2100      	movs	r1, #0
   de614:	f7ff fe58 	bl	de2c8 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>
        ssl->in_iv  = ssl->in_hdr + 13;
    }
    else
#endif
    {
        ssl->in_ctr = ssl->in_hdr - 8;
   de618:	6d83      	ldr	r3, [r0, #88]	; 0x58
   de61a:	f1a3 0208 	sub.w	r2, r3, #8
   de61e:	6542      	str	r2, [r0, #84]	; 0x54
        ssl->in_len = ssl->in_hdr + 3;
   de620:	1cda      	adds	r2, r3, #3
        ssl->in_iv  = ssl->in_hdr + 5;
   de622:	3305      	adds	r3, #5
    }
    else
#endif
    {
        ssl->in_ctr = ssl->in_hdr - 8;
        ssl->in_len = ssl->in_hdr + 3;
   de624:	65c2      	str	r2, [r0, #92]	; 0x5c
        ssl->in_iv  = ssl->in_hdr + 5;
   de626:	6603      	str	r3, [r0, #96]	; 0x60
        ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->in_msg = ssl->in_iv + transform->ivlen - transform->fixed_ivlen;
    }
    else
        ssl->in_msg = ssl->in_iv;
   de628:	6643      	str	r3, [r0, #100]	; 0x64
   de62a:	bd10      	pop	{r4, pc}

000de62c <mbedtls_ssl_derive_keys>:
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
   de62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
   de630:	6c04      	ldr	r4, [r0, #64]	; 0x40
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
   de632:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
   de634:	6b05      	ldr	r5, [r0, #48]	; 0x30
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
   de636:	b0d7      	sub	sp, #348	; 0x15c
   de638:	4680      	mov	r8, r0
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
   de63a:	9305      	str	r3, [sp, #20]
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );

    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
   de63c:	6823      	ldr	r3, [r4, #0]
   de63e:	7a18      	ldrb	r0, [r3, #8]
   de640:	f7f6 feae 	bl	d53a0 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
   de644:	4606      	mov	r6, r0
   de646:	b908      	cbnz	r0, de64c <mbedtls_ssl_derive_keys+0x20>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "cipher info for %d not found",
                            transform->ciphersuite_info->cipher ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   de648:	4ba3      	ldr	r3, [pc, #652]	; (de8d8 <mbedtls_ssl_derive_keys+0x2ac>)
   de64a:	e140      	b.n	de8ce <mbedtls_ssl_derive_keys+0x2a2>
    }

    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
   de64c:	6823      	ldr	r3, [r4, #0]
   de64e:	7a58      	ldrb	r0, [r3, #9]
   de650:	f7fd fdea 	bl	dc228 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   de654:	4682      	mov	sl, r0
   de656:	2800      	cmp	r0, #0
   de658:	d0f6      	beq.n	de648 <mbedtls_ssl_derive_keys+0x1c>
    }
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
   de65a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   de65e:	2b03      	cmp	r3, #3
   de660:	d001      	beq.n	de666 <mbedtls_ssl_derive_keys+0x3a>
    else
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   de662:	4b9e      	ldr	r3, [pc, #632]	; (de8dc <mbedtls_ssl_derive_keys+0x2b0>)
   de664:	e133      	b.n	de8ce <mbedtls_ssl_derive_keys+0x2a2>
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
   de666:	6823      	ldr	r3, [r4, #0]
    }
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
   de668:	7a5b      	ldrb	r3, [r3, #9]
   de66a:	2b07      	cmp	r3, #7
   de66c:	d107      	bne.n	de67e <mbedtls_ssl_derive_keys+0x52>
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
    {
        handshake->tls_prf = tls_prf_sha384;
   de66e:	4b9c      	ldr	r3, [pc, #624]	; (de8e0 <mbedtls_ssl_derive_keys+0x2b4>)
   de670:	f8c5 32ac 	str.w	r3, [r5, #684]	; 0x2ac
        handshake->calc_verify = ssl_calc_verify_tls_sha384;
   de674:	4b9b      	ldr	r3, [pc, #620]	; (de8e4 <mbedtls_ssl_derive_keys+0x2b8>)
   de676:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        handshake->calc_finished = ssl_calc_finished_tls_sha384;
   de67a:	4b9b      	ldr	r3, [pc, #620]	; (de8e8 <mbedtls_ssl_derive_keys+0x2bc>)
   de67c:	e006      	b.n	de68c <mbedtls_ssl_derive_keys+0x60>
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
    {
        handshake->tls_prf = tls_prf_sha256;
   de67e:	4b9b      	ldr	r3, [pc, #620]	; (de8ec <mbedtls_ssl_derive_keys+0x2c0>)
   de680:	f8c5 32ac 	str.w	r3, [r5, #684]	; 0x2ac
        handshake->calc_verify = ssl_calc_verify_tls_sha256;
   de684:	4b9a      	ldr	r3, [pc, #616]	; (de8f0 <mbedtls_ssl_derive_keys+0x2c4>)
   de686:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
   de68a:	4b9a      	ldr	r3, [pc, #616]	; (de8f4 <mbedtls_ssl_derive_keys+0x2c8>)
   de68c:	f8c5 32a8 	str.w	r3, [r5, #680]	; 0x2a8
     *     MD5( premaster + SHA1( 'CCC' + premaster + randbytes ) )
     *
     * TLSv1+:
     *   master = PRF( premaster, "master secret", randbytes )[0..47]
     */
    if( handshake->resume == 0 )
   de690:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
   de694:	f505 7b3d 	add.w	fp, r5, #756	; 0x2f4
   de698:	f505 792d 	add.w	r9, r5, #692	; 0x2b4
   de69c:	b9b3      	cbnz	r3, de6cc <mbedtls_ssl_derive_keys+0xa0>
            }

        }
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
   de69e:	2330      	movs	r3, #48	; 0x30
   de6a0:	9302      	str	r3, [sp, #8]
   de6a2:	9b05      	ldr	r3, [sp, #20]
   de6a4:	4a94      	ldr	r2, [pc, #592]	; (de8f8 <mbedtls_ssl_derive_keys+0x2cc>)
   de6a6:	332c      	adds	r3, #44	; 0x2c
   de6a8:	9301      	str	r3, [sp, #4]
   de6aa:	2340      	movs	r3, #64	; 0x40
   de6ac:	9300      	str	r3, [sp, #0]
   de6ae:	f8d5 72ac 	ldr.w	r7, [r5, #684]	; 0x2ac
   de6b2:	f8d5 12b0 	ldr.w	r1, [r5, #688]	; 0x2b0
   de6b6:	464b      	mov	r3, r9
   de6b8:	4658      	mov	r0, fp
   de6ba:	47b8      	blx	r7
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
        if( ret != 0 )
   de6bc:	4603      	mov	r3, r0
   de6be:	2800      	cmp	r0, #0
   de6c0:	f040 8105 	bne.w	de8ce <mbedtls_ssl_derive_keys+0x2a2>
            MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
            return( ret );
        }

        mbedtls_platform_zeroize( handshake->premaster,
                                  sizeof(handshake->premaster) );
   de6c4:	2154      	movs	r1, #84	; 0x54
   de6c6:	4658      	mov	r0, fp
   de6c8:	f7fb ff0a 	bl	da4e0 <mbedtls_platform_zeroize>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "no premaster (session resumed)" ) );

    /*
     * Swap the client and server random values.
     */
    memcpy( tmp, handshake->randbytes, 64 );
   de6cc:	464b      	mov	r3, r9
   de6ce:	af06      	add	r7, sp, #24
   de6d0:	6818      	ldr	r0, [r3, #0]
   de6d2:	6859      	ldr	r1, [r3, #4]
   de6d4:	463a      	mov	r2, r7
   de6d6:	c203      	stmia	r2!, {r0, r1}
   de6d8:	3308      	adds	r3, #8
   de6da:	455b      	cmp	r3, fp
   de6dc:	4617      	mov	r7, r2
   de6de:	d1f7      	bne.n	de6d0 <mbedtls_ssl_derive_keys+0xa4>
    memcpy( handshake->randbytes, tmp + 32, 32 );
   de6e0:	af0e      	add	r7, sp, #56	; 0x38
   de6e2:	464a      	mov	r2, r9
   de6e4:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
   de6e8:	463b      	mov	r3, r7
   de6ea:	cb03      	ldmia	r3!, {r0, r1}
   de6ec:	455b      	cmp	r3, fp
   de6ee:	6010      	str	r0, [r2, #0]
   de6f0:	6051      	str	r1, [r2, #4]
   de6f2:	461f      	mov	r7, r3
   de6f4:	f102 0208 	add.w	r2, r2, #8
   de6f8:	d1f6      	bne.n	de6e8 <mbedtls_ssl_derive_keys+0xbc>
    memcpy( handshake->randbytes + 32, tmp, 32 );
   de6fa:	af06      	add	r7, sp, #24
   de6fc:	f505 7235 	add.w	r2, r5, #724	; 0x2d4
   de700:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
   de704:	463b      	mov	r3, r7
   de706:	cb03      	ldmia	r3!, {r0, r1}
   de708:	4573      	cmp	r3, lr
   de70a:	6010      	str	r0, [r2, #0]
   de70c:	6051      	str	r1, [r2, #4]
   de70e:	461f      	mov	r7, r3
   de710:	f102 0208 	add.w	r2, r2, #8
   de714:	d1f6      	bne.n	de704 <mbedtls_ssl_derive_keys+0xd8>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
   de716:	2140      	movs	r1, #64	; 0x40
   de718:	a806      	add	r0, sp, #24
   de71a:	f7fb fee1 	bl	da4e0 <mbedtls_platform_zeroize>
     *      ...
     *
     *  TLSv1:
     *    key block = PRF( master, "key expansion", randbytes )
     */
    ret = handshake->tls_prf( session->master, 48, "key expansion",
   de71e:	9f05      	ldr	r7, [sp, #20]
   de720:	f8cd b004 	str.w	fp, [sp, #4]
   de724:	f44f 7380 	mov.w	r3, #256	; 0x100
   de728:	f04f 0b40 	mov.w	fp, #64	; 0x40
   de72c:	9302      	str	r3, [sp, #8]
   de72e:	f8cd b000 	str.w	fp, [sp]
   de732:	372c      	adds	r7, #44	; 0x2c
   de734:	464b      	mov	r3, r9
   de736:	f8d5 52ac 	ldr.w	r5, [r5, #684]	; 0x2ac
   de73a:	4a70      	ldr	r2, [pc, #448]	; (de8fc <mbedtls_ssl_derive_keys+0x2d0>)
   de73c:	2130      	movs	r1, #48	; 0x30
   de73e:	4638      	mov	r0, r7
   de740:	47a8      	blx	r5
                              handshake->randbytes, 64, keyblk, 256 );
    if( ret != 0 )
   de742:	4603      	mov	r3, r0
   de744:	2800      	cmp	r0, #0
   de746:	f040 80c2 	bne.w	de8ce <mbedtls_ssl_derive_keys+0x2a2>
    MBEDTLS_SSL_DEBUG_BUF( 3, "master secret", session->master, 48 );
    MBEDTLS_SSL_DEBUG_BUF( 4, "random bytes", handshake->randbytes, 64 );
    MBEDTLS_SSL_DEBUG_BUF( 4, "key block", keyblk, 256 );

    mbedtls_platform_zeroize( handshake->randbytes,
                              sizeof( handshake->randbytes ) );
   de74a:	4659      	mov	r1, fp
   de74c:	4648      	mov	r0, r9
   de74e:	f7fb fec7 	bl	da4e0 <mbedtls_platform_zeroize>

    /*
     * Determine the appropriate key, IV and MAC length.
     */

    transform->keylen = cipher_info->key_bitlen / 8;
   de752:	6873      	ldr	r3, [r6, #4]
   de754:	08db      	lsrs	r3, r3, #3
   de756:	6063      	str	r3, [r4, #4]

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
   de758:	7873      	ldrb	r3, [r6, #1]
   de75a:	2b06      	cmp	r3, #6
   de75c:	d003      	beq.n	de766 <mbedtls_ssl_derive_keys+0x13a>
   de75e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   de762:	2b08      	cmp	r3, #8
   de764:	d116      	bne.n	de794 <mbedtls_ssl_derive_keys+0x168>
        cipher_info->mode == MBEDTLS_MODE_CCM ||
        cipher_info->mode == MBEDTLS_MODE_CHACHAPOLY )
    {
        size_t taglen, explicit_ivlen;

        transform->maclen = 0;
   de766:	2300      	movs	r3, #0
   de768:	6163      	str	r3, [r4, #20]

        /* All modes haves 96-bit IVs;
         * GCM and CCM has 4 implicit and 8 explicit bytes
         * ChachaPoly has all 12 bytes implicit
         */
        transform->ivlen = 12;
   de76a:	230c      	movs	r3, #12
   de76c:	60e3      	str	r3, [r4, #12]
        if( cipher_info->mode == MBEDTLS_MODE_CHACHAPOLY )
   de76e:	7872      	ldrb	r2, [r6, #1]
   de770:	2a0a      	cmp	r2, #10
            transform->fixed_ivlen = 12;
        else
            transform->fixed_ivlen = 4;
   de772:	bf18      	it	ne
   de774:	2304      	movne	r3, #4
   de776:	6123      	str	r3, [r4, #16]

        /* All modes have 128-bit tags, except CCM_8 (ciphersuite flag) */
        taglen = transform->ciphersuite_info->flags &
   de778:	6823      	ldr	r3, [r4, #0]
                  MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   de77a:	7f1b      	ldrb	r3, [r3, #28]
   de77c:	f013 0f02 	tst.w	r3, #2


        /* Minimum length of encrypted record */
        explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
        transform->minlen = explicit_ivlen + taglen;
   de780:	6923      	ldr	r3, [r4, #16]
        else
            transform->fixed_ivlen = 4;

        /* All modes have 128-bit tags, except CCM_8 (ciphersuite flag) */
        taglen = transform->ciphersuite_info->flags &
                  MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   de782:	bf14      	ite	ne
   de784:	2208      	movne	r2, #8
   de786:	2210      	moveq	r2, #16


        /* Minimum length of encrypted record */
        explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
        transform->minlen = explicit_ivlen + taglen;
   de788:	f1c3 030c 	rsb	r3, r3, #12
   de78c:	4413      	add	r3, r2
   de78e:	60a3      	str	r3, [r4, #8]
        cipher_info->mode == MBEDTLS_MODE_CHACHAPOLY )
    {
        size_t taglen, explicit_ivlen;

        transform->maclen = 0;
        mac_key_len = 0;
   de790:	2500      	movs	r5, #0
                  MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;


        /* Minimum length of encrypted record */
        explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
        transform->minlen = explicit_ivlen + taglen;
   de792:	e01b      	b.n	de7cc <mbedtls_ssl_derive_keys+0x1a0>
    }
    else
    {
        /* Initialize HMAC contexts */
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
   de794:	2201      	movs	r2, #1
   de796:	4651      	mov	r1, sl
   de798:	f104 0038 	add.w	r0, r4, #56	; 0x38
   de79c:	f7fd fd70 	bl	dc280 <mbedtls_md_setup>
   de7a0:	2800      	cmp	r0, #0
   de7a2:	f040 8083 	bne.w	de8ac <mbedtls_ssl_derive_keys+0x280>
            ( ret = mbedtls_md_setup( &transform->md_ctx_dec, md_info, 1 ) ) != 0 )
   de7a6:	2201      	movs	r2, #1
   de7a8:	4651      	mov	r1, sl
   de7aa:	f104 0044 	add.w	r0, r4, #68	; 0x44
   de7ae:	f7fd fd67 	bl	dc280 <mbedtls_md_setup>
        transform->minlen = explicit_ivlen + taglen;
    }
    else
    {
        /* Initialize HMAC contexts */
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
   de7b2:	2800      	cmp	r0, #0
   de7b4:	d17a      	bne.n	de8ac <mbedtls_ssl_derive_keys+0x280>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
            return( ret );
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
   de7b6:	4650      	mov	r0, sl
   de7b8:	f7fd fe6e 	bl	dc498 <mbedtls_md_get_size>
        transform->maclen = mac_key_len;
   de7bc:	6160      	str	r0, [r4, #20]
#endif
        }
#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */

        /* IV length */
        transform->ivlen = cipher_info->iv_size;
   de7be:	68f1      	ldr	r1, [r6, #12]
   de7c0:	60e1      	str	r1, [r4, #12]

        /* Minimum length */
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
   de7c2:	7873      	ldrb	r3, [r6, #1]
   de7c4:	2b07      	cmp	r3, #7
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
            return( ret );
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
   de7c6:	4605      	mov	r5, r0

        /* IV length */
        transform->ivlen = cipher_info->iv_size;

        /* Minimum length */
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
   de7c8:	d172      	bne.n	de8b0 <mbedtls_ssl_derive_keys+0x284>
            transform->minlen = transform->maclen;
   de7ca:	60a5      	str	r5, [r4, #8]

    /*
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   de7cc:	f8d8 3000 	ldr.w	r3, [r8]
   de7d0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   de7d4:	07db      	lsls	r3, r3, #31
   de7d6:	f53f af44 	bmi.w	de662 <mbedtls_ssl_derive_keys+0x36>
    {
        key1 = keyblk + mac_key_len * 2;
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
   de7da:	6863      	ldr	r3, [r4, #4]
        mac_dec = keyblk + mac_key_len;

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
   de7dc:	f8d4 b010 	ldr.w	fp, [r4, #16]
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
    {
        key1 = keyblk + mac_key_len * 2;
   de7e0:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
   de7e4:	eb0a 0903 	add.w	r9, sl, r3
   de7e8:	aa16      	add	r2, sp, #88	; 0x58
   de7ea:	4491      	add	r9, r2

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
                            transform->fixed_ivlen : transform->ivlen;
   de7ec:	f1bb 0f00 	cmp.w	fp, #0
   de7f0:	d101      	bne.n	de7f6 <mbedtls_ssl_derive_keys+0x1ca>
   de7f2:	f8d4 b00c 	ldr.w	fp, [r4, #12]
        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
   de7f6:	9305      	str	r3, [sp, #20]
   de7f8:	eb09 0103 	add.w	r1, r9, r3
   de7fc:	465a      	mov	r2, fp
   de7fe:	f104 0018 	add.w	r0, r4, #24
   de802:	f008 fba4 	bl	e6f4e <memcpy>
        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
                iv_copy_len );
   de806:	9b05      	ldr	r3, [sp, #20]
   de808:	eb0b 0103 	add.w	r1, fp, r3
   de80c:	465a      	mov	r2, fp
   de80e:	4449      	add	r1, r9
   de810:	f104 0028 	add.w	r0, r4, #40	; 0x28
   de814:	f008 fb9b 	bl	e6f4e <memcpy>
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
   de818:	f8d8 300c 	ldr.w	r3, [r8, #12]
   de81c:	2b00      	cmp	r3, #0
   de81e:	f77f af20 	ble.w	de662 <mbedtls_ssl_derive_keys+0x36>
    {
        /* For HMAC-based ciphersuites, initialize the HMAC transforms.
           For AEAD-based ciphersuites, there is nothing to do here. */
        if( mac_key_len != 0 )
   de822:	b165      	cbz	r5, de83e <mbedtls_ssl_derive_keys+0x212>
        {
            mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, mac_key_len );
   de824:	462a      	mov	r2, r5
   de826:	a916      	add	r1, sp, #88	; 0x58
   de828:	f104 0038 	add.w	r0, r4, #56	; 0x38
   de82c:	f7fd fd78 	bl	dc320 <mbedtls_md_hmac_starts>
            mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, mac_key_len );
   de830:	ab16      	add	r3, sp, #88	; 0x58
   de832:	462a      	mov	r2, r5
   de834:	1959      	adds	r1, r3, r5
   de836:	f104 0044 	add.w	r0, r4, #68	; 0x44
   de83a:	f7fd fd71 	bl	dc320 <mbedtls_md_hmac_starts>
        }
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */

#if defined(MBEDTLS_SSL_EXPORT_KEYS)
    if( ssl->conf->f_export_keys != NULL )
   de83e:	f8d8 0000 	ldr.w	r0, [r8]
   de842:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
   de846:	f1b8 0f00 	cmp.w	r8, #0
   de84a:	d008      	beq.n	de85e <mbedtls_ssl_derive_keys+0x232>
    {
        ssl->conf->f_export_keys( ssl->conf->p_export_keys,
                                  session->master, keyblk,
                                  mac_key_len, transform->keylen,
                                  iv_copy_len );
   de84c:	f8cd b004 	str.w	fp, [sp, #4]
   de850:	6863      	ldr	r3, [r4, #4]
   de852:	9300      	str	r3, [sp, #0]
   de854:	aa16      	add	r2, sp, #88	; 0x58
   de856:	462b      	mov	r3, r5
   de858:	4639      	mov	r1, r7
   de85a:	6c80      	ldr	r0, [r0, #72]	; 0x48
   de85c:	47c0      	blx	r8
    }
#endif

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
   de85e:	f104 0550 	add.w	r5, r4, #80	; 0x50
   de862:	4631      	mov	r1, r6
   de864:	4628      	mov	r0, r5
   de866:	f7f6 fdd1 	bl	d540c <mbedtls_cipher_setup>
   de86a:	4603      	mov	r3, r0
   de86c:	bb78      	cbnz	r0, de8ce <mbedtls_ssl_derive_keys+0x2a2>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
   de86e:	3488      	adds	r4, #136	; 0x88
   de870:	4631      	mov	r1, r6
   de872:	4620      	mov	r0, r4
   de874:	f7f6 fdca 	bl	d540c <mbedtls_cipher_setup>
   de878:	4603      	mov	r3, r0
   de87a:	bb40      	cbnz	r0, de8ce <mbedtls_ssl_derive_keys+0x2a2>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
   de87c:	a916      	add	r1, sp, #88	; 0x58
   de87e:	2301      	movs	r3, #1
   de880:	6872      	ldr	r2, [r6, #4]
   de882:	4451      	add	r1, sl
   de884:	4628      	mov	r0, r5
   de886:	f7f6 fdd9 	bl	d543c <mbedtls_cipher_setkey>
   de88a:	4603      	mov	r3, r0
   de88c:	b9f8      	cbnz	r0, de8ce <mbedtls_ssl_derive_keys+0x2a2>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
   de88e:	6872      	ldr	r2, [r6, #4]
   de890:	4649      	mov	r1, r9
   de892:	4620      	mov	r0, r4
   de894:	f7f6 fdd2 	bl	d543c <mbedtls_cipher_setkey>
   de898:	4603      	mov	r3, r0
   de89a:	b9c0      	cbnz	r0, de8ce <mbedtls_ssl_derive_keys+0x2a2>
   de89c:	9005      	str	r0, [sp, #20]
            return( ret );
        }
    }
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    mbedtls_platform_zeroize( keyblk, sizeof( keyblk ) );
   de89e:	f44f 7180 	mov.w	r1, #256	; 0x100
   de8a2:	a816      	add	r0, sp, #88	; 0x58
   de8a4:	f7fb fe1c 	bl	da4e0 <mbedtls_platform_zeroize>
    }
#endif /* MBEDTLS_ZLIB_SUPPORT */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );

    return( 0 );
   de8a8:	9b05      	ldr	r3, [sp, #20]
   de8aa:	e010      	b.n	de8ce <mbedtls_ssl_derive_keys+0x2a2>
    else
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   de8ac:	4603      	mov	r3, r0
   de8ae:	e00e      	b.n	de8ce <mbedtls_ssl_derive_keys+0x2a2>
            }
            else
#endif
            {
                transform->minlen = transform->maclen
                                  + cipher_info->block_size
   de8b0:	6973      	ldr	r3, [r6, #20]
                                  - transform->maclen % cipher_info->block_size;
   de8b2:	fbb5 f2f3 	udiv	r2, r5, r3
   de8b6:	fb03 3302 	mla	r3, r3, r2, r3
   de8ba:	60a3      	str	r3, [r4, #8]
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_1 )
                ; /* No need to adjust minlen */
            else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
   de8bc:	f8d8 200c 	ldr.w	r2, [r8, #12]
   de8c0:	3a02      	subs	r2, #2
   de8c2:	2a01      	cmp	r2, #1
   de8c4:	f63f aecd 	bhi.w	de662 <mbedtls_ssl_derive_keys+0x36>
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
            {
                transform->minlen += transform->ivlen;
   de8c8:	440b      	add	r3, r1
   de8ca:	60a3      	str	r3, [r4, #8]
   de8cc:	e77e      	b.n	de7cc <mbedtls_ssl_derive_keys+0x1a0>
#endif /* MBEDTLS_ZLIB_SUPPORT */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );

    return( 0 );
}
   de8ce:	4618      	mov	r0, r3
   de8d0:	b057      	add	sp, #348	; 0x15c
   de8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de8d6:	bf00      	nop
   de8d8:	ffff8f00 	.word	0xffff8f00
   de8dc:	ffff9400 	.word	0xffff9400
   de8e0:	000de4d5 	.word	0x000de4d5
   de8e4:	000de561 	.word	0x000de561
   de8e8:	000de4f5 	.word	0x000de4f5
   de8ec:	000de4b5 	.word	0x000de4b5
   de8f0:	000de365 	.word	0x000de365
   de8f4:	000de2f9 	.word	0x000de2f9
   de8f8:	000e9f0d 	.word	0x000e9f0d
   de8fc:	000e9f1b 	.word	0x000e9f1b

000de900 <mbedtls_ssl_psk_derive_premaster>:
#endif /* MBEDTLS_SHA512_C */
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
int mbedtls_ssl_psk_derive_premaster( mbedtls_ssl_context *ssl, mbedtls_key_exchange_type_t key_ex )
{
   de900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   de904:	4606      	mov	r6, r0
    unsigned char *p = ssl->handshake->premaster;
   de906:	6b00      	ldr	r0, [r0, #48]	; 0x30
    unsigned char *end = p + sizeof( ssl->handshake->premaster );
    const unsigned char *psk = ssl->conf->psk;
   de908:	6832      	ldr	r2, [r6, #0]
   de90a:	6e57      	ldr	r7, [r2, #100]	; 0x64
    size_t psk_len = ssl->conf->psk_len;
   de90c:	6e94      	ldr	r4, [r2, #104]	; 0x68

    /* If the psk callback was called, use its result */
    if( ssl->handshake->psk != NULL )
   de90e:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
int mbedtls_ssl_psk_derive_premaster( mbedtls_ssl_context *ssl, mbedtls_key_exchange_type_t key_ex )
{
    unsigned char *p = ssl->handshake->premaster;
   de912:	f500 733d 	add.w	r3, r0, #756	; 0x2f4
    unsigned char *end = p + sizeof( ssl->handshake->premaster );
   de916:	f500 7552 	add.w	r5, r0, #840	; 0x348
    const unsigned char *psk = ssl->conf->psk;
    size_t psk_len = ssl->conf->psk_len;

    /* If the psk callback was called, use its result */
    if( ssl->handshake->psk != NULL )
   de91a:	b112      	cbz	r2, de922 <mbedtls_ssl_psk_derive_premaster+0x22>
    {
        psk = ssl->handshake->psk;
        psk_len = ssl->handshake->psk_len;
   de91c:	f8d0 4140 	ldr.w	r4, [r0, #320]	; 0x140
   de920:	4617      	mov	r7, r2
     *     opaque psk<0..2^16-1>;
     * };
     * with "other_secret" depending on the particular key exchange
     */
#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)
    if( key_ex == MBEDTLS_KEY_EXCHANGE_PSK )
   de922:	2905      	cmp	r1, #5
   de924:	d11a      	bne.n	de95c <mbedtls_ssl_psk_derive_premaster+0x5c>
    {
        if( end - p < 2 )
   de926:	1aeb      	subs	r3, r5, r3
   de928:	2b01      	cmp	r3, #1
   de92a:	dc02      	bgt.n	de932 <mbedtls_ssl_psk_derive_premaster+0x32>
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   de92c:	4821      	ldr	r0, [pc, #132]	; (de9b4 <mbedtls_ssl_psk_derive_premaster+0xb4>)
   de92e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

        *(p++) = (unsigned char)( psk_len >> 8 );
        *(p++) = (unsigned char)( psk_len      );
   de932:	f200 28f6 	addw	r8, r0, #758	; 0x2f6
    if( key_ex == MBEDTLS_KEY_EXCHANGE_PSK )
    {
        if( end - p < 2 )
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

        *(p++) = (unsigned char)( psk_len >> 8 );
   de936:	0a23      	lsrs	r3, r4, #8
        *(p++) = (unsigned char)( psk_len      );

        if( end < p || (size_t)( end - p ) < psk_len )
   de938:	4545      	cmp	r5, r8
    if( key_ex == MBEDTLS_KEY_EXCHANGE_PSK )
    {
        if( end - p < 2 )
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

        *(p++) = (unsigned char)( psk_len >> 8 );
   de93a:	f880 32f4 	strb.w	r3, [r0, #756]	; 0x2f4
        *(p++) = (unsigned char)( psk_len      );
   de93e:	f880 42f5 	strb.w	r4, [r0, #757]	; 0x2f5

        if( end < p || (size_t)( end - p ) < psk_len )
   de942:	d3f3      	bcc.n	de92c <mbedtls_ssl_psk_derive_premaster+0x2c>
   de944:	ebc8 0305 	rsb	r3, r8, r5
   de948:	42a3      	cmp	r3, r4
   de94a:	d3ef      	bcc.n	de92c <mbedtls_ssl_psk_derive_premaster+0x2c>
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

        memset( p, 0, psk_len );
   de94c:	4622      	mov	r2, r4
   de94e:	2100      	movs	r1, #0
   de950:	4640      	mov	r0, r8
   de952:	f008 fb22 	bl	e6f9a <memset>
        p += psk_len;
   de956:	eb08 0004 	add.w	r0, r8, r4
   de95a:	e00c      	b.n	de976 <mbedtls_ssl_psk_derive_premaster+0x76>
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)
    if( key_ex == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
   de95c:	2907      	cmp	r1, #7
   de95e:	d126      	bne.n	de9ae <mbedtls_ssl_psk_derive_premaster+0xae>
    {
        /*
         * other_secret already set by the ClientKeyExchange message,
         * and is 48 bytes long
         */
        if( end - p < 2 )
   de960:	1aeb      	subs	r3, r5, r3
   de962:	2b01      	cmp	r3, #1
   de964:	dde2      	ble.n	de92c <mbedtls_ssl_psk_derive_premaster+0x2c>
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

        *p++ = 0;
   de966:	2300      	movs	r3, #0
   de968:	f880 32f4 	strb.w	r3, [r0, #756]	; 0x2f4
        *p++ = 48;
   de96c:	2330      	movs	r3, #48	; 0x30
   de96e:	f880 32f5 	strb.w	r3, [r0, #757]	; 0x2f5
        p += 48;
   de972:	f200 3026 	addw	r0, r0, #806	; 0x326
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    /* opaque psk<0..2^16-1>; */
    if( end - p < 2 )
   de976:	1a2b      	subs	r3, r5, r0
   de978:	2b01      	cmp	r3, #1
   de97a:	ddd7      	ble.n	de92c <mbedtls_ssl_psk_derive_premaster+0x2c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    *(p++) = (unsigned char)( psk_len >> 8 );
   de97c:	4603      	mov	r3, r0
   de97e:	0a22      	lsrs	r2, r4, #8
   de980:	f803 2b02 	strb.w	r2, [r3], #2
    *(p++) = (unsigned char)( psk_len      );

    if( end < p || (size_t)( end - p ) < psk_len )
   de984:	429d      	cmp	r5, r3
    /* opaque psk<0..2^16-1>; */
    if( end - p < 2 )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    *(p++) = (unsigned char)( psk_len >> 8 );
    *(p++) = (unsigned char)( psk_len      );
   de986:	7044      	strb	r4, [r0, #1]

    if( end < p || (size_t)( end - p ) < psk_len )
   de988:	d3d0      	bcc.n	de92c <mbedtls_ssl_psk_derive_premaster+0x2c>
   de98a:	1aed      	subs	r5, r5, r3
   de98c:	42a5      	cmp	r5, r4
   de98e:	d3cd      	bcc.n	de92c <mbedtls_ssl_psk_derive_premaster+0x2c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    memcpy( p, psk, psk_len );
   de990:	4622      	mov	r2, r4
   de992:	4639      	mov	r1, r7
   de994:	4618      	mov	r0, r3
   de996:	f008 fada 	bl	e6f4e <memcpy>
    p += psk_len;

    ssl->handshake->pmslen = p - ssl->handshake->premaster;
   de99a:	6b32      	ldr	r2, [r6, #48]	; 0x30
   de99c:	4404      	add	r4, r0
   de99e:	f502 733d 	add.w	r3, r2, #756	; 0x2f4
   de9a2:	1ae4      	subs	r4, r4, r3
   de9a4:	f8c2 42b0 	str.w	r4, [r2, #688]	; 0x2b0

    return( 0 );
   de9a8:	2000      	movs	r0, #0
   de9aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   de9ae:	4802      	ldr	r0, [pc, #8]	; (de9b8 <mbedtls_ssl_psk_derive_premaster+0xb8>)
    p += psk_len;

    ssl->handshake->pmslen = p - ssl->handshake->premaster;

    return( 0 );
}
   de9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   de9b4:	ffff8f00 	.word	0xffff8f00
   de9b8:	ffff9400 	.word	0xffff9400

000de9bc <mbedtls_ssl_fetch_input>:
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
   de9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
   de9be:	6943      	ldr	r3, [r0, #20]
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
   de9c0:	4604      	mov	r4, r0
   de9c2:	460e      	mov	r6, r1
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
   de9c4:	b90b      	cbnz	r3, de9ca <mbedtls_ssl_fetch_input+0xe>
   de9c6:	6983      	ldr	r3, [r0, #24]
   de9c8:	b19b      	cbz	r3, de9f2 <mbedtls_ssl_fetch_input+0x36>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    if( nb_want > MBEDTLS_SSL_IN_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
   de9ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
   de9cc:	6d22      	ldr	r2, [r4, #80]	; 0x50
   de9ce:	1a9b      	subs	r3, r3, r2
   de9d0:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
   de9d4:	332d      	adds	r3, #45	; 0x2d
   de9d6:	42b3      	cmp	r3, r6
   de9d8:	d30b      	bcc.n	de9f2 <mbedtls_ssl_fetch_input+0x36>
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
   de9da:	6f65      	ldr	r5, [r4, #116]	; 0x74
   de9dc:	42ae      	cmp	r6, r5
   de9de:	d90a      	bls.n	de9f6 <mbedtls_ssl_fetch_input+0x3a>
/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
    if( ssl->f_get_timer == NULL )
   de9e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
        {
            len = nb_want - ssl->in_left;
   de9e2:	1b75      	subs	r5, r6, r5
/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
    if( ssl->f_get_timer == NULL )
   de9e4:	b14b      	cbz	r3, de9fa <mbedtls_ssl_fetch_input+0x3e>
        return( 0 );

    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
   de9e6:	6c60      	ldr	r0, [r4, #68]	; 0x44
   de9e8:	4798      	blx	r3
   de9ea:	2802      	cmp	r0, #2
   de9ec:	d105      	bne.n	de9fa <mbedtls_ssl_fetch_input+0x3e>
        while( ssl->in_left < nb_want )
        {
            len = nb_want - ssl->in_left;

            if( ssl_check_timer( ssl ) != 0 )
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
   de9ee:	4812      	ldr	r0, [pc, #72]	; (dea38 <mbedtls_ssl_fetch_input+0x7c>)
   de9f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   de9f2:	4812      	ldr	r0, [pc, #72]	; (dea3c <mbedtls_ssl_fetch_input+0x80>)
   de9f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );

    return( 0 );
   de9f6:	2000      	movs	r0, #0
   de9f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

            if( ssl_check_timer( ssl ) != 0 )
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
            else
            {
                if( ssl->f_recv_timeout != NULL )
   de9fa:	69a7      	ldr	r7, [r4, #24]
   de9fc:	6da1      	ldr	r1, [r4, #88]	; 0x58
   de9fe:	6f60      	ldr	r0, [r4, #116]	; 0x74
   dea00:	b137      	cbz	r7, dea10 <mbedtls_ssl_fetch_input+0x54>
                {
                    ret = ssl->f_recv_timeout( ssl->p_bio,
                                               ssl->in_hdr + ssl->in_left, len,
                                               ssl->conf->read_timeout );
   dea02:	6823      	ldr	r3, [r4, #0]
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
            else
            {
                if( ssl->f_recv_timeout != NULL )
                {
                    ret = ssl->f_recv_timeout( ssl->p_bio,
   dea04:	4401      	add	r1, r0
   dea06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   dea08:	69e0      	ldr	r0, [r4, #28]
   dea0a:	462a      	mov	r2, r5
   dea0c:	47b8      	blx	r7
   dea0e:	e004      	b.n	dea1a <mbedtls_ssl_fetch_input+0x5e>
                                               ssl->in_hdr + ssl->in_left, len,
                                               ssl->conf->read_timeout );
                }
                else
                {
                    ret = ssl->f_recv( ssl->p_bio,
   dea10:	4401      	add	r1, r0
   dea12:	6963      	ldr	r3, [r4, #20]
   dea14:	69e0      	ldr	r0, [r4, #28]
   dea16:	462a      	mov	r2, r5
   dea18:	4798      	blx	r3

            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );

            if( ret == 0 )
   dea1a:	2800      	cmp	r0, #0
   dea1c:	d006      	beq.n	dea2c <mbedtls_ssl_fetch_input+0x70>
                return( MBEDTLS_ERR_SSL_CONN_EOF );

            if( ret < 0 )
   dea1e:	db09      	blt.n	dea34 <mbedtls_ssl_fetch_input+0x78>
                return( ret );

            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
   dea20:	4285      	cmp	r5, r0
   dea22:	d305      	bcc.n	dea30 <mbedtls_ssl_fetch_input+0x74>
                    ( "f_recv returned %d bytes but only %lu were requested",
                    ret, (unsigned long)len ) );
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            ssl->in_left += ret;
   dea24:	6f63      	ldr	r3, [r4, #116]	; 0x74
   dea26:	4418      	add	r0, r3
   dea28:	6760      	str	r0, [r4, #116]	; 0x74
   dea2a:	e7d6      	b.n	de9da <mbedtls_ssl_fetch_input+0x1e>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );

            if( ret == 0 )
                return( MBEDTLS_ERR_SSL_CONN_EOF );
   dea2c:	4804      	ldr	r0, [pc, #16]	; (dea40 <mbedtls_ssl_fetch_input+0x84>)
   dea2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
            {
                MBEDTLS_SSL_DEBUG_MSG( 1,
                    ( "f_recv returned %d bytes but only %lu were requested",
                    ret, (unsigned long)len ) );
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   dea30:	4804      	ldr	r0, [pc, #16]	; (dea44 <mbedtls_ssl_fetch_input+0x88>)
   dea32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );

    return( 0 );
}
   dea34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dea36:	bf00      	nop
   dea38:	ffff9800 	.word	0xffff9800
   dea3c:	ffff8f00 	.word	0xffff8f00
   dea40:	ffff8d80 	.word	0xffff8d80
   dea44:	ffff9400 	.word	0xffff9400

000dea48 <mbedtls_ssl_flush_output>:

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
   dea48:	b538      	push	{r3, r4, r5, lr}
    int ret;
    unsigned char *buf;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );

    if( ssl->f_send == NULL )
   dea4a:	6903      	ldr	r3, [r0, #16]

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
   dea4c:	4605      	mov	r5, r0
    int ret;
    unsigned char *buf;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );

    if( ssl->f_send == NULL )
   dea4e:	b30b      	cbz	r3, dea94 <mbedtls_ssl_flush_output+0x4c>
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    /* Avoid incrementing counter if data is flushed */
    if( ssl->out_left == 0 )
   dea50:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   dea54:	b308      	cbz	r0, dea9a <mbedtls_ssl_flush_output+0x52>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
        return( 0 );
    }

    while( ssl->out_left > 0 )
   dea56:	f8d5 40a4 	ldr.w	r4, [r5, #164]	; 0xa4
   dea5a:	b184      	cbz	r4, dea7e <mbedtls_ssl_flush_output+0x36>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
                       mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen, ssl->out_left ) );

        buf = ssl->out_hdr - ssl->out_left;
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
   dea5c:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
   dea60:	692b      	ldr	r3, [r5, #16]
   dea62:	69e8      	ldr	r0, [r5, #28]
   dea64:	4622      	mov	r2, r4
   dea66:	1b09      	subs	r1, r1, r4
   dea68:	4798      	blx	r3

        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );

        if( ret <= 0 )
   dea6a:	2800      	cmp	r0, #0
   dea6c:	dd15      	ble.n	dea9a <mbedtls_ssl_flush_output+0x52>
            return( ret );

        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
   dea6e:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   dea72:	4282      	cmp	r2, r0
   dea74:	d310      	bcc.n	dea98 <mbedtls_ssl_flush_output+0x50>
                ( "f_send returned %d bytes but only %lu bytes were sent",
                ret, (unsigned long)ssl->out_left ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_left -= ret;
   dea76:	1a10      	subs	r0, r2, r0
   dea78:	f8c5 00a4 	str.w	r0, [r5, #164]	; 0xa4
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
        return( 0 );
    }

    while( ssl->out_left > 0 )
   dea7c:	e7eb      	b.n	dea56 <mbedtls_ssl_flush_output+0xe>
        ssl->out_hdr = ssl->out_buf;
    }
    else
#endif
    {
        ssl->out_hdr = ssl->out_buf + 8;
   dea7e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    }
    ssl_update_out_pointers( ssl, ssl->transform_out );
   dea82:	6ba9      	ldr	r1, [r5, #56]	; 0x38
        ssl->out_hdr = ssl->out_buf;
    }
    else
#endif
    {
        ssl->out_hdr = ssl->out_buf + 8;
   dea84:	3308      	adds	r3, #8
    }
    ssl_update_out_pointers( ssl, ssl->transform_out );
   dea86:	4628      	mov	r0, r5
        ssl->out_hdr = ssl->out_buf;
    }
    else
#endif
    {
        ssl->out_hdr = ssl->out_buf + 8;
   dea88:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }
    ssl_update_out_pointers( ssl, ssl->transform_out );
   dea8c:	f7ff fc1c 	bl	de2c8 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>
   dea90:	4620      	mov	r0, r4
   dea92:	bd38      	pop	{r3, r4, r5, pc}

    if( ssl->f_send == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   dea94:	4801      	ldr	r0, [pc, #4]	; (dea9c <mbedtls_ssl_flush_output+0x54>)
   dea96:	bd38      	pop	{r3, r4, r5, pc}
        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1,
                ( "f_send returned %d bytes but only %lu bytes were sent",
                ret, (unsigned long)ssl->out_left ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   dea98:	4801      	ldr	r0, [pc, #4]	; (deaa0 <mbedtls_ssl_flush_output+0x58>)
    ssl_update_out_pointers( ssl, ssl->transform_out );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );

    return( 0 );
}
   dea9a:	bd38      	pop	{r3, r4, r5, pc}
   dea9c:	ffff8f00 	.word	0xffff8f00
   deaa0:	ffff9400 	.word	0xffff9400

000deaa4 <mbedtls_ssl_write_record>:
 *  - ssl->out_msgtype: type of the message (AppData, Handshake, Alert, CCS)
 *  - ssl->out_msglen: length of the record content (excl headers)
 *  - ssl->out_msg: record content
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl, uint8_t force_flush )
{
   deaa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( !done )
    {
        unsigned i;
        size_t protected_record_size;

        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
   deaa8:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 *  - ssl->out_msg: record content
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl, uint8_t force_flush )
{
    int ret, done = 0;
    size_t len = ssl->out_msglen;
   deaac:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 *  - ssl->out_msgtype: type of the message (AppData, Handshake, Alert, CCS)
 *  - ssl->out_msglen: length of the record content (excl headers)
 *  - ssl->out_msg: record content
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl, uint8_t force_flush )
{
   deab0:	460f      	mov	r7, r1
    if( !done )
    {
        unsigned i;
        size_t protected_record_size;

        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
   deab2:	f8d0 109c 	ldr.w	r1, [r0, #156]	; 0x9c
   deab6:	7011      	strb	r1, [r2, #0]
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, ssl->out_hdr + 1 );
   deab8:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    {
        unsigned i;
        size_t protected_record_size;

        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
   deabc:	68c1      	ldr	r1, [r0, #12]
 *  - ssl->out_msgtype: type of the message (AppData, Handshake, Alert, CCS)
 *  - ssl->out_msglen: length of the record content (excl headers)
 *  - ssl->out_msg: record content
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl, uint8_t force_flush )
{
   deabe:	4604      	mov	r4, r0
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
   deac0:	6880      	ldr	r0, [r0, #8]
   deac2:	7050      	strb	r0, [r2, #1]
        ver[1] = (unsigned char) minor;
   deac4:	7091      	strb	r1, [r2, #2]

        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, ssl->out_hdr + 1 );

        memcpy( ssl->out_ctr, ssl->cur_out_ctr, 8 );
   deac6:	4626      	mov	r6, r4
   deac8:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   deacc:	f856 2fa8 	ldr.w	r2, [r6, #168]!
   dead0:	600a      	str	r2, [r1, #0]
   dead2:	6872      	ldr	r2, [r6, #4]
   dead4:	604a      	str	r2, [r1, #4]
        ssl->out_len[0] = (unsigned char)( len >> 8 );
   dead6:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   deada:	0a19      	lsrs	r1, r3, #8
   deadc:	7011      	strb	r1, [r2, #0]
        ssl->out_len[1] = (unsigned char)( len      );
   deade:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   deae2:	7053      	strb	r3, [r2, #1]

        if( ssl->transform_out != NULL )
   deae4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 *  - ssl->out_msgtype: type of the message (AppData, Handshake, Alert, CCS)
 *  - ssl->out_msglen: length of the record content (excl headers)
 *  - ssl->out_msg: record content
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl, uint8_t force_flush )
{
   deae6:	b091      	sub	sp, #68	; 0x44

        memcpy( ssl->out_ctr, ssl->cur_out_ctr, 8 );
        ssl->out_len[0] = (unsigned char)( len >> 8 );
        ssl->out_len[1] = (unsigned char)( len      );

        if( ssl->transform_out != NULL )
   deae8:	2d00      	cmp	r5, #0
   deaea:	f000 8095 	beq.w	dec18 <mbedtls_ssl_write_record+0x174>
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
   deaee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   deaf0:	2b00      	cmp	r3, #0
   deaf2:	f000 80ac 	beq.w	dec4e <mbedtls_ssl_write_record+0x1aa>
   deaf6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode(
    const mbedtls_cipher_context_t *ctx )
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, MBEDTLS_MODE_NONE );
    if( ctx->cipher_info == NULL )
   deaf8:	2b00      	cmp	r3, #0
   deafa:	f000 80a8 	beq.w	dec4e <mbedtls_ssl_write_record+0x1aa>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
   deafe:	785b      	ldrb	r3, [r3, #1]
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || \
    defined(MBEDTLS_CCM_C) || \
    defined(MBEDTLS_CHACHAPOLY_C)
    if( mode == MBEDTLS_MODE_GCM ||
   deb00:	2b06      	cmp	r3, #6
   deb02:	d004      	beq.n	deb0e <mbedtls_ssl_write_record+0x6a>
   deb04:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   deb08:	2b08      	cmp	r3, #8
   deb0a:	f040 80a0 	bne.w	dec4e <mbedtls_ssl_write_record+0x1aa>
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_out;
        unsigned char taglen = transform->ciphersuite_info->flags &
   deb0e:	682b      	ldr	r3, [r5, #0]
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
        size_t explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
   deb10:	68ea      	ldr	r2, [r5, #12]
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_out;
        unsigned char taglen = transform->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   deb12:	7f1b      	ldrb	r3, [r3, #28]
        size_t explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
   deb14:	f8d5 c010 	ldr.w	ip, [r5, #16]
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_out;
        unsigned char taglen = transform->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   deb18:	f013 0f02 	tst.w	r3, #2
        size_t explicit_ivlen = transform->ivlen - transform->fixed_ivlen;

        /*
         * Prepare additional authenticated data
         */
        memcpy( add_data, ssl->out_ctr, 8 );
   deb1c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   deb20:	6818      	ldr	r0, [r3, #0]
   deb22:	6859      	ldr	r1, [r3, #4]
   deb24:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
   deb28:	e8ae 0003 	stmia.w	lr!, {r0, r1}
        add_data[8]  = ssl->out_msgtype;
   deb2c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
   deb30:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
   deb34:	68e1      	ldr	r1, [r4, #12]
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
        ver[1] = (unsigned char) minor;
   deb36:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
         */
        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
   deb3a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
   deb3e:	68a0      	ldr	r0, [r4, #8]
   deb40:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
         */
        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
   deb44:	ea4f 2011 	mov.w	r0, r1, lsr #8
   deb48:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
        add_data[12] = ssl->out_msglen & 0xFF;
   deb4c:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data for AEAD", add_data, 13 );

        /*
         * Generate IV
         */
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
   deb50:	68e9      	ldr	r1, [r5, #12]
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_out;
        unsigned char taglen = transform->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   deb52:	bf14      	ite	ne
   deb54:	f04f 0808 	movne.w	r8, #8
   deb58:	f04f 0810 	moveq.w	r8, #16
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data for AEAD", add_data, 13 );

        /*
         * Generate IV
         */
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
   deb5c:	290c      	cmp	r1, #12
   deb5e:	d176      	bne.n	dec4e <mbedtls_ssl_write_record+0x1aa>
   deb60:	f1bc 0f04 	cmp.w	ip, #4
   deb64:	d10e      	bne.n	deb84 <mbedtls_ssl_write_record+0xe0>
        {
            /* GCM and CCM: fixed || explicit (=seqnum) */
            memcpy( iv, transform->iv_enc, transform->fixed_ivlen );
   deb66:	69a8      	ldr	r0, [r5, #24]
   deb68:	9009      	str	r0, [sp, #36]	; 0x24
            memcpy( iv + transform->fixed_ivlen, ssl->out_ctr, 8 );
   deb6a:	6818      	ldr	r0, [r3, #0]
   deb6c:	6859      	ldr	r1, [r3, #4]
   deb6e:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   deb72:	e8ae 0003 	stmia.w	lr!, {r0, r1}
            memcpy( ssl->out_iv, ssl->out_ctr, 8 );
   deb76:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   deb7a:	6819      	ldr	r1, [r3, #0]
   deb7c:	6001      	str	r1, [r0, #0]
   deb7e:	6859      	ldr	r1, [r3, #4]
   deb80:	6041      	str	r1, [r0, #4]
   deb82:	e01c      	b.n	debbe <mbedtls_ssl_write_record+0x11a>

        }
        else if( transform->ivlen == 12 && transform->fixed_ivlen == 12 )
   deb84:	f1bc 0f0c 	cmp.w	ip, #12
   deb88:	d161      	bne.n	dec4e <mbedtls_ssl_write_record+0x1aa>
        {
            /* ChachaPoly: fixed XOR sequence number */
            unsigned char i;

            memcpy( iv, transform->iv_enc, transform->fixed_ivlen );
   deb8a:	46a9      	mov	r9, r5
   deb8c:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
   deb90:	f859 0f18 	ldr.w	r0, [r9, #24]!
   deb94:	f8d9 1004 	ldr.w	r1, [r9, #4]
   deb98:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   deb9c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   deba0:	f8ce 0000 	str.w	r0, [lr]
   deba4:	1e59      	subs	r1, r3, #1
   deba6:	a80a      	add	r0, sp, #40	; 0x28
   deba8:	3307      	adds	r3, #7

            for( i = 0; i < 8; i++ )
                iv[i+4] ^= ssl->out_ctr[i];
   debaa:	f811 ef01 	ldrb.w	lr, [r1, #1]!
   debae:	f890 9000 	ldrb.w	r9, [r0]
            /* ChachaPoly: fixed XOR sequence number */
            unsigned char i;

            memcpy( iv, transform->iv_enc, transform->fixed_ivlen );

            for( i = 0; i < 8; i++ )
   debb2:	428b      	cmp	r3, r1
                iv[i+4] ^= ssl->out_ctr[i];
   debb4:	ea89 0e0e 	eor.w	lr, r9, lr
   debb8:	f800 eb01 	strb.w	lr, [r0], #1
            /* ChachaPoly: fixed XOR sequence number */
            unsigned char i;

            memcpy( iv, transform->iv_enc, transform->fixed_ivlen );

            for( i = 0; i < 8; i++ )
   debbc:	d1f5      	bne.n	debaa <mbedtls_ssl_write_record+0x106>

        /*
         * Fix message length with added IV
         */
        enc_msg = ssl->out_msg;
        enc_msglen = ssl->out_msglen;
   debbe:	f8d4 90a0 	ldr.w	r9, [r4, #160]	; 0xa0
                                  ssl->out_iv, explicit_ivlen );

        /*
         * Fix message length with added IV
         */
        enc_msg = ssl->out_msg;
   debc2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
                                    ssl->out_msglen ) );

        /*
         * Encrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_encrypt( &transform->cipher_ctx_enc,
   debc6:	9303      	str	r3, [sp, #12]
        /*
         * Fix message length with added IV
         */
        enc_msg = ssl->out_msg;
        enc_msglen = ssl->out_msglen;
        ssl->out_msglen += explicit_ivlen;
   debc8:	444a      	add	r2, r9
   debca:	ebcc 0202 	rsb	r2, ip, r2
   debce:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
                                    ssl->out_msglen ) );

        /*
         * Encrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_encrypt( &transform->cipher_ctx_enc,
   debd2:	eb03 0209 	add.w	r2, r3, r9
   debd6:	9205      	str	r2, [sp, #20]
   debd8:	9301      	str	r3, [sp, #4]
   debda:	aa08      	add	r2, sp, #32
   debdc:	230d      	movs	r3, #13
   debde:	9300      	str	r3, [sp, #0]
   debe0:	f8cd 8018 	str.w	r8, [sp, #24]
   debe4:	9204      	str	r2, [sp, #16]
   debe6:	f8cd 9008 	str.w	r9, [sp, #8]
   debea:	ab0c      	add	r3, sp, #48	; 0x30
   debec:	68ea      	ldr	r2, [r5, #12]
   debee:	a909      	add	r1, sp, #36	; 0x24
   debf0:	f105 0050 	add.w	r0, r5, #80	; 0x50
   debf4:	f7f6 fcf8 	bl	d55e8 <mbedtls_cipher_auth_encrypt>
   debf8:	bb90      	cbnz	r0, dec60 <mbedtls_ssl_write_record+0x1bc>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_encrypt", ret );
            return( ret );
        }

        if( olen != enc_msglen )
   debfa:	9b08      	ldr	r3, [sp, #32]
   debfc:	4599      	cmp	r9, r3
   debfe:	d126      	bne.n	dec4e <mbedtls_ssl_write_record+0x1aa>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
   dec00:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
                return( ret );
            }

            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
   dec04:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
   dec08:	4443      	add	r3, r8
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
                return( ret );
            }

            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
   dec0a:	0a19      	lsrs	r1, r3, #8
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
   dec0c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
                return( ret );
            }

            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
   dec10:	7011      	strb	r1, [r2, #0]
            ssl->out_len[1] = (unsigned char)( len      );
   dec12:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   dec16:	7053      	strb	r3, [r2, #1]
                                    ssl->out_hdr[2], len ) );

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
                               ssl->out_hdr, protected_record_size );

        ssl->out_left += protected_record_size;
   dec18:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
        ssl->out_hdr  += protected_record_size;
        ssl_update_out_pointers( ssl, ssl->transform_out );
   dec1c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
            ssl->out_len[1] = (unsigned char)( len      );
        }

        protected_record_size = len + mbedtls_ssl_hdr_len( ssl );
   dec1e:	3305      	adds	r3, #5
                                    ssl->out_hdr[2], len ) );

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
                               ssl->out_hdr, protected_record_size );

        ssl->out_left += protected_record_size;
   dec20:	441a      	add	r2, r3
   dec22:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
        ssl->out_hdr  += protected_record_size;
   dec26:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   dec2a:	4413      	add	r3, r2
   dec2c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        ssl_update_out_pointers( ssl, ssl->transform_out );
   dec30:	4620      	mov	r0, r4
   dec32:	f7ff fb49 	bl	de2c8 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>
   dec36:	f104 02b0 	add.w	r2, r4, #176	; 0xb0

        for( i = 8; i > ssl_ep_len( ssl ); i-- )
            if( ++ssl->cur_out_ctr[i - 1] != 0 )
   dec3a:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
   dec3e:	3301      	adds	r3, #1
   dec40:	b2db      	uxtb	r3, r3
   dec42:	7013      	strb	r3, [r2, #0]
   dec44:	b92b      	cbnz	r3, dec52 <mbedtls_ssl_write_record+0x1ae>

        ssl->out_left += protected_record_size;
        ssl->out_hdr  += protected_record_size;
        ssl_update_out_pointers( ssl, ssl->transform_out );

        for( i = 8; i > ssl_ep_len( ssl ); i-- )
   dec46:	4296      	cmp	r6, r2
   dec48:	d1f7      	bne.n	dec3a <mbedtls_ssl_write_record+0x196>

        /* The loop goes to its end iff the counter is wrapping */
        if( i == ssl_ep_len( ssl ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
   dec4a:	4807      	ldr	r0, [pc, #28]	; (dec68 <mbedtls_ssl_write_record+0x1c4>)
   dec4c:	e008      	b.n	dec60 <mbedtls_ssl_write_record+0x1bc>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   dec4e:	4807      	ldr	r0, [pc, #28]	; (dec6c <mbedtls_ssl_write_record+0x1c8>)
   dec50:	e006      	b.n	dec60 <mbedtls_ssl_write_record+0x1bc>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "Still %u bytes available in current datagram", (unsigned) remaining ) );
        }
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    if( ( flush == SSL_FORCE_FLUSH ) &&
   dec52:	2f01      	cmp	r7, #1
   dec54:	d103      	bne.n	dec5e <mbedtls_ssl_write_record+0x1ba>
        ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
   dec56:	4620      	mov	r0, r4
   dec58:	f7ff fef6 	bl	dea48 <mbedtls_ssl_flush_output>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "Still %u bytes available in current datagram", (unsigned) remaining ) );
        }
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    if( ( flush == SSL_FORCE_FLUSH ) &&
   dec5c:	b900      	cbnz	r0, dec60 <mbedtls_ssl_write_record+0x1bc>
        return( ret );
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write record" ) );

    return( 0 );
   dec5e:	2000      	movs	r0, #0
}
   dec60:	b011      	add	sp, #68	; 0x44
   dec62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dec66:	bf00      	nop
   dec68:	ffff9480 	.word	0xffff9480
   dec6c:	ffff9400 	.word	0xffff9400

000dec70 <mbedtls_ssl_write_handshake_msg>:
 *   - ssl->out_msglen: the length of the record contents
 *      (including handshake headers but excluding record headers)
 *   - ssl->out_msg: the record contents (handshake headers + content)
 */
int mbedtls_ssl_write_handshake_msg( mbedtls_ssl_context *ssl )
{
   dec70:	b538      	push	{r3, r4, r5, lr}
   dec72:	4604      	mov	r4, r0
    int ret;
    const size_t hs_len = ssl->out_msglen - 4;
    const unsigned char hs_type = ssl->out_msg[0];
   dec74:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write handshake message" ) );

    /*
     * Sanity checks
     */
    if( ssl->out_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE          &&
   dec78:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 *   - ssl->out_msg: the record contents (handshake headers + content)
 */
int mbedtls_ssl_write_handshake_msg( mbedtls_ssl_context *ssl )
{
    int ret;
    const size_t hs_len = ssl->out_msglen - 4;
   dec7c:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    const unsigned char hs_type = ssl->out_msg[0];
   dec80:	7808      	ldrb	r0, [r1, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write handshake message" ) );

    /*
     * Sanity checks
     */
    if( ssl->out_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE          &&
   dec82:	2a16      	cmp	r2, #22
   dec84:	d002      	beq.n	dec8c <mbedtls_ssl_write_handshake_msg+0x1c>
   dec86:	2a14      	cmp	r2, #20
   dec88:	d001      	beq.n	dec8e <mbedtls_ssl_write_handshake_msg+0x1e>
   dec8a:	e024      	b.n	decd6 <mbedtls_ssl_write_handshake_msg+0x66>
    }

    /* Whenever we send anything different from a
     * HelloRequest we should be in a handshake - double check. */
    if( ! ( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
            hs_type          == MBEDTLS_SSL_HS_HELLO_REQUEST ) &&
   dec8c:	b300      	cbz	r0, decd0 <mbedtls_ssl_write_handshake_msg+0x60>
   dec8e:	6b25      	ldr	r5, [r4, #48]	; 0x30
   dec90:	b30d      	cbz	r5, decd6 <mbedtls_ssl_write_handshake_msg+0x66>
     * writing functions must obey the bounds of the
     * outgoing record buffer, but better be safe.
     *
     * Note: We deliberately do not check for the MTU or MFL here.
     */
    if( ssl->out_msglen > MBEDTLS_SSL_OUT_CONTENT_LEN )
   dec92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   dec96:	d81e      	bhi.n	decd6 <mbedtls_ssl_write_handshake_msg+0x66>
    }

    /*
     * Fill handshake headers
     */
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   dec98:	2a16      	cmp	r2, #22
   dec9a:	d113      	bne.n	decc4 <mbedtls_ssl_write_handshake_msg+0x54>
 *   - ssl->out_msg: the record contents (handshake headers + content)
 */
int mbedtls_ssl_write_handshake_msg( mbedtls_ssl_context *ssl )
{
    int ret;
    const size_t hs_len = ssl->out_msglen - 4;
   dec9c:	3b04      	subs	r3, #4
    /*
     * Fill handshake headers
     */
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
    {
        ssl->out_msg[1] = (unsigned char)( hs_len >> 16 );
   dec9e:	0c1a      	lsrs	r2, r3, #16
   deca0:	704a      	strb	r2, [r1, #1]
        ssl->out_msg[2] = (unsigned char)( hs_len >>  8 );
   deca2:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   deca6:	0a19      	lsrs	r1, r3, #8
   deca8:	7091      	strb	r1, [r2, #2]
        ssl->out_msg[3] = (unsigned char)( hs_len       );
   decaa:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   decae:	70d3      	strb	r3, [r2, #3]
            memcpy( ssl->out_msg + 9, ssl->out_msg + 1, 3 );
        }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

        /* Update running hashes of handshake messages seen */
        if( hs_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
   decb0:	b140      	cbz	r0, decc4 <mbedtls_ssl_write_handshake_msg+0x54>
            ssl->handshake->update_checksum( ssl, ssl->out_msg, ssl->out_msglen );
   decb2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   decb4:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   decb8:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
   decbc:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   decc0:	4620      	mov	r0, r4
   decc2:	4798      	blx	r3
        }
    }
    else
#endif
    {
        if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
   decc4:	4620      	mov	r0, r4
   decc6:	2101      	movs	r1, #1
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write handshake message" ) );

    return( 0 );
}
   decc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
    }
    else
#endif
    {
        if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
   deccc:	f7ff beea 	b.w	deaa4 <mbedtls_ssl_write_record>
     * writing functions must obey the bounds of the
     * outgoing record buffer, but better be safe.
     *
     * Note: We deliberately do not check for the MTU or MFL here.
     */
    if( ssl->out_msglen > MBEDTLS_SSL_OUT_CONTENT_LEN )
   decd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   decd4:	d9e2      	bls.n	dec9c <mbedtls_ssl_write_handshake_msg+0x2c>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write handshake message" ) );

    return( 0 );
}
   decd6:	4801      	ldr	r0, [pc, #4]	; (decdc <mbedtls_ssl_write_handshake_msg+0x6c>)
   decd8:	bd38      	pop	{r3, r4, r5, pc}
   decda:	bf00      	nop
   decdc:	ffff9400 	.word	0xffff9400

000dece0 <mbedtls_ssl_prepare_handshake_record>:
            ( ssl->in_msg[2] << 8  ) |
              ssl->in_msg[3] );
}

int mbedtls_ssl_prepare_handshake_record( mbedtls_ssl_context *ssl )
{
   dece0:	b510      	push	{r4, lr}
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
   dece2:	6f04      	ldr	r4, [r0, #112]	; 0x70
   dece4:	2c03      	cmp	r4, #3
   dece6:	d90f      	bls.n	ded08 <mbedtls_ssl_prepare_handshake_record+0x28>
   dece8:	6e41      	ldr	r1, [r0, #100]	; 0x64
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + ssl_get_hs_total_len( ssl );
   decea:	788a      	ldrb	r2, [r1, #2]
   decec:	784b      	ldrb	r3, [r1, #1]
   decee:	0212      	lsls	r2, r2, #8
   decf0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   decf4:	78ca      	ldrb	r2, [r1, #3]
   decf6:	4313      	orrs	r3, r2
   decf8:	3304      	adds	r3, #4
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
   decfa:	4a04      	ldr	r2, [pc, #16]	; (ded0c <mbedtls_ssl_prepare_handshake_record+0x2c>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + ssl_get_hs_total_len( ssl );
   decfc:	6783      	str	r3, [r0, #120]	; 0x78
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
   decfe:	429c      	cmp	r4, r3
   ded00:	bf34      	ite	cc
   ded02:	4610      	movcc	r0, r2
   ded04:	2000      	movcs	r0, #0
   ded06:	bd10      	pop	{r4, pc}
{
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   ded08:	4801      	ldr	r0, [pc, #4]	; (ded10 <mbedtls_ssl_prepare_handshake_record+0x30>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
}
   ded0a:	bd10      	pop	{r4, pc}
   ded0c:	ffff8f80 	.word	0xffff8f80
   ded10:	ffff8e00 	.word	0xffff8e00

000ded14 <mbedtls_ssl_update_handshake_status>:

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_handshake_params * const hs = ssl->handshake;

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
   ded14:	6842      	ldr	r2, [r0, #4]
   ded16:	2a10      	cmp	r2, #16

    return( 0 );
}

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{
   ded18:	b410      	push	{r4}
    mbedtls_ssl_handshake_params * const hs = ssl->handshake;

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
   ded1a:	d009      	beq.n	ded30 <mbedtls_ssl_update_handshake_status+0x1c>
    return( 0 );
}

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_handshake_params * const hs = ssl->handshake;
   ded1c:	6b02      	ldr	r2, [r0, #48]	; 0x30

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
   ded1e:	b13a      	cbz	r2, ded30 <mbedtls_ssl_update_handshake_status+0x1c>
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
   ded20:	f8d2 42a0 	ldr.w	r4, [r2, #672]	; 0x2a0
   ded24:	6e41      	ldr	r1, [r0, #100]	; 0x64
   ded26:	6f82      	ldr	r2, [r0, #120]	; 0x78
   ded28:	4623      	mov	r3, r4

        /* Create a fresh last entry */
        memset( hs_buf, 0, sizeof( mbedtls_ssl_hs_buffer ) );
    }
#endif
}
   ded2a:	f85d 4b04 	ldr.w	r4, [sp], #4
{
    mbedtls_ssl_handshake_params * const hs = ssl->handshake;

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
   ded2e:	4718      	bx	r3

        /* Create a fresh last entry */
        memset( hs_buf, 0, sizeof( mbedtls_ssl_hs_buffer ) );
    }
#endif
}
   ded30:	f85d 4b04 	ldr.w	r4, [sp], #4
   ded34:	4770      	bx	lr
	...

000ded38 <mbedtls_ssl_handle_message_type>:

    return( 0 );
}

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
   ded38:	b510      	push	{r4, lr}
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   ded3a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   ded3c:	2b16      	cmp	r3, #22

    return( 0 );
}

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
   ded3e:	4604      	mov	r4, r0
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   ded40:	d003      	beq.n	ded4a <mbedtls_ssl_handle_message_type+0x12>
        {
            return( ret );
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
   ded42:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   ded44:	2b14      	cmp	r3, #20
   ded46:	d10d      	bne.n	ded64 <mbedtls_ssl_handle_message_type+0x2c>
   ded48:	e004      	b.n	ded54 <mbedtls_ssl_handle_message_type+0x1c>
    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
    {
        if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )
   ded4a:	f7ff ffc9 	bl	dece0 <mbedtls_ssl_prepare_handshake_record>
   ded4e:	2800      	cmp	r0, #0
   ded50:	d0f7      	beq.n	ded42 <mbedtls_ssl_handle_message_type+0xa>
   ded52:	bd10      	pop	{r4, pc}
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
    {
        if( ssl->in_msglen != 1 )
   ded54:	6f23      	ldr	r3, [r4, #112]	; 0x70
   ded56:	2b01      	cmp	r3, #1
   ded58:	d118      	bne.n	ded8c <mbedtls_ssl_handle_message_type+0x54>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid CCS message, len: %d",
                           ssl->in_msglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }

        if( ssl->in_msg[0] != 1 )
   ded5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    {
        if( ssl->in_msglen != 1 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid CCS message, len: %d",
                           ssl->in_msglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   ded5c:	480f      	ldr	r0, [pc, #60]	; (ded9c <mbedtls_ssl_handle_message_type+0x64>)
        }

        if( ssl->in_msg[0] != 1 )
   ded5e:	781b      	ldrb	r3, [r3, #0]
    {
        if( ssl->in_msglen != 1 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid CCS message, len: %d",
                           ssl->in_msglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   ded60:	2b01      	cmp	r3, #1
   ded62:	e00e      	b.n	ded82 <mbedtls_ssl_handle_message_type+0x4a>
            return( MBEDTLS_ERR_SSL_EARLY_MESSAGE );
        }
#endif
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
   ded64:	2b15      	cmp	r3, #21
   ded66:	d10f      	bne.n	ded88 <mbedtls_ssl_handle_message_type+0x50>
    {
        if( ssl->in_msglen != 2 )
   ded68:	6f23      	ldr	r3, [r4, #112]	; 0x70
   ded6a:	2b02      	cmp	r3, #2
   ded6c:	d10e      	bne.n	ded8c <mbedtls_ssl_handle_message_type+0x54>
                       ssl->in_msg[0], ssl->in_msg[1] ) );

        /*
         * Ignore non-fatal alerts, except close_notify and no_renegotiation
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
   ded6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   ded70:	781a      	ldrb	r2, [r3, #0]
   ded72:	2a02      	cmp	r2, #2
   ded74:	d00c      	beq.n	ded90 <mbedtls_ssl_handle_message_type+0x58>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
   ded76:	2a01      	cmp	r2, #1
   ded78:	d10c      	bne.n	ded94 <mbedtls_ssl_handle_message_type+0x5c>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
   ded7a:	785b      	ldrb	r3, [r3, #1]
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
   ded7c:	b163      	cbz	r3, ded98 <mbedtls_ssl_handle_message_type+0x60>
    {
        ssl_handshake_wrapup_free_hs_transform( ssl );
    }
#endif

    return( 0 );
   ded7e:	4808      	ldr	r0, [pc, #32]	; (deda0 <mbedtls_ssl_handle_message_type+0x68>)
   ded80:	2b64      	cmp	r3, #100	; 0x64
   ded82:	bf08      	it	eq
   ded84:	2000      	moveq	r0, #0
   ded86:	bd10      	pop	{r4, pc}
   ded88:	2000      	movs	r0, #0
   ded8a:	bd10      	pop	{r4, pc}
    {
        if( ssl->in_msglen != 1 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid CCS message, len: %d",
                           ssl->in_msglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   ded8c:	4803      	ldr	r0, [pc, #12]	; (ded9c <mbedtls_ssl_handle_message_type+0x64>)
   ded8e:	bd10      	pop	{r4, pc}
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
   ded90:	4804      	ldr	r0, [pc, #16]	; (deda4 <mbedtls_ssl_handle_message_type+0x6c>)
   ded92:	bd10      	pop	{r4, pc}
            return( 0 );
        }
#endif /* MBEDTLS_SSL_PROTO_SSL3 && MBEDTLS_SSL_SRV_C */

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
   ded94:	4802      	ldr	r0, [pc, #8]	; (deda0 <mbedtls_ssl_handle_message_type+0x68>)
   ded96:	bd10      	pop	{r4, pc}

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a close notify message" ) );
            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
   ded98:	4803      	ldr	r0, [pc, #12]	; (deda8 <mbedtls_ssl_handle_message_type+0x70>)
        ssl_handshake_wrapup_free_hs_transform( ssl );
    }
#endif

    return( 0 );
}
   ded9a:	bd10      	pop	{r4, pc}
   ded9c:	ffff8e00 	.word	0xffff8e00
   deda0:	ffff9980 	.word	0xffff9980
   deda4:	ffff8880 	.word	0xffff8880
   deda8:	ffff8780 	.word	0xffff8780

000dedac <mbedtls_ssl_send_alert_message>:
}

int mbedtls_ssl_send_alert_message( mbedtls_ssl_context *ssl,
                            unsigned char level,
                            unsigned char message )
{
   dedac:	b410      	push	{r4}
    int ret;

    if( ssl == NULL || ssl->conf == NULL )
   dedae:	b190      	cbz	r0, dedd6 <mbedtls_ssl_send_alert_message+0x2a>
   dedb0:	6804      	ldr	r4, [r0, #0]
   dedb2:	b184      	cbz	r4, dedd6 <mbedtls_ssl_send_alert_message+0x2a>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> send alert message" ) );
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "send alert level=%u message=%u", level, message ));

    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
   dedb4:	2415      	movs	r4, #21
   dedb6:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
    ssl->out_msglen = 2;
   dedba:	2402      	movs	r4, #2
   dedbc:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
    ssl->out_msg[0] = level;
   dedc0:	f8d0 4098 	ldr.w	r4, [r0, #152]	; 0x98
   dedc4:	7021      	strb	r1, [r4, #0]
    ssl->out_msg[1] = message;
   dedc6:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   dedca:	705a      	strb	r2, [r3, #1]

    if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
   dedcc:	2101      	movs	r1, #1
        return( ret );
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );

    return( 0 );
}
   dedce:	f85d 4b04 	ldr.w	r4, [sp], #4
    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
    ssl->out_msglen = 2;
    ssl->out_msg[0] = level;
    ssl->out_msg[1] = message;

    if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
   dedd2:	f7ff be67 	b.w	deaa4 <mbedtls_ssl_write_record>
        return( ret );
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );

    return( 0 );
}
   dedd6:	4802      	ldr	r0, [pc, #8]	; (dede0 <mbedtls_ssl_send_alert_message+0x34>)
   dedd8:	f85d 4b04 	ldr.w	r4, [sp], #4
   deddc:	4770      	bx	lr
   dedde:	bf00      	nop
   dede0:	ffff8f00 	.word	0xffff8f00

000dede4 <mbedtls_ssl_read_record>:
static int ssl_get_next_record( mbedtls_ssl_context *ssl );
static int ssl_record_is_in_progress( mbedtls_ssl_context *ssl );

int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl,
                             unsigned update_hs_digest )
{
   dede4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );

    if( ssl->keep_current_message == 0 )
   dede8:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
static int ssl_get_next_record( mbedtls_ssl_context *ssl );
static int ssl_record_is_in_progress( mbedtls_ssl_context *ssl );

int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl,
                             unsigned update_hs_digest )
{
   dedec:	b090      	sub	sp, #64	; 0x40
   dedee:	4604      	mov	r4, r0
   dedf0:	460e      	mov	r6, r1
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );

    if( ssl->keep_current_message == 0 )
   dedf2:	b9a5      	cbnz	r5, dee1e <mbedtls_ssl_read_record+0x3a>
        else
        {
            ssl->in_msglen = 0;
        }

        ssl->in_hslen   = 0;
   dedf4:	462f      	mov	r7, r5
     *     and consumes through mbedtls_ssl_read only.
     *
     */

    /* Case (1): Handshake messages */
    if( ssl->in_hslen != 0 )
   dedf6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
   dedf8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   dedfa:	b169      	cbz	r1, dee18 <mbedtls_ssl_read_record+0x34>
    {
        /* Hard assertion to be sure that no application data
         * is in flight, as corrupting ssl->in_msglen during
         * ssl->in_offt != NULL is fatal. */
        if( ssl->in_offt != NULL )
   dedfc:	b99b      	cbnz	r3, dee26 <mbedtls_ssl_read_record+0x42>
         *     should not be treated as a silently corrected assertion.
         *     Additionally, ssl->in_hslen might be arbitrarily out of
         *     bounds after handling a DTLS message with an unexpected
         *     sequence number, see mbedtls_ssl_prepare_handshake_record.
         */
        if( ssl->in_hslen < ssl->in_msglen )
   dedfe:	6f22      	ldr	r2, [r4, #112]	; 0x70
   dee00:	4291      	cmp	r1, r2
   dee02:	d206      	bcs.n	dee12 <mbedtls_ssl_read_record+0x2e>
        {
            ssl->in_msglen -= ssl->in_hslen;
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
   dee04:	6e60      	ldr	r0, [r4, #100]	; 0x64
         *     bounds after handling a DTLS message with an unexpected
         *     sequence number, see mbedtls_ssl_prepare_handshake_record.
         */
        if( ssl->in_hslen < ssl->in_msglen )
        {
            ssl->in_msglen -= ssl->in_hslen;
   dee06:	1a52      	subs	r2, r2, r1
   dee08:	6722      	str	r2, [r4, #112]	; 0x70
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
                     ssl->in_msglen );
   dee0a:	4401      	add	r1, r0
   dee0c:	f008 f8aa 	bl	e6f64 <memmove>
   dee10:	e000      	b.n	dee14 <mbedtls_ssl_read_record+0x30>
            MBEDTLS_SSL_DEBUG_BUF( 4, "remaining content in record",
                                   ssl->in_msg, ssl->in_msglen );
        }
        else
        {
            ssl->in_msglen = 0;
   dee12:	6723      	str	r3, [r4, #112]	; 0x70
        }

        ssl->in_hslen   = 0;
   dee14:	67a7      	str	r7, [r4, #120]	; 0x78
   dee16:	e008      	b.n	dee2a <mbedtls_ssl_read_record+0x46>
    }
    /* Case (4): Application data */
    else if( ssl->in_offt != NULL )
   dee18:	b93b      	cbnz	r3, dee2a <mbedtls_ssl_read_record+0x46>
        return( 0 );
    }
    /* Everything else (CCS & Alerts) */
    else
    {
        ssl->in_msglen = 0;
   dee1a:	6723      	str	r3, [r4, #112]	; 0x70
   dee1c:	e005      	b.n	dee2a <mbedtls_ssl_read_record+0x46>
        }
    }
    else
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "reuse previously read message" ) );
        ssl->keep_current_message = 0;
   dee1e:	2500      	movs	r5, #0
   dee20:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
   dee24:	e127      	b.n	df076 <mbedtls_ssl_read_record+0x292>
         * is in flight, as corrupting ssl->in_msglen during
         * ssl->in_offt != NULL is fatal. */
        if( ssl->in_offt != NULL )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   dee26:	4d96      	ldr	r5, [pc, #600]	; (df080 <mbedtls_ssl_read_record+0x29c>)
   dee28:	e125      	b.n	df076 <mbedtls_ssl_read_record+0x292>
    return( 0 );
}

static int ssl_record_is_in_progress( mbedtls_ssl_context *ssl )
{
    if( ssl->in_msglen > 0 )
   dee2a:	6f23      	ldr	r3, [r4, #112]	; 0x70
   dee2c:	2b00      	cmp	r3, #0
   dee2e:	f040 8105 	bne.w	df03c <mbedtls_ssl_read_record+0x258>
    ret = ssl_load_buffered_record( ssl );
    if( ret != 0 )
        return( ret );
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
   dee32:	2105      	movs	r1, #5
   dee34:	4620      	mov	r0, r4
   dee36:	f7ff fdc1 	bl	de9bc <mbedtls_ssl_fetch_input>
   dee3a:	2800      	cmp	r0, #0
   dee3c:	f040 8113 	bne.w	df066 <mbedtls_ssl_read_record+0x282>
{
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
   dee40:	6da2      	ldr	r2, [r4, #88]	; 0x58
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
   dee42:	6de0      	ldr	r0, [r4, #92]	; 0x5c
{
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
   dee44:	7813      	ldrb	r3, [r2, #0]
   dee46:	66e3      	str	r3, [r4, #108]	; 0x6c
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
   dee48:	f890 e000 	ldrb.w	lr, [r0]
   dee4c:	7841      	ldrb	r1, [r0, #1]
    mbedtls_ssl_read_version( &major_ver, &minor_ver, ssl->conf->transport, ssl->in_hdr + 1 );
   dee4e:	6820      	ldr	r0, [r4, #0]
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
   dee50:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
   dee54:	3b14      	subs	r3, #20
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
   dee56:	6721      	str	r1, [r4, #112]	; 0x70
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
   dee58:	2b03      	cmp	r3, #3
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
   dee5a:	f892 e001 	ldrb.w	lr, [r2, #1]
        *minor = ver[1];
   dee5e:	7892      	ldrb	r2, [r2, #2]
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
   dee60:	d905      	bls.n	dee6e <mbedtls_ssl_read_record+0x8a>
        /* Silently ignore invalid DTLS records as recommended by RFC 6347
         * Section 4.1.2.7 */
        if( ssl->conf->transport != MBEDTLS_SSL_TRANSPORT_DATAGRAM )
#endif /* MBEDTLS_SSL_PROTO_DTLS */
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                    MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
   dee62:	220a      	movs	r2, #10
   dee64:	2102      	movs	r1, #2
   dee66:	4620      	mov	r0, r4
   dee68:	f7ff ffa0 	bl	dedac <mbedtls_ssl_send_alert_message>
   dee6c:	e0e2      	b.n	df034 <mbedtls_ssl_read_record+0x250>

        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check version */
    if( major_ver != ssl->major_ver )
   dee6e:	68a3      	ldr	r3, [r4, #8]
   dee70:	459e      	cmp	lr, r3
   dee72:	f040 80df 	bne.w	df034 <mbedtls_ssl_read_record+0x250>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "major version mismatch" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    if( minor_ver > ssl->conf->max_minor_ver )
   dee76:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
   dee7a:	429a      	cmp	r2, r3
   dee7c:	f300 80da 	bgt.w	df034 <mbedtls_ssl_read_record+0x250>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "minor version mismatch" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check length against the size of our buffer */
    if( ssl->in_msglen > MBEDTLS_SSL_IN_BUFFER_LEN
   dee80:	6e63      	ldr	r3, [r4, #100]	; 0x64
   dee82:	6d22      	ldr	r2, [r4, #80]	; 0x50
   dee84:	1a9b      	subs	r3, r3, r2
   dee86:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
   dee8a:	332d      	adds	r3, #45	; 0x2d
   dee8c:	4299      	cmp	r1, r3
   dee8e:	f200 80d1 	bhi.w	df034 <mbedtls_ssl_read_record+0x250>
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */


    /* Check length against bounds of the current transform and version */
    if( ssl->transform_in == NULL )
   dee92:	6b63      	ldr	r3, [r4, #52]	; 0x34
   dee94:	b923      	cbnz	r3, deea0 <mbedtls_ssl_read_record+0xbc>
    {
        if( ssl->in_msglen < 1 ||
   dee96:	1e4b      	subs	r3, r1, #1
   dee98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   dee9c:	d30c      	bcc.n	deeb8 <mbedtls_ssl_read_record+0xd4>
   dee9e:	e0c9      	b.n	df034 <mbedtls_ssl_read_record+0x250>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
    }
    else
    {
        if( ssl->in_msglen < ssl->transform_in->minlen )
   deea0:	689b      	ldr	r3, [r3, #8]
   deea2:	4299      	cmp	r1, r3
   deea4:	f0c0 80c6 	bcc.w	df034 <mbedtls_ssl_read_record+0x250>
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * TLS encrypted messages can have up to 256 bytes of padding
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
   deea8:	68e2      	ldr	r2, [r4, #12]
   deeaa:	2a00      	cmp	r2, #0
   deeac:	dd04      	ble.n	deeb8 <mbedtls_ssl_read_record+0xd4>
   deeae:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
   deeb2:	4299      	cmp	r1, r3
   deeb4:	f200 80be 	bhi.w	df034 <mbedtls_ssl_read_record+0x250>
    }

    /*
     * Read and optionally decrypt the message contents
     */
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
   deeb8:	3105      	adds	r1, #5
   deeba:	4620      	mov	r0, r4
   deebc:	f7ff fd7e 	bl	de9bc <mbedtls_ssl_fetch_input>
   deec0:	2800      	cmp	r0, #0
   deec2:	f040 80d0 	bne.w	df066 <mbedtls_ssl_read_record+0x282>

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
   deec6:	f8d4 e034 	ldr.w	lr, [r4, #52]	; 0x34
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "more than one record within datagram" ) );
        }
    }
    else
#endif
        ssl->in_left = 0;
   deeca:	6760      	str	r0, [r4, #116]	; 0x74

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
   deecc:	f1be 0f00 	cmp.w	lr, #0
   deed0:	f000 80b4 	beq.w	df03c <mbedtls_ssl_read_record+0x258>
    size_t padlen = 0, correct = 1;
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
   deed4:	6a23      	ldr	r3, [r4, #32]
   deed6:	2b00      	cmp	r3, #0
   deed8:	f000 80ae 	beq.w	df038 <mbedtls_ssl_read_record+0x254>
   deedc:	f8de 3088 	ldr.w	r3, [lr, #136]	; 0x88
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode(
    const mbedtls_cipher_context_t *ctx )
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, MBEDTLS_MODE_NONE );
    if( ctx->cipher_info == NULL )
   deee0:	b103      	cbz	r3, deee4 <mbedtls_ssl_read_record+0x100>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
   deee2:	785b      	ldrb	r3, [r3, #1]
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_in->cipher_ctx_dec );

    if( ssl->in_msglen < ssl->transform_in->minlen )
   deee4:	6f22      	ldr	r2, [r4, #112]	; 0x70
   deee6:	f8de 1008 	ldr.w	r1, [lr, #8]
   deeea:	428a      	cmp	r2, r1
   deeec:	f0c0 808a 	bcc.w	df004 <mbedtls_ssl_read_record+0x220>
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || \
    defined(MBEDTLS_CCM_C) || \
    defined(MBEDTLS_CHACHAPOLY_C)
    if( mode == MBEDTLS_MODE_GCM ||
   deef0:	2b06      	cmp	r3, #6
   deef2:	d004      	beq.n	deefe <mbedtls_ssl_read_record+0x11a>
   deef4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   deef8:	2b08      	cmp	r3, #8
   deefa:	f040 809d 	bne.w	df038 <mbedtls_ssl_read_record+0x254>
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_in;
        unsigned char taglen = transform->ciphersuite_info->flags &
   deefe:	f8de 3000 	ldr.w	r3, [lr]
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
        size_t explicit_iv_len = transform->ivlen - transform->fixed_ivlen;
   def02:	f8de 1010 	ldr.w	r1, [lr, #16]
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_in;
        unsigned char taglen = transform->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   def06:	7f1b      	ldrb	r3, [r3, #28]
   def08:	f013 0f02 	tst.w	r3, #2
        size_t explicit_iv_len = transform->ivlen - transform->fixed_ivlen;
   def0c:	f8de 300c 	ldr.w	r3, [lr, #12]
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_in;
        unsigned char taglen = transform->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   def10:	bf0c      	ite	eq
   def12:	f04f 0c10 	moveq.w	ip, #16
   def16:	f04f 0c08 	movne.w	ip, #8
        size_t explicit_iv_len = transform->ivlen - transform->fixed_ivlen;
   def1a:	ebc1 0803 	rsb	r8, r1, r3

        /*
         * Compute and update sizes
         */
        if( ssl->in_msglen < explicit_iv_len + taglen )
   def1e:	eb08 030c 	add.w	r3, r8, ip
   def22:	429a      	cmp	r2, r3
   def24:	d36e      	bcc.n	df004 <mbedtls_ssl_read_record+0x220>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < explicit_iv_len (%d) "
                                "+ taglen (%d)", ssl->in_msglen,
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
   def26:	ebc8 0802 	rsb	r8, r8, r2
   def2a:	ebcc 0808 	rsb	r8, ip, r8
        ssl->in_msglen = dec_msglen;

        /*
         * Prepare additional authenticated data
         */
        memcpy( add_data, ssl->in_ctr, 8 );
   def2e:	6d63      	ldr	r3, [r4, #84]	; 0x54
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;

        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;
   def30:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70

        /*
         * Prepare additional authenticated data
         */
        memcpy( add_data, ssl->in_ctr, 8 );
   def34:	6859      	ldr	r1, [r3, #4]
   def36:	6818      	ldr	r0, [r3, #0]
        add_data[8]  = ssl->in_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
        add_data[12] = ssl->in_msglen & 0xFF;
   def38:	f88d 803c 	strb.w	r8, [sp, #60]	; 0x3c
        ssl->in_msglen = dec_msglen;

        /*
         * Prepare additional authenticated data
         */
        memcpy( add_data, ssl->in_ctr, 8 );
   def3c:	aa0c      	add	r2, sp, #48	; 0x30
   def3e:	c203      	stmia	r2!, {r0, r1}
        add_data[8]  = ssl->in_msgtype;
   def40:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   def42:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
   def46:	68e2      	ldr	r2, [r4, #12]
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
        ver[1] = (unsigned char) minor;
   def48:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
         */
        memcpy( add_data, ssl->in_ctr, 8 );
        add_data[8]  = ssl->in_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
   def4c:	ea4f 2218 	mov.w	r2, r8, lsr #8
   def50:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data for AEAD", add_data, 13 );

        /*
         * Prepare IV
         */
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
   def54:	f8de 200c 	ldr.w	r2, [lr, #12]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
   def58:	68a1      	ldr	r1, [r4, #8]
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;

        dec_msg = ssl->in_msg;
   def5a:	f8d4 a064 	ldr.w	sl, [r4, #100]	; 0x64
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
   def5e:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data for AEAD", add_data, 13 );

        /*
         * Prepare IV
         */
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
   def62:	2a0c      	cmp	r2, #12
   def64:	d168      	bne.n	df038 <mbedtls_ssl_read_record+0x254>
   def66:	f8de 2010 	ldr.w	r2, [lr, #16]
   def6a:	2a04      	cmp	r2, #4
   def6c:	d108      	bne.n	def80 <mbedtls_ssl_read_record+0x19c>
        {
            /* GCM and CCM: fixed || explicit (transmitted) */
            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );
   def6e:	f8de 0028 	ldr.w	r0, [lr, #40]	; 0x28
            memcpy( iv + transform->fixed_ivlen, ssl->in_iv, 8 );
   def72:	6e22      	ldr	r2, [r4, #96]	; 0x60
         * Prepare IV
         */
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
        {
            /* GCM and CCM: fixed || explicit (transmitted) */
            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );
   def74:	9009      	str	r0, [sp, #36]	; 0x24
            memcpy( iv + transform->fixed_ivlen, ssl->in_iv, 8 );
   def76:	6810      	ldr	r0, [r2, #0]
   def78:	6851      	ldr	r1, [r2, #4]
   def7a:	ab0a      	add	r3, sp, #40	; 0x28
   def7c:	c303      	stmia	r3!, {r0, r1}
   def7e:	e018      	b.n	defb2 <mbedtls_ssl_read_record+0x1ce>

        }
        else if( transform->ivlen == 12 && transform->fixed_ivlen == 12 )
   def80:	2a0c      	cmp	r2, #12
   def82:	d159      	bne.n	df038 <mbedtls_ssl_read_record+0x254>
        {
            /* ChachaPoly: fixed XOR sequence number */
            unsigned char i;

            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );
   def84:	46f1      	mov	r9, lr
   def86:	aa09      	add	r2, sp, #36	; 0x24
   def88:	f859 0f28 	ldr.w	r0, [r9, #40]!
   def8c:	f8d9 1004 	ldr.w	r1, [r9, #4]
   def90:	c203      	stmia	r2!, {r0, r1}
   def92:	f8d9 0008 	ldr.w	r0, [r9, #8]
   def96:	6010      	str	r0, [r2, #0]
   def98:	a90a      	add	r1, sp, #40	; 0x28
   def9a:	1e5a      	subs	r2, r3, #1
   def9c:	3307      	adds	r3, #7

            for( i = 0; i < 8; i++ )
                iv[i+4] ^= ssl->in_ctr[i];
   def9e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   defa2:	f891 9000 	ldrb.w	r9, [r1]
            /* ChachaPoly: fixed XOR sequence number */
            unsigned char i;

            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );

            for( i = 0; i < 8; i++ )
   defa6:	4293      	cmp	r3, r2
                iv[i+4] ^= ssl->in_ctr[i];
   defa8:	ea89 0000 	eor.w	r0, r9, r0
   defac:	f801 0b01 	strb.w	r0, [r1], #1
            /* ChachaPoly: fixed XOR sequence number */
            unsigned char i;

            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );

            for( i = 0; i < 8; i++ )
   defb0:	d1f5      	bne.n	def9e <mbedtls_ssl_read_record+0x1ba>
        MBEDTLS_SSL_DEBUG_BUF( 4, "TAG used", dec_msg + dec_msglen, taglen );

        /*
         * Decrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
   defb2:	eb0a 0308 	add.w	r3, sl, r8
   defb6:	9305      	str	r3, [sp, #20]
   defb8:	ab08      	add	r3, sp, #32
   defba:	9304      	str	r3, [sp, #16]
   defbc:	230d      	movs	r3, #13
   defbe:	9300      	str	r3, [sp, #0]
   defc0:	f8cd c018 	str.w	ip, [sp, #24]
   defc4:	f8cd a00c 	str.w	sl, [sp, #12]
   defc8:	f8cd 8008 	str.w	r8, [sp, #8]
   defcc:	f8cd a004 	str.w	sl, [sp, #4]
   defd0:	ab0c      	add	r3, sp, #48	; 0x30
   defd2:	220c      	movs	r2, #12
   defd4:	a909      	add	r1, sp, #36	; 0x24
   defd6:	f10e 0088 	add.w	r0, lr, #136	; 0x88
   defda:	f7f6 fb2f 	bl	d563c <mbedtls_cipher_auth_decrypt>
   defde:	b120      	cbz	r0, defea <mbedtls_ssl_read_record+0x206>
                                         dec_msg_result, &olen,
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );

            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
   defe0:	f510 4fc6 	cmn.w	r0, #25344	; 0x6300
   defe4:	d00e      	beq.n	df004 <mbedtls_ssl_read_record+0x220>
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
    {
        if( ( ret = ssl_decrypt_buf( ssl ) ) != 0 )
   defe6:	b300      	cbz	r0, df02a <mbedtls_ssl_read_record+0x246>
   defe8:	e03d      	b.n	df066 <mbedtls_ssl_read_record+0x282>

            return( ret );
        }
        auth_done++;

        if( olen != dec_msglen )
   defea:	9b08      	ldr	r3, [sp, #32]
   defec:	4598      	cmp	r8, r3
   defee:	d123      	bne.n	df038 <mbedtls_ssl_read_record+0x254>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ssl->in_msglen == 0 )
   deff0:	6f23      	ldr	r3, [r4, #112]	; 0x70
   deff2:	b96b      	cbnz	r3, df010 <mbedtls_ssl_read_record+0x22c>
    {
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
   deff4:	68e3      	ldr	r3, [r4, #12]
   deff6:	2b03      	cmp	r3, #3
   deff8:	d006      	beq.n	df008 <mbedtls_ssl_read_record+0x224>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

        ssl->nb_zero++;
   deffa:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   deffc:	3301      	adds	r3, #1

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
   deffe:	2b03      	cmp	r3, #3
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

        ssl->nb_zero++;
   df000:	67e3      	str	r3, [r4, #124]	; 0x7c

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
   df002:	dd06      	ble.n	df012 <mbedtls_ssl_read_record+0x22e>
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );

            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
                return( MBEDTLS_ERR_SSL_INVALID_MAC );
   df004:	481f      	ldr	r0, [pc, #124]	; (df084 <mbedtls_ssl_read_record+0x2a0>)
   df006:	e032      	b.n	df06e <mbedtls_ssl_read_record+0x28a>

    if( ssl->in_msglen == 0 )
    {
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
            && ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
   df008:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   df00a:	2b17      	cmp	r3, #23
   df00c:	d0f5      	beq.n	deffa <mbedtls_ssl_read_record+0x216>
   df00e:	e030      	b.n	df072 <mbedtls_ssl_read_record+0x28e>
                                "messages, possible DoS attack" ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
    }
    else
        ssl->nb_zero = 0;
   df010:	67e0      	str	r0, [r4, #124]	; 0x7c
                                         dec_msg_result, &olen,
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );

            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
   df012:	2207      	movs	r2, #7
    else
#endif
    {
        unsigned char i;
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
            if( ++ssl->in_ctr[i - 1] != 0 )
   df014:	6d61      	ldr	r1, [r4, #84]	; 0x54
   df016:	5c8b      	ldrb	r3, [r1, r2]
   df018:	3301      	adds	r3, #1
   df01a:	b2db      	uxtb	r3, r3
   df01c:	548b      	strb	r3, [r1, r2]
   df01e:	b923      	cbnz	r3, df02a <mbedtls_ssl_read_record+0x246>
    }
    else
#endif
    {
        unsigned char i;
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
   df020:	f112 32ff 	adds.w	r2, r2, #4294967295
   df024:	d2f6      	bcs.n	df014 <mbedtls_ssl_read_record+0x230>

        /* The loop goes to its end iff the counter is wrapping */
        if( i == ssl_ep_len( ssl ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
   df026:	4818      	ldr	r0, [pc, #96]	; (df088 <mbedtls_ssl_read_record+0x2a4>)
   df028:	e021      	b.n	df06e <mbedtls_ssl_read_record+0x28a>
        }

        MBEDTLS_SSL_DEBUG_BUF( 4, "input payload after decrypt",
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_IN_CONTENT_LEN )
   df02a:	6f23      	ldr	r3, [r4, #112]	; 0x70
   df02c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   df030:	d904      	bls.n	df03c <mbedtls_ssl_read_record+0x258>
   df032:	e01e      	b.n	df072 <mbedtls_ssl_read_record+0x28e>
        ssl->keep_current_message = 0;
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );

    return( 0 );
   df034:	4d15      	ldr	r5, [pc, #84]	; (df08c <mbedtls_ssl_read_record+0x2a8>)
   df036:	e01e      	b.n	df076 <mbedtls_ssl_read_record+0x292>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   df038:	4811      	ldr	r0, [pc, #68]	; (df080 <mbedtls_ssl_read_record+0x29c>)
   df03a:	e018      	b.n	df06e <mbedtls_ssl_read_record+0x28a>
                        return( ret );
                    }
                }
            }

            ret = mbedtls_ssl_handle_message_type( ssl );
   df03c:	4620      	mov	r0, r4
   df03e:	f7ff fe7b 	bl	ded38 <mbedtls_ssl_handle_message_type>

                ret = MBEDTLS_ERR_SSL_CONTINUE_PROCESSING;
            }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

        } while( MBEDTLS_ERR_SSL_NON_FATAL           == ret  ||
   df042:	f510 4fcd 	cmn.w	r0, #26240	; 0x6680
   df046:	f43f aed6 	beq.w	dedf6 <mbedtls_ssl_read_record+0x12>
   df04a:	f510 4fcb 	cmn.w	r0, #25984	; 0x6580
   df04e:	f43f aed2 	beq.w	dedf6 <mbedtls_ssl_read_record+0x12>
                 MBEDTLS_ERR_SSL_CONTINUE_PROCESSING == ret );

        if( 0 != ret )
   df052:	b960      	cbnz	r0, df06e <mbedtls_ssl_read_record+0x28a>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_handle_message_type" ), ret );
            return( ret );
        }

        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
   df054:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   df056:	2b16      	cmp	r3, #22
   df058:	d10d      	bne.n	df076 <mbedtls_ssl_read_record+0x292>
   df05a:	2e01      	cmp	r6, #1
   df05c:	d10b      	bne.n	df076 <mbedtls_ssl_read_record+0x292>
            update_hs_digest == 1 )
        {
            mbedtls_ssl_update_handshake_status( ssl );
   df05e:	4620      	mov	r0, r4
   df060:	f7ff fe58 	bl	ded14 <mbedtls_ssl_update_handshake_status>
   df064:	e007      	b.n	df076 <mbedtls_ssl_read_record+0x292>

                if( have_buffered == 0 )
#endif /* MBEDTLS_SSL_PROTO_DTLS */
                {
                    ret = ssl_get_next_record( ssl );
                    if( ret == MBEDTLS_ERR_SSL_CONTINUE_PROCESSING )
   df066:	f510 4fcb 	cmn.w	r0, #25984	; 0x6580
   df06a:	f43f aec4 	beq.w	dedf6 <mbedtls_ssl_read_record+0x12>
         * is in flight, as corrupting ssl->in_msglen during
         * ssl->in_offt != NULL is fatal. */
        if( ssl->in_offt != NULL )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   df06e:	4605      	mov	r5, r0
   df070:	e001      	b.n	df076 <mbedtls_ssl_read_record+0x292>
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_IN_CONTENT_LEN )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   df072:	4806      	ldr	r0, [pc, #24]	; (df08c <mbedtls_ssl_read_record+0x2a8>)
   df074:	e7fb      	b.n	df06e <mbedtls_ssl_read_record+0x28a>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );

    return( 0 );
}
   df076:	4628      	mov	r0, r5
   df078:	b010      	add	sp, #64	; 0x40
   df07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   df07e:	bf00      	nop
   df080:	ffff9400 	.word	0xffff9400
   df084:	ffff8e80 	.word	0xffff8e80
   df088:	ffff9480 	.word	0xffff9480
   df08c:	ffff8e00 	.word	0xffff8e00

000df090 <mbedtls_ssl_write_certificate>:

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
   df090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
   df092:	6c03      	ldr	r3, [r0, #64]	; 0x40

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   df094:	681b      	ldr	r3, [r3, #0]
   df096:	7a9a      	ldrb	r2, [r3, #10]
   df098:	2a0b      	cmp	r2, #11

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
   df09a:	4604      	mov	r4, r0
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   df09c:	d809      	bhi.n	df0b2 <mbedtls_ssl_write_certificate+0x22>
   df09e:	f44f 6316 	mov.w	r3, #2400	; 0x960
   df0a2:	40d3      	lsrs	r3, r2
   df0a4:	07da      	lsls	r2, r3, #31
   df0a6:	d504      	bpl.n	df0b2 <mbedtls_ssl_write_certificate+0x22>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
        ssl->state++;
   df0a8:	6863      	ldr	r3, [r4, #4]
   df0aa:	3301      	adds	r3, #1
   df0ac:	6063      	str	r3, [r4, #4]
        return( 0 );
   df0ae:	2000      	movs	r0, #0
   df0b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   df0b2:	6822      	ldr	r2, [r4, #0]
   df0b4:	f892 307c 	ldrb.w	r3, [r2, #124]	; 0x7c
   df0b8:	07db      	lsls	r3, r3, #31
   df0ba:	d403      	bmi.n	df0c4 <mbedtls_ssl_write_certificate+0x34>
    {
        if( ssl->client_auth == 0 )
   df0bc:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   df0c0:	2b00      	cmp	r3, #0
   df0c2:	d0f1      	beq.n	df0a8 <mbedtls_ssl_write_certificate+0x18>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
   df0c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   df0c6:	b113      	cbz	r3, df0ce <mbedtls_ssl_write_certificate+0x3e>
   df0c8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   df0cc:	b90b      	cbnz	r3, df0d2 <mbedtls_ssl_write_certificate+0x42>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
   df0ce:	6d13      	ldr	r3, [r2, #80]	; 0x50

    return( key_cert == NULL ? NULL : key_cert->cert );
   df0d0:	b30b      	cbz	r3, df116 <mbedtls_ssl_write_certificate+0x86>
   df0d2:	681e      	ldr	r6, [r3, #0]
   df0d4:	2307      	movs	r3, #7
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
    crt = mbedtls_ssl_own_cert( ssl );

    while( crt != NULL )
   df0d6:	b1fe      	cbz	r6, df118 <mbedtls_ssl_write_certificate+0x88>
    {
        n = crt->raw.len;
   df0d8:	6875      	ldr	r5, [r6, #4]
        if( n > MBEDTLS_SSL_OUT_CONTENT_LEN - 3 - i )
   df0da:	f5c3 52ff 	rsb	r2, r3, #8160	; 0x1fe0
   df0de:	321d      	adds	r2, #29
   df0e0:	4295      	cmp	r5, r2
   df0e2:	d836      	bhi.n	df152 <mbedtls_ssl_write_certificate+0xc2>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
                           i + 3 + n, MBEDTLS_SSL_OUT_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
   df0e4:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   df0e8:	0c29      	lsrs	r1, r5, #16
   df0ea:	54d1      	strb	r1, [r2, r3]
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
   df0ec:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   df0f0:	441a      	add	r2, r3
   df0f2:	0a29      	lsrs	r1, r5, #8
   df0f4:	7051      	strb	r1, [r2, #1]
        ssl->out_msg[i + 2] = (unsigned char)( n       );
   df0f6:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   df0fa:	441a      	add	r2, r3

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
   df0fc:	1cdf      	adds	r7, r3, #3
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
        ssl->out_msg[i + 2] = (unsigned char)( n       );
   df0fe:	7095      	strb	r5, [r2, #2]

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
   df100:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   df104:	68b1      	ldr	r1, [r6, #8]
   df106:	462a      	mov	r2, r5
   df108:	4438      	add	r0, r7
   df10a:	f007 ff20 	bl	e6f4e <memcpy>
        i += n; crt = crt->next;
   df10e:	19eb      	adds	r3, r5, r7
   df110:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
    crt = mbedtls_ssl_own_cert( ssl );

    while( crt != NULL )
   df114:	e7df      	b.n	df0d6 <mbedtls_ssl_write_certificate+0x46>
   df116:	2307      	movs	r3, #7

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
        i += n; crt = crt->next;
    }

    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
   df118:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   df11c:	1fda      	subs	r2, r3, #7
   df11e:	0c10      	lsrs	r0, r2, #16
   df120:	7108      	strb	r0, [r1, #4]
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
   df122:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   df126:	0a10      	lsrs	r0, r2, #8
   df128:	7148      	strb	r0, [r1, #5]
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
   df12a:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   df12e:	718a      	strb	r2, [r1, #6]

    ssl->out_msglen  = i;
   df130:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   df134:	2316      	movs	r3, #22
   df136:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
   df13a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   df13e:	220b      	movs	r2, #11
   df140:	701a      	strb	r2, [r3, #0]

#if defined(MBEDTLS_SSL_PROTO_SSL3) && defined(MBEDTLS_SSL_CLI_C)
write_msg:
#endif

    ssl->state++;
   df142:	6863      	ldr	r3, [r4, #4]
   df144:	3301      	adds	r3, #1
   df146:	6063      	str	r3, [r4, #4]

    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   df148:	4620      	mov	r0, r4
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );

    return( ret );
}
   df14a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
write_msg:
#endif

    ssl->state++;

    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   df14e:	f7ff bd8f 	b.w	dec70 <mbedtls_ssl_write_handshake_msg>
        n = crt->raw.len;
        if( n > MBEDTLS_SSL_OUT_CONTENT_LEN - 3 - i )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
                           i + 3 + n, MBEDTLS_SSL_OUT_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
   df152:	4801      	ldr	r0, [pc, #4]	; (df158 <mbedtls_ssl_write_certificate+0xc8>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );

    return( ret );
}
   df154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   df156:	bf00      	nop
   df158:	ffff8b00 	.word	0xffff8b00

000df15c <mbedtls_ssl_write_change_cipher_spec>:
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
   df15c:	2214      	movs	r2, #20
    ssl->out_msglen  = 1;
    ssl->out_msg[0]  = 1;
   df15e:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
   df162:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
    ssl->out_msglen  = 1;
   df166:	2201      	movs	r2, #1
   df168:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
    ssl->out_msg[0]  = 1;
   df16c:	700a      	strb	r2, [r1, #0]

    ssl->state++;
   df16e:	6842      	ldr	r2, [r0, #4]
   df170:	3201      	adds	r2, #1
   df172:	6042      	str	r2, [r0, #4]

    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   df174:	f7ff bd7c 	b.w	dec70 <mbedtls_ssl_write_handshake_msg>

000df178 <mbedtls_ssl_parse_change_cipher_spec>:

    return( 0 );
}

int mbedtls_ssl_parse_change_cipher_spec( mbedtls_ssl_context *ssl )
{
   df178:	b510      	push	{r4, lr}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   df17a:	2101      	movs	r1, #1

    return( 0 );
}

int mbedtls_ssl_parse_change_cipher_spec( mbedtls_ssl_context *ssl )
{
   df17c:	4604      	mov	r4, r0
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   df17e:	f7ff fe31 	bl	dede4 <mbedtls_ssl_read_record>
   df182:	bb28      	cbnz	r0, df1d0 <mbedtls_ssl_parse_change_cipher_spec+0x58>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
   df184:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   df186:	2b14      	cmp	r3, #20
   df188:	d006      	beq.n	df198 <mbedtls_ssl_parse_change_cipher_spec+0x20>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
   df18a:	220a      	movs	r2, #10
   df18c:	2102      	movs	r1, #2
   df18e:	4620      	mov	r0, r4
   df190:	f7ff fe0c 	bl	dedac <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   df194:	480f      	ldr	r0, [pc, #60]	; (df1d4 <mbedtls_ssl_parse_change_cipher_spec+0x5c>)
   df196:	bd10      	pop	{r4, pc}
    /*
     * Switch to our negotiated transform and session parameters for inbound
     * data.
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for inbound data" ) );
    ssl->transform_in = ssl->transform_negotiate;
   df198:	6c23      	ldr	r3, [r4, #64]	; 0x40
   df19a:	6363      	str	r3, [r4, #52]	; 0x34
    ssl->session_in = ssl->session_negotiate;
   df19c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   df19e:	6223      	str	r3, [r4, #32]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->in_ctr, 0, 8 );
   df1a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   df1a2:	6018      	str	r0, [r3, #0]
   df1a4:	6058      	str	r0, [r3, #4]
        ssl->in_iv  = ssl->in_hdr + 13;
    }
    else
#endif
    {
        ssl->in_ctr = ssl->in_hdr - 8;
   df1a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->in_ctr, 0, 8 );

    ssl_update_in_pointers( ssl, ssl->transform_negotiate );
   df1a8:	6c21      	ldr	r1, [r4, #64]	; 0x40
        ssl->in_iv  = ssl->in_hdr + 13;
    }
    else
#endif
    {
        ssl->in_ctr = ssl->in_hdr - 8;
   df1aa:	f1a3 0208 	sub.w	r2, r3, #8
   df1ae:	6562      	str	r2, [r4, #84]	; 0x54
        ssl->in_len = ssl->in_hdr + 3;
   df1b0:	1cda      	adds	r2, r3, #3
        ssl->in_iv  = ssl->in_hdr + 5;
   df1b2:	3305      	adds	r3, #5
    }
    else
#endif
    {
        ssl->in_ctr = ssl->in_hdr - 8;
        ssl->in_len = ssl->in_hdr + 3;
   df1b4:	65e2      	str	r2, [r4, #92]	; 0x5c
        ssl->in_iv  = ssl->in_hdr + 5;
   df1b6:	6623      	str	r3, [r4, #96]	; 0x60
    }

    /* Offset in_msg from in_iv to allow space for explicit IV, if used. */
    if( transform != NULL &&
   df1b8:	b131      	cbz	r1, df1c8 <mbedtls_ssl_parse_change_cipher_spec+0x50>
   df1ba:	68e2      	ldr	r2, [r4, #12]
   df1bc:	2a01      	cmp	r2, #1
        ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->in_msg = ssl->in_iv + transform->ivlen - transform->fixed_ivlen;
   df1be:	bfc1      	itttt	gt
   df1c0:	68ca      	ldrgt	r2, [r1, #12]
   df1c2:	6909      	ldrgt	r1, [r1, #16]
   df1c4:	1a52      	subgt	r2, r2, r1
   df1c6:	189b      	addgt	r3, r3, r2
    }
    else
        ssl->in_msg = ssl->in_iv;
   df1c8:	6663      	str	r3, [r4, #100]	; 0x64
            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
        }
    }
#endif

    ssl->state++;
   df1ca:	6863      	ldr	r3, [r4, #4]
   df1cc:	3301      	adds	r3, #1
   df1ce:	6063      	str	r3, [r4, #4]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );

    return( 0 );
}
   df1d0:	bd10      	pop	{r4, pc}
   df1d2:	bf00      	nop
   df1d4:	ffff8900 	.word	0xffff8900

000df1d8 <mbedtls_ssl_optimize_checksum>:
        ssl->handshake->update_checksum = ssl_update_checksum_md5sha1;
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
   df1d8:	7a4b      	ldrb	r3, [r1, #9]
   df1da:	2b07      	cmp	r3, #7
   df1dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
        ssl->handshake->update_checksum = ssl_update_checksum_sha384;
   df1de:	bf0c      	ite	eq
   df1e0:	4a02      	ldreq	r2, [pc, #8]	; (df1ec <mbedtls_ssl_optimize_checksum+0x14>)
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ciphersuite_info->mac != MBEDTLS_MD_SHA384 )
        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
   df1e2:	4a03      	ldrne	r2, [pc, #12]	; (df1f0 <mbedtls_ssl_optimize_checksum+0x18>)
   df1e4:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
   df1e8:	4770      	bx	lr
   df1ea:	bf00      	nop
   df1ec:	000de5d3 	.word	0x000de5d3
   df1f0:	000de5c9 	.word	0x000de5c9

000df1f4 <mbedtls_ssl_write_finished>:

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
}

int mbedtls_ssl_write_finished( mbedtls_ssl_context *ssl )
{
   df1f4:	b510      	push	{r4, lr}
    int ret, hash_len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );

    ssl_update_out_pointers( ssl, ssl->transform_negotiate );
   df1f6:	6c01      	ldr	r1, [r0, #64]	; 0x40

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
}

int mbedtls_ssl_write_finished( mbedtls_ssl_context *ssl )
{
   df1f8:	4604      	mov	r4, r0
    int ret, hash_len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );

    ssl_update_out_pointers( ssl, ssl->transform_negotiate );
   df1fa:	f7ff f865 	bl	de2c8 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>

    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
   df1fe:	6803      	ldr	r3, [r0, #0]
   df200:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
   df204:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   df208:	6b03      	ldr	r3, [r0, #48]	; 0x30
   df20a:	f002 0201 	and.w	r2, r2, #1
   df20e:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
   df212:	3104      	adds	r1, #4
   df214:	4798      	blx	r3
     * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites
     * may define some other value. Currently (early 2016), no defined
     * ciphersuite does this (and this is unlikely to change as activity has
     * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.
     */
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
   df216:	68e3      	ldr	r3, [r4, #12]
   df218:	2b00      	cmp	r3, #0
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
#endif

    ssl->out_msglen  = 4 + hash_len;
   df21a:	bf14      	ite	ne
   df21c:	2310      	movne	r3, #16
   df21e:	2328      	moveq	r3, #40	; 0x28
   df220:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   df224:	2316      	movs	r3, #22
   df226:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
   df22a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   df22e:	2214      	movs	r2, #20
   df230:	701a      	strb	r2, [r3, #0]

    /*
     * In case of session resuming, invert the client and server
     * ChangeCipherSpec messages order.
     */
    if( ssl->handshake->resume != 0 )
   df232:	6b23      	ldr	r3, [r4, #48]	; 0x30
   df234:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
   df238:	b133      	cbz	r3, df248 <mbedtls_ssl_write_finished+0x54>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   df23a:	6823      	ldr	r3, [r4, #0]
   df23c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   df240:	07db      	lsls	r3, r3, #31
   df242:	d404      	bmi.n	df24e <mbedtls_ssl_write_finished+0x5a>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
   df244:	230f      	movs	r3, #15
   df246:	e001      	b.n	df24c <mbedtls_ssl_write_finished+0x58>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
#endif
    }
    else
        ssl->state++;
   df248:	6863      	ldr	r3, [r4, #4]
   df24a:	3301      	adds	r3, #1
   df24c:	6063      	str	r3, [r4, #4]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->cur_out_ctr, 0, 8 );
   df24e:	2300      	movs	r3, #0
   df250:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   df254:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac

    ssl->transform_out = ssl->transform_negotiate;
   df258:	6c23      	ldr	r3, [r4, #64]	; 0x40
   df25a:	63a3      	str	r3, [r4, #56]	; 0x38
    ssl->session_out = ssl->session_negotiate;
   df25c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   df25e:	6263      	str	r3, [r4, #36]	; 0x24
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   df260:	4620      	mov	r0, r4
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write finished" ) );

    return( 0 );
}
   df262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   df266:	f7ff bd03 	b.w	dec70 <mbedtls_ssl_write_handshake_msg>
	...

000df26c <mbedtls_ssl_parse_finished>:
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
   df26c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
   df26e:	6803      	ldr	r3, [r0, #0]
   df270:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   df274:	6b03      	ldr	r3, [r0, #48]	; 0x30
   df276:	43d2      	mvns	r2, r2
   df278:	ad01      	add	r5, sp, #4
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
   df27a:	4604      	mov	r4, r0
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
   df27c:	4629      	mov	r1, r5
   df27e:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
   df282:	f002 0201 	and.w	r2, r2, #1
   df286:	4798      	blx	r3

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   df288:	2101      	movs	r1, #1
   df28a:	4620      	mov	r0, r4
   df28c:	f7ff fdaa 	bl	dede4 <mbedtls_ssl_read_record>
   df290:	2800      	cmp	r0, #0
   df292:	d13b      	bne.n	df30c <mbedtls_ssl_parse_finished+0xa0>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   df294:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   df296:	2b16      	cmp	r3, #22
   df298:	d006      	beq.n	df2a8 <mbedtls_ssl_parse_finished+0x3c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
   df29a:	220a      	movs	r2, #10
   df29c:	2102      	movs	r1, #2
   df29e:	4620      	mov	r0, r4
   df2a0:	f7ff fd84 	bl	dedac <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   df2a4:	481a      	ldr	r0, [pc, #104]	; (df310 <mbedtls_ssl_parse_finished+0xa4>)
   df2a6:	e031      	b.n	df30c <mbedtls_ssl_parse_finished+0xa0>
        hash_len = 36;
    else
#endif
        hash_len = 12;

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
   df2a8:	6e61      	ldr	r1, [r4, #100]	; 0x64
   df2aa:	780b      	ldrb	r3, [r1, #0]
   df2ac:	2b14      	cmp	r3, #20
   df2ae:	d115      	bne.n	df2dc <mbedtls_ssl_parse_finished+0x70>
   df2b0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   df2b2:	2b10      	cmp	r3, #16
   df2b4:	d112      	bne.n	df2dc <mbedtls_ssl_parse_finished+0x70>
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;
   df2b6:	f88d 0003 	strb.w	r0, [sp, #3]
   df2ba:	1d03      	adds	r3, r0, #4
    for( i = 0; i < n; i++ )
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
   df2bc:	5ccb      	ldrb	r3, [r1, r3]
   df2be:	5c2a      	ldrb	r2, [r5, r0]
        diff |= x ^ y;
   df2c0:	f89d 6003 	ldrb.w	r6, [sp, #3]
   df2c4:	4053      	eors	r3, r2
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
   df2c6:	3001      	adds	r0, #1
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
   df2c8:	4333      	orrs	r3, r6
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
   df2ca:	280c      	cmp	r0, #12
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
   df2cc:	f88d 3003 	strb.w	r3, [sp, #3]
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
   df2d0:	d1f3      	bne.n	df2ba <mbedtls_ssl_parse_finished+0x4e>
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
    }

    return( diff );
   df2d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
    }

    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
   df2d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   df2da:	b133      	cbz	r3, df2ea <mbedtls_ssl_parse_finished+0x7e>
                      buf, hash_len ) != 0 )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   df2dc:	2232      	movs	r2, #50	; 0x32
   df2de:	2102      	movs	r1, #2
   df2e0:	4620      	mov	r0, r4
   df2e2:	f7ff fd63 	bl	dedac <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
   df2e6:	480b      	ldr	r0, [pc, #44]	; (df314 <mbedtls_ssl_parse_finished+0xa8>)
   df2e8:	e010      	b.n	df30c <mbedtls_ssl_parse_finished+0xa0>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->peer_verify_data, buf, hash_len );
#endif

    if( ssl->handshake->resume != 0 )
   df2ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
   df2ec:	f8d3 0348 	ldr.w	r0, [r3, #840]	; 0x348
   df2f0:	b138      	cbz	r0, df302 <mbedtls_ssl_parse_finished+0x96>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   df2f2:	6823      	ldr	r3, [r4, #0]
   df2f4:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
   df2f8:	f010 0001 	ands.w	r0, r0, #1
   df2fc:	d105      	bne.n	df30a <mbedtls_ssl_parse_finished+0x9e>
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
   df2fe:	230a      	movs	r3, #10
   df300:	e001      	b.n	df306 <mbedtls_ssl_parse_finished+0x9a>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
#endif
    }
    else
        ssl->state++;
   df302:	6863      	ldr	r3, [r4, #4]
   df304:	3301      	adds	r3, #1
   df306:	6063      	str	r3, [r4, #4]
   df308:	e000      	b.n	df30c <mbedtls_ssl_parse_finished+0xa0>
        mbedtls_ssl_recv_flight_completed( ssl );
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse finished" ) );

    return( 0 );
   df30a:	4610      	mov	r0, r2
}
   df30c:	b004      	add	sp, #16
   df30e:	bd70      	pop	{r4, r5, r6, pc}
   df310:	ffff8900 	.word	0xffff8900
   df314:	ffff8180 	.word	0xffff8180

000df318 <mbedtls_ssl_session_init>:
    mbedtls_md_init( &transform->md_ctx_dec );
}

void mbedtls_ssl_session_init( mbedtls_ssl_session *session )
{
    memset( session, 0, sizeof(mbedtls_ssl_session) );
   df318:	2274      	movs	r2, #116	; 0x74
   df31a:	2100      	movs	r1, #0
   df31c:	f007 be3d 	b.w	e6f9a <memset>

000df320 <mbedtls_ssl_init>:
/*
 * Initialize an SSL context
 */
void mbedtls_ssl_init( mbedtls_ssl_context *ssl )
{
    memset( ssl, 0, sizeof( mbedtls_ssl_context ) );
   df320:	22bc      	movs	r2, #188	; 0xbc
   df322:	2100      	movs	r1, #0
   df324:	f007 be39 	b.w	e6f9a <memset>

000df328 <mbedtls_ssl_conf_authmode>:
}
#endif

void mbedtls_ssl_conf_authmode( mbedtls_ssl_config *conf, int authmode )
{
    conf->authmode   = authmode;
   df328:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
   df32c:	f361 0383 	bfi	r3, r1, #2, #2
   df330:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
   df334:	4770      	bx	lr

000df336 <mbedtls_ssl_conf_verify>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
void mbedtls_ssl_conf_verify( mbedtls_ssl_config *conf,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
    conf->f_vrfy      = f_vrfy;
   df336:	6341      	str	r1, [r0, #52]	; 0x34
    conf->p_vrfy      = p_vrfy;
   df338:	6382      	str	r2, [r0, #56]	; 0x38
   df33a:	4770      	bx	lr

000df33c <mbedtls_ssl_conf_rng>:

void mbedtls_ssl_conf_rng( mbedtls_ssl_config *conf,
                  int (*f_rng)(void *, unsigned char *, size_t),
                  void *p_rng )
{
    conf->f_rng      = f_rng;
   df33c:	6181      	str	r1, [r0, #24]
    conf->p_rng      = p_rng;
   df33e:	61c2      	str	r2, [r0, #28]
   df340:	4770      	bx	lr

000df342 <mbedtls_ssl_conf_dbg>:

void mbedtls_ssl_conf_dbg( mbedtls_ssl_config *conf,
                  void (*f_dbg)(void *, int, const char *, int, const char *),
                  void  *p_dbg )
{
    conf->f_dbg      = f_dbg;
   df342:	6101      	str	r1, [r0, #16]
    conf->p_dbg      = p_dbg;
   df344:	6142      	str	r2, [r0, #20]
   df346:	4770      	bx	lr

000df348 <mbedtls_ssl_set_bio>:
        mbedtls_ssl_recv_t *f_recv,
        mbedtls_ssl_recv_timeout_t *f_recv_timeout )
{
    ssl->p_bio          = p_bio;
    ssl->f_send         = f_send;
    ssl->f_recv         = f_recv;
   df348:	6143      	str	r3, [r0, #20]
    ssl->f_recv_timeout = f_recv_timeout;
   df34a:	9b00      	ldr	r3, [sp, #0]
        void *p_bio,
        mbedtls_ssl_send_t *f_send,
        mbedtls_ssl_recv_t *f_recv,
        mbedtls_ssl_recv_timeout_t *f_recv_timeout )
{
    ssl->p_bio          = p_bio;
   df34c:	61c1      	str	r1, [r0, #28]
    ssl->f_send         = f_send;
   df34e:	6102      	str	r2, [r0, #16]
    ssl->f_recv         = f_recv;
    ssl->f_recv_timeout = f_recv_timeout;
   df350:	6183      	str	r3, [r0, #24]
   df352:	4770      	bx	lr

000df354 <mbedtls_ssl_set_timer_cb>:

void mbedtls_ssl_set_timer_cb( mbedtls_ssl_context *ssl,
                               void *p_timer,
                               mbedtls_ssl_set_timer_t *f_set_timer,
                               mbedtls_ssl_get_timer_t *f_get_timer )
{
   df354:	b410      	push	{r4}
    ssl->p_timer        = p_timer;
   df356:	6441      	str	r1, [r0, #68]	; 0x44
    ssl->f_set_timer    = f_set_timer;
   df358:	6482      	str	r2, [r0, #72]	; 0x48
    ssl->f_get_timer    = f_get_timer;
   df35a:	64c3      	str	r3, [r0, #76]	; 0x4c

    /* Make sure we start with no timer running */
    ssl_set_timer( ssl, 0 );
   df35c:	2100      	movs	r1, #0
}
   df35e:	f85d 4b04 	ldr.w	r4, [sp], #4
    ssl->p_timer        = p_timer;
    ssl->f_set_timer    = f_set_timer;
    ssl->f_get_timer    = f_get_timer;

    /* Make sure we start with no timer running */
    ssl_set_timer( ssl, 0 );
   df362:	f7fe bfaa 	b.w	de2ba <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>

000df366 <mbedtls_ssl_conf_own_cert>:

int mbedtls_ssl_conf_own_cert( mbedtls_ssl_config *conf,
                              mbedtls_x509_crt *own_cert,
                              mbedtls_pk_context *pk_key )
{
    return( ssl_append_key_cert( &conf->key_cert, own_cert, pk_key ) );
   df366:	3050      	adds	r0, #80	; 0x50
   df368:	f7ff b910 	b.w	de58c <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context>

000df36c <mbedtls_ssl_conf_ca_chain>:

void mbedtls_ssl_conf_ca_chain( mbedtls_ssl_config *conf,
                               mbedtls_x509_crt *ca_chain,
                               mbedtls_x509_crl *ca_crl )
{
    conf->ca_chain   = ca_chain;
   df36c:	6541      	str	r1, [r0, #84]	; 0x54
    conf->ca_crl     = ca_crl;
   df36e:	6582      	str	r2, [r0, #88]	; 0x58
   df370:	4770      	bx	lr
	...

000df374 <mbedtls_ssl_set_hostname>:
}
#endif /* MBEDTLS_ECP_C */

#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_set_hostname( mbedtls_ssl_context *ssl, const char *hostname )
{
   df374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   df376:	4606      	mov	r6, r0
    /* Initialize to suppress unnecessary compiler warning */
    size_t hostname_len = 0;

    /* Check if new hostname is valid before
     * making any change to current one */
    if( hostname != NULL )
   df378:	460c      	mov	r4, r1
   df37a:	b131      	cbz	r1, df38a <mbedtls_ssl_set_hostname+0x16>
    {
        hostname_len = strlen( hostname );
   df37c:	4608      	mov	r0, r1
   df37e:	f007 fe5d 	bl	e703c <strlen>

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
   df382:	28ff      	cmp	r0, #255	; 0xff

    /* Check if new hostname is valid before
     * making any change to current one */
    if( hostname != NULL )
    {
        hostname_len = strlen( hostname );
   df384:	4605      	mov	r5, r0

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
   df386:	d901      	bls.n	df38c <mbedtls_ssl_set_hostname+0x18>
   df388:	e022      	b.n	df3d0 <mbedtls_ssl_set_hostname+0x5c>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_set_hostname( mbedtls_ssl_context *ssl, const char *hostname )
{
    /* Initialize to suppress unnecessary compiler warning */
    size_t hostname_len = 0;
   df38a:	460d      	mov	r5, r1
    }

    /* Now it's clear that we will overwrite the old hostname,
     * so we can free it safely */

    if( ssl->hostname != NULL )
   df38c:	f8d6 70b4 	ldr.w	r7, [r6, #180]	; 0xb4
   df390:	b157      	cbz	r7, df3a8 <mbedtls_ssl_set_hostname+0x34>
    {
        mbedtls_platform_zeroize( ssl->hostname, strlen( ssl->hostname ) );
   df392:	4638      	mov	r0, r7
   df394:	f007 fe52 	bl	e703c <strlen>
   df398:	4601      	mov	r1, r0
   df39a:	4638      	mov	r0, r7
   df39c:	f7fb f8a0 	bl	da4e0 <mbedtls_platform_zeroize>
        mbedtls_free( ssl->hostname );
   df3a0:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   df3a4:	f005 ffe2 	bl	e536c <free>
    }

    /* Passing NULL as hostname shall clear the old one */

    if( hostname == NULL )
   df3a8:	b91c      	cbnz	r4, df3b2 <mbedtls_ssl_set_hostname+0x3e>
    {
        ssl->hostname = NULL;
   df3aa:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
        memcpy( ssl->hostname, hostname, hostname_len );

        ssl->hostname[hostname_len] = '\0';
    }

    return( 0 );
   df3ae:	4620      	mov	r0, r4
   df3b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        ssl->hostname = NULL;
    }
    else
    {
        ssl->hostname = (char *)mbedtls_calloc( 1, hostname_len + 1 );
   df3b2:	1c69      	adds	r1, r5, #1
   df3b4:	2001      	movs	r0, #1
   df3b6:	f007 fcad 	bl	e6d14 <calloc>
   df3ba:	4607      	mov	r7, r0
   df3bc:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
        if( ssl->hostname == NULL )
   df3c0:	b140      	cbz	r0, df3d4 <mbedtls_ssl_set_hostname+0x60>
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

        memcpy( ssl->hostname, hostname, hostname_len );
   df3c2:	462a      	mov	r2, r5
   df3c4:	4621      	mov	r1, r4
   df3c6:	f007 fdc2 	bl	e6f4e <memcpy>

        ssl->hostname[hostname_len] = '\0';
   df3ca:	2000      	movs	r0, #0
   df3cc:	5578      	strb	r0, [r7, r5]
   df3ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( hostname != NULL )
    {
        hostname_len = strlen( hostname );

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   df3d0:	4801      	ldr	r0, [pc, #4]	; (df3d8 <mbedtls_ssl_set_hostname+0x64>)
   df3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    else
    {
        ssl->hostname = (char *)mbedtls_calloc( 1, hostname_len + 1 );
        if( ssl->hostname == NULL )
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   df3d4:	4801      	ldr	r0, [pc, #4]	; (df3dc <mbedtls_ssl_set_hostname+0x68>)

        ssl->hostname[hostname_len] = '\0';
    }

    return( 0 );
}
   df3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   df3d8:	ffff8f00 	.word	0xffff8f00
   df3dc:	ffff8100 	.word	0xffff8100

000df3e0 <mbedtls_ssl_conf_min_version>:
    conf->max_minor_ver = minor;
}

void mbedtls_ssl_conf_min_version( mbedtls_ssl_config *conf, int major, int minor )
{
    conf->min_major_ver = major;
   df3e0:	f880 107a 	strb.w	r1, [r0, #122]	; 0x7a
    conf->min_minor_ver = minor;
   df3e4:	f880 207b 	strb.w	r2, [r0, #123]	; 0x7b
   df3e8:	4770      	bx	lr

000df3ea <mbedtls_ssl_get_verify_result>:
    return( 0 );
}

uint32_t mbedtls_ssl_get_verify_result( const mbedtls_ssl_context *ssl )
{
    if( ssl->session != NULL )
   df3ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
   df3ec:	b90b      	cbnz	r3, df3f2 <mbedtls_ssl_get_verify_result+0x8>
        return( ssl->session->verify_result );

    if( ssl->session_negotiate != NULL )
   df3ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   df3f0:	b10b      	cbz	r3, df3f6 <mbedtls_ssl_get_verify_result+0xc>
        return( ssl->session_negotiate->verify_result );
   df3f2:	6e18      	ldr	r0, [r3, #96]	; 0x60
   df3f4:	4770      	bx	lr

    return( 0xFFFFFFFF );
   df3f6:	f04f 30ff 	mov.w	r0, #4294967295
}
   df3fa:	4770      	bx	lr

000df3fc <mbedtls_ssl_get_max_frag_len>:
    size_t max_len;

    /*
     * Assume mfl_code is correct since it was checked when set
     */
    max_len = ssl_mfl_code_to_length( ssl->conf->mfl_code );
   df3fc:	6803      	ldr	r3, [r0, #0]
   df3fe:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
   df402:	f3c3 1382 	ubfx	r3, r3, #6, #3
   df406:	3b01      	subs	r3, #1
   df408:	2b03      	cmp	r3, #3
   df40a:	bf9c      	itt	ls
   df40c:	4a16      	ldrls	r2, [pc, #88]	; (df468 <mbedtls_ssl_get_max_frag_len+0x6c>)
   df40e:	f832 3013 	ldrhls.w	r3, [r2, r3, lsl #1]

    /* Check if a smaller max length was negotiated */
    if( ssl->session_out != NULL &&
   df412:	6a42      	ldr	r2, [r0, #36]	; 0x24
 *    } MaxFragmentLength;
 * and we add 0 -> extension unused
 */
static unsigned int ssl_mfl_code_to_length( int mfl )
{
    switch( mfl )
   df414:	bf88      	it	hi
   df416:	f44f 5300 	movhi.w	r3, #8192	; 0x2000
     * Assume mfl_code is correct since it was checked when set
     */
    max_len = ssl_mfl_code_to_length( ssl->conf->mfl_code );

    /* Check if a smaller max length was negotiated */
    if( ssl->session_out != NULL &&
   df41a:	b182      	cbz	r2, df43e <mbedtls_ssl_get_max_frag_len+0x42>
   df41c:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
   df420:	3a01      	subs	r2, #1
   df422:	2a03      	cmp	r2, #3
   df424:	d806      	bhi.n	df434 <mbedtls_ssl_get_max_frag_len+0x38>
   df426:	4910      	ldr	r1, [pc, #64]	; (df468 <mbedtls_ssl_get_max_frag_len+0x6c>)
   df428:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
   df42c:	4293      	cmp	r3, r2
   df42e:	bf28      	it	cs
   df430:	4613      	movcs	r3, r2
   df432:	e004      	b.n	df43e <mbedtls_ssl_get_max_frag_len+0x42>
   df434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   df438:	bf28      	it	cs
   df43a:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
    {
        max_len = ssl_mfl_code_to_length( ssl->session_out->mfl_code );
    }

    /* During a handshake, use the value being negotiated */
    if( ssl->session_negotiate != NULL &&
   df43e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   df440:	b182      	cbz	r2, df464 <mbedtls_ssl_get_max_frag_len+0x68>
   df442:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
   df446:	3a01      	subs	r2, #1
   df448:	2a03      	cmp	r2, #3
   df44a:	d806      	bhi.n	df45a <mbedtls_ssl_get_max_frag_len+0x5e>
   df44c:	4906      	ldr	r1, [pc, #24]	; (df468 <mbedtls_ssl_get_max_frag_len+0x6c>)
   df44e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
   df452:	4293      	cmp	r3, r2
   df454:	bf28      	it	cs
   df456:	4613      	movcs	r3, r2
   df458:	e004      	b.n	df464 <mbedtls_ssl_get_max_frag_len+0x68>
   df45a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   df45e:	bf28      	it	cs
   df460:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
    {
        max_len = ssl_mfl_code_to_length( ssl->session_negotiate->mfl_code );
    }

    return( max_len );
}
   df464:	4618      	mov	r0, r3
   df466:	4770      	bx	lr
   df468:	000e9f52 	.word	0x000e9f52

000df46c <mbedtls_ssl_get_max_out_record_payload>:
            ssl->mtu : ssl->handshake->mtu );
}
#endif /* MBEDTLS_SSL_PROTO_DTLS */

int mbedtls_ssl_get_max_out_record_payload( const mbedtls_ssl_context *ssl )
{
   df46c:	b508      	push	{r3, lr}
    !defined(MBEDTLS_SSL_PROTO_DTLS)
    (void) ssl;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    const size_t mfl = mbedtls_ssl_get_max_frag_len( ssl );
   df46e:	f7ff ffc5 	bl	df3fc <mbedtls_ssl_get_max_frag_len>
    !defined(MBEDTLS_SSL_PROTO_DTLS)
    ((void) ssl);
#endif

    return( (int) max_len );
}
   df472:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
   df476:	bf28      	it	cs
   df478:	f44f 5000 	movcs.w	r0, #8192	; 0x2000
   df47c:	bd08      	pop	{r3, pc}
	...

000df480 <mbedtls_ssl_handshake_step>:
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;

    if( ssl == NULL || ssl->conf == NULL )
   df480:	b138      	cbz	r0, df492 <mbedtls_ssl_handshake_step+0x12>
   df482:	6803      	ldr	r3, [r0, #0]
   df484:	b12b      	cbz	r3, df492 <mbedtls_ssl_handshake_step+0x12>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   df486:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   df48a:	07db      	lsls	r3, r3, #31
   df48c:	d403      	bmi.n	df496 <mbedtls_ssl_handshake_step+0x16>
        ret = mbedtls_ssl_handshake_client_step( ssl );
   df48e:	f004 bdbd 	b.w	e400c <mbedtls_ssl_handshake_client_step>
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   df492:	4802      	ldr	r0, [pc, #8]	; (df49c <mbedtls_ssl_handshake_step+0x1c>)
   df494:	4770      	bx	lr
/*
 * Perform a single step of the SSL handshake
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
   df496:	4802      	ldr	r0, [pc, #8]	; (df4a0 <mbedtls_ssl_handshake_step+0x20>)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
        ret = mbedtls_ssl_handshake_server_step( ssl );
#endif

    return( ret );
}
   df498:	4770      	bx	lr
   df49a:	bf00      	nop
   df49c:	ffff8f00 	.word	0xffff8f00
   df4a0:	ffff8f80 	.word	0xffff8f80

000df4a4 <mbedtls_ssl_handshake>:

/*
 * Perform the SSL handshake
 */
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
   df4a4:	b510      	push	{r4, lr}
    int ret = 0;

    if( ssl == NULL || ssl->conf == NULL )
   df4a6:	4604      	mov	r4, r0
   df4a8:	b150      	cbz	r0, df4c0 <mbedtls_ssl_handshake+0x1c>
   df4aa:	6803      	ldr	r3, [r0, #0]
   df4ac:	b143      	cbz	r3, df4c0 <mbedtls_ssl_handshake+0x1c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> handshake" ) );

    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
   df4ae:	6863      	ldr	r3, [r4, #4]
   df4b0:	2b10      	cmp	r3, #16
   df4b2:	d007      	beq.n	df4c4 <mbedtls_ssl_handshake+0x20>
    {
        ret = mbedtls_ssl_handshake_step( ssl );
   df4b4:	4620      	mov	r0, r4
   df4b6:	f7ff ffe3 	bl	df480 <mbedtls_ssl_handshake_step>

        if( ret != 0 )
   df4ba:	2800      	cmp	r0, #0
   df4bc:	d0f7      	beq.n	df4ae <mbedtls_ssl_handshake+0xa>
   df4be:	bd10      	pop	{r4, pc}
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
    int ret = 0;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   df4c0:	4801      	ldr	r0, [pc, #4]	; (df4c8 <mbedtls_ssl_handshake+0x24>)
   df4c2:	bd10      	pop	{r4, pc}
   df4c4:	2000      	movs	r0, #0
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= handshake" ) );

    return( ret );
}
   df4c6:	bd10      	pop	{r4, pc}
   df4c8:	ffff8f00 	.word	0xffff8f00

000df4cc <mbedtls_ssl_read>:

/*
 * Receive application data decrypted from the SSL layer
 */
int mbedtls_ssl_read( mbedtls_ssl_context *ssl, unsigned char *buf, size_t len )
{
   df4cc:	b570      	push	{r4, r5, r6, lr}
   df4ce:	460e      	mov	r6, r1
   df4d0:	4614      	mov	r4, r2
    int ret;
    size_t n;

    if( ssl == NULL || ssl->conf == NULL )
   df4d2:	4605      	mov	r5, r0
   df4d4:	2800      	cmp	r0, #0
   df4d6:	d05f      	beq.n	df598 <mbedtls_ssl_read+0xcc>
   df4d8:	6803      	ldr	r3, [r0, #0]
   df4da:	2b00      	cmp	r3, #0
   df4dc:	d05c      	beq.n	df598 <mbedtls_ssl_read+0xcc>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        return( ret );
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
   df4de:	6843      	ldr	r3, [r0, #4]
   df4e0:	2b10      	cmp	r3, #16
   df4e2:	d006      	beq.n	df4f2 <mbedtls_ssl_read+0x26>
    {
        ret = mbedtls_ssl_handshake( ssl );
   df4e4:	f7ff ffde 	bl	df4a4 <mbedtls_ssl_handshake>
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
   df4e8:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
   df4ec:	d001      	beq.n	df4f2 <mbedtls_ssl_read+0x26>
   df4ee:	2800      	cmp	r0, #0
   df4f0:	d16a      	bne.n	df5c8 <mbedtls_ssl_read+0xfc>
            return( ret );
        }
    }

    /* Loop as long as no application data record is available */
    while( ssl->in_offt == NULL )
   df4f2:	6ea9      	ldr	r1, [r5, #104]	; 0x68
   df4f4:	2900      	cmp	r1, #0
   df4f6:	d13a      	bne.n	df56e <mbedtls_ssl_read+0xa2>
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
   df4f8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   df4fa:	b11b      	cbz	r3, df504 <mbedtls_ssl_read+0x38>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
   df4fc:	6c68      	ldr	r0, [r5, #68]	; 0x44
   df4fe:	4798      	blx	r3

    /* Loop as long as no application data record is available */
    while( ssl->in_offt == NULL )
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
   df500:	3001      	adds	r0, #1
   df502:	d04f      	beq.n	df5a4 <mbedtls_ssl_read+0xd8>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
        {
            ssl_set_timer( ssl, ssl->conf->read_timeout );
        }

        if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   df504:	2101      	movs	r1, #1
   df506:	4628      	mov	r0, r5
   df508:	f7ff fc6c 	bl	dede4 <mbedtls_ssl_read_record>
   df50c:	b120      	cbz	r0, df518 <mbedtls_ssl_read+0x4c>
        {
            if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
   df50e:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
   df512:	d159      	bne.n	df5c8 <mbedtls_ssl_read+0xfc>
                return( 0 );
   df514:	2000      	movs	r0, #0
   df516:	bd70      	pop	{r4, r5, r6, pc}

            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
            return( ret );
        }

        if( ssl->in_msglen  == 0 &&
   df518:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   df51a:	b95b      	cbnz	r3, df534 <mbedtls_ssl_read+0x68>
   df51c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   df51e:	2b17      	cmp	r3, #23
   df520:	d108      	bne.n	df534 <mbedtls_ssl_read+0x68>
            ssl->in_msgtype == MBEDTLS_SSL_MSG_APPLICATION_DATA )
        {
            /*
             * OpenSSL sends empty messages to randomize the IV
             */
            if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   df522:	2101      	movs	r1, #1
   df524:	4628      	mov	r0, r5
   df526:	f7ff fc5d 	bl	dede4 <mbedtls_ssl_read_record>
   df52a:	b118      	cbz	r0, df534 <mbedtls_ssl_read+0x68>
            {
                if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
   df52c:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
   df530:	d0f0      	beq.n	df514 <mbedtls_ssl_read+0x48>
   df532:	bd70      	pop	{r4, r5, r6, pc}
                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
                return( ret );
            }
        }

        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   df534:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   df536:	2b16      	cmp	r3, #22
   df538:	d10b      	bne.n	df552 <mbedtls_ssl_read+0x86>
             * - For server-side, expect CLIENT_HELLO.
             * - Fail (TLS) or silently drop record (DTLS) in other cases.
             */

#if defined(MBEDTLS_SSL_CLI_C)
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
   df53a:	682b      	ldr	r3, [r5, #0]
   df53c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   df540:	07db      	lsls	r3, r3, #31
   df542:	d435      	bmi.n	df5b0 <mbedtls_ssl_read+0xe4>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
   df544:	6e6b      	ldr	r3, [r5, #100]	; 0x64
             * - For server-side, expect CLIENT_HELLO.
             * - Fail (TLS) or silently drop record (DTLS) in other cases.
             */

#if defined(MBEDTLS_SSL_CLI_C)
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
   df546:	781b      	ldrb	r3, [r3, #0]
   df548:	bb53      	cbnz	r3, df5a0 <mbedtls_ssl_read+0xd4>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
   df54a:	6fab      	ldr	r3, [r5, #120]	; 0x78
   df54c:	2b04      	cmp	r3, #4
   df54e:	d127      	bne.n	df5a0 <mbedtls_ssl_read+0xd4>
   df550:	e02e      	b.n	df5b0 <mbedtls_ssl_read+0xe4>
            }
        }
#endif /* MBEDTLS_SSL_RENEGOTIATION */

        /* Fatal and closure alerts handled by mbedtls_ssl_read_record() */
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
   df552:	2b15      	cmp	r3, #21
   df554:	d022      	beq.n	df59c <mbedtls_ssl_read+0xd0>
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
            return( MBEDTLS_ERR_SSL_WANT_READ );
        }

        if( ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
   df556:	2b17      	cmp	r3, #23
   df558:	d122      	bne.n	df5a0 <mbedtls_ssl_read+0xd4>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
        }

        ssl->in_offt = ssl->in_msg;
   df55a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   df55c:	66ab      	str	r3, [r5, #104]	; 0x68

        /* We're going to return something now, cancel timer,
         * except if handshake (renegotiation) is in progress */
        if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
   df55e:	686b      	ldr	r3, [r5, #4]
   df560:	2b10      	cmp	r3, #16
   df562:	d1c6      	bne.n	df4f2 <mbedtls_ssl_read+0x26>
            ssl_set_timer( ssl, 0 );
   df564:	2100      	movs	r1, #0
   df566:	4628      	mov	r0, r5
   df568:	f7fe fea7 	bl	de2ba <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>
   df56c:	e7c1      	b.n	df4f2 <mbedtls_ssl_read+0x26>
        }
#endif /* MBEDTLS_SSL_SRV_C && MBEDTLS_SSL_RENEGOTIATION */
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    }

    n = ( len < ssl->in_msglen )
   df56e:	6f28      	ldr	r0, [r5, #112]	; 0x70
   df570:	4284      	cmp	r4, r0
   df572:	bf28      	it	cs
   df574:	4604      	movcs	r4, r0
        ? len : ssl->in_msglen;

    memcpy( buf, ssl->in_offt, n );
   df576:	4622      	mov	r2, r4
   df578:	4630      	mov	r0, r6
   df57a:	f007 fce8 	bl	e6f4e <memcpy>
    ssl->in_msglen -= n;
   df57e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   df580:	1b1b      	subs	r3, r3, r4
   df582:	672b      	str	r3, [r5, #112]	; 0x70

    if( ssl->in_msglen == 0 )
   df584:	b91b      	cbnz	r3, df58e <mbedtls_ssl_read+0xc2>
    {
        /* all bytes consumed */
        ssl->in_offt = NULL;
   df586:	66ab      	str	r3, [r5, #104]	; 0x68
        ssl->keep_current_message = 0;
   df588:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
   df58c:	e002      	b.n	df594 <mbedtls_ssl_read+0xc8>
    }
    else
    {
        /* more data available */
        ssl->in_offt += n;
   df58e:	6eab      	ldr	r3, [r5, #104]	; 0x68
   df590:	4423      	add	r3, r4
   df592:	66ab      	str	r3, [r5, #104]	; 0x68
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );

    return( (int) n );
   df594:	4620      	mov	r0, r4
   df596:	bd70      	pop	{r4, r5, r6, pc}
{
    int ret;
    size_t n;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   df598:	480c      	ldr	r0, [pc, #48]	; (df5cc <mbedtls_ssl_read+0x100>)
   df59a:	bd70      	pop	{r4, r5, r6, pc}

        /* Fatal and closure alerts handled by mbedtls_ssl_read_record() */
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
            return( MBEDTLS_ERR_SSL_WANT_READ );
   df59c:	480c      	ldr	r0, [pc, #48]	; (df5d0 <mbedtls_ssl_read+0x104>)
   df59e:	bd70      	pop	{r4, r5, r6, pc}
                if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
                {
                    continue;
                }
#endif
                return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   df5a0:	480c      	ldr	r0, [pc, #48]	; (df5d4 <mbedtls_ssl_read+0x108>)
   df5a2:	bd70      	pop	{r4, r5, r6, pc}
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
            ssl->f_get_timer( ssl->p_timer ) == -1 )
        {
            ssl_set_timer( ssl, ssl->conf->read_timeout );
   df5a4:	682b      	ldr	r3, [r5, #0]
   df5a6:	4628      	mov	r0, r5
   df5a8:	6f59      	ldr	r1, [r3, #116]	; 0x74
   df5aa:	f7fe fe86 	bl	de2ba <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>
   df5ae:	e7a9      	b.n	df504 <mbedtls_ssl_read+0x38>
                }
                else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
                if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
   df5b0:	68eb      	ldr	r3, [r5, #12]
   df5b2:	2b00      	cmp	r3, #0
   df5b4:	dd07      	ble.n	df5c6 <mbedtls_ssl_read+0xfa>
                {
                    if( ( ret = mbedtls_ssl_send_alert_message( ssl,
   df5b6:	2264      	movs	r2, #100	; 0x64
   df5b8:	2101      	movs	r1, #1
   df5ba:	4628      	mov	r0, r5
   df5bc:	f7ff fbf6 	bl	dedac <mbedtls_ssl_send_alert_message>
   df5c0:	2800      	cmp	r0, #0
   df5c2:	d096      	beq.n	df4f2 <mbedtls_ssl_read+0x26>
   df5c4:	bd70      	pop	{r4, r5, r6, pc}
                else
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 ||
          MBEDTLS_SSL_PROTO_TLS1_2 */
                {
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   df5c6:	4804      	ldr	r0, [pc, #16]	; (df5d8 <mbedtls_ssl_read+0x10c>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );

    return( (int) n );
}
   df5c8:	bd70      	pop	{r4, r5, r6, pc}
   df5ca:	bf00      	nop
   df5cc:	ffff8f00 	.word	0xffff8f00
   df5d0:	ffff9700 	.word	0xffff9700
   df5d4:	ffff8900 	.word	0xffff8900
   df5d8:	ffff9400 	.word	0xffff9400

000df5dc <mbedtls_ssl_write>:

/*
 * Write application data (public-facing wrapper)
 */
int mbedtls_ssl_write( mbedtls_ssl_context *ssl, const unsigned char *buf, size_t len )
{
   df5dc:	b570      	push	{r4, r5, r6, lr}
   df5de:	460e      	mov	r6, r1
   df5e0:	4615      	mov	r5, r2
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );

    if( ssl == NULL || ssl->conf == NULL )
   df5e2:	4604      	mov	r4, r0
   df5e4:	b368      	cbz	r0, df642 <mbedtls_ssl_write+0x66>
   df5e6:	6803      	ldr	r3, [r0, #0]
   df5e8:	b35b      	cbz	r3, df642 <mbedtls_ssl_write+0x66>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        return( ret );
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
   df5ea:	6843      	ldr	r3, [r0, #4]
   df5ec:	2b10      	cmp	r3, #16
   df5ee:	d105      	bne.n	df5fc <mbedtls_ssl_write+0x20>
 * corresponding return code is 0 on success.
 */
static int ssl_write_real( mbedtls_ssl_context *ssl,
                           const unsigned char *buf, size_t len )
{
    int ret = mbedtls_ssl_get_max_out_record_payload( ssl );
   df5f0:	4620      	mov	r0, r4
   df5f2:	f7ff ff3b 	bl	df46c <mbedtls_ssl_get_max_out_record_payload>
    const size_t max_len = (size_t) ret;

    if( ret < 0 )
   df5f6:	2800      	cmp	r0, #0
   df5f8:	da05      	bge.n	df606 <mbedtls_ssl_write+0x2a>
   df5fa:	bd70      	pop	{r4, r5, r6, pc}
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
    {
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
   df5fc:	f7ff ff52 	bl	df4a4 <mbedtls_ssl_handshake>
   df600:	2800      	cmp	r0, #0
   df602:	d0f5      	beq.n	df5f0 <mbedtls_ssl_write+0x14>
   df604:	bd70      	pop	{r4, r5, r6, pc}
        else
#endif
            len = max_len;
    }

    if( ssl->out_left != 0 )
   df606:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   df60a:	4285      	cmp	r5, r0
   df60c:	bf28      	it	cs
   df60e:	4605      	movcs	r5, r0
   df610:	b12b      	cbz	r3, df61e <mbedtls_ssl_write+0x42>
         * The user has previously tried to send the data and
         * MBEDTLS_ERR_SSL_WANT_WRITE or the message was only partially
         * written. In this case, we expect the high-level write function
         * (e.g. mbedtls_ssl_write()) to be called with the same parameters
         */
        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
   df612:	4620      	mov	r0, r4
   df614:	f7ff fa18 	bl	dea48 <mbedtls_ssl_flush_output>
   df618:	b9a0      	cbnz	r0, df644 <mbedtls_ssl_write+0x68>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
            return( ret );
        }
    }

    return( (int) len );
   df61a:	4628      	mov	r0, r5
   df61c:	bd70      	pop	{r4, r5, r6, pc}
         * The user is trying to send a message the first time, so we need to
         * copy the data into the internal buffers and setup the data structure
         * to keep track of partial writes
         */
        ssl->out_msglen  = len;
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
   df61e:	2317      	movs	r3, #23
        memcpy( ssl->out_msg, buf, len );
   df620:	4631      	mov	r1, r6
        /*
         * The user is trying to send a message the first time, so we need to
         * copy the data into the internal buffers and setup the data structure
         * to keep track of partial writes
         */
        ssl->out_msglen  = len;
   df622:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
   df626:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        memcpy( ssl->out_msg, buf, len );
   df62a:	462a      	mov	r2, r5
   df62c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   df630:	f007 fc8d 	bl	e6f4e <memcpy>

        if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
   df634:	2101      	movs	r1, #1
   df636:	4620      	mov	r0, r4
   df638:	f7ff fa34 	bl	deaa4 <mbedtls_ssl_write_record>
   df63c:	2800      	cmp	r0, #0
   df63e:	d0ec      	beq.n	df61a <mbedtls_ssl_write+0x3e>
   df640:	bd70      	pop	{r4, r5, r6, pc}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   df642:	4801      	ldr	r0, [pc, #4]	; (df648 <mbedtls_ssl_write+0x6c>)
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write" ) );

    return( ret );
}
   df644:	bd70      	pop	{r4, r5, r6, pc}
   df646:	bf00      	nop
   df648:	ffff8f00 	.word	0xffff8f00

000df64c <mbedtls_ssl_transform_free>:

    return( 0 );
}

void mbedtls_ssl_transform_free( mbedtls_ssl_transform *transform )
{
   df64c:	b510      	push	{r4, lr}
    if( transform == NULL )
   df64e:	4604      	mov	r4, r0
   df650:	b1a0      	cbz	r0, df67c <mbedtls_ssl_transform_free+0x30>
#if defined(MBEDTLS_ZLIB_SUPPORT)
    deflateEnd( &transform->ctx_deflate );
    inflateEnd( &transform->ctx_inflate );
#endif

    mbedtls_cipher_free( &transform->cipher_ctx_enc );
   df652:	3050      	adds	r0, #80	; 0x50
   df654:	f7f5 feca 	bl	d53ec <mbedtls_cipher_free>
    mbedtls_cipher_free( &transform->cipher_ctx_dec );
   df658:	f104 0088 	add.w	r0, r4, #136	; 0x88
   df65c:	f7f5 fec6 	bl	d53ec <mbedtls_cipher_free>

    mbedtls_md_free( &transform->md_ctx_enc );
   df660:	f104 0038 	add.w	r0, r4, #56	; 0x38
   df664:	f7fc fdf1 	bl	dc24a <mbedtls_md_free>
    mbedtls_md_free( &transform->md_ctx_dec );
   df668:	f104 0044 	add.w	r0, r4, #68	; 0x44
   df66c:	f7fc fded 	bl	dc24a <mbedtls_md_free>

    mbedtls_platform_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
   df670:	4620      	mov	r0, r4
   df672:	21c0      	movs	r1, #192	; 0xc0
}
   df674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_cipher_free( &transform->cipher_ctx_dec );

    mbedtls_md_free( &transform->md_ctx_enc );
    mbedtls_md_free( &transform->md_ctx_dec );

    mbedtls_platform_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
   df678:	f7fa bf32 	b.w	da4e0 <mbedtls_platform_zeroize>
   df67c:	bd10      	pop	{r4, pc}

000df67e <mbedtls_ssl_handshake_free>:
}

#endif /* MBEDTLS_SSL_PROTO_DTLS */

void mbedtls_ssl_handshake_free( mbedtls_ssl_context *ssl )
{
   df67e:	b538      	push	{r3, r4, r5, lr}
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
   df680:	6b04      	ldr	r4, [r0, #48]	; 0x30

    if( handshake == NULL )
   df682:	b344      	cbz	r4, df6d6 <mbedtls_ssl_handshake_free+0x58>
    mbedtls_md5_free(    &handshake->fin_md5  );
    mbedtls_sha1_free(   &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_free(   &handshake->fin_sha256    );
   df684:	f504 70ac 	add.w	r0, r4, #344	; 0x158
   df688:	f7f5 f818 	bl	d46bc <mbedtls_sha256_free>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_free(   &handshake->fin_sha512    );
   df68c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   df690:	f002 ffc0 	bl	e2614 <mbedtls_sha512_free>

#if defined(MBEDTLS_DHM_C)
    mbedtls_dhm_free( &handshake->dhm_ctx );
#endif
#if defined(MBEDTLS_ECDH_C)
    mbedtls_ecdh_free( &handshake->ecdh_ctx );
   df694:	1d20      	adds	r0, r4, #4
   df696:	f7f5 fde3 	bl	d5260 <mbedtls_ecdh_free>
#endif

#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
    /* explicit void pointer cast for buggy MS compiler */
    mbedtls_free( (void *) handshake->curves );
   df69a:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
   df69e:	f005 fe65 	bl	e536c <free>
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    if( handshake->psk != NULL )
   df6a2:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   df6a6:	b138      	cbz	r0, df6b8 <mbedtls_ssl_handshake_free+0x3a>
    {
        mbedtls_platform_zeroize( handshake->psk, handshake->psk_len );
   df6a8:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   df6ac:	f7fa ff18 	bl	da4e0 <mbedtls_platform_zeroize>
        mbedtls_free( handshake->psk );
   df6b0:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   df6b4:	f005 fe5a 	bl	e536c <free>
    defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    /*
     * Free only the linked list wrapper, not the keys themselves
     * since the belong to the SNI callback
     */
    if( handshake->sni_key_cert != NULL )
   df6b8:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
   df6bc:	b930      	cbnz	r0, df6cc <mbedtls_ssl_handshake_free+0x4e>
    ssl_flight_free( handshake->flight );
    ssl_buffering_free( ssl );
#endif

    mbedtls_platform_zeroize( handshake,
                              sizeof( mbedtls_ssl_handshake_params ) );
   df6be:	4620      	mov	r0, r4
   df6c0:	f44f 7158 	mov.w	r1, #864	; 0x360
}
   df6c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssl_flight_free( handshake->flight );
    ssl_buffering_free( ssl );
#endif

    mbedtls_platform_zeroize( handshake,
                              sizeof( mbedtls_ssl_handshake_params ) );
   df6c8:	f7fa bf0a 	b.w	da4e0 <mbedtls_platform_zeroize>
    {
        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;

        while( cur != NULL )
        {
            next = cur->next;
   df6cc:	6885      	ldr	r5, [r0, #8]
            mbedtls_free( cur );
   df6ce:	f005 fe4d 	bl	e536c <free>
     */
    if( handshake->sni_key_cert != NULL )
    {
        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;

        while( cur != NULL )
   df6d2:	4628      	mov	r0, r5
   df6d4:	e7f2      	b.n	df6bc <mbedtls_ssl_handshake_free+0x3e>
   df6d6:	bd38      	pop	{r3, r4, r5, pc}

000df6d8 <mbedtls_ssl_session_free>:
    mbedtls_platform_zeroize( handshake,
                              sizeof( mbedtls_ssl_handshake_params ) );
}

void mbedtls_ssl_session_free( mbedtls_ssl_session *session )
{
   df6d8:	b510      	push	{r4, lr}
    if( session == NULL )
   df6da:	4604      	mov	r4, r0
   df6dc:	b178      	cbz	r0, df6fe <mbedtls_ssl_session_free+0x26>
        return;

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( session->peer_cert != NULL )
   df6de:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   df6e0:	b120      	cbz	r0, df6ec <mbedtls_ssl_session_free+0x14>
    {
        mbedtls_x509_crt_free( session->peer_cert );
   df6e2:	f7fe f898 	bl	dd816 <mbedtls_x509_crt_free>
        mbedtls_free( session->peer_cert );
   df6e6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   df6e8:	f005 fe40 	bl	e536c <free>
    }
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
   df6ec:	6e60      	ldr	r0, [r4, #100]	; 0x64
   df6ee:	f005 fe3d 	bl	e536c <free>
#endif

    mbedtls_platform_zeroize( session, sizeof( mbedtls_ssl_session ) );
   df6f2:	4620      	mov	r0, r4
   df6f4:	2174      	movs	r1, #116	; 0x74
}
   df6f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
#endif

    mbedtls_platform_zeroize( session, sizeof( mbedtls_ssl_session ) );
   df6fa:	f7fa bef1 	b.w	da4e0 <mbedtls_platform_zeroize>
   df6fe:	bd10      	pop	{r4, pc}

000df700 <mbedtls_ssl_handshake_wrapup>:

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
}

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
   df700:	b538      	push	{r3, r4, r5, lr}
   df702:	4604      	mov	r4, r0
    int resume = ssl->handshake->resume;
   df704:	6b03      	ldr	r3, [r0, #48]	; 0x30
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
   df706:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
}

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
    int resume = ssl->handshake->resume;
   df708:	f8d3 5348 	ldr.w	r5, [r3, #840]	; 0x348
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
   df70c:	b120      	cbz	r0, df718 <mbedtls_ssl_handshake_wrapup+0x18>
        /* RFC 7366 3.1: keep the EtM state */
        ssl->session_negotiate->encrypt_then_mac =
                  ssl->session->encrypt_then_mac;
#endif

        mbedtls_ssl_session_free( ssl->session );
   df70e:	f7ff ffe3 	bl	df6d8 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
   df712:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   df714:	f005 fe2a 	bl	e536c <free>
    }
    ssl->session = ssl->session_negotiate;
   df718:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ssl->session_negotiate = NULL;

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
   df71a:	6822      	ldr	r2, [r4, #0]
#endif

        mbedtls_ssl_session_free( ssl->session );
        mbedtls_free( ssl->session );
    }
    ssl->session = ssl->session_negotiate;
   df71c:	62a1      	str	r1, [r4, #40]	; 0x28
    ssl->session_negotiate = NULL;
   df71e:	2300      	movs	r3, #0
   df720:	62e3      	str	r3, [r4, #44]	; 0x2c

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
   df722:	6a53      	ldr	r3, [r2, #36]	; 0x24
   df724:	b123      	cbz	r3, df730 <mbedtls_ssl_handshake_wrapup+0x30>
   df726:	6888      	ldr	r0, [r1, #8]
   df728:	b110      	cbz	r0, df730 <mbedtls_ssl_handshake_wrapup+0x30>
        ssl->session->id_len != 0 &&
   df72a:	b90d      	cbnz	r5, df730 <mbedtls_ssl_handshake_wrapup+0x30>
        resume == 0 )
    {
        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
   df72c:	6a90      	ldr	r0, [r2, #40]	; 0x28
   df72e:	4798      	blx	r3
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup: final free" ) );

    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl );
   df730:	4620      	mov	r0, r4
   df732:	f7ff ffa4 	bl	df67e <mbedtls_ssl_handshake_free>
    mbedtls_free( ssl->handshake );
   df736:	6b20      	ldr	r0, [r4, #48]	; 0x30
   df738:	f005 fe18 	bl	e536c <free>
    ssl->handshake = NULL;

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
   df73c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl );
    mbedtls_free( ssl->handshake );
    ssl->handshake = NULL;
   df73e:	2300      	movs	r3, #0
   df740:	6323      	str	r3, [r4, #48]	; 0x30

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
   df742:	b120      	cbz	r0, df74e <mbedtls_ssl_handshake_wrapup+0x4e>
    {
        mbedtls_ssl_transform_free( ssl->transform );
   df744:	f7ff ff82 	bl	df64c <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
   df748:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   df74a:	f005 fe0f 	bl	e536c <free>
    }
    ssl->transform = ssl->transform_negotiate;
   df74e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   df750:	63e3      	str	r3, [r4, #60]	; 0x3c
    ssl->transform_negotiate = NULL;
   df752:	2300      	movs	r3, #0
   df754:	6423      	str	r3, [r4, #64]	; 0x40
    }
    else
#endif
        ssl_handshake_wrapup_free_hs_transform( ssl );

    ssl->state++;
   df756:	6863      	ldr	r3, [r4, #4]
   df758:	3301      	adds	r3, #1
   df75a:	6063      	str	r3, [r4, #4]
   df75c:	bd38      	pop	{r3, r4, r5, pc}
	...

000df760 <_ZL18ssl_handshake_initP19mbedtls_ssl_context>:
{
    memset( session, 0, sizeof(mbedtls_ssl_session) );
}

static int ssl_handshake_init( mbedtls_ssl_context *ssl )
{
   df760:	b538      	push	{r3, r4, r5, lr}
   df762:	4604      	mov	r4, r0
    /* Clear old handshake information if present */
    if( ssl->transform_negotiate )
   df764:	6c00      	ldr	r0, [r0, #64]	; 0x40
   df766:	b108      	cbz	r0, df76c <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xc>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
   df768:	f7ff ff70 	bl	df64c <mbedtls_ssl_transform_free>
    if( ssl->session_negotiate )
   df76c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   df76e:	b108      	cbz	r0, df774 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x14>
        mbedtls_ssl_session_free( ssl->session_negotiate );
   df770:	f7ff ffb2 	bl	df6d8 <mbedtls_ssl_session_free>
    if( ssl->handshake )
   df774:	6b23      	ldr	r3, [r4, #48]	; 0x30
   df776:	b113      	cbz	r3, df77e <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x1e>
        mbedtls_ssl_handshake_free( ssl );
   df778:	4620      	mov	r0, r4
   df77a:	f7ff ff80 	bl	df67e <mbedtls_ssl_handshake_free>

    /*
     * Either the pointers are now NULL or cleared properly and can be freed.
     * Now allocate missing structures.
     */
    if( ssl->transform_negotiate == NULL )
   df77e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   df780:	b923      	cbnz	r3, df78c <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x2c>
    {
        ssl->transform_negotiate = (mbedtls_ssl_transform *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
   df782:	21c0      	movs	r1, #192	; 0xc0
   df784:	2001      	movs	r0, #1
   df786:	f007 fac5 	bl	e6d14 <calloc>
   df78a:	6420      	str	r0, [r4, #64]	; 0x40
    }

    if( ssl->session_negotiate == NULL )
   df78c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   df78e:	b923      	cbnz	r3, df79a <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x3a>
    {
        ssl->session_negotiate = (mbedtls_ssl_session *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
   df790:	2174      	movs	r1, #116	; 0x74
   df792:	2001      	movs	r0, #1
   df794:	f007 fabe 	bl	e6d14 <calloc>
   df798:	62e0      	str	r0, [r4, #44]	; 0x2c
    }

    if( ssl->handshake == NULL )
   df79a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   df79c:	b92b      	cbnz	r3, df7aa <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x4a>
    {
        ssl->handshake = (mbedtls_ssl_handshake_params *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
   df79e:	f44f 7158 	mov.w	r1, #864	; 0x360
   df7a2:	2001      	movs	r0, #1
   df7a4:	f007 fab6 	bl	e6d14 <calloc>
   df7a8:	6320      	str	r0, [r4, #48]	; 0x30
    }

    /* All pointers should exist and can be directly freed without issue */
    if( ssl->handshake == NULL ||
   df7aa:	6b20      	ldr	r0, [r4, #48]	; 0x30
   df7ac:	b118      	cbz	r0, df7b6 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x56>
   df7ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
   df7b0:	b10b      	cbz	r3, df7b6 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x56>
        ssl->transform_negotiate == NULL ||
        ssl->session_negotiate == NULL )
   df7b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        ssl->handshake = (mbedtls_ssl_handshake_params *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
    }

    /* All pointers should exist and can be directly freed without issue */
    if( ssl->handshake == NULL ||
        ssl->transform_negotiate == NULL ||
   df7b4:	b96b      	cbnz	r3, df7d2 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x72>
        ssl->session_negotiate == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc() of ssl sub-contexts failed" ) );

        mbedtls_free( ssl->handshake );
   df7b6:	f005 fdd9 	bl	e536c <free>
        mbedtls_free( ssl->transform_negotiate );
   df7ba:	6c20      	ldr	r0, [r4, #64]	; 0x40
   df7bc:	f005 fdd6 	bl	e536c <free>
        mbedtls_free( ssl->session_negotiate );
   df7c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   df7c2:	f005 fdd3 	bl	e536c <free>

        ssl->handshake = NULL;
   df7c6:	2300      	movs	r3, #0
   df7c8:	6323      	str	r3, [r4, #48]	; 0x30
        ssl->transform_negotiate = NULL;
   df7ca:	6423      	str	r3, [r4, #64]	; 0x40
        ssl->session_negotiate = NULL;
   df7cc:	62e3      	str	r3, [r4, #44]	; 0x2c

        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   df7ce:	4821      	ldr	r0, [pc, #132]	; (df854 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xf4>)
   df7d0:	bd38      	pop	{r3, r4, r5, pc}
    }

    /* Initialize structures */
    mbedtls_ssl_session_init( ssl->session_negotiate );
   df7d2:	4618      	mov	r0, r3
   df7d4:	f7ff fda0 	bl	df318 <mbedtls_ssl_session_init>
    ssl_transform_init( ssl->transform_negotiate );
   df7d8:	6c25      	ldr	r5, [r4, #64]	; 0x40
#endif
}

static void ssl_transform_init( mbedtls_ssl_transform *transform )
{
    memset( transform, 0, sizeof(mbedtls_ssl_transform) );
   df7da:	22c0      	movs	r2, #192	; 0xc0
   df7dc:	2100      	movs	r1, #0
   df7de:	4628      	mov	r0, r5
   df7e0:	f007 fbdb 	bl	e6f9a <memset>

    mbedtls_cipher_init( &transform->cipher_ctx_enc );
   df7e4:	f105 0050 	add.w	r0, r5, #80	; 0x50
   df7e8:	f7f5 fdfc 	bl	d53e4 <mbedtls_cipher_init>
    mbedtls_cipher_init( &transform->cipher_ctx_dec );
   df7ec:	f105 0088 	add.w	r0, r5, #136	; 0x88
   df7f0:	f7f5 fdf8 	bl	d53e4 <mbedtls_cipher_init>

    mbedtls_md_init( &transform->md_ctx_enc );
   df7f4:	f105 0038 	add.w	r0, r5, #56	; 0x38
   df7f8:	f7fc fd22 	bl	dc240 <mbedtls_md_init>
    mbedtls_md_init( &transform->md_ctx_dec );
   df7fc:	f105 0044 	add.w	r0, r5, #68	; 0x44
   df800:	f7fc fd1e 	bl	dc240 <mbedtls_md_init>
    }

    /* Initialize structures */
    mbedtls_ssl_session_init( ssl->session_negotiate );
    ssl_transform_init( ssl->transform_negotiate );
    ssl_handshake_params_init( ssl->handshake );
   df804:	6b24      	ldr	r4, [r4, #48]	; 0x30
    return( 0 );
}

static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
{
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
   df806:	f44f 7258 	mov.w	r2, #864	; 0x360
     mbedtls_md5_starts_ret( &handshake->fin_md5  );
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
   df80a:	f504 75ac 	add.w	r5, r4, #344	; 0x158
    return( 0 );
}

static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
{
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
   df80e:	2100      	movs	r1, #0
   df810:	4620      	mov	r0, r4
   df812:	f007 fbc2 	bl	e6f9a <memset>
     mbedtls_md5_starts_ret( &handshake->fin_md5  );
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
   df816:	4628      	mov	r0, r5
   df818:	f7f4 ff4c 	bl	d46b4 <mbedtls_sha256_init>
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
   df81c:	2100      	movs	r1, #0
   df81e:	4628      	mov	r0, r5
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_init(   &handshake->fin_sha512    );
   df820:	f504 75e4 	add.w	r5, r4, #456	; 0x1c8
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
   df824:	f7f4 ff54 	bl	d46d0 <mbedtls_sha256_starts_ret>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_init(   &handshake->fin_sha512    );
   df828:	4628      	mov	r0, r5
   df82a:	f002 feef 	bl	e260c <mbedtls_sha512_init>
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
   df82e:	2101      	movs	r1, #1
   df830:	4628      	mov	r0, r5
   df832:	f002 fef9 	bl	e2628 <mbedtls_sha512_starts_ret>

/* Allow exactly one hash algorithm for each signature. */
void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
                                          mbedtls_md_type_t md_alg )
{
    set->rsa   = md_alg;
   df836:	2500      	movs	r5, #0
    mbedtls_sha512_init(   &handshake->fin_sha512    );
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    handshake->update_checksum = ssl_update_checksum_start;
   df838:	4b07      	ldr	r3, [pc, #28]	; (df858 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xf8>)
   df83a:	f8c4 32a0 	str.w	r3, [r4, #672]	; 0x2a0

#if defined(MBEDTLS_DHM_C)
    mbedtls_dhm_init( &handshake->dhm_ctx );
#endif
#if defined(MBEDTLS_ECDH_C)
    mbedtls_ecdh_init( &handshake->ecdh_ctx );
   df83e:	1d20      	adds	r0, r4, #4

/* Allow exactly one hash algorithm for each signature. */
void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
                                          mbedtls_md_type_t md_alg )
{
    set->rsa   = md_alg;
   df840:	7025      	strb	r5, [r4, #0]
    set->ecdsa = md_alg;
   df842:	7065      	strb	r5, [r4, #1]

#if defined(MBEDTLS_DHM_C)
    mbedtls_dhm_init( &handshake->dhm_ctx );
#endif
#if defined(MBEDTLS_ECDH_C)
    mbedtls_ecdh_init( &handshake->ecdh_ctx );
   df844:	f7f5 fce8 	bl	d5218 <mbedtls_ecdh_init>
#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
    mbedtls_x509_crt_restart_init( &handshake->ecrs_ctx );
#endif

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
   df848:	2303      	movs	r3, #3
   df84a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148

        ssl_set_timer( ssl, 0 );
    }
#endif

    return( 0 );
   df84e:	4628      	mov	r0, r5
}
   df850:	bd38      	pop	{r3, r4, r5, pc}
   df852:	bf00      	nop
   df854:	ffff8100 	.word	0xffff8100
   df858:	000de5dd 	.word	0x000de5dd

000df85c <mbedtls_ssl_setup>:
    ssl_update_in_pointers ( ssl, NULL /* no transform enabled */ );
}

int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
   df85c:	b538      	push	{r3, r4, r5, lr}
    /*
     * Prepare base structures
     */

    /* Set to NULL in case of an error condition */
    ssl->out_buf = NULL;
   df85e:	2300      	movs	r3, #0
int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
    int ret;

    ssl->conf = conf;
   df860:	6001      	str	r1, [r0, #0]
    ssl_update_in_pointers ( ssl, NULL /* no transform enabled */ );
}

int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
   df862:	4604      	mov	r4, r0
    /*
     * Prepare base structures
     */

    /* Set to NULL in case of an error condition */
    ssl->out_buf = NULL;
   df864:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

    ssl->in_buf = (unsigned char *)mbedtls_calloc( 1, MBEDTLS_SSL_IN_BUFFER_LEN );
   df868:	f242 012d 	movw	r1, #8237	; 0x202d
   df86c:	2001      	movs	r0, #1
   df86e:	f007 fa51 	bl	e6d14 <calloc>
   df872:	6520      	str	r0, [r4, #80]	; 0x50
    if( ssl->in_buf == NULL )
   df874:	b908      	cbnz	r0, df87a <mbedtls_ssl_setup+0x1e>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", MBEDTLS_SSL_IN_BUFFER_LEN) );
        ret = MBEDTLS_ERR_SSL_ALLOC_FAILED;
   df876:	4d18      	ldr	r5, [pc, #96]	; (df8d8 <mbedtls_ssl_setup+0x7c>)
   df878:	e010      	b.n	df89c <mbedtls_ssl_setup+0x40>
        goto error;
    }

    ssl->out_buf = (unsigned char *)mbedtls_calloc( 1, MBEDTLS_SSL_OUT_BUFFER_LEN );
   df87a:	f242 012d 	movw	r1, #8237	; 0x202d
   df87e:	2001      	movs	r0, #1
   df880:	f007 fa48 	bl	e6d14 <calloc>
   df884:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if( ssl->out_buf == NULL )
   df888:	2800      	cmp	r0, #0
   df88a:	d0f4      	beq.n	df876 <mbedtls_ssl_setup+0x1a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", MBEDTLS_SSL_OUT_BUFFER_LEN) );
        ret = MBEDTLS_ERR_SSL_ALLOC_FAILED;
        goto error;
    }

    ssl_reset_in_out_pointers( ssl );
   df88c:	4620      	mov	r0, r4
   df88e:	f7fe feb7 	bl	de600 <_ZL25ssl_reset_in_out_pointersP19mbedtls_ssl_context>

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
   df892:	4620      	mov	r0, r4
   df894:	f7ff ff64 	bl	df760 <_ZL18ssl_handshake_initP19mbedtls_ssl_context>
   df898:	4605      	mov	r5, r0
   df89a:	b1d0      	cbz	r0, df8d2 <mbedtls_ssl_setup+0x76>
        goto error;

    return( 0 );

error:
    mbedtls_free( ssl->in_buf );
   df89c:	6d20      	ldr	r0, [r4, #80]	; 0x50
   df89e:	f005 fd65 	bl	e536c <free>
    mbedtls_free( ssl->out_buf );
   df8a2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   df8a6:	f005 fd61 	bl	e536c <free>

    ssl->conf = NULL;
   df8aa:	2300      	movs	r3, #0
   df8ac:	6023      	str	r3, [r4, #0]

    ssl->in_buf = NULL;
   df8ae:	6523      	str	r3, [r4, #80]	; 0x50
    ssl->out_buf = NULL;
   df8b0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

    ssl->in_hdr = NULL;
   df8b4:	65a3      	str	r3, [r4, #88]	; 0x58
    ssl->in_ctr = NULL;
   df8b6:	6563      	str	r3, [r4, #84]	; 0x54
    ssl->in_len = NULL;
   df8b8:	65e3      	str	r3, [r4, #92]	; 0x5c
    ssl->in_iv = NULL;
   df8ba:	6623      	str	r3, [r4, #96]	; 0x60
    ssl->in_msg = NULL;
   df8bc:	6663      	str	r3, [r4, #100]	; 0x64

    ssl->out_hdr = NULL;
   df8be:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    ssl->out_ctr = NULL;
   df8c2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    ssl->out_len = NULL;
   df8c6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    ssl->out_iv = NULL;
   df8ca:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    ssl->out_msg = NULL;
   df8ce:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98

    return( ret );
}
   df8d2:	4628      	mov	r0, r5
   df8d4:	bd38      	pop	{r3, r4, r5, pc}
   df8d6:	bf00      	nop
   df8d8:	ffff8100 	.word	0xffff8100

000df8dc <mbedtls_ssl_free>:

/*
 * Free an SSL context
 */
void mbedtls_ssl_free( mbedtls_ssl_context *ssl )
{
   df8dc:	b538      	push	{r3, r4, r5, lr}
    if( ssl == NULL )
   df8de:	4604      	mov	r4, r0
   df8e0:	2800      	cmp	r0, #0
   df8e2:	d049      	beq.n	df978 <mbedtls_ssl_free+0x9c>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> free" ) );

    if( ssl->out_buf != NULL )
   df8e4:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   df8e8:	b138      	cbz	r0, df8fa <mbedtls_ssl_free+0x1e>
    {
        mbedtls_platform_zeroize( ssl->out_buf, MBEDTLS_SSL_OUT_BUFFER_LEN );
   df8ea:	f242 012d 	movw	r1, #8237	; 0x202d
   df8ee:	f7fa fdf7 	bl	da4e0 <mbedtls_platform_zeroize>
        mbedtls_free( ssl->out_buf );
   df8f2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   df8f6:	f005 fd39 	bl	e536c <free>
    }

    if( ssl->in_buf != NULL )
   df8fa:	6d20      	ldr	r0, [r4, #80]	; 0x50
   df8fc:	b130      	cbz	r0, df90c <mbedtls_ssl_free+0x30>
    {
        mbedtls_platform_zeroize( ssl->in_buf, MBEDTLS_SSL_IN_BUFFER_LEN );
   df8fe:	f242 012d 	movw	r1, #8237	; 0x202d
   df902:	f7fa fded 	bl	da4e0 <mbedtls_platform_zeroize>
        mbedtls_free( ssl->in_buf );
   df906:	6d20      	ldr	r0, [r4, #80]	; 0x50
   df908:	f005 fd30 	bl	e536c <free>
        mbedtls_platform_zeroize( ssl->compress_buf, MBEDTLS_SSL_COMPRESS_BUFFER_LEN );
        mbedtls_free( ssl->compress_buf );
    }
#endif

    if( ssl->transform )
   df90c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   df90e:	b120      	cbz	r0, df91a <mbedtls_ssl_free+0x3e>
    {
        mbedtls_ssl_transform_free( ssl->transform );
   df910:	f7ff fe9c 	bl	df64c <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
   df914:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   df916:	f005 fd29 	bl	e536c <free>
    }

    if( ssl->handshake )
   df91a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   df91c:	b18b      	cbz	r3, df942 <mbedtls_ssl_free+0x66>
    {
        mbedtls_ssl_handshake_free( ssl );
   df91e:	4620      	mov	r0, r4
   df920:	f7ff fead 	bl	df67e <mbedtls_ssl_handshake_free>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
   df924:	6c20      	ldr	r0, [r4, #64]	; 0x40
   df926:	f7ff fe91 	bl	df64c <mbedtls_ssl_transform_free>
        mbedtls_ssl_session_free( ssl->session_negotiate );
   df92a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   df92c:	f7ff fed4 	bl	df6d8 <mbedtls_ssl_session_free>

        mbedtls_free( ssl->handshake );
   df930:	6b20      	ldr	r0, [r4, #48]	; 0x30
   df932:	f005 fd1b 	bl	e536c <free>
        mbedtls_free( ssl->transform_negotiate );
   df936:	6c20      	ldr	r0, [r4, #64]	; 0x40
   df938:	f005 fd18 	bl	e536c <free>
        mbedtls_free( ssl->session_negotiate );
   df93c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   df93e:	f005 fd15 	bl	e536c <free>
    }

    if( ssl->session )
   df942:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   df944:	b120      	cbz	r0, df950 <mbedtls_ssl_free+0x74>
    {
        mbedtls_ssl_session_free( ssl->session );
   df946:	f7ff fec7 	bl	df6d8 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
   df94a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   df94c:	f005 fd0e 	bl	e536c <free>
    }

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( ssl->hostname != NULL )
   df950:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
   df954:	b155      	cbz	r5, df96c <mbedtls_ssl_free+0x90>
    {
        mbedtls_platform_zeroize( ssl->hostname, strlen( ssl->hostname ) );
   df956:	4628      	mov	r0, r5
   df958:	f007 fb70 	bl	e703c <strlen>
   df95c:	4601      	mov	r1, r0
   df95e:	4628      	mov	r0, r5
   df960:	f7fa fdbe 	bl	da4e0 <mbedtls_platform_zeroize>
        mbedtls_free( ssl->hostname );
   df964:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   df968:	f005 fd00 	bl	e536c <free>
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );

    /* Actually clear after last debug message */
    mbedtls_platform_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
   df96c:	4620      	mov	r0, r4
   df96e:	21bc      	movs	r1, #188	; 0xbc
}
   df970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );

    /* Actually clear after last debug message */
    mbedtls_platform_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
   df974:	f7fa bdb4 	b.w	da4e0 <mbedtls_platform_zeroize>
   df978:	bd38      	pop	{r3, r4, r5, pc}

000df97a <mbedtls_ssl_config_init>:
/*
 * Initialze mbedtls_ssl_config
 */
void mbedtls_ssl_config_init( mbedtls_ssl_config *conf )
{
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
   df97a:	2280      	movs	r2, #128	; 0x80
   df97c:	2100      	movs	r1, #0
   df97e:	f007 bb0c 	b.w	e6f9a <memset>
	...

000df984 <mbedtls_ssl_config_defaults>:
/*
 * Load default in mbedtls_ssl_config
 */
int mbedtls_ssl_config_defaults( mbedtls_ssl_config *conf,
                                 int endpoint, int transport, int preset )
{
   df984:	b510      	push	{r4, lr}
   df986:	4604      	mov	r4, r0
/*
 * SSL set accessors
 */
void mbedtls_ssl_conf_endpoint( mbedtls_ssl_config *conf, int endpoint )
{
    conf->endpoint   = endpoint;
   df988:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
   df98c:	f361 0000 	bfi	r0, r1, #0, #1
}

void mbedtls_ssl_conf_transport( mbedtls_ssl_config *conf, int transport )
{
    conf->transport = transport;
   df990:	f362 0041 	bfi	r0, r2, #1, #1
   df994:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c

    /*
     * Things that are common to all presets
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
   df998:	b951      	cbnz	r1, df9b0 <mbedtls_ssl_config_defaults+0x2c>
    {
        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
   df99a:	2102      	movs	r1, #2
   df99c:	b2c2      	uxtb	r2, r0
   df99e:	f361 0283 	bfi	r2, r1, #2, #2
   df9a2:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
        conf->session_tickets = MBEDTLS_SSL_SESSION_TICKETS_ENABLED;
   df9a6:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
   df9aa:	430a      	orrs	r2, r1
   df9ac:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
#endif

    /*
     * Preset-specific defaults
     */
    switch( preset )
   df9b0:	2b02      	cmp	r3, #2
   df9b2:	f04f 0303 	mov.w	r3, #3
    {
        /*
         * NSA Suite B
         */
        case MBEDTLS_SSL_PRESET_SUITEB:
            conf->min_major_ver = MBEDTLS_SSL_MAJOR_VERSION_3;
   df9b6:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
            conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_3; /* TLS 1.2 */
   df9ba:	f884 307b 	strb.w	r3, [r4, #123]	; 0x7b
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
   df9be:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
   df9c2:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
#endif

    /*
     * Preset-specific defaults
     */
    switch( preset )
   df9c6:	d10b      	bne.n	df9e0 <mbedtls_ssl_config_defaults+0x5c>

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   ssl_preset_suiteb_ciphersuites;
   df9c8:	4b0d      	ldr	r3, [pc, #52]	; (dfa00 <mbedtls_ssl_config_defaults+0x7c>)
   df9ca:	60e3      	str	r3, [r4, #12]
   df9cc:	60a3      	str	r3, [r4, #8]
   df9ce:	6063      	str	r3, [r4, #4]
   df9d0:	6023      	str	r3, [r4, #0]

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
   df9d2:	4b0c      	ldr	r3, [pc, #48]	; (dfa04 <mbedtls_ssl_config_defaults+0x80>)
   df9d4:	64e3      	str	r3, [r4, #76]	; 0x4c
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_suiteb_hashes;
   df9d6:	4b0c      	ldr	r3, [pc, #48]	; (dfa08 <mbedtls_ssl_config_defaults+0x84>)
   df9d8:	65e3      	str	r3, [r4, #92]	; 0x5c
#endif

#if defined(MBEDTLS_ECP_C)
            conf->curve_list = ssl_preset_suiteb_curves;
   df9da:	4b0c      	ldr	r3, [pc, #48]	; (dfa0c <mbedtls_ssl_config_defaults+0x88>)
   df9dc:	6623      	str	r3, [r4, #96]	; 0x60
#endif
            break;
   df9de:	e00c      	b.n	df9fa <mbedtls_ssl_config_defaults+0x76>

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
   df9e0:	f003 ff62 	bl	e38a8 <mbedtls_ssl_list_ciphersuites>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
   df9e4:	4b0a      	ldr	r3, [pc, #40]	; (dfa10 <mbedtls_ssl_config_defaults+0x8c>)
   df9e6:	64e3      	str	r3, [r4, #76]	; 0x4c
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_default_hashes;
   df9e8:	4b0a      	ldr	r3, [pc, #40]	; (dfa14 <mbedtls_ssl_config_defaults+0x90>)

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
   df9ea:	60e0      	str	r0, [r4, #12]
   df9ec:	60a0      	str	r0, [r4, #8]
   df9ee:	6060      	str	r0, [r4, #4]
   df9f0:	6020      	str	r0, [r4, #0]
#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_default_hashes;
   df9f2:	65e3      	str	r3, [r4, #92]	; 0x5c
#endif

#if defined(MBEDTLS_ECP_C)
            conf->curve_list = mbedtls_ecp_grp_id_list();
   df9f4:	f7f8 fb5c 	bl	d80b0 <mbedtls_ecp_grp_id_list>
   df9f8:	6620      	str	r0, [r4, #96]	; 0x60
            conf->dhm_min_bitlen = 1024;
#endif
    }

    return( 0 );
}
   df9fa:	2000      	movs	r0, #0
   df9fc:	bd10      	pop	{r4, pc}
   df9fe:	bf00      	nop
   dfa00:	2003aef4 	.word	0x2003aef4
   dfa04:	000e9ebc 	.word	0x000e9ebc
   dfa08:	2003af1c 	.word	0x2003af1c
   dfa0c:	2003af18 	.word	0x2003af18
   dfa10:	000e97b4 	.word	0x000e97b4
   dfa14:	2003af00 	.word	0x2003af00

000dfa18 <mbedtls_ssl_config_free>:

/*
 * Free mbedtls_ssl_config
 */
void mbedtls_ssl_config_free( mbedtls_ssl_config *conf )
{
   dfa18:	b538      	push	{r3, r4, r5, lr}
   dfa1a:	4604      	mov	r4, r0
    mbedtls_mpi_free( &conf->dhm_P );
    mbedtls_mpi_free( &conf->dhm_G );
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    if( conf->psk != NULL )
   dfa1c:	6e40      	ldr	r0, [r0, #100]	; 0x64
   dfa1e:	b140      	cbz	r0, dfa32 <mbedtls_ssl_config_free+0x1a>
    {
        mbedtls_platform_zeroize( conf->psk, conf->psk_len );
   dfa20:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   dfa22:	f7fa fd5d 	bl	da4e0 <mbedtls_platform_zeroize>
        mbedtls_free( conf->psk );
   dfa26:	6e60      	ldr	r0, [r4, #100]	; 0x64
   dfa28:	f005 fca0 	bl	e536c <free>
        conf->psk = NULL;
   dfa2c:	2300      	movs	r3, #0
   dfa2e:	6663      	str	r3, [r4, #100]	; 0x64
        conf->psk_len = 0;
   dfa30:	66a3      	str	r3, [r4, #104]	; 0x68
    }

    if( conf->psk_identity != NULL )
   dfa32:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   dfa34:	b140      	cbz	r0, dfa48 <mbedtls_ssl_config_free+0x30>
    {
        mbedtls_platform_zeroize( conf->psk_identity, conf->psk_identity_len );
   dfa36:	6f21      	ldr	r1, [r4, #112]	; 0x70
   dfa38:	f7fa fd52 	bl	da4e0 <mbedtls_platform_zeroize>
        mbedtls_free( conf->psk_identity );
   dfa3c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   dfa3e:	f005 fc95 	bl	e536c <free>
        conf->psk_identity = NULL;
   dfa42:	2300      	movs	r3, #0
   dfa44:	66e3      	str	r3, [r4, #108]	; 0x6c
        conf->psk_identity_len = 0;
   dfa46:	6723      	str	r3, [r4, #112]	; 0x70
    }
#endif

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
   dfa48:	6d20      	ldr	r0, [r4, #80]	; 0x50
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static void ssl_key_cert_free( mbedtls_ssl_key_cert *key_cert )
{
    mbedtls_ssl_key_cert *cur = key_cert, *next;

    while( cur != NULL )
   dfa4a:	b120      	cbz	r0, dfa56 <mbedtls_ssl_config_free+0x3e>
    {
        next = cur->next;
   dfa4c:	6885      	ldr	r5, [r0, #8]
        mbedtls_free( cur );
   dfa4e:	f005 fc8d 	bl	e536c <free>
        cur = next;
   dfa52:	4628      	mov	r0, r5
   dfa54:	e7f9      	b.n	dfa4a <mbedtls_ssl_config_free+0x32>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
#endif

    mbedtls_platform_zeroize( conf, sizeof( mbedtls_ssl_config ) );
   dfa56:	4620      	mov	r0, r4
   dfa58:	2180      	movs	r1, #128	; 0x80
}
   dfa5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
#endif

    mbedtls_platform_zeroize( conf, sizeof( mbedtls_ssl_config ) );
   dfa5e:	f7fa bd3f 	b.w	da4e0 <mbedtls_platform_zeroize>

000dfa62 <mbedtls_ssl_sig_from_pk>:
    ( defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C) )
/*
 * Convert between MBEDTLS_PK_XXX and SSL_SIG_XXX
 */
unsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk )
{
   dfa62:	b510      	push	{r4, lr}
#if defined(MBEDTLS_RSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
   dfa64:	2101      	movs	r1, #1
    ( defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C) )
/*
 * Convert between MBEDTLS_PK_XXX and SSL_SIG_XXX
 */
unsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk )
{
   dfa66:	4604      	mov	r4, r0
#if defined(MBEDTLS_RSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
   dfa68:	f7fe fb2e 	bl	de0c8 <mbedtls_pk_can_do>
   dfa6c:	b940      	cbnz	r0, dfa80 <mbedtls_ssl_sig_from_pk+0x1e>
        return( MBEDTLS_SSL_SIG_RSA );
#endif
#if defined(MBEDTLS_ECDSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
   dfa6e:	2104      	movs	r1, #4
   dfa70:	4620      	mov	r0, r4
   dfa72:	f7fe fb29 	bl	de0c8 <mbedtls_pk_can_do>
   dfa76:	2800      	cmp	r0, #0
        return( MBEDTLS_SSL_SIG_ECDSA );
#endif
    return( MBEDTLS_SSL_SIG_ANON );
   dfa78:	bf14      	ite	ne
   dfa7a:	2003      	movne	r0, #3
   dfa7c:	2000      	moveq	r0, #0
   dfa7e:	bd10      	pop	{r4, pc}
 */
unsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk )
{
#if defined(MBEDTLS_RSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
        return( MBEDTLS_SSL_SIG_RSA );
   dfa80:	2001      	movs	r0, #1
#if defined(MBEDTLS_ECDSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
        return( MBEDTLS_SSL_SIG_ECDSA );
#endif
    return( MBEDTLS_SSL_SIG_ANON );
}
   dfa82:	bd10      	pop	{r4, pc}

000dfa84 <mbedtls_ssl_pk_alg_from_sig>:
    }
}

mbedtls_pk_type_t mbedtls_ssl_pk_alg_from_sig( unsigned char sig )
{
    switch( sig )
   dfa84:	2801      	cmp	r0, #1
   dfa86:	d003      	beq.n	dfa90 <mbedtls_ssl_pk_alg_from_sig+0xc>
   dfa88:	2803      	cmp	r0, #3
#if defined(MBEDTLS_ECDSA_C)
        case MBEDTLS_SSL_SIG_ECDSA:
            return( MBEDTLS_PK_ECDSA );
#endif
        default:
            return( MBEDTLS_PK_NONE );
   dfa8a:	bf0c      	ite	eq
   dfa8c:	2004      	moveq	r0, #4
   dfa8e:	2000      	movne	r0, #0
    }
}
   dfa90:	4770      	bx	lr
	...

000dfa94 <mbedtls_ssl_md_alg_from_hash>:

/*
 * Convert from MBEDTLS_SSL_HASH_XXX to MBEDTLS_MD_XXX
 */
mbedtls_md_type_t mbedtls_ssl_md_alg_from_hash( unsigned char hash )
{
   dfa94:	3802      	subs	r0, #2
   dfa96:	b2c0      	uxtb	r0, r0
   dfa98:	2804      	cmp	r0, #4
   dfa9a:	bf9a      	itte	ls
   dfa9c:	4b01      	ldrls	r3, [pc, #4]	; (dfaa4 <mbedtls_ssl_md_alg_from_hash+0x10>)
   dfa9e:	5c18      	ldrbls	r0, [r3, r0]
   dfaa0:	2000      	movhi	r0, #0
            return( MBEDTLS_MD_SHA512 );
#endif
        default:
            return( MBEDTLS_MD_NONE );
    }
}
   dfaa2:	4770      	bx	lr
   dfaa4:	000e9ee8 	.word	0x000e9ee8

000dfaa8 <mbedtls_ssl_hash_from_md_alg>:

/*
 * Convert from MBEDTLS_MD_XXX to MBEDTLS_SSL_HASH_XXX
 */
unsigned char mbedtls_ssl_hash_from_md_alg( int md )
{
   dfaa8:	3804      	subs	r0, #4
   dfaaa:	2804      	cmp	r0, #4
   dfaac:	bf9a      	itte	ls
   dfaae:	4b02      	ldrls	r3, [pc, #8]	; (dfab8 <mbedtls_ssl_hash_from_md_alg+0x10>)
   dfab0:	5c18      	ldrbls	r0, [r3, r0]
    switch( md )
   dfab2:	2000      	movhi	r0, #0
            return( MBEDTLS_SSL_HASH_SHA512 );
#endif
        default:
            return( MBEDTLS_SSL_HASH_NONE );
    }
}
   dfab4:	4770      	bx	lr
   dfab6:	bf00      	nop
   dfab8:	000e9f5a 	.word	0x000e9f5a

000dfabc <mbedtls_ssl_check_curve>:
 */
int mbedtls_ssl_check_curve( const mbedtls_ssl_context *ssl, mbedtls_ecp_group_id grp_id )
{
    const mbedtls_ecp_group_id *gid;

    if( ssl->conf->curve_list == NULL )
   dfabc:	6803      	ldr	r3, [r0, #0]
   dfabe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   dfac0:	b13b      	cbz	r3, dfad2 <mbedtls_ssl_check_curve+0x16>
   dfac2:	3b01      	subs	r3, #1
        return( -1 );

    for( gid = ssl->conf->curve_list; *gid != MBEDTLS_ECP_DP_NONE; gid++ )
   dfac4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   dfac8:	b11a      	cbz	r2, dfad2 <mbedtls_ssl_check_curve+0x16>
        if( *gid == grp_id )
   dfaca:	428a      	cmp	r2, r1
   dfacc:	d1fa      	bne.n	dfac4 <mbedtls_ssl_check_curve+0x8>
            return( 0 );
   dface:	2000      	movs	r0, #0
   dfad0:	4770      	bx	lr
int mbedtls_ssl_check_curve( const mbedtls_ssl_context *ssl, mbedtls_ecp_group_id grp_id )
{
    const mbedtls_ecp_group_id *gid;

    if( ssl->conf->curve_list == NULL )
        return( -1 );
   dfad2:	f04f 30ff 	mov.w	r0, #4294967295
    for( gid = ssl->conf->curve_list; *gid != MBEDTLS_ECP_DP_NONE; gid++ )
        if( *gid == grp_id )
            return( 0 );

    return( -1 );
}
   dfad6:	4770      	bx	lr

000dfad8 <mbedtls_ssl_check_sig_hash>:
int mbedtls_ssl_check_sig_hash( const mbedtls_ssl_context *ssl,
                                mbedtls_md_type_t md )
{
    const int *cur;

    if( ssl->conf->sig_hashes == NULL )
   dfad8:	6803      	ldr	r3, [r0, #0]
   dfada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   dfadc:	b13b      	cbz	r3, dfaee <mbedtls_ssl_check_sig_hash+0x16>
   dfade:	3b04      	subs	r3, #4
        return( -1 );

    for( cur = ssl->conf->sig_hashes; *cur != MBEDTLS_MD_NONE; cur++ )
   dfae0:	f853 2f04 	ldr.w	r2, [r3, #4]!
   dfae4:	b11a      	cbz	r2, dfaee <mbedtls_ssl_check_sig_hash+0x16>
        if( *cur == (int) md )
   dfae6:	428a      	cmp	r2, r1
   dfae8:	d1fa      	bne.n	dfae0 <mbedtls_ssl_check_sig_hash+0x8>
            return( 0 );
   dfaea:	2000      	movs	r0, #0
   dfaec:	4770      	bx	lr
                                mbedtls_md_type_t md )
{
    const int *cur;

    if( ssl->conf->sig_hashes == NULL )
        return( -1 );
   dfaee:	f04f 30ff 	mov.w	r0, #4294967295
    for( cur = ssl->conf->sig_hashes; *cur != MBEDTLS_MD_NONE; cur++ )
        if( *cur == (int) md )
            return( 0 );

    return( -1 );
}
   dfaf2:	4770      	bx	lr

000dfaf4 <mbedtls_ssl_check_cert_usage>:
    ((void) cert_endpoint);
    ((void) flags);
#endif

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
   dfaf4:	2a01      	cmp	r2, #1
#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_check_cert_usage( const mbedtls_x509_crt *cert,
                          const mbedtls_ssl_ciphersuite_t *ciphersuite,
                          int cert_endpoint,
                          uint32_t *flags )
{
   dfaf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dfaf8:	4607      	mov	r7, r0
   dfafa:	4616      	mov	r6, r2
   dfafc:	461d      	mov	r5, r3
    ((void) cert_endpoint);
    ((void) flags);
#endif

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
   dfafe:	d110      	bne.n	dfb22 <mbedtls_ssl_check_cert_usage+0x2e>
    {
        /* Server part of the key exchange */
        switch( ciphersuite->key_exchange )
   dfb00:	7a8a      	ldrb	r2, [r1, #10]
   dfb02:	2a0a      	cmp	r2, #10
   dfb04:	d80f      	bhi.n	dfb26 <mbedtls_ssl_check_cert_usage+0x32>
   dfb06:	fa06 f202 	lsl.w	r2, r6, r2
   dfb0a:	f012 0f82 	tst.w	r2, #130	; 0x82
   dfb0e:	d10c      	bne.n	dfb2a <mbedtls_ssl_check_cert_usage+0x36>
   dfb10:	f412 6fc0 	tst.w	r2, #1536	; 0x600
   dfb14:	d10b      	bne.n	dfb2e <mbedtls_ssl_check_cert_usage+0x3a>
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    int usage = 0;
   dfb16:	f012 0f1c 	tst.w	r2, #28
   dfb1a:	bf14      	ite	ne
   dfb1c:	2180      	movne	r1, #128	; 0x80
   dfb1e:	2100      	moveq	r1, #0
   dfb20:	e006      	b.n	dfb30 <mbedtls_ssl_check_cert_usage+0x3c>
        }
    }
    else
    {
        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
   dfb22:	2180      	movs	r1, #128	; 0x80
   dfb24:	e004      	b.n	dfb30 <mbedtls_ssl_check_cert_usage+0x3c>
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    int usage = 0;
   dfb26:	2100      	movs	r1, #0
   dfb28:	e002      	b.n	dfb30 <mbedtls_ssl_check_cert_usage+0x3c>
        /* Server part of the key exchange */
        switch( ciphersuite->key_exchange )
        {
            case MBEDTLS_KEY_EXCHANGE_RSA:
            case MBEDTLS_KEY_EXCHANGE_RSA_PSK:
                usage = MBEDTLS_X509_KU_KEY_ENCIPHERMENT;
   dfb2a:	2120      	movs	r1, #32
   dfb2c:	e000      	b.n	dfb30 <mbedtls_ssl_check_cert_usage+0x3c>
                usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
                break;

            case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
            case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
                usage = MBEDTLS_X509_KU_KEY_AGREEMENT;
   dfb2e:	2108      	movs	r1, #8
    {
        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
    }

    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
   dfb30:	4638      	mov	r0, r7
   dfb32:	f7fd fbd5 	bl	dd2e0 <mbedtls_x509_crt_check_key_usage>
   dfb36:	b130      	cbz	r0, dfb46 <mbedtls_ssl_check_cert_usage+0x52>
    {
        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
   dfb38:	682b      	ldr	r3, [r5, #0]
   dfb3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   dfb3e:	602b      	str	r3, [r5, #0]
        ret = -1;
   dfb40:	f04f 34ff 	mov.w	r4, #4294967295
   dfb44:	e000      	b.n	dfb48 <mbedtls_ssl_check_cert_usage+0x54>
int mbedtls_ssl_check_cert_usage( const mbedtls_x509_crt *cert,
                          const mbedtls_ssl_ciphersuite_t *ciphersuite,
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
   dfb46:	4604      	mov	r4, r0
    {
        ext_oid = MBEDTLS_OID_CLIENT_AUTH;
        ext_len = MBEDTLS_OID_SIZE( MBEDTLS_OID_CLIENT_AUTH );
    }

    if( mbedtls_x509_crt_check_extended_key_usage( cert, ext_oid, ext_len ) != 0 )
   dfb48:	4b08      	ldr	r3, [pc, #32]	; (dfb6c <mbedtls_ssl_check_cert_usage+0x78>)
   dfb4a:	4909      	ldr	r1, [pc, #36]	; (dfb70 <mbedtls_ssl_check_cert_usage+0x7c>)
   dfb4c:	2208      	movs	r2, #8
   dfb4e:	2e01      	cmp	r6, #1
   dfb50:	bf18      	it	ne
   dfb52:	4619      	movne	r1, r3
   dfb54:	4638      	mov	r0, r7
   dfb56:	f7fd fbe7 	bl	dd328 <mbedtls_x509_crt_check_extended_key_usage>
   dfb5a:	b128      	cbz	r0, dfb68 <mbedtls_ssl_check_cert_usage+0x74>
    {
        *flags |= MBEDTLS_X509_BADCERT_EXT_KEY_USAGE;
   dfb5c:	682b      	ldr	r3, [r5, #0]
   dfb5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   dfb62:	602b      	str	r3, [r5, #0]
        ret = -1;
   dfb64:	f04f 34ff 	mov.w	r4, #4294967295
    }
#endif /* MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE */

    return( ret );
}
   dfb68:	4620      	mov	r0, r4
   dfb6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dfb6c:	000e8a7e 	.word	0x000e8a7e
   dfb70:	000e8a46 	.word	0x000e8a46

000dfb74 <mbedtls_ssl_parse_certificate>:

    return( 0 );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
   dfb74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret;
    const mbedtls_ssl_ciphersuite_t * const ciphersuite_info =
          ssl->transform_negotiate->ciphersuite_info;
   dfb78:	6c03      	ldr	r3, [r0, #64]	; 0x40
   dfb7a:	f8d3 9000 	ldr.w	r9, [r3]
#endif
    void *rs_ctx = NULL;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   dfb7e:	f899 200a 	ldrb.w	r2, [r9, #10]
   dfb82:	2a0b      	cmp	r2, #11

    return( 0 );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
   dfb84:	b086      	sub	sp, #24
   dfb86:	4604      	mov	r4, r0
#endif
    void *rs_ctx = NULL;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   dfb88:	d808      	bhi.n	dfb9c <mbedtls_ssl_parse_certificate+0x28>
   dfb8a:	f44f 6316 	mov.w	r3, #2400	; 0x960
   dfb8e:	40d3      	lsrs	r3, r2
   dfb90:	f003 0301 	and.w	r3, r3, #1
   dfb94:	f083 0001 	eor.w	r0, r3, #1
   dfb98:	2b00      	cmp	r3, #0
   dfb9a:	d143      	bne.n	dfc24 <mbedtls_ssl_parse_certificate+0xb0>
#if defined(MBEDTLS_SSL_SRV_C) && defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    const int authmode = ssl->handshake->sni_authmode != MBEDTLS_SSL_VERIFY_UNSET
                       ? ssl->handshake->sni_authmode
                       : ssl->conf->authmode;
#else
    const int authmode = ssl->conf->authmode;
   dfb9c:	6823      	ldr	r3, [r4, #0]
    {
        goto crt_verify;
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   dfb9e:	2101      	movs	r1, #1
   dfba0:	4620      	mov	r0, r4
#if defined(MBEDTLS_SSL_SRV_C) && defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    const int authmode = ssl->handshake->sni_authmode != MBEDTLS_SSL_VERIFY_UNSET
                       ? ssl->handshake->sni_authmode
                       : ssl->conf->authmode;
#else
    const int authmode = ssl->conf->authmode;
   dfba2:	f893 707c 	ldrb.w	r7, [r3, #124]	; 0x7c
    {
        goto crt_verify;
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   dfba6:	f7ff f91d 	bl	dede4 <mbedtls_ssl_read_record>
#if defined(MBEDTLS_SSL_SRV_C) && defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    const int authmode = ssl->handshake->sni_authmode != MBEDTLS_SSL_VERIFY_UNSET
                       ? ssl->handshake->sni_authmode
                       : ssl->conf->authmode;
#else
    const int authmode = ssl->conf->authmode;
   dfbaa:	f3c7 0781 	ubfx	r7, r7, #2, #2
    {
        goto crt_verify;
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   dfbae:	4605      	mov	r5, r0
   dfbb0:	2800      	cmp	r0, #0
   dfbb2:	d14b      	bne.n	dfc4c <mbedtls_ssl_parse_certificate+0xd8>
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
          MBEDTLS_SSL_PROTO_TLS1_2 */
#endif /* MBEDTLS_SSL_SRV_C */

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   dfbb4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   dfbb6:	2b16      	cmp	r3, #22
   dfbb8:	d006      	beq.n	dfbc8 <mbedtls_ssl_parse_certificate+0x54>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
   dfbba:	220a      	movs	r2, #10
   dfbbc:	2102      	movs	r1, #2
   dfbbe:	4620      	mov	r0, r4
   dfbc0:	f7ff f8f4 	bl	dedac <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   dfbc4:	4884      	ldr	r0, [pc, #528]	; (dfdd8 <mbedtls_ssl_parse_certificate+0x264>)
   dfbc6:	e02d      	b.n	dfc24 <mbedtls_ssl_parse_certificate+0xb0>
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
   dfbc8:	6e62      	ldr	r2, [r4, #100]	; 0x64
   dfbca:	7813      	ldrb	r3, [r2, #0]
   dfbcc:	2b0b      	cmp	r3, #11
   dfbce:	d10b      	bne.n	dfbe8 <mbedtls_ssl_parse_certificate+0x74>
        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
   dfbd0:	6fa1      	ldr	r1, [r4, #120]	; 0x78
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
   dfbd2:	2909      	cmp	r1, #9
   dfbd4:	d908      	bls.n	dfbe8 <mbedtls_ssl_parse_certificate+0x74>
    /*
     * Same message structure as in mbedtls_ssl_write_certificate()
     */
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];

    if( ssl->in_msg[i] != 0 ||
   dfbd6:	7913      	ldrb	r3, [r2, #4]
   dfbd8:	b933      	cbnz	r3, dfbe8 <mbedtls_ssl_parse_certificate+0x74>
   dfbda:	7950      	ldrb	r0, [r2, #5]
   dfbdc:	7993      	ldrb	r3, [r2, #6]
   dfbde:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   dfbe2:	3307      	adds	r3, #7
   dfbe4:	4299      	cmp	r1, r3
   dfbe6:	d006      	beq.n	dfbf6 <mbedtls_ssl_parse_certificate+0x82>
    while( i < ssl->in_hslen )
    {
        if ( i + 3 > ssl->in_hslen ) {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                           MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   dfbe8:	2232      	movs	r2, #50	; 0x32
   dfbea:	2102      	movs	r1, #2
   dfbec:	4620      	mov	r0, r4
   dfbee:	f7ff f8dd 	bl	dedac <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
   dfbf2:	487a      	ldr	r0, [pc, #488]	; (dfddc <mbedtls_ssl_parse_certificate+0x268>)
   dfbf4:	e016      	b.n	dfc24 <mbedtls_ssl_parse_certificate+0xb0>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
    }

    /* In case we tried to reuse a session but it failed */
    if( ssl->session_negotiate->peer_cert != NULL )
   dfbf6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   dfbf8:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   dfbfa:	b128      	cbz	r0, dfc08 <mbedtls_ssl_parse_certificate+0x94>
    {
        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
   dfbfc:	f7fd fe0b 	bl	dd816 <mbedtls_x509_crt_free>
        mbedtls_free( ssl->session_negotiate->peer_cert );
   dfc00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   dfc02:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   dfc04:	f005 fbb2 	bl	e536c <free>
    }

    if( ( ssl->session_negotiate->peer_cert = (mbedtls_x509_crt *)mbedtls_calloc( 1,
   dfc08:	f44f 719a 	mov.w	r1, #308	; 0x134
   dfc0c:	2001      	movs	r0, #1
   dfc0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   dfc10:	f007 f880 	bl	e6d14 <calloc>
   dfc14:	65f0      	str	r0, [r6, #92]	; 0x5c
   dfc16:	b948      	cbnz	r0, dfc2c <mbedtls_ssl_parse_certificate+0xb8>
                    sizeof( mbedtls_x509_crt ) ) ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
                       sizeof( mbedtls_x509_crt ) ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
   dfc18:	2250      	movs	r2, #80	; 0x50
   dfc1a:	2102      	movs	r1, #2
   dfc1c:	4620      	mov	r0, r4
   dfc1e:	f7ff f8c5 	bl	dedac <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   dfc22:	486f      	ldr	r0, [pc, #444]	; (dfde0 <mbedtls_ssl_parse_certificate+0x26c>)
        {
            ret = 0;
        }
#endif

        ssl->state++;
   dfc24:	6863      	ldr	r3, [r4, #4]
   dfc26:	3301      	adds	r3, #1
   dfc28:	6063      	str	r3, [r4, #4]
        return( ret );
   dfc2a:	e0d1      	b.n	dfdd0 <mbedtls_ssl_parse_certificate+0x25c>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
   dfc2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
        switch( ret )
   dfc2e:	f8df a1b8 	ldr.w	sl, [pc, #440]	; dfde8 <mbedtls_ssl_parse_certificate+0x274>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
   dfc32:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   dfc34:	f7fd fdea 	bl	dd80c <mbedtls_x509_crt_init>

    i += 3;
   dfc38:	2607      	movs	r6, #7

    while( i < ssl->in_hslen )
   dfc3a:	f8d4 e078 	ldr.w	lr, [r4, #120]	; 0x78
   dfc3e:	45b6      	cmp	lr, r6
   dfc40:	d806      	bhi.n	dfc50 <mbedtls_ssl_parse_certificate+0xdc>
crt_verify:
    if( ssl->handshake->ecrs_enabled)
        rs_ctx = &ssl->handshake->ecrs_ctx;
#endif

    if( authmode != MBEDTLS_SSL_VERIFY_NONE )
   dfc42:	2f00      	cmp	r7, #0
   dfc44:	d136      	bne.n	dfcb4 <mbedtls_ssl_parse_certificate+0x140>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Certificate verification flags clear" ) );
        }
#endif /* MBEDTLS_DEBUG_C */
    }

    ssl->state++;
   dfc46:	6863      	ldr	r3, [r4, #4]
   dfc48:	3301      	adds	r3, #1
   dfc4a:	6063      	str	r3, [r4, #4]
   dfc4c:	4628      	mov	r0, r5
   dfc4e:	e0bf      	b.n	dfdd0 <mbedtls_ssl_parse_certificate+0x25c>

    i += 3;

    while( i < ssl->in_hslen )
    {
        if ( i + 3 > ssl->in_hslen ) {
   dfc50:	1cf1      	adds	r1, r6, #3
   dfc52:	458e      	cmp	lr, r1
   dfc54:	d3c8      	bcc.n	dfbe8 <mbedtls_ssl_parse_certificate+0x74>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                           MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }
        if( ssl->in_msg[i] != 0 )
   dfc56:	6e60      	ldr	r0, [r4, #100]	; 0x64
   dfc58:	5d83      	ldrb	r3, [r0, r6]
   dfc5a:	2b00      	cmp	r3, #0
   dfc5c:	d1c4      	bne.n	dfbe8 <mbedtls_ssl_parse_certificate+0x74>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
   dfc5e:	4406      	add	r6, r0
            | (unsigned int) ssl->in_msg[i + 2];
   dfc60:	7872      	ldrb	r2, [r6, #1]
   dfc62:	78b3      	ldrb	r3, [r6, #2]
   dfc64:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
        i += 3;

        if( n < 128 || i + n > ssl->in_hslen )
   dfc68:	2a7f      	cmp	r2, #127	; 0x7f
   dfc6a:	d9bd      	bls.n	dfbe8 <mbedtls_ssl_parse_certificate+0x74>
   dfc6c:	188e      	adds	r6, r1, r2
   dfc6e:	45b6      	cmp	lr, r6
   dfc70:	d3ba      	bcc.n	dfbe8 <mbedtls_ssl_parse_certificate+0x74>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
   dfc72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   dfc74:	4401      	add	r1, r0
   dfc76:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   dfc78:	f7fd fe2a 	bl	dd8d0 <mbedtls_x509_crt_parse_der>
                                  ssl->in_msg + i, n );
        switch( ret )
   dfc7c:	4550      	cmp	r0, sl
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
   dfc7e:	4680      	mov	r8, r0
                                  ssl->in_msg + i, n );
        switch( ret )
   dfc80:	d0db      	beq.n	dfc3a <mbedtls_ssl_parse_certificate+0xc6>
   dfc82:	dc03      	bgt.n	dfc8c <mbedtls_ssl_parse_certificate+0x118>
   dfc84:	f510 5f22 	cmn.w	r0, #10368	; 0x2880
   dfc88:	d00a      	beq.n	dfca0 <mbedtls_ssl_parse_certificate+0x12c>
   dfc8a:	e007      	b.n	dfc9c <mbedtls_ssl_parse_certificate+0x128>
   dfc8c:	f510 5f16 	cmn.w	r0, #9600	; 0x2580
   dfc90:	d002      	beq.n	dfc98 <mbedtls_ssl_parse_certificate+0x124>
   dfc92:	2800      	cmp	r0, #0
   dfc94:	d0d1      	beq.n	dfc3a <mbedtls_ssl_parse_certificate+0xc6>
   dfc96:	e001      	b.n	dfc9c <mbedtls_ssl_parse_certificate+0x128>
        case MBEDTLS_ERR_X509_ALLOC_FAILED:
            alert = MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR;
            goto crt_parse_der_failed;

        case MBEDTLS_ERR_X509_UNKNOWN_VERSION:
            alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
   dfc98:	222b      	movs	r2, #43	; 0x2b
   dfc9a:	e002      	b.n	dfca2 <mbedtls_ssl_parse_certificate+0x12e>
            goto crt_parse_der_failed;

        default:
            alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
   dfc9c:	222a      	movs	r2, #42	; 0x2a
   dfc9e:	e000      	b.n	dfca2 <mbedtls_ssl_parse_certificate+0x12e>
            /* Ignore certificate with an unknown algorithm: maybe a
               prior certificate was already trusted. */
            break;

        case MBEDTLS_ERR_X509_ALLOC_FAILED:
            alert = MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR;
   dfca0:	2250      	movs	r2, #80	; 0x50
            goto crt_parse_der_failed;

        default:
            alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
        crt_parse_der_failed:
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL, alert );
   dfca2:	2102      	movs	r1, #2
   dfca4:	4620      	mov	r0, r4
   dfca6:	f7ff f881 	bl	dedac <mbedtls_ssl_send_alert_message>
           let it decide whether to alert. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ( ret = ssl_parse_certificate_chain( ssl ) ) != 0 )
   dfcaa:	f1b8 0f00 	cmp.w	r8, #0
   dfcae:	d0c8      	beq.n	dfc42 <mbedtls_ssl_parse_certificate+0xce>
   dfcb0:	4640      	mov	r0, r8
   dfcb2:	e7b7      	b.n	dfc24 <mbedtls_ssl_parse_certificate+0xb0>
    {
        mbedtls_x509_crt *ca_chain;
        mbedtls_x509_crl *ca_crl;

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
        if( ssl->handshake->sni_ca_chain != NULL )
   dfcb4:	6b22      	ldr	r2, [r4, #48]	; 0x30
   dfcb6:	6823      	ldr	r3, [r4, #0]
   dfcb8:	f8d2 8150 	ldr.w	r8, [r2, #336]	; 0x150
   dfcbc:	f1b8 0f00 	cmp.w	r8, #0
   dfcc0:	d002      	beq.n	dfcc8 <mbedtls_ssl_parse_certificate+0x154>
        {
            ca_chain = ssl->handshake->sni_ca_chain;
            ca_crl   = ssl->handshake->sni_ca_crl;
   dfcc2:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
   dfcc6:	e002      	b.n	dfcce <mbedtls_ssl_parse_certificate+0x15a>
        }
        else
#endif
        {
            ca_chain = ssl->conf->ca_chain;
   dfcc8:	f8d3 8054 	ldr.w	r8, [r3, #84]	; 0x54
            ca_crl   = ssl->conf->ca_crl;
   dfccc:	6d9a      	ldr	r2, [r3, #88]	; 0x58

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_restartable(
                                ssl->session_negotiate->peer_cert,
   dfcce:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        }

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_restartable(
   dfcd0:	2100      	movs	r1, #0
   dfcd2:	9104      	str	r1, [sp, #16]
   dfcd4:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dfcd6:	9103      	str	r1, [sp, #12]
   dfcd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dfcda:	9102      	str	r1, [sp, #8]
   dfcdc:	f100 0160 	add.w	r1, r0, #96	; 0x60
   dfce0:	9101      	str	r1, [sp, #4]
   dfce2:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   dfce6:	9100      	str	r1, [sp, #0]
   dfce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   dfcea:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   dfcec:	4641      	mov	r1, r8
   dfcee:	f7fd fb5f 	bl	dd3b0 <mbedtls_x509_crt_verify_restartable>
         * Secondary checks: always done, but change 'ret' only if it was 0
         */

#if defined(MBEDTLS_ECP_C)
        {
            const mbedtls_pk_context *pk = &ssl->session_negotiate->peer_cert->pk;
   dfcf2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   dfcf4:	f8d3 a05c 	ldr.w	sl, [r3, #92]	; 0x5c
        }

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_restartable(
   dfcf8:	4606      	mov	r6, r0
#if defined(MBEDTLS_ECP_C)
        {
            const mbedtls_pk_context *pk = &ssl->session_negotiate->peer_cert->pk;

            /* If certificate uses an EC key, make sure the curve is OK */
            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
   dfcfa:	2102      	movs	r1, #2
   dfcfc:	f10a 00bc 	add.w	r0, sl, #188	; 0xbc
   dfd00:	f7fe f9e2 	bl	de0c8 <mbedtls_pk_can_do>
   dfd04:	b138      	cbz	r0, dfd16 <mbedtls_ssl_parse_certificate+0x1a2>
                mbedtls_ssl_check_curve( ssl, mbedtls_pk_ec( *pk )->grp.id ) != 0 )
   dfd06:	f8da 30c0 	ldr.w	r3, [sl, #192]	; 0xc0
   dfd0a:	4620      	mov	r0, r4
   dfd0c:	7819      	ldrb	r1, [r3, #0]
   dfd0e:	f7ff fed5 	bl	dfabc <mbedtls_ssl_check_curve>
#if defined(MBEDTLS_ECP_C)
        {
            const mbedtls_pk_context *pk = &ssl->session_negotiate->peer_cert->pk;

            /* If certificate uses an EC key, make sure the curve is OK */
            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
   dfd12:	2800      	cmp	r0, #0
   dfd14:	d14c      	bne.n	dfdb0 <mbedtls_ssl_parse_certificate+0x23c>
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
            }
        }
#endif /* MBEDTLS_ECP_C */

        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
   dfd16:	6823      	ldr	r3, [r4, #0]
   dfd18:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   dfd1a:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   dfd1e:	f002 0201 	and.w	r2, r2, #1
   dfd22:	f100 0360 	add.w	r3, r0, #96	; 0x60
   dfd26:	f082 0201 	eor.w	r2, r2, #1
   dfd2a:	4649      	mov	r1, r9
   dfd2c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   dfd2e:	f7ff fee1 	bl	dfaf4 <mbedtls_ssl_check_cert_usage>
   dfd32:	b100      	cbz	r0, dfd36 <mbedtls_ssl_parse_certificate+0x1c2>
                                 ciphersuite_info,
                                 ! ssl->conf->endpoint,
                                 &ssl->session_negotiate->verify_result ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
            if( ret == 0 )
   dfd34:	b19e      	cbz	r6, dfd5e <mbedtls_ssl_parse_certificate+0x1ea>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
   dfd36:	2f01      	cmp	r7, #1
   dfd38:	d106      	bne.n	dfd48 <mbedtls_ssl_parse_certificate+0x1d4>
   dfd3a:	f516 5f1c 	cmn.w	r6, #9984	; 0x2700
   dfd3e:	d082      	beq.n	dfc46 <mbedtls_ssl_parse_certificate+0xd2>
            ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
   dfd40:	f516 4ff4 	cmn.w	r6, #31232	; 0x7a00
   dfd44:	f43f af7f 	beq.w	dfc46 <mbedtls_ssl_parse_certificate+0xd2>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
   dfd48:	f1b8 0f00 	cmp.w	r8, #0
   dfd4c:	d101      	bne.n	dfd52 <mbedtls_ssl_parse_certificate+0x1de>
   dfd4e:	2f02      	cmp	r7, #2
   dfd50:	d003      	beq.n	dfd5a <mbedtls_ssl_parse_certificate+0x1e6>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
        }

        if( ret != 0 )
   dfd52:	2e00      	cmp	r6, #0
   dfd54:	f43f af77 	beq.w	dfc46 <mbedtls_ssl_parse_certificate+0xd2>
   dfd58:	e008      	b.n	dfd6c <mbedtls_ssl_parse_certificate+0x1f8>
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
   dfd5a:	4e22      	ldr	r6, [pc, #136]	; (dfde4 <mbedtls_ssl_parse_certificate+0x270>)
   dfd5c:	e006      	b.n	dfd6c <mbedtls_ssl_parse_certificate+0x1f8>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
   dfd5e:	2f01      	cmp	r7, #1
   dfd60:	f43f af71 	beq.w	dfc46 <mbedtls_ssl_parse_certificate+0xd2>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
   dfd64:	f1b8 0f00 	cmp.w	r8, #0
   dfd68:	d02c      	beq.n	dfdc4 <mbedtls_ssl_parse_certificate+0x250>
                                 ! ssl->conf->endpoint,
                                 &ssl->session_negotiate->verify_result ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
            if( ret == 0 )
                ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
   dfd6a:	4e1c      	ldr	r6, [pc, #112]	; (dfddc <mbedtls_ssl_parse_certificate+0x268>)
            uint8_t alert;

            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
   dfd6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   dfd6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   dfd70:	05df      	lsls	r7, r3, #23
   dfd72:	d40e      	bmi.n	dfd92 <mbedtls_ssl_parse_certificate+0x21e>
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
   dfd74:	075d      	lsls	r5, r3, #29
   dfd76:	d40e      	bmi.n	dfd96 <mbedtls_ssl_parse_certificate+0x222>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
   dfd78:	f413 3fdc 	tst.w	r3, #112640	; 0x1b800
   dfd7c:	d10d      	bne.n	dfd9a <mbedtls_ssl_parse_certificate+0x226>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
   dfd7e:	07d8      	lsls	r0, r3, #31
   dfd80:	d40d      	bmi.n	dfd9e <mbedtls_ssl_parse_certificate+0x22a>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
   dfd82:	0799      	lsls	r1, r3, #30
   dfd84:	d40d      	bmi.n	dfda2 <mbedtls_ssl_parse_certificate+0x22e>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
   dfd86:	f013 0f08 	tst.w	r3, #8
   dfd8a:	bf14      	ite	ne
   dfd8c:	2230      	movne	r2, #48	; 0x30
   dfd8e:	222e      	moveq	r2, #46	; 0x2e
   dfd90:	e008      	b.n	dfda4 <mbedtls_ssl_parse_certificate+0x230>

            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
   dfd92:	2231      	movs	r2, #49	; 0x31
   dfd94:	e006      	b.n	dfda4 <mbedtls_ssl_parse_certificate+0x230>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
                alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
   dfd96:	222a      	movs	r2, #42	; 0x2a
   dfd98:	e004      	b.n	dfda4 <mbedtls_ssl_parse_certificate+0x230>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
   dfd9a:	222b      	movs	r2, #43	; 0x2b
   dfd9c:	e002      	b.n	dfda4 <mbedtls_ssl_parse_certificate+0x230>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
   dfd9e:	222d      	movs	r2, #45	; 0x2d
   dfda0:	e000      	b.n	dfda4 <mbedtls_ssl_parse_certificate+0x230>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
   dfda2:	222c      	movs	r2, #44	; 0x2c
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            alert );
   dfda4:	2102      	movs	r1, #2
   dfda6:	4620      	mov	r0, r4
   dfda8:	f7ff f800 	bl	dedac <mbedtls_ssl_send_alert_message>
   dfdac:	4635      	mov	r5, r6
   dfdae:	e74a      	b.n	dfc46 <mbedtls_ssl_parse_certificate+0xd2>

            /* If certificate uses an EC key, make sure the curve is OK */
            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
                mbedtls_ssl_check_curve( ssl, mbedtls_pk_ec( *pk )->grp.id ) != 0 )
            {
                ssl->session_negotiate->verify_result |= MBEDTLS_X509_BADCERT_BAD_KEY;
   dfdb0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   dfdb2:	6e13      	ldr	r3, [r2, #96]	; 0x60
   dfdb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   dfdb8:	6613      	str	r3, [r2, #96]	; 0x60

                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (EC key curve)" ) );
                if( ret == 0 )
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
   dfdba:	4b08      	ldr	r3, [pc, #32]	; (dfddc <mbedtls_ssl_parse_certificate+0x268>)
   dfdbc:	2e00      	cmp	r6, #0
   dfdbe:	bf08      	it	eq
   dfdc0:	461e      	moveq	r6, r3
   dfdc2:	e7a8      	b.n	dfd16 <mbedtls_ssl_parse_certificate+0x1a2>
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
   dfdc4:	4b07      	ldr	r3, [pc, #28]	; (dfde4 <mbedtls_ssl_parse_certificate+0x270>)
   dfdc6:	4e05      	ldr	r6, [pc, #20]	; (dfddc <mbedtls_ssl_parse_certificate+0x268>)
   dfdc8:	2f02      	cmp	r7, #2
   dfdca:	bf08      	it	eq
   dfdcc:	461e      	moveq	r6, r3
   dfdce:	e7cd      	b.n	dfd6c <mbedtls_ssl_parse_certificate+0x1f8>
    ssl->state++;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate" ) );

    return( ret );
}
   dfdd0:	b006      	add	sp, #24
   dfdd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dfdd6:	bf00      	nop
   dfdd8:	ffff8900 	.word	0xffff8900
   dfddc:	ffff8600 	.word	0xffff8600
   dfde0:	ffff8100 	.word	0xffff8100
   dfde4:	ffff8980 	.word	0xffff8980
   dfde8:	ffffd9d2 	.word	0xffffd9d2

000dfdec <mbedtls_ssl_write_version>:
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
   dfdec:	7018      	strb	r0, [r3, #0]
        ver[1] = (unsigned char) minor;
   dfdee:	7059      	strb	r1, [r3, #1]
   dfdf0:	4770      	bx	lr

000dfdf2 <mbedtls_ssl_read_version>:
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
   dfdf2:	781a      	ldrb	r2, [r3, #0]
   dfdf4:	6002      	str	r2, [r0, #0]
        *minor = ver[1];
   dfdf6:	785b      	ldrb	r3, [r3, #1]
   dfdf8:	600b      	str	r3, [r1, #0]
   dfdfa:	4770      	bx	lr

000dfdfc <mbedtls_ssl_get_key_exchange_md_tls1_2>:
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
int mbedtls_ssl_get_key_exchange_md_tls1_2( mbedtls_ssl_context *ssl,
                                            unsigned char *hash, size_t *hashlen,
                                            unsigned char *data, size_t data_len,
                                            mbedtls_md_type_t md_alg )
{
   dfdfc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   dfe00:	4605      	mov	r5, r0
    int ret = 0;
    mbedtls_md_context_t ctx;
    const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
   dfe02:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
int mbedtls_ssl_get_key_exchange_md_tls1_2( mbedtls_ssl_context *ssl,
                                            unsigned char *hash, size_t *hashlen,
                                            unsigned char *data, size_t data_len,
                                            mbedtls_md_type_t md_alg )
{
   dfe06:	4690      	mov	r8, r2
   dfe08:	460e      	mov	r6, r1
   dfe0a:	461f      	mov	r7, r3
    int ret = 0;
    mbedtls_md_context_t ctx;
    const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
   dfe0c:	f7fc fa0c 	bl	dc228 <mbedtls_md_info_from_type>
   dfe10:	4604      	mov	r4, r0
    *hashlen = mbedtls_md_get_size( md_info );
   dfe12:	f7fc fb41 	bl	dc498 <mbedtls_md_get_size>
   dfe16:	f8c8 0000 	str.w	r0, [r8]

    mbedtls_md_init( &ctx );
   dfe1a:	a801      	add	r0, sp, #4
   dfe1c:	f7fc fa10 	bl	dc240 <mbedtls_md_init>
     *     opaque client_random[32];
     *     opaque server_random[32];
     *     ServerDHParams params;
     * };
     */
    if( ( ret = mbedtls_md_setup( &ctx, md_info, 0 ) ) != 0 )
   dfe20:	4621      	mov	r1, r4
   dfe22:	2200      	movs	r2, #0
   dfe24:	a801      	add	r0, sp, #4
   dfe26:	f7fc fa2b 	bl	dc280 <mbedtls_md_setup>
   dfe2a:	4604      	mov	r4, r0
   dfe2c:	b9c8      	cbnz	r0, dfe62 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x66>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
        goto exit;
    }
    if( ( ret = mbedtls_md_starts( &ctx ) ) != 0 )
   dfe2e:	a801      	add	r0, sp, #4
   dfe30:	f7fc fa48 	bl	dc2c4 <mbedtls_md_starts>
   dfe34:	4604      	mov	r4, r0
   dfe36:	b9a0      	cbnz	r0, dfe62 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x66>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_starts", ret );
        goto exit;
    }
    if( ( ret = mbedtls_md_update( &ctx, ssl->handshake->randbytes, 64 ) ) != 0 )
   dfe38:	6b29      	ldr	r1, [r5, #48]	; 0x30
   dfe3a:	2240      	movs	r2, #64	; 0x40
   dfe3c:	f501 712d 	add.w	r1, r1, #692	; 0x2b4
   dfe40:	a801      	add	r0, sp, #4
   dfe42:	f7fc fa49 	bl	dc2d8 <mbedtls_md_update>
   dfe46:	4604      	mov	r4, r0
   dfe48:	b958      	cbnz	r0, dfe62 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x66>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_update", ret );
        goto exit;
    }
    if( ( ret = mbedtls_md_update( &ctx, data, data_len ) ) != 0 )
   dfe4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dfe4c:	4639      	mov	r1, r7
   dfe4e:	a801      	add	r0, sp, #4
   dfe50:	f7fc fa42 	bl	dc2d8 <mbedtls_md_update>
   dfe54:	4604      	mov	r4, r0
   dfe56:	b920      	cbnz	r0, dfe62 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x66>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_update", ret );
        goto exit;
    }
    if( ( ret = mbedtls_md_finish( &ctx, hash ) ) != 0 )
   dfe58:	4631      	mov	r1, r6
   dfe5a:	a801      	add	r0, sp, #4
   dfe5c:	f7fc fa46 	bl	dc2ec <mbedtls_md_finish>
   dfe60:	4604      	mov	r4, r0
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_finish", ret );
        goto exit;
    }

exit:
    mbedtls_md_free( &ctx );
   dfe62:	a801      	add	r0, sp, #4
   dfe64:	f7fc f9f1 	bl	dc24a <mbedtls_md_free>

    if( ret != 0 )
   dfe68:	b124      	cbz	r4, dfe74 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x78>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
   dfe6a:	2250      	movs	r2, #80	; 0x50
   dfe6c:	2102      	movs	r1, #2
   dfe6e:	4628      	mov	r0, r5
   dfe70:	f7fe ff9c 	bl	dedac <mbedtls_ssl_send_alert_message>

    return( ret );
}
   dfe74:	4620      	mov	r0, r4
   dfe76:	b004      	add	sp, #16
   dfe78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dfe7c <_ZL11mpi_sub_hlpjPmS_>:
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
   dfe7c:	2300      	movs	r3, #0

/*
 * Helper for mbedtls_mpi subtraction
 */
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
   dfe7e:	b5f0      	push	{r4, r5, r6, r7, lr}
   dfe80:	4616      	mov	r6, r2
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
   dfe82:	461c      	mov	r4, r3
   dfe84:	4284      	cmp	r4, r0
   dfe86:	d016      	beq.n	dfeb6 <_ZL11mpi_sub_hlpjPmS_+0x3a>
    {
        z = ( *d <  c );     *d -=  c;
   dfe88:	f8d6 e000 	ldr.w	lr, [r6]
   dfe8c:	ebc3 050e 	rsb	r5, r3, lr
   dfe90:	6035      	str	r5, [r6, #0]
        c = ( *d < *s ) + z; *d -= *s;
   dfe92:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   dfe96:	42bd      	cmp	r5, r7
   dfe98:	bf2c      	ite	cs
   dfe9a:	f04f 0c00 	movcs.w	ip, #0
   dfe9e:	f04f 0c01 	movcc.w	ip, #1
   dfea2:	1bed      	subs	r5, r5, r7
   dfea4:	4573      	cmp	r3, lr
   dfea6:	bf94      	ite	ls
   dfea8:	4663      	movls	r3, ip
   dfeaa:	f10c 0301 	addhi.w	r3, ip, #1
   dfeae:	f846 5b04 	str.w	r5, [r6], #4
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
   dfeb2:	3401      	adds	r4, #1
   dfeb4:	e7e6      	b.n	dfe84 <_ZL11mpi_sub_hlpjPmS_+0x8>
   dfeb6:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
   dfeba:	b143      	cbz	r3, dfece <_ZL11mpi_sub_hlpjPmS_+0x52>
    {
        z = ( *d < c ); *d -= c;
   dfebc:	6811      	ldr	r1, [r2, #0]
   dfebe:	1ac8      	subs	r0, r1, r3
        c = z; d++;
   dfec0:	428b      	cmp	r3, r1
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
    {
        z = ( *d < c ); *d -= c;
   dfec2:	f842 0b04 	str.w	r0, [r2], #4
        c = z; d++;
   dfec6:	bf94      	ite	ls
   dfec8:	2300      	movls	r3, #0
   dfeca:	2301      	movhi	r3, #1
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
   dfecc:	e7f5      	b.n	dfeba <_ZL11mpi_sub_hlpjPmS_+0x3e>
   dfece:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dfed0 <_ZL11mpi_mul_hlpjPmS_m>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
   dfed0:	b5f0      	push	{r4, r5, r6, r7, lr}
   dfed2:	4605      	mov	r5, r0
   dfed4:	4607      	mov	r7, r0
    mbedtls_mpi_uint c = 0, t = 0;
   dfed6:	2400      	movs	r4, #0
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
   dfed8:	2f0f      	cmp	r7, #15
   dfeda:	d973      	bls.n	dffc4 <_ZL11mpi_mul_hlpjPmS_m+0xf4>

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
   dfedc:	460e      	mov	r6, r1
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
   dfede:	3f10      	subs	r7, #16

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
   dfee0:	f856 0b04 	ldr.w	r0, [r6], #4
   dfee4:	6811      	ldr	r1, [r2, #0]
   dfee6:	fbe3 1460 	umaal	r1, r4, r3, r0
   dfeea:	f842 1b04 	str.w	r1, [r2], #4
   dfeee:	f856 0b04 	ldr.w	r0, [r6], #4
   dfef2:	6811      	ldr	r1, [r2, #0]
   dfef4:	fbe3 1460 	umaal	r1, r4, r3, r0
   dfef8:	f842 1b04 	str.w	r1, [r2], #4
   dfefc:	f856 0b04 	ldr.w	r0, [r6], #4
   dff00:	6811      	ldr	r1, [r2, #0]
   dff02:	fbe3 1460 	umaal	r1, r4, r3, r0
   dff06:	f842 1b04 	str.w	r1, [r2], #4
   dff0a:	f856 0b04 	ldr.w	r0, [r6], #4
   dff0e:	6811      	ldr	r1, [r2, #0]
   dff10:	fbe3 1460 	umaal	r1, r4, r3, r0
   dff14:	f842 1b04 	str.w	r1, [r2], #4
   dff18:	f856 0b04 	ldr.w	r0, [r6], #4
   dff1c:	6811      	ldr	r1, [r2, #0]
   dff1e:	fbe3 1460 	umaal	r1, r4, r3, r0
   dff22:	f842 1b04 	str.w	r1, [r2], #4
   dff26:	f856 0b04 	ldr.w	r0, [r6], #4
   dff2a:	6811      	ldr	r1, [r2, #0]
   dff2c:	fbe3 1460 	umaal	r1, r4, r3, r0
   dff30:	f842 1b04 	str.w	r1, [r2], #4
   dff34:	f856 0b04 	ldr.w	r0, [r6], #4
   dff38:	6811      	ldr	r1, [r2, #0]
   dff3a:	fbe3 1460 	umaal	r1, r4, r3, r0
   dff3e:	f842 1b04 	str.w	r1, [r2], #4
   dff42:	f856 0b04 	ldr.w	r0, [r6], #4
   dff46:	6811      	ldr	r1, [r2, #0]
   dff48:	fbe3 1460 	umaal	r1, r4, r3, r0
   dff4c:	f842 1b04 	str.w	r1, [r2], #4
   dff50:	f856 0b04 	ldr.w	r0, [r6], #4
   dff54:	6811      	ldr	r1, [r2, #0]
   dff56:	fbe3 1460 	umaal	r1, r4, r3, r0
   dff5a:	f842 1b04 	str.w	r1, [r2], #4
   dff5e:	f856 0b04 	ldr.w	r0, [r6], #4
   dff62:	6811      	ldr	r1, [r2, #0]
   dff64:	fbe3 1460 	umaal	r1, r4, r3, r0
   dff68:	f842 1b04 	str.w	r1, [r2], #4
   dff6c:	f856 0b04 	ldr.w	r0, [r6], #4
   dff70:	6811      	ldr	r1, [r2, #0]
   dff72:	fbe3 1460 	umaal	r1, r4, r3, r0
   dff76:	f842 1b04 	str.w	r1, [r2], #4
   dff7a:	f856 0b04 	ldr.w	r0, [r6], #4
   dff7e:	6811      	ldr	r1, [r2, #0]
   dff80:	fbe3 1460 	umaal	r1, r4, r3, r0
   dff84:	f842 1b04 	str.w	r1, [r2], #4
   dff88:	f856 0b04 	ldr.w	r0, [r6], #4
   dff8c:	6811      	ldr	r1, [r2, #0]
   dff8e:	fbe3 1460 	umaal	r1, r4, r3, r0
   dff92:	f842 1b04 	str.w	r1, [r2], #4
   dff96:	f856 0b04 	ldr.w	r0, [r6], #4
   dff9a:	6811      	ldr	r1, [r2, #0]
   dff9c:	fbe3 1460 	umaal	r1, r4, r3, r0
   dffa0:	f842 1b04 	str.w	r1, [r2], #4
   dffa4:	f856 0b04 	ldr.w	r0, [r6], #4
   dffa8:	6811      	ldr	r1, [r2, #0]
   dffaa:	fbe3 1460 	umaal	r1, r4, r3, r0
   dffae:	f842 1b04 	str.w	r1, [r2], #4
   dffb2:	f856 0b04 	ldr.w	r0, [r6], #4
   dffb6:	6811      	ldr	r1, [r2, #0]
   dffb8:	fbe3 1460 	umaal	r1, r4, r3, r0
   dffbc:	f842 1b04 	str.w	r1, [r2], #4
   dffc0:	4631      	mov	r1, r6
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
   dffc2:	e789      	b.n	dfed8 <_ZL11mpi_mul_hlpjPmS_m+0x8>
   dffc4:	f005 050f 	and.w	r5, r5, #15
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
   dffc8:	2d07      	cmp	r5, #7
   dffca:	d939      	bls.n	e0040 <_ZL11mpi_mul_hlpjPmS_m+0x170>
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
   dffcc:	460e      	mov	r6, r1
   dffce:	f856 0b04 	ldr.w	r0, [r6], #4
   dffd2:	6811      	ldr	r1, [r2, #0]
   dffd4:	fbe3 1460 	umaal	r1, r4, r3, r0
   dffd8:	f842 1b04 	str.w	r1, [r2], #4
   dffdc:	f856 0b04 	ldr.w	r0, [r6], #4
   dffe0:	6811      	ldr	r1, [r2, #0]
   dffe2:	fbe3 1460 	umaal	r1, r4, r3, r0
   dffe6:	f842 1b04 	str.w	r1, [r2], #4
   dffea:	f856 0b04 	ldr.w	r0, [r6], #4
   dffee:	6811      	ldr	r1, [r2, #0]
   dfff0:	fbe3 1460 	umaal	r1, r4, r3, r0
   dfff4:	f842 1b04 	str.w	r1, [r2], #4
   dfff8:	f856 0b04 	ldr.w	r0, [r6], #4
   dfffc:	6811      	ldr	r1, [r2, #0]
   dfffe:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0002:	f842 1b04 	str.w	r1, [r2], #4
   e0006:	f856 0b04 	ldr.w	r0, [r6], #4
   e000a:	6811      	ldr	r1, [r2, #0]
   e000c:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0010:	f842 1b04 	str.w	r1, [r2], #4
   e0014:	f856 0b04 	ldr.w	r0, [r6], #4
   e0018:	6811      	ldr	r1, [r2, #0]
   e001a:	fbe3 1460 	umaal	r1, r4, r3, r0
   e001e:	f842 1b04 	str.w	r1, [r2], #4
   e0022:	f856 0b04 	ldr.w	r0, [r6], #4
   e0026:	6811      	ldr	r1, [r2, #0]
   e0028:	fbe3 1460 	umaal	r1, r4, r3, r0
   e002c:	f842 1b04 	str.w	r1, [r2], #4
   e0030:	f856 0b04 	ldr.w	r0, [r6], #4
   e0034:	6811      	ldr	r1, [r2, #0]
   e0036:	fbe3 1460 	umaal	r1, r4, r3, r0
   e003a:	f842 1b04 	str.w	r1, [r2], #4
   e003e:	4631      	mov	r1, r6
   e0040:	f005 0507 	and.w	r5, r5, #7
    }

    for( ; i > 0; i-- )
   e0044:	b155      	cbz	r5, e005c <_ZL11mpi_mul_hlpjPmS_m+0x18c>
    {
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
   e0046:	460e      	mov	r6, r1
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
   e0048:	3d01      	subs	r5, #1
    {
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
   e004a:	f856 0b04 	ldr.w	r0, [r6], #4
   e004e:	6811      	ldr	r1, [r2, #0]
   e0050:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0054:	f842 1b04 	str.w	r1, [r2], #4
   e0058:	4631      	mov	r1, r6
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
   e005a:	e7f3      	b.n	e0044 <_ZL11mpi_mul_hlpjPmS_m+0x174>
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
   e005c:	6813      	ldr	r3, [r2, #0]
   e005e:	4423      	add	r3, r4
   e0060:	429c      	cmp	r4, r3
   e0062:	f842 3b04 	str.w	r3, [r2], #4
   e0066:	bf8c      	ite	hi
   e0068:	2401      	movhi	r4, #1
   e006a:	2400      	movls	r4, #0
    }
    while( c != 0 );
   e006c:	d8f6      	bhi.n	e005c <_ZL11mpi_mul_hlpjPmS_m+0x18c>
}
   e006e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e0070 <_ZL21mpi_bigendian_to_hostPmj.part.1>:
     * For that, simultaneously traverse the limbs from left to right
     * and from right to left, as long as the left index is not bigger
     * than the right index (it's not a problem if limbs is odd and the
     * indices coincide in the last iteration).
     */
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
   e0070:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   e0074:	3901      	subs	r1, #1
   e0076:	eb00 0181 	add.w	r1, r0, r1, lsl #2
         cur_limb_left <= cur_limb_right;
   e007a:	4288      	cmp	r0, r1
   e007c:	d808      	bhi.n	e0090 <_ZL21mpi_bigendian_to_hostPmj.part.1+0x20>
#if defined(have_bswap)
    /* The compiler is hopefully able to statically evaluate this! */
    switch( sizeof(mbedtls_mpi_uint) )
    {
        case 4:
            return( __builtin_bswap32(x) );
   e007e:	6803      	ldr	r3, [r0, #0]
   e0080:	680a      	ldr	r2, [r1, #0]
   e0082:	ba1b      	rev	r3, r3
   e0084:	ba12      	rev	r2, r2
    {
        mbedtls_mpi_uint tmp;
        /* Note that if cur_limb_left == cur_limb_right,
         * this code effectively swaps the bytes only once. */
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
   e0086:	f840 2b04 	str.w	r2, [r0], #4
        *cur_limb_right = tmp;
   e008a:	f841 3904 	str.w	r3, [r1], #-4
   e008e:	e7f4      	b.n	e007a <_ZL21mpi_bigendian_to_hostPmj.part.1+0xa>
   e0090:	4770      	bx	lr

000e0092 <mbedtls_mpi_init>:
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e0092:	2301      	movs	r3, #1
   e0094:	6003      	str	r3, [r0, #0]
    X->n = 0;
   e0096:	2300      	movs	r3, #0
   e0098:	6043      	str	r3, [r0, #4]
    X->p = NULL;
   e009a:	6083      	str	r3, [r0, #8]
   e009c:	4770      	bx	lr

000e009e <mbedtls_mpi_free>:

/*
 * Unallocate one MPI
 */
void mbedtls_mpi_free( mbedtls_mpi *X )
{
   e009e:	b510      	push	{r4, lr}
    if( X == NULL )
   e00a0:	4604      	mov	r4, r0
   e00a2:	b168      	cbz	r0, e00c0 <mbedtls_mpi_free+0x22>
        return;

    if( X->p != NULL )
   e00a4:	6880      	ldr	r0, [r0, #8]
   e00a6:	b130      	cbz	r0, e00b6 <mbedtls_mpi_free+0x18>
#define CHARS_TO_LIMBS(i) ( (i) / ciL + ( (i) % ciL != 0 ) )

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n )
{
    mbedtls_platform_zeroize( v, ciL * n );
   e00a8:	6861      	ldr	r1, [r4, #4]
   e00aa:	0089      	lsls	r1, r1, #2
   e00ac:	f7fa fa18 	bl	da4e0 <mbedtls_platform_zeroize>
        return;

    if( X->p != NULL )
    {
        mbedtls_mpi_zeroize( X->p, X->n );
        mbedtls_free( X->p );
   e00b0:	68a0      	ldr	r0, [r4, #8]
   e00b2:	f005 f95b 	bl	e536c <free>
    }

    X->s = 1;
   e00b6:	2301      	movs	r3, #1
   e00b8:	6023      	str	r3, [r4, #0]
    X->n = 0;
   e00ba:	2300      	movs	r3, #0
   e00bc:	6063      	str	r3, [r4, #4]
    X->p = NULL;
   e00be:	60a3      	str	r3, [r4, #8]
   e00c0:	bd10      	pop	{r4, pc}

000e00c2 <mbedtls_mpi_grow>:
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
    mbedtls_mpi_uint *p;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
   e00c2:	f242 7310 	movw	r3, #10000	; 0x2710
   e00c6:	4299      	cmp	r1, r3

/*
 * Enlarge to the specified number of limbs
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
   e00c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e00cc:	4604      	mov	r4, r0
   e00ce:	460e      	mov	r6, r1
    mbedtls_mpi_uint *p;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
   e00d0:	d903      	bls.n	e00da <mbedtls_mpi_grow+0x18>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
   e00d2:	f06f 000f 	mvn.w	r0, #15
   e00d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    if( X->n < nblimbs )
   e00da:	6845      	ldr	r5, [r0, #4]
   e00dc:	42a9      	cmp	r1, r5
   e00de:	d917      	bls.n	e0110 <mbedtls_mpi_grow+0x4e>
    {
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
   e00e0:	2104      	movs	r1, #4
   e00e2:	4630      	mov	r0, r6
   e00e4:	f006 fe16 	bl	e6d14 <calloc>
   e00e8:	4680      	mov	r8, r0
   e00ea:	2800      	cmp	r0, #0
   e00ec:	d0f1      	beq.n	e00d2 <mbedtls_mpi_grow+0x10>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

        if( X->p != NULL )
   e00ee:	68a7      	ldr	r7, [r4, #8]
   e00f0:	b15f      	cbz	r7, e010a <mbedtls_mpi_grow+0x48>
        {
            memcpy( p, X->p, X->n * ciL );
   e00f2:	00ad      	lsls	r5, r5, #2
   e00f4:	462a      	mov	r2, r5
   e00f6:	4639      	mov	r1, r7
   e00f8:	f006 ff29 	bl	e6f4e <memcpy>
#define CHARS_TO_LIMBS(i) ( (i) / ciL + ( (i) % ciL != 0 ) )

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n )
{
    mbedtls_platform_zeroize( v, ciL * n );
   e00fc:	4638      	mov	r0, r7
   e00fe:	4629      	mov	r1, r5
   e0100:	f7fa f9ee 	bl	da4e0 <mbedtls_platform_zeroize>

        if( X->p != NULL )
        {
            memcpy( p, X->p, X->n * ciL );
            mbedtls_mpi_zeroize( X->p, X->n );
            mbedtls_free( X->p );
   e0104:	68a0      	ldr	r0, [r4, #8]
   e0106:	f005 f931 	bl	e536c <free>
        }

        X->n = nblimbs;
   e010a:	6066      	str	r6, [r4, #4]
        X->p = p;
   e010c:	f8c4 8008 	str.w	r8, [r4, #8]
    }

    return( 0 );
   e0110:	2000      	movs	r0, #0
}
   e0112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e0116 <mbedtls_mpi_shrink>:
{
    mbedtls_mpi_uint *p;
    size_t i;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
   e0116:	f242 7310 	movw	r3, #10000	; 0x2710
   e011a:	4299      	cmp	r1, r3
/*
 * Resize down as much as possible,
 * while keeping at least the specified number of limbs
 */
int mbedtls_mpi_shrink( mbedtls_mpi *X, size_t nblimbs )
{
   e011c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e0120:	4606      	mov	r6, r0
   e0122:	460c      	mov	r4, r1
    mbedtls_mpi_uint *p;
    size_t i;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
   e0124:	d903      	bls.n	e012e <mbedtls_mpi_shrink+0x18>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
   e0126:	f06f 000f 	mvn.w	r0, #15
   e012a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    /* Actually resize up in this case */
    if( X->n <= nblimbs )
   e012e:	6843      	ldr	r3, [r0, #4]
   e0130:	4299      	cmp	r1, r3
   e0132:	d303      	bcc.n	e013c <mbedtls_mpi_shrink+0x26>

    X->n = i;
    X->p = p;

    return( 0 );
}
   e0134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

    /* Actually resize up in this case */
    if( X->n <= nblimbs )
        return( mbedtls_mpi_grow( X, nblimbs ) );
   e0138:	f7ff bfc3 	b.w	e00c2 <mbedtls_mpi_grow>

    for( i = X->n - 1; i > 0; i-- )
   e013c:	1e59      	subs	r1, r3, #1
   e013e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   e0142:	3b01      	subs	r3, #1
   e0144:	009d      	lsls	r5, r3, #2
   e0146:	462b      	mov	r3, r5
   e0148:	b129      	cbz	r1, e0156 <mbedtls_mpi_shrink+0x40>
        if( X->p[i] != 0 )
   e014a:	68b2      	ldr	r2, [r6, #8]
   e014c:	58d2      	ldr	r2, [r2, r3]
   e014e:	3b04      	subs	r3, #4
   e0150:	b90a      	cbnz	r2, e0156 <mbedtls_mpi_shrink+0x40>

    /* Actually resize up in this case */
    if( X->n <= nblimbs )
        return( mbedtls_mpi_grow( X, nblimbs ) );

    for( i = X->n - 1; i > 0; i-- )
   e0152:	3901      	subs	r1, #1
   e0154:	e7f8      	b.n	e0148 <mbedtls_mpi_shrink+0x32>
        if( X->p[i] != 0 )
            break;
    i++;
   e0156:	3101      	adds	r1, #1
   e0158:	428c      	cmp	r4, r1
   e015a:	bf38      	it	cc
   e015c:	460c      	movcc	r4, r1

    if( i < nblimbs )
        i = nblimbs;

    if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( i, ciL ) ) == NULL )
   e015e:	4620      	mov	r0, r4
   e0160:	2104      	movs	r1, #4
   e0162:	f006 fdd7 	bl	e6d14 <calloc>
   e0166:	4680      	mov	r8, r0
   e0168:	2800      	cmp	r0, #0
   e016a:	d0dc      	beq.n	e0126 <mbedtls_mpi_shrink+0x10>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

    if( X->p != NULL )
   e016c:	68b7      	ldr	r7, [r6, #8]
   e016e:	b157      	cbz	r7, e0186 <mbedtls_mpi_shrink+0x70>
    {
        memcpy( p, X->p, i * ciL );
   e0170:	00a2      	lsls	r2, r4, #2
   e0172:	4639      	mov	r1, r7
   e0174:	f006 feeb 	bl	e6f4e <memcpy>
#define CHARS_TO_LIMBS(i) ( (i) / ciL + ( (i) % ciL != 0 ) )

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n )
{
    mbedtls_platform_zeroize( v, ciL * n );
   e0178:	4638      	mov	r0, r7
   e017a:	1d29      	adds	r1, r5, #4
   e017c:	f7fa f9b0 	bl	da4e0 <mbedtls_platform_zeroize>

    if( X->p != NULL )
    {
        memcpy( p, X->p, i * ciL );
        mbedtls_mpi_zeroize( X->p, X->n );
        mbedtls_free( X->p );
   e0180:	68b0      	ldr	r0, [r6, #8]
   e0182:	f005 f8f3 	bl	e536c <free>
    }

    X->n = i;
   e0186:	6074      	str	r4, [r6, #4]
    X->p = p;
   e0188:	f8c6 8008 	str.w	r8, [r6, #8]

    return( 0 );
   e018c:	2000      	movs	r0, #0
}
   e018e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e0192 <mbedtls_mpi_copy>:
    int ret = 0;
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    if( X == Y )
   e0192:	4288      	cmp	r0, r1

/*
 * Copy the contents of Y into X
 */
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
   e0194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e0196:	4606      	mov	r6, r0
   e0198:	460f      	mov	r7, r1
    int ret = 0;
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    if( X == Y )
   e019a:	d024      	beq.n	e01e6 <mbedtls_mpi_copy+0x54>
        return( 0 );

    if( Y->p == NULL )
   e019c:	688d      	ldr	r5, [r1, #8]
   e019e:	b915      	cbnz	r5, e01a6 <mbedtls_mpi_copy+0x14>
    {
        mbedtls_mpi_free( X );
   e01a0:	f7ff ff7d 	bl	e009e <mbedtls_mpi_free>
   e01a4:	e01f      	b.n	e01e6 <mbedtls_mpi_copy+0x54>
        return( 0 );
    }

    for( i = Y->n - 1; i > 0; i-- )
   e01a6:	684c      	ldr	r4, [r1, #4]
   e01a8:	3c01      	subs	r4, #1
   e01aa:	b11c      	cbz	r4, e01b4 <mbedtls_mpi_copy+0x22>
        if( Y->p[i] != 0 )
   e01ac:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   e01b0:	2b00      	cmp	r3, #0
   e01b2:	d0f9      	beq.n	e01a8 <mbedtls_mpi_copy+0x16>
            break;
    i++;

    X->s = Y->s;

    if( X->n < i )
   e01b4:	6872      	ldr	r2, [r6, #4]
    for( i = Y->n - 1; i > 0; i-- )
        if( Y->p[i] != 0 )
            break;
    i++;

    X->s = Y->s;
   e01b6:	683b      	ldr	r3, [r7, #0]
   e01b8:	6033      	str	r3, [r6, #0]
    }

    for( i = Y->n - 1; i > 0; i-- )
        if( Y->p[i] != 0 )
            break;
    i++;
   e01ba:	3401      	adds	r4, #1

    X->s = Y->s;

    if( X->n < i )
   e01bc:	4294      	cmp	r4, r2
   e01be:	d905      	bls.n	e01cc <mbedtls_mpi_copy+0x3a>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
   e01c0:	4621      	mov	r1, r4
   e01c2:	4630      	mov	r0, r6
   e01c4:	f7ff ff7d 	bl	e00c2 <mbedtls_mpi_grow>
   e01c8:	b140      	cbz	r0, e01dc <mbedtls_mpi_copy+0x4a>
   e01ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    else
    {
        memset( X->p + i, 0, ( X->n - i ) * ciL );
   e01cc:	68b0      	ldr	r0, [r6, #8]
   e01ce:	1b12      	subs	r2, r2, r4
   e01d0:	0092      	lsls	r2, r2, #2
   e01d2:	2100      	movs	r1, #0
   e01d4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   e01d8:	f006 fedf 	bl	e6f9a <memset>
    }

    memcpy( X->p, Y->p, i * ciL );
   e01dc:	00a2      	lsls	r2, r4, #2
   e01de:	68b9      	ldr	r1, [r7, #8]
   e01e0:	68b0      	ldr	r0, [r6, #8]
   e01e2:	f006 feb4 	bl	e6f4e <memcpy>
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    if( X == Y )
        return( 0 );
   e01e6:	2000      	movs	r0, #0
    memcpy( X->p, Y->p, i * ciL );

cleanup:

    return( ret );
}
   e01e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e01ea <mbedtls_mpi_safe_cond_assign>:
 * Conditionally assign X = Y, without leaking information
 * about whether the assignment was made or not.
 * (Leaking information about the respective sizes of X and Y is ok however.)
 */
int mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X, const mbedtls_mpi *Y, unsigned char assign )
{
   e01ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e01ec:	460d      	mov	r5, r1
    MPI_VALIDATE_RET( Y != NULL );

    /* make sure assign is 0 or 1 in a time-constant manner */
    assign = (assign | (unsigned char)-assign) >> 7;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
   e01ee:	6849      	ldr	r1, [r1, #4]
 * Conditionally assign X = Y, without leaking information
 * about whether the assignment was made or not.
 * (Leaking information about the respective sizes of X and Y is ok however.)
 */
int mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X, const mbedtls_mpi *Y, unsigned char assign )
{
   e01f0:	4604      	mov	r4, r0
   e01f2:	4616      	mov	r6, r2
    MPI_VALIDATE_RET( Y != NULL );

    /* make sure assign is 0 or 1 in a time-constant manner */
    assign = (assign | (unsigned char)-assign) >> 7;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
   e01f4:	f7ff ff65 	bl	e00c2 <mbedtls_mpi_grow>
   e01f8:	bb58      	cbnz	r0, e0252 <mbedtls_mpi_safe_cond_assign+0x68>
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    /* make sure assign is 0 or 1 in a time-constant manner */
    assign = (assign | (unsigned char)-assign) >> 7;
   e01fa:	4273      	negs	r3, r6
   e01fc:	ea46 0203 	orr.w	r2, r6, r3

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );

    X->s = X->s * ( 1 - assign ) + Y->s * assign;
   e0200:	6829      	ldr	r1, [r5, #0]
   e0202:	6823      	ldr	r3, [r4, #0]
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    /* make sure assign is 0 or 1 in a time-constant manner */
    assign = (assign | (unsigned char)-assign) >> 7;
   e0204:	f3c2 12c0 	ubfx	r2, r2, #7, #1

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );

    X->s = X->s * ( 1 - assign ) + Y->s * assign;
   e0208:	f1c2 0601 	rsb	r6, r2, #1
   e020c:	4351      	muls	r1, r2
   e020e:	fb03 1306 	mla	r3, r3, r6, r1
   e0212:	6023      	str	r3, [r4, #0]

    for( i = 0; i < Y->n; i++ )
   e0214:	4603      	mov	r3, r0
   e0216:	6869      	ldr	r1, [r5, #4]
   e0218:	428b      	cmp	r3, r1
   e021a:	ea4f 0183 	mov.w	r1, r3, lsl #2
   e021e:	d20d      	bcs.n	e023c <mbedtls_mpi_safe_cond_assign+0x52>
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;
   e0220:	68a9      	ldr	r1, [r5, #8]
   e0222:	f8d4 e008 	ldr.w	lr, [r4, #8]
   e0226:	f851 7023 	ldr.w	r7, [r1, r3, lsl #2]
   e022a:	f85e 1023 	ldr.w	r1, [lr, r3, lsl #2]
   e022e:	4371      	muls	r1, r6
   e0230:	fb07 1102 	mla	r1, r7, r2, r1
   e0234:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );

    X->s = X->s * ( 1 - assign ) + Y->s * assign;

    for( i = 0; i < Y->n; i++ )
   e0238:	3301      	adds	r3, #1
   e023a:	e7ec      	b.n	e0216 <mbedtls_mpi_safe_cond_assign+0x2c>
   e023c:	460a      	mov	r2, r1
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;

    for( ; i < X->n; i++ )
   e023e:	6861      	ldr	r1, [r4, #4]
   e0240:	428b      	cmp	r3, r1
   e0242:	d206      	bcs.n	e0252 <mbedtls_mpi_safe_cond_assign+0x68>
        X->p[i] *= ( 1 - assign );
   e0244:	68a5      	ldr	r5, [r4, #8]
   e0246:	58a9      	ldr	r1, [r5, r2]
   e0248:	4371      	muls	r1, r6
   e024a:	50a9      	str	r1, [r5, r2]
    X->s = X->s * ( 1 - assign ) + Y->s * assign;

    for( i = 0; i < Y->n; i++ )
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;

    for( ; i < X->n; i++ )
   e024c:	3301      	adds	r3, #1
   e024e:	3204      	adds	r2, #4
   e0250:	e7f5      	b.n	e023e <mbedtls_mpi_safe_cond_assign+0x54>
        X->p[i] *= ( 1 - assign );

cleanup:
    return( ret );
}
   e0252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e0254 <mbedtls_mpi_lset>:

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
   e0254:	b570      	push	{r4, r5, r6, lr}
   e0256:	460e      	mov	r6, r1
    int ret;
    MPI_VALIDATE_RET( X != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
   e0258:	2101      	movs	r1, #1

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
   e025a:	4604      	mov	r4, r0
    int ret;
    MPI_VALIDATE_RET( X != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
   e025c:	f7ff ff31 	bl	e00c2 <mbedtls_mpi_grow>
   e0260:	4605      	mov	r5, r0
   e0262:	b988      	cbnz	r0, e0288 <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
   e0264:	6862      	ldr	r2, [r4, #4]
   e0266:	4601      	mov	r1, r0
   e0268:	0092      	lsls	r2, r2, #2
   e026a:	68a0      	ldr	r0, [r4, #8]
   e026c:	f006 fe95 	bl	e6f9a <memset>

    X->p[0] = ( z < 0 ) ? -z : z;
   e0270:	68a3      	ldr	r3, [r4, #8]
   e0272:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
   e0276:	2e00      	cmp	r6, #0
    MPI_VALIDATE_RET( X != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    memset( X->p, 0, X->n * ciL );

    X->p[0] = ( z < 0 ) ? -z : z;
   e0278:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
   e027c:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
   e027e:	bfb4      	ite	lt
   e0280:	f04f 33ff 	movlt.w	r3, #4294967295
   e0284:	2301      	movge	r3, #1
   e0286:	6023      	str	r3, [r4, #0]

cleanup:

    return( ret );
}
   e0288:	4628      	mov	r0, r5
   e028a:	bd70      	pop	{r4, r5, r6, pc}

000e028c <mbedtls_mpi_get_bit>:
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
    MPI_VALIDATE_RET( X != NULL );

    if( X->n * biL <= pos )
   e028c:	6843      	ldr	r3, [r0, #4]
   e028e:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
        return( 0 );

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
   e0292:	bf3f      	itttt	cc
   e0294:	6883      	ldrcc	r3, [r0, #8]
   e0296:	094a      	lsrcc	r2, r1, #5
   e0298:	f001 001f 	andcc.w	r0, r1, #31
   e029c:	f853 3022 	ldrcc.w	r3, [r3, r2, lsl #2]
   e02a0:	bf3a      	itte	cc
   e02a2:	fa23 f000 	lsrcc.w	r0, r3, r0
   e02a6:	f000 0001 	andcc.w	r0, r0, #1
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
    MPI_VALIDATE_RET( X != NULL );

    if( X->n * biL <= pos )
        return( 0 );
   e02aa:	2000      	movcs	r0, #0

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
}
   e02ac:	4770      	bx	lr

000e02ae <mbedtls_mpi_lsb>:

/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
   e02ae:	b570      	push	{r4, r5, r6, lr}
    size_t i, j, count = 0;
   e02b0:	2300      	movs	r3, #0
    MBEDTLS_INTERNAL_VALIDATE_RET( X != NULL, 0 );

    for( i = 0; i < X->n; i++ )
   e02b2:	6844      	ldr	r4, [r0, #4]
   e02b4:	461a      	mov	r2, r3
   e02b6:	42a2      	cmp	r2, r4
   e02b8:	d00e      	beq.n	e02d8 <mbedtls_mpi_lsb+0x2a>
        for( j = 0; j < biL; j++, count++ )
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
   e02ba:	6881      	ldr	r1, [r0, #8]
   e02bc:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   e02c0:	2100      	movs	r1, #0
   e02c2:	fa25 f601 	lsr.w	r6, r5, r1
   e02c6:	07f6      	lsls	r6, r6, #31
   e02c8:	d408      	bmi.n	e02dc <mbedtls_mpi_lsb+0x2e>
{
    size_t i, j, count = 0;
    MBEDTLS_INTERNAL_VALIDATE_RET( X != NULL, 0 );

    for( i = 0; i < X->n; i++ )
        for( j = 0; j < biL; j++, count++ )
   e02ca:	3101      	adds	r1, #1
   e02cc:	2920      	cmp	r1, #32
   e02ce:	f103 0301 	add.w	r3, r3, #1
   e02d2:	d1f6      	bne.n	e02c2 <mbedtls_mpi_lsb+0x14>
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;
    MBEDTLS_INTERNAL_VALIDATE_RET( X != NULL, 0 );

    for( i = 0; i < X->n; i++ )
   e02d4:	3201      	adds	r2, #1
   e02d6:	e7ee      	b.n	e02b6 <mbedtls_mpi_lsb+0x8>
        for( j = 0; j < biL; j++, count++ )
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
                return( count );

    return( 0 );
   e02d8:	2000      	movs	r0, #0
   e02da:	bd70      	pop	{r4, r5, r6, pc}
   e02dc:	4618      	mov	r0, r3
}
   e02de:	bd70      	pop	{r4, r5, r6, pc}

000e02e0 <mbedtls_mpi_bitlen>:

/*
 * Return the number of bits
 */
size_t mbedtls_mpi_bitlen( const mbedtls_mpi *X )
{
   e02e0:	b510      	push	{r4, lr}
    size_t i, j;

    if( X->n == 0 )
   e02e2:	6843      	ldr	r3, [r0, #4]
   e02e4:	b1d3      	cbz	r3, e031c <mbedtls_mpi_bitlen+0x3c>
   e02e6:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   e02ea:	3a01      	subs	r2, #1
        return( 0 );

    for( i = X->n - 1; i > 0; i-- )
   e02ec:	1e59      	subs	r1, r3, #1
   e02ee:	0092      	lsls	r2, r2, #2
   e02f0:	6883      	ldr	r3, [r0, #8]
   e02f2:	b121      	cbz	r1, e02fe <mbedtls_mpi_bitlen+0x1e>
        if( X->p[i] != 0 )
   e02f4:	589c      	ldr	r4, [r3, r2]
   e02f6:	3a04      	subs	r2, #4
   e02f8:	b90c      	cbnz	r4, e02fe <mbedtls_mpi_bitlen+0x1e>
    size_t i, j;

    if( X->n == 0 )
        return( 0 );

    for( i = X->n - 1; i > 0; i-- )
   e02fa:	3901      	subs	r1, #1
   e02fc:	e7f8      	b.n	e02f0 <mbedtls_mpi_bitlen+0x10>
        if( X->p[i] != 0 )
            break;

    j = biL - mbedtls_clz( X->p[i] );
   e02fe:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
   e0302:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000

    for( j = 0; j < biL; j++ )
   e0306:	2300      	movs	r3, #0
    {
        if( x & mask ) break;
   e0308:	4210      	tst	r0, r2
   e030a:	d104      	bne.n	e0316 <mbedtls_mpi_bitlen+0x36>
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
   e030c:	3301      	adds	r3, #1
   e030e:	2b20      	cmp	r3, #32
    {
        if( x & mask ) break;

        mask >>= 1;
   e0310:	ea4f 0252 	mov.w	r2, r2, lsr #1
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
   e0314:	d1f8      	bne.n	e0308 <mbedtls_mpi_bitlen+0x28>
        if( X->p[i] != 0 )
            break;

    j = biL - mbedtls_clz( X->p[i] );

    return( ( i * biL ) + j );
   e0316:	ebc3 1341 	rsb	r3, r3, r1, lsl #5
   e031a:	3320      	adds	r3, #32
}
   e031c:	4618      	mov	r0, r3
   e031e:	bd10      	pop	{r4, pc}

000e0320 <mbedtls_mpi_size>:

/*
 * Return the total size in bytes
 */
size_t mbedtls_mpi_size( const mbedtls_mpi *X )
{
   e0320:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
   e0322:	f7ff ffdd 	bl	e02e0 <mbedtls_mpi_bitlen>
   e0326:	3007      	adds	r0, #7
}
   e0328:	08c0      	lsrs	r0, r0, #3
   e032a:	bd08      	pop	{r3, pc}

000e032c <mbedtls_mpi_read_binary>:

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
   e032c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret;
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
   e0330:	f012 0403 	ands.w	r4, r2, #3
   e0334:	bf18      	it	ne
   e0336:	2401      	movne	r4, #1

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
   e0338:	6843      	ldr	r3, [r0, #4]
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
    int ret;
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
   e033a:	eb04 0492 	add.w	r4, r4, r2, lsr #2

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
   e033e:	429c      	cmp	r4, r3

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
   e0340:	4607      	mov	r7, r0
   e0342:	4688      	mov	r8, r1
   e0344:	4615      	mov	r5, r2

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
   e0346:	d106      	bne.n	e0356 <mbedtls_mpi_read_binary+0x2a>
    {
        mbedtls_mpi_free( X );
        mbedtls_mpi_init( X );
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
   e0348:	2100      	movs	r1, #0
   e034a:	4638      	mov	r0, r7
   e034c:	f7ff ff82 	bl	e0254 <mbedtls_mpi_lset>
   e0350:	4606      	mov	r6, r0
   e0352:	b178      	cbz	r0, e0374 <mbedtls_mpi_read_binary+0x48>
   e0354:	e01e      	b.n	e0394 <mbedtls_mpi_read_binary+0x68>
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
    {
        mbedtls_mpi_free( X );
   e0356:	f7ff fea2 	bl	e009e <mbedtls_mpi_free>
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e035a:	2301      	movs	r3, #1
   e035c:	603b      	str	r3, [r7, #0]
    X->n = 0;
   e035e:	2300      	movs	r3, #0
   e0360:	607b      	str	r3, [r7, #4]
    X->p = NULL;
   e0362:	60bb      	str	r3, [r7, #8]
    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
    {
        mbedtls_mpi_free( X );
        mbedtls_mpi_init( X );
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
   e0364:	4621      	mov	r1, r4
   e0366:	4638      	mov	r0, r7
   e0368:	f7ff feab 	bl	e00c2 <mbedtls_mpi_grow>
   e036c:	4606      	mov	r6, r0
   e036e:	2800      	cmp	r0, #0
   e0370:	d0ea      	beq.n	e0348 <mbedtls_mpi_read_binary+0x1c>
   e0372:	e00f      	b.n	e0394 <mbedtls_mpi_read_binary+0x68>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    /* Avoid calling `memcpy` with NULL source argument,
     * even if buflen is 0. */
    if( buf != NULL )
   e0374:	f1b8 0f00 	cmp.w	r8, #0
   e0378:	d00c      	beq.n	e0394 <mbedtls_mpi_read_binary+0x68>
    {
        Xp = (unsigned char*) X->p;
        memcpy( Xp + overhead, buf, buflen );
   e037a:	68bb      	ldr	r3, [r7, #8]
   e037c:	ebc5 0084 	rsb	r0, r5, r4, lsl #2
   e0380:	462a      	mov	r2, r5
   e0382:	4641      	mov	r1, r8
   e0384:	4418      	add	r0, r3
   e0386:	f006 fde2 	bl	e6f4e <memcpy>

static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
{
    mbedtls_mpi_uint *cur_limb_left;
    mbedtls_mpi_uint *cur_limb_right;
    if( limbs == 0 )
   e038a:	b11c      	cbz	r4, e0394 <mbedtls_mpi_read_binary+0x68>
   e038c:	4621      	mov	r1, r4
   e038e:	68b8      	ldr	r0, [r7, #8]
   e0390:	f7ff fe6e 	bl	e0070 <_ZL21mpi_bigendian_to_hostPmj.part.1>
    }

cleanup:

    return( ret );
}
   e0394:	4630      	mov	r0, r6
   e0396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e039a <mbedtls_mpi_write_binary>:
/*
 * Export X into unsigned binary data, big endian
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X,
                              unsigned char *buf, size_t buflen )
{
   e039a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e039c:	4605      	mov	r5, r0
   e039e:	4608      	mov	r0, r1
    size_t i;

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    stored_bytes = X->n * ciL;
   e03a0:	686c      	ldr	r4, [r5, #4]
   e03a2:	00a4      	lsls	r4, r4, #2

    if( stored_bytes < buflen )
   e03a4:	4294      	cmp	r4, r2
   e03a6:	d301      	bcc.n	e03ac <mbedtls_mpi_write_binary+0x12>
   e03a8:	4613      	mov	r3, r2
   e03aa:	e014      	b.n	e03d6 <mbedtls_mpi_write_binary+0x3c>
         * null bytes and record the position at which to start
         * writing the significant bytes. In this case, the execution
         * trace of this function does not depend on the value of the
         * number. */
        bytes_to_copy = stored_bytes;
        p = buf + buflen - stored_bytes;
   e03ac:	1b12      	subs	r2, r2, r4
   e03ae:	188e      	adds	r6, r1, r2
        memset( buf, 0, buflen - stored_bytes );
   e03b0:	2100      	movs	r1, #0
   e03b2:	f006 fdf2 	bl	e6f9a <memset>
         * null bytes and record the position at which to start
         * writing the significant bytes. In this case, the execution
         * trace of this function does not depend on the value of the
         * number. */
        bytes_to_copy = stored_bytes;
        p = buf + buflen - stored_bytes;
   e03b6:	4630      	mov	r0, r6
   e03b8:	4622      	mov	r2, r4
   e03ba:	e00e      	b.n	e03da <mbedtls_mpi_write_binary+0x40>
         * However X may fit if its leading bytes are zero. */
        bytes_to_copy = buflen;
        p = buf;
        for( i = bytes_to_copy; i < stored_bytes; i++ )
        {
            if( GET_BYTE( X, i ) != 0 )
   e03bc:	ea4f 0e93 	mov.w	lr, r3, lsr #2
   e03c0:	68af      	ldr	r7, [r5, #8]
   e03c2:	f003 0103 	and.w	r1, r3, #3
   e03c6:	00ce      	lsls	r6, r1, #3
   e03c8:	f857 102e 	ldr.w	r1, [r7, lr, lsl #2]
   e03cc:	40f1      	lsrs	r1, r6
   e03ce:	f011 0fff 	tst.w	r1, #255	; 0xff
   e03d2:	d112      	bne.n	e03fa <mbedtls_mpi_write_binary+0x60>
    {
        /* The output buffer is smaller than the allocated size of X.
         * However X may fit if its leading bytes are zero. */
        bytes_to_copy = buflen;
        p = buf;
        for( i = bytes_to_copy; i < stored_bytes; i++ )
   e03d4:	3301      	adds	r3, #1
   e03d6:	429c      	cmp	r4, r3
   e03d8:	d1f0      	bne.n	e03bc <mbedtls_mpi_write_binary+0x22>
   e03da:	4410      	add	r0, r2
            if( GET_BYTE( X, i ) != 0 )
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
        }
    }

    for( i = 0; i < bytes_to_copy; i++ )
   e03dc:	2300      	movs	r3, #0
   e03de:	429a      	cmp	r2, r3
   e03e0:	d00e      	beq.n	e0400 <mbedtls_mpi_write_binary+0x66>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
   e03e2:	089f      	lsrs	r7, r3, #2
   e03e4:	68ae      	ldr	r6, [r5, #8]
   e03e6:	f003 0103 	and.w	r1, r3, #3
   e03ea:	00cc      	lsls	r4, r1, #3
   e03ec:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
   e03f0:	40e1      	lsrs	r1, r4
   e03f2:	f800 1d01 	strb.w	r1, [r0, #-1]!
            if( GET_BYTE( X, i ) != 0 )
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
        }
    }

    for( i = 0; i < bytes_to_copy; i++ )
   e03f6:	3301      	adds	r3, #1
   e03f8:	e7f1      	b.n	e03de <mbedtls_mpi_write_binary+0x44>
        bytes_to_copy = buflen;
        p = buf;
        for( i = bytes_to_copy; i < stored_bytes; i++ )
        {
            if( GET_BYTE( X, i ) != 0 )
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
   e03fa:	f06f 0007 	mvn.w	r0, #7
   e03fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    for( i = 0; i < bytes_to_copy; i++ )
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );

    return( 0 );
   e0400:	2000      	movs	r0, #0
}
   e0402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e0404 <mbedtls_mpi_shift_l>:

/*
 * Left-shift: X <<= count
 */
int mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count )
{
   e0404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e0406:	4604      	mov	r4, r0
   e0408:	460d      	mov	r5, r1
    int ret;
    size_t i, v0, t1;
    mbedtls_mpi_uint r0 = 0, r1;
    MPI_VALIDATE_RET( X != NULL );

    v0 = count / (biL    );
   e040a:	094e      	lsrs	r6, r1, #5
    t1 = count & (biL - 1);
   e040c:	f001 071f 	and.w	r7, r1, #31

    i = mbedtls_mpi_bitlen( X ) + count;
   e0410:	f7ff ff66 	bl	e02e0 <mbedtls_mpi_bitlen>

    if( X->n * biL < i )
   e0414:	6863      	ldr	r3, [r4, #4]
    MPI_VALIDATE_RET( X != NULL );

    v0 = count / (biL    );
    t1 = count & (biL - 1);

    i = mbedtls_mpi_bitlen( X ) + count;
   e0416:	4428      	add	r0, r5

    if( X->n * biL < i )
   e0418:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
   e041c:	d809      	bhi.n	e0432 <mbedtls_mpi_shift_l+0x2e>
    ret = 0;

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
   e041e:	b346      	cbz	r6, e0472 <mbedtls_mpi_shift_l+0x6e>
    {
        for( i = X->n; i > v0; i-- )
   e0420:	6863      	ldr	r3, [r4, #4]
   e0422:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   e0426:	3a01      	subs	r2, #1
   e0428:	f06f 0103 	mvn.w	r1, #3
   e042c:	0092      	lsls	r2, r2, #2
   e042e:	4371      	muls	r1, r6
   e0430:	e00b      	b.n	e044a <mbedtls_mpi_shift_l+0x46>
    t1 = count & (biL - 1);

    i = mbedtls_mpi_bitlen( X ) + count;

    if( X->n * biL < i )
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
   e0432:	f010 011f 	ands.w	r1, r0, #31
   e0436:	bf18      	it	ne
   e0438:	2101      	movne	r1, #1
   e043a:	eb01 1150 	add.w	r1, r1, r0, lsr #5
   e043e:	4620      	mov	r0, r4
   e0440:	f7ff fe3f 	bl	e00c2 <mbedtls_mpi_grow>
   e0444:	2800      	cmp	r0, #0
   e0446:	d0ea      	beq.n	e041e <mbedtls_mpi_shift_l+0x1a>
   e0448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
   e044a:	429e      	cmp	r6, r3
   e044c:	d206      	bcs.n	e045c <mbedtls_mpi_shift_l+0x58>
            X->p[i - 1] = X->p[i - v0 - 1];
   e044e:	68a0      	ldr	r0, [r4, #8]
   e0450:	1885      	adds	r5, r0, r2
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
   e0452:	3b01      	subs	r3, #1
            X->p[i - 1] = X->p[i - v0 - 1];
   e0454:	586d      	ldr	r5, [r5, r1]
   e0456:	5085      	str	r5, [r0, r2]
   e0458:	3a04      	subs	r2, #4
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
   e045a:	e7f6      	b.n	e044a <mbedtls_mpi_shift_l+0x46>
   e045c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   e0460:	3a01      	subs	r2, #1
   e0462:	0092      	lsls	r2, r2, #2
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
            X->p[i - 1] = 0;
   e0464:	2000      	movs	r0, #0
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
   e0466:	b123      	cbz	r3, e0472 <mbedtls_mpi_shift_l+0x6e>
            X->p[i - 1] = 0;
   e0468:	68a1      	ldr	r1, [r4, #8]
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
   e046a:	3b01      	subs	r3, #1
            X->p[i - 1] = 0;
   e046c:	5088      	str	r0, [r1, r2]
   e046e:	3a04      	subs	r2, #4
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
   e0470:	e7f9      	b.n	e0466 <mbedtls_mpi_shift_l+0x62>
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
   e0472:	b90f      	cbnz	r7, e0478 <mbedtls_mpi_shift_l+0x74>
    i = mbedtls_mpi_bitlen( X ) + count;

    if( X->n * biL < i )
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );

    ret = 0;
   e0474:	2000      	movs	r0, #0
   e0476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e0478:	00b3      	lsls	r3, r6, #2
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
   e047a:	2200      	movs	r2, #0
    {
        for( i = v0; i < X->n; i++ )
        {
            r1 = X->p[i] >> (biL - t1);
   e047c:	f1c7 0e20 	rsb	lr, r7, #32
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
   e0480:	6861      	ldr	r1, [r4, #4]
   e0482:	428e      	cmp	r6, r1
   e0484:	d2f6      	bcs.n	e0474 <mbedtls_mpi_shift_l+0x70>
        {
            r1 = X->p[i] >> (biL - t1);
   e0486:	68a0      	ldr	r0, [r4, #8]
   e0488:	58c1      	ldr	r1, [r0, r3]
            X->p[i] <<= t1;
   e048a:	fa01 f507 	lsl.w	r5, r1, r7
   e048e:	50c5      	str	r5, [r0, r3]
            X->p[i] |= r0;
   e0490:	68a0      	ldr	r0, [r4, #8]
   e0492:	58c5      	ldr	r5, [r0, r3]
   e0494:	432a      	orrs	r2, r5
   e0496:	50c2      	str	r2, [r0, r3]
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
   e0498:	3601      	adds	r6, #1
   e049a:	3304      	adds	r3, #4
        {
            r1 = X->p[i] >> (biL - t1);
            X->p[i] <<= t1;
            X->p[i] |= r0;
            r0 = r1;
   e049c:	fa21 f20e 	lsr.w	r2, r1, lr
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
   e04a0:	e7ee      	b.n	e0480 <mbedtls_mpi_shift_l+0x7c>

000e04a2 <mbedtls_mpi_shift_r>:

/*
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
   e04a2:	b5f0      	push	{r4, r5, r6, r7, lr}
    MPI_VALIDATE_RET( X != NULL );

    v0 = count /  biL;
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
   e04a4:	6843      	ldr	r3, [r0, #4]
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
    MPI_VALIDATE_RET( X != NULL );

    v0 = count /  biL;
   e04a6:	094a      	lsrs	r2, r1, #5
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
   e04a8:	429a      	cmp	r2, r3
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
    MPI_VALIDATE_RET( X != NULL );

    v0 = count /  biL;
    v1 = count & (biL - 1);
   e04aa:	f001 011f 	and.w	r1, r1, #31

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
   e04ae:	d801      	bhi.n	e04b4 <mbedtls_mpi_shift_r+0x12>
   e04b0:	d105      	bne.n	e04be <mbedtls_mpi_shift_r+0x1c>
   e04b2:	b159      	cbz	r1, e04cc <mbedtls_mpi_shift_r+0x2a>
        return mbedtls_mpi_lset( X, 0 );
   e04b4:	2100      	movs	r1, #0
            r0 = r1;
        }
    }

    return( 0 );
}
   e04b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    v0 = count /  biL;
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
        return mbedtls_mpi_lset( X, 0 );
   e04ba:	f7ff becb 	b.w	e0254 <mbedtls_mpi_lset>

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
   e04be:	b1d2      	cbz	r2, e04f6 <mbedtls_mpi_shift_r+0x54>
   e04c0:	2300      	movs	r3, #0
    {
        for( i = 0; i < X->n - v0; i++ )
   e04c2:	6844      	ldr	r4, [r0, #4]
   e04c4:	1aa4      	subs	r4, r4, r2
   e04c6:	42a3      	cmp	r3, r4
   e04c8:	d305      	bcc.n	e04d6 <mbedtls_mpi_shift_r+0x34>
   e04ca:	e001      	b.n	e04d0 <mbedtls_mpi_shift_r+0x2e>
        return mbedtls_mpi_lset( X, 0 );

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
   e04cc:	b35a      	cbz	r2, e0526 <mbedtls_mpi_shift_r+0x84>
   e04ce:	460b      	mov	r3, r1
   e04d0:	009a      	lsls	r2, r3, #2
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
            X->p[i] = 0;
   e04d2:	2500      	movs	r5, #0
   e04d4:	e007      	b.n	e04e6 <mbedtls_mpi_shift_r+0x44>
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];
   e04d6:	6884      	ldr	r4, [r0, #8]
   e04d8:	189d      	adds	r5, r3, r2
   e04da:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   e04de:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
   e04e2:	3301      	adds	r3, #1
   e04e4:	e7ed      	b.n	e04c2 <mbedtls_mpi_shift_r+0x20>
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
   e04e6:	6844      	ldr	r4, [r0, #4]
   e04e8:	42a3      	cmp	r3, r4
   e04ea:	d204      	bcs.n	e04f6 <mbedtls_mpi_shift_r+0x54>
            X->p[i] = 0;
   e04ec:	6884      	ldr	r4, [r0, #8]
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
   e04ee:	3301      	adds	r3, #1
            X->p[i] = 0;
   e04f0:	50a5      	str	r5, [r4, r2]
   e04f2:	3204      	adds	r2, #4
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
   e04f4:	e7f7      	b.n	e04e6 <mbedtls_mpi_shift_r+0x44>
    }

    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
   e04f6:	b1b1      	cbz	r1, e0526 <mbedtls_mpi_shift_r+0x84>
    {
        for( i = X->n; i > 0; i-- )
   e04f8:	6844      	ldr	r4, [r0, #4]
   e04fa:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   e04fe:	3b01      	subs	r3, #1
   e0500:	009b      	lsls	r3, r3, #2
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
   e0502:	2200      	movs	r2, #0
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
        {
            r1 = X->p[i - 1] << (biL - v1);
   e0504:	f1c1 0e20 	rsb	lr, r1, #32
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
   e0508:	b16c      	cbz	r4, e0526 <mbedtls_mpi_shift_r+0x84>
        {
            r1 = X->p[i - 1] << (biL - v1);
   e050a:	6886      	ldr	r6, [r0, #8]
   e050c:	58f5      	ldr	r5, [r6, r3]
            X->p[i - 1] >>= v1;
   e050e:	fa25 f701 	lsr.w	r7, r5, r1
   e0512:	50f7      	str	r7, [r6, r3]
            X->p[i - 1] |= r0;
   e0514:	6886      	ldr	r6, [r0, #8]
   e0516:	58f7      	ldr	r7, [r6, r3]
   e0518:	433a      	orrs	r2, r7
   e051a:	50f2      	str	r2, [r6, r3]
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
   e051c:	3c01      	subs	r4, #1
   e051e:	3b04      	subs	r3, #4
        {
            r1 = X->p[i - 1] << (biL - v1);
            X->p[i - 1] >>= v1;
            X->p[i - 1] |= r0;
            r0 = r1;
   e0520:	fa05 f20e 	lsl.w	r2, r5, lr
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
   e0524:	e7f0      	b.n	e0508 <mbedtls_mpi_shift_r+0x66>
            r0 = r1;
        }
    }

    return( 0 );
}
   e0526:	2000      	movs	r0, #0
   e0528:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e052a <mbedtls_mpi_cmp_abs>:

/*
 * Compare unsigned values
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
   e052a:	b570      	push	{r4, r5, r6, lr}
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
   e052c:	6843      	ldr	r3, [r0, #4]
   e052e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   e0532:	3a01      	subs	r2, #1
   e0534:	0092      	lsls	r2, r2, #2
   e0536:	b12b      	cbz	r3, e0544 <mbedtls_mpi_cmp_abs+0x1a>
        if( X->p[i - 1] != 0 )
   e0538:	6884      	ldr	r4, [r0, #8]
   e053a:	58a4      	ldr	r4, [r4, r2]
   e053c:	3a04      	subs	r2, #4
   e053e:	b90c      	cbnz	r4, e0544 <mbedtls_mpi_cmp_abs+0x1a>
{
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
   e0540:	3b01      	subs	r3, #1
   e0542:	e7f8      	b.n	e0536 <mbedtls_mpi_cmp_abs+0xc>
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
   e0544:	684c      	ldr	r4, [r1, #4]
   e0546:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   e054a:	3a01      	subs	r2, #1
   e054c:	0092      	lsls	r2, r2, #2
   e054e:	b1c4      	cbz	r4, e0582 <mbedtls_mpi_cmp_abs+0x58>
        if( Y->p[j - 1] != 0 )
   e0550:	688d      	ldr	r5, [r1, #8]
   e0552:	58ae      	ldr	r6, [r5, r2]
   e0554:	3a04      	subs	r2, #4
   e0556:	b90e      	cbnz	r6, e055c <mbedtls_mpi_cmp_abs+0x32>

    for( i = X->n; i > 0; i-- )
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
   e0558:	3c01      	subs	r4, #1
   e055a:	e7f8      	b.n	e054e <mbedtls_mpi_cmp_abs+0x24>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  1 );
   e055c:	429c      	cmp	r4, r3
   e055e:	d30b      	bcc.n	e0578 <mbedtls_mpi_cmp_abs+0x4e>
    if( j > i ) return( -1 );
   e0560:	d913      	bls.n	e058a <mbedtls_mpi_cmp_abs+0x60>
   e0562:	e00b      	b.n	e057c <mbedtls_mpi_cmp_abs+0x52>
   e0564:	f1a2 0204 	sub.w	r2, r2, #4

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
   e0568:	d308      	bcc.n	e057c <mbedtls_mpi_cmp_abs+0x52>
        return( 0 );

    if( i > j ) return(  1 );
    if( j > i ) return( -1 );

    for( ; i > 0; i-- )
   e056a:	3b01      	subs	r3, #1
   e056c:	b193      	cbz	r3, e0594 <mbedtls_mpi_cmp_abs+0x6a>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
   e056e:	6881      	ldr	r1, [r0, #8]
   e0570:	588c      	ldr	r4, [r1, r2]
   e0572:	58a9      	ldr	r1, [r5, r2]
   e0574:	428c      	cmp	r4, r1
   e0576:	d9f5      	bls.n	e0564 <mbedtls_mpi_cmp_abs+0x3a>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  1 );
   e0578:	2001      	movs	r0, #1
   e057a:	bd70      	pop	{r4, r5, r6, pc}
    if( j > i ) return( -1 );
   e057c:	f04f 30ff 	mov.w	r0, #4294967295
   e0580:	bd70      	pop	{r4, r5, r6, pc}
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    }

    return( 0 );
   e0582:	1c18      	adds	r0, r3, #0
   e0584:	bf18      	it	ne
   e0586:	2001      	movne	r0, #1
   e0588:	bd70      	pop	{r4, r5, r6, pc}
   e058a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   e058e:	3a01      	subs	r2, #1
   e0590:	0092      	lsls	r2, r2, #2
   e0592:	e7eb      	b.n	e056c <mbedtls_mpi_cmp_abs+0x42>
   e0594:	4618      	mov	r0, r3
   e0596:	bd70      	pop	{r4, r5, r6, pc}

000e0598 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
   e0598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e059c:	b085      	sub	sp, #20
   e059e:	4616      	mov	r6, r2
   e05a0:	9303      	str	r3, [sp, #12]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
   e05a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   e05a4:	685a      	ldr	r2, [r3, #4]
   e05a6:	6873      	ldr	r3, [r6, #4]
   e05a8:	3301      	adds	r3, #1
   e05aa:	429a      	cmp	r2, r3
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
   e05ac:	4681      	mov	r9, r0
   e05ae:	468b      	mov	fp, r1
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
   e05b0:	d351      	bcc.n	e0656 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xbe>
   e05b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   e05b4:	6898      	ldr	r0, [r3, #8]
   e05b6:	2800      	cmp	r0, #0
   e05b8:	d04d      	beq.n	e0656 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xbe>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
   e05ba:	0092      	lsls	r2, r2, #2
   e05bc:	2100      	movs	r1, #0
   e05be:	f006 fcec 	bl	e6f9a <memset>

    d = T->p;
   e05c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    n = N->n;
   e05c4:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
   e05c8:	689b      	ldr	r3, [r3, #8]
   e05ca:	9300      	str	r3, [sp, #0]
    n = N->n;
    m = ( B->n < n ) ? B->n : n;
   e05cc:	f8db 3004 	ldr.w	r3, [fp, #4]
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
   e05d0:	9d00      	ldr	r5, [sp, #0]
   e05d2:	4553      	cmp	r3, sl
   e05d4:	bf28      	it	cs
   e05d6:	4653      	movcs	r3, sl
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
   e05d8:	f10a 0701 	add.w	r7, sl, #1
   e05dc:	9302      	str	r3, [sp, #8]
   e05de:	00bf      	lsls	r7, r7, #2

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
   e05e0:	2400      	movs	r4, #0
   e05e2:	4554      	cmp	r4, sl
   e05e4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   e05e8:	d01b      	beq.n	e0622 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x8a>
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
   e05ea:	f8db 1008 	ldr.w	r1, [fp, #8]
    for( i = 0; i < n; i++ )
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
   e05ee:	f850 8024 	ldr.w	r8, [r0, r4, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
   e05f2:	682a      	ldr	r2, [r5, #0]
   e05f4:	680b      	ldr	r3, [r1, #0]

        mpi_mul_hlp( m, B->p, d, u0 );
   e05f6:	9802      	ldr	r0, [sp, #8]
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
   e05f8:	fb03 2308 	mla	r3, r3, r8, r2
   e05fc:	9a03      	ldr	r2, [sp, #12]
   e05fe:	4353      	muls	r3, r2
   e0600:	9301      	str	r3, [sp, #4]

        mpi_mul_hlp( m, B->p, d, u0 );
   e0602:	462a      	mov	r2, r5
   e0604:	4643      	mov	r3, r8
   e0606:	f7ff fc63 	bl	dfed0 <_ZL11mpi_mul_hlpjPmS_m>
        mpi_mul_hlp( n, N->p, d, u1 );
   e060a:	9b01      	ldr	r3, [sp, #4]
   e060c:	68b1      	ldr	r1, [r6, #8]
   e060e:	462a      	mov	r2, r5
   e0610:	4650      	mov	r0, sl
   e0612:	f7ff fc5d 	bl	dfed0 <_ZL11mpi_mul_hlpjPmS_m>

        *d++ = u0; d[n + 1] = 0;
   e0616:	f845 8b04 	str.w	r8, [r5], #4
   e061a:	2300      	movs	r3, #0
   e061c:	51eb      	str	r3, [r5, r7]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
   e061e:	3401      	adds	r4, #1
   e0620:	e7df      	b.n	e05e2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x4a>
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
   e0622:	9b00      	ldr	r3, [sp, #0]
   e0624:	1f39      	subs	r1, r7, #4
   e0626:	440b      	add	r3, r1
   e0628:	463a      	mov	r2, r7
   e062a:	4619      	mov	r1, r3
   e062c:	f006 fc8f 	bl	e6f4e <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
   e0630:	4631      	mov	r1, r6
   e0632:	4648      	mov	r0, r9
   e0634:	f7ff ff79 	bl	e052a <mbedtls_mpi_cmp_abs>
   e0638:	2800      	cmp	r0, #0
        mpi_sub_hlp( n, N->p, A->p );
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
   e063a:	bfb3      	iteet	lt
   e063c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
        mpi_sub_hlp( n, N->p, A->p );
   e063e:	f8d9 2008 	ldrge.w	r2, [r9, #8]
   e0642:	68b1      	ldrge	r1, [r6, #8]
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
   e0644:	689a      	ldrlt	r2, [r3, #8]
   e0646:	bfb8      	it	lt
   e0648:	f8d9 1008 	ldrlt.w	r1, [r9, #8]
   e064c:	4620      	mov	r0, r4
   e064e:	f7ff fc15 	bl	dfe7c <_ZL11mpi_sub_hlpjPmS_>

    return( 0 );
   e0652:	2000      	movs	r0, #0
   e0654:	e001      	b.n	e065a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xc2>
{
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   e0656:	f06f 0003 	mvn.w	r0, #3
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );

    return( 0 );
}
   e065a:	b005      	add	sp, #20
   e065c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e0660 <mbedtls_mpi_cmp_mpi>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
   e0660:	b570      	push	{r4, r5, r6, lr}
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
   e0662:	6843      	ldr	r3, [r0, #4]
   e0664:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   e0668:	3a01      	subs	r2, #1
   e066a:	0092      	lsls	r2, r2, #2
   e066c:	b12b      	cbz	r3, e067a <mbedtls_mpi_cmp_mpi+0x1a>
        if( X->p[i - 1] != 0 )
   e066e:	6884      	ldr	r4, [r0, #8]
   e0670:	58a4      	ldr	r4, [r4, r2]
   e0672:	3a04      	subs	r2, #4
   e0674:	b90c      	cbnz	r4, e067a <mbedtls_mpi_cmp_mpi+0x1a>
{
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
   e0676:	3b01      	subs	r3, #1
   e0678:	e7f8      	b.n	e066c <mbedtls_mpi_cmp_mpi+0xc>
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
   e067a:	684c      	ldr	r4, [r1, #4]
   e067c:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   e0680:	3a01      	subs	r2, #1
   e0682:	0092      	lsls	r2, r2, #2
   e0684:	b364      	cbz	r4, e06e0 <mbedtls_mpi_cmp_mpi+0x80>
        if( Y->p[j - 1] != 0 )
   e0686:	688d      	ldr	r5, [r1, #8]
   e0688:	58ae      	ldr	r6, [r5, r2]
   e068a:	3a04      	subs	r2, #4
   e068c:	b90e      	cbnz	r6, e0692 <mbedtls_mpi_cmp_mpi+0x32>

    for( i = X->n; i > 0; i-- )
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
   e068e:	3c01      	subs	r4, #1
   e0690:	e7f8      	b.n	e0684 <mbedtls_mpi_cmp_mpi+0x24>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  X->s );
   e0692:	429c      	cmp	r4, r3
   e0694:	d201      	bcs.n	e069a <mbedtls_mpi_cmp_mpi+0x3a>
   e0696:	6802      	ldr	r2, [r0, #0]
   e0698:	e025      	b.n	e06e6 <mbedtls_mpi_cmp_mpi+0x86>
   e069a:	6809      	ldr	r1, [r1, #0]
    if( j > i ) return( -Y->s );
   e069c:	d901      	bls.n	e06a2 <mbedtls_mpi_cmp_mpi+0x42>
   e069e:	424a      	negs	r2, r1
   e06a0:	e021      	b.n	e06e6 <mbedtls_mpi_cmp_mpi+0x86>

    if( X->s > 0 && Y->s < 0 ) return(  1 );
   e06a2:	6802      	ldr	r2, [r0, #0]
   e06a4:	2a00      	cmp	r2, #0
   e06a6:	dd01      	ble.n	e06ac <mbedtls_mpi_cmp_mpi+0x4c>
   e06a8:	2900      	cmp	r1, #0
   e06aa:	db14      	blt.n	e06d6 <mbedtls_mpi_cmp_mpi+0x76>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
   e06ac:	2900      	cmp	r1, #0
   e06ae:	dd01      	ble.n	e06b4 <mbedtls_mpi_cmp_mpi+0x54>
   e06b0:	2a00      	cmp	r2, #0
   e06b2:	db12      	blt.n	e06da <mbedtls_mpi_cmp_mpi+0x7a>
   e06b4:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
   e06b8:	3901      	subs	r1, #1
   e06ba:	0089      	lsls	r1, r1, #2

    for( ; i > 0; i-- )
   e06bc:	b193      	cbz	r3, e06e4 <mbedtls_mpi_cmp_mpi+0x84>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
   e06be:	6884      	ldr	r4, [r0, #8]
   e06c0:	5866      	ldr	r6, [r4, r1]
   e06c2:	586c      	ldr	r4, [r5, r1]
   e06c4:	42a6      	cmp	r6, r4
   e06c6:	d80e      	bhi.n	e06e6 <mbedtls_mpi_cmp_mpi+0x86>
   e06c8:	f1a1 0104 	sub.w	r1, r1, #4
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
   e06cc:	d201      	bcs.n	e06d2 <mbedtls_mpi_cmp_mpi+0x72>
   e06ce:	4252      	negs	r2, r2
   e06d0:	e009      	b.n	e06e6 <mbedtls_mpi_cmp_mpi+0x86>
    if( j > i ) return( -Y->s );

    if( X->s > 0 && Y->s < 0 ) return(  1 );
    if( Y->s > 0 && X->s < 0 ) return( -1 );

    for( ; i > 0; i-- )
   e06d2:	3b01      	subs	r3, #1
   e06d4:	e7f2      	b.n	e06bc <mbedtls_mpi_cmp_mpi+0x5c>
        return( 0 );

    if( i > j ) return(  X->s );
    if( j > i ) return( -Y->s );

    if( X->s > 0 && Y->s < 0 ) return(  1 );
   e06d6:	2201      	movs	r2, #1
   e06d8:	e005      	b.n	e06e6 <mbedtls_mpi_cmp_mpi+0x86>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
   e06da:	f04f 32ff 	mov.w	r2, #4294967295
   e06de:	e002      	b.n	e06e6 <mbedtls_mpi_cmp_mpi+0x86>

    for( j = Y->n; j > 0; j-- )
        if( Y->p[j - 1] != 0 )
            break;

    if( i == 0 && j == 0 )
   e06e0:	2b00      	cmp	r3, #0
   e06e2:	d1d8      	bne.n	e0696 <mbedtls_mpi_cmp_mpi+0x36>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    }

    return( 0 );
   e06e4:	461a      	mov	r2, r3
}
   e06e6:	4610      	mov	r0, r2
   e06e8:	bd70      	pop	{r4, r5, r6, pc}

000e06ea <mbedtls_mpi_cmp_int>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
   e06ea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );

    *p  = ( z < 0 ) ? -z : z;
   e06ec:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
   e06f0:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
   e06f4:	2900      	cmp	r1, #0
{
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );

    *p  = ( z < 0 ) ? -z : z;
   e06f6:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
   e06f8:	bfb4      	ite	lt
   e06fa:	f04f 33ff 	movlt.w	r3, #4294967295
   e06fe:	2301      	movge	r3, #1
   e0700:	9301      	str	r3, [sp, #4]
    Y.n = 1;
    Y.p = p;

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
   e0702:	a901      	add	r1, sp, #4
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );

    *p  = ( z < 0 ) ? -z : z;
    Y.s = ( z < 0 ) ? -1 : 1;
    Y.n = 1;
   e0704:	2301      	movs	r3, #1
   e0706:	9302      	str	r3, [sp, #8]
    Y.p = p;
   e0708:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
   e070c:	f7ff ffa8 	bl	e0660 <mbedtls_mpi_cmp_mpi>
}
   e0710:	b005      	add	sp, #20
   e0712:	f85d fb04 	ldr.w	pc, [sp], #4

000e0716 <mbedtls_mpi_add_abs>:
    mbedtls_mpi_uint *o, *p, c, tmp;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( X == B )
   e0716:	4290      	cmp	r0, r2

/*
 * Unsigned addition: X = |A| + |B|  (HAC 14.7)
 */
int mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e0718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e071c:	4606      	mov	r6, r0
   e071e:	4615      	mov	r5, r2
    mbedtls_mpi_uint *o, *p, c, tmp;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( X == B )
   e0720:	d006      	beq.n	e0730 <mbedtls_mpi_add_abs+0x1a>
    {
        const mbedtls_mpi *T = A; A = X; B = T;
    }

    if( X != A )
   e0722:	4288      	cmp	r0, r1
   e0724:	d005      	beq.n	e0732 <mbedtls_mpi_add_abs+0x1c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
   e0726:	f7ff fd34 	bl	e0192 <mbedtls_mpi_copy>
   e072a:	4607      	mov	r7, r0
   e072c:	b108      	cbz	r0, e0732 <mbedtls_mpi_add_abs+0x1c>
   e072e:	e049      	b.n	e07c4 <mbedtls_mpi_add_abs+0xae>
   e0730:	460d      	mov	r5, r1

    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;
   e0732:	2301      	movs	r3, #1
   e0734:	6033      	str	r3, [r6, #0]

    for( j = B->n; j > 0; j-- )
   e0736:	686c      	ldr	r4, [r5, #4]
   e0738:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   e073c:	3b01      	subs	r3, #1
   e073e:	009b      	lsls	r3, r3, #2
   e0740:	b12c      	cbz	r4, e074e <mbedtls_mpi_add_abs+0x38>
        if( B->p[j - 1] != 0 )
   e0742:	68aa      	ldr	r2, [r5, #8]
   e0744:	58d2      	ldr	r2, [r2, r3]
   e0746:	3b04      	subs	r3, #4
   e0748:	b90a      	cbnz	r2, e074e <mbedtls_mpi_add_abs+0x38>
    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;

    for( j = B->n; j > 0; j-- )
   e074a:	3c01      	subs	r4, #1
   e074c:	e7f8      	b.n	e0740 <mbedtls_mpi_add_abs+0x2a>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
   e074e:	4621      	mov	r1, r4
   e0750:	4630      	mov	r0, r6
   e0752:	f7ff fcb6 	bl	e00c2 <mbedtls_mpi_grow>
   e0756:	4607      	mov	r7, r0
   e0758:	2800      	cmp	r0, #0
   e075a:	d133      	bne.n	e07c4 <mbedtls_mpi_add_abs+0xae>

    o = B->p; p = X->p; c = 0;
   e075c:	68b3      	ldr	r3, [r6, #8]
   e075e:	f8d5 c008 	ldr.w	ip, [r5, #8]
   e0762:	4618      	mov	r0, r3
   e0764:	463d      	mov	r5, r7

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
   e0766:	4639      	mov	r1, r7
   e0768:	42a1      	cmp	r1, r4
   e076a:	d00f      	beq.n	e078c <mbedtls_mpi_add_abs+0x76>
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
   e076c:	6802      	ldr	r2, [r0, #0]
    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
    {
        tmp= *o;
   e076e:	f85c e021 	ldr.w	lr, [ip, r1, lsl #2]
        *p +=  c; c  = ( *p <  c );
   e0772:	18ad      	adds	r5, r5, r2
        *p += tmp; c += ( *p < tmp );
   e0774:	4475      	add	r5, lr
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
   e0776:	bf2c      	ite	cs
   e0778:	2201      	movcs	r2, #1
   e077a:	2200      	movcc	r2, #0
        *p += tmp; c += ( *p < tmp );
   e077c:	f840 5b04 	str.w	r5, [r0], #4
    o = B->p; p = X->p; c = 0;

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
   e0780:	3101      	adds	r1, #1
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
   e0782:	45ae      	cmp	lr, r5
   e0784:	bf94      	ite	ls
   e0786:	4615      	movls	r5, r2
   e0788:	1c55      	addhi	r5, r2, #1
    o = B->p; p = X->p; c = 0;

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
   e078a:	e7ed      	b.n	e0768 <mbedtls_mpi_add_abs+0x52>
   e078c:	ea4f 0884 	mov.w	r8, r4, lsl #2
   e0790:	4443      	add	r3, r8
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
    }

    while( c != 0 )
   e0792:	b1bd      	cbz	r5, e07c4 <mbedtls_mpi_add_abs+0xae>
    {
        if( i >= X->n )
   e0794:	6872      	ldr	r2, [r6, #4]
   e0796:	4294      	cmp	r4, r2
   e0798:	f104 0401 	add.w	r4, r4, #1
   e079c:	d306      	bcc.n	e07ac <mbedtls_mpi_add_abs+0x96>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
   e079e:	4621      	mov	r1, r4
   e07a0:	4630      	mov	r0, r6
   e07a2:	f7ff fc8e 	bl	e00c2 <mbedtls_mpi_grow>
   e07a6:	b960      	cbnz	r0, e07c2 <mbedtls_mpi_add_abs+0xac>
            p = X->p + i;
   e07a8:	68b3      	ldr	r3, [r6, #8]
   e07aa:	4443      	add	r3, r8
        }

        *p += c; c = ( *p < c ); i++; p++;
   e07ac:	681a      	ldr	r2, [r3, #0]
   e07ae:	442a      	add	r2, r5
   e07b0:	4295      	cmp	r5, r2
   e07b2:	f843 2b04 	str.w	r2, [r3], #4
   e07b6:	bf94      	ite	ls
   e07b8:	2500      	movls	r5, #0
   e07ba:	2501      	movhi	r5, #1
   e07bc:	f108 0804 	add.w	r8, r8, #4
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
    }

    while( c != 0 )
   e07c0:	e7e7      	b.n	e0792 <mbedtls_mpi_add_abs+0x7c>
    {
        if( i >= X->n )
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
   e07c2:	4607      	mov	r7, r0
    }

cleanup:

    return( ret );
}
   e07c4:	4638      	mov	r0, r7
   e07c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e07ca <mbedtls_mpi_sub_abs>:

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e07ca:	b5f0      	push	{r4, r5, r6, r7, lr}
   e07cc:	460f      	mov	r7, r1
   e07ce:	b085      	sub	sp, #20
   e07d0:	4606      	mov	r6, r0
    size_t n;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   e07d2:	4611      	mov	r1, r2
   e07d4:	4638      	mov	r0, r7

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e07d6:	4615      	mov	r5, r2
    size_t n;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   e07d8:	f7ff fea7 	bl	e052a <mbedtls_mpi_cmp_abs>
   e07dc:	2800      	cmp	r0, #0
   e07de:	db30      	blt.n	e0842 <mbedtls_mpi_sub_abs+0x78>
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e07e0:	2301      	movs	r3, #1
   e07e2:	9301      	str	r3, [sp, #4]
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    mbedtls_mpi_init( &TB );

    if( X == B )
   e07e4:	42b5      	cmp	r5, r6
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
   e07e6:	f04f 0300 	mov.w	r3, #0
   e07ea:	9302      	str	r3, [sp, #8]
    X->p = NULL;
   e07ec:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    mbedtls_mpi_init( &TB );

    if( X == B )
   e07ee:	d106      	bne.n	e07fe <mbedtls_mpi_sub_abs+0x34>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
   e07f0:	4629      	mov	r1, r5
   e07f2:	a801      	add	r0, sp, #4
   e07f4:	f7ff fccd 	bl	e0192 <mbedtls_mpi_copy>
   e07f8:	4604      	mov	r4, r0
   e07fa:	b9e8      	cbnz	r0, e0838 <mbedtls_mpi_sub_abs+0x6e>
        B = &TB;
   e07fc:	ad01      	add	r5, sp, #4
    }

    if( X != A )
   e07fe:	42b7      	cmp	r7, r6
   e0800:	d107      	bne.n	e0812 <mbedtls_mpi_sub_abs+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );

    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;
   e0802:	2301      	movs	r3, #1
   e0804:	6033      	str	r3, [r6, #0]

    ret = 0;

    for( n = B->n; n > 0; n-- )
   e0806:	6868      	ldr	r0, [r5, #4]
   e0808:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   e080c:	3b01      	subs	r3, #1
   e080e:	009b      	lsls	r3, r3, #2
   e0810:	e00b      	b.n	e082a <mbedtls_mpi_sub_abs+0x60>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
        B = &TB;
    }

    if( X != A )
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
   e0812:	4639      	mov	r1, r7
   e0814:	4630      	mov	r0, r6
   e0816:	f7ff fcbc 	bl	e0192 <mbedtls_mpi_copy>
   e081a:	4604      	mov	r4, r0
   e081c:	b960      	cbnz	r0, e0838 <mbedtls_mpi_sub_abs+0x6e>
   e081e:	e7f0      	b.n	e0802 <mbedtls_mpi_sub_abs+0x38>
    X->s = 1;

    ret = 0;

    for( n = B->n; n > 0; n-- )
        if( B->p[n - 1] != 0 )
   e0820:	68aa      	ldr	r2, [r5, #8]
   e0822:	58d2      	ldr	r2, [r2, r3]
   e0824:	3b04      	subs	r3, #4
   e0826:	b912      	cbnz	r2, e082e <mbedtls_mpi_sub_abs+0x64>
     */
    X->s = 1;

    ret = 0;

    for( n = B->n; n > 0; n-- )
   e0828:	3801      	subs	r0, #1
   e082a:	2800      	cmp	r0, #0
   e082c:	d1f8      	bne.n	e0820 <mbedtls_mpi_sub_abs+0x56>
        if( B->p[n - 1] != 0 )
            break;

    mpi_sub_hlp( n, B->p, X->p );
   e082e:	68b2      	ldr	r2, [r6, #8]
   e0830:	68a9      	ldr	r1, [r5, #8]
   e0832:	f7ff fb23 	bl	dfe7c <_ZL11mpi_sub_hlpjPmS_>
    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;

    ret = 0;
   e0836:	2400      	movs	r4, #0

    mpi_sub_hlp( n, B->p, X->p );

cleanup:

    mbedtls_mpi_free( &TB );
   e0838:	a801      	add	r0, sp, #4
   e083a:	f7ff fc30 	bl	e009e <mbedtls_mpi_free>

    return( ret );
   e083e:	4620      	mov	r0, r4
   e0840:	e001      	b.n	e0846 <mbedtls_mpi_sub_abs+0x7c>
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
   e0842:	f06f 0009 	mvn.w	r0, #9
cleanup:

    mbedtls_mpi_free( &TB );

    return( ret );
}
   e0846:	b005      	add	sp, #20
   e0848:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e084a <mbedtls_mpi_add_mpi>:

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e084a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
   e084c:	680c      	ldr	r4, [r1, #0]
    if( A->s * B->s < 0 )
   e084e:	6813      	ldr	r3, [r2, #0]
   e0850:	4363      	muls	r3, r4

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e0852:	4605      	mov	r5, r0
   e0854:	460f      	mov	r7, r1
   e0856:	4616      	mov	r6, r2
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
    if( A->s * B->s < 0 )
   e0858:	d513      	bpl.n	e0882 <mbedtls_mpi_add_mpi+0x38>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
   e085a:	4611      	mov	r1, r2
   e085c:	4638      	mov	r0, r7
   e085e:	f7ff fe64 	bl	e052a <mbedtls_mpi_cmp_abs>
   e0862:	2800      	cmp	r0, #0
   e0864:	db05      	blt.n	e0872 <mbedtls_mpi_add_mpi+0x28>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
   e0866:	4632      	mov	r2, r6
   e0868:	4639      	mov	r1, r7
   e086a:	4628      	mov	r0, r5
   e086c:	f7ff ffad 	bl	e07ca <mbedtls_mpi_sub_abs>
   e0870:	e009      	b.n	e0886 <mbedtls_mpi_add_mpi+0x3c>
            X->s =  s;
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
   e0872:	463a      	mov	r2, r7
   e0874:	4631      	mov	r1, r6
   e0876:	4628      	mov	r0, r5
   e0878:	f7ff ffa7 	bl	e07ca <mbedtls_mpi_sub_abs>
   e087c:	b928      	cbnz	r0, e088a <mbedtls_mpi_add_mpi+0x40>
            X->s = -s;
   e087e:	4264      	negs	r4, r4
   e0880:	e002      	b.n	e0888 <mbedtls_mpi_add_mpi+0x3e>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
   e0882:	f7ff ff48 	bl	e0716 <mbedtls_mpi_add_abs>
   e0886:	b900      	cbnz	r0, e088a <mbedtls_mpi_add_mpi+0x40>
        X->s = s;
   e0888:	602c      	str	r4, [r5, #0]
    }

cleanup:

    return( ret );
}
   e088a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e088c <mbedtls_mpi_sub_mpi>:

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e088c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
   e088e:	680c      	ldr	r4, [r1, #0]
    if( A->s * B->s > 0 )
   e0890:	6813      	ldr	r3, [r2, #0]
   e0892:	4363      	muls	r3, r4
   e0894:	2b00      	cmp	r3, #0

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e0896:	4605      	mov	r5, r0
   e0898:	460f      	mov	r7, r1
   e089a:	4616      	mov	r6, r2
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
    if( A->s * B->s > 0 )
   e089c:	dd13      	ble.n	e08c6 <mbedtls_mpi_sub_mpi+0x3a>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
   e089e:	4611      	mov	r1, r2
   e08a0:	4638      	mov	r0, r7
   e08a2:	f7ff fe42 	bl	e052a <mbedtls_mpi_cmp_abs>
   e08a6:	2800      	cmp	r0, #0
   e08a8:	db05      	blt.n	e08b6 <mbedtls_mpi_sub_mpi+0x2a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
   e08aa:	4632      	mov	r2, r6
   e08ac:	4639      	mov	r1, r7
   e08ae:	4628      	mov	r0, r5
   e08b0:	f7ff ff8b 	bl	e07ca <mbedtls_mpi_sub_abs>
   e08b4:	e009      	b.n	e08ca <mbedtls_mpi_sub_mpi+0x3e>
            X->s =  s;
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
   e08b6:	463a      	mov	r2, r7
   e08b8:	4631      	mov	r1, r6
   e08ba:	4628      	mov	r0, r5
   e08bc:	f7ff ff85 	bl	e07ca <mbedtls_mpi_sub_abs>
   e08c0:	b928      	cbnz	r0, e08ce <mbedtls_mpi_sub_mpi+0x42>
            X->s = -s;
   e08c2:	4264      	negs	r4, r4
   e08c4:	e002      	b.n	e08cc <mbedtls_mpi_sub_mpi+0x40>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
   e08c6:	f7ff ff26 	bl	e0716 <mbedtls_mpi_add_abs>
   e08ca:	b900      	cbnz	r0, e08ce <mbedtls_mpi_sub_mpi+0x42>
        X->s = s;
   e08cc:	602c      	str	r4, [r5, #0]
    }

cleanup:

    return( ret );
}
   e08ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e08d0 <mbedtls_mpi_add_int>:

/*
 * Signed addition: X = A + b
 */
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
   e08d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
   e08d2:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
   e08d6:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
   e08da:	2a00      	cmp	r2, #0
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
   e08dc:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
   e08de:	bfb4      	ite	lt
   e08e0:	f04f 33ff 	movlt.w	r3, #4294967295
   e08e4:	2301      	movge	r3, #1
   e08e6:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    _B.p = p;

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
   e08e8:	aa01      	add	r2, sp, #4
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
    _B.s = ( b < 0 ) ? -1 : 1;
    _B.n = 1;
   e08ea:	2301      	movs	r3, #1
   e08ec:	9302      	str	r3, [sp, #8]
    _B.p = p;
   e08ee:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
   e08f2:	f7ff ffaa 	bl	e084a <mbedtls_mpi_add_mpi>
}
   e08f6:	b005      	add	sp, #20
   e08f8:	f85d fb04 	ldr.w	pc, [sp], #4

000e08fc <mbedtls_mpi_sub_int>:

/*
 * Signed subtraction: X = A - b
 */
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
   e08fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
   e08fe:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
   e0902:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
   e0906:	2a00      	cmp	r2, #0
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
   e0908:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
   e090a:	bfb4      	ite	lt
   e090c:	f04f 33ff 	movlt.w	r3, #4294967295
   e0910:	2301      	movge	r3, #1
   e0912:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    _B.p = p;

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
   e0914:	aa01      	add	r2, sp, #4
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
    _B.s = ( b < 0 ) ? -1 : 1;
    _B.n = 1;
   e0916:	2301      	movs	r3, #1
   e0918:	9302      	str	r3, [sp, #8]
    _B.p = p;
   e091a:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
   e091e:	f7ff ffb5 	bl	e088c <mbedtls_mpi_sub_mpi>
}
   e0922:	b005      	add	sp, #20
   e0924:	f85d fb04 	ldr.w	pc, [sp], #4

000e0928 <mbedtls_mpi_mul_mpi>:

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e0928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e092c:	b086      	sub	sp, #24
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
   e092e:	2300      	movs	r3, #0

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e0930:	4615      	mov	r5, r2
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
   e0932:	4288      	cmp	r0, r1
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
   e0934:	f04f 0201 	mov.w	r2, #1

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e0938:	4681      	mov	r9, r0
   e093a:	460e      	mov	r6, r1
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
   e093c:	e88d 000c 	stmia.w	sp, {r2, r3}
    X->p = NULL;
   e0940:	9302      	str	r3, [sp, #8]
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e0942:	9203      	str	r2, [sp, #12]
    X->n = 0;
   e0944:	9304      	str	r3, [sp, #16]
    X->p = NULL;
   e0946:	9305      	str	r3, [sp, #20]
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
   e0948:	d106      	bne.n	e0958 <mbedtls_mpi_mul_mpi+0x30>
   e094a:	4668      	mov	r0, sp
   e094c:	f7ff fc21 	bl	e0192 <mbedtls_mpi_copy>
   e0950:	4604      	mov	r4, r0
   e0952:	2800      	cmp	r0, #0
   e0954:	d14d      	bne.n	e09f2 <mbedtls_mpi_mul_mpi+0xca>
   e0956:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
   e0958:	45a9      	cmp	r9, r5
   e095a:	d107      	bne.n	e096c <mbedtls_mpi_mul_mpi+0x44>
   e095c:	4649      	mov	r1, r9
   e095e:	a803      	add	r0, sp, #12
   e0960:	f7ff fc17 	bl	e0192 <mbedtls_mpi_copy>
   e0964:	4604      	mov	r4, r0
   e0966:	2800      	cmp	r0, #0
   e0968:	d143      	bne.n	e09f2 <mbedtls_mpi_mul_mpi+0xca>
   e096a:	ad03      	add	r5, sp, #12

    for( i = A->n; i > 0; i-- )
   e096c:	f8d6 a004 	ldr.w	sl, [r6, #4]
   e0970:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
   e0974:	3b01      	subs	r3, #1
   e0976:	009b      	lsls	r3, r3, #2
   e0978:	f1ba 0f00 	cmp.w	sl, #0
   e097c:	d006      	beq.n	e098c <mbedtls_mpi_mul_mpi+0x64>
        if( A->p[i - 1] != 0 )
   e097e:	68b2      	ldr	r2, [r6, #8]
   e0980:	58d2      	ldr	r2, [r2, r3]
   e0982:	3b04      	subs	r3, #4
   e0984:	b912      	cbnz	r2, e098c <mbedtls_mpi_mul_mpi+0x64>
    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }

    for( i = A->n; i > 0; i-- )
   e0986:	f10a 3aff 	add.w	sl, sl, #4294967295
   e098a:	e7f5      	b.n	e0978 <mbedtls_mpi_mul_mpi+0x50>
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
   e098c:	686f      	ldr	r7, [r5, #4]
   e098e:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
   e0992:	3b01      	subs	r3, #1
   e0994:	009b      	lsls	r3, r3, #2
   e0996:	b12f      	cbz	r7, e09a4 <mbedtls_mpi_mul_mpi+0x7c>
        if( B->p[j - 1] != 0 )
   e0998:	68aa      	ldr	r2, [r5, #8]
   e099a:	58d2      	ldr	r2, [r2, r3]
   e099c:	3b04      	subs	r3, #4
   e099e:	b90a      	cbnz	r2, e09a4 <mbedtls_mpi_mul_mpi+0x7c>

    for( i = A->n; i > 0; i-- )
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
   e09a0:	3f01      	subs	r7, #1
   e09a2:	e7f8      	b.n	e0996 <mbedtls_mpi_mul_mpi+0x6e>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
   e09a4:	eb0a 0107 	add.w	r1, sl, r7
   e09a8:	4648      	mov	r0, r9
   e09aa:	f7ff fb8a 	bl	e00c2 <mbedtls_mpi_grow>
   e09ae:	4604      	mov	r4, r0
   e09b0:	b9f8      	cbnz	r0, e09f2 <mbedtls_mpi_mul_mpi+0xca>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
   e09b2:	4601      	mov	r1, r0
   e09b4:	4648      	mov	r0, r9
   e09b6:	f7ff fc4d 	bl	e0254 <mbedtls_mpi_lset>
   e09ba:	4604      	mov	r4, r0
   e09bc:	b9c8      	cbnz	r0, e09f2 <mbedtls_mpi_mul_mpi+0xca>
   e09be:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
   e09c2:	f108 38ff 	add.w	r8, r8, #4294967295
   e09c6:	ea4f 0888 	mov.w	r8, r8, lsl #2

    for( ; j > 0; j-- )
   e09ca:	b16f      	cbz	r7, e09e8 <mbedtls_mpi_mul_mpi+0xc0>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
   e09cc:	68ab      	ldr	r3, [r5, #8]
   e09ce:	f8d9 2008 	ldr.w	r2, [r9, #8]
   e09d2:	f853 3008 	ldr.w	r3, [r3, r8]
   e09d6:	68b1      	ldr	r1, [r6, #8]
   e09d8:	4442      	add	r2, r8
   e09da:	4650      	mov	r0, sl
   e09dc:	f7ff fa78 	bl	dfed0 <_ZL11mpi_mul_hlpjPmS_m>
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( ; j > 0; j-- )
   e09e0:	3f01      	subs	r7, #1
   e09e2:	f1a8 0804 	sub.w	r8, r8, #4
   e09e6:	e7f0      	b.n	e09ca <mbedtls_mpi_mul_mpi+0xa2>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );

    X->s = A->s * B->s;
   e09e8:	6832      	ldr	r2, [r6, #0]
   e09ea:	682b      	ldr	r3, [r5, #0]
   e09ec:	4353      	muls	r3, r2
   e09ee:	f8c9 3000 	str.w	r3, [r9]

cleanup:

    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
   e09f2:	a803      	add	r0, sp, #12
   e09f4:	f7ff fb53 	bl	e009e <mbedtls_mpi_free>
   e09f8:	4668      	mov	r0, sp
   e09fa:	f7ff fb50 	bl	e009e <mbedtls_mpi_free>

    return( ret );
}
   e09fe:	4620      	mov	r0, r4
   e0a00:	b006      	add	sp, #24
   e0a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000e0a06 <mbedtls_mpi_mul_int>:

/*
 * Baseline multiplication: X = A * b
 */
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
   e0a06:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    _B.s = 1;
   e0a08:	2301      	movs	r3, #1
    _B.n = 1;
    _B.p = p;
    p[0] = b;
   e0a0a:	9200      	str	r2, [sp, #0]

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
   e0a0c:	aa01      	add	r2, sp, #4
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    _B.s = 1;
   e0a0e:	9301      	str	r3, [sp, #4]
    _B.n = 1;
   e0a10:	9302      	str	r3, [sp, #8]
    _B.p = p;
   e0a12:	f8cd d00c 	str.w	sp, [sp, #12]
    p[0] = b;

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
   e0a16:	f7ff ff87 	bl	e0928 <mbedtls_mpi_mul_mpi>
}
   e0a1a:	b005      	add	sp, #20
   e0a1c:	f85d fb04 	ldr.w	pc, [sp], #4

000e0a20 <mbedtls_mpi_div_mpi>:
/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A,
                         const mbedtls_mpi *B )
{
   e0a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e0a24:	b09b      	sub	sp, #108	; 0x6c
   e0a26:	460f      	mov	r7, r1
   e0a28:	9001      	str	r0, [sp, #4]
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
   e0a2a:	2100      	movs	r1, #0
   e0a2c:	4618      	mov	r0, r3
/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A,
                         const mbedtls_mpi *B )
{
   e0a2e:	4690      	mov	r8, r2
   e0a30:	9304      	str	r3, [sp, #16]
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
   e0a32:	f7ff fe5a 	bl	e06ea <mbedtls_mpi_cmp_int>
   e0a36:	2800      	cmp	r0, #0
   e0a38:	f000 81ad 	beq.w	e0d96 <mbedtls_mpi_div_mpi+0x376>
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
   e0a3c:	2400      	movs	r4, #0
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e0a3e:	2501      	movs	r5, #1
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   e0a40:	9904      	ldr	r1, [sp, #16]
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e0a42:	950b      	str	r5, [sp, #44]	; 0x2c
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   e0a44:	4640      	mov	r0, r8
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
   e0a46:	940c      	str	r4, [sp, #48]	; 0x30
    X->p = NULL;
   e0a48:	940d      	str	r4, [sp, #52]	; 0x34
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e0a4a:	950e      	str	r5, [sp, #56]	; 0x38
    X->n = 0;
   e0a4c:	940f      	str	r4, [sp, #60]	; 0x3c
    X->p = NULL;
   e0a4e:	9410      	str	r4, [sp, #64]	; 0x40
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e0a50:	9511      	str	r5, [sp, #68]	; 0x44
    X->n = 0;
   e0a52:	9412      	str	r4, [sp, #72]	; 0x48
    X->p = NULL;
   e0a54:	9413      	str	r4, [sp, #76]	; 0x4c
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e0a56:	9514      	str	r5, [sp, #80]	; 0x50
    X->n = 0;
   e0a58:	9415      	str	r4, [sp, #84]	; 0x54
    X->p = NULL;
   e0a5a:	9416      	str	r4, [sp, #88]	; 0x58
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e0a5c:	9517      	str	r5, [sp, #92]	; 0x5c
    X->n = 0;
   e0a5e:	9418      	str	r4, [sp, #96]	; 0x60
    X->p = NULL;
   e0a60:	9419      	str	r4, [sp, #100]	; 0x64
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   e0a62:	f7ff fd62 	bl	e052a <mbedtls_mpi_cmp_abs>
   e0a66:	42a0      	cmp	r0, r4
   e0a68:	da16      	bge.n	e0a98 <mbedtls_mpi_div_mpi+0x78>
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
   e0a6a:	9b01      	ldr	r3, [sp, #4]
   e0a6c:	b90b      	cbnz	r3, e0a72 <mbedtls_mpi_div_mpi+0x52>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
   e0a6e:	b94f      	cbnz	r7, e0a84 <mbedtls_mpi_div_mpi+0x64>
   e0a70:	e010      	b.n	e0a94 <mbedtls_mpi_div_mpi+0x74>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
   e0a72:	4621      	mov	r1, r4
   e0a74:	9801      	ldr	r0, [sp, #4]
   e0a76:	f7ff fbed 	bl	e0254 <mbedtls_mpi_lset>
   e0a7a:	4604      	mov	r4, r0
   e0a7c:	2800      	cmp	r0, #0
   e0a7e:	f040 8179 	bne.w	e0d74 <mbedtls_mpi_div_mpi+0x354>
   e0a82:	e7f4      	b.n	e0a6e <mbedtls_mpi_div_mpi+0x4e>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
   e0a84:	4641      	mov	r1, r8
   e0a86:	4638      	mov	r0, r7
   e0a88:	f7ff fb83 	bl	e0192 <mbedtls_mpi_copy>
   e0a8c:	4604      	mov	r4, r0
   e0a8e:	2800      	cmp	r0, #0
   e0a90:	f040 8170 	bne.w	e0d74 <mbedtls_mpi_div_mpi+0x354>
        return( 0 );
   e0a94:	2000      	movs	r0, #0
   e0a96:	e180      	b.n	e0d9a <mbedtls_mpi_div_mpi+0x37a>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
   e0a98:	4641      	mov	r1, r8
   e0a9a:	a80b      	add	r0, sp, #44	; 0x2c
   e0a9c:	f7ff fb79 	bl	e0192 <mbedtls_mpi_copy>
   e0aa0:	4604      	mov	r4, r0
   e0aa2:	2800      	cmp	r0, #0
   e0aa4:	f040 8166 	bne.w	e0d74 <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
   e0aa8:	ae0e      	add	r6, sp, #56	; 0x38
   e0aaa:	9904      	ldr	r1, [sp, #16]
   e0aac:	4630      	mov	r0, r6
   e0aae:	f7ff fb70 	bl	e0192 <mbedtls_mpi_copy>
   e0ab2:	4604      	mov	r4, r0
   e0ab4:	2800      	cmp	r0, #0
   e0ab6:	f040 815d 	bne.w	e0d74 <mbedtls_mpi_div_mpi+0x354>
    X.s = Y.s = 1;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
   e0aba:	f8d8 1004 	ldr.w	r1, [r8, #4]
        return( 0 );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    X.s = Y.s = 1;
   e0abe:	950e      	str	r5, [sp, #56]	; 0x38

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
   e0ac0:	3102      	adds	r1, #2
   e0ac2:	a811      	add	r0, sp, #68	; 0x44
        return( 0 );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    X.s = Y.s = 1;
   e0ac4:	950b      	str	r5, [sp, #44]	; 0x2c

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
   e0ac6:	f7ff fafc 	bl	e00c2 <mbedtls_mpi_grow>
   e0aca:	4604      	mov	r4, r0
   e0acc:	2800      	cmp	r0, #0
   e0ace:	f040 8151 	bne.w	e0d74 <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
   e0ad2:	4601      	mov	r1, r0
   e0ad4:	a811      	add	r0, sp, #68	; 0x44
   e0ad6:	f7ff fbbd 	bl	e0254 <mbedtls_mpi_lset>
   e0ada:	4604      	mov	r4, r0
   e0adc:	2800      	cmp	r0, #0
   e0ade:	f040 8149 	bne.w	e0d74 <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
   e0ae2:	2102      	movs	r1, #2
   e0ae4:	a814      	add	r0, sp, #80	; 0x50
   e0ae6:	f7ff faec 	bl	e00c2 <mbedtls_mpi_grow>
   e0aea:	4604      	mov	r4, r0
   e0aec:	2800      	cmp	r0, #0
   e0aee:	f040 8141 	bne.w	e0d74 <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
   e0af2:	2103      	movs	r1, #3
   e0af4:	a817      	add	r0, sp, #92	; 0x5c
   e0af6:	f7ff fae4 	bl	e00c2 <mbedtls_mpi_grow>
   e0afa:	4604      	mov	r4, r0
   e0afc:	2800      	cmp	r0, #0
   e0afe:	f040 8139 	bne.w	e0d74 <mbedtls_mpi_div_mpi+0x354>

    k = mbedtls_mpi_bitlen( &Y ) % biL;
   e0b02:	4630      	mov	r0, r6
   e0b04:	f7ff fbec 	bl	e02e0 <mbedtls_mpi_bitlen>
   e0b08:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
   e0b0c:	281f      	cmp	r0, #31
   e0b0e:	d013      	beq.n	e0b38 <mbedtls_mpi_div_mpi+0x118>
    {
        k = biL - 1 - k;
   e0b10:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
   e0b14:	4619      	mov	r1, r3
   e0b16:	a80b      	add	r0, sp, #44	; 0x2c
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );

    k = mbedtls_mpi_bitlen( &Y ) % biL;
    if( k < biL - 1 )
    {
        k = biL - 1 - k;
   e0b18:	9302      	str	r3, [sp, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
   e0b1a:	f7ff fc73 	bl	e0404 <mbedtls_mpi_shift_l>
   e0b1e:	4604      	mov	r4, r0
   e0b20:	2800      	cmp	r0, #0
   e0b22:	f040 8127 	bne.w	e0d74 <mbedtls_mpi_div_mpi+0x354>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
   e0b26:	9902      	ldr	r1, [sp, #8]
   e0b28:	4630      	mov	r0, r6
   e0b2a:	f7ff fc6b 	bl	e0404 <mbedtls_mpi_shift_l>
   e0b2e:	4604      	mov	r4, r0
   e0b30:	2800      	cmp	r0, #0
   e0b32:	f040 811f 	bne.w	e0d74 <mbedtls_mpi_div_mpi+0x354>
   e0b36:	e000      	b.n	e0b3a <mbedtls_mpi_div_mpi+0x11a>
    }
    else k = 0;
   e0b38:	9402      	str	r4, [sp, #8]

    n = X.n - 1;
   e0b3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    t = Y.n - 1;
   e0b3c:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    }
    else k = 0;

    n = X.n - 1;
   e0b40:	f105 39ff 	add.w	r9, r5, #4294967295
    t = Y.n - 1;
   e0b44:	f10a 33ff 	add.w	r3, sl, #4294967295
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
   e0b48:	ebc3 0b09 	rsb	fp, r3, r9
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    }
    else k = 0;

    n = X.n - 1;
    t = Y.n - 1;
   e0b4c:	9300      	str	r3, [sp, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
   e0b4e:	ea4f 134b 	mov.w	r3, fp, lsl #5
   e0b52:	4619      	mov	r1, r3
   e0b54:	4630      	mov	r0, r6
   e0b56:	9303      	str	r3, [sp, #12]
   e0b58:	f7ff fc54 	bl	e0404 <mbedtls_mpi_shift_l>
   e0b5c:	4604      	mov	r4, r0
   e0b5e:	2800      	cmp	r0, #0
   e0b60:	f040 8108 	bne.w	e0d74 <mbedtls_mpi_div_mpi+0x354>

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    {
        Z.p[n - t]++;
   e0b64:	ea4f 0b8b 	mov.w	fp, fp, lsl #2

    n = X.n - 1;
    t = Y.n - 1;
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
   e0b68:	4631      	mov	r1, r6
   e0b6a:	a80b      	add	r0, sp, #44	; 0x2c
   e0b6c:	f7ff fd78 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   e0b70:	2800      	cmp	r0, #0
   e0b72:	db0e      	blt.n	e0b92 <mbedtls_mpi_div_mpi+0x172>
    {
        Z.p[n - t]++;
   e0b74:	9913      	ldr	r1, [sp, #76]	; 0x4c
   e0b76:	f851 200b 	ldr.w	r2, [r1, fp]
   e0b7a:	3201      	adds	r2, #1
   e0b7c:	f841 200b 	str.w	r2, [r1, fp]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
   e0b80:	a90b      	add	r1, sp, #44	; 0x2c
   e0b82:	4632      	mov	r2, r6
   e0b84:	4608      	mov	r0, r1
   e0b86:	f7ff fe81 	bl	e088c <mbedtls_mpi_sub_mpi>
   e0b8a:	4604      	mov	r4, r0
   e0b8c:	2800      	cmp	r0, #0
   e0b8e:	d0eb      	beq.n	e0b68 <mbedtls_mpi_div_mpi+0x148>
   e0b90:	e0f0      	b.n	e0d74 <mbedtls_mpi_div_mpi+0x354>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
   e0b92:	9903      	ldr	r1, [sp, #12]
   e0b94:	4630      	mov	r0, r6
   e0b96:	f7ff fc84 	bl	e04a2 <mbedtls_mpi_shift_r>
   e0b9a:	4604      	mov	r4, r0
   e0b9c:	2800      	cmp	r0, #0
   e0b9e:	f040 80e9 	bne.w	e0d74 <mbedtls_mpi_div_mpi+0x354>

    for( i = n; i > t ; i-- )
    {
        if( X.p[i] >= Y.p[t] )
   e0ba2:	9b00      	ldr	r3, [sp, #0]
   e0ba4:	009b      	lsls	r3, r3, #2
   e0ba6:	9305      	str	r3, [sp, #20]
        do
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
   e0ba8:	3b04      	subs	r3, #4
   e0baa:	f105 4680 	add.w	r6, r5, #1073741824	; 0x40000000
   e0bae:	9308      	str	r3, [sp, #32]
   e0bb0:	f105 6300 	add.w	r3, r5, #134217728	; 0x8000000
   e0bb4:	3b01      	subs	r3, #1
   e0bb6:	3e01      	subs	r6, #1
   e0bb8:	ebca 0606 	rsb	r6, sl, r6
   e0bbc:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   e0bc0:	ebca 0a03 	rsb	sl, sl, r3
   e0bc4:	ea4f 134a 	mov.w	r3, sl, lsl #5
   e0bc8:	3d02      	subs	r5, #2
   e0bca:	00b6      	lsls	r6, r6, #2
   e0bcc:	9303      	str	r3, [sp, #12]
   e0bce:	00ad      	lsls	r5, r5, #2
        Z.p[n - t]++;
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );

    for( i = n; i > t ; i-- )
   e0bd0:	9b00      	ldr	r3, [sp, #0]
   e0bd2:	4599      	cmp	r9, r3
   e0bd4:	f240 80a8 	bls.w	e0d28 <mbedtls_mpi_div_mpi+0x308>
   e0bd8:	1d2b      	adds	r3, r5, #4
    {
        if( X.p[i] >= Y.p[t] )
   e0bda:	9805      	ldr	r0, [sp, #20]
   e0bdc:	990d      	ldr	r1, [sp, #52]	; 0x34
   e0bde:	9a10      	ldr	r2, [sp, #64]	; 0x40
   e0be0:	9309      	str	r3, [sp, #36]	; 0x24
   e0be2:	5812      	ldr	r2, [r2, r0]
   e0be4:	58cb      	ldr	r3, [r1, r3]
   e0be6:	9813      	ldr	r0, [sp, #76]	; 0x4c
   e0be8:	4293      	cmp	r3, r2
   e0bea:	d303      	bcc.n	e0bf4 <mbedtls_mpi_div_mpi+0x1d4>
            Z.p[i - t - 1] = ~0;
   e0bec:	f04f 33ff 	mov.w	r3, #4294967295
   e0bf0:	5183      	str	r3, [r0, r6]
   e0bf2:	e01b      	b.n	e0c2c <mbedtls_mpi_div_mpi+0x20c>
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
   e0bf4:	eb00 0a06 	add.w	sl, r0, r6
   e0bf8:	5948      	ldr	r0, [r1, r5]
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
   e0bfa:	b19a      	cbz	r2, e0c24 <mbedtls_mpi_div_mpi+0x204>

        return ( ~0 );
    }

#if defined(MBEDTLS_HAVE_UDBL)
    dividend  = (mbedtls_t_udbl) u1 << biL;
   e0bfc:	9307      	str	r3, [sp, #28]
   e0bfe:	2300      	movs	r3, #0
   e0c00:	9306      	str	r3, [sp, #24]
    dividend |= (mbedtls_t_udbl) u0;
    quotient = dividend / d;
   e0c02:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   e0c06:	ea4b 0b00 	orr.w	fp, fp, r0
   e0c0a:	4658      	mov	r0, fp
   e0c0c:	4661      	mov	r1, ip
   e0c0e:	f005 feb9 	bl	e6984 <__aeabi_uldivmod>
        quotient = ( (mbedtls_t_udbl) 1 << biL ) - 1;

    if( r != NULL )
        *r = (mbedtls_mpi_uint)( dividend - (quotient * d ) );

    return (mbedtls_mpi_uint) quotient;
   e0c12:	2300      	movs	r3, #0
   e0c14:	f04f 32ff 	mov.w	r2, #4294967295
   e0c18:	428b      	cmp	r3, r1
   e0c1a:	bf08      	it	eq
   e0c1c:	4282      	cmpeq	r2, r0
   e0c1e:	d203      	bcs.n	e0c28 <mbedtls_mpi_div_mpi+0x208>
   e0c20:	4610      	mov	r0, r2
   e0c22:	e001      	b.n	e0c28 <mbedtls_mpi_div_mpi+0x208>
     */
    if( 0 == d || u1 >= d )
    {
        if (r != NULL) *r = ~0;

        return ( ~0 );
   e0c24:	f04f 30ff 	mov.w	r0, #4294967295
        if( X.p[i] >= Y.p[t] )
            Z.p[i - t - 1] = ~0;
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
   e0c28:	f8ca 0000 	str.w	r0, [sl]
        }

        Z.p[i - t - 1]++;
   e0c2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   e0c2e:	5993      	ldr	r3, [r2, r6]
   e0c30:	3301      	adds	r3, #1
   e0c32:	5193      	str	r3, [r2, r6]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
   e0c34:	f1a5 0a04 	sub.w	sl, r5, #4
        }

        Z.p[i - t - 1]++;
        do
        {
            Z.p[i - t - 1]--;
   e0c38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   e0c3a:	5993      	ldr	r3, [r2, r6]
   e0c3c:	3b01      	subs	r3, #1
   e0c3e:	5193      	str	r3, [r2, r6]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
   e0c40:	2100      	movs	r1, #0
   e0c42:	a814      	add	r0, sp, #80	; 0x50
   e0c44:	f7ff fb06 	bl	e0254 <mbedtls_mpi_lset>
   e0c48:	2800      	cmp	r0, #0
   e0c4a:	f040 8090 	bne.w	e0d6e <mbedtls_mpi_div_mpi+0x34e>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
   e0c4e:	9b00      	ldr	r3, [sp, #0]
   e0c50:	9a16      	ldr	r2, [sp, #88]	; 0x58
   e0c52:	b11b      	cbz	r3, e0c5c <mbedtls_mpi_div_mpi+0x23c>
   e0c54:	9b10      	ldr	r3, [sp, #64]	; 0x40
   e0c56:	9908      	ldr	r1, [sp, #32]
   e0c58:	585b      	ldr	r3, [r3, r1]
   e0c5a:	e000      	b.n	e0c5e <mbedtls_mpi_div_mpi+0x23e>
   e0c5c:	9b00      	ldr	r3, [sp, #0]
   e0c5e:	6013      	str	r3, [r2, #0]
            T1.p[1] = Y.p[t];
   e0c60:	9b10      	ldr	r3, [sp, #64]	; 0x40
   e0c62:	9a05      	ldr	r2, [sp, #20]
   e0c64:	589a      	ldr	r2, [r3, r2]
   e0c66:	9b16      	ldr	r3, [sp, #88]	; 0x58
   e0c68:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
   e0c6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e0c6c:	a914      	add	r1, sp, #80	; 0x50
   e0c6e:	4608      	mov	r0, r1
   e0c70:	599a      	ldr	r2, [r3, r6]
   e0c72:	f7ff fec8 	bl	e0a06 <mbedtls_mpi_mul_int>
   e0c76:	4601      	mov	r1, r0
   e0c78:	2800      	cmp	r0, #0
   e0c7a:	d17a      	bne.n	e0d72 <mbedtls_mpi_div_mpi+0x352>

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
   e0c7c:	a817      	add	r0, sp, #92	; 0x5c
   e0c7e:	f7ff fae9 	bl	e0254 <mbedtls_mpi_lset>
   e0c82:	2800      	cmp	r0, #0
   e0c84:	d173      	bne.n	e0d6e <mbedtls_mpi_div_mpi+0x34e>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
   e0c86:	f1b9 0f01 	cmp.w	r9, #1
   e0c8a:	bf18      	it	ne
   e0c8c:	9a0d      	ldrne	r2, [sp, #52]	; 0x34
   e0c8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e0c90:	bf18      	it	ne
   e0c92:	f852 000a 	ldrne.w	r0, [r2, sl]
   e0c96:	6018      	str	r0, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
   e0c98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e0c9a:	595a      	ldr	r2, [r3, r5]
   e0c9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e0c9e:	605a      	str	r2, [r3, #4]
            T2.p[2] = X.p[i];
   e0ca0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e0ca2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   e0ca4:	589a      	ldr	r2, [r3, r2]
   e0ca6:	9b19      	ldr	r3, [sp, #100]	; 0x64
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
   e0ca8:	a917      	add	r1, sp, #92	; 0x5c
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
            T2.p[2] = X.p[i];
   e0caa:	609a      	str	r2, [r3, #8]
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
   e0cac:	a814      	add	r0, sp, #80	; 0x50
   e0cae:	f7ff fcd7 	bl	e0660 <mbedtls_mpi_cmp_mpi>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
        }

        Z.p[i - t - 1]++;
        do
   e0cb2:	2800      	cmp	r0, #0
   e0cb4:	dcc0      	bgt.n	e0c38 <mbedtls_mpi_div_mpi+0x218>
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
   e0cb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e0cb8:	a90e      	add	r1, sp, #56	; 0x38
   e0cba:	599a      	ldr	r2, [r3, r6]
   e0cbc:	a814      	add	r0, sp, #80	; 0x50
   e0cbe:	f7ff fea2 	bl	e0a06 <mbedtls_mpi_mul_int>
   e0cc2:	2800      	cmp	r0, #0
   e0cc4:	d153      	bne.n	e0d6e <mbedtls_mpi_div_mpi+0x34e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
   e0cc6:	9903      	ldr	r1, [sp, #12]
   e0cc8:	a814      	add	r0, sp, #80	; 0x50
   e0cca:	f7ff fb9b 	bl	e0404 <mbedtls_mpi_shift_l>
   e0cce:	2800      	cmp	r0, #0
   e0cd0:	d14d      	bne.n	e0d6e <mbedtls_mpi_div_mpi+0x34e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
   e0cd2:	a90b      	add	r1, sp, #44	; 0x2c
   e0cd4:	4608      	mov	r0, r1
   e0cd6:	aa14      	add	r2, sp, #80	; 0x50
   e0cd8:	f7ff fdd8 	bl	e088c <mbedtls_mpi_sub_mpi>
   e0cdc:	4601      	mov	r1, r0
   e0cde:	2800      	cmp	r0, #0
   e0ce0:	d147      	bne.n	e0d72 <mbedtls_mpi_div_mpi+0x352>

        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
   e0ce2:	a80b      	add	r0, sp, #44	; 0x2c
   e0ce4:	f7ff fd01 	bl	e06ea <mbedtls_mpi_cmp_int>
   e0ce8:	2800      	cmp	r0, #0
   e0cea:	da15      	bge.n	e0d18 <mbedtls_mpi_div_mpi+0x2f8>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
   e0cec:	a90e      	add	r1, sp, #56	; 0x38
   e0cee:	a814      	add	r0, sp, #80	; 0x50
   e0cf0:	f7ff fa4f 	bl	e0192 <mbedtls_mpi_copy>
   e0cf4:	2800      	cmp	r0, #0
   e0cf6:	d13a      	bne.n	e0d6e <mbedtls_mpi_div_mpi+0x34e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
   e0cf8:	9903      	ldr	r1, [sp, #12]
   e0cfa:	a814      	add	r0, sp, #80	; 0x50
   e0cfc:	f7ff fb82 	bl	e0404 <mbedtls_mpi_shift_l>
   e0d00:	2800      	cmp	r0, #0
   e0d02:	d134      	bne.n	e0d6e <mbedtls_mpi_div_mpi+0x34e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
   e0d04:	a90b      	add	r1, sp, #44	; 0x2c
   e0d06:	aa14      	add	r2, sp, #80	; 0x50
   e0d08:	4608      	mov	r0, r1
   e0d0a:	f7ff fd9e 	bl	e084a <mbedtls_mpi_add_mpi>
   e0d0e:	bb70      	cbnz	r0, e0d6e <mbedtls_mpi_div_mpi+0x34e>
            Z.p[i - t - 1]--;
   e0d10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   e0d12:	5993      	ldr	r3, [r2, r6]
   e0d14:	3b01      	subs	r3, #1
   e0d16:	5193      	str	r3, [r2, r6]
   e0d18:	9b03      	ldr	r3, [sp, #12]
   e0d1a:	3b20      	subs	r3, #32
        Z.p[n - t]++;
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );

    for( i = n; i > t ; i-- )
   e0d1c:	f109 39ff 	add.w	r9, r9, #4294967295
   e0d20:	3e04      	subs	r6, #4
   e0d22:	9303      	str	r3, [sp, #12]
   e0d24:	3d04      	subs	r5, #4
   e0d26:	e753      	b.n	e0bd0 <mbedtls_mpi_div_mpi+0x1b0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
            Z.p[i - t - 1]--;
        }
    }

    if( Q != NULL )
   e0d28:	9b01      	ldr	r3, [sp, #4]
   e0d2a:	b15b      	cbz	r3, e0d44 <mbedtls_mpi_div_mpi+0x324>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
   e0d2c:	a911      	add	r1, sp, #68	; 0x44
   e0d2e:	4618      	mov	r0, r3
   e0d30:	f7ff fa2f 	bl	e0192 <mbedtls_mpi_copy>
   e0d34:	b9d8      	cbnz	r0, e0d6e <mbedtls_mpi_div_mpi+0x34e>
        Q->s = A->s * B->s;
   e0d36:	9b04      	ldr	r3, [sp, #16]
   e0d38:	f8d8 2000 	ldr.w	r2, [r8]
   e0d3c:	681b      	ldr	r3, [r3, #0]
   e0d3e:	4353      	muls	r3, r2
   e0d40:	9a01      	ldr	r2, [sp, #4]
   e0d42:	6013      	str	r3, [r2, #0]
    }

    if( R != NULL )
   e0d44:	b1b7      	cbz	r7, e0d74 <mbedtls_mpi_div_mpi+0x354>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
   e0d46:	9902      	ldr	r1, [sp, #8]
   e0d48:	a80b      	add	r0, sp, #44	; 0x2c
   e0d4a:	f7ff fbaa 	bl	e04a2 <mbedtls_mpi_shift_r>
   e0d4e:	b970      	cbnz	r0, e0d6e <mbedtls_mpi_div_mpi+0x34e>
        X.s = A->s;
   e0d50:	f8d8 3000 	ldr.w	r3, [r8]
   e0d54:	930b      	str	r3, [sp, #44]	; 0x2c
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
   e0d56:	a90b      	add	r1, sp, #44	; 0x2c
   e0d58:	4638      	mov	r0, r7
   e0d5a:	f7ff fa1a 	bl	e0192 <mbedtls_mpi_copy>
   e0d5e:	4601      	mov	r1, r0
   e0d60:	b938      	cbnz	r0, e0d72 <mbedtls_mpi_div_mpi+0x352>

        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
   e0d62:	4638      	mov	r0, r7
   e0d64:	f7ff fcc1 	bl	e06ea <mbedtls_mpi_cmp_int>
   e0d68:	b920      	cbnz	r0, e0d74 <mbedtls_mpi_div_mpi+0x354>
            R->s = 1;
   e0d6a:	2301      	movs	r3, #1
   e0d6c:	603b      	str	r3, [r7, #0]
   e0d6e:	4604      	mov	r4, r0
   e0d70:	e000      	b.n	e0d74 <mbedtls_mpi_div_mpi+0x354>
   e0d72:	460c      	mov	r4, r1
    }

cleanup:

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
   e0d74:	a80b      	add	r0, sp, #44	; 0x2c
   e0d76:	f7ff f992 	bl	e009e <mbedtls_mpi_free>
   e0d7a:	a80e      	add	r0, sp, #56	; 0x38
   e0d7c:	f7ff f98f 	bl	e009e <mbedtls_mpi_free>
   e0d80:	a811      	add	r0, sp, #68	; 0x44
   e0d82:	f7ff f98c 	bl	e009e <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
   e0d86:	a814      	add	r0, sp, #80	; 0x50
   e0d88:	f7ff f989 	bl	e009e <mbedtls_mpi_free>
   e0d8c:	a817      	add	r0, sp, #92	; 0x5c
   e0d8e:	f7ff f986 	bl	e009e <mbedtls_mpi_free>

    return( ret );
   e0d92:	4620      	mov	r0, r4
   e0d94:	e001      	b.n	e0d9a <mbedtls_mpi_div_mpi+0x37a>
    mbedtls_mpi X, Y, Z, T1, T2;
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
   e0d96:	f06f 000b 	mvn.w	r0, #11

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );

    return( ret );
}
   e0d9a:	b01b      	add	sp, #108	; 0x6c
   e0d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e0da0 <mbedtls_mpi_mod_mpi>:

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e0da0:	b570      	push	{r4, r5, r6, lr}
   e0da2:	4604      	mov	r4, r0
   e0da4:	460e      	mov	r6, r1
    int ret;
    MPI_VALIDATE_RET( R != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
   e0da6:	4610      	mov	r0, r2
   e0da8:	2100      	movs	r1, #0

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e0daa:	4615      	mov	r5, r2
    int ret;
    MPI_VALIDATE_RET( R != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
   e0dac:	f7ff fc9d 	bl	e06ea <mbedtls_mpi_cmp_int>
   e0db0:	2800      	cmp	r0, #0
   e0db2:	db22      	blt.n	e0dfa <mbedtls_mpi_mod_mpi+0x5a>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
   e0db4:	462b      	mov	r3, r5
   e0db6:	4632      	mov	r2, r6
   e0db8:	4621      	mov	r1, r4
   e0dba:	2000      	movs	r0, #0
   e0dbc:	f7ff fe30 	bl	e0a20 <mbedtls_mpi_div_mpi>
   e0dc0:	b9f8      	cbnz	r0, e0e02 <mbedtls_mpi_mod_mpi+0x62>

    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
   e0dc2:	2100      	movs	r1, #0
   e0dc4:	4620      	mov	r0, r4
   e0dc6:	f7ff fc90 	bl	e06ea <mbedtls_mpi_cmp_int>
   e0dca:	2800      	cmp	r0, #0
   e0dcc:	da07      	bge.n	e0dde <mbedtls_mpi_mod_mpi+0x3e>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
   e0dce:	462a      	mov	r2, r5
   e0dd0:	4621      	mov	r1, r4
   e0dd2:	4620      	mov	r0, r4
   e0dd4:	f7ff fd39 	bl	e084a <mbedtls_mpi_add_mpi>
   e0dd8:	2800      	cmp	r0, #0
   e0dda:	d0f2      	beq.n	e0dc2 <mbedtls_mpi_mod_mpi+0x22>
   e0ddc:	bd70      	pop	{r4, r5, r6, pc}

    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
   e0dde:	4629      	mov	r1, r5
   e0de0:	4620      	mov	r0, r4
   e0de2:	f7ff fc3d 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   e0de6:	2800      	cmp	r0, #0
   e0de8:	db0a      	blt.n	e0e00 <mbedtls_mpi_mod_mpi+0x60>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
   e0dea:	462a      	mov	r2, r5
   e0dec:	4621      	mov	r1, r4
   e0dee:	4620      	mov	r0, r4
   e0df0:	f7ff fd4c 	bl	e088c <mbedtls_mpi_sub_mpi>
   e0df4:	2800      	cmp	r0, #0
   e0df6:	d0f2      	beq.n	e0dde <mbedtls_mpi_mod_mpi+0x3e>
   e0df8:	bd70      	pop	{r4, r5, r6, pc}
    MPI_VALIDATE_RET( R != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
   e0dfa:	f06f 0009 	mvn.w	r0, #9
   e0dfe:	bd70      	pop	{r4, r5, r6, pc}
   e0e00:	2000      	movs	r0, #0
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );

cleanup:

    return( ret );
}
   e0e02:	bd70      	pop	{r4, r5, r6, pc}

000e0e04 <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *_RR )
{
   e0e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e0e08:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
   e0e0c:	4606      	mov	r6, r0
   e0e0e:	460f      	mov	r7, r1
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
   e0e10:	4618      	mov	r0, r3
   e0e12:	2100      	movs	r1, #0
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *_RR )
{
   e0e14:	9202      	str	r2, [sp, #8]
   e0e16:	461d      	mov	r5, r3
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
   e0e18:	f7ff fc67 	bl	e06ea <mbedtls_mpi_cmp_int>
   e0e1c:	2800      	cmp	r0, #0
   e0e1e:	dd05      	ble.n	e0e2c <mbedtls_mpi_exp_mod+0x28>
   e0e20:	68ab      	ldr	r3, [r5, #8]
   e0e22:	f8d3 8000 	ldr.w	r8, [r3]
   e0e26:	f018 0f01 	tst.w	r8, #1
   e0e2a:	d102      	bne.n	e0e32 <mbedtls_mpi_exp_mod+0x2e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   e0e2c:	f06f 0003 	mvn.w	r0, #3
   e0e30:	e203      	b.n	e123a <mbedtls_mpi_exp_mod+0x436>

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
   e0e32:	2100      	movs	r1, #0
   e0e34:	9802      	ldr	r0, [sp, #8]
   e0e36:	f7ff fc58 	bl	e06ea <mbedtls_mpi_cmp_int>
   e0e3a:	2800      	cmp	r0, #0
   e0e3c:	dbf6      	blt.n	e0e2c <mbedtls_mpi_exp_mod+0x28>
{
    mbedtls_mpi_uint x, m0 = N->p[0];
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;
   e0e3e:	f108 0402 	add.w	r4, r8, #2
   e0e42:	0064      	lsls	r4, r4, #1
   e0e44:	f004 0408 	and.w	r4, r4, #8
   e0e48:	4444      	add	r4, r8
   e0e4a:	2103      	movs	r1, #3

    for( i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( m0 * x ) );
   e0e4c:	fb04 f308 	mul.w	r3, r4, r8
   e0e50:	f1c3 0302 	rsb	r3, r3, #2
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
   e0e54:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
   e0e56:	fb03 f404 	mul.w	r4, r3, r4
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
   e0e5a:	d1f7      	bne.n	e0e4c <mbedtls_mpi_exp_mod+0x48>
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e0e5c:	2301      	movs	r3, #1
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
   e0e5e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   e0e62:	a814      	add	r0, sp, #80	; 0x50
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e0e64:	9308      	str	r3, [sp, #32]
    X->n = 0;
   e0e66:	9109      	str	r1, [sp, #36]	; 0x24
    X->p = NULL;
   e0e68:	910a      	str	r1, [sp, #40]	; 0x28
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e0e6a:	930b      	str	r3, [sp, #44]	; 0x2c
    X->n = 0;
   e0e6c:	910c      	str	r1, [sp, #48]	; 0x30
    X->p = NULL;
   e0e6e:	910d      	str	r1, [sp, #52]	; 0x34
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e0e70:	930e      	str	r3, [sp, #56]	; 0x38
    X->n = 0;
   e0e72:	910f      	str	r1, [sp, #60]	; 0x3c
    X->p = NULL;
   e0e74:	9110      	str	r1, [sp, #64]	; 0x40
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
   e0e76:	f006 f890 	bl	e6f9a <memset>

    i = mbedtls_mpi_bitlen( E );
   e0e7a:	9802      	ldr	r0, [sp, #8]
   e0e7c:	f7ff fa30 	bl	e02e0 <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;
   e0e80:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
   e0e84:	d20a      	bcs.n	e0e9c <mbedtls_mpi_exp_mod+0x98>
   e0e86:	28ef      	cmp	r0, #239	; 0xef
   e0e88:	d80b      	bhi.n	e0ea2 <mbedtls_mpi_exp_mod+0x9e>
   e0e8a:	284f      	cmp	r0, #79	; 0x4f
   e0e8c:	d80c      	bhi.n	e0ea8 <mbedtls_mpi_exp_mod+0xa4>
   e0e8e:	2818      	cmp	r0, #24
   e0e90:	bf34      	ite	cc
   e0e92:	f04f 0b01 	movcc.w	fp, #1
   e0e96:	f04f 0b03 	movcs.w	fp, #3
   e0e9a:	e007      	b.n	e0eac <mbedtls_mpi_exp_mod+0xa8>
   e0e9c:	f04f 0b06 	mov.w	fp, #6
   e0ea0:	e004      	b.n	e0eac <mbedtls_mpi_exp_mod+0xa8>
   e0ea2:	f04f 0b05 	mov.w	fp, #5
   e0ea6:	e001      	b.n	e0eac <mbedtls_mpi_exp_mod+0xa8>
   e0ea8:	f04f 0b04 	mov.w	fp, #4
#if( MBEDTLS_MPI_WINDOW_SIZE < 6 )
    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
#endif

    j = N->n + 1;
   e0eac:	686b      	ldr	r3, [r5, #4]
   e0eae:	f103 0801 	add.w	r8, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
   e0eb2:	4641      	mov	r1, r8
   e0eb4:	4630      	mov	r0, r6
   e0eb6:	f7ff f904 	bl	e00c2 <mbedtls_mpi_grow>
   e0eba:	4603      	mov	r3, r0
   e0ebc:	2800      	cmp	r0, #0
   e0ebe:	f040 8194 	bne.w	e11ea <mbedtls_mpi_exp_mod+0x3e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
   e0ec2:	4641      	mov	r1, r8
   e0ec4:	a817      	add	r0, sp, #92	; 0x5c
   e0ec6:	f7ff f8fc 	bl	e00c2 <mbedtls_mpi_grow>
   e0eca:	4603      	mov	r3, r0
   e0ecc:	2800      	cmp	r0, #0
   e0ece:	f040 818c 	bne.w	e11ea <mbedtls_mpi_exp_mod+0x3e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
   e0ed2:	ea4f 0148 	mov.w	r1, r8, lsl #1
   e0ed6:	a80b      	add	r0, sp, #44	; 0x2c
   e0ed8:	f7ff f8f3 	bl	e00c2 <mbedtls_mpi_grow>
   e0edc:	4603      	mov	r3, r0
   e0ede:	2800      	cmp	r0, #0
   e0ee0:	f040 8183 	bne.w	e11ea <mbedtls_mpi_exp_mod+0x3e6>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
   e0ee4:	683b      	ldr	r3, [r7, #0]
   e0ee6:	9304      	str	r3, [sp, #16]
    if( neg )
   e0ee8:	3301      	adds	r3, #1
   e0eea:	d10a      	bne.n	e0f02 <mbedtls_mpi_exp_mod+0xfe>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
   e0eec:	4639      	mov	r1, r7
   e0eee:	a80e      	add	r0, sp, #56	; 0x38
   e0ef0:	f7ff f94f 	bl	e0192 <mbedtls_mpi_copy>
   e0ef4:	4603      	mov	r3, r0
   e0ef6:	2800      	cmp	r0, #0
   e0ef8:	f040 8177 	bne.w	e11ea <mbedtls_mpi_exp_mod+0x3e6>
        Apos.s = 1;
   e0efc:	2301      	movs	r3, #1
   e0efe:	930e      	str	r3, [sp, #56]	; 0x38
        A = &Apos;
   e0f00:	af0e      	add	r7, sp, #56	; 0x38
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
   e0f02:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
   e0f06:	b10b      	cbz	r3, e0f0c <mbedtls_mpi_exp_mod+0x108>
   e0f08:	689b      	ldr	r3, [r3, #8]
   e0f0a:	bb2b      	cbnz	r3, e0f58 <mbedtls_mpi_exp_mod+0x154>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
   e0f0c:	2101      	movs	r1, #1
   e0f0e:	a808      	add	r0, sp, #32
   e0f10:	f7ff f9a0 	bl	e0254 <mbedtls_mpi_lset>
   e0f14:	4603      	mov	r3, r0
   e0f16:	2800      	cmp	r0, #0
   e0f18:	f040 8167 	bne.w	e11ea <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
   e0f1c:	6869      	ldr	r1, [r5, #4]
   e0f1e:	a808      	add	r0, sp, #32
   e0f20:	0189      	lsls	r1, r1, #6
   e0f22:	f7ff fa6f 	bl	e0404 <mbedtls_mpi_shift_l>
   e0f26:	4603      	mov	r3, r0
   e0f28:	2800      	cmp	r0, #0
   e0f2a:	f040 815e 	bne.w	e11ea <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
   e0f2e:	a908      	add	r1, sp, #32
   e0f30:	462a      	mov	r2, r5
   e0f32:	4608      	mov	r0, r1
   e0f34:	f7ff ff34 	bl	e0da0 <mbedtls_mpi_mod_mpi>
   e0f38:	4603      	mov	r3, r0
   e0f3a:	2800      	cmp	r0, #0
   e0f3c:	f040 8155 	bne.w	e11ea <mbedtls_mpi_exp_mod+0x3e6>

        if( _RR != NULL )
   e0f40:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
   e0f44:	b183      	cbz	r3, e0f68 <mbedtls_mpi_exp_mod+0x164>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
   e0f46:	ab08      	add	r3, sp, #32
   e0f48:	cb03      	ldmia	r3!, {r0, r1}
   e0f4a:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
   e0f4e:	6010      	str	r0, [r2, #0]
   e0f50:	6818      	ldr	r0, [r3, #0]
   e0f52:	6051      	str	r1, [r2, #4]
   e0f54:	6090      	str	r0, [r2, #8]
   e0f56:	e007      	b.n	e0f68 <mbedtls_mpi_exp_mod+0x164>
    }
    else
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
   e0f58:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
   e0f5c:	6810      	ldr	r0, [r2, #0]
   e0f5e:	6851      	ldr	r1, [r2, #4]
   e0f60:	ab08      	add	r3, sp, #32
   e0f62:	c303      	stmia	r3!, {r0, r1}
   e0f64:	6890      	ldr	r0, [r2, #8]
   e0f66:	6018      	str	r0, [r3, #0]

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
   e0f68:	4629      	mov	r1, r5
   e0f6a:	4638      	mov	r0, r7
   e0f6c:	f7ff fb78 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   e0f70:	2800      	cmp	r0, #0
   e0f72:	db18      	blt.n	e0fa6 <mbedtls_mpi_exp_mod+0x1a2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
   e0f74:	462a      	mov	r2, r5
   e0f76:	4639      	mov	r1, r7
   e0f78:	a817      	add	r0, sp, #92	; 0x5c
   e0f7a:	f7ff ff11 	bl	e0da0 <mbedtls_mpi_mod_mpi>
   e0f7e:	4603      	mov	r3, r0
   e0f80:	2800      	cmp	r0, #0
   e0f82:	f040 8132 	bne.w	e11ea <mbedtls_mpi_exp_mod+0x3e6>
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( m0 * x ) );

    *mm = ~x + 1;
   e0f86:	4264      	negs	r4, r4
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
   e0f88:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
   e0f8c:	4623      	mov	r3, r4
   e0f8e:	f8cd 9000 	str.w	r9, [sp]
   e0f92:	462a      	mov	r2, r5
   e0f94:	a908      	add	r1, sp, #32
   e0f96:	a817      	add	r0, sp, #92	; 0x5c
   e0f98:	f7ff fafe 	bl	e0598 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e0f9c:	4603      	mov	r3, r0
   e0f9e:	2800      	cmp	r0, #0
   e0fa0:	f040 8123 	bne.w	e11ea <mbedtls_mpi_exp_mod+0x3e6>
   e0fa4:	e004      	b.n	e0fb0 <mbedtls_mpi_exp_mod+0x1ac>
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
   e0fa6:	4639      	mov	r1, r7
   e0fa8:	a817      	add	r0, sp, #92	; 0x5c
   e0faa:	f7ff f8f2 	bl	e0192 <mbedtls_mpi_copy>
   e0fae:	e7e6      	b.n	e0f7e <mbedtls_mpi_exp_mod+0x17a>
    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
   e0fb0:	a908      	add	r1, sp, #32
   e0fb2:	4630      	mov	r0, r6
   e0fb4:	f7ff f8ed 	bl	e0192 <mbedtls_mpi_copy>
   e0fb8:	4603      	mov	r3, r0
   e0fba:	2800      	cmp	r0, #0
   e0fbc:	f040 8115 	bne.w	e11ea <mbedtls_mpi_exp_mod+0x3e6>
{
    mbedtls_mpi_uint z = 1;
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    U.p = &z;
   e0fc0:	ab07      	add	r3, sp, #28
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N,
                        mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
   e0fc2:	2701      	movs	r7, #1
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    U.p = &z;
   e0fc4:	9313      	str	r3, [sp, #76]	; 0x4c

    return( mpi_montmul( A, &U, N, mm, T ) );
   e0fc6:	f8cd 9000 	str.w	r9, [sp]
   e0fca:	4623      	mov	r3, r4
   e0fcc:	462a      	mov	r2, r5
   e0fce:	a911      	add	r1, sp, #68	; 0x44
   e0fd0:	4630      	mov	r0, r6
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N,
                        mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
   e0fd2:	9707      	str	r7, [sp, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
   e0fd4:	9711      	str	r7, [sp, #68]	; 0x44
   e0fd6:	9712      	str	r7, [sp, #72]	; 0x48
    U.p = &z;

    return( mpi_montmul( A, &U, N, mm, T ) );
   e0fd8:	f7ff fade 	bl	e0598 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
   e0fdc:	4603      	mov	r3, r0
   e0fde:	2800      	cmp	r0, #0
   e0fe0:	f040 8103 	bne.w	e11ea <mbedtls_mpi_exp_mod+0x3e6>

    if( wsize > 1 )
   e0fe4:	45bb      	cmp	fp, r7
   e0fe6:	d05b      	beq.n	e10a0 <mbedtls_mpi_exp_mod+0x29c>
    {
        /*
         * W[1 << (wsize - 1)] = W[1] ^ (wsize - 1)
         */
        j =  one << ( wsize - 1 );
   e0fe8:	f10b 33ff 	add.w	r3, fp, #4294967295
   e0fec:	9303      	str	r3, [sp, #12]
   e0fee:	409f      	lsls	r7, r3

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
   e0ff0:	6869      	ldr	r1, [r5, #4]
   e0ff2:	ab14      	add	r3, sp, #80	; 0x50
   e0ff4:	f04f 080c 	mov.w	r8, #12
   e0ff8:	fb08 3807 	mla	r8, r8, r7, r3
   e0ffc:	3101      	adds	r1, #1
   e0ffe:	4640      	mov	r0, r8
   e1000:	f7ff f85f 	bl	e00c2 <mbedtls_mpi_grow>
   e1004:	4603      	mov	r3, r0
   e1006:	2800      	cmp	r0, #0
   e1008:	f040 80ef 	bne.w	e11ea <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
   e100c:	a917      	add	r1, sp, #92	; 0x5c
   e100e:	4640      	mov	r0, r8
   e1010:	f7ff f8bf 	bl	e0192 <mbedtls_mpi_copy>
   e1014:	4603      	mov	r3, r0
   e1016:	2800      	cmp	r0, #0
   e1018:	f040 80e7 	bne.w	e11ea <mbedtls_mpi_exp_mod+0x3e6>
   e101c:	4682      	mov	sl, r0

        for( i = 0; i < wsize - 1; i++ )
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
   e101e:	4623      	mov	r3, r4
   e1020:	f8cd 9000 	str.w	r9, [sp]
   e1024:	462a      	mov	r2, r5
   e1026:	4641      	mov	r1, r8
   e1028:	4640      	mov	r0, r8
   e102a:	f7ff fab5 	bl	e0598 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e102e:	4603      	mov	r3, r0
   e1030:	2800      	cmp	r0, #0
   e1032:	f040 80da 	bne.w	e11ea <mbedtls_mpi_exp_mod+0x3e6>
        j =  one << ( wsize - 1 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );

        for( i = 0; i < wsize - 1; i++ )
   e1036:	9b03      	ldr	r3, [sp, #12]
   e1038:	f10a 0a01 	add.w	sl, sl, #1
   e103c:	4553      	cmp	r3, sl
   e103e:	d8ee      	bhi.n	e101e <mbedtls_mpi_exp_mod+0x21a>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
   e1040:	3701      	adds	r7, #1
   e1042:	f04f 0901 	mov.w	r9, #1
   e1046:	f04f 080c 	mov.w	r8, #12
   e104a:	ab14      	add	r3, sp, #80	; 0x50
   e104c:	fa09 f90b 	lsl.w	r9, r9, fp
   e1050:	fb08 3807 	mla	r8, r8, r7, r3
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
   e1054:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
   e1058:	454f      	cmp	r7, r9
   e105a:	d221      	bcs.n	e10a0 <mbedtls_mpi_exp_mod+0x29c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
   e105c:	6869      	ldr	r1, [r5, #4]
   e105e:	4640      	mov	r0, r8
   e1060:	3101      	adds	r1, #1
   e1062:	f7ff f82e 	bl	e00c2 <mbedtls_mpi_grow>
   e1066:	4603      	mov	r3, r0
   e1068:	2800      	cmp	r0, #0
   e106a:	f040 80be 	bne.w	e11ea <mbedtls_mpi_exp_mod+0x3e6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
   e106e:	f1a8 010c 	sub.w	r1, r8, #12
   e1072:	4640      	mov	r0, r8
   e1074:	f7ff f88d 	bl	e0192 <mbedtls_mpi_copy>
   e1078:	4603      	mov	r3, r0
   e107a:	2800      	cmp	r0, #0
   e107c:	f040 80b5 	bne.w	e11ea <mbedtls_mpi_exp_mod+0x3e6>

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
   e1080:	4623      	mov	r3, r4
   e1082:	4640      	mov	r0, r8
   e1084:	f8cd a000 	str.w	sl, [sp]
   e1088:	462a      	mov	r2, r5
   e108a:	a917      	add	r1, sp, #92	; 0x5c
   e108c:	f7ff fa84 	bl	e0598 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e1090:	f108 080c 	add.w	r8, r8, #12
   e1094:	4603      	mov	r3, r0
   e1096:	2800      	cmp	r0, #0
   e1098:	f040 80a7 	bne.w	e11ea <mbedtls_mpi_exp_mod+0x3e6>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
   e109c:	3701      	adds	r7, #1
   e109e:	e7db      	b.n	e1058 <mbedtls_mpi_exp_mod+0x254>

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
   e10a0:	9b02      	ldr	r3, [sp, #8]
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
   e10a2:	2700      	movs	r7, #0

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
   e10a4:	685b      	ldr	r3, [r3, #4]
   e10a6:	9303      	str	r3, [sp, #12]
    bufsize = 0;
    nbits   = 0;
   e10a8:	46b9      	mov	r9, r7
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
    bufsize = 0;
   e10aa:	46ba      	mov	sl, r7
    nbits   = 0;
    wbits   = 0;
   e10ac:	46b8      	mov	r8, r7
    state   = 0;

    while( 1 )
    {
        if( bufsize == 0 )
   e10ae:	f1ba 0f00 	cmp.w	sl, #0
   e10b2:	d10e      	bne.n	e10d2 <mbedtls_mpi_exp_mod+0x2ce>
        {
            if( nblimbs == 0 )
   e10b4:	9b03      	ldr	r3, [sp, #12]
   e10b6:	b93b      	cbnz	r3, e10c8 <mbedtls_mpi_exp_mod+0x2c4>
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
   e10b8:	2301      	movs	r3, #1
   e10ba:	fa03 f30b 	lsl.w	r3, r3, fp
   e10be:	9305      	str	r3, [sp, #20]
   e10c0:	9f03      	ldr	r7, [sp, #12]
   e10c2:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
   e10c6:	e05e      	b.n	e1186 <mbedtls_mpi_exp_mod+0x382>
        if( bufsize == 0 )
        {
            if( nblimbs == 0 )
                break;

            nblimbs--;
   e10c8:	9b03      	ldr	r3, [sp, #12]
   e10ca:	3b01      	subs	r3, #1
   e10cc:	9303      	str	r3, [sp, #12]

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
   e10ce:	f04f 0a20 	mov.w	sl, #32
        }

        bufsize--;

        ei = (E->p[nblimbs] >> bufsize) & 1;
   e10d2:	9b02      	ldr	r3, [sp, #8]
   e10d4:	9a03      	ldr	r2, [sp, #12]
   e10d6:	689b      	ldr	r3, [r3, #8]
   e10d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
            nblimbs--;

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
        }

        bufsize--;
   e10dc:	f10a 3aff 	add.w	sl, sl, #4294967295

        ei = (E->p[nblimbs] >> bufsize) & 1;
   e10e0:	fa23 f30a 	lsr.w	r3, r3, sl

        /*
         * skip leading 0s
         */
        if( ei == 0 && state == 0 )
   e10e4:	f013 0301 	ands.w	r3, r3, #1
   e10e8:	d10f      	bne.n	e110a <mbedtls_mpi_exp_mod+0x306>
   e10ea:	2f00      	cmp	r7, #0
   e10ec:	d0df      	beq.n	e10ae <mbedtls_mpi_exp_mod+0x2aa>
            continue;

        if( ei == 0 && state == 1 )
   e10ee:	2f01      	cmp	r7, #1
   e10f0:	d10b      	bne.n	e110a <mbedtls_mpi_exp_mod+0x306>
        {
            /*
             * out of window, square X
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
   e10f2:	ab0b      	add	r3, sp, #44	; 0x2c
   e10f4:	9300      	str	r3, [sp, #0]
   e10f6:	462a      	mov	r2, r5
   e10f8:	4623      	mov	r3, r4
   e10fa:	4631      	mov	r1, r6
   e10fc:	4630      	mov	r0, r6
   e10fe:	f7ff fa4b 	bl	e0598 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e1102:	4603      	mov	r3, r0
   e1104:	2800      	cmp	r0, #0
   e1106:	d0d2      	beq.n	e10ae <mbedtls_mpi_exp_mod+0x2aa>
   e1108:	e06f      	b.n	e11ea <mbedtls_mpi_exp_mod+0x3e6>
        /*
         * add ei to current window
         */
        state = 2;

        nbits++;
   e110a:	f109 0901 	add.w	r9, r9, #1
        wbits |= ( ei << ( wsize - nbits ) );
   e110e:	ebc9 020b 	rsb	r2, r9, fp
   e1112:	4093      	lsls	r3, r2

        if( nbits == wsize )
   e1114:	45cb      	cmp	fp, r9
         * add ei to current window
         */
        state = 2;

        nbits++;
        wbits |= ( ei << ( wsize - nbits ) );
   e1116:	ea48 0803 	orr.w	r8, r8, r3

        if( nbits == wsize )
   e111a:	d001      	beq.n	e1120 <mbedtls_mpi_exp_mod+0x31c>
        }

        /*
         * add ei to current window
         */
        state = 2;
   e111c:	2702      	movs	r7, #2
   e111e:	e7c6      	b.n	e10ae <mbedtls_mpi_exp_mod+0x2aa>
   e1120:	2700      	movs	r7, #0
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
   e1122:	ab0b      	add	r3, sp, #44	; 0x2c
   e1124:	9300      	str	r3, [sp, #0]
   e1126:	462a      	mov	r2, r5
   e1128:	4623      	mov	r3, r4
   e112a:	4631      	mov	r1, r6
   e112c:	4630      	mov	r0, r6
   e112e:	f7ff fa33 	bl	e0598 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e1132:	4603      	mov	r3, r0
   e1134:	2800      	cmp	r0, #0
   e1136:	d158      	bne.n	e11ea <mbedtls_mpi_exp_mod+0x3e6>
        if( nbits == wsize )
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
   e1138:	3701      	adds	r7, #1
   e113a:	45bb      	cmp	fp, r7
   e113c:	d1f1      	bne.n	e1122 <mbedtls_mpi_exp_mod+0x31e>
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

            /*
             * X = X * W[wbits] R^-1 mod N
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
   e113e:	ab0b      	add	r3, sp, #44	; 0x2c
   e1140:	a814      	add	r0, sp, #80	; 0x50
   e1142:	210c      	movs	r1, #12
   e1144:	9300      	str	r3, [sp, #0]
   e1146:	fb01 0108 	mla	r1, r1, r8, r0
   e114a:	4623      	mov	r3, r4
   e114c:	462a      	mov	r2, r5
   e114e:	4630      	mov	r0, r6
   e1150:	f7ff fa22 	bl	e0598 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e1154:	4603      	mov	r3, r0
   e1156:	2800      	cmp	r0, #0
   e1158:	d147      	bne.n	e11ea <mbedtls_mpi_exp_mod+0x3e6>

            state--;
   e115a:	2701      	movs	r7, #1
            nbits = 0;
   e115c:	4680      	mov	r8, r0
            wbits = 0;
   e115e:	4681      	mov	r9, r0
   e1160:	e7a5      	b.n	e10ae <mbedtls_mpi_exp_mod+0x2aa>
    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
   e1162:	4623      	mov	r3, r4
   e1164:	f8cd a000 	str.w	sl, [sp]
   e1168:	462a      	mov	r2, r5
   e116a:	4631      	mov	r1, r6
   e116c:	4630      	mov	r0, r6
   e116e:	f7ff fa13 	bl	e0598 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e1172:	4603      	mov	r3, r0
   e1174:	2800      	cmp	r0, #0
   e1176:	d138      	bne.n	e11ea <mbedtls_mpi_exp_mod+0x3e6>

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
   e1178:	9b05      	ldr	r3, [sp, #20]
     */
    for( i = 0; i < nbits; i++ )
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;
   e117a:	ea4f 0848 	mov.w	r8, r8, lsl #1

        if( ( wbits & ( one << wsize ) ) != 0 )
   e117e:	ea18 0f03 	tst.w	r8, r3
   e1182:	d103      	bne.n	e118c <mbedtls_mpi_exp_mod+0x388>
    }

    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
   e1184:	3701      	adds	r7, #1
   e1186:	454f      	cmp	r7, r9
   e1188:	d1eb      	bne.n	e1162 <mbedtls_mpi_exp_mod+0x35e>
   e118a:	e00b      	b.n	e11a4 <mbedtls_mpi_exp_mod+0x3a0>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
   e118c:	4623      	mov	r3, r4
   e118e:	f8cd a000 	str.w	sl, [sp]
   e1192:	462a      	mov	r2, r5
   e1194:	a917      	add	r1, sp, #92	; 0x5c
   e1196:	4630      	mov	r0, r6
   e1198:	f7ff f9fe 	bl	e0598 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e119c:	4603      	mov	r3, r0
   e119e:	2800      	cmp	r0, #0
   e11a0:	d0f0      	beq.n	e1184 <mbedtls_mpi_exp_mod+0x380>
   e11a2:	e022      	b.n	e11ea <mbedtls_mpi_exp_mod+0x3e6>
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N,
                        mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
   e11a4:	2301      	movs	r3, #1
   e11a6:	9307      	str	r3, [sp, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
   e11a8:	9311      	str	r3, [sp, #68]	; 0x44
   e11aa:	9312      	str	r3, [sp, #72]	; 0x48
    U.p = &z;
   e11ac:	ab07      	add	r3, sp, #28
   e11ae:	9313      	str	r3, [sp, #76]	; 0x4c

    return( mpi_montmul( A, &U, N, mm, T ) );
   e11b0:	f8cd a000 	str.w	sl, [sp]
   e11b4:	4623      	mov	r3, r4
   e11b6:	462a      	mov	r2, r5
   e11b8:	a911      	add	r1, sp, #68	; 0x44
   e11ba:	4630      	mov	r0, r6
   e11bc:	f7ff f9ec 	bl	e0598 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
    }

    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
   e11c0:	4603      	mov	r3, r0
   e11c2:	b990      	cbnz	r0, e11ea <mbedtls_mpi_exp_mod+0x3e6>

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
   e11c4:	9a04      	ldr	r2, [sp, #16]
   e11c6:	3201      	adds	r2, #1
   e11c8:	d10f      	bne.n	e11ea <mbedtls_mpi_exp_mod+0x3e6>
   e11ca:	9a02      	ldr	r2, [sp, #8]
   e11cc:	6852      	ldr	r2, [r2, #4]
   e11ce:	b162      	cbz	r2, e11ea <mbedtls_mpi_exp_mod+0x3e6>
   e11d0:	9a02      	ldr	r2, [sp, #8]
   e11d2:	6892      	ldr	r2, [r2, #8]
   e11d4:	6812      	ldr	r2, [r2, #0]
   e11d6:	07d2      	lsls	r2, r2, #31
   e11d8:	d507      	bpl.n	e11ea <mbedtls_mpi_exp_mod+0x3e6>
    {
        X->s = -1;
   e11da:	9b04      	ldr	r3, [sp, #16]
   e11dc:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
   e11de:	4632      	mov	r2, r6
   e11e0:	4629      	mov	r1, r5
   e11e2:	4630      	mov	r0, r6
   e11e4:	f7ff fb31 	bl	e084a <mbedtls_mpi_add_mpi>
   e11e8:	4603      	mov	r3, r0
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
   e11ea:	2201      	movs	r2, #1
   e11ec:	f10b 34ff 	add.w	r4, fp, #4294967295
   e11f0:	fa02 f404 	lsl.w	r4, r2, r4
   e11f4:	fa02 f50b 	lsl.w	r5, r2, fp
        mbedtls_mpi_free( &W[i] );
   e11f8:	260c      	movs	r6, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
   e11fa:	42ac      	cmp	r4, r5
   e11fc:	9302      	str	r3, [sp, #8]
   e11fe:	d207      	bcs.n	e1210 <mbedtls_mpi_exp_mod+0x40c>
        mbedtls_mpi_free( &W[i] );
   e1200:	ab14      	add	r3, sp, #80	; 0x50
   e1202:	fb06 3004 	mla	r0, r6, r4, r3
   e1206:	f7fe ff4a 	bl	e009e <mbedtls_mpi_free>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
   e120a:	3401      	adds	r4, #1
   e120c:	9b02      	ldr	r3, [sp, #8]
   e120e:	e7f4      	b.n	e11fa <mbedtls_mpi_exp_mod+0x3f6>
        mbedtls_mpi_free( &W[i] );

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
   e1210:	a817      	add	r0, sp, #92	; 0x5c
   e1212:	f7fe ff44 	bl	e009e <mbedtls_mpi_free>
   e1216:	a80b      	add	r0, sp, #44	; 0x2c
   e1218:	f7fe ff41 	bl	e009e <mbedtls_mpi_free>
   e121c:	a80e      	add	r0, sp, #56	; 0x38
   e121e:	f7fe ff3e 	bl	e009e <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
   e1222:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
   e1226:	9b02      	ldr	r3, [sp, #8]
   e1228:	b10a      	cbz	r2, e122e <mbedtls_mpi_exp_mod+0x42a>
   e122a:	6892      	ldr	r2, [r2, #8]
   e122c:	b922      	cbnz	r2, e1238 <mbedtls_mpi_exp_mod+0x434>
        mbedtls_mpi_free( &RR );
   e122e:	a808      	add	r0, sp, #32
   e1230:	9302      	str	r3, [sp, #8]
   e1232:	f7fe ff34 	bl	e009e <mbedtls_mpi_free>

    return( ret );
   e1236:	9b02      	ldr	r3, [sp, #8]
   e1238:	4618      	mov	r0, r3
}
   e123a:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
   e123e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e1242 <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e1242:	b5f0      	push	{r4, r5, r6, r7, lr}
   e1244:	b08b      	sub	sp, #44	; 0x2c
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
   e1246:	2300      	movs	r3, #0
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e1248:	2601      	movs	r6, #1

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e124a:	4607      	mov	r7, r0
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
   e124c:	a804      	add	r0, sp, #16

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e124e:	4615      	mov	r5, r2
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e1250:	9601      	str	r6, [sp, #4]
    X->n = 0;
   e1252:	9302      	str	r3, [sp, #8]
    X->p = NULL;
   e1254:	9303      	str	r3, [sp, #12]
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e1256:	9604      	str	r6, [sp, #16]
    X->n = 0;
   e1258:	9305      	str	r3, [sp, #20]
    X->p = NULL;
   e125a:	9306      	str	r3, [sp, #24]
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e125c:	9607      	str	r6, [sp, #28]
    X->n = 0;
   e125e:	9308      	str	r3, [sp, #32]
    X->p = NULL;
   e1260:	9309      	str	r3, [sp, #36]	; 0x24
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
   e1262:	f7fe ff96 	bl	e0192 <mbedtls_mpi_copy>
   e1266:	4604      	mov	r4, r0
   e1268:	2800      	cmp	r0, #0
   e126a:	d163      	bne.n	e1334 <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
   e126c:	4629      	mov	r1, r5
   e126e:	a807      	add	r0, sp, #28
   e1270:	f7fe ff8f 	bl	e0192 <mbedtls_mpi_copy>
   e1274:	4604      	mov	r4, r0
   e1276:	2800      	cmp	r0, #0
   e1278:	d15c      	bne.n	e1334 <mbedtls_mpi_gcd+0xf2>

    lz = mbedtls_mpi_lsb( &TA );
   e127a:	a804      	add	r0, sp, #16
   e127c:	f7ff f817 	bl	e02ae <mbedtls_mpi_lsb>
   e1280:	4605      	mov	r5, r0
    lzt = mbedtls_mpi_lsb( &TB );
   e1282:	a807      	add	r0, sp, #28
   e1284:	f7ff f813 	bl	e02ae <mbedtls_mpi_lsb>
   e1288:	4285      	cmp	r5, r0
   e128a:	bf28      	it	cs
   e128c:	4605      	movcs	r5, r0

    if( lzt < lz )
        lz = lzt;

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
   e128e:	4629      	mov	r1, r5
   e1290:	a804      	add	r0, sp, #16
   e1292:	f7ff f906 	bl	e04a2 <mbedtls_mpi_shift_r>
   e1296:	4604      	mov	r4, r0
   e1298:	2800      	cmp	r0, #0
   e129a:	d14b      	bne.n	e1334 <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
   e129c:	4629      	mov	r1, r5
   e129e:	a807      	add	r0, sp, #28
   e12a0:	f7ff f8ff 	bl	e04a2 <mbedtls_mpi_shift_r>
   e12a4:	4604      	mov	r4, r0
   e12a6:	2800      	cmp	r0, #0
   e12a8:	d144      	bne.n	e1334 <mbedtls_mpi_gcd+0xf2>

    TA.s = TB.s = 1;
   e12aa:	9607      	str	r6, [sp, #28]
   e12ac:	9604      	str	r6, [sp, #16]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
   e12ae:	2100      	movs	r1, #0
   e12b0:	a804      	add	r0, sp, #16
   e12b2:	f7ff fa1a 	bl	e06ea <mbedtls_mpi_cmp_int>
   e12b6:	2800      	cmp	r0, #0
   e12b8:	d031      	beq.n	e131e <mbedtls_mpi_gcd+0xdc>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
   e12ba:	a804      	add	r0, sp, #16
   e12bc:	f7fe fff7 	bl	e02ae <mbedtls_mpi_lsb>
   e12c0:	4601      	mov	r1, r0
   e12c2:	a804      	add	r0, sp, #16
   e12c4:	f7ff f8ed 	bl	e04a2 <mbedtls_mpi_shift_r>
   e12c8:	4604      	mov	r4, r0
   e12ca:	2800      	cmp	r0, #0
   e12cc:	d132      	bne.n	e1334 <mbedtls_mpi_gcd+0xf2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
   e12ce:	a807      	add	r0, sp, #28
   e12d0:	f7fe ffed 	bl	e02ae <mbedtls_mpi_lsb>
   e12d4:	4601      	mov	r1, r0
   e12d6:	a807      	add	r0, sp, #28
   e12d8:	f7ff f8e3 	bl	e04a2 <mbedtls_mpi_shift_r>
   e12dc:	4604      	mov	r4, r0
   e12de:	bb48      	cbnz	r0, e1334 <mbedtls_mpi_gcd+0xf2>

        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
   e12e0:	a907      	add	r1, sp, #28
   e12e2:	a804      	add	r0, sp, #16
   e12e4:	f7ff f9bc 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   e12e8:	2800      	cmp	r0, #0
   e12ea:	db09      	blt.n	e1300 <mbedtls_mpi_gcd+0xbe>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
   e12ec:	a904      	add	r1, sp, #16
   e12ee:	aa07      	add	r2, sp, #28
   e12f0:	4608      	mov	r0, r1
   e12f2:	f7ff fa6a 	bl	e07ca <mbedtls_mpi_sub_abs>
   e12f6:	4604      	mov	r4, r0
   e12f8:	b9e0      	cbnz	r0, e1334 <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
   e12fa:	2101      	movs	r1, #1
   e12fc:	a804      	add	r0, sp, #16
   e12fe:	e008      	b.n	e1312 <mbedtls_mpi_gcd+0xd0>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
   e1300:	a907      	add	r1, sp, #28
   e1302:	aa04      	add	r2, sp, #16
   e1304:	4608      	mov	r0, r1
   e1306:	f7ff fa60 	bl	e07ca <mbedtls_mpi_sub_abs>
   e130a:	4604      	mov	r4, r0
   e130c:	b990      	cbnz	r0, e1334 <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
   e130e:	2101      	movs	r1, #1
   e1310:	a807      	add	r0, sp, #28
   e1312:	f7ff f8c6 	bl	e04a2 <mbedtls_mpi_shift_r>
   e1316:	4604      	mov	r4, r0
   e1318:	2800      	cmp	r0, #0
   e131a:	d0c8      	beq.n	e12ae <mbedtls_mpi_gcd+0x6c>
   e131c:	e00a      	b.n	e1334 <mbedtls_mpi_gcd+0xf2>
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
   e131e:	4629      	mov	r1, r5
   e1320:	a807      	add	r0, sp, #28
   e1322:	f7ff f86f 	bl	e0404 <mbedtls_mpi_shift_l>
   e1326:	4604      	mov	r4, r0
   e1328:	b920      	cbnz	r0, e1334 <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
   e132a:	a907      	add	r1, sp, #28
   e132c:	4638      	mov	r0, r7
   e132e:	f7fe ff30 	bl	e0192 <mbedtls_mpi_copy>
   e1332:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
   e1334:	a801      	add	r0, sp, #4
   e1336:	f7fe feb2 	bl	e009e <mbedtls_mpi_free>
   e133a:	a804      	add	r0, sp, #16
   e133c:	f7fe feaf 	bl	e009e <mbedtls_mpi_free>
   e1340:	a807      	add	r0, sp, #28
   e1342:	f7fe feac 	bl	e009e <mbedtls_mpi_free>

    return( ret );
}
   e1346:	4620      	mov	r0, r4
   e1348:	b00b      	add	sp, #44	; 0x2c
   e134a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e134c <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   e134c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int ret;
    size_t const limbs = CHARS_TO_LIMBS( size );
   e1350:	f011 0403 	ands.w	r4, r1, #3
   e1354:	bf18      	it	ne
   e1356:	2401      	movne	r4, #1
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   e1358:	4699      	mov	r9, r3

    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
   e135a:	6843      	ldr	r3, [r0, #4]
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
    int ret;
    size_t const limbs = CHARS_TO_LIMBS( size );
   e135c:	eb04 0491 	add.w	r4, r4, r1, lsr #2

    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
   e1360:	429c      	cmp	r4, r3
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   e1362:	4606      	mov	r6, r0
   e1364:	460f      	mov	r7, r1
   e1366:	4690      	mov	r8, r2

    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
   e1368:	d106      	bne.n	e1378 <mbedtls_mpi_fill_random+0x2c>
    {
        mbedtls_mpi_free( X );
        mbedtls_mpi_init( X );
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
   e136a:	2100      	movs	r1, #0
   e136c:	4630      	mov	r0, r6
   e136e:	f7fe ff71 	bl	e0254 <mbedtls_mpi_lset>
   e1372:	4605      	mov	r5, r0
   e1374:	b9d8      	cbnz	r0, e13ae <mbedtls_mpi_fill_random+0x62>
   e1376:	e00e      	b.n	e1396 <mbedtls_mpi_fill_random+0x4a>
    MPI_VALIDATE_RET( f_rng != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
    {
        mbedtls_mpi_free( X );
   e1378:	f7fe fe91 	bl	e009e <mbedtls_mpi_free>
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e137c:	2301      	movs	r3, #1
   e137e:	6033      	str	r3, [r6, #0]
    X->n = 0;
   e1380:	2300      	movs	r3, #0
   e1382:	6073      	str	r3, [r6, #4]
    X->p = NULL;
   e1384:	60b3      	str	r3, [r6, #8]
    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
    {
        mbedtls_mpi_free( X );
        mbedtls_mpi_init( X );
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
   e1386:	4621      	mov	r1, r4
   e1388:	4630      	mov	r0, r6
   e138a:	f7fe fe9a 	bl	e00c2 <mbedtls_mpi_grow>
   e138e:	4605      	mov	r5, r0
   e1390:	2800      	cmp	r0, #0
   e1392:	d0ea      	beq.n	e136a <mbedtls_mpi_fill_random+0x1e>
   e1394:	e00b      	b.n	e13ae <mbedtls_mpi_fill_random+0x62>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    Xp = (unsigned char*) X->p;
    f_rng( p_rng, Xp + overhead, size );
   e1396:	68b1      	ldr	r1, [r6, #8]
   e1398:	ebc7 0384 	rsb	r3, r7, r4, lsl #2
   e139c:	463a      	mov	r2, r7
   e139e:	4419      	add	r1, r3
   e13a0:	4648      	mov	r0, r9
   e13a2:	47c0      	blx	r8

static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
{
    mbedtls_mpi_uint *cur_limb_left;
    mbedtls_mpi_uint *cur_limb_right;
    if( limbs == 0 )
   e13a4:	b11c      	cbz	r4, e13ae <mbedtls_mpi_fill_random+0x62>
   e13a6:	4621      	mov	r1, r4
   e13a8:	68b0      	ldr	r0, [r6, #8]
   e13aa:	f7fe fe61 	bl	e0070 <_ZL21mpi_bigendian_to_hostPmj.part.1>

    mpi_bigendian_to_host( X->p, limbs );

cleanup:
    return( ret );
}
   e13ae:	4628      	mov	r0, r5
   e13b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e13b4 <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
   e13b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e13b8:	4680      	mov	r8, r0
   e13ba:	b09c      	sub	sp, #112	; 0x70
   e13bc:	460f      	mov	r7, r1
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
   e13be:	4610      	mov	r0, r2
   e13c0:	2101      	movs	r1, #1

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
   e13c2:	4616      	mov	r6, r2
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
   e13c4:	f7ff f991 	bl	e06ea <mbedtls_mpi_cmp_int>
   e13c8:	2800      	cmp	r0, #0
   e13ca:	f340 814c 	ble.w	e1666 <mbedtls_mpi_inv_mod+0x2b2>
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
   e13ce:	2300      	movs	r3, #0
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e13d0:	2501      	movs	r5, #1

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
   e13d2:	4632      	mov	r2, r6
   e13d4:	4639      	mov	r1, r7
   e13d6:	a801      	add	r0, sp, #4
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e13d8:	9504      	str	r5, [sp, #16]
    X->n = 0;
   e13da:	9305      	str	r3, [sp, #20]
    X->p = NULL;
   e13dc:	9306      	str	r3, [sp, #24]
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e13de:	9507      	str	r5, [sp, #28]
    X->n = 0;
   e13e0:	9308      	str	r3, [sp, #32]
    X->p = NULL;
   e13e2:	9309      	str	r3, [sp, #36]	; 0x24
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e13e4:	950a      	str	r5, [sp, #40]	; 0x28
    X->n = 0;
   e13e6:	930b      	str	r3, [sp, #44]	; 0x2c
    X->p = NULL;
   e13e8:	930c      	str	r3, [sp, #48]	; 0x30
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e13ea:	950d      	str	r5, [sp, #52]	; 0x34
    X->n = 0;
   e13ec:	930e      	str	r3, [sp, #56]	; 0x38
    X->p = NULL;
   e13ee:	930f      	str	r3, [sp, #60]	; 0x3c
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e13f0:	9501      	str	r5, [sp, #4]
    X->n = 0;
   e13f2:	9302      	str	r3, [sp, #8]
    X->p = NULL;
   e13f4:	9303      	str	r3, [sp, #12]
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e13f6:	9510      	str	r5, [sp, #64]	; 0x40
    X->n = 0;
   e13f8:	9311      	str	r3, [sp, #68]	; 0x44
    X->p = NULL;
   e13fa:	9312      	str	r3, [sp, #72]	; 0x48
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e13fc:	9513      	str	r5, [sp, #76]	; 0x4c
    X->n = 0;
   e13fe:	9314      	str	r3, [sp, #80]	; 0x50
    X->p = NULL;
   e1400:	9315      	str	r3, [sp, #84]	; 0x54
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e1402:	9516      	str	r5, [sp, #88]	; 0x58
    X->n = 0;
   e1404:	9317      	str	r3, [sp, #92]	; 0x5c
    X->p = NULL;
   e1406:	9318      	str	r3, [sp, #96]	; 0x60
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
   e1408:	9519      	str	r5, [sp, #100]	; 0x64
    X->n = 0;
   e140a:	931a      	str	r3, [sp, #104]	; 0x68
    X->p = NULL;
   e140c:	931b      	str	r3, [sp, #108]	; 0x6c

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
   e140e:	f7ff ff18 	bl	e1242 <mbedtls_mpi_gcd>
   e1412:	4604      	mov	r4, r0
   e1414:	2800      	cmp	r0, #0
   e1416:	f040 8109 	bne.w	e162c <mbedtls_mpi_inv_mod+0x278>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
   e141a:	4629      	mov	r1, r5
   e141c:	a801      	add	r0, sp, #4
   e141e:	f7ff f964 	bl	e06ea <mbedtls_mpi_cmp_int>
   e1422:	2800      	cmp	r0, #0
   e1424:	f040 8100 	bne.w	e1628 <mbedtls_mpi_inv_mod+0x274>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
   e1428:	4632      	mov	r2, r6
   e142a:	4639      	mov	r1, r7
   e142c:	a804      	add	r0, sp, #16
   e142e:	f7ff fcb7 	bl	e0da0 <mbedtls_mpi_mod_mpi>
   e1432:	4604      	mov	r4, r0
   e1434:	2800      	cmp	r0, #0
   e1436:	f040 80f9 	bne.w	e162c <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
   e143a:	a904      	add	r1, sp, #16
   e143c:	a807      	add	r0, sp, #28
   e143e:	f7fe fea8 	bl	e0192 <mbedtls_mpi_copy>
   e1442:	4604      	mov	r4, r0
   e1444:	2800      	cmp	r0, #0
   e1446:	f040 80f1 	bne.w	e162c <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
   e144a:	4631      	mov	r1, r6
   e144c:	a810      	add	r0, sp, #64	; 0x40
   e144e:	f7fe fea0 	bl	e0192 <mbedtls_mpi_copy>
   e1452:	4604      	mov	r4, r0
   e1454:	2800      	cmp	r0, #0
   e1456:	f040 80e9 	bne.w	e162c <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
   e145a:	4631      	mov	r1, r6
   e145c:	a813      	add	r0, sp, #76	; 0x4c
   e145e:	f7fe fe98 	bl	e0192 <mbedtls_mpi_copy>
   e1462:	4604      	mov	r4, r0
   e1464:	2800      	cmp	r0, #0
   e1466:	f040 80e1 	bne.w	e162c <mbedtls_mpi_inv_mod+0x278>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
   e146a:	4629      	mov	r1, r5
   e146c:	a80a      	add	r0, sp, #40	; 0x28
   e146e:	f7fe fef1 	bl	e0254 <mbedtls_mpi_lset>
   e1472:	4604      	mov	r4, r0
   e1474:	2800      	cmp	r0, #0
   e1476:	f040 80d9 	bne.w	e162c <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
   e147a:	4601      	mov	r1, r0
   e147c:	a80d      	add	r0, sp, #52	; 0x34
   e147e:	f7fe fee9 	bl	e0254 <mbedtls_mpi_lset>
   e1482:	4604      	mov	r4, r0
   e1484:	2800      	cmp	r0, #0
   e1486:	f040 80d1 	bne.w	e162c <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
   e148a:	4601      	mov	r1, r0
   e148c:	a816      	add	r0, sp, #88	; 0x58
   e148e:	f7fe fee1 	bl	e0254 <mbedtls_mpi_lset>
   e1492:	4604      	mov	r4, r0
   e1494:	2800      	cmp	r0, #0
   e1496:	f040 80c9 	bne.w	e162c <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
   e149a:	4629      	mov	r1, r5
   e149c:	a819      	add	r0, sp, #100	; 0x64
   e149e:	f7fe fed9 	bl	e0254 <mbedtls_mpi_lset>
   e14a2:	4604      	mov	r4, r0
   e14a4:	2800      	cmp	r0, #0
   e14a6:	f040 80c1 	bne.w	e162c <mbedtls_mpi_inv_mod+0x278>

    do
    {
        while( ( TU.p[0] & 1 ) == 0 )
   e14aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e14ac:	681b      	ldr	r3, [r3, #0]
   e14ae:	07dd      	lsls	r5, r3, #31
   e14b0:	d44c      	bmi.n	e154c <mbedtls_mpi_inv_mod+0x198>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
   e14b2:	2101      	movs	r1, #1
   e14b4:	a807      	add	r0, sp, #28
   e14b6:	f7fe fff4 	bl	e04a2 <mbedtls_mpi_shift_r>
   e14ba:	4604      	mov	r4, r0
   e14bc:	2800      	cmp	r0, #0
   e14be:	f040 80b5 	bne.w	e162c <mbedtls_mpi_inv_mod+0x278>

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
   e14c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e14c4:	681b      	ldr	r3, [r3, #0]
   e14c6:	07dc      	lsls	r4, r3, #31
   e14c8:	d410      	bmi.n	e14ec <mbedtls_mpi_inv_mod+0x138>
   e14ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e14cc:	681b      	ldr	r3, [r3, #0]
   e14ce:	07d8      	lsls	r0, r3, #31
   e14d0:	d40c      	bmi.n	e14ec <mbedtls_mpi_inv_mod+0x138>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
   e14d2:	2101      	movs	r1, #1
   e14d4:	a80a      	add	r0, sp, #40	; 0x28
   e14d6:	f7fe ffe4 	bl	e04a2 <mbedtls_mpi_shift_r>
   e14da:	4604      	mov	r4, r0
   e14dc:	2800      	cmp	r0, #0
   e14de:	f040 80a5 	bne.w	e162c <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
   e14e2:	2101      	movs	r1, #1
   e14e4:	a80d      	add	r0, sp, #52	; 0x34
   e14e6:	f7fe ffdc 	bl	e04a2 <mbedtls_mpi_shift_r>
   e14ea:	e7da      	b.n	e14a2 <mbedtls_mpi_inv_mod+0xee>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
   e14ec:	a90a      	add	r1, sp, #40	; 0x28
   e14ee:	aa10      	add	r2, sp, #64	; 0x40
   e14f0:	4608      	mov	r0, r1
   e14f2:	f7ff f9aa 	bl	e084a <mbedtls_mpi_add_mpi>
   e14f6:	4604      	mov	r4, r0
   e14f8:	2800      	cmp	r0, #0
   e14fa:	f040 8097 	bne.w	e162c <mbedtls_mpi_inv_mod+0x278>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
   e14fe:	a90d      	add	r1, sp, #52	; 0x34
   e1500:	aa04      	add	r2, sp, #16
   e1502:	4608      	mov	r0, r1
   e1504:	f7ff f9c2 	bl	e088c <mbedtls_mpi_sub_mpi>
   e1508:	4604      	mov	r4, r0
   e150a:	2800      	cmp	r0, #0
   e150c:	d0e1      	beq.n	e14d2 <mbedtls_mpi_inv_mod+0x11e>
   e150e:	e08d      	b.n	e162c <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
        }

        while( ( TV.p[0] & 1 ) == 0 )
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
   e1510:	2101      	movs	r1, #1
   e1512:	a813      	add	r0, sp, #76	; 0x4c
   e1514:	f7fe ffc5 	bl	e04a2 <mbedtls_mpi_shift_r>
   e1518:	4604      	mov	r4, r0
   e151a:	2800      	cmp	r0, #0
   e151c:	f040 8086 	bne.w	e162c <mbedtls_mpi_inv_mod+0x278>

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
   e1520:	9b18      	ldr	r3, [sp, #96]	; 0x60
   e1522:	681b      	ldr	r3, [r3, #0]
   e1524:	07da      	lsls	r2, r3, #31
   e1526:	d416      	bmi.n	e1556 <mbedtls_mpi_inv_mod+0x1a2>
   e1528:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e152a:	681b      	ldr	r3, [r3, #0]
   e152c:	07db      	lsls	r3, r3, #31
   e152e:	d412      	bmi.n	e1556 <mbedtls_mpi_inv_mod+0x1a2>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
   e1530:	2101      	movs	r1, #1
   e1532:	a816      	add	r0, sp, #88	; 0x58
   e1534:	f7fe ffb5 	bl	e04a2 <mbedtls_mpi_shift_r>
   e1538:	4604      	mov	r4, r0
   e153a:	2800      	cmp	r0, #0
   e153c:	d176      	bne.n	e162c <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
   e153e:	2101      	movs	r1, #1
   e1540:	a819      	add	r0, sp, #100	; 0x64
   e1542:	f7fe ffae 	bl	e04a2 <mbedtls_mpi_shift_r>
   e1546:	4604      	mov	r4, r0
   e1548:	2800      	cmp	r0, #0
   e154a:	d16f      	bne.n	e162c <mbedtls_mpi_inv_mod+0x278>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
        }

        while( ( TV.p[0] & 1 ) == 0 )
   e154c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e154e:	681b      	ldr	r3, [r3, #0]
   e1550:	07d9      	lsls	r1, r3, #31
   e1552:	d411      	bmi.n	e1578 <mbedtls_mpi_inv_mod+0x1c4>
   e1554:	e7dc      	b.n	e1510 <mbedtls_mpi_inv_mod+0x15c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
   e1556:	a916      	add	r1, sp, #88	; 0x58
   e1558:	aa10      	add	r2, sp, #64	; 0x40
   e155a:	4608      	mov	r0, r1
   e155c:	f7ff f975 	bl	e084a <mbedtls_mpi_add_mpi>
   e1560:	4604      	mov	r4, r0
   e1562:	2800      	cmp	r0, #0
   e1564:	d162      	bne.n	e162c <mbedtls_mpi_inv_mod+0x278>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
   e1566:	a919      	add	r1, sp, #100	; 0x64
   e1568:	aa04      	add	r2, sp, #16
   e156a:	4608      	mov	r0, r1
   e156c:	f7ff f98e 	bl	e088c <mbedtls_mpi_sub_mpi>
   e1570:	4604      	mov	r4, r0
   e1572:	2800      	cmp	r0, #0
   e1574:	d0dc      	beq.n	e1530 <mbedtls_mpi_inv_mod+0x17c>
   e1576:	e059      	b.n	e162c <mbedtls_mpi_inv_mod+0x278>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
        }

        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
   e1578:	a913      	add	r1, sp, #76	; 0x4c
   e157a:	a807      	add	r0, sp, #28
   e157c:	f7ff f870 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   e1580:	2800      	cmp	r0, #0
   e1582:	db1f      	blt.n	e15c4 <mbedtls_mpi_inv_mod+0x210>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
   e1584:	a907      	add	r1, sp, #28
   e1586:	aa13      	add	r2, sp, #76	; 0x4c
   e1588:	4608      	mov	r0, r1
   e158a:	f7ff f97f 	bl	e088c <mbedtls_mpi_sub_mpi>
   e158e:	4604      	mov	r4, r0
   e1590:	2800      	cmp	r0, #0
   e1592:	d14b      	bne.n	e162c <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
   e1594:	a90a      	add	r1, sp, #40	; 0x28
   e1596:	aa16      	add	r2, sp, #88	; 0x58
   e1598:	4608      	mov	r0, r1
   e159a:	f7ff f977 	bl	e088c <mbedtls_mpi_sub_mpi>
   e159e:	4604      	mov	r4, r0
   e15a0:	2800      	cmp	r0, #0
   e15a2:	d143      	bne.n	e162c <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
   e15a4:	aa19      	add	r2, sp, #100	; 0x64
   e15a6:	a90d      	add	r1, sp, #52	; 0x34
   e15a8:	4608      	mov	r0, r1
   e15aa:	f7ff f96f 	bl	e088c <mbedtls_mpi_sub_mpi>
   e15ae:	4604      	mov	r4, r0
   e15b0:	2800      	cmp	r0, #0
   e15b2:	d13b      	bne.n	e162c <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
   e15b4:	2100      	movs	r1, #0
   e15b6:	a807      	add	r0, sp, #28
   e15b8:	f7ff f897 	bl	e06ea <mbedtls_mpi_cmp_int>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );

    do
   e15bc:	2800      	cmp	r0, #0
   e15be:	f47f af74 	bne.w	e14aa <mbedtls_mpi_inv_mod+0xf6>
   e15c2:	e017      	b.n	e15f4 <mbedtls_mpi_inv_mod+0x240>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
   e15c4:	a913      	add	r1, sp, #76	; 0x4c
   e15c6:	aa07      	add	r2, sp, #28
   e15c8:	4608      	mov	r0, r1
   e15ca:	f7ff f95f 	bl	e088c <mbedtls_mpi_sub_mpi>
   e15ce:	4604      	mov	r4, r0
   e15d0:	bb60      	cbnz	r0, e162c <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
   e15d2:	a916      	add	r1, sp, #88	; 0x58
   e15d4:	aa0a      	add	r2, sp, #40	; 0x28
   e15d6:	4608      	mov	r0, r1
   e15d8:	f7ff f958 	bl	e088c <mbedtls_mpi_sub_mpi>
   e15dc:	4604      	mov	r4, r0
   e15de:	bb28      	cbnz	r0, e162c <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
   e15e0:	aa0d      	add	r2, sp, #52	; 0x34
   e15e2:	a919      	add	r1, sp, #100	; 0x64
   e15e4:	e7e0      	b.n	e15a8 <mbedtls_mpi_inv_mod+0x1f4>
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
   e15e6:	a916      	add	r1, sp, #88	; 0x58
   e15e8:	4632      	mov	r2, r6
   e15ea:	4608      	mov	r0, r1
   e15ec:	f7ff f92d 	bl	e084a <mbedtls_mpi_add_mpi>
   e15f0:	4604      	mov	r4, r0
   e15f2:	b9d8      	cbnz	r0, e162c <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
   e15f4:	2100      	movs	r1, #0
   e15f6:	a816      	add	r0, sp, #88	; 0x58
   e15f8:	f7ff f877 	bl	e06ea <mbedtls_mpi_cmp_int>
   e15fc:	2800      	cmp	r0, #0
   e15fe:	dbf2      	blt.n	e15e6 <mbedtls_mpi_inv_mod+0x232>
   e1600:	e006      	b.n	e1610 <mbedtls_mpi_inv_mod+0x25c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
   e1602:	a916      	add	r1, sp, #88	; 0x58
   e1604:	4632      	mov	r2, r6
   e1606:	4608      	mov	r0, r1
   e1608:	f7ff f940 	bl	e088c <mbedtls_mpi_sub_mpi>
   e160c:	4604      	mov	r4, r0
   e160e:	b968      	cbnz	r0, e162c <mbedtls_mpi_inv_mod+0x278>
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
   e1610:	4631      	mov	r1, r6
   e1612:	a816      	add	r0, sp, #88	; 0x58
   e1614:	f7ff f824 	bl	e0660 <mbedtls_mpi_cmp_mpi>
   e1618:	2800      	cmp	r0, #0
   e161a:	daf2      	bge.n	e1602 <mbedtls_mpi_inv_mod+0x24e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
   e161c:	a916      	add	r1, sp, #88	; 0x58
   e161e:	4640      	mov	r0, r8
   e1620:	f7fe fdb7 	bl	e0192 <mbedtls_mpi_copy>
   e1624:	4604      	mov	r4, r0
   e1626:	e001      	b.n	e162c <mbedtls_mpi_inv_mod+0x278>

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
   e1628:	f06f 040d 	mvn.w	r4, #13

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );

cleanup:

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
   e162c:	a804      	add	r0, sp, #16
   e162e:	f7fe fd36 	bl	e009e <mbedtls_mpi_free>
   e1632:	a807      	add	r0, sp, #28
   e1634:	f7fe fd33 	bl	e009e <mbedtls_mpi_free>
   e1638:	a80a      	add	r0, sp, #40	; 0x28
   e163a:	f7fe fd30 	bl	e009e <mbedtls_mpi_free>
   e163e:	a80d      	add	r0, sp, #52	; 0x34
   e1640:	f7fe fd2d 	bl	e009e <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
   e1644:	a801      	add	r0, sp, #4
   e1646:	f7fe fd2a 	bl	e009e <mbedtls_mpi_free>
   e164a:	a810      	add	r0, sp, #64	; 0x40
   e164c:	f7fe fd27 	bl	e009e <mbedtls_mpi_free>
   e1650:	a813      	add	r0, sp, #76	; 0x4c
   e1652:	f7fe fd24 	bl	e009e <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
   e1656:	a816      	add	r0, sp, #88	; 0x58
   e1658:	f7fe fd21 	bl	e009e <mbedtls_mpi_free>
   e165c:	a819      	add	r0, sp, #100	; 0x64
   e165e:	f7fe fd1e 	bl	e009e <mbedtls_mpi_free>

    return( ret );
   e1662:	4620      	mov	r0, r4
   e1664:	e001      	b.n	e166a <mbedtls_mpi_inv_mod+0x2b6>
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   e1666:	f06f 0003 	mvn.w	r0, #3
    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );

    return( ret );
}
   e166a:	b01c      	add	sp, #112	; 0x70
   e166c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e1670 <_ZL14aes_gen_tablesv>:
#define MUL(x,y) ( ( (x) && (y) ) ? pow[(log[(x)]+log[(y)]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
   e1670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1674:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
   e1678:	2301      	movs	r3, #1
   e167a:	2200      	movs	r2, #0
    {
        pow[i] = x;
        log[x] = i;
   e167c:	f50d 6082 	add.w	r0, sp, #1040	; 0x410
    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
   e1680:	a904      	add	r1, sp, #16
        log[x] = i;
   e1682:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
   e1686:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
   e168a:	f013 0180 	ands.w	r1, r3, #128	; 0x80
   e168e:	bf18      	it	ne
   e1690:	211b      	movne	r1, #27
   e1692:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
   e1696:	3201      	adds	r2, #1
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
   e1698:	404b      	eors	r3, r1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
   e169a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
   e169e:	b2db      	uxtb	r3, r3
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
   e16a0:	d1ee      	bne.n	e1680 <_ZL14aes_gen_tablesv+0x10>
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
   e16a2:	4c66      	ldr	r4, [pc, #408]	; (e183c <_ZL14aes_gen_tablesv+0x1cc>)
   e16a4:	2301      	movs	r3, #1
   e16a6:	2200      	movs	r2, #0
        x = XTIME( x ) & 0xFF;
   e16a8:	f013 0180 	ands.w	r1, r3, #128	; 0x80
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
   e16ac:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        x = XTIME( x ) & 0xFF;
   e16b0:	bf18      	it	ne
   e16b2:	211b      	movne	r1, #27
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
   e16b4:	3201      	adds	r2, #1
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
   e16b6:	ea81 0343 	eor.w	r3, r1, r3, lsl #1
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
   e16ba:	2a0a      	cmp	r2, #10
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
   e16bc:	b2db      	uxtb	r3, r3
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
   e16be:	d1f3      	bne.n	e16a8 <_ZL14aes_gen_tablesv+0x38>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
   e16c0:	4e5f      	ldr	r6, [pc, #380]	; (e1840 <_ZL14aes_gen_tablesv+0x1d0>)
    RSb[0x63] = 0x00;
   e16c2:	4d60      	ldr	r5, [pc, #384]	; (e1844 <_ZL14aes_gen_tablesv+0x1d4>)
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
   e16c4:	2363      	movs	r3, #99	; 0x63
   e16c6:	7033      	strb	r3, [r6, #0]
    RSb[0x63] = 0x00;
   e16c8:	2300      	movs	r3, #0
   e16ca:	f885 3063 	strb.w	r3, [r5, #99]	; 0x63

    for( i = 1; i < 256; i++ )
   e16ce:	2401      	movs	r4, #1
    {
        x = pow[255 - log[i]];
   e16d0:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   e16d4:	aa04      	add	r2, sp, #16
   e16d6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
   e16da:	f852 e023 	ldr.w	lr, [r2, r3, lsl #2]

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
   e16de:	ea4f 11ee 	mov.w	r1, lr, asr #7
   e16e2:	ea41 014e 	orr.w	r1, r1, lr, lsl #1
   e16e6:	b2c9      	uxtb	r1, r1
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
   e16e8:	11ca      	asrs	r2, r1, #7
   e16ea:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
   e16ee:	b2d2      	uxtb	r2, r2
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
   e16f0:	11d3      	asrs	r3, r2, #7
   e16f2:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
   e16f6:	b2db      	uxtb	r3, r3
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y ^ 0x63;
   e16f8:	f08e 0e63 	eor.w	lr, lr, #99	; 0x63
        x = pow[255 - log[i]];

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
   e16fc:	11df      	asrs	r7, r3, #7
        x ^= y ^ 0x63;
   e16fe:	ea8e 0101 	eor.w	r1, lr, r1
        x = pow[255 - log[i]];

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
   e1702:	ea47 0743 	orr.w	r7, r7, r3, lsl #1
        x ^= y ^ 0x63;
   e1706:	404a      	eors	r2, r1
   e1708:	4053      	eors	r3, r2
   e170a:	b2fa      	uxtb	r2, r7
   e170c:	4053      	eors	r3, r2

        FSb[i] = (unsigned char) x;
   e170e:	5533      	strb	r3, [r6, r4]
        RSb[x] = (unsigned char) i;
   e1710:	54ec      	strb	r4, [r5, r3]
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
    RSb[0x63] = 0x00;

    for( i = 1; i < 256; i++ )
   e1712:	3401      	adds	r4, #1
   e1714:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   e1718:	d1da      	bne.n	e16d0 <_ZL14aes_gen_tablesv+0x60>
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
   e171a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   e171c:	9301      	str	r3, [sp, #4]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
   e171e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   e1720:	9302      	str	r3, [sp, #8]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
   e1722:	6ac7      	ldr	r7, [r0, #44]	; 0x2c

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
   e1724:	6b43      	ldr	r3, [r0, #52]	; 0x34
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
   e1726:	f8df e118 	ldr.w	lr, [pc, #280]	; e1840 <_ZL14aes_gen_tablesv+0x1d0>
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
                 ( (uint32_t) z << 24 );
   e172a:	f8df c12c 	ldr.w	ip, [pc, #300]	; e1858 <_ZL14aes_gen_tablesv+0x1e8>

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8( FT0[i] );
   e172e:	f8df 812c 	ldr.w	r8, [pc, #300]	; e185c <_ZL14aes_gen_tablesv+0x1ec>
        FT2[i] = ROTL8( FT1[i] );
   e1732:	f8df 912c 	ldr.w	r9, [pc, #300]	; e1860 <_ZL14aes_gen_tablesv+0x1f0>
        FT3[i] = ROTL8( FT2[i] );
   e1736:	f8df a12c 	ldr.w	sl, [pc, #300]	; e1864 <_ZL14aes_gen_tablesv+0x1f4>
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];
   e173a:	f8df b108 	ldr.w	fp, [pc, #264]	; e1844 <_ZL14aes_gen_tablesv+0x1d4>

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
   e173e:	9303      	str	r3, [sp, #12]
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
   e1740:	2200      	movs	r2, #0
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
   e1742:	f812 000e 	ldrb.w	r0, [r2, lr]
        y = XTIME( x ) & 0xFF;
   e1746:	f010 0f80 	tst.w	r0, #128	; 0x80
   e174a:	bf14      	ite	ne
   e174c:	211b      	movne	r1, #27
   e174e:	2100      	moveq	r1, #0
   e1750:	ea81 0140 	eor.w	r1, r1, r0, lsl #1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
   e1754:	0403      	lsls	r3, r0, #16
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
        y = XTIME( x ) & 0xFF;
   e1756:	b2c9      	uxtb	r1, r1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
   e1758:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   e175c:	404b      	eors	r3, r1
   e175e:	4041      	eors	r1, r0
   e1760:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                 ( (uint32_t) z << 24 );
   e1764:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8( FT0[i] );
   e1768:	ea4f 6333 	mov.w	r3, r3, ror #24
   e176c:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
   e1770:	ea4f 6333 	mov.w	r3, r3, ror #24
   e1774:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
   e1778:	ea4f 6333 	mov.w	r3, r3, ror #24
   e177c:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];
   e1780:	f81b 3002 	ldrb.w	r3, [fp, r2]
   e1784:	0094      	lsls	r4, r2, #2

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
   e1786:	b1d3      	cbz	r3, e17be <_ZL14aes_gen_tablesv+0x14e>
   e1788:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
   e178c:	9801      	ldr	r0, [sp, #4]
   e178e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
   e1792:	1845      	adds	r5, r0, r1
   e1794:	20ff      	movs	r0, #255	; 0xff
   e1796:	fb95 f6f0 	sdiv	r6, r5, r0
   e179a:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
   e179e:	1bae      	subs	r6, r5, r6
   e17a0:	ad04      	add	r5, sp, #16
   e17a2:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
   e17a6:	9e02      	ldr	r6, [sp, #8]
   e17a8:	4431      	add	r1, r6
   e17aa:	fb91 f0f0 	sdiv	r0, r1, r0
   e17ae:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
   e17b2:	1a09      	subs	r1, r1, r0
   e17b4:	a804      	add	r0, sp, #16
   e17b6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   e17ba:	0209      	lsls	r1, r1, #8
   e17bc:	e001      	b.n	e17c2 <_ZL14aes_gen_tablesv+0x152>
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
   e17be:	461d      	mov	r5, r3
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
   e17c0:	4619      	mov	r1, r3
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
   e17c2:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
   e17c4:	b183      	cbz	r3, e17e8 <_ZL14aes_gen_tablesv+0x178>
   e17c6:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
   e17ca:	9803      	ldr	r0, [sp, #12]
   e17cc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
   e17d0:	4401      	add	r1, r0
   e17d2:	20ff      	movs	r0, #255	; 0xff
   e17d4:	fb91 f0f0 	sdiv	r0, r1, r0
   e17d8:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
   e17dc:	1a08      	subs	r0, r1, r0
   e17de:	a904      	add	r1, sp, #16
   e17e0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   e17e4:	0409      	lsls	r1, r1, #16
   e17e6:	e000      	b.n	e17ea <_ZL14aes_gen_tablesv+0x17a>
   e17e8:	4619      	mov	r1, r3
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
   e17ea:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
   e17ec:	b173      	cbz	r3, e180c <_ZL14aes_gen_tablesv+0x19c>
   e17ee:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
   e17f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   e17f6:	21ff      	movs	r1, #255	; 0xff
   e17f8:	443b      	add	r3, r7
   e17fa:	fb93 f1f1 	sdiv	r1, r3, r1
   e17fe:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
   e1802:	1a59      	subs	r1, r3, r1
   e1804:	ab04      	add	r3, sp, #16
   e1806:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   e180a:	061b      	lsls	r3, r3, #24

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
   e180c:	405d      	eors	r5, r3
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
   e180e:	4b0e      	ldr	r3, [pc, #56]	; (e1848 <_ZL14aes_gen_tablesv+0x1d8>)
   e1810:	50e5      	str	r5, [r4, r3]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
   e1812:	4b0e      	ldr	r3, [pc, #56]	; (e184c <_ZL14aes_gen_tablesv+0x1dc>)
   e1814:	ea4f 6535 	mov.w	r5, r5, ror #24
   e1818:	50e5      	str	r5, [r4, r3]
        RT2[i] = ROTL8( RT1[i] );
   e181a:	4b0d      	ldr	r3, [pc, #52]	; (e1850 <_ZL14aes_gen_tablesv+0x1e0>)
   e181c:	ea4f 6535 	mov.w	r5, r5, ror #24
   e1820:	50e5      	str	r5, [r4, r3]
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
   e1822:	3201      	adds	r2, #1
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
   e1824:	4b0b      	ldr	r3, [pc, #44]	; (e1854 <_ZL14aes_gen_tablesv+0x1e4>)
   e1826:	ea4f 6535 	mov.w	r5, r5, ror #24
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
   e182a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
   e182e:	50e5      	str	r5, [r4, r3]
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
   e1830:	d187      	bne.n	e1742 <_ZL14aes_gen_tablesv+0xd2>
        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */
    }
}
   e1832:	f60d 0d14 	addw	sp, sp, #2068	; 0x814
   e1836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e183a:	bf00      	nop
   e183c:	2003e474 	.word	0x2003e474
   e1840:	2003d374 	.word	0x2003d374
   e1844:	2003d274 	.word	0x2003d274
   e1848:	2003d874 	.word	0x2003d874
   e184c:	2003dc74 	.word	0x2003dc74
   e1850:	2003e074 	.word	0x2003e074
   e1854:	2003d474 	.word	0x2003d474
   e1858:	2003c274 	.word	0x2003c274
   e185c:	2003c674 	.word	0x2003c674
   e1860:	2003ca74 	.word	0x2003ca74
   e1864:	2003ce74 	.word	0x2003ce74

000e1868 <mbedtls_aes_init>:

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
   e1868:	f44f 728c 	mov.w	r2, #280	; 0x118
   e186c:	2100      	movs	r1, #0
   e186e:	f005 bb94 	b.w	e6f9a <memset>

000e1872 <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
   e1872:	b118      	cbz	r0, e187c <mbedtls_aes_free+0xa>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
   e1874:	f44f 718c 	mov.w	r1, #280	; 0x118
   e1878:	f7f8 be32 	b.w	da4e0 <mbedtls_platform_zeroize>
   e187c:	4770      	bx	lr
	...

000e1880 <mbedtls_aes_setkey_enc>:
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
   e1880:	2ac0      	cmp	r2, #192	; 0xc0
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
   e1882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e1884:	4604      	mov	r4, r0
   e1886:	460f      	mov	r7, r1
   e1888:	4615      	mov	r5, r2
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
   e188a:	d007      	beq.n	e189c <mbedtls_aes_setkey_enc+0x1c>
   e188c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   e1890:	d006      	beq.n	e18a0 <mbedtls_aes_setkey_enc+0x20>
   e1892:	2a80      	cmp	r2, #128	; 0x80
   e1894:	f040 80e2 	bne.w	e1a5c <mbedtls_aes_setkey_enc+0x1dc>
    {
        case 128: ctx->nr = 10; break;
   e1898:	230a      	movs	r3, #10
   e189a:	e002      	b.n	e18a2 <mbedtls_aes_setkey_enc+0x22>
        case 192: ctx->nr = 12; break;
   e189c:	230c      	movs	r3, #12
   e189e:	e000      	b.n	e18a2 <mbedtls_aes_setkey_enc+0x22>
        case 256: ctx->nr = 14; break;
   e18a0:	230e      	movs	r3, #14
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
   e18a2:	4e71      	ldr	r6, [pc, #452]	; (e1a68 <mbedtls_aes_setkey_enc+0x1e8>)

    switch( keybits )
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
   e18a4:	6023      	str	r3, [r4, #0]
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
   e18a6:	6833      	ldr	r3, [r6, #0]
   e18a8:	b91b      	cbnz	r3, e18b2 <mbedtls_aes_setkey_enc+0x32>
    {
        aes_gen_tables();
   e18aa:	f7ff fee1 	bl	e1670 <_ZL14aes_gen_tablesv>
        aes_init_done = 1;
   e18ae:	2301      	movs	r3, #1
   e18b0:	6033      	str	r3, [r6, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
   e18b2:	f104 0308 	add.w	r3, r4, #8
   e18b6:	6063      	str	r3, [r4, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
   e18b8:	096d      	lsrs	r5, r5, #5
   e18ba:	2000      	movs	r0, #0
   e18bc:	42a8      	cmp	r0, r5
   e18be:	d010      	beq.n	e18e2 <mbedtls_aes_setkey_enc+0x62>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
   e18c0:	eb07 0180 	add.w	r1, r7, r0, lsl #2
   e18c4:	788a      	ldrb	r2, [r1, #2]
   e18c6:	784e      	ldrb	r6, [r1, #1]
   e18c8:	78c9      	ldrb	r1, [r1, #3]
   e18ca:	0412      	lsls	r2, r2, #16
   e18cc:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
   e18d0:	f817 6020 	ldrb.w	r6, [r7, r0, lsl #2]
   e18d4:	4332      	orrs	r2, r6
   e18d6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   e18da:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
   e18de:	3001      	adds	r0, #1
   e18e0:	e7ec      	b.n	e18bc <mbedtls_aes_setkey_enc+0x3c>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
   e18e2:	6822      	ldr	r2, [r4, #0]
   e18e4:	2a0c      	cmp	r2, #12
   e18e6:	d031      	beq.n	e194c <mbedtls_aes_setkey_enc+0xcc>
   e18e8:	2a0e      	cmp	r2, #14
   e18ea:	d066      	beq.n	e19ba <mbedtls_aes_setkey_enc+0x13a>
   e18ec:	2a0a      	cmp	r2, #10
   e18ee:	f040 80b8 	bne.w	e1a62 <mbedtls_aes_setkey_enc+0x1e2>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
   e18f2:	4f5e      	ldr	r7, [pc, #376]	; (e1a6c <mbedtls_aes_setkey_enc+0x1ec>)
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
   e18f4:	4e5e      	ldr	r6, [pc, #376]	; (e1a70 <mbedtls_aes_setkey_enc+0x1f0>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
   e18f6:	2500      	movs	r5, #0
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
   e18f8:	68dc      	ldr	r4, [r3, #12]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
   e18fa:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
   e18fe:	681a      	ldr	r2, [r3, #0]
   e1900:	4051      	eors	r1, r2
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
   e1902:	f3c4 2207 	ubfx	r2, r4, #8, #8

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
   e1906:	3501      	adds	r5, #1
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
   e1908:	5cb0      	ldrb	r0, [r6, r2]
   e190a:	0e22      	lsrs	r2, r4, #24
   e190c:	4041      	eors	r1, r0
   e190e:	5cb2      	ldrb	r2, [r6, r2]
   e1910:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
   e1914:	b2e2      	uxtb	r2, r4

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
   e1916:	2d0a      	cmp	r5, #10
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
   e1918:	5cb2      	ldrb	r2, [r6, r2]
   e191a:	ea81 6102 	eor.w	r1, r1, r2, lsl #24

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
   e191e:	f3c4 4207 	ubfx	r2, r4, #16, #8

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
   e1922:	f103 0310 	add.w	r3, r3, #16
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
   e1926:	5cb2      	ldrb	r2, [r6, r2]
   e1928:	ea81 2202 	eor.w	r2, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
   e192c:	f853 1c0c 	ldr.w	r1, [r3, #-12]
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
   e1930:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
   e1932:	ea82 0201 	eor.w	r2, r2, r1
                RK[6]  = RK[2] ^ RK[5];
   e1936:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
   e193a:	605a      	str	r2, [r3, #4]
                RK[6]  = RK[2] ^ RK[5];
   e193c:	ea82 0201 	eor.w	r2, r2, r1
   e1940:	609a      	str	r2, [r3, #8]
                RK[7]  = RK[3] ^ RK[6];
   e1942:	ea82 0204 	eor.w	r2, r2, r4
   e1946:	60da      	str	r2, [r3, #12]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
   e1948:	d1d6      	bne.n	e18f8 <mbedtls_aes_setkey_enc+0x78>
   e194a:	e08a      	b.n	e1a62 <mbedtls_aes_setkey_enc+0x1e2>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
   e194c:	4e47      	ldr	r6, [pc, #284]	; (e1a6c <mbedtls_aes_setkey_enc+0x1ec>)
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
   e194e:	4d48      	ldr	r5, [pc, #288]	; (e1a70 <mbedtls_aes_setkey_enc+0x1f0>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
   e1950:	2400      	movs	r4, #0
            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   e1952:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
   e1956:	6958      	ldr	r0, [r3, #20]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   e1958:	681a      	ldr	r2, [r3, #0]
   e195a:	404a      	eors	r2, r1
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
   e195c:	f3c0 2107 	ubfx	r1, r0, #8, #8
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
   e1960:	3401      	adds	r4, #1
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   e1962:	5c69      	ldrb	r1, [r5, r1]
   e1964:	404a      	eors	r2, r1
   e1966:	0e01      	lsrs	r1, r0, #24
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
   e1968:	2c08      	cmp	r4, #8
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   e196a:	5c69      	ldrb	r1, [r5, r1]
   e196c:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
   e1970:	b2c1      	uxtb	r1, r0
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
   e1972:	f103 0318 	add.w	r3, r3, #24
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   e1976:	5c69      	ldrb	r1, [r5, r1]
   e1978:	ea82 6201 	eor.w	r2, r2, r1, lsl #24

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
   e197c:	f3c0 4107 	ubfx	r1, r0, #16, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   e1980:	5c69      	ldrb	r1, [r5, r1]
   e1982:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
   e1986:	f853 1c14 	ldr.w	r1, [r3, #-20]
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
   e198a:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
   e198c:	ea82 0201 	eor.w	r2, r2, r1
                RK[8]  = RK[2] ^ RK[7];
   e1990:	f853 1c10 	ldr.w	r1, [r3, #-16]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
   e1994:	605a      	str	r2, [r3, #4]
                RK[8]  = RK[2] ^ RK[7];
   e1996:	ea82 0201 	eor.w	r2, r2, r1
                RK[9]  = RK[3] ^ RK[8];
   e199a:	f853 1c0c 	ldr.w	r1, [r3, #-12]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
   e199e:	609a      	str	r2, [r3, #8]
                RK[9]  = RK[3] ^ RK[8];
   e19a0:	ea82 0201 	eor.w	r2, r2, r1
                RK[10] = RK[4] ^ RK[9];
   e19a4:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
                RK[9]  = RK[3] ^ RK[8];
   e19a8:	60da      	str	r2, [r3, #12]
                RK[10] = RK[4] ^ RK[9];
   e19aa:	ea82 0201 	eor.w	r2, r2, r1
   e19ae:	611a      	str	r2, [r3, #16]
                RK[11] = RK[5] ^ RK[10];
   e19b0:	ea82 0200 	eor.w	r2, r2, r0
   e19b4:	615a      	str	r2, [r3, #20]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
   e19b6:	d1cc      	bne.n	e1952 <mbedtls_aes_setkey_enc+0xd2>
   e19b8:	e053      	b.n	e1a62 <mbedtls_aes_setkey_enc+0x1e2>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
   e19ba:	4e2c      	ldr	r6, [pc, #176]	; (e1a6c <mbedtls_aes_setkey_enc+0x1ec>)
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
   e19bc:	482c      	ldr	r0, [pc, #176]	; (e1a70 <mbedtls_aes_setkey_enc+0x1f0>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
   e19be:	2500      	movs	r5, #0
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   e19c0:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
   e19c4:	69dc      	ldr	r4, [r3, #28]
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   e19c6:	681a      	ldr	r2, [r3, #0]
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
   e19c8:	685f      	ldr	r7, [r3, #4]
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   e19ca:	4051      	eors	r1, r2
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
   e19cc:	f3c4 2207 	ubfx	r2, r4, #8, #8
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
   e19d0:	3501      	adds	r5, #1
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   e19d2:	5c82      	ldrb	r2, [r0, r2]
   e19d4:	4051      	eors	r1, r2
   e19d6:	0e22      	lsrs	r2, r4, #24
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
   e19d8:	2d07      	cmp	r5, #7
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   e19da:	5c82      	ldrb	r2, [r0, r2]
   e19dc:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
   e19e0:	b2e2      	uxtb	r2, r4
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
   e19e2:	f103 0320 	add.w	r3, r3, #32
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   e19e6:	5c82      	ldrb	r2, [r0, r2]
   e19e8:	ea81 6102 	eor.w	r1, r1, r2, lsl #24

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
   e19ec:	f3c4 4207 	ubfx	r2, r4, #16, #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   e19f0:	5c82      	ldrb	r2, [r0, r2]
   e19f2:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
   e19f6:	f853 2c18 	ldr.w	r2, [r3, #-24]
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
   e19fa:	6019      	str	r1, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
   e19fc:	ea81 0107 	eor.w	r1, r1, r7
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];
   e1a00:	f853 7c14 	ldr.w	r7, [r3, #-20]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
   e1a04:	6059      	str	r1, [r3, #4]
                RK[10] = RK[2] ^ RK[9];
   e1a06:	ea81 0102 	eor.w	r1, r1, r2
                RK[11] = RK[3] ^ RK[10];
   e1a0a:	ea87 0701 	eor.w	r7, r7, r1

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
   e1a0e:	b2fa      	uxtb	r2, r7
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
   e1a10:	6099      	str	r1, [r3, #8]
                RK[11] = RK[3] ^ RK[10];
   e1a12:	60df      	str	r7, [r3, #12]

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
   e1a14:	5c82      	ldrb	r2, [r0, r2]
   e1a16:	f853 1c10 	ldr.w	r1, [r3, #-16]
   e1a1a:	ea81 0102 	eor.w	r1, r1, r2
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
   e1a1e:	ea4f 6217 	mov.w	r2, r7, lsr #24
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
   e1a22:	5c82      	ldrb	r2, [r0, r2]
   e1a24:	ea81 6102 	eor.w	r1, r1, r2, lsl #24
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
   e1a28:	f3c7 2207 	ubfx	r2, r7, #8, #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
   e1a2c:	f3c7 4707 	ubfx	r7, r7, #16, #8
   e1a30:	5c82      	ldrb	r2, [r0, r2]
   e1a32:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
   e1a36:	5dc2      	ldrb	r2, [r0, r7]
   e1a38:	ea81 4202 	eor.w	r2, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
   e1a3c:	f853 1c0c 	ldr.w	r1, [r3, #-12]

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
   e1a40:	611a      	str	r2, [r3, #16]

                RK[13] = RK[5] ^ RK[12];
   e1a42:	ea82 0201 	eor.w	r2, r2, r1
                RK[14] = RK[6] ^ RK[13];
   e1a46:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
   e1a4a:	615a      	str	r2, [r3, #20]
                RK[14] = RK[6] ^ RK[13];
   e1a4c:	ea82 0201 	eor.w	r2, r2, r1
   e1a50:	619a      	str	r2, [r3, #24]
                RK[15] = RK[7] ^ RK[14];
   e1a52:	ea82 0204 	eor.w	r2, r2, r4
   e1a56:	61da      	str	r2, [r3, #28]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
   e1a58:	d1b2      	bne.n	e19c0 <mbedtls_aes_setkey_enc+0x140>
   e1a5a:	e002      	b.n	e1a62 <mbedtls_aes_setkey_enc+0x1e2>
    switch( keybits )
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
   e1a5c:	f06f 001f 	mvn.w	r0, #31
   e1a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
   e1a62:	2000      	movs	r0, #0
}
   e1a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e1a66:	bf00      	nop
   e1a68:	2003c270 	.word	0x2003c270
   e1a6c:	2003e474 	.word	0x2003e474
   e1a70:	2003d374 	.word	0x2003d374

000e1a74 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
   e1a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e1a78:	b0c9      	sub	sp, #292	; 0x124
   e1a7a:	4604      	mov	r4, r0
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
   e1a7c:	a802      	add	r0, sp, #8
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
   e1a7e:	460d      	mov	r5, r1
   e1a80:	4616      	mov	r6, r2
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
   e1a82:	f7ff fef1 	bl	e1868 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
   e1a86:	f104 0308 	add.w	r3, r4, #8
   e1a8a:	6063      	str	r3, [r4, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
   e1a8c:	4632      	mov	r2, r6
   e1a8e:	4629      	mov	r1, r5
   e1a90:	a802      	add	r0, sp, #8
   e1a92:	f7ff fef5 	bl	e1880 <mbedtls_aes_setkey_enc>
   e1a96:	4680      	mov	r8, r0
   e1a98:	2800      	cmp	r0, #0
   e1a9a:	d14c      	bne.n	e1b36 <mbedtls_aes_setkey_dec+0xc2>
        goto exit;

    ctx->nr = cty.nr;
   e1a9c:	9902      	ldr	r1, [sp, #8]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
   e1a9e:	9803      	ldr	r0, [sp, #12]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
        goto exit;

    ctx->nr = cty.nr;
   e1aa0:	6021      	str	r1, [r4, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
   e1aa2:	010a      	lsls	r2, r1, #4
   e1aa4:	1883      	adds	r3, r0, r2

    *RK++ = *SK++;
   e1aa6:	5882      	ldr	r2, [r0, r2]
   e1aa8:	60a2      	str	r2, [r4, #8]
    *RK++ = *SK++;
   e1aaa:	685a      	ldr	r2, [r3, #4]
   e1aac:	60e2      	str	r2, [r4, #12]
    *RK++ = *SK++;
   e1aae:	689a      	ldr	r2, [r3, #8]
   e1ab0:	6122      	str	r2, [r4, #16]
    *RK++ = *SK++;
   e1ab2:	68d8      	ldr	r0, [r3, #12]
   e1ab4:	6160      	str	r0, [r4, #20]
   e1ab6:	f104 0218 	add.w	r2, r4, #24
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
   e1aba:	f8df c090 	ldr.w	ip, [pc, #144]	; e1b4c <mbedtls_aes_setkey_dec+0xd8>

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
   e1abe:	4c21      	ldr	r4, [pc, #132]	; (e1b44 <mbedtls_aes_setkey_dec+0xd0>)
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
   e1ac0:	f8df 908c 	ldr.w	r9, [pc, #140]	; e1b50 <mbedtls_aes_setkey_dec+0xdc>
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
   e1ac4:	f8df a08c 	ldr.w	sl, [pc, #140]	; e1b54 <mbedtls_aes_setkey_dec+0xe0>
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
   e1ac8:	3901      	subs	r1, #1
   e1aca:	3b10      	subs	r3, #16
   e1acc:	2900      	cmp	r1, #0
   e1ace:	dd2a      	ble.n	e1b26 <mbedtls_aes_setkey_dec+0xb2>
   e1ad0:	1f1d      	subs	r5, r3, #4
   e1ad2:	f1a2 0e04 	sub.w	lr, r2, #4
   e1ad6:	f103 0b0c 	add.w	fp, r3, #12
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
   e1ada:	f855 0f04 	ldr.w	r0, [r5, #4]!
   e1ade:	b2c6      	uxtb	r6, r0
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
   e1ae0:	45ab      	cmp	fp, r5
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
   e1ae2:	5da7      	ldrb	r7, [r4, r6]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
   e1ae4:	ea4f 6610 	mov.w	r6, r0, lsr #24
   e1ae8:	5da6      	ldrb	r6, [r4, r6]
   e1aea:	9601      	str	r6, [sp, #4]
   e1aec:	4e16      	ldr	r6, [pc, #88]	; (e1b48 <mbedtls_aes_setkey_dec+0xd4>)
   e1aee:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
   e1af2:	9e01      	ldr	r6, [sp, #4]
   e1af4:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
   e1af8:	ea87 0706 	eor.w	r7, r7, r6
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
   e1afc:	f3c0 2607 	ubfx	r6, r0, #8, #8
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
   e1b00:	f3c0 4007 	ubfx	r0, r0, #16, #8
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
   e1b04:	5da6      	ldrb	r6, [r4, r6]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
   e1b06:	5c20      	ldrb	r0, [r4, r0]
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
   e1b08:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
   e1b0c:	ea86 0607 	eor.w	r6, r6, r7
   e1b10:	f85a 7020 	ldr.w	r7, [sl, r0, lsl #2]
   e1b14:	ea86 0607 	eor.w	r6, r6, r7
   e1b18:	f84e 6f04 	str.w	r6, [lr, #4]!
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
   e1b1c:	d1dd      	bne.n	e1ada <mbedtls_aes_setkey_dec+0x66>
   e1b1e:	3210      	adds	r2, #16
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
   e1b20:	3901      	subs	r1, #1
   e1b22:	3b10      	subs	r3, #16
   e1b24:	e7d2      	b.n	e1acc <mbedtls_aes_setkey_dec+0x58>
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
        }
    }

    *RK++ = *SK++;
   e1b26:	6819      	ldr	r1, [r3, #0]
   e1b28:	6011      	str	r1, [r2, #0]
    *RK++ = *SK++;
   e1b2a:	6859      	ldr	r1, [r3, #4]
   e1b2c:	6051      	str	r1, [r2, #4]
    *RK++ = *SK++;
   e1b2e:	6899      	ldr	r1, [r3, #8]
   e1b30:	6091      	str	r1, [r2, #8]
    *RK++ = *SK++;
   e1b32:	68db      	ldr	r3, [r3, #12]
   e1b34:	60d3      	str	r3, [r2, #12]

exit:
    mbedtls_aes_free( &cty );
   e1b36:	a802      	add	r0, sp, #8
   e1b38:	f7ff fe9b 	bl	e1872 <mbedtls_aes_free>

    return( ret );
}
   e1b3c:	4640      	mov	r0, r8
   e1b3e:	b049      	add	sp, #292	; 0x124
   e1b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1b44:	2003d374 	.word	0x2003d374
   e1b48:	2003d874 	.word	0x2003d874
   e1b4c:	2003d474 	.word	0x2003d474
   e1b50:	2003dc74 	.word	0x2003dc74
   e1b54:	2003e074 	.word	0x2003e074

000e1b58 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
   e1b58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
   e1b5c:	6846      	ldr	r6, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
   e1b5e:	680c      	ldr	r4, [r1, #0]
   e1b60:	6833      	ldr	r3, [r6, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
   e1b62:	688d      	ldr	r5, [r1, #8]
   e1b64:	f8df c374 	ldr.w	ip, [pc, #884]	; e1edc <mbedtls_internal_aes_encrypt+0x384>
   e1b68:	f8df e374 	ldr.w	lr, [pc, #884]	; e1ee0 <mbedtls_internal_aes_encrypt+0x388>
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   e1b6c:	4fd8      	ldr	r7, [pc, #864]	; (e1ed0 <mbedtls_internal_aes_encrypt+0x378>)
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
   e1b6e:	ea84 0b03 	eor.w	fp, r4, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
   e1b72:	684c      	ldr	r4, [r1, #4]
   e1b74:	6873      	ldr	r3, [r6, #4]
   e1b76:	4063      	eors	r3, r4
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
   e1b78:	68b4      	ldr	r4, [r6, #8]
   e1b7a:	406c      	eors	r4, r5
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
   e1b7c:	68cd      	ldr	r5, [r1, #12]
   e1b7e:	68f1      	ldr	r1, [r6, #12]
   e1b80:	404d      	eors	r5, r1

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e1b82:	6801      	ldr	r1, [r0, #0]
   e1b84:	1049      	asrs	r1, r1, #1
   e1b86:	3901      	subs	r1, #1
   e1b88:	9101      	str	r1, [sp, #4]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
   e1b8a:	f106 0110 	add.w	r1, r6, #16

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e1b8e:	9e01      	ldr	r6, [sp, #4]
   e1b90:	f8df 9348 	ldr.w	r9, [pc, #840]	; e1edc <mbedtls_internal_aes_encrypt+0x384>
   e1b94:	f8df 8348 	ldr.w	r8, [pc, #840]	; e1ee0 <mbedtls_internal_aes_encrypt+0x388>
   e1b98:	2e00      	cmp	r6, #0
   e1b9a:	4608      	mov	r0, r1
   e1b9c:	fa5f f68b 	uxtb.w	r6, fp
   e1ba0:	f101 0120 	add.w	r1, r1, #32
   e1ba4:	ea4f 6a15 	mov.w	sl, r5, lsr #24
   e1ba8:	f340 80be 	ble.w	e1d28 <mbedtls_internal_aes_encrypt+0x1d0>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   e1bac:	f85e 002a 	ldr.w	r0, [lr, sl, lsl #2]
   e1bb0:	f85c 8026 	ldr.w	r8, [ip, r6, lsl #2]
   e1bb4:	4ec7      	ldr	r6, [pc, #796]	; (e1ed4 <mbedtls_internal_aes_encrypt+0x37c>)
   e1bb6:	ea88 0800 	eor.w	r8, r8, r0
   e1bba:	f851 0c20 	ldr.w	r0, [r1, #-32]
   e1bbe:	ea88 0800 	eor.w	r8, r8, r0
   e1bc2:	f3c3 2007 	ubfx	r0, r3, #8, #8
   e1bc6:	fa5f f983 	uxtb.w	r9, r3
   e1bca:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
   e1bce:	f85c 9029 	ldr.w	r9, [ip, r9, lsl #2]
   e1bd2:	ea88 0000 	eor.w	r0, r8, r0
   e1bd6:	f3c4 4807 	ubfx	r8, r4, #16, #8
   e1bda:	fa5f fa84 	uxtb.w	sl, r4
   e1bde:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
   e1be2:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
   e1be6:	ea80 0808 	eor.w	r8, r0, r8
   e1bea:	ea4f 601b 	mov.w	r0, fp, lsr #24
   e1bee:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
   e1bf2:	ea89 0900 	eor.w	r9, r9, r0
   e1bf6:	f851 0c1c 	ldr.w	r0, [r1, #-28]
   e1bfa:	ea89 0000 	eor.w	r0, r9, r0
   e1bfe:	f3c4 2907 	ubfx	r9, r4, #8, #8
   e1c02:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
   e1c06:	ea80 0009 	eor.w	r0, r0, r9
   e1c0a:	f3c5 4907 	ubfx	r9, r5, #16, #8
   e1c0e:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
   e1c12:	ea80 0909 	eor.w	r9, r0, r9
   e1c16:	0e18      	lsrs	r0, r3, #24
   e1c18:	f3c3 4307 	ubfx	r3, r3, #16, #8
   e1c1c:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
   e1c20:	ea8a 0a00 	eor.w	sl, sl, r0
   e1c24:	f851 0c18 	ldr.w	r0, [r1, #-24]
   e1c28:	ea8a 0000 	eor.w	r0, sl, r0
   e1c2c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
   e1c30:	b2ed      	uxtb	r5, r5
   e1c32:	f857 a02a 	ldr.w	sl, [r7, sl, lsl #2]
   e1c36:	ea80 000a 	eor.w	r0, r0, sl
   e1c3a:	f3cb 4a07 	ubfx	sl, fp, #16, #8
   e1c3e:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
   e1c42:	ea80 000a 	eor.w	r0, r0, sl
   e1c46:	ea4f 6a14 	mov.w	sl, r4, lsr #24
   e1c4a:	f85c 4025 	ldr.w	r4, [ip, r5, lsl #2]
   e1c4e:	f85e 502a 	ldr.w	r5, [lr, sl, lsl #2]
   e1c52:	4065      	eors	r5, r4
   e1c54:	f851 4c14 	ldr.w	r4, [r1, #-20]
   e1c58:	406c      	eors	r4, r5
   e1c5a:	f3cb 2507 	ubfx	r5, fp, #8, #8
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   e1c5e:	fa5f fa80 	uxtb.w	sl, r0
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   e1c62:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   e1c66:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   e1c6a:	406c      	eors	r4, r5
   e1c6c:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
   e1c70:	4065      	eors	r5, r4
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   e1c72:	0e2b      	lsrs	r3, r5, #24
   e1c74:	fa5f f488 	uxtb.w	r4, r8
   e1c78:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   e1c7c:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
   e1c80:	405c      	eors	r4, r3
   e1c82:	f851 3c10 	ldr.w	r3, [r1, #-16]
   e1c86:	4063      	eors	r3, r4
   e1c88:	f3c9 2407 	ubfx	r4, r9, #8, #8
   e1c8c:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   e1c90:	4063      	eors	r3, r4
   e1c92:	f3c0 4407 	ubfx	r4, r0, #16, #8
   e1c96:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
   e1c9a:	ea83 0b04 	eor.w	fp, r3, r4
   e1c9e:	fa5f f489 	uxtb.w	r4, r9
   e1ca2:	ea4f 6318 	mov.w	r3, r8, lsr #24
   e1ca6:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
   e1caa:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   e1cae:	405c      	eors	r4, r3
   e1cb0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   e1cb4:	4063      	eors	r3, r4
   e1cb6:	f3c0 2407 	ubfx	r4, r0, #8, #8
   e1cba:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   e1cbe:	4063      	eors	r3, r4
   e1cc0:	f3c5 4407 	ubfx	r4, r5, #16, #8
   e1cc4:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
   e1cc8:	4063      	eors	r3, r4
   e1cca:	ea4f 6419 	mov.w	r4, r9, lsr #24
   e1cce:	f3c9 4907 	ubfx	r9, r9, #16, #8
   e1cd2:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
   e1cd6:	ea8a 0a04 	eor.w	sl, sl, r4
   e1cda:	f851 4c08 	ldr.w	r4, [r1, #-8]
   e1cde:	ea8a 0404 	eor.w	r4, sl, r4
   e1ce2:	f3c5 2a07 	ubfx	sl, r5, #8, #8
   e1ce6:	b2ed      	uxtb	r5, r5
   e1ce8:	f857 a02a 	ldr.w	sl, [r7, sl, lsl #2]
   e1cec:	ea84 040a 	eor.w	r4, r4, sl
   e1cf0:	f3c8 4a07 	ubfx	sl, r8, #16, #8
   e1cf4:	f3c8 2807 	ubfx	r8, r8, #8, #8
   e1cf8:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
   e1cfc:	ea84 040a 	eor.w	r4, r4, sl
   e1d00:	ea4f 6a10 	mov.w	sl, r0, lsr #24
   e1d04:	f85c 0025 	ldr.w	r0, [ip, r5, lsl #2]
   e1d08:	f85e 502a 	ldr.w	r5, [lr, sl, lsl #2]
   e1d0c:	4045      	eors	r5, r0
   e1d0e:	f851 0c04 	ldr.w	r0, [r1, #-4]
   e1d12:	4068      	eors	r0, r5
   e1d14:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
   e1d18:	4068      	eors	r0, r5
   e1d1a:	f856 5029 	ldr.w	r5, [r6, r9, lsl #2]
   e1d1e:	4045      	eors	r5, r0
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e1d20:	9801      	ldr	r0, [sp, #4]
   e1d22:	3801      	subs	r0, #1
   e1d24:	9001      	str	r0, [sp, #4]
   e1d26:	e732      	b.n	e1b8e <mbedtls_internal_aes_encrypt+0x36>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   e1d28:	f858 102a 	ldr.w	r1, [r8, sl, lsl #2]
   e1d2c:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
   e1d30:	f8df c19c 	ldr.w	ip, [pc, #412]	; e1ed0 <mbedtls_internal_aes_encrypt+0x378>
   e1d34:	f8df e19c 	ldr.w	lr, [pc, #412]	; e1ed4 <mbedtls_internal_aes_encrypt+0x37c>
   e1d38:	f3c3 2607 	ubfx	r6, r3, #8, #8
   e1d3c:	404f      	eors	r7, r1
   e1d3e:	6801      	ldr	r1, [r0, #0]
   e1d40:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
   e1d44:	4079      	eors	r1, r7
   e1d46:	4071      	eors	r1, r6
   e1d48:	f3c4 4607 	ubfx	r6, r4, #16, #8
   e1d4c:	f85e 7026 	ldr.w	r7, [lr, r6, lsl #2]
   e1d50:	b2de      	uxtb	r6, r3
   e1d52:	404f      	eors	r7, r1
   e1d54:	ea4f 611b 	mov.w	r1, fp, lsr #24
   e1d58:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
   e1d5c:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
   e1d60:	ea86 0a01 	eor.w	sl, r6, r1
   e1d64:	f3c4 2607 	ubfx	r6, r4, #8, #8
   e1d68:	6841      	ldr	r1, [r0, #4]
   e1d6a:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
   e1d6e:	ea8a 0101 	eor.w	r1, sl, r1
   e1d72:	4071      	eors	r1, r6
   e1d74:	f3c5 4607 	ubfx	r6, r5, #16, #8
   e1d78:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
   e1d7c:	ea81 0a06 	eor.w	sl, r1, r6
   e1d80:	b2e6      	uxtb	r6, r4
   e1d82:	0e19      	lsrs	r1, r3, #24
   e1d84:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
   e1d88:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
   e1d8c:	4071      	eors	r1, r6
   e1d8e:	6886      	ldr	r6, [r0, #8]
   e1d90:	404e      	eors	r6, r1
   e1d92:	f3c5 2107 	ubfx	r1, r5, #8, #8
   e1d96:	0e24      	lsrs	r4, r4, #24
   e1d98:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
   e1d9c:	404e      	eors	r6, r1
   e1d9e:	f3cb 4107 	ubfx	r1, fp, #16, #8
   e1da2:	b2ed      	uxtb	r5, r5
   e1da4:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
   e1da8:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
   e1dac:	404e      	eors	r6, r1
   e1dae:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
   e1db2:	68c4      	ldr	r4, [r0, #12]
   e1db4:	4069      	eors	r1, r5
   e1db6:	404c      	eors	r4, r1
   e1db8:	f3cb 2107 	ubfx	r1, fp, #8, #8
   e1dbc:	f3c3 4307 	ubfx	r3, r3, #16, #8
   e1dc0:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
   e1dc4:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   e1dc8:	404c      	eors	r4, r1
   e1dca:	405c      	eors	r4, r3

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
   e1dcc:	b2f9      	uxtb	r1, r7
   e1dce:	4b42      	ldr	r3, [pc, #264]	; (e1ed8 <mbedtls_internal_aes_encrypt+0x380>)
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
   e1dd0:	0e25      	lsrs	r5, r4, #24
    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
   e1dd2:	f813 e001 	ldrb.w	lr, [r3, r1]
   e1dd6:	6901      	ldr	r1, [r0, #16]
   e1dd8:	ea8e 0101 	eor.w	r1, lr, r1
   e1ddc:	f813 e005 	ldrb.w	lr, [r3, r5]

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
   e1de0:	f3ca 2507 	ubfx	r5, sl, #8, #8
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
   e1de4:	ea81 610e 	eor.w	r1, r1, lr, lsl #24
   e1de8:	f813 e005 	ldrb.w	lr, [r3, r5]
   e1dec:	f3c6 4507 	ubfx	r5, r6, #16, #8
   e1df0:	ea81 210e 	eor.w	r1, r1, lr, lsl #8
   e1df4:	f813 e005 	ldrb.w	lr, [r3, r5]
   e1df8:	ea81 4e0e 	eor.w	lr, r1, lr, lsl #16
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
   e1dfc:	fa5f f18a 	uxtb.w	r1, sl
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   e1e00:	5c5d      	ldrb	r5, [r3, r1]
   e1e02:	6941      	ldr	r1, [r0, #20]
   e1e04:	4069      	eors	r1, r5
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
   e1e06:	0e3d      	lsrs	r5, r7, #24
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   e1e08:	5d5d      	ldrb	r5, [r3, r5]
   e1e0a:	ea81 6105 	eor.w	r1, r1, r5, lsl #24
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
   e1e0e:	f3c6 2507 	ubfx	r5, r6, #8, #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   e1e12:	5d5d      	ldrb	r5, [r3, r5]
   e1e14:	ea81 2105 	eor.w	r1, r1, r5, lsl #8
   e1e18:	f3c4 4507 	ubfx	r5, r4, #16, #8
   e1e1c:	5d5d      	ldrb	r5, [r3, r5]
   e1e1e:	ea81 4505 	eor.w	r5, r1, r5, lsl #16
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
   e1e22:	b2f1      	uxtb	r1, r6

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
   e1e24:	0e36      	lsrs	r6, r6, #24
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   e1e26:	f813 c001 	ldrb.w	ip, [r3, r1]
   e1e2a:	6981      	ldr	r1, [r0, #24]
   e1e2c:	ea8c 0101 	eor.w	r1, ip, r1
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
   e1e30:	ea4f 6c1a 	mov.w	ip, sl, lsr #24

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   e1e34:	f3ca 4a07 	ubfx	sl, sl, #16, #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   e1e38:	f813 c00c 	ldrb.w	ip, [r3, ip]
   e1e3c:	ea81 610c 	eor.w	r1, r1, ip, lsl #24
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
   e1e40:	f3c4 2c07 	ubfx	ip, r4, #8, #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
   e1e44:	b2e4      	uxtb	r4, r4
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   e1e46:	f813 c00c 	ldrb.w	ip, [r3, ip]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   e1e4a:	5d1c      	ldrb	r4, [r3, r4]
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   e1e4c:	ea81 210c 	eor.w	r1, r1, ip, lsl #8
   e1e50:	f3c7 4c07 	ubfx	ip, r7, #16, #8
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
   e1e54:	f3c7 2707 	ubfx	r7, r7, #8, #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   e1e58:	f813 c00c 	ldrb.w	ip, [r3, ip]
   e1e5c:	ea81 4c0c 	eor.w	ip, r1, ip, lsl #16
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   e1e60:	69c1      	ldr	r1, [r0, #28]
   e1e62:	ea84 0001 	eor.w	r0, r4, r1
   e1e66:	5d99      	ldrb	r1, [r3, r6]
   e1e68:	ea80 6001 	eor.w	r0, r0, r1, lsl #24
   e1e6c:	5dd9      	ldrb	r1, [r3, r7]
   e1e6e:	f813 300a 	ldrb.w	r3, [r3, sl]
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   e1e72:	f882 e000 	strb.w	lr, [r2]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   e1e76:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   e1e7a:	ea4f 211e 	mov.w	r1, lr, lsr #8
   e1e7e:	7051      	strb	r1, [r2, #1]
   e1e80:	ea4f 411e 	mov.w	r1, lr, lsr #16
   e1e84:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
   e1e86:	0a29      	lsrs	r1, r5, #8
   e1e88:	7151      	strb	r1, [r2, #5]
   e1e8a:	0c29      	lsrs	r1, r5, #16
   e1e8c:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
   e1e8e:	ea4f 211c 	mov.w	r1, ip, lsr #8
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   e1e92:	ea80 4303 	eor.w	r3, r0, r3, lsl #16
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
   e1e96:	7251      	strb	r1, [r2, #9]
   e1e98:	ea4f 411c 	mov.w	r1, ip, lsr #16
   e1e9c:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
   e1e9e:	0a19      	lsrs	r1, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   e1ea0:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    PUT_UINT32_LE( X1, output,  4 );
   e1ea4:	7115      	strb	r5, [r2, #4]
    PUT_UINT32_LE( X2, output,  8 );
   e1ea6:	f882 c008 	strb.w	ip, [r2, #8]
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
   e1eaa:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X2, output,  8 );
   e1eac:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
    PUT_UINT32_LE( X3, output, 12 );
   e1eb0:	7313      	strb	r3, [r2, #12]
   e1eb2:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
   e1eb4:	2000      	movs	r0, #0
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
   e1eb6:	0c19      	lsrs	r1, r3, #16
   e1eb8:	0e1b      	lsrs	r3, r3, #24
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   e1eba:	f882 e003 	strb.w	lr, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
   e1ebe:	71d5      	strb	r5, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
   e1ec0:	f882 c00b 	strb.w	ip, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
   e1ec4:	7391      	strb	r1, [r2, #14]
   e1ec6:	73d3      	strb	r3, [r2, #15]

    return( 0 );
}
   e1ec8:	b003      	add	sp, #12
   e1eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e1ece:	bf00      	nop
   e1ed0:	2003c674 	.word	0x2003c674
   e1ed4:	2003ca74 	.word	0x2003ca74
   e1ed8:	2003d374 	.word	0x2003d374
   e1edc:	2003c274 	.word	0x2003c274
   e1ee0:	2003ce74 	.word	0x2003ce74

000e1ee4 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
   e1ee4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
   e1ee8:	6845      	ldr	r5, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
   e1eea:	680c      	ldr	r4, [r1, #0]
   e1eec:	682b      	ldr	r3, [r5, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
   e1eee:	684e      	ldr	r6, [r1, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e1ef0:	6800      	ldr	r0, [r0, #0]
   e1ef2:	f8df c374 	ldr.w	ip, [pc, #884]	; e2268 <mbedtls_internal_aes_decrypt+0x384>
   e1ef6:	f8df e374 	ldr.w	lr, [pc, #884]	; e226c <mbedtls_internal_aes_decrypt+0x388>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   e1efa:	4fd8      	ldr	r7, [pc, #864]	; (e225c <mbedtls_internal_aes_decrypt+0x378>)
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
   e1efc:	405c      	eors	r4, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
   e1efe:	686b      	ldr	r3, [r5, #4]
   e1f00:	ea86 0b03 	eor.w	fp, r6, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
   e1f04:	688e      	ldr	r6, [r1, #8]
   e1f06:	68ab      	ldr	r3, [r5, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e1f08:	1040      	asrs	r0, r0, #1

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
   e1f0a:	4073      	eors	r3, r6
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
   e1f0c:	68ce      	ldr	r6, [r1, #12]
   e1f0e:	68e9      	ldr	r1, [r5, #12]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e1f10:	3801      	subs	r0, #1
   e1f12:	9001      	str	r0, [sp, #4]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
   e1f14:	4071      	eors	r1, r6
   e1f16:	f105 0010 	add.w	r0, r5, #16

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e1f1a:	9e01      	ldr	r6, [sp, #4]
   e1f1c:	f8df 9348 	ldr.w	r9, [pc, #840]	; e2268 <mbedtls_internal_aes_decrypt+0x384>
   e1f20:	f8df 8348 	ldr.w	r8, [pc, #840]	; e226c <mbedtls_internal_aes_decrypt+0x388>
   e1f24:	2e00      	cmp	r6, #0
   e1f26:	4605      	mov	r5, r0
   e1f28:	b2e6      	uxtb	r6, r4
   e1f2a:	f100 0020 	add.w	r0, r0, #32
   e1f2e:	ea4f 6a1b 	mov.w	sl, fp, lsr #24
   e1f32:	f340 80c0 	ble.w	e20b6 <mbedtls_internal_aes_decrypt+0x1d2>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   e1f36:	f85e 502a 	ldr.w	r5, [lr, sl, lsl #2]
   e1f3a:	f85c 8026 	ldr.w	r8, [ip, r6, lsl #2]
   e1f3e:	4ec8      	ldr	r6, [pc, #800]	; (e2260 <mbedtls_internal_aes_decrypt+0x37c>)
   e1f40:	ea88 0805 	eor.w	r8, r8, r5
   e1f44:	f850 5c20 	ldr.w	r5, [r0, #-32]
   e1f48:	ea88 0805 	eor.w	r8, r8, r5
   e1f4c:	f3c1 2507 	ubfx	r5, r1, #8, #8
   e1f50:	fa5f f98b 	uxtb.w	r9, fp
   e1f54:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   e1f58:	f85c 9029 	ldr.w	r9, [ip, r9, lsl #2]
   e1f5c:	ea88 0505 	eor.w	r5, r8, r5
   e1f60:	f3c3 4807 	ubfx	r8, r3, #16, #8
   e1f64:	fa5f fa83 	uxtb.w	sl, r3
   e1f68:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
   e1f6c:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
   e1f70:	ea85 0808 	eor.w	r8, r5, r8
   e1f74:	0e1d      	lsrs	r5, r3, #24
   e1f76:	f3c3 2307 	ubfx	r3, r3, #8, #8
   e1f7a:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
   e1f7e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   e1f82:	ea89 0905 	eor.w	r9, r9, r5
   e1f86:	f850 5c1c 	ldr.w	r5, [r0, #-28]
   e1f8a:	ea89 0505 	eor.w	r5, r9, r5
   e1f8e:	f3c4 2907 	ubfx	r9, r4, #8, #8
   e1f92:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
   e1f96:	ea85 0509 	eor.w	r5, r5, r9
   e1f9a:	f3c1 4907 	ubfx	r9, r1, #16, #8
   e1f9e:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
   e1fa2:	ea85 0909 	eor.w	r9, r5, r9
   e1fa6:	0e0d      	lsrs	r5, r1, #24
   e1fa8:	b2c9      	uxtb	r1, r1
   e1faa:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
   e1fae:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
   e1fb2:	ea8a 0a05 	eor.w	sl, sl, r5
   e1fb6:	f850 5c18 	ldr.w	r5, [r0, #-24]
   e1fba:	ea8a 0505 	eor.w	r5, sl, r5
   e1fbe:	f3cb 2a07 	ubfx	sl, fp, #8, #8
   e1fc2:	f857 a02a 	ldr.w	sl, [r7, sl, lsl #2]
   e1fc6:	ea85 050a 	eor.w	r5, r5, sl
   e1fca:	f3c4 4a07 	ubfx	sl, r4, #16, #8
   e1fce:	0e24      	lsrs	r4, r4, #24
   e1fd0:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
   e1fd4:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
   e1fd8:	404c      	eors	r4, r1
   e1fda:	f850 1c14 	ldr.w	r1, [r0, #-20]
   e1fde:	4061      	eors	r1, r4
   e1fe0:	4059      	eors	r1, r3
   e1fe2:	f3cb 4307 	ubfx	r3, fp, #16, #8
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   e1fe6:	fa5f f488 	uxtb.w	r4, r8
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   e1fea:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   e1fee:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   e1ff2:	4059      	eors	r1, r3
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   e1ff4:	ea4f 6319 	mov.w	r3, r9, lsr #24
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   e1ff8:	ea85 050a 	eor.w	r5, r5, sl
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   e1ffc:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   e2000:	405c      	eors	r4, r3
   e2002:	f850 3c10 	ldr.w	r3, [r0, #-16]
   e2006:	4063      	eors	r3, r4
   e2008:	f3c1 2407 	ubfx	r4, r1, #8, #8
   e200c:	fa5f fa89 	uxtb.w	sl, r9
   e2010:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   e2014:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
   e2018:	4063      	eors	r3, r4
   e201a:	f3c5 4407 	ubfx	r4, r5, #16, #8
   e201e:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
   e2022:	405c      	eors	r4, r3
   e2024:	0e2b      	lsrs	r3, r5, #24
   e2026:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   e202a:	ea8a 0a03 	eor.w	sl, sl, r3
   e202e:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   e2032:	ea8a 0303 	eor.w	r3, sl, r3
   e2036:	f3c8 2a07 	ubfx	sl, r8, #8, #8
   e203a:	f857 a02a 	ldr.w	sl, [r7, sl, lsl #2]
   e203e:	ea83 030a 	eor.w	r3, r3, sl
   e2042:	f3c1 4a07 	ubfx	sl, r1, #16, #8
   e2046:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
   e204a:	ea83 0b0a 	eor.w	fp, r3, sl
   e204e:	fa5f fa85 	uxtb.w	sl, r5
   e2052:	0e0b      	lsrs	r3, r1, #24
   e2054:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
   e2058:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   e205c:	ea8a 0a03 	eor.w	sl, sl, r3
   e2060:	f850 3c08 	ldr.w	r3, [r0, #-8]
   e2064:	ea8a 0303 	eor.w	r3, sl, r3
   e2068:	f3c9 2a07 	ubfx	sl, r9, #8, #8
   e206c:	b2c9      	uxtb	r1, r1
   e206e:	f857 a02a 	ldr.w	sl, [r7, sl, lsl #2]
   e2072:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
   e2076:	ea83 030a 	eor.w	r3, r3, sl
   e207a:	f3c8 4a07 	ubfx	sl, r8, #16, #8
   e207e:	ea4f 6818 	mov.w	r8, r8, lsr #24
   e2082:	f3c5 2507 	ubfx	r5, r5, #8, #8
   e2086:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
   e208a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   e208e:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
   e2092:	ea81 0808 	eor.w	r8, r1, r8
   e2096:	f850 1c04 	ldr.w	r1, [r0, #-4]
   e209a:	f3c9 4907 	ubfx	r9, r9, #16, #8
   e209e:	ea88 0101 	eor.w	r1, r8, r1
   e20a2:	4069      	eors	r1, r5
   e20a4:	f856 5029 	ldr.w	r5, [r6, r9, lsl #2]
   e20a8:	4069      	eors	r1, r5
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e20aa:	9d01      	ldr	r5, [sp, #4]
   e20ac:	3d01      	subs	r5, #1
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   e20ae:	ea83 030a 	eor.w	r3, r3, sl
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e20b2:	9501      	str	r5, [sp, #4]
   e20b4:	e731      	b.n	e1f1a <mbedtls_internal_aes_decrypt+0x36>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   e20b6:	f858 002a 	ldr.w	r0, [r8, sl, lsl #2]
   e20ba:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
   e20be:	f8df c19c 	ldr.w	ip, [pc, #412]	; e225c <mbedtls_internal_aes_decrypt+0x378>
   e20c2:	f8df e19c 	ldr.w	lr, [pc, #412]	; e2260 <mbedtls_internal_aes_decrypt+0x37c>
   e20c6:	f3c1 2607 	ubfx	r6, r1, #8, #8
   e20ca:	4047      	eors	r7, r0
   e20cc:	6828      	ldr	r0, [r5, #0]
   e20ce:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
   e20d2:	4078      	eors	r0, r7
   e20d4:	4070      	eors	r0, r6
   e20d6:	f3c3 4607 	ubfx	r6, r3, #16, #8
   e20da:	f85e 7026 	ldr.w	r7, [lr, r6, lsl #2]
   e20de:	fa5f f68b 	uxtb.w	r6, fp
   e20e2:	4047      	eors	r7, r0
   e20e4:	0e18      	lsrs	r0, r3, #24
   e20e6:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
   e20ea:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
   e20ee:	ea86 0a00 	eor.w	sl, r6, r0
   e20f2:	f3c4 2607 	ubfx	r6, r4, #8, #8
   e20f6:	6868      	ldr	r0, [r5, #4]
   e20f8:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
   e20fc:	ea8a 0000 	eor.w	r0, sl, r0
   e2100:	4070      	eors	r0, r6
   e2102:	f3c1 4607 	ubfx	r6, r1, #16, #8
   e2106:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
   e210a:	ea80 0a06 	eor.w	sl, r0, r6
   e210e:	b2de      	uxtb	r6, r3
   e2110:	0e08      	lsrs	r0, r1, #24
   e2112:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
   e2116:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
   e211a:	4070      	eors	r0, r6
   e211c:	68ae      	ldr	r6, [r5, #8]
   e211e:	4046      	eors	r6, r0
   e2120:	f3cb 2007 	ubfx	r0, fp, #8, #8
   e2124:	b2c9      	uxtb	r1, r1
   e2126:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
   e212a:	4046      	eors	r6, r0
   e212c:	f3c4 4007 	ubfx	r0, r4, #16, #8
   e2130:	0e24      	lsrs	r4, r4, #24
   e2132:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
   e2136:	4046      	eors	r6, r0
   e2138:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
   e213c:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
   e2140:	f3c3 2307 	ubfx	r3, r3, #8, #8
   e2144:	4048      	eors	r0, r1
   e2146:	68e9      	ldr	r1, [r5, #12]
   e2148:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
   e214c:	4041      	eors	r1, r0
   e214e:	4059      	eors	r1, r3
   e2150:	f3cb 4307 	ubfx	r3, fp, #16, #8

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
   e2154:	b2f8      	uxtb	r0, r7
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   e2156:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   e215a:	4059      	eors	r1, r3

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
   e215c:	4b41      	ldr	r3, [pc, #260]	; (e2264 <mbedtls_internal_aes_decrypt+0x380>)
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
   e215e:	ea4f 641a 	mov.w	r4, sl, lsr #24
    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
   e2162:	f813 e000 	ldrb.w	lr, [r3, r0]
   e2166:	6928      	ldr	r0, [r5, #16]
   e2168:	ea8e 0000 	eor.w	r0, lr, r0
   e216c:	f813 e004 	ldrb.w	lr, [r3, r4]

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
   e2170:	f3c1 2407 	ubfx	r4, r1, #8, #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
   e2174:	ea80 600e 	eor.w	r0, r0, lr, lsl #24
   e2178:	f813 e004 	ldrb.w	lr, [r3, r4]
   e217c:	f3c6 4407 	ubfx	r4, r6, #16, #8
   e2180:	ea80 200e 	eor.w	r0, r0, lr, lsl #8
   e2184:	f813 e004 	ldrb.w	lr, [r3, r4]
   e2188:	ea80 4e0e 	eor.w	lr, r0, lr, lsl #16
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
   e218c:	fa5f f08a 	uxtb.w	r0, sl
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   e2190:	5c1c      	ldrb	r4, [r3, r0]
   e2192:	6968      	ldr	r0, [r5, #20]
   e2194:	4060      	eors	r0, r4
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
   e2196:	0e34      	lsrs	r4, r6, #24
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   e2198:	5d1c      	ldrb	r4, [r3, r4]
   e219a:	ea80 6004 	eor.w	r0, r0, r4, lsl #24
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
   e219e:	f3c7 2407 	ubfx	r4, r7, #8, #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   e21a2:	5d1c      	ldrb	r4, [r3, r4]
   e21a4:	ea80 2004 	eor.w	r0, r0, r4, lsl #8
   e21a8:	f3c1 4407 	ubfx	r4, r1, #16, #8
   e21ac:	5d1c      	ldrb	r4, [r3, r4]
   e21ae:	ea80 4404 	eor.w	r4, r0, r4, lsl #16
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
   e21b2:	b2f0      	uxtb	r0, r6
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
   e21b4:	f3c6 2607 	ubfx	r6, r6, #8, #8
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   e21b8:	f813 c000 	ldrb.w	ip, [r3, r0]
   e21bc:	69a8      	ldr	r0, [r5, #24]
   e21be:	ea8c 0000 	eor.w	r0, ip, r0
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
   e21c2:	ea4f 6c11 	mov.w	ip, r1, lsr #24

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
   e21c6:	b2c9      	uxtb	r1, r1
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   e21c8:	f813 c00c 	ldrb.w	ip, [r3, ip]
   e21cc:	ea80 600c 	eor.w	r0, r0, ip, lsl #24
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
   e21d0:	f3ca 2c07 	ubfx	ip, sl, #8, #8
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   e21d4:	f3ca 4a07 	ubfx	sl, sl, #16, #8
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   e21d8:	f813 c00c 	ldrb.w	ip, [r3, ip]
   e21dc:	ea80 200c 	eor.w	r0, r0, ip, lsl #8
   e21e0:	f3c7 4c07 	ubfx	ip, r7, #16, #8

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
   e21e4:	0e3f      	lsrs	r7, r7, #24
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   e21e6:	f813 c00c 	ldrb.w	ip, [r3, ip]
   e21ea:	ea80 4c0c 	eor.w	ip, r0, ip, lsl #16
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   e21ee:	5c58      	ldrb	r0, [r3, r1]
   e21f0:	69e9      	ldr	r1, [r5, #28]
   e21f2:	4041      	eors	r1, r0
   e21f4:	5dd8      	ldrb	r0, [r3, r7]
   e21f6:	ea81 6100 	eor.w	r1, r1, r0, lsl #24
   e21fa:	5d98      	ldrb	r0, [r3, r6]
   e21fc:	f813 300a 	ldrb.w	r3, [r3, sl]
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   e2200:	f882 e000 	strb.w	lr, [r2]
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   e2204:	ea81 2100 	eor.w	r1, r1, r0, lsl #8
   e2208:	ea81 4303 	eor.w	r3, r1, r3, lsl #16
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   e220c:	ea4f 211e 	mov.w	r1, lr, lsr #8
   e2210:	7051      	strb	r1, [r2, #1]
   e2212:	ea4f 411e 	mov.w	r1, lr, lsr #16
   e2216:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
   e2218:	0a21      	lsrs	r1, r4, #8
   e221a:	7151      	strb	r1, [r2, #5]
   e221c:	0c21      	lsrs	r1, r4, #16
   e221e:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
   e2220:	ea4f 211c 	mov.w	r1, ip, lsr #8
   e2224:	7251      	strb	r1, [r2, #9]
   e2226:	ea4f 411c 	mov.w	r1, ip, lsr #16
   e222a:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
   e222c:	0a19      	lsrs	r1, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   e222e:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    PUT_UINT32_LE( X1, output,  4 );
   e2232:	7114      	strb	r4, [r2, #4]
    PUT_UINT32_LE( X2, output,  8 );
   e2234:	f882 c008 	strb.w	ip, [r2, #8]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
   e2238:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X2, output,  8 );
   e223a:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
    PUT_UINT32_LE( X3, output, 12 );
   e223e:	7313      	strb	r3, [r2, #12]
   e2240:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
   e2242:	2000      	movs	r0, #0
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
   e2244:	0c19      	lsrs	r1, r3, #16
   e2246:	0e1b      	lsrs	r3, r3, #24
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
   e2248:	f882 e003 	strb.w	lr, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
   e224c:	71d4      	strb	r4, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
   e224e:	f882 c00b 	strb.w	ip, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
   e2252:	7391      	strb	r1, [r2, #14]
   e2254:	73d3      	strb	r3, [r2, #15]

    return( 0 );
}
   e2256:	b003      	add	sp, #12
   e2258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e225c:	2003dc74 	.word	0x2003dc74
   e2260:	2003e074 	.word	0x2003e074
   e2264:	2003d274 	.word	0x2003d274
   e2268:	2003d874 	.word	0x2003d874
   e226c:	2003d474 	.word	0x2003d474

000e2270 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
   e2270:	b410      	push	{r4}
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
   e2272:	2901      	cmp	r1, #1
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
   e2274:	4614      	mov	r4, r2
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
   e2276:	4621      	mov	r1, r4
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
   e2278:	461a      	mov	r2, r3
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
   e227a:	d103      	bne.n	e2284 <mbedtls_aes_crypt_ecb+0x14>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
   e227c:	f85d 4b04 	ldr.w	r4, [sp], #4
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
   e2280:	f7ff bc6a 	b.w	e1b58 <mbedtls_internal_aes_encrypt>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
   e2284:	f85d 4b04 	ldr.w	r4, [sp], #4
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
   e2288:	f7ff be2c 	b.w	e1ee4 <mbedtls_internal_aes_decrypt>

000e228c <_ZL18pkcs12_fill_bufferPhjPKhj>:

#endif /* MBEDTLS_ASN1_PARSE_C */

static void pkcs12_fill_buffer( unsigned char *data, size_t data_len,
                                const unsigned char *filler, size_t fill_len )
{
   e228c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e2290:	4606      	mov	r6, r0
   e2292:	460c      	mov	r4, r1
   e2294:	4617      	mov	r7, r2
   e2296:	4698      	mov	r8, r3
    unsigned char *p = data;
    size_t use_len;

    while( data_len > 0 )
   e2298:	b15c      	cbz	r4, e22b2 <_ZL18pkcs12_fill_bufferPhjPKhj+0x26>
   e229a:	4544      	cmp	r4, r8
   e229c:	4625      	mov	r5, r4
   e229e:	bf28      	it	cs
   e22a0:	4645      	movcs	r5, r8
    {
        use_len = ( data_len > fill_len ) ? fill_len : data_len;
        memcpy( p, filler, use_len );
   e22a2:	4630      	mov	r0, r6
   e22a4:	462a      	mov	r2, r5
   e22a6:	4639      	mov	r1, r7
   e22a8:	f004 fe51 	bl	e6f4e <memcpy>
        p += use_len;
   e22ac:	442e      	add	r6, r5
        data_len -= use_len;
   e22ae:	1b64      	subs	r4, r4, r5
                                const unsigned char *filler, size_t fill_len )
{
    unsigned char *p = data;
    size_t use_len;

    while( data_len > 0 )
   e22b0:	e7f2      	b.n	e2298 <_ZL18pkcs12_fill_bufferPhjPKhj+0xc>
   e22b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000e22b8 <mbedtls_pkcs12_pbe_sha1_rc4_128>:
    mbedtls_platform_zeroize( key, sizeof( key ) );
    mbedtls_arc4_free( &ctx );

    return( ret );
#endif /* MBEDTLS_ARC4_C */
}
   e22b8:	4800      	ldr	r0, [pc, #0]	; (e22bc <mbedtls_pkcs12_pbe_sha1_rc4_128+0x4>)
   e22ba:	4770      	bx	lr
   e22bc:	ffffe100 	.word	0xffffe100

000e22c0 <mbedtls_pkcs12_derivation>:

int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
                       const unsigned char *pwd, size_t pwdlen,
                       const unsigned char *salt, size_t saltlen,
                       mbedtls_md_type_t md_type, int id, int iterations )
{
   e22c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e22c4:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c

    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
   e22c8:	2980      	cmp	r1, #128	; 0x80

int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
                       const unsigned char *pwd, size_t pwdlen,
                       const unsigned char *salt, size_t saltlen,
                       mbedtls_md_type_t md_type, int id, int iterations )
{
   e22ca:	9001      	str	r0, [sp, #4]
   e22cc:	460f      	mov	r7, r1
   e22ce:	4693      	mov	fp, r2
   e22d0:	4699      	mov	r9, r3
   e22d2:	9da1      	ldr	r5, [sp, #644]	; 0x284

    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
   e22d4:	f200 80c3 	bhi.w	e245e <mbedtls_pkcs12_derivation+0x19e>
   e22d8:	2b40      	cmp	r3, #64	; 0x40
   e22da:	f200 80c0 	bhi.w	e245e <mbedtls_pkcs12_derivation+0x19e>
   e22de:	2d40      	cmp	r5, #64	; 0x40
   e22e0:	f200 80bd 	bhi.w	e245e <mbedtls_pkcs12_derivation+0x19e>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( md_type );
   e22e4:	f89d 0288 	ldrb.w	r0, [sp, #648]	; 0x288
   e22e8:	f7f9 ff9e 	bl	dc228 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   e22ec:	9000      	str	r0, [sp, #0]
   e22ee:	2800      	cmp	r0, #0
   e22f0:	f000 80b7 	beq.w	e2462 <mbedtls_pkcs12_derivation+0x1a2>
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    mbedtls_md_init( &md_ctx );
   e22f4:	a803      	add	r0, sp, #12
   e22f6:	f7f9 ffa3 	bl	dc240 <mbedtls_md_init>

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   e22fa:	2200      	movs	r2, #0
   e22fc:	9900      	ldr	r1, [sp, #0]
   e22fe:	a803      	add	r0, sp, #12
   e2300:	f7f9 ffbe 	bl	dc280 <mbedtls_md_setup>
   e2304:	2800      	cmp	r0, #0
   e2306:	f040 80ad 	bne.w	e2464 <mbedtls_pkcs12_derivation+0x1a4>
        return( ret );
    hlen = mbedtls_md_get_size( md_info );
   e230a:	9800      	ldr	r0, [sp, #0]
   e230c:	f7fa f8c4 	bl	dc498 <mbedtls_md_get_size>

    if( hlen <= 32 )
        v = 64;
   e2310:	2820      	cmp	r0, #32
   e2312:	bf8c      	ite	hi
   e2314:	2480      	movhi	r4, #128	; 0x80
   e2316:	2440      	movls	r4, #64	; 0x40
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );
   e2318:	4622      	mov	r2, r4
   e231a:	f89d 128c 	ldrb.w	r1, [sp, #652]	; 0x28c

    mbedtls_md_init( &md_ctx );

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
        return( ret );
    hlen = mbedtls_md_get_size( md_info );
   e231e:	4682      	mov	sl, r0
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
   e2320:	f10d 08d8 	add.w	r8, sp, #216	; 0xd8
    if( hlen <= 32 )
        v = 64;
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );
   e2324:	a816      	add	r0, sp, #88	; 0x58
   e2326:	f004 fe38 	bl	e6f9a <memset>

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
   e232a:	462b      	mov	r3, r5
   e232c:	9aa0      	ldr	r2, [sp, #640]	; 0x280
   e232e:	4621      	mov	r1, r4
   e2330:	4640      	mov	r0, r8
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );
   e2332:	ad56      	add	r5, sp, #344	; 0x158
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
   e2334:	f7ff ffaa 	bl	e228c <_ZL18pkcs12_fill_bufferPhjPKhj>
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );
   e2338:	464b      	mov	r3, r9
   e233a:	465a      	mov	r2, fp
   e233c:	4621      	mov	r1, r4
   e233e:	4628      	mov	r0, r5
   e2340:	f7ff ffa4 	bl	e228c <_ZL18pkcs12_fill_bufferPhjPKhj>

        if( datalen == 0 )
            break;

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );
   e2344:	f50d 79ec 	add.w	r9, sp, #472	; 0x1d8

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );

    p = data;
    while( datalen > 0 )
   e2348:	2f00      	cmp	r7, #0
   e234a:	d072      	beq.n	e2432 <mbedtls_pkcs12_derivation+0x172>
    {
        // Calculate hash( diversifier || salt_block || pwd_block )
        if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
   e234c:	a803      	add	r0, sp, #12
   e234e:	f7f9 ffb9 	bl	dc2c4 <mbedtls_md_starts>
   e2352:	4606      	mov	r6, r0
   e2354:	2800      	cmp	r0, #0
   e2356:	d16d      	bne.n	e2434 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, diversifier, v ) ) != 0 )
   e2358:	4622      	mov	r2, r4
   e235a:	a916      	add	r1, sp, #88	; 0x58
   e235c:	a803      	add	r0, sp, #12
   e235e:	f7f9 ffbb 	bl	dc2d8 <mbedtls_md_update>
   e2362:	4606      	mov	r6, r0
   e2364:	2800      	cmp	r0, #0
   e2366:	d165      	bne.n	e2434 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, salt_block, v ) ) != 0 )
   e2368:	4622      	mov	r2, r4
   e236a:	4641      	mov	r1, r8
   e236c:	a803      	add	r0, sp, #12
   e236e:	f7f9 ffb3 	bl	dc2d8 <mbedtls_md_update>
   e2372:	4606      	mov	r6, r0
   e2374:	2800      	cmp	r0, #0
   e2376:	d15d      	bne.n	e2434 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, pwd_block, v ) ) != 0 )
   e2378:	4622      	mov	r2, r4
   e237a:	4629      	mov	r1, r5
   e237c:	a803      	add	r0, sp, #12
   e237e:	f7f9 ffab 	bl	dc2d8 <mbedtls_md_update>
   e2382:	4606      	mov	r6, r0
   e2384:	2800      	cmp	r0, #0
   e2386:	d155      	bne.n	e2434 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
   e2388:	a906      	add	r1, sp, #24
   e238a:	a803      	add	r0, sp, #12
   e238c:	f7f9 ffae 	bl	dc2ec <mbedtls_md_finish>
   e2390:	4606      	mov	r6, r0
   e2392:	2800      	cmp	r0, #0
   e2394:	d14e      	bne.n	e2434 <mbedtls_pkcs12_derivation+0x174>
   e2396:	f04f 0b01 	mov.w	fp, #1
            goto exit;

        // Perform remaining ( iterations - 1 ) recursive hash calculations
        for( i = 1; i < (size_t) iterations; i++ )
   e239a:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   e239c:	459b      	cmp	fp, r3
   e239e:	d20b      	bcs.n	e23b8 <mbedtls_pkcs12_derivation+0xf8>
        {
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
   e23a0:	ab06      	add	r3, sp, #24
   e23a2:	4652      	mov	r2, sl
   e23a4:	4619      	mov	r1, r3
   e23a6:	9800      	ldr	r0, [sp, #0]
   e23a8:	f7f9 ffaa 	bl	dc300 <mbedtls_md>
   e23ac:	4606      	mov	r6, r0
   e23ae:	2800      	cmp	r0, #0
   e23b0:	d140      	bne.n	e2434 <mbedtls_pkcs12_derivation+0x174>

        if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
            goto exit;

        // Perform remaining ( iterations - 1 ) recursive hash calculations
        for( i = 1; i < (size_t) iterations; i++ )
   e23b2:	f10b 0b01 	add.w	fp, fp, #1
   e23b6:	e7f0      	b.n	e239a <mbedtls_pkcs12_derivation+0xda>
   e23b8:	4557      	cmp	r7, sl
   e23ba:	46bb      	mov	fp, r7
   e23bc:	bf28      	it	cs
   e23be:	46d3      	movcs	fp, sl
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
                goto exit;
        }

        use_len = ( datalen > hlen ) ? hlen : datalen;
        memcpy( p, hash_output, use_len );
   e23c0:	465a      	mov	r2, fp
   e23c2:	a906      	add	r1, sp, #24
   e23c4:	9801      	ldr	r0, [sp, #4]
   e23c6:	f004 fdc2 	bl	e6f4e <memcpy>
        datalen -= use_len;
        p += use_len;
   e23ca:	9b01      	ldr	r3, [sp, #4]

        if( datalen == 0 )
   e23cc:	ebb7 070b 	subs.w	r7, r7, fp
        }

        use_len = ( datalen > hlen ) ? hlen : datalen;
        memcpy( p, hash_output, use_len );
        datalen -= use_len;
        p += use_len;
   e23d0:	445b      	add	r3, fp
   e23d2:	9301      	str	r3, [sp, #4]

        if( datalen == 0 )
   e23d4:	d02d      	beq.n	e2432 <mbedtls_pkcs12_derivation+0x172>
            break;

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );
   e23d6:	4653      	mov	r3, sl
   e23d8:	aa06      	add	r2, sp, #24
   e23da:	4621      	mov	r1, r4
   e23dc:	4648      	mov	r0, r9
   e23de:	f7ff ff55 	bl	e228c <_ZL18pkcs12_fill_bufferPhjPKhj>
   e23e2:	eb09 0304 	add.w	r3, r9, r4

        // B += 1
        for( i = v; i > 0; i-- )
            if( ++hash_block[i - 1] != 0 )
   e23e6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   e23ea:	3201      	adds	r2, #1
   e23ec:	b2d2      	uxtb	r2, r2
   e23ee:	701a      	strb	r2, [r3, #0]
   e23f0:	b91a      	cbnz	r2, e23fa <mbedtls_pkcs12_derivation+0x13a>

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );

        // B += 1
        for( i = v; i > 0; i-- )
   e23f2:	454b      	cmp	r3, r9
   e23f4:	d1f7      	bne.n	e23e6 <mbedtls_pkcs12_derivation+0x126>
   e23f6:	4623      	mov	r3, r4
   e23f8:	e001      	b.n	e23fe <mbedtls_pkcs12_derivation+0x13e>
   e23fa:	4623      	mov	r3, r4
   e23fc:	2200      	movs	r2, #0

        // salt_block += B
        c = 0;
        for( i = v; i > 0; i-- )
        {
            j = salt_block[i - 1] + hash_block[i - 1] + c;
   e23fe:	3b01      	subs	r3, #1
   e2400:	f818 0003 	ldrb.w	r0, [r8, r3]
   e2404:	f813 1009 	ldrb.w	r1, [r3, r9]
   e2408:	4401      	add	r1, r0
   e240a:	4411      	add	r1, r2
            c = (unsigned char) (j >> 8);
   e240c:	f3c1 2207 	ubfx	r2, r1, #8, #8
            salt_block[i - 1] = j & 0xFF;
   e2410:	f808 1003 	strb.w	r1, [r8, r3]
            if( ++hash_block[i - 1] != 0 )
                break;

        // salt_block += B
        c = 0;
        for( i = v; i > 0; i-- )
   e2414:	2b00      	cmp	r3, #0
   e2416:	d1f2      	bne.n	e23fe <mbedtls_pkcs12_derivation+0x13e>
   e2418:	4622      	mov	r2, r4

        // pwd_block  += B
        c = 0;
        for( i = v; i > 0; i-- )
        {
            j = pwd_block[i - 1] + hash_block[i - 1] + c;
   e241a:	3a01      	subs	r2, #1
   e241c:	5d50      	ldrb	r0, [r2, r5]
   e241e:	f812 1009 	ldrb.w	r1, [r2, r9]
   e2422:	4401      	add	r1, r0
   e2424:	4419      	add	r1, r3
            c = (unsigned char) (j >> 8);
   e2426:	f3c1 2307 	ubfx	r3, r1, #8, #8
            pwd_block[i - 1] = j & 0xFF;
   e242a:	5551      	strb	r1, [r2, r5]
            salt_block[i - 1] = j & 0xFF;
        }

        // pwd_block  += B
        c = 0;
        for( i = v; i > 0; i-- )
   e242c:	2a00      	cmp	r2, #0
   e242e:	d1f4      	bne.n	e241a <mbedtls_pkcs12_derivation+0x15a>
   e2430:	e78a      	b.n	e2348 <mbedtls_pkcs12_derivation+0x88>
            c = (unsigned char) (j >> 8);
            pwd_block[i - 1] = j & 0xFF;
        }
    }

    ret = 0;
   e2432:	2600      	movs	r6, #0

exit:
    mbedtls_platform_zeroize( salt_block, sizeof( salt_block ) );
   e2434:	2180      	movs	r1, #128	; 0x80
   e2436:	4640      	mov	r0, r8
   e2438:	f7f8 f852 	bl	da4e0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( pwd_block, sizeof( pwd_block ) );
   e243c:	2180      	movs	r1, #128	; 0x80
   e243e:	4628      	mov	r0, r5
   e2440:	f7f8 f84e 	bl	da4e0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( hash_block, sizeof( hash_block ) );
   e2444:	2180      	movs	r1, #128	; 0x80
   e2446:	a876      	add	r0, sp, #472	; 0x1d8
   e2448:	f7f8 f84a 	bl	da4e0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( hash_output, sizeof( hash_output ) );
   e244c:	2140      	movs	r1, #64	; 0x40
   e244e:	a806      	add	r0, sp, #24
   e2450:	f7f8 f846 	bl	da4e0 <mbedtls_platform_zeroize>

    mbedtls_md_free( &md_ctx );
   e2454:	a803      	add	r0, sp, #12
   e2456:	f7f9 fef8 	bl	dc24a <mbedtls_md_free>

    return( ret );
   e245a:	4630      	mov	r0, r6
   e245c:	e002      	b.n	e2464 <mbedtls_pkcs12_derivation+0x1a4>
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
   e245e:	4803      	ldr	r0, [pc, #12]	; (e246c <mbedtls_pkcs12_derivation+0x1ac>)
   e2460:	e000      	b.n	e2464 <mbedtls_pkcs12_derivation+0x1a4>

    md_info = mbedtls_md_info_from_type( md_type );
    if( md_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
   e2462:	4803      	ldr	r0, [pc, #12]	; (e2470 <mbedtls_pkcs12_derivation+0x1b0>)
    mbedtls_platform_zeroize( hash_output, sizeof( hash_output ) );

    mbedtls_md_free( &md_ctx );

    return( ret );
}
   e2464:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
   e2468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e246c:	ffffe080 	.word	0xffffe080
   e2470:	ffffe100 	.word	0xffffe100

000e2474 <mbedtls_pkcs12_pbe>:
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
   e2474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2478:	b0d9      	sub	sp, #356	; 0x164
   e247a:	4604      	mov	r4, r0
    int ret, keylen = 0;
    unsigned char key[32];
    unsigned char iv[16];
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;
   e247c:	2600      	movs	r6, #0

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
   e247e:	4610      	mov	r0, r2
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
   e2480:	468b      	mov	fp, r1
   e2482:	4699      	mov	r9, r3
    int ret, keylen = 0;
    unsigned char key[32];
    unsigned char iv[16];
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;
   e2484:	9606      	str	r6, [sp, #24]

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
   e2486:	f7f2 ff8b 	bl	d53a0 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
   e248a:	4605      	mov	r5, r0
   e248c:	2800      	cmp	r0, #0
   e248e:	f000 80ac 	beq.w	e25ea <mbedtls_pkcs12_pbe+0x176>
    int ret, iterations = 0;
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
   e2492:	9b63      	ldr	r3, [sp, #396]	; 0x18c

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;
   e2494:	6847      	ldr	r7, [r0, #4]

    if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, md_type, pwd, pwdlen,
                                          key, keylen,
                                          iv, cipher_info->iv_size ) ) != 0 )
   e2496:	f8d0 800c 	ldr.w	r8, [r0, #12]
static int pkcs12_pbe_derive_key_iv( mbedtls_asn1_buf *pbe_params, mbedtls_md_type_t md_type,
                                     const unsigned char *pwd,  size_t pwdlen,
                                     unsigned char *key, size_t keylen,
                                     unsigned char *iv,  size_t ivlen )
{
    int ret, iterations = 0;
   e249a:	9607      	str	r6, [sp, #28]
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
   e249c:	2b80      	cmp	r3, #128	; 0x80

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;
   e249e:	ea4f 07d7 	mov.w	r7, r7, lsr #3
    int ret, iterations = 0;
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
   e24a2:	d860      	bhi.n	e2566 <mbedtls_pkcs12_pbe+0xf2>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
    memset( &unipwd, 0, sizeof(unipwd) );
   e24a4:	4631      	mov	r1, r6
   e24a6:	f44f 7281 	mov.w	r2, #258	; 0x102
   e24aa:	a817      	add	r0, sp, #92	; 0x5c
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
   e24ac:	9608      	str	r6, [sp, #32]
   e24ae:	9609      	str	r6, [sp, #36]	; 0x24
   e24b0:	960a      	str	r6, [sp, #40]	; 0x28
    memset( &unipwd, 0, sizeof(unipwd) );
   e24b2:	f004 fd72 	bl	e6f9a <memset>
static int pkcs12_parse_pbe_params( mbedtls_asn1_buf *params,
                                    mbedtls_asn1_buf *salt, int *iterations )
{
    int ret;
    unsigned char **p = &params->p;
    const unsigned char *end = params->p + params->len;
   e24b6:	6863      	ldr	r3, [r4, #4]
   e24b8:	68a6      	ldr	r6, [r4, #8]
   e24ba:	441e      	add	r6, r3
     *    salt          OCTET STRING,
     *    iterations    INTEGER
     *  }
     *
     */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   e24bc:	6823      	ldr	r3, [r4, #0]
   e24be:	2b30      	cmp	r3, #48	; 0x30

static int pkcs12_parse_pbe_params( mbedtls_asn1_buf *params,
                                    mbedtls_asn1_buf *salt, int *iterations )
{
    int ret;
    unsigned char **p = &params->p;
   e24c0:	f104 0a08 	add.w	sl, r4, #8
     *    salt          OCTET STRING,
     *    iterations    INTEGER
     *  }
     *
     */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   e24c4:	f040 8093 	bne.w	e25ee <mbedtls_pkcs12_pbe+0x17a>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   e24c8:	2304      	movs	r3, #4
   e24ca:	aa09      	add	r2, sp, #36	; 0x24
   e24cc:	4631      	mov	r1, r6
   e24ce:	4650      	mov	r0, sl
   e24d0:	f7f3 f92e 	bl	d5730 <mbedtls_asn1_get_tag>
   e24d4:	b950      	cbnz	r0, e24ec <mbedtls_pkcs12_pbe+0x78>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    salt->p = *p;
   e24d6:	68a2      	ldr	r2, [r4, #8]
    *p += salt->len;
   e24d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    salt->p = *p;
   e24da:	920a      	str	r2, [sp, #40]	; 0x28
    *p += salt->len;
   e24dc:	4413      	add	r3, r2
   e24de:	60a3      	str	r3, [r4, #8]

    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
   e24e0:	aa07      	add	r2, sp, #28
   e24e2:	4631      	mov	r1, r6
   e24e4:	4650      	mov	r0, sl
   e24e6:	f7f3 f950 	bl	d578a <mbedtls_asn1_get_int>
   e24ea:	b118      	cbz	r0, e24f4 <mbedtls_pkcs12_pbe+0x80>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );
   e24ec:	f5a0 50f4 	sub.w	r0, r0, #7808	; 0x1e80
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
    memset( &unipwd, 0, sizeof(unipwd) );

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
   e24f0:	b118      	cbz	r0, e24fa <mbedtls_pkcs12_pbe+0x86>
   e24f2:	e07f      	b.n	e25f4 <mbedtls_pkcs12_pbe+0x180>
    *p += salt->len;

    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    if( *p != end )
   e24f4:	68a3      	ldr	r3, [r4, #8]
   e24f6:	429e      	cmp	r6, r3
   e24f8:	d17b      	bne.n	e25f2 <mbedtls_pkcs12_pbe+0x17e>
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
   e24fa:	2300      	movs	r3, #0

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
                                         &iterations ) ) != 0 )
        return( ret );

    for( i = 0; i < pwdlen; i++ )
   e24fc:	9a63      	ldr	r2, [sp, #396]	; 0x18c
   e24fe:	429a      	cmp	r2, r3
   e2500:	d007      	beq.n	e2512 <mbedtls_pkcs12_pbe+0x9e>
        unipwd[i * 2 + 1] = pwd[i];
   e2502:	aa17      	add	r2, sp, #92	; 0x5c
   e2504:	9962      	ldr	r1, [sp, #392]	; 0x188
   e2506:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   e250a:	5cc9      	ldrb	r1, [r1, r3]
   e250c:	7051      	strb	r1, [r2, #1]

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
                                         &iterations ) ) != 0 )
        return( ret );

    for( i = 0; i < pwdlen; i++ )
   e250e:	3301      	adds	r3, #1
   e2510:	e7f4      	b.n	e24fc <mbedtls_pkcs12_pbe+0x88>
        unipwd[i * 2 + 1] = pwd[i];

    if( ( ret = mbedtls_pkcs12_derivation( key, keylen, unipwd, pwdlen * 2 + 2,
   e2512:	9b63      	ldr	r3, [sp, #396]	; 0x18c
   e2514:	f8cd 9008 	str.w	r9, [sp, #8]
   e2518:	1c5c      	adds	r4, r3, #1
   e251a:	9b07      	ldr	r3, [sp, #28]
   e251c:	9304      	str	r3, [sp, #16]
   e251e:	2301      	movs	r3, #1
   e2520:	9303      	str	r3, [sp, #12]
   e2522:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e2524:	9301      	str	r3, [sp, #4]
   e2526:	0064      	lsls	r4, r4, #1
   e2528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e252a:	9300      	str	r3, [sp, #0]
   e252c:	aa17      	add	r2, sp, #92	; 0x5c
   e252e:	4623      	mov	r3, r4
   e2530:	4639      	mov	r1, r7
   e2532:	a80f      	add	r0, sp, #60	; 0x3c
   e2534:	f7ff fec4 	bl	e22c0 <mbedtls_pkcs12_derivation>
   e2538:	2800      	cmp	r0, #0
   e253a:	d15b      	bne.n	e25f4 <mbedtls_pkcs12_pbe+0x180>
                                   MBEDTLS_PKCS12_DERIVE_KEY, iterations ) ) != 0 )
    {
        return( ret );
    }

    if( iv == NULL || ivlen == 0 )
   e253c:	f1b8 0f00 	cmp.w	r8, #0
   e2540:	d013      	beq.n	e256a <mbedtls_pkcs12_pbe+0xf6>
        return( 0 );

    if( ( ret = mbedtls_pkcs12_derivation( iv, ivlen, unipwd, pwdlen * 2 + 2,
   e2542:	9b07      	ldr	r3, [sp, #28]
   e2544:	9304      	str	r3, [sp, #16]
   e2546:	2302      	movs	r3, #2
   e2548:	9303      	str	r3, [sp, #12]
   e254a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e254c:	9301      	str	r3, [sp, #4]
   e254e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e2550:	9300      	str	r3, [sp, #0]
   e2552:	f8cd 9008 	str.w	r9, [sp, #8]
   e2556:	4623      	mov	r3, r4
   e2558:	aa17      	add	r2, sp, #92	; 0x5c
   e255a:	4641      	mov	r1, r8
   e255c:	a80b      	add	r0, sp, #44	; 0x2c
   e255e:	f7ff feaf 	bl	e22c0 <mbedtls_pkcs12_derivation>
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;

    if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, md_type, pwd, pwdlen,
   e2562:	b110      	cbz	r0, e256a <mbedtls_pkcs12_pbe+0xf6>
   e2564:	e046      	b.n	e25f4 <mbedtls_pkcs12_pbe+0x180>
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
   e2566:	4825      	ldr	r0, [pc, #148]	; (e25fc <mbedtls_pkcs12_pbe+0x188>)
   e2568:	e044      	b.n	e25f4 <mbedtls_pkcs12_pbe+0x180>
                                          iv, cipher_info->iv_size ) ) != 0 )
    {
        return( ret );
    }

    mbedtls_cipher_init( &cipher_ctx );
   e256a:	a817      	add	r0, sp, #92	; 0x5c
   e256c:	f7f2 ff3a 	bl	d53e4 <mbedtls_cipher_init>

    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
   e2570:	4629      	mov	r1, r5
   e2572:	a817      	add	r0, sp, #92	; 0x5c
   e2574:	f7f2 ff4a 	bl	d540c <mbedtls_cipher_setup>
   e2578:	4604      	mov	r4, r0
   e257a:	bb48      	cbnz	r0, e25d0 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
   e257c:	fa4f f38b 	sxtb.w	r3, fp
   e2580:	00fa      	lsls	r2, r7, #3
   e2582:	a90f      	add	r1, sp, #60	; 0x3c
   e2584:	a817      	add	r0, sp, #92	; 0x5c
   e2586:	f7f2 ff59 	bl	d543c <mbedtls_cipher_setkey>
   e258a:	4604      	mov	r4, r0
   e258c:	bb00      	cbnz	r0, e25d0 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_set_iv( &cipher_ctx, iv, cipher_info->iv_size ) ) != 0 )
   e258e:	68ea      	ldr	r2, [r5, #12]
   e2590:	a90b      	add	r1, sp, #44	; 0x2c
   e2592:	a817      	add	r0, sp, #92	; 0x5c
   e2594:	f7f2 ff72 	bl	d547c <mbedtls_cipher_set_iv>
   e2598:	4604      	mov	r4, r0
   e259a:	b9c8      	cbnz	r0, e25d0 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_reset( &cipher_ctx ) ) != 0 )
   e259c:	a817      	add	r0, sp, #92	; 0x5c
   e259e:	f7f2 ff8d 	bl	d54bc <mbedtls_cipher_reset>
   e25a2:	4604      	mov	r4, r0
   e25a4:	b9a0      	cbnz	r0, e25d0 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_update( &cipher_ctx, data, len,
   e25a6:	ad06      	add	r5, sp, #24
   e25a8:	9500      	str	r5, [sp, #0]
   e25aa:	a964      	add	r1, sp, #400	; 0x190
   e25ac:	c90e      	ldmia	r1, {r1, r2, r3}
   e25ae:	a817      	add	r0, sp, #92	; 0x5c
   e25b0:	f7f2 ff8e 	bl	d54d0 <mbedtls_cipher_update>
   e25b4:	4604      	mov	r4, r0
   e25b6:	b958      	cbnz	r0, e25d0 <mbedtls_pkcs12_pbe+0x15c>
                                output, &olen ) ) != 0 )
    {
        goto exit;
    }

    if( ( ret = mbedtls_cipher_finish( &cipher_ctx, output + olen, &olen ) ) != 0 )
   e25b8:	6829      	ldr	r1, [r5, #0]
   e25ba:	9b66      	ldr	r3, [sp, #408]	; 0x198
   e25bc:	462a      	mov	r2, r5
   e25be:	4419      	add	r1, r3
   e25c0:	a817      	add	r0, sp, #92	; 0x5c
   e25c2:	f7f2 ffc9 	bl	d5558 <mbedtls_cipher_finish>
        ret = MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH;
   e25c6:	f5a4 54f0 	sub.w	r4, r4, #7680	; 0x1e00
   e25ca:	2800      	cmp	r0, #0
   e25cc:	bf08      	it	eq
   e25ce:	2400      	moveq	r4, #0

exit:
    mbedtls_platform_zeroize( key, sizeof( key ) );
   e25d0:	2120      	movs	r1, #32
   e25d2:	a80f      	add	r0, sp, #60	; 0x3c
   e25d4:	f7f7 ff84 	bl	da4e0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( iv,  sizeof( iv  ) );
   e25d8:	2110      	movs	r1, #16
   e25da:	a80b      	add	r0, sp, #44	; 0x2c
   e25dc:	f7f7 ff80 	bl	da4e0 <mbedtls_platform_zeroize>
    mbedtls_cipher_free( &cipher_ctx );
   e25e0:	a817      	add	r0, sp, #92	; 0x5c
   e25e2:	f7f2 ff03 	bl	d53ec <mbedtls_cipher_free>

    return( ret );
   e25e6:	4620      	mov	r0, r4
   e25e8:	e004      	b.n	e25f4 <mbedtls_pkcs12_pbe+0x180>
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
   e25ea:	4805      	ldr	r0, [pc, #20]	; (e2600 <mbedtls_pkcs12_pbe+0x18c>)
   e25ec:	e002      	b.n	e25f4 <mbedtls_pkcs12_pbe+0x180>
     *  }
     *
     */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   e25ee:	4805      	ldr	r0, [pc, #20]	; (e2604 <mbedtls_pkcs12_pbe+0x190>)
   e25f0:	e000      	b.n	e25f4 <mbedtls_pkcs12_pbe+0x180>
    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    if( *p != end )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   e25f2:	4805      	ldr	r0, [pc, #20]	; (e2608 <mbedtls_pkcs12_pbe+0x194>)
    mbedtls_platform_zeroize( key, sizeof( key ) );
    mbedtls_platform_zeroize( iv,  sizeof( iv  ) );
    mbedtls_cipher_free( &cipher_ctx );

    return( ret );
}
   e25f4:	b059      	add	sp, #356	; 0x164
   e25f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e25fa:	bf00      	nop
   e25fc:	ffffe080 	.word	0xffffe080
   e2600:	ffffe100 	.word	0xffffe100
   e2604:	ffffe11e 	.word	0xffffe11e
   e2608:	ffffe11a 	.word	0xffffe11a

000e260c <mbedtls_sha512_init>:

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
    SHA512_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
   e260c:	22d8      	movs	r2, #216	; 0xd8
   e260e:	2100      	movs	r1, #0
   e2610:	f004 bcc3 	b.w	e6f9a <memset>

000e2614 <mbedtls_sha512_free>:
}

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
    if( ctx == NULL )
   e2614:	b110      	cbz	r0, e261c <mbedtls_sha512_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
   e2616:	21d8      	movs	r1, #216	; 0xd8
   e2618:	f7f7 bf62 	b.w	da4e0 <mbedtls_platform_zeroize>
   e261c:	4770      	bx	lr

000e261e <mbedtls_sha512_clone>:
}

void mbedtls_sha512_clone( mbedtls_sha512_context *dst,
                           const mbedtls_sha512_context *src )
{
   e261e:	b508      	push	{r3, lr}
    SHA512_VALIDATE( dst != NULL );
    SHA512_VALIDATE( src != NULL );

    *dst = *src;
   e2620:	22d8      	movs	r2, #216	; 0xd8
   e2622:	f004 fc94 	bl	e6f4e <memcpy>
   e2626:	bd08      	pop	{r3, pc}

000e2628 <mbedtls_sha512_starts_ret>:
int mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )
{
    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );

    ctx->total[0] = 0;
   e2628:	2200      	movs	r2, #0
   e262a:	2300      	movs	r3, #0
   e262c:	e9c0 2300 	strd	r2, r3, [r0]
    ctx->total[1] = 0;
   e2630:	e9c0 2302 	strd	r2, r3, [r0, #8]

    if( is384 == 0 )
   e2634:	bb31      	cbnz	r1, e2684 <mbedtls_sha512_starts_ret+0x5c>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
   e2636:	a32a      	add	r3, pc, #168	; (adr r3, e26e0 <mbedtls_sha512_starts_ret+0xb8>)
   e2638:	e9d3 2300 	ldrd	r2, r3, [r3]
   e263c:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
   e2640:	a329      	add	r3, pc, #164	; (adr r3, e26e8 <mbedtls_sha512_starts_ret+0xc0>)
   e2642:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2646:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
   e264a:	a329      	add	r3, pc, #164	; (adr r3, e26f0 <mbedtls_sha512_starts_ret+0xc8>)
   e264c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2650:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
   e2654:	a328      	add	r3, pc, #160	; (adr r3, e26f8 <mbedtls_sha512_starts_ret+0xd0>)
   e2656:	e9d3 2300 	ldrd	r2, r3, [r3]
   e265a:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
   e265e:	a328      	add	r3, pc, #160	; (adr r3, e2700 <mbedtls_sha512_starts_ret+0xd8>)
   e2660:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2664:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
   e2668:	a327      	add	r3, pc, #156	; (adr r3, e2708 <mbedtls_sha512_starts_ret+0xe0>)
   e266a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e266e:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
   e2672:	a327      	add	r3, pc, #156	; (adr r3, e2710 <mbedtls_sha512_starts_ret+0xe8>)
   e2674:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2678:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
   e267c:	a326      	add	r3, pc, #152	; (adr r3, e2718 <mbedtls_sha512_starts_ret+0xf0>)
   e267e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2682:	e025      	b.n	e26d0 <mbedtls_sha512_starts_ret+0xa8>
    }
    else
    {
        /* SHA-384 */
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
   e2684:	a326      	add	r3, pc, #152	; (adr r3, e2720 <mbedtls_sha512_starts_ret+0xf8>)
   e2686:	e9d3 2300 	ldrd	r2, r3, [r3]
   e268a:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
   e268e:	a326      	add	r3, pc, #152	; (adr r3, e2728 <mbedtls_sha512_starts_ret+0x100>)
   e2690:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2694:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
   e2698:	a325      	add	r3, pc, #148	; (adr r3, e2730 <mbedtls_sha512_starts_ret+0x108>)
   e269a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e269e:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
   e26a2:	a325      	add	r3, pc, #148	; (adr r3, e2738 <mbedtls_sha512_starts_ret+0x110>)
   e26a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e26a8:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
   e26ac:	a324      	add	r3, pc, #144	; (adr r3, e2740 <mbedtls_sha512_starts_ret+0x118>)
   e26ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   e26b2:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
   e26b6:	a324      	add	r3, pc, #144	; (adr r3, e2748 <mbedtls_sha512_starts_ret+0x120>)
   e26b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   e26bc:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
   e26c0:	a323      	add	r3, pc, #140	; (adr r3, e2750 <mbedtls_sha512_starts_ret+0x128>)
   e26c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e26c6:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
   e26ca:	a323      	add	r3, pc, #140	; (adr r3, e2758 <mbedtls_sha512_starts_ret+0x130>)
   e26cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e26d0:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    }

    ctx->is384 = is384;
   e26d4:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0

    return( 0 );
}
   e26d8:	2000      	movs	r0, #0
   e26da:	4770      	bx	lr
   e26dc:	f3af 8000 	nop.w
   e26e0:	f3bcc908 	.word	0xf3bcc908
   e26e4:	6a09e667 	.word	0x6a09e667
   e26e8:	84caa73b 	.word	0x84caa73b
   e26ec:	bb67ae85 	.word	0xbb67ae85
   e26f0:	fe94f82b 	.word	0xfe94f82b
   e26f4:	3c6ef372 	.word	0x3c6ef372
   e26f8:	5f1d36f1 	.word	0x5f1d36f1
   e26fc:	a54ff53a 	.word	0xa54ff53a
   e2700:	ade682d1 	.word	0xade682d1
   e2704:	510e527f 	.word	0x510e527f
   e2708:	2b3e6c1f 	.word	0x2b3e6c1f
   e270c:	9b05688c 	.word	0x9b05688c
   e2710:	fb41bd6b 	.word	0xfb41bd6b
   e2714:	1f83d9ab 	.word	0x1f83d9ab
   e2718:	137e2179 	.word	0x137e2179
   e271c:	5be0cd19 	.word	0x5be0cd19
   e2720:	c1059ed8 	.word	0xc1059ed8
   e2724:	cbbb9d5d 	.word	0xcbbb9d5d
   e2728:	367cd507 	.word	0x367cd507
   e272c:	629a292a 	.word	0x629a292a
   e2730:	3070dd17 	.word	0x3070dd17
   e2734:	9159015a 	.word	0x9159015a
   e2738:	f70e5939 	.word	0xf70e5939
   e273c:	152fecd8 	.word	0x152fecd8
   e2740:	ffc00b31 	.word	0xffc00b31
   e2744:	67332667 	.word	0x67332667
   e2748:	68581511 	.word	0x68581511
   e274c:	8eb44a87 	.word	0x8eb44a87
   e2750:	64f98fa7 	.word	0x64f98fa7
   e2754:	db0c2e0d 	.word	0xdb0c2e0d
   e2758:	befa4fa4 	.word	0xbefa4fa4
   e275c:	47b5481d 	.word	0x47b5481d

000e2760 <mbedtls_internal_sha512_process>:
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

int mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,
                                     const unsigned char data[128] )
{
   e2760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2764:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
   e2768:	4686      	mov	lr, r0
   e276a:	f50d 7cf8 	add.w	ip, sp, #496	; 0x1f0
        temp1 = (h) + S3(e) + F1((e),(f),(g)) + (K) + (x);      \
        temp2 = S2(a) + F0((a),(b),(c));                        \
        (d) += temp1; (h) = temp1 + temp2;                      \
    } while( 0 )

    for( i = 0; i < 16; i++ )
   e276e:	2000      	movs	r0, #0
    {
        GET_UINT64_BE( W[i], data, i << 3 );
   e2770:	eb01 04c0 	add.w	r4, r1, r0, lsl #3
   e2774:	f04f 0a00 	mov.w	sl, #0
   e2778:	7866      	ldrb	r6, [r4, #1]
   e277a:	f811 2030 	ldrb.w	r2, [r1, r0, lsl #3]
   e277e:	f8cd a020 	str.w	sl, [sp, #32]
   e2782:	0436      	lsls	r6, r6, #16
   e2784:	9609      	str	r6, [sp, #36]	; 0x24
   e2786:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   e278a:	ea4f 6b02 	mov.w	fp, r2, lsl #24
   e278e:	2300      	movs	r3, #0
   e2790:	ea43 030b 	orr.w	r3, r3, fp
   e2794:	431e      	orrs	r6, r3
   e2796:	4633      	mov	r3, r6
   e2798:	79e2      	ldrb	r2, [r4, #7]
   e279a:	78a6      	ldrb	r6, [r4, #2]
   e279c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   e27a0:	ea42 020a 	orr.w	r2, r2, sl
   e27a4:	0236      	lsls	r6, r6, #8
   e27a6:	4315      	orrs	r5, r2
   e27a8:	960b      	str	r6, [sp, #44]	; 0x2c
   e27aa:	462a      	mov	r2, r5
   e27ac:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
   e27b0:	431e      	orrs	r6, r3
   e27b2:	4633      	mov	r3, r6
   e27b4:	78e6      	ldrb	r6, [r4, #3]
   e27b6:	960d      	str	r6, [sp, #52]	; 0x34
   e27b8:	4315      	orrs	r5, r2
   e27ba:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
   e27be:	462a      	mov	r2, r5
   e27c0:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
   e27c4:	431e      	orrs	r6, r3
   e27c6:	4633      	mov	r3, r6
   e27c8:	7926      	ldrb	r6, [r4, #4]
   e27ca:	f8cd a014 	str.w	sl, [sp, #20]
   e27ce:	4315      	orrs	r5, r2
   e27d0:	462a      	mov	r2, r5
   e27d2:	0635      	lsls	r5, r6, #24
   e27d4:	9504      	str	r5, [sp, #16]
   e27d6:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
   e27da:	431e      	orrs	r6, r3
   e27dc:	4633      	mov	r3, r6
   e27de:	7966      	ldrb	r6, [r4, #5]
   e27e0:	f8cd a01c 	str.w	sl, [sp, #28]
   e27e4:	4315      	orrs	r5, r2
   e27e6:	462a      	mov	r2, r5
   e27e8:	0435      	lsls	r5, r6, #16
   e27ea:	9506      	str	r5, [sp, #24]
   e27ec:	e9dd 5606 	ldrd	r5, r6, [sp, #24]
   e27f0:	431e      	orrs	r6, r3
   e27f2:	4633      	mov	r3, r6
   e27f4:	79a6      	ldrb	r6, [r4, #6]
   e27f6:	4315      	orrs	r5, r2
   e27f8:	ea4f 2806 	mov.w	r8, r6, lsl #8
        temp1 = (h) + S3(e) + F1((e),(f),(g)) + (K) + (x);      \
        temp2 = S2(a) + F0((a),(b),(c));                        \
        (d) += temp1; (h) = temp1 + temp2;                      \
    } while( 0 )

    for( i = 0; i < 16; i++ )
   e27fc:	3001      	adds	r0, #1
    {
        GET_UINT64_BE( W[i], data, i << 3 );
   e27fe:	ea45 0208 	orr.w	r2, r5, r8
   e2802:	ea43 030a 	orr.w	r3, r3, sl
        temp1 = (h) + S3(e) + F1((e),(f),(g)) + (K) + (x);      \
        temp2 = S2(a) + F0((a),(b),(c));                        \
        (d) += temp1; (h) = temp1 + temp2;                      \
    } while( 0 )

    for( i = 0; i < 16; i++ )
   e2806:	2810      	cmp	r0, #16
    {
        GET_UINT64_BE( W[i], data, i << 3 );
   e2808:	e9ec 2302 	strd	r2, r3, [ip, #8]!
        temp1 = (h) + S3(e) + F1((e),(f),(g)) + (K) + (x);      \
        temp2 = S2(a) + F0((a),(b),(c));                        \
        (d) += temp1; (h) = temp1 + temp2;                      \
    } while( 0 )

    for( i = 0; i < 16; i++ )
   e280c:	d1b0      	bne.n	e2770 <mbedtls_internal_sha512_process+0x10>
   e280e:	a97e      	add	r1, sp, #504	; 0x1f8
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
   e2810:	6f0a      	ldr	r2, [r1, #112]	; 0x70
   e2812:	6f4b      	ldr	r3, [r1, #116]	; 0x74
               S0(W[i - 15]) + W[i - 16];
   e2814:	f8d1 8008 	ldr.w	r8, [r1, #8]
   e2818:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   e281c:	0cd4      	lsrs	r4, r2, #19
   e281e:	ea44 3443 	orr.w	r4, r4, r3, lsl #13
   e2822:	940e      	str	r4, [sp, #56]	; 0x38
   e2824:	0cdc      	lsrs	r4, r3, #19
   e2826:	ea44 3442 	orr.w	r4, r4, r2, lsl #13
   e282a:	940f      	str	r4, [sp, #60]	; 0x3c
   e282c:	00dc      	lsls	r4, r3, #3
   e282e:	ea44 7452 	orr.w	r4, r4, r2, lsr #29
   e2832:	9411      	str	r4, [sp, #68]	; 0x44
   e2834:	00d4      	lsls	r4, r2, #3
   e2836:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
   e283a:	9410      	str	r4, [sp, #64]	; 0x40
   e283c:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
   e2840:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   e2844:	0992      	lsrs	r2, r2, #6
   e2846:	ea42 6283 	orr.w	r2, r2, r3, lsl #26
   e284a:	099b      	lsrs	r3, r3, #6
   e284c:	9200      	str	r2, [sp, #0]
   e284e:	9301      	str	r3, [sp, #4]
   e2850:	4066      	eors	r6, r4
   e2852:	e9dd 3400 	ldrd	r3, r4, [sp]
   e2856:	406f      	eors	r7, r5
   e2858:	4073      	eors	r3, r6
   e285a:	407c      	eors	r4, r7
   e285c:	461e      	mov	r6, r3
   e285e:	4627      	mov	r7, r4
   e2860:	e9d1 2300 	ldrd	r2, r3, [r1]
   e2864:	e9d1 4512 	ldrd	r4, r5, [r1, #72]	; 0x48
   e2868:	1912      	adds	r2, r2, r4
   e286a:	416b      	adcs	r3, r5
   e286c:	18b4      	adds	r4, r6, r2
   e286e:	eb47 0503 	adc.w	r5, r7, r3
   e2872:	ea4f 0358 	mov.w	r3, r8, lsr #1
   e2876:	ea43 73cc 	orr.w	r3, r3, ip, lsl #31
   e287a:	9312      	str	r3, [sp, #72]	; 0x48
   e287c:	ea4f 035c 	mov.w	r3, ip, lsr #1
   e2880:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
   e2884:	9313      	str	r3, [sp, #76]	; 0x4c
   e2886:	ea4f 2318 	mov.w	r3, r8, lsr #8
   e288a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   e288e:	9314      	str	r3, [sp, #80]	; 0x50
   e2890:	ea4f 231c 	mov.w	r3, ip, lsr #8
   e2894:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
   e2898:	9315      	str	r3, [sp, #84]	; 0x54
   e289a:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   e289e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   e28a2:	4072      	eors	r2, r6
   e28a4:	ea4f 16d8 	mov.w	r6, r8, lsr #7
   e28a8:	ea46 664c 	orr.w	r6, r6, ip, lsl #25
   e28ac:	9602      	str	r6, [sp, #8]
   e28ae:	ea4f 16dc 	mov.w	r6, ip, lsr #7
   e28b2:	9603      	str	r6, [sp, #12]
   e28b4:	407b      	eors	r3, r7
   e28b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   e28ba:	4056      	eors	r6, r2
   e28bc:	1932      	adds	r2, r6, r4
   e28be:	ea87 0703 	eor.w	r7, r7, r3
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
   e28c2:	f100 0001 	add.w	r0, r0, #1
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
   e28c6:	eb47 0305 	adc.w	r3, r7, r5
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
   e28ca:	2850      	cmp	r0, #80	; 0x50
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
   e28cc:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
   e28d0:	f101 0108 	add.w	r1, r1, #8
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
   e28d4:	d19c      	bne.n	e2810 <mbedtls_internal_sha512_process+0xb0>
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
   e28d6:	e9de 3404 	ldrd	r3, r4, [lr, #16]
   e28da:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
    B = ctx->state[1];
   e28de:	e9de 3406 	ldrd	r3, r4, [lr, #24]
   e28e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    C = ctx->state[2];
   e28e6:	e9de 3408 	ldrd	r3, r4, [lr, #32]
   e28ea:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
    D = ctx->state[3];
   e28ee:	e9de 340a 	ldrd	r3, r4, [lr, #40]	; 0x28
   e28f2:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
    E = ctx->state[4];
   e28f6:	e9de 340c 	ldrd	r3, r4, [lr, #48]	; 0x30
   e28fa:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
    F = ctx->state[5];
   e28fe:	e9de 340e 	ldrd	r3, r4, [lr, #56]	; 0x38
   e2902:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60
    G = ctx->state[6];
   e2906:	e9de 3410 	ldrd	r3, r4, [lr, #64]	; 0x40
   e290a:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
   e290e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
   e2912:	e9cd 0106 	strd	r0, r1, [sp, #24]
    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
   e2916:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   e291a:	e9cd 0108 	strd	r0, r1, [sp, #32]

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
   e291e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   e2922:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    }

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
   e2926:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   e292a:	e9cd 0100 	strd	r0, r1, [sp]
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
   e292e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];
   e2932:	e9de 3412 	ldrd	r3, r4, [lr, #72]	; 0x48
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
   e2936:	e9cd 0102 	strd	r0, r1, [sp, #8]
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
   e293a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];
   e293e:	e9cd 341c 	strd	r3, r4, [sp, #112]	; 0x70
   e2942:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
   e2946:	4b04      	ldr	r3, [pc, #16]	; (e2958 <mbedtls_internal_sha512_process+0x1f8>)
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
   e2948:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
   e294c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   e2950:	aa80      	add	r2, sp, #512	; 0x200
   e2952:	f503 7c20 	add.w	ip, r3, #640	; 0x280
   e2956:	e001      	b.n	e295c <mbedtls_internal_sha512_process+0x1fc>
   e2958:	000e9f68 	.word	0x000e9f68
    H = ctx->state[7];
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
   e295c:	990a      	ldr	r1, [sp, #40]	; 0x28
   e295e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   e2960:	0b89      	lsrs	r1, r1, #14
   e2962:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
   e2966:	911e      	str	r1, [sp, #120]	; 0x78
   e2968:	0b81      	lsrs	r1, r0, #14
   e296a:	980a      	ldr	r0, [sp, #40]	; 0x28
   e296c:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
   e2970:	911f      	str	r1, [sp, #124]	; 0x7c
   e2972:	0c81      	lsrs	r1, r0, #18
   e2974:	980b      	ldr	r0, [sp, #44]	; 0x2c
   e2976:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
   e297a:	9120      	str	r1, [sp, #128]	; 0x80
   e297c:	0c81      	lsrs	r1, r0, #18
   e297e:	980a      	ldr	r0, [sp, #40]	; 0x28
   e2980:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
   e2984:	9121      	str	r1, [sp, #132]	; 0x84
   e2986:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
   e298a:	e9dd 671e 	ldrd	r6, r7, [sp, #120]	; 0x78
   e298e:	404f      	eors	r7, r1
   e2990:	990b      	ldr	r1, [sp, #44]	; 0x2c
   e2992:	4046      	eors	r6, r0
   e2994:	980a      	ldr	r0, [sp, #40]	; 0x28
   e2996:	05c9      	lsls	r1, r1, #23
   e2998:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
   e299c:	9123      	str	r1, [sp, #140]	; 0x8c
   e299e:	05c1      	lsls	r1, r0, #23
   e29a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   e29a2:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
   e29a6:	9122      	str	r1, [sp, #136]	; 0x88
   e29a8:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
   e29ac:	4070      	eors	r0, r6
   e29ae:	4079      	eors	r1, r7
   e29b0:	e953 4502 	ldrd	r4, r5, [r3, #-8]
   e29b4:	4606      	mov	r6, r0
   e29b6:	460f      	mov	r7, r1
   e29b8:	e952 0102 	ldrd	r0, r1, [r2, #-8]
   e29bc:	1900      	adds	r0, r0, r4
   e29be:	4169      	adcs	r1, r5
   e29c0:	1836      	adds	r6, r6, r0
   e29c2:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   e29c6:	414f      	adcs	r7, r1
   e29c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e29cc:	4060      	eors	r0, r4
   e29ce:	4069      	eors	r1, r5
   e29d0:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
   e29d4:	4004      	ands	r4, r0
   e29d6:	400d      	ands	r5, r1
   e29d8:	4620      	mov	r0, r4
   e29da:	4629      	mov	r1, r5
   e29dc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
   e29e0:	4044      	eors	r4, r0
   e29e2:	404d      	eors	r5, r1
   e29e4:	e9dd 0100 	ldrd	r0, r1, [sp]
   e29e8:	1936      	adds	r6, r6, r4
   e29ea:	416f      	adcs	r7, r5
   e29ec:	eb18 0806 	adds.w	r8, r8, r6
   e29f0:	eb49 0907 	adc.w	r9, r9, r7
   e29f4:	eb10 0008 	adds.w	r0, r0, r8
   e29f8:	eb41 0109 	adc.w	r1, r1, r9
   e29fc:	e9cd 0100 	strd	r0, r1, [sp]
   e2a00:	9904      	ldr	r1, [sp, #16]
   e2a02:	9805      	ldr	r0, [sp, #20]
   e2a04:	0f09      	lsrs	r1, r1, #28
   e2a06:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e2a0a:	9124      	str	r1, [sp, #144]	; 0x90
   e2a0c:	0f01      	lsrs	r1, r0, #28
   e2a0e:	9804      	ldr	r0, [sp, #16]
   e2a10:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e2a14:	9125      	str	r1, [sp, #148]	; 0x94
   e2a16:	9905      	ldr	r1, [sp, #20]
   e2a18:	0789      	lsls	r1, r1, #30
   e2a1a:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e2a1e:	9127      	str	r1, [sp, #156]	; 0x9c
   e2a20:	0781      	lsls	r1, r0, #30
   e2a22:	9805      	ldr	r0, [sp, #20]
   e2a24:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e2a28:	9126      	str	r1, [sp, #152]	; 0x98
   e2a2a:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
   e2a2e:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
   e2a32:	404d      	eors	r5, r1
   e2a34:	9905      	ldr	r1, [sp, #20]
   e2a36:	4044      	eors	r4, r0
   e2a38:	9804      	ldr	r0, [sp, #16]
   e2a3a:	0649      	lsls	r1, r1, #25
   e2a3c:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e2a40:	9129      	str	r1, [sp, #164]	; 0xa4
   e2a42:	0641      	lsls	r1, r0, #25
   e2a44:	9805      	ldr	r0, [sp, #20]
   e2a46:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e2a4a:	9128      	str	r1, [sp, #160]	; 0xa0
   e2a4c:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
   e2a50:	4060      	eors	r0, r4
   e2a52:	4069      	eors	r1, r5
   e2a54:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   e2a58:	4604      	mov	r4, r0
   e2a5a:	460d      	mov	r5, r1
   e2a5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e2a60:	4330      	orrs	r0, r6
   e2a62:	4339      	orrs	r1, r7
   e2a64:	ea00 060a 	and.w	r6, r0, sl
   e2a68:	ea01 070b 	and.w	r7, r1, fp
   e2a6c:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
   e2a70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e2a74:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   e2a78:	4006      	ands	r6, r0
   e2a7a:	400f      	ands	r7, r1
   e2a7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e2a80:	4330      	orrs	r0, r6
   e2a82:	1900      	adds	r0, r0, r4
   e2a84:	ea41 0107 	orr.w	r1, r1, r7
   e2a88:	4169      	adcs	r1, r5
   e2a8a:	eb18 0800 	adds.w	r8, r8, r0
   e2a8e:	eb49 0901 	adc.w	r9, r9, r1
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
   e2a92:	e9d3 4500 	ldrd	r4, r5, [r3]
   e2a96:	e9d2 0100 	ldrd	r0, r1, [r2]
   e2a9a:	1900      	adds	r0, r0, r4
   e2a9c:	4169      	adcs	r1, r5
   e2a9e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
   e2aa2:	1824      	adds	r4, r4, r0
   e2aa4:	414d      	adcs	r5, r1
   e2aa6:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   e2aaa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e2aae:	4070      	eors	r0, r6
   e2ab0:	4079      	eors	r1, r7
   e2ab2:	e9dd 6700 	ldrd	r6, r7, [sp]
   e2ab6:	4006      	ands	r6, r0
   e2ab8:	400f      	ands	r7, r1
   e2aba:	4630      	mov	r0, r6
   e2abc:	4639      	mov	r1, r7
   e2abe:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   e2ac2:	4046      	eors	r6, r0
   e2ac4:	19a0      	adds	r0, r4, r6
   e2ac6:	ea87 0701 	eor.w	r7, r7, r1
   e2aca:	9c00      	ldr	r4, [sp, #0]
   e2acc:	eb45 0107 	adc.w	r1, r5, r7
   e2ad0:	9d01      	ldr	r5, [sp, #4]
   e2ad2:	0ba4      	lsrs	r4, r4, #14
   e2ad4:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e2ad8:	942a      	str	r4, [sp, #168]	; 0xa8
   e2ada:	0bac      	lsrs	r4, r5, #14
   e2adc:	9d00      	ldr	r5, [sp, #0]
   e2ade:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e2ae2:	942b      	str	r4, [sp, #172]	; 0xac
   e2ae4:	0cac      	lsrs	r4, r5, #18
   e2ae6:	9d01      	ldr	r5, [sp, #4]
   e2ae8:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e2aec:	942c      	str	r4, [sp, #176]	; 0xb0
   e2aee:	0cac      	lsrs	r4, r5, #18
   e2af0:	9d00      	ldr	r5, [sp, #0]
   e2af2:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e2af6:	942d      	str	r4, [sp, #180]	; 0xb4
   e2af8:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
   e2afc:	e9dd 672c 	ldrd	r6, r7, [sp, #176]	; 0xb0
   e2b00:	4074      	eors	r4, r6
   e2b02:	9e01      	ldr	r6, [sp, #4]
   e2b04:	407d      	eors	r5, r7
   e2b06:	9f00      	ldr	r7, [sp, #0]
   e2b08:	05f6      	lsls	r6, r6, #23
   e2b0a:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e2b0e:	962f      	str	r6, [sp, #188]	; 0xbc
   e2b10:	05fe      	lsls	r6, r7, #23
   e2b12:	9f01      	ldr	r7, [sp, #4]
   e2b14:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e2b18:	962e      	str	r6, [sp, #184]	; 0xb8
   e2b1a:	e9dd 672e 	ldrd	r6, r7, [sp, #184]	; 0xb8
   e2b1e:	4066      	eors	r6, r4
   e2b20:	1986      	adds	r6, r0, r6
   e2b22:	ea87 0705 	eor.w	r7, r7, r5
   e2b26:	eb41 0707 	adc.w	r7, r1, r7
   e2b2a:	eb1a 0006 	adds.w	r0, sl, r6
   e2b2e:	eb4b 0107 	adc.w	r1, fp, r7
   e2b32:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   e2b36:	ea4f 7118 	mov.w	r1, r8, lsr #28
   e2b3a:	ea41 1109 	orr.w	r1, r1, r9, lsl #4
   e2b3e:	9130      	str	r1, [sp, #192]	; 0xc0
   e2b40:	ea4f 7119 	mov.w	r1, r9, lsr #28
   e2b44:	ea41 1108 	orr.w	r1, r1, r8, lsl #4
   e2b48:	9131      	str	r1, [sp, #196]	; 0xc4
   e2b4a:	ea4f 7189 	mov.w	r1, r9, lsl #30
   e2b4e:	ea41 0198 	orr.w	r1, r1, r8, lsr #2
   e2b52:	9133      	str	r1, [sp, #204]	; 0xcc
   e2b54:	ea4f 7188 	mov.w	r1, r8, lsl #30
   e2b58:	ea41 0199 	orr.w	r1, r1, r9, lsr #2
   e2b5c:	9132      	str	r1, [sp, #200]	; 0xc8
   e2b5e:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
   e2b62:	e9dd 4530 	ldrd	r4, r5, [sp, #192]	; 0xc0
   e2b66:	404d      	eors	r5, r1
   e2b68:	ea4f 6149 	mov.w	r1, r9, lsl #25
   e2b6c:	ea41 11d8 	orr.w	r1, r1, r8, lsr #7
   e2b70:	9135      	str	r1, [sp, #212]	; 0xd4
   e2b72:	ea4f 6148 	mov.w	r1, r8, lsl #25
   e2b76:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
   e2b7a:	9134      	str	r1, [sp, #208]	; 0xd0
   e2b7c:	4044      	eors	r4, r0
   e2b7e:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
   e2b82:	4060      	eors	r0, r4
   e2b84:	4069      	eors	r1, r5
   e2b86:	4604      	mov	r4, r0
   e2b88:	460d      	mov	r5, r1
   e2b8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e2b8e:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   e2b92:	ea40 0008 	orr.w	r0, r0, r8
   e2b96:	ea41 0109 	orr.w	r1, r1, r9
   e2b9a:	ea0a 0a00 	and.w	sl, sl, r0
   e2b9e:	ea0b 0b01 	and.w	fp, fp, r1
   e2ba2:	4650      	mov	r0, sl
   e2ba4:	4659      	mov	r1, fp
   e2ba6:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   e2baa:	ea0a 0a08 	and.w	sl, sl, r8
   e2bae:	ea0b 0b09 	and.w	fp, fp, r9
   e2bb2:	ea4a 0a00 	orr.w	sl, sl, r0
   e2bb6:	eb1a 0004 	adds.w	r0, sl, r4
   e2bba:	ea4b 0b01 	orr.w	fp, fp, r1
   e2bbe:	eb4b 0105 	adc.w	r1, fp, r5
   e2bc2:	1984      	adds	r4, r0, r6
   e2bc4:	eb41 0507 	adc.w	r5, r1, r7
   e2bc8:	e9cd 4506 	strd	r4, r5, [sp, #24]
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
   e2bcc:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
   e2bd0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
   e2bd4:	1900      	adds	r0, r0, r4
   e2bd6:	4169      	adcs	r1, r5
   e2bd8:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   e2bdc:	1824      	adds	r4, r4, r0
   e2bde:	414d      	adcs	r5, r1
   e2be0:	e9dd 6700 	ldrd	r6, r7, [sp]
   e2be4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e2be8:	4070      	eors	r0, r6
   e2bea:	4079      	eors	r1, r7
   e2bec:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
   e2bf0:	4006      	ands	r6, r0
   e2bf2:	400f      	ands	r7, r1
   e2bf4:	4630      	mov	r0, r6
   e2bf6:	4639      	mov	r1, r7
   e2bf8:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
   e2bfc:	4046      	eors	r6, r0
   e2bfe:	1930      	adds	r0, r6, r4
   e2c00:	ea87 0701 	eor.w	r7, r7, r1
   e2c04:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   e2c06:	eb47 0105 	adc.w	r1, r7, r5
   e2c0a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   e2c0c:	0ba4      	lsrs	r4, r4, #14
   e2c0e:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e2c12:	9436      	str	r4, [sp, #216]	; 0xd8
   e2c14:	0bac      	lsrs	r4, r5, #14
   e2c16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   e2c18:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e2c1c:	9437      	str	r4, [sp, #220]	; 0xdc
   e2c1e:	0cac      	lsrs	r4, r5, #18
   e2c20:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   e2c22:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e2c26:	9438      	str	r4, [sp, #224]	; 0xe0
   e2c28:	0cac      	lsrs	r4, r5, #18
   e2c2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   e2c2c:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e2c30:	9439      	str	r4, [sp, #228]	; 0xe4
   e2c32:	e9dd 6738 	ldrd	r6, r7, [sp, #224]	; 0xe0
   e2c36:	e9dd 4536 	ldrd	r4, r5, [sp, #216]	; 0xd8
   e2c3a:	4074      	eors	r4, r6
   e2c3c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   e2c3e:	407d      	eors	r5, r7
   e2c40:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   e2c42:	05f6      	lsls	r6, r6, #23
   e2c44:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e2c48:	963b      	str	r6, [sp, #236]	; 0xec
   e2c4a:	05fe      	lsls	r6, r7, #23
   e2c4c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   e2c4e:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e2c52:	963a      	str	r6, [sp, #232]	; 0xe8
   e2c54:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
   e2c58:	4066      	eors	r6, r4
   e2c5a:	1986      	adds	r6, r0, r6
   e2c5c:	ea87 0705 	eor.w	r7, r7, r5
   e2c60:	eb41 0707 	adc.w	r7, r1, r7
   e2c64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e2c68:	1980      	adds	r0, r0, r6
   e2c6a:	4179      	adcs	r1, r7
   e2c6c:	e9cd 0108 	strd	r0, r1, [sp, #32]
   e2c70:	9906      	ldr	r1, [sp, #24]
   e2c72:	9807      	ldr	r0, [sp, #28]
   e2c74:	0f09      	lsrs	r1, r1, #28
   e2c76:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e2c7a:	913c      	str	r1, [sp, #240]	; 0xf0
   e2c7c:	0f01      	lsrs	r1, r0, #28
   e2c7e:	9806      	ldr	r0, [sp, #24]
   e2c80:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e2c84:	913d      	str	r1, [sp, #244]	; 0xf4
   e2c86:	9907      	ldr	r1, [sp, #28]
   e2c88:	0789      	lsls	r1, r1, #30
   e2c8a:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e2c8e:	913f      	str	r1, [sp, #252]	; 0xfc
   e2c90:	0781      	lsls	r1, r0, #30
   e2c92:	9807      	ldr	r0, [sp, #28]
   e2c94:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e2c98:	913e      	str	r1, [sp, #248]	; 0xf8
   e2c9a:	e9dd 013e 	ldrd	r0, r1, [sp, #248]	; 0xf8
   e2c9e:	e9dd 453c 	ldrd	r4, r5, [sp, #240]	; 0xf0
   e2ca2:	404d      	eors	r5, r1
   e2ca4:	9907      	ldr	r1, [sp, #28]
   e2ca6:	4044      	eors	r4, r0
   e2ca8:	9806      	ldr	r0, [sp, #24]
   e2caa:	0649      	lsls	r1, r1, #25
   e2cac:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e2cb0:	9141      	str	r1, [sp, #260]	; 0x104
   e2cb2:	0641      	lsls	r1, r0, #25
   e2cb4:	9807      	ldr	r0, [sp, #28]
   e2cb6:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e2cba:	9140      	str	r1, [sp, #256]	; 0x100
   e2cbc:	a940      	add	r1, sp, #256	; 0x100
   e2cbe:	e9d1 0100 	ldrd	r0, r1, [r1]
   e2cc2:	4060      	eors	r0, r4
   e2cc4:	4069      	eors	r1, r5
   e2cc6:	4604      	mov	r4, r0
   e2cc8:	460d      	mov	r5, r1
   e2cca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e2cce:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   e2cd2:	ea40 0008 	orr.w	r0, r0, r8
   e2cd6:	ea41 0109 	orr.w	r1, r1, r9
   e2cda:	ea0a 0a00 	and.w	sl, sl, r0
   e2cde:	ea0b 0b01 	and.w	fp, fp, r1
   e2ce2:	4650      	mov	r0, sl
   e2ce4:	4659      	mov	r1, fp
   e2ce6:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
   e2cea:	ea0a 0a08 	and.w	sl, sl, r8
   e2cee:	ea0b 0b09 	and.w	fp, fp, r9
   e2cf2:	ea4a 0a00 	orr.w	sl, sl, r0
   e2cf6:	eb1a 0004 	adds.w	r0, sl, r4
   e2cfa:	ea4b 0b01 	orr.w	fp, fp, r1
   e2cfe:	eb4b 0105 	adc.w	r1, fp, r5
   e2d02:	1984      	adds	r4, r0, r6
   e2d04:	eb41 0507 	adc.w	r5, r1, r7
   e2d08:	e9cd 4502 	strd	r4, r5, [sp, #8]
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
   e2d0c:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
   e2d10:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
   e2d14:	1900      	adds	r0, r0, r4
   e2d16:	4169      	adcs	r1, r5
   e2d18:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
   e2d1c:	1824      	adds	r4, r4, r0
   e2d1e:	414d      	adcs	r5, r1
   e2d20:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
   e2d24:	e9dd 0100 	ldrd	r0, r1, [sp]
   e2d28:	4046      	eors	r6, r0
   e2d2a:	404f      	eors	r7, r1
   e2d2c:	4630      	mov	r0, r6
   e2d2e:	4639      	mov	r1, r7
   e2d30:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   e2d34:	4006      	ands	r6, r0
   e2d36:	400f      	ands	r7, r1
   e2d38:	4630      	mov	r0, r6
   e2d3a:	4639      	mov	r1, r7
   e2d3c:	e9dd 6700 	ldrd	r6, r7, [sp]
   e2d40:	4046      	eors	r6, r0
   e2d42:	1930      	adds	r0, r6, r4
   e2d44:	ea87 0701 	eor.w	r7, r7, r1
   e2d48:	9c08      	ldr	r4, [sp, #32]
   e2d4a:	eb47 0105 	adc.w	r1, r7, r5
   e2d4e:	9d09      	ldr	r5, [sp, #36]	; 0x24
   e2d50:	0ba4      	lsrs	r4, r4, #14
   e2d52:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e2d56:	9442      	str	r4, [sp, #264]	; 0x108
   e2d58:	0bac      	lsrs	r4, r5, #14
   e2d5a:	9d08      	ldr	r5, [sp, #32]
   e2d5c:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e2d60:	9443      	str	r4, [sp, #268]	; 0x10c
   e2d62:	0cac      	lsrs	r4, r5, #18
   e2d64:	9d09      	ldr	r5, [sp, #36]	; 0x24
   e2d66:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e2d6a:	9444      	str	r4, [sp, #272]	; 0x110
   e2d6c:	0cac      	lsrs	r4, r5, #18
   e2d6e:	9d08      	ldr	r5, [sp, #32]
   e2d70:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e2d74:	9445      	str	r4, [sp, #276]	; 0x114
   e2d76:	ae44      	add	r6, sp, #272	; 0x110
   e2d78:	ac42      	add	r4, sp, #264	; 0x108
   e2d7a:	e9d6 6700 	ldrd	r6, r7, [r6]
   e2d7e:	e9d4 4500 	ldrd	r4, r5, [r4]
   e2d82:	4074      	eors	r4, r6
   e2d84:	9e09      	ldr	r6, [sp, #36]	; 0x24
   e2d86:	407d      	eors	r5, r7
   e2d88:	9f08      	ldr	r7, [sp, #32]
   e2d8a:	05f6      	lsls	r6, r6, #23
   e2d8c:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e2d90:	9647      	str	r6, [sp, #284]	; 0x11c
   e2d92:	05fe      	lsls	r6, r7, #23
   e2d94:	9f09      	ldr	r7, [sp, #36]	; 0x24
   e2d96:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e2d9a:	9646      	str	r6, [sp, #280]	; 0x118
   e2d9c:	ae46      	add	r6, sp, #280	; 0x118
   e2d9e:	e9d6 6700 	ldrd	r6, r7, [r6]
   e2da2:	4066      	eors	r6, r4
   e2da4:	1986      	adds	r6, r0, r6
   e2da6:	ea87 0705 	eor.w	r7, r7, r5
   e2daa:	eb41 0707 	adc.w	r7, r1, r7
   e2dae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e2db2:	1980      	adds	r0, r0, r6
   e2db4:	4179      	adcs	r1, r7
   e2db6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   e2dba:	9902      	ldr	r1, [sp, #8]
   e2dbc:	9803      	ldr	r0, [sp, #12]
   e2dbe:	0f09      	lsrs	r1, r1, #28
   e2dc0:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e2dc4:	9148      	str	r1, [sp, #288]	; 0x120
   e2dc6:	0f01      	lsrs	r1, r0, #28
   e2dc8:	9802      	ldr	r0, [sp, #8]
   e2dca:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e2dce:	9149      	str	r1, [sp, #292]	; 0x124
   e2dd0:	9903      	ldr	r1, [sp, #12]
   e2dd2:	0789      	lsls	r1, r1, #30
   e2dd4:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e2dd8:	914b      	str	r1, [sp, #300]	; 0x12c
   e2dda:	0781      	lsls	r1, r0, #30
   e2ddc:	9803      	ldr	r0, [sp, #12]
   e2dde:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e2de2:	914a      	str	r1, [sp, #296]	; 0x128
   e2de4:	a948      	add	r1, sp, #288	; 0x120
   e2de6:	e9d1 4500 	ldrd	r4, r5, [r1]
   e2dea:	a94a      	add	r1, sp, #296	; 0x128
   e2dec:	e9d1 0100 	ldrd	r0, r1, [r1]
   e2df0:	404d      	eors	r5, r1
   e2df2:	9903      	ldr	r1, [sp, #12]
   e2df4:	4044      	eors	r4, r0
   e2df6:	9802      	ldr	r0, [sp, #8]
   e2df8:	0649      	lsls	r1, r1, #25
   e2dfa:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e2dfe:	914d      	str	r1, [sp, #308]	; 0x134
   e2e00:	0641      	lsls	r1, r0, #25
   e2e02:	9803      	ldr	r0, [sp, #12]
   e2e04:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e2e08:	914c      	str	r1, [sp, #304]	; 0x130
   e2e0a:	a94c      	add	r1, sp, #304	; 0x130
   e2e0c:	e9d1 0100 	ldrd	r0, r1, [r1]
   e2e10:	4060      	eors	r0, r4
   e2e12:	4069      	eors	r1, r5
   e2e14:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   e2e18:	4604      	mov	r4, r0
   e2e1a:	460d      	mov	r5, r1
   e2e1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e2e20:	ea40 000a 	orr.w	r0, r0, sl
   e2e24:	ea41 010b 	orr.w	r1, r1, fp
   e2e28:	ea00 0a08 	and.w	sl, r0, r8
   e2e2c:	ea01 0b09 	and.w	fp, r1, r9
   e2e30:	e9cd ab04 	strd	sl, fp, [sp, #16]
   e2e34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e2e38:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
   e2e3c:	ea0a 0a00 	and.w	sl, sl, r0
   e2e40:	ea0b 0b01 	and.w	fp, fp, r1
   e2e44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e2e48:	ea40 000a 	orr.w	r0, r0, sl
   e2e4c:	1900      	adds	r0, r0, r4
   e2e4e:	ea41 010b 	orr.w	r1, r1, fp
   e2e52:	4169      	adcs	r1, r5
   e2e54:	1984      	adds	r4, r0, r6
   e2e56:	eb41 0507 	adc.w	r5, r1, r7
   e2e5a:	e9cd 4504 	strd	r4, r5, [sp, #16]
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
   e2e5e:	e9d2 0106 	ldrd	r0, r1, [r2, #24]
   e2e62:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
   e2e66:	1900      	adds	r0, r0, r4
   e2e68:	4169      	adcs	r1, r5
   e2e6a:	e9dd 4500 	ldrd	r4, r5, [sp]
   e2e6e:	1824      	adds	r4, r4, r0
   e2e70:	414d      	adcs	r5, r1
   e2e72:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
   e2e76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e2e7a:	4046      	eors	r6, r0
   e2e7c:	404f      	eors	r7, r1
   e2e7e:	4630      	mov	r0, r6
   e2e80:	4639      	mov	r1, r7
   e2e82:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
   e2e86:	4006      	ands	r6, r0
   e2e88:	400f      	ands	r7, r1
   e2e8a:	4630      	mov	r0, r6
   e2e8c:	4639      	mov	r1, r7
   e2e8e:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
   e2e92:	4046      	eors	r6, r0
   e2e94:	19a0      	adds	r0, r4, r6
   e2e96:	ea87 0701 	eor.w	r7, r7, r1
   e2e9a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   e2e9c:	eb45 0107 	adc.w	r1, r5, r7
   e2ea0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   e2ea2:	0ba4      	lsrs	r4, r4, #14
   e2ea4:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e2ea8:	944e      	str	r4, [sp, #312]	; 0x138
   e2eaa:	0bac      	lsrs	r4, r5, #14
   e2eac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   e2eae:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e2eb2:	944f      	str	r4, [sp, #316]	; 0x13c
   e2eb4:	0cac      	lsrs	r4, r5, #18
   e2eb6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   e2eb8:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e2ebc:	9450      	str	r4, [sp, #320]	; 0x140
   e2ebe:	0cac      	lsrs	r4, r5, #18
   e2ec0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   e2ec2:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e2ec6:	9451      	str	r4, [sp, #324]	; 0x144
   e2ec8:	ae50      	add	r6, sp, #320	; 0x140
   e2eca:	ac4e      	add	r4, sp, #312	; 0x138
   e2ecc:	e9d6 6700 	ldrd	r6, r7, [r6]
   e2ed0:	e9d4 4500 	ldrd	r4, r5, [r4]
   e2ed4:	4074      	eors	r4, r6
   e2ed6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   e2ed8:	407d      	eors	r5, r7
   e2eda:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   e2edc:	05f6      	lsls	r6, r6, #23
   e2ede:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e2ee2:	9653      	str	r6, [sp, #332]	; 0x14c
   e2ee4:	05fe      	lsls	r6, r7, #23
   e2ee6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   e2ee8:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e2eec:	9652      	str	r6, [sp, #328]	; 0x148
   e2eee:	ae52      	add	r6, sp, #328	; 0x148
   e2ef0:	e9d6 6700 	ldrd	r6, r7, [r6]
   e2ef4:	4066      	eors	r6, r4
   e2ef6:	1986      	adds	r6, r0, r6
   e2ef8:	ea87 0705 	eor.w	r7, r7, r5
   e2efc:	eb41 0707 	adc.w	r7, r1, r7
   e2f00:	9904      	ldr	r1, [sp, #16]
   e2f02:	9805      	ldr	r0, [sp, #20]
   e2f04:	0f09      	lsrs	r1, r1, #28
   e2f06:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e2f0a:	9154      	str	r1, [sp, #336]	; 0x150
   e2f0c:	0f01      	lsrs	r1, r0, #28
   e2f0e:	9804      	ldr	r0, [sp, #16]
   e2f10:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e2f14:	9155      	str	r1, [sp, #340]	; 0x154
   e2f16:	9905      	ldr	r1, [sp, #20]
   e2f18:	0789      	lsls	r1, r1, #30
   e2f1a:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e2f1e:	9157      	str	r1, [sp, #348]	; 0x15c
   e2f20:	0781      	lsls	r1, r0, #30
   e2f22:	9805      	ldr	r0, [sp, #20]
   e2f24:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e2f28:	9156      	str	r1, [sp, #344]	; 0x158
   e2f2a:	a954      	add	r1, sp, #336	; 0x150
   e2f2c:	e9d1 4500 	ldrd	r4, r5, [r1]
   e2f30:	a956      	add	r1, sp, #344	; 0x158
   e2f32:	e9d1 0100 	ldrd	r0, r1, [r1]
   e2f36:	404d      	eors	r5, r1
   e2f38:	9905      	ldr	r1, [sp, #20]
   e2f3a:	4044      	eors	r4, r0
   e2f3c:	9804      	ldr	r0, [sp, #16]
   e2f3e:	0649      	lsls	r1, r1, #25
   e2f40:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e2f44:	9159      	str	r1, [sp, #356]	; 0x164
   e2f46:	0641      	lsls	r1, r0, #25
   e2f48:	9805      	ldr	r0, [sp, #20]
   e2f4a:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e2f4e:	9158      	str	r1, [sp, #352]	; 0x160
   e2f50:	a958      	add	r1, sp, #352	; 0x160
   e2f52:	e9d1 0100 	ldrd	r0, r1, [r1]
   e2f56:	4060      	eors	r0, r4
   e2f58:	4069      	eors	r1, r5
   e2f5a:	4604      	mov	r4, r0
   e2f5c:	460d      	mov	r5, r1
   e2f5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e2f62:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   e2f66:	ea40 000a 	orr.w	r0, r0, sl
   e2f6a:	ea41 010b 	orr.w	r1, r1, fp
   e2f6e:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
   e2f72:	ea0a 0a00 	and.w	sl, sl, r0
   e2f76:	ea0b 0b01 	and.w	fp, fp, r1
   e2f7a:	e9cd ab00 	strd	sl, fp, [sp]
   e2f7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e2f82:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   e2f86:	ea0a 0a00 	and.w	sl, sl, r0
   e2f8a:	ea0b 0b01 	and.w	fp, fp, r1
   e2f8e:	e9dd 0100 	ldrd	r0, r1, [sp]
   e2f92:	eb18 0806 	adds.w	r8, r8, r6
   e2f96:	ea40 000a 	orr.w	r0, r0, sl
   e2f9a:	eb49 0907 	adc.w	r9, r9, r7
   e2f9e:	ea41 010b 	orr.w	r1, r1, fp
   e2fa2:	1824      	adds	r4, r4, r0
   e2fa4:	414d      	adcs	r5, r1
   e2fa6:	19a0      	adds	r0, r4, r6
   e2fa8:	eb45 0107 	adc.w	r1, r5, r7
   e2fac:	e9cd 0100 	strd	r0, r1, [sp]
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
   e2fb0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
   e2fb4:	e9d2 0108 	ldrd	r0, r1, [r2, #32]
   e2fb8:	e9dd ab0c 	ldrd	sl, fp, [sp, #48]	; 0x30
   e2fbc:	1900      	adds	r0, r0, r4
   e2fbe:	4169      	adcs	r1, r5
   e2fc0:	eb1a 0a00 	adds.w	sl, sl, r0
   e2fc4:	eb4b 0b01 	adc.w	fp, fp, r1
   e2fc8:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
   e2fcc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e2fd0:	4060      	eors	r0, r4
   e2fd2:	4069      	eors	r1, r5
   e2fd4:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   e2fd8:	ea00 0008 	and.w	r0, r0, r8
   e2fdc:	4044      	eors	r4, r0
   e2fde:	eb14 000a 	adds.w	r0, r4, sl
   e2fe2:	ea4f 3498 	mov.w	r4, r8, lsr #14
   e2fe6:	ea44 4489 	orr.w	r4, r4, r9, lsl #18
   e2fea:	945a      	str	r4, [sp, #360]	; 0x168
   e2fec:	ea4f 3499 	mov.w	r4, r9, lsr #14
   e2ff0:	ea44 4488 	orr.w	r4, r4, r8, lsl #18
   e2ff4:	945b      	str	r4, [sp, #364]	; 0x16c
   e2ff6:	ea4f 4498 	mov.w	r4, r8, lsr #18
   e2ffa:	ea44 3489 	orr.w	r4, r4, r9, lsl #14
   e2ffe:	945c      	str	r4, [sp, #368]	; 0x170
   e3000:	ea4f 4499 	mov.w	r4, r9, lsr #18
   e3004:	ea01 0109 	and.w	r1, r1, r9
   e3008:	ea44 3488 	orr.w	r4, r4, r8, lsl #14
   e300c:	945d      	str	r4, [sp, #372]	; 0x174
   e300e:	ea85 0501 	eor.w	r5, r5, r1
   e3012:	ac5a      	add	r4, sp, #360	; 0x168
   e3014:	eb45 010b 	adc.w	r1, r5, fp
   e3018:	e9d4 ab00 	ldrd	sl, fp, [r4]
   e301c:	ac5c      	add	r4, sp, #368	; 0x170
   e301e:	e9d4 4500 	ldrd	r4, r5, [r4]
   e3022:	ea8a 0a04 	eor.w	sl, sl, r4
   e3026:	ea4f 54c9 	mov.w	r4, r9, lsl #23
   e302a:	ea44 2458 	orr.w	r4, r4, r8, lsr #9
   e302e:	945f      	str	r4, [sp, #380]	; 0x17c
   e3030:	ea4f 54c8 	mov.w	r4, r8, lsl #23
   e3034:	ea44 2459 	orr.w	r4, r4, r9, lsr #9
   e3038:	945e      	str	r4, [sp, #376]	; 0x178
   e303a:	ac5e      	add	r4, sp, #376	; 0x178
   e303c:	ea8b 0b05 	eor.w	fp, fp, r5
   e3040:	e9d4 4500 	ldrd	r4, r5, [r4]
   e3044:	ea84 040a 	eor.w	r4, r4, sl
   e3048:	eb14 0a00 	adds.w	sl, r4, r0
   e304c:	ea85 050b 	eor.w	r5, r5, fp
   e3050:	eb45 0b01 	adc.w	fp, r5, r1
   e3054:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e3058:	eb10 000a 	adds.w	r0, r0, sl
   e305c:	eb41 010b 	adc.w	r1, r1, fp
   e3060:	e9cd 0106 	strd	r0, r1, [sp, #24]
   e3064:	9900      	ldr	r1, [sp, #0]
   e3066:	9801      	ldr	r0, [sp, #4]
   e3068:	0f09      	lsrs	r1, r1, #28
   e306a:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e306e:	9160      	str	r1, [sp, #384]	; 0x180
   e3070:	0f01      	lsrs	r1, r0, #28
   e3072:	9800      	ldr	r0, [sp, #0]
   e3074:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e3078:	9161      	str	r1, [sp, #388]	; 0x184
   e307a:	9901      	ldr	r1, [sp, #4]
   e307c:	0789      	lsls	r1, r1, #30
   e307e:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e3082:	9163      	str	r1, [sp, #396]	; 0x18c
   e3084:	0781      	lsls	r1, r0, #30
   e3086:	9801      	ldr	r0, [sp, #4]
   e3088:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e308c:	9162      	str	r1, [sp, #392]	; 0x188
   e308e:	a960      	add	r1, sp, #384	; 0x180
   e3090:	e9d1 4500 	ldrd	r4, r5, [r1]
   e3094:	a962      	add	r1, sp, #392	; 0x188
   e3096:	e9d1 0100 	ldrd	r0, r1, [r1]
   e309a:	404d      	eors	r5, r1
   e309c:	9901      	ldr	r1, [sp, #4]
   e309e:	4044      	eors	r4, r0
   e30a0:	9800      	ldr	r0, [sp, #0]
   e30a2:	0649      	lsls	r1, r1, #25
   e30a4:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e30a8:	9165      	str	r1, [sp, #404]	; 0x194
   e30aa:	0641      	lsls	r1, r0, #25
   e30ac:	9801      	ldr	r0, [sp, #4]
   e30ae:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e30b2:	9164      	str	r1, [sp, #400]	; 0x190
   e30b4:	a964      	add	r1, sp, #400	; 0x190
   e30b6:	e9d1 0100 	ldrd	r0, r1, [r1]
   e30ba:	4060      	eors	r0, r4
   e30bc:	4069      	eors	r1, r5
   e30be:	e9dd 6700 	ldrd	r6, r7, [sp]
   e30c2:	4604      	mov	r4, r0
   e30c4:	460d      	mov	r5, r1
   e30c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e30ca:	4330      	orrs	r0, r6
   e30cc:	4339      	orrs	r1, r7
   e30ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   e30d2:	4006      	ands	r6, r0
   e30d4:	400f      	ands	r7, r1
   e30d6:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
   e30da:	e9dd 0100 	ldrd	r0, r1, [sp]
   e30de:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   e30e2:	4006      	ands	r6, r0
   e30e4:	400f      	ands	r7, r1
   e30e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e30ea:	4330      	orrs	r0, r6
   e30ec:	1900      	adds	r0, r0, r4
   e30ee:	ea41 0107 	orr.w	r1, r1, r7
   e30f2:	4169      	adcs	r1, r5
   e30f4:	eb1a 0a00 	adds.w	sl, sl, r0
   e30f8:	eb4b 0b01 	adc.w	fp, fp, r1
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
   e30fc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
   e3100:	e9d2 010a 	ldrd	r0, r1, [r2, #40]	; 0x28
   e3104:	1900      	adds	r0, r0, r4
   e3106:	4169      	adcs	r1, r5
   e3108:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
   e310c:	1824      	adds	r4, r4, r0
   e310e:	414d      	adcs	r5, r1
   e3110:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e3114:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   e3118:	ea80 0008 	eor.w	r0, r0, r8
   e311c:	ea81 0109 	eor.w	r1, r1, r9
   e3120:	4006      	ands	r6, r0
   e3122:	400f      	ands	r7, r1
   e3124:	4630      	mov	r0, r6
   e3126:	4639      	mov	r1, r7
   e3128:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
   e312c:	4046      	eors	r6, r0
   e312e:	19a0      	adds	r0, r4, r6
   e3130:	ea87 0701 	eor.w	r7, r7, r1
   e3134:	9c06      	ldr	r4, [sp, #24]
   e3136:	eb45 0107 	adc.w	r1, r5, r7
   e313a:	9d07      	ldr	r5, [sp, #28]
   e313c:	0ba4      	lsrs	r4, r4, #14
   e313e:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e3142:	9466      	str	r4, [sp, #408]	; 0x198
   e3144:	0bac      	lsrs	r4, r5, #14
   e3146:	9d06      	ldr	r5, [sp, #24]
   e3148:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e314c:	9467      	str	r4, [sp, #412]	; 0x19c
   e314e:	0cac      	lsrs	r4, r5, #18
   e3150:	9d07      	ldr	r5, [sp, #28]
   e3152:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e3156:	9468      	str	r4, [sp, #416]	; 0x1a0
   e3158:	0cac      	lsrs	r4, r5, #18
   e315a:	9d06      	ldr	r5, [sp, #24]
   e315c:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e3160:	9469      	str	r4, [sp, #420]	; 0x1a4
   e3162:	ae68      	add	r6, sp, #416	; 0x1a0
   e3164:	ac66      	add	r4, sp, #408	; 0x198
   e3166:	e9d6 6700 	ldrd	r6, r7, [r6]
   e316a:	e9d4 4500 	ldrd	r4, r5, [r4]
   e316e:	4074      	eors	r4, r6
   e3170:	9e07      	ldr	r6, [sp, #28]
   e3172:	407d      	eors	r5, r7
   e3174:	9f06      	ldr	r7, [sp, #24]
   e3176:	05f6      	lsls	r6, r6, #23
   e3178:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e317c:	966b      	str	r6, [sp, #428]	; 0x1ac
   e317e:	05fe      	lsls	r6, r7, #23
   e3180:	9f07      	ldr	r7, [sp, #28]
   e3182:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e3186:	966a      	str	r6, [sp, #424]	; 0x1a8
   e3188:	ae6a      	add	r6, sp, #424	; 0x1a8
   e318a:	e9d6 6700 	ldrd	r6, r7, [r6]
   e318e:	4066      	eors	r6, r4
   e3190:	1986      	adds	r6, r0, r6
   e3192:	ea87 0705 	eor.w	r7, r7, r5
   e3196:	eb41 0707 	adc.w	r7, r1, r7
   e319a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e319e:	1980      	adds	r0, r0, r6
   e31a0:	4179      	adcs	r1, r7
   e31a2:	e9cd 0108 	strd	r0, r1, [sp, #32]
   e31a6:	ea4f 711a 	mov.w	r1, sl, lsr #28
   e31aa:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
   e31ae:	916c      	str	r1, [sp, #432]	; 0x1b0
   e31b0:	ea4f 711b 	mov.w	r1, fp, lsr #28
   e31b4:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
   e31b8:	916d      	str	r1, [sp, #436]	; 0x1b4
   e31ba:	ea4f 718b 	mov.w	r1, fp, lsl #30
   e31be:	ea41 019a 	orr.w	r1, r1, sl, lsr #2
   e31c2:	916f      	str	r1, [sp, #444]	; 0x1bc
   e31c4:	ea4f 718a 	mov.w	r1, sl, lsl #30
   e31c8:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
   e31cc:	916e      	str	r1, [sp, #440]	; 0x1b8
   e31ce:	a96c      	add	r1, sp, #432	; 0x1b0
   e31d0:	e9d1 4500 	ldrd	r4, r5, [r1]
   e31d4:	a96e      	add	r1, sp, #440	; 0x1b8
   e31d6:	e9d1 0100 	ldrd	r0, r1, [r1]
   e31da:	404d      	eors	r5, r1
   e31dc:	ea4f 614b 	mov.w	r1, fp, lsl #25
   e31e0:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
   e31e4:	9171      	str	r1, [sp, #452]	; 0x1c4
   e31e6:	ea4f 614a 	mov.w	r1, sl, lsl #25
   e31ea:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
   e31ee:	9170      	str	r1, [sp, #448]	; 0x1c0
   e31f0:	a970      	add	r1, sp, #448	; 0x1c0
   e31f2:	4044      	eors	r4, r0
   e31f4:	e9d1 0100 	ldrd	r0, r1, [r1]
   e31f8:	4060      	eors	r0, r4
   e31fa:	4069      	eors	r1, r5
   e31fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   e3200:	e9dd 0100 	ldrd	r0, r1, [sp]
   e3204:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   e3208:	ea40 000a 	orr.w	r0, r0, sl
   e320c:	ea41 010b 	orr.w	r1, r1, fp
   e3210:	4004      	ands	r4, r0
   e3212:	400d      	ands	r5, r1
   e3214:	4620      	mov	r0, r4
   e3216:	4629      	mov	r1, r5
   e3218:	e9dd 4500 	ldrd	r4, r5, [sp]
   e321c:	ea04 040a 	and.w	r4, r4, sl
   e3220:	ea05 050b 	and.w	r5, r5, fp
   e3224:	4304      	orrs	r4, r0
   e3226:	430d      	orrs	r5, r1
   e3228:	4620      	mov	r0, r4
   e322a:	4629      	mov	r1, r5
   e322c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   e3230:	1824      	adds	r4, r4, r0
   e3232:	414d      	adcs	r5, r1
   e3234:	19a4      	adds	r4, r4, r6
   e3236:	417d      	adcs	r5, r7
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
   e3238:	e9d2 010c 	ldrd	r0, r1, [r2, #48]	; 0x30
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
   e323c:	e9cd 4502 	strd	r4, r5, [sp, #8]
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
   e3240:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
   e3244:	1900      	adds	r0, r0, r4
   e3246:	4169      	adcs	r1, r5
   e3248:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
   e324c:	1824      	adds	r4, r4, r0
   e324e:	414d      	adcs	r5, r1
   e3250:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   e3254:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   e3258:	ea80 0008 	eor.w	r0, r0, r8
   e325c:	ea81 0109 	eor.w	r1, r1, r9
   e3260:	4006      	ands	r6, r0
   e3262:	400f      	ands	r7, r1
   e3264:	ea86 0608 	eor.w	r6, r6, r8
   e3268:	19a0      	adds	r0, r4, r6
   e326a:	ea87 0709 	eor.w	r7, r7, r9
   e326e:	9c08      	ldr	r4, [sp, #32]
   e3270:	eb45 0107 	adc.w	r1, r5, r7
   e3274:	9d09      	ldr	r5, [sp, #36]	; 0x24
   e3276:	0ba4      	lsrs	r4, r4, #14
   e3278:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e327c:	9472      	str	r4, [sp, #456]	; 0x1c8
   e327e:	0bac      	lsrs	r4, r5, #14
   e3280:	9d08      	ldr	r5, [sp, #32]
   e3282:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
   e3286:	9473      	str	r4, [sp, #460]	; 0x1cc
   e3288:	0cac      	lsrs	r4, r5, #18
   e328a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   e328c:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e3290:	9474      	str	r4, [sp, #464]	; 0x1d0
   e3292:	0cac      	lsrs	r4, r5, #18
   e3294:	9d08      	ldr	r5, [sp, #32]
   e3296:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
   e329a:	9475      	str	r4, [sp, #468]	; 0x1d4
   e329c:	ae74      	add	r6, sp, #464	; 0x1d0
   e329e:	ac72      	add	r4, sp, #456	; 0x1c8
   e32a0:	e9d6 6700 	ldrd	r6, r7, [r6]
   e32a4:	e9d4 4500 	ldrd	r4, r5, [r4]
   e32a8:	4074      	eors	r4, r6
   e32aa:	9e09      	ldr	r6, [sp, #36]	; 0x24
   e32ac:	407d      	eors	r5, r7
   e32ae:	9f08      	ldr	r7, [sp, #32]
   e32b0:	05f6      	lsls	r6, r6, #23
   e32b2:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e32b6:	9677      	str	r6, [sp, #476]	; 0x1dc
   e32b8:	05fe      	lsls	r6, r7, #23
   e32ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
   e32bc:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
   e32c0:	9676      	str	r6, [sp, #472]	; 0x1d8
   e32c2:	ae76      	add	r6, sp, #472	; 0x1d8
   e32c4:	e9d6 6700 	ldrd	r6, r7, [r6]
   e32c8:	4066      	eors	r6, r4
   e32ca:	1986      	adds	r6, r0, r6
   e32cc:	ea87 0705 	eor.w	r7, r7, r5
   e32d0:	eb41 0707 	adc.w	r7, r1, r7
   e32d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   e32d8:	1980      	adds	r0, r0, r6
   e32da:	4179      	adcs	r1, r7
   e32dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   e32e0:	9902      	ldr	r1, [sp, #8]
   e32e2:	9803      	ldr	r0, [sp, #12]
   e32e4:	0f09      	lsrs	r1, r1, #28
   e32e6:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e32ea:	9178      	str	r1, [sp, #480]	; 0x1e0
   e32ec:	0f01      	lsrs	r1, r0, #28
   e32ee:	9802      	ldr	r0, [sp, #8]
   e32f0:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
   e32f4:	9179      	str	r1, [sp, #484]	; 0x1e4
   e32f6:	9903      	ldr	r1, [sp, #12]
   e32f8:	0789      	lsls	r1, r1, #30
   e32fa:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e32fe:	917b      	str	r1, [sp, #492]	; 0x1ec
   e3300:	0781      	lsls	r1, r0, #30
   e3302:	9803      	ldr	r0, [sp, #12]
   e3304:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
   e3308:	917a      	str	r1, [sp, #488]	; 0x1e8
   e330a:	a978      	add	r1, sp, #480	; 0x1e0
   e330c:	e9d1 4500 	ldrd	r4, r5, [r1]
   e3310:	a97a      	add	r1, sp, #488	; 0x1e8
   e3312:	e9d1 0100 	ldrd	r0, r1, [r1]
   e3316:	404d      	eors	r5, r1
   e3318:	9903      	ldr	r1, [sp, #12]
   e331a:	4044      	eors	r4, r0
   e331c:	9802      	ldr	r0, [sp, #8]
   e331e:	0649      	lsls	r1, r1, #25
   e3320:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e3324:	917d      	str	r1, [sp, #500]	; 0x1f4
   e3326:	0641      	lsls	r1, r0, #25
   e3328:	9803      	ldr	r0, [sp, #12]
   e332a:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
   e332e:	917c      	str	r1, [sp, #496]	; 0x1f0
   e3330:	a97c      	add	r1, sp, #496	; 0x1f0
   e3332:	e9d1 0100 	ldrd	r0, r1, [r1]
   e3336:	4060      	eors	r0, r4
   e3338:	4069      	eors	r1, r5
   e333a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   e333e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   e3342:	e9dd 4500 	ldrd	r4, r5, [sp]
   e3346:	ea40 000a 	orr.w	r0, r0, sl
   e334a:	ea41 010b 	orr.w	r1, r1, fp
   e334e:	4004      	ands	r4, r0
   e3350:	400d      	ands	r5, r1
   e3352:	4620      	mov	r0, r4
   e3354:	4629      	mov	r1, r5
   e3356:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   e335a:	ea04 040a 	and.w	r4, r4, sl
   e335e:	ea05 050b 	and.w	r5, r5, fp
   e3362:	4304      	orrs	r4, r0
   e3364:	430d      	orrs	r5, r1
   e3366:	4620      	mov	r0, r4
   e3368:	4629      	mov	r1, r5
   e336a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   e336e:	1824      	adds	r4, r4, r0
   e3370:	414d      	adcs	r5, r1
   e3372:	3340      	adds	r3, #64	; 0x40
   e3374:	19a4      	adds	r4, r4, r6
   e3376:	417d      	adcs	r5, r7
    }
    while( i < 80 );
   e3378:	459c      	cmp	ip, r3
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
   e337a:	e9cd 4504 	strd	r4, r5, [sp, #16]
   e337e:	f102 0240 	add.w	r2, r2, #64	; 0x40
    }
    while( i < 80 );
   e3382:	f47f aaeb 	bne.w	e295c <mbedtls_internal_sha512_process+0x1fc>

    ctx->state[0] += A;
   e3386:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   e338a:	4623      	mov	r3, r4
   e338c:	18c0      	adds	r0, r0, r3
   e338e:	4169      	adcs	r1, r5
    ctx->state[1] += B;
   e3390:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
    }
    while( i < 80 );

    ctx->state[0] += A;
   e3394:	e9ce 0104 	strd	r0, r1, [lr, #16]
    ctx->state[1] += B;
   e3398:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   e339c:	18c0      	adds	r0, r0, r3
   e339e:	4161      	adcs	r1, r4
    ctx->state[2] += C;
   e33a0:	e9dd 3412 	ldrd	r3, r4, [sp, #72]	; 0x48
   e33a4:	eb13 030a 	adds.w	r3, r3, sl
   e33a8:	eb44 040b 	adc.w	r4, r4, fp
   e33ac:	469a      	mov	sl, r3
   e33ae:	46a3      	mov	fp, r4
    ctx->state[3] += D;
   e33b0:	e9dd 2300 	ldrd	r2, r3, [sp]
   e33b4:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
   e33b8:	18a4      	adds	r4, r4, r2
   e33ba:	415d      	adcs	r5, r3
   e33bc:	e9ce 450a 	strd	r4, r5, [lr, #40]	; 0x28
    ctx->state[4] += E;
   e33c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e33c4:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
   e33c8:	18a4      	adds	r4, r4, r2
   e33ca:	415d      	adcs	r5, r3
   e33cc:	e9ce 450c 	strd	r4, r5, [lr, #48]	; 0x30
    ctx->state[5] += F;
   e33d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e33d4:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
   e33d8:	18a4      	adds	r4, r4, r2
   e33da:	415d      	adcs	r5, r3
   e33dc:	e9ce 450e 	strd	r4, r5, [lr, #56]	; 0x38
    ctx->state[6] += G;
   e33e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   e33e4:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
    }
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
   e33e8:	e9ce 0106 	strd	r0, r1, [lr, #24]
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;
   e33ec:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
   e33f0:	18a4      	adds	r4, r4, r2
   e33f2:	415d      	adcs	r5, r3
    ctx->state[7] += H;
   e33f4:	eb10 0008 	adds.w	r0, r0, r8
   e33f8:	eb41 0109 	adc.w	r1, r1, r9
   e33fc:	e9ce 0112 	strd	r0, r1, [lr, #72]	; 0x48

    return( 0 );
}
   e3400:	2000      	movs	r0, #0
    }
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
   e3402:	e9ce ab08 	strd	sl, fp, [lr, #32]
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
   e3406:	e9ce 4510 	strd	r4, r5, [lr, #64]	; 0x40
    ctx->state[7] += H;

    return( 0 );
}
   e340a:	f20d 4d7c 	addw	sp, sp, #1148	; 0x47c
   e340e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e3412:	bf00      	nop

000e3414 <mbedtls_sha512_update_ret>:
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
   e3414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e3418:	4604      	mov	r4, r0
   e341a:	460e      	mov	r6, r1
    unsigned int left;

    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
   e341c:	4615      	mov	r5, r2
   e341e:	2a00      	cmp	r2, #0
   e3420:	d03d      	beq.n	e349e <mbedtls_sha512_update_ret+0x8a>
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
   e3422:	e9d0 2300 	ldrd	r2, r3, [r0]
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
   e3426:	f04f 0900 	mov.w	r9, #0
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
   e342a:	f002 007f 	and.w	r0, r2, #127	; 0x7f
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
   e342e:	1952      	adds	r2, r2, r5
   e3430:	eb43 0309 	adc.w	r3, r3, r9

    if( ctx->total[0] < (uint64_t) ilen )
   e3434:	454b      	cmp	r3, r9
   e3436:	bf08      	it	eq
   e3438:	42aa      	cmpeq	r2, r5
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
   e343a:	e9c4 2300 	strd	r2, r3, [r4]

    if( ctx->total[0] < (uint64_t) ilen )
   e343e:	d206      	bcs.n	e344e <mbedtls_sha512_update_ret+0x3a>
        ctx->total[1]++;
   e3440:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   e3444:	3201      	adds	r2, #1
   e3446:	f143 0300 	adc.w	r3, r3, #0
   e344a:	e9c4 2302 	strd	r2, r3, [r4, #8]

    if( left && ilen >= fill )
   e344e:	b188      	cbz	r0, e3474 <mbedtls_sha512_update_ret+0x60>

    if( ilen == 0 )
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
    fill = 128 - left;
   e3450:	f1c0 0780 	rsb	r7, r0, #128	; 0x80
    ctx->total[0] += (uint64_t) ilen;

    if( ctx->total[0] < (uint64_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
   e3454:	42bd      	cmp	r5, r7
   e3456:	d31c      	bcc.n	e3492 <mbedtls_sha512_update_ret+0x7e>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
   e3458:	f104 0850 	add.w	r8, r4, #80	; 0x50
   e345c:	4631      	mov	r1, r6
   e345e:	463a      	mov	r2, r7
   e3460:	4440      	add	r0, r8
   e3462:	f003 fd74 	bl	e6f4e <memcpy>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
   e3466:	4641      	mov	r1, r8
   e3468:	4620      	mov	r0, r4
   e346a:	f7ff f979 	bl	e2760 <mbedtls_internal_sha512_process>
   e346e:	b9b8      	cbnz	r0, e34a0 <mbedtls_sha512_update_ret+0x8c>
            return( ret );

        input += fill;
   e3470:	443e      	add	r6, r7
        ilen  -= fill;
   e3472:	1bed      	subs	r5, r5, r7
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
   e3474:	462f      	mov	r7, r5
   e3476:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 128 )
   e3478:	2f7f      	cmp	r7, #127	; 0x7f
   e347a:	4431      	add	r1, r6
   e347c:	d905      	bls.n	e348a <mbedtls_sha512_update_ret+0x76>
    {
        if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )
   e347e:	4620      	mov	r0, r4
   e3480:	f7ff f96e 	bl	e2760 <mbedtls_internal_sha512_process>
   e3484:	b960      	cbnz	r0, e34a0 <mbedtls_sha512_update_ret+0x8c>
            return( ret );

        input += 128;
        ilen  -= 128;
   e3486:	3f80      	subs	r7, #128	; 0x80
   e3488:	e7f5      	b.n	e3476 <mbedtls_sha512_update_ret+0x62>
    }

    if( ilen > 0 )
   e348a:	b147      	cbz	r7, e349e <mbedtls_sha512_update_ret+0x8a>
   e348c:	463d      	mov	r5, r7
   e348e:	460e      	mov	r6, r1
   e3490:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
   e3492:	3450      	adds	r4, #80	; 0x50
   e3494:	462a      	mov	r2, r5
   e3496:	4631      	mov	r1, r6
   e3498:	4420      	add	r0, r4
   e349a:	f003 fd58 	bl	e6f4e <memcpy>

    return( 0 );
   e349e:	2000      	movs	r0, #0
}
   e34a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e34a4 <mbedtls_sha512_finish_ret>:
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
   e34a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
   e34a6:	6803      	ldr	r3, [r0, #0]
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
   e34a8:	4604      	mov	r4, r0
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
   e34aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f

    ctx->buffer[used++] = 0x80;
   e34ae:	1c58      	adds	r0, r3, #1
   e34b0:	4423      	add	r3, r4
   e34b2:	2280      	movs	r2, #128	; 0x80

    if( used <= 112 )
   e34b4:	2870      	cmp	r0, #112	; 0x70
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
   e34b6:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;

    ctx->buffer[used++] = 0x80;
   e34b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   e34bc:	f104 0650 	add.w	r6, r4, #80	; 0x50

    if( used <= 112 )
   e34c0:	d804      	bhi.n	e34cc <mbedtls_sha512_finish_ret+0x28>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 112 - used );
   e34c2:	f1c0 0270 	rsb	r2, r0, #112	; 0x70
   e34c6:	2100      	movs	r1, #0
   e34c8:	4430      	add	r0, r6
   e34ca:	e00f      	b.n	e34ec <mbedtls_sha512_finish_ret+0x48>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 128 - used );
   e34cc:	f1c0 0280 	rsb	r2, r0, #128	; 0x80
   e34d0:	2100      	movs	r1, #0
   e34d2:	4430      	add	r0, r6
   e34d4:	f003 fd61 	bl	e6f9a <memset>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
   e34d8:	4631      	mov	r1, r6
   e34da:	4620      	mov	r0, r4
   e34dc:	f7ff f940 	bl	e2760 <mbedtls_internal_sha512_process>
   e34e0:	2800      	cmp	r0, #0
   e34e2:	f040 810e 	bne.w	e3702 <mbedtls_sha512_finish_ret+0x25e>
            return( ret );

        memset( ctx->buffer, 0, 112 );
   e34e6:	4601      	mov	r1, r0
   e34e8:	2270      	movs	r2, #112	; 0x70
   e34ea:	4630      	mov	r0, r6
   e34ec:	f003 fd55 	bl	e6f9a <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
   e34f0:	68e3      	ldr	r3, [r4, #12]
   e34f2:	68a2      	ldr	r2, [r4, #8]
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
   e34f4:	e894 4080 	ldmia.w	r4, {r7, lr}
         | ( ctx->total[1] <<  3 );
   e34f8:	00d9      	lsls	r1, r3, #3
   e34fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
   e34fe:	2300      	movs	r3, #0
   e3500:	4319      	orrs	r1, r3
   e3502:	00d0      	lsls	r0, r2, #3
   e3504:	ea4f 725e 	mov.w	r2, lr, lsr #29
   e3508:	4310      	orrs	r0, r2
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
   e350a:	0e0a      	lsrs	r2, r1, #24
   e350c:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
   e3510:	0c0a      	lsrs	r2, r1, #16
   e3512:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
   e3516:	0a0a      	lsrs	r2, r1, #8
   e3518:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
   e351c:	0e02      	lsrs	r2, r0, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
   e351e:	ea4f 03ce 	mov.w	r3, lr, lsl #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
   e3522:	f884 20c4 	strb.w	r2, [r4, #196]	; 0xc4
   e3526:	0c02      	lsrs	r2, r0, #16
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
   e3528:	ea43 7357 	orr.w	r3, r3, r7, lsr #29

    PUT_UINT64_BE( high, ctx->buffer, 112 );
   e352c:	f884 20c5 	strb.w	r2, [r4, #197]	; 0xc5
   e3530:	0a02      	lsrs	r2, r0, #8
   e3532:	f884 20c6 	strb.w	r2, [r4, #198]	; 0xc6
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
   e3536:	0e1a      	lsrs	r2, r3, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
   e3538:	00ff      	lsls	r7, r7, #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
   e353a:	f884 20c8 	strb.w	r2, [r4, #200]	; 0xc8
   e353e:	0c1a      	lsrs	r2, r3, #16
   e3540:	f884 20c9 	strb.w	r2, [r4, #201]	; 0xc9
   e3544:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
   e3548:	0a1a      	lsrs	r2, r3, #8
   e354a:	0e3b      	lsrs	r3, r7, #24
   e354c:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
   e3550:	0c3b      	lsrs	r3, r7, #16
   e3552:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
   e3556:	0a3b      	lsrs	r3, r7, #8
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
   e3558:	f884 10c3 	strb.w	r1, [r4, #195]	; 0xc3
   e355c:	f884 00c7 	strb.w	r0, [r4, #199]	; 0xc7
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
   e3560:	f884 20ca 	strb.w	r2, [r4, #202]	; 0xca
   e3564:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
   e3568:	f884 70cf 	strb.w	r7, [r4, #207]	; 0xcf

    if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
   e356c:	4631      	mov	r1, r6
   e356e:	4620      	mov	r0, r4
   e3570:	f7ff f8f6 	bl	e2760 <mbedtls_internal_sha512_process>
   e3574:	2800      	cmp	r0, #0
   e3576:	f040 80c4 	bne.w	e3702 <mbedtls_sha512_finish_ret+0x25e>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT64_BE( ctx->state[0], output,  0 );
   e357a:	7de3      	ldrb	r3, [r4, #23]
   e357c:	702b      	strb	r3, [r5, #0]
   e357e:	8ae3      	ldrh	r3, [r4, #22]
   e3580:	706b      	strb	r3, [r5, #1]
   e3582:	6963      	ldr	r3, [r4, #20]
   e3584:	0a1b      	lsrs	r3, r3, #8
   e3586:	70ab      	strb	r3, [r5, #2]
   e3588:	6963      	ldr	r3, [r4, #20]
   e358a:	70eb      	strb	r3, [r5, #3]
   e358c:	7ce3      	ldrb	r3, [r4, #19]
   e358e:	712b      	strb	r3, [r5, #4]
   e3590:	8a63      	ldrh	r3, [r4, #18]
   e3592:	716b      	strb	r3, [r5, #5]
   e3594:	6923      	ldr	r3, [r4, #16]
   e3596:	0a1b      	lsrs	r3, r3, #8
   e3598:	71ab      	strb	r3, [r5, #6]
   e359a:	6923      	ldr	r3, [r4, #16]
   e359c:	71eb      	strb	r3, [r5, #7]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
   e359e:	7fe3      	ldrb	r3, [r4, #31]
   e35a0:	722b      	strb	r3, [r5, #8]
   e35a2:	8be3      	ldrh	r3, [r4, #30]
   e35a4:	726b      	strb	r3, [r5, #9]
   e35a6:	69e3      	ldr	r3, [r4, #28]
   e35a8:	0a1b      	lsrs	r3, r3, #8
   e35aa:	72ab      	strb	r3, [r5, #10]
   e35ac:	69e3      	ldr	r3, [r4, #28]
   e35ae:	72eb      	strb	r3, [r5, #11]
   e35b0:	7ee3      	ldrb	r3, [r4, #27]
   e35b2:	732b      	strb	r3, [r5, #12]
   e35b4:	8b63      	ldrh	r3, [r4, #26]
   e35b6:	736b      	strb	r3, [r5, #13]
   e35b8:	69a3      	ldr	r3, [r4, #24]
   e35ba:	0a1b      	lsrs	r3, r3, #8
   e35bc:	73ab      	strb	r3, [r5, #14]
   e35be:	69a3      	ldr	r3, [r4, #24]
   e35c0:	73eb      	strb	r3, [r5, #15]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
   e35c2:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   e35c6:	742b      	strb	r3, [r5, #16]
   e35c8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   e35ca:	746b      	strb	r3, [r5, #17]
   e35cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e35ce:	0a1b      	lsrs	r3, r3, #8
   e35d0:	74ab      	strb	r3, [r5, #18]
   e35d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e35d4:	74eb      	strb	r3, [r5, #19]
   e35d6:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   e35da:	752b      	strb	r3, [r5, #20]
   e35dc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   e35de:	756b      	strb	r3, [r5, #21]
   e35e0:	6a23      	ldr	r3, [r4, #32]
   e35e2:	0a1b      	lsrs	r3, r3, #8
   e35e4:	75ab      	strb	r3, [r5, #22]
   e35e6:	6a23      	ldr	r3, [r4, #32]
   e35e8:	75eb      	strb	r3, [r5, #23]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
   e35ea:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   e35ee:	762b      	strb	r3, [r5, #24]
   e35f0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   e35f2:	766b      	strb	r3, [r5, #25]
   e35f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e35f6:	0a1b      	lsrs	r3, r3, #8
   e35f8:	76ab      	strb	r3, [r5, #26]
   e35fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e35fc:	76eb      	strb	r3, [r5, #27]
   e35fe:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   e3602:	772b      	strb	r3, [r5, #28]
   e3604:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   e3606:	776b      	strb	r3, [r5, #29]
   e3608:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   e360a:	0a1b      	lsrs	r3, r3, #8
   e360c:	77ab      	strb	r3, [r5, #30]
   e360e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   e3610:	77eb      	strb	r3, [r5, #31]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
   e3612:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   e3616:	f885 3020 	strb.w	r3, [r5, #32]
   e361a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   e361c:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
   e3620:	6b63      	ldr	r3, [r4, #52]	; 0x34
   e3622:	0a1b      	lsrs	r3, r3, #8
   e3624:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   e3628:	6b63      	ldr	r3, [r4, #52]	; 0x34
   e362a:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
   e362e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   e3632:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
   e3636:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   e3638:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
   e363c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e363e:	0a1b      	lsrs	r3, r3, #8
   e3640:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
   e3644:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e3646:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
    PUT_UINT64_BE( ctx->state[5], output, 40 );
   e364a:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   e364e:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
   e3652:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
   e3654:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
   e3658:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e365a:	0a1b      	lsrs	r3, r3, #8
   e365c:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
   e3660:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e3662:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
   e3666:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   e366a:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
   e366e:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
   e3670:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
   e3674:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e3676:	0a1b      	lsrs	r3, r3, #8
   e3678:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
   e367c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e367e:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f

    if( ctx->is384 == 0 )
   e3682:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   e3686:	2b00      	cmp	r3, #0
   e3688:	d13b      	bne.n	e3702 <mbedtls_sha512_finish_ret+0x25e>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
   e368a:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   e368e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
   e3692:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
   e3696:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
   e369a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   e369c:	0a1b      	lsrs	r3, r3, #8
   e369e:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
   e36a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   e36a4:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
   e36a8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   e36ac:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
   e36b0:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   e36b4:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
   e36b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e36ba:	0a1b      	lsrs	r3, r3, #8
   e36bc:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
   e36c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e36c2:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
        PUT_UINT64_BE( ctx->state[7], output, 56 );
   e36c6:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
   e36ca:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
   e36ce:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
   e36d2:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
   e36d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   e36d8:	0a1b      	lsrs	r3, r3, #8
   e36da:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
   e36de:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   e36e0:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
   e36e4:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
   e36e8:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   e36ec:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   e36f0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
   e36f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   e36f6:	0a1b      	lsrs	r3, r3, #8
   e36f8:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
   e36fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   e36fe:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
    }

    return( 0 );
}
   e3702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e3704 <mbedtls_sha512_ret>:
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
   e3704:	b5f0      	push	{r4, r5, r6, r7, lr}
   e3706:	b0b7      	sub	sp, #220	; 0xdc
   e3708:	461c      	mov	r4, r3
   e370a:	4606      	mov	r6, r0

    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha512_init( &ctx );
   e370c:	4668      	mov	r0, sp
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
   e370e:	460f      	mov	r7, r1
   e3710:	4615      	mov	r5, r2

    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha512_init( &ctx );
   e3712:	f7fe ff7b 	bl	e260c <mbedtls_sha512_init>

    if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )
   e3716:	4621      	mov	r1, r4
   e3718:	4668      	mov	r0, sp
   e371a:	f7fe ff85 	bl	e2628 <mbedtls_sha512_starts_ret>
   e371e:	4604      	mov	r4, r0
   e3720:	b958      	cbnz	r0, e373a <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )
   e3722:	463a      	mov	r2, r7
   e3724:	4631      	mov	r1, r6
   e3726:	4668      	mov	r0, sp
   e3728:	f7ff fe74 	bl	e3414 <mbedtls_sha512_update_ret>
   e372c:	4604      	mov	r4, r0
   e372e:	b920      	cbnz	r0, e373a <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )
   e3730:	4629      	mov	r1, r5
   e3732:	4668      	mov	r0, sp
   e3734:	f7ff feb6 	bl	e34a4 <mbedtls_sha512_finish_ret>
   e3738:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha512_free( &ctx );
   e373a:	4668      	mov	r0, sp
   e373c:	f7fe ff6a 	bl	e2614 <mbedtls_sha512_free>

    return( ret );
}
   e3740:	4620      	mov	r0, r4
   e3742:	b037      	add	sp, #220	; 0xdc
   e3744:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e3746 <mbedtls_pem_init>:
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
void mbedtls_pem_init( mbedtls_pem_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
   e3746:	2300      	movs	r3, #0
   e3748:	6003      	str	r3, [r0, #0]
   e374a:	6043      	str	r3, [r0, #4]
   e374c:	6083      	str	r3, [r0, #8]
   e374e:	4770      	bx	lr

000e3750 <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
   e3750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e3754:	4689      	mov	r9, r1
   e3756:	b085      	sub	sp, #20
   e3758:	4690      	mov	r8, r2
   e375a:	461f      	mov	r7, r3
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
   e375c:	4606      	mov	r6, r0
   e375e:	2800      	cmp	r0, #0
   e3760:	d063      	beq.n	e382a <mbedtls_pem_read_buffer+0xda>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );

    s1 = (unsigned char *) strstr( (const char *) data, header );
   e3762:	4618      	mov	r0, r3
   e3764:	f003 fc87 	bl	e7076 <strstr>

    if( s1 == NULL )
   e3768:	4604      	mov	r4, r0
   e376a:	2800      	cmp	r0, #0
   e376c:	d05f      	beq.n	e382e <mbedtls_pem_read_buffer+0xde>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s2 = (unsigned char *) strstr( (const char *) data, footer );
   e376e:	4641      	mov	r1, r8
   e3770:	4638      	mov	r0, r7
   e3772:	f003 fc80 	bl	e7076 <strstr>

    if( s2 == NULL || s2 <= s1 )
   e3776:	4605      	mov	r5, r0
   e3778:	2800      	cmp	r0, #0
   e377a:	d058      	beq.n	e382e <mbedtls_pem_read_buffer+0xde>
   e377c:	4284      	cmp	r4, r0
   e377e:	d256      	bcs.n	e382e <mbedtls_pem_read_buffer+0xde>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
   e3780:	4648      	mov	r0, r9
   e3782:	f003 fc5b 	bl	e703c <strlen>
    if( *s1 == ' '  ) s1++;
   e3786:	5c22      	ldrb	r2, [r4, r0]
    s2 = (unsigned char *) strstr( (const char *) data, footer );

    if( s2 == NULL || s2 <= s1 )
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
   e3788:	1823      	adds	r3, r4, r0
    if( *s1 == ' '  ) s1++;
   e378a:	2a20      	cmp	r2, #32
   e378c:	bf08      	it	eq
   e378e:	3301      	addeq	r3, #1
    if( *s1 == '\r' ) s1++;
   e3790:	781a      	ldrb	r2, [r3, #0]
   e3792:	2a0d      	cmp	r2, #13
   e3794:	bf08      	it	eq
   e3796:	3301      	addeq	r3, #1
    if( *s1 == '\n' ) s1++;
   e3798:	781a      	ldrb	r2, [r3, #0]
   e379a:	2a0a      	cmp	r2, #10
   e379c:	d147      	bne.n	e382e <mbedtls_pem_read_buffer+0xde>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
   e379e:	4640      	mov	r0, r8
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
    if( *s1 == ' '  ) s1++;
    if( *s1 == '\r' ) s1++;
    if( *s1 == '\n' ) s1++;
   e37a0:	1c5c      	adds	r4, r3, #1
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
   e37a2:	f003 fc4b 	bl	e703c <strlen>
    if( *end == ' '  ) end++;
   e37a6:	5c2a      	ldrb	r2, [r5, r0]
    if( *s1 == '\r' ) s1++;
    if( *s1 == '\n' ) s1++;
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
   e37a8:	182b      	adds	r3, r5, r0
    if( *end == ' '  ) end++;
   e37aa:	2a20      	cmp	r2, #32
   e37ac:	bf08      	it	eq
   e37ae:	3301      	addeq	r3, #1
    if( *end == '\r' ) end++;
   e37b0:	781a      	ldrb	r2, [r3, #0]
   e37b2:	2a0d      	cmp	r2, #13
   e37b4:	bf08      	it	eq
   e37b6:	3301      	addeq	r3, #1
    if( *end == '\n' ) end++;
   e37b8:	781a      	ldrb	r2, [r3, #0]
   e37ba:	2a0a      	cmp	r2, #10
   e37bc:	bf08      	it	eq
   e37be:	3301      	addeq	r3, #1
    *use_len = end - data;
   e37c0:	1bdb      	subs	r3, r3, r7
   e37c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
   e37c4:	1b2f      	subs	r7, r5, r4
   e37c6:	2f15      	cmp	r7, #21
    end = s2;
    end += strlen( footer );
    if( *end == ' '  ) end++;
    if( *end == '\r' ) end++;
    if( *end == '\n' ) end++;
    *use_len = end - data;
   e37c8:	6013      	str	r3, [r2, #0]

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
   e37ca:	dd05      	ble.n	e37d8 <mbedtls_pem_read_buffer+0x88>
   e37cc:	2216      	movs	r2, #22
   e37ce:	491e      	ldr	r1, [pc, #120]	; (e3848 <mbedtls_pem_read_buffer+0xf8>)
   e37d0:	4620      	mov	r0, r4
   e37d2:	f003 fbad 	bl	e6f30 <memcmp>
   e37d6:	b360      	cbz	r0, e3832 <mbedtls_pem_read_buffer+0xe2>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
   e37d8:	42a5      	cmp	r5, r4
   e37da:	d92c      	bls.n	e3836 <mbedtls_pem_read_buffer+0xe6>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
   e37dc:	2100      	movs	r1, #0
   e37de:	9700      	str	r7, [sp, #0]
   e37e0:	4623      	mov	r3, r4
   e37e2:	aa03      	add	r2, sp, #12
   e37e4:	4608      	mov	r0, r1
   e37e6:	f7f8 fc87 	bl	dc0f8 <mbedtls_base64_decode>

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
   e37ea:	302c      	adds	r0, #44	; 0x2c
   e37ec:	d025      	beq.n	e383a <mbedtls_pem_read_buffer+0xea>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );

    if( ( buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
   e37ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
   e37f2:	2001      	movs	r0, #1
   e37f4:	4641      	mov	r1, r8
   e37f6:	f003 fa8d 	bl	e6d14 <calloc>
   e37fa:	4605      	mov	r5, r0
   e37fc:	b1f8      	cbz	r0, e383e <mbedtls_pem_read_buffer+0xee>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
   e37fe:	4623      	mov	r3, r4
   e3800:	9700      	str	r7, [sp, #0]
   e3802:	aa03      	add	r2, sp, #12
   e3804:	4641      	mov	r1, r8
   e3806:	f7f8 fc77 	bl	dc0f8 <mbedtls_base64_decode>
   e380a:	4604      	mov	r4, r0
   e380c:	b148      	cbz	r0, e3822 <mbedtls_pem_read_buffer+0xd2>
    {
        mbedtls_platform_zeroize( buf, len );
   e380e:	9903      	ldr	r1, [sp, #12]
   e3810:	4628      	mov	r0, r5
   e3812:	f7f6 fe65 	bl	da4e0 <mbedtls_platform_zeroize>
        mbedtls_free( buf );
   e3816:	4628      	mov	r0, r5
   e3818:	f001 fda8 	bl	e536c <free>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
   e381c:	f5a4 5088 	sub.w	r0, r4, #4352	; 0x1100
   e3820:	e00e      	b.n	e3840 <mbedtls_pem_read_buffer+0xf0>
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    ctx->buf = buf;
    ctx->buflen = len;
   e3822:	9b03      	ldr	r3, [sp, #12]
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    ctx->buf = buf;
   e3824:	6035      	str	r5, [r6, #0]
    ctx->buflen = len;
   e3826:	6073      	str	r3, [r6, #4]

    return( 0 );
   e3828:	e00a      	b.n	e3840 <mbedtls_pem_read_buffer+0xf0>
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
   e382a:	4808      	ldr	r0, [pc, #32]	; (e384c <mbedtls_pem_read_buffer+0xfc>)
   e382c:	e008      	b.n	e3840 <mbedtls_pem_read_buffer+0xf0>

    s1 = (unsigned char *) strstr( (const char *) data, header );

    if( s1 == NULL )
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
   e382e:	4808      	ldr	r0, [pc, #32]	; (e3850 <mbedtls_pem_read_buffer+0x100>)
   e3830:	e006      	b.n	e3840 <mbedtls_pem_read_buffer+0xf0>

        if( *s1 == '\r' ) s1++;
        if( *s1 == '\n' ) s1++;
        else return( MBEDTLS_ERR_PEM_INVALID_DATA );
#else
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
   e3832:	4808      	ldr	r0, [pc, #32]	; (e3854 <mbedtls_pem_read_buffer+0x104>)
   e3834:	e004      	b.n	e3840 <mbedtls_pem_read_buffer+0xf0>
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
        return( MBEDTLS_ERR_PEM_INVALID_DATA );
   e3836:	4808      	ldr	r0, [pc, #32]	; (e3858 <mbedtls_pem_read_buffer+0x108>)
   e3838:	e002      	b.n	e3840 <mbedtls_pem_read_buffer+0xf0>

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
   e383a:	4808      	ldr	r0, [pc, #32]	; (e385c <mbedtls_pem_read_buffer+0x10c>)
   e383c:	e000      	b.n	e3840 <mbedtls_pem_read_buffer+0xf0>

    if( ( buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
   e383e:	4808      	ldr	r0, [pc, #32]	; (e3860 <mbedtls_pem_read_buffer+0x110>)

    ctx->buf = buf;
    ctx->buflen = len;

    return( 0 );
}
   e3840:	b005      	add	sp, #20
   e3842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e3846:	bf00      	nop
   e3848:	000ea1e0 	.word	0x000ea1e0
   e384c:	ffffeb80 	.word	0xffffeb80
   e3850:	ffffef80 	.word	0xffffef80
   e3854:	ffffec00 	.word	0xffffec00
   e3858:	ffffef00 	.word	0xffffef00
   e385c:	ffffeed4 	.word	0xffffeed4
   e3860:	ffffee80 	.word	0xffffee80

000e3864 <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
   e3864:	b510      	push	{r4, lr}
   e3866:	4604      	mov	r4, r0
    if ( ctx->buf != NULL )
   e3868:	6800      	ldr	r0, [r0, #0]
   e386a:	b128      	cbz	r0, e3878 <mbedtls_pem_free+0x14>
    {
        mbedtls_platform_zeroize( ctx->buf, ctx->buflen );
   e386c:	6861      	ldr	r1, [r4, #4]
   e386e:	f7f6 fe37 	bl	da4e0 <mbedtls_platform_zeroize>
        mbedtls_free( ctx->buf );
   e3872:	6820      	ldr	r0, [r4, #0]
   e3874:	f001 fd7a 	bl	e536c <free>
    }
    mbedtls_free( ctx->info );
   e3878:	68a0      	ldr	r0, [r4, #8]
   e387a:	f001 fd77 	bl	e536c <free>

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pem_context ) );
   e387e:	4620      	mov	r0, r4
   e3880:	210c      	movs	r1, #12
}
   e3882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mbedtls_platform_zeroize( ctx->buf, ctx->buflen );
        mbedtls_free( ctx->buf );
    }
    mbedtls_free( ctx->info );

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pem_context ) );
   e3886:	f7f6 be2b 	b.w	da4e0 <mbedtls_platform_zeroize>
	...

000e388c <mbedtls_ssl_ciphersuite_from_id>:
    return( NULL );
}

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;
   e388c:	4b05      	ldr	r3, [pc, #20]	; (e38a4 <mbedtls_ssl_ciphersuite_from_id+0x18>)

    while( cur->id != 0 )
   e388e:	681a      	ldr	r2, [r3, #0]
   e3890:	b11a      	cbz	r2, e389a <mbedtls_ssl_ciphersuite_from_id+0xe>
    {
        if( cur->id == ciphersuite )
   e3892:	4282      	cmp	r2, r0
   e3894:	d003      	beq.n	e389e <mbedtls_ssl_ciphersuite_from_id+0x12>
            return( cur );

        cur++;
   e3896:	3320      	adds	r3, #32

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;

    while( cur->id != 0 )
   e3898:	e7f9      	b.n	e388e <mbedtls_ssl_ciphersuite_from_id+0x2>
            return( cur );

        cur++;
    }

    return( NULL );
   e389a:	4610      	mov	r0, r2
   e389c:	4770      	bx	lr
   e389e:	4618      	mov	r0, r3
}
   e38a0:	4770      	bx	lr
   e38a2:	bf00      	nop
   e38a4:	000ea310 	.word	0x000ea310

000e38a8 <mbedtls_ssl_list_ciphersuites>:

    return( 0 );
}

const int *mbedtls_ssl_list_ciphersuites( void )
{
   e38a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /*
     * On initial call filter out all ciphersuites not supported by current
     * build based on presence in the ciphersuite_definitions.
     */
    if( supported_init == 0 )
   e38aa:	4b0f      	ldr	r3, [pc, #60]	; (e38e8 <mbedtls_ssl_list_ciphersuites+0x40>)
   e38ac:	681a      	ldr	r2, [r3, #0]
   e38ae:	461c      	mov	r4, r3
   e38b0:	b9ba      	cbnz	r2, e38e2 <mbedtls_ssl_list_ciphersuites+0x3a>
   e38b2:	490e      	ldr	r1, [pc, #56]	; (e38ec <mbedtls_ssl_list_ciphersuites+0x44>)
   e38b4:	4e0e      	ldr	r6, [pc, #56]	; (e38f0 <mbedtls_ssl_list_ciphersuites+0x48>)
    {
        const int *p;
        int *q;

        for( p = ciphersuite_preference, q = supported_ciphersuites;
             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
   e38b6:	f101 0720 	add.w	r7, r1, #32
   e38ba:	f856 5f04 	ldr.w	r5, [r6, #4]!
   e38be:	b165      	cbz	r5, e38da <mbedtls_ssl_list_ciphersuites+0x32>
   e38c0:	42b9      	cmp	r1, r7
   e38c2:	d20a      	bcs.n	e38da <mbedtls_ssl_list_ciphersuites+0x32>
             p++ )
        {
            const mbedtls_ssl_ciphersuite_t *cs_info;
            if( ( cs_info = mbedtls_ssl_ciphersuite_from_id( *p ) ) != NULL &&
   e38c4:	4628      	mov	r0, r5
   e38c6:	f7ff ffe1 	bl	e388c <mbedtls_ssl_ciphersuite_from_id>
   e38ca:	2800      	cmp	r0, #0
   e38cc:	d0f5      	beq.n	e38ba <mbedtls_ssl_list_ciphersuites+0x12>
   e38ce:	7a03      	ldrb	r3, [r0, #8]
   e38d0:	2b2a      	cmp	r3, #42	; 0x2a
   e38d2:	d0f2      	beq.n	e38ba <mbedtls_ssl_list_ciphersuites+0x12>
                !ciphersuite_is_removed( cs_info ) )
            {
                *(q++) = *p;
   e38d4:	600d      	str	r5, [r1, #0]
   e38d6:	3104      	adds	r1, #4
    if( supported_init == 0 )
    {
        const int *p;
        int *q;

        for( p = ciphersuite_preference, q = supported_ciphersuites;
   e38d8:	e7ef      	b.n	e38ba <mbedtls_ssl_list_ciphersuites+0x12>
                !ciphersuite_is_removed( cs_info ) )
            {
                *(q++) = *p;
            }
        }
        *q = 0;
   e38da:	2300      	movs	r3, #0
   e38dc:	600b      	str	r3, [r1, #0]

        supported_init = 1;
   e38de:	2301      	movs	r3, #1
   e38e0:	6023      	str	r3, [r4, #0]
    }

    return( supported_ciphersuites );
}
   e38e2:	4802      	ldr	r0, [pc, #8]	; (e38ec <mbedtls_ssl_list_ciphersuites+0x44>)
   e38e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e38e6:	bf00      	nop
   e38e8:	2003e49c 	.word	0x2003e49c
   e38ec:	2003e4a0 	.word	0x2003e4a0
   e38f0:	000ea42c 	.word	0x000ea42c

000e38f4 <mbedtls_ssl_get_ciphersuite_sig_pk_alg>:
}

#if defined(MBEDTLS_PK_C)
mbedtls_pk_type_t mbedtls_ssl_get_ciphersuite_sig_pk_alg( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
   e38f4:	7a83      	ldrb	r3, [r0, #10]
   e38f6:	2b0a      	cmp	r3, #10
   e38f8:	d80e      	bhi.n	e3918 <mbedtls_ssl_get_ciphersuite_sig_pk_alg+0x24>
   e38fa:	2001      	movs	r0, #1
   e38fc:	fa00 f303 	lsl.w	r3, r0, r3
   e3900:	f013 0f8e 	tst.w	r3, #142	; 0x8e
   e3904:	d10b      	bne.n	e391e <mbedtls_ssl_get_ciphersuite_sig_pk_alg+0x2a>
   e3906:	f413 6fc0 	tst.w	r3, #1536	; 0x600
   e390a:	d107      	bne.n	e391c <mbedtls_ssl_get_ciphersuite_sig_pk_alg+0x28>
   e390c:	f013 0f10 	tst.w	r3, #16
        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:
        case MBEDTLS_KEY_EXCHANGE_RSA_PSK:
            return( MBEDTLS_PK_RSA );

        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
            return( MBEDTLS_PK_ECDSA );
   e3910:	bf0c      	ite	eq
   e3912:	2000      	moveq	r0, #0
   e3914:	2004      	movne	r0, #4
   e3916:	4770      	bx	lr
        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
            return( MBEDTLS_PK_ECKEY );

        default:
            return( MBEDTLS_PK_NONE );
   e3918:	2000      	movs	r0, #0
   e391a:	4770      	bx	lr
        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
            return( MBEDTLS_PK_ECDSA );

        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
            return( MBEDTLS_PK_ECKEY );
   e391c:	2002      	movs	r0, #2

        default:
            return( MBEDTLS_PK_NONE );
    }
}
   e391e:	4770      	bx	lr

000e3920 <mbedtls_ssl_ciphersuite_uses_ec>:

#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
int mbedtls_ssl_ciphersuite_uses_ec( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
   e3920:	7a82      	ldrb	r2, [r0, #10]
   e3922:	2a0b      	cmp	r2, #11
   e3924:	d808      	bhi.n	e3938 <mbedtls_ssl_ciphersuite_uses_ec+0x18>
        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
        case MBEDTLS_KEY_EXCHANGE_ECDHE_PSK:
        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
        case MBEDTLS_KEY_EXCHANGE_ECJPAKE:
            return( 1 );
   e3926:	2301      	movs	r3, #1
   e3928:	4093      	lsls	r3, r2
   e392a:	f640 7018 	movw	r0, #3864	; 0xf18
   e392e:	4018      	ands	r0, r3
   e3930:	3000      	adds	r0, #0
   e3932:	bf18      	it	ne
   e3934:	2001      	movne	r0, #1
   e3936:	4770      	bx	lr

        default:
            return( 0 );
   e3938:	2000      	movs	r0, #0
    }
}
   e393a:	4770      	bx	lr

000e393c <mbedtls_ssl_ciphersuite_uses_psk>:
#endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C || MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED*/

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
int mbedtls_ssl_ciphersuite_uses_psk( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
   e393c:	7a80      	ldrb	r0, [r0, #10]
   e393e:	3805      	subs	r0, #5
            return( 1 );

        default:
            return( 0 );
    }
}
   e3940:	2803      	cmp	r0, #3
   e3942:	bf8c      	ite	hi
   e3944:	2000      	movhi	r0, #0
   e3946:	2001      	movls	r0, #1
   e3948:	4770      	bx	lr
	...

000e394c <mbedtls_rsa_deduce_primes>:
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
   e394c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e3950:	b096      	sub	sp, #88	; 0x58
   e3952:	461f      	mov	r7, r3
          61,   67,   71,   73,   79,   83,   89,   97,
         101,  103,  107,  109,  113,  127,  131,  137,
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };
   e3954:	4b7a      	ldr	r3, [pc, #488]	; (e3b40 <mbedtls_rsa_deduce_primes+0x1f4>)
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
   e3956:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
   e395a:	4615      	mov	r5, r2
   e395c:	4606      	mov	r6, r0
   e395e:	4688      	mov	r8, r1
          61,   67,   71,   73,   79,   83,   89,   97,
         101,  103,  107,  109,  113,  127,  131,  137,
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };
   e3960:	aa08      	add	r2, sp, #32
   e3962:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   e3966:	6818      	ldr	r0, [r3, #0]
   e3968:	6859      	ldr	r1, [r3, #4]
   e396a:	4614      	mov	r4, r2
   e396c:	c403      	stmia	r4!, {r0, r1}
   e396e:	3308      	adds	r3, #8
   e3970:	4573      	cmp	r3, lr
   e3972:	4622      	mov	r2, r4
   e3974:	d1f7      	bne.n	e3966 <mbedtls_rsa_deduce_primes+0x1a>
   e3976:	6818      	ldr	r0, [r3, #0]
   e3978:	889b      	ldrh	r3, [r3, #4]
   e397a:	6020      	str	r0, [r4, #0]
   e397c:	80a3      	strh	r3, [r4, #4]

    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
   e397e:	2f00      	cmp	r7, #0
   e3980:	f000 80b8 	beq.w	e3af4 <mbedtls_rsa_deduce_primes+0x1a8>
   e3984:	f1b9 0f00 	cmp.w	r9, #0
   e3988:	f000 80b4 	beq.w	e3af4 <mbedtls_rsa_deduce_primes+0x1a8>
   e398c:	68bb      	ldr	r3, [r7, #8]
   e398e:	2b00      	cmp	r3, #0
   e3990:	f040 80b0 	bne.w	e3af4 <mbedtls_rsa_deduce_primes+0x1a8>
   e3994:	f8d9 1008 	ldr.w	r1, [r9, #8]
   e3998:	2900      	cmp	r1, #0
   e399a:	f040 80ab 	bne.w	e3af4 <mbedtls_rsa_deduce_primes+0x1a8>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
   e399e:	4630      	mov	r0, r6
   e39a0:	f7fc fea3 	bl	e06ea <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   e39a4:	2800      	cmp	r0, #0
   e39a6:	f340 80a5 	ble.w	e3af4 <mbedtls_rsa_deduce_primes+0x1a8>

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
   e39aa:	2101      	movs	r1, #1
   e39ac:	4628      	mov	r0, r5
   e39ae:	f7fc fe9c 	bl	e06ea <mbedtls_mpi_cmp_int>
    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
   e39b2:	2800      	cmp	r0, #0
   e39b4:	f340 809e 	ble.w	e3af4 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   e39b8:	4631      	mov	r1, r6
   e39ba:	4628      	mov	r0, r5
   e39bc:	f7fc fe50 	bl	e0660 <mbedtls_mpi_cmp_mpi>

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
   e39c0:	2800      	cmp	r0, #0
   e39c2:	f280 8097 	bge.w	e3af4 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   e39c6:	2101      	movs	r1, #1
   e39c8:	4640      	mov	r0, r8
   e39ca:	f7fc fe8e 	bl	e06ea <mbedtls_mpi_cmp_int>
    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   e39ce:	2800      	cmp	r0, #0
   e39d0:	f340 8090 	ble.w	e3af4 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
   e39d4:	4631      	mov	r1, r6
   e39d6:	4640      	mov	r0, r8
   e39d8:	f7fc fe42 	bl	e0660 <mbedtls_mpi_cmp_mpi>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   e39dc:	2800      	cmp	r0, #0
   e39de:	f280 8089 	bge.w	e3af4 <mbedtls_rsa_deduce_primes+0x1a8>

    /*
     * Initializations and temporary changes
     */

    mbedtls_mpi_init( &K );
   e39e2:	a805      	add	r0, sp, #20
   e39e4:	f7fc fb55 	bl	e0092 <mbedtls_mpi_init>
    mbedtls_mpi_init( &T );
   e39e8:	a802      	add	r0, sp, #8
   e39ea:	f7fc fb52 	bl	e0092 <mbedtls_mpi_init>

    /* T := DE - 1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
   e39ee:	4642      	mov	r2, r8
   e39f0:	4629      	mov	r1, r5
   e39f2:	a802      	add	r0, sp, #8
   e39f4:	f7fc ff98 	bl	e0928 <mbedtls_mpi_mul_mpi>
   e39f8:	4604      	mov	r4, r0
   e39fa:	2800      	cmp	r0, #0
   e39fc:	d172      	bne.n	e3ae4 <mbedtls_rsa_deduce_primes+0x198>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
   e39fe:	a902      	add	r1, sp, #8
   e3a00:	2201      	movs	r2, #1
   e3a02:	4608      	mov	r0, r1
   e3a04:	f7fc ff7a 	bl	e08fc <mbedtls_mpi_sub_int>
   e3a08:	4604      	mov	r4, r0
   e3a0a:	2800      	cmp	r0, #0
   e3a0c:	d16a      	bne.n	e3ae4 <mbedtls_rsa_deduce_primes+0x198>

    if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )
   e3a0e:	a802      	add	r0, sp, #8
   e3a10:	f7fc fc4d 	bl	e02ae <mbedtls_mpi_lsb>
   e3a14:	fa1f fa80 	uxth.w	sl, r0
   e3a18:	f1ba 0f00 	cmp.w	sl, #0
   e3a1c:	d102      	bne.n	e3a24 <mbedtls_rsa_deduce_primes+0xd8>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
   e3a1e:	f06f 0403 	mvn.w	r4, #3
   e3a22:	e05f      	b.n	e3ae4 <mbedtls_rsa_deduce_primes+0x198>
        goto cleanup;
    }

    /* After this operation, T holds the largest odd divisor of DE - 1. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
   e3a24:	4651      	mov	r1, sl
   e3a26:	a802      	add	r0, sp, #8
   e3a28:	f7fc fd3b 	bl	e04a2 <mbedtls_mpi_shift_r>
   e3a2c:	4604      	mov	r4, r0
   e3a2e:	2800      	cmp	r0, #0
   e3a30:	d158      	bne.n	e3ae4 <mbedtls_rsa_deduce_primes+0x198>
     * Actual work
     */

    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
    if( N->p[0] % 8 == 1 )
   e3a32:	68b3      	ldr	r3, [r6, #8]
        attempt = 1;
   e3a34:	681d      	ldr	r5, [r3, #0]
   e3a36:	f005 0507 	and.w	r5, r5, #7
   e3a3a:	1e6b      	subs	r3, r5, #1
   e3a3c:	425d      	negs	r5, r3
   e3a3e:	415d      	adcs	r5, r3

    for( ; attempt < num_primes; ++attempt )
    {
        mbedtls_mpi_lset( &K, primes[attempt] );
   e3a40:	ab16      	add	r3, sp, #88	; 0x58
   e3a42:	442b      	add	r3, r5
   e3a44:	a805      	add	r0, sp, #20
   e3a46:	f813 1c38 	ldrb.w	r1, [r3, #-56]
   e3a4a:	f7fc fc03 	bl	e0254 <mbedtls_mpi_lset>

        /* Check if gcd(K,N) = 1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
   e3a4e:	4632      	mov	r2, r6
   e3a50:	a905      	add	r1, sp, #20
   e3a52:	4638      	mov	r0, r7
   e3a54:	f7fd fbf5 	bl	e1242 <mbedtls_mpi_gcd>
   e3a58:	4604      	mov	r4, r0
   e3a5a:	2800      	cmp	r0, #0
   e3a5c:	d142      	bne.n	e3ae4 <mbedtls_rsa_deduce_primes+0x198>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
   e3a5e:	2101      	movs	r1, #1
   e3a60:	4638      	mov	r0, r7
   e3a62:	f7fc fe42 	bl	e06ea <mbedtls_mpi_cmp_int>
   e3a66:	b120      	cbz	r0, e3a72 <mbedtls_rsa_deduce_primes+0x126>
    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
    if( N->p[0] % 8 == 1 )
        attempt = 1;

    for( ; attempt < num_primes; ++attempt )
   e3a68:	3501      	adds	r5, #1
   e3a6a:	b2ad      	uxth	r5, r5
   e3a6c:	2d36      	cmp	r5, #54	; 0x36
   e3a6e:	d1e7      	bne.n	e3a40 <mbedtls_rsa_deduce_primes+0xf4>
   e3a70:	e7d5      	b.n	e3a1e <mbedtls_rsa_deduce_primes+0xd2>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
            continue;

        /* Go through K^T + 1, K^(2T) + 1, K^(4T) + 1, ...
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
   e3a72:	a905      	add	r1, sp, #20
   e3a74:	f8cd 9000 	str.w	r9, [sp]
   e3a78:	4633      	mov	r3, r6
   e3a7a:	aa02      	add	r2, sp, #8
   e3a7c:	4608      	mov	r0, r1
   e3a7e:	f7fd f9c1 	bl	e0e04 <mbedtls_mpi_exp_mod>
   e3a82:	4604      	mov	r4, r0
   e3a84:	bb70      	cbnz	r0, e3ae4 <mbedtls_rsa_deduce_primes+0x198>
   e3a86:	f04f 0801 	mov.w	r8, #1

        for( iter = 1; iter <= order; ++iter )
        {
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
   e3a8a:	2101      	movs	r1, #1
   e3a8c:	a805      	add	r0, sp, #20
   e3a8e:	f7fc fe2c 	bl	e06ea <mbedtls_mpi_cmp_int>
   e3a92:	b930      	cbnz	r0, e3aa2 <mbedtls_rsa_deduce_primes+0x156>
         * we reached 1, or K holds primes[attempt]^(DE - 1) mod N, which must
         * be 1 if D,E,N were consistent.
         * Check if that's the case and abort if not, to avoid very long,
         * yet eventually failing, computations if N,D,E were not sane.
         */
        if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )
   e3a94:	2101      	movs	r1, #1
   e3a96:	a805      	add	r0, sp, #20
   e3a98:	f7fc fe27 	bl	e06ea <mbedtls_mpi_cmp_int>
   e3a9c:	2800      	cmp	r0, #0
   e3a9e:	d0e3      	beq.n	e3a68 <mbedtls_rsa_deduce_primes+0x11c>
   e3aa0:	e7bd      	b.n	e3a1e <mbedtls_rsa_deduce_primes+0xd2>
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
   e3aa2:	a905      	add	r1, sp, #20
   e3aa4:	2201      	movs	r2, #1
   e3aa6:	4608      	mov	r0, r1
   e3aa8:	f7fc ff12 	bl	e08d0 <mbedtls_mpi_add_int>
   e3aac:	4604      	mov	r4, r0
   e3aae:	b9c8      	cbnz	r0, e3ae4 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
   e3ab0:	4632      	mov	r2, r6
   e3ab2:	a905      	add	r1, sp, #20
   e3ab4:	4638      	mov	r0, r7
   e3ab6:	f7fd fbc4 	bl	e1242 <mbedtls_mpi_gcd>
   e3aba:	4604      	mov	r4, r0
   e3abc:	b990      	cbnz	r0, e3ae4 <mbedtls_rsa_deduce_primes+0x198>

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
   e3abe:	2101      	movs	r1, #1
   e3ac0:	4638      	mov	r0, r7
   e3ac2:	f7fc fe12 	bl	e06ea <mbedtls_mpi_cmp_int>
   e3ac6:	2801      	cmp	r0, #1
   e3ac8:	d117      	bne.n	e3afa <mbedtls_rsa_deduce_primes+0x1ae>
                mbedtls_mpi_cmp_mpi( P, N ) == -1 )
   e3aca:	4631      	mov	r1, r6
   e3acc:	4638      	mov	r0, r7
   e3ace:	f7fc fdc7 	bl	e0660 <mbedtls_mpi_cmp_mpi>
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
   e3ad2:	3001      	adds	r0, #1
   e3ad4:	d111      	bne.n	e3afa <mbedtls_rsa_deduce_primes+0x1ae>
                /*
                 * Have found a nontrivial divisor P of N.
                 * Set Q := N / P.
                 */

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
   e3ad6:	4621      	mov	r1, r4
   e3ad8:	463b      	mov	r3, r7
   e3ada:	4632      	mov	r2, r6
   e3adc:	4648      	mov	r0, r9
   e3ade:	f7fc ff9f 	bl	e0a20 <mbedtls_mpi_div_mpi>
   e3ae2:	4604      	mov	r4, r0

    ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;

cleanup:

    mbedtls_mpi_free( &K );
   e3ae4:	a805      	add	r0, sp, #20
   e3ae6:	f7fc fada 	bl	e009e <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
   e3aea:	a802      	add	r0, sp, #8
   e3aec:	f7fc fad7 	bl	e009e <mbedtls_mpi_free>
    return( ret );
   e3af0:	4620      	mov	r0, r4
   e3af2:	e021      	b.n	e3b38 <mbedtls_rsa_deduce_primes+0x1ec>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   e3af4:	f06f 0003 	mvn.w	r0, #3
   e3af8:	e01e      	b.n	e3b38 <mbedtls_rsa_deduce_primes+0x1ec>

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
                goto cleanup;
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
   e3afa:	a905      	add	r1, sp, #20
   e3afc:	2201      	movs	r2, #1
   e3afe:	4608      	mov	r0, r1
   e3b00:	f7fc fefc 	bl	e08fc <mbedtls_mpi_sub_int>
   e3b04:	4604      	mov	r4, r0
   e3b06:	2800      	cmp	r0, #0
   e3b08:	d1ec      	bne.n	e3ae4 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
   e3b0a:	aa05      	add	r2, sp, #20
   e3b0c:	4611      	mov	r1, r2
   e3b0e:	4610      	mov	r0, r2
   e3b10:	f7fc ff0a 	bl	e0928 <mbedtls_mpi_mul_mpi>
   e3b14:	4604      	mov	r4, r0
   e3b16:	2800      	cmp	r0, #0
   e3b18:	d1e4      	bne.n	e3ae4 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
   e3b1a:	a905      	add	r1, sp, #20
   e3b1c:	4632      	mov	r2, r6
   e3b1e:	4608      	mov	r0, r1
   e3b20:	f7fd f93e 	bl	e0da0 <mbedtls_mpi_mod_mpi>
   e3b24:	4604      	mov	r4, r0
   e3b26:	2800      	cmp	r0, #0
   e3b28:	d1dc      	bne.n	e3ae4 <mbedtls_rsa_deduce_primes+0x198>
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
                             Q /* temporarily use Q for storing Montgomery
                                * multiplication helper values */ ) );

        for( iter = 1; iter <= order; ++iter )
   e3b2a:	f108 0801 	add.w	r8, r8, #1
   e3b2e:	fa1f f888 	uxth.w	r8, r8
   e3b32:	45c2      	cmp	sl, r8
   e3b34:	d2a9      	bcs.n	e3a8a <mbedtls_rsa_deduce_primes+0x13e>
   e3b36:	e7ad      	b.n	e3a94 <mbedtls_rsa_deduce_primes+0x148>
cleanup:

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &T );
    return( ret );
}
   e3b38:	b016      	add	sp, #88	; 0x58
   e3b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e3b3e:	bf00      	nop
   e3b40:	000ea770 	.word	0x000ea770

000e3b44 <mbedtls_rsa_deduce_private_exponent>:
 */
int mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,
                                         mbedtls_mpi const *Q,
                                         mbedtls_mpi const *E,
                                         mbedtls_mpi *D )
{
   e3b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e3b48:	4604      	mov	r4, r0
   e3b4a:	b086      	sub	sp, #24
   e3b4c:	460e      	mov	r6, r1
   e3b4e:	4617      	mov	r7, r2
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
   e3b50:	461d      	mov	r5, r3
   e3b52:	b18b      	cbz	r3, e3b78 <mbedtls_rsa_deduce_private_exponent+0x34>
   e3b54:	2100      	movs	r1, #0
   e3b56:	4618      	mov	r0, r3
   e3b58:	f7fc fdc7 	bl	e06ea <mbedtls_mpi_cmp_int>
   e3b5c:	4680      	mov	r8, r0
   e3b5e:	b958      	cbnz	r0, e3b78 <mbedtls_rsa_deduce_private_exponent+0x34>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
   e3b60:	2101      	movs	r1, #1
   e3b62:	4620      	mov	r0, r4
   e3b64:	f7fc fdc1 	bl	e06ea <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
   e3b68:	2800      	cmp	r0, #0
   e3b6a:	dd05      	ble.n	e3b78 <mbedtls_rsa_deduce_private_exponent+0x34>
   e3b6c:	2101      	movs	r1, #1
   e3b6e:	4630      	mov	r0, r6
   e3b70:	f7fc fdbb 	bl	e06ea <mbedtls_mpi_cmp_int>
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
   e3b74:	2800      	cmp	r0, #0
   e3b76:	dc02      	bgt.n	e3b7e <mbedtls_rsa_deduce_private_exponent+0x3a>
{
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   e3b78:	f06f 0003 	mvn.w	r0, #3
   e3b7c:	e03c      	b.n	e3bf8 <mbedtls_rsa_deduce_private_exponent+0xb4>

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
   e3b7e:	4641      	mov	r1, r8
   e3b80:	4638      	mov	r0, r7
   e3b82:	f7fc fdb2 	bl	e06ea <mbedtls_mpi_cmp_int>

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
   e3b86:	2800      	cmp	r0, #0
   e3b88:	d0f6      	beq.n	e3b78 <mbedtls_rsa_deduce_private_exponent+0x34>
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    }

    mbedtls_mpi_init( &K );
   e3b8a:	4668      	mov	r0, sp
   e3b8c:	f7fc fa81 	bl	e0092 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
   e3b90:	a803      	add	r0, sp, #12
   e3b92:	f7fc fa7e 	bl	e0092 <mbedtls_mpi_init>

    /* Temporarily put K := P-1 and L := Q-1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
   e3b96:	4621      	mov	r1, r4
   e3b98:	2201      	movs	r2, #1
   e3b9a:	4668      	mov	r0, sp
   e3b9c:	f7fc feae 	bl	e08fc <mbedtls_mpi_sub_int>
   e3ba0:	4604      	mov	r4, r0
   e3ba2:	bb10      	cbnz	r0, e3bea <mbedtls_rsa_deduce_private_exponent+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
   e3ba4:	2201      	movs	r2, #1
   e3ba6:	4631      	mov	r1, r6
   e3ba8:	a803      	add	r0, sp, #12
   e3baa:	f7fc fea7 	bl	e08fc <mbedtls_mpi_sub_int>
   e3bae:	4604      	mov	r4, r0
   e3bb0:	b9d8      	cbnz	r0, e3bea <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* Temporarily put D := gcd(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
   e3bb2:	aa03      	add	r2, sp, #12
   e3bb4:	4669      	mov	r1, sp
   e3bb6:	4628      	mov	r0, r5
   e3bb8:	f7fd fb43 	bl	e1242 <mbedtls_mpi_gcd>
   e3bbc:	4604      	mov	r4, r0
   e3bbe:	b9a0      	cbnz	r0, e3bea <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* K := LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
   e3bc0:	aa03      	add	r2, sp, #12
   e3bc2:	4669      	mov	r1, sp
   e3bc4:	4668      	mov	r0, sp
   e3bc6:	f7fc feaf 	bl	e0928 <mbedtls_mpi_mul_mpi>
   e3bca:	4604      	mov	r4, r0
   e3bcc:	b968      	cbnz	r0, e3bea <mbedtls_rsa_deduce_private_exponent+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
   e3bce:	4601      	mov	r1, r0
   e3bd0:	462b      	mov	r3, r5
   e3bd2:	466a      	mov	r2, sp
   e3bd4:	4668      	mov	r0, sp
   e3bd6:	f7fc ff23 	bl	e0a20 <mbedtls_mpi_div_mpi>
   e3bda:	4604      	mov	r4, r0
   e3bdc:	b928      	cbnz	r0, e3bea <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* Compute modular inverse of E in LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );
   e3bde:	466a      	mov	r2, sp
   e3be0:	4639      	mov	r1, r7
   e3be2:	4628      	mov	r0, r5
   e3be4:	f7fd fbe6 	bl	e13b4 <mbedtls_mpi_inv_mod>
   e3be8:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &K );
   e3bea:	4668      	mov	r0, sp
   e3bec:	f7fc fa57 	bl	e009e <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
   e3bf0:	a803      	add	r0, sp, #12
   e3bf2:	f7fc fa54 	bl	e009e <mbedtls_mpi_free>

    return( ret );
   e3bf6:	4620      	mov	r0, r4
}
   e3bf8:	b006      	add	sp, #24
   e3bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000e3c00 <mbedtls_rsa_validate_crt>:
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
   e3c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e3c04:	b087      	sub	sp, #28
   e3c06:	4604      	mov	r4, r0
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
   e3c08:	4668      	mov	r0, sp
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
   e3c0a:	4699      	mov	r9, r3
   e3c0c:	460d      	mov	r5, r1
   e3c0e:	4690      	mov	r8, r2
   e3c10:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   e3c12:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
   e3c14:	f7fc fa3d 	bl	e0092 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
   e3c18:	a803      	add	r0, sp, #12
   e3c1a:	f7fc fa3a 	bl	e0092 <mbedtls_mpi_init>

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
   e3c1e:	f1b9 0f00 	cmp.w	r9, #0
   e3c22:	d101      	bne.n	e3c28 <mbedtls_rsa_validate_crt+0x28>
            goto cleanup;
        }
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
   e3c24:	b9f7      	cbnz	r7, e3c64 <mbedtls_rsa_validate_crt+0x64>
   e3c26:	e035      	b.n	e3c94 <mbedtls_rsa_validate_crt+0x94>
    mbedtls_mpi_init( &L );

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
    {
        if( P == NULL )
   e3c28:	2c00      	cmp	r4, #0
   e3c2a:	d058      	beq.n	e3cde <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
   e3c2c:	2201      	movs	r2, #1
   e3c2e:	4621      	mov	r1, r4
   e3c30:	4668      	mov	r0, sp
   e3c32:	f7fc fe63 	bl	e08fc <mbedtls_mpi_sub_int>
   e3c36:	2800      	cmp	r0, #0
   e3c38:	d148      	bne.n	e3ccc <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
   e3c3a:	4642      	mov	r2, r8
   e3c3c:	4649      	mov	r1, r9
   e3c3e:	a803      	add	r0, sp, #12
   e3c40:	f7fc fe24 	bl	e088c <mbedtls_mpi_sub_mpi>
   e3c44:	2800      	cmp	r0, #0
   e3c46:	d141      	bne.n	e3ccc <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
   e3c48:	a903      	add	r1, sp, #12
   e3c4a:	466a      	mov	r2, sp
   e3c4c:	4608      	mov	r0, r1
   e3c4e:	f7fd f8a7 	bl	e0da0 <mbedtls_mpi_mod_mpi>
   e3c52:	2800      	cmp	r0, #0
   e3c54:	d13a      	bne.n	e3ccc <mbedtls_rsa_validate_crt+0xcc>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
   e3c56:	4601      	mov	r1, r0
   e3c58:	a803      	add	r0, sp, #12
   e3c5a:	f7fc fd46 	bl	e06ea <mbedtls_mpi_cmp_int>
   e3c5e:	2800      	cmp	r0, #0
   e3c60:	d13f      	bne.n	e3ce2 <mbedtls_rsa_validate_crt+0xe2>
   e3c62:	e7df      	b.n	e3c24 <mbedtls_rsa_validate_crt+0x24>
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
    {
        if( Q == NULL )
   e3c64:	b3dd      	cbz	r5, e3cde <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
   e3c66:	2201      	movs	r2, #1
   e3c68:	4629      	mov	r1, r5
   e3c6a:	4668      	mov	r0, sp
   e3c6c:	f7fc fe46 	bl	e08fc <mbedtls_mpi_sub_int>
   e3c70:	bb60      	cbnz	r0, e3ccc <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
   e3c72:	4642      	mov	r2, r8
   e3c74:	4639      	mov	r1, r7
   e3c76:	a803      	add	r0, sp, #12
   e3c78:	f7fc fe08 	bl	e088c <mbedtls_mpi_sub_mpi>
   e3c7c:	bb30      	cbnz	r0, e3ccc <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
   e3c7e:	a903      	add	r1, sp, #12
   e3c80:	466a      	mov	r2, sp
   e3c82:	4608      	mov	r0, r1
   e3c84:	f7fd f88c 	bl	e0da0 <mbedtls_mpi_mod_mpi>
   e3c88:	bb00      	cbnz	r0, e3ccc <mbedtls_rsa_validate_crt+0xcc>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
   e3c8a:	4601      	mov	r1, r0
   e3c8c:	a803      	add	r0, sp, #12
   e3c8e:	f7fc fd2c 	bl	e06ea <mbedtls_mpi_cmp_int>
   e3c92:	bb30      	cbnz	r0, e3ce2 <mbedtls_rsa_validate_crt+0xe2>
            goto cleanup;
        }
    }

    /* Check that QP * Q - 1 == 0 mod P */
    if( QP != NULL )
   e3c94:	b1c6      	cbz	r6, e3cc8 <mbedtls_rsa_validate_crt+0xc8>
    {
        if( P == NULL || Q == NULL )
   e3c96:	b314      	cbz	r4, e3cde <mbedtls_rsa_validate_crt+0xde>
   e3c98:	b30d      	cbz	r5, e3cde <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
   e3c9a:	462a      	mov	r2, r5
   e3c9c:	4631      	mov	r1, r6
   e3c9e:	4668      	mov	r0, sp
   e3ca0:	f7fc fe42 	bl	e0928 <mbedtls_mpi_mul_mpi>
   e3ca4:	b990      	cbnz	r0, e3ccc <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
   e3ca6:	2201      	movs	r2, #1
   e3ca8:	4669      	mov	r1, sp
   e3caa:	4668      	mov	r0, sp
   e3cac:	f7fc fe26 	bl	e08fc <mbedtls_mpi_sub_int>
   e3cb0:	b960      	cbnz	r0, e3ccc <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
   e3cb2:	4622      	mov	r2, r4
   e3cb4:	4669      	mov	r1, sp
   e3cb6:	4668      	mov	r0, sp
   e3cb8:	f7fd f872 	bl	e0da0 <mbedtls_mpi_mod_mpi>
   e3cbc:	b930      	cbnz	r0, e3ccc <mbedtls_rsa_validate_crt+0xcc>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
   e3cbe:	4601      	mov	r1, r0
   e3cc0:	4668      	mov	r0, sp
   e3cc2:	f7fc fd12 	bl	e06ea <mbedtls_mpi_cmp_int>
   e3cc6:	b960      	cbnz	r0, e3ce2 <mbedtls_rsa_validate_crt+0xe2>
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
   e3cc8:	2400      	movs	r4, #0
   e3cca:	e00b      	b.n	e3ce4 <mbedtls_rsa_validate_crt+0xe4>
    }

cleanup:

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 &&
   e3ccc:	f510 4f84 	cmn.w	r0, #16896	; 0x4200
   e3cd0:	d007      	beq.n	e3ce2 <mbedtls_rsa_validate_crt+0xe2>
        ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&
   e3cd2:	f510 4f81 	cmn.w	r0, #16512	; 0x4080
   e3cd6:	d002      	beq.n	e3cde <mbedtls_rsa_validate_crt+0xde>
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   e3cd8:	f5a0 4484 	sub.w	r4, r0, #16896	; 0x4200
   e3cdc:	e002      	b.n	e3ce4 <mbedtls_rsa_validate_crt+0xe4>
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
   e3cde:	4c06      	ldr	r4, [pc, #24]	; (e3cf8 <mbedtls_rsa_validate_crt+0xf8>)
   e3ce0:	e000      	b.n	e3ce4 <mbedtls_rsa_validate_crt+0xe4>
   e3ce2:	4c06      	ldr	r4, [pc, #24]	; (e3cfc <mbedtls_rsa_validate_crt+0xfc>)
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    mbedtls_mpi_free( &K );
   e3ce4:	4668      	mov	r0, sp
   e3ce6:	f7fc f9da 	bl	e009e <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
   e3cea:	a803      	add	r0, sp, #12
   e3cec:	f7fc f9d7 	bl	e009e <mbedtls_mpi_free>

    return( ret );
}
   e3cf0:	4620      	mov	r0, r4
   e3cf2:	b007      	add	sp, #28
   e3cf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e3cf8:	ffffbf80 	.word	0xffffbf80
   e3cfc:	ffffbe00 	.word	0xffffbe00

000e3d00 <mbedtls_rsa_validate_params>:
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
   e3d00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e3d04:	b087      	sub	sp, #28
   e3d06:	4605      	mov	r5, r0
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
   e3d08:	4668      	mov	r0, sp
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
   e3d0a:	4688      	mov	r8, r1
   e3d0c:	4691      	mov	r9, r2
   e3d0e:	461e      	mov	r6, r3
   e3d10:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
   e3d12:	f7fc f9be 	bl	e0092 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
   e3d16:	a803      	add	r0, sp, #12
   e3d18:	f7fc f9bb 	bl	e0092 <mbedtls_mpi_init>

    /*
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
   e3d1c:	f1b8 0f00 	cmp.w	r8, #0
   e3d20:	d018      	beq.n	e3d54 <mbedtls_rsa_validate_params+0x54>
   e3d22:	f1b9 0f00 	cmp.w	r9, #0
   e3d26:	d015      	beq.n	e3d54 <mbedtls_rsa_validate_params+0x54>
   e3d28:	b90d      	cbnz	r5, e3d2e <mbedtls_rsa_validate_params+0x2e>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
   e3d2a:	b9de      	cbnz	r6, e3d64 <mbedtls_rsa_validate_params+0x64>
   e3d2c:	e018      	b.n	e3d60 <mbedtls_rsa_validate_params+0x60>
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
   e3d2e:	464a      	mov	r2, r9
   e3d30:	4641      	mov	r1, r8
   e3d32:	4668      	mov	r0, sp
   e3d34:	f7fc fdf8 	bl	e0928 <mbedtls_mpi_mul_mpi>
   e3d38:	4604      	mov	r4, r0
   e3d3a:	bb68      	cbnz	r0, e3d98 <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
   e3d3c:	2101      	movs	r1, #1
   e3d3e:	4628      	mov	r0, r5
   e3d40:	f7fc fcd3 	bl	e06ea <mbedtls_mpi_cmp_int>
   e3d44:	2800      	cmp	r0, #0
   e3d46:	dd26      	ble.n	e3d96 <mbedtls_rsa_validate_params+0x96>
            mbedtls_mpi_cmp_mpi( &K, N ) != 0 )
   e3d48:	4629      	mov	r1, r5
   e3d4a:	4668      	mov	r0, sp
   e3d4c:	f7fc fc88 	bl	e0660 <mbedtls_mpi_cmp_mpi>
     */

    if( P != NULL && Q != NULL && N != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
   e3d50:	bb08      	cbnz	r0, e3d96 <mbedtls_rsa_validate_params+0x96>
   e3d52:	e016      	b.n	e3d82 <mbedtls_rsa_validate_params+0x82>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
   e3d54:	b125      	cbz	r5, e3d60 <mbedtls_rsa_validate_params+0x60>
   e3d56:	b9b6      	cbnz	r6, e3d86 <mbedtls_rsa_validate_params+0x86>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
   e3d58:	f1b8 0f00 	cmp.w	r8, #0
   e3d5c:	f040 808a 	bne.w	e3e74 <mbedtls_rsa_validate_params+0x174>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   e3d60:	2400      	movs	r4, #0
   e3d62:	e019      	b.n	e3d98 <mbedtls_rsa_validate_params+0x98>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
   e3d64:	2f00      	cmp	r7, #0
   e3d66:	d0fb      	beq.n	e3d60 <mbedtls_rsa_validate_params+0x60>
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
   e3d68:	2101      	movs	r1, #1
   e3d6a:	4640      	mov	r0, r8
   e3d6c:	f7fc fcbd 	bl	e06ea <mbedtls_mpi_cmp_int>
   e3d70:	2800      	cmp	r0, #0
   e3d72:	dd10      	ble.n	e3d96 <mbedtls_rsa_validate_params+0x96>
            mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )
   e3d74:	2101      	movs	r1, #1
   e3d76:	4648      	mov	r0, r9
   e3d78:	f7fc fcb7 	bl	e06ea <mbedtls_mpi_cmp_int>
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
   e3d7c:	2800      	cmp	r0, #0
   e3d7e:	dc19      	bgt.n	e3db4 <mbedtls_rsa_validate_params+0xb4>
   e3d80:	e009      	b.n	e3d96 <mbedtls_rsa_validate_params+0x96>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
   e3d82:	2e00      	cmp	r6, #0
   e3d84:	d0ec      	beq.n	e3d60 <mbedtls_rsa_validate_params+0x60>
   e3d86:	2f00      	cmp	r7, #0
   e3d88:	d0e6      	beq.n	e3d58 <mbedtls_rsa_validate_params+0x58>
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
   e3d8a:	2101      	movs	r1, #1
   e3d8c:	4630      	mov	r0, r6
   e3d8e:	f7fc fcac 	bl	e06ea <mbedtls_mpi_cmp_int>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   e3d92:	2800      	cmp	r0, #0
   e3d94:	dc5b      	bgt.n	e3e4e <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   e3d96:	4c3c      	ldr	r4, [pc, #240]	; (e3e88 <mbedtls_rsa_validate_params+0x188>)
        }
    }

cleanup:

    mbedtls_mpi_free( &K );
   e3d98:	4668      	mov	r0, sp
   e3d9a:	f7fc f980 	bl	e009e <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
   e3d9e:	a803      	add	r0, sp, #12
   e3da0:	f7fc f97d 	bl	e009e <mbedtls_mpi_free>

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
   e3da4:	2c00      	cmp	r4, #0
   e3da6:	d06a      	beq.n	e3e7e <mbedtls_rsa_validate_params+0x17e>
   e3da8:	f514 4f84 	cmn.w	r4, #16896	; 0x4200
   e3dac:	d067      	beq.n	e3e7e <mbedtls_rsa_validate_params+0x17e>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   e3dae:	f5a4 4484 	sub.w	r4, r4, #16896	; 0x4200
    }

    return( ret );
   e3db2:	e064      	b.n	e3e7e <mbedtls_rsa_validate_params+0x17e>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod P-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
   e3db4:	463a      	mov	r2, r7
   e3db6:	4631      	mov	r1, r6
   e3db8:	4668      	mov	r0, sp
   e3dba:	f7fc fdb5 	bl	e0928 <mbedtls_mpi_mul_mpi>
   e3dbe:	4604      	mov	r4, r0
   e3dc0:	2800      	cmp	r0, #0
   e3dc2:	d1e9      	bne.n	e3d98 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
   e3dc4:	2201      	movs	r2, #1
   e3dc6:	4669      	mov	r1, sp
   e3dc8:	4668      	mov	r0, sp
   e3dca:	f7fc fd97 	bl	e08fc <mbedtls_mpi_sub_int>
   e3dce:	4604      	mov	r4, r0
   e3dd0:	2800      	cmp	r0, #0
   e3dd2:	d1e1      	bne.n	e3d98 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
   e3dd4:	2201      	movs	r2, #1
   e3dd6:	4641      	mov	r1, r8
   e3dd8:	a803      	add	r0, sp, #12
   e3dda:	f7fc fd8f 	bl	e08fc <mbedtls_mpi_sub_int>
   e3dde:	4604      	mov	r4, r0
   e3de0:	2800      	cmp	r0, #0
   e3de2:	d1d9      	bne.n	e3d98 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
   e3de4:	aa03      	add	r2, sp, #12
   e3de6:	4669      	mov	r1, sp
   e3de8:	4668      	mov	r0, sp
   e3dea:	f7fc ffd9 	bl	e0da0 <mbedtls_mpi_mod_mpi>
   e3dee:	4604      	mov	r4, r0
   e3df0:	2800      	cmp	r0, #0
   e3df2:	d1d1      	bne.n	e3d98 <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
   e3df4:	4601      	mov	r1, r0
   e3df6:	4668      	mov	r0, sp
   e3df8:	f7fc fc77 	bl	e06ea <mbedtls_mpi_cmp_int>
   e3dfc:	2800      	cmp	r0, #0
   e3dfe:	d1ca      	bne.n	e3d96 <mbedtls_rsa_validate_params+0x96>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod Q-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
   e3e00:	463a      	mov	r2, r7
   e3e02:	4631      	mov	r1, r6
   e3e04:	4668      	mov	r0, sp
   e3e06:	f7fc fd8f 	bl	e0928 <mbedtls_mpi_mul_mpi>
   e3e0a:	4604      	mov	r4, r0
   e3e0c:	2800      	cmp	r0, #0
   e3e0e:	d1c3      	bne.n	e3d98 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
   e3e10:	2201      	movs	r2, #1
   e3e12:	4669      	mov	r1, sp
   e3e14:	4668      	mov	r0, sp
   e3e16:	f7fc fd71 	bl	e08fc <mbedtls_mpi_sub_int>
   e3e1a:	4604      	mov	r4, r0
   e3e1c:	2800      	cmp	r0, #0
   e3e1e:	d1bb      	bne.n	e3d98 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
   e3e20:	2201      	movs	r2, #1
   e3e22:	4649      	mov	r1, r9
   e3e24:	a803      	add	r0, sp, #12
   e3e26:	f7fc fd69 	bl	e08fc <mbedtls_mpi_sub_int>
   e3e2a:	4604      	mov	r4, r0
   e3e2c:	2800      	cmp	r0, #0
   e3e2e:	d1b3      	bne.n	e3d98 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
   e3e30:	aa03      	add	r2, sp, #12
   e3e32:	4669      	mov	r1, sp
   e3e34:	4668      	mov	r0, sp
   e3e36:	f7fc ffb3 	bl	e0da0 <mbedtls_mpi_mod_mpi>
   e3e3a:	4604      	mov	r4, r0
   e3e3c:	2800      	cmp	r0, #0
   e3e3e:	d1ab      	bne.n	e3d98 <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
   e3e40:	4601      	mov	r1, r0
   e3e42:	4668      	mov	r0, sp
   e3e44:	f7fc fc51 	bl	e06ea <mbedtls_mpi_cmp_int>
   e3e48:	2800      	cmp	r0, #0
   e3e4a:	d089      	beq.n	e3d60 <mbedtls_rsa_validate_params+0x60>
   e3e4c:	e7a3      	b.n	e3d96 <mbedtls_rsa_validate_params+0x96>
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   e3e4e:	2101      	movs	r1, #1
   e3e50:	4638      	mov	r0, r7
   e3e52:	f7fc fc4a 	bl	e06ea <mbedtls_mpi_cmp_int>
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
   e3e56:	2800      	cmp	r0, #0
   e3e58:	dd9d      	ble.n	e3d96 <mbedtls_rsa_validate_params+0x96>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   e3e5a:	4629      	mov	r1, r5
   e3e5c:	4630      	mov	r0, r6
   e3e5e:	f7fc fbff 	bl	e0660 <mbedtls_mpi_cmp_mpi>
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   e3e62:	2800      	cmp	r0, #0
   e3e64:	da97      	bge.n	e3d96 <mbedtls_rsa_validate_params+0x96>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
             mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
   e3e66:	4629      	mov	r1, r5
   e3e68:	4638      	mov	r0, r7
   e3e6a:	f7fc fbf9 	bl	e0660 <mbedtls_mpi_cmp_mpi>

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   e3e6e:	2800      	cmp	r0, #0
   e3e70:	da91      	bge.n	e3d96 <mbedtls_rsa_validate_params+0x96>
   e3e72:	e771      	b.n	e3d58 <mbedtls_rsa_validate_params+0x58>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
   e3e74:	f1b9 0f00 	cmp.w	r9, #0
   e3e78:	f47f af57 	bne.w	e3d2a <mbedtls_rsa_validate_params+0x2a>
   e3e7c:	e770      	b.n	e3d60 <mbedtls_rsa_validate_params+0x60>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    return( ret );
}
   e3e7e:	4620      	mov	r0, r4
   e3e80:	b007      	add	sp, #28
   e3e82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e3e86:	bf00      	nop
   e3e88:	ffffbe00 	.word	0xffffbe00

000e3e8c <mbedtls_rsa_deduce_crt>:

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
   e3e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   e3e90:	4607      	mov	r7, r0
   e3e92:	469a      	mov	sl, r3
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
   e3e94:	a801      	add	r0, sp, #4
}

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
   e3e96:	460e      	mov	r6, r1
   e3e98:	4691      	mov	r9, r2
   e3e9a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   e3e9e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
   e3ea0:	f7fc f8f7 	bl	e0092 <mbedtls_mpi_init>

    /* DP = D mod P-1 */
    if( DP != NULL )
   e3ea4:	f1ba 0f00 	cmp.w	sl, #0
   e3ea8:	d103      	bne.n	e3eb2 <mbedtls_rsa_deduce_crt+0x26>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
   e3eaa:	f1b8 0f00 	cmp.w	r8, #0
   e3eae:	d110      	bne.n	e3ed2 <mbedtls_rsa_deduce_crt+0x46>
   e3eb0:	e01d      	b.n	e3eee <mbedtls_rsa_deduce_crt+0x62>
    mbedtls_mpi_init( &K );

    /* DP = D mod P-1 */
    if( DP != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
   e3eb2:	2201      	movs	r2, #1
   e3eb4:	4639      	mov	r1, r7
   e3eb6:	a801      	add	r0, sp, #4
   e3eb8:	f7fc fd20 	bl	e08fc <mbedtls_mpi_sub_int>
   e3ebc:	4604      	mov	r4, r0
   e3ebe:	b9f8      	cbnz	r0, e3f00 <mbedtls_rsa_deduce_crt+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
   e3ec0:	aa01      	add	r2, sp, #4
   e3ec2:	4649      	mov	r1, r9
   e3ec4:	4650      	mov	r0, sl
   e3ec6:	f7fc ff6b 	bl	e0da0 <mbedtls_mpi_mod_mpi>
   e3eca:	4604      	mov	r4, r0
   e3ecc:	2800      	cmp	r0, #0
   e3ece:	d0ec      	beq.n	e3eaa <mbedtls_rsa_deduce_crt+0x1e>
   e3ed0:	e016      	b.n	e3f00 <mbedtls_rsa_deduce_crt+0x74>
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
   e3ed2:	2201      	movs	r2, #1
   e3ed4:	4631      	mov	r1, r6
   e3ed6:	a801      	add	r0, sp, #4
   e3ed8:	f7fc fd10 	bl	e08fc <mbedtls_mpi_sub_int>
   e3edc:	4604      	mov	r4, r0
   e3ede:	b978      	cbnz	r0, e3f00 <mbedtls_rsa_deduce_crt+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
   e3ee0:	aa01      	add	r2, sp, #4
   e3ee2:	4649      	mov	r1, r9
   e3ee4:	4640      	mov	r0, r8
   e3ee6:	f7fc ff5b 	bl	e0da0 <mbedtls_mpi_mod_mpi>
   e3eea:	4604      	mov	r4, r0
   e3eec:	b940      	cbnz	r0, e3f00 <mbedtls_rsa_deduce_crt+0x74>
    }

    /* QP = Q^{-1} mod P */
    if( QP != NULL )
   e3eee:	b90d      	cbnz	r5, e3ef4 <mbedtls_rsa_deduce_crt+0x68>
   e3ef0:	462c      	mov	r4, r5
   e3ef2:	e005      	b.n	e3f00 <mbedtls_rsa_deduce_crt+0x74>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
   e3ef4:	463a      	mov	r2, r7
   e3ef6:	4631      	mov	r1, r6
   e3ef8:	4628      	mov	r0, r5
   e3efa:	f7fd fa5b 	bl	e13b4 <mbedtls_mpi_inv_mod>
   e3efe:	4604      	mov	r4, r0
    }

cleanup:
    mbedtls_mpi_free( &K );
   e3f00:	a801      	add	r0, sp, #4
   e3f02:	f7fc f8cc 	bl	e009e <mbedtls_mpi_free>

    return( ret );
}
   e3f06:	4620      	mov	r0, r4
   e3f08:	b004      	add	sp, #16
   e3f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000e3f0e <mbedtls_ssl_own_key>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static inline mbedtls_pk_context *mbedtls_ssl_own_key( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
   e3f0e:	6b03      	ldr	r3, [r0, #48]	; 0x30
   e3f10:	b113      	cbz	r3, e3f18 <mbedtls_ssl_own_key+0xa>
   e3f12:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   e3f16:	b913      	cbnz	r3, e3f1e <mbedtls_ssl_own_key+0x10>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
   e3f18:	6803      	ldr	r3, [r0, #0]
   e3f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50

    return( key_cert == NULL ? NULL : key_cert->key );
   e3f1c:	b10b      	cbz	r3, e3f22 <mbedtls_ssl_own_key+0x14>
   e3f1e:	6858      	ldr	r0, [r3, #4]
   e3f20:	4770      	bx	lr
   e3f22:	4618      	mov	r0, r3
}
   e3f24:	4770      	bx	lr
	...

000e3f28 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj>:
 * Generate a pre-master secret and encrypt it with the server's RSA key
 */
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
   e3f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e3f2c:	4617      	mov	r7, r2
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
   e3f2e:	68c2      	ldr	r2, [r0, #12]
    unsigned char *p = ssl->handshake->premaster + pms_offset;
   e3f30:	6b05      	ldr	r5, [r0, #48]	; 0x30
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
   e3f32:	2a00      	cmp	r2, #0
   e3f34:	bf0c      	ite	eq
   e3f36:	f04f 0800 	moveq.w	r8, #0
   e3f3a:	f04f 0802 	movne.w	r8, #2
    unsigned char *p = ssl->handshake->premaster + pms_offset;

    if( offset + len_bytes > MBEDTLS_SSL_OUT_CONTENT_LEN )
   e3f3e:	eb08 0901 	add.w	r9, r8, r1
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
    unsigned char *p = ssl->handshake->premaster + pms_offset;
   e3f42:	f505 753d 	add.w	r5, r5, #756	; 0x2f4

    if( offset + len_bytes > MBEDTLS_SSL_OUT_CONTENT_LEN )
   e3f46:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
 * Generate a pre-master secret and encrypt it with the server's RSA key
 */
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
   e3f4a:	b086      	sub	sp, #24
   e3f4c:	4604      	mov	r4, r0
   e3f4e:	460e      	mov	r6, r1
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
    unsigned char *p = ssl->handshake->premaster + pms_offset;
   e3f50:	441d      	add	r5, r3

    if( offset + len_bytes > MBEDTLS_SSL_OUT_CONTENT_LEN )
   e3f52:	d84d      	bhi.n	e3ff0 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xc8>
     *  struct {
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
   e3f54:	6800      	ldr	r0, [r0, #0]
                       ssl->conf->transport, p );
   e3f56:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
   e3f5a:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
   e3f5e:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
   e3f62:	462b      	mov	r3, r5
   e3f64:	f3c2 0240 	ubfx	r2, r2, #1, #1
   e3f68:	f7fb ff40 	bl	dfdec <mbedtls_ssl_write_version>

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
   e3f6c:	6823      	ldr	r3, [r4, #0]
   e3f6e:	222e      	movs	r2, #46	; 0x2e
   e3f70:	f8d3 a018 	ldr.w	sl, [r3, #24]
   e3f74:	69d8      	ldr	r0, [r3, #28]
   e3f76:	1ca9      	adds	r1, r5, #2
   e3f78:	47d0      	blx	sl
   e3f7a:	2800      	cmp	r0, #0
   e3f7c:	d13d      	bne.n	e3ffa <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd2>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "f_rng", ret );
        return( ret );
    }

    ssl->handshake->pmslen = 48;
   e3f7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e3f80:	2230      	movs	r2, #48	; 0x30
   e3f82:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0

    if( ssl->session_negotiate->peer_cert == NULL )
   e3f86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e3f88:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e3f8a:	2800      	cmp	r0, #0
   e3f8c:	d032      	beq.n	e3ff4 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xcc>
    }

    /*
     * Now write it out, encrypted
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
   e3f8e:	2101      	movs	r1, #1
   e3f90:	30bc      	adds	r0, #188	; 0xbc
   e3f92:	f7fa f899 	bl	de0c8 <mbedtls_pk_can_do>
   e3f96:	2800      	cmp	r0, #0
   e3f98:	d02e      	beq.n	e3ff8 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd0>

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
                            p, ssl->handshake->pmslen,
                            ssl->out_msg + offset + len_bytes, olen,
                            MBEDTLS_SSL_OUT_CONTENT_LEN - offset - len_bytes,
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
   e3f9a:	6822      	ldr	r2, [r4, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
    }

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
   e3f9c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e3fa0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e3fa2:	9305      	str	r3, [sp, #20]
   e3fa4:	69d3      	ldr	r3, [r2, #28]
   e3fa6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   e3fa8:	9303      	str	r3, [sp, #12]
   e3faa:	6992      	ldr	r2, [r2, #24]
   e3fac:	9202      	str	r2, [sp, #8]
   e3fae:	f5c6 5200 	rsb	r2, r6, #8192	; 0x2000
   e3fb2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   e3fb4:	9b05      	ldr	r3, [sp, #20]
   e3fb6:	9700      	str	r7, [sp, #0]
   e3fb8:	ebc8 0202 	rsb	r2, r8, r2
   e3fbc:	9201      	str	r2, [sp, #4]
   e3fbe:	f8d1 22b0 	ldr.w	r2, [r1, #688]	; 0x2b0
   e3fc2:	444b      	add	r3, r9
   e3fc4:	4629      	mov	r1, r5
   e3fc6:	30bc      	adds	r0, #188	; 0xbc
   e3fc8:	f7fa f8f0 	bl	de1ac <mbedtls_pk_encrypt>
   e3fcc:	b9a8      	cbnz	r0, e3ffa <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd2>
        return( ret );
    }

#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( len_bytes == 2 )
   e3fce:	f1b8 0f00 	cmp.w	r8, #0
   e3fd2:	d012      	beq.n	e3ffa <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd2>
    {
        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );
   e3fd4:	683b      	ldr	r3, [r7, #0]
   e3fd6:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e3fda:	0a1b      	lsrs	r3, r3, #8
   e3fdc:	5593      	strb	r3, [r2, r6]
        ssl->out_msg[offset+1] = (unsigned char)( *olen      );
   e3fde:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e3fe2:	441e      	add	r6, r3
   e3fe4:	683b      	ldr	r3, [r7, #0]
   e3fe6:	7073      	strb	r3, [r6, #1]
        *olen += 2;
   e3fe8:	683b      	ldr	r3, [r7, #0]
   e3fea:	3302      	adds	r3, #2
   e3fec:	603b      	str	r3, [r7, #0]
   e3fee:	e004      	b.n	e3ffa <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd2>
    unsigned char *p = ssl->handshake->premaster + pms_offset;

    if( offset + len_bytes > MBEDTLS_SSL_OUT_CONTENT_LEN )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small for encrypted pms" ) );
        return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
   e3ff0:	4803      	ldr	r0, [pc, #12]	; (e4000 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd8>)
   e3ff2:	e002      	b.n	e3ffa <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd2>
    ssl->handshake->pmslen = 48;

    if( ssl->session_negotiate->peer_cert == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   e3ff4:	4803      	ldr	r0, [pc, #12]	; (e4004 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xdc>)
   e3ff6:	e000      	b.n	e3ffa <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd2>
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
                MBEDTLS_PK_RSA ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
   e3ff8:	4803      	ldr	r0, [pc, #12]	; (e4008 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xe0>)
        *olen += 2;
    }
#endif

    return( 0 );
}
   e3ffa:	b006      	add	sp, #24
   e3ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e4000:	ffff9600 	.word	0xffff9600
   e4004:	ffff8900 	.word	0xffff8900
   e4008:	ffff9300 	.word	0xffff9300

000e400c <mbedtls_ssl_handshake_client_step>:

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
   e400c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
   e4010:	6843      	ldr	r3, [r0, #4]
   e4012:	2b10      	cmp	r3, #16

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
   e4014:	b09f      	sub	sp, #124	; 0x7c
   e4016:	4604      	mov	r4, r0
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
   e4018:	f000 808e 	beq.w	e4138 <mbedtls_ssl_handshake_client_step+0x12c>
   e401c:	6b03      	ldr	r3, [r0, #48]	; 0x30
   e401e:	2b00      	cmp	r3, #0
   e4020:	f000 808a 	beq.w	e4138 <mbedtls_ssl_handshake_client_step+0x12c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "client state: %d", ssl->state ) );

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
   e4024:	f7fa fd10 	bl	dea48 <mbedtls_ssl_flush_output>
   e4028:	4605      	mov	r5, r0
   e402a:	2800      	cmp	r0, #0
   e402c:	f040 869e 	bne.w	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
   e4030:	6863      	ldr	r3, [r4, #4]
   e4032:	2b0c      	cmp	r3, #12
   e4034:	d105      	bne.n	e4042 <mbedtls_ssl_handshake_client_step+0x36>
        ssl->handshake->new_session_ticket != 0 )
   e4036:	6b23      	ldr	r3, [r4, #48]	; 0x30
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
   e4038:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
   e403c:	b10b      	cbz	r3, e4042 <mbedtls_ssl_handshake_client_step+0x36>
        ssl->handshake->new_session_ticket != 0 )
    {
        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;
   e403e:	2311      	movs	r3, #17
   e4040:	6063      	str	r3, [r4, #4]
    }
#endif

    switch( ssl->state )
   e4042:	6863      	ldr	r3, [r4, #4]
   e4044:	2b11      	cmp	r3, #17
   e4046:	d877      	bhi.n	e4138 <mbedtls_ssl_handshake_client_step+0x12c>
   e4048:	e8df f013 	tbh	[pc, r3, lsl #1]
   e404c:	00170012 	.word	0x00170012
   e4050:	00e20051 	.word	0x00e20051
   e4054:	01bb00e8 	.word	0x01bb00e8
   e4058:	01ce01a2 	.word	0x01ce01a2
   e405c:	026101d2 	.word	0x026101d2
   e4060:	02e102dd 	.word	0x02e102dd
   e4064:	030202fe 	.word	0x030202fe
   e4068:	03080306 	.word	0x03080306
   e406c:	02e50076 	.word	0x02e50076
    {
        case MBEDTLS_SSL_HELLO_REQUEST:
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
   e4070:	2201      	movs	r2, #1
   e4072:	6062      	str	r2, [r4, #4]
            break;
   e4074:	461d      	mov	r5, r3
   e4076:	f000 be79 	b.w	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
    int uses_ec = 0;
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );

    if( ssl->conf->f_rng == NULL )
   e407a:	6821      	ldr	r1, [r4, #0]
   e407c:	698b      	ldr	r3, [r1, #24]
   e407e:	2b00      	cmp	r3, #0
   e4080:	f000 82f0 	beq.w	e4664 <mbedtls_ssl_handshake_client_step+0x658>

#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        ssl->major_ver = ssl->conf->min_major_ver;
   e4084:	f891 307a 	ldrb.w	r3, [r1, #122]	; 0x7a
   e4088:	60a3      	str	r3, [r4, #8]
        ssl->minor_ver = ssl->conf->min_minor_ver;
   e408a:	f891 307b 	ldrb.w	r3, [r1, #123]	; 0x7b
   e408e:	60e3      	str	r3, [r4, #12]
    }

    if( ssl->conf->max_major_ver == 0 )
   e4090:	f891 0078 	ldrb.w	r0, [r1, #120]	; 0x78
   e4094:	2800      	cmp	r0, #0
   e4096:	d04f      	beq.n	e4138 <mbedtls_ssl_handshake_client_step+0x12c>
     */
    buf = ssl->out_msg;
    p = buf + 4;

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
   e4098:	f891 207c 	ldrb.w	r2, [r1, #124]	; 0x7c
     *     1  .   3   handshake length
     *     4  .   5   highest version supported
     *     6  .   9   current UNIX time
     *    10  .  37   random bytes
     */
    buf = ssl->out_msg;
   e409c:	f8d4 9098 	ldr.w	r9, [r4, #152]	; 0x98
    p = buf + 4;

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
   e40a0:	f891 1079 	ldrb.w	r1, [r1, #121]	; 0x79
   e40a4:	f109 0304 	add.w	r3, r9, #4
   e40a8:	f3c2 0240 	ubfx	r2, r2, #1, #1
   e40ac:	f7fb fe9e 	bl	dfdec <mbedtls_ssl_write_version>
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
   e40b0:	6823      	ldr	r3, [r4, #0]
 * Generate random bytes for ClientHello
 */
static int ssl_generate_random( mbedtls_ssl_context *ssl )
{
    int ret;
    unsigned char *p = ssl->handshake->randbytes;
   e40b2:	6b26      	ldr	r6, [r4, #48]	; 0x30
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
   e40b4:	699d      	ldr	r5, [r3, #24]
   e40b6:	69d8      	ldr	r0, [r3, #28]
   e40b8:	2204      	movs	r2, #4
   e40ba:	f506 712d 	add.w	r1, r6, #692	; 0x2b4
   e40be:	47a8      	blx	r5
   e40c0:	4605      	mov	r5, r0
   e40c2:	2800      	cmp	r0, #0
   e40c4:	f040 8652 	bne.w	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
        return( ret );

    p += 4;
#endif /* MBEDTLS_HAVE_TIME */

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
   e40c8:	6823      	ldr	r3, [r4, #0]
   e40ca:	221c      	movs	r2, #28
   e40cc:	699d      	ldr	r5, [r3, #24]
   e40ce:	69d8      	ldr	r0, [r3, #28]
   e40d0:	f506 712e 	add.w	r1, r6, #696	; 0x2b8
   e40d4:	47a8      	blx	r5
   e40d6:	4605      	mov	r5, r0
   e40d8:	2800      	cmp	r0, #0
   e40da:	f040 8647 	bne.w	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
        return( ret );
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
   e40de:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e40e0:	f109 0106 	add.w	r1, r9, #6
   e40e4:	f503 722d 	add.w	r2, r3, #692	; 0x2b4
   e40e8:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
   e40ec:	e2c0      	b.n	e4670 <mbedtls_ssl_handshake_client_step+0x664>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );

    buf = ssl->in_msg;

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e40ee:	2101      	movs	r1, #1
   e40f0:	4620      	mov	r0, r4
    int handshake_failure = 0;
    const mbedtls_ssl_ciphersuite_t *suite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );

    buf = ssl->in_msg;
   e40f2:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e40f6:	f7fa fe75 	bl	dede4 <mbedtls_ssl_read_record>
   e40fa:	2800      	cmp	r0, #0
   e40fc:	f040 808b 	bne.w	e4216 <mbedtls_ssl_handshake_client_step+0x20a>
        /* No alert on a read error. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e4100:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e4102:	2b16      	cmp	r3, #22
   e4104:	f040 809e 	bne.w	e4244 <mbedtls_ssl_handshake_client_step+0x238>
            ssl->handshake->verify_cookie_len = 0;
        }
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
   e4108:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   e410a:	2b29      	cmp	r3, #41	; 0x29
   e410c:	d94e      	bls.n	e41ac <mbedtls_ssl_handshake_client_step+0x1a0>
   e410e:	f898 3000 	ldrb.w	r3, [r8]
   e4112:	2b02      	cmp	r3, #2
   e4114:	d14a      	bne.n	e41ac <mbedtls_ssl_handshake_client_step+0x1a0>
   e4116:	e012      	b.n	e413e <mbedtls_ssl_handshake_client_step+0x132>
    }

    /*
     * Initialize update checksum functions
     */
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
   e4118:	4648      	mov	r0, r9
   e411a:	f8d4 b040 	ldr.w	fp, [r4, #64]	; 0x40
   e411e:	f7ff fbb5 	bl	e388c <mbedtls_ssl_ciphersuite_from_id>
   e4122:	f8cb 0000 	str.w	r0, [fp]

    if( ssl->transform_negotiate->ciphersuite_info == NULL )
   e4126:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e4128:	6819      	ldr	r1, [r3, #0]
   e412a:	2900      	cmp	r1, #0
   e412c:	d140      	bne.n	e41b0 <mbedtls_ssl_handshake_client_step+0x1a4>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ciphersuite info for %04x not found", i ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
   e412e:	2250      	movs	r2, #80	; 0x50
   e4130:	2102      	movs	r1, #2
   e4132:	4620      	mov	r0, r4
   e4134:	f7fa fe3a 	bl	dedac <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e4138:	4dc6      	ldr	r5, [pc, #792]	; (e4454 <mbedtls_ssl_handshake_client_step+0x448>)
   e413a:	f000 be17 	b.w	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );
   e413e:	4621      	mov	r1, r4
     * 37+n . 37+n  compression_method
     *
     * 38+n . 39+n  extensions length (optional)
     * 40+n .  ..   extensions
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );
   e4140:	f108 0a04 	add.w	sl, r8, #4

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );
   e4144:	f851 3b0c 	ldr.w	r3, [r1], #12
   e4148:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   e414c:	f104 0008 	add.w	r0, r4, #8
   e4150:	4653      	mov	r3, sl
   e4152:	f3c2 0240 	ubfx	r2, r2, #1, #1
   e4156:	f7fb fe4c 	bl	dfdf2 <mbedtls_ssl_read_version>

    if( ssl->major_ver < ssl->conf->min_major_ver ||
   e415a:	6823      	ldr	r3, [r4, #0]
   e415c:	68a2      	ldr	r2, [r4, #8]
   e415e:	f893 107a 	ldrb.w	r1, [r3, #122]	; 0x7a
   e4162:	428a      	cmp	r2, r1
   e4164:	f2c0 8444 	blt.w	e49f0 <mbedtls_ssl_handshake_client_step+0x9e4>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
   e4168:	68e1      	ldr	r1, [r4, #12]

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );

    if( ssl->major_ver < ssl->conf->min_major_ver ||
   e416a:	f893 007b 	ldrb.w	r0, [r3, #123]	; 0x7b
   e416e:	4281      	cmp	r1, r0
   e4170:	f2c0 843e 	blt.w	e49f0 <mbedtls_ssl_handshake_client_step+0x9e4>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
   e4174:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
   e4178:	4282      	cmp	r2, r0
   e417a:	f300 8439 	bgt.w	e49f0 <mbedtls_ssl_handshake_client_step+0x9e4>
        ssl->major_ver > ssl->conf->max_major_ver ||
   e417e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
   e4182:	4299      	cmp	r1, r3
   e4184:	f300 8434 	bgt.w	e49f0 <mbedtls_ssl_handshake_client_step+0x9e4>
                           ( (uint32_t) buf[2] << 24 ) |
                           ( (uint32_t) buf[3] << 16 ) |
                           ( (uint32_t) buf[4] <<  8 ) |
                           ( (uint32_t) buf[5]       ) ) );

    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );
   e4188:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e418a:	f108 0206 	add.w	r2, r8, #6
   e418e:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
   e4192:	f108 0126 	add.w	r1, r8, #38	; 0x26
   e4196:	f852 0b04 	ldr.w	r0, [r2], #4
   e419a:	f843 0b04 	str.w	r0, [r3], #4
   e419e:	428a      	cmp	r2, r1
   e41a0:	d1f9      	bne.n	e4196 <mbedtls_ssl_handshake_client_step+0x18a>

    n = buf[34];
   e41a2:	f898 6026 	ldrb.w	r6, [r8, #38]	; 0x26

    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );

    if( n > 32 )
   e41a6:	2e20      	cmp	r6, #32
   e41a8:	f240 8429 	bls.w	e49fe <mbedtls_ssl_handshake_client_step+0x9f2>

    if( len == 0 || (size_t)( buf[0] + 1 ) != len )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   e41ac:	2232      	movs	r2, #50	; 0x32
   e41ae:	e029      	b.n	e4204 <mbedtls_ssl_handshake_client_step+0x1f8>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    mbedtls_ssl_optimize_checksum( ssl, ssl->transform_negotiate->ciphersuite_info );
   e41b0:	4620      	mov	r0, r4
   e41b2:	f7fb f811 	bl	df1d8 <mbedtls_ssl_optimize_checksum>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
   e41b6:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
   e41ba:	f8db 3348 	ldr.w	r3, [fp, #840]	; 0x348
   e41be:	f108 0827 	add.w	r8, r8, #39	; 0x27
   e41c2:	2b00      	cmp	r3, #0
   e41c4:	f040 844d 	bne.w	e4a62 <mbedtls_ssl_handshake_client_step+0xa56>
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
    {
        ssl->state++;
   e41c8:	6863      	ldr	r3, [r4, #4]
   e41ca:	3301      	adds	r3, #1
   e41cc:	6063      	str	r3, [r4, #4]
        ssl->handshake->resume = 0;
   e41ce:	2300      	movs	r3, #0
   e41d0:	f8cb 3348 	str.w	r3, [fp, #840]	; 0x348
#if defined(MBEDTLS_HAVE_TIME)
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
   e41d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e41d6:	f8c2 9000 	str.w	r9, [r2]
        ssl->session_negotiate->compression = comp;
   e41da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e41dc:	6053      	str	r3, [r2, #4]
        ssl->session_negotiate->id_len = n;
   e41de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e41e0:	609e      	str	r6, [r3, #8]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
   e41e2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e41e4:	4632      	mov	r2, r6
   e41e6:	4641      	mov	r1, r8
   e41e8:	300c      	adds	r0, #12
   e41ea:	f002 feb0 	bl	e6f4e <memcpy>
     * Perform cipher suite validation in same way as in ssl_write_client_hello.
     */
    i = 0;
    while( 1 )
    {
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
   e41ee:	6823      	ldr	r3, [r4, #0]
   e41f0:	68e2      	ldr	r2, [r4, #12]
   e41f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   e41f6:	3b04      	subs	r3, #4
   e41f8:	f853 0f04 	ldr.w	r0, [r3, #4]!
   e41fc:	2800      	cmp	r0, #0
   e41fe:	f040 8458 	bne.w	e4ab2 <mbedtls_ssl_handshake_client_step+0xaa6>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
   e4202:	222f      	movs	r2, #47	; 0x2f
        p++;
    }

    MBEDTLS_SSL_DEBUG_MSG( 1, ( "no point format in common" ) );
    mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                    MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
   e4204:	2102      	movs	r1, #2
   e4206:	4620      	mov	r0, r4
   e4208:	f7fa fdd0 	bl	dedac <mbedtls_ssl_send_alert_message>
   e420c:	f000 bcd7 	b.w	e4bbe <mbedtls_ssl_handshake_client_step+0xbb2>
       case MBEDTLS_SSL_SERVER_HELLO:
           ret = ssl_parse_server_hello( ssl );
           break;

       case MBEDTLS_SSL_SERVER_CERTIFICATE:
           ret = mbedtls_ssl_parse_certificate( ssl );
   e4210:	4620      	mov	r0, r4
   e4212:	f7fb fcaf 	bl	dfb74 <mbedtls_ssl_parse_certificate>
   e4216:	4605      	mov	r5, r0
           break;
   e4218:	f000 bda8 	b.w	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>

static int ssl_parse_server_key_exchange( mbedtls_ssl_context *ssl )
{
    int ret;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
   e421c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e421e:	f8d3 8000 	ldr.w	r8, [r3]
    unsigned char *p = NULL, *end = NULL;
   e4222:	2300      	movs	r3, #0
   e4224:	930c      	str	r3, [sp, #48]	; 0x30

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );

#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
   e4226:	f898 300a 	ldrb.w	r3, [r8, #10]
   e422a:	2b01      	cmp	r3, #1
   e422c:	d101      	bne.n	e4232 <mbedtls_ssl_handshake_client_step+0x226>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse server key exchange" ) );
        ssl->state++;
   e422e:	2305      	movs	r3, #5
   e4230:	e0c4      	b.n	e43bc <mbedtls_ssl_handshake_client_step+0x3b0>
    {
        goto start_processing;
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e4232:	2101      	movs	r1, #1
   e4234:	4620      	mov	r0, r4
   e4236:	f7fa fdd5 	bl	dede4 <mbedtls_ssl_read_record>
   e423a:	2800      	cmp	r0, #0
   e423c:	d1eb      	bne.n	e4216 <mbedtls_ssl_handshake_client_step+0x20a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e423e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e4240:	2b16      	cmp	r3, #22
   e4242:	d001      	beq.n	e4248 <mbedtls_ssl_handshake_client_step+0x23c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
   e4244:	220a      	movs	r2, #10
   e4246:	e09e      	b.n	e4386 <mbedtls_ssl_handshake_client_step+0x37a>

    /*
     * ServerKeyExchange may be skipped with PSK and RSA-PSK when the server
     * doesn't use a psk_identity_hint
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )
   e4248:	6e63      	ldr	r3, [r4, #100]	; 0x64
   e424a:	781a      	ldrb	r2, [r3, #0]
   e424c:	2a0c      	cmp	r2, #12
   e424e:	f898 200a 	ldrb.w	r2, [r8, #10]
   e4252:	d007      	beq.n	e4264 <mbedtls_ssl_handshake_client_step+0x258>
    {
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e4254:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
   e4258:	2a05      	cmp	r2, #5
   e425a:	d1f3      	bne.n	e4244 <mbedtls_ssl_handshake_client_step+0x238>
            ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
        {
            /* Current message is probably either
             * CertificateRequest or ServerHelloDone */
            ssl->keep_current_message = 1;
   e425c:	2301      	movs	r3, #1
   e425e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   e4262:	e0a9      	b.n	e43b8 <mbedtls_ssl_handshake_client_step+0x3ac>
        ssl->handshake->ecrs_state = ssl_ecrs_ske_start_processing;

start_processing:
#endif
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
    end = ssl->in_msg + ssl->in_hslen;
   e4264:	6fa6      	ldr	r6, [r4, #120]	; 0x78
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e4266:	1f50      	subs	r0, r2, #5
    if( ssl->handshake->ecrs_enabled )
        ssl->handshake->ecrs_state = ssl_ecrs_ske_start_processing;

start_processing:
#endif
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
   e4268:	1d19      	adds	r1, r3, #4
    end = ssl->in_msg + ssl->in_hslen;
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e426a:	2803      	cmp	r0, #3
    if( ssl->handshake->ecrs_enabled )
        ssl->handshake->ecrs_state = ssl_ecrs_ske_start_processing;

start_processing:
#endif
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
   e426c:	910c      	str	r1, [sp, #48]	; 0x30
    end = ssl->in_msg + ssl->in_hslen;
   e426e:	441e      	add	r6, r3
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e4270:	d903      	bls.n	e427a <mbedtls_ssl_handshake_client_step+0x26e>
#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                     \
    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED) ||                     \
    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
   e4272:	1ed3      	subs	r3, r2, #3
   e4274:	2b01      	cmp	r3, #1
   e4276:	d816      	bhi.n	e42a6 <mbedtls_ssl_handshake_client_step+0x29a>
   e4278:	e018      	b.n	e42ac <mbedtls_ssl_handshake_client_step+0x2a0>
    /*
     * PSK parameters:
     *
     * opaque psk_identity_hint<0..2^16-1>;
     */
    if( end - (*p) < 2 )
   e427a:	1a71      	subs	r1, r6, r1
   e427c:	2901      	cmp	r1, #1
   e427e:	f340 84a0 	ble.w	e4bc2 <mbedtls_ssl_handshake_client_step+0xbb6>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message "
                                    "(psk_identity_hint length)" ) );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
    }
    len = (*p)[0] << 8 | (*p)[1];
   e4282:	7918      	ldrb	r0, [r3, #4]
   e4284:	7959      	ldrb	r1, [r3, #5]
    *p += 2;
   e4286:	3306      	adds	r3, #6
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message "
                                    "(psk_identity_hint length)" ) );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
    }
    len = (*p)[0] << 8 | (*p)[1];
   e4288:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    *p += 2;

    if( end - (*p) < (int) len )
   e428c:	1af0      	subs	r0, r6, r3
   e428e:	4281      	cmp	r1, r0
   e4290:	dd02      	ble.n	e4298 <mbedtls_ssl_handshake_client_step+0x28c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message "
                                    "(psk_identity_hint length)" ) );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
    }
    len = (*p)[0] << 8 | (*p)[1];
    *p += 2;
   e4292:	930c      	str	r3, [sp, #48]	; 0x30
   e4294:	f000 bc95 	b.w	e4bc2 <mbedtls_ssl_handshake_client_step+0xbb6>
    /*
     * Note: we currently ignore the PKS identity hint, as we only allow one
     * PSK to be provisionned on the client. This could be changed later if
     * someone needs that feature.
     */
    *p += len;
   e4298:	440b      	add	r3, r1
   e429a:	930c      	str	r3, [sp, #48]	; 0x30
    } /* FALLTROUGH */
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */

#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED) ||                       \
    defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e429c:	f002 03fd 	and.w	r3, r2, #253	; 0xfd
   e42a0:	2b05      	cmp	r3, #5
   e42a2:	d1e6      	bne.n	e4272 <mbedtls_ssl_handshake_client_step+0x266>
   e42a4:	e01a      	b.n	e42dc <mbedtls_ssl_handshake_client_step+0x2d0>
#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                     \
    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED) ||                     \
    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
   e42a6:	2a08      	cmp	r2, #8
   e42a8:	f040 84b9 	bne.w	e4c1e <mbedtls_ssl_handshake_client_step+0xc12>
     * struct {
     *     ECParameters curve_params;
     *     ECPoint      public;
     * } ServerECDHParams;
     */
    if( ( ret = mbedtls_ecdh_read_params( &ssl->handshake->ecdh_ctx,
   e42ac:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e42ae:	4632      	mov	r2, r6
   e42b0:	a90c      	add	r1, sp, #48	; 0x30
   e42b2:	3004      	adds	r0, #4
   e42b4:	f7f0 fff8 	bl	d52a8 <mbedtls_ecdh_read_params>
   e42b8:	2800      	cmp	r0, #0
   e42ba:	f040 8482 	bne.w	e4bc2 <mbedtls_ssl_handshake_client_step+0xbb6>
static int ssl_check_server_ecdh_params( const mbedtls_ssl_context *ssl )
{
    const mbedtls_ecp_curve_info *curve_info;
    mbedtls_ecp_group_id grp_id;
#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    grp_id = ssl->handshake->ecdh_ctx.grp.id;
   e42be:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e42c0:	791f      	ldrb	r7, [r3, #4]
#else
    grp_id = ssl->handshake->ecdh_ctx.grp_id;
#endif

    curve_info = mbedtls_ecp_curve_info_from_grp_id( grp_id );
   e42c2:	4638      	mov	r0, r7
   e42c4:	f7f3 ff04 	bl	d80d0 <mbedtls_ecp_curve_info_from_grp_id>
    if( curve_info == NULL )
   e42c8:	2800      	cmp	r0, #0
   e42ca:	f000 847a 	beq.w	e4bc2 <mbedtls_ssl_handshake_client_step+0xbb6>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "ECDH curve: %s", curve_info->name ) );

#if defined(MBEDTLS_ECP_C)
    if( mbedtls_ssl_check_curve( ssl, grp_id ) != 0 )
   e42ce:	4639      	mov	r1, r7
   e42d0:	4620      	mov	r0, r4
   e42d2:	f7fb fbf3 	bl	dfabc <mbedtls_ssl_check_curve>
   e42d6:	2800      	cmp	r0, #0
   e42d8:	f040 8473 	bne.w	e4bc2 <mbedtls_ssl_handshake_client_step+0xbb6>
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED) */

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)
static inline int mbedtls_ssl_ciphersuite_uses_server_signature( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
   e42dc:	f898 300a 	ldrb.w	r3, [r8, #10]
   e42e0:	3b02      	subs	r3, #2
   e42e2:	2b02      	cmp	r3, #2
   e42e4:	d868      	bhi.n	e43b8 <mbedtls_ssl_handshake_client_step+0x3ac>

        /*
         * Handle the digitally-signed structure
         */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
   e42e6:	68e3      	ldr	r3, [r4, #12]
   e42e8:	2b03      	cmp	r3, #3
   e42ea:	f040 8498 	bne.w	e4c1e <mbedtls_ssl_handshake_client_step+0xc12>
        size_t sig_len, hashlen;
        unsigned char hash[64];
        mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
        mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
        size_t params_len = p - params;
   e42ee:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    if( ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
    {
        return( 0 );
    }

    if( (*p) + 2 > end )
   e42f0:	1cbb      	adds	r3, r7, #2
   e42f2:	429e      	cmp	r6, r3
   e42f4:	f0c0 8465 	bcc.w	e4bc2 <mbedtls_ssl_handshake_client_step+0xbb6>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );

    /*
     * Get hash algorithm
     */
    if( ( *md_alg = mbedtls_ssl_md_alg_from_hash( (*p)[0] ) ) == MBEDTLS_MD_NONE )
   e42f8:	7838      	ldrb	r0, [r7, #0]
    {
        size_t sig_len, hashlen;
        unsigned char hash[64];
        mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
        mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
   e42fa:	f8d4 a064 	ldr.w	sl, [r4, #100]	; 0x64
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );

    /*
     * Get hash algorithm
     */
    if( ( *md_alg = mbedtls_ssl_md_alg_from_hash( (*p)[0] ) ) == MBEDTLS_MD_NONE )
   e42fe:	f7fb fbc9 	bl	dfa94 <mbedtls_ssl_md_alg_from_hash>
   e4302:	4681      	mov	r9, r0
   e4304:	2800      	cmp	r0, #0
   e4306:	f000 845c 	beq.w	e4bc2 <mbedtls_ssl_handshake_client_step+0xbb6>
    }

    /*
     * Get signature algorithm
     */
    if( ( *pk_alg = mbedtls_ssl_pk_alg_from_sig( (*p)[1] ) ) == MBEDTLS_PK_NONE )
   e430a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e430c:	7858      	ldrb	r0, [r3, #1]
   e430e:	f7fb fbb9 	bl	dfa84 <mbedtls_ssl_pk_alg_from_sig>
   e4312:	4683      	mov	fp, r0
   e4314:	2800      	cmp	r0, #0
   e4316:	f000 8454 	beq.w	e4bc2 <mbedtls_ssl_handshake_client_step+0xbb6>
    }

    /*
     * Check if the hash is acceptable
     */
    if( mbedtls_ssl_check_sig_hash( ssl, *md_alg ) != 0 )
   e431a:	4649      	mov	r1, r9
   e431c:	4620      	mov	r0, r4
   e431e:	f7fb fbdb 	bl	dfad8 <mbedtls_ssl_check_sig_hash>
   e4322:	2800      	cmp	r0, #0
   e4324:	f040 844d 	bne.w	e4bc2 <mbedtls_ssl_handshake_client_step+0xbb6>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "Server used SignatureAlgorithm %d", (*p)[1] ) );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "Server used HashAlgorithm %d", (*p)[0] ) );
    *p += 2;
   e4328:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                                MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
                return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
            }

            if( pk_alg != mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info ) )
   e432a:	4640      	mov	r0, r8
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "Server used SignatureAlgorithm %d", (*p)[1] ) );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "Server used HashAlgorithm %d", (*p)[0] ) );
    *p += 2;
   e432c:	3302      	adds	r3, #2
   e432e:	930c      	str	r3, [sp, #48]	; 0x30
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                                MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
                return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
            }

            if( pk_alg != mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info ) )
   e4330:	f7ff fae0 	bl	e38f4 <mbedtls_ssl_get_ciphersuite_sig_pk_alg>
   e4334:	4558      	cmp	r0, fp
   e4336:	4680      	mov	r8, r0
   e4338:	f040 8443 	bne.w	e4bc2 <mbedtls_ssl_handshake_client_step+0xbb6>

        /*
         * Read signature
         */

        if( p > end - 2 )
   e433c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e433e:	1eb2      	subs	r2, r6, #2
   e4340:	4293      	cmp	r3, r2
   e4342:	f200 8445 	bhi.w	e4bd0 <mbedtls_ssl_handshake_client_step+0xbc4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
        }
        sig_len = ( p[0] << 8 ) | p[1];
   e4346:	f893 b000 	ldrb.w	fp, [r3]
   e434a:	785a      	ldrb	r2, [r3, #1]
   e434c:	ea42 2b0b 	orr.w	fp, r2, fp, lsl #8
        p += 2;
   e4350:	3302      	adds	r3, #2

        if( p != end - sig_len )
   e4352:	ebcb 0606 	rsb	r6, fp, r6
   e4356:	42b3      	cmp	r3, r6
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
        }
        sig_len = ( p[0] << 8 ) | p[1];
        p += 2;
   e4358:	930c      	str	r3, [sp, #48]	; 0x30

        if( p != end - sig_len )
   e435a:	f040 8439 	bne.w	e4bd0 <mbedtls_ssl_handshake_client_step+0xbc4>
    {
        size_t sig_len, hashlen;
        unsigned char hash[64];
        mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
        mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
   e435e:	f10a 0304 	add.w	r3, sl, #4
          MBEDTLS_SSL_PROTO_TLS1_1 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( md_alg != MBEDTLS_MD_NONE )
        {
            ret = mbedtls_ssl_get_key_exchange_md_tls1_2( ssl, hash, &hashlen,
   e4362:	1aff      	subs	r7, r7, r3
   e4364:	f8cd 9004 	str.w	r9, [sp, #4]
   e4368:	9700      	str	r7, [sp, #0]
   e436a:	aa0d      	add	r2, sp, #52	; 0x34
   e436c:	a90e      	add	r1, sp, #56	; 0x38
   e436e:	4620      	mov	r0, r4
   e4370:	f7fb fd44 	bl	dfdfc <mbedtls_ssl_get_key_exchange_md_tls1_2>
                                                          params, params_len,
                                                          md_alg );
            if( ret != 0 )
   e4374:	2800      	cmp	r0, #0
   e4376:	f47f af4e 	bne.w	e4216 <mbedtls_ssl_handshake_client_step+0x20a>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        MBEDTLS_SSL_DEBUG_BUF( 3, "parameters hash", hash, hashlen );

        if( ssl->session_negotiate->peer_cert == NULL )
   e437a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e437c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e437e:	2800      	cmp	r0, #0
   e4380:	f040 8428 	bne.w	e4bd4 <mbedtls_ssl_handshake_client_step+0xbc8>
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
   e4384:	2228      	movs	r2, #40	; 0x28
   e4386:	2102      	movs	r1, #2
   e4388:	4620      	mov	r0, r4
   e438a:	f7fa fd0f 	bl	dedac <mbedtls_ssl_send_alert_message>
   e438e:	e16b      	b.n	e4668 <mbedtls_ssl_handshake_client_step+0x65c>
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello done" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e4390:	2101      	movs	r1, #1
   e4392:	4620      	mov	r0, r4
   e4394:	f7fa fd26 	bl	dede4 <mbedtls_ssl_read_record>
   e4398:	2800      	cmp	r0, #0
   e439a:	f47f af3c 	bne.w	e4216 <mbedtls_ssl_handshake_client_step+0x20a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e439e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e43a0:	2b16      	cmp	r3, #22
   e43a2:	f040 8161 	bne.w	e4668 <mbedtls_ssl_handshake_client_step+0x65c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
   e43a6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   e43a8:	2b04      	cmp	r3, #4
   e43aa:	f040 847d 	bne.w	e4ca8 <mbedtls_ssl_handshake_client_step+0xc9c>
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
   e43ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
   e43b0:	781b      	ldrb	r3, [r3, #0]
   e43b2:	2b0e      	cmp	r3, #14
   e43b4:	f040 8478 	bne.w	e4ca8 <mbedtls_ssl_handshake_client_step+0xc9c>
        }
    }
#endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */

exit:
    ssl->state++;
   e43b8:	6863      	ldr	r3, [r4, #4]
   e43ba:	3301      	adds	r3, #1
   e43bc:	6063      	str	r3, [r4, #4]
   e43be:	f000 bcd5 	b.w	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
    int ret;
    unsigned char *buf;
    size_t n = 0;
    size_t cert_type_len = 0, dn_len = 0;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
   e43c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e43c4:	681b      	ldr	r3, [r3, #0]
   e43c6:	7a9b      	ldrb	r3, [r3, #10]
   e43c8:	3b01      	subs	r3, #1
   e43ca:	b2db      	uxtb	r3, r3
   e43cc:	2b09      	cmp	r3, #9
   e43ce:	f200 8428 	bhi.w	e4c22 <mbedtls_ssl_handshake_client_step+0xc16>
   e43d2:	2601      	movs	r6, #1
   e43d4:	fa06 f303 	lsl.w	r3, r6, r3
   e43d8:	f240 320f 	movw	r2, #783	; 0x30f
   e43dc:	401a      	ands	r2, r3
   e43de:	2a00      	cmp	r2, #0
   e43e0:	f000 841f 	beq.w	e4c22 <mbedtls_ssl_handshake_client_step+0xc16>
   e43e4:	f000 bc20 	b.w	e4c28 <mbedtls_ssl_handshake_client_step+0xc1c>
        *      ( CertificateVerify  )
        *        ChangeCipherSpec
        *        Finished
        */
       case MBEDTLS_SSL_CLIENT_CERTIFICATE:
           ret = mbedtls_ssl_write_certificate( ssl );
   e43e8:	4620      	mov	r0, r4
   e43ea:	f7fa fe51 	bl	df090 <mbedtls_ssl_write_certificate>
   e43ee:	e712      	b.n	e4216 <mbedtls_ssl_handshake_client_step+0x20a>
static int ssl_write_client_key_exchange( mbedtls_ssl_context *ssl )
{
    int ret;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
   e43f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e43f2:	681f      	ldr	r7, [r3, #0]
#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                     \
    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED) ||                   \
    defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) ||                      \
    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
   e43f4:	7abb      	ldrb	r3, [r7, #10]
   e43f6:	1eda      	subs	r2, r3, #3
   e43f8:	2a01      	cmp	r2, #1
   e43fa:	d902      	bls.n	e4402 <mbedtls_ssl_handshake_client_step+0x3f6>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA ||
   e43fc:	3b09      	subs	r3, #9
   e43fe:	2b01      	cmp	r3, #1
   e4400:	d82a      	bhi.n	e4458 <mbedtls_ssl_handshake_client_step+0x44c>
#endif

        ret = mbedtls_ecdh_make_public( &ssl->handshake->ecdh_ctx,
                                &n,
                                &ssl->out_msg[i], 1000,
                                ssl->conf->f_rng, ssl->conf->p_rng );
   e4402:	6823      	ldr	r3, [r4, #0]

            mbedtls_ecdh_enable_restart( &ssl->handshake->ecdh_ctx );
        }
#endif

        ret = mbedtls_ecdh_make_public( &ssl->handshake->ecdh_ctx,
   e4404:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e4408:	69d9      	ldr	r1, [r3, #28]
   e440a:	9101      	str	r1, [sp, #4]
   e440c:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e440e:	699b      	ldr	r3, [r3, #24]
   e4410:	9300      	str	r3, [sp, #0]
   e4412:	3204      	adds	r2, #4
   e4414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   e4418:	a90e      	add	r1, sp, #56	; 0x38
   e441a:	3004      	adds	r0, #4
   e441c:	f7f0 ff64 	bl	d52e8 <mbedtls_ecdh_make_public>
                                &n,
                                &ssl->out_msg[i], 1000,
                                ssl->conf->f_rng, ssl->conf->p_rng );
        if( ret != 0 )
   e4420:	4605      	mov	r5, r0
   e4422:	2800      	cmp	r0, #0
   e4424:	f040 84a2 	bne.w	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
#endif
        if( ( ret = mbedtls_ecdh_calc_secret( &ssl->handshake->ecdh_ctx,
                                      &ssl->handshake->pmslen,
                                       ssl->handshake->premaster,
                                       MBEDTLS_MPI_MAX_SIZE,
                                       ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
   e4428:	6823      	ldr	r3, [r4, #0]

ecdh_calc_secret:
        if( ssl->handshake->ecrs_enabled )
            n = ssl->handshake->ecrs_n;
#endif
        if( ( ret = mbedtls_ecdh_calc_secret( &ssl->handshake->ecdh_ctx,
   e442a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e442c:	69da      	ldr	r2, [r3, #28]
   e442e:	9201      	str	r2, [sp, #4]
   e4430:	699b      	ldr	r3, [r3, #24]
   e4432:	9300      	str	r3, [sp, #0]
   e4434:	f500 723d 	add.w	r2, r0, #756	; 0x2f4
   e4438:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
   e443c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   e4440:	3004      	adds	r0, #4
   e4442:	f7f0 ff79 	bl	d5338 <mbedtls_ecdh_calc_secret>
   e4446:	4605      	mov	r5, r0
   e4448:	2800      	cmp	r0, #0
   e444a:	f040 848f 	bne.w	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA )
    {
        /*
         * ECDH key exchange -- send client public value
         */
        i = 4;
   e444e:	2604      	movs	r6, #4
   e4450:	e04f      	b.n	e44f2 <mbedtls_ssl_handshake_client_step+0x4e6>
   e4452:	bf00      	nop
   e4454:	ffff8f00 	.word	0xffff8f00
#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    if( mbedtls_ssl_ciphersuite_uses_psk( ciphersuite_info ) )
   e4458:	4638      	mov	r0, r7
   e445a:	f7ff fa6f 	bl	e393c <mbedtls_ssl_ciphersuite_uses_psk>
   e445e:	4603      	mov	r3, r0
   e4460:	2800      	cmp	r0, #0
   e4462:	d03c      	beq.n	e44de <mbedtls_ssl_handshake_client_step+0x4d2>
    {
        /*
         * opaque psk_identity<0..2^16-1>;
         */
        if( ssl->conf->psk == NULL || ssl->conf->psk_identity == NULL )
   e4464:	6823      	ldr	r3, [r4, #0]
   e4466:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   e4468:	2a00      	cmp	r2, #0
   e446a:	f000 80ca 	beq.w	e4602 <mbedtls_ssl_handshake_client_step+0x5f6>
   e446e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   e4470:	2a00      	cmp	r2, #0
   e4472:	f000 80c6 	beq.w	e4602 <mbedtls_ssl_handshake_client_step+0x5f6>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for PSK" ) );
            return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
        }

        i = 4;
        n = ssl->conf->psk_identity_len;
   e4476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   e4478:	930e      	str	r3, [sp, #56]	; 0x38

        if( i + 2 + n > MBEDTLS_SSL_OUT_CONTENT_LEN )
   e447a:	1d9a      	adds	r2, r3, #6
   e447c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   e4480:	d842      	bhi.n	e4508 <mbedtls_ssl_handshake_client_step+0x4fc>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "psk identity too long or "
                                        "SSL buffer too short" ) );
            return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
        }

        ssl->out_msg[i++] = (unsigned char)( n >> 8 );
   e4482:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e4486:	0a19      	lsrs	r1, r3, #8
   e4488:	7111      	strb	r1, [r2, #4]
        ssl->out_msg[i++] = (unsigned char)( n      );
   e448a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e448e:	7153      	strb	r3, [r2, #5]

        memcpy( ssl->out_msg + i, ssl->conf->psk_identity, ssl->conf->psk_identity_len );
   e4490:	6823      	ldr	r3, [r4, #0]
   e4492:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   e4496:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   e4498:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   e449a:	3006      	adds	r0, #6
   e449c:	f002 fd57 	bl	e6f4e <memcpy>
        i += ssl->conf->psk_identity_len;
   e44a0:	6823      	ldr	r3, [r4, #0]
   e44a2:	6f1e      	ldr	r6, [r3, #112]	; 0x70

#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK )
   e44a4:	7abb      	ldrb	r3, [r7, #10]
   e44a6:	2b05      	cmp	r3, #5

        ssl->out_msg[i++] = (unsigned char)( n >> 8 );
        ssl->out_msg[i++] = (unsigned char)( n      );

        memcpy( ssl->out_msg + i, ssl->conf->psk_identity, ssl->conf->psk_identity_len );
        i += ssl->conf->psk_identity_len;
   e44a8:	f106 0606 	add.w	r6, r6, #6

#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK )
   e44ac:	d102      	bne.n	e44b4 <mbedtls_ssl_handshake_client_step+0x4a8>
        {
            n = 0;
   e44ae:	2300      	movs	r3, #0
   e44b0:	930e      	str	r3, [sp, #56]	; 0x38
   e44b2:	e00c      	b.n	e44ce <mbedtls_ssl_handshake_client_step+0x4c2>
        }
        else
#endif
#if defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
   e44b4:	2b07      	cmp	r3, #7
   e44b6:	f040 83b2 	bne.w	e4c1e <mbedtls_ssl_handshake_client_step+0xc12>
        {
            if( ( ret = ssl_write_encrypted_pms( ssl, i, &n, 2 ) ) != 0 )
   e44ba:	2302      	movs	r3, #2
   e44bc:	aa0e      	add	r2, sp, #56	; 0x38
   e44be:	4631      	mov	r1, r6
   e44c0:	4620      	mov	r0, r4
   e44c2:	f7ff fd31 	bl	e3f28 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj>
   e44c6:	4605      	mov	r5, r0
   e44c8:	2800      	cmp	r0, #0
   e44ca:	f040 844f 	bne.w	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        if( ( ret = mbedtls_ssl_psk_derive_premaster( ssl,
   e44ce:	7ab9      	ldrb	r1, [r7, #10]
   e44d0:	4620      	mov	r0, r4
   e44d2:	f7fa fa15 	bl	de900 <mbedtls_ssl_psk_derive_premaster>
   e44d6:	4605      	mov	r5, r0
   e44d8:	b158      	cbz	r0, e44f2 <mbedtls_ssl_handshake_client_step+0x4e6>
   e44da:	f000 bc47 	b.w	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
        }
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
   e44de:	7aba      	ldrb	r2, [r7, #10]
   e44e0:	2a01      	cmp	r2, #1
   e44e2:	f040 839c 	bne.w	e4c1e <mbedtls_ssl_handshake_client_step+0xc12>
    {
        i = 4;
        if( ( ret = ssl_write_encrypted_pms( ssl, i, &n, 0 ) ) != 0 )
   e44e6:	aa0e      	add	r2, sp, #56	; 0x38
   e44e8:	2104      	movs	r1, #4
   e44ea:	4620      	mov	r0, r4
   e44ec:	f7ff fd1c 	bl	e3f28 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj>
   e44f0:	e7a9      	b.n	e4446 <mbedtls_ssl_handshake_client_step+0x43a>
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    ssl->out_msglen  = i + n;
   e44f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   e44f4:	441e      	add	r6, r3
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   e44f6:	2316      	movs	r3, #22
   e44f8:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    ssl->out_msglen  = i + n;
   e44fc:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
   e4500:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e4504:	2210      	movs	r2, #16
   e4506:	e074      	b.n	e45f2 <mbedtls_ssl_handshake_client_step+0x5e6>

        if( i + 2 + n > MBEDTLS_SSL_OUT_CONTENT_LEN )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "psk identity too long or "
                                        "SSL buffer too short" ) );
            return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
   e4508:	4da8      	ldr	r5, [pc, #672]	; (e47ac <mbedtls_ssl_handshake_client_step+0x7a0>)
           ret = mbedtls_ssl_write_certificate( ssl );
           break;

       case MBEDTLS_SSL_CLIENT_KEY_EXCHANGE:
           ret = ssl_write_client_key_exchange( ssl );
           break;
   e450a:	f000 bc2f 	b.w	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
   e450e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    {
        goto sign;
    }
#endif

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
   e4510:	4620      	mov	r0, r4
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
   e4512:	681e      	ldr	r6, [r3, #0]
    size_t n = 0, offset = 0;
   e4514:	2300      	movs	r3, #0
   e4516:	930d      	str	r3, [sp, #52]	; 0x34
    {
        goto sign;
    }
#endif

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
   e4518:	f7fa f888 	bl	de62c <mbedtls_ssl_derive_keys>
   e451c:	4605      	mov	r5, r0
   e451e:	2800      	cmp	r0, #0
   e4520:	f040 8424 	bne.w	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
        return( ret );
    }

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e4524:	7ab3      	ldrb	r3, [r6, #10]
   e4526:	1f5a      	subs	r2, r3, #5
   e4528:	2a03      	cmp	r2, #3
   e452a:	f67f af45 	bls.w	e43b8 <mbedtls_ssl_handshake_client_step+0x3ac>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
   e452e:	2b0b      	cmp	r3, #11
   e4530:	f43f af42 	beq.w	e43b8 <mbedtls_ssl_handshake_client_step+0x3ac>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
        ssl->state++;
        return( 0 );
    }

    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
   e4534:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   e4538:	2b00      	cmp	r3, #0
   e453a:	f43f af3d 	beq.w	e43b8 <mbedtls_ssl_handshake_client_step+0x3ac>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
   e453e:	6b22      	ldr	r2, [r4, #48]	; 0x30
   e4540:	b112      	cbz	r2, e4548 <mbedtls_ssl_handshake_client_step+0x53c>
   e4542:	f8d2 3144 	ldr.w	r3, [r2, #324]	; 0x144
   e4546:	b923      	cbnz	r3, e4552 <mbedtls_ssl_handshake_client_step+0x546>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
   e4548:	6823      	ldr	r3, [r4, #0]
   e454a:	6d1b      	ldr	r3, [r3, #80]	; 0x50

    return( key_cert == NULL ? NULL : key_cert->cert );
   e454c:	2b00      	cmp	r3, #0
   e454e:	f43f af33 	beq.w	e43b8 <mbedtls_ssl_handshake_client_step+0x3ac>
   e4552:	681b      	ldr	r3, [r3, #0]
   e4554:	2b00      	cmp	r3, #0
   e4556:	f43f af2f 	beq.w	e43b8 <mbedtls_ssl_handshake_client_step+0x3ac>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
        ssl->state++;
        return( 0 );
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
   e455a:	4620      	mov	r0, r4
   e455c:	f7ff fcd7 	bl	e3f0e <mbedtls_ssl_own_key>
   e4560:	2800      	cmp	r0, #0
   e4562:	d04e      	beq.n	e4602 <mbedtls_ssl_handshake_client_step+0x5f6>
        ssl->handshake->ecrs_state = ssl_ecrs_crt_vrfy_sign;

sign:
#endif

    ssl->handshake->calc_verify( ssl, hash );
   e4564:	f8d2 32a4 	ldr.w	r3, [r2, #676]	; 0x2a4
   e4568:	a90e      	add	r1, sp, #56	; 0x38
   e456a:	4620      	mov	r0, r4
   e456c:	4798      	blx	r3
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \
          MBEDTLS_SSL_PROTO_TLS1_1 */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
   e456e:	68e3      	ldr	r3, [r4, #12]
   e4570:	2b03      	cmp	r3, #3
   e4572:	f040 8354 	bne.w	e4c1e <mbedtls_ssl_handshake_client_step+0xc12>
         * shortcut.
         *
         * Reason: Otherwise we should have running hashes for SHA512 and SHA224
         *         in order to satisfy 'weird' needs from the server side.
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
   e4576:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e4578:	681b      	ldr	r3, [r3, #0]
   e457a:	7a5d      	ldrb	r5, [r3, #9]
   e457c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e4580:	2d07      	cmp	r5, #7
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
   e4582:	bf0b      	itete	eq
   e4584:	2205      	moveq	r2, #5
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
   e4586:	2204      	movne	r2, #4
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
   e4588:	711a      	strbeq	r2, [r3, #4]
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
   e458a:	711a      	strbne	r2, [r3, #4]
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
   e458c:	4620      	mov	r0, r4
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
   e458e:	bf18      	it	ne
   e4590:	2506      	movne	r5, #6
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
   e4592:	f7ff fcbc 	bl	e3f0e <mbedtls_ssl_own_key>
   e4596:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   e459a:	f7fb fa62 	bl	dfa62 <mbedtls_ssl_sig_from_pk>
   e459e:	7170      	strb	r0, [r6, #5]
#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
    if( ssl->handshake->ecrs_enabled )
        rs_ctx = &ssl->handshake->ecrs_ctx.pk;
#endif

    if( ( ret = mbedtls_pk_sign_restartable( mbedtls_ssl_own_key( ssl ),
   e45a0:	4620      	mov	r0, r4
   e45a2:	f7ff fcb4 	bl	e3f0e <mbedtls_ssl_own_key>
                         md_alg, hash_start, hashlen,
                         ssl->out_msg + 6 + offset, &n,
                         ssl->conf->f_rng, ssl->conf->p_rng, rs_ctx ) ) != 0 )
   e45a6:	6822      	ldr	r2, [r4, #0]
#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
    if( ssl->handshake->ecrs_enabled )
        rs_ctx = &ssl->handshake->ecrs_ctx.pk;
#endif

    if( ( ret = mbedtls_pk_sign_restartable( mbedtls_ssl_own_key( ssl ),
   e45a8:	2300      	movs	r3, #0
   e45aa:	9304      	str	r3, [sp, #16]
   e45ac:	69d1      	ldr	r1, [r2, #28]
   e45ae:	9103      	str	r1, [sp, #12]
   e45b0:	6992      	ldr	r2, [r2, #24]
   e45b2:	9202      	str	r2, [sp, #8]
   e45b4:	aa0d      	add	r2, sp, #52	; 0x34
   e45b6:	9201      	str	r2, [sp, #4]
   e45b8:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e45bc:	3208      	adds	r2, #8
   e45be:	9200      	str	r2, [sp, #0]
   e45c0:	4629      	mov	r1, r5
   e45c2:	aa0e      	add	r2, sp, #56	; 0x38
   e45c4:	f7f9 fdc0 	bl	de148 <mbedtls_pk_sign_restartable>
   e45c8:	4605      	mov	r5, r0
   e45ca:	2800      	cmp	r0, #0
   e45cc:	f040 83ce 	bne.w	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
            ret = MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS;
#endif
        return( ret );
    }

    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );
   e45d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e45d2:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e45d6:	0a19      	lsrs	r1, r3, #8
   e45d8:	7191      	strb	r1, [r2, #6]
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
   e45da:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e45de:	71d3      	strb	r3, [r2, #7]

    ssl->out_msglen  = 6 + n + offset;
   e45e0:	3308      	adds	r3, #8
   e45e2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   e45e6:	2316      	movs	r3, #22
   e45e8:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
   e45ec:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e45f0:	220f      	movs	r2, #15
   e45f2:	701a      	strb	r2, [r3, #0]

    ssl->state++;
   e45f4:	6863      	ldr	r3, [r4, #4]
   e45f6:	3301      	adds	r3, #1
   e45f8:	6063      	str	r3, [r4, #4]

    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   e45fa:	4620      	mov	r0, r4
   e45fc:	f7fa fb38 	bl	dec70 <mbedtls_ssl_write_handshake_msg>
   e4600:	e609      	b.n	e4216 <mbedtls_ssl_handshake_client_step+0x20a>
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
   e4602:	4d6b      	ldr	r5, [pc, #428]	; (e47b0 <mbedtls_ssl_handshake_client_step+0x7a4>)
   e4604:	e3b2      	b.n	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
       case MBEDTLS_SSL_CERTIFICATE_VERIFY:
           ret = ssl_write_certificate_verify( ssl );
           break;

       case MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_write_change_cipher_spec( ssl );
   e4606:	4620      	mov	r0, r4
   e4608:	f7fa fda8 	bl	df15c <mbedtls_ssl_write_change_cipher_spec>
   e460c:	e603      	b.n	e4216 <mbedtls_ssl_handshake_client_step+0x20a>
           break;

       case MBEDTLS_SSL_CLIENT_FINISHED:
           ret = mbedtls_ssl_write_finished( ssl );
   e460e:	4620      	mov	r0, r4
   e4610:	f7fa fdf0 	bl	df1f4 <mbedtls_ssl_write_finished>
   e4614:	e5ff      	b.n	e4216 <mbedtls_ssl_handshake_client_step+0x20a>
    unsigned char *ticket;
    const unsigned char *msg;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse new session ticket" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e4616:	2101      	movs	r1, #1
   e4618:	4620      	mov	r0, r4
   e461a:	f7fa fbe3 	bl	dede4 <mbedtls_ssl_read_record>
   e461e:	4681      	mov	r9, r0
   e4620:	bb20      	cbnz	r0, e466c <mbedtls_ssl_handshake_client_step+0x660>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e4622:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e4624:	2b16      	cmp	r3, #22
   e4626:	f47f ae0d 	bne.w	e4244 <mbedtls_ssl_handshake_client_step+0x238>
     *
     * 0  .  3   ticket_lifetime_hint
     * 4  .  5   ticket_len (n)
     * 6  .  5+n ticket content
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
   e462a:	6e66      	ldr	r6, [r4, #100]	; 0x64
   e462c:	7833      	ldrb	r3, [r6, #0]
   e462e:	2b04      	cmp	r3, #4
   e4630:	d103      	bne.n	e463a <mbedtls_ssl_handshake_client_step+0x62e>
        ssl->in_hslen < 6 + mbedtls_ssl_hs_hdr_len( ssl ) )
   e4632:	6fa3      	ldr	r3, [r4, #120]	; 0x78
     *
     * 0  .  3   ticket_lifetime_hint
     * 4  .  5   ticket_len (n)
     * 6  .  5+n ticket content
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
   e4634:	2b09      	cmp	r3, #9
   e4636:	f200 834f 	bhi.w	e4cd8 <mbedtls_ssl_handshake_client_step+0xccc>

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   e463a:	2232      	movs	r2, #50	; 0x32
   e463c:	2102      	movs	r1, #2
   e463e:	4620      	mov	r0, r4
   e4640:	f7fa fbb4 	bl	dedac <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
   e4644:	4d5b      	ldr	r5, [pc, #364]	; (e47b4 <mbedtls_ssl_handshake_client_step+0x7a8>)
   e4646:	e391      	b.n	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
           ret = ssl_parse_new_session_ticket( ssl );
           break;
#endif

       case MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
   e4648:	4620      	mov	r0, r4
   e464a:	f7fa fd95 	bl	df178 <mbedtls_ssl_parse_change_cipher_spec>
   e464e:	e5e2      	b.n	e4216 <mbedtls_ssl_handshake_client_step+0x20a>
           break;

       case MBEDTLS_SSL_SERVER_FINISHED:
           ret = mbedtls_ssl_parse_finished( ssl );
   e4650:	4620      	mov	r0, r4
   e4652:	f7fa fe0b 	bl	df26c <mbedtls_ssl_parse_finished>
   e4656:	e5de      	b.n	e4216 <mbedtls_ssl_handshake_client_step+0x20a>
           break;

       case MBEDTLS_SSL_FLUSH_BUFFERS:
           MBEDTLS_SSL_DEBUG_MSG( 2, ( "handshake: done" ) );
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
   e4658:	230f      	movs	r3, #15
   e465a:	e6af      	b.n	e43bc <mbedtls_ssl_handshake_client_step+0x3b0>
           break;

       case MBEDTLS_SSL_HANDSHAKE_WRAPUP:
           mbedtls_ssl_handshake_wrapup( ssl );
   e465c:	4620      	mov	r0, r4
   e465e:	f7fb f84f 	bl	df700 <mbedtls_ssl_handshake_wrapup>
           break;
   e4662:	e383      	b.n	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );

    if( ssl->conf->f_rng == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
        return( MBEDTLS_ERR_SSL_NO_RNG );
   e4664:	4d54      	ldr	r5, [pc, #336]	; (e47b8 <mbedtls_ssl_handshake_client_step+0x7ac>)
   e4666:	e381      	b.n	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   e4668:	4d54      	ldr	r5, [pc, #336]	; (e47bc <mbedtls_ssl_handshake_client_step+0x7b0>)
   e466a:	e37f      	b.n	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
    unsigned char *ticket;
    const unsigned char *msg;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse new session ticket" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e466c:	4605      	mov	r5, r0
   e466e:	e37d      	b.n	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
        return( ret );
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
   e4670:	f852 0b04 	ldr.w	r0, [r2], #4
   e4674:	f841 0b04 	str.w	r0, [r1], #4
   e4678:	429a      	cmp	r2, r3
   e467a:	d1f9      	bne.n	e4670 <mbedtls_ssl_handshake_client_step+0x664>
     *   ..   . ..    compression methods length (1 byte)
     *   ..   . ..    compression methods
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;
   e467c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   e467e:	688b      	ldr	r3, [r1, #8]

    if( n < 16 || n > 32 ||
   e4680:	f1a3 0210 	sub.w	r2, r3, #16
   e4684:	2a10      	cmp	r2, #16
   e4686:	d806      	bhi.n	e4696 <mbedtls_ssl_handshake_client_step+0x68a>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
   e4688:	6b22      	ldr	r2, [r4, #48]	; 0x30
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;

    if( n < 16 || n > 32 ||
   e468a:	f8d2 2348 	ldr.w	r2, [r2, #840]	; 0x348
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
    {
        n = 0;
   e468e:	2a00      	cmp	r2, #0
   e4690:	bf08      	it	eq
   e4692:	2300      	moveq	r3, #0
   e4694:	e000      	b.n	e4698 <mbedtls_ssl_handshake_client_step+0x68c>
   e4696:	2300      	movs	r3, #0
     */
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        if( ssl->session_negotiate->ticket != NULL &&
   e4698:	6e4a      	ldr	r2, [r1, #100]	; 0x64
   e469a:	b172      	cbz	r2, e46ba <mbedtls_ssl_handshake_client_step+0x6ae>
   e469c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   e469e:	b162      	cbz	r2, e46ba <mbedtls_ssl_handshake_client_step+0x6ae>
                ssl->session_negotiate->ticket_len != 0 )
        {
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->session_negotiate->id, 32 );
   e46a0:	6823      	ldr	r3, [r4, #0]
   e46a2:	2220      	movs	r2, #32
   e46a4:	699d      	ldr	r5, [r3, #24]
   e46a6:	69d8      	ldr	r0, [r3, #28]
   e46a8:	310c      	adds	r1, #12
   e46aa:	47a8      	blx	r5

            if( ret != 0 )
   e46ac:	4605      	mov	r5, r0
   e46ae:	2800      	cmp	r0, #0
   e46b0:	f040 835c 	bne.w	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
                return( ret );

            ssl->session_negotiate->id_len = n = 32;
   e46b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e46b6:	2320      	movs	r3, #32
   e46b8:	6093      	str	r3, [r2, #8]
        }
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;
   e46ba:	f109 0627 	add.w	r6, r9, #39	; 0x27
   e46be:	f889 3026 	strb.w	r3, [r9, #38]	; 0x26

    for( i = 0; i < n; i++ )
   e46c2:	2200      	movs	r2, #0
   e46c4:	4293      	cmp	r3, r2
   e46c6:	d005      	beq.n	e46d4 <mbedtls_ssl_handshake_client_step+0x6c8>
        *p++ = ssl->session_negotiate->id[i];
   e46c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   e46ca:	4411      	add	r1, r2
   e46cc:	7b09      	ldrb	r1, [r1, #12]
   e46ce:	54b1      	strb	r1, [r6, r2]
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;

    for( i = 0; i < n; i++ )
   e46d0:	3201      	adds	r2, #1
   e46d2:	e7f7      	b.n	e46c4 <mbedtls_ssl_handshake_client_step+0x6b8>
   e46d4:	441e      	add	r6, r3
#endif

    /*
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
   e46d6:	68e2      	ldr	r2, [r4, #12]
   e46d8:	6823      	ldr	r3, [r4, #0]
   e46da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    unsigned char offer_compress;
    const int *ciphersuites;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;
#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
    int uses_ec = 0;
   e46de:	f04f 0a00 	mov.w	sl, #0
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];

    /* Skip writing ciphersuite length for now */
    n = 0;
    q = p;
    p += 2;
   e46e2:	1cb5      	adds	r5, r6, #2
   e46e4:	f1a3 0804 	sub.w	r8, r3, #4
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];

    /* Skip writing ciphersuite length for now */
    n = 0;
   e46e8:	4657      	mov	r7, sl
    q = p;
    p += 2;

    for( i = 0; ciphersuites[i] != 0; i++ )
   e46ea:	f858 3f04 	ldr.w	r3, [r8, #4]!
   e46ee:	b1fb      	cbz	r3, e4730 <mbedtls_ssl_handshake_client_step+0x724>
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );
   e46f0:	4618      	mov	r0, r3
   e46f2:	f7ff f8cb 	bl	e388c <mbedtls_ssl_ciphersuite_from_id>

        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
                                      ssl->conf->min_minor_ver,
   e46f6:	6821      	ldr	r1, [r4, #0]

    for( i = 0; ciphersuites[i] != 0; i++ )
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );

        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
   e46f8:	f891 e079 	ldrb.w	lr, [r1, #121]	; 0x79
static int ssl_validate_ciphersuite( const mbedtls_ssl_ciphersuite_t * suite_info,
                                     const mbedtls_ssl_context * ssl,
                                     int min_minor_ver, int max_minor_ver )
{
    (void) ssl;
    if( suite_info == NULL )
   e46fc:	2800      	cmp	r0, #0
   e46fe:	d0f4      	beq.n	e46ea <mbedtls_ssl_handshake_client_step+0x6de>
        return( 1 );

    if( suite_info->min_minor_ver > max_minor_ver ||
   e4700:	6903      	ldr	r3, [r0, #16]
   e4702:	459e      	cmp	lr, r3
   e4704:	dbf1      	blt.n	e46ea <mbedtls_ssl_handshake_client_step+0x6de>
   e4706:	f891 107b 	ldrb.w	r1, [r1, #123]	; 0x7b
   e470a:	6983      	ldr	r3, [r0, #24]
   e470c:	4299      	cmp	r1, r3
   e470e:	dcec      	bgt.n	e46ea <mbedtls_ssl_handshake_client_step+0x6de>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
                                    ciphersuites[i] ) );

#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
        uses_ec |= mbedtls_ssl_ciphersuite_uses_ec( ciphersuite_info );
   e4710:	f7ff f906 	bl	e3920 <mbedtls_ssl_ciphersuite_uses_ec>
#endif

        n++;
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
   e4714:	f8d8 3000 	ldr.w	r3, [r8]
   e4718:	462a      	mov	r2, r5
   e471a:	121b      	asrs	r3, r3, #8
   e471c:	f802 3b02 	strb.w	r3, [r2], #2
        *p++ = (unsigned char)( ciphersuites[i]      );
   e4720:	f8d8 3000 	ldr.w	r3, [r8]
   e4724:	706b      	strb	r3, [r5, #1]
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
                                    ciphersuites[i] ) );

#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
        uses_ec |= mbedtls_ssl_ciphersuite_uses_ec( ciphersuite_info );
   e4726:	ea4a 0a00 	orr.w	sl, sl, r0
#endif

        n++;
   e472a:	3701      	adds	r7, #1
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
        *p++ = (unsigned char)( ciphersuites[i]      );
   e472c:	4615      	mov	r5, r2
   e472e:	e7dc      	b.n	e46ea <mbedtls_ssl_handshake_client_step+0x6de>
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
   e4730:	22ff      	movs	r2, #255	; 0xff
        n++;
   e4732:	3701      	adds	r7, #1
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
   e4734:	706a      	strb	r2, [r5, #1]
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
   e4736:	09fa      	lsrs	r2, r7, #7
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
   e4738:	702b      	strb	r3, [r5, #0]
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
    *q++ = (unsigned char)( n << 1 );
   e473a:	007f      	lsls	r7, r7, #1
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
   e473c:	7032      	strb	r2, [r6, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
   e473e:	2201      	movs	r2, #1
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
    *q++ = (unsigned char)( n << 1 );
   e4740:	7077      	strb	r7, [r6, #1]
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
   e4742:	70aa      	strb	r2, [r5, #2]
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
   e4744:	70eb      	strb	r3, [r5, #3]
static void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,
                                    unsigned char *buf,
                                    size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e4746:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
    size_t hostname_len;

    *olen = 0;

    if( ssl->hostname == NULL )
   e474a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
   e474e:	9307      	str	r3, [sp, #28]
   e4750:	f105 0804 	add.w	r8, r5, #4
    }

    // First write extensions, then the total length
    //
#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    ssl_write_hostname_ext( ssl, p + 2 + ext_len, &olen );
   e4754:	f105 0b06 	add.w	fp, r5, #6
static void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,
                                    unsigned char *buf,
                                    size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e4758:	f506 5600 	add.w	r6, r6, #8192	; 0x2000
    size_t hostname_len;

    *olen = 0;

    if( ssl->hostname == NULL )
   e475c:	b318      	cbz	r0, e47a6 <mbedtls_ssl_handshake_client_step+0x79a>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
                   ssl->hostname ) );

    hostname_len = strlen( ssl->hostname );
   e475e:	f002 fc6d 	bl	e703c <strlen>

    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
   e4762:	45b3      	cmp	fp, r6
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
                   ssl->hostname ) );

    hostname_len = strlen( ssl->hostname );
   e4764:	4602      	mov	r2, r0

    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
   e4766:	9b07      	ldr	r3, [sp, #28]
   e4768:	d82a      	bhi.n	e47c0 <mbedtls_ssl_handshake_client_step+0x7b4>
   e476a:	f100 0709 	add.w	r7, r0, #9
   e476e:	ebcb 0606 	rsb	r6, fp, r6
   e4772:	42be      	cmp	r6, r7
   e4774:	d324      	bcc.n	e47c0 <mbedtls_ssl_handshake_client_step+0x7b4>
     *
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
   e4776:	1d41      	adds	r1, r0, #5
   e4778:	0a09      	lsrs	r1, r1, #8
   e477a:	7229      	strb	r1, [r5, #8]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );
   e477c:	b2c1      	uxtb	r1, r0
   e477e:	1d48      	adds	r0, r1, #5
   e4780:	7268      	strb	r0, [r5, #9]

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
   e4782:	1cd0      	adds	r0, r2, #3
   e4784:	0a00      	lsrs	r0, r0, #8
     * struct {
     *     ServerName server_name_list<1..2^16-1>
     * } ServerNameList;
     *
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
   e4786:	71ab      	strb	r3, [r5, #6]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );
   e4788:	71eb      	strb	r3, [r5, #7]

    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
   e478a:	72a8      	strb	r0, [r5, #10]
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
   e478c:	732b      	strb	r3, [r5, #12]

    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );
   e478e:	1cc8      	adds	r0, r1, #3

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
   e4790:	0a13      	lsrs	r3, r2, #8

    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );
   e4792:	72e8      	strb	r0, [r5, #11]

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
   e4794:	736b      	strb	r3, [r5, #13]
    *p++ = (unsigned char)( ( hostname_len      ) & 0xFF );
   e4796:	73a9      	strb	r1, [r5, #14]

    memcpy( p, ssl->hostname, hostname_len );
   e4798:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   e479c:	f105 000f 	add.w	r0, r5, #15
   e47a0:	f002 fbd5 	bl	e6f4e <memcpy>
   e47a4:	e00d      	b.n	e47c2 <mbedtls_ssl_handshake_client_step+0x7b6>
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
    size_t hostname_len;

    *olen = 0;
   e47a6:	4607      	mov	r7, r0
   e47a8:	e00b      	b.n	e47c2 <mbedtls_ssl_handshake_client_step+0x7b6>
   e47aa:	bf00      	nop
   e47ac:	ffff9600 	.word	0xffff9600
   e47b0:	ffff8a00 	.word	0xffff8a00
   e47b4:	ffff9200 	.word	0xffff9200
   e47b8:	ffff8c00 	.word	0xffff8c00
   e47bc:	ffff8900 	.word	0xffff8900
   e47c0:	461f      	mov	r7, r3
    unsigned char *sig_alg_list = buf + 6;
#endif

    *olen = 0;

    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
   e47c2:	6823      	ldr	r3, [r4, #0]
   e47c4:	f893 2079 	ldrb.w	r2, [r3, #121]	; 0x79
   e47c8:	2a03      	cmp	r2, #3
   e47ca:	d14c      	bne.n	e4866 <mbedtls_ssl_handshake_client_step+0x85a>
   e47cc:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
   e47ce:	460b      	mov	r3, r1
   e47d0:	1a5a      	subs	r2, r3, r1
   e47d2:	f853 0b04 	ldr.w	r0, [r3], #4
   e47d6:	2800      	cmp	r0, #0
   e47d8:	d1fa      	bne.n	e47d0 <mbedtls_ssl_handshake_client_step+0x7c4>
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e47da:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
   e47de:	1cbe      	adds	r6, r7, #2
   e47e0:	4446      	add	r6, r8
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e47e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
#if defined(MBEDTLS_RSA_C)
        sig_alg_len += 2;
#endif
    }

    if( end < p || (size_t)( end - p ) < sig_alg_len + 6 )
   e47e6:	429e      	cmp	r6, r3
   e47e8:	d83e      	bhi.n	e4868 <mbedtls_ssl_handshake_client_step+0x85c>
   e47ea:	1b9b      	subs	r3, r3, r6
   e47ec:	3206      	adds	r2, #6
   e47ee:	4293      	cmp	r3, r2
   e47f0:	d33a      	bcc.n	e4868 <mbedtls_ssl_handshake_client_step+0x85c>
   e47f2:	1db3      	adds	r3, r6, #6
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
    size_t sig_alg_len = 0;
    const int *md;
#if defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C)
    unsigned char *sig_alg_list = buf + 6;
   e47f4:	460a      	mov	r2, r1
    /*
     * Prepare signature_algorithms extension (TLS 1.2)
     */
    sig_alg_len = 0;

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
   e47f6:	6810      	ldr	r0, [r2, #0]
   e47f8:	910b      	str	r1, [sp, #44]	; 0x2c
   e47fa:	3304      	adds	r3, #4
   e47fc:	ebc1 0e02 	rsb	lr, r1, r2
   e4800:	9207      	str	r2, [sp, #28]
   e4802:	920a      	str	r2, [sp, #40]	; 0x28
   e4804:	9308      	str	r3, [sp, #32]
   e4806:	9309      	str	r3, [sp, #36]	; 0x24
   e4808:	b1d8      	cbz	r0, e4842 <mbedtls_ssl_handshake_client_step+0x836>
    {
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
   e480a:	f7fb f94d 	bl	dfaa8 <mbedtls_ssl_hash_from_md_alg>
   e480e:	9b08      	ldr	r3, [sp, #32]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
   e4810:	9309      	str	r3, [sp, #36]	; 0x24
   e4812:	f04f 0203 	mov.w	r2, #3
    sig_alg_len = 0;

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
    {
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
   e4816:	f803 0c04 	strb.w	r0, [r3, #-4]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
   e481a:	f803 2c03 	strb.w	r2, [r3, #-3]
   e481e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
   e4820:	9b07      	ldr	r3, [sp, #28]
   e4822:	3204      	adds	r2, #4
   e4824:	6818      	ldr	r0, [r3, #0]
   e4826:	9208      	str	r2, [sp, #32]
   e4828:	920a      	str	r2, [sp, #40]	; 0x28
   e482a:	f7fb f93d 	bl	dfaa8 <mbedtls_ssl_hash_from_md_alg>
   e482e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e4830:	990b      	ldr	r1, [sp, #44]	; 0x2c
   e4832:	f803 0c02 	strb.w	r0, [r3, #-2]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
   e4836:	f04f 0201 	mov.w	r2, #1
   e483a:	f803 2c01 	strb.w	r2, [r3, #-1]
   e483e:	9a08      	ldr	r2, [sp, #32]
   e4840:	e7d9      	b.n	e47f6 <mbedtls_ssl_handshake_client_step+0x7ea>
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
   e4842:	230d      	movs	r3, #13
   e4844:	7073      	strb	r3, [r6, #1]

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
   e4846:	f10e 0302 	add.w	r3, lr, #2
   e484a:	0a1b      	lsrs	r3, r3, #8
   e484c:	70b3      	strb	r3, [r6, #2]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
   e484e:	fa5f f38e 	uxtb.w	r3, lr
   e4852:	1c9a      	adds	r2, r3, #2
   e4854:	70f2      	strb	r2, [r6, #3]

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
   e4856:	ea4f 221e 	mov.w	r2, lr, lsr #8
     * } SignatureAndHashAlgorithm;
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
   e485a:	7030      	strb	r0, [r6, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
   e485c:	7132      	strb	r2, [r6, #4]
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );
   e485e:	7173      	strb	r3, [r6, #5]

    *olen = 6 + sig_alg_len;
   e4860:	f10e 0006 	add.w	r0, lr, #6
   e4864:	e000      	b.n	e4868 <mbedtls_ssl_handshake_client_step+0x85c>
    const int *md;
#if defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C)
    unsigned char *sig_alg_list = buf + 6;
#endif

    *olen = 0;
   e4866:	2000      	movs	r0, #0
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
   e4868:	4407      	add	r7, r0
#endif

#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
    if( uses_ec )
   e486a:	f1ba 0f00 	cmp.w	sl, #0
   e486e:	d05e      	beq.n	e492e <mbedtls_ssl_handshake_client_step+0x922>
    *olen = 0;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_elliptic_curves extension" ) );

#if defined(MBEDTLS_ECP_C)
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
   e4870:	6823      	ldr	r3, [r4, #0]
static void ssl_write_supported_elliptic_curves_ext( mbedtls_ssl_context *ssl,
                                                     unsigned char *buf,
                                                     size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e4872:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e4876:	6e1e      	ldr	r6, [r3, #96]	; 0x60
    unsigned char *elliptic_curve_list = p + 6;
    size_t elliptic_curve_len = 0;
   e4878:	f04f 0a00 	mov.w	sl, #0
   e487c:	3e01      	subs	r6, #1
    *olen = 0;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_elliptic_curves extension" ) );

#if defined(MBEDTLS_ECP_C)
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
   e487e:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   e4882:	b148      	cbz	r0, e4898 <mbedtls_ssl_handshake_client_step+0x88c>
   e4884:	9207      	str	r2, [sp, #28]
#else
    for( info = mbedtls_ecp_curve_list(); info->grp_id != MBEDTLS_ECP_DP_NONE; info++ )
#endif
    {
#if defined(MBEDTLS_ECP_C)
        info = mbedtls_ecp_curve_info_from_grp_id( *grp_id );
   e4886:	f7f3 fc23 	bl	d80d0 <mbedtls_ecp_curve_info_from_grp_id>
#endif
        if( info == NULL )
   e488a:	9a07      	ldr	r2, [sp, #28]
   e488c:	b908      	cbnz	r0, e4892 <mbedtls_ssl_handshake_client_step+0x886>
    const mbedtls_ecp_group_id *grp_id;
#else
    ((void) ssl);
#endif

    *olen = 0;
   e488e:	2300      	movs	r3, #0
   e4890:	e034      	b.n	e48fc <mbedtls_ssl_handshake_client_step+0x8f0>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid curve in ssl configuration" ) );
            return;
        }

        elliptic_curve_len += 2;
   e4892:	f10a 0a02 	add.w	sl, sl, #2
   e4896:	e7f2      	b.n	e487e <mbedtls_ssl_handshake_client_step+0x872>

#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
    if( uses_ec )
    {
        ssl_write_supported_elliptic_curves_ext( ssl, p + 2 + ext_len, &olen );
   e4898:	1cbe      	adds	r6, r7, #2
   e489a:	4446      	add	r6, r8
static void ssl_write_supported_elliptic_curves_ext( mbedtls_ssl_context *ssl,
                                                     unsigned char *buf,
                                                     size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e489c:	f502 5300 	add.w	r3, r2, #8192	; 0x2000
        }

        elliptic_curve_len += 2;
    }

    if( end < p || (size_t)( end - p ) < 6 + elliptic_curve_len )
   e48a0:	429e      	cmp	r6, r3
   e48a2:	d8f4      	bhi.n	e488e <mbedtls_ssl_handshake_client_step+0x882>
   e48a4:	1b9b      	subs	r3, r3, r6
   e48a6:	f10a 0206 	add.w	r2, sl, #6
   e48aa:	4293      	cmp	r3, r2
   e48ac:	d3ef      	bcc.n	e488e <mbedtls_ssl_handshake_client_step+0x882>
    }

    elliptic_curve_len = 0;

#if defined(MBEDTLS_ECP_C)
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
   e48ae:	6823      	ldr	r3, [r4, #0]
   e48b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   e48b2:	46b2      	mov	sl, r6
   e48b4:	3a01      	subs	r2, #1
   e48b6:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   e48ba:	9207      	str	r2, [sp, #28]
   e48bc:	ebc6 030a 	rsb	r3, r6, sl
   e48c0:	9208      	str	r2, [sp, #32]
   e48c2:	f10a 0a02 	add.w	sl, sl, #2
   e48c6:	b150      	cbz	r0, e48de <mbedtls_ssl_handshake_client_step+0x8d2>
#else
    for( info = mbedtls_ecp_curve_list(); info->grp_id != MBEDTLS_ECP_DP_NONE; info++ )
#endif
    {
#if defined(MBEDTLS_ECP_C)
        info = mbedtls_ecp_curve_info_from_grp_id( *grp_id );
   e48c8:	f7f3 fc02 	bl	d80d0 <mbedtls_ecp_curve_info_from_grp_id>
#endif
        elliptic_curve_list[elliptic_curve_len++] = info->tls_id >> 8;
   e48cc:	8843      	ldrh	r3, [r0, #2]
   e48ce:	9a07      	ldr	r2, [sp, #28]
   e48d0:	121b      	asrs	r3, r3, #8
   e48d2:	f88a 3004 	strb.w	r3, [sl, #4]
        elliptic_curve_list[elliptic_curve_len++] = info->tls_id & 0xFF;
   e48d6:	8843      	ldrh	r3, [r0, #2]
   e48d8:	f88a 3005 	strb.w	r3, [sl, #5]
   e48dc:	e7eb      	b.n	e48b6 <mbedtls_ssl_handshake_client_step+0x8aa>
    }

    if( elliptic_curve_len == 0 )
   e48de:	2b00      	cmp	r3, #0
   e48e0:	d0d5      	beq.n	e488e <mbedtls_ssl_handshake_client_step+0x882>
        return;

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES      ) & 0xFF );
   e48e2:	220a      	movs	r2, #10
   e48e4:	7072      	strb	r2, [r6, #1]

    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 ) >> 8 ) & 0xFF );
   e48e6:	1c9a      	adds	r2, r3, #2
   e48e8:	0a12      	lsrs	r2, r2, #8
   e48ea:	70b2      	strb	r2, [r6, #2]
    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 )      ) & 0xFF );
   e48ec:	b2da      	uxtb	r2, r3
   e48ee:	1c91      	adds	r1, r2, #2
   e48f0:	70f1      	strb	r1, [r6, #3]

    *p++ = (unsigned char)( ( ( elliptic_curve_len     ) >> 8 ) & 0xFF );
   e48f2:	0a19      	lsrs	r1, r3, #8
    }

    if( elliptic_curve_len == 0 )
        return;

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES >> 8 ) & 0xFF );
   e48f4:	7030      	strb	r0, [r6, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES      ) & 0xFF );

    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 ) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 )      ) & 0xFF );

    *p++ = (unsigned char)( ( ( elliptic_curve_len     ) >> 8 ) & 0xFF );
   e48f6:	7131      	strb	r1, [r6, #4]
    *p++ = (unsigned char)( ( ( elliptic_curve_len     )      ) & 0xFF );
   e48f8:	7172      	strb	r2, [r6, #5]

    *olen = 6 + elliptic_curve_len;
   e48fa:	3306      	adds	r3, #6
#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
    if( uses_ec )
    {
        ssl_write_supported_elliptic_curves_ext( ssl, p + 2 + ext_len, &olen );
        ext_len += olen;
   e48fc:	18f8      	adds	r0, r7, r3
static void ssl_write_supported_point_formats_ext( mbedtls_ssl_context *ssl,
                                                   unsigned char *buf,
                                                   size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e48fe:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    if( uses_ec )
    {
        ssl_write_supported_elliptic_curves_ext( ssl, p + 2 + ext_len, &olen );
        ext_len += olen;

        ssl_write_supported_point_formats_ext( ssl, p + 2 + ext_len, &olen );
   e4902:	1c83      	adds	r3, r0, #2
   e4904:	4443      	add	r3, r8
static void ssl_write_supported_point_formats_ext( mbedtls_ssl_context *ssl,
                                                   unsigned char *buf,
                                                   size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e4906:	f502 5200 	add.w	r2, r2, #8192	; 0x2000

    *olen = 0;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_point_formats extension" ) );

    if( end < p || (size_t)( end - p ) < 6 )
   e490a:	4293      	cmp	r3, r2
   e490c:	f04f 0700 	mov.w	r7, #0
   e4910:	d80c      	bhi.n	e492c <mbedtls_ssl_handshake_client_step+0x920>
   e4912:	1ad2      	subs	r2, r2, r3
   e4914:	2a05      	cmp	r2, #5
   e4916:	d909      	bls.n	e492c <mbedtls_ssl_handshake_client_step+0x920>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS      ) & 0xFF );
   e4918:	220b      	movs	r2, #11
   e491a:	705a      	strb	r2, [r3, #1]

    *p++ = 0x00;
    *p++ = 2;
   e491c:	2202      	movs	r2, #2
   e491e:	70da      	strb	r2, [r3, #3]

    *p++ = 1;
   e4920:	2201      	movs	r2, #1
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS >> 8 ) & 0xFF );
   e4922:	701f      	strb	r7, [r3, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS      ) & 0xFF );

    *p++ = 0x00;
   e4924:	709f      	strb	r7, [r3, #2]
    *p++ = 2;

    *p++ = 1;
    *p++ = MBEDTLS_ECP_PF_UNCOMPRESSED;
   e4926:	715f      	strb	r7, [r3, #5]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS      ) & 0xFF );

    *p++ = 0x00;
    *p++ = 2;

    *p++ = 1;
   e4928:	711a      	strb	r2, [r3, #4]
    *p++ = MBEDTLS_ECP_PF_UNCOMPRESSED;

    *olen = 6;
   e492a:	2706      	movs	r7, #6
    {
        ssl_write_supported_elliptic_curves_ext( ssl, p + 2 + ext_len, &olen );
        ext_len += olen;

        ssl_write_supported_point_formats_ext( ssl, p + 2 + ext_len, &olen );
        ext_len += olen;
   e492c:	4407      	add	r7, r0
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;

    *olen = 0;

    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
   e492e:	6823      	ldr	r3, [r4, #0]
   e4930:	f8b3 007c 	ldrh.w	r0, [r3, #124]	; 0x7c
   e4934:	f410 70e0 	ands.w	r0, r0, #448	; 0x1c0
   e4938:	d018      	beq.n	e496c <mbedtls_ssl_handshake_client_step+0x960>
static void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                               unsigned char *buf,
                                               size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e493a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    ssl_write_ecjpake_kkpp_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
   e493e:	1cbb      	adds	r3, r7, #2
   e4940:	4443      	add	r3, r8
static void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                               unsigned char *buf,
                                               size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e4942:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding max_fragment_length extension" ) );

    if( end < p || (size_t)( end - p ) < 5 )
   e4946:	4293      	cmp	r3, r2
   e4948:	f04f 0000 	mov.w	r0, #0
   e494c:	d80e      	bhi.n	e496c <mbedtls_ssl_handshake_client_step+0x960>
   e494e:	1ad2      	subs	r2, r2, r3
   e4950:	2a04      	cmp	r2, #4
   e4952:	d90b      	bls.n	e496c <mbedtls_ssl_handshake_client_step+0x960>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
   e4954:	2201      	movs	r2, #1
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
   e4956:	7018      	strb	r0, [r3, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );

    *p++ = 0x00;
   e4958:	7098      	strb	r0, [r3, #2]
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
   e495a:	705a      	strb	r2, [r3, #1]

    *p++ = 0x00;
    *p++ = 1;
   e495c:	70da      	strb	r2, [r3, #3]

    *p++ = ssl->conf->mfl_code;
   e495e:	6822      	ldr	r2, [r4, #0]
   e4960:	f8b2 207c 	ldrh.w	r2, [r2, #124]	; 0x7c
   e4964:	f3c2 1282 	ubfx	r2, r2, #6, #3
   e4968:	711a      	strb	r2, [r3, #4]

    *olen = 5;
   e496a:	2005      	movs	r0, #5
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;

    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )
   e496c:	6823      	ldr	r3, [r4, #0]
   e496e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
   e4972:	f003 0302 	and.w	r3, r3, #2
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
   e4976:	4407      	add	r7, r0
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;

    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )
   e4978:	f003 06ff 	and.w	r6, r3, #255	; 0xff
   e497c:	b313      	cbz	r3, e49c4 <mbedtls_ssl_handshake_client_step+0x9b8>
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e497e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ssl_write_alpn_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );
   e4982:	1cb8      	adds	r0, r7, #2
   e4984:	4440      	add	r0, r8
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e4986:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
   e498a:	4298      	cmp	r0, r3
   e498c:	d815      	bhi.n	e49ba <mbedtls_ssl_handshake_client_step+0x9ae>
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;
   e498e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e4990:	6e92      	ldr	r2, [r2, #104]	; 0x68
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
   e4992:	1a1b      	subs	r3, r3, r0
   e4994:	1d16      	adds	r6, r2, #4
   e4996:	42b3      	cmp	r3, r6
   e4998:	f04f 0300 	mov.w	r3, #0
   e499c:	d30f      	bcc.n	e49be <mbedtls_ssl_handshake_client_step+0x9b2>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET >> 8 ) & 0xFF );
   e499e:	7003      	strb	r3, [r0, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );
   e49a0:	2323      	movs	r3, #35	; 0x23
   e49a2:	7043      	strb	r3, [r0, #1]

    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
   e49a4:	0a13      	lsrs	r3, r2, #8
   e49a6:	7083      	strb	r3, [r0, #2]
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );
   e49a8:	70c2      	strb	r2, [r0, #3]

    *olen = 4;

    if( ssl->session_negotiate->ticket == NULL || tlen == 0 )
   e49aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e49ac:	6e59      	ldr	r1, [r3, #100]	; 0x64
   e49ae:	b141      	cbz	r1, e49c2 <mbedtls_ssl_handshake_client_step+0x9b6>
   e49b0:	b13a      	cbz	r2, e49c2 <mbedtls_ssl_handshake_client_step+0x9b6>
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "sending session ticket of length %d", tlen ) );

    memcpy( p, ssl->session_negotiate->ticket, tlen );
   e49b2:	3004      	adds	r0, #4
   e49b4:	f002 facb 	bl	e6f4e <memcpy>
   e49b8:	e004      	b.n	e49c4 <mbedtls_ssl_handshake_client_step+0x9b8>
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;
   e49ba:	2600      	movs	r6, #0
   e49bc:	e002      	b.n	e49c4 <mbedtls_ssl_handshake_client_step+0x9b8>
   e49be:	461e      	mov	r6, r3
   e49c0:	e000      	b.n	e49c4 <mbedtls_ssl_handshake_client_step+0x9b8>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );

    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );

    *olen = 4;
   e49c2:	2604      	movs	r6, #4
    ((void) olen);

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
                   ext_len ) );

    if( ext_len > 0 )
   e49c4:	19bf      	adds	r7, r7, r6
    {
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
   e49c6:	bf1e      	ittt	ne
   e49c8:	0a3b      	lsrne	r3, r7, #8
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
        p += ext_len;
   e49ca:	eb0b 0807 	addne.w	r8, fp, r7
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
                   ext_len ) );

    if( ext_len > 0 )
    {
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
   e49ce:	712b      	strbne	r3, [r5, #4]
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
        p += ext_len;
    }

    ssl->out_msglen  = p - buf;
   e49d0:	ebc9 0308 	rsb	r3, r9, r8
                   ext_len ) );

    if( ext_len > 0 )
    {
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
   e49d4:	bf18      	it	ne
   e49d6:	716f      	strbne	r7, [r5, #5]
        p += ext_len;
    }

    ssl->out_msglen  = p - buf;
   e49d8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   e49dc:	2316      	movs	r3, #22
   e49de:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
   e49e2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e49e6:	2201      	movs	r2, #1
   e49e8:	701a      	strb	r2, [r3, #0]

    ssl->state++;
   e49ea:	6863      	ldr	r3, [r4, #4]
   e49ec:	4413      	add	r3, r2
   e49ee:	e603      	b.n	e45f8 <mbedtls_ssl_handshake_client_step+0x5ec>
                            ssl->conf->min_major_ver, ssl->conf->min_minor_ver,
                            ssl->major_ver, ssl->minor_ver,
                            ssl->conf->max_major_ver, ssl->conf->max_minor_ver ) );

        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                     MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );
   e49f0:	2246      	movs	r2, #70	; 0x46
   e49f2:	2102      	movs	r1, #2
   e49f4:	4620      	mov	r0, r4
   e49f6:	f7fa f9d9 	bl	dedac <mbedtls_ssl_send_alert_message>

        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
   e49fa:	4daf      	ldr	r5, [pc, #700]	; (e4cb8 <mbedtls_ssl_handshake_client_step+0xcac>)
   e49fc:	e1b6      	b.n	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )
   e49fe:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   e4a00:	f106 022b 	add.w	r2, r6, #43	; 0x2b
   e4a04:	4293      	cmp	r3, r2
   e4a06:	d912      	bls.n	e4a2e <mbedtls_ssl_handshake_client_step+0xa22>
    {
        ext_len = ( ( buf[38 + n] <<  8 )
   e4a08:	eb0a 0206 	add.w	r2, sl, r6
                  | ( buf[39 + n]       ) );
   e4a0c:	f892 7026 	ldrb.w	r7, [r2, #38]	; 0x26
   e4a10:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   e4a14:	ea42 2707 	orr.w	r7, r2, r7, lsl #8

        if( ( ext_len > 0 && ext_len < 4 ) ||
   e4a18:	1e7a      	subs	r2, r7, #1
   e4a1a:	2a02      	cmp	r2, #2
   e4a1c:	f67f abc6 	bls.w	e41ac <mbedtls_ssl_handshake_client_step+0x1a0>
   e4a20:	f106 022c 	add.w	r2, r6, #44	; 0x2c
   e4a24:	443a      	add	r2, r7
   e4a26:	4293      	cmp	r3, r2
   e4a28:	f47f abc0 	bne.w	e41ac <mbedtls_ssl_handshake_client_step+0x1a0>
   e4a2c:	e005      	b.n	e4a3a <mbedtls_ssl_handshake_client_step+0xa2e>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }
    }
    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )
   e4a2e:	f106 022a 	add.w	r2, r6, #42	; 0x2a
   e4a32:	4293      	cmp	r3, r2
   e4a34:	f47f abba 	bne.w	e41ac <mbedtls_ssl_handshake_client_step+0x1a0>
    {
        ext_len = 0;
   e4a38:	2700      	movs	r7, #0
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
   e4a3a:	eb0a 0306 	add.w	r3, sl, r6
   e4a3e:	f893 9023 	ldrb.w	r9, [r3, #35]	; 0x23
   e4a42:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
   e4a46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
   e4a4a:	ea42 2909 	orr.w	r9, r2, r9, lsl #8
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
   e4a4e:	2b00      	cmp	r3, #0
   e4a50:	f43f ab62 	beq.w	e4118 <mbedtls_ssl_handshake_client_step+0x10c>
#endif/* MBEDTLS_ZLIB_SUPPORT */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server hello, bad compression: %d", comp ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
   e4a54:	222f      	movs	r2, #47	; 0x2f
   e4a56:	2102      	movs	r1, #2
   e4a58:	4620      	mov	r0, r4
   e4a5a:	f7fa f9a7 	bl	dedac <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
   e4a5e:	4d97      	ldr	r5, [pc, #604]	; (e4cbc <mbedtls_ssl_handshake_client_step+0xcb0>)
   e4a60:	e184      	b.n	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
   e4a62:	2e00      	cmp	r6, #0
   e4a64:	f43f abb0 	beq.w	e41c8 <mbedtls_ssl_handshake_client_step+0x1bc>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
   e4a68:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
   e4a6a:	6803      	ldr	r3, [r0, #0]
   e4a6c:	4599      	cmp	r9, r3
   e4a6e:	f47f abab 	bne.w	e41c8 <mbedtls_ssl_handshake_client_step+0x1bc>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
   e4a72:	6843      	ldr	r3, [r0, #4]
   e4a74:	2b00      	cmp	r3, #0
   e4a76:	f47f aba7 	bne.w	e41c8 <mbedtls_ssl_handshake_client_step+0x1bc>
        ssl->session_negotiate->compression != comp ||
   e4a7a:	6883      	ldr	r3, [r0, #8]
   e4a7c:	429e      	cmp	r6, r3
   e4a7e:	f47f aba3 	bne.w	e41c8 <mbedtls_ssl_handshake_client_step+0x1bc>
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
   e4a82:	4632      	mov	r2, r6
   e4a84:	4641      	mov	r1, r8
   e4a86:	300c      	adds	r0, #12
   e4a88:	f002 fa52 	bl	e6f30 <memcmp>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
   e4a8c:	2800      	cmp	r0, #0
   e4a8e:	f47f ab9b 	bne.w	e41c8 <mbedtls_ssl_handshake_client_step+0x1bc>
        ssl->session_negotiate->id_len = n;
        memcpy( ssl->session_negotiate->id, buf + 35, n );
    }
    else
    {
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
   e4a92:	230c      	movs	r3, #12
   e4a94:	6063      	str	r3, [r4, #4]

        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
   e4a96:	4620      	mov	r0, r4
   e4a98:	f7f9 fdc8 	bl	de62c <mbedtls_ssl_derive_keys>
   e4a9c:	4680      	mov	r8, r0
   e4a9e:	2800      	cmp	r0, #0
   e4aa0:	f43f aba5 	beq.w	e41ee <mbedtls_ssl_handshake_client_step+0x1e2>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
   e4aa4:	2250      	movs	r2, #80	; 0x50
   e4aa6:	2102      	movs	r1, #2
   e4aa8:	4620      	mov	r0, r4
   e4aaa:	f7fa f97f 	bl	dedac <mbedtls_ssl_send_alert_message>
   e4aae:	4645      	mov	r5, r8
   e4ab0:	e15c      	b.n	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
            ssl->session_negotiate->ciphersuite )
   e4ab2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e4ab4:	6812      	ldr	r2, [r2, #0]
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
   e4ab6:	4290      	cmp	r0, r2
   e4ab8:	f47f ab9e 	bne.w	e41f8 <mbedtls_ssl_handshake_client_step+0x1ec>
        {
            break;
        }
    }

    suite_info = mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite );
   e4abc:	f7fe fee6 	bl	e388c <mbedtls_ssl_ciphersuite_from_id>
    if( ssl_validate_ciphersuite( suite_info, ssl, ssl->minor_ver, ssl->minor_ver ) != 0 )
   e4ac0:	68e3      	ldr	r3, [r4, #12]
static int ssl_validate_ciphersuite( const mbedtls_ssl_ciphersuite_t * suite_info,
                                     const mbedtls_ssl_context * ssl,
                                     int min_minor_ver, int max_minor_ver )
{
    (void) ssl;
    if( suite_info == NULL )
   e4ac2:	2800      	cmp	r0, #0
   e4ac4:	f43f ab9d 	beq.w	e4202 <mbedtls_ssl_handshake_client_step+0x1f6>
        return( 1 );

    if( suite_info->min_minor_ver > max_minor_ver ||
   e4ac8:	6902      	ldr	r2, [r0, #16]
   e4aca:	429a      	cmp	r2, r3
   e4acc:	f73f ab99 	bgt.w	e4202 <mbedtls_ssl_handshake_client_step+0x1f6>
   e4ad0:	6982      	ldr	r2, [r0, #24]
   e4ad2:	4293      	cmp	r3, r2
   e4ad4:	f73f ab95 	bgt.w	e4202 <mbedtls_ssl_handshake_client_step+0x1f6>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }
    ssl->session_negotiate->compression = comp;
   e4ad8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e4ada:	2200      	movs	r2, #0
   e4adc:	605a      	str	r2, [r3, #4]

    ext = buf + 40 + n;
   e4ade:	f106 0228 	add.w	r2, r6, #40	; 0x28
   e4ae2:	4452      	add	r2, sl
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    ((void) buf);

    ssl->handshake->new_session_ticket = 1;
   e4ae4:	2601      	movs	r6, #1
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        switch( ext_id )
   e4ae6:	f64f 7001 	movw	r0, #65281	; 0xff01

    ext = buf + 40 + n;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );

    while( ext_len )
   e4aea:	2f00      	cmp	r7, #0
   e4aec:	d051      	beq.n	e4b92 <mbedtls_ssl_handshake_client_step+0xb86>
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
                                | ( ext[1]       ) );
   e4aee:	7811      	ldrb	r1, [r2, #0]
   e4af0:	7853      	ldrb	r3, [r2, #1]
        unsigned int ext_size = ( ( ext[2] <<  8 )
                                | ( ext[3]       ) );
   e4af2:	f892 e002 	ldrb.w	lr, [r2, #2]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );

    while( ext_len )
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
                                | ( ext[1]       ) );
   e4af6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
        unsigned int ext_size = ( ( ext[2] <<  8 )
                                | ( ext[3]       ) );
   e4afa:	78d1      	ldrb	r1, [r2, #3]
   e4afc:	ea41 210e 	orr.w	r1, r1, lr, lsl #8

        if( ext_size + 4 > ext_len )
   e4b00:	f101 0e04 	add.w	lr, r1, #4
   e4b04:	4577      	cmp	r7, lr
   e4b06:	f4ff ab51 	bcc.w	e41ac <mbedtls_ssl_handshake_client_step+0x1a0>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        switch( ext_id )
   e4b0a:	2b0b      	cmp	r3, #11
   e4b0c:	d02a      	beq.n	e4b64 <mbedtls_ssl_handshake_client_step+0xb58>
   e4b0e:	dc02      	bgt.n	e4b16 <mbedtls_ssl_handshake_client_step+0xb0a>
   e4b10:	2b01      	cmp	r3, #1
   e4b12:	d00c      	beq.n	e4b2e <mbedtls_ssl_handshake_client_step+0xb22>
   e4b14:	e04d      	b.n	e4bb2 <mbedtls_ssl_handshake_client_step+0xba6>
   e4b16:	2b23      	cmp	r3, #35	; 0x23
   e4b18:	d01a      	beq.n	e4b50 <mbedtls_ssl_handshake_client_step+0xb44>
   e4b1a:	4283      	cmp	r3, r0
   e4b1c:	d149      	bne.n	e4bb2 <mbedtls_ssl_handshake_client_step+0xba6>
        }
    }
    else
#endif /* MBEDTLS_SSL_RENEGOTIATION */
    {
        if( len != 1 || buf[0] != 0x00 )
   e4b1e:	2901      	cmp	r1, #1
   e4b20:	d144      	bne.n	e4bac <mbedtls_ssl_handshake_client_step+0xba0>
   e4b22:	7913      	ldrb	r3, [r2, #4]
   e4b24:	2b00      	cmp	r3, #0
   e4b26:	d141      	bne.n	e4bac <mbedtls_ssl_handshake_client_step+0xba0>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
   e4b28:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
   e4b2c:	e041      	b.n	e4bb2 <mbedtls_ssl_handshake_client_step+0xba6>
{
    /*
     * server should use the extension only if we did,
     * and if so the server's value should match ours (and len is always 1)
     */
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ||
   e4b2e:	6823      	ldr	r3, [r4, #0]
   e4b30:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
   e4b34:	f403 7ce0 	and.w	ip, r3, #448	; 0x1c0
   e4b38:	f1bc 0f00 	cmp.w	ip, #0
   e4b3c:	d036      	beq.n	e4bac <mbedtls_ssl_handshake_client_step+0xba0>
   e4b3e:	2901      	cmp	r1, #1
   e4b40:	d134      	bne.n	e4bac <mbedtls_ssl_handshake_client_step+0xba0>
        len != 1 ||
   e4b42:	f892 c004 	ldrb.w	ip, [r2, #4]
   e4b46:	f3c3 1382 	ubfx	r3, r3, #6, #3
   e4b4a:	459c      	cmp	ip, r3
   e4b4c:	d031      	beq.n	e4bb2 <mbedtls_ssl_handshake_client_step+0xba6>
   e4b4e:	e02d      	b.n	e4bac <mbedtls_ssl_handshake_client_step+0xba0>
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static int ssl_parse_session_ticket_ext( mbedtls_ssl_context *ssl,
                                         const unsigned char *buf,
                                         size_t len )
{
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED ||
   e4b50:	6823      	ldr	r3, [r4, #0]
   e4b52:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
   e4b56:	079b      	lsls	r3, r3, #30
   e4b58:	d528      	bpl.n	e4bac <mbedtls_ssl_handshake_client_step+0xba0>
   e4b5a:	bb39      	cbnz	r1, e4bac <mbedtls_ssl_handshake_client_step+0xba0>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    ((void) buf);

    ssl->handshake->new_session_ticket = 1;
   e4b5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e4b5e:	f8c3 6358 	str.w	r6, [r3, #856]	; 0x358
   e4b62:	e026      	b.n	e4bb2 <mbedtls_ssl_handshake_client_step+0xba6>
                                                  size_t len )
{
    size_t list_size;
    const unsigned char *p;

    if( len == 0 || (size_t)( buf[0] + 1 ) != len )
   e4b64:	2900      	cmp	r1, #0
   e4b66:	f43f ab21 	beq.w	e41ac <mbedtls_ssl_handshake_client_step+0x1a0>
   e4b6a:	7913      	ldrb	r3, [r2, #4]
   e4b6c:	f103 0c01 	add.w	ip, r3, #1
   e4b70:	4561      	cmp	r1, ip
   e4b72:	f47f ab1b 	bne.w	e41ac <mbedtls_ssl_handshake_client_step+0x1a0>
   e4b76:	f102 0c04 	add.w	ip, r2, #4
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }
    list_size = buf[0];

    p = buf + 1;
    while( list_size > 0 )
   e4b7a:	b1bb      	cbz	r3, e4bac <mbedtls_ssl_handshake_client_step+0xba0>
    {
        if( p[0] == MBEDTLS_ECP_PF_UNCOMPRESSED ||
   e4b7c:	f81c 8f01 	ldrb.w	r8, [ip, #1]!
   e4b80:	f1b8 0f01 	cmp.w	r8, #1
   e4b84:	d803      	bhi.n	e4b8e <mbedtls_ssl_handshake_client_step+0xb82>
            p[0] == MBEDTLS_ECP_PF_COMPRESSED )
        {
#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C)
            ssl->handshake->ecdh_ctx.point_format = p[0];
   e4b86:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e4b88:	f8c3 80e0 	str.w	r8, [r3, #224]	; 0xe0
   e4b8c:	e011      	b.n	e4bb2 <mbedtls_ssl_handshake_client_step+0xba6>
#endif
            MBEDTLS_SSL_DEBUG_MSG( 4, ( "point format selected: %d", p[0] ) );
            return( 0 );
        }

        list_size--;
   e4b8e:	3b01      	subs	r3, #1
   e4b90:	e7f3      	b.n	e4b7a <mbedtls_ssl_handshake_client_step+0xb6e>
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
   e4b92:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   e4b96:	2b00      	cmp	r3, #0
   e4b98:	f040 80e8 	bne.w	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
   e4b9c:	6823      	ldr	r3, [r4, #0]
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
   e4b9e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   e4ba2:	f003 0330 	and.w	r3, r3, #48	; 0x30
   e4ba6:	2b20      	cmp	r3, #32
   e4ba8:	f040 80e0 	bne.w	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
        p++;
    }

    MBEDTLS_SSL_DEBUG_MSG( 1, ( "no point format in common" ) );
    mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                    MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
   e4bac:	2228      	movs	r2, #40	; 0x28
   e4bae:	f7ff bb29 	b.w	e4204 <mbedtls_ssl_handshake_client_step+0x1f8>
        default:
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
   e4bb2:	1a79      	subs	r1, r7, r1
   e4bb4:	1f0f      	subs	r7, r1, #4
        ext += 4 + ext_size;

        if( ext_len > 0 && ext_len < 4 )
   e4bb6:	3905      	subs	r1, #5
   e4bb8:	2902      	cmp	r1, #2
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
        ext += 4 + ext_size;
   e4bba:	4472      	add	r2, lr

        if( ext_len > 0 && ext_len < 4 )
   e4bbc:	d895      	bhi.n	e4aea <mbedtls_ssl_handshake_client_step+0xade>
    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ticket alloc failed" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   e4bbe:	4d40      	ldr	r5, [pc, #256]	; (e4cc0 <mbedtls_ssl_handshake_client_step+0xcb4>)
   e4bc0:	e0d4      	b.n	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
    {
        if( ssl_parse_server_ecdh_params( ssl, &p, end ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
   e4bc2:	222f      	movs	r2, #47	; 0x2f
   e4bc4:	2102      	movs	r1, #2
   e4bc6:	4620      	mov	r0, r4
   e4bc8:	f7fa f8f0 	bl	dedac <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
   e4bcc:	4d3d      	ldr	r5, [pc, #244]	; (e4cc4 <mbedtls_ssl_handshake_client_step+0xcb8>)
   e4bce:	e0cd      	b.n	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>

        if( p > end - 2 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   e4bd0:	2232      	movs	r2, #50	; 0x32
   e4bd2:	e7f7      	b.n	e4bc4 <mbedtls_ssl_handshake_client_step+0xbb8>
        }

        /*
         * Verify signature
         */
        if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk, pk_alg ) )
   e4bd4:	4641      	mov	r1, r8
   e4bd6:	30bc      	adds	r0, #188	; 0xbc
   e4bd8:	f7f9 fa76 	bl	de0c8 <mbedtls_pk_can_do>
   e4bdc:	b930      	cbnz	r0, e4bec <mbedtls_ssl_handshake_client_step+0xbe0>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
   e4bde:	2228      	movs	r2, #40	; 0x28
   e4be0:	2102      	movs	r1, #2
   e4be2:	4620      	mov	r0, r4
   e4be4:	f7fa f8e2 	bl	dedac <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
   e4be8:	4d37      	ldr	r5, [pc, #220]	; (e4cc8 <mbedtls_ssl_handshake_client_step+0xcbc>)
   e4bea:	e0bf      	b.n	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
        if( ssl->handshake->ecrs_enabled )
            rs_ctx = &ssl->handshake->ecrs_ctx.pk;
#endif

        if( ( ret = mbedtls_pk_verify_restartable(
                        &ssl->session_negotiate->peer_cert->pk,
   e4bec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
        if( ssl->handshake->ecrs_enabled )
            rs_ctx = &ssl->handshake->ecrs_ctx.pk;
#endif

        if( ( ret = mbedtls_pk_verify_restartable(
   e4bee:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e4bf0:	f8cd b004 	str.w	fp, [sp, #4]
   e4bf4:	2300      	movs	r3, #0
   e4bf6:	9302      	str	r3, [sp, #8]
   e4bf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e4bfa:	9300      	str	r3, [sp, #0]
   e4bfc:	aa0e      	add	r2, sp, #56	; 0x38
   e4bfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e4c00:	4649      	mov	r1, r9
   e4c02:	30bc      	adds	r0, #188	; 0xbc
   e4c04:	f7f9 fa68 	bl	de0d8 <mbedtls_pk_verify_restartable>
   e4c08:	4606      	mov	r6, r0
   e4c0a:	2800      	cmp	r0, #0
   e4c0c:	f43f abd4 	beq.w	e43b8 <mbedtls_ssl_handshake_client_step+0x3ac>
        {
#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
            if( ret != MBEDTLS_ERR_ECP_IN_PROGRESS )
#endif
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                                MBEDTLS_SSL_ALERT_MSG_DECRYPT_ERROR );
   e4c10:	2233      	movs	r2, #51	; 0x33
   e4c12:	2102      	movs	r1, #2
   e4c14:	4620      	mov	r0, r4
   e4c16:	f7fa f8c9 	bl	dedac <mbedtls_ssl_send_alert_message>
   e4c1a:	4635      	mov	r5, r6
   e4c1c:	e0a6      	b.n	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
        }
        else
#endif
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   e4c1e:	4d2b      	ldr	r5, [pc, #172]	; (e4ccc <mbedtls_ssl_handshake_client_step+0xcc0>)
   e4c20:	e0a4      	b.n	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );

    if( ! mbedtls_ssl_ciphersuite_cert_req_allowed( ciphersuite_info ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate request" ) );
        ssl->state++;
   e4c22:	2306      	movs	r3, #6
   e4c24:	f7ff bbca 	b.w	e43bc <mbedtls_ssl_handshake_client_step+0x3b0>
        return( 0 );
    }

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e4c28:	4631      	mov	r1, r6
   e4c2a:	4620      	mov	r0, r4
   e4c2c:	f7fa f8da 	bl	dede4 <mbedtls_ssl_read_record>
   e4c30:	2800      	cmp	r0, #0
   e4c32:	f47f aaf0 	bne.w	e4216 <mbedtls_ssl_handshake_client_step+0x20a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e4c36:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e4c38:	2b16      	cmp	r3, #22
   e4c3a:	f47f ab03 	bne.w	e4244 <mbedtls_ssl_handshake_client_step+0x238>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    ssl->state++;
   e4c3e:	6863      	ldr	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
   e4c40:	6e62      	ldr	r2, [r4, #100]	; 0x64
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    ssl->state++;
   e4c42:	3301      	adds	r3, #1
   e4c44:	6063      	str	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
   e4c46:	7813      	ldrb	r3, [r2, #0]
   e4c48:	2b0d      	cmp	r3, #13
   e4c4a:	bf0c      	ite	eq
   e4c4c:	2301      	moveq	r3, #1
   e4c4e:	2300      	movne	r3, #0
   e4c50:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
                        ssl->client_auth ? "a" : "no" ) );

    if( ssl->client_auth == 0 )
   e4c54:	d002      	beq.n	e4c5c <mbedtls_ssl_handshake_client_step+0xc50>
    {
        /* Current message is probably the ServerHelloDone */
        ssl->keep_current_message = 1;
   e4c56:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
   e4c5a:	e087      	b.n	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
     *  superficially sane.
     */
    buf = ssl->in_msg;

    /* certificate_types */
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) )
   e4c5c:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   e4c5e:	2e04      	cmp	r6, #4
   e4c60:	d806      	bhi.n	e4c70 <mbedtls_ssl_handshake_client_step+0xc64>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   e4c62:	2232      	movs	r2, #50	; 0x32
   e4c64:	2102      	movs	r1, #2
   e4c66:	4620      	mov	r0, r4
   e4c68:	f7fa f8a0 	bl	dedac <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
   e4c6c:	4d18      	ldr	r5, [pc, #96]	; (e4cd0 <mbedtls_ssl_handshake_client_step+0xcc4>)
   e4c6e:	e07d      	b.n	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
    }
    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];
   e4c70:	7913      	ldrb	r3, [r2, #4]
     * Both reach at most the index:
     *    ...hdr_len + 2 + n,
     * therefore the buffer length at this point must be greater than that
     * regardless of the actual code path.
     */
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
   e4c72:	1d98      	adds	r0, r3, #6
   e4c74:	4286      	cmp	r6, r0
   e4c76:	d9f4      	bls.n	e4c62 <mbedtls_ssl_handshake_client_step+0xc56>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
    }

    /* supported_signature_algorithms */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
   e4c78:	68e1      	ldr	r1, [r4, #12]
   e4c7a:	2903      	cmp	r1, #3
   e4c7c:	d10a      	bne.n	e4c94 <mbedtls_ssl_handshake_client_step+0xc88>
    {
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
   e4c7e:	18d1      	adds	r1, r2, r3
                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
   e4c80:	794f      	ldrb	r7, [r1, #5]
   e4c82:	5c11      	ldrb	r1, [r2, r0]
         *     buf[...hdr_len + 3 + n + sig_alg_len - 1 + 1],
         * which reduces to:
         *     buf[...hdr_len + 3 + n + sig_alg_len],
         * which is one less than we need the buf to be.
         */
        if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n + sig_alg_len )
   e4c84:	1dd8      	adds	r0, r3, #7
    /* supported_signature_algorithms */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
    {
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
   e4c86:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
         *     buf[...hdr_len + 3 + n + sig_alg_len - 1 + 1],
         * which reduces to:
         *     buf[...hdr_len + 3 + n + sig_alg_len],
         * which is one less than we need the buf to be.
         */
        if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n + sig_alg_len )
   e4c8a:	4408      	add	r0, r1
   e4c8c:	4286      	cmp	r6, r0
   e4c8e:	d9e8      	bls.n	e4c62 <mbedtls_ssl_handshake_client_step+0xc56>
   e4c90:	3302      	adds	r3, #2
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
                                        ",%d", sig_alg[i], sig_alg[i + 1]  ) );
        }
#endif

        n += 2 + sig_alg_len;
   e4c92:	440b      	add	r3, r1
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    /* certificate_authorities */
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
   e4c94:	441a      	add	r2, r3
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );

    n += dn_len;
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
   e4c96:	3307      	adds	r3, #7
   e4c98:	7951      	ldrb	r1, [r2, #5]
   e4c9a:	7992      	ldrb	r2, [r2, #6]
   e4c9c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   e4ca0:	4413      	add	r3, r2
   e4ca2:	429e      	cmp	r6, r3
   e4ca4:	d062      	beq.n	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
   e4ca6:	e7dc      	b.n	e4c62 <mbedtls_ssl_handshake_client_step+0xc56>
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   e4ca8:	2232      	movs	r2, #50	; 0x32
   e4caa:	2102      	movs	r1, #2
   e4cac:	4620      	mov	r0, r4
   e4cae:	f7fa f87d 	bl	dedac <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );
   e4cb2:	4d08      	ldr	r5, [pc, #32]	; (e4cd4 <mbedtls_ssl_handshake_client_step+0xcc8>)
   e4cb4:	e05a      	b.n	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
   e4cb6:	bf00      	nop
   e4cb8:	ffff9180 	.word	0xffff9180
   e4cbc:	ffff8f80 	.word	0xffff8f80
   e4cc0:	ffff8680 	.word	0xffff8680
   e4cc4:	ffff8500 	.word	0xffff8500
   e4cc8:	ffff9300 	.word	0xffff9300
   e4ccc:	ffff9400 	.word	0xffff9400
   e4cd0:	ffff8580 	.word	0xffff8580
   e4cd4:	ffff8480 	.word	0xffff8480
    }

    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( ((uint32_t) msg[0]) << 24 ) | ( msg[1] << 16 ) |
               ( msg[2] << 8 ) | ( msg[3] );
   e4cd8:	79f2      	ldrb	r2, [r6, #7]
   e4cda:	9207      	str	r2, [sp, #28]

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
   e4cdc:	7a37      	ldrb	r7, [r6, #8]
   e4cde:	7a72      	ldrb	r2, [r6, #9]
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
    }

    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( ((uint32_t) msg[0]) << 24 ) | ( msg[1] << 16 ) |
   e4ce0:	f896 8004 	ldrb.w	r8, [r6, #4]
   e4ce4:	f896 b005 	ldrb.w	fp, [r6, #5]
               ( msg[2] << 8 ) | ( msg[3] );
   e4ce8:	f896 a006 	ldrb.w	sl, [r6, #6]

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
   e4cec:	ea42 2707 	orr.w	r7, r2, r7, lsl #8

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
   e4cf0:	f107 020a 	add.w	r2, r7, #10
   e4cf4:	4293      	cmp	r3, r2
   e4cf6:	f47f aca0 	bne.w	e463a <mbedtls_ssl_handshake_client_step+0x62e>
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket length: %d", ticket_len ) );

    /* We're not waiting for a NewSessionTicket message any more */
    ssl->handshake->new_session_ticket = 0;
   e4cfa:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e4cfc:	f8c3 9358 	str.w	r9, [r3, #856]	; 0x358
    ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
   e4d00:	230c      	movs	r3, #12
   e4d02:	6063      	str	r3, [r4, #4]

    /*
     * Zero-length ticket means the server changed his mind and doesn't want
     * to send a ticket after all, so just forget it
     */
    if( ticket_len == 0 )
   e4d04:	2f00      	cmp	r7, #0
   e4d06:	d031      	beq.n	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
        return( 0 );

    mbedtls_platform_zeroize( ssl->session_negotiate->ticket,
   e4d08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
                              ssl->session_negotiate->ticket_len );
   e4d0a:	6e99      	ldr	r1, [r3, #104]	; 0x68
   e4d0c:	6e58      	ldr	r0, [r3, #100]	; 0x64
   e4d0e:	f7f5 fbe7 	bl	da4e0 <mbedtls_platform_zeroize>
    mbedtls_free( ssl->session_negotiate->ticket );
   e4d12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e4d14:	6e58      	ldr	r0, [r3, #100]	; 0x64
   e4d16:	f000 fb29 	bl	e536c <free>
    ssl->session_negotiate->ticket = NULL;
   e4d1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e4d1c:	f8c3 9064 	str.w	r9, [r3, #100]	; 0x64
    ssl->session_negotiate->ticket_len = 0;
   e4d20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
   e4d22:	4639      	mov	r1, r7

    mbedtls_platform_zeroize( ssl->session_negotiate->ticket,
                              ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
    ssl->session_negotiate->ticket = NULL;
    ssl->session_negotiate->ticket_len = 0;
   e4d24:	f8c3 9068 	str.w	r9, [r3, #104]	; 0x68

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
   e4d28:	2001      	movs	r0, #1
   e4d2a:	f001 fff3 	bl	e6d14 <calloc>
   e4d2e:	b930      	cbnz	r0, e4d3e <mbedtls_ssl_handshake_client_step+0xd32>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ticket alloc failed" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
   e4d30:	2250      	movs	r2, #80	; 0x50
   e4d32:	2102      	movs	r1, #2
   e4d34:	4620      	mov	r0, r4
   e4d36:	f7fa f839 	bl	dedac <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   e4d3a:	4d0e      	ldr	r5, [pc, #56]	; (e4d74 <mbedtls_ssl_handshake_client_step+0xd68>)
   e4d3c:	e016      	b.n	e4d6c <mbedtls_ssl_handshake_client_step+0xd60>
    }

    memcpy( ticket, msg + 6, ticket_len );
   e4d3e:	463a      	mov	r2, r7
   e4d40:	f106 010a 	add.w	r1, r6, #10
   e4d44:	9008      	str	r0, [sp, #32]
   e4d46:	f002 f902 	bl	e6f4e <memcpy>

    ssl->session_negotiate->ticket = ticket;
   e4d4a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e4d4c:	9b08      	ldr	r3, [sp, #32]
   e4d4e:	6653      	str	r3, [r2, #100]	; 0x64
    ssl->session_negotiate->ticket_len = ticket_len;
   e4d50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e4d52:	669f      	str	r7, [r3, #104]	; 0x68
    ssl->session_negotiate->ticket_lifetime = lifetime;
   e4d54:	9b07      	ldr	r3, [sp, #28]
   e4d56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e4d58:	ea43 6808 	orr.w	r8, r3, r8, lsl #24
   e4d5c:	ea48 4b0b 	orr.w	fp, r8, fp, lsl #16
   e4d60:	ea4b 230a 	orr.w	r3, fp, sl, lsl #8
   e4d64:	66d3      	str	r3, [r2, #108]	; 0x6c
     * RFC 5077 section 3.4:
     * "If the client receives a session ticket from the server, then it
     * discards any Session ID that was sent in the ServerHello."
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket in use, discarding session id" ) );
    ssl->session_negotiate->id_len = 0;
   e4d66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e4d68:	f8c3 9008 	str.w	r9, [r3, #8]
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   }

    return( ret );
}
   e4d6c:	4628      	mov	r0, r5
   e4d6e:	b01f      	add	sp, #124	; 0x7c
   e4d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e4d74:	ffff8100 	.word	0xffff8100

000e4d78 <_ZN10HttpHelperC1Ev>:
#include "HttpHelper.h"
HttpHelper::HttpHelper(/* args */)
   e4d78:	b538      	push	{r3, r4, r5, lr}
   e4d7a:	4b1e      	ldr	r3, [pc, #120]	; (e4df4 <_ZN10HttpHelperC1Ev+0x7c>)
   e4d7c:	6003      	str	r3, [r0, #0]
   e4d7e:	4b1e      	ldr	r3, [pc, #120]	; (e4df8 <_ZN10HttpHelperC1Ev+0x80>)
   e4d80:	6043      	str	r3, [r0, #4]
   e4d82:	4b1e      	ldr	r3, [pc, #120]	; (e4dfc <_ZN10HttpHelperC1Ev+0x84>)
   e4d84:	6083      	str	r3, [r0, #8]
   e4d86:	4b1e      	ldr	r3, [pc, #120]	; (e4e00 <_ZN10HttpHelperC1Ev+0x88>)
#include "Particle.h"
class HttpHelper
{
    typedef struct
{
   e4d88:	4d1e      	ldr	r5, [pc, #120]	; (e4e04 <_ZN10HttpHelperC1Ev+0x8c>)
   e4d8a:	60c3      	str	r3, [r0, #12]
   e4d8c:	4b1e      	ldr	r3, [pc, #120]	; (e4e08 <_ZN10HttpHelperC1Ev+0x90>)
   e4d8e:	6103      	str	r3, [r0, #16]
   e4d90:	2300      	movs	r3, #0
   e4d92:	4604      	mov	r4, r0
   e4d94:	6143      	str	r3, [r0, #20]
   e4d96:	4629      	mov	r1, r5
   e4d98:	3018      	adds	r0, #24
   e4d9a:	f000 fc2a 	bl	e55f2 <_ZN6StringC1EPK19__FlashStringHelper>
   e4d9e:	4629      	mov	r1, r5
   e4da0:	f104 0028 	add.w	r0, r4, #40	; 0x28
   e4da4:	f000 fc25 	bl	e55f2 <_ZN6StringC1EPK19__FlashStringHelper>
   e4da8:	4629      	mov	r1, r5
   e4daa:	f104 0038 	add.w	r0, r4, #56	; 0x38
   e4dae:	f000 fc20 	bl	e55f2 <_ZN6StringC1EPK19__FlashStringHelper>
   e4db2:	4629      	mov	r1, r5
   e4db4:	f104 0048 	add.w	r0, r4, #72	; 0x48
   e4db8:	f000 fc1b 	bl	e55f2 <_ZN6StringC1EPK19__FlashStringHelper>
   e4dbc:	4629      	mov	r1, r5
   e4dbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
   e4dc2:	f000 fc16 	bl	e55f2 <_ZN6StringC1EPK19__FlashStringHelper>
   e4dc6:	4629      	mov	r1, r5
   e4dc8:	f104 0068 	add.w	r0, r4, #104	; 0x68
   e4dcc:	f000 fc11 	bl	e55f2 <_ZN6StringC1EPK19__FlashStringHelper>
 * HTTP Response struct.
 * status  response status code.
 * body	response body
 */
typedef struct
{
   e4dd0:	4629      	mov	r1, r5
   e4dd2:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   e4dd6:	f000 fc0c 	bl	e55f2 <_ZN6StringC1EPK19__FlashStringHelper>
   e4dda:	490c      	ldr	r1, [pc, #48]	; (e4e0c <_ZN10HttpHelperC1Ev+0x94>)
   e4ddc:	f104 008c 	add.w	r0, r4, #140	; 0x8c
   e4de0:	f000 fc07 	bl	e55f2 <_ZN6StringC1EPK19__FlashStringHelper>
   e4de4:	490a      	ldr	r1, [pc, #40]	; (e4e10 <_ZN10HttpHelperC1Ev+0x98>)
   e4de6:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   e4dea:	f000 fc02 	bl	e55f2 <_ZN6StringC1EPK19__FlashStringHelper>
{
}
   e4dee:	4620      	mov	r0, r4
   e4df0:	bd38      	pop	{r3, r4, r5, pc}
   e4df2:	bf00      	nop
   e4df4:	000ea7a6 	.word	0x000ea7a6
   e4df8:	000ea7aa 	.word	0x000ea7aa
   e4dfc:	000ea7af 	.word	0x000ea7af
   e4e00:	000ea7b3 	.word	0x000ea7b3
   e4e04:	000e87fd 	.word	0x000e87fd
   e4e08:	000ea7ba 	.word	0x000ea7ba
   e4e0c:	000ea7c0 	.word	0x000ea7c0
   e4e10:	000ea7d1 	.word	0x000ea7d1

000e4e14 <_ZN10HttpHelperD1Ev>:

HttpHelper::~HttpHelper()
   e4e14:	b538      	push	{r3, r4, r5, lr}
   e4e16:	4604      	mov	r4, r0
   e4e18:	309c      	adds	r0, #156	; 0x9c
   e4e1a:	f000 fba3 	bl	e5564 <_ZN6StringD1Ev>
   e4e1e:	f104 008c 	add.w	r0, r4, #140	; 0x8c
   e4e22:	f000 fb9f 	bl	e5564 <_ZN6StringD1Ev>
  int status;
  String body;
} http_response_t;
   e4e26:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   e4e2a:	f000 fb9b 	bl	e5564 <_ZN6StringD1Ev>
  String host;
  String body;
  String content;
  String key;
  String length;
} http_request_t;
   e4e2e:	f104 0068 	add.w	r0, r4, #104	; 0x68
   e4e32:	f000 fb97 	bl	e5564 <_ZN6StringD1Ev>
   e4e36:	f104 0058 	add.w	r0, r4, #88	; 0x58
   e4e3a:	f000 fb93 	bl	e5564 <_ZN6StringD1Ev>
   e4e3e:	f104 0048 	add.w	r0, r4, #72	; 0x48
   e4e42:	f000 fb8f 	bl	e5564 <_ZN6StringD1Ev>
   e4e46:	f104 0038 	add.w	r0, r4, #56	; 0x38
   e4e4a:	f000 fb8b 	bl	e5564 <_ZN6StringD1Ev>
   e4e4e:	f104 0518 	add.w	r5, r4, #24
   e4e52:	f104 0028 	add.w	r0, r4, #40	; 0x28
   e4e56:	f000 fb85 	bl	e5564 <_ZN6StringD1Ev>
   e4e5a:	4628      	mov	r0, r5
   e4e5c:	f000 fb82 	bl	e5564 <_ZN6StringD1Ev>
{
}
   e4e60:	4620      	mov	r0, r4
   e4e62:	bd38      	pop	{r3, r4, r5, pc}

000e4e64 <_ZN10HttpHelper7setPathE6String>:

void HttpHelper::setPath(String path) {
    httpRequest.path = path;
   e4e64:	3018      	adds	r0, #24
   e4e66:	f000 bbf4 	b.w	e5652 <_ZN6StringaSERKS_>

000e4e6a <_ZN10HttpHelper7setHostE6String>:
}
void HttpHelper::setHost(String host) {
    httpRequest.host = host;
   e4e6a:	3028      	adds	r0, #40	; 0x28
   e4e6c:	f000 bbf1 	b.w	e5652 <_ZN6StringaSERKS_>

000e4e70 <_ZN10HttpHelper16setContentLengthEi>:
    tmp.concat(personGroupId);
    tmp.concat("\"}\r\n\r\n");
    httpRequest.body = tmp;

}
void HttpHelper::setContentLength(int length) {
   e4e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    httpRequest.length = String(length);
   e4e72:	220a      	movs	r2, #10
    tmp.concat(personGroupId);
    tmp.concat("\"}\r\n\r\n");
    httpRequest.body = tmp;

}
void HttpHelper::setContentLength(int length) {
   e4e74:	4604      	mov	r4, r0
    httpRequest.length = String(length);
   e4e76:	4668      	mov	r0, sp
   e4e78:	f000 fc1e 	bl	e56b8 <_ZN6StringC1Eih>
   e4e7c:	4669      	mov	r1, sp
   e4e7e:	f104 0068 	add.w	r0, r4, #104	; 0x68
   e4e82:	f000 fc00 	bl	e5686 <_ZN6StringaSEOS_>
   e4e86:	4668      	mov	r0, sp
   e4e88:	f000 fb6c 	bl	e5564 <_ZN6StringD1Ev>
}
   e4e8c:	b004      	add	sp, #16
   e4e8e:	bd10      	pop	{r4, pc}

000e4e90 <_ZN10HttpHelper10setContentE6String>:


void HttpHelper::setContent(String content) {
    httpRequest.content = content;
   e4e90:	3048      	adds	r0, #72	; 0x48
   e4e92:	f000 bbde 	b.w	e5652 <_ZN6StringaSERKS_>

000e4e96 <_ZN10HttpHelper6setKeyE6String>:
}

void HttpHelper::setKey(String key) {
    httpRequest.key = key;
   e4e96:	3058      	adds	r0, #88	; 0x58
   e4e98:	f000 bbdb 	b.w	e5652 <_ZN6StringaSERKS_>

000e4e9c <_ZN10HttpHelper10makeHeaderEv>:

String HttpHelper::getBodyLength() {
    return String(httpRequest.body.length());  
}

String HttpHelper::makeHeader() {
   e4e9c:	b570      	push	{r4, r5, r6, lr}
   e4e9e:	460d      	mov	r5, r1
   e4ea0:	4604      	mov	r4, r0
    String tmp;
   e4ea2:	492d      	ldr	r1, [pc, #180]	; (e4f58 <_ZN10HttpHelper10makeHeaderEv+0xbc>)
   e4ea4:	f000 fba5 	bl	e55f2 <_ZN6StringC1EPK19__FlashStringHelper>
    tmp.concat(HTTP_METHOD_POST);
   e4ea8:	6869      	ldr	r1, [r5, #4]
   e4eaa:	4620      	mov	r0, r4
   e4eac:	f000 fc45 	bl	e573a <_ZN6String6concatEPKc>
    tmp.concat(" ");
   e4eb0:	492a      	ldr	r1, [pc, #168]	; (e4f5c <_ZN10HttpHelper10makeHeaderEv+0xc0>)
   e4eb2:	4620      	mov	r0, r4
   e4eb4:	f000 fc41 	bl	e573a <_ZN6String6concatEPKc>
    tmp.concat(httpRequest.path);
   e4eb8:	f105 0118 	add.w	r1, r5, #24
   e4ebc:	4620      	mov	r0, r4
   e4ebe:	f000 fc38 	bl	e5732 <_ZN6String6concatERKS_>
    tmp.concat(" HTTP/1.0");
   e4ec2:	4927      	ldr	r1, [pc, #156]	; (e4f60 <_ZN10HttpHelper10makeHeaderEv+0xc4>)
   e4ec4:	4620      	mov	r0, r4
   e4ec6:	f000 fc38 	bl	e573a <_ZN6String6concatEPKc>
    tmp.concat("\r\n");
   e4eca:	4926      	ldr	r1, [pc, #152]	; (e4f64 <_ZN10HttpHelper10makeHeaderEv+0xc8>)
   e4ecc:	4620      	mov	r0, r4
   e4ece:	f000 fc34 	bl	e573a <_ZN6String6concatEPKc>
    tmp.concat("Ocp-Apim-Subscription-Key:");
   e4ed2:	4925      	ldr	r1, [pc, #148]	; (e4f68 <_ZN10HttpHelper10makeHeaderEv+0xcc>)
   e4ed4:	4620      	mov	r0, r4
   e4ed6:	f000 fc30 	bl	e573a <_ZN6String6concatEPKc>
    tmp.concat(httpRequest.key);
   e4eda:	f105 0158 	add.w	r1, r5, #88	; 0x58
   e4ede:	4620      	mov	r0, r4
   e4ee0:	f000 fc27 	bl	e5732 <_ZN6String6concatERKS_>
    tmp.concat("\r\n");
   e4ee4:	491f      	ldr	r1, [pc, #124]	; (e4f64 <_ZN10HttpHelper10makeHeaderEv+0xc8>)
   e4ee6:	4620      	mov	r0, r4
   e4ee8:	f000 fc27 	bl	e573a <_ZN6String6concatEPKc>
    tmp.concat("Content-Type:");
    tmp.concat(httpRequest.content);
   e4eec:	f105 0648 	add.w	r6, r5, #72	; 0x48
    tmp.concat(" HTTP/1.0");
    tmp.concat("\r\n");
    tmp.concat("Ocp-Apim-Subscription-Key:");
    tmp.concat(httpRequest.key);
    tmp.concat("\r\n");
    tmp.concat("Content-Type:");
   e4ef0:	491e      	ldr	r1, [pc, #120]	; (e4f6c <_ZN10HttpHelper10makeHeaderEv+0xd0>)
   e4ef2:	4620      	mov	r0, r4
   e4ef4:	f000 fc21 	bl	e573a <_ZN6String6concatEPKc>
    tmp.concat(httpRequest.content);
   e4ef8:	4631      	mov	r1, r6
   e4efa:	4620      	mov	r0, r4
   e4efc:	f000 fc19 	bl	e5732 <_ZN6String6concatERKS_>
    tmp.concat("\r\n");
   e4f00:	4918      	ldr	r1, [pc, #96]	; (e4f64 <_ZN10HttpHelper10makeHeaderEv+0xc8>)
   e4f02:	4620      	mov	r0, r4
   e4f04:	f000 fc19 	bl	e573a <_ZN6String6concatEPKc>
    tmp.concat("Host:");
   e4f08:	4919      	ldr	r1, [pc, #100]	; (e4f70 <_ZN10HttpHelper10makeHeaderEv+0xd4>)
   e4f0a:	4620      	mov	r0, r4
   e4f0c:	f000 fc15 	bl	e573a <_ZN6String6concatEPKc>
    tmp.concat(httpRequest.host);
   e4f10:	f105 0128 	add.w	r1, r5, #40	; 0x28
   e4f14:	4620      	mov	r0, r4
   e4f16:	f000 fc0c 	bl	e5732 <_ZN6String6concatERKS_>
    tmp.concat("\r\n");
   e4f1a:	4912      	ldr	r1, [pc, #72]	; (e4f64 <_ZN10HttpHelper10makeHeaderEv+0xc8>)
   e4f1c:	4620      	mov	r0, r4
   e4f1e:	f000 fc0c 	bl	e573a <_ZN6String6concatEPKc>
    tmp.concat("Content-Length:");
   e4f22:	4914      	ldr	r1, [pc, #80]	; (e4f74 <_ZN10HttpHelper10makeHeaderEv+0xd8>)
   e4f24:	4620      	mov	r0, r4
   e4f26:	f000 fc08 	bl	e573a <_ZN6String6concatEPKc>
    tmp.concat(httpRequest.length);
   e4f2a:	f105 0168 	add.w	r1, r5, #104	; 0x68
   e4f2e:	4620      	mov	r0, r4
   e4f30:	f000 fbff 	bl	e5732 <_ZN6String6concatERKS_>
    tmp.concat("\r\n\r\n");
   e4f34:	4910      	ldr	r1, [pc, #64]	; (e4f78 <_ZN10HttpHelper10makeHeaderEv+0xdc>)
   e4f36:	4620      	mov	r0, r4
   e4f38:	f000 fbff 	bl	e573a <_ZN6String6concatEPKc>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   e4f3c:	f105 018c 	add.w	r1, r5, #140	; 0x8c
   e4f40:	4630      	mov	r0, r6
   e4f42:	f000 fc1f 	bl	e5784 <_ZNK6String6equalsERKS_>
    if(httpRequest.content == HTTP_JSON){
   e4f46:	b120      	cbz	r0, e4f52 <_ZN10HttpHelper10makeHeaderEv+0xb6>
        tmp.concat(httpRequest.body);
   e4f48:	f105 0138 	add.w	r1, r5, #56	; 0x38
   e4f4c:	4620      	mov	r0, r4
   e4f4e:	f000 fbf0 	bl	e5732 <_ZN6String6concatERKS_>
    }

    return tmp;
}
   e4f52:	4620      	mov	r0, r4
   e4f54:	bd70      	pop	{r4, r5, r6, pc}
   e4f56:	bf00      	nop
   e4f58:	000e87fd 	.word	0x000e87fd
   e4f5c:	000e8108 	.word	0x000e8108
   e4f60:	000ea821 	.word	0x000ea821
   e4f64:	000ea81e 	.word	0x000ea81e
   e4f68:	000ea82b 	.word	0x000ea82b
   e4f6c:	000ea846 	.word	0x000ea846
   e4f70:	000ea854 	.word	0x000ea854
   e4f74:	000ea85a 	.word	0x000ea85a
   e4f78:	000ea81c 	.word	0x000ea81c

000e4f7c <_ZN10HttpHelper10makeVerifyEv>:

const char * HttpHelper::makeDetect() {
    String tmp;
}

const char * HttpHelper::makeVerify() {
   e4f7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   
    return  this->makeHeader().c_str();
}

String HttpHelper::getBodyLength() {
    return String(httpRequest.body.length());  
   e4f7e:	220a      	movs	r2, #10

const char * HttpHelper::makeDetect() {
    String tmp;
}

const char * HttpHelper::makeVerify() {
   e4f80:	4604      	mov	r4, r0
   
    return  this->makeHeader().c_str();
}

String HttpHelper::getBodyLength() {
    return String(httpRequest.body.length());  
   e4f82:	6c01      	ldr	r1, [r0, #64]	; 0x40
   e4f84:	4668      	mov	r0, sp
   e4f86:	f000 fbaa 	bl	e56de <_ZN6StringC1Ejh>
const char * HttpHelper::makeDetect() {
    String tmp;
}

const char * HttpHelper::makeVerify() {
    httpRequest.length = this->getBodyLength();
   e4f8a:	4669      	mov	r1, sp
   e4f8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
   e4f90:	f000 fb79 	bl	e5686 <_ZN6StringaSEOS_>
   e4f94:	4668      	mov	r0, sp
   e4f96:	f000 fae5 	bl	e5564 <_ZN6StringD1Ev>
   
    return  this->makeHeader().c_str();
   e4f9a:	4621      	mov	r1, r4
   e4f9c:	4668      	mov	r0, sp
   e4f9e:	f7ff ff7d 	bl	e4e9c <_ZN10HttpHelper10makeHeaderEv>
   e4fa2:	4668      	mov	r0, sp
   e4fa4:	9c00      	ldr	r4, [sp, #0]
   e4fa6:	f000 fadd 	bl	e5564 <_ZN6StringD1Ev>
}
   e4faa:	4620      	mov	r0, r4
   e4fac:	b004      	add	sp, #16
   e4fae:	bd10      	pop	{r4, pc}

000e4fb0 <_GLOBAL__sub_I__ZN10HttpHelperC2Ev>:
   e4fb0:	f000 b810 	b.w	e4fd4 <HAL_Pin_Map>

000e4fb4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   e4fb4:	b508      	push	{r3, lr}
   e4fb6:	4b02      	ldr	r3, [pc, #8]	; (e4fc0 <netdb_freeaddrinfo+0xc>)
   e4fb8:	681b      	ldr	r3, [r3, #0]
   e4fba:	689b      	ldr	r3, [r3, #8]
   e4fbc:	9301      	str	r3, [sp, #4]
   e4fbe:	bd08      	pop	{r3, pc}
   e4fc0:	00030268 	.word	0x00030268

000e4fc4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   e4fc4:	b508      	push	{r3, lr}
   e4fc6:	4b02      	ldr	r3, [pc, #8]	; (e4fd0 <netdb_getaddrinfo+0xc>)
   e4fc8:	681b      	ldr	r3, [r3, #0]
   e4fca:	68db      	ldr	r3, [r3, #12]
   e4fcc:	9301      	str	r3, [sp, #4]
   e4fce:	bd08      	pop	{r3, pc}
   e4fd0:	00030268 	.word	0x00030268

000e4fd4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   e4fd4:	b508      	push	{r3, lr}
   e4fd6:	4b02      	ldr	r3, [pc, #8]	; (e4fe0 <HAL_Pin_Map+0xc>)
   e4fd8:	681b      	ldr	r3, [r3, #0]
   e4fda:	681b      	ldr	r3, [r3, #0]
   e4fdc:	9301      	str	r3, [sp, #4]
   e4fde:	bd08      	pop	{r3, pc}
   e4fe0:	0003022c 	.word	0x0003022c

000e4fe4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   e4fe4:	b508      	push	{r3, lr}
   e4fe6:	4b02      	ldr	r3, [pc, #8]	; (e4ff0 <if_index_to_name+0xc>)
   e4fe8:	681b      	ldr	r3, [r3, #0]
   e4fea:	695b      	ldr	r3, [r3, #20]
   e4fec:	9301      	str	r3, [sp, #4]
   e4fee:	bd08      	pop	{r3, pc}
   e4ff0:	0003026c 	.word	0x0003026c

000e4ff4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   e4ff4:	b508      	push	{r3, lr}
   e4ff6:	4b02      	ldr	r3, [pc, #8]	; (e5000 <HAL_RNG_GetRandomNumber+0xc>)
   e4ff8:	681b      	ldr	r3, [r3, #0]
   e4ffa:	685b      	ldr	r3, [r3, #4]
   e4ffc:	9301      	str	r3, [sp, #4]
   e4ffe:	bd08      	pop	{r3, pc}
   e5000:	00030218 	.word	0x00030218

000e5004 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   e5004:	b508      	push	{r3, lr}
   e5006:	4b02      	ldr	r3, [pc, #8]	; (e5010 <HAL_Timer_Get_Milli_Seconds+0xc>)
   e5008:	681b      	ldr	r3, [r3, #0]
   e500a:	695b      	ldr	r3, [r3, #20]
   e500c:	9301      	str	r3, [sp, #4]
   e500e:	bd08      	pop	{r3, pc}
   e5010:	00030218 	.word	0x00030218

000e5014 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   e5014:	b508      	push	{r3, lr}
   e5016:	4b02      	ldr	r3, [pc, #8]	; (e5020 <HAL_RTC_Get_UnixTime+0xc>)
   e5018:	681b      	ldr	r3, [r3, #0]
   e501a:	69db      	ldr	r3, [r3, #28]
   e501c:	9301      	str	r3, [sp, #4]
   e501e:	bd08      	pop	{r3, pc}
   e5020:	00030218 	.word	0x00030218

000e5024 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   e5024:	b508      	push	{r3, lr}
   e5026:	4b02      	ldr	r3, [pc, #8]	; (e5030 <HAL_RTC_Time_Is_Valid+0xc>)
   e5028:	681b      	ldr	r3, [r3, #0]
   e502a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   e502c:	9301      	str	r3, [sp, #4]
   e502e:	bd08      	pop	{r3, pc}
   e5030:	00030218 	.word	0x00030218

000e5034 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   e5034:	b508      	push	{r3, lr}
   e5036:	4b02      	ldr	r3, [pc, #8]	; (e5040 <os_thread_is_current+0xc>)
   e5038:	681b      	ldr	r3, [r3, #0]
   e503a:	689b      	ldr	r3, [r3, #8]
   e503c:	9301      	str	r3, [sp, #4]
   e503e:	bd08      	pop	{r3, pc}
   e5040:	00030248 	.word	0x00030248

000e5044 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   e5044:	b508      	push	{r3, lr}
   e5046:	4b02      	ldr	r3, [pc, #8]	; (e5050 <os_thread_join+0xc>)
   e5048:	681b      	ldr	r3, [r3, #0]
   e504a:	691b      	ldr	r3, [r3, #16]
   e504c:	9301      	str	r3, [sp, #4]
   e504e:	bd08      	pop	{r3, pc}
   e5050:	00030248 	.word	0x00030248

000e5054 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   e5054:	b508      	push	{r3, lr}
   e5056:	4b02      	ldr	r3, [pc, #8]	; (e5060 <os_thread_cleanup+0xc>)
   e5058:	681b      	ldr	r3, [r3, #0]
   e505a:	695b      	ldr	r3, [r3, #20]
   e505c:	9301      	str	r3, [sp, #4]
   e505e:	bd08      	pop	{r3, pc}
   e5060:	00030248 	.word	0x00030248

000e5064 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   e5064:	b508      	push	{r3, lr}
   e5066:	4b02      	ldr	r3, [pc, #8]	; (e5070 <os_mutex_recursive_create+0xc>)
   e5068:	681b      	ldr	r3, [r3, #0]
   e506a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   e506c:	9301      	str	r3, [sp, #4]
   e506e:	bd08      	pop	{r3, pc}
   e5070:	00030248 	.word	0x00030248

000e5074 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   e5074:	b508      	push	{r3, lr}
   e5076:	4b02      	ldr	r3, [pc, #8]	; (e5080 <os_mutex_recursive_destroy+0xc>)
   e5078:	681b      	ldr	r3, [r3, #0]
   e507a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   e507c:	9301      	str	r3, [sp, #4]
   e507e:	bd08      	pop	{r3, pc}
   e5080:	00030248 	.word	0x00030248

000e5084 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   e5084:	b508      	push	{r3, lr}
   e5086:	4b02      	ldr	r3, [pc, #8]	; (e5090 <inet_inet_ntop+0xc>)
   e5088:	681b      	ldr	r3, [r3, #0]
   e508a:	695b      	ldr	r3, [r3, #20]
   e508c:	9301      	str	r3, [sp, #4]
   e508e:	bd08      	pop	{r3, pc}
   e5090:	00030264 	.word	0x00030264

000e5094 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   e5094:	b508      	push	{r3, lr}
   e5096:	4b02      	ldr	r3, [pc, #8]	; (e50a0 <inet_htonl+0xc>)
   e5098:	681b      	ldr	r3, [r3, #0]
   e509a:	6a1b      	ldr	r3, [r3, #32]
   e509c:	9301      	str	r3, [sp, #4]
   e509e:	bd08      	pop	{r3, pc}
   e50a0:	00030264 	.word	0x00030264

000e50a4 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   e50a4:	b508      	push	{r3, lr}
   e50a6:	4b02      	ldr	r3, [pc, #8]	; (e50b0 <inet_htons+0xc>)
   e50a8:	681b      	ldr	r3, [r3, #0]
   e50aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e50ac:	9301      	str	r3, [sp, #4]
   e50ae:	bd08      	pop	{r3, pc}
   e50b0:	00030264 	.word	0x00030264

000e50b4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   e50b4:	b508      	push	{r3, lr}
   e50b6:	4b02      	ldr	r3, [pc, #8]	; (e50c0 <HAL_USART_Init+0xc>)
   e50b8:	681b      	ldr	r3, [r3, #0]
   e50ba:	681b      	ldr	r3, [r3, #0]
   e50bc:	9301      	str	r3, [sp, #4]
   e50be:	bd08      	pop	{r3, pc}
   e50c0:	0003023c 	.word	0x0003023c

000e50c4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   e50c4:	b508      	push	{r3, lr}
   e50c6:	4b02      	ldr	r3, [pc, #8]	; (e50d0 <HAL_USART_Write_Data+0xc>)
   e50c8:	681b      	ldr	r3, [r3, #0]
   e50ca:	68db      	ldr	r3, [r3, #12]
   e50cc:	9301      	str	r3, [sp, #4]
   e50ce:	bd08      	pop	{r3, pc}
   e50d0:	0003023c 	.word	0x0003023c

000e50d4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   e50d4:	b508      	push	{r3, lr}
   e50d6:	4b02      	ldr	r3, [pc, #8]	; (e50e0 <HAL_USART_Available_Data+0xc>)
   e50d8:	681b      	ldr	r3, [r3, #0]
   e50da:	691b      	ldr	r3, [r3, #16]
   e50dc:	9301      	str	r3, [sp, #4]
   e50de:	bd08      	pop	{r3, pc}
   e50e0:	0003023c 	.word	0x0003023c

000e50e4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   e50e4:	b508      	push	{r3, lr}
   e50e6:	4b02      	ldr	r3, [pc, #8]	; (e50f0 <HAL_USART_Read_Data+0xc>)
   e50e8:	681b      	ldr	r3, [r3, #0]
   e50ea:	695b      	ldr	r3, [r3, #20]
   e50ec:	9301      	str	r3, [sp, #4]
   e50ee:	bd08      	pop	{r3, pc}
   e50f0:	0003023c 	.word	0x0003023c

000e50f4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   e50f4:	b508      	push	{r3, lr}
   e50f6:	4b02      	ldr	r3, [pc, #8]	; (e5100 <HAL_USART_Peek_Data+0xc>)
   e50f8:	681b      	ldr	r3, [r3, #0]
   e50fa:	699b      	ldr	r3, [r3, #24]
   e50fc:	9301      	str	r3, [sp, #4]
   e50fe:	bd08      	pop	{r3, pc}
   e5100:	0003023c 	.word	0x0003023c

000e5104 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   e5104:	b508      	push	{r3, lr}
   e5106:	4b02      	ldr	r3, [pc, #8]	; (e5110 <HAL_USART_Flush_Data+0xc>)
   e5108:	681b      	ldr	r3, [r3, #0]
   e510a:	69db      	ldr	r3, [r3, #28]
   e510c:	9301      	str	r3, [sp, #4]
   e510e:	bd08      	pop	{r3, pc}
   e5110:	0003023c 	.word	0x0003023c

000e5114 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   e5114:	b508      	push	{r3, lr}
   e5116:	4b02      	ldr	r3, [pc, #8]	; (e5120 <HAL_USART_Available_Data_For_Write+0xc>)
   e5118:	681b      	ldr	r3, [r3, #0]
   e511a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e511c:	9301      	str	r3, [sp, #4]
   e511e:	bd08      	pop	{r3, pc}
   e5120:	0003023c 	.word	0x0003023c

000e5124 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   e5124:	b508      	push	{r3, lr}
   e5126:	4b02      	ldr	r3, [pc, #8]	; (e5130 <sock_setsockopt+0xc>)
   e5128:	681b      	ldr	r3, [r3, #0]
   e512a:	699b      	ldr	r3, [r3, #24]
   e512c:	9301      	str	r3, [sp, #4]
   e512e:	bd08      	pop	{r3, pc}
   e5130:	00030238 	.word	0x00030238

000e5134 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   e5134:	b508      	push	{r3, lr}
   e5136:	4b02      	ldr	r3, [pc, #8]	; (e5140 <sock_close+0xc>)
   e5138:	681b      	ldr	r3, [r3, #0]
   e513a:	69db      	ldr	r3, [r3, #28]
   e513c:	9301      	str	r3, [sp, #4]
   e513e:	bd08      	pop	{r3, pc}
   e5140:	00030238 	.word	0x00030238

000e5144 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   e5144:	b508      	push	{r3, lr}
   e5146:	4b02      	ldr	r3, [pc, #8]	; (e5150 <sock_connect+0xc>)
   e5148:	681b      	ldr	r3, [r3, #0]
   e514a:	6a1b      	ldr	r3, [r3, #32]
   e514c:	9301      	str	r3, [sp, #4]
   e514e:	bd08      	pop	{r3, pc}
   e5150:	00030238 	.word	0x00030238

000e5154 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   e5154:	b508      	push	{r3, lr}
   e5156:	4b02      	ldr	r3, [pc, #8]	; (e5160 <sock_recv+0xc>)
   e5158:	681b      	ldr	r3, [r3, #0]
   e515a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e515c:	9301      	str	r3, [sp, #4]
   e515e:	bd08      	pop	{r3, pc}
   e5160:	00030238 	.word	0x00030238

000e5164 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   e5164:	b508      	push	{r3, lr}
   e5166:	4b02      	ldr	r3, [pc, #8]	; (e5170 <sock_send+0xc>)
   e5168:	681b      	ldr	r3, [r3, #0]
   e516a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e516c:	9301      	str	r3, [sp, #4]
   e516e:	bd08      	pop	{r3, pc}
   e5170:	00030238 	.word	0x00030238

000e5174 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   e5174:	b508      	push	{r3, lr}
   e5176:	4b02      	ldr	r3, [pc, #8]	; (e5180 <sock_socket+0xc>)
   e5178:	681b      	ldr	r3, [r3, #0]
   e517a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   e517c:	9301      	str	r3, [sp, #4]
   e517e:	bd08      	pop	{r3, pc}
   e5180:	00030238 	.word	0x00030238

000e5184 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   e5184:	b508      	push	{r3, lr}
   e5186:	4b02      	ldr	r3, [pc, #8]	; (e5190 <HAL_USB_USART_Init+0xc>)
   e5188:	681b      	ldr	r3, [r3, #0]
   e518a:	681b      	ldr	r3, [r3, #0]
   e518c:	9301      	str	r3, [sp, #4]
   e518e:	bd08      	pop	{r3, pc}
   e5190:	0003024c 	.word	0x0003024c

000e5194 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   e5194:	b508      	push	{r3, lr}
   e5196:	4b02      	ldr	r3, [pc, #8]	; (e51a0 <HAL_USB_USART_Begin+0xc>)
   e5198:	681b      	ldr	r3, [r3, #0]
   e519a:	685b      	ldr	r3, [r3, #4]
   e519c:	9301      	str	r3, [sp, #4]
   e519e:	bd08      	pop	{r3, pc}
   e51a0:	0003024c 	.word	0x0003024c

000e51a4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   e51a4:	b508      	push	{r3, lr}
   e51a6:	4b02      	ldr	r3, [pc, #8]	; (e51b0 <HAL_USB_USART_Available_Data+0xc>)
   e51a8:	681b      	ldr	r3, [r3, #0]
   e51aa:	691b      	ldr	r3, [r3, #16]
   e51ac:	9301      	str	r3, [sp, #4]
   e51ae:	bd08      	pop	{r3, pc}
   e51b0:	0003024c 	.word	0x0003024c

000e51b4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   e51b4:	b508      	push	{r3, lr}
   e51b6:	4b02      	ldr	r3, [pc, #8]	; (e51c0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   e51b8:	681b      	ldr	r3, [r3, #0]
   e51ba:	695b      	ldr	r3, [r3, #20]
   e51bc:	9301      	str	r3, [sp, #4]
   e51be:	bd08      	pop	{r3, pc}
   e51c0:	0003024c 	.word	0x0003024c

000e51c4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   e51c4:	b508      	push	{r3, lr}
   e51c6:	4b02      	ldr	r3, [pc, #8]	; (e51d0 <HAL_USB_USART_Receive_Data+0xc>)
   e51c8:	681b      	ldr	r3, [r3, #0]
   e51ca:	699b      	ldr	r3, [r3, #24]
   e51cc:	9301      	str	r3, [sp, #4]
   e51ce:	bd08      	pop	{r3, pc}
   e51d0:	0003024c 	.word	0x0003024c

000e51d4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   e51d4:	b508      	push	{r3, lr}
   e51d6:	4b02      	ldr	r3, [pc, #8]	; (e51e0 <HAL_USB_USART_Send_Data+0xc>)
   e51d8:	681b      	ldr	r3, [r3, #0]
   e51da:	69db      	ldr	r3, [r3, #28]
   e51dc:	9301      	str	r3, [sp, #4]
   e51de:	bd08      	pop	{r3, pc}
   e51e0:	0003024c 	.word	0x0003024c

000e51e4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   e51e4:	b508      	push	{r3, lr}
   e51e6:	4b02      	ldr	r3, [pc, #8]	; (e51f0 <HAL_USB_USART_Flush_Data+0xc>)
   e51e8:	681b      	ldr	r3, [r3, #0]
   e51ea:	6a1b      	ldr	r3, [r3, #32]
   e51ec:	9301      	str	r3, [sp, #4]
   e51ee:	bd08      	pop	{r3, pc}
   e51f0:	0003024c 	.word	0x0003024c

000e51f4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   e51f4:	b508      	push	{r3, lr}
   e51f6:	4b02      	ldr	r3, [pc, #8]	; (e5200 <log_message+0xc>)
   e51f8:	681b      	ldr	r3, [r3, #0]
   e51fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   e51fc:	9301      	str	r3, [sp, #4]
   e51fe:	bd08      	pop	{r3, pc}
   e5200:	00030260 	.word	0x00030260

000e5204 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   e5204:	b508      	push	{r3, lr}
   e5206:	4b02      	ldr	r3, [pc, #8]	; (e5210 <system_mode+0xc>)
   e5208:	681b      	ldr	r3, [r3, #0]
   e520a:	681b      	ldr	r3, [r3, #0]
   e520c:	9301      	str	r3, [sp, #4]
   e520e:	bd08      	pop	{r3, pc}
   e5210:	00030220 	.word	0x00030220

000e5214 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   e5214:	b508      	push	{r3, lr}
   e5216:	4b02      	ldr	r3, [pc, #8]	; (e5220 <set_system_mode+0xc>)
   e5218:	681b      	ldr	r3, [r3, #0]
   e521a:	685b      	ldr	r3, [r3, #4]
   e521c:	9301      	str	r3, [sp, #4]
   e521e:	bd08      	pop	{r3, pc}
   e5220:	00030220 	.word	0x00030220

000e5224 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   e5224:	b508      	push	{r3, lr}
   e5226:	4b02      	ldr	r3, [pc, #8]	; (e5230 <system_delay_ms+0xc>)
   e5228:	681b      	ldr	r3, [r3, #0]
   e522a:	695b      	ldr	r3, [r3, #20]
   e522c:	9301      	str	r3, [sp, #4]
   e522e:	bd08      	pop	{r3, pc}
   e5230:	00030220 	.word	0x00030220

000e5234 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   e5234:	b508      	push	{r3, lr}
   e5236:	4b02      	ldr	r3, [pc, #8]	; (e5240 <system_thread_get_state+0xc>)
   e5238:	681b      	ldr	r3, [r3, #0]
   e523a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   e523c:	9301      	str	r3, [sp, #4]
   e523e:	bd08      	pop	{r3, pc}
   e5240:	00030220 	.word	0x00030220

000e5244 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   e5244:	b508      	push	{r3, lr}
   e5246:	4b03      	ldr	r3, [pc, #12]	; (e5254 <system_ctrl_set_app_request_handler+0x10>)
   e5248:	681b      	ldr	r3, [r3, #0]
   e524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   e524e:	9301      	str	r3, [sp, #4]
   e5250:	bd08      	pop	{r3, pc}
   e5252:	0000      	.short	0x0000
   e5254:	00030220 	.word	0x00030220

000e5258 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   e5258:	b508      	push	{r3, lr}
   e525a:	4b03      	ldr	r3, [pc, #12]	; (e5268 <system_ctrl_set_result+0x10>)
   e525c:	681b      	ldr	r3, [r3, #0]
   e525e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   e5262:	9301      	str	r3, [sp, #4]
   e5264:	bd08      	pop	{r3, pc}
   e5266:	0000      	.short	0x0000
   e5268:	00030220 	.word	0x00030220

000e526c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   e526c:	b508      	push	{r3, lr}
   e526e:	4b02      	ldr	r3, [pc, #8]	; (e5278 <network_connect+0xc>)
   e5270:	681b      	ldr	r3, [r3, #0]
   e5272:	685b      	ldr	r3, [r3, #4]
   e5274:	9301      	str	r3, [sp, #4]
   e5276:	bd08      	pop	{r3, pc}
   e5278:	00030240 	.word	0x00030240

000e527c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   e527c:	b508      	push	{r3, lr}
   e527e:	4b02      	ldr	r3, [pc, #8]	; (e5288 <network_connecting+0xc>)
   e5280:	681b      	ldr	r3, [r3, #0]
   e5282:	689b      	ldr	r3, [r3, #8]
   e5284:	9301      	str	r3, [sp, #4]
   e5286:	bd08      	pop	{r3, pc}
   e5288:	00030240 	.word	0x00030240

000e528c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   e528c:	b508      	push	{r3, lr}
   e528e:	4b02      	ldr	r3, [pc, #8]	; (e5298 <network_disconnect+0xc>)
   e5290:	681b      	ldr	r3, [r3, #0]
   e5292:	68db      	ldr	r3, [r3, #12]
   e5294:	9301      	str	r3, [sp, #4]
   e5296:	bd08      	pop	{r3, pc}
   e5298:	00030240 	.word	0x00030240

000e529c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   e529c:	b508      	push	{r3, lr}
   e529e:	4b02      	ldr	r3, [pc, #8]	; (e52a8 <network_ready+0xc>)
   e52a0:	681b      	ldr	r3, [r3, #0]
   e52a2:	691b      	ldr	r3, [r3, #16]
   e52a4:	9301      	str	r3, [sp, #4]
   e52a6:	bd08      	pop	{r3, pc}
   e52a8:	00030240 	.word	0x00030240

000e52ac <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   e52ac:	b508      	push	{r3, lr}
   e52ae:	4b02      	ldr	r3, [pc, #8]	; (e52b8 <network_on+0xc>)
   e52b0:	681b      	ldr	r3, [r3, #0]
   e52b2:	695b      	ldr	r3, [r3, #20]
   e52b4:	9301      	str	r3, [sp, #4]
   e52b6:	bd08      	pop	{r3, pc}
   e52b8:	00030240 	.word	0x00030240

000e52bc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   e52bc:	b508      	push	{r3, lr}
   e52be:	4b02      	ldr	r3, [pc, #8]	; (e52c8 <network_off+0xc>)
   e52c0:	681b      	ldr	r3, [r3, #0]
   e52c2:	699b      	ldr	r3, [r3, #24]
   e52c4:	9301      	str	r3, [sp, #4]
   e52c6:	bd08      	pop	{r3, pc}
   e52c8:	00030240 	.word	0x00030240

000e52cc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   e52cc:	b508      	push	{r3, lr}
   e52ce:	4b02      	ldr	r3, [pc, #8]	; (e52d8 <network_listen+0xc>)
   e52d0:	681b      	ldr	r3, [r3, #0]
   e52d2:	69db      	ldr	r3, [r3, #28]
   e52d4:	9301      	str	r3, [sp, #4]
   e52d6:	bd08      	pop	{r3, pc}
   e52d8:	00030240 	.word	0x00030240

000e52dc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   e52dc:	b508      	push	{r3, lr}
   e52de:	4b02      	ldr	r3, [pc, #8]	; (e52e8 <network_listening+0xc>)
   e52e0:	681b      	ldr	r3, [r3, #0]
   e52e2:	6a1b      	ldr	r3, [r3, #32]
   e52e4:	9301      	str	r3, [sp, #4]
   e52e6:	bd08      	pop	{r3, pc}
   e52e8:	00030240 	.word	0x00030240

000e52ec <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   e52ec:	b508      	push	{r3, lr}
   e52ee:	4b02      	ldr	r3, [pc, #8]	; (e52f8 <network_set_listen_timeout+0xc>)
   e52f0:	681b      	ldr	r3, [r3, #0]
   e52f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e52f4:	9301      	str	r3, [sp, #4]
   e52f6:	bd08      	pop	{r3, pc}
   e52f8:	00030240 	.word	0x00030240

000e52fc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   e52fc:	b508      	push	{r3, lr}
   e52fe:	4b02      	ldr	r3, [pc, #8]	; (e5308 <network_get_listen_timeout+0xc>)
   e5300:	681b      	ldr	r3, [r3, #0]
   e5302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   e5304:	9301      	str	r3, [sp, #4]
   e5306:	bd08      	pop	{r3, pc}
   e5308:	00030240 	.word	0x00030240

000e530c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   e530c:	b508      	push	{r3, lr}
   e530e:	4b02      	ldr	r3, [pc, #8]	; (e5318 <spark_process+0xc>)
   e5310:	681b      	ldr	r3, [r3, #0]
   e5312:	689b      	ldr	r3, [r3, #8]
   e5314:	9301      	str	r3, [sp, #4]
   e5316:	bd08      	pop	{r3, pc}
   e5318:	00030244 	.word	0x00030244

000e531c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   e531c:	b508      	push	{r3, lr}
   e531e:	4b02      	ldr	r3, [pc, #8]	; (e5328 <spark_cloud_flag_connected+0xc>)
   e5320:	681b      	ldr	r3, [r3, #0]
   e5322:	695b      	ldr	r3, [r3, #20]
   e5324:	9301      	str	r3, [sp, #4]
   e5326:	bd08      	pop	{r3, pc}
   e5328:	00030244 	.word	0x00030244

000e532c <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   e532c:	b508      	push	{r3, lr}
   e532e:	4b02      	ldr	r3, [pc, #8]	; (e5338 <spark_sync_time+0xc>)
   e5330:	681b      	ldr	r3, [r3, #0]
   e5332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   e5334:	9301      	str	r3, [sp, #4]
   e5336:	bd08      	pop	{r3, pc}
   e5338:	00030244 	.word	0x00030244

000e533c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   e533c:	b508      	push	{r3, lr}
   e533e:	4b02      	ldr	r3, [pc, #8]	; (e5348 <spark_sync_time_pending+0xc>)
   e5340:	681b      	ldr	r3, [r3, #0]
   e5342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e5344:	9301      	str	r3, [sp, #4]
   e5346:	bd08      	pop	{r3, pc}
   e5348:	00030244 	.word	0x00030244

000e534c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   e534c:	b508      	push	{r3, lr}
   e534e:	4b02      	ldr	r3, [pc, #8]	; (e5358 <spark_set_random_seed_from_cloud_handler+0xc>)
   e5350:	681b      	ldr	r3, [r3, #0]
   e5352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   e5354:	9301      	str	r3, [sp, #4]
   e5356:	bd08      	pop	{r3, pc}
   e5358:	00030244 	.word	0x00030244

000e535c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   e535c:	b508      	push	{r3, lr}
   e535e:	4b02      	ldr	r3, [pc, #8]	; (e5368 <malloc+0xc>)
   e5360:	681b      	ldr	r3, [r3, #0]
   e5362:	681b      	ldr	r3, [r3, #0]
   e5364:	9301      	str	r3, [sp, #4]
   e5366:	bd08      	pop	{r3, pc}
   e5368:	0003021c 	.word	0x0003021c

000e536c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   e536c:	b508      	push	{r3, lr}
   e536e:	4b02      	ldr	r3, [pc, #8]	; (e5378 <free+0xc>)
   e5370:	681b      	ldr	r3, [r3, #0]
   e5372:	685b      	ldr	r3, [r3, #4]
   e5374:	9301      	str	r3, [sp, #4]
   e5376:	bd08      	pop	{r3, pc}
   e5378:	0003021c 	.word	0x0003021c

000e537c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   e537c:	b508      	push	{r3, lr}
   e537e:	4b02      	ldr	r3, [pc, #8]	; (e5388 <realloc+0xc>)
   e5380:	681b      	ldr	r3, [r3, #0]
   e5382:	689b      	ldr	r3, [r3, #8]
   e5384:	9301      	str	r3, [sp, #4]
   e5386:	bd08      	pop	{r3, pc}
   e5388:	0003021c 	.word	0x0003021c

000e538c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   e538c:	b508      	push	{r3, lr}
   e538e:	4b02      	ldr	r3, [pc, #8]	; (e5398 <sprintf+0xc>)
   e5390:	681b      	ldr	r3, [r3, #0]
   e5392:	68db      	ldr	r3, [r3, #12]
   e5394:	9301      	str	r3, [sp, #4]
   e5396:	bd08      	pop	{r3, pc}
   e5398:	0003021c 	.word	0x0003021c

000e539c <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   e539c:	b508      	push	{r3, lr}
   e539e:	4b02      	ldr	r3, [pc, #8]	; (e53a8 <siprintf+0xc>)
   e53a0:	681b      	ldr	r3, [r3, #0]
   e53a2:	691b      	ldr	r3, [r3, #16]
   e53a4:	9301      	str	r3, [sp, #4]
   e53a6:	bd08      	pop	{r3, pc}
   e53a8:	0003021c 	.word	0x0003021c

000e53ac <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   e53ac:	b508      	push	{r3, lr}
   e53ae:	4b02      	ldr	r3, [pc, #8]	; (e53b8 <siscanf+0xc>)
   e53b0:	681b      	ldr	r3, [r3, #0]
   e53b2:	699b      	ldr	r3, [r3, #24]
   e53b4:	9301      	str	r3, [sp, #4]
   e53b6:	bd08      	pop	{r3, pc}
   e53b8:	0003021c 	.word	0x0003021c

000e53bc <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   e53bc:	b508      	push	{r3, lr}
   e53be:	4b02      	ldr	r3, [pc, #8]	; (e53c8 <snprintf+0xc>)
   e53c0:	681b      	ldr	r3, [r3, #0]
   e53c2:	69db      	ldr	r3, [r3, #28]
   e53c4:	9301      	str	r3, [sp, #4]
   e53c6:	bd08      	pop	{r3, pc}
   e53c8:	0003021c 	.word	0x0003021c

000e53cc <_malloc_r>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   e53cc:	b508      	push	{r3, lr}
   e53ce:	4b02      	ldr	r3, [pc, #8]	; (e53d8 <_malloc_r+0xc>)
   e53d0:	681b      	ldr	r3, [r3, #0]
   e53d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e53d4:	9301      	str	r3, [sp, #4]
   e53d6:	bd08      	pop	{r3, pc}
   e53d8:	0003021c 	.word	0x0003021c

000e53dc <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   e53dc:	b508      	push	{r3, lr}
   e53de:	4b02      	ldr	r3, [pc, #8]	; (e53e8 <__errno+0xc>)
   e53e0:	681b      	ldr	r3, [r3, #0]
   e53e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   e53e4:	9301      	str	r3, [sp, #4]
   e53e6:	bd08      	pop	{r3, pc}
   e53e8:	0003021c 	.word	0x0003021c

000e53ec <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   e53ec:	2200      	movs	r2, #0
   e53ee:	4611      	mov	r1, r2
   e53f0:	6840      	ldr	r0, [r0, #4]
   e53f2:	f7ff bf73 	b.w	e52dc <network_listening>

000e53f6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   e53f6:	2200      	movs	r2, #0
   e53f8:	4611      	mov	r1, r2
   e53fa:	6840      	ldr	r0, [r0, #4]
   e53fc:	f7ff bf7e 	b.w	e52fc <network_get_listen_timeout>

000e5400 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   e5400:	2200      	movs	r2, #0
   e5402:	6840      	ldr	r0, [r0, #4]
   e5404:	f7ff bf72 	b.w	e52ec <network_set_listen_timeout>

000e5408 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   e5408:	2200      	movs	r2, #0
   e540a:	f081 0101 	eor.w	r1, r1, #1
   e540e:	6840      	ldr	r0, [r0, #4]
   e5410:	f7ff bf5c 	b.w	e52cc <network_listen>

000e5414 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   e5414:	2300      	movs	r3, #0
   e5416:	461a      	mov	r2, r3
   e5418:	4619      	mov	r1, r3
   e541a:	6840      	ldr	r0, [r0, #4]
   e541c:	f7ff bf4e 	b.w	e52bc <network_off>

000e5420 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   e5420:	2300      	movs	r3, #0
   e5422:	461a      	mov	r2, r3
   e5424:	4619      	mov	r1, r3
   e5426:	6840      	ldr	r0, [r0, #4]
   e5428:	f7ff bf40 	b.w	e52ac <network_on>

000e542c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   e542c:	2200      	movs	r2, #0
   e542e:	4611      	mov	r1, r2
   e5430:	6840      	ldr	r0, [r0, #4]
   e5432:	f7ff bf33 	b.w	e529c <network_ready>

000e5436 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   e5436:	2200      	movs	r2, #0
   e5438:	4611      	mov	r1, r2
   e543a:	6840      	ldr	r0, [r0, #4]
   e543c:	f7ff bf1e 	b.w	e527c <network_connecting>

000e5440 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   e5440:	2200      	movs	r2, #0
   e5442:	2102      	movs	r1, #2
   e5444:	6840      	ldr	r0, [r0, #4]
   e5446:	f7ff bf21 	b.w	e528c <network_disconnect>

000e544a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   e544a:	2300      	movs	r3, #0
   e544c:	461a      	mov	r2, r3
   e544e:	6840      	ldr	r0, [r0, #4]
   e5450:	f7ff bf0c 	b.w	e526c <network_connect>

000e5454 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   e5454:	4b02      	ldr	r3, [pc, #8]	; (e5460 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   e5456:	2203      	movs	r2, #3
   e5458:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   e545a:	4a02      	ldr	r2, [pc, #8]	; (e5464 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   e545c:	601a      	str	r2, [r3, #0]
   e545e:	4770      	bx	lr
   e5460:	2003e4c4 	.word	0x2003e4c4
   e5464:	000ea874 	.word	0x000ea874

000e5468 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   e5468:	b510      	push	{r4, lr}
   e546a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   e546c:	6800      	ldr	r0, [r0, #0]
   e546e:	b118      	cbz	r0, e5478 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   e5470:	f7ff ff7c 	bl	e536c <free>
            wakeupSource_ = nullptr;
   e5474:	2300      	movs	r3, #0
   e5476:	6023      	str	r3, [r4, #0]
   e5478:	bd10      	pop	{r4, pc}

000e547a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   e547a:	b510      	push	{r4, lr}
   e547c:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   e547e:	f7ff fff3 	bl	e5468 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   e5482:	4620      	mov	r0, r4
   e5484:	bd10      	pop	{r4, pc}
	...

000e5488 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   e5488:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   e548a:	4c09      	ldr	r4, [pc, #36]	; (e54b0 <_GLOBAL__sub_I_System+0x28>)
   e548c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   e548e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   e5492:	6020      	str	r0, [r4, #0]
   e5494:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   e5496:	71a0      	strb	r0, [r4, #6]
   e5498:	8120      	strh	r0, [r4, #8]
   e549a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   e549c:	f7ff feba 	bl	e5214 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   e54a0:	4620      	mov	r0, r4
   e54a2:	4a04      	ldr	r2, [pc, #16]	; (e54b4 <_GLOBAL__sub_I_System+0x2c>)
   e54a4:	4904      	ldr	r1, [pc, #16]	; (e54b8 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   e54a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   e54aa:	f001 b91b 	b.w	e66e4 <__aeabi_atexit>
   e54ae:	bf00      	nop
   e54b0:	2003e4cc 	.word	0x2003e4cc
   e54b4:	2003afe0 	.word	0x2003afe0
   e54b8:	000e547b 	.word	0x000e547b

000e54bc <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   e54bc:	b510      	push	{r4, lr}
   e54be:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   e54c0:	f001 fdbc 	bl	e703c <strlen>
   e54c4:	3801      	subs	r0, #1
   e54c6:	1823      	adds	r3, r4, r0
   e54c8:	4620      	mov	r0, r4
	while(i<j){
   e54ca:	4298      	cmp	r0, r3
   e54cc:	d206      	bcs.n	e54dc <_Z11str_reversePc+0x20>
		c = *i;
   e54ce:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   e54d0:	7819      	ldrb	r1, [r3, #0]
   e54d2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   e54d6:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   e54da:	e7f6      	b.n	e54ca <_Z11str_reversePc+0xe>
   e54dc:	bd10      	pop	{r4, pc}

000e54de <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   e54de:	b570      	push	{r4, r5, r6, lr}
   e54e0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   e54e2:	1e91      	subs	r1, r2, #2
   e54e4:	2922      	cmp	r1, #34	; 0x22
   e54e6:	d820      	bhi.n	e552a <ultoa+0x4c>
   e54e8:	4625      	mov	r5, r4
   e54ea:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   e54ec:	b910      	cbnz	r0, e54f4 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   e54ee:	4423      	add	r3, r4
            *ptr++ = '0';
   e54f0:	2230      	movs	r2, #48	; 0x30
   e54f2:	e00e      	b.n	e5512 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   e54f4:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   e54f8:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   e54fc:	b2c1      	uxtb	r1, r0
   e54fe:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   e5502:	2809      	cmp	r0, #9
                *ptr += '0';
   e5504:	bf94      	ite	ls
   e5506:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   e5508:	3157      	addhi	r1, #87	; 0x57
   e550a:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   e550e:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   e5510:	e7eb      	b.n	e54ea <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   e5512:	4299      	cmp	r1, r3
   e5514:	d202      	bcs.n	e551c <ultoa+0x3e>
            *ptr++ = '0';
   e5516:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   e551a:	e7fa      	b.n	e5512 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   e551c:	2300      	movs	r3, #0
	str_reverse(buffer);
   e551e:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   e5520:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   e5522:	f7ff ffcb 	bl	e54bc <_Z11str_reversePc>
	return buffer;
   e5526:	4620      	mov	r0, r4
   e5528:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   e552a:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   e552c:	bd70      	pop	{r4, r5, r6, pc}

000e552e <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   e552e:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   e5530:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   e5532:	460c      	mov	r4, r1
   e5534:	4615      	mov	r5, r2
	if(a<0){
   e5536:	da0b      	bge.n	e5550 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   e5538:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   e553c:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   e5540:	bf14      	ite	ne
   e5542:	4258      	negne	r0, r3
   e5544:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   e5546:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   e5548:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   e554a:	462a      	mov	r2, r5
   e554c:	4419      	add	r1, r3
   e554e:	e000      	b.n	e5552 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   e5550:	2301      	movs	r3, #1
   e5552:	f7ff ffc4 	bl	e54de <ultoa>
	}
	return buffer;
}
   e5556:	4620      	mov	r0, r4
   e5558:	bd38      	pop	{r3, r4, r5, pc}

000e555a <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   e555a:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   e555c:	2301      	movs	r3, #1
   e555e:	f7ff ffbe 	bl	e54de <ultoa>
}
   e5562:	bd08      	pop	{r3, pc}

000e5564 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   e5564:	b510      	push	{r4, lr}
   e5566:	4604      	mov	r4, r0
{
	free(buffer);
   e5568:	6800      	ldr	r0, [r0, #0]
   e556a:	f7ff feff 	bl	e536c <free>
}
   e556e:	4620      	mov	r0, r4
   e5570:	bd10      	pop	{r4, pc}

000e5572 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   e5572:	b510      	push	{r4, lr}
   e5574:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   e5576:	6800      	ldr	r0, [r0, #0]
   e5578:	b108      	cbz	r0, e557e <_ZN6String10invalidateEv+0xc>
   e557a:	f7ff fef7 	bl	e536c <free>
	buffer = NULL;
   e557e:	2300      	movs	r3, #0
   e5580:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   e5582:	60a3      	str	r3, [r4, #8]
   e5584:	6063      	str	r3, [r4, #4]
   e5586:	bd10      	pop	{r4, pc}

000e5588 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   e5588:	b538      	push	{r3, r4, r5, lr}
   e558a:	4604      	mov	r4, r0
   e558c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   e558e:	6800      	ldr	r0, [r0, #0]
   e5590:	3101      	adds	r1, #1
   e5592:	f7ff fef3 	bl	e537c <realloc>
	if (newbuffer) {
   e5596:	b110      	cbz	r0, e559e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   e5598:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   e559c:	2001      	movs	r0, #1
	}
	return 0;
}
   e559e:	bd38      	pop	{r3, r4, r5, pc}

000e55a0 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   e55a0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   e55a2:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   e55a4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   e55a6:	b113      	cbz	r3, e55ae <_ZN6String7reserveEj+0xe>
   e55a8:	6843      	ldr	r3, [r0, #4]
   e55aa:	428b      	cmp	r3, r1
   e55ac:	d207      	bcs.n	e55be <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   e55ae:	4620      	mov	r0, r4
   e55b0:	f7ff ffea 	bl	e5588 <_ZN6String12changeBufferEj>
   e55b4:	b120      	cbz	r0, e55c0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   e55b6:	68a3      	ldr	r3, [r4, #8]
   e55b8:	b90b      	cbnz	r3, e55be <_ZN6String7reserveEj+0x1e>
   e55ba:	6822      	ldr	r2, [r4, #0]
   e55bc:	7013      	strb	r3, [r2, #0]
   e55be:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   e55c0:	bd10      	pop	{r4, pc}

000e55c2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   e55c2:	b570      	push	{r4, r5, r6, lr}
   e55c4:	460e      	mov	r6, r1
	if (!reserve(length)) {
   e55c6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   e55c8:	4604      	mov	r4, r0
   e55ca:	4615      	mov	r5, r2
	if (!reserve(length)) {
   e55cc:	f7ff ffe8 	bl	e55a0 <_ZN6String7reserveEj>
   e55d0:	b918      	cbnz	r0, e55da <_ZN6String4copyEPKcj+0x18>
		invalidate();
   e55d2:	4620      	mov	r0, r4
   e55d4:	f7ff ffcd 	bl	e5572 <_ZN6String10invalidateEv>
		return *this;
   e55d8:	e009      	b.n	e55ee <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   e55da:	462a      	mov	r2, r5
   e55dc:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   e55de:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   e55e0:	6820      	ldr	r0, [r4, #0]
   e55e2:	f001 fcb4 	bl	e6f4e <memcpy>
	buffer[len] = 0;
   e55e6:	6822      	ldr	r2, [r4, #0]
   e55e8:	68a3      	ldr	r3, [r4, #8]
   e55ea:	2100      	movs	r1, #0
   e55ec:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   e55ee:	4620      	mov	r0, r4
   e55f0:	bd70      	pop	{r4, r5, r6, pc}

000e55f2 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   e55f2:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e55f4:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   e55f6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e55f8:	6003      	str	r3, [r0, #0]
	capacity = 0;
   e55fa:	6043      	str	r3, [r0, #4]
	len = 0;
   e55fc:	6083      	str	r3, [r0, #8]
	flags = 0;
   e55fe:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   e5600:	460d      	mov	r5, r1
   e5602:	b139      	cbz	r1, e5614 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   e5604:	4608      	mov	r0, r1
   e5606:	f001 fd19 	bl	e703c <strlen>
   e560a:	4629      	mov	r1, r5
   e560c:	4602      	mov	r2, r0
   e560e:	4620      	mov	r0, r4
   e5610:	f7ff ffd7 	bl	e55c2 <_ZN6String4copyEPKcj>
}
   e5614:	4620      	mov	r0, r4
   e5616:	bd38      	pop	{r3, r4, r5, pc}

000e5618 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   e5618:	b538      	push	{r3, r4, r5, lr}
   e561a:	4605      	mov	r5, r0
	if (buffer) {
   e561c:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   e561e:	460c      	mov	r4, r1
	if (buffer) {
   e5620:	b160      	cbz	r0, e563c <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   e5622:	686a      	ldr	r2, [r5, #4]
   e5624:	688b      	ldr	r3, [r1, #8]
   e5626:	429a      	cmp	r2, r3
   e5628:	d306      	bcc.n	e5638 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   e562a:	6809      	ldr	r1, [r1, #0]
   e562c:	f001 fcfe 	bl	e702c <strcpy>
			len = rhs.len;
   e5630:	68a3      	ldr	r3, [r4, #8]
   e5632:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   e5634:	2300      	movs	r3, #0
   e5636:	e00a      	b.n	e564e <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   e5638:	f7ff fe98 	bl	e536c <free>
		}
	}
	buffer = rhs.buffer;
   e563c:	6823      	ldr	r3, [r4, #0]
   e563e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   e5640:	6863      	ldr	r3, [r4, #4]
   e5642:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   e5644:	68a3      	ldr	r3, [r4, #8]
   e5646:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   e5648:	2300      	movs	r3, #0
   e564a:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   e564c:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   e564e:	60a3      	str	r3, [r4, #8]
   e5650:	bd38      	pop	{r3, r4, r5, pc}

000e5652 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   e5652:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   e5654:	b510      	push	{r4, lr}
   e5656:	460b      	mov	r3, r1
   e5658:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   e565a:	d007      	beq.n	e566c <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   e565c:	6809      	ldr	r1, [r1, #0]
   e565e:	b119      	cbz	r1, e5668 <_ZN6StringaSERKS_+0x16>
   e5660:	689a      	ldr	r2, [r3, #8]
   e5662:	f7ff ffae 	bl	e55c2 <_ZN6String4copyEPKcj>
   e5666:	e001      	b.n	e566c <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   e5668:	f7ff ff83 	bl	e5572 <_ZN6String10invalidateEv>

	return *this;
}
   e566c:	4620      	mov	r0, r4
   e566e:	bd10      	pop	{r4, pc}

000e5670 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   e5670:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e5672:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   e5674:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e5676:	6003      	str	r3, [r0, #0]
	capacity = 0;
   e5678:	6043      	str	r3, [r0, #4]
	len = 0;
   e567a:	6083      	str	r3, [r0, #8]
	flags = 0;
   e567c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   e567e:	f7ff ffe8 	bl	e5652 <_ZN6StringaSERKS_>
}
   e5682:	4620      	mov	r0, r4
   e5684:	bd10      	pop	{r4, pc}

000e5686 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   e5686:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   e5688:	b510      	push	{r4, lr}
   e568a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   e568c:	d001      	beq.n	e5692 <_ZN6StringaSEOS_+0xc>
   e568e:	f7ff ffc3 	bl	e5618 <_ZN6String4moveERS_>
	return *this;
}
   e5692:	4620      	mov	r0, r4
   e5694:	bd10      	pop	{r4, pc}

000e5696 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   e5696:	b538      	push	{r3, r4, r5, lr}
   e5698:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   e569a:	460c      	mov	r4, r1
   e569c:	b141      	cbz	r1, e56b0 <_ZN6StringaSEPKc+0x1a>
   e569e:	4608      	mov	r0, r1
   e56a0:	f001 fccc 	bl	e703c <strlen>
   e56a4:	4621      	mov	r1, r4
   e56a6:	4602      	mov	r2, r0
   e56a8:	4628      	mov	r0, r5
   e56aa:	f7ff ff8a 	bl	e55c2 <_ZN6String4copyEPKcj>
   e56ae:	e001      	b.n	e56b4 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   e56b0:	f7ff ff5f 	bl	e5572 <_ZN6String10invalidateEv>

	return *this;
}
   e56b4:	4628      	mov	r0, r5
   e56b6:	bd38      	pop	{r3, r4, r5, pc}

000e56b8 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   e56b8:	b510      	push	{r4, lr}
   e56ba:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e56bc:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   e56be:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e56c0:	6023      	str	r3, [r4, #0]
	capacity = 0;
   e56c2:	6063      	str	r3, [r4, #4]
	len = 0;
   e56c4:	60a3      	str	r3, [r4, #8]
	flags = 0;
   e56c6:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   e56c8:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   e56ca:	a901      	add	r1, sp, #4
   e56cc:	f7ff ff2f 	bl	e552e <itoa>
	*this = buf;
   e56d0:	a901      	add	r1, sp, #4
   e56d2:	4620      	mov	r0, r4
   e56d4:	f7ff ffdf 	bl	e5696 <_ZN6StringaSEPKc>
}
   e56d8:	4620      	mov	r0, r4
   e56da:	b00a      	add	sp, #40	; 0x28
   e56dc:	bd10      	pop	{r4, pc}

000e56de <_ZN6StringC1Ejh>:

String::String(unsigned int value, unsigned char base)
   e56de:	b510      	push	{r4, lr}
   e56e0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e56e2:	2300      	movs	r3, #0
	char buf[34];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
   e56e4:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e56e6:	6023      	str	r3, [r4, #0]
	capacity = 0;
   e56e8:	6063      	str	r3, [r4, #4]
	len = 0;
   e56ea:	60a3      	str	r3, [r4, #8]
	flags = 0;
   e56ec:	7323      	strb	r3, [r4, #12]
	char buf[34];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
   e56ee:	4608      	mov	r0, r1
{
	init();
	char buf[33];
	utoa(value, buf, base);
   e56f0:	a901      	add	r1, sp, #4
   e56f2:	f7ff ff32 	bl	e555a <utoa>
	*this = buf;
   e56f6:	a901      	add	r1, sp, #4
   e56f8:	4620      	mov	r0, r4
   e56fa:	f7ff ffcc 	bl	e5696 <_ZN6StringaSEPKc>
}
   e56fe:	4620      	mov	r0, r4
   e5700:	b00a      	add	sp, #40	; 0x28
   e5702:	bd10      	pop	{r4, pc}

000e5704 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   e5704:	b570      	push	{r4, r5, r6, lr}
   e5706:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   e5708:	460e      	mov	r6, r1
   e570a:	b909      	cbnz	r1, e5710 <_ZN6String6concatEPKcj+0xc>
   e570c:	2000      	movs	r0, #0
   e570e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   e5710:	b16a      	cbz	r2, e572e <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   e5712:	6883      	ldr	r3, [r0, #8]
   e5714:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   e5716:	4629      	mov	r1, r5
   e5718:	f7ff ff42 	bl	e55a0 <_ZN6String7reserveEj>
   e571c:	2800      	cmp	r0, #0
   e571e:	d0f5      	beq.n	e570c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   e5720:	6820      	ldr	r0, [r4, #0]
   e5722:	68a3      	ldr	r3, [r4, #8]
   e5724:	4631      	mov	r1, r6
   e5726:	4418      	add	r0, r3
   e5728:	f001 fc80 	bl	e702c <strcpy>
	len = newlen;
   e572c:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   e572e:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   e5730:	bd70      	pop	{r4, r5, r6, pc}

000e5732 <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
   e5732:	688a      	ldr	r2, [r1, #8]
   e5734:	6809      	ldr	r1, [r1, #0]
   e5736:	f7ff bfe5 	b.w	e5704 <_ZN6String6concatEPKcj>

000e573a <_ZN6String6concatEPKc>:
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
{
   e573a:	b538      	push	{r3, r4, r5, lr}
   e573c:	4605      	mov	r5, r0
	if (!cstr) return 0;
   e573e:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
   e5740:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
   e5742:	b141      	cbz	r1, e5756 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
   e5744:	f001 fc7a 	bl	e703c <strlen>
   e5748:	4621      	mov	r1, r4
   e574a:	4602      	mov	r2, r0
   e574c:	4628      	mov	r0, r5
}
   e574e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
   e5752:	f7ff bfd7 	b.w	e5704 <_ZN6String6concatEPKcj>
}
   e5756:	bd38      	pop	{r3, r4, r5, pc}

000e5758 <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
   e5758:	4602      	mov	r2, r0
	if (!buffer || !s.buffer) {
   e575a:	6800      	ldr	r0, [r0, #0]
   e575c:	680b      	ldr	r3, [r1, #0]
   e575e:	b108      	cbz	r0, e5764 <_ZNK6String9compareToERKS_+0xc>
   e5760:	b95b      	cbnz	r3, e577a <_ZNK6String9compareToERKS_+0x22>
   e5762:	e005      	b.n	e5770 <_ZNK6String9compareToERKS_+0x18>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   e5764:	b123      	cbz	r3, e5770 <_ZNK6String9compareToERKS_+0x18>
   e5766:	6889      	ldr	r1, [r1, #8]
   e5768:	b111      	cbz	r1, e5770 <_ZNK6String9compareToERKS_+0x18>
   e576a:	7818      	ldrb	r0, [r3, #0]
   e576c:	4240      	negs	r0, r0
   e576e:	4770      	bx	lr
		if (buffer && len > 0) return *(unsigned char *)buffer;
   e5770:	b138      	cbz	r0, e5782 <_ZNK6String9compareToERKS_+0x2a>
   e5772:	6893      	ldr	r3, [r2, #8]
   e5774:	b123      	cbz	r3, e5780 <_ZNK6String9compareToERKS_+0x28>
   e5776:	7800      	ldrb	r0, [r0, #0]
   e5778:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   e577a:	4619      	mov	r1, r3
   e577c:	f001 bc4c 	b.w	e7018 <strcmp>
int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
   e5780:	4618      	mov	r0, r3
	}
	return strcmp(buffer, s.buffer);
}
   e5782:	4770      	bx	lr

000e5784 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   e5784:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   e5786:	6882      	ldr	r2, [r0, #8]
   e5788:	688b      	ldr	r3, [r1, #8]
   e578a:	429a      	cmp	r2, r3
   e578c:	d105      	bne.n	e579a <_ZNK6String6equalsERKS_+0x16>
   e578e:	f7ff ffe3 	bl	e5758 <_ZNK6String9compareToERKS_>
   e5792:	fab0 f080 	clz	r0, r0
   e5796:	0940      	lsrs	r0, r0, #5
   e5798:	bd08      	pop	{r3, pc}
   e579a:	2000      	movs	r0, #0
}
   e579c:	bd08      	pop	{r3, pc}

000e579e <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   e579e:	b510      	push	{r4, lr}
   e57a0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   e57a2:	6800      	ldr	r0, [r0, #0]
   e57a4:	b108      	cbz	r0, e57aa <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   e57a6:	f7ff fc65 	bl	e5074 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   e57aa:	4620      	mov	r0, r4
   e57ac:	bd10      	pop	{r4, pc}
	...

000e57b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   e57b0:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   e57b2:	4c06      	ldr	r4, [pc, #24]	; (e57cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   e57b4:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   e57b6:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   e57b8:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   e57ba:	f7ff fc53 	bl	e5064 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   e57be:	4620      	mov	r0, r4
   e57c0:	4a03      	ldr	r2, [pc, #12]	; (e57d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   e57c2:	4904      	ldr	r1, [pc, #16]	; (e57d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   e57c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   e57c8:	f000 bf8c 	b.w	e66e4 <__aeabi_atexit>
   e57cc:	2003e4d8 	.word	0x2003e4d8
   e57d0:	2003afe0 	.word	0x2003afe0
   e57d4:	000e579f 	.word	0x000e579f

000e57d8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   e57d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e57da:	4606      	mov	r6, r0
   e57dc:	460d      	mov	r5, r1
   e57de:	188f      	adds	r7, r1, r2
  size_t n = 0;
   e57e0:	2400      	movs	r4, #0
  while (size--) {
   e57e2:	42bd      	cmp	r5, r7
   e57e4:	d00c      	beq.n	e5800 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   e57e6:	6833      	ldr	r3, [r6, #0]
   e57e8:	f815 1b01 	ldrb.w	r1, [r5], #1
   e57ec:	689b      	ldr	r3, [r3, #8]
   e57ee:	4630      	mov	r0, r6
   e57f0:	4798      	blx	r3
     if (chunk>=0)
   e57f2:	2800      	cmp	r0, #0
   e57f4:	db01      	blt.n	e57fa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   e57f6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   e57f8:	e7f3      	b.n	e57e2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   e57fa:	2c00      	cmp	r4, #0
   e57fc:	bf08      	it	eq
   e57fe:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   e5800:	4620      	mov	r0, r4
   e5802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e5804 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   e5804:	b570      	push	{r4, r5, r6, lr}
   e5806:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   e5808:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   e580a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   e580c:	b149      	cbz	r1, e5822 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   e580e:	f001 fc15 	bl	e703c <strlen>
   e5812:	682b      	ldr	r3, [r5, #0]
   e5814:	4602      	mov	r2, r0
   e5816:	4621      	mov	r1, r4
   e5818:	4628      	mov	r0, r5
   e581a:	68db      	ldr	r3, [r3, #12]
    }
   e581c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   e5820:	4718      	bx	r3
    }
   e5822:	bd70      	pop	{r4, r5, r6, pc}

000e5824 <_ZN5Print5printEPKc>:
   e5824:	b508      	push	{r3, lr}
   e5826:	f7ff ffed 	bl	e5804 <_ZN5Print5writeEPKc>
   e582a:	bd08      	pop	{r3, pc}

000e582c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   e582c:	6803      	ldr	r3, [r0, #0]
   e582e:	689b      	ldr	r3, [r3, #8]
   e5830:	4718      	bx	r3

000e5832 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   e5832:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   e5834:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   e5836:	4605      	mov	r5, r0
  size_t n = print('\r');
   e5838:	f7ff fff8 	bl	e582c <_ZN5Print5printEc>
  n += print('\n');
   e583c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   e583e:	4604      	mov	r4, r0
  n += print('\n');
   e5840:	4628      	mov	r0, r5
   e5842:	f7ff fff3 	bl	e582c <_ZN5Print5printEc>
  return n;
}
   e5846:	4420      	add	r0, r4
   e5848:	bd38      	pop	{r3, r4, r5, pc}

000e584a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   e584a:	b538      	push	{r3, r4, r5, lr}
   e584c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   e584e:	f7ff ffd9 	bl	e5804 <_ZN5Print5writeEPKc>
   e5852:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   e5854:	4628      	mov	r0, r5
   e5856:	f7ff ffec 	bl	e5832 <_ZN5Print7printlnEv>
  return n;
}
   e585a:	4420      	add	r0, r4
   e585c:	bd38      	pop	{r3, r4, r5, pc}

000e585e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   e585e:	b530      	push	{r4, r5, lr}
   e5860:	b08b      	sub	sp, #44	; 0x2c
   e5862:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   e5864:	2100      	movs	r1, #0
   e5866:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   e586a:	2a01      	cmp	r2, #1
   e586c:	bf98      	it	ls
   e586e:	220a      	movls	r2, #10
   e5870:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   e5874:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   e5878:	fb05 3312 	mls	r3, r5, r2, r3
   e587c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   e5880:	2b09      	cmp	r3, #9
   e5882:	bf94      	ite	ls
   e5884:	3330      	addls	r3, #48	; 0x30
   e5886:	3337      	addhi	r3, #55	; 0x37
   e5888:	b2db      	uxtb	r3, r3
   e588a:	4621      	mov	r1, r4
   e588c:	f804 3901 	strb.w	r3, [r4], #-1
   e5890:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   e5892:	2d00      	cmp	r5, #0
   e5894:	d1ee      	bne.n	e5874 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   e5896:	f7ff ffb5 	bl	e5804 <_ZN5Print5writeEPKc>
}
   e589a:	b00b      	add	sp, #44	; 0x2c
   e589c:	bd30      	pop	{r4, r5, pc}
	...

000e58a0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   e58a0:	4b01      	ldr	r3, [pc, #4]	; (e58a8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   e58a2:	4a02      	ldr	r2, [pc, #8]	; (e58ac <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   e58a4:	601a      	str	r2, [r3, #0]
   e58a6:	4770      	bx	lr
   e58a8:	2003e4dc 	.word	0x2003e4dc
   e58ac:	000ea90e 	.word	0x000ea90e

000e58b0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   e58b0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   e58b2:	2000      	movs	r0, #0
   e58b4:	f7ff fd42 	bl	e533c <spark_sync_time_pending>
   e58b8:	b128      	cbz	r0, e58c6 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   e58ba:	f7ff fd2f 	bl	e531c <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   e58be:	f080 0001 	eor.w	r0, r0, #1
   e58c2:	b2c0      	uxtb	r0, r0
   e58c4:	bd08      	pop	{r3, pc}
   e58c6:	2001      	movs	r0, #1
    }
   e58c8:	bd08      	pop	{r3, pc}
	...

000e58cc <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   e58cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   e58ce:	4b0e      	ldr	r3, [pc, #56]	; (e5908 <_ZN9TimeClass7timeStrEl+0x3c>)
   e58d0:	681b      	ldr	r3, [r3, #0]
   e58d2:	4419      	add	r1, r3
   e58d4:	4b0d      	ldr	r3, [pc, #52]	; (e590c <_ZN9TimeClass7timeStrEl+0x40>)
   e58d6:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   e58d8:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   e58da:	a802      	add	r0, sp, #8
   e58dc:	4419      	add	r1, r3
   e58de:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   e58e2:	f001 fa2d 	bl	e6d40 <localtime>
        char* ascstr = asctime(calendar_time);
   e58e6:	f001 f9d9 	bl	e6c9c <asctime>
   e58ea:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   e58ec:	f001 fba6 	bl	e703c <strlen>
        ascstr[len-1] = 0; // remove final newline
   e58f0:	4428      	add	r0, r5
   e58f2:	2300      	movs	r3, #0
   e58f4:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   e58f8:	4629      	mov	r1, r5
   e58fa:	4620      	mov	r0, r4
   e58fc:	f7ff fe79 	bl	e55f2 <_ZN6StringC1EPK19__FlashStringHelper>
}
   e5900:	4620      	mov	r0, r4
   e5902:	b003      	add	sp, #12
   e5904:	bd30      	pop	{r4, r5, pc}
   e5906:	bf00      	nop
   e5908:	2003e4e8 	.word	0x2003e4e8
   e590c:	2003e4e4 	.word	0x2003e4e4

000e5910 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   e5910:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   e5912:	2000      	movs	r0, #0
   e5914:	f7ff fb86 	bl	e5024 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   e5918:	4604      	mov	r4, r0
   e591a:	b968      	cbnz	r0, e5938 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   e591c:	f7ff fc72 	bl	e5204 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   e5920:	2801      	cmp	r0, #1
   e5922:	d10b      	bne.n	e593c <_ZN9TimeClass7isValidEv+0x2c>
   e5924:	4620      	mov	r0, r4
   e5926:	f7ff fc85 	bl	e5234 <system_thread_get_state>
   e592a:	b938      	cbnz	r0, e593c <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   e592c:	f7ff ffc0 	bl	e58b0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   e5930:	b930      	cbnz	r0, e5940 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   e5932:	f7ff fceb 	bl	e530c <spark_process>
   e5936:	e7f9      	b.n	e592c <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   e5938:	2001      	movs	r0, #1
   e593a:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   e593c:	2000      	movs	r0, #0
   e593e:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   e5940:	f7ff ffb6 	bl	e58b0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   e5944:	2000      	movs	r0, #0
   e5946:	f7ff fb6d 	bl	e5024 <HAL_RTC_Time_Is_Valid>
   e594a:	3000      	adds	r0, #0
   e594c:	bf18      	it	ne
   e594e:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   e5950:	bd10      	pop	{r4, pc}

000e5952 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   e5952:	b508      	push	{r3, lr}
    (void)isValid();
   e5954:	f7ff ffdc 	bl	e5910 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   e5958:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   e595c:	f7ff bb5a 	b.w	e5014 <HAL_RTC_Get_UnixTime>

000e5960 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   e5960:	4b02      	ldr	r3, [pc, #8]	; (e596c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   e5962:	681a      	ldr	r2, [r3, #0]
   e5964:	4b02      	ldr	r3, [pc, #8]	; (e5970 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   e5966:	601a      	str	r2, [r3, #0]
   e5968:	4770      	bx	lr
   e596a:	bf00      	nop
   e596c:	2003af28 	.word	0x2003af28
   e5970:	2003e4e0 	.word	0x2003e4e0

000e5974 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   e5974:	2100      	movs	r1, #0
   e5976:	f7ff bc55 	b.w	e5224 <system_delay_ms>

000e597a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   e597a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   e597c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   e597e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   e5980:	b113      	cbz	r3, e5988 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   e5982:	2203      	movs	r2, #3
   e5984:	4601      	mov	r1, r0
   e5986:	4798      	blx	r3
    }
   e5988:	4620      	mov	r0, r4
   e598a:	bd10      	pop	{r4, pc}

000e598c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   e598c:	b510      	push	{r4, lr}
   e598e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   e5990:	f7ff fff3 	bl	e597a <_ZNSt14_Function_baseD1Ev>
   e5994:	4620      	mov	r0, r4
   e5996:	bd10      	pop	{r4, pc}

000e5998 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   e5998:	4803      	ldr	r0, [pc, #12]	; (e59a8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   e599a:	4a04      	ldr	r2, [pc, #16]	; (e59ac <_GLOBAL__sub_I_RGB+0x14>)
   e599c:	4904      	ldr	r1, [pc, #16]	; (e59b0 <_GLOBAL__sub_I_RGB+0x18>)
   e599e:	2300      	movs	r3, #0
   e59a0:	6083      	str	r3, [r0, #8]
   e59a2:	f000 be9f 	b.w	e66e4 <__aeabi_atexit>
   e59a6:	bf00      	nop
   e59a8:	2003e4ec 	.word	0x2003e4ec
   e59ac:	2003afe0 	.word	0x2003afe0
   e59b0:	000e598d 	.word	0x000e598d

000e59b4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   e59b4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   e59b6:	4b0c      	ldr	r3, [pc, #48]	; (e59e8 <serialEventRun+0x34>)
   e59b8:	b133      	cbz	r3, e59c8 <serialEventRun+0x14>
   e59ba:	f000 f96d 	bl	e5c98 <_Z16_fetch_usbserialv>
   e59be:	6803      	ldr	r3, [r0, #0]
   e59c0:	691b      	ldr	r3, [r3, #16]
   e59c2:	4798      	blx	r3
   e59c4:	2800      	cmp	r0, #0
   e59c6:	dc09      	bgt.n	e59dc <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   e59c8:	4b08      	ldr	r3, [pc, #32]	; (e59ec <serialEventRun+0x38>)
   e59ca:	b163      	cbz	r3, e59e6 <serialEventRun+0x32>
   e59cc:	f000 f9e2 	bl	e5d94 <_Z22__fetch_global_Serial1v>
   e59d0:	6803      	ldr	r3, [r0, #0]
   e59d2:	691b      	ldr	r3, [r3, #16]
   e59d4:	4798      	blx	r3
   e59d6:	2800      	cmp	r0, #0
   e59d8:	dc03      	bgt.n	e59e2 <serialEventRun+0x2e>
   e59da:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   e59dc:	f3af 8000 	nop.w
   e59e0:	e7f2      	b.n	e59c8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   e59e2:	f3af 8000 	nop.w
   e59e6:	bd08      	pop	{r3, pc}
	...

000e59f0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   e59f0:	b508      	push	{r3, lr}
	serialEventRun();
   e59f2:	f7ff ffdf 	bl	e59b4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   e59f6:	f7ff fb05 	bl	e5004 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   e59fa:	4b01      	ldr	r3, [pc, #4]	; (e5a00 <_post_loop+0x10>)
   e59fc:	6018      	str	r0, [r3, #0]
   e59fe:	bd08      	pop	{r3, pc}
   e5a00:	2003e720 	.word	0x2003e720

000e5a04 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   e5a04:	4802      	ldr	r0, [pc, #8]	; (e5a10 <_Z33system_initialize_user_backup_ramv+0xc>)
   e5a06:	4a03      	ldr	r2, [pc, #12]	; (e5a14 <_Z33system_initialize_user_backup_ramv+0x10>)
   e5a08:	4903      	ldr	r1, [pc, #12]	; (e5a18 <_Z33system_initialize_user_backup_ramv+0x14>)
   e5a0a:	1a12      	subs	r2, r2, r0
   e5a0c:	f001 ba9f 	b.w	e6f4e <memcpy>
   e5a10:	2003f400 	.word	0x2003f400
   e5a14:	2003f404 	.word	0x2003f404
   e5a18:	000eadd8 	.word	0x000eadd8

000e5a1c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   e5a1c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   e5a1e:	2300      	movs	r3, #0
   e5a20:	9300      	str	r3, [sp, #0]
   e5a22:	461a      	mov	r2, r3
   e5a24:	f06f 0177 	mvn.w	r1, #119	; 0x77
   e5a28:	f7ff fc16 	bl	e5258 <system_ctrl_set_result>
}
   e5a2c:	b003      	add	sp, #12
   e5a2e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000e5a34 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   e5a34:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   e5a36:	8843      	ldrh	r3, [r0, #2]
   e5a38:	2b0a      	cmp	r3, #10
   e5a3a:	d008      	beq.n	e5a4e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   e5a3c:	2b50      	cmp	r3, #80	; 0x50
   e5a3e:	d109      	bne.n	e5a54 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   e5a40:	4b09      	ldr	r3, [pc, #36]	; (e5a68 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   e5a42:	681b      	ldr	r3, [r3, #0]
   e5a44:	b13b      	cbz	r3, e5a56 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   e5a46:	b003      	add	sp, #12
   e5a48:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   e5a4c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   e5a4e:	f7ff ffe5 	bl	e5a1c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   e5a52:	e006      	b.n	e5a62 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   e5a54:	2300      	movs	r3, #0
   e5a56:	9300      	str	r3, [sp, #0]
   e5a58:	461a      	mov	r2, r3
   e5a5a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   e5a5e:	f7ff fbfb 	bl	e5258 <system_ctrl_set_result>
        break;
    }
}
   e5a62:	b003      	add	sp, #12
   e5a64:	f85d fb04 	ldr.w	pc, [sp], #4
   e5a68:	2003e4fc 	.word	0x2003e4fc

000e5a6c <module_user_init_hook>:

void module_user_init_hook()
{
   e5a6c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   e5a6e:	4c10      	ldr	r4, [pc, #64]	; (e5ab0 <module_user_init_hook+0x44>)
   e5a70:	4d10      	ldr	r5, [pc, #64]	; (e5ab4 <module_user_init_hook+0x48>)
   e5a72:	6823      	ldr	r3, [r4, #0]
   e5a74:	42ab      	cmp	r3, r5
   e5a76:	4b10      	ldr	r3, [pc, #64]	; (e5ab8 <module_user_init_hook+0x4c>)
   e5a78:	bf0c      	ite	eq
   e5a7a:	2201      	moveq	r2, #1
   e5a7c:	2200      	movne	r2, #0
   e5a7e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   e5a80:	d002      	beq.n	e5a88 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   e5a82:	f7ff ffbf 	bl	e5a04 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   e5a86:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   e5a88:	f7ff fab4 	bl	e4ff4 <HAL_RNG_GetRandomNumber>
   e5a8c:	4604      	mov	r4, r0
    srand(seed);
   e5a8e:	f001 fa9b 	bl	e6fc8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   e5a92:	4b0a      	ldr	r3, [pc, #40]	; (e5abc <module_user_init_hook+0x50>)
   e5a94:	b113      	cbz	r3, e5a9c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   e5a96:	4620      	mov	r0, r4
   e5a98:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   e5a9c:	2100      	movs	r1, #0
   e5a9e:	4807      	ldr	r0, [pc, #28]	; (e5abc <module_user_init_hook+0x50>)
   e5aa0:	f7ff fc54 	bl	e534c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   e5aa4:	2100      	movs	r1, #0
   e5aa6:	4806      	ldr	r0, [pc, #24]	; (e5ac0 <module_user_init_hook+0x54>)
}
   e5aa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   e5aac:	f7ff bbca 	b.w	e5244 <system_ctrl_set_app_request_handler>
   e5ab0:	2003f400 	.word	0x2003f400
   e5ab4:	9a271c1e 	.word	0x9a271c1e
   e5ab8:	2003e500 	.word	0x2003e500
   e5abc:	00000000 	.word	0x00000000
   e5ac0:	000e5a35 	.word	0x000e5a35

000e5ac4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   e5ac4:	4770      	bx	lr

000e5ac6 <_ZN9IPAddressD0Ev>:
   e5ac6:	b510      	push	{r4, lr}
   e5ac8:	2118      	movs	r1, #24
   e5aca:	4604      	mov	r4, r0
   e5acc:	f000 fe0f 	bl	e66ee <_ZdlPvj>
   e5ad0:	4620      	mov	r0, r4
   e5ad2:	bd10      	pop	{r4, pc}

000e5ad4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   e5ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   e5ad6:	7d03      	ldrb	r3, [r0, #20]
   e5ad8:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   e5ada:	b08d      	sub	sp, #52	; 0x34
   e5adc:	460e      	mov	r6, r1
   e5ade:	f100 0704 	add.w	r7, r0, #4
   e5ae2:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   e5ae6:	d002      	beq.n	e5aee <_ZNK9IPAddress7printToER5Print+0x1a>
   e5ae8:	f100 0508 	add.w	r5, r0, #8
   e5aec:	e018      	b.n	e5b20 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   e5aee:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   e5af0:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   e5af2:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   e5af6:	232f      	movs	r3, #47	; 0x2f
   e5af8:	462a      	mov	r2, r5
   e5afa:	200a      	movs	r0, #10
   e5afc:	f7ff fac2 	bl	e5084 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   e5b00:	4628      	mov	r0, r5
   e5b02:	f001 fa9b 	bl	e703c <strlen>
   e5b06:	6833      	ldr	r3, [r6, #0]
   e5b08:	4602      	mov	r2, r0
   e5b0a:	68db      	ldr	r3, [r3, #12]
   e5b0c:	4629      	mov	r1, r5
   e5b0e:	4630      	mov	r0, r6
   e5b10:	4798      	blx	r3
   e5b12:	e00f      	b.n	e5b34 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   e5b14:	b124      	cbz	r4, e5b20 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   e5b16:	212e      	movs	r1, #46	; 0x2e
   e5b18:	4630      	mov	r0, r6
   e5b1a:	f7ff fe87 	bl	e582c <_ZN5Print5printEc>
   e5b1e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   e5b20:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   e5b24:	220a      	movs	r2, #10
   e5b26:	4630      	mov	r0, r6
   e5b28:	f7ff fe99 	bl	e585e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   e5b2c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   e5b2e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   e5b30:	d1f0      	bne.n	e5b14 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   e5b32:	4620      	mov	r0, r4
    }
    return n;
}
   e5b34:	b00d      	add	sp, #52	; 0x34
   e5b36:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e5b38 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   e5b38:	b510      	push	{r4, lr}
   e5b3a:	4b05      	ldr	r3, [pc, #20]	; (e5b50 <_ZN9IPAddressC1Ev+0x18>)
   e5b3c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   e5b3e:	2211      	movs	r2, #17
   e5b40:	f840 3b04 	str.w	r3, [r0], #4
   e5b44:	2100      	movs	r1, #0
   e5b46:	f001 fa28 	bl	e6f9a <memset>
{
    clear();
}
   e5b4a:	4620      	mov	r0, r4
   e5b4c:	bd10      	pop	{r4, pc}
   e5b4e:	bf00      	nop
   e5b50:	000ea9a0 	.word	0x000ea9a0

000e5b54 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   e5b54:	4603      	mov	r3, r0
   e5b56:	4a07      	ldr	r2, [pc, #28]	; (e5b74 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   e5b58:	b510      	push	{r4, lr}
   e5b5a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   e5b5e:	f101 0210 	add.w	r2, r1, #16
   e5b62:	f851 4b04 	ldr.w	r4, [r1], #4
   e5b66:	f843 4b04 	str.w	r4, [r3], #4
   e5b6a:	4291      	cmp	r1, r2
   e5b6c:	d1f9      	bne.n	e5b62 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   e5b6e:	780a      	ldrb	r2, [r1, #0]
   e5b70:	701a      	strb	r2, [r3, #0]
}
   e5b72:	bd10      	pop	{r4, pc}
   e5b74:	000ea9a0 	.word	0x000ea9a0

000e5b78 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   e5b78:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   e5b7a:	2b04      	cmp	r3, #4
   e5b7c:	d101      	bne.n	e5b82 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   e5b7e:	6840      	ldr	r0, [r0, #4]
   e5b80:	e008      	b.n	e5b94 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   e5b82:	2b06      	cmp	r3, #6
   e5b84:	d10a      	bne.n	e5b9c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   e5b86:	6843      	ldr	r3, [r0, #4]
   e5b88:	b953      	cbnz	r3, e5ba0 <_ZNK9IPAddresscvbEv+0x28>
   e5b8a:	6883      	ldr	r3, [r0, #8]
   e5b8c:	b943      	cbnz	r3, e5ba0 <_ZNK9IPAddresscvbEv+0x28>
   e5b8e:	68c3      	ldr	r3, [r0, #12]
   e5b90:	b933      	cbnz	r3, e5ba0 <_ZNK9IPAddresscvbEv+0x28>
   e5b92:	6900      	ldr	r0, [r0, #16]
   e5b94:	3000      	adds	r0, #0
   e5b96:	bf18      	it	ne
   e5b98:	2001      	movne	r0, #1
   e5b9a:	4770      	bx	lr
    } else {
        return false;
   e5b9c:	2000      	movs	r0, #0
   e5b9e:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   e5ba0:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   e5ba2:	4770      	bx	lr

000e5ba4 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   e5ba4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   e5ba6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   e5baa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   e5bae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   e5bb2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   e5bb6:	2304      	movs	r3, #4
   e5bb8:	6041      	str	r1, [r0, #4]
   e5bba:	7503      	strb	r3, [r0, #20]
   e5bbc:	bd10      	pop	{r4, pc}

000e5bbe <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   e5bbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   e5bc0:	780d      	ldrb	r5, [r1, #0]
   e5bc2:	788b      	ldrb	r3, [r1, #2]
   e5bc4:	784a      	ldrb	r2, [r1, #1]
   e5bc6:	78c9      	ldrb	r1, [r1, #3]
   e5bc8:	9100      	str	r1, [sp, #0]
   e5bca:	4629      	mov	r1, r5
   e5bcc:	f7ff ffea 	bl	e5ba4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   e5bd0:	b003      	add	sp, #12
   e5bd2:	bd30      	pop	{r4, r5, pc}

000e5bd4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   e5bd4:	7441      	strb	r1, [r0, #17]
   e5bd6:	4770      	bx	lr

000e5bd8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   e5bd8:	4770      	bx	lr

000e5bda <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   e5bda:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   e5bdc:	2100      	movs	r1, #0
   e5bde:	7c00      	ldrb	r0, [r0, #16]
   e5be0:	f7ff faf0 	bl	e51c4 <HAL_USB_USART_Receive_Data>
}
   e5be4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   e5be8:	bf28      	it	cs
   e5bea:	f04f 30ff 	movcs.w	r0, #4294967295
   e5bee:	bd08      	pop	{r3, pc}

000e5bf0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   e5bf0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   e5bf2:	2101      	movs	r1, #1
   e5bf4:	7c00      	ldrb	r0, [r0, #16]
   e5bf6:	f7ff fae5 	bl	e51c4 <HAL_USB_USART_Receive_Data>
}
   e5bfa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   e5bfe:	bf28      	it	cs
   e5c00:	f04f 30ff 	movcs.w	r0, #4294967295
   e5c04:	bd08      	pop	{r3, pc}

000e5c06 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   e5c06:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   e5c08:	7c00      	ldrb	r0, [r0, #16]
   e5c0a:	f7ff fad3 	bl	e51b4 <HAL_USB_USART_Available_Data_For_Write>
}
   e5c0e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e5c12:	bd08      	pop	{r3, pc}

000e5c14 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   e5c14:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   e5c16:	7c00      	ldrb	r0, [r0, #16]
   e5c18:	f7ff fac4 	bl	e51a4 <HAL_USB_USART_Available_Data>
}
   e5c1c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e5c20:	bd08      	pop	{r3, pc}

000e5c22 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   e5c22:	7c00      	ldrb	r0, [r0, #16]
   e5c24:	f7ff bade 	b.w	e51e4 <HAL_USB_USART_Flush_Data>

000e5c28 <_ZN9USBSerialD0Ev>:
   e5c28:	b510      	push	{r4, lr}
   e5c2a:	2114      	movs	r1, #20
   e5c2c:	4604      	mov	r4, r0
   e5c2e:	f000 fd5e 	bl	e66ee <_ZdlPvj>
   e5c32:	4620      	mov	r0, r4
   e5c34:	bd10      	pop	{r4, pc}

000e5c36 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   e5c36:	b538      	push	{r3, r4, r5, lr}
   e5c38:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   e5c3a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   e5c3c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   e5c3e:	f7ff fab9 	bl	e51b4 <HAL_USB_USART_Available_Data_For_Write>
   e5c42:	2800      	cmp	r0, #0
   e5c44:	dc01      	bgt.n	e5c4a <_ZN9USBSerial5writeEh+0x14>
   e5c46:	7c60      	ldrb	r0, [r4, #17]
   e5c48:	b128      	cbz	r0, e5c56 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   e5c4a:	4629      	mov	r1, r5
   e5c4c:	7c20      	ldrb	r0, [r4, #16]
   e5c4e:	f7ff fac1 	bl	e51d4 <HAL_USB_USART_Send_Data>
   e5c52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   e5c56:	bd38      	pop	{r3, r4, r5, pc}

000e5c58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   e5c58:	b510      	push	{r4, lr}
   e5c5a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   e5c5c:	2300      	movs	r3, #0
   e5c5e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   e5c60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   e5c64:	60a3      	str	r3, [r4, #8]
   e5c66:	4b05      	ldr	r3, [pc, #20]	; (e5c7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   e5c68:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   e5c6a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   e5c6c:	4608      	mov	r0, r1
{
  _serial = serial;
   e5c6e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   e5c70:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   e5c72:	4611      	mov	r1, r2
   e5c74:	f7ff fa86 	bl	e5184 <HAL_USB_USART_Init>
}
   e5c78:	4620      	mov	r0, r4
   e5c7a:	bd10      	pop	{r4, pc}
   e5c7c:	000ea9b4 	.word	0x000ea9b4

000e5c80 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   e5c80:	2200      	movs	r2, #0
   e5c82:	7c00      	ldrb	r0, [r0, #16]
   e5c84:	f7ff ba86 	b.w	e5194 <HAL_USB_USART_Begin>

000e5c88 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   e5c88:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   e5c8a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   e5c8c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   e5c8e:	2100      	movs	r1, #0
   e5c90:	f001 f983 	bl	e6f9a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   e5c94:	4620      	mov	r0, r4
   e5c96:	bd10      	pop	{r4, pc}

000e5c98 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   e5c98:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   e5c9a:	4d0e      	ldr	r5, [pc, #56]	; (e5cd4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   e5c9c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   e5c9e:	a801      	add	r0, sp, #4
   e5ca0:	f7ff fff2 	bl	e5c88 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   e5ca4:	6829      	ldr	r1, [r5, #0]
   e5ca6:	f011 0401 	ands.w	r4, r1, #1
   e5caa:	d110      	bne.n	e5cce <_Z16_fetch_usbserialv+0x36>
   e5cac:	4628      	mov	r0, r5
   e5cae:	f7ee f9fa 	bl	d40a6 <__cxa_guard_acquire>
   e5cb2:	b160      	cbz	r0, e5cce <_Z16_fetch_usbserialv+0x36>
   e5cb4:	aa01      	add	r2, sp, #4
   e5cb6:	4621      	mov	r1, r4
   e5cb8:	4807      	ldr	r0, [pc, #28]	; (e5cd8 <_Z16_fetch_usbserialv+0x40>)
   e5cba:	f7ff ffcd 	bl	e5c58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   e5cbe:	4628      	mov	r0, r5
   e5cc0:	f7ee f9f6 	bl	d40b0 <__cxa_guard_release>
   e5cc4:	4a05      	ldr	r2, [pc, #20]	; (e5cdc <_Z16_fetch_usbserialv+0x44>)
   e5cc6:	4906      	ldr	r1, [pc, #24]	; (e5ce0 <_Z16_fetch_usbserialv+0x48>)
   e5cc8:	4803      	ldr	r0, [pc, #12]	; (e5cd8 <_Z16_fetch_usbserialv+0x40>)
   e5cca:	f000 fd0b 	bl	e66e4 <__aeabi_atexit>
	return _usbserial;
}
   e5cce:	4802      	ldr	r0, [pc, #8]	; (e5cd8 <_Z16_fetch_usbserialv+0x40>)
   e5cd0:	b007      	add	sp, #28
   e5cd2:	bd30      	pop	{r4, r5, pc}
   e5cd4:	2003e504 	.word	0x2003e504
   e5cd8:	2003e508 	.word	0x2003e508
   e5cdc:	2003afe0 	.word	0x2003afe0
   e5ce0:	000e5bd9 	.word	0x000e5bd9

000e5ce4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   e5ce4:	4770      	bx	lr

000e5ce6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   e5ce6:	7441      	strb	r1, [r0, #17]
   e5ce8:	4770      	bx	lr

000e5cea <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   e5cea:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   e5cec:	7c00      	ldrb	r0, [r0, #16]
   e5cee:	f7ff fa11 	bl	e5114 <HAL_USART_Available_Data_For_Write>
}
   e5cf2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e5cf6:	bd08      	pop	{r3, pc}

000e5cf8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   e5cf8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   e5cfa:	7c00      	ldrb	r0, [r0, #16]
   e5cfc:	f7ff f9ea 	bl	e50d4 <HAL_USART_Available_Data>
}
   e5d00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e5d04:	bd08      	pop	{r3, pc}

000e5d06 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   e5d06:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   e5d08:	7c00      	ldrb	r0, [r0, #16]
   e5d0a:	f7ff f9f3 	bl	e50f4 <HAL_USART_Peek_Data>
}
   e5d0e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   e5d12:	bf28      	it	cs
   e5d14:	f04f 30ff 	movcs.w	r0, #4294967295
   e5d18:	bd08      	pop	{r3, pc}

000e5d1a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   e5d1a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   e5d1c:	7c00      	ldrb	r0, [r0, #16]
   e5d1e:	f7ff f9e1 	bl	e50e4 <HAL_USART_Read_Data>
}
   e5d22:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   e5d26:	bf28      	it	cs
   e5d28:	f04f 30ff 	movcs.w	r0, #4294967295
   e5d2c:	bd08      	pop	{r3, pc}

000e5d2e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   e5d2e:	7c00      	ldrb	r0, [r0, #16]
   e5d30:	f7ff b9e8 	b.w	e5104 <HAL_USART_Flush_Data>

000e5d34 <_ZN11USARTSerialD0Ev>:
   e5d34:	b510      	push	{r4, lr}
   e5d36:	2114      	movs	r1, #20
   e5d38:	4604      	mov	r4, r0
   e5d3a:	f000 fcd8 	bl	e66ee <_ZdlPvj>
   e5d3e:	4620      	mov	r0, r4
   e5d40:	bd10      	pop	{r4, pc}

000e5d42 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   e5d42:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   e5d44:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   e5d46:	4604      	mov	r4, r0
   e5d48:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   e5d4a:	b925      	cbnz	r5, e5d56 <_ZN11USARTSerial5writeEh+0x14>
   e5d4c:	7c00      	ldrb	r0, [r0, #16]
   e5d4e:	f7ff f9e1 	bl	e5114 <HAL_USART_Available_Data_For_Write>
   e5d52:	2800      	cmp	r0, #0
   e5d54:	dd05      	ble.n	e5d62 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   e5d56:	4631      	mov	r1, r6
   e5d58:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   e5d5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   e5d5e:	f7ff b9b1 	b.w	e50c4 <HAL_USART_Write_Data>
  }
  return 0;
}
   e5d62:	4628      	mov	r0, r5
   e5d64:	bd70      	pop	{r4, r5, r6, pc}
	...

000e5d68 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   e5d68:	b510      	push	{r4, lr}
   e5d6a:	4604      	mov	r4, r0
   e5d6c:	4608      	mov	r0, r1
   e5d6e:	4611      	mov	r1, r2
   e5d70:	2200      	movs	r2, #0
   e5d72:	6062      	str	r2, [r4, #4]
   e5d74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   e5d78:	60a2      	str	r2, [r4, #8]
   e5d7a:	4a05      	ldr	r2, [pc, #20]	; (e5d90 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   e5d7c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   e5d7e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   e5d80:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   e5d82:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   e5d84:	461a      	mov	r2, r3
   e5d86:	f7ff f995 	bl	e50b4 <HAL_USART_Init>
}
   e5d8a:	4620      	mov	r0, r4
   e5d8c:	bd10      	pop	{r4, pc}
   e5d8e:	bf00      	nop
   e5d90:	000ea9e4 	.word	0x000ea9e4

000e5d94 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   e5d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   e5d96:	4c19      	ldr	r4, [pc, #100]	; (e5dfc <_Z22__fetch_global_Serial1v+0x68>)
   e5d98:	6825      	ldr	r5, [r4, #0]
   e5d9a:	b94d      	cbnz	r5, e5db0 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   e5d9c:	2084      	movs	r0, #132	; 0x84
   e5d9e:	f7ee f97c 	bl	d409a <_Znwj>
   e5da2:	4606      	mov	r6, r0
   e5da4:	b118      	cbz	r0, e5dae <_Z22__fetch_global_Serial1v+0x1a>
   e5da6:	2284      	movs	r2, #132	; 0x84
   e5da8:	4629      	mov	r1, r5
   e5daa:	f001 f8f6 	bl	e6f9a <memset>
   e5dae:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   e5db0:	4d13      	ldr	r5, [pc, #76]	; (e5e00 <_Z22__fetch_global_Serial1v+0x6c>)
   e5db2:	682e      	ldr	r6, [r5, #0]
   e5db4:	b94e      	cbnz	r6, e5dca <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   e5db6:	2084      	movs	r0, #132	; 0x84
   e5db8:	f7ee f96f 	bl	d409a <_Znwj>
   e5dbc:	4607      	mov	r7, r0
   e5dbe:	b118      	cbz	r0, e5dc8 <_Z22__fetch_global_Serial1v+0x34>
   e5dc0:	2284      	movs	r2, #132	; 0x84
   e5dc2:	4631      	mov	r1, r6
   e5dc4:	f001 f8e9 	bl	e6f9a <memset>
   e5dc8:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   e5dca:	4f0e      	ldr	r7, [pc, #56]	; (e5e04 <_Z22__fetch_global_Serial1v+0x70>)
   e5dcc:	6839      	ldr	r1, [r7, #0]
   e5dce:	f011 0601 	ands.w	r6, r1, #1
   e5dd2:	d111      	bne.n	e5df8 <_Z22__fetch_global_Serial1v+0x64>
   e5dd4:	4638      	mov	r0, r7
   e5dd6:	f7ee f966 	bl	d40a6 <__cxa_guard_acquire>
   e5dda:	b168      	cbz	r0, e5df8 <_Z22__fetch_global_Serial1v+0x64>
   e5ddc:	6822      	ldr	r2, [r4, #0]
   e5dde:	682b      	ldr	r3, [r5, #0]
   e5de0:	4809      	ldr	r0, [pc, #36]	; (e5e08 <_Z22__fetch_global_Serial1v+0x74>)
   e5de2:	4631      	mov	r1, r6
   e5de4:	f7ff ffc0 	bl	e5d68 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   e5de8:	4638      	mov	r0, r7
   e5dea:	f7ee f961 	bl	d40b0 <__cxa_guard_release>
   e5dee:	4a07      	ldr	r2, [pc, #28]	; (e5e0c <_Z22__fetch_global_Serial1v+0x78>)
   e5df0:	4907      	ldr	r1, [pc, #28]	; (e5e10 <_Z22__fetch_global_Serial1v+0x7c>)
   e5df2:	4805      	ldr	r0, [pc, #20]	; (e5e08 <_Z22__fetch_global_Serial1v+0x74>)
   e5df4:	f000 fc76 	bl	e66e4 <__aeabi_atexit>
#endif
	return serial1;
}
   e5df8:	4803      	ldr	r0, [pc, #12]	; (e5e08 <_Z22__fetch_global_Serial1v+0x74>)
   e5dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e5dfc:	2003e538 	.word	0x2003e538
   e5e00:	2003e530 	.word	0x2003e530
   e5e04:	2003e534 	.word	0x2003e534
   e5e08:	2003e51c 	.word	0x2003e51c
   e5e0c:	2003afe0 	.word	0x2003afe0
   e5e10:	000e5ce5 	.word	0x000e5ce5

000e5e14 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   e5e14:	2200      	movs	r2, #0
   e5e16:	4611      	mov	r1, r2
   e5e18:	6840      	ldr	r0, [r0, #4]
   e5e1a:	f7ff ba5f 	b.w	e52dc <network_listening>

000e5e1e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   e5e1e:	2200      	movs	r2, #0
   e5e20:	4611      	mov	r1, r2
   e5e22:	6840      	ldr	r0, [r0, #4]
   e5e24:	f7ff ba6a 	b.w	e52fc <network_get_listen_timeout>

000e5e28 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   e5e28:	2200      	movs	r2, #0
   e5e2a:	6840      	ldr	r0, [r0, #4]
   e5e2c:	f7ff ba5e 	b.w	e52ec <network_set_listen_timeout>

000e5e30 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   e5e30:	2200      	movs	r2, #0
   e5e32:	f081 0101 	eor.w	r1, r1, #1
   e5e36:	6840      	ldr	r0, [r0, #4]
   e5e38:	f7ff ba48 	b.w	e52cc <network_listen>

000e5e3c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   e5e3c:	2300      	movs	r3, #0
   e5e3e:	461a      	mov	r2, r3
   e5e40:	2101      	movs	r1, #1
   e5e42:	6840      	ldr	r0, [r0, #4]
   e5e44:	f7ff ba3a 	b.w	e52bc <network_off>

000e5e48 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   e5e48:	2300      	movs	r3, #0
   e5e4a:	461a      	mov	r2, r3
   e5e4c:	4619      	mov	r1, r3
   e5e4e:	6840      	ldr	r0, [r0, #4]
   e5e50:	f7ff ba2c 	b.w	e52ac <network_on>

000e5e54 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   e5e54:	2200      	movs	r2, #0
   e5e56:	4611      	mov	r1, r2
   e5e58:	6840      	ldr	r0, [r0, #4]
   e5e5a:	f7ff ba1f 	b.w	e529c <network_ready>

000e5e5e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   e5e5e:	2200      	movs	r2, #0
   e5e60:	4611      	mov	r1, r2
   e5e62:	6840      	ldr	r0, [r0, #4]
   e5e64:	f7ff ba0a 	b.w	e527c <network_connecting>

000e5e68 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   e5e68:	2200      	movs	r2, #0
   e5e6a:	2102      	movs	r1, #2
   e5e6c:	6840      	ldr	r0, [r0, #4]
   e5e6e:	f7ff ba0d 	b.w	e528c <network_disconnect>

000e5e72 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   e5e72:	2300      	movs	r3, #0
   e5e74:	461a      	mov	r2, r3
   e5e76:	6840      	ldr	r0, [r0, #4]
   e5e78:	f7ff b9f8 	b.w	e526c <network_connect>

000e5e7c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   e5e7c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e5e7e:	4605      	mov	r5, r0
   e5e80:	b188      	cbz	r0, e5ea6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e5e82:	6804      	ldr	r4, [r0, #0]
   e5e84:	b14c      	cbz	r4, e5e9a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   e5e86:	68a3      	ldr	r3, [r4, #8]
   e5e88:	b11b      	cbz	r3, e5e92 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   e5e8a:	2203      	movs	r2, #3
   e5e8c:	4621      	mov	r1, r4
   e5e8e:	4620      	mov	r0, r4
   e5e90:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e5e92:	2110      	movs	r1, #16
   e5e94:	4620      	mov	r0, r4
   e5e96:	f000 fc2a 	bl	e66ee <_ZdlPvj>
   e5e9a:	4628      	mov	r0, r5
   e5e9c:	2114      	movs	r1, #20
      }
   e5e9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e5ea2:	f000 bc24 	b.w	e66ee <_ZdlPvj>
   e5ea6:	bd38      	pop	{r3, r4, r5, pc}

000e5ea8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   e5ea8:	b110      	cbz	r0, e5eb0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   e5eaa:	6803      	ldr	r3, [r0, #0]
   e5eac:	685b      	ldr	r3, [r3, #4]
   e5eae:	4718      	bx	r3
   e5eb0:	4770      	bx	lr

000e5eb2 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   e5eb2:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   e5eb4:	6803      	ldr	r3, [r0, #0]
   e5eb6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   e5eb8:	b1bb      	cbz	r3, e5eea <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   e5eba:	6858      	ldr	r0, [r3, #4]
   e5ebc:	f7ff f8ba 	bl	e5034 <os_thread_is_current>
   e5ec0:	b978      	cbnz	r0, e5ee2 <_ZN6ThreadD1Ev+0x30>
   e5ec2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   e5ec4:	7c5a      	ldrb	r2, [r3, #17]
   e5ec6:	b912      	cbnz	r2, e5ece <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   e5ec8:	6858      	ldr	r0, [r3, #4]
   e5eca:	f7ff f8bb 	bl	e5044 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   e5ece:	6823      	ldr	r3, [r4, #0]
   e5ed0:	6858      	ldr	r0, [r3, #4]
   e5ed2:	f7ff f8bf 	bl	e5054 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e5ed6:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   e5ed8:	2300      	movs	r3, #0
   e5eda:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   e5edc:	b128      	cbz	r0, e5eea <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   e5ede:	f7ff ffcd 	bl	e5e7c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e5ee2:	6820      	ldr	r0, [r4, #0]
   e5ee4:	b108      	cbz	r0, e5eea <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   e5ee6:	f7ff ffc9 	bl	e5e7c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   e5eea:	4620      	mov	r0, r4
   e5eec:	bd10      	pop	{r4, pc}

000e5eee <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   e5eee:	b538      	push	{r3, r4, r5, lr}
   e5ef0:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e5ef2:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   e5ef6:	b108      	cbz	r0, e5efc <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   e5ef8:	f7ee f8d3 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   e5efc:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   e5f00:	b108      	cbz	r0, e5f06 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   e5f02:	f7ff f8b7 	bl	e5074 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e5f06:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   e5f0a:	b135      	cbz	r5, e5f1a <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e5f0c:	4628      	mov	r0, r5
   e5f0e:	f7ff ffd0 	bl	e5eb2 <_ZN6ThreadD1Ev>
   e5f12:	2104      	movs	r1, #4
   e5f14:	4628      	mov	r0, r5
   e5f16:	f000 fbea 	bl	e66ee <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e5f1a:	6820      	ldr	r0, [r4, #0]
   e5f1c:	b108      	cbz	r0, e5f22 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   e5f1e:	f7ff ffc3 	bl	e5ea8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   e5f22:	4620      	mov	r0, r4
   e5f24:	bd38      	pop	{r3, r4, r5, pc}
	...

000e5f28 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   e5f28:	b510      	push	{r4, lr}
   e5f2a:	4b04      	ldr	r3, [pc, #16]	; (e5f3c <_ZN5spark9MeshClassD1Ev+0x14>)
   e5f2c:	4604      	mov	r4, r0
   e5f2e:	f840 3b08 	str.w	r3, [r0], #8
   e5f32:	f7ff ffdc 	bl	e5eee <_ZN5spark11MeshPublishD1Ev>
   e5f36:	4620      	mov	r0, r4
   e5f38:	bd10      	pop	{r4, pc}
   e5f3a:	bf00      	nop
   e5f3c:	000eaa14 	.word	0x000eaa14

000e5f40 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   e5f40:	b538      	push	{r3, r4, r5, lr}
   e5f42:	4c0e      	ldr	r4, [pc, #56]	; (e5f7c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   e5f44:	4b0e      	ldr	r3, [pc, #56]	; (e5f80 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   e5f46:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   e5f48:	2500      	movs	r5, #0
   e5f4a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   e5f4c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   e5f50:	6063      	str	r3, [r4, #4]
   e5f52:	60a5      	str	r5, [r4, #8]
   e5f54:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   e5f58:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   e5f5c:	f7ff f882 	bl	e5064 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   e5f60:	4b08      	ldr	r3, [pc, #32]	; (e5f84 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   e5f62:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   e5f66:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   e5f6a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   e5f6c:	4620      	mov	r0, r4
   e5f6e:	4a06      	ldr	r2, [pc, #24]	; (e5f88 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   e5f70:	4906      	ldr	r1, [pc, #24]	; (e5f8c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   e5f72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   e5f76:	f000 bbb5 	b.w	e66e4 <__aeabi_atexit>
   e5f7a:	bf00      	nop
   e5f7c:	2003e53c 	.word	0x2003e53c
   e5f80:	000eaafc 	.word	0x000eaafc
   e5f84:	000eaa14 	.word	0x000eaa14
   e5f88:	2003afe0 	.word	0x2003afe0
   e5f8c:	000e5f29 	.word	0x000e5f29

000e5f90 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   e5f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
   e5f92:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   e5f94:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   e5f96:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   e5f9a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   e5f9c:	2201      	movs	r2, #1
   e5f9e:	f04f 33ff 	mov.w	r3, #4294967295
   e5fa2:	4621      	mov	r1, r4
   e5fa4:	47a8      	blx	r5
}
   e5fa6:	b003      	add	sp, #12
   e5fa8:	bd30      	pop	{r4, r5, pc}

000e5faa <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   e5faa:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   e5fac:	6803      	ldr	r3, [r0, #0]
   e5fae:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   e5fb0:	f04f 33ff 	mov.w	r3, #4294967295
   e5fb4:	46a4      	mov	ip, r4
}
   e5fb6:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   e5fba:	4760      	bx	ip

000e5fbc <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   e5fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   e5fbe:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   e5fc0:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   e5fc2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   e5fc6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   e5fc8:	4621      	mov	r1, r4
   e5fca:	4613      	mov	r3, r2
   e5fcc:	2201      	movs	r2, #1
   e5fce:	47a8      	blx	r5
}
   e5fd0:	b003      	add	sp, #12
   e5fd2:	bd30      	pop	{r4, r5, pc}

000e5fd4 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   e5fd4:	4770      	bx	lr

000e5fd6 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   e5fd6:	b538      	push	{r3, r4, r5, lr}
   e5fd8:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   e5fda:	681a      	ldr	r2, [r3, #0]
   e5fdc:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   e5fde:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   e5fe0:	da05      	bge.n	e5fee <_ZN9TCPClient9connectedEv+0x18>
   e5fe2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e5fe6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   e5fea:	429a      	cmp	r2, r3
   e5fec:	d001      	beq.n	e5ff2 <_ZN9TCPClient9connectedEv+0x1c>
   e5fee:	2501      	movs	r5, #1
   e5ff0:	e00b      	b.n	e600a <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   e5ff2:	6803      	ldr	r3, [r0, #0]
   e5ff4:	691b      	ldr	r3, [r3, #16]
   e5ff6:	4798      	blx	r3
   e5ff8:	2800      	cmp	r0, #0
   e5ffa:	bf14      	ite	ne
   e5ffc:	2501      	movne	r5, #1
   e5ffe:	2500      	moveq	r5, #0
        if (!rv) {
   e6000:	d103      	bne.n	e600a <_ZN9TCPClient9connectedEv+0x34>
            stop();
   e6002:	6823      	ldr	r3, [r4, #0]
   e6004:	4620      	mov	r0, r4
   e6006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   e6008:	4798      	blx	r3
        }
    }
    return rv;
}
   e600a:	4628      	mov	r0, r5
   e600c:	bd38      	pop	{r3, r4, r5, pc}

000e600e <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   e600e:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   e6010:	6818      	ldr	r0, [r3, #0]
}
   e6012:	43c0      	mvns	r0, r0
   e6014:	0fc0      	lsrs	r0, r0, #31
   e6016:	4770      	bx	lr

000e6018 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   e6018:	4770      	bx	lr

000e601a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   e601a:	2000      	movs	r0, #0
   e601c:	4770      	bx	lr

000e601e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   e601e:	b510      	push	{r4, lr}
   e6020:	2114      	movs	r1, #20
   e6022:	4604      	mov	r4, r0
   e6024:	f000 fb63 	bl	e66ee <_ZdlPvj>
   e6028:	4620      	mov	r0, r4
   e602a:	bd10      	pop	{r4, pc}

000e602c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   e602c:	f7ee b837 	b.w	d409e <_ZdlPv>

000e6030 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   e6030:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   e6032:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   e6034:	2200      	movs	r2, #0
   e6036:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   e6038:	9202      	str	r2, [sp, #8]
   e603a:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   e603c:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   e603e:	4604      	mov	r4, r0
   e6040:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   e6042:	d008      	beq.n	e6056 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   e6044:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   e6048:	fbb3 f1f2 	udiv	r1, r3, r2
   e604c:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   e604e:	fb02 3111 	mls	r1, r2, r1, r3
   e6052:	434a      	muls	r2, r1
   e6054:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   e6056:	6960      	ldr	r0, [r4, #20]
   e6058:	2308      	movs	r3, #8
   e605a:	9300      	str	r3, [sp, #0]
   e605c:	f241 0205 	movw	r2, #4101	; 0x1005
   e6060:	446b      	add	r3, sp
   e6062:	f640 71ff 	movw	r1, #4095	; 0xfff
   e6066:	6800      	ldr	r0, [r0, #0]
   e6068:	f7ff f85c 	bl	e5124 <sock_setsockopt>
    if (ret < 0) {
   e606c:	2800      	cmp	r0, #0
   e606e:	db08      	blt.n	e6082 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   e6070:	6960      	ldr	r0, [r4, #20]
   e6072:	2300      	movs	r3, #0
   e6074:	4632      	mov	r2, r6
   e6076:	4629      	mov	r1, r5
   e6078:	6800      	ldr	r0, [r0, #0]
   e607a:	f7ff f873 	bl	e5164 <sock_send>
    if (ret < 0) {
   e607e:	2800      	cmp	r0, #0
   e6080:	da04      	bge.n	e608c <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   e6082:	f7ff f9ab 	bl	e53dc <__errno>
   e6086:	6803      	ldr	r3, [r0, #0]
   e6088:	6063      	str	r3, [r4, #4]
   e608a:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   e608c:	b004      	add	sp, #16
   e608e:	bd70      	pop	{r4, r5, r6, pc}

000e6090 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   e6090:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   e6092:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   e6094:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   e6096:	689b      	ldr	r3, [r3, #8]
   e6098:	4798      	blx	r3
          if (--_M_weak_count == 0)
   e609a:	68a3      	ldr	r3, [r4, #8]
   e609c:	3b01      	subs	r3, #1
   e609e:	60a3      	str	r3, [r4, #8]
   e60a0:	b92b      	cbnz	r3, e60ae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   e60a2:	6823      	ldr	r3, [r4, #0]
   e60a4:	4620      	mov	r0, r4
   e60a6:	68db      	ldr	r3, [r3, #12]
        }
    }
   e60a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   e60ac:	4718      	bx	r3
   e60ae:	bd10      	pop	{r4, pc}

000e60b0 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   e60b0:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   e60b2:	4604      	mov	r4, r0
   e60b4:	694d      	ldr	r5, [r1, #20]
   e60b6:	4b05      	ldr	r3, [pc, #20]	; (e60cc <_ZN9TCPClient8remoteIPEv+0x1c>)
   e60b8:	f844 3b04 	str.w	r3, [r4], #4
   e60bc:	358c      	adds	r5, #140	; 0x8c
   e60be:	4606      	mov	r6, r0
   e60c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e60c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e60c4:	682b      	ldr	r3, [r5, #0]
   e60c6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   e60c8:	4630      	mov	r0, r6
   e60ca:	bd70      	pop	{r4, r5, r6, pc}
   e60cc:	000ea9a0 	.word	0x000ea9a0

000e60d0 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   e60d0:	b510      	push	{r4, lr}
   e60d2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   e60d4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e60d8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   e60dc:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   e60de:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   e60e0:	d005      	beq.n	e60ee <_ZN9TCPClient4peekEv+0x1e>
   e60e2:	6962      	ldr	r2, [r4, #20]
   e60e4:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   e60e8:	4413      	add	r3, r2
   e60ea:	7918      	ldrb	r0, [r3, #4]
   e60ec:	bd10      	pop	{r4, pc}
   e60ee:	6803      	ldr	r3, [r0, #0]
   e60f0:	691b      	ldr	r3, [r3, #16]
   e60f2:	4798      	blx	r3
   e60f4:	2800      	cmp	r0, #0
   e60f6:	d1f4      	bne.n	e60e2 <_ZN9TCPClient4peekEv+0x12>
   e60f8:	f04f 30ff 	mov.w	r0, #4294967295
}
   e60fc:	bd10      	pop	{r4, pc}

000e60fe <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   e60fe:	b510      	push	{r4, lr}
   e6100:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   e6102:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e6106:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   e610a:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   e610c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   e610e:	d008      	beq.n	e6122 <_ZN9TCPClient4readEv+0x24>
   e6110:	6962      	ldr	r2, [r4, #20]
   e6112:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   e6116:	1c59      	adds	r1, r3, #1
   e6118:	4413      	add	r3, r2
   e611a:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   e611e:	7918      	ldrb	r0, [r3, #4]
   e6120:	bd10      	pop	{r4, pc}
   e6122:	6803      	ldr	r3, [r0, #0]
   e6124:	691b      	ldr	r3, [r3, #16]
   e6126:	4798      	blx	r3
   e6128:	2800      	cmp	r0, #0
   e612a:	d1f1      	bne.n	e6110 <_ZN9TCPClient4readEv+0x12>
   e612c:	f04f 30ff 	mov.w	r0, #4294967295
}
   e6130:	bd10      	pop	{r4, pc}

000e6132 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   e6132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e6134:	6943      	ldr	r3, [r0, #20]
   e6136:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   e6138:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e613c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   e6140:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   e6142:	4605      	mov	r5, r0
   e6144:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   e6146:	d106      	bne.n	e6156 <_ZN9TCPClient4readEPhj+0x24>
   e6148:	6803      	ldr	r3, [r0, #0]
   e614a:	691b      	ldr	r3, [r3, #16]
   e614c:	4798      	blx	r3
   e614e:	b910      	cbnz	r0, e6156 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   e6150:	f04f 34ff 	mov.w	r4, #4294967295
   e6154:	e014      	b.n	e6180 <_ZN9TCPClient4readEPhj+0x4e>
   e6156:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   e6158:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   e615c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   e6160:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   e6162:	42bc      	cmp	r4, r7
   e6164:	bf28      	it	cs
   e6166:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   e6168:	4419      	add	r1, r3
   e616a:	4622      	mov	r2, r4
   e616c:	3104      	adds	r1, #4
   e616e:	4630      	mov	r0, r6
   e6170:	f000 feed 	bl	e6f4e <memcpy>
   e6174:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   e6176:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   e617a:	4423      	add	r3, r4
   e617c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   e6180:	4620      	mov	r0, r4
   e6182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e6184 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   e6184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e6188:	4698      	mov	r8, r3
    stop();
   e618a:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   e618c:	b093      	sub	sp, #76	; 0x4c
    stop();
   e618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   e6190:	460d      	mov	r5, r1
   e6192:	4606      	mov	r6, r0
   e6194:	4617      	mov	r7, r2
    stop();
   e6196:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   e6198:	ab12      	add	r3, sp, #72	; 0x48
   e619a:	2400      	movs	r4, #0
   e619c:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   e61a0:	4622      	mov	r2, r4
   e61a2:	4621      	mov	r1, r4
   e61a4:	4628      	mov	r0, r5
   e61a6:	f7fe ff0d 	bl	e4fc4 <netdb_getaddrinfo>
   e61aa:	4681      	mov	r9, r0
   e61ac:	2800      	cmp	r0, #0
   e61ae:	d13d      	bne.n	e622c <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   e61b0:	9b00      	ldr	r3, [sp, #0]
   e61b2:	2b00      	cmp	r3, #0
   e61b4:	d056      	beq.n	e6264 <_ZN9TCPClient7connectEPKctm+0xe0>
   e61b6:	695b      	ldr	r3, [r3, #20]
   e61b8:	2b00      	cmp	r3, #0
   e61ba:	d053      	beq.n	e6264 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   e61bc:	a806      	add	r0, sp, #24
   e61be:	f7ff fcbb 	bl	e5b38 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   e61c2:	9b00      	ldr	r3, [sp, #0]
   e61c4:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   e61c6:	7863      	ldrb	r3, [r4, #1]
   e61c8:	2b02      	cmp	r3, #2
   e61ca:	d101      	bne.n	e61d0 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   e61cc:	1d21      	adds	r1, r4, #4
   e61ce:	e013      	b.n	e61f8 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   e61d0:	2b0a      	cmp	r3, #10
   e61d2:	d114      	bne.n	e61fe <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   e61d4:	2211      	movs	r2, #17
   e61d6:	4649      	mov	r1, r9
   e61d8:	a801      	add	r0, sp, #4
   e61da:	f000 fede 	bl	e6f9a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   e61de:	68a3      	ldr	r3, [r4, #8]
   e61e0:	bb33      	cbnz	r3, e6230 <_ZN9TCPClient7connectEPKctm+0xac>
   e61e2:	68e3      	ldr	r3, [r4, #12]
   e61e4:	bb23      	cbnz	r3, e6230 <_ZN9TCPClient7connectEPKctm+0xac>
   e61e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   e61ea:	6925      	ldr	r5, [r4, #16]
   e61ec:	f7fe ff52 	bl	e5094 <inet_htonl>
   e61f0:	4285      	cmp	r5, r0
   e61f2:	d11d      	bne.n	e6230 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   e61f4:	f104 0114 	add.w	r1, r4, #20
   e61f8:	a806      	add	r0, sp, #24
   e61fa:	f7ff fce0 	bl	e5bbe <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   e61fe:	a806      	add	r0, sp, #24
   e6200:	f7ff fcba 	bl	e5b78 <_ZNK9IPAddresscvbEv>
        if (addr) {
   e6204:	2800      	cmp	r0, #0
   e6206:	d02d      	beq.n	e6264 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   e6208:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   e620a:	ad07      	add	r5, sp, #28
   e620c:	f8d3 9020 	ldr.w	r9, [r3, #32]
   e6210:	4b18      	ldr	r3, [pc, #96]	; (e6274 <_ZN9TCPClient7connectEPKctm+0xf0>)
   e6212:	930c      	str	r3, [sp, #48]	; 0x30
   e6214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e6216:	ac0d      	add	r4, sp, #52	; 0x34
   e6218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e621a:	682b      	ldr	r3, [r5, #0]
   e621c:	7023      	strb	r3, [r4, #0]
   e621e:	463a      	mov	r2, r7
   e6220:	4643      	mov	r3, r8
   e6222:	a90c      	add	r1, sp, #48	; 0x30
   e6224:	4630      	mov	r0, r6
   e6226:	47c8      	blx	r9
   e6228:	4681      	mov	r9, r0
   e622a:	e01b      	b.n	e6264 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   e622c:	46a1      	mov	r9, r4
   e622e:	e019      	b.n	e6264 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   e6230:	f104 0308 	add.w	r3, r4, #8
   e6234:	ad01      	add	r5, sp, #4
   e6236:	3418      	adds	r4, #24
   e6238:	6818      	ldr	r0, [r3, #0]
   e623a:	6859      	ldr	r1, [r3, #4]
   e623c:	462a      	mov	r2, r5
   e623e:	c203      	stmia	r2!, {r0, r1}
   e6240:	3308      	adds	r3, #8
   e6242:	42a3      	cmp	r3, r4
   e6244:	4615      	mov	r5, r2
   e6246:	d1f7      	bne.n	e6238 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   e6248:	2306      	movs	r3, #6
            addr = IPAddress(a);
   e624a:	a901      	add	r1, sp, #4
   e624c:	a80c      	add	r0, sp, #48	; 0x30
   e624e:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   e6250:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   e6254:	f7ff fc7e 	bl	e5b54 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   e6258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e625a:	ac07      	add	r4, sp, #28
   e625c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e625e:	682b      	ldr	r3, [r5, #0]
   e6260:	7023      	strb	r3, [r4, #0]
   e6262:	e7cc      	b.n	e61fe <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   e6264:	9800      	ldr	r0, [sp, #0]
   e6266:	f7fe fea5 	bl	e4fb4 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   e626a:	4648      	mov	r0, r9
   e626c:	b013      	add	sp, #76	; 0x4c
   e626e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e6272:	bf00      	nop
   e6274:	000ea9a0 	.word	0x000ea9a0

000e6278 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   e6278:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   e627a:	2300      	movs	r3, #0
   e627c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   e6280:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   e6282:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   e6286:	4770      	bx	lr

000e6288 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   e6288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e628c:	461e      	mov	r6, r3
    stop();
   e628e:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   e6290:	460c      	mov	r4, r1
   e6292:	b08a      	sub	sp, #40	; 0x28
    stop();
   e6294:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   e6296:	4605      	mov	r5, r0
   e6298:	4617      	mov	r7, r2
    stop();
   e629a:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   e629c:	7d23      	ldrb	r3, [r4, #20]
   e629e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   e62a2:	2b04      	cmp	r3, #4
   e62a4:	bf0c      	ite	eq
   e62a6:	2002      	moveq	r0, #2
   e62a8:	200a      	movne	r0, #10
   e62aa:	2206      	movs	r2, #6
   e62ac:	2101      	movs	r1, #1
   e62ae:	f7fe ff61 	bl	e5174 <sock_socket>
   e62b2:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   e62b6:	696b      	ldr	r3, [r5, #20]
   e62b8:	681b      	ldr	r3, [r3, #0]
   e62ba:	2b00      	cmp	r3, #0
   e62bc:	db18      	blt.n	e62f0 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   e62be:	4628      	mov	r0, r5
   e62c0:	f7ff ffda 	bl	e6278 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   e62c4:	b1d6      	cbz	r6, e62fc <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   e62c6:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   e62c8:	a903      	add	r1, sp, #12
   e62ca:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   e62cc:	9303      	str	r3, [sp, #12]
   e62ce:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   e62d2:	f7fe fe87 	bl	e4fe4 <if_index_to_name>
   e62d6:	b958      	cbnz	r0, e62f0 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   e62d8:	6968      	ldr	r0, [r5, #20]
   e62da:	2306      	movs	r3, #6
   e62dc:	9300      	str	r3, [sp, #0]
   e62de:	f241 020b 	movw	r2, #4107	; 0x100b
   e62e2:	ab03      	add	r3, sp, #12
   e62e4:	f640 71ff 	movw	r1, #4095	; 0xfff
   e62e8:	6800      	ldr	r0, [r0, #0]
   e62ea:	f7fe ff1b 	bl	e5124 <sock_setsockopt>
   e62ee:	b128      	cbz	r0, e62fc <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   e62f0:	682b      	ldr	r3, [r5, #0]
   e62f2:	4628      	mov	r0, r5
   e62f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   e62f6:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   e62f8:	4798      	blx	r3
   e62fa:	e03b      	b.n	e6374 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   e62fc:	261c      	movs	r6, #28
   e62fe:	4632      	mov	r2, r6
   e6300:	2100      	movs	r1, #0
   e6302:	a803      	add	r0, sp, #12
   e6304:	f000 fe49 	bl	e6f9a <memset>
    if (ip.version() == 4) {
   e6308:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   e630a:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   e630e:	2b04      	cmp	r3, #4
   e6310:	d10c      	bne.n	e632c <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   e6312:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   e6314:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   e6316:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   e631a:	f7fe fec3 	bl	e50a4 <inet_htons>
   e631e:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   e6322:	6860      	ldr	r0, [r4, #4]
   e6324:	f7fe feb6 	bl	e5094 <inet_htonl>
   e6328:	9004      	str	r0, [sp, #16]
   e632a:	e013      	b.n	e6354 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   e632c:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   e632e:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   e6330:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   e6334:	f7fe feb6 	bl	e50a4 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   e6338:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   e633a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   e633e:	1d23      	adds	r3, r4, #4
   e6340:	f104 0714 	add.w	r7, r4, #20
   e6344:	6818      	ldr	r0, [r3, #0]
   e6346:	6859      	ldr	r1, [r3, #4]
   e6348:	4632      	mov	r2, r6
   e634a:	c203      	stmia	r2!, {r0, r1}
   e634c:	3308      	adds	r3, #8
   e634e:	42bb      	cmp	r3, r7
   e6350:	4616      	mov	r6, r2
   e6352:	d1f7      	bne.n	e6344 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   e6354:	696b      	ldr	r3, [r5, #20]
   e6356:	221c      	movs	r2, #28
   e6358:	a903      	add	r1, sp, #12
   e635a:	6818      	ldr	r0, [r3, #0]
   e635c:	f7fe fef2 	bl	e5144 <sock_connect>
   e6360:	2800      	cmp	r0, #0
   e6362:	d1c5      	bne.n	e62f0 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   e6364:	3404      	adds	r4, #4
   e6366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   e6368:	696d      	ldr	r5, [r5, #20]
   e636a:	358c      	adds	r5, #140	; 0x8c
   e636c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   e636e:	6823      	ldr	r3, [r4, #0]
   e6370:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   e6372:	2401      	movs	r4, #1
}
   e6374:	4620      	mov	r0, r4
   e6376:	b00a      	add	sp, #40	; 0x28
   e6378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e637c <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   e637c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   e637e:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   e6380:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   e6382:	6818      	ldr	r0, [r3, #0]
   e6384:	2800      	cmp	r0, #0
   e6386:	db01      	blt.n	e638c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   e6388:	f7fe fed4 	bl	e5134 <sock_close>
   e638c:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   e638e:	f04f 32ff 	mov.w	r2, #4294967295
   e6392:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   e6394:	6960      	ldr	r0, [r4, #20]
   e6396:	2211      	movs	r2, #17
   e6398:	2100      	movs	r1, #0
   e639a:	308c      	adds	r0, #140	; 0x8c
   e639c:	f000 fdfd 	bl	e6f9a <memset>
    d_->remoteIP.clear();
    flush_buffer();
   e63a0:	4620      	mov	r0, r4
}
   e63a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   e63a6:	f7ff bf67 	b.w	e6278 <_ZN9TCPClient12flush_bufferEv>
	...

000e63ac <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   e63ac:	b530      	push	{r4, r5, lr}
   e63ae:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   e63b0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   e63b4:	b08b      	sub	sp, #44	; 0x2c
   e63b6:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   e63b8:	b11b      	cbz	r3, e63c2 <_ZN9TCPClient9availableEv+0x16>
   e63ba:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   e63be:	429a      	cmp	r2, r3
   e63c0:	d040      	beq.n	e6444 <_ZN9TCPClient9availableEv+0x98>
   e63c2:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   e63c4:	6818      	ldr	r0, [r3, #0]
   e63c6:	2800      	cmp	r0, #0
   e63c8:	db3f      	blt.n	e644a <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   e63ca:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   e63ce:	2d7f      	cmp	r5, #127	; 0x7f
   e63d0:	d83b      	bhi.n	e644a <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   e63d2:	1d19      	adds	r1, r3, #4
   e63d4:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   e63d8:	2308      	movs	r3, #8
   e63da:	4429      	add	r1, r5
   e63dc:	f7fe feba 	bl	e5154 <sock_recv>
            if (ret > 0) {
   e63e0:	2800      	cmp	r0, #0
   e63e2:	dd0c      	ble.n	e63fe <_ZN9TCPClient9availableEv+0x52>
   e63e4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   e63e6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e63ea:	b90a      	cbnz	r2, e63f0 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   e63ec:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   e63f0:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   e63f2:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   e63f6:	4418      	add	r0, r3
   e63f8:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   e63fc:	e025      	b.n	e644a <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   e63fe:	f7fe ffed 	bl	e53dc <__errno>
   e6402:	6803      	ldr	r3, [r0, #0]
   e6404:	2b0b      	cmp	r3, #11
   e6406:	d020      	beq.n	e644a <_ZN9TCPClient9availableEv+0x9e>
   e6408:	f7fe ffe8 	bl	e53dc <__errno>
   e640c:	6803      	ldr	r3, [r0, #0]
   e640e:	2b0b      	cmp	r3, #11
   e6410:	d01b      	beq.n	e644a <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   e6412:	2320      	movs	r3, #32
   e6414:	2500      	movs	r5, #0
   e6416:	9302      	str	r3, [sp, #8]
   e6418:	9503      	str	r5, [sp, #12]
   e641a:	f7fe ffdf 	bl	e53dc <__errno>
   e641e:	6803      	ldr	r3, [r0, #0]
   e6420:	9301      	str	r3, [sp, #4]
   e6422:	4b0e      	ldr	r3, [pc, #56]	; (e645c <_ZN9TCPClient9availableEv+0xb0>)
   e6424:	9300      	str	r3, [sp, #0]
   e6426:	aa02      	add	r2, sp, #8
   e6428:	462b      	mov	r3, r5
   e642a:	490d      	ldr	r1, [pc, #52]	; (e6460 <_ZN9TCPClient9availableEv+0xb4>)
   e642c:	2032      	movs	r0, #50	; 0x32
   e642e:	f7fe fee1 	bl	e51f4 <log_message>
                    sock_close(d_->sock);
   e6432:	6963      	ldr	r3, [r4, #20]
   e6434:	6818      	ldr	r0, [r3, #0]
   e6436:	f7fe fe7d 	bl	e5134 <sock_close>
   e643a:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   e643c:	f04f 32ff 	mov.w	r2, #4294967295
   e6440:	601a      	str	r2, [r3, #0]
   e6442:	e002      	b.n	e644a <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   e6444:	f7ff ff18 	bl	e6278 <_ZN9TCPClient12flush_bufferEv>
   e6448:	e7bb      	b.n	e63c2 <_ZN9TCPClient9availableEv+0x16>
   e644a:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   e644c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   e6450:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   e6454:	1a18      	subs	r0, r3, r0
}
   e6456:	b00b      	add	sp, #44	; 0x2c
   e6458:	bd30      	pop	{r4, r5, pc}
   e645a:	bf00      	nop
   e645c:	000eaaaf 	.word	0x000eaaaf
   e6460:	000eaaa8 	.word	0x000eaaa8

000e6464 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   e6464:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   e6466:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   e6468:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   e646a:	6001      	str	r1, [r0, #0]
   e646c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   e6470:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   e6474:	3088      	adds	r0, #136	; 0x88
   e6476:	f7ff fb5f 	bl	e5b38 <_ZN9IPAddressC1Ev>
}
   e647a:	4620      	mov	r0, r4
   e647c:	bd10      	pop	{r4, pc}
	...

000e6480 <_ZN9TCPClientC1Ei>:
   e6480:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   e6484:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   e6486:	2300      	movs	r3, #0
   e6488:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   e648a:	4a14      	ldr	r2, [pc, #80]	; (e64dc <_ZN9TCPClientC1Ei+0x5c>)
   e648c:	6043      	str	r3, [r0, #4]
   e648e:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   e6490:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   e6492:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   e6494:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   e6496:	20a0      	movs	r0, #160	; 0xa0
   e6498:	460e      	mov	r6, r1
   e649a:	f7ed fdfe 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   e649e:	4605      	mov	r5, r0
   e64a0:	b110      	cbz	r0, e64a8 <_ZN9TCPClientC1Ei+0x28>
   e64a2:	4631      	mov	r1, r6
   e64a4:	f7ff ffde 	bl	e6464 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   e64a8:	2014      	movs	r0, #20
   e64aa:	f7ed fdf6 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   e64ae:	4603      	mov	r3, r0
   e64b0:	b128      	cbz	r0, e64be <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   e64b2:	2201      	movs	r2, #1
   e64b4:	6042      	str	r2, [r0, #4]
   e64b6:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   e64b8:	4a09      	ldr	r2, [pc, #36]	; (e64e0 <_ZN9TCPClientC1Ei+0x60>)
   e64ba:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   e64bc:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   e64be:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   e64c0:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   e64c2:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   e64c4:	b128      	cbz	r0, e64d2 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   e64c6:	6843      	ldr	r3, [r0, #4]
   e64c8:	3b01      	subs	r3, #1
   e64ca:	6043      	str	r3, [r0, #4]
   e64cc:	b90b      	cbnz	r3, e64d2 <_ZN9TCPClientC1Ei+0x52>
   e64ce:	f7ff fddf 	bl	e6090 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   e64d2:	4620      	mov	r0, r4
   e64d4:	f7ff fed0 	bl	e6278 <_ZN9TCPClient12flush_bufferEv>
}
   e64d8:	4620      	mov	r0, r4
   e64da:	bd70      	pop	{r4, r5, r6, pc}
   e64dc:	000eaa64 	.word	0x000eaa64
   e64e0:	000eaa48 	.word	0x000eaa48

000e64e4 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   e64e4:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   e64e6:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   e64ea:	4604      	mov	r4, r0
        : TCPClient(-1) {
   e64ec:	f7ff ffc8 	bl	e6480 <_ZN9TCPClientC1Ei>
}
   e64f0:	4620      	mov	r0, r4
   e64f2:	bd10      	pop	{r4, pc}

000e64f4 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   e64f4:	b510      	push	{r4, lr}
   e64f6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   e64f8:	6800      	ldr	r0, [r0, #0]
   e64fa:	2800      	cmp	r0, #0
   e64fc:	db01      	blt.n	e6502 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   e64fe:	f7fe fe19 	bl	e5134 <sock_close>
    }
}
   e6502:	4620      	mov	r0, r4
   e6504:	bd10      	pop	{r4, pc}

000e6506 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   e6506:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   e6508:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   e650a:	4620      	mov	r0, r4
   e650c:	f7ff fff2 	bl	e64f4 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   e6510:	b124      	cbz	r4, e651c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   e6512:	4620      	mov	r0, r4
   e6514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   e6518:	f7ed bdc1 	b.w	d409e <_ZdlPv>
   e651c:	bd10      	pop	{r4, pc}

000e651e <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   e651e:	2200      	movs	r2, #0
   e6520:	4611      	mov	r1, r2
   e6522:	6840      	ldr	r0, [r0, #4]
   e6524:	f7fe beba 	b.w	e529c <network_ready>

000e6528 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   e6528:	2200      	movs	r2, #0
   e652a:	4611      	mov	r1, r2
   e652c:	6840      	ldr	r0, [r0, #4]
   e652e:	f7fe bed5 	b.w	e52dc <network_listening>

000e6532 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   e6532:	2200      	movs	r2, #0
   e6534:	4611      	mov	r1, r2
   e6536:	6840      	ldr	r0, [r0, #4]
   e6538:	f7fe bee0 	b.w	e52fc <network_get_listen_timeout>

000e653c <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   e653c:	2200      	movs	r2, #0
   e653e:	6840      	ldr	r0, [r0, #4]
   e6540:	f7fe bed4 	b.w	e52ec <network_set_listen_timeout>

000e6544 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   e6544:	2200      	movs	r2, #0
   e6546:	f081 0101 	eor.w	r1, r1, #1
   e654a:	6840      	ldr	r0, [r0, #4]
   e654c:	f7fe bebe 	b.w	e52cc <network_listen>

000e6550 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   e6550:	2300      	movs	r3, #0
   e6552:	461a      	mov	r2, r3
   e6554:	4619      	mov	r1, r3
   e6556:	6840      	ldr	r0, [r0, #4]
   e6558:	f7fe beb0 	b.w	e52bc <network_off>

000e655c <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   e655c:	2300      	movs	r3, #0
   e655e:	461a      	mov	r2, r3
   e6560:	4619      	mov	r1, r3
   e6562:	6840      	ldr	r0, [r0, #4]
   e6564:	f7fe bea2 	b.w	e52ac <network_on>

000e6568 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   e6568:	2200      	movs	r2, #0
   e656a:	4611      	mov	r1, r2
   e656c:	6840      	ldr	r0, [r0, #4]
   e656e:	f7fe be85 	b.w	e527c <network_connecting>

000e6572 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   e6572:	2200      	movs	r2, #0
   e6574:	2102      	movs	r1, #2
   e6576:	6840      	ldr	r0, [r0, #4]
   e6578:	f7fe be88 	b.w	e528c <network_disconnect>

000e657c <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   e657c:	2300      	movs	r3, #0
   e657e:	461a      	mov	r2, r3
   e6580:	6840      	ldr	r0, [r0, #4]
   e6582:	f7fe be73 	b.w	e526c <network_connect>
	...

000e6588 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   e6588:	4b02      	ldr	r3, [pc, #8]	; (e6594 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   e658a:	2204      	movs	r2, #4
   e658c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   e658e:	4a02      	ldr	r2, [pc, #8]	; (e6598 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   e6590:	601a      	str	r2, [r3, #0]
   e6592:	4770      	bx	lr
   e6594:	2003e710 	.word	0x2003e710
   e6598:	000eaac8 	.word	0x000eaac8

000e659c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   e659c:	2300      	movs	r3, #0
   e659e:	461a      	mov	r2, r3
   e65a0:	6840      	ldr	r0, [r0, #4]
   e65a2:	f7fe be63 	b.w	e526c <network_connect>

000e65a6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   e65a6:	2200      	movs	r2, #0
   e65a8:	2102      	movs	r1, #2
   e65aa:	6840      	ldr	r0, [r0, #4]
   e65ac:	f7fe be6e 	b.w	e528c <network_disconnect>

000e65b0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   e65b0:	2200      	movs	r2, #0
   e65b2:	4611      	mov	r1, r2
   e65b4:	6840      	ldr	r0, [r0, #4]
   e65b6:	f7fe be61 	b.w	e527c <network_connecting>

000e65ba <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   e65ba:	2200      	movs	r2, #0
   e65bc:	4611      	mov	r1, r2
   e65be:	6840      	ldr	r0, [r0, #4]
   e65c0:	f7fe be6c 	b.w	e529c <network_ready>

000e65c4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   e65c4:	2300      	movs	r3, #0
   e65c6:	461a      	mov	r2, r3
   e65c8:	4619      	mov	r1, r3
   e65ca:	6840      	ldr	r0, [r0, #4]
   e65cc:	f7fe be6e 	b.w	e52ac <network_on>

000e65d0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   e65d0:	2300      	movs	r3, #0
   e65d2:	461a      	mov	r2, r3
   e65d4:	4619      	mov	r1, r3
   e65d6:	6840      	ldr	r0, [r0, #4]
   e65d8:	f7fe be70 	b.w	e52bc <network_off>

000e65dc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   e65dc:	2200      	movs	r2, #0
   e65de:	f081 0101 	eor.w	r1, r1, #1
   e65e2:	6840      	ldr	r0, [r0, #4]
   e65e4:	f7fe be72 	b.w	e52cc <network_listen>

000e65e8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   e65e8:	2200      	movs	r2, #0
   e65ea:	6840      	ldr	r0, [r0, #4]
   e65ec:	f7fe be7e 	b.w	e52ec <network_set_listen_timeout>

000e65f0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   e65f0:	2200      	movs	r2, #0
   e65f2:	4611      	mov	r1, r2
   e65f4:	6840      	ldr	r0, [r0, #4]
   e65f6:	f7fe be81 	b.w	e52fc <network_get_listen_timeout>

000e65fa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   e65fa:	2200      	movs	r2, #0
   e65fc:	4611      	mov	r1, r2
   e65fe:	6840      	ldr	r0, [r0, #4]
   e6600:	f7fe be6c 	b.w	e52dc <network_listening>

000e6604 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   e6604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   e6608:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   e660a:	b095      	sub	sp, #84	; 0x54
   e660c:	4616      	mov	r6, r2
   e660e:	460d      	mov	r5, r1
   e6610:	4607      	mov	r7, r0
    IPAddress addr;
   e6612:	f7ff fa91 	bl	e5b38 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   e6616:	4621      	mov	r1, r4
   e6618:	2220      	movs	r2, #32
   e661a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   e661c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   e661e:	f000 fcbc 	bl	e6f9a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   e6622:	2340      	movs	r3, #64	; 0x40
   e6624:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   e6626:	4621      	mov	r1, r4
   e6628:	466b      	mov	r3, sp
   e662a:	aa0c      	add	r2, sp, #48	; 0x30
   e662c:	4630      	mov	r0, r6
   e662e:	f7fe fcc9 	bl	e4fc4 <netdb_getaddrinfo>
    if (!r) {
   e6632:	4604      	mov	r4, r0
   e6634:	2800      	cmp	r0, #0
   e6636:	d144      	bne.n	e66c2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   e6638:	4602      	mov	r2, r0
   e663a:	2101      	movs	r1, #1
   e663c:	6868      	ldr	r0, [r5, #4]
   e663e:	f7fe fe2d 	bl	e529c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e6642:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   e6644:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e6646:	4622      	mov	r2, r4
   e6648:	6868      	ldr	r0, [r5, #4]
   e664a:	f7fe fe27 	bl	e529c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e664e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e6650:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   e6652:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e6654:	2e00      	cmp	r6, #0
   e6656:	d034      	beq.n	e66c2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   e6658:	2900      	cmp	r1, #0
   e665a:	d132      	bne.n	e66c2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   e665c:	6873      	ldr	r3, [r6, #4]
   e665e:	2b02      	cmp	r3, #2
   e6660:	d002      	beq.n	e6668 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   e6662:	2b0a      	cmp	r3, #10
   e6664:	d009      	beq.n	e667a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   e6666:	e02a      	b.n	e66be <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   e6668:	f1b8 0f00 	cmp.w	r8, #0
   e666c:	d027      	beq.n	e66be <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   e666e:	6971      	ldr	r1, [r6, #20]
   e6670:	4638      	mov	r0, r7
   e6672:	3104      	adds	r1, #4
   e6674:	f7ff faa3 	bl	e5bbe <_ZN9IPAddressaSEPKh>
   e6678:	e020      	b.n	e66bc <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   e667a:	f1b9 0f00 	cmp.w	r9, #0
   e667e:	d01e      	beq.n	e66be <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   e6680:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   e6682:	2211      	movs	r2, #17
   e6684:	a801      	add	r0, sp, #4
   e6686:	f000 fc88 	bl	e6f9a <memset>
                    a.v = 6;
   e668a:	2306      	movs	r3, #6
   e668c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   e6690:	ad01      	add	r5, sp, #4
   e6692:	f104 0308 	add.w	r3, r4, #8
   e6696:	3418      	adds	r4, #24
   e6698:	6818      	ldr	r0, [r3, #0]
   e669a:	6859      	ldr	r1, [r3, #4]
   e669c:	462a      	mov	r2, r5
   e669e:	c203      	stmia	r2!, {r0, r1}
   e66a0:	3308      	adds	r3, #8
   e66a2:	42a3      	cmp	r3, r4
   e66a4:	4615      	mov	r5, r2
   e66a6:	d1f7      	bne.n	e6698 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   e66a8:	a901      	add	r1, sp, #4
   e66aa:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   e66ac:	ad07      	add	r5, sp, #28
   e66ae:	f7ff fa51 	bl	e5b54 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   e66b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e66b4:	1d3c      	adds	r4, r7, #4
   e66b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e66b8:	682b      	ldr	r3, [r5, #0]
   e66ba:	7023      	strb	r3, [r4, #0]
                    ok = true;
   e66bc:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e66be:	69f6      	ldr	r6, [r6, #28]
   e66c0:	e7c8      	b.n	e6654 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   e66c2:	9800      	ldr	r0, [sp, #0]
   e66c4:	f7fe fc76 	bl	e4fb4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   e66c8:	4638      	mov	r0, r7
   e66ca:	b015      	add	sp, #84	; 0x54
   e66cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e66d0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   e66d0:	4b02      	ldr	r3, [pc, #8]	; (e66dc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   e66d2:	4a03      	ldr	r2, [pc, #12]	; (e66e0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   e66d4:	601a      	str	r2, [r3, #0]
   e66d6:	2200      	movs	r2, #0
   e66d8:	605a      	str	r2, [r3, #4]
   e66da:	4770      	bx	lr
   e66dc:	2003e718 	.word	0x2003e718
   e66e0:	000eaafc 	.word	0x000eaafc

000e66e4 <__aeabi_atexit>:
   e66e4:	460b      	mov	r3, r1
   e66e6:	4601      	mov	r1, r0
   e66e8:	4618      	mov	r0, r3
   e66ea:	f000 bb1b 	b.w	e6d24 <__cxa_atexit>

000e66ee <_ZdlPvj>:
   e66ee:	f7ed bcd6 	b.w	d409e <_ZdlPv>
	...

000e66f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   e66f4:	4b18      	ldr	r3, [pc, #96]	; (e6758 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   e66f6:	681a      	ldr	r2, [r3, #0]
   e66f8:	07d1      	lsls	r1, r2, #31
   e66fa:	bf5c      	itt	pl
   e66fc:	2201      	movpl	r2, #1
   e66fe:	601a      	strpl	r2, [r3, #0]
   e6700:	4b16      	ldr	r3, [pc, #88]	; (e675c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   e6702:	681a      	ldr	r2, [r3, #0]
   e6704:	07d2      	lsls	r2, r2, #31
   e6706:	bf5c      	itt	pl
   e6708:	2201      	movpl	r2, #1
   e670a:	601a      	strpl	r2, [r3, #0]
   e670c:	4b14      	ldr	r3, [pc, #80]	; (e6760 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   e670e:	681a      	ldr	r2, [r3, #0]
   e6710:	07d0      	lsls	r0, r2, #31
   e6712:	bf5c      	itt	pl
   e6714:	2201      	movpl	r2, #1
   e6716:	601a      	strpl	r2, [r3, #0]
   e6718:	4b12      	ldr	r3, [pc, #72]	; (e6764 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   e671a:	681a      	ldr	r2, [r3, #0]
   e671c:	07d1      	lsls	r1, r2, #31
   e671e:	bf5c      	itt	pl
   e6720:	2201      	movpl	r2, #1
   e6722:	601a      	strpl	r2, [r3, #0]
   e6724:	4b10      	ldr	r3, [pc, #64]	; (e6768 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   e6726:	681a      	ldr	r2, [r3, #0]
   e6728:	07d2      	lsls	r2, r2, #31
   e672a:	bf5c      	itt	pl
   e672c:	2201      	movpl	r2, #1
   e672e:	601a      	strpl	r2, [r3, #0]
   e6730:	4b0e      	ldr	r3, [pc, #56]	; (e676c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   e6732:	681a      	ldr	r2, [r3, #0]
   e6734:	07d0      	lsls	r0, r2, #31
   e6736:	bf5c      	itt	pl
   e6738:	2201      	movpl	r2, #1
   e673a:	601a      	strpl	r2, [r3, #0]
   e673c:	4b0c      	ldr	r3, [pc, #48]	; (e6770 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   e673e:	681a      	ldr	r2, [r3, #0]
   e6740:	07d1      	lsls	r1, r2, #31
   e6742:	bf5c      	itt	pl
   e6744:	2201      	movpl	r2, #1
   e6746:	601a      	strpl	r2, [r3, #0]
   e6748:	4b0a      	ldr	r3, [pc, #40]	; (e6774 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   e674a:	681a      	ldr	r2, [r3, #0]
   e674c:	07d2      	lsls	r2, r2, #31
   e674e:	bf5c      	itt	pl
   e6750:	2201      	movpl	r2, #1
   e6752:	601a      	strpl	r2, [r3, #0]
   e6754:	4770      	bx	lr
   e6756:	bf00      	nop
   e6758:	2003e740 	.word	0x2003e740
   e675c:	2003e73c 	.word	0x2003e73c
   e6760:	2003e738 	.word	0x2003e738
   e6764:	2003e734 	.word	0x2003e734
   e6768:	2003e730 	.word	0x2003e730
   e676c:	2003e72c 	.word	0x2003e72c
   e6770:	2003e728 	.word	0x2003e728
   e6774:	2003e724 	.word	0x2003e724

000e6778 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   e6778:	4b24      	ldr	r3, [pc, #144]	; (e680c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   e677a:	681a      	ldr	r2, [r3, #0]
   e677c:	07d0      	lsls	r0, r2, #31
   e677e:	bf5c      	itt	pl
   e6780:	2201      	movpl	r2, #1
   e6782:	601a      	strpl	r2, [r3, #0]
   e6784:	4b22      	ldr	r3, [pc, #136]	; (e6810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   e6786:	681a      	ldr	r2, [r3, #0]
   e6788:	07d1      	lsls	r1, r2, #31
   e678a:	bf5c      	itt	pl
   e678c:	2201      	movpl	r2, #1
   e678e:	601a      	strpl	r2, [r3, #0]
   e6790:	4b20      	ldr	r3, [pc, #128]	; (e6814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   e6792:	681a      	ldr	r2, [r3, #0]
   e6794:	07d2      	lsls	r2, r2, #31
   e6796:	bf5c      	itt	pl
   e6798:	2201      	movpl	r2, #1
   e679a:	601a      	strpl	r2, [r3, #0]
   e679c:	4b1e      	ldr	r3, [pc, #120]	; (e6818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   e679e:	681a      	ldr	r2, [r3, #0]
   e67a0:	07d0      	lsls	r0, r2, #31
   e67a2:	bf5c      	itt	pl
   e67a4:	2201      	movpl	r2, #1
   e67a6:	601a      	strpl	r2, [r3, #0]
   e67a8:	4b1c      	ldr	r3, [pc, #112]	; (e681c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   e67aa:	681a      	ldr	r2, [r3, #0]
   e67ac:	07d1      	lsls	r1, r2, #31
   e67ae:	bf5c      	itt	pl
   e67b0:	2201      	movpl	r2, #1
   e67b2:	601a      	strpl	r2, [r3, #0]
   e67b4:	4b1a      	ldr	r3, [pc, #104]	; (e6820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   e67b6:	681a      	ldr	r2, [r3, #0]
   e67b8:	07d2      	lsls	r2, r2, #31
   e67ba:	bf5c      	itt	pl
   e67bc:	2201      	movpl	r2, #1
   e67be:	601a      	strpl	r2, [r3, #0]
   e67c0:	4b18      	ldr	r3, [pc, #96]	; (e6824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   e67c2:	681a      	ldr	r2, [r3, #0]
   e67c4:	07d0      	lsls	r0, r2, #31
   e67c6:	bf5c      	itt	pl
   e67c8:	2201      	movpl	r2, #1
   e67ca:	601a      	strpl	r2, [r3, #0]
   e67cc:	4b16      	ldr	r3, [pc, #88]	; (e6828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   e67ce:	681a      	ldr	r2, [r3, #0]
   e67d0:	07d1      	lsls	r1, r2, #31
   e67d2:	bf5c      	itt	pl
   e67d4:	2201      	movpl	r2, #1
   e67d6:	601a      	strpl	r2, [r3, #0]
   e67d8:	4b14      	ldr	r3, [pc, #80]	; (e682c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   e67da:	681a      	ldr	r2, [r3, #0]
   e67dc:	07d2      	lsls	r2, r2, #31
   e67de:	bf5c      	itt	pl
   e67e0:	2201      	movpl	r2, #1
   e67e2:	601a      	strpl	r2, [r3, #0]
   e67e4:	4b12      	ldr	r3, [pc, #72]	; (e6830 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   e67e6:	681a      	ldr	r2, [r3, #0]
   e67e8:	07d0      	lsls	r0, r2, #31
   e67ea:	bf5c      	itt	pl
   e67ec:	2201      	movpl	r2, #1
   e67ee:	601a      	strpl	r2, [r3, #0]
   e67f0:	4b10      	ldr	r3, [pc, #64]	; (e6834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   e67f2:	681a      	ldr	r2, [r3, #0]
   e67f4:	07d1      	lsls	r1, r2, #31
   e67f6:	bf5c      	itt	pl
   e67f8:	2201      	movpl	r2, #1
   e67fa:	601a      	strpl	r2, [r3, #0]
   e67fc:	4b0e      	ldr	r3, [pc, #56]	; (e6838 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   e67fe:	681a      	ldr	r2, [r3, #0]
   e6800:	07d2      	lsls	r2, r2, #31
   e6802:	bf5c      	itt	pl
   e6804:	2201      	movpl	r2, #1
   e6806:	601a      	strpl	r2, [r3, #0]
   e6808:	4770      	bx	lr
   e680a:	bf00      	nop
   e680c:	2003e770 	.word	0x2003e770
   e6810:	2003e76c 	.word	0x2003e76c
   e6814:	2003e768 	.word	0x2003e768
   e6818:	2003e764 	.word	0x2003e764
   e681c:	2003e760 	.word	0x2003e760
   e6820:	2003e75c 	.word	0x2003e75c
   e6824:	2003e758 	.word	0x2003e758
   e6828:	2003e754 	.word	0x2003e754
   e682c:	2003e750 	.word	0x2003e750
   e6830:	2003e74c 	.word	0x2003e74c
   e6834:	2003e748 	.word	0x2003e748
   e6838:	2003e744 	.word	0x2003e744

000e683c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   e683c:	4b24      	ldr	r3, [pc, #144]	; (e68d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   e683e:	681a      	ldr	r2, [r3, #0]
   e6840:	07d0      	lsls	r0, r2, #31
   e6842:	bf5c      	itt	pl
   e6844:	2201      	movpl	r2, #1
   e6846:	601a      	strpl	r2, [r3, #0]
   e6848:	4b22      	ldr	r3, [pc, #136]	; (e68d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   e684a:	681a      	ldr	r2, [r3, #0]
   e684c:	07d1      	lsls	r1, r2, #31
   e684e:	bf5c      	itt	pl
   e6850:	2201      	movpl	r2, #1
   e6852:	601a      	strpl	r2, [r3, #0]
   e6854:	4b20      	ldr	r3, [pc, #128]	; (e68d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   e6856:	681a      	ldr	r2, [r3, #0]
   e6858:	07d2      	lsls	r2, r2, #31
   e685a:	bf5c      	itt	pl
   e685c:	2201      	movpl	r2, #1
   e685e:	601a      	strpl	r2, [r3, #0]
   e6860:	4b1e      	ldr	r3, [pc, #120]	; (e68dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   e6862:	681a      	ldr	r2, [r3, #0]
   e6864:	07d0      	lsls	r0, r2, #31
   e6866:	bf5c      	itt	pl
   e6868:	2201      	movpl	r2, #1
   e686a:	601a      	strpl	r2, [r3, #0]
   e686c:	4b1c      	ldr	r3, [pc, #112]	; (e68e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   e686e:	681a      	ldr	r2, [r3, #0]
   e6870:	07d1      	lsls	r1, r2, #31
   e6872:	bf5c      	itt	pl
   e6874:	2201      	movpl	r2, #1
   e6876:	601a      	strpl	r2, [r3, #0]
   e6878:	4b1a      	ldr	r3, [pc, #104]	; (e68e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   e687a:	681a      	ldr	r2, [r3, #0]
   e687c:	07d2      	lsls	r2, r2, #31
   e687e:	bf5c      	itt	pl
   e6880:	2201      	movpl	r2, #1
   e6882:	601a      	strpl	r2, [r3, #0]
   e6884:	4b18      	ldr	r3, [pc, #96]	; (e68e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   e6886:	681a      	ldr	r2, [r3, #0]
   e6888:	07d0      	lsls	r0, r2, #31
   e688a:	bf5c      	itt	pl
   e688c:	2201      	movpl	r2, #1
   e688e:	601a      	strpl	r2, [r3, #0]
   e6890:	4b16      	ldr	r3, [pc, #88]	; (e68ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   e6892:	681a      	ldr	r2, [r3, #0]
   e6894:	07d1      	lsls	r1, r2, #31
   e6896:	bf5c      	itt	pl
   e6898:	2201      	movpl	r2, #1
   e689a:	601a      	strpl	r2, [r3, #0]
   e689c:	4b14      	ldr	r3, [pc, #80]	; (e68f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   e689e:	681a      	ldr	r2, [r3, #0]
   e68a0:	07d2      	lsls	r2, r2, #31
   e68a2:	bf5c      	itt	pl
   e68a4:	2201      	movpl	r2, #1
   e68a6:	601a      	strpl	r2, [r3, #0]
   e68a8:	4b12      	ldr	r3, [pc, #72]	; (e68f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   e68aa:	681a      	ldr	r2, [r3, #0]
   e68ac:	07d0      	lsls	r0, r2, #31
   e68ae:	bf5c      	itt	pl
   e68b0:	2201      	movpl	r2, #1
   e68b2:	601a      	strpl	r2, [r3, #0]
   e68b4:	4b10      	ldr	r3, [pc, #64]	; (e68f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   e68b6:	681a      	ldr	r2, [r3, #0]
   e68b8:	07d1      	lsls	r1, r2, #31
   e68ba:	bf5c      	itt	pl
   e68bc:	2201      	movpl	r2, #1
   e68be:	601a      	strpl	r2, [r3, #0]
   e68c0:	4b0e      	ldr	r3, [pc, #56]	; (e68fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   e68c2:	681a      	ldr	r2, [r3, #0]
   e68c4:	07d2      	lsls	r2, r2, #31
   e68c6:	bf5c      	itt	pl
   e68c8:	2201      	movpl	r2, #1
   e68ca:	601a      	strpl	r2, [r3, #0]
   e68cc:	4770      	bx	lr
   e68ce:	bf00      	nop
   e68d0:	2003e7a0 	.word	0x2003e7a0
   e68d4:	2003e79c 	.word	0x2003e79c
   e68d8:	2003e798 	.word	0x2003e798
   e68dc:	2003e794 	.word	0x2003e794
   e68e0:	2003e790 	.word	0x2003e790
   e68e4:	2003e78c 	.word	0x2003e78c
   e68e8:	2003e788 	.word	0x2003e788
   e68ec:	2003e784 	.word	0x2003e784
   e68f0:	2003e780 	.word	0x2003e780
   e68f4:	2003e77c 	.word	0x2003e77c
   e68f8:	2003e778 	.word	0x2003e778
   e68fc:	2003e774 	.word	0x2003e774

000e6900 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   e6900:	4b18      	ldr	r3, [pc, #96]	; (e6964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   e6902:	681a      	ldr	r2, [r3, #0]
   e6904:	07d1      	lsls	r1, r2, #31
   e6906:	bf5c      	itt	pl
   e6908:	2201      	movpl	r2, #1
   e690a:	601a      	strpl	r2, [r3, #0]
   e690c:	4b16      	ldr	r3, [pc, #88]	; (e6968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   e690e:	681a      	ldr	r2, [r3, #0]
   e6910:	07d2      	lsls	r2, r2, #31
   e6912:	bf5c      	itt	pl
   e6914:	2201      	movpl	r2, #1
   e6916:	601a      	strpl	r2, [r3, #0]
   e6918:	4b14      	ldr	r3, [pc, #80]	; (e696c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   e691a:	681a      	ldr	r2, [r3, #0]
   e691c:	07d0      	lsls	r0, r2, #31
   e691e:	bf5c      	itt	pl
   e6920:	2201      	movpl	r2, #1
   e6922:	601a      	strpl	r2, [r3, #0]
   e6924:	4b12      	ldr	r3, [pc, #72]	; (e6970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   e6926:	681a      	ldr	r2, [r3, #0]
   e6928:	07d1      	lsls	r1, r2, #31
   e692a:	bf5c      	itt	pl
   e692c:	2201      	movpl	r2, #1
   e692e:	601a      	strpl	r2, [r3, #0]
   e6930:	4b10      	ldr	r3, [pc, #64]	; (e6974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   e6932:	681a      	ldr	r2, [r3, #0]
   e6934:	07d2      	lsls	r2, r2, #31
   e6936:	bf5c      	itt	pl
   e6938:	2201      	movpl	r2, #1
   e693a:	601a      	strpl	r2, [r3, #0]
   e693c:	4b0e      	ldr	r3, [pc, #56]	; (e6978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   e693e:	681a      	ldr	r2, [r3, #0]
   e6940:	07d0      	lsls	r0, r2, #31
   e6942:	bf5c      	itt	pl
   e6944:	2201      	movpl	r2, #1
   e6946:	601a      	strpl	r2, [r3, #0]
   e6948:	4b0c      	ldr	r3, [pc, #48]	; (e697c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   e694a:	681a      	ldr	r2, [r3, #0]
   e694c:	07d1      	lsls	r1, r2, #31
   e694e:	bf5c      	itt	pl
   e6950:	2201      	movpl	r2, #1
   e6952:	601a      	strpl	r2, [r3, #0]
   e6954:	4b0a      	ldr	r3, [pc, #40]	; (e6980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   e6956:	681a      	ldr	r2, [r3, #0]
   e6958:	07d2      	lsls	r2, r2, #31
   e695a:	bf5c      	itt	pl
   e695c:	2201      	movpl	r2, #1
   e695e:	601a      	strpl	r2, [r3, #0]
   e6960:	4770      	bx	lr
   e6962:	bf00      	nop
   e6964:	2003e7c0 	.word	0x2003e7c0
   e6968:	2003e7bc 	.word	0x2003e7bc
   e696c:	2003e7b8 	.word	0x2003e7b8
   e6970:	2003e7b4 	.word	0x2003e7b4
   e6974:	2003e7b0 	.word	0x2003e7b0
   e6978:	2003e7ac 	.word	0x2003e7ac
   e697c:	2003e7a8 	.word	0x2003e7a8
   e6980:	2003e7a4 	.word	0x2003e7a4

000e6984 <__aeabi_uldivmod>:
   e6984:	b953      	cbnz	r3, e699c <__aeabi_uldivmod+0x18>
   e6986:	b94a      	cbnz	r2, e699c <__aeabi_uldivmod+0x18>
   e6988:	2900      	cmp	r1, #0
   e698a:	bf08      	it	eq
   e698c:	2800      	cmpeq	r0, #0
   e698e:	bf1c      	itt	ne
   e6990:	f04f 31ff 	movne.w	r1, #4294967295
   e6994:	f04f 30ff 	movne.w	r0, #4294967295
   e6998:	f000 b97e 	b.w	e6c98 <__aeabi_idiv0>
   e699c:	f1ad 0c08 	sub.w	ip, sp, #8
   e69a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   e69a4:	f000 f806 	bl	e69b4 <__udivmoddi4>
   e69a8:	f8dd e004 	ldr.w	lr, [sp, #4]
   e69ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e69b0:	b004      	add	sp, #16
   e69b2:	4770      	bx	lr

000e69b4 <__udivmoddi4>:
   e69b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e69b8:	468c      	mov	ip, r1
   e69ba:	460e      	mov	r6, r1
   e69bc:	4604      	mov	r4, r0
   e69be:	9d08      	ldr	r5, [sp, #32]
   e69c0:	2b00      	cmp	r3, #0
   e69c2:	d150      	bne.n	e6a66 <__udivmoddi4+0xb2>
   e69c4:	428a      	cmp	r2, r1
   e69c6:	4617      	mov	r7, r2
   e69c8:	d96c      	bls.n	e6aa4 <__udivmoddi4+0xf0>
   e69ca:	fab2 fe82 	clz	lr, r2
   e69ce:	f1be 0f00 	cmp.w	lr, #0
   e69d2:	d00b      	beq.n	e69ec <__udivmoddi4+0x38>
   e69d4:	f1ce 0420 	rsb	r4, lr, #32
   e69d8:	fa20 f404 	lsr.w	r4, r0, r4
   e69dc:	fa01 f60e 	lsl.w	r6, r1, lr
   e69e0:	ea44 0c06 	orr.w	ip, r4, r6
   e69e4:	fa02 f70e 	lsl.w	r7, r2, lr
   e69e8:	fa00 f40e 	lsl.w	r4, r0, lr
   e69ec:	ea4f 4917 	mov.w	r9, r7, lsr #16
   e69f0:	0c22      	lsrs	r2, r4, #16
   e69f2:	fbbc f0f9 	udiv	r0, ip, r9
   e69f6:	fa1f f887 	uxth.w	r8, r7
   e69fa:	fb09 c610 	mls	r6, r9, r0, ip
   e69fe:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   e6a02:	fb00 f308 	mul.w	r3, r0, r8
   e6a06:	42b3      	cmp	r3, r6
   e6a08:	d909      	bls.n	e6a1e <__udivmoddi4+0x6a>
   e6a0a:	19f6      	adds	r6, r6, r7
   e6a0c:	f100 32ff 	add.w	r2, r0, #4294967295
   e6a10:	f080 8122 	bcs.w	e6c58 <__udivmoddi4+0x2a4>
   e6a14:	42b3      	cmp	r3, r6
   e6a16:	f240 811f 	bls.w	e6c58 <__udivmoddi4+0x2a4>
   e6a1a:	3802      	subs	r0, #2
   e6a1c:	443e      	add	r6, r7
   e6a1e:	1af6      	subs	r6, r6, r3
   e6a20:	b2a2      	uxth	r2, r4
   e6a22:	fbb6 f3f9 	udiv	r3, r6, r9
   e6a26:	fb09 6613 	mls	r6, r9, r3, r6
   e6a2a:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   e6a2e:	fb03 f808 	mul.w	r8, r3, r8
   e6a32:	45a0      	cmp	r8, r4
   e6a34:	d909      	bls.n	e6a4a <__udivmoddi4+0x96>
   e6a36:	19e4      	adds	r4, r4, r7
   e6a38:	f103 32ff 	add.w	r2, r3, #4294967295
   e6a3c:	f080 810a 	bcs.w	e6c54 <__udivmoddi4+0x2a0>
   e6a40:	45a0      	cmp	r8, r4
   e6a42:	f240 8107 	bls.w	e6c54 <__udivmoddi4+0x2a0>
   e6a46:	3b02      	subs	r3, #2
   e6a48:	443c      	add	r4, r7
   e6a4a:	ebc8 0404 	rsb	r4, r8, r4
   e6a4e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   e6a52:	2100      	movs	r1, #0
   e6a54:	2d00      	cmp	r5, #0
   e6a56:	d062      	beq.n	e6b1e <__udivmoddi4+0x16a>
   e6a58:	fa24 f40e 	lsr.w	r4, r4, lr
   e6a5c:	2300      	movs	r3, #0
   e6a5e:	602c      	str	r4, [r5, #0]
   e6a60:	606b      	str	r3, [r5, #4]
   e6a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e6a66:	428b      	cmp	r3, r1
   e6a68:	d907      	bls.n	e6a7a <__udivmoddi4+0xc6>
   e6a6a:	2d00      	cmp	r5, #0
   e6a6c:	d055      	beq.n	e6b1a <__udivmoddi4+0x166>
   e6a6e:	2100      	movs	r1, #0
   e6a70:	e885 0041 	stmia.w	r5, {r0, r6}
   e6a74:	4608      	mov	r0, r1
   e6a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e6a7a:	fab3 f183 	clz	r1, r3
   e6a7e:	2900      	cmp	r1, #0
   e6a80:	f040 8090 	bne.w	e6ba4 <__udivmoddi4+0x1f0>
   e6a84:	42b3      	cmp	r3, r6
   e6a86:	d302      	bcc.n	e6a8e <__udivmoddi4+0xda>
   e6a88:	4282      	cmp	r2, r0
   e6a8a:	f200 80f8 	bhi.w	e6c7e <__udivmoddi4+0x2ca>
   e6a8e:	1a84      	subs	r4, r0, r2
   e6a90:	eb66 0603 	sbc.w	r6, r6, r3
   e6a94:	2001      	movs	r0, #1
   e6a96:	46b4      	mov	ip, r6
   e6a98:	2d00      	cmp	r5, #0
   e6a9a:	d040      	beq.n	e6b1e <__udivmoddi4+0x16a>
   e6a9c:	e885 1010 	stmia.w	r5, {r4, ip}
   e6aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e6aa4:	b912      	cbnz	r2, e6aac <__udivmoddi4+0xf8>
   e6aa6:	2701      	movs	r7, #1
   e6aa8:	fbb7 f7f2 	udiv	r7, r7, r2
   e6aac:	fab7 fe87 	clz	lr, r7
   e6ab0:	f1be 0f00 	cmp.w	lr, #0
   e6ab4:	d135      	bne.n	e6b22 <__udivmoddi4+0x16e>
   e6ab6:	1bf3      	subs	r3, r6, r7
   e6ab8:	ea4f 4817 	mov.w	r8, r7, lsr #16
   e6abc:	fa1f fc87 	uxth.w	ip, r7
   e6ac0:	2101      	movs	r1, #1
   e6ac2:	fbb3 f0f8 	udiv	r0, r3, r8
   e6ac6:	0c22      	lsrs	r2, r4, #16
   e6ac8:	fb08 3610 	mls	r6, r8, r0, r3
   e6acc:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   e6ad0:	fb0c f300 	mul.w	r3, ip, r0
   e6ad4:	42b3      	cmp	r3, r6
   e6ad6:	d907      	bls.n	e6ae8 <__udivmoddi4+0x134>
   e6ad8:	19f6      	adds	r6, r6, r7
   e6ada:	f100 32ff 	add.w	r2, r0, #4294967295
   e6ade:	d202      	bcs.n	e6ae6 <__udivmoddi4+0x132>
   e6ae0:	42b3      	cmp	r3, r6
   e6ae2:	f200 80ce 	bhi.w	e6c82 <__udivmoddi4+0x2ce>
   e6ae6:	4610      	mov	r0, r2
   e6ae8:	1af6      	subs	r6, r6, r3
   e6aea:	b2a2      	uxth	r2, r4
   e6aec:	fbb6 f3f8 	udiv	r3, r6, r8
   e6af0:	fb08 6613 	mls	r6, r8, r3, r6
   e6af4:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   e6af8:	fb0c fc03 	mul.w	ip, ip, r3
   e6afc:	45a4      	cmp	ip, r4
   e6afe:	d907      	bls.n	e6b10 <__udivmoddi4+0x15c>
   e6b00:	19e4      	adds	r4, r4, r7
   e6b02:	f103 32ff 	add.w	r2, r3, #4294967295
   e6b06:	d202      	bcs.n	e6b0e <__udivmoddi4+0x15a>
   e6b08:	45a4      	cmp	ip, r4
   e6b0a:	f200 80b5 	bhi.w	e6c78 <__udivmoddi4+0x2c4>
   e6b0e:	4613      	mov	r3, r2
   e6b10:	ebcc 0404 	rsb	r4, ip, r4
   e6b14:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   e6b18:	e79c      	b.n	e6a54 <__udivmoddi4+0xa0>
   e6b1a:	4629      	mov	r1, r5
   e6b1c:	4628      	mov	r0, r5
   e6b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e6b22:	f1ce 0120 	rsb	r1, lr, #32
   e6b26:	fa06 f30e 	lsl.w	r3, r6, lr
   e6b2a:	fa07 f70e 	lsl.w	r7, r7, lr
   e6b2e:	fa20 f901 	lsr.w	r9, r0, r1
   e6b32:	ea4f 4817 	mov.w	r8, r7, lsr #16
   e6b36:	40ce      	lsrs	r6, r1
   e6b38:	ea49 0903 	orr.w	r9, r9, r3
   e6b3c:	fbb6 faf8 	udiv	sl, r6, r8
   e6b40:	ea4f 4419 	mov.w	r4, r9, lsr #16
   e6b44:	fb08 661a 	mls	r6, r8, sl, r6
   e6b48:	fa1f fc87 	uxth.w	ip, r7
   e6b4c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   e6b50:	fb0a f20c 	mul.w	r2, sl, ip
   e6b54:	429a      	cmp	r2, r3
   e6b56:	fa00 f40e 	lsl.w	r4, r0, lr
   e6b5a:	d90a      	bls.n	e6b72 <__udivmoddi4+0x1be>
   e6b5c:	19db      	adds	r3, r3, r7
   e6b5e:	f10a 31ff 	add.w	r1, sl, #4294967295
   e6b62:	f080 8087 	bcs.w	e6c74 <__udivmoddi4+0x2c0>
   e6b66:	429a      	cmp	r2, r3
   e6b68:	f240 8084 	bls.w	e6c74 <__udivmoddi4+0x2c0>
   e6b6c:	f1aa 0a02 	sub.w	sl, sl, #2
   e6b70:	443b      	add	r3, r7
   e6b72:	1a9b      	subs	r3, r3, r2
   e6b74:	fa1f f989 	uxth.w	r9, r9
   e6b78:	fbb3 f1f8 	udiv	r1, r3, r8
   e6b7c:	fb08 3311 	mls	r3, r8, r1, r3
   e6b80:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   e6b84:	fb01 f60c 	mul.w	r6, r1, ip
   e6b88:	429e      	cmp	r6, r3
   e6b8a:	d907      	bls.n	e6b9c <__udivmoddi4+0x1e8>
   e6b8c:	19db      	adds	r3, r3, r7
   e6b8e:	f101 32ff 	add.w	r2, r1, #4294967295
   e6b92:	d26b      	bcs.n	e6c6c <__udivmoddi4+0x2b8>
   e6b94:	429e      	cmp	r6, r3
   e6b96:	d969      	bls.n	e6c6c <__udivmoddi4+0x2b8>
   e6b98:	3902      	subs	r1, #2
   e6b9a:	443b      	add	r3, r7
   e6b9c:	1b9b      	subs	r3, r3, r6
   e6b9e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   e6ba2:	e78e      	b.n	e6ac2 <__udivmoddi4+0x10e>
   e6ba4:	f1c1 0e20 	rsb	lr, r1, #32
   e6ba8:	fa22 f40e 	lsr.w	r4, r2, lr
   e6bac:	408b      	lsls	r3, r1
   e6bae:	4323      	orrs	r3, r4
   e6bb0:	fa20 f70e 	lsr.w	r7, r0, lr
   e6bb4:	fa06 f401 	lsl.w	r4, r6, r1
   e6bb8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   e6bbc:	fa26 f60e 	lsr.w	r6, r6, lr
   e6bc0:	433c      	orrs	r4, r7
   e6bc2:	fbb6 f9fc 	udiv	r9, r6, ip
   e6bc6:	0c27      	lsrs	r7, r4, #16
   e6bc8:	fb0c 6619 	mls	r6, ip, r9, r6
   e6bcc:	fa1f f883 	uxth.w	r8, r3
   e6bd0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   e6bd4:	fb09 f708 	mul.w	r7, r9, r8
   e6bd8:	42b7      	cmp	r7, r6
   e6bda:	fa02 f201 	lsl.w	r2, r2, r1
   e6bde:	fa00 fa01 	lsl.w	sl, r0, r1
   e6be2:	d908      	bls.n	e6bf6 <__udivmoddi4+0x242>
   e6be4:	18f6      	adds	r6, r6, r3
   e6be6:	f109 30ff 	add.w	r0, r9, #4294967295
   e6bea:	d241      	bcs.n	e6c70 <__udivmoddi4+0x2bc>
   e6bec:	42b7      	cmp	r7, r6
   e6bee:	d93f      	bls.n	e6c70 <__udivmoddi4+0x2bc>
   e6bf0:	f1a9 0902 	sub.w	r9, r9, #2
   e6bf4:	441e      	add	r6, r3
   e6bf6:	1bf6      	subs	r6, r6, r7
   e6bf8:	b2a0      	uxth	r0, r4
   e6bfa:	fbb6 f4fc 	udiv	r4, r6, ip
   e6bfe:	fb0c 6614 	mls	r6, ip, r4, r6
   e6c02:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   e6c06:	fb04 f808 	mul.w	r8, r4, r8
   e6c0a:	45b8      	cmp	r8, r7
   e6c0c:	d907      	bls.n	e6c1e <__udivmoddi4+0x26a>
   e6c0e:	18ff      	adds	r7, r7, r3
   e6c10:	f104 30ff 	add.w	r0, r4, #4294967295
   e6c14:	d228      	bcs.n	e6c68 <__udivmoddi4+0x2b4>
   e6c16:	45b8      	cmp	r8, r7
   e6c18:	d926      	bls.n	e6c68 <__udivmoddi4+0x2b4>
   e6c1a:	3c02      	subs	r4, #2
   e6c1c:	441f      	add	r7, r3
   e6c1e:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   e6c22:	ebc8 0707 	rsb	r7, r8, r7
   e6c26:	fba0 8902 	umull	r8, r9, r0, r2
   e6c2a:	454f      	cmp	r7, r9
   e6c2c:	4644      	mov	r4, r8
   e6c2e:	464e      	mov	r6, r9
   e6c30:	d314      	bcc.n	e6c5c <__udivmoddi4+0x2a8>
   e6c32:	d029      	beq.n	e6c88 <__udivmoddi4+0x2d4>
   e6c34:	b365      	cbz	r5, e6c90 <__udivmoddi4+0x2dc>
   e6c36:	ebba 0304 	subs.w	r3, sl, r4
   e6c3a:	eb67 0706 	sbc.w	r7, r7, r6
   e6c3e:	fa07 fe0e 	lsl.w	lr, r7, lr
   e6c42:	40cb      	lsrs	r3, r1
   e6c44:	40cf      	lsrs	r7, r1
   e6c46:	ea4e 0303 	orr.w	r3, lr, r3
   e6c4a:	e885 0088 	stmia.w	r5, {r3, r7}
   e6c4e:	2100      	movs	r1, #0
   e6c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e6c54:	4613      	mov	r3, r2
   e6c56:	e6f8      	b.n	e6a4a <__udivmoddi4+0x96>
   e6c58:	4610      	mov	r0, r2
   e6c5a:	e6e0      	b.n	e6a1e <__udivmoddi4+0x6a>
   e6c5c:	ebb8 0402 	subs.w	r4, r8, r2
   e6c60:	eb69 0603 	sbc.w	r6, r9, r3
   e6c64:	3801      	subs	r0, #1
   e6c66:	e7e5      	b.n	e6c34 <__udivmoddi4+0x280>
   e6c68:	4604      	mov	r4, r0
   e6c6a:	e7d8      	b.n	e6c1e <__udivmoddi4+0x26a>
   e6c6c:	4611      	mov	r1, r2
   e6c6e:	e795      	b.n	e6b9c <__udivmoddi4+0x1e8>
   e6c70:	4681      	mov	r9, r0
   e6c72:	e7c0      	b.n	e6bf6 <__udivmoddi4+0x242>
   e6c74:	468a      	mov	sl, r1
   e6c76:	e77c      	b.n	e6b72 <__udivmoddi4+0x1be>
   e6c78:	3b02      	subs	r3, #2
   e6c7a:	443c      	add	r4, r7
   e6c7c:	e748      	b.n	e6b10 <__udivmoddi4+0x15c>
   e6c7e:	4608      	mov	r0, r1
   e6c80:	e70a      	b.n	e6a98 <__udivmoddi4+0xe4>
   e6c82:	3802      	subs	r0, #2
   e6c84:	443e      	add	r6, r7
   e6c86:	e72f      	b.n	e6ae8 <__udivmoddi4+0x134>
   e6c88:	45c2      	cmp	sl, r8
   e6c8a:	d3e7      	bcc.n	e6c5c <__udivmoddi4+0x2a8>
   e6c8c:	463e      	mov	r6, r7
   e6c8e:	e7d1      	b.n	e6c34 <__udivmoddi4+0x280>
   e6c90:	4629      	mov	r1, r5
   e6c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e6c96:	bf00      	nop

000e6c98 <__aeabi_idiv0>:
   e6c98:	4770      	bx	lr
   e6c9a:	bf00      	nop

000e6c9c <asctime>:
   e6c9c:	4b09      	ldr	r3, [pc, #36]	; (e6cc4 <asctime+0x28>)
   e6c9e:	b570      	push	{r4, r5, r6, lr}
   e6ca0:	681c      	ldr	r4, [r3, #0]
   e6ca2:	6c25      	ldr	r5, [r4, #64]	; 0x40
   e6ca4:	4606      	mov	r6, r0
   e6ca6:	b93d      	cbnz	r5, e6cb8 <asctime+0x1c>
   e6ca8:	201a      	movs	r0, #26
   e6caa:	f7fe fb57 	bl	e535c <malloc>
   e6cae:	221a      	movs	r2, #26
   e6cb0:	6420      	str	r0, [r4, #64]	; 0x40
   e6cb2:	4629      	mov	r1, r5
   e6cb4:	f000 f971 	bl	e6f9a <memset>
   e6cb8:	6c21      	ldr	r1, [r4, #64]	; 0x40
   e6cba:	4630      	mov	r0, r6
   e6cbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   e6cc0:	f000 b802 	b.w	e6cc8 <asctime_r>
   e6cc4:	2003af90 	.word	0x2003af90

000e6cc8 <asctime_r>:
   e6cc8:	b510      	push	{r4, lr}
   e6cca:	460c      	mov	r4, r1
   e6ccc:	6941      	ldr	r1, [r0, #20]
   e6cce:	6903      	ldr	r3, [r0, #16]
   e6cd0:	6982      	ldr	r2, [r0, #24]
   e6cd2:	b086      	sub	sp, #24
   e6cd4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   e6cd8:	9104      	str	r1, [sp, #16]
   e6cda:	6801      	ldr	r1, [r0, #0]
   e6cdc:	9103      	str	r1, [sp, #12]
   e6cde:	6841      	ldr	r1, [r0, #4]
   e6ce0:	9102      	str	r1, [sp, #8]
   e6ce2:	6881      	ldr	r1, [r0, #8]
   e6ce4:	9101      	str	r1, [sp, #4]
   e6ce6:	68c1      	ldr	r1, [r0, #12]
   e6ce8:	9100      	str	r1, [sp, #0]
   e6cea:	4907      	ldr	r1, [pc, #28]	; (e6d08 <asctime_r+0x40>)
   e6cec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   e6cf0:	440b      	add	r3, r1
   e6cf2:	4906      	ldr	r1, [pc, #24]	; (e6d0c <asctime_r+0x44>)
   e6cf4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   e6cf8:	440a      	add	r2, r1
   e6cfa:	4620      	mov	r0, r4
   e6cfc:	4904      	ldr	r1, [pc, #16]	; (e6d10 <asctime_r+0x48>)
   e6cfe:	f7fe fb4d 	bl	e539c <siprintf>
   e6d02:	4620      	mov	r0, r4
   e6d04:	b006      	add	sp, #24
   e6d06:	bd10      	pop	{r4, pc}
   e6d08:	000eab3d 	.word	0x000eab3d
   e6d0c:	000eab28 	.word	0x000eab28
   e6d10:	000eab61 	.word	0x000eab61

000e6d14 <calloc>:
   e6d14:	4b02      	ldr	r3, [pc, #8]	; (e6d20 <calloc+0xc>)
   e6d16:	460a      	mov	r2, r1
   e6d18:	4601      	mov	r1, r0
   e6d1a:	6818      	ldr	r0, [r3, #0]
   e6d1c:	f000 b945 	b.w	e6faa <_calloc_r>
   e6d20:	2003af90 	.word	0x2003af90

000e6d24 <__cxa_atexit>:
   e6d24:	b510      	push	{r4, lr}
   e6d26:	4c05      	ldr	r4, [pc, #20]	; (e6d3c <__cxa_atexit+0x18>)
   e6d28:	4613      	mov	r3, r2
   e6d2a:	b12c      	cbz	r4, e6d38 <__cxa_atexit+0x14>
   e6d2c:	460a      	mov	r2, r1
   e6d2e:	4601      	mov	r1, r0
   e6d30:	2002      	movs	r0, #2
   e6d32:	f3af 8000 	nop.w
   e6d36:	bd10      	pop	{r4, pc}
   e6d38:	4620      	mov	r0, r4
   e6d3a:	bd10      	pop	{r4, pc}
   e6d3c:	00000000 	.word	0x00000000

000e6d40 <localtime>:
   e6d40:	b538      	push	{r3, r4, r5, lr}
   e6d42:	4b07      	ldr	r3, [pc, #28]	; (e6d60 <localtime+0x20>)
   e6d44:	681c      	ldr	r4, [r3, #0]
   e6d46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e6d48:	4605      	mov	r5, r0
   e6d4a:	b91b      	cbnz	r3, e6d54 <localtime+0x14>
   e6d4c:	2024      	movs	r0, #36	; 0x24
   e6d4e:	f7fe fb05 	bl	e535c <malloc>
   e6d52:	63e0      	str	r0, [r4, #60]	; 0x3c
   e6d54:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   e6d56:	4628      	mov	r0, r5
   e6d58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   e6d5c:	f000 b802 	b.w	e6d64 <localtime_r>
   e6d60:	2003af90 	.word	0x2003af90

000e6d64 <localtime_r>:
   e6d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e6d68:	460c      	mov	r4, r1
   e6d6a:	4680      	mov	r8, r0
   e6d6c:	f000 fcb4 	bl	e76d8 <__gettzinfo>
   e6d70:	4621      	mov	r1, r4
   e6d72:	4607      	mov	r7, r0
   e6d74:	4640      	mov	r0, r8
   e6d76:	f000 fcb3 	bl	e76e0 <gmtime_r>
   e6d7a:	6946      	ldr	r6, [r0, #20]
   e6d7c:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   e6d80:	07b3      	lsls	r3, r6, #30
   e6d82:	4604      	mov	r4, r0
   e6d84:	d105      	bne.n	e6d92 <localtime_r+0x2e>
   e6d86:	2264      	movs	r2, #100	; 0x64
   e6d88:	fb96 f3f2 	sdiv	r3, r6, r2
   e6d8c:	fb02 6313 	mls	r3, r2, r3, r6
   e6d90:	b94b      	cbnz	r3, e6da6 <localtime_r+0x42>
   e6d92:	f44f 75c8 	mov.w	r5, #400	; 0x190
   e6d96:	fb96 f3f5 	sdiv	r3, r6, r5
   e6d9a:	fb05 6513 	mls	r5, r5, r3, r6
   e6d9e:	fab5 f385 	clz	r3, r5
   e6da2:	095b      	lsrs	r3, r3, #5
   e6da4:	e000      	b.n	e6da8 <localtime_r+0x44>
   e6da6:	2301      	movs	r3, #1
   e6da8:	4a5f      	ldr	r2, [pc, #380]	; (e6f28 <localtime_r+0x1c4>)
   e6daa:	2530      	movs	r5, #48	; 0x30
   e6dac:	fb05 2503 	mla	r5, r5, r3, r2
   e6db0:	f000 fab4 	bl	e731c <__tz_lock>
   e6db4:	f000 fab4 	bl	e7320 <_tzset_unlocked>
   e6db8:	4b5c      	ldr	r3, [pc, #368]	; (e6f2c <localtime_r+0x1c8>)
   e6dba:	681b      	ldr	r3, [r3, #0]
   e6dbc:	b1f3      	cbz	r3, e6dfc <localtime_r+0x98>
   e6dbe:	687b      	ldr	r3, [r7, #4]
   e6dc0:	429e      	cmp	r6, r3
   e6dc2:	d105      	bne.n	e6dd0 <localtime_r+0x6c>
   e6dc4:	6839      	ldr	r1, [r7, #0]
   e6dc6:	f8d8 3000 	ldr.w	r3, [r8]
   e6dca:	69fa      	ldr	r2, [r7, #28]
   e6dcc:	b941      	cbnz	r1, e6de0 <localtime_r+0x7c>
   e6dce:	e00a      	b.n	e6de6 <localtime_r+0x82>
   e6dd0:	4630      	mov	r0, r6
   e6dd2:	f000 f9fb 	bl	e71cc <__tzcalc_limits>
   e6dd6:	2800      	cmp	r0, #0
   e6dd8:	d1f4      	bne.n	e6dc4 <localtime_r+0x60>
   e6dda:	f04f 33ff 	mov.w	r3, #4294967295
   e6dde:	e00d      	b.n	e6dfc <localtime_r+0x98>
   e6de0:	4293      	cmp	r3, r2
   e6de2:	db08      	blt.n	e6df6 <localtime_r+0x92>
   e6de4:	e001      	b.n	e6dea <localtime_r+0x86>
   e6de6:	4293      	cmp	r3, r2
   e6de8:	da07      	bge.n	e6dfa <localtime_r+0x96>
   e6dea:	6bba      	ldr	r2, [r7, #56]	; 0x38
   e6dec:	4293      	cmp	r3, r2
   e6dee:	bfac      	ite	ge
   e6df0:	2300      	movge	r3, #0
   e6df2:	2301      	movlt	r3, #1
   e6df4:	e002      	b.n	e6dfc <localtime_r+0x98>
   e6df6:	2300      	movs	r3, #0
   e6df8:	e000      	b.n	e6dfc <localtime_r+0x98>
   e6dfa:	2301      	movs	r3, #1
   e6dfc:	6223      	str	r3, [r4, #32]
   e6dfe:	6a23      	ldr	r3, [r4, #32]
   e6e00:	2b01      	cmp	r3, #1
   e6e02:	bf0c      	ite	eq
   e6e04:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   e6e06:	6a39      	ldrne	r1, [r7, #32]
   e6e08:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   e6e0c:	203c      	movs	r0, #60	; 0x3c
   e6e0e:	fb91 f6f3 	sdiv	r6, r1, r3
   e6e12:	fb03 1316 	mls	r3, r3, r6, r1
   e6e16:	6861      	ldr	r1, [r4, #4]
   e6e18:	fb93 f2f0 	sdiv	r2, r3, r0
   e6e1c:	fb00 3012 	mls	r0, r0, r2, r3
   e6e20:	6823      	ldr	r3, [r4, #0]
   e6e22:	1a89      	subs	r1, r1, r2
   e6e24:	68a2      	ldr	r2, [r4, #8]
   e6e26:	6061      	str	r1, [r4, #4]
   e6e28:	1a1b      	subs	r3, r3, r0
   e6e2a:	1b92      	subs	r2, r2, r6
   e6e2c:	2b3b      	cmp	r3, #59	; 0x3b
   e6e2e:	6023      	str	r3, [r4, #0]
   e6e30:	60a2      	str	r2, [r4, #8]
   e6e32:	dd03      	ble.n	e6e3c <localtime_r+0xd8>
   e6e34:	3101      	adds	r1, #1
   e6e36:	6061      	str	r1, [r4, #4]
   e6e38:	3b3c      	subs	r3, #60	; 0x3c
   e6e3a:	e004      	b.n	e6e46 <localtime_r+0xe2>
   e6e3c:	2b00      	cmp	r3, #0
   e6e3e:	da03      	bge.n	e6e48 <localtime_r+0xe4>
   e6e40:	3901      	subs	r1, #1
   e6e42:	6061      	str	r1, [r4, #4]
   e6e44:	333c      	adds	r3, #60	; 0x3c
   e6e46:	6023      	str	r3, [r4, #0]
   e6e48:	6863      	ldr	r3, [r4, #4]
   e6e4a:	2b3b      	cmp	r3, #59	; 0x3b
   e6e4c:	dd03      	ble.n	e6e56 <localtime_r+0xf2>
   e6e4e:	3201      	adds	r2, #1
   e6e50:	60a2      	str	r2, [r4, #8]
   e6e52:	3b3c      	subs	r3, #60	; 0x3c
   e6e54:	e004      	b.n	e6e60 <localtime_r+0xfc>
   e6e56:	2b00      	cmp	r3, #0
   e6e58:	da03      	bge.n	e6e62 <localtime_r+0xfe>
   e6e5a:	3a01      	subs	r2, #1
   e6e5c:	60a2      	str	r2, [r4, #8]
   e6e5e:	333c      	adds	r3, #60	; 0x3c
   e6e60:	6063      	str	r3, [r4, #4]
   e6e62:	68a3      	ldr	r3, [r4, #8]
   e6e64:	2b17      	cmp	r3, #23
   e6e66:	dd22      	ble.n	e6eae <localtime_r+0x14a>
   e6e68:	69e2      	ldr	r2, [r4, #28]
   e6e6a:	3201      	adds	r2, #1
   e6e6c:	61e2      	str	r2, [r4, #28]
   e6e6e:	69a2      	ldr	r2, [r4, #24]
   e6e70:	3201      	adds	r2, #1
   e6e72:	2a06      	cmp	r2, #6
   e6e74:	bfc8      	it	gt
   e6e76:	2200      	movgt	r2, #0
   e6e78:	61a2      	str	r2, [r4, #24]
   e6e7a:	68e2      	ldr	r2, [r4, #12]
   e6e7c:	3b18      	subs	r3, #24
   e6e7e:	3201      	adds	r2, #1
   e6e80:	60a3      	str	r3, [r4, #8]
   e6e82:	6923      	ldr	r3, [r4, #16]
   e6e84:	60e2      	str	r2, [r4, #12]
   e6e86:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   e6e8a:	428a      	cmp	r2, r1
   e6e8c:	dd46      	ble.n	e6f1c <localtime_r+0x1b8>
   e6e8e:	3301      	adds	r3, #1
   e6e90:	2b0c      	cmp	r3, #12
   e6e92:	bf0c      	ite	eq
   e6e94:	6963      	ldreq	r3, [r4, #20]
   e6e96:	6123      	strne	r3, [r4, #16]
   e6e98:	eba2 0201 	sub.w	r2, r2, r1
   e6e9c:	60e2      	str	r2, [r4, #12]
   e6e9e:	bf01      	itttt	eq
   e6ea0:	3301      	addeq	r3, #1
   e6ea2:	2200      	moveq	r2, #0
   e6ea4:	6122      	streq	r2, [r4, #16]
   e6ea6:	6163      	streq	r3, [r4, #20]
   e6ea8:	bf08      	it	eq
   e6eaa:	61e2      	streq	r2, [r4, #28]
   e6eac:	e036      	b.n	e6f1c <localtime_r+0x1b8>
   e6eae:	2b00      	cmp	r3, #0
   e6eb0:	da34      	bge.n	e6f1c <localtime_r+0x1b8>
   e6eb2:	69e2      	ldr	r2, [r4, #28]
   e6eb4:	3a01      	subs	r2, #1
   e6eb6:	61e2      	str	r2, [r4, #28]
   e6eb8:	69a2      	ldr	r2, [r4, #24]
   e6eba:	3a01      	subs	r2, #1
   e6ebc:	bf48      	it	mi
   e6ebe:	2206      	movmi	r2, #6
   e6ec0:	61a2      	str	r2, [r4, #24]
   e6ec2:	68e2      	ldr	r2, [r4, #12]
   e6ec4:	3318      	adds	r3, #24
   e6ec6:	3a01      	subs	r2, #1
   e6ec8:	60e2      	str	r2, [r4, #12]
   e6eca:	60a3      	str	r3, [r4, #8]
   e6ecc:	bb32      	cbnz	r2, e6f1c <localtime_r+0x1b8>
   e6ece:	6923      	ldr	r3, [r4, #16]
   e6ed0:	3b01      	subs	r3, #1
   e6ed2:	d401      	bmi.n	e6ed8 <localtime_r+0x174>
   e6ed4:	6123      	str	r3, [r4, #16]
   e6ed6:	e01d      	b.n	e6f14 <localtime_r+0x1b0>
   e6ed8:	230b      	movs	r3, #11
   e6eda:	6123      	str	r3, [r4, #16]
   e6edc:	6963      	ldr	r3, [r4, #20]
   e6ede:	1e5a      	subs	r2, r3, #1
   e6ee0:	f012 0f03 	tst.w	r2, #3
   e6ee4:	6162      	str	r2, [r4, #20]
   e6ee6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   e6eea:	d105      	bne.n	e6ef8 <localtime_r+0x194>
   e6eec:	2164      	movs	r1, #100	; 0x64
   e6eee:	fb93 f2f1 	sdiv	r2, r3, r1
   e6ef2:	fb01 3212 	mls	r2, r1, r2, r3
   e6ef6:	b94a      	cbnz	r2, e6f0c <localtime_r+0x1a8>
   e6ef8:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e6efc:	fb93 f2f1 	sdiv	r2, r3, r1
   e6f00:	fb01 3312 	mls	r3, r1, r2, r3
   e6f04:	fab3 f383 	clz	r3, r3
   e6f08:	095b      	lsrs	r3, r3, #5
   e6f0a:	e000      	b.n	e6f0e <localtime_r+0x1aa>
   e6f0c:	2301      	movs	r3, #1
   e6f0e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   e6f12:	61e3      	str	r3, [r4, #28]
   e6f14:	6923      	ldr	r3, [r4, #16]
   e6f16:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   e6f1a:	60e3      	str	r3, [r4, #12]
   e6f1c:	f000 f9ff 	bl	e731e <__tz_unlock>
   e6f20:	4620      	mov	r0, r4
   e6f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e6f26:	bf00      	nop
   e6f28:	000eace4 	.word	0x000eace4
   e6f2c:	2003e7e0 	.word	0x2003e7e0

000e6f30 <memcmp>:
   e6f30:	b510      	push	{r4, lr}
   e6f32:	3901      	subs	r1, #1
   e6f34:	4402      	add	r2, r0
   e6f36:	4290      	cmp	r0, r2
   e6f38:	d007      	beq.n	e6f4a <memcmp+0x1a>
   e6f3a:	f810 3b01 	ldrb.w	r3, [r0], #1
   e6f3e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   e6f42:	42a3      	cmp	r3, r4
   e6f44:	d0f7      	beq.n	e6f36 <memcmp+0x6>
   e6f46:	1b18      	subs	r0, r3, r4
   e6f48:	bd10      	pop	{r4, pc}
   e6f4a:	2000      	movs	r0, #0
   e6f4c:	bd10      	pop	{r4, pc}

000e6f4e <memcpy>:
   e6f4e:	b510      	push	{r4, lr}
   e6f50:	1e43      	subs	r3, r0, #1
   e6f52:	440a      	add	r2, r1
   e6f54:	4291      	cmp	r1, r2
   e6f56:	d004      	beq.n	e6f62 <memcpy+0x14>
   e6f58:	f811 4b01 	ldrb.w	r4, [r1], #1
   e6f5c:	f803 4f01 	strb.w	r4, [r3, #1]!
   e6f60:	e7f8      	b.n	e6f54 <memcpy+0x6>
   e6f62:	bd10      	pop	{r4, pc}

000e6f64 <memmove>:
   e6f64:	4288      	cmp	r0, r1
   e6f66:	b510      	push	{r4, lr}
   e6f68:	eb01 0302 	add.w	r3, r1, r2
   e6f6c:	d801      	bhi.n	e6f72 <memmove+0xe>
   e6f6e:	1e42      	subs	r2, r0, #1
   e6f70:	e00b      	b.n	e6f8a <memmove+0x26>
   e6f72:	4298      	cmp	r0, r3
   e6f74:	d2fb      	bcs.n	e6f6e <memmove+0xa>
   e6f76:	1881      	adds	r1, r0, r2
   e6f78:	1ad2      	subs	r2, r2, r3
   e6f7a:	42d3      	cmn	r3, r2
   e6f7c:	d004      	beq.n	e6f88 <memmove+0x24>
   e6f7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   e6f82:	f801 4d01 	strb.w	r4, [r1, #-1]!
   e6f86:	e7f8      	b.n	e6f7a <memmove+0x16>
   e6f88:	bd10      	pop	{r4, pc}
   e6f8a:	4299      	cmp	r1, r3
   e6f8c:	d004      	beq.n	e6f98 <memmove+0x34>
   e6f8e:	f811 4b01 	ldrb.w	r4, [r1], #1
   e6f92:	f802 4f01 	strb.w	r4, [r2, #1]!
   e6f96:	e7f8      	b.n	e6f8a <memmove+0x26>
   e6f98:	bd10      	pop	{r4, pc}

000e6f9a <memset>:
   e6f9a:	4402      	add	r2, r0
   e6f9c:	4603      	mov	r3, r0
   e6f9e:	4293      	cmp	r3, r2
   e6fa0:	d002      	beq.n	e6fa8 <memset+0xe>
   e6fa2:	f803 1b01 	strb.w	r1, [r3], #1
   e6fa6:	e7fa      	b.n	e6f9e <memset+0x4>
   e6fa8:	4770      	bx	lr

000e6faa <_calloc_r>:
   e6faa:	b538      	push	{r3, r4, r5, lr}
   e6fac:	fb02 f401 	mul.w	r4, r2, r1
   e6fb0:	4621      	mov	r1, r4
   e6fb2:	f7fe fa0b 	bl	e53cc <_malloc_r>
   e6fb6:	4605      	mov	r5, r0
   e6fb8:	b118      	cbz	r0, e6fc2 <_calloc_r+0x18>
   e6fba:	4622      	mov	r2, r4
   e6fbc:	2100      	movs	r1, #0
   e6fbe:	f7ff ffec 	bl	e6f9a <memset>
   e6fc2:	4628      	mov	r0, r5
   e6fc4:	bd38      	pop	{r3, r4, r5, pc}
	...

000e6fc8 <srand>:
   e6fc8:	b538      	push	{r3, r4, r5, lr}
   e6fca:	4b12      	ldr	r3, [pc, #72]	; (e7014 <srand+0x4c>)
   e6fcc:	681c      	ldr	r4, [r3, #0]
   e6fce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e6fd0:	4605      	mov	r5, r0
   e6fd2:	b9d3      	cbnz	r3, e700a <srand+0x42>
   e6fd4:	2018      	movs	r0, #24
   e6fd6:	f7fe f9c1 	bl	e535c <malloc>
   e6fda:	f243 330e 	movw	r3, #13070	; 0x330e
   e6fde:	63a0      	str	r0, [r4, #56]	; 0x38
   e6fe0:	8003      	strh	r3, [r0, #0]
   e6fe2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   e6fe6:	8043      	strh	r3, [r0, #2]
   e6fe8:	f241 2334 	movw	r3, #4660	; 0x1234
   e6fec:	8083      	strh	r3, [r0, #4]
   e6fee:	f24e 636d 	movw	r3, #58989	; 0xe66d
   e6ff2:	80c3      	strh	r3, [r0, #6]
   e6ff4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   e6ff8:	8103      	strh	r3, [r0, #8]
   e6ffa:	2305      	movs	r3, #5
   e6ffc:	8143      	strh	r3, [r0, #10]
   e6ffe:	230b      	movs	r3, #11
   e7000:	8183      	strh	r3, [r0, #12]
   e7002:	2201      	movs	r2, #1
   e7004:	2300      	movs	r3, #0
   e7006:	e9c0 2304 	strd	r2, r3, [r0, #16]
   e700a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e700c:	2200      	movs	r2, #0
   e700e:	611d      	str	r5, [r3, #16]
   e7010:	615a      	str	r2, [r3, #20]
   e7012:	bd38      	pop	{r3, r4, r5, pc}
   e7014:	2003af90 	.word	0x2003af90

000e7018 <strcmp>:
   e7018:	f810 2b01 	ldrb.w	r2, [r0], #1
   e701c:	f811 3b01 	ldrb.w	r3, [r1], #1
   e7020:	2a01      	cmp	r2, #1
   e7022:	bf28      	it	cs
   e7024:	429a      	cmpcs	r2, r3
   e7026:	d0f7      	beq.n	e7018 <strcmp>
   e7028:	1ad0      	subs	r0, r2, r3
   e702a:	4770      	bx	lr

000e702c <strcpy>:
   e702c:	4603      	mov	r3, r0
   e702e:	f811 2b01 	ldrb.w	r2, [r1], #1
   e7032:	f803 2b01 	strb.w	r2, [r3], #1
   e7036:	2a00      	cmp	r2, #0
   e7038:	d1f9      	bne.n	e702e <strcpy+0x2>
   e703a:	4770      	bx	lr

000e703c <strlen>:
   e703c:	4603      	mov	r3, r0
   e703e:	f813 2b01 	ldrb.w	r2, [r3], #1
   e7042:	2a00      	cmp	r2, #0
   e7044:	d1fb      	bne.n	e703e <strlen+0x2>
   e7046:	1a18      	subs	r0, r3, r0
   e7048:	3801      	subs	r0, #1
   e704a:	4770      	bx	lr

000e704c <strncmp>:
   e704c:	b530      	push	{r4, r5, lr}
   e704e:	b182      	cbz	r2, e7072 <strncmp+0x26>
   e7050:	1e45      	subs	r5, r0, #1
   e7052:	3901      	subs	r1, #1
   e7054:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   e7058:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   e705c:	42a3      	cmp	r3, r4
   e705e:	d106      	bne.n	e706e <strncmp+0x22>
   e7060:	43ec      	mvns	r4, r5
   e7062:	4414      	add	r4, r2
   e7064:	42e0      	cmn	r0, r4
   e7066:	d001      	beq.n	e706c <strncmp+0x20>
   e7068:	2b00      	cmp	r3, #0
   e706a:	d1f3      	bne.n	e7054 <strncmp+0x8>
   e706c:	461c      	mov	r4, r3
   e706e:	1b18      	subs	r0, r3, r4
   e7070:	bd30      	pop	{r4, r5, pc}
   e7072:	4610      	mov	r0, r2
   e7074:	bd30      	pop	{r4, r5, pc}

000e7076 <strstr>:
   e7076:	b5f0      	push	{r4, r5, r6, r7, lr}
   e7078:	7803      	ldrb	r3, [r0, #0]
   e707a:	b963      	cbnz	r3, e7096 <strstr+0x20>
   e707c:	780b      	ldrb	r3, [r1, #0]
   e707e:	2b00      	cmp	r3, #0
   e7080:	bf18      	it	ne
   e7082:	2000      	movne	r0, #0
   e7084:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e7086:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   e708a:	b162      	cbz	r2, e70a6 <strstr+0x30>
   e708c:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   e7090:	4297      	cmp	r7, r2
   e7092:	4630      	mov	r0, r6
   e7094:	d0f7      	beq.n	e7086 <strstr+0x10>
   e7096:	4603      	mov	r3, r0
   e7098:	1c46      	adds	r6, r0, #1
   e709a:	7800      	ldrb	r0, [r0, #0]
   e709c:	b110      	cbz	r0, e70a4 <strstr+0x2e>
   e709e:	1e4d      	subs	r5, r1, #1
   e70a0:	1e5c      	subs	r4, r3, #1
   e70a2:	e7f0      	b.n	e7086 <strstr+0x10>
   e70a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e70a6:	4618      	mov	r0, r3
   e70a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000e70ac <_strtoul_r>:
   e70ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e70b0:	4680      	mov	r8, r0
   e70b2:	483c      	ldr	r0, [pc, #240]	; (e71a4 <_strtoul_r+0xf8>)
   e70b4:	f8d0 9000 	ldr.w	r9, [r0]
   e70b8:	460e      	mov	r6, r1
   e70ba:	4635      	mov	r5, r6
   e70bc:	f815 4b01 	ldrb.w	r4, [r5], #1
   e70c0:	eb09 0004 	add.w	r0, r9, r4
   e70c4:	7840      	ldrb	r0, [r0, #1]
   e70c6:	f000 0008 	and.w	r0, r0, #8
   e70ca:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   e70ce:	b108      	cbz	r0, e70d4 <_strtoul_r+0x28>
   e70d0:	462e      	mov	r6, r5
   e70d2:	e7f2      	b.n	e70ba <_strtoul_r+0xe>
   e70d4:	2c2d      	cmp	r4, #45	; 0x2d
   e70d6:	d103      	bne.n	e70e0 <_strtoul_r+0x34>
   e70d8:	1cb5      	adds	r5, r6, #2
   e70da:	7874      	ldrb	r4, [r6, #1]
   e70dc:	2701      	movs	r7, #1
   e70de:	e003      	b.n	e70e8 <_strtoul_r+0x3c>
   e70e0:	2c2b      	cmp	r4, #43	; 0x2b
   e70e2:	bf04      	itt	eq
   e70e4:	7874      	ldrbeq	r4, [r6, #1]
   e70e6:	1cb5      	addeq	r5, r6, #2
   e70e8:	b113      	cbz	r3, e70f0 <_strtoul_r+0x44>
   e70ea:	2b10      	cmp	r3, #16
   e70ec:	d10a      	bne.n	e7104 <_strtoul_r+0x58>
   e70ee:	e053      	b.n	e7198 <_strtoul_r+0xec>
   e70f0:	2c30      	cmp	r4, #48	; 0x30
   e70f2:	d14f      	bne.n	e7194 <_strtoul_r+0xe8>
   e70f4:	7828      	ldrb	r0, [r5, #0]
   e70f6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e70fa:	2858      	cmp	r0, #88	; 0x58
   e70fc:	d145      	bne.n	e718a <_strtoul_r+0xde>
   e70fe:	786c      	ldrb	r4, [r5, #1]
   e7100:	2310      	movs	r3, #16
   e7102:	3502      	adds	r5, #2
   e7104:	f04f 3cff 	mov.w	ip, #4294967295
   e7108:	2600      	movs	r6, #0
   e710a:	fbbc fcf3 	udiv	ip, ip, r3
   e710e:	fb03 fa0c 	mul.w	sl, r3, ip
   e7112:	ea6f 0a0a 	mvn.w	sl, sl
   e7116:	4630      	mov	r0, r6
   e7118:	eb09 0e04 	add.w	lr, r9, r4
   e711c:	f89e e001 	ldrb.w	lr, [lr, #1]
   e7120:	f01e 0f04 	tst.w	lr, #4
   e7124:	d001      	beq.n	e712a <_strtoul_r+0x7e>
   e7126:	3c30      	subs	r4, #48	; 0x30
   e7128:	e00b      	b.n	e7142 <_strtoul_r+0x96>
   e712a:	f01e 0e03 	ands.w	lr, lr, #3
   e712e:	d01a      	beq.n	e7166 <_strtoul_r+0xba>
   e7130:	f1be 0f01 	cmp.w	lr, #1
   e7134:	bf0c      	ite	eq
   e7136:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   e713a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   e713e:	ebce 0404 	rsb	r4, lr, r4
   e7142:	42a3      	cmp	r3, r4
   e7144:	dd0f      	ble.n	e7166 <_strtoul_r+0xba>
   e7146:	2e00      	cmp	r6, #0
   e7148:	db08      	blt.n	e715c <_strtoul_r+0xb0>
   e714a:	4560      	cmp	r0, ip
   e714c:	d806      	bhi.n	e715c <_strtoul_r+0xb0>
   e714e:	d101      	bne.n	e7154 <_strtoul_r+0xa8>
   e7150:	4554      	cmp	r4, sl
   e7152:	dc03      	bgt.n	e715c <_strtoul_r+0xb0>
   e7154:	fb03 4000 	mla	r0, r3, r0, r4
   e7158:	2601      	movs	r6, #1
   e715a:	e001      	b.n	e7160 <_strtoul_r+0xb4>
   e715c:	f04f 36ff 	mov.w	r6, #4294967295
   e7160:	f815 4b01 	ldrb.w	r4, [r5], #1
   e7164:	e7d8      	b.n	e7118 <_strtoul_r+0x6c>
   e7166:	2e00      	cmp	r6, #0
   e7168:	da07      	bge.n	e717a <_strtoul_r+0xce>
   e716a:	2322      	movs	r3, #34	; 0x22
   e716c:	f8c8 3000 	str.w	r3, [r8]
   e7170:	f04f 30ff 	mov.w	r0, #4294967295
   e7174:	b92a      	cbnz	r2, e7182 <_strtoul_r+0xd6>
   e7176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e717a:	b107      	cbz	r7, e717e <_strtoul_r+0xd2>
   e717c:	4240      	negs	r0, r0
   e717e:	b172      	cbz	r2, e719e <_strtoul_r+0xf2>
   e7180:	b106      	cbz	r6, e7184 <_strtoul_r+0xd8>
   e7182:	1e69      	subs	r1, r5, #1
   e7184:	6011      	str	r1, [r2, #0]
   e7186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e718a:	2430      	movs	r4, #48	; 0x30
   e718c:	2b00      	cmp	r3, #0
   e718e:	d1b9      	bne.n	e7104 <_strtoul_r+0x58>
   e7190:	2308      	movs	r3, #8
   e7192:	e7b7      	b.n	e7104 <_strtoul_r+0x58>
   e7194:	230a      	movs	r3, #10
   e7196:	e7b5      	b.n	e7104 <_strtoul_r+0x58>
   e7198:	2c30      	cmp	r4, #48	; 0x30
   e719a:	d0ab      	beq.n	e70f4 <_strtoul_r+0x48>
   e719c:	e7b2      	b.n	e7104 <_strtoul_r+0x58>
   e719e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e71a2:	bf00      	nop
   e71a4:	2003af2c 	.word	0x2003af2c

000e71a8 <strtoul>:
   e71a8:	4613      	mov	r3, r2
   e71aa:	460a      	mov	r2, r1
   e71ac:	4601      	mov	r1, r0
   e71ae:	4802      	ldr	r0, [pc, #8]	; (e71b8 <strtoul+0x10>)
   e71b0:	6800      	ldr	r0, [r0, #0]
   e71b2:	f7ff bf7b 	b.w	e70ac <_strtoul_r>
   e71b6:	bf00      	nop
   e71b8:	2003af90 	.word	0x2003af90

000e71bc <gettimeofday>:
   e71bc:	4b02      	ldr	r3, [pc, #8]	; (e71c8 <gettimeofday+0xc>)
   e71be:	460a      	mov	r2, r1
   e71c0:	4601      	mov	r1, r0
   e71c2:	6818      	ldr	r0, [r3, #0]
   e71c4:	f000 ba76 	b.w	e76b4 <_gettimeofday_r>
   e71c8:	2003af90 	.word	0x2003af90

000e71cc <__tzcalc_limits>:
   e71cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e71d0:	4604      	mov	r4, r0
   e71d2:	f000 fa81 	bl	e76d8 <__gettzinfo>
   e71d6:	f240 73b1 	movw	r3, #1969	; 0x7b1
   e71da:	429c      	cmp	r4, r3
   e71dc:	f340 8096 	ble.w	e730c <__tzcalc_limits+0x140>
   e71e0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   e71e4:	18e3      	adds	r3, r4, r3
   e71e6:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   e71ea:	109b      	asrs	r3, r3, #2
   e71ec:	f240 156d 	movw	r5, #365	; 0x16d
   e71f0:	fb05 3502 	mla	r5, r5, r2, r3
   e71f4:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   e71f8:	f06f 0363 	mvn.w	r3, #99	; 0x63
   e71fc:	fb92 f3f3 	sdiv	r3, r2, r3
   e7200:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   e7204:	442b      	add	r3, r5
   e7206:	18a5      	adds	r5, r4, r2
   e7208:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e720c:	fb95 f5f2 	sdiv	r5, r5, r2
   e7210:	441d      	add	r5, r3
   e7212:	2364      	movs	r3, #100	; 0x64
   e7214:	fb94 f7f2 	sdiv	r7, r4, r2
   e7218:	fb94 f6f3 	sdiv	r6, r4, r3
   e721c:	fb02 4717 	mls	r7, r2, r7, r4
   e7220:	fb03 4616 	mls	r6, r3, r6, r4
   e7224:	f100 0338 	add.w	r3, r0, #56	; 0x38
   e7228:	fab7 fe87 	clz	lr, r7
   e722c:	9301      	str	r3, [sp, #4]
   e722e:	f004 0303 	and.w	r3, r4, #3
   e7232:	6044      	str	r4, [r0, #4]
   e7234:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   e7238:	4601      	mov	r1, r0
   e723a:	9300      	str	r3, [sp, #0]
   e723c:	f04f 0c07 	mov.w	ip, #7
   e7240:	7a0b      	ldrb	r3, [r1, #8]
   e7242:	2b4a      	cmp	r3, #74	; 0x4a
   e7244:	d10e      	bne.n	e7264 <__tzcalc_limits+0x98>
   e7246:	694b      	ldr	r3, [r1, #20]
   e7248:	9a00      	ldr	r2, [sp, #0]
   e724a:	18ec      	adds	r4, r5, r3
   e724c:	b902      	cbnz	r2, e7250 <__tzcalc_limits+0x84>
   e724e:	b906      	cbnz	r6, e7252 <__tzcalc_limits+0x86>
   e7250:	b927      	cbnz	r7, e725c <__tzcalc_limits+0x90>
   e7252:	2b3b      	cmp	r3, #59	; 0x3b
   e7254:	bfd4      	ite	le
   e7256:	2300      	movle	r3, #0
   e7258:	2301      	movgt	r3, #1
   e725a:	e000      	b.n	e725e <__tzcalc_limits+0x92>
   e725c:	2300      	movs	r3, #0
   e725e:	4423      	add	r3, r4
   e7260:	3b01      	subs	r3, #1
   e7262:	e03f      	b.n	e72e4 <__tzcalc_limits+0x118>
   e7264:	2b44      	cmp	r3, #68	; 0x44
   e7266:	d102      	bne.n	e726e <__tzcalc_limits+0xa2>
   e7268:	694b      	ldr	r3, [r1, #20]
   e726a:	442b      	add	r3, r5
   e726c:	e03a      	b.n	e72e4 <__tzcalc_limits+0x118>
   e726e:	9b00      	ldr	r3, [sp, #0]
   e7270:	b92b      	cbnz	r3, e727e <__tzcalc_limits+0xb2>
   e7272:	2e00      	cmp	r6, #0
   e7274:	bf0c      	ite	eq
   e7276:	46f0      	moveq	r8, lr
   e7278:	f04f 0801 	movne.w	r8, #1
   e727c:	e000      	b.n	e7280 <__tzcalc_limits+0xb4>
   e727e:	46f0      	mov	r8, lr
   e7280:	4b24      	ldr	r3, [pc, #144]	; (e7314 <__tzcalc_limits+0x148>)
   e7282:	68cc      	ldr	r4, [r1, #12]
   e7284:	2230      	movs	r2, #48	; 0x30
   e7286:	fb02 3808 	mla	r8, r2, r8, r3
   e728a:	f1a8 0a04 	sub.w	sl, r8, #4
   e728e:	46a9      	mov	r9, r5
   e7290:	2301      	movs	r3, #1
   e7292:	42a3      	cmp	r3, r4
   e7294:	da04      	bge.n	e72a0 <__tzcalc_limits+0xd4>
   e7296:	f85a bf04 	ldr.w	fp, [sl, #4]!
   e729a:	3301      	adds	r3, #1
   e729c:	44d9      	add	r9, fp
   e729e:	e7f8      	b.n	e7292 <__tzcalc_limits+0xc6>
   e72a0:	f109 0304 	add.w	r3, r9, #4
   e72a4:	fb93 fbfc 	sdiv	fp, r3, ip
   e72a8:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   e72ac:	2c01      	cmp	r4, #1
   e72ae:	ebca 0a03 	rsb	sl, sl, r3
   e72b2:	694b      	ldr	r3, [r1, #20]
   e72b4:	bfb8      	it	lt
   e72b6:	2401      	movlt	r4, #1
   e72b8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   e72bc:	ebb3 0a0a 	subs.w	sl, r3, sl
   e72c0:	690b      	ldr	r3, [r1, #16]
   e72c2:	f104 34ff 	add.w	r4, r4, #4294967295
   e72c6:	f103 33ff 	add.w	r3, r3, #4294967295
   e72ca:	bf48      	it	mi
   e72cc:	f10a 0a07 	addmi.w	sl, sl, #7
   e72d0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e72d4:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   e72d8:	4453      	add	r3, sl
   e72da:	42a3      	cmp	r3, r4
   e72dc:	db01      	blt.n	e72e2 <__tzcalc_limits+0x116>
   e72de:	3b07      	subs	r3, #7
   e72e0:	e7fb      	b.n	e72da <__tzcalc_limits+0x10e>
   e72e2:	444b      	add	r3, r9
   e72e4:	698c      	ldr	r4, [r1, #24]
   e72e6:	4a0c      	ldr	r2, [pc, #48]	; (e7318 <__tzcalc_limits+0x14c>)
   e72e8:	fb02 4303 	mla	r3, r2, r3, r4
   e72ec:	6a0c      	ldr	r4, [r1, #32]
   e72ee:	4423      	add	r3, r4
   e72f0:	f841 3f1c 	str.w	r3, [r1, #28]!
   e72f4:	9b01      	ldr	r3, [sp, #4]
   e72f6:	4299      	cmp	r1, r3
   e72f8:	d1a2      	bne.n	e7240 <__tzcalc_limits+0x74>
   e72fa:	69c3      	ldr	r3, [r0, #28]
   e72fc:	6b82      	ldr	r2, [r0, #56]	; 0x38
   e72fe:	4293      	cmp	r3, r2
   e7300:	bfac      	ite	ge
   e7302:	2300      	movge	r3, #0
   e7304:	2301      	movlt	r3, #1
   e7306:	6003      	str	r3, [r0, #0]
   e7308:	2001      	movs	r0, #1
   e730a:	e000      	b.n	e730e <__tzcalc_limits+0x142>
   e730c:	2000      	movs	r0, #0
   e730e:	b003      	add	sp, #12
   e7310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e7314:	000eace4 	.word	0x000eace4
   e7318:	00015180 	.word	0x00015180

000e731c <__tz_lock>:
   e731c:	4770      	bx	lr

000e731e <__tz_unlock>:
   e731e:	4770      	bx	lr

000e7320 <_tzset_unlocked>:
   e7320:	4b01      	ldr	r3, [pc, #4]	; (e7328 <_tzset_unlocked+0x8>)
   e7322:	6818      	ldr	r0, [r3, #0]
   e7324:	f000 b802 	b.w	e732c <_tzset_unlocked_r>
   e7328:	2003af90 	.word	0x2003af90

000e732c <_tzset_unlocked_r>:
   e732c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e7330:	b08d      	sub	sp, #52	; 0x34
   e7332:	4607      	mov	r7, r0
   e7334:	f000 f9d0 	bl	e76d8 <__gettzinfo>
   e7338:	49b0      	ldr	r1, [pc, #704]	; (e75fc <_tzset_unlocked_r+0x2d0>)
   e733a:	4eb1      	ldr	r6, [pc, #708]	; (e7600 <_tzset_unlocked_r+0x2d4>)
   e733c:	4604      	mov	r4, r0
   e733e:	4638      	mov	r0, r7
   e7340:	f000 f9b0 	bl	e76a4 <_getenv_r>
   e7344:	4605      	mov	r5, r0
   e7346:	b960      	cbnz	r0, e7362 <_tzset_unlocked_r+0x36>
   e7348:	4bae      	ldr	r3, [pc, #696]	; (e7604 <_tzset_unlocked_r+0x2d8>)
   e734a:	4aaf      	ldr	r2, [pc, #700]	; (e7608 <_tzset_unlocked_r+0x2dc>)
   e734c:	6018      	str	r0, [r3, #0]
   e734e:	4baf      	ldr	r3, [pc, #700]	; (e760c <_tzset_unlocked_r+0x2e0>)
   e7350:	6018      	str	r0, [r3, #0]
   e7352:	4baf      	ldr	r3, [pc, #700]	; (e7610 <_tzset_unlocked_r+0x2e4>)
   e7354:	6830      	ldr	r0, [r6, #0]
   e7356:	601a      	str	r2, [r3, #0]
   e7358:	605a      	str	r2, [r3, #4]
   e735a:	f7fe f807 	bl	e536c <free>
   e735e:	6035      	str	r5, [r6, #0]
   e7360:	e148      	b.n	e75f4 <_tzset_unlocked_r+0x2c8>
   e7362:	6831      	ldr	r1, [r6, #0]
   e7364:	b979      	cbnz	r1, e7386 <_tzset_unlocked_r+0x5a>
   e7366:	6830      	ldr	r0, [r6, #0]
   e7368:	f7fe f800 	bl	e536c <free>
   e736c:	4628      	mov	r0, r5
   e736e:	f7ff fe65 	bl	e703c <strlen>
   e7372:	1c41      	adds	r1, r0, #1
   e7374:	4638      	mov	r0, r7
   e7376:	f7fe f829 	bl	e53cc <_malloc_r>
   e737a:	6030      	str	r0, [r6, #0]
   e737c:	b148      	cbz	r0, e7392 <_tzset_unlocked_r+0x66>
   e737e:	4629      	mov	r1, r5
   e7380:	f7ff fe54 	bl	e702c <strcpy>
   e7384:	e005      	b.n	e7392 <_tzset_unlocked_r+0x66>
   e7386:	f7ff fe47 	bl	e7018 <strcmp>
   e738a:	2800      	cmp	r0, #0
   e738c:	f000 8132 	beq.w	e75f4 <_tzset_unlocked_r+0x2c8>
   e7390:	e7e9      	b.n	e7366 <_tzset_unlocked_r+0x3a>
   e7392:	782b      	ldrb	r3, [r5, #0]
   e7394:	4a9f      	ldr	r2, [pc, #636]	; (e7614 <_tzset_unlocked_r+0x2e8>)
   e7396:	49a0      	ldr	r1, [pc, #640]	; (e7618 <_tzset_unlocked_r+0x2ec>)
   e7398:	2b3a      	cmp	r3, #58	; 0x3a
   e739a:	bf08      	it	eq
   e739c:	3501      	addeq	r5, #1
   e739e:	ae0a      	add	r6, sp, #40	; 0x28
   e73a0:	4633      	mov	r3, r6
   e73a2:	4628      	mov	r0, r5
   e73a4:	f7fe f802 	bl	e53ac <siscanf>
   e73a8:	2800      	cmp	r0, #0
   e73aa:	f340 8123 	ble.w	e75f4 <_tzset_unlocked_r+0x2c8>
   e73ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e73b0:	18ef      	adds	r7, r5, r3
   e73b2:	5ceb      	ldrb	r3, [r5, r3]
   e73b4:	2b2d      	cmp	r3, #45	; 0x2d
   e73b6:	d103      	bne.n	e73c0 <_tzset_unlocked_r+0x94>
   e73b8:	3701      	adds	r7, #1
   e73ba:	f04f 35ff 	mov.w	r5, #4294967295
   e73be:	e003      	b.n	e73c8 <_tzset_unlocked_r+0x9c>
   e73c0:	2b2b      	cmp	r3, #43	; 0x2b
   e73c2:	bf08      	it	eq
   e73c4:	3701      	addeq	r7, #1
   e73c6:	2501      	movs	r5, #1
   e73c8:	f10d 0a20 	add.w	sl, sp, #32
   e73cc:	f10d 0b1e 	add.w	fp, sp, #30
   e73d0:	f04f 0800 	mov.w	r8, #0
   e73d4:	9603      	str	r6, [sp, #12]
   e73d6:	f8cd a008 	str.w	sl, [sp, #8]
   e73da:	9601      	str	r6, [sp, #4]
   e73dc:	f8cd b000 	str.w	fp, [sp]
   e73e0:	4633      	mov	r3, r6
   e73e2:	aa07      	add	r2, sp, #28
   e73e4:	498d      	ldr	r1, [pc, #564]	; (e761c <_tzset_unlocked_r+0x2f0>)
   e73e6:	f8ad 801e 	strh.w	r8, [sp, #30]
   e73ea:	4638      	mov	r0, r7
   e73ec:	f8ad 8020 	strh.w	r8, [sp, #32]
   e73f0:	f7fd ffdc 	bl	e53ac <siscanf>
   e73f4:	4540      	cmp	r0, r8
   e73f6:	f340 80fd 	ble.w	e75f4 <_tzset_unlocked_r+0x2c8>
   e73fa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e73fe:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e7402:	f8df 9224 	ldr.w	r9, [pc, #548]	; e7628 <_tzset_unlocked_r+0x2fc>
   e7406:	213c      	movs	r1, #60	; 0x3c
   e7408:	fb01 3302 	mla	r3, r1, r2, r3
   e740c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e7410:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e7414:	fb01 3302 	mla	r3, r1, r2, r3
   e7418:	435d      	muls	r5, r3
   e741a:	6225      	str	r5, [r4, #32]
   e741c:	4d7c      	ldr	r5, [pc, #496]	; (e7610 <_tzset_unlocked_r+0x2e4>)
   e741e:	4b7d      	ldr	r3, [pc, #500]	; (e7614 <_tzset_unlocked_r+0x2e8>)
   e7420:	602b      	str	r3, [r5, #0]
   e7422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e7424:	497c      	ldr	r1, [pc, #496]	; (e7618 <_tzset_unlocked_r+0x2ec>)
   e7426:	441f      	add	r7, r3
   e7428:	464a      	mov	r2, r9
   e742a:	4633      	mov	r3, r6
   e742c:	4638      	mov	r0, r7
   e742e:	f7fd ffbd 	bl	e53ac <siscanf>
   e7432:	4540      	cmp	r0, r8
   e7434:	dc08      	bgt.n	e7448 <_tzset_unlocked_r+0x11c>
   e7436:	682b      	ldr	r3, [r5, #0]
   e7438:	606b      	str	r3, [r5, #4]
   e743a:	4b72      	ldr	r3, [pc, #456]	; (e7604 <_tzset_unlocked_r+0x2d8>)
   e743c:	6a22      	ldr	r2, [r4, #32]
   e743e:	601a      	str	r2, [r3, #0]
   e7440:	4b72      	ldr	r3, [pc, #456]	; (e760c <_tzset_unlocked_r+0x2e0>)
   e7442:	f8c3 8000 	str.w	r8, [r3]
   e7446:	e0d5      	b.n	e75f4 <_tzset_unlocked_r+0x2c8>
   e7448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e744a:	f8c5 9004 	str.w	r9, [r5, #4]
   e744e:	18fd      	adds	r5, r7, r3
   e7450:	5cfb      	ldrb	r3, [r7, r3]
   e7452:	2b2d      	cmp	r3, #45	; 0x2d
   e7454:	d103      	bne.n	e745e <_tzset_unlocked_r+0x132>
   e7456:	3501      	adds	r5, #1
   e7458:	f04f 37ff 	mov.w	r7, #4294967295
   e745c:	e003      	b.n	e7466 <_tzset_unlocked_r+0x13a>
   e745e:	2b2b      	cmp	r3, #43	; 0x2b
   e7460:	bf08      	it	eq
   e7462:	3501      	addeq	r5, #1
   e7464:	2701      	movs	r7, #1
   e7466:	2300      	movs	r3, #0
   e7468:	f8ad 301c 	strh.w	r3, [sp, #28]
   e746c:	f8ad 301e 	strh.w	r3, [sp, #30]
   e7470:	f8ad 3020 	strh.w	r3, [sp, #32]
   e7474:	930a      	str	r3, [sp, #40]	; 0x28
   e7476:	9603      	str	r6, [sp, #12]
   e7478:	f8cd a008 	str.w	sl, [sp, #8]
   e747c:	9601      	str	r6, [sp, #4]
   e747e:	f8cd b000 	str.w	fp, [sp]
   e7482:	4633      	mov	r3, r6
   e7484:	aa07      	add	r2, sp, #28
   e7486:	4965      	ldr	r1, [pc, #404]	; (e761c <_tzset_unlocked_r+0x2f0>)
   e7488:	4628      	mov	r0, r5
   e748a:	f7fd ff8f 	bl	e53ac <siscanf>
   e748e:	2800      	cmp	r0, #0
   e7490:	dc04      	bgt.n	e749c <_tzset_unlocked_r+0x170>
   e7492:	6a23      	ldr	r3, [r4, #32]
   e7494:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   e7498:	63e3      	str	r3, [r4, #60]	; 0x3c
   e749a:	e00e      	b.n	e74ba <_tzset_unlocked_r+0x18e>
   e749c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e74a0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e74a4:	213c      	movs	r1, #60	; 0x3c
   e74a6:	fb01 3302 	mla	r3, r1, r2, r3
   e74aa:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e74ae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e74b2:	fb01 3302 	mla	r3, r1, r2, r3
   e74b6:	435f      	muls	r7, r3
   e74b8:	63e7      	str	r7, [r4, #60]	; 0x3c
   e74ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e74bc:	4627      	mov	r7, r4
   e74be:	441d      	add	r5, r3
   e74c0:	f04f 0900 	mov.w	r9, #0
   e74c4:	782b      	ldrb	r3, [r5, #0]
   e74c6:	2b2c      	cmp	r3, #44	; 0x2c
   e74c8:	bf08      	it	eq
   e74ca:	3501      	addeq	r5, #1
   e74cc:	f895 8000 	ldrb.w	r8, [r5]
   e74d0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   e74d4:	d126      	bne.n	e7524 <_tzset_unlocked_r+0x1f8>
   e74d6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   e74da:	9302      	str	r3, [sp, #8]
   e74dc:	ab09      	add	r3, sp, #36	; 0x24
   e74de:	9300      	str	r3, [sp, #0]
   e74e0:	9603      	str	r6, [sp, #12]
   e74e2:	9601      	str	r6, [sp, #4]
   e74e4:	4633      	mov	r3, r6
   e74e6:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   e74ea:	494d      	ldr	r1, [pc, #308]	; (e7620 <_tzset_unlocked_r+0x2f4>)
   e74ec:	4628      	mov	r0, r5
   e74ee:	f7fd ff5d 	bl	e53ac <siscanf>
   e74f2:	2803      	cmp	r0, #3
   e74f4:	d17e      	bne.n	e75f4 <_tzset_unlocked_r+0x2c8>
   e74f6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   e74fa:	1e4b      	subs	r3, r1, #1
   e74fc:	2b0b      	cmp	r3, #11
   e74fe:	d879      	bhi.n	e75f4 <_tzset_unlocked_r+0x2c8>
   e7500:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   e7504:	1e53      	subs	r3, r2, #1
   e7506:	2b04      	cmp	r3, #4
   e7508:	d874      	bhi.n	e75f4 <_tzset_unlocked_r+0x2c8>
   e750a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   e750e:	2b06      	cmp	r3, #6
   e7510:	d870      	bhi.n	e75f4 <_tzset_unlocked_r+0x2c8>
   e7512:	f887 8008 	strb.w	r8, [r7, #8]
   e7516:	60f9      	str	r1, [r7, #12]
   e7518:	613a      	str	r2, [r7, #16]
   e751a:	617b      	str	r3, [r7, #20]
   e751c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e751e:	eb05 0803 	add.w	r8, r5, r3
   e7522:	e02a      	b.n	e757a <_tzset_unlocked_r+0x24e>
   e7524:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   e7528:	bf06      	itte	eq
   e752a:	3501      	addeq	r5, #1
   e752c:	4643      	moveq	r3, r8
   e752e:	2344      	movne	r3, #68	; 0x44
   e7530:	220a      	movs	r2, #10
   e7532:	a90b      	add	r1, sp, #44	; 0x2c
   e7534:	4628      	mov	r0, r5
   e7536:	9305      	str	r3, [sp, #20]
   e7538:	f7ff fe36 	bl	e71a8 <strtoul>
   e753c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   e7540:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   e7544:	4545      	cmp	r5, r8
   e7546:	9b05      	ldr	r3, [sp, #20]
   e7548:	d114      	bne.n	e7574 <_tzset_unlocked_r+0x248>
   e754a:	234d      	movs	r3, #77	; 0x4d
   e754c:	f1b9 0f00 	cmp.w	r9, #0
   e7550:	d107      	bne.n	e7562 <_tzset_unlocked_r+0x236>
   e7552:	7223      	strb	r3, [r4, #8]
   e7554:	2303      	movs	r3, #3
   e7556:	60e3      	str	r3, [r4, #12]
   e7558:	2302      	movs	r3, #2
   e755a:	6123      	str	r3, [r4, #16]
   e755c:	f8c4 9014 	str.w	r9, [r4, #20]
   e7560:	e00b      	b.n	e757a <_tzset_unlocked_r+0x24e>
   e7562:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   e7566:	230b      	movs	r3, #11
   e7568:	62a3      	str	r3, [r4, #40]	; 0x28
   e756a:	2301      	movs	r3, #1
   e756c:	62e3      	str	r3, [r4, #44]	; 0x2c
   e756e:	2300      	movs	r3, #0
   e7570:	6323      	str	r3, [r4, #48]	; 0x30
   e7572:	e002      	b.n	e757a <_tzset_unlocked_r+0x24e>
   e7574:	b280      	uxth	r0, r0
   e7576:	723b      	strb	r3, [r7, #8]
   e7578:	6178      	str	r0, [r7, #20]
   e757a:	2302      	movs	r3, #2
   e757c:	f8ad 301c 	strh.w	r3, [sp, #28]
   e7580:	2300      	movs	r3, #0
   e7582:	f8ad 301e 	strh.w	r3, [sp, #30]
   e7586:	f8ad 3020 	strh.w	r3, [sp, #32]
   e758a:	930a      	str	r3, [sp, #40]	; 0x28
   e758c:	f898 3000 	ldrb.w	r3, [r8]
   e7590:	2b2f      	cmp	r3, #47	; 0x2f
   e7592:	d10b      	bne.n	e75ac <_tzset_unlocked_r+0x280>
   e7594:	9603      	str	r6, [sp, #12]
   e7596:	f8cd a008 	str.w	sl, [sp, #8]
   e759a:	9601      	str	r6, [sp, #4]
   e759c:	f8cd b000 	str.w	fp, [sp]
   e75a0:	4633      	mov	r3, r6
   e75a2:	aa07      	add	r2, sp, #28
   e75a4:	491f      	ldr	r1, [pc, #124]	; (e7624 <_tzset_unlocked_r+0x2f8>)
   e75a6:	4640      	mov	r0, r8
   e75a8:	f7fd ff00 	bl	e53ac <siscanf>
   e75ac:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e75b0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e75b4:	213c      	movs	r1, #60	; 0x3c
   e75b6:	fb01 3302 	mla	r3, r1, r2, r3
   e75ba:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e75be:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e75c2:	fb01 3302 	mla	r3, r1, r2, r3
   e75c6:	61bb      	str	r3, [r7, #24]
   e75c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   e75ca:	f109 0901 	add.w	r9, r9, #1
   e75ce:	f1b9 0f02 	cmp.w	r9, #2
   e75d2:	4445      	add	r5, r8
   e75d4:	f107 071c 	add.w	r7, r7, #28
   e75d8:	f47f af74 	bne.w	e74c4 <_tzset_unlocked_r+0x198>
   e75dc:	6860      	ldr	r0, [r4, #4]
   e75de:	f7ff fdf5 	bl	e71cc <__tzcalc_limits>
   e75e2:	4b08      	ldr	r3, [pc, #32]	; (e7604 <_tzset_unlocked_r+0x2d8>)
   e75e4:	6a22      	ldr	r2, [r4, #32]
   e75e6:	601a      	str	r2, [r3, #0]
   e75e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e75ea:	1a9b      	subs	r3, r3, r2
   e75ec:	4a07      	ldr	r2, [pc, #28]	; (e760c <_tzset_unlocked_r+0x2e0>)
   e75ee:	bf18      	it	ne
   e75f0:	2301      	movne	r3, #1
   e75f2:	6013      	str	r3, [r2, #0]
   e75f4:	b00d      	add	sp, #52	; 0x34
   e75f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e75fa:	bf00      	nop
   e75fc:	000ead44 	.word	0x000ead44
   e7600:	2003e7dc 	.word	0x2003e7dc
   e7604:	2003e7e4 	.word	0x2003e7e4
   e7608:	000ead47 	.word	0x000ead47
   e760c:	2003e7e0 	.word	0x2003e7e0
   e7610:	2003af94 	.word	0x2003af94
   e7614:	2003e7cf 	.word	0x2003e7cf
   e7618:	000ead4b 	.word	0x000ead4b
   e761c:	000ead6e 	.word	0x000ead6e
   e7620:	000ead5a 	.word	0x000ead5a
   e7624:	000ead6d 	.word	0x000ead6d
   e7628:	2003e7c4 	.word	0x2003e7c4

000e762c <_findenv_r>:
   e762c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e7630:	4607      	mov	r7, r0
   e7632:	468b      	mov	fp, r1
   e7634:	4690      	mov	r8, r2
   e7636:	f000 f8eb 	bl	e7810 <__env_lock>
   e763a:	4b19      	ldr	r3, [pc, #100]	; (e76a0 <_findenv_r+0x74>)
   e763c:	681d      	ldr	r5, [r3, #0]
   e763e:	469a      	mov	sl, r3
   e7640:	b13d      	cbz	r5, e7652 <_findenv_r+0x26>
   e7642:	465c      	mov	r4, fp
   e7644:	4623      	mov	r3, r4
   e7646:	f813 2b01 	ldrb.w	r2, [r3], #1
   e764a:	b142      	cbz	r2, e765e <_findenv_r+0x32>
   e764c:	2a3d      	cmp	r2, #61	; 0x3d
   e764e:	461c      	mov	r4, r3
   e7650:	d1f8      	bne.n	e7644 <_findenv_r+0x18>
   e7652:	4638      	mov	r0, r7
   e7654:	f000 f8dd 	bl	e7812 <__env_unlock>
   e7658:	2000      	movs	r0, #0
   e765a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e765e:	ebcb 0404 	rsb	r4, fp, r4
   e7662:	46a9      	mov	r9, r5
   e7664:	f859 0b04 	ldr.w	r0, [r9], #4
   e7668:	2800      	cmp	r0, #0
   e766a:	d0f2      	beq.n	e7652 <_findenv_r+0x26>
   e766c:	4622      	mov	r2, r4
   e766e:	4659      	mov	r1, fp
   e7670:	f7ff fcec 	bl	e704c <strncmp>
   e7674:	b988      	cbnz	r0, e769a <_findenv_r+0x6e>
   e7676:	f859 3c04 	ldr.w	r3, [r9, #-4]
   e767a:	191e      	adds	r6, r3, r4
   e767c:	5d1b      	ldrb	r3, [r3, r4]
   e767e:	2b3d      	cmp	r3, #61	; 0x3d
   e7680:	d10b      	bne.n	e769a <_findenv_r+0x6e>
   e7682:	f8da 3000 	ldr.w	r3, [sl]
   e7686:	1aed      	subs	r5, r5, r3
   e7688:	10ad      	asrs	r5, r5, #2
   e768a:	4638      	mov	r0, r7
   e768c:	f8c8 5000 	str.w	r5, [r8]
   e7690:	f000 f8bf 	bl	e7812 <__env_unlock>
   e7694:	1c70      	adds	r0, r6, #1
   e7696:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e769a:	464d      	mov	r5, r9
   e769c:	e7e1      	b.n	e7662 <_findenv_r+0x36>
   e769e:	bf00      	nop
   e76a0:	2003afdc 	.word	0x2003afdc

000e76a4 <_getenv_r>:
   e76a4:	b507      	push	{r0, r1, r2, lr}
   e76a6:	aa01      	add	r2, sp, #4
   e76a8:	f7ff ffc0 	bl	e762c <_findenv_r>
   e76ac:	b003      	add	sp, #12
   e76ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000e76b4 <_gettimeofday_r>:
   e76b4:	b538      	push	{r3, r4, r5, lr}
   e76b6:	4c07      	ldr	r4, [pc, #28]	; (e76d4 <_gettimeofday_r+0x20>)
   e76b8:	2300      	movs	r3, #0
   e76ba:	4605      	mov	r5, r0
   e76bc:	4608      	mov	r0, r1
   e76be:	4611      	mov	r1, r2
   e76c0:	6023      	str	r3, [r4, #0]
   e76c2:	f7f2 ff2b 	bl	da51c <_gettimeofday>
   e76c6:	1c43      	adds	r3, r0, #1
   e76c8:	d102      	bne.n	e76d0 <_gettimeofday_r+0x1c>
   e76ca:	6823      	ldr	r3, [r4, #0]
   e76cc:	b103      	cbz	r3, e76d0 <_gettimeofday_r+0x1c>
   e76ce:	602b      	str	r3, [r5, #0]
   e76d0:	bd38      	pop	{r3, r4, r5, pc}
   e76d2:	bf00      	nop
   e76d4:	2003e7ec 	.word	0x2003e7ec

000e76d8 <__gettzinfo>:
   e76d8:	4800      	ldr	r0, [pc, #0]	; (e76dc <__gettzinfo+0x4>)
   e76da:	4770      	bx	lr
   e76dc:	2003af9c 	.word	0x2003af9c

000e76e0 <gmtime_r>:
   e76e0:	6802      	ldr	r2, [r0, #0]
   e76e2:	4b47      	ldr	r3, [pc, #284]	; (e7800 <gmtime_r+0x120>)
   e76e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   e76e6:	fb92 f4f3 	sdiv	r4, r2, r3
   e76ea:	fb03 2214 	mls	r2, r3, r4, r2
   e76ee:	2a00      	cmp	r2, #0
   e76f0:	bfbc      	itt	lt
   e76f2:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   e76f6:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   e76fa:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   e76fe:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   e7702:	fb92 f3f0 	sdiv	r3, r2, r0
   e7706:	fb00 2213 	mls	r2, r0, r3, r2
   e770a:	f04f 003c 	mov.w	r0, #60	; 0x3c
   e770e:	bfac      	ite	ge
   e7710:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   e7714:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   e7718:	608b      	str	r3, [r1, #8]
   e771a:	fb92 f3f0 	sdiv	r3, r2, r0
   e771e:	fb00 2213 	mls	r2, r0, r3, r2
   e7722:	604b      	str	r3, [r1, #4]
   e7724:	600a      	str	r2, [r1, #0]
   e7726:	2307      	movs	r3, #7
   e7728:	1ce2      	adds	r2, r4, #3
   e772a:	fb92 f3f3 	sdiv	r3, r2, r3
   e772e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e7732:	1ad3      	subs	r3, r2, r3
   e7734:	618b      	str	r3, [r1, #24]
   e7736:	4b33      	ldr	r3, [pc, #204]	; (e7804 <gmtime_r+0x124>)
   e7738:	4d33      	ldr	r5, [pc, #204]	; (e7808 <gmtime_r+0x128>)
   e773a:	fb94 f5f5 	sdiv	r5, r4, r5
   e773e:	fb03 4405 	mla	r4, r3, r5, r4
   e7742:	f648 62ac 	movw	r2, #36524	; 0x8eac
   e7746:	fbb4 f2f2 	udiv	r2, r4, r2
   e774a:	4422      	add	r2, r4
   e774c:	f240 57b4 	movw	r7, #1460	; 0x5b4
   e7750:	fbb4 f3f7 	udiv	r3, r4, r7
   e7754:	1ad2      	subs	r2, r2, r3
   e7756:	482d      	ldr	r0, [pc, #180]	; (e780c <gmtime_r+0x12c>)
   e7758:	fbb4 f0f0 	udiv	r0, r4, r0
   e775c:	f648 6694 	movw	r6, #36500	; 0x8e94
   e7760:	1a13      	subs	r3, r2, r0
   e7762:	fbb3 f6f6 	udiv	r6, r3, r6
   e7766:	4434      	add	r4, r6
   e7768:	f240 126d 	movw	r2, #365	; 0x16d
   e776c:	fbb3 f0f2 	udiv	r0, r3, r2
   e7770:	fbb3 f3f7 	udiv	r3, r3, r7
   e7774:	1ae3      	subs	r3, r4, r3
   e7776:	fb02 3310 	mls	r3, r2, r0, r3
   e777a:	2499      	movs	r4, #153	; 0x99
   e777c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   e7780:	3202      	adds	r2, #2
   e7782:	fbb2 f2f4 	udiv	r2, r2, r4
   e7786:	2a0a      	cmp	r2, #10
   e7788:	fb04 f402 	mul.w	r4, r4, r2
   e778c:	f104 0602 	add.w	r6, r4, #2
   e7790:	f04f 0405 	mov.w	r4, #5
   e7794:	fbb6 f4f4 	udiv	r4, r6, r4
   e7798:	bf34      	ite	cc
   e779a:	2602      	movcc	r6, #2
   e779c:	f06f 0609 	mvncs.w	r6, #9
   e77a0:	4416      	add	r6, r2
   e77a2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e77a6:	fb02 0505 	mla	r5, r2, r5, r0
   e77aa:	1c5f      	adds	r7, r3, #1
   e77ac:	2e01      	cmp	r6, #1
   e77ae:	bf98      	it	ls
   e77b0:	3501      	addls	r5, #1
   e77b2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   e77b6:	eba7 0704 	sub.w	r7, r7, r4
   e77ba:	d302      	bcc.n	e77c2 <gmtime_r+0xe2>
   e77bc:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   e77c0:	e014      	b.n	e77ec <gmtime_r+0x10c>
   e77c2:	0782      	lsls	r2, r0, #30
   e77c4:	d105      	bne.n	e77d2 <gmtime_r+0xf2>
   e77c6:	2464      	movs	r4, #100	; 0x64
   e77c8:	fbb0 f2f4 	udiv	r2, r0, r4
   e77cc:	fb04 0212 	mls	r2, r4, r2, r0
   e77d0:	b94a      	cbnz	r2, e77e6 <gmtime_r+0x106>
   e77d2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e77d6:	fbb0 f4f2 	udiv	r4, r0, r2
   e77da:	fb02 0014 	mls	r0, r2, r4, r0
   e77de:	fab0 f280 	clz	r2, r0
   e77e2:	0952      	lsrs	r2, r2, #5
   e77e4:	e000      	b.n	e77e8 <gmtime_r+0x108>
   e77e6:	2201      	movs	r2, #1
   e77e8:	333b      	adds	r3, #59	; 0x3b
   e77ea:	441a      	add	r2, r3
   e77ec:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   e77f0:	2300      	movs	r3, #0
   e77f2:	61ca      	str	r2, [r1, #28]
   e77f4:	614d      	str	r5, [r1, #20]
   e77f6:	610e      	str	r6, [r1, #16]
   e77f8:	60cf      	str	r7, [r1, #12]
   e77fa:	620b      	str	r3, [r1, #32]
   e77fc:	4608      	mov	r0, r1
   e77fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e7800:	00015180 	.word	0x00015180
   e7804:	fffdc54f 	.word	0xfffdc54f
   e7808:	00023ab1 	.word	0x00023ab1
   e780c:	00023ab0 	.word	0x00023ab0

000e7810 <__env_lock>:
   e7810:	4770      	bx	lr

000e7812 <__env_unlock>:
   e7812:	4770      	bx	lr

000e7814 <dynalib_user>:
   e7814:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   e7824:	0000 0000 2d2d 2d2d 422d 4745 4e49 4320     ....-----BEGIN C
   e7834:	5245 4954 4946 4143 4554 2d2d 2d2d 202d     ERTIFICATE----- 
   e7844:	0a0d 494d 4649 546a 4343 3341 6757 7741     ..MIIFjTCCA3WgAw
   e7854:	4249 6741 5249 4e41 784f 6963 3059 7a49     IBAgIRANOxciY0Iz
   e7864:	634c 4139 6f55 5355 7372 476e 776f 5144     Lc9AUoUSrsnGowDQ
   e7874:	4a59 6f4b 495a 7668 4e63 5141 4c45 5142     YJKoZIhvcNAQELBQ
   e7884:	7741 0a0d 7a54 4c45 414d 476b 3141 4555     Aw..TzELMAkGA1UE
   e7894:	6842 434d 5656 784d 544b 6e41 6742 564e     BhMCVVMxKTAnBgNV
   e78a4:	4142 546f 4549 756c 4764 7956 6d62 3056     BAoTIEludGVybmV0
   e78b4:	4649 6c4e 3359 7956 5861 3552 4649 6c4a     IFNlY3VyaXR5IFJl
   e78c4:	3263 6856 0a0d 6d63 6f4e 4549 7964 3362     c2Vh..cmNoIEdyb3
   e78d4:	7756 524d 7755 7745 4459 5156 4451 7745     VwMRUwEwYDVQQDEw
   e78e4:	4a78 3155 484a 4649 764a 3362 6751 4457     xJU1JHIFJvb3QgWD
   e78f4:	7745 6848 4e63 544d 7859 444d 3241 544d     EwHhcNMTYxMDA2MT
   e7904:	3055 7a4d 3155 0a0d 6857 4e63 6a4d 7845     U0MzU1..WhcNMjEx
   e7914:	444d 3241 544d 3055 7a4d 3155 6a57 4b42     MDA2MTU0MzU1WjBK
   e7924:	514d 7773 5143 4459 5156 4751 7745 564a     MQswCQYDVQQGEwJV
   e7934:	7a55 5745 424d 4751 3141 4555 6843 4e4d     UzEWMBQGA1UEChMN
   e7944:	4754 3056 334a 674d 0a0d 5752 6a35 6e63     TGV0J3Mg..RW5jcn
   e7954:	776c 4464 6a45 434d 4745 3141 4555 7841     lwdDEjMCEGA1UEAx
   e7964:	614d 4754 3056 334a 674d 5752 6a35 6e63     MaTGV0J3MgRW5jcn
   e7974:	776c 4364 4242 5864 6f52 3362 704a 4864     lwdCBBdXRob3JpdH
   e7984:	676b 4457 774d 6767 6945 0a0d 414d 4730     kgWDMwggEi..MA0G
   e7994:	5343 4771 4953 3362 5144 4245 5141 4155     CSqGSIb3DQEBAQUA
   e79a4:	3441 4249 7744 7741 6767 4b45 6f41 4249     A4IBDwAwggEKAoIB
   e79b4:	5141 6343 7730 777a 7557 7555 3752 7964     AQCc0wzwWuUuR7dy
   e79c4:	5458 4465 3273 6a68 4f4d 5872 0a0d 534e     XTeDs2hjMOrX..NS
   e79d4:	5a59 654a 3947 6a76 7858 4a63 7649 3774     YZJeG9vjXxcJIvt7
   e79e4:	4c68 5151 7257 5a71 3134 4643 736a 5373     hLQQWrqZ41CFjssS
   e79f4:	4572 4961 4c63 2b6f 314e 4f35 7a62 3270     rEaIcLo+N15Obzp2
   e7a04:	784a 6e75 426d 4259 582f 5a6b 6671 0a0d     JxunmBYB/XkZqf..
   e7a14:	3938 3442 335a 4948 5161 5636 636b 2b2f     89B4Z3HIaQ6Vkc/+
   e7a24:	7035 706e 4459 4978 487a 4b37 5854 5363     5pnpYDxIzH7KTXcS
   e7a34:	4a4a 4831 3147 7272 6575 6577 774e 6341     JJ1HG1rrueweNwAc
   e7a44:	4b6e 3778 7770 7158 6b7a 7272 5576 6c48     nKx7pwXqzkrrvUHl
   e7a54:	0a0d 704e 3569 2f79 7431 4a50 6f5a 7933     ..Npi5y/1tPJZo3y
   e7a64:	714d 7051 4d41 6e68 6e52 4879 6c2b 726d     MqQpAMhnRnyH+lmr
   e7a74:	5368 5259 5451 3250 7058 6f67 4c66 2f32     hSYRQTP2XpgofL2/
   e7a84:	4f6f 7656 4761 6669 464f 3550 4765 3772     oOVvaGifOFP5eGr7
   e7a94:	6344 0a0d 7547 7239 5a44 5755 6366 7251     Dc..Gu9rDZUWfcQr
   e7aa4:	476f 7957 516d 3251 5964 7242 4572 7a72     oGWymQQ2dYBrrErz
   e7ab4:	3547 4a42 4365 692b 6b6c 7138 4349 7055     G5BJeC+ilk8qICUp
   e7ac4:	4d42 305a 4e77 7841 597a 7838 4a4f 5755     BMZ0wNAxzY8xOJUW
   e7ad4:	7175 7a67 0a0d 4575 7850 5273 442f 484d     uqgz..uEPxsR/DMH
   e7ae4:	692b 5465 5445 5350 3230 4f2b 3850 6a38     +ieTETPS02+OP88j
   e7af4:	714e 5475 786b 6178 452f 516a 6430 425a     NquTkxxa/EjQ0dZB
   e7b04:	7a59 7671 4571 624b 5562 3843 5944 6366     YzqvqEKbbUC8DYfc
   e7b14:	544f 6741 424d 0a0d 4141 6a47 6767 6e46     OTAgMB..AAGjggFn
   e7b24:	494d 4249 7a59 4f41 6742 564e 5148 4238     MIIBYzAOBgNVHQ8B
   e7b34:	6641 4538 4142 434d 5941 7759 6745 4459     Af8EBAMCAYYwEgYD
   e7b44:	5256 5430 5141 2f48 4142 7767 6742 4245     VR0TAQH/BAgwBgEB
   e7b54:	772f 4249 4441 5542 0a0d 6742 564e 5348     /wIBADBU..BgNVHS
   e7b64:	4541 5454 4c42 414d 4767 6d42 4265 4144     AETTBLMAgGBmeBDA
   e7b74:	4345 5441 2f41 6742 7273 6742 4545 5941     ECATA/BgsrBgEEAY
   e7b84:	664c 7745 4245 5441 7741 434d 4734 4343     LfEwEBATAwMC4GCC
   e7b94:	4773 5141 4655 7742 4249 0a0d 6946 6f4a     sGAQUFBwIB..FiJo
   e7ba4:	4864 7752 694f 7638 3359 7a42 6e4c 764a     dHRwOi8vY3BzLnJv
   e7bb4:	3362 7451 4465 7545 4762 3056 3263 7556     b3QteDEubGV0c2Vu
   e7bc4:	3359 354a 4863 7551 3362 6e4a 424d 4730     Y3J5cHQub3JnMB0G
   e7bd4:	3141 6455 6744 5751 4242 6f53 0a0d 6d53     A1UdDgQWBBSo..Sm
   e7be4:	6a70 4842 6433 7575 5262 624f 6d65 5752     pjBH3duubRObemRW
   e7bf4:	7658 3638 736a 546f 7a41 6742 564e 5248     Xv86jsoTAzBgNVHR
   e7c04:	4538 444c 7141 434d 6769 714a 6b41 6968     8ELDAqMCigJqAkhi
   e7c14:	6f4a 4864 7752 694f 7638 3359 734a 0a0d     JodHRwOi8vY3Js..
   e7c24:	6e4c 764a 3362 7451 4465 7545 4762 3056     LnJvb3QteDEubGV0
   e7c34:	3263 7556 3359 354a 4863 7551 3362 6e4a     c2VuY3J5cHQub3Jn
   e7c44:	484d 4749 4343 4773 5141 4655 7742 4245     MHIGCCsGAQUFBwEB
   e7c54:	4742 7759 445a 7741 6742 7267 6742 4645     BGYwZDAwBggrBgEF
   e7c64:	0a0d 5142 7763 5941 6b59 4861 3052 4463     ..BQcwAYYkaHR0cD
   e7c74:	766f 324c 6a39 3363 7541 6d63 7639 4364     ovL29jc3Aucm9vdC
   e7c84:	3431 534d 7335 585a 7a52 575a 6a35 6e63     14MS5sZXRzZW5jcn
   e7c94:	776c 4364 7635 6d63 7663 444d 4741 4343     lwdC5vcmcvMDAGCC
   e7ca4:	4773 0a0d 5141 4655 7a42 4341 6968 6f52     sG..AQUFBzAChiRo
   e7cb4:	4864 7752 694f 7638 3259 7956 4364 7935     dHRwOi8vY2VydC5y
   e7cc4:	3262 3039 584c 7867 6d4c 6c78 4864 6c4e     b290LXgxLmxldHNl
   e7cd4:	6d62 794e 5865 3042 6d4c 7939 795a 7738     bmNyeXB0Lm9yZy8w
   e7ce4:	7748 4459 0a0d 5256 6a30 4242 7767 6f46     HwYD..VR0jBBgwFo
   e7cf4:	5541 6265 5a52 6e35 3275 6535 4251 3463     AUebRZ5nu25eQBc4
   e7d04:	4941 4d69 6167 5057 7062 326d 7734 5144     AIiMgaWPbpm24wDQ
   e7d14:	4a59 6f4b 495a 7668 4e63 5141 4c45 5142     YJKoZIhvcNAQELBQ
   e7d24:	4441 6767 4249 0a0d 4241 506e 5364 3041     ADggIB..ABnPdSA0
   e7d34:	544c 6d71 6652 512f 6531 4d61 6a32 6f4c     LTqmRf/Q1eaM2jLo
   e7d44:	476e 6234 6451 6e45 4f71 514a 6e38 7143     nG4bQdEnqOJQ8nCq
   e7d54:	4f78 5465 7252 6f54 4b45 7774 2b54 332b     xOeTRrToEKtwT++3
   e7d64:	6736 5354 426c 7847 0a0d 2f41 6435 7475     6gTSlBGx..A/5dut
   e7d74:	3238 4a6a 3251 786a 384e 4952 4c38 5139     82jJQ2jxN8RI8L9Q
   e7d84:	5846 5772 3469 5878 416e 4532 4171 3031     FXrWi4xXnA2EqA10
   e7d94:	6a79 6948 3652 3948 6a63 4d36 6946 6e4f     yjHiR6H9cj6MFiOn
   e7da4:	3562 6e49 6531 7357 4d52 0a0d 4d55 7632     b5In1eWsRM..UM2v
   e7db4:	6533 7439 734e 4143 4267 6b75 4850 6741     3e9tNsCAgBukPHAg
   e7dc4:	6c31 6851 3730 7672 4b46 2f6d 7a42 4239     1lQh07rvFKm/Bz9B
   e7dd4:	6a43 7861 726f 4c41 4e49 6655 395a 4444     CjaxorALINUfZ9DD
   e7de4:	3436 326a 6769 494c 6c78 3265 0a0d 5044     64j2igLIxle2..DP
   e7df4:	5778 6438 2f49 3246 6f6c 4d48 586a 6a5a     xW8dI/F2loHMjXZj
   e7e04:	4771 5238 716b 555a 6f64 7478 4449 2b35     qG8RkqZUdoxtID5+
   e7e14:	3039 6746 4773 6649 4d6b 7170 5267 3053     90FgsGIfkMpqgRS0
   e7e24:	6635 7a34 6250 4543 7148 5843 316c 0a0d     5f4zPbCEHqCXl1..
   e7e34:	4f65 4835 4579 544c 6367 6c56 584c 5158     eO5HyELTgcVlLXXQ
   e7e44:	6744 5741 526e 757a 3174 4668 654a 7a63     DgAWnRzut1hFJecz
   e7e54:	3159 6a74 5151 6f6e 6636 7336 6e2b 794d     Y1tjQQno6f6s+nMy
   e7e64:	4c64 324e 5736 5575 7334 5533 7659 754f     dLN26WuU4s3UYvOu
   e7e74:	0a0d 734f 7855 6c52 754a 5437 5253 7148     ..OsUxRlJu7TSRHq
   e7e84:	4344 6c33 4553 5835 6767 6b56 647a 5061     DC3lSE5XggVkzdaP
   e7e94:	756b 474b 6251 7047 796e 302b 2f31 3734     kuKGQbGpny+01/47
   e7ea4:	6668 5858 424e 4837 746e 4e57 365a 324e     hfXXNB7HntWNZ6N2
   e7eb4:	7756 0a0d 3770 3647 664f 2b59 5159 5a72     Vw..p7G6OfY+YQrZ
   e7ec4:	4977 5161 686d 4972 4a71 755a 6769 7273     wIaQmhrIqJZuigsr
   e7ed4:	6562 5733 672b 6e64 7935 456b 2b39 794b     be3W+gdn5ykE9+Ky
   e7ee4:	5630 5667 7355 7866 356f 6d32 4677 7359     0VgVUsfxo52mwFYs
   e7ef4:	4a31 594b 0a0d 5032 4447 5775 3878 364d     1JKY..2PGDuWx8M6
   e7f04:	6c44 3653 5171 766b 6148 5552 306f 4d46     DlS6qQkvHaRUo0FM
   e7f14:	3864 7354 6c53 4662 2f30 3976 3536 4771     d8TsSlbF0/v965qG
   e7f24:	4b46 5368 6544 6f51 704d 6e59 6377 516d     FKhSDeQoMpYnwcmQ
   e7f34:	6c69 6852 302f 0a0d 7961 544c 6c68 4c48     ilRh/0..ayLThlHL
   e7f44:	384e 6731 6b53 6a4a 7256 4950 5930 7838     N81gSkJjVrPI0Y8x
   e7f54:	5643 4250 7434 6277 5031 5546 3264 5066     CVPB4twb1PFUd2fP
   e7f64:	334d 4173 7431 384a 7333 355a 3876 6776     M3sA1tJ83sZ5v8vg
   e7f74:	7646 7932 666f 524b 0a0d 4250 7430 4a36     Fv2yofKR..PB0t6J
   e7f84:	557a 3841 6d31 7153 334d 786b 356c 2b65     zUA81mSqM3kxl5e+
   e7f94:	5a49 6877 4159 4f79 4f30 6754 2f33 7366     IZwhYAyO0OTg3/fs
   e7fa4:	4838 4771 4e54 644b 4239 6f71 7755 5253     8HqGTNKd9BqoUwSR
   e7fb4:	7a42 3070 4a36 674d 6235 0a0d 5572 4743     Bzp06JMg5b..rUCG
   e7fc4:	6277 5543 4944 6d30 6178 4a64 4233 347a     wbCUDI0mxadJ3Bz4
   e7fd4:	7857 3652 7966 704e 4b42 7932 6941 576e     WxR6fyNpBK2yAinW
   e7fe4:	7345 6b69 7178 7445 0a0d 2d2d 2d2d 452d     EsikxqEt..-----E
   e7ff4:	444e 4320 5245 4954 4946 4143 4554 2d2d     ND CERTIFICATE--
   e8004:	2d2d 202d 6900 746f 662d 6361 6169 2d6c     --- .iot-facial-
   e8014:	6f63 706d 7261 2d65 6574 7473 632e 676f     compare-test.cog
   e8024:	696e 6974 6576 6573 7672 6369 7365 612e     nitiveservices.a
   e8034:	757a 6572 632e 6d6f 2f00 6166 6563 762f     zure.com./face/v
   e8044:	2e31 2f30 6564 6574 7463 723f 7465 7275     1.0/detect?retur
   e8054:	466e 6361 4965 3d64 7274 6575 6200 3233     nFaceId=true.b32
   e8064:	3431 6134 6162 6666 3437 6330 6163 3130     144abaff740cca01
   e8074:	6663 3032 3835 6534 3862 3030 0064 4c54     cf20584eb800d.TL
   e8084:	2053 6f63 6e6e 6365 6974 6e6f 6920 2073     S connection is 
   e8094:	6c61 7669 0d65 000a 662f 6361 2f65 3176     alive.../face/v1
   e80a4:	302e 762f 7265 6669 0079 3563 3263 6134     .0/verify.c5c24a
   e80b4:	3238 362d 3438 2d35 3034 3133 392d 3564     82-6845-4031-9d5
   e80c4:	2d64 3739 6438 3966 3731 3435 3632 3800     d-978df9175426.8
   e80d4:	3531 6664 3939 2d63 3935 6638 342d 3239     15df99c-598f-492
   e80e4:	2d36 3339 6130 612d 3337 6234 6633 3664     6-930a-a734b3fd6
   e80f4:	3135 0063 6173 706d 656c 675f 6f72 7075     51c.sample_group
   e8104:	2000 2120 0020 6425 252e 2e64 6425 252e     .  ! .%d.%d.%d.%
   e8114:	0064 0000                                   d...

000e8118 <_ZL1K>:
   e8118:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
   e8128:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
   e8138:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
   e8148:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
   e8158:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
   e8168:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
   e8178:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
   e8188:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
   e8198:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
   e81a8:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
   e81b8:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
   e81c8:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
   e81d8:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
   e81e8:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
   e81f8:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
   e8208:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.
   e8218:	862a 8648 0df7 0101 0008 2b20 0020 202c     *.H....... + ., 
   e8228:	2500 3d73 3f00 3d3f 2500 3230 2558 0073     .%s=.??=.%02X%s.
   e8238:	2e2e 2e2e 3f00 3f3f 2000 2528 2c73 4d20     .....???. (%s, M
   e8248:	4647 2d31 7325 202c 7830 3025 5832 0029     GF1-%s, 0x%02X).
   e8258:	7325 6b20 7965 7320 7a69 0065               %s key size.

000e8264 <mbedtls_sha1_info>:
   e8264:	0004 0000 8978 000e 0014 0000 0040 0000     ....x.......@...
   e8274:	6271 000d 626d 000d 6269 000d a4a1 000d     qb..mb..ib......
   e8284:	6253 000d 6241 000d 623d 000d 6239 000d     Sb..Ab..=b..9b..

000e8294 <mbedtls_sha224_info>:
   e8294:	0005 0000 89a3 000e 001c 0000 0040 0000     ............@...
   e82a4:	62b9 000d 62b5 000d 62b1 000d 62a5 000d     .b...b...b...b..
   e82b4:	628f 000d 627d 000d 6279 000d 6275 000d     .b..}b..yb..ub..

000e82c4 <mbedtls_sha384_info>:
   e82c4:	0007 0000 89fd 000e 0030 0000 0080 0000     ........0.......
   e82d4:	6309 000d 6305 000d 6301 000d 62f5 000d     .c...c...c...b..
   e82e4:	62df 000d 62cd 000d 62c9 000d 62c5 000d     .b...b...b...b..

000e82f4 <mbedtls_sha512_info>:
   e82f4:	0008 0000 8a2a 000e 0040 0000 0080 0000     ....*...@.......
   e8304:	630f 000d 6305 000d 6301 000d 62fb 000d     .c...c...c...b..
   e8314:	62df 000d 62cd 000d 62c9 000d 62c5 000d     .b...b...b...b..

000e8324 <mbedtls_sha256_info>:
   e8324:	0006 0000 89d0 000e 0020 0000 0040 0000     ........ ...@...
   e8334:	62bf 000d 62b5 000d 62b1 000d 62ab 000d     .b...b...b...b..
   e8344:	628f 000d 627d 000d 6279 000d 6275 000d     .b..}b..yb..ub..
   e8354:	6573 7063 3532 7236 0031 0000               secp256r1...

000e8360 <_ZL20ecp_supported_curves>:
   e8360:	0003 0017 0100 0000 8354 000e 0000 0000     ........T.......
	...

000e8378 <_ZL18oid_x520_attr_type>:
   e8378:	8c2d 000e 0003 0000 8c31 000e 8c42 000e     -.......1...B...
   e8388:	9b6d 000e 8c4e 000e 0003 0000 8c52 000e     m...N.......R...
   e8398:	8c64 000e 87e9 000e 8c6c 000e 0003 0000     d.......l.......
   e83a8:	8c70 000e 8c7f 000e 8c88 000e 8c8a 000e     p...............
   e83b8:	0003 0000 8c8e 000e 8c9a 000e a7ac 000e     ................
   e83c8:	8ca0 000e 0003 0000 8ca4 000e 8cbb 000e     ................
   e83d8:	8cc8 000e 8cca 000e 0003 0000 8cce 000e     ................
   e83e8:	8ceb 000e 8cf4 000e 8cf7 000e 0009 0000     ................
   e83f8:	8d01 000e 8d0e 000e 8d01 000e 8d1d 000e     ................
   e8408:	0003 0000 8d21 000e 8d34 000e 8d27 000e     ....!...4...'...
   e8418:	8d42 000e 0003 0000 8d46 000e 8d5a 000e     B.......F...Z...
   e8428:	8d4c 000e 8d69 000e 0003 0000 8d6d 000e     L...i.......m...
   e8438:	8d7e 000e 8d73 000e 8d8a 000e 0003 0000     ~...s...........
   e8448:	8d8e 000e 8d9c 000e 8da4 000e 8da7 000e     ................
   e8458:	0003 0000 8dab 000e 8dbb 000e 8dc6 000e     ................
   e8468:	8dc9 000e 0003 0000 8dcd 000e 8ddc 000e     ................
   e8478:	8dd3 000e 8de5 000e 0003 0000 8de9 000e     ................
   e8488:	8e03 000e 8def 000e 8e18 000e 0003 0000     ................
   e8498:	8e1c 000e 8e28 000e 8e22 000e 8e2e 000e     ....(...".......
   e84a8:	0003 0000 8e32 000e 8e44 000e 8e38 000e     ....2...D...8...
   e84b8:	8e61 000e 0003 0000 8e65 000e 8e75 000e     a.......e...u...
   e84c8:	8e6b 000e 8e7f 000e 000a 0000 8e8a 000e     k...............
   e84d8:	8e9d 000e 8eae 000e 8eb1 000e 0003 0000     ................
   e84e8:	8eb5 000e 8ecc 000e 8ebb 000e 0000 0000     ................
	...

000e8508 <_ZL17oid_ext_key_usage>:
   e8508:	8a46 000e 0008 0000 8a4f 000e 8a60 000e     F.......O...`...
   e8518:	8a7e 000e 0008 0000 8a87 000e 8a98 000e     ~...............
   e8528:	8ab6 000e 0008 0000 8abf 000e 8ad1 000e     ................
   e8538:	8ade 000e 0008 0000 8ae7 000e 8afd 000e     ................
   e8548:	8b0f 000e 0008 0000 8b18 000e 8b2b 000e     ............+...
   e8558:	8b39 000e 0008 0000 8b42 000e 8b54 000e     9.......B...T...
	...

000e8578 <_ZL10oid_pk_alg>:
   e8578:	87f4 000e 0009 0000 87fe 000e 880c 000e     ................
   e8588:	0001 0000 8810 000e 0007 0000 8818 000e     ................
   e8598:	8827 000e 0002 0000 8836 000e 0005 0000     '.......6.......
   e85a8:	883c 000e 8844 000e 0003 0000 0000 0000     <...D...........
	...

000e85c8 <_ZL14oid_cipher_alg>:
   e85c8:	87bb 000e 0005 0000 87c1 000e 8697 000e     ................
   e85d8:	0021 0000 87c8 000e 0008 0000 87d1 000e     !...............
   e85e8:	87de 000e 0025 0000 0000 0000 0000 0000     ....%...........
	...

000e8604 <_ZL11oid_ecp_grp>:
   e8604:	87eb 000e 0008 0000 8354 000e 8354 000e     ........T...T...
   e8614:	0003 0000 0000 0000 0000 0000 0000 0000     ................
	...
   e862c:	862a 8648 0df7 0c01 0301 7000 6562 6957     *.H........pbeWi
   e863c:	6874 4853 4141 646e 2d33 654b 5479 6972     thSHAAnd3-KeyTri
   e864c:	6c70 4465 5345 432d 4342 5000 4542 7720     pleDES-CBC.PBE w
   e865c:	7469 2068 4853 3141 6120 646e 3320 4b2d     ith SHA1 and 3-K
   e866c:	7965 3320 4544 0053 862a 8648 0df7 0c01     ey 3DES.*.H.....
   e867c:	0401 7000 6562 6957 6874 4853 4141 646e     ...pbeWithSHAAnd
   e868c:	2d32 654b 5479 6972 6c70 4465 5345 432d     2-KeyTripleDES-C
   e869c:	4342 5000 4542 7720 7469 2068 4853 3141     BC.PBE with SHA1
   e86ac:	6120 646e 3220 4b2d 7965 3320 4544 0053      and 2-Key 3DES.
   e86bc:	862a 8648 0df7 0702 6800 616d 5363 4148     *.H......hmacSHA
   e86cc:	0031 4d48 4341 532d 4148 312d 2a00 4886     1.HMAC-SHA-1.*.H
   e86dc:	f786 020d 0008 6d68 6361 4853 3241 3432     ......hmacSHA224
   e86ec:	4800 414d 2d43 4853 2d41 3232 0034 862a     .HMAC-SHA-224.*.
   e86fc:	8648 0df7 0902 6800 616d 5363 4148 3532     H......hmacSHA25
   e870c:	0036 4d48 4341 532d 4148 322d 3635 2a00     6.HMAC-SHA-256.*
   e871c:	4886 f786 020d 000a 6d68 6361 4853 3341     .H......hmacSHA3
   e872c:	3438 4800 414d 2d43 4853 2d41 3833 0034     84.HMAC-SHA-384.
   e873c:	862a 8648 0df7 0b02 6800 616d 5363 4148     *.H......hmacSHA
   e874c:	3135 0032 4d48 4341 532d 4148 352d 3231     512.HMAC-SHA-512
   e875c:	2b00 030e 1a02 6900 2d64 6873 3161 6000     .+.....id-sha1.`
   e876c:	4886 6501 0403 0402 6900 2d64 6873 3261     .H.e.....id-sha2
   e877c:	3432 6000 4886 6501 0403 0102 6900 2d64     24.`.H.e.....id-
   e878c:	6873 3261 3635 6000 4886 6501 0403 0202     sha256.`.H.e....
   e879c:	6900 2d64 6873 3361 3438 6000 4886 6501     .id-sha384.`.H.e
   e87ac:	0403 0302 6900 2d64 6873 3561 3231 2b00     .....id-sha512.+
   e87bc:	030e 0702 6400 7365 4243 0043 862a 8648     .....desCBC.*.H.
   e87cc:	0df7 0703 6400 7365 652d 6564 2d33 6263     .....des-ede3-cb
   e87dc:	0063 4544 2d53 4445 3345 432d 4342 2a00     c.DES-EDE3-CBC.*
   e87ec:	4886 3dce 0103 0007 862a 8648 0df7 0101     .H.=....*.H.....
   e87fc:	0001 7372 4561 636e 7972 7470 6f69 006e     ..rsaEncryption.
   e880c:	5352 0041 862a ce48 023d 0001 6469 652d     RSA.*.H.=...id-e
   e881c:	5063 6275 696c 4b63 7965 4700 6e65 7265     cPublicKey.Gener
   e882c:	6369 4520 2043 656b 0079 812b 0104 000c     ic EC key.+.....
   e883c:	6469 652d 4463 0048 4345 6b20 7965 6620     id-ecDH.EC key f
   e884c:	726f 4520 4443 0048 862a 8648 0df7 0101     or ECDH.*.H.....
   e885c:	0005 6873 2d61 5731 7469 5268 4153 6e45     ..sha-1WithRSAEn
   e886c:	7263 7079 6974 6e6f 5200 4153 7720 7469     cryption.RSA wit
   e887c:	2068 4853 3141 2a00 4886 f786 010d 0e01     h SHA1.*.H......
   e888c:	7300 6168 3232 5734 7469 5268 4153 6e45     .sha224WithRSAEn
   e889c:	7263 7079 6974 6e6f 5200 4153 7720 7469     cryption.RSA wit
   e88ac:	2068 4853 2d41 3232 0034 862a 8648 0df7     h SHA-224.*.H...
   e88bc:	0101 000b 6873 3261 3635 6957 6874 5352     ....sha256WithRS
   e88cc:	4541 636e 7972 7470 6f69 006e 5352 2041     AEncryption.RSA 
   e88dc:	6977 6874 5320 4148 322d 3635 2a00 4886     with SHA-256.*.H
   e88ec:	f786 010d 0c01 7300 6168 3833 5734 7469     .......sha384Wit
   e88fc:	5268 4153 6e45 7263 7079 6974 6e6f 5200     hRSAEncryption.R
   e890c:	4153 7720 7469 2068 4853 2d41 3833 0034     SA with SHA-384.
   e891c:	862a 8648 0df7 0101 000d 6873 3561 3231     *.H.......sha512
   e892c:	6957 6874 5352 4541 636e 7972 7470 6f69     WithRSAEncryptio
   e893c:	006e 5352 2041 6977 6874 5320 4148 352d     n.RSA with SHA-5
   e894c:	3231 2b00 030e 1d02 2a00 4886 3dce 0104     12.+.....*.H.=..
   e895c:	6500 6463 6173 772d 7469 2d68 4853 3141     .ecdsa-with-SHA1
   e896c:	4500 4443 4153 7720 7469 2068 4853 3141     .ECDSA with SHA1
   e897c:	2a00 4886 3dce 0304 0001 6365 7364 2d61     .*.H.=....ecdsa-
   e898c:	6977 6874 532d 4148 3232 0034 4345 5344     with-SHA224.ECDS
   e899c:	2041 6977 6874 5320 4148 3232 0034 862a     A with SHA224.*.
   e89ac:	ce48 043d 0203 6500 6463 6173 772d 7469     H.=....ecdsa-wit
   e89bc:	2d68 4853 3241 3635 4500 4443 4153 7720     h-SHA256.ECDSA w
   e89cc:	7469 2068 4853 3241 3635 2a00 4886 3dce     ith SHA256.*.H.=
   e89dc:	0304 0003 6365 7364 2d61 6977 6874 532d     ....ecdsa-with-S
   e89ec:	4148 3833 0034 4345 5344 2041 6977 6874     HA384.ECDSA with
   e89fc:	5320 4148 3833 0034 862a ce48 043d 0403      SHA384.*.H.=...
   e8a0c:	6500 6463 6173 772d 7469 2d68 4853 3541     .ecdsa-with-SHA5
   e8a1c:	3231 4500 4443 4153 7720 7469 2068 4853     12.ECDSA with SH
   e8a2c:	3541 3231 2a00 4886 f786 010d 0a01 5200     A512.*.H.......R
   e8a3c:	4153 5353 2d41 5350 0053 062b 0501 0705     SASSA-PSS.+.....
   e8a4c:	0103 6900 2d64 706b 732d 7265 6576 4172     ...id-kp-serverA
   e8a5c:	7475 0068 4c54 2053 6557 2062 6553 7672     uth.TLS Web Serv
   e8a6c:	7265 4120 7475 6568 746e 6369 7461 6f69     er Authenticatio
   e8a7c:	006e 062b 0501 0705 0203 6900 2d64 706b     n.+........id-kp
   e8a8c:	632d 696c 6e65 4174 7475 0068 4c54 2053     -clientAuth.TLS 
   e8a9c:	6557 2062 6c43 6569 746e 4120 7475 6568     Web Client Authe
   e8aac:	746e 6369 7461 6f69 006e 062b 0501 0705     ntication.+.....
   e8abc:	0303 6900 2d64 706b 632d 646f 5365 6769     ...id-kp-codeSig
   e8acc:	696e 676e 4300 646f 2065 6953 6e67 6e69     ning.Code Signin
   e8adc:	0067 062b 0501 0705 0403 6900 2d64 706b     g.+........id-kp
   e8aec:	652d 616d 6c69 7250 746f 6365 6974 6e6f     -emailProtection
   e8afc:	4500 6d2d 6961 206c 7250 746f 6365 6974     .E-mail Protecti
   e8b0c:	6e6f 2b00 0106 0505 0307 0008 6469 6b2d     on.+........id-k
   e8b1c:	2d70 6974 656d 7453 6d61 6970 676e 5400     p-timeStamping.T
   e8b2c:	6d69 2065 7453 6d61 6970 676e 2b00 0106     ime Stamping.+..
   e8b3c:	0505 0307 0009 6469 6b2d 2d70 434f 5053     ......id-kp-OCSP
   e8b4c:	6953 6e67 6e69 0067 434f 5053 5320 6769     Signing.OCSP Sig
   e8b5c:	696e 676e 5500 131d 6900 2d64 6563 622d     ning.U...id-ce-b
   e8b6c:	7361 6369 6f43 736e 7274 6961 746e 0073     asicConstraints.
   e8b7c:	6142 6973 2063 6f43 736e 7274 6961 746e     Basic Constraint
   e8b8c:	0073 1d55 000f 6469 632d 2d65 656b 5579     s.U...id-ce-keyU
   e8b9c:	6173 6567 5500 251d 6900 2d64 6563 652d     sage.U.%.id-ce-e
   e8bac:	7478 654b 5579 6173 6567 4500 7478 6e65     xtKeyUsage.Exten
   e8bbc:	6564 2064 654b 2079 7355 6761 0065 1d55     ded Key Usage.U.
   e8bcc:	0011 6469 632d 2d65 7573 6a62 6365 4174     ..id-ce-subjectA
   e8bdc:	746c 614e 656d 5300 6275 656a 7463 4120     ltName.Subject A
   e8bec:	746c 4e20 6d61 0065 8660 0148 f886 0142     lt Name.`.H...B.
   e8bfc:	0001 6469 6e2d 7465 6373 7061 2d65 6563     ..id-netscape-ce
   e8c0c:	7472 7974 6570 4e00 7465 6373 7061 2065     rttype.Netscape 
   e8c1c:	6543 7472 6669 6369 7461 2065 7954 6570     Certificate Type
   e8c2c:	5500 0304 6900 2d64 7461 632d 6d6f 6f6d     .U...id-at-commo
   e8c3c:	4e6e 6d61 0065 6f43 6d6d 6e6f 4e20 6d61     nName.Common Nam
   e8c4c:	0065 0455 0006 6469 612d 2d74 6f63 6e75     e.U...id-at-coun
   e8c5c:	7274 4e79 6d61 0065 6f43 6e75 7274 0079     tryName.Country.
   e8c6c:	0455 0007 6469 612d 2d74 6f6c 6163 696c     U...id-at-locali
   e8c7c:	7974 4c00 636f 6c61 7469 0079 004c 0455     ty.Locality.L.U.
   e8c8c:	0008 6469 612d 2d74 7473 7461 0065 7453     ..id-at-state.St
   e8c9c:	7461 0065 0455 000a 6469 612d 2d74 726f     ate.U...id-at-or
   e8cac:	6167 696e 617a 6974 6e6f 614e 656d 4f00     ganizationName.O
   e8cbc:	6772 6e61 7a69 7461 6f69 006e 004f 0455     rganization.O.U.
   e8ccc:	000b 6469 612d 2d74 726f 6167 696e 617a     ..id-at-organiza
   e8cdc:	6974 6e6f 6c61 6e55 7469 614e 656d 4f00     tionalUnitName.O
   e8cec:	6772 5520 696e 0074 554f 2a00 4886 f786     rg Unit.OU.*.H..
   e8cfc:	010d 0109 6500 616d 6c69 6441 7264 7365     .....emailAddres
   e8d0c:	0073 2d45 616d 6c69 6120 6464 6572 7373     s.E-mail address
   e8d1c:	5500 0504 6900 2d64 7461 732d 7265 6169     .U...id-at-seria
   e8d2c:	4e6c 6d75 6562 0072 6553 6972 6c61 6e20     lNumber.Serial n
   e8d3c:	6d75 6562 0072 0455 0010 6469 612d 2d74     umber.U...id-at-
   e8d4c:	6f70 7473 6c61 6441 7264 7365 0073 6f50     postalAddress.Po
   e8d5c:	7473 6c61 6120 6464 6572 7373 5500 1104     stal address.U..
   e8d6c:	6900 2d64 7461 702d 736f 6174 436c 646f     .id-at-postalCod
   e8d7c:	0065 6f50 7473 6c61 6320 646f 0065 0455     e.Postal code.U.
   e8d8c:	0004 6469 612d 2d74 7573 4e72 6d61 0065     ..id-at-surName.
   e8d9c:	7553 6e72 6d61 0065 4e53 5500 2a04 6900     Surname.SN.U.*.i
   e8dac:	2d64 7461 672d 7669 6e65 614e 656d 4700     d-at-givenName.G
   e8dbc:	7669 6e65 6e20 6d61 0065 4e47 5500 2b04     iven name.GN.U.+
   e8dcc:	6900 2d64 7461 692d 696e 6974 6c61 0073     .id-at-initials.
   e8ddc:	6e49 7469 6169 736c 5500 2c04 6900 2d64     Initials.U.,.id-
   e8dec:	7461 672d 6e65 7265 7461 6f69 516e 6175     at-generationQua
   e8dfc:	696c 6966 7265 4700 6e65 7265 7461 6f69     lifier.Generatio
   e8e0c:	206e 7571 6c61 6669 6569 0072 0455 000c     n qualifier.U...
   e8e1c:	6469 612d 2d74 6974 6c74 0065 6954 6c74     id-at-title.Titl
   e8e2c:	0065 0455 002e 6469 612d 2d74 6e64 7551     e.U...id-at-dnQu
   e8e3c:	6c61 6669 6569 0072 6944 7473 6e69 7567     alifier.Distingu
   e8e4c:	7369 6568 2064 614e 656d 7120 6175 696c     ished Name quali
   e8e5c:	6966 7265 5500 4104 6900 2d64 7461 702d     fier.U.A.id-at-p
   e8e6c:	6573 6475 6e6f 6d79 5000 6573 6475 6e6f     seudonym.Pseudon
   e8e7c:	6d79 0900 2692 9389 2cf2 0164 0019 6469     ym...&...,d...id
   e8e8c:	642d 6d6f 6961 436e 6d6f 6f70 656e 746e     -domainComponent
   e8e9c:	4400 6d6f 6961 206e 6f63 706d 6e6f 6e65     .Domain componen
   e8eac:	0074 4344 5500 2d04 6900 2d64 7461 752d     t.DC.U.-.id-at-u
   e8ebc:	696e 7571 4965 6564 746e 6669 6569 0072     niqueIdentifier.
   e8ecc:	6e55 7169 6575 4920 6564 746e 6669 6569     Unique Identifie
   e8edc:	0072 0000                                   r...

000e8ee0 <_ZL18oid_pkcs12_pbe_alg>:
   e8ee0:	862c 000e 000a 0000 8637 000e 8657 000e     ,.......7...W...
   e8ef0:	2504 0000 8674 000e 000a 0000 867f 000e     .%..t...........
   e8f00:	869f 000e 2304 0000 0000 0000 0000 0000     .....#..........
	...

000e8f1c <_ZL10oid_md_alg>:
   e8f1c:	875d 000e 0005 0000 8763 000e 86d3 000e     ].......c.......
   e8f2c:	0004 0000 876b 000e 0009 0000 8775 000e     ....k.......u...
   e8f3c:	88ae 000e 0005 0000 877f 000e 0009 0000     ................
   e8f4c:	8789 000e 88e1 000e 0006 0000 8793 000e     ................
   e8f5c:	0009 0000 879d 000e 8914 000e 0007 0000     ................
   e8f6c:	87a7 000e 0009 0000 87b1 000e 8947 000e     ............G...
   e8f7c:	0008 0000 0000 0000 0000 0000 0000 0000     ................
	...

000e8f94 <_ZL11oid_sig_alg>:
   e8f94:	8854 000e 0009 0000 885e 000e 8875 000e     T.......^...u...
   e8fa4:	0104 0000 8883 000e 0009 0000 888d 000e     ................
   e8fb4:	88a5 000e 0105 0000 88b6 000e 0009 0000     ................
   e8fc4:	88c0 000e 88d8 000e 0106 0000 88e9 000e     ................
   e8fd4:	0009 0000 88f3 000e 890b 000e 0107 0000     ................
   e8fe4:	891c 000e 0009 0000 8926 000e 893e 000e     ........&...>...
   e8ff4:	0108 0000 894f 000e 0005 0000 885e 000e     ....O.......^...
   e9004:	8875 000e 0104 0000 8955 000e 0007 0000     u.......U.......
   e9014:	895d 000e 896d 000e 0404 0000 897d 000e     ]...m.......}...
   e9024:	0008 0000 8986 000e 8998 000e 0405 0000     ................
   e9034:	89aa 000e 0008 0000 89b3 000e 89c5 000e     ................
   e9044:	0406 0000 89d7 000e 0008 0000 89e0 000e     ................
   e9054:	89f2 000e 0407 0000 8a04 000e 0008 0000     ................
   e9064:	8a0d 000e 8a1f 000e 0408 0000 8a31 000e     ............1...
   e9074:	0009 0000 8a3b 000e 8a3b 000e 0600 0000     ....;...;.......
	...

000e9098 <_ZL11oid_md_hmac>:
   e9098:	86bc 000e 0008 0000 86c5 000e 86ce 000e     ................
   e90a8:	0004 0000 86d9 000e 0008 0000 86e2 000e     ................
   e90b8:	86ed 000e 0005 0000 86fa 000e 0008 0000     ................
   e90c8:	8703 000e 870e 000e 0006 0000 871b 000e     ................
   e90d8:	0008 0000 8724 000e 872f 000e 0007 0000     ....$.../.......
   e90e8:	873c 000e 0008 0000 8745 000e 8750 000e     <.......E...P...
   e90f8:	0008 0000 0000 0000 0000 0000 0000 0000     ................
	...

000e9110 <_ZL12oid_x509_ext>:
   e9110:	8b61 000e 0003 0000 8b65 000e 8b7c 000e     a.......e...|...
   e9120:	0100 0000 8b8e 000e 0003 0000 8b92 000e     ................
   e9130:	8bc0 000e 0004 0000 8ba1 000e 0003 0000     ................
   e9140:	8ba5 000e 8bb7 000e 0800 0000 8bca 000e     ................
   e9150:	0003 0000 8bce 000e 8be3 000e 0020 0000     ............ ...
   e9160:	8bf4 000e 0009 0000 8bfe 000e 8c13 000e     ................
   e9170:	0000 0001 0000 0000 0000 0000 0000 0000     ................
	...
   e9188:	862a 8648 0df7 0501 000c 0000               *.H.........

000e9194 <_ZL16aes_256_ecb_info>:
   e9194:	0104 0000 0100 0000 9274 000e 0000 0000     ........t.......
   e91a4:	0000 0000 0010 0000 9238 000e               ........8...

000e91b0 <_ZL16aes_128_ecb_info>:
   e91b0:	0102 0000 0080 0000 928c 000e 0000 0000     ................
   e91c0:	0000 0000 0010 0000 9238 000e               ........8...

000e91cc <_ZL12gcm_aes_info>:
   e91cc:	0002 0000 0000 0000 a86f 000d a86f 000d     ........o...o...
   e91dc:	a857 000d a845 000d                         W...E...

000e91e4 <mbedtls_cipher_definitions>:
   e91e4:	0002 0000 91b0 000e 0003 0000 9298 000e     ................
   e91f4:	0004 0000 9194 000e 000e 0000 92b4 000e     ................
   e9204:	000f 0000 921c 000e 0010 0000 92d0 000e     ................
	...

000e921c <_ZL16aes_192_gcm_info>:
   e921c:	060f 0000 00c0 0000 925c 000e 000c 0000     ........\.......
   e922c:	0001 0000 0010 0000 91cc 000e               ............

000e9238 <_ZL8aes_info>:
   e9238:	0002 0000 a8ab 000d a8a7 000d a8a3 000d     ................
   e9248:	a88b 000d a879 000d 4541 2d53 3532 2d36     ....y...AES-256-
   e9258:	4347 004d 4541 2d53 3931 2d32 4347 004d     GCM.AES-192-GCM.
   e9268:	4541 2d53 3231 2d38 4347 004d 4541 2d53     AES-128-GCM.AES-
   e9278:	3532 2d36 4345 0042 4541 2d53 3931 2d32     256-ECB.AES-192-
   e9288:	4345 0042 4541 2d53 3231 2d38 4345 0042     ECB.AES-128-ECB.

000e9298 <_ZL16aes_192_ecb_info>:
   e9298:	0103 0000 00c0 0000 9280 000e 0000 0000     ................
   e92a8:	0000 0000 0010 0000 9238 000e               ........8...

000e92b4 <_ZL16aes_128_gcm_info>:
   e92b4:	060e 0000 0080 0000 9268 000e 000c 0000     ........h.......
   e92c4:	0001 0000 0010 0000 91cc 000e               ............

000e92d0 <_ZL16aes_256_gcm_info>:
   e92d0:	0610 0000 0100 0000 9250 000e 000c 0000     ........P.......
   e92e0:	0001 0000 0010 0000 91cc 000e 7372 2e61     ............rsa.
   e92f0:	004e 7372 2e61 0045 6365 656b 2e79 0051     N.rsa.E.eckey.Q.
   e9300:	4345 5344 0041 4345 445f 0048 4345 0000     ECDSA.EC_DH.EC..

000e9310 <mbedtls_ecdsa_info>:
   e9310:	0004 0000 9300 000e a8ed 000d a911 000d     ................
   e9320:	ab21 000d aacd 000d 0000 0000 0000 0000     !...............
   e9330:	aaa1 000d aaa5 000d aabb 000d a8f1 000d     ................

000e9340 <mbedtls_eckeydh_info>:
   e9340:	0003 0000 9306 000e a8ed 000d a905 000d     ................
	...
   e9360:	aaa1 000d aa8b 000d aa79 000d a8f1 000d     ........y.......

000e9370 <mbedtls_rsa_info>:
   e9370:	0001 0000 880c 000e a949 000d a8af 000d     ........I.......
   e9380:	aa2d 000d a9ed 000d a9a1 000d a955 000d     -...........U...
   e9390:	a945 000d a92b 000d a919 000d a8bd 000d     E...+...........

000e93a0 <mbedtls_eckey_info>:
   e93a0:	0002 0000 930c 000e a8ed 000d a8e1 000d     ................
   e93b0:	ab45 000d aad7 000d 0000 0000 0000 0000     E...............
   e93c0:	aaa1 000d aa8b 000d aa79 000d a8f1 000d     ........y.......
   e93d0:	862a 8648 0df7 0c01 0101 2a00 4886 f786     *.H........*.H..
   e93e0:	010d 0d05 2d00 2d2d 2d2d 4e45 2044 5352     .....-----END RS
   e93f0:	2041 5250 5649 5441 2045 454b 2d59 2d2d     A PRIVATE KEY---
   e9400:	2d2d 2d00 2d2d 2d2d 4542 4947 204e 5352     --.-----BEGIN RS
   e9410:	2041 5250 5649 5441 2045 454b 2d59 2d2d     A PRIVATE KEY---
   e9420:	2d2d 2d00 2d2d 2d2d 4e45 2044 4345 5020     --.-----END EC P
   e9430:	4952 4156 4554 4b20 5945 2d2d 2d2d 002d     RIVATE KEY-----.
   e9440:	2d2d 2d2d 422d 4745 4e49 4520 2043 5250     -----BEGIN EC PR
   e9450:	5649 5441 2045 454b 2d59 2d2d 2d2d 2d00     IVATE KEY-----.-
   e9460:	2d2d 2d2d 4e45 2044 5250 5649 5441 2045     ----END PRIVATE 
   e9470:	454b 2d59 2d2d 2d2d 2d00 2d2d 2d2d 4542     KEY-----.-----BE
   e9480:	4947 204e 5250 5649 5441 2045 454b 2d59     GIN PRIVATE KEY-
   e9490:	2d2d 2d2d 2d00 2d2d 2d2d 4e45 2044 4e45     ----.-----END EN
   e94a0:	5243 5059 4554 2044 5250 5649 5441 2045     CRYPTED PRIVATE 
   e94b0:	454b 2d59 2d2d 2d2d 2d00 2d2d 2d2d 4542     KEY-----.-----BE
   e94c0:	4947 204e 4e45 5243 5059 4554 2044 5250     GIN ENCRYPTED PR
   e94d0:	5649 5441 2045 454b 2d59 2d2d 2d2d 2d00     IVATE KEY-----.-
   e94e0:	2d2d 2d2d 4e45 2044 5352 2041 5550 4c42     ----END RSA PUBL
   e94f0:	4349 4b20 5945 2d2d 2d2d 002d 2d2d 2d2d     IC KEY-----.----
   e9500:	422d 4745 4e49 5220 4153 5020 4255 494c     -BEGIN RSA PUBLI
   e9510:	2043 454b 2d59 2d2d 2d2d 2d00 2d2d 2d2d     C KEY-----.-----
   e9520:	4e45 2044 5550 4c42 4349 4b20 5945 2d2d     END PUBLIC KEY--
   e9530:	2d2d 002d 2d2d 2d2d 422d 4745 4e49 5020     ---.-----BEGIN P
   e9540:	4255 494c 2043 454b 2d59 2d2d 2d2d 0000     UBLIC KEY-----..

000e9550 <_ZL5last4>:
	...
   e9558:	1c20 0000 0000 0000 3840 0000 0000 0000      .......@8......
   e9568:	2460 0000 0000 0000 7080 0000 0000 0000     `$.......p......
   e9578:	6ca0 0000 0000 0000 48c0 0000 0000 0000     .l.......H......
   e9588:	54e0 0000 0000 0000 e100 0000 0000 0000     .T..............
   e9598:	fd20 0000 0000 0000 d940 0000 0000 0000      .......@.......
   e95a8:	c560 0000 0000 0000 9180 0000 0000 0000     `...............
   e95b8:	8da0 0000 0000 0000 a9c0 0000 0000 0000     ................
   e95c8:	b5e0 0000 0000 0000                         ........

000e95d0 <_ZL14base64_dec_map>:
   e95d0:	7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f     ................
   e95e0:	7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f     ................
   e95f0:	7f7f 7f7f 7f7f 7f7f 7f7f 3e7f 7f7f 3f7f     ...........>...?
   e9600:	3534 3736 3938 3b3a 3d3c 7f7f 407f 7f7f     456789:;<=...@..
   e9610:	007f 0201 0403 0605 0807 0a09 0c0b 0e0d     ................
   e9620:	100f 1211 1413 1615 1817 7f19 7f7f 7f7f     ................
   e9630:	1a7f 1c1b 1e1d 201f 2221 2423 2625 2827     ....... !"#$%&'(
   e9640:	2a29 2c2b 2e2d 302f 3231 7f33 7f7f 7f7f     )*+,-./0123.....

000e9650 <CSWTCH.35>:
   e9650:	8264 000e 8294 000e 8324 000e 82c4 000e     d.......$.......
   e9660:	82f4 000e                                   ....

000e9664 <_ZL11secp256r1_b>:
   e9664:	604b 27d2 3c3e 3bce b0f6 cc53 06b0 651d     K`.'><.;..S....e
   e9674:	86bc 7698 bd55 b3eb 93e7 aa3a 35d8 5ac6     ...vU.....:..5.Z

000e9684 <_ZL11secp256r1_n>:
   e9684:	2551 fc63 cac2 f3b9 9e84 a717 faad bce6     Q%c.............
   e9694:	ffff ffff ffff ffff 0000 0000 ffff ffff     ................

000e96a4 <_ZL11secp256r1_p>:
   e96a4:	ffff ffff ffff ffff ffff ffff 0000 0000     ................
	...
   e96bc:	0001 0000 ffff ffff                         ........

000e96c4 <_ZL12secp256r1_gx>:
   e96c4:	c296 d898 3945 f4a1 33a0 2deb 7d81 7703     ....E9...3.-.}.w
   e96d4:	40f2 63a4 e6e5 f8bc 4247 e12c d1f2 6b17     .@.c....GB,....k

000e96e4 <_ZL12secp256r1_gy>:
   e96e4:	51f5 37bf 4068 cbb6 5ece 6b31 3357 2bce     .Q.7h@...^1kW3.+
   e96f4:	9e16 7c0f eb4a 8ee7 7f9b fe1a 42e2 4fe3     ...|J........B.O
   e9704:	1d55 0025 0000 0000                         U.%.....

000e970c <_ZL23x509_crt_verify_strings>:
   e970c:	0001 0000 9ad7 000e 0002 0000 9afc 000e     ................
   e971c:	0004 0000 9b2b 000e 0008 0000 9b70 000e     ....+.......p...
   e972c:	0010 0000 9baa 000e 0020 0000 9bdc 000e     ........ .......
   e973c:	0040 0000 9bef 000e 0080 0000 9c07 000e     @...............
   e974c:	0100 0000 9c2c 000e 0200 0000 9c5a 000e     ....,.......Z...
   e975c:	0400 0000 9c88 000e 0800 0000 9ca3 000e     ................
   e976c:	1000 0000 9ccf 000e 2000 0000 9d03 000e     ......... ......
   e977c:	4000 0000 9d31 000e 8000 0000 9d66 000e     .@..1.......f...
   e978c:	0000 0001 9daf 000e 0000 0002 9e01 000e     ................
   e979c:	0000 0004 9e2e 000e 0000 0008 9e6f 000e     ............o...
	...

000e97b4 <mbedtls_x509_crt_profile_default>:
   e97b4:	00f0 0000 ffff 0fff ffff 0fff 0800 0000     ................
   e97c4:	6166 736c 0065 430a 7265 6974 6966 6163     false..Certifica
   e97d4:	6574 6920 2073 6e75 6e69 7469 6169 696c     te is uninitiali
   e97e4:	6573 2164 000a 7325 6563 7472 202e 6576     sed!..%scert. ve
   e97f4:	7372 6f69 206e 2020 2020 203a 6425 000a     rsion     : %d..
   e9804:	7325 6573 6972 6c61 6e20 6d75 6562 2072     %sserial number 
   e9814:	2020 2020 203a 0a00 7325 7369 7573 7265         : ..%sissuer
   e9824:	6e20 6d61 2065 2020 2020 2020 203a 0a00      name       : ..
   e9834:	7325 7573 6a62 6365 2074 616e 656d 2020     %ssubject name  
   e9844:	2020 2020 203a 0a00 7325 7369 7573 6465         : ..%sissued
   e9854:	2020 6e6f 2020 2020 2020 2020 203a 3025       on        : %0
   e9864:	6434 252d 3230 2d64 3025 6432 2520 3230     4d-%02d-%02d %02
   e9874:	3a64 3025 6432 253a 3230 0064 250a 6573     d:%02d:%02d..%se
   e9884:	7078 7269 7365 6f20 206e 2020 2020 2020     xpires on       
   e9894:	3a20 2520 3430 2d64 3025 6432 252d 3230      : %04d-%02d-%02
   e98a4:	2064 3025 6432 253a 3230 3a64 3025 6432     d %02d:%02d:%02d
   e98b4:	0a00 7325 6973 6e67 6465 7520 6973 676e     ..%ssigned using
   e98c4:	2020 2020 2020 203a 0a00 7325 2d25 3831           : ..%s%-18
   e98d4:	3a73 2520 2064 6962 7374 0a00 7325 6162     s: %d bits..%sba
   e98e4:	6973 2063 6f63 736e 7274 6961 746e 2073     sic constraints 
   e98f4:	203a 4143 253d 0073 202c 616d 5f78 6170     : CA=%s., max_pa
   e9904:	6874 656c 3d6e 6425 0a00 7325 7573 6a62     thlen=%d..%ssubj
   e9914:	6365 2074 6c61 2074 616e 656d 2020 203a     ect alt name  : 
   e9924:	0a00 7325 6563 7472 202e 7974 6570 2020     ..%scert. type  
   e9934:	2020 2020 2020 203a 2500 5373 4c53 4320           : .%sSSL C
   e9944:	696c 6e65 0074 7325 5353 204c 6553 7672     lient.%sSSL Serv
   e9954:	7265 2500 4573 616d 6c69 2500 4f73 6a62     er.%sEmail.%sObj
   e9964:	6365 2074 6953 6e67 6e69 0067 7325 6552     ect Signing.%sRe
   e9974:	6573 7672 6465 2500 5373 4c53 4320 0041     served.%sSSL CA.
   e9984:	7325 6d45 6961 206c 4143 2500 4f73 6a62     %sEmail CA.%sObj
   e9994:	6365 2074 6953 6e67 6e69 2067 4143 0a00     ect Signing CA..
   e99a4:	7325 656b 2079 7375 6761 2065 2020 2020     %skey usage     
   e99b4:	2020 2020 203a 2500 4473 6769 7469 6c61         : .%sDigital
   e99c4:	5320 6769 616e 7574 6572 2500 4e73 6e6f      Signature.%sNon
   e99d4:	5220 7065 6475 6169 6974 6e6f 2500 4b73      Repudiation.%sK
   e99e4:	7965 4520 636e 7069 6568 6d72 6e65 0074     ey Encipherment.
   e99f4:	7325 6144 6174 4520 636e 7069 6568 6d72     %sData Encipherm
   e9a04:	6e65 0074 7325 654b 2079 6741 6572 6d65     ent.%sKey Agreem
   e9a14:	6e65 0074 7325 654b 2079 6543 7472 5320     ent.%sKey Cert S
   e9a24:	6769 006e 7325 5243 204c 6953 6e67 2500     ign.%sCRL Sign.%
   e9a34:	4573 636e 7069 6568 2072 6e4f 796c 2500     sEncipher Only.%
   e9a44:	4473 6365 7069 6568 2072 6e4f 796c 0a00     sDecipher Only..
   e9a54:	7325 7865 2074 656b 2079 7375 6761 2065     %sext key usage 
   e9a64:	2020 2020 203a 2500 2573 0073 7325 7325         : .%s%s.%s%s
   e9a74:	000a 7325 6e55 6e6b 776f 206e 6572 7361     ..%sUnknown reas
   e9a84:	6e6f 2820 6874 7369 7320 6f68 6c75 2064     on (this should 
   e9a94:	6f6e 2074 6168 7070 6e65 0a29 2d00 2d2d     not happen)..---
   e9aa4:	2d2d 4542 4947 204e 4543 5452 4649 4349     --BEGIN CERTIFIC
   e9ab4:	5441 2d45 2d2d 2d2d 2d00 2d2d 2d2d 4e45     ATE-----.-----EN
   e9ac4:	2044 4543 5452 4649 4349 5441 2d45 2d2d     D CERTIFICATE---
   e9ad4:	2d2d 5400 6568 6320 7265 6974 6966 6163     --.The certifica
   e9ae4:	6574 7620 6c61 6469 7469 2079 6168 2073     te validity has 
   e9af4:	7865 6970 6572 0064 6854 2065 6563 7472     expired.The cert
   e9b04:	6669 6369 7461 2065 6168 2073 6562 6e65     ificate has been
   e9b14:	7220 7665 6b6f 6465 2820 7369 6f20 206e      revoked (is on 
   e9b24:	2061 5243 294c 5400 6568 6320 7265 6974     a CRL).The certi
   e9b34:	6966 6163 6574 4320 6d6f 6f6d 206e 614e     ficate Common Na
   e9b44:	656d 2820 4e43 2029 6f64 7365 6e20 746f     me (CN) does not
   e9b54:	6d20 7461 6863 7720 7469 2068 6874 2065      match with the 
   e9b64:	7865 6570 7463 6465 4320 004e 6854 2065     expected CN.The 
   e9b74:	6563 7472 6669 6369 7461 2065 7369 6e20     certificate is n
   e9b84:	746f 6320 726f 6572 7463 796c 7320 6769     ot correctly sig
   e9b94:	656e 2064 7962 7420 6568 7420 7572 7473     ned by the trust
   e9ba4:	6465 4320 0041 6854 2065 5243 204c 7369     ed CA.The CRL is
   e9bb4:	6e20 746f 6320 726f 6572 7463 796c 7320      not correctly s
   e9bc4:	6769 656e 2064 7962 7420 6568 7420 7572     igned by the tru
   e9bd4:	7473 6465 4320 0041 6854 2065 5243 204c     sted CA.The CRL 
   e9be4:	7369 6520 7078 7269 6465 4300 7265 6974     is expired.Certi
   e9bf4:	6966 6163 6574 7720 7361 6d20 7369 6973     ficate was missi
   e9c04:	676e 4300 7265 6974 6966 6163 6574 7620     ng.Certificate v
   e9c14:	7265 6669 6369 7461 6f69 206e 6177 2073     erification was 
   e9c24:	6b73 7069 6570 0064 744f 6568 2072 6572     skipped.Other re
   e9c34:	7361 6e6f 2820 6163 206e 6562 7520 6573     ason (can be use
   e9c44:	2064 7962 7620 7265 6669 2079 6163 6c6c     d by verify call
   e9c54:	6162 6b63 0029 6854 2065 6563 7472 6669     back).The certif
   e9c64:	6369 7461 2065 6176 696c 6964 7974 7320     icate validity s
   e9c74:	6174 7472 2073 6e69 7420 6568 6620 7475     tarts in the fut
   e9c84:	7275 0065 6854 2065 5243 204c 7369 6620     ure.The CRL is f
   e9c94:	6f72 206d 6874 2065 7566 7574 6572 5500     rom the future.U
   e9ca4:	6173 6567 6420 656f 2073 6f6e 2074 616d     sage does not ma
   e9cb4:	6374 2068 6874 2065 656b 5579 6173 6567     tch the keyUsage
   e9cc4:	6520 7478 6e65 6973 6e6f 5500 6173 6567      extension.Usage
   e9cd4:	6420 656f 2073 6f6e 2074 616d 6374 2068      does not match 
   e9ce4:	6874 2065 7865 6574 646e 6465 654b 5579     the extendedKeyU
   e9cf4:	6173 6567 6520 7478 6e65 6973 6e6f 5500     sage extension.U
   e9d04:	6173 6567 6420 656f 2073 6f6e 2074 616d     sage does not ma
   e9d14:	6374 2068 6874 2065 736e 6543 7472 7954     tch the nsCertTy
   e9d24:	6570 6520 7478 6e65 6973 6e6f 5400 6568     pe extension.The
   e9d34:	6320 7265 6974 6966 6163 6574 6920 2073      certificate is 
   e9d44:	6973 6e67 6465 7720 7469 2068 6e61 7520     signed with an u
   e9d54:	616e 6363 7065 6174 6c62 2065 6168 6873     nacceptable hash
   e9d64:	002e 6854 2065 6563 7472 6669 6369 7461     ..The certificat
   e9d74:	2065 7369 7320 6769 656e 2064 6977 6874     e is signed with
   e9d84:	6120 206e 6e75 6361 6563 7470 6261 656c      an unacceptable
   e9d94:	5020 204b 6c61 2067 6528 2067 5352 2041      PK alg (eg RSA 
   e9da4:	7376 4520 4443 4153 2e29 5400 6568 6320     vs ECDSA)..The c
   e9db4:	7265 6974 6966 6163 6574 6920 2073 6973     ertificate is si
   e9dc4:	6e67 6465 7720 7469 2068 6e61 7520 616e     gned with an una
   e9dd4:	6363 7065 6174 6c62 2065 656b 2079 6528     cceptable key (e
   e9de4:	2067 6162 2064 7563 7672 2c65 5220 4153     g bad curve, RSA
   e9df4:	7420 6f6f 7320 6f68 7472 2e29 5400 6568      too short)..The
   e9e04:	4320 4c52 6920 2073 6973 6e67 6465 7720      CRL is signed w
   e9e14:	7469 2068 6e61 7520 616e 6363 7065 6174     ith an unaccepta
   e9e24:	6c62 2065 6168 6873 002e 6854 2065 5243     ble hash..The CR
   e9e34:	204c 7369 7320 6769 656e 2064 6977 6874     L is signed with
   e9e44:	6120 206e 6e75 6361 6563 7470 6261 656c      an unacceptable
   e9e54:	5020 204b 6c61 2067 6528 2067 5352 2041      PK alg (eg RSA 
   e9e64:	7376 4520 4443 4153 2e29 5400 6568 4320     vs ECDSA)..The C
   e9e74:	4c52 6920 2073 6973 6e67 6465 7720 7469     RL is signed wit
   e9e84:	2068 6e61 7520 616e 6363 7065 6174 6c62     h an unacceptabl
   e9e94:	2065 656b 2079 6528 2067 6162 2064 7563     e key (eg bad cu
   e9ea4:	7672 2c65 5220 4153 7420 6f6f 7320 6f68     rve, RSA too sho
   e9eb4:	7472 2e29 0000 0000                         rt).....

000e9ebc <mbedtls_x509_crt_profile_suiteb>:
   e9ebc:	0060 0000 000a 0000 000c 0000 0000 0000     `...............
   e9ecc:	6e69 6176 696c 2064 4b50 0000               invalid PK..

000e9ed8 <CSWTCH.19>:
   e9ed8:	9370 000e 93a0 000e 9340 000e 9310 000e     p.......@.......

000e9ee8 <CSWTCH.336>:
   e9ee8:	0504 0706 6308 696c 6e65 2074 6966 696e     .....client fini
   e9ef8:	6873 6465 7300 7265 6576 2072 6966 696e     shed.server fini
   e9f08:	6873 6465 6d00 7361 6574 2072 6573 7263     shed.master secr
   e9f18:	7465 6b00 7965 6520 7078 6e61 6973 6e6f     et.key expansion
   e9f28:	7500 6b6e 6f6e 6e77 5300 4c53 3376 302e     .unknown.SSLv3.0
   e9f38:	5400 534c 3176 302e 5400 534c 3176 312e     .TLSv1.0.TLSv1.1
   e9f48:	5400 534c 3176 322e 0000                    .TLSv1.2..

000e9f52 <CSWTCH.236>:
   e9f52:	0200 0400 0800 1000                         ........

000e9f5a <CSWTCH.338>:
   e9f5a:	0302 0504 0006                              ......

000e9f60 <_ZL1K>:
   e9f60:	ae22 d728 2f98 428a 65cd 23ef 4491 7137     ".(../.B.e.#.D7q
   e9f70:	3b2f ec4d fbcf b5c0 dbbc 8189 dba5 e9b5     /;M.............
   e9f80:	b538 f348 c25b 3956 d019 b605 11f1 59f1     8.H.[.V9.......Y
   e9f90:	4f9b af19 82a4 923f 8118 da6d 5ed5 ab1c     .O....?...m..^..
   e9fa0:	0242 a303 aa98 d807 6fbe 4570 5b01 1283     B........opE.[..
   e9fb0:	b28c 4ee4 85be 2431 b4e2 d5ff 7dc3 550c     ...N..1$.....}.U
   e9fc0:	896f f27b 5d74 72be 96b1 3b16 b1fe 80de     o.{.t].r...;....
   e9fd0:	1235 25c7 06a7 9bdc 2694 cf69 f174 c19b     5..%.....&i.t...
   e9fe0:	4ad2 9ef1 69c1 e49b 25e3 384f 4786 efbe     .J...i...%O8.G..
   e9ff0:	d5b5 8b8c 9dc6 0fc1 9c65 77ac a1cc 240c     ........e..w...$
   ea000:	0275 592b 2c6f 2de9 e483 6ea6 84aa 4a74     u.+Yo,.-...n..tJ
   ea010:	fbd4 bd41 a9dc 5cb0 53b5 8311 88da 76f9     ..A....\.S.....v
   ea020:	dfab ee66 5152 983e 3210 2db4 c66d a831     ..f.RQ>..2.-m.1.
   ea030:	213f 98fb 27c8 b003 0ee4 beef 7fc7 bf59     ?!...'........Y.
   ea040:	8fc2 3da8 0bf3 c6e0 a725 930a 9147 d5a7     ...=....%...G...
   ea050:	826f e003 6351 06ca 6e70 0a0e 2967 1429     o...Qc..pn..g)).
   ea060:	2ffc 46d2 0a85 27b7 c926 5c26 2138 2e1b     ./.F...'&.&\8!..
   ea070:	2aed 5ac4 6dfc 4d2c b3df 9d95 0d13 5338     .*.Z.m,M......8S
   ea080:	63de 8baf 7354 650a b2a8 3c77 0abb 766a     .c..Ts.e..w<..jv
   ea090:	aee6 47ed c92e 81c2 353b 1482 2c85 9272     ...G....;5...,r.
   ea0a0:	0364 4cf1 e8a1 a2bf 3001 bc42 664b a81a     d..L.....0B.Kf..
   ea0b0:	9791 d0f8 8b70 c24b be30 0654 51a3 c76c     ....p.K.0.T..Ql.
   ea0c0:	5218 d6ef e819 d192 a910 5565 0624 d699     .R........eU$...
   ea0d0:	202a 5771 3585 f40e d1b8 32bb a070 106a     * qW.5.....2p.j.
   ea0e0:	d0c8 b8d2 c116 19a4 ab53 5141 6c08 1e37     ........S.AQ.l7.
   ea0f0:	eb99 df8e 774c 2748 48a8 e19b bcb5 34b0     ....LwH'.H.....4
   ea100:	5a63 c5c9 0cb3 391c 8acb e341 aa4a 4ed8     cZ.....9..A.J..N
   ea110:	e373 7763 ca4f 5b9c b8a3 d6b2 6ff3 682e     s.cwO..[.....o.h
   ea120:	b2fc 5def 82ee 748f 2f60 4317 636f 78a5     ...]...t`/.Coc.x
   ea130:	ab72 a1f0 7814 84c8 39ec 1a64 0208 8cc7     r....x...9d.....
   ea140:	1e28 2363 fffa 90be bde9 de82 6ceb a450     (.c#.........lP.
   ea150:	7915 b2c6 a3f7 bef9 532b e372 78f2 c671     .y......+Sr..xq.
   ea160:	619c ea26 3ece ca27 c207 21c0 b8c7 d186     .a&..>'....!....
   ea170:	eb1e cde0 7dd6 eada d178 ee6e 4f7f f57d     .....}..x.n..O}.
   ea180:	6fba 7217 67aa 06f0 98a6 a2c8 7dc5 0a63     .o.r.g.......}c.
   ea190:	0dae bef9 9804 113f 471b 131c 0b35 1b71     ......?..G..5.q.
   ea1a0:	7d84 2304 77f5 28db 2493 40c7 ab7b 32ca     .}.#.w.(.$.@{..2
   ea1b0:	bebc 15c9 be0a 3c9e 0d4c 9c10 67c4 431d     .......<L....g.C
   ea1c0:	42b6 cb3e d4be 4cc5 7e2a fc65 299c 597f     .B>....L*~e..).Y
   ea1d0:	faec 3ad6 6fab 5fcb 5817 4a47 198c 6c44     ...:.o._.XGJ..Dl
   ea1e0:	7250 636f 542d 7079 3a65 3420 452c 434e     Proc-Type: 4,ENC
   ea1f0:	5952 5450 4445 5400 534c 452d 4443 4548     RYPTED.TLS-ECDHE
   ea200:	452d 4443 4153 572d 5449 2d48 4541 2d53     -ECDSA-WITH-AES-
   ea210:	3231 2d38 4347 2d4d 4853 3241 3635 5400     128-GCM-SHA256.T
   ea220:	534c 452d 4443 4548 452d 4443 4153 572d     LS-ECDHE-ECDSA-W
   ea230:	5449 2d48 4541 2d53 3532 2d36 4347 2d4d     ITH-AES-256-GCM-
   ea240:	4853 3341 3438 5400 534c 522d 4153 572d     SHA384.TLS-RSA-W
   ea250:	5449 2d48 4541 2d53 3532 2d36 4347 2d4d     ITH-AES-256-GCM-
   ea260:	4853 3341 3438 5400 534c 522d 4153 572d     SHA384.TLS-RSA-W
   ea270:	5449 2d48 4541 2d53 3231 2d38 4347 2d4d     ITH-AES-128-GCM-
   ea280:	4853 3241 3635 5400 534c 502d 4b53 572d     SHA256.TLS-PSK-W
   ea290:	5449 2d48 4541 2d53 3231 2d38 4347 2d4d     ITH-AES-128-GCM-
   ea2a0:	4853 3241 3635 5400 534c 502d 4b53 572d     SHA256.TLS-PSK-W
   ea2b0:	5449 2d48 4541 2d53 3532 2d36 4347 2d4d     ITH-AES-256-GCM-
   ea2c0:	4853 3341 3438 5400 534c 522d 4153 502d     SHA384.TLS-RSA-P
   ea2d0:	4b53 572d 5449 2d48 4541 2d53 3231 2d38     SK-WITH-AES-128-
   ea2e0:	4347 2d4d 4853 3241 3635 5400 534c 522d     GCM-SHA256.TLS-R
   ea2f0:	4153 502d 4b53 572d 5449 2d48 4541 2d53     SA-PSK-WITH-AES-
   ea300:	3532 2d36 4347 2d4d 4853 3341 3438 0000     256-GCM-SHA384..

000ea310 <_ZL23ciphersuite_definitions>:
   ea310:	c02b 0000 a1f7 000e 060e 0004 0003 0000     +...............
   ea320:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   ea330:	c02c 0000 a21f 000e 0710 0004 0003 0000     ,...............
   ea340:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   ea350:	009d 0000 a247 000e 0710 0001 0003 0000     ....G...........
   ea360:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   ea370:	009c 0000 a267 000e 060e 0001 0003 0000     ....g...........
   ea380:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   ea390:	00a8 0000 a287 000e 060e 0005 0003 0000     ................
   ea3a0:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   ea3b0:	00a9 0000 a2a7 000e 0710 0005 0003 0000     ................
   ea3c0:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   ea3d0:	00ac 0000 a2c7 000e 060e 0007 0003 0000     ................
   ea3e0:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   ea3f0:	00ad 0000 a2eb 000e 0710 0007 0003 0000     ................
   ea400:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   ea410:	0000 0000 87fd 000e 0000 0000 0000 0000     ................
	...

000ea430 <_ZL22ciphersuite_preference>:
   ea430:	cca8 0000 cca9 0000 ccaa 0000 c02c 0000     ............,...
   ea440:	c030 0000 009f 0000 c0ad 0000 c09f 0000     0...............
   ea450:	c024 0000 c028 0000 006b 0000 c00a 0000     $...(...k.......
   ea460:	c014 0000 0039 0000 c0af 0000 c0a3 0000     ....9...........
   ea470:	c087 0000 c08b 0000 c07d 0000 c073 0000     ........}...s...
   ea480:	c077 0000 00c4 0000 0088 0000 c05d 0000     w...........]...
   ea490:	c061 0000 c053 0000 c049 0000 c04d 0000     a...S...I...M...
   ea4a0:	c045 0000 c02b 0000 c02f 0000 009e 0000     E...+.../.......
   ea4b0:	c0ac 0000 c09e 0000 c023 0000 c027 0000     ........#...'...
   ea4c0:	0067 0000 c009 0000 c013 0000 0033 0000     g...........3...
   ea4d0:	c0ae 0000 c0a2 0000 c086 0000 c08a 0000     ................
   ea4e0:	c07c 0000 c072 0000 c076 0000 00be 0000     |...r...v.......
   ea4f0:	0045 0000 c05c 0000 c060 0000 c052 0000     E...\...`...R...
   ea500:	c048 0000 c04c 0000 c044 0000 ccac 0000     H...L...D.......
   ea510:	ccad 0000 00ab 0000 c0a7 0000 c038 0000     ............8...
   ea520:	00b3 0000 c036 0000 0091 0000 c091 0000     ....6...........
   ea530:	c09b 0000 c097 0000 c0ab 0000 c06d 0000     ............m...
   ea540:	c071 0000 c067 0000 00aa 0000 c0a6 0000     q...g...........
   ea550:	c037 0000 00b2 0000 c035 0000 0090 0000     7.......5.......
   ea560:	c090 0000 c096 0000 c09a 0000 c0aa 0000     ................
   ea570:	c06c 0000 c070 0000 c066 0000 c0ff 0000     l...p...f.......
   ea580:	009d 0000 c09d 0000 003d 0000 0035 0000     ........=...5...
   ea590:	c032 0000 c02a 0000 c00f 0000 c02e 0000     2...*...........
   ea5a0:	c026 0000 c005 0000 c0a1 0000 c07b 0000     &...........{...
   ea5b0:	00c0 0000 0084 0000 c08d 0000 c079 0000     ............y...
   ea5c0:	c089 0000 c075 0000 c05f 0000 c063 0000     ....u..._...c...
   ea5d0:	c051 0000 c04b 0000 c04f 0000 c03d 0000     Q...K...O...=...
   ea5e0:	009c 0000 c09c 0000 003c 0000 002f 0000     ........<.../...
   ea5f0:	c031 0000 c029 0000 c00e 0000 c02d 0000     1...).......-...
   ea600:	c025 0000 c004 0000 c0a0 0000 c07a 0000     %...........z...
   ea610:	00ba 0000 0041 0000 c08c 0000 c078 0000     ....A.......x...
   ea620:	c088 0000 c074 0000 c05e 0000 c062 0000     ....t...^...b...
   ea630:	c050 0000 c04a 0000 c04e 0000 c03c 0000     P...J...N...<...
   ea640:	ccae 0000 00ad 0000 00b7 0000 0095 0000     ................
   ea650:	c093 0000 c099 0000 c06f 0000 c069 0000     ........o...i...
   ea660:	00ac 0000 00b6 0000 0094 0000 c092 0000     ................
   ea670:	c098 0000 c06e 0000 c068 0000 ccab 0000     ....n...h.......
   ea680:	00a9 0000 c0a5 0000 00af 0000 008d 0000     ................
   ea690:	c08f 0000 c095 0000 c0a9 0000 c06b 0000     ............k...
   ea6a0:	c065 0000 00a8 0000 c0a4 0000 00ae 0000     e...............
   ea6b0:	008c 0000 c08e 0000 c094 0000 c0a8 0000     ................
   ea6c0:	c06a 0000 c064 0000 c008 0000 c012 0000     j...d...........
   ea6d0:	0016 0000 c034 0000 008f 0000 000a 0000     ....4...........
   ea6e0:	c00d 0000 c003 0000 0093 0000 008b 0000     ................
   ea6f0:	c007 0000 c011 0000 c033 0000 008e 0000     ........3.......
   ea700:	0005 0000 0004 0000 c00c 0000 c002 0000     ................
   ea710:	0092 0000 008a 0000 0015 0000 0009 0000     ................
   ea720:	c006 0000 c010 0000 c03b 0000 c03a 0000     ........;...:...
   ea730:	c039 0000 00b5 0000 00b4 0000 002d 0000     9...........-...
   ea740:	003b 0000 0002 0000 0001 0000 c00b 0000     ;...............
   ea750:	c001 0000 00b9 0000 00b8 0000 002e 0000     ................
   ea760:	00b1 0000 00b0 0000 002c 0000 0000 0000     ........,.......
   ea770:	0302 0705 0d0b 1311 1d17 251f 2b29 352f     ...........%)+/5
   ea780:	3d3b 4743 4f49 5953 6561 6b67 716d 837f     ;=CGIOSYaegkmq..
   ea790:	8b89 9795 a39d ada7 b5b3 c1bf c7c5 dfd3     ................
   ea7a0:	e5e3 efe9 fbf1 4547 0054 4f50 5453 5000     ......GET.POST.P
   ea7b0:	5455 4400 4c45 5445 0045 4150 4354 0048     UT.DELETE.PATCH.
   ea7c0:	7061 6c70 6369 7461 6f69 2f6e 736a 6e6f     application/json
   ea7d0:	6100 7070 696c 6163 6974 6e6f 6f2f 7463     .application/oct
   ea7e0:	7465 732d 7274 6165 006d 007b 6622 6361     et-stream.{."fac
   ea7f0:	4965 2264 223a 2200 222c 6570 7372 6e6f     eId":".","person
   ea800:	6449 3a22 0022 2c22 5022 7265 6f73 476e     Id":".","PersonG
   ea810:	6f72 7075 6449 3a22 0022 7d22 0a0d 0a0d     roupId":"."}....
   ea820:	2000 5448 5054 312f 302e 4f00 7063 412d     . HTTP/1.0.Ocp-A
   ea830:	6970 2d6d 7553 7362 7263 7069 6974 6e6f     pim-Subscription
   ea840:	4b2d 7965 003a 6f43 746e 6e65 2d74 7954     -Key:.Content-Ty
   ea850:	6570 003a 6f48 7473 003a 6f43 746e 6e65     pe:.Host:.Conten
   ea860:	2d74 654c 676e 6874 003a 0000               t-Length:...

000ea86c <_ZTVN5spark13EthernetClassE>:
	...
   ea874:	544b 000e 5441 000e 5437 000e 542d 000e     KT..AT..7T..-T..
   ea884:	5421 000e 5415 000e 5409 000e 5401 000e     !T...T...T...T..
   ea894:	53f7 000e 53ed 000e 6605 000e 6162 6475     .S...S...f..baud
   ea8a4:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   ea8b4:	6170 6172 006d 6d63 0064 6469 6800 646e     param.cmd.id.hnd
   ea8c4:	7300 7274 006d 6966 746c 6c00 6c76 6100     .strm.filt.lvl.a
   ea8d4:	6464 6148 646e 656c 0072 6572 6f6d 6576     ddHandler.remove
   ea8e4:	6148 646e 656c 0072 6e65 6d75 6148 646e     Handler.enumHand
   ea8f4:	656c 7372 4a00 4f53 534e 7274 6165 4c6d     lers.JSONStreamL
   ea904:	676f 6148 646e 656c 0072 7061 0070 3025     ogHandler.app.%0
   ea914:	3031 2075 5d00 0020 2928 203a 2000 005b     10u .] .(): . [.
   ea924:	6f63 6564 3d20 0020 6925 6400 7465 6961     code = .%i.detai
   ea934:	736c 3d20 0020 0066 6e6c 6600 006e 6564     ls = .f.ln.fn.de
   ea944:	6174 6c69 6e00 6e6f 0065 7274 6361 0065     tail.none.trace.
   ea954:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
   ea964:	6170 696e 0063 6c61 006c 2b25 3330 3a64     panic.all.%+03d:
   ea974:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   ea984:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   ea994:	0000 0000                                   ....

000ea998 <_ZTV9IPAddress>:
	...
   ea9a0:	5ad5 000e 5ac5 000e 5ac7 000e               .Z...Z...Z..

000ea9ac <_ZTV9USBSerial>:
	...
   ea9b4:	5bd9 000e 5c29 000e 5c37 000e 57d9 000e     .[..)\..7\...W..
   ea9c4:	5c15 000e 5bdb 000e 5bf1 000e 5c23 000e     .\...[...[..#\..
   ea9d4:	5c07 000e 5bd5 000e                         .\...[..

000ea9dc <_ZTV11USARTSerial>:
	...
   ea9e4:	5ce5 000e 5d35 000e 5d43 000e 57d9 000e     .\..5]..C]...W..
   ea9f4:	5cf9 000e 5d1b 000e 5d07 000e 5d2f 000e     .\...]...]../]..
   eaa04:	5ce7 000e 5ceb 000e                         .\...\..

000eaa0c <_ZTVN5spark9MeshClassE>:
	...
   eaa14:	5e73 000e 5e69 000e 5e5f 000e 5e55 000e     s^..i^.._^..U^..
   eaa24:	5e49 000e 5e3d 000e 5e31 000e 5e29 000e     I^..=^..1^..)^..
   eaa34:	5e1f 000e 5e15 000e 6605 000e               .^...^...f..

000eaa40 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   eaa48:	6019 000e 601f 000e 6507 000e 602d 000e     .`...`...e..-`..
   eaa58:	601b 000e                                   .`..

000eaa5c <_ZTV9TCPClient>:
	...
   eaa64:	4135 000d 4169 000d 5f91 000e 5fab 000e     5A..iA..._..._..
   eaa74:	63ad 000e 60ff 000e 60d1 000e 5fd5 000e     .c...`...`..._..
   eaa84:	6289 000e 6185 000e 6133 000e 637d 000e     .b...a..3a..}c..
   eaa94:	5fd7 000e 600f 000e 5fbd 000e 6031 000e     ._...`..._..1`..
   eaaa4:	60b1 000e 6977 6972 676e 7200 6365 2076     .`..wiring.recv 
   eaab4:	7265 6f72 2072 203d 6425 0000               error = %d..

000eaac0 <_ZTVN5spark9WiFiClassE>:
	...
   eaac8:	657d 000e 6573 000e 6569 000e 651f 000e     }e..se..ie...e..
   eaad8:	655d 000e 6551 000e 6545 000e 653d 000e     ]e..Qe..Ee..=e..
   eaae8:	6533 000e 6529 000e 6605 000e               3e..)e...f..

000eaaf4 <_ZTVN5spark12NetworkClassE>:
	...
   eaafc:	659d 000e 65a7 000e 65b1 000e 65bb 000e     .e...e...e...e..
   eab0c:	65c5 000e 65d1 000e 65dd 000e 65e9 000e     .e...e...e...e..
   eab1c:	65f1 000e 65fb 000e 6605 000e               .e...e...f..

000eab28 <day_name.4725>:
   eab28:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   eab38:	6972 6153 4a74                                   riSat

000eab3d <mon_name.4726>:
   eab3d:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   eab4d:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   eab5d:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   eab6d:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   eab7d:	6425 000a                                   %d..

000eab81 <_ctype_>:
   eab81:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   eab91:	2020 2020 2020 2020 2020 2020 2020 2020                     
   eaba1:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   eabb1:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   eabc1:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   eabd1:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   eabe1:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   eabf1:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   eac01:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000eac84 <__sf_fake_stdin>:
	...

000eaca4 <__sf_fake_stdout>:
	...

000eacc4 <__sf_fake_stderr>:
	...

000eace4 <__month_lengths>:
   eace4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   eacf4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   ead04:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   ead14:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   ead24:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   ead34:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   ead44:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   ead54:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   ead64:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   ead74:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000ead80 <link_const_variable_data_end>:
   ead80:	000d410d 	.word	0x000d410d
   ead84:	000d4339 	.word	0x000d4339
   ead88:	000d459d 	.word	0x000d459d
   ead8c:	000e4fb1 	.word	0x000e4fb1
   ead90:	000e5455 	.word	0x000e5455
   ead94:	000e5489 	.word	0x000e5489
   ead98:	000e57b1 	.word	0x000e57b1
   ead9c:	000e58a1 	.word	0x000e58a1
   eada0:	000e5961 	.word	0x000e5961
   eada4:	000e5999 	.word	0x000e5999
   eada8:	000e5f41 	.word	0x000e5f41
   eadac:	000e6589 	.word	0x000e6589
   eadb0:	000e66d1 	.word	0x000e66d1
   eadb4:	000e66f5 	.word	0x000e66f5
   eadb8:	000e6779 	.word	0x000e6779
   eadbc:	000e683d 	.word	0x000e683d
   eadc0:	000e6901 	.word	0x000e6901

000eadc4 <link_constructors_end>:
	...
