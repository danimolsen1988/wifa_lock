
c:/Users/Keld/Documents/engineer/IoT/tlsClient/target/1.5.2/photon/tlsClient.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00016530  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080b6550  080b6550  00026550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080b6558  00034000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000f4  20000000  080b655c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003884  200000f8  200000f8  000500f8  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080b6650  080b6650  00046650  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080b6678  080b6678  00046678  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000d6cdf  00000000  00000000  0004667c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00013fc7  00000000  00000000  0011d35b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0003fa8e  00000000  00000000  00131322  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000030f0  00000000  00000000  00170db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004e58  00000000  00000000  00173ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0002af98  00000000  00000000  00178cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002fd57  00000000  00000000  001a3c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000bc15e  00000000  00000000  001d39e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000f664  00000000  00000000  0028fb48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f012 fbe0 	bl	80b27f6 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f012 fc00 	bl	80b2842 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080b655c 	.word	0x080b655c
 80a0050:	200000f4 	.word	0x200000f4
 80a0054:	200000f8 	.word	0x200000f8
 80a0058:	2000397c 	.word	0x2000397c
 80a005c:	2000397c 	.word	0x2000397c

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f011 fccb 	bl	80b19fc <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080b6518 	.word	0x080b6518
 80a0088:	080b6550 	.word	0x080b6550

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b814 	b.w	80a00b8 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 f82f 	bl	80a00f4 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f011 bc71 	b.w	80b1980 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f011 b81b 	b.w	80b10d8 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f011 b821 	b.w	80b10e8 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <setup>:

#include "TlsClientHandler.h"

TlsClientHandler client;

void setup() {
 80a00b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Serial.begin(9600);
 80a00ba:	f011 fd9f 	bl	80b1bfc <_Z16_fetch_usbserialv>
 80a00be:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00c2:	f011 fd81 	bl	80b1bc8 <_ZN9USBSerial5beginEl>
    Serial.print(Time.timeStr());
 80a00c6:	f011 fd99 	bl	80b1bfc <_Z16_fetch_usbserialv>
 80a00ca:	4604      	mov	r4, r0
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 80a00cc:	f011 fbf5 	bl	80b18ba <_ZN9TimeClass3nowEv>
 80a00d0:	4601      	mov	r1, r0
 80a00d2:	4668      	mov	r0, sp
 80a00d4:	f011 fbae 	bl	80b1834 <_ZN9TimeClass7timeStrEl>
 80a00d8:	9900      	ldr	r1, [sp, #0]
 80a00da:	4620      	mov	r0, r4
 80a00dc:	f011 fb52 	bl	80b1784 <_ZN5Print5printEPKc>
 80a00e0:	4668      	mov	r0, sp
 80a00e2:	f011 facf 	bl	80b1684 <_ZN6StringD1Ev>
    client.setup();
 80a00e6:	4802      	ldr	r0, [pc, #8]	; (80a00f0 <setup+0x38>)
 80a00e8:	f000 f864 	bl	80a01b4 <_ZN16TlsClientHandler5setupEv>
}
 80a00ec:	b004      	add	sp, #16
 80a00ee:	bd10      	pop	{r4, pc}
 80a00f0:	20000100 	.word	0x20000100

080a00f4 <loop>:

void loop() {
    // connect HTTPS server.
    client.GET();
 80a00f4:	4801      	ldr	r0, [pc, #4]	; (80a00fc <loop+0x8>)
 80a00f6:	f000 b87d 	b.w	80a01f4 <_ZN16TlsClientHandler3GETEv>
 80a00fa:	bf00      	nop
 80a00fc:	20000100 	.word	0x20000100

080a0100 <_GLOBAL__sub_I_client>:

 80a0100:	b510      	push	{r4, lr}
 * Date:
 */

#include "TlsClientHandler.h"

TlsClientHandler client;
 80a0102:	4c06      	ldr	r4, [pc, #24]	; (80a011c <_GLOBAL__sub_I_client+0x1c>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0104:	f010 fe4c 	bl	80b0da0 <HAL_Pin_Map>
 80a0108:	4620      	mov	r0, r4
 80a010a:	f000 f831 	bl	80a0170 <_ZN16TlsClientHandlerC1Ev>
 80a010e:	4620      	mov	r0, r4

void loop() {
    // connect HTTPS server.
    client.GET();

 80a0110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * Date:
 */

#include "TlsClientHandler.h"

TlsClientHandler client;
 80a0114:	4a02      	ldr	r2, [pc, #8]	; (80a0120 <_GLOBAL__sub_I_client+0x20>)
 80a0116:	4903      	ldr	r1, [pc, #12]	; (80a0124 <_GLOBAL__sub_I_client+0x24>)
 80a0118:	f011 bf34 	b.w	80b1f84 <__aeabi_atexit>
 80a011c:	20000100 	.word	0x20000100
 80a0120:	200000f8 	.word	0x200000f8
 80a0124:	080a0199 	.word	0x080a0199

080a0128 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a0128:	b538      	push	{r3, r4, r5, lr}
 80a012a:	4b0b      	ldr	r3, [pc, #44]	; (80a0158 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a012c:	6984      	ldr	r4, [r0, #24]
 80a012e:	4605      	mov	r5, r0
 80a0130:	6003      	str	r3, [r0, #0]
 80a0132:	b17c      	cbz	r4, 80a0154 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0134:	6863      	ldr	r3, [r4, #4]
 80a0136:	3b01      	subs	r3, #1
 80a0138:	6063      	str	r3, [r4, #4]
 80a013a:	b95b      	cbnz	r3, 80a0154 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80a013c:	6823      	ldr	r3, [r4, #0]
 80a013e:	4620      	mov	r0, r4
 80a0140:	689b      	ldr	r3, [r3, #8]
 80a0142:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0144:	68a3      	ldr	r3, [r4, #8]
 80a0146:	3b01      	subs	r3, #1
 80a0148:	60a3      	str	r3, [r4, #8]
 80a014a:	b91b      	cbnz	r3, 80a0154 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a014c:	6823      	ldr	r3, [r4, #0]
 80a014e:	4620      	mov	r0, r4
 80a0150:	68db      	ldr	r3, [r3, #12]
 80a0152:	4798      	blx	r3
 80a0154:	4628      	mov	r0, r5
 80a0156:	bd38      	pop	{r3, r4, r5, pc}
 80a0158:	080b608c 	.word	0x080b608c

080a015c <_ZN9TCPClientD0Ev>:
 80a015c:	b510      	push	{r4, lr}
 80a015e:	4604      	mov	r4, r0
 80a0160:	f7ff ffe2 	bl	80a0128 <_ZN9TCPClientD1Ev>
 80a0164:	4620      	mov	r0, r4
 80a0166:	211c      	movs	r1, #28
 80a0168:	f011 ff11 	bl	80b1f8e <_ZdlPvj>
 80a016c:	4620      	mov	r0, r4
 80a016e:	bd10      	pop	{r4, pc}

080a0170 <_ZN16TlsClientHandlerC1Ev>:
#include "TlsClientHandler.h"

TlsClientHandler::TlsClientHandler(/* args */)
 80a0170:	b510      	push	{r4, lr}
 80a0172:	f240 72e1 	movw	r2, #2017	; 0x7e1
 80a0176:	4907      	ldr	r1, [pc, #28]	; (80a0194 <_ZN16TlsClientHandlerC1Ev+0x24>)
 80a0178:	4604      	mov	r4, r0
 80a017a:	f012 fb3c 	bl	80b27f6 <memcpy>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a017e:	f010 fe1f 	bl	80b0dc0 <HAL_Timer_Get_Milli_Seconds>
 80a0182:	f8c4 07e4 	str.w	r0, [r4, #2020]	; 0x7e4
 80a0186:	f604 00e8 	addw	r0, r4, #2280	; 0x8e8
 80a018a:	f000 f89f 	bl	80a02cc <_ZN12TlsTcpClientC1Ev>
{
}
 80a018e:	4620      	mov	r0, r4
 80a0190:	bd10      	pop	{r4, pc}
 80a0192:	bf00      	nop
 80a0194:	080b30cc 	.word	0x080b30cc

080a0198 <_ZN16TlsClientHandlerD1Ev>:

TlsClientHandler::~TlsClientHandler()
 80a0198:	b538      	push	{r3, r4, r5, lr}
 80a019a:	4604      	mov	r4, r0
 80a019c:	f600 05e8 	addw	r5, r0, #2280	; 0x8e8
    static int veryfyCert_Tls(void *data, mbedtls_x509_crt *crt, int depth, uint32_t *flags);
    int handShake();

public:
    TlsTcpClient();
    ~TlsTcpClient(){ close(); };
 80a01a0:	4628      	mov	r0, r5
 80a01a2:	f000 f9d1 	bl	80a0548 <_ZN12TlsTcpClient5closeEv>
 80a01a6:	f205 708c 	addw	r0, r5, #1932	; 0x78c
 80a01aa:	f7ff ffbd 	bl	80a0128 <_ZN9TCPClientD1Ev>
{
}
 80a01ae:	4620      	mov	r0, r4
 80a01b0:	bd38      	pop	{r3, r4, r5, pc}
	...

080a01b4 <_ZN16TlsClientHandler5setupEv>:
void TlsClientHandler::setup() {
 80a01b4:	b510      	push	{r4, lr}
 80a01b6:	4604      	mov	r4, r0
 80a01b8:	f010 fe02 	bl	80b0dc0 <HAL_Timer_Get_Milli_Seconds>
        // need a Particle time sync for X509 certificates verify.
    if (millis() - lastSync > ONE_DAY_MILLIS) {
 80a01bc:	f8d4 37e4 	ldr.w	r3, [r4, #2020]	; 0x7e4
 80a01c0:	1ac0      	subs	r0, r0, r3
 80a01c2:	4b0b      	ldr	r3, [pc, #44]	; (80a01f0 <_ZN16TlsClientHandler5setupEv+0x3c>)
 80a01c4:	4298      	cmp	r0, r3
 80a01c6:	d909      	bls.n	80a01dc <_ZN16TlsClientHandler5setupEv+0x28>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a01c8:	f010 ff66 	bl	80b1098 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
 80a01cc:	b110      	cbz	r0, 80a01d4 <_ZN16TlsClientHandler5setupEv+0x20>
            return false;
        }
        return spark_sync_time(NULL);
 80a01ce:	2000      	movs	r0, #0
 80a01d0:	f010 ff6a 	bl	80b10a8 <spark_sync_time>
 80a01d4:	f010 fdf4 	bl	80b0dc0 <HAL_Timer_Get_Milli_Seconds>
        Particle.syncTime();
        lastSync = millis();
 80a01d8:	f8c4 07e4 	str.w	r0, [r4, #2020]	; 0x7e4
    }
    // setup Root CA pem.
    client.init(letencryptCaPem, sizeof(letencryptCaPem));
 80a01dc:	4621      	mov	r1, r4
 80a01de:	f604 00e8 	addw	r0, r4, #2280	; 0x8e8
 80a01e2:	f240 72e1 	movw	r2, #2017	; 0x7e1
}
 80a01e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (millis() - lastSync > ONE_DAY_MILLIS) {
        Particle.syncTime();
        lastSync = millis();
    }
    // setup Root CA pem.
    client.init(letencryptCaPem, sizeof(letencryptCaPem));
 80a01ea:	f000 b91b 	b.w	80a0424 <_ZN12TlsTcpClient4initEPKcj>
 80a01ee:	bf00      	nop
 80a01f0:	05265c00 	.word	0x05265c00

080a01f4 <_ZN16TlsClientHandler3GETEv>:
}

char *TlsClientHandler::GET() {
 80a01f4:	b538      	push	{r3, r4, r5, lr}
        client.connect("northeurope.api.cognitive.microsoft.com", 443);
 80a01f6:	f600 05e8 	addw	r5, r0, #2280	; 0x8e8
    }
    // setup Root CA pem.
    client.init(letencryptCaPem, sizeof(letencryptCaPem));
}

char *TlsClientHandler::GET() {
 80a01fa:	4604      	mov	r4, r0
        client.connect("northeurope.api.cognitive.microsoft.com", 443);
 80a01fc:	f240 12bb 	movw	r2, #443	; 0x1bb
 80a0200:	4917      	ldr	r1, [pc, #92]	; (80a0260 <_ZN16TlsClientHandler3GETEv+0x6c>)
 80a0202:	4628      	mov	r0, r5
 80a0204:	f000 f9d9 	bl	80a05ba <_ZN12TlsTcpClient7connectEPct>

    // check server certificate. if verify failed, TLS connection is alive.
    if (!client.verify()) {
 80a0208:	4628      	mov	r0, r5
 80a020a:	f000 f949 	bl	80a04a0 <_ZN12TlsTcpClient6verifyEv>
 80a020e:	b920      	cbnz	r0, 80a021a <_ZN16TlsClientHandler3GETEv+0x26>
      Serial.println("Server Certificates is in-valid.");
 80a0210:	f011 fcf4 	bl	80b1bfc <_Z16_fetch_usbserialv>
 80a0214:	4913      	ldr	r1, [pc, #76]	; (80a0264 <_ZN16TlsClientHandler3GETEv+0x70>)
 80a0216:	f011 fac8 	bl	80b17aa <_ZN5Print7printlnEPKc>
    }

    // Send request to HTTPS web server.
    int len = sprintf((char *)buff, "GET /face/v1.0/facelists?returnRecognitionModel=false HTTP/1.0\r\nHost: northeurope.api.cognitive.microsoft.com\r\nContent-Length: 0\r\nOcp-Apim-Subscription-Key:b32144abaff740cca01cf20584eb800d\r\n\r\n");
 80a021a:	f504 64fd 	add.w	r4, r4, #2024	; 0x7e8
 80a021e:	4912      	ldr	r1, [pc, #72]	; (80a0268 <_ZN16TlsClientHandler3GETEv+0x74>)
 80a0220:	4620      	mov	r0, r4
 80a0222:	f012 fb57 	bl	80b28d4 <strcpy>
    client.write(buff, len );
 80a0226:	22c0      	movs	r2, #192	; 0xc0
 80a0228:	4621      	mov	r1, r4
 80a022a:	4628      	mov	r0, r5
 80a022c:	f000 f92e 	bl	80a048c <_ZN12TlsTcpClient5writeEPhi>

    // GET HTTPS response.
    memset(buff, 0, sizeof(buff));
    while(1) {
        // read renponse.
        memset(buff, 0, sizeof(buff));
 80a0230:	f44f 7280 	mov.w	r2, #256	; 0x100
 80a0234:	2100      	movs	r1, #0
 80a0236:	4620      	mov	r0, r4
 80a0238:	f012 fb03 	bl	80b2842 <memset>
        int ret = client.read(buff, sizeof(buff) - 1);
 80a023c:	22ff      	movs	r2, #255	; 0xff
 80a023e:	4621      	mov	r1, r4
 80a0240:	4628      	mov	r0, r5
 80a0242:	f000 f9a0 	bl	80a0586 <_ZN12TlsTcpClient4readEPhi>
        if (ret == MBEDTLS_ERR_SSL_WANT_READ) {
 80a0246:	f510 4fd2 	cmn.w	r0, #26880	; 0x6900
 80a024a:	d103      	bne.n	80a0254 <_ZN16TlsClientHandler3GETEv+0x60>
            delay(100);
 80a024c:	2064      	movs	r0, #100	; 0x64
 80a024e:	f011 fb45 	bl	80b18dc <delay>
    int len = sprintf((char *)buff, "GET /face/v1.0/facelists?returnRecognitionModel=false HTTP/1.0\r\nHost: northeurope.api.cognitive.microsoft.com\r\nContent-Length: 0\r\nOcp-Apim-Subscription-Key:b32144abaff740cca01cf20584eb800d\r\n\r\n");
    client.write(buff, len );

    // GET HTTPS response.
    memset(buff, 0, sizeof(buff));
    while(1) {
 80a0252:	e7ed      	b.n	80a0230 <_ZN16TlsClientHandler3GETEv+0x3c>
        // read renponse.
        memset(buff, 0, sizeof(buff));
        int ret = client.read(buff, sizeof(buff) - 1);
        if (ret == MBEDTLS_ERR_SSL_WANT_READ) {
            delay(100);
        } else if (ret <= 0) {
 80a0254:	2800      	cmp	r0, #0
 80a0256:	dd01      	ble.n	80a025c <_ZN16TlsClientHandler3GETEv+0x68>
            break;
        } else {
            return((char *)buff);
 80a0258:	4620      	mov	r0, r4
 80a025a:	bd38      	pop	{r3, r4, r5, pc}
        }
    }
}
 80a025c:	bd38      	pop	{r3, r4, r5, pc}
 80a025e:	bf00      	nop
 80a0260:	080b38ad 	.word	0x080b38ad
 80a0264:	080b38d5 	.word	0x080b38d5
 80a0268:	080b38f6 	.word	0x080b38f6

080a026c <_GLOBAL__sub_I__ZN16TlsClientHandlerC2Ev>:
 80a026c:	f010 bd98 	b.w	80b0da0 <HAL_Pin_Map>

080a0270 <_ZN12TlsTcpClient9debug_TlsEPviPKciS2_>:
  return 0;
}

void TlsTcpClient::debug_Tls( void *ctx, int level,
                      const char *file, int line,
                      const char *str ) {
 80a0270:	4770      	bx	lr

080a0272 <_ZN12TlsTcpClient7rng_TlsEPvPhj>:
    return MBEDTLS_ERR_SSL_WANT_READ;
  }
  return ret;
}

int TlsTcpClient::rng_Tls(void* handle, uint8_t* data, const size_t len_) {
 80a0272:	b570      	push	{r4, r5, r6, lr}
 80a0274:	460e      	mov	r6, r1
 80a0276:	4615      	mov	r5, r2
 80a0278:	460c      	mov	r4, r1
  size_t len = len_;
  while (len>=4) {
 80a027a:	1b2b      	subs	r3, r5, r4
 80a027c:	4433      	add	r3, r6
 80a027e:	2b03      	cmp	r3, #3
 80a0280:	d904      	bls.n	80a028c <_ZN12TlsTcpClient7rng_TlsEPvPhj+0x1a>
    *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
 80a0282:	f010 fd95 	bl	80b0db0 <HAL_RNG_GetRandomNumber>
 80a0286:	f844 0b04 	str.w	r0, [r4], #4
  return ret;
}

int TlsTcpClient::rng_Tls(void* handle, uint8_t* data, const size_t len_) {
  size_t len = len_;
  while (len>=4) {
 80a028a:	e7f6      	b.n	80a027a <_ZN12TlsTcpClient7rng_TlsEPvPhj+0x8>
 80a028c:	08ac      	lsrs	r4, r5, #2
 80a028e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80a0292:	4435      	add	r5, r6
    *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
    data += 4;
    len -= 4;
  }
  while (len-->0) {
 80a0294:	42ac      	cmp	r4, r5
 80a0296:	d004      	beq.n	80a02a2 <_ZN12TlsTcpClient7rng_TlsEPvPhj+0x30>
    *data++ = HAL_RNG_GetRandomNumber();
 80a0298:	f010 fd8a 	bl	80b0db0 <HAL_RNG_GetRandomNumber>
 80a029c:	f804 0b01 	strb.w	r0, [r4], #1
  while (len>=4) {
    *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
    data += 4;
    len -= 4;
  }
  while (len-->0) {
 80a02a0:	e7f8      	b.n	80a0294 <_ZN12TlsTcpClient7rng_TlsEPvPhj+0x22>
    *data++ = HAL_RNG_GetRandomNumber();
  }
  return 0;
}
 80a02a2:	2000      	movs	r0, #0
 80a02a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080a02a8 <_ZN12TlsTcpClient14veryfyCert_TlsEPvP16mbedtls_x509_crtiPm>:

  *ttime = nowt;
  return nowt;
}

int TlsTcpClient::veryfyCert_Tls(void *data, mbedtls_x509_crt *crt, int depth, uint32_t *flags) {
 80a02a8:	b500      	push	{lr}
 80a02aa:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
  char buf[1024];
  ((void) data);

  debug_tls("Verify requested for (Depth %d):\n", depth);
  mbedtls_x509_crt_info(buf, sizeof(buf) - 1, "", crt);
 80a02ae:	460b      	mov	r3, r1
 80a02b0:	4a05      	ldr	r2, [pc, #20]	; (80a02c8 <_ZN12TlsTcpClient14veryfyCert_TlsEPvP16mbedtls_x509_crtiPm+0x20>)
 80a02b2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80a02b6:	4668      	mov	r0, sp
 80a02b8:	f008 fc2c 	bl	80a8b14 <mbedtls_x509_crt_info>
  } else {
    debug_tls(buf, sizeof(buf), "  ! ", *flags);
    debug_tls("%s\n", buf);
  }
  return 0;
}
 80a02bc:	2000      	movs	r0, #0
 80a02be:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
 80a02c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80a02c6:	bf00      	nop
 80a02c8:	080b40b1 	.word	0x080b40b1

080a02cc <_ZN12TlsTcpClientC1Ev>:
#include "TlsTcpClient.h"

TlsTcpClient::TlsTcpClient() {
 80a02cc:	b510      	push	{r4, lr}
 80a02ce:	4604      	mov	r4, r0
 80a02d0:	f200 708c 	addw	r0, r0, #1932	; 0x78c
 80a02d4:	f011 f97e 	bl	80b15d4 <_ZN9TCPClientC1Ev>
  connected = false;
 80a02d8:	2300      	movs	r3, #0
 80a02da:	f884 37a8 	strb.w	r3, [r4, #1960]	; 0x7a8
}
 80a02de:	4620      	mov	r0, r4
 80a02e0:	bd10      	pop	{r4, pc}
	...

080a02e4 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j>:
  return this->init(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int TlsTcpClient::init(const char *rootCaPem, const size_t rootCaPemSize,
         const char *clientCertPem, const size_t clientCertPemSize,
         const char *clientKeyPem, const size_t clientKeyPemSize) {
 80a02e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a02e8:	4605      	mov	r5, r0
 80a02ea:	4693      	mov	fp, r2

  int ret;
  connected = false;
  mbedtls_ssl_config_init(&conf);
 80a02ec:	f200 4474 	addw	r4, r0, #1140	; 0x474
int TlsTcpClient::init(const char *rootCaPem, const size_t rootCaPemSize,
         const char *clientCertPem, const size_t clientCertPemSize,
         const char *clientKeyPem, const size_t clientKeyPemSize) {

  int ret;
  connected = false;
 80a02f0:	2200      	movs	r2, #0
  return this->init(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int TlsTcpClient::init(const char *rootCaPem, const size_t rootCaPemSize,
         const char *clientCertPem, const size_t clientCertPemSize,
         const char *clientKeyPem, const size_t clientKeyPemSize) {
 80a02f2:	b085      	sub	sp, #20

  int ret;
  connected = false;
 80a02f4:	f880 27a8 	strb.w	r2, [r0, #1960]	; 0x7a8
  mbedtls_ssl_config_init(&conf);
  mbedtls_ssl_init(&ssl);
 80a02f8:	f505 766e 	add.w	r6, r5, #952	; 0x3b8
         const char *clientCertPem, const size_t clientCertPemSize,
         const char *clientKeyPem, const size_t clientKeyPemSize) {

  int ret;
  connected = false;
  mbedtls_ssl_config_init(&conf);
 80a02fc:	4620      	mov	r0, r4
  return this->init(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int TlsTcpClient::init(const char *rootCaPem, const size_t rootCaPemSize,
         const char *clientCertPem, const size_t clientCertPemSize,
         const char *clientKeyPem, const size_t clientKeyPemSize) {
 80a02fe:	4699      	mov	r9, r3
 80a0300:	9102      	str	r1, [sp, #8]

  int ret;
  connected = false;
 80a0302:	9203      	str	r2, [sp, #12]
  mbedtls_ssl_config_init(&conf);
  mbedtls_ssl_init(&ssl);
  mbedtls_x509_crt_init(&cacert);
 80a0304:	f205 4af4 	addw	sl, r5, #1268	; 0x4f4
         const char *clientCertPem, const size_t clientCertPemSize,
         const char *clientKeyPem, const size_t clientKeyPemSize) {

  int ret;
  connected = false;
  mbedtls_ssl_config_init(&conf);
 80a0308:	f00b fabb 	bl	80ab882 <mbedtls_ssl_config_init>
  mbedtls_ssl_init(&ssl);
 80a030c:	4630      	mov	r0, r6
 80a030e:	f00a ff8d 	bl	80ab22c <mbedtls_ssl_init>
  mbedtls_x509_crt_init(&cacert);
  mbedtls_x509_crt_init(&clicert);
 80a0312:	f505 67c5 	add.w	r7, r5, #1576	; 0x628

  int ret;
  connected = false;
  mbedtls_ssl_config_init(&conf);
  mbedtls_ssl_init(&ssl);
  mbedtls_x509_crt_init(&cacert);
 80a0316:	4650      	mov	r0, sl
 80a0318:	f009 fa04 	bl	80a9724 <mbedtls_x509_crt_init>
  mbedtls_x509_crt_init(&clicert);
  mbedtls_pk_init(&pkey);
 80a031c:	f205 785c 	addw	r8, r5, #1884	; 0x75c
  int ret;
  connected = false;
  mbedtls_ssl_config_init(&conf);
  mbedtls_ssl_init(&ssl);
  mbedtls_x509_crt_init(&cacert);
  mbedtls_x509_crt_init(&clicert);
 80a0320:	4638      	mov	r0, r7
 80a0322:	f009 f9ff 	bl	80a9724 <mbedtls_x509_crt_init>
  mbedtls_pk_init(&pkey);
 80a0326:	4640      	mov	r0, r8
 80a0328:	f009 fe24 	bl	80a9f74 <mbedtls_pk_init>

  mbedtls_ssl_conf_dbg(&conf, &TlsTcpClient::debug_Tls, nullptr);
 80a032c:	9a03      	ldr	r2, [sp, #12]
 80a032e:	4936      	ldr	r1, [pc, #216]	; (80a0408 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x124>)
 80a0330:	4620      	mov	r0, r4
 80a0332:	f00a ff8c 	bl	80ab24e <mbedtls_ssl_conf_dbg>
  #if defined(MBEDTLS_DEBUG_C)
    mbedtls_debug_set_threshold(DEBUG_TLS_CORE_LEVEL);
  #endif

  if ((ret = mbedtls_x509_crt_parse(&cacert, (const unsigned char *)rootCaPem, rootCaPemSize)) < 0) {
 80a0336:	465a      	mov	r2, fp
 80a0338:	9902      	ldr	r1, [sp, #8]
 80a033a:	4650      	mov	r0, sl
 80a033c:	f009 fda8 	bl	80a9e90 <mbedtls_x509_crt_parse>
 80a0340:	2800      	cmp	r0, #0
 80a0342:	db5d      	blt.n	80a0400 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x11c>
    debug_tls(" enableTls mbedtls_x509_crt_parse error : %d\n", ret);
    return ret;
  }

  if (clientCertPem != NULL && clientCertPemSize > 0) {
 80a0344:	f1b9 0f00 	cmp.w	r9, #0
 80a0348:	d102      	bne.n	80a0350 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x6c>
      debug_tls(" tlsClientKey mbedtls_x509_crt_parse error : %d\n", ret);
      return ret;
    }
  }

  if (clientKeyPem != NULL && clientKeyPemSize > 0) {
 80a034a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a034c:	b95b      	cbnz	r3, 80a0366 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x82>
 80a034e:	e00c      	b.n	80a036a <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x86>
  if ((ret = mbedtls_x509_crt_parse(&cacert, (const unsigned char *)rootCaPem, rootCaPemSize)) < 0) {
    debug_tls(" enableTls mbedtls_x509_crt_parse error : %d\n", ret);
    return ret;
  }

  if (clientCertPem != NULL && clientCertPemSize > 0) {
 80a0350:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a0352:	2b00      	cmp	r3, #0
 80a0354:	d0f9      	beq.n	80a034a <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x66>
    if ((ret = mbedtls_x509_crt_parse(&clicert, (const unsigned char *)clientCertPem, clientCertPemSize)) < 0) {
 80a0356:	461a      	mov	r2, r3
 80a0358:	4649      	mov	r1, r9
 80a035a:	4638      	mov	r0, r7
 80a035c:	f009 fd98 	bl	80a9e90 <mbedtls_x509_crt_parse>
 80a0360:	2800      	cmp	r0, #0
 80a0362:	daf2      	bge.n	80a034a <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x66>
 80a0364:	e04c      	b.n	80a0400 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x11c>
      debug_tls(" tlsClientKey mbedtls_x509_crt_parse error : %d\n", ret);
      return ret;
    }
  }

  if (clientKeyPem != NULL && clientKeyPemSize > 0) {
 80a0366:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a0368:	b94b      	cbnz	r3, 80a037e <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x9a>
      debug_tls(" tlsClientKey mbedtls_pk_parse_key error : %d\n", ret);
      return ret;
    }
  }

  if ((ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,
 80a036a:	2300      	movs	r3, #0
 80a036c:	461a      	mov	r2, r3
 80a036e:	4619      	mov	r1, r3
 80a0370:	4620      	mov	r0, r4
 80a0372:	f00b fa8b 	bl	80ab88c <mbedtls_ssl_config_defaults>
 80a0376:	4683      	mov	fp, r0
 80a0378:	2800      	cmp	r0, #0
 80a037a:	d141      	bne.n	80a0400 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x11c>
 80a037c:	e009      	b.n	80a0392 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0xae>
      return ret;
    }
  }

  if (clientKeyPem != NULL && clientKeyPemSize > 0) {
    if ((ret = mbedtls_pk_parse_key(&pkey, (const unsigned char *)clientKeyPem, clientKeyPemSize, NULL, 0)) != 0) {
 80a037e:	2300      	movs	r3, #0
 80a0380:	9300      	str	r3, [sp, #0]
 80a0382:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80a0384:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80a0386:	4640      	mov	r0, r8
 80a0388:	f007 f9ce 	bl	80a7728 <mbedtls_pk_parse_key>
 80a038c:	2800      	cmp	r0, #0
 80a038e:	d0ec      	beq.n	80a036a <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x86>
 80a0390:	e036      	b.n	80a0400 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x11c>

  if ((ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,
                 MBEDTLS_SSL_TRANSPORT_STREAM, MBEDTLS_SSL_PRESET_DEFAULT)) != 0) {
    return ret;
  }
  mbedtls_ssl_conf_min_version(&conf, MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3);
 80a0392:	2203      	movs	r2, #3
 80a0394:	4611      	mov	r1, r2
 80a0396:	4620      	mov	r0, r4
 80a0398:	f00a ffa6 	bl	80ab2e8 <mbedtls_ssl_conf_min_version>
  mbedtls_ssl_conf_verify(&conf, &TlsTcpClient::veryfyCert_Tls, NULL);
 80a039c:	465a      	mov	r2, fp
 80a039e:	491b      	ldr	r1, [pc, #108]	; (80a040c <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x128>)
 80a03a0:	4620      	mov	r0, r4
 80a03a2:	f00a ff4e 	bl	80ab242 <mbedtls_ssl_conf_verify>

  // if server certificates is not valid, connection will success. check certificates on verify() function.
  mbedtls_ssl_conf_authmode(&conf, MBEDTLS_SSL_VERIFY_OPTIONAL);
 80a03a6:	2101      	movs	r1, #1
 80a03a8:	4620      	mov	r0, r4
 80a03aa:	f00a ff43 	bl	80ab234 <mbedtls_ssl_conf_authmode>
  mbedtls_ssl_conf_rng(&conf, &TlsTcpClient::rng_Tls, nullptr);
 80a03ae:	465a      	mov	r2, fp
 80a03b0:	4917      	ldr	r1, [pc, #92]	; (80a0410 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x12c>)
 80a03b2:	4620      	mov	r0, r4
 80a03b4:	f00a ff48 	bl	80ab248 <mbedtls_ssl_conf_rng>
  mbedtls_ssl_conf_ca_chain(&conf, &cacert, nullptr);
 80a03b8:	465a      	mov	r2, fp
 80a03ba:	4651      	mov	r1, sl
 80a03bc:	4620      	mov	r0, r4
 80a03be:	f00a ff5a 	bl	80ab276 <mbedtls_ssl_conf_ca_chain>

  if (clientCertPem != NULL && clientKeyPem != NULL) {
 80a03c2:	f1b9 0f00 	cmp.w	r9, #0
 80a03c6:	d006      	beq.n	80a03d6 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0xf2>
 80a03c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a03ca:	b123      	cbz	r3, 80a03d6 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0xf2>
    mbedtls_ssl_conf_own_cert(&conf, &clicert, &pkey);
 80a03cc:	4642      	mov	r2, r8
 80a03ce:	4639      	mov	r1, r7
 80a03d0:	4620      	mov	r0, r4
 80a03d2:	f00a ff4d 	bl	80ab270 <mbedtls_ssl_conf_own_cert>
  }

  if((ret = mbedtls_ssl_setup(&ssl, &conf)) != 0) {
 80a03d6:	4621      	mov	r1, r4
 80a03d8:	4630      	mov	r0, r6
 80a03da:	f00b f9c3 	bl	80ab764 <mbedtls_ssl_setup>
 80a03de:	4604      	mov	r4, r0
 80a03e0:	b968      	cbnz	r0, 80a03fe <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x11a>
    return ret;
  }

  mbedtls_ssl_set_timer_cb(&ssl, &timer, mbedtls_timing_set_delay, mbedtls_timing_get_delay);
 80a03e2:	4b0c      	ldr	r3, [pc, #48]	; (80a0414 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x130>)
 80a03e4:	4a0c      	ldr	r2, [pc, #48]	; (80a0418 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x134>)
 80a03e6:	f205 7164 	addw	r1, r5, #1892	; 0x764
 80a03ea:	4630      	mov	r0, r6
 80a03ec:	f00a ff38 	bl	80ab260 <mbedtls_ssl_set_timer_cb>
  mbedtls_ssl_set_bio(&ssl, this, &TlsTcpClient::send_Tls,  &TlsTcpClient::recv_Tls, nullptr);
 80a03f0:	9400      	str	r4, [sp, #0]
 80a03f2:	4b0a      	ldr	r3, [pc, #40]	; (80a041c <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x138>)
 80a03f4:	4a0a      	ldr	r2, [pc, #40]	; (80a0420 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x13c>)
 80a03f6:	4629      	mov	r1, r5
 80a03f8:	4630      	mov	r0, r6
 80a03fa:	f00a ff2b 	bl	80ab254 <mbedtls_ssl_set_bio>
 80a03fe:	4620      	mov	r0, r4
  return 0;
}
 80a0400:	b005      	add	sp, #20
 80a0402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0406:	bf00      	nop
 80a0408:	080a0271 	.word	0x080a0271
 80a040c:	080a02a9 	.word	0x080a02a9
 80a0410:	080a0273 	.word	0x080a0273
 80a0414:	080a647f 	.word	0x080a647f
 80a0418:	080a6471 	.word	0x080a6471
 80a041c:	080a050d 	.word	0x080a050d
 80a0420:	080a04d5 	.word	0x080a04d5

080a0424 <_ZN12TlsTcpClient4initEPKcj>:
    debug_tls("%s\n", buf);
  }
  return 0;
}

int TlsTcpClient::init(const char *rootCaPem, const size_t rootCaPemSize) {
 80a0424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return this->init(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
 80a0426:	2300      	movs	r3, #0
 80a0428:	9302      	str	r3, [sp, #8]
 80a042a:	9301      	str	r3, [sp, #4]
 80a042c:	9300      	str	r3, [sp, #0]
 80a042e:	f7ff ff59 	bl	80a02e4 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j>
}
 80a0432:	b005      	add	sp, #20
 80a0434:	f85d fb04 	ldr.w	pc, [sp], #4

080a0438 <_ZN12TlsTcpClient9handShakeEv>:
  }

  return this->handShake();
}

int TlsTcpClient::handShake() {
 80a0438:	b570      	push	{r4, r5, r6, lr}
 80a043a:	4605      	mov	r5, r0
  int ret;
  do {
      while (ssl.state != MBEDTLS_SSL_HANDSHAKE_OVER) {
          ret = mbedtls_ssl_handshake_client_step(&ssl);
 80a043c:	f500 766e 	add.w	r6, r0, #952	; 0x3b8
}

int TlsTcpClient::handShake() {
  int ret;
  do {
      while (ssl.state != MBEDTLS_SSL_HANDSHAKE_OVER) {
 80a0440:	f8d5 33bc 	ldr.w	r3, [r5, #956]	; 0x3bc
 80a0444:	2b10      	cmp	r3, #16
 80a0446:	d005      	beq.n	80a0454 <_ZN12TlsTcpClient9handShakeEv+0x1c>
          ret = mbedtls_ssl_handshake_client_step(&ssl);
 80a0448:	4630      	mov	r0, r6
 80a044a:	f00f fdf5 	bl	80b0038 <mbedtls_ssl_handshake_client_step>
          if (ret != 0)
 80a044e:	4604      	mov	r4, r0
 80a0450:	2800      	cmp	r0, #0
 80a0452:	d0f5      	beq.n	80a0440 <_ZN12TlsTcpClient9handShakeEv+0x8>
              break;
      }
  } while(ret == MBEDTLS_ERR_SSL_WANT_READ || ret == MBEDTLS_ERR_SSL_WANT_WRITE);
 80a0454:	f514 4fd2 	cmn.w	r4, #26880	; 0x6900
 80a0458:	d0f2      	beq.n	80a0440 <_ZN12TlsTcpClient9handShakeEv+0x8>
 80a045a:	f514 4fd1 	cmn.w	r4, #26752	; 0x6880
 80a045e:	d0ef      	beq.n	80a0440 <_ZN12TlsTcpClient9handShakeEv+0x8>

  // clean ca cert/crt/pkey
  mbedtls_x509_crt_free(&cacert);
 80a0460:	f205 40f4 	addw	r0, r5, #1268	; 0x4f4
 80a0464:	f009 f963 	bl	80a972e <mbedtls_x509_crt_free>
  mbedtls_x509_crt_free(&clicert);
 80a0468:	f505 60c5 	add.w	r0, r5, #1576	; 0x628
 80a046c:	f009 f95f 	bl	80a972e <mbedtls_x509_crt_free>
  mbedtls_pk_free(&pkey);
 80a0470:	f205 705c 	addw	r0, r5, #1884	; 0x75c
 80a0474:	f009 fd82 	bl	80a9f7c <mbedtls_pk_free>

  if (ssl.state == MBEDTLS_SSL_HANDSHAKE_OVER) {
 80a0478:	f8d5 33bc 	ldr.w	r3, [r5, #956]	; 0x3bc
 80a047c:	2b10      	cmp	r3, #16
    connected = true;
 80a047e:	bf03      	ittte	eq
 80a0480:	2301      	moveq	r3, #1
 80a0482:	f885 37a8 	strbeq.w	r3, [r5, #1960]	; 0x7a8
    return 0;
 80a0486:	2000      	moveq	r0, #0
 80a0488:	4620      	movne	r0, r4
  }
  return ret;
}
 80a048a:	bd70      	pop	{r4, r5, r6, pc}

080a048c <_ZN12TlsTcpClient5writeEPhi>:

int TlsTcpClient::write(unsigned char *buff, int length) {
  if (connected) {
 80a048c:	f890 37a8 	ldrb.w	r3, [r0, #1960]	; 0x7a8
 80a0490:	b11b      	cbz	r3, 80a049a <_ZN12TlsTcpClient5writeEPhi+0xe>
      int ret = mbedtls_ssl_write( &ssl, buff, length );
 80a0492:	f500 706e 	add.w	r0, r0, #952	; 0x3b8
 80a0496:	f00b b825 	b.w	80ab4e4 <mbedtls_ssl_write>
      return ret;
  } else
    return -1;
}
 80a049a:	f04f 30ff 	mov.w	r0, #4294967295
 80a049e:	4770      	bx	lr

080a04a0 <_ZN12TlsTcpClient6verifyEv>:
  if (client.connected())
    return connected;
  return false;
}

bool TlsTcpClient::verify() {
 80a04a0:	b500      	push	{lr}
  int ret;
  if ((ret = mbedtls_ssl_get_verify_result(&ssl)) != 0 ) {
 80a04a2:	f500 706e 	add.w	r0, r0, #952	; 0x3b8
  if (client.connected())
    return connected;
  return false;
}

bool TlsTcpClient::verify() {
 80a04a6:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
  int ret;
  if ((ret = mbedtls_ssl_get_verify_result(&ssl)) != 0 ) {
 80a04aa:	f00a ff22 	bl	80ab2f2 <mbedtls_ssl_get_verify_result>
 80a04ae:	4603      	mov	r3, r0
 80a04b0:	b138      	cbz	r0, 80a04c2 <_ZN12TlsTcpClient6verifyEv+0x22>
    char vrfy_buf[512];
    mbedtls_x509_crt_verify_info( vrfy_buf, sizeof( vrfy_buf ), "  ! ", ret );
 80a04b2:	4a06      	ldr	r2, [pc, #24]	; (80a04cc <_ZN12TlsTcpClient6verifyEv+0x2c>)
 80a04b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a04b8:	4668      	mov	r0, sp
 80a04ba:	f008 fe5d 	bl	80a9178 <mbedtls_x509_crt_verify_info>
    debug_tls("%s\n", vrfy_buf);
    return false;
 80a04be:	2000      	movs	r0, #0
 80a04c0:	e000      	b.n	80a04c4 <_ZN12TlsTcpClient6verifyEv+0x24>
  }
  return true;
 80a04c2:	2001      	movs	r0, #1
}
 80a04c4:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
 80a04c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80a04cc:	080b39b7 	.word	0x080b39b7

080a04d0 <_GLOBAL__sub_I__ZN12TlsTcpClientC2Ev>:
 80a04d0:	f010 bc66 	b.w	80b0da0 <HAL_Pin_Map>

080a04d4 <_ZN12TlsTcpClient8send_TlsEPvPKhj>:

TlsTcpClient::TlsTcpClient() {
  connected = false;
}

int TlsTcpClient::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
 80a04d4:	b570      	push	{r4, r5, r6, lr}
  TlsTcpClient *sock = (TlsTcpClient *)ctx;

  if (!sock->client.connected()) {
 80a04d6:	f200 758c 	addw	r5, r0, #1932	; 0x78c
 80a04da:	4628      	mov	r0, r5

TlsTcpClient::TlsTcpClient() {
  connected = false;
}

int TlsTcpClient::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
 80a04dc:	460c      	mov	r4, r1
 80a04de:	4616      	mov	r6, r2
  TlsTcpClient *sock = (TlsTcpClient *)ctx;

  if (!sock->client.connected()) {
 80a04e0:	f011 f809 	bl	80b14f6 <_ZN9TCPClient9connectedEv>
 80a04e4:	b158      	cbz	r0, 80a04fe <_ZN12TlsTcpClient8send_TlsEPvPKhj+0x2a>
    return -1;
  }

  int ret = sock->client.write(buf, len);
 80a04e6:	4621      	mov	r1, r4
 80a04e8:	4632      	mov	r2, r6
 80a04ea:	4628      	mov	r0, r5
 80a04ec:	f010 fe63 	bl	80b11b6 <_ZN9TCPClient5writeEPKhj>
  if (ret == 0) {
 80a04f0:	4604      	mov	r4, r0
 80a04f2:	b138      	cbz	r0, 80a0504 <_ZN12TlsTcpClient8send_TlsEPvPKhj+0x30>
      return MBEDTLS_ERR_SSL_WANT_WRITE;
  }
  sock->client.flush();
 80a04f4:	4628      	mov	r0, r5
 80a04f6:	f010 fe72 	bl	80b11de <_ZN9TCPClient5flushEv>
  return ret;
 80a04fa:	4620      	mov	r0, r4
 80a04fc:	bd70      	pop	{r4, r5, r6, pc}

int TlsTcpClient::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
  TlsTcpClient *sock = (TlsTcpClient *)ctx;

  if (!sock->client.connected()) {
    return -1;
 80a04fe:	f04f 30ff 	mov.w	r0, #4294967295
 80a0502:	bd70      	pop	{r4, r5, r6, pc}
  }

  int ret = sock->client.write(buf, len);
  if (ret == 0) {
      return MBEDTLS_ERR_SSL_WANT_WRITE;
 80a0504:	4800      	ldr	r0, [pc, #0]	; (80a0508 <_ZN12TlsTcpClient8send_TlsEPvPKhj+0x34>)
  }
  sock->client.flush();
  return ret;
}
 80a0506:	bd70      	pop	{r4, r5, r6, pc}
 80a0508:	ffff9780 	.word	0xffff9780

080a050c <_ZN12TlsTcpClient8recv_TlsEPvPhj>:

int TlsTcpClient::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
 80a050c:	b570      	push	{r4, r5, r6, lr}
 80a050e:	4604      	mov	r4, r0
  TlsTcpClient *sock = (TlsTcpClient *)ctx;
  // TODO: need this delay?
  delay(10);
 80a0510:	200a      	movs	r0, #10

  if (!sock->client.connected()) {
 80a0512:	f204 748c 	addw	r4, r4, #1932	; 0x78c
  }
  sock->client.flush();
  return ret;
}

int TlsTcpClient::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
 80a0516:	460d      	mov	r5, r1
 80a0518:	4616      	mov	r6, r2
  TlsTcpClient *sock = (TlsTcpClient *)ctx;
  // TODO: need this delay?
  delay(10);
 80a051a:	f011 f9df 	bl	80b18dc <delay>

  if (!sock->client.connected()) {
 80a051e:	4620      	mov	r0, r4
 80a0520:	f010 ffe9 	bl	80b14f6 <_ZN9TCPClient9connectedEv>
 80a0524:	b158      	cbz	r0, 80a053e <_ZN12TlsTcpClient8recv_TlsEPvPhj+0x32>
    return -1;
  }

  if (sock->client.available() == 0) {
 80a0526:	4620      	mov	r0, r4
 80a0528:	f010 fee8 	bl	80b12fc <_ZN9TCPClient9availableEv>
 80a052c:	b128      	cbz	r0, 80a053a <_ZN12TlsTcpClient8recv_TlsEPvPhj+0x2e>
    return MBEDTLS_ERR_SSL_WANT_READ;
  }

  int ret = sock->client.read(buf, len);
 80a052e:	4632      	mov	r2, r6
 80a0530:	4629      	mov	r1, r5
 80a0532:	4620      	mov	r0, r4
 80a0534:	f010 feb1 	bl	80b129a <_ZN9TCPClient4readEPhj>
  if (ret == 0) {
 80a0538:	b918      	cbnz	r0, 80a0542 <_ZN12TlsTcpClient8recv_TlsEPvPhj+0x36>
    return MBEDTLS_ERR_SSL_WANT_READ;
 80a053a:	4802      	ldr	r0, [pc, #8]	; (80a0544 <_ZN12TlsTcpClient8recv_TlsEPvPhj+0x38>)
 80a053c:	bd70      	pop	{r4, r5, r6, pc}
  TlsTcpClient *sock = (TlsTcpClient *)ctx;
  // TODO: need this delay?
  delay(10);

  if (!sock->client.connected()) {
    return -1;
 80a053e:	f04f 30ff 	mov.w	r0, #4294967295
  int ret = sock->client.read(buf, len);
  if (ret == 0) {
    return MBEDTLS_ERR_SSL_WANT_READ;
  }
  return ret;
}
 80a0542:	bd70      	pop	{r4, r5, r6, pc}
 80a0544:	ffff9700 	.word	0xffff9700

080a0548 <_ZN12TlsTcpClient5closeEv>:
  mbedtls_ssl_set_timer_cb(&ssl, &timer, mbedtls_timing_set_delay, mbedtls_timing_get_delay);
  mbedtls_ssl_set_bio(&ssl, this, &TlsTcpClient::send_Tls,  &TlsTcpClient::recv_Tls, nullptr);
  return 0;
}

void TlsTcpClient::close() {
 80a0548:	b510      	push	{r4, lr}
 80a054a:	4604      	mov	r4, r0
  connected = false;
 80a054c:	2300      	movs	r3, #0
 80a054e:	f880 37a8 	strb.w	r3, [r0, #1960]	; 0x7a8
  mbedtls_x509_crt_free(&cacert);
 80a0552:	f200 40f4 	addw	r0, r0, #1268	; 0x4f4
 80a0556:	f009 f8ea 	bl	80a972e <mbedtls_x509_crt_free>
  mbedtls_x509_crt_free(&clicert);
 80a055a:	f504 60c5 	add.w	r0, r4, #1576	; 0x628
 80a055e:	f009 f8e6 	bl	80a972e <mbedtls_x509_crt_free>
  mbedtls_pk_free(&pkey);
 80a0562:	f204 705c 	addw	r0, r4, #1884	; 0x75c
 80a0566:	f009 fd09 	bl	80a9f7c <mbedtls_pk_free>
  mbedtls_ssl_config_free (&conf);
 80a056a:	f204 4074 	addw	r0, r4, #1140	; 0x474
 80a056e:	f00b f9d7 	bl	80ab920 <mbedtls_ssl_config_free>
  mbedtls_ssl_free (&ssl);
 80a0572:	f504 706e 	add.w	r0, r4, #952	; 0x3b8
 80a0576:	f00b f935 	bl	80ab7e4 <mbedtls_ssl_free>
  client.stop();
 80a057a:	f204 708c 	addw	r0, r4, #1932	; 0x78c
};
 80a057e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  mbedtls_x509_crt_free(&cacert);
  mbedtls_x509_crt_free(&clicert);
  mbedtls_pk_free(&pkey);
  mbedtls_ssl_config_free (&conf);
  mbedtls_ssl_free (&ssl);
  client.stop();
 80a0582:	f010 bef7 	b.w	80b1374 <_ZN9TCPClient4stopEv>

080a0586 <_ZN12TlsTcpClient4readEPhi>:
  int ret = read(buff, 1);
  if (ret == 1) return buff[0];
  else    return ret;
}

int TlsTcpClient::read(unsigned char *buff, int length) {
 80a0586:	b510      	push	{r4, lr}
  if (connected) {
 80a0588:	f890 37a8 	ldrb.w	r3, [r0, #1960]	; 0x7a8
  int ret = read(buff, 1);
  if (ret == 1) return buff[0];
  else    return ret;
}

int TlsTcpClient::read(unsigned char *buff, int length) {
 80a058c:	4604      	mov	r4, r0
  if (connected) {
 80a058e:	b18b      	cbz	r3, 80a05b4 <_ZN12TlsTcpClient4readEPhi+0x2e>
      int ret = mbedtls_ssl_read(&ssl, buff, length);
 80a0590:	f500 706e 	add.w	r0, r0, #952	; 0x3b8
 80a0594:	f00a ff1e 	bl	80ab3d4 <mbedtls_ssl_read>
      if (ret < 0) {
 80a0598:	2800      	cmp	r0, #0
 80a059a:	da0d      	bge.n	80a05b8 <_ZN12TlsTcpClient4readEPhi+0x32>
            switch (ret) {
 80a059c:	f510 4fee 	cmn.w	r0, #30464	; 0x7700
 80a05a0:	d006      	beq.n	80a05b0 <_ZN12TlsTcpClient4readEPhi+0x2a>
 80a05a2:	f510 4fd2 	cmn.w	r0, #26880	; 0x6900
 80a05a6:	d007      	beq.n	80a05b8 <_ZN12TlsTcpClient4readEPhi+0x32>
            case MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE:
                ret = 0;
                break;
            case MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY:
            default:
                close();
 80a05a8:	4620      	mov	r0, r4
 80a05aa:	f7ff ffcd 	bl	80a0548 <_ZN12TlsTcpClient5closeEv>
 80a05ae:	e001      	b.n	80a05b4 <_ZN12TlsTcpClient4readEPhi+0x2e>
      if (ret < 0) {
            switch (ret) {
              case MBEDTLS_ERR_SSL_WANT_READ:
                break;
            case MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE:
                ret = 0;
 80a05b0:	2000      	movs	r0, #0
 80a05b2:	bd10      	pop	{r4, pc}
                return -1;
          }
      }
      return ret;
  } else
    return -1;
 80a05b4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a05b8:	bd10      	pop	{r4, pc}

080a05ba <_ZN12TlsTcpClient7connectEPct>:
  mbedtls_ssl_free (&ssl);
  client.stop();
};


int TlsTcpClient::connect(char* domain, uint16_t port) {
 80a05ba:	b538      	push	{r3, r4, r5, lr}
 80a05bc:	4604      	mov	r4, r0
  int ret;
  if (!client.connect(domain, port)) {
 80a05be:	2300      	movs	r3, #0
 80a05c0:	f200 708c 	addw	r0, r0, #1932	; 0x78c
  mbedtls_ssl_free (&ssl);
  client.stop();
};


int TlsTcpClient::connect(char* domain, uint16_t port) {
 80a05c4:	460d      	mov	r5, r1
  int ret;
  if (!client.connect(domain, port)) {
 80a05c6:	f011 f827 	bl	80b1618 <_ZN9TCPClient7connectEPKctm>
 80a05ca:	b150      	cbz	r0, 80a05e2 <_ZN12TlsTcpClient7connectEPct+0x28>
      debug_tls(" could not connect to server : %s\n", domain);
      return -1;
  }

  if((ret = mbedtls_ssl_set_hostname(&ssl, domain)) != 0) {
 80a05cc:	4629      	mov	r1, r5
 80a05ce:	f504 706e 	add.w	r0, r4, #952	; 0x3b8
 80a05d2:	f00a fe53 	bl	80ab27c <mbedtls_ssl_set_hostname>
 80a05d6:	b930      	cbnz	r0, 80a05e6 <_ZN12TlsTcpClient7connectEPct+0x2c>
    return ret;
  }

  return this->handShake();
 80a05d8:	4620      	mov	r0, r4
}
 80a05da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if((ret = mbedtls_ssl_set_hostname(&ssl, domain)) != 0) {
    return ret;
  }

  return this->handShake();
 80a05de:	f7ff bf2b 	b.w	80a0438 <_ZN12TlsTcpClient9handShakeEv>

int TlsTcpClient::connect(char* domain, uint16_t port) {
  int ret;
  if (!client.connect(domain, port)) {
      debug_tls(" could not connect to server : %s\n", domain);
      return -1;
 80a05e2:	f04f 30ff 	mov.w	r0, #4294967295
  if((ret = mbedtls_ssl_set_hostname(&ssl, domain)) != 0) {
    return ret;
  }

  return this->handShake();
}
 80a05e6:	bd38      	pop	{r3, r4, r5, pc}

080a05e8 <mbedtls_sha256_init>:

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 80a05e8:	226c      	movs	r2, #108	; 0x6c
 80a05ea:	2100      	movs	r1, #0
 80a05ec:	f012 b929 	b.w	80b2842 <memset>

080a05f0 <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
 80a05f0:	b110      	cbz	r0, 80a05f8 <mbedtls_sha256_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 80a05f2:	216c      	movs	r1, #108	; 0x6c
 80a05f4:	f005 bf0c 	b.w	80a6410 <mbedtls_platform_zeroize>
 80a05f8:	4770      	bx	lr

080a05fa <mbedtls_sha256_clone>:
}

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 80a05fa:	b508      	push	{r3, lr}
    SHA256_VALIDATE( dst != NULL );
    SHA256_VALIDATE( src != NULL );

    *dst = *src;
 80a05fc:	226c      	movs	r2, #108	; 0x6c
 80a05fe:	f012 f8fa 	bl	80b27f6 <memcpy>
 80a0602:	bd08      	pop	{r3, pc}

080a0604 <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
 80a0604:	2300      	movs	r3, #0
 80a0606:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
 80a0608:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
 80a060a:	b9a1      	cbnz	r1, 80a0636 <mbedtls_sha256_starts_ret+0x32>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 80a060c:	4b18      	ldr	r3, [pc, #96]	; (80a0670 <mbedtls_sha256_starts_ret+0x6c>)
 80a060e:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
 80a0610:	4b18      	ldr	r3, [pc, #96]	; (80a0674 <mbedtls_sha256_starts_ret+0x70>)
 80a0612:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
 80a0614:	4b18      	ldr	r3, [pc, #96]	; (80a0678 <mbedtls_sha256_starts_ret+0x74>)
 80a0616:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
 80a0618:	4b18      	ldr	r3, [pc, #96]	; (80a067c <mbedtls_sha256_starts_ret+0x78>)
 80a061a:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0x510E527F;
 80a061c:	4b18      	ldr	r3, [pc, #96]	; (80a0680 <mbedtls_sha256_starts_ret+0x7c>)
 80a061e:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x9B05688C;
 80a0620:	4b18      	ldr	r3, [pc, #96]	; (80a0684 <mbedtls_sha256_starts_ret+0x80>)
 80a0622:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
 80a0624:	4b18      	ldr	r3, [pc, #96]	; (80a0688 <mbedtls_sha256_starts_ret+0x84>)
 80a0626:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
 80a0628:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 80a062c:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 80a0630:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 80a0634:	e018      	b.n	80a0668 <mbedtls_sha256_starts_ret+0x64>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 80a0636:	4b15      	ldr	r3, [pc, #84]	; (80a068c <mbedtls_sha256_starts_ret+0x88>)
 80a0638:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0x367CD507;
 80a063a:	4b15      	ldr	r3, [pc, #84]	; (80a0690 <mbedtls_sha256_starts_ret+0x8c>)
 80a063c:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3070DD17;
 80a063e:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
 80a0642:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80a0646:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 80a064a:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xF70E5939;
 80a064c:	4b11      	ldr	r3, [pc, #68]	; (80a0694 <mbedtls_sha256_starts_ret+0x90>)
 80a064e:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
 80a0650:	4b11      	ldr	r3, [pc, #68]	; (80a0698 <mbedtls_sha256_starts_ret+0x94>)
 80a0652:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x68581511;
 80a0654:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
 80a0658:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
 80a065c:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 80a0660:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
 80a0662:	4b0e      	ldr	r3, [pc, #56]	; (80a069c <mbedtls_sha256_starts_ret+0x98>)
 80a0664:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
 80a0666:	4b0e      	ldr	r3, [pc, #56]	; (80a06a0 <mbedtls_sha256_starts_ret+0x9c>)
 80a0668:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
 80a066a:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
 80a066c:	2000      	movs	r0, #0
 80a066e:	4770      	bx	lr
 80a0670:	6a09e667 	.word	0x6a09e667
 80a0674:	bb67ae85 	.word	0xbb67ae85
 80a0678:	3c6ef372 	.word	0x3c6ef372
 80a067c:	a54ff53a 	.word	0xa54ff53a
 80a0680:	510e527f 	.word	0x510e527f
 80a0684:	9b05688c 	.word	0x9b05688c
 80a0688:	1f83d9ab 	.word	0x1f83d9ab
 80a068c:	c1059ed8 	.word	0xc1059ed8
 80a0690:	367cd507 	.word	0x367cd507
 80a0694:	f70e5939 	.word	0xf70e5939
 80a0698:	ffc00b31 	.word	0xffc00b31
 80a069c:	64f98fa7 	.word	0x64f98fa7
 80a06a0:	befa4fa4 	.word	0xbefa4fa4

080a06a4 <mbedtls_internal_sha256_process>:
        (d) += temp1; (h) = temp1 + temp2;              \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 80a06a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a06a8:	1d03      	adds	r3, r0, #4
 80a06aa:	b0cf      	sub	sp, #316	; 0x13c
 80a06ac:	9305      	str	r3, [sp, #20]
 80a06ae:	461a      	mov	r2, r3
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
 80a06b0:	2300      	movs	r3, #0
        A[i] = ctx->state[i];
 80a06b2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80a06b6:	ac06      	add	r4, sp, #24
 80a06b8:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
 80a06bc:	3301      	adds	r3, #1
 80a06be:	2b08      	cmp	r3, #8
 80a06c0:	d1f7      	bne.n	80a06b2 <mbedtls_internal_sha256_process+0xe>
 80a06c2:	4608      	mov	r0, r1
 80a06c4:	2200      	movs	r2, #0
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
 80a06c6:	ac0e      	add	r4, sp, #56	; 0x38
 80a06c8:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
 80a06cc:	78c3      	ldrb	r3, [r0, #3]
 80a06ce:	3004      	adds	r0, #4
 80a06d0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80a06d4:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 80a06d8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80a06dc:	f810 5c02 	ldrb.w	r5, [r0, #-2]
 80a06e0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80a06e4:	f844 3022 	str.w	r3, [r4, r2, lsl #2]

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 80a06e8:	3201      	adds	r2, #1
 80a06ea:	2a10      	cmp	r2, #16
 80a06ec:	d1ec      	bne.n	80a06c8 <mbedtls_internal_sha256_process+0x24>
 80a06ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a06f0:	4c9f      	ldr	r4, [pc, #636]	; (80a0970 <mbedtls_internal_sha256_process+0x2cc>)
 80a06f2:	9300      	str	r3, [sp, #0]
 80a06f4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80a06f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a06f8:	9f08      	ldr	r7, [sp, #32]
 80a06fa:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80a06fe:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80a0702:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80a0706:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80a070a:	ad0f      	add	r5, sp, #60	; 0x3c
 80a070c:	f104 0a40 	add.w	sl, r4, #64	; 0x40
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 80a0710:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80a0714:	ea4f 22f8 	mov.w	r2, r8, ror #11
 80a0718:	f855 1c04 	ldr.w	r1, [r5, #-4]
 80a071c:	ea86 0c0b 	eor.w	ip, r6, fp
 80a0720:	ea82 12b8 	eor.w	r2, r2, r8, ror #6
 80a0724:	4401      	add	r1, r0
 80a0726:	ea82 6278 	eor.w	r2, r2, r8, ror #25
 80a072a:	ea0c 0c08 	and.w	ip, ip, r8
 80a072e:	ea8c 0c06 	eor.w	ip, ip, r6
 80a0732:	440a      	add	r2, r1
 80a0734:	9900      	ldr	r1, [sp, #0]
 80a0736:	4462      	add	r2, ip
 80a0738:	ea4f 3079 	mov.w	r0, r9, ror #13
 80a073c:	ea4e 0c09 	orr.w	ip, lr, r9
 80a0740:	440a      	add	r2, r1
 80a0742:	ea0c 0c07 	and.w	ip, ip, r7
 80a0746:	ea0e 0109 	and.w	r1, lr, r9
 80a074a:	ea80 00b9 	eor.w	r0, r0, r9, ror #2
 80a074e:	ea4c 0101 	orr.w	r1, ip, r1
 80a0752:	ea80 50b9 	eor.w	r0, r0, r9, ror #22
 80a0756:	4408      	add	r0, r1
 80a0758:	4413      	add	r3, r2
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 80a075a:	6829      	ldr	r1, [r5, #0]
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 80a075c:	4402      	add	r2, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 80a075e:	6820      	ldr	r0, [r4, #0]
 80a0760:	ea8b 0c08 	eor.w	ip, fp, r8
 80a0764:	4401      	add	r1, r0
 80a0766:	ea0c 0c03 	and.w	ip, ip, r3
 80a076a:	ea4f 20f3 	mov.w	r0, r3, ror #11
 80a076e:	ea8c 0c0b 	eor.w	ip, ip, fp
 80a0772:	440e      	add	r6, r1
 80a0774:	ea80 10b3 	eor.w	r0, r0, r3, ror #6
 80a0778:	eb06 010c 	add.w	r1, r6, ip
 80a077c:	ea80 6073 	eor.w	r0, r0, r3, ror #25
 80a0780:	180e      	adds	r6, r1, r0
 80a0782:	eb06 0c07 	add.w	ip, r6, r7
 80a0786:	ea42 0009 	orr.w	r0, r2, r9
 80a078a:	ea4f 3772 	mov.w	r7, r2, ror #13
 80a078e:	ea02 0109 	and.w	r1, r2, r9
 80a0792:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
 80a0796:	ea00 000e 	and.w	r0, r0, lr
 80a079a:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
 80a079e:	4308      	orrs	r0, r1
 80a07a0:	4438      	add	r0, r7
 80a07a2:	4430      	add	r0, r6
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 80a07a4:	6869      	ldr	r1, [r5, #4]
 80a07a6:	6866      	ldr	r6, [r4, #4]
 80a07a8:	ea83 0708 	eor.w	r7, r3, r8
 80a07ac:	440e      	add	r6, r1
 80a07ae:	ea07 070c 	and.w	r7, r7, ip
 80a07b2:	ea4f 21fc 	mov.w	r1, ip, ror #11
 80a07b6:	ea87 0708 	eor.w	r7, r7, r8
 80a07ba:	44b3      	add	fp, r6
 80a07bc:	ea81 11bc 	eor.w	r1, r1, ip, ror #6
 80a07c0:	eb0b 0607 	add.w	r6, fp, r7
 80a07c4:	ea81 617c 	eor.w	r1, r1, ip, ror #25
 80a07c8:	eb06 0b01 	add.w	fp, r6, r1
 80a07cc:	ea4f 3770 	mov.w	r7, r0, ror #13
 80a07d0:	ea42 0100 	orr.w	r1, r2, r0
 80a07d4:	ea02 0600 	and.w	r6, r2, r0
 80a07d8:	ea87 07b0 	eor.w	r7, r7, r0, ror #2
 80a07dc:	ea01 0109 	and.w	r1, r1, r9
 80a07e0:	ea87 57b0 	eor.w	r7, r7, r0, ror #22
 80a07e4:	4331      	orrs	r1, r6
 80a07e6:	4439      	add	r1, r7
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 80a07e8:	68ae      	ldr	r6, [r5, #8]
 80a07ea:	68a7      	ldr	r7, [r4, #8]

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 80a07ec:	4459      	add	r1, fp
 80a07ee:	44de      	add	lr, fp
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 80a07f0:	443e      	add	r6, r7
 80a07f2:	ea83 0b0c 	eor.w	fp, r3, ip
 80a07f6:	44b0      	add	r8, r6
 80a07f8:	ea0b 0b0e 	and.w	fp, fp, lr
 80a07fc:	ea4f 26fe 	mov.w	r6, lr, ror #11
 80a0800:	ea8b 0b03 	eor.w	fp, fp, r3
 80a0804:	ea86 16be 	eor.w	r6, r6, lr, ror #6
 80a0808:	44d8      	add	r8, fp
 80a080a:	ea86 667e 	eor.w	r6, r6, lr, ror #25
 80a080e:	4446      	add	r6, r8
 80a0810:	ea4f 3b71 	mov.w	fp, r1, ror #13
 80a0814:	ea40 0801 	orr.w	r8, r0, r1
 80a0818:	ea00 0701 	and.w	r7, r0, r1
 80a081c:	ea8b 0bb1 	eor.w	fp, fp, r1, ror #2
 80a0820:	ea08 0802 	and.w	r8, r8, r2
 80a0824:	ea8b 5bb1 	eor.w	fp, fp, r1, ror #22
 80a0828:	ea48 0807 	orr.w	r8, r8, r7
 80a082c:	44d8      	add	r8, fp
 80a082e:	44b0      	add	r8, r6
 80a0830:	44b1      	add	r9, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 80a0832:	68e7      	ldr	r7, [r4, #12]
 80a0834:	68ee      	ldr	r6, [r5, #12]
 80a0836:	ea8c 0b0e 	eor.w	fp, ip, lr
 80a083a:	4437      	add	r7, r6
 80a083c:	ea0b 0b09 	and.w	fp, fp, r9
 80a0840:	ea8b 0b0c 	eor.w	fp, fp, ip
 80a0844:	443b      	add	r3, r7
 80a0846:	eb03 070b 	add.w	r7, r3, fp
 80a084a:	ea4f 23f9 	mov.w	r3, r9, ror #11
 80a084e:	ea83 13b9 	eor.w	r3, r3, r9, ror #6
 80a0852:	ea83 6379 	eor.w	r3, r3, r9, ror #25
 80a0856:	18fe      	adds	r6, r7, r3
 80a0858:	1993      	adds	r3, r2, r6
 80a085a:	9300      	str	r3, [sp, #0]
 80a085c:	ea4f 3778 	mov.w	r7, r8, ror #13
 80a0860:	ea41 0308 	orr.w	r3, r1, r8
 80a0864:	ea01 0208 	and.w	r2, r1, r8
 80a0868:	ea87 07b8 	eor.w	r7, r7, r8, ror #2
 80a086c:	4003      	ands	r3, r0
 80a086e:	ea87 57b8 	eor.w	r7, r7, r8, ror #22
 80a0872:	4313      	orrs	r3, r2
 80a0874:	443b      	add	r3, r7
 80a0876:	4433      	add	r3, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 80a0878:	692a      	ldr	r2, [r5, #16]
 80a087a:	6926      	ldr	r6, [r4, #16]
 80a087c:	ea4f 3b73 	mov.w	fp, r3, ror #13
 80a0880:	4432      	add	r2, r6
 80a0882:	4494      	add	ip, r2
 80a0884:	9a00      	ldr	r2, [sp, #0]
 80a0886:	ea8e 0609 	eor.w	r6, lr, r9
 80a088a:	4016      	ands	r6, r2
 80a088c:	ea4f 27f2 	mov.w	r7, r2, ror #11
 80a0890:	ea86 060e 	eor.w	r6, r6, lr
 80a0894:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
 80a0898:	44b4      	add	ip, r6
 80a089a:	ea87 6772 	eor.w	r7, r7, r2, ror #25
 80a089e:	eb0c 0207 	add.w	r2, ip, r7
 80a08a2:	ea48 0703 	orr.w	r7, r8, r3
 80a08a6:	1886      	adds	r6, r0, r2
 80a08a8:	400f      	ands	r7, r1
 80a08aa:	ea08 0003 	and.w	r0, r8, r3
 80a08ae:	ea8b 0bb3 	eor.w	fp, fp, r3, ror #2
 80a08b2:	ea8b 5bb3 	eor.w	fp, fp, r3, ror #22
 80a08b6:	4307      	orrs	r7, r0
 80a08b8:	445f      	add	r7, fp
 80a08ba:	4417      	add	r7, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 80a08bc:	6960      	ldr	r0, [r4, #20]
 80a08be:	696a      	ldr	r2, [r5, #20]
 80a08c0:	3420      	adds	r4, #32
 80a08c2:	4410      	add	r0, r2
 80a08c4:	9a00      	ldr	r2, [sp, #0]
 80a08c6:	4486      	add	lr, r0
 80a08c8:	ea89 0c02 	eor.w	ip, r9, r2
 80a08cc:	ea0c 0c06 	and.w	ip, ip, r6
 80a08d0:	ea8c 0c09 	eor.w	ip, ip, r9
 80a08d4:	eb0e 000c 	add.w	r0, lr, ip
 80a08d8:	ea4f 2ef6 	mov.w	lr, r6, ror #11
 80a08dc:	ea8e 1eb6 	eor.w	lr, lr, r6, ror #6
 80a08e0:	ea8e 6e76 	eor.w	lr, lr, r6, ror #25
 80a08e4:	eb00 020e 	add.w	r2, r0, lr
 80a08e8:	ea4f 3077 	mov.w	r0, r7, ror #13
 80a08ec:	ea43 0e07 	orr.w	lr, r3, r7
 80a08f0:	eb01 0b02 	add.w	fp, r1, r2
 80a08f4:	ea0e 0e08 	and.w	lr, lr, r8
 80a08f8:	ea03 0107 	and.w	r1, r3, r7
 80a08fc:	ea80 00b7 	eor.w	r0, r0, r7, ror #2
 80a0900:	ea80 50b7 	eor.w	r0, r0, r7, ror #22
 80a0904:	ea4e 0e01 	orr.w	lr, lr, r1
 80a0908:	4486      	add	lr, r0
 80a090a:	4496      	add	lr, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 80a090c:	f854 1c08 	ldr.w	r1, [r4, #-8]
 80a0910:	69aa      	ldr	r2, [r5, #24]
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
 80a0912:	45a2      	cmp	sl, r4
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 80a0914:	4411      	add	r1, r2
 80a0916:	9a00      	ldr	r2, [sp, #0]
 80a0918:	4489      	add	r9, r1
 80a091a:	ea82 0006 	eor.w	r0, r2, r6
 80a091e:	ea00 000b 	and.w	r0, r0, fp
 80a0922:	ea80 0002 	eor.w	r0, r0, r2
 80a0926:	eb09 0100 	add.w	r1, r9, r0
 80a092a:	ea4f 29fb 	mov.w	r9, fp, ror #11
 80a092e:	ea89 19bb 	eor.w	r9, r9, fp, ror #6
 80a0932:	ea89 697b 	eor.w	r9, r9, fp, ror #25
 80a0936:	eb01 0209 	add.w	r2, r1, r9
 80a093a:	ea4f 307e 	mov.w	r0, lr, ror #13
 80a093e:	ea47 090e 	orr.w	r9, r7, lr
 80a0942:	ea80 00be 	eor.w	r0, r0, lr, ror #2
 80a0946:	ea09 0903 	and.w	r9, r9, r3
 80a094a:	ea07 010e 	and.w	r1, r7, lr
 80a094e:	ea80 50be 	eor.w	r0, r0, lr, ror #22
 80a0952:	ea49 0901 	orr.w	r9, r9, r1
 80a0956:	4481      	add	r9, r0
 80a0958:	4490      	add	r8, r2
 80a095a:	4491      	add	r9, r2
 80a095c:	f105 0520 	add.w	r5, r5, #32
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
 80a0960:	f47f aed6 	bne.w	80a0710 <mbedtls_internal_sha256_process+0x6c>
 80a0964:	2200      	movs	r2, #0
 80a0966:	f8df a00c 	ldr.w	sl, [pc, #12]	; 80a0974 <mbedtls_internal_sha256_process+0x2d0>
 80a096a:	ac0e      	add	r4, sp, #56	; 0x38
 80a096c:	9204      	str	r2, [sp, #16]
 80a096e:	e003      	b.n	80a0978 <mbedtls_internal_sha256_process+0x2d4>
 80a0970:	080b39cc 	.word	0x080b39cc
 80a0974:	080b39c8 	.word	0x080b39c8
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 80a0978:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80a097a:	6860      	ldr	r0, [r4, #4]
 80a097c:	ea4f 45f2 	mov.w	r5, r2, ror #19
 80a0980:	ea85 4572 	eor.w	r5, r5, r2, ror #17
 80a0984:	ea85 2592 	eor.w	r5, r5, r2, lsr #10
 80a0988:	9a04      	ldr	r2, [sp, #16]
 80a098a:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 80a098e:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 80a0992:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80a0994:	ea4f 4cb0 	mov.w	ip, r0, ror #18
 80a0998:	440a      	add	r2, r1
 80a099a:	ea8c 1cf0 	eor.w	ip, ip, r0, ror #7
 80a099e:	ea4f 21f8 	mov.w	r1, r8, ror #11
 80a09a2:	ea8c 0cd0 	eor.w	ip, ip, r0, lsr #3
 80a09a6:	ea81 11b8 	eor.w	r1, r1, r8, ror #6
 80a09aa:	4415      	add	r5, r2
 80a09ac:	eb05 020c 	add.w	r2, r5, ip
 80a09b0:	ea81 6578 	eor.w	r5, r1, r8, ror #25
 80a09b4:	ea86 010b 	eor.w	r1, r6, fp
 80a09b8:	ea01 0108 	and.w	r1, r1, r8
 80a09bc:	9203      	str	r2, [sp, #12]
 80a09be:	ea81 0206 	eor.w	r2, r1, r6
 80a09c2:	18a9      	adds	r1, r5, r2
 80a09c4:	f8da 2040 	ldr.w	r2, [sl, #64]	; 0x40
 80a09c8:	ea4e 0509 	orr.w	r5, lr, r9
 80a09cc:	440a      	add	r2, r1
 80a09ce:	9903      	ldr	r1, [sp, #12]
 80a09d0:	403d      	ands	r5, r7
 80a09d2:	6421      	str	r1, [r4, #64]	; 0x40
 80a09d4:	440a      	add	r2, r1
 80a09d6:	9900      	ldr	r1, [sp, #0]
 80a09d8:	f10a 0a20 	add.w	sl, sl, #32
 80a09dc:	440a      	add	r2, r1
 80a09de:	18d3      	adds	r3, r2, r3
 80a09e0:	ea4f 3179 	mov.w	r1, r9, ror #13
 80a09e4:	9300      	str	r3, [sp, #0]
 80a09e6:	ea81 01b9 	eor.w	r1, r1, r9, ror #2
 80a09ea:	ea0e 0309 	and.w	r3, lr, r9
 80a09ee:	ea81 51b9 	eor.w	r1, r1, r9, ror #22
 80a09f2:	432b      	orrs	r3, r5
 80a09f4:	440b      	add	r3, r1
 80a09f6:	441a      	add	r2, r3
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 80a09f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a09fa:	68a5      	ldr	r5, [r4, #8]
 80a09fc:	ea4f 41f3 	mov.w	r1, r3, ror #19
 80a0a00:	ea81 4173 	eor.w	r1, r1, r3, ror #17
 80a0a04:	ea81 2193 	eor.w	r1, r1, r3, lsr #10
 80a0a08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a0a0a:	3420      	adds	r4, #32
 80a0a0c:	4403      	add	r3, r0
 80a0a0e:	4419      	add	r1, r3
 80a0a10:	ea4f 43b5 	mov.w	r3, r5, ror #18
 80a0a14:	ea83 13f5 	eor.w	r3, r3, r5, ror #7
 80a0a18:	ea83 0cd5 	eor.w	ip, r3, r5, lsr #3
 80a0a1c:	eb01 030c 	add.w	r3, r1, ip
 80a0a20:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 80a0a24:	9900      	ldr	r1, [sp, #0]
 80a0a26:	ea8b 0c08 	eor.w	ip, fp, r8
 80a0a2a:	4430      	add	r0, r6
 80a0a2c:	ea0c 0c01 	and.w	ip, ip, r1
 80a0a30:	ea8c 0c0b 	eor.w	ip, ip, fp
 80a0a34:	18c1      	adds	r1, r0, r3
 80a0a36:	448c      	add	ip, r1
 80a0a38:	9900      	ldr	r1, [sp, #0]
 80a0a3a:	6263      	str	r3, [r4, #36]	; 0x24
 80a0a3c:	ea4f 20f1 	mov.w	r0, r1, ror #11
 80a0a40:	ea80 10b1 	eor.w	r0, r0, r1, ror #6
 80a0a44:	ea80 6071 	eor.w	r0, r0, r1, ror #25
 80a0a48:	eb00 010c 	add.w	r1, r0, ip
 80a0a4c:	19c8      	adds	r0, r1, r7
 80a0a4e:	9001      	str	r0, [sp, #4]
 80a0a50:	ea4f 3c72 	mov.w	ip, r2, ror #13
 80a0a54:	ea42 0009 	orr.w	r0, r2, r9
 80a0a58:	ea02 0709 	and.w	r7, r2, r9
 80a0a5c:	ea8c 0cb2 	eor.w	ip, ip, r2, ror #2
 80a0a60:	ea00 000e 	and.w	r0, r0, lr
 80a0a64:	ea8c 5cb2 	eor.w	ip, ip, r2, ror #22
 80a0a68:	4338      	orrs	r0, r7
 80a0a6a:	4460      	add	r0, ip
 80a0a6c:	4408      	add	r0, r1
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 80a0a6e:	9903      	ldr	r1, [sp, #12]
 80a0a70:	f854 7c14 	ldr.w	r7, [r4, #-20]
 80a0a74:	ea4f 46f1 	mov.w	r6, r1, ror #19
 80a0a78:	ea86 4671 	eor.w	r6, r6, r1, ror #17
 80a0a7c:	ea86 2691 	eor.w	r6, r6, r1, lsr #10
 80a0a80:	68e1      	ldr	r1, [r4, #12]
 80a0a82:	ea4f 4cb7 	mov.w	ip, r7, ror #18
 80a0a86:	4429      	add	r1, r5
 80a0a88:	440e      	add	r6, r1
 80a0a8a:	ea8c 1cf7 	eor.w	ip, ip, r7, ror #7
 80a0a8e:	9900      	ldr	r1, [sp, #0]
 80a0a90:	ea8c 0cd7 	eor.w	ip, ip, r7, lsr #3
 80a0a94:	4466      	add	r6, ip
 80a0a96:	ea81 0c08 	eor.w	ip, r1, r8
 80a0a9a:	9901      	ldr	r1, [sp, #4]
 80a0a9c:	62a6      	str	r6, [r4, #40]	; 0x28
 80a0a9e:	ea0c 0c01 	and.w	ip, ip, r1
 80a0aa2:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
 80a0aa6:	ea8c 0c08 	eor.w	ip, ip, r8
 80a0aaa:	4459      	add	r1, fp
 80a0aac:	198d      	adds	r5, r1, r6
 80a0aae:	9901      	ldr	r1, [sp, #4]
 80a0ab0:	44ac      	add	ip, r5
 80a0ab2:	9d01      	ldr	r5, [sp, #4]
 80a0ab4:	ea4f 21f1 	mov.w	r1, r1, ror #11
 80a0ab8:	ea81 11b5 	eor.w	r1, r1, r5, ror #6
 80a0abc:	ea81 6175 	eor.w	r1, r1, r5, ror #25
 80a0ac0:	eb01 050c 	add.w	r5, r1, ip
 80a0ac4:	ea42 0100 	orr.w	r1, r2, r0
 80a0ac8:	ea4f 3c70 	mov.w	ip, r0, ror #13
 80a0acc:	eb05 0b0e 	add.w	fp, r5, lr
 80a0ad0:	ea8c 0cb0 	eor.w	ip, ip, r0, ror #2
 80a0ad4:	ea02 0e00 	and.w	lr, r2, r0
 80a0ad8:	ea01 0109 	and.w	r1, r1, r9
 80a0adc:	ea8c 5cb0 	eor.w	ip, ip, r0, ror #22
 80a0ae0:	ea41 010e 	orr.w	r1, r1, lr
 80a0ae4:	4461      	add	r1, ip
 80a0ae6:	4429      	add	r1, r5
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 80a0ae8:	ea4f 45f3 	mov.w	r5, r3, ror #19
 80a0aec:	ea85 4573 	eor.w	r5, r5, r3, ror #17
 80a0af0:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
 80a0af4:	6925      	ldr	r5, [r4, #16]
 80a0af6:	f854 cc10 	ldr.w	ip, [r4, #-16]
 80a0afa:	442f      	add	r7, r5
 80a0afc:	443b      	add	r3, r7
 80a0afe:	ea4f 47bc 	mov.w	r7, ip, ror #18
 80a0b02:	ea87 17fc 	eor.w	r7, r7, ip, ror #7
 80a0b06:	ea87 0edc 	eor.w	lr, r7, ip, lsr #3
 80a0b0a:	eb03 070e 	add.w	r7, r3, lr
 80a0b0e:	e89d 0028 	ldmia.w	sp, {r3, r5}
 80a0b12:	405d      	eors	r5, r3
 80a0b14:	ea05 050b 	and.w	r5, r5, fp
 80a0b18:	405d      	eors	r5, r3
 80a0b1a:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 80a0b1e:	ea4f 3e71 	mov.w	lr, r1, ror #13
 80a0b22:	4498      	add	r8, r3
 80a0b24:	44b8      	add	r8, r7
 80a0b26:	4445      	add	r5, r8
 80a0b28:	ea4f 28fb 	mov.w	r8, fp, ror #11
 80a0b2c:	ea88 18bb 	eor.w	r8, r8, fp, ror #6
 80a0b30:	ea88 687b 	eor.w	r8, r8, fp, ror #25
 80a0b34:	eb08 0305 	add.w	r3, r8, r5
 80a0b38:	eb03 0509 	add.w	r5, r3, r9
 80a0b3c:	ea40 0801 	orr.w	r8, r0, r1
 80a0b40:	9502      	str	r5, [sp, #8]
 80a0b42:	ea8e 0eb1 	eor.w	lr, lr, r1, ror #2
 80a0b46:	ea00 0501 	and.w	r5, r0, r1
 80a0b4a:	ea08 0802 	and.w	r8, r8, r2
 80a0b4e:	ea8e 5eb1 	eor.w	lr, lr, r1, ror #22
 80a0b52:	ea48 0805 	orr.w	r8, r8, r5
 80a0b56:	44f0      	add	r8, lr
 80a0b58:	4498      	add	r8, r3
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80a0b5a:	ea4f 4ef6 	mov.w	lr, r6, ror #19
 80a0b5e:	6963      	ldr	r3, [r4, #20]
 80a0b60:	ea8e 4e76 	eor.w	lr, lr, r6, ror #17
 80a0b64:	f854 5c0c 	ldr.w	r5, [r4, #-12]
 80a0b68:	ea8e 2696 	eor.w	r6, lr, r6, lsr #10
 80a0b6c:	eb0c 0e03 	add.w	lr, ip, r3
 80a0b70:	9b01      	ldr	r3, [sp, #4]
 80a0b72:	4476      	add	r6, lr
 80a0b74:	ea83 0c0b 	eor.w	ip, r3, fp
 80a0b78:	ea4f 4eb5 	mov.w	lr, r5, ror #18
 80a0b7c:	9b02      	ldr	r3, [sp, #8]
 80a0b7e:	ea8e 1ef5 	eor.w	lr, lr, r5, ror #7
 80a0b82:	ea8e 09d5 	eor.w	r9, lr, r5, lsr #3
 80a0b86:	ea0c 0c03 	and.w	ip, ip, r3
 80a0b8a:	9b01      	ldr	r3, [sp, #4]
 80a0b8c:	eb06 0e09 	add.w	lr, r6, r9
 80a0b90:	f8da 6030 	ldr.w	r6, [sl, #48]	; 0x30
 80a0b94:	ea8c 0c03 	eor.w	ip, ip, r3
 80a0b98:	9b00      	ldr	r3, [sp, #0]
 80a0b9a:	4476      	add	r6, lr
 80a0b9c:	441e      	add	r6, r3
 80a0b9e:	9b02      	ldr	r3, [sp, #8]
 80a0ba0:	44b4      	add	ip, r6
 80a0ba2:	9e02      	ldr	r6, [sp, #8]
 80a0ba4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80a0ba8:	ea83 13b6 	eor.w	r3, r3, r6, ror #6
 80a0bac:	ea83 6376 	eor.w	r3, r3, r6, ror #25
 80a0bb0:	eb03 060c 	add.w	r6, r3, ip
 80a0bb4:	1993      	adds	r3, r2, r6
 80a0bb6:	9300      	str	r3, [sp, #0]
 80a0bb8:	ea41 0308 	orr.w	r3, r1, r8
 80a0bbc:	ea01 0208 	and.w	r2, r1, r8
 80a0bc0:	4003      	ands	r3, r0
 80a0bc2:	4313      	orrs	r3, r2
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80a0bc4:	ea4f 42f7 	mov.w	r2, r7, ror #19
 80a0bc8:	ea82 4277 	eor.w	r2, r2, r7, ror #17
    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 80a0bcc:	62e7      	str	r7, [r4, #44]	; 0x2c
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80a0bce:	ea4f 3c78 	mov.w	ip, r8, ror #13
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80a0bd2:	ea82 2797 	eor.w	r7, r2, r7, lsr #10
 80a0bd6:	69a2      	ldr	r2, [r4, #24]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80a0bd8:	ea8c 0cb8 	eor.w	ip, ip, r8, ror #2
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80a0bdc:	f854 9c08 	ldr.w	r9, [r4, #-8]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80a0be0:	ea8c 5cb8 	eor.w	ip, ip, r8, ror #22
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80a0be4:	4415      	add	r5, r2
 80a0be6:	9a02      	ldr	r2, [sp, #8]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80a0be8:	4463      	add	r3, ip
 80a0bea:	4433      	add	r3, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80a0bec:	442f      	add	r7, r5
 80a0bee:	ea8b 0602 	eor.w	r6, fp, r2
 80a0bf2:	ea4f 45b9 	mov.w	r5, r9, ror #18
 80a0bf6:	9a00      	ldr	r2, [sp, #0]
 80a0bf8:	ea85 15f9 	eor.w	r5, r5, r9, ror #7
 80a0bfc:	ea85 05d9 	eor.w	r5, r5, r9, lsr #3
 80a0c00:	4016      	ands	r6, r2
 80a0c02:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
 80a0c06:	443d      	add	r5, r7
 80a0c08:	9f01      	ldr	r7, [sp, #4]
 80a0c0a:	442a      	add	r2, r5
 80a0c0c:	443a      	add	r2, r7
 80a0c0e:	ea86 060b 	eor.w	r6, r6, fp
 80a0c12:	4416      	add	r6, r2
 80a0c14:	9a00      	ldr	r2, [sp, #0]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80a0c16:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80a0c1a:	ea4f 27f2 	mov.w	r7, r2, ror #11
 80a0c1e:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
 80a0c22:	ea87 6772 	eor.w	r7, r7, r2, ror #25
 80a0c26:	19ba      	adds	r2, r7, r6
 80a0c28:	1886      	adds	r6, r0, r2
 80a0c2a:	ea4f 3073 	mov.w	r0, r3, ror #13
 80a0c2e:	ea80 00b3 	eor.w	r0, r0, r3, ror #2
 80a0c32:	ea48 0703 	orr.w	r7, r8, r3
 80a0c36:	ea80 5cb3 	eor.w	ip, r0, r3, ror #22
 80a0c3a:	400f      	ands	r7, r1
 80a0c3c:	ea08 0003 	and.w	r0, r8, r3
 80a0c40:	4307      	orrs	r7, r0
 80a0c42:	4467      	add	r7, ip
 80a0c44:	4417      	add	r7, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 80a0c46:	ea4f 42fe 	mov.w	r2, lr, ror #19
 80a0c4a:	ea82 427e 	eor.w	r2, r2, lr, ror #17
 80a0c4e:	ea82 2e9e 	eor.w	lr, r2, lr, lsr #10
 80a0c52:	69e2      	ldr	r2, [r4, #28]
 80a0c54:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80a0c58:	4491      	add	r9, r2
 80a0c5a:	eb0e 0209 	add.w	r2, lr, r9
 80a0c5e:	ea4f 49b0 	mov.w	r9, r0, ror #18
 80a0c62:	ea89 19f0 	eor.w	r9, r9, r0, ror #7
 80a0c66:	ea89 09d0 	eor.w	r9, r9, r0, lsr #3
 80a0c6a:	4491      	add	r9, r2
 80a0c6c:	9a02      	ldr	r2, [sp, #8]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80a0c6e:	6365      	str	r5, [r4, #52]	; 0x34
 80a0c70:	4696      	mov	lr, r2
 80a0c72:	9a00      	ldr	r2, [sp, #0]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 80a0c74:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
 80a0c78:	ea8e 0c02 	eor.w	ip, lr, r2
 80a0c7c:	f8da 2038 	ldr.w	r2, [sl, #56]	; 0x38
 80a0c80:	ea0c 0c06 	and.w	ip, ip, r6
 80a0c84:	ea8c 0c0e 	eor.w	ip, ip, lr
 80a0c88:	444a      	add	r2, r9
 80a0c8a:	ea4f 2ef6 	mov.w	lr, r6, ror #11
 80a0c8e:	445a      	add	r2, fp
 80a0c90:	ea8e 1eb6 	eor.w	lr, lr, r6, ror #6
 80a0c94:	4462      	add	r2, ip
 80a0c96:	ea8e 6e76 	eor.w	lr, lr, r6, ror #25
 80a0c9a:	4472      	add	r2, lr
 80a0c9c:	ea4f 3c77 	mov.w	ip, r7, ror #13
 80a0ca0:	ea43 0e07 	orr.w	lr, r3, r7
 80a0ca4:	eb01 0b02 	add.w	fp, r1, r2
 80a0ca8:	ea0e 0e08 	and.w	lr, lr, r8
 80a0cac:	ea03 0107 	and.w	r1, r3, r7
 80a0cb0:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 80a0cb4:	ea8c 5cb7 	eor.w	ip, ip, r7, ror #22
 80a0cb8:	ea4e 0e01 	orr.w	lr, lr, r1
 80a0cbc:	44e6      	add	lr, ip
 80a0cbe:	4496      	add	lr, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 80a0cc0:	ea4f 42f5 	mov.w	r2, r5, ror #19
 80a0cc4:	6821      	ldr	r1, [r4, #0]
 80a0cc6:	ea82 4275 	eor.w	r2, r2, r5, ror #17
 80a0cca:	ea82 2595 	eor.w	r5, r2, r5, lsr #10
 80a0cce:	9a03      	ldr	r2, [sp, #12]
 80a0cd0:	ea4f 4cb1 	mov.w	ip, r1, ror #18
 80a0cd4:	4410      	add	r0, r2
 80a0cd6:	ea8c 1cf1 	eor.w	ip, ip, r1, ror #7
 80a0cda:	f8da 203c 	ldr.w	r2, [sl, #60]	; 0x3c
 80a0cde:	4405      	add	r5, r0
 80a0ce0:	ea8c 01d1 	eor.w	r1, ip, r1, lsr #3
 80a0ce4:	440d      	add	r5, r1
 80a0ce6:	9902      	ldr	r1, [sp, #8]
 80a0ce8:	442a      	add	r2, r5
 80a0cea:	eb02 0901 	add.w	r9, r2, r1
 80a0cee:	9a00      	ldr	r2, [sp, #0]
 80a0cf0:	ea4f 307e 	mov.w	r0, lr, ror #13
 80a0cf4:	ea82 0106 	eor.w	r1, r2, r6
 80a0cf8:	ea01 010b 	and.w	r1, r1, fp
 80a0cfc:	4051      	eors	r1, r2
 80a0cfe:	ea4f 22fb 	mov.w	r2, fp, ror #11
 80a0d02:	ea82 12bb 	eor.w	r2, r2, fp, ror #6
 80a0d06:	4489      	add	r9, r1
 80a0d08:	ea82 627b 	eor.w	r2, r2, fp, ror #25
 80a0d0c:	444a      	add	r2, r9
 80a0d0e:	ea47 090e 	orr.w	r9, r7, lr
 80a0d12:	ea80 00be 	eor.w	r0, r0, lr, ror #2
 80a0d16:	ea09 0903 	and.w	r9, r9, r3
 80a0d1a:	ea07 010e 	and.w	r1, r7, lr
 80a0d1e:	ea80 50be 	eor.w	r0, r0, lr, ror #22
 80a0d22:	ea49 0901 	orr.w	r9, r9, r1
 80a0d26:	4481      	add	r9, r0
 80a0d28:	4490      	add	r8, r2
 80a0d2a:	4491      	add	r9, r2
 80a0d2c:	9a04      	ldr	r2, [sp, #16]
 80a0d2e:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a0d30:	3208      	adds	r2, #8
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
 80a0d32:	2a30      	cmp	r2, #48	; 0x30
 80a0d34:	9204      	str	r2, [sp, #16]
 80a0d36:	f47f ae1f 	bne.w	80a0978 <mbedtls_internal_sha256_process+0x2d4>
 80a0d3a:	9a00      	ldr	r2, [sp, #0]
 80a0d3c:	9309      	str	r3, [sp, #36]	; 0x24
 80a0d3e:	920d      	str	r2, [sp, #52]	; 0x34
 80a0d40:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80a0d44:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80a0d48:	960c      	str	r6, [sp, #48]	; 0x30
 80a0d4a:	f8cd 9018 	str.w	r9, [sp, #24]
 80a0d4e:	f8cd e01c 	str.w	lr, [sp, #28]
 80a0d52:	9708      	str	r7, [sp, #32]
 80a0d54:	2300      	movs	r3, #0
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
 80a0d56:	9a05      	ldr	r2, [sp, #20]
 80a0d58:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80a0d5c:	9205      	str	r2, [sp, #20]
 80a0d5e:	aa06      	add	r2, sp, #24
 80a0d60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 80a0d64:	3301      	adds	r3, #1
        ctx->state[i] += A[i];
 80a0d66:	440a      	add	r2, r1
 80a0d68:	9905      	ldr	r1, [sp, #20]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 80a0d6a:	2b08      	cmp	r3, #8
        ctx->state[i] += A[i];
 80a0d6c:	600a      	str	r2, [r1, #0]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 80a0d6e:	d1f2      	bne.n	80a0d56 <mbedtls_internal_sha256_process+0x6b2>
        ctx->state[i] += A[i];

    return( 0 );
}
 80a0d70:	2000      	movs	r0, #0
 80a0d72:	b04f      	add	sp, #316	; 0x13c
 80a0d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0d78 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 80a0d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0d7c:	4604      	mov	r4, r0
 80a0d7e:	460e      	mov	r6, r1
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 80a0d80:	4615      	mov	r5, r2
 80a0d82:	b382      	cbz	r2, 80a0de6 <mbedtls_sha256_update_ret+0x6e>
        return( 0 );

    left = ctx->total[0] & 0x3F;
 80a0d84:	6803      	ldr	r3, [r0, #0]
 80a0d86:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 80a0d8a:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 80a0d8c:	429a      	cmp	r2, r3
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 80a0d8e:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 80a0d90:	bf82      	ittt	hi
 80a0d92:	6863      	ldrhi	r3, [r4, #4]
 80a0d94:	3301      	addhi	r3, #1
 80a0d96:	6063      	strhi	r3, [r4, #4]

    if( left && ilen >= fill )
 80a0d98:	b180      	cbz	r0, 80a0dbc <mbedtls_sha256_update_ret+0x44>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 80a0d9a:	f1c0 0740 	rsb	r7, r0, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 80a0d9e:	42ba      	cmp	r2, r7
 80a0da0:	d31b      	bcc.n	80a0dda <mbedtls_sha256_update_ret+0x62>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 80a0da2:	f104 0828 	add.w	r8, r4, #40	; 0x28
 80a0da6:	463a      	mov	r2, r7
 80a0da8:	4440      	add	r0, r8
 80a0daa:	f011 fd24 	bl	80b27f6 <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80a0dae:	4641      	mov	r1, r8
 80a0db0:	4620      	mov	r0, r4
 80a0db2:	f7ff fc77 	bl	80a06a4 <mbedtls_internal_sha256_process>
 80a0db6:	b9b8      	cbnz	r0, 80a0de8 <mbedtls_sha256_update_ret+0x70>
            return( ret );

        input += fill;
 80a0db8:	443e      	add	r6, r7
        ilen  -= fill;
 80a0dba:	1bed      	subs	r5, r5, r7
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 80a0dbc:	462f      	mov	r7, r5
 80a0dbe:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 80a0dc0:	2f3f      	cmp	r7, #63	; 0x3f
 80a0dc2:	4431      	add	r1, r6
 80a0dc4:	d905      	bls.n	80a0dd2 <mbedtls_sha256_update_ret+0x5a>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 80a0dc6:	4620      	mov	r0, r4
 80a0dc8:	f7ff fc6c 	bl	80a06a4 <mbedtls_internal_sha256_process>
 80a0dcc:	b960      	cbnz	r0, 80a0de8 <mbedtls_sha256_update_ret+0x70>
            return( ret );

        input += 64;
        ilen  -= 64;
 80a0dce:	3f40      	subs	r7, #64	; 0x40
 80a0dd0:	e7f5      	b.n	80a0dbe <mbedtls_sha256_update_ret+0x46>
    }

    if( ilen > 0 )
 80a0dd2:	b147      	cbz	r7, 80a0de6 <mbedtls_sha256_update_ret+0x6e>
 80a0dd4:	463d      	mov	r5, r7
 80a0dd6:	460e      	mov	r6, r1
 80a0dd8:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 80a0dda:	3428      	adds	r4, #40	; 0x28
 80a0ddc:	462a      	mov	r2, r5
 80a0dde:	4631      	mov	r1, r6
 80a0de0:	4420      	add	r0, r4
 80a0de2:	f011 fd08 	bl	80b27f6 <memcpy>

    return( 0 );
 80a0de6:	2000      	movs	r0, #0
}
 80a0de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0dec <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 80a0dec:	b570      	push	{r4, r5, r6, lr}
 80a0dee:	4604      	mov	r4, r0
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 80a0df0:	6803      	ldr	r3, [r0, #0]

    ctx->buffer[used++] = 0x80;
 80a0df2:	2280      	movs	r2, #128	; 0x80
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 80a0df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
 80a0df8:	1c58      	adds	r0, r3, #1

    if( used <= 56 )
 80a0dfa:	2838      	cmp	r0, #56	; 0x38
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 80a0dfc:	4423      	add	r3, r4
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 80a0dfe:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 80a0e00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80a0e04:	f104 0628 	add.w	r6, r4, #40	; 0x28

    if( used <= 56 )
 80a0e08:	d804      	bhi.n	80a0e14 <mbedtls_sha256_finish_ret+0x28>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 80a0e0a:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 80a0e0e:	2100      	movs	r1, #0
 80a0e10:	4430      	add	r0, r6
 80a0e12:	e00e      	b.n	80a0e32 <mbedtls_sha256_finish_ret+0x46>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 80a0e14:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 80a0e18:	2100      	movs	r1, #0
 80a0e1a:	4430      	add	r0, r6
 80a0e1c:	f011 fd11 	bl	80b2842 <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80a0e20:	4631      	mov	r1, r6
 80a0e22:	4620      	mov	r0, r4
 80a0e24:	f7ff fc3e 	bl	80a06a4 <mbedtls_internal_sha256_process>
 80a0e28:	2800      	cmp	r0, #0
 80a0e2a:	d172      	bne.n	80a0f12 <mbedtls_sha256_finish_ret+0x126>
            return( ret );

        memset( ctx->buffer, 0, 56 );
 80a0e2c:	4601      	mov	r1, r0
 80a0e2e:	4630      	mov	r0, r6
 80a0e30:	2238      	movs	r2, #56	; 0x38
 80a0e32:	f011 fd06 	bl	80b2842 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 80a0e36:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
 80a0e38:	6861      	ldr	r1, [r4, #4]
 80a0e3a:	0f5a      	lsrs	r2, r3, #29
 80a0e3c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80a0e40:	0e11      	lsrs	r1, r2, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 80a0e42:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80a0e44:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
 80a0e48:	0c11      	lsrs	r1, r2, #16
 80a0e4a:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
 80a0e4e:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
 80a0e52:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 80a0e54:	0e1a      	lsrs	r2, r3, #24
 80a0e56:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 80a0e5a:	0c1a      	lsrs	r2, r3, #16
 80a0e5c:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80a0e60:	0a1a      	lsrs	r2, r3, #8
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80a0e62:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 80a0e66:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
 80a0e6a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80a0e6e:	4631      	mov	r1, r6
 80a0e70:	4620      	mov	r0, r4
 80a0e72:	f7ff fc17 	bl	80a06a4 <mbedtls_internal_sha256_process>
 80a0e76:	2800      	cmp	r0, #0
 80a0e78:	d14b      	bne.n	80a0f12 <mbedtls_sha256_finish_ret+0x126>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 80a0e7a:	7ae3      	ldrb	r3, [r4, #11]
 80a0e7c:	702b      	strb	r3, [r5, #0]
 80a0e7e:	8963      	ldrh	r3, [r4, #10]
 80a0e80:	706b      	strb	r3, [r5, #1]
 80a0e82:	68a3      	ldr	r3, [r4, #8]
 80a0e84:	0a1b      	lsrs	r3, r3, #8
 80a0e86:	70ab      	strb	r3, [r5, #2]
 80a0e88:	68a3      	ldr	r3, [r4, #8]
 80a0e8a:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 80a0e8c:	7be3      	ldrb	r3, [r4, #15]
 80a0e8e:	712b      	strb	r3, [r5, #4]
 80a0e90:	89e3      	ldrh	r3, [r4, #14]
 80a0e92:	716b      	strb	r3, [r5, #5]
 80a0e94:	68e3      	ldr	r3, [r4, #12]
 80a0e96:	0a1b      	lsrs	r3, r3, #8
 80a0e98:	71ab      	strb	r3, [r5, #6]
 80a0e9a:	68e3      	ldr	r3, [r4, #12]
 80a0e9c:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 80a0e9e:	7ce3      	ldrb	r3, [r4, #19]
 80a0ea0:	722b      	strb	r3, [r5, #8]
 80a0ea2:	8a63      	ldrh	r3, [r4, #18]
 80a0ea4:	726b      	strb	r3, [r5, #9]
 80a0ea6:	6923      	ldr	r3, [r4, #16]
 80a0ea8:	0a1b      	lsrs	r3, r3, #8
 80a0eaa:	72ab      	strb	r3, [r5, #10]
 80a0eac:	6923      	ldr	r3, [r4, #16]
 80a0eae:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 80a0eb0:	7de3      	ldrb	r3, [r4, #23]
 80a0eb2:	732b      	strb	r3, [r5, #12]
 80a0eb4:	8ae3      	ldrh	r3, [r4, #22]
 80a0eb6:	736b      	strb	r3, [r5, #13]
 80a0eb8:	6963      	ldr	r3, [r4, #20]
 80a0eba:	0a1b      	lsrs	r3, r3, #8
 80a0ebc:	73ab      	strb	r3, [r5, #14]
 80a0ebe:	6963      	ldr	r3, [r4, #20]
 80a0ec0:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 80a0ec2:	7ee3      	ldrb	r3, [r4, #27]
 80a0ec4:	742b      	strb	r3, [r5, #16]
 80a0ec6:	8b63      	ldrh	r3, [r4, #26]
 80a0ec8:	746b      	strb	r3, [r5, #17]
 80a0eca:	69a3      	ldr	r3, [r4, #24]
 80a0ecc:	0a1b      	lsrs	r3, r3, #8
 80a0ece:	74ab      	strb	r3, [r5, #18]
 80a0ed0:	69a3      	ldr	r3, [r4, #24]
 80a0ed2:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 80a0ed4:	7fe3      	ldrb	r3, [r4, #31]
 80a0ed6:	752b      	strb	r3, [r5, #20]
 80a0ed8:	8be3      	ldrh	r3, [r4, #30]
 80a0eda:	756b      	strb	r3, [r5, #21]
 80a0edc:	69e3      	ldr	r3, [r4, #28]
 80a0ede:	0a1b      	lsrs	r3, r3, #8
 80a0ee0:	75ab      	strb	r3, [r5, #22]
 80a0ee2:	69e3      	ldr	r3, [r4, #28]
 80a0ee4:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 80a0ee6:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80a0eea:	762b      	strb	r3, [r5, #24]
 80a0eec:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80a0eee:	766b      	strb	r3, [r5, #25]
 80a0ef0:	6a23      	ldr	r3, [r4, #32]
 80a0ef2:	0a1b      	lsrs	r3, r3, #8
 80a0ef4:	76ab      	strb	r3, [r5, #26]
 80a0ef6:	6a23      	ldr	r3, [r4, #32]
 80a0ef8:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
 80a0efa:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80a0efc:	b94b      	cbnz	r3, 80a0f12 <mbedtls_sha256_finish_ret+0x126>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 80a0efe:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80a0f02:	772b      	strb	r3, [r5, #28]
 80a0f04:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80a0f06:	776b      	strb	r3, [r5, #29]
 80a0f08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a0f0a:	0a1b      	lsrs	r3, r3, #8
 80a0f0c:	77ab      	strb	r3, [r5, #30]
 80a0f0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a0f10:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
 80a0f12:	bd70      	pop	{r4, r5, r6, pc}

080a0f14 <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 80a0f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0f16:	461c      	mov	r4, r3
 80a0f18:	b09d      	sub	sp, #116	; 0x74
 80a0f1a:	4606      	mov	r6, r0

    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha256_init( &ctx );
 80a0f1c:	a801      	add	r0, sp, #4
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 80a0f1e:	460f      	mov	r7, r1
 80a0f20:	4615      	mov	r5, r2

    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha256_init( &ctx );
 80a0f22:	f7ff fb61 	bl	80a05e8 <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
 80a0f26:	4621      	mov	r1, r4
 80a0f28:	a801      	add	r0, sp, #4
 80a0f2a:	f7ff fb6b 	bl	80a0604 <mbedtls_sha256_starts_ret>
 80a0f2e:	4604      	mov	r4, r0
 80a0f30:	b958      	cbnz	r0, 80a0f4a <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
 80a0f32:	463a      	mov	r2, r7
 80a0f34:	4631      	mov	r1, r6
 80a0f36:	a801      	add	r0, sp, #4
 80a0f38:	f7ff ff1e 	bl	80a0d78 <mbedtls_sha256_update_ret>
 80a0f3c:	4604      	mov	r4, r0
 80a0f3e:	b920      	cbnz	r0, 80a0f4a <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 80a0f40:	4629      	mov	r1, r5
 80a0f42:	a801      	add	r0, sp, #4
 80a0f44:	f7ff ff52 	bl	80a0dec <mbedtls_sha256_finish_ret>
 80a0f48:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha256_free( &ctx );
 80a0f4a:	a801      	add	r0, sp, #4
 80a0f4c:	f7ff fb50 	bl	80a05f0 <mbedtls_sha256_free>

    return( ret );
}
 80a0f50:	4620      	mov	r0, r4
 80a0f52:	b01d      	add	sp, #116	; 0x74
 80a0f54:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0f56 <mbedtls_asn1_write_len>:
#define mbedtls_calloc    calloc
#define mbedtls_free       free
#endif

int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
{
 80a0f56:	6803      	ldr	r3, [r0, #0]
    if( len < 0x80 )
 80a0f58:	2a7f      	cmp	r2, #127	; 0x7f
    {
        if( *p - start < 1 )
 80a0f5a:	eba3 0101 	sub.w	r1, r3, r1
#define mbedtls_free       free
#endif

int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
{
    if( len < 0x80 )
 80a0f5e:	d807      	bhi.n	80a0f70 <mbedtls_asn1_write_len+0x1a>
    {
        if( *p - start < 1 )
 80a0f60:	2900      	cmp	r1, #0
 80a0f62:	dd69      	ble.n	80a1038 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
 80a0f64:	1e59      	subs	r1, r3, #1
 80a0f66:	6001      	str	r1, [r0, #0]
 80a0f68:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 1 );
 80a0f6c:	2001      	movs	r0, #1
 80a0f6e:	4770      	bx	lr
    }

    if( len <= 0xFF )
 80a0f70:	2aff      	cmp	r2, #255	; 0xff
 80a0f72:	d80d      	bhi.n	80a0f90 <mbedtls_asn1_write_len+0x3a>
    {
        if( *p - start < 2 )
 80a0f74:	2901      	cmp	r1, #1
 80a0f76:	dd5f      	ble.n	80a1038 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
 80a0f78:	1e59      	subs	r1, r3, #1
 80a0f7a:	6001      	str	r1, [r0, #0]
 80a0f7c:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x81;
 80a0f80:	6803      	ldr	r3, [r0, #0]
 80a0f82:	1e5a      	subs	r2, r3, #1
 80a0f84:	6002      	str	r2, [r0, #0]
 80a0f86:	2281      	movs	r2, #129	; 0x81
 80a0f88:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 2 );
 80a0f8c:	2002      	movs	r0, #2
 80a0f8e:	4770      	bx	lr
    }

    if( len <= 0xFFFF )
 80a0f90:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80a0f94:	d213      	bcs.n	80a0fbe <mbedtls_asn1_write_len+0x68>
    {
        if( *p - start < 3 )
 80a0f96:	2902      	cmp	r1, #2
 80a0f98:	dd4e      	ble.n	80a1038 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 80a0f9a:	1e59      	subs	r1, r3, #1
 80a0f9c:	6001      	str	r1, [r0, #0]
 80a0f9e:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 80a0fa2:	6803      	ldr	r3, [r0, #0]
 80a0fa4:	0a12      	lsrs	r2, r2, #8
 80a0fa6:	1e59      	subs	r1, r3, #1
 80a0fa8:	6001      	str	r1, [r0, #0]
 80a0faa:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x82;
 80a0fae:	6803      	ldr	r3, [r0, #0]
 80a0fb0:	1e5a      	subs	r2, r3, #1
 80a0fb2:	6002      	str	r2, [r0, #0]
 80a0fb4:	2282      	movs	r2, #130	; 0x82
 80a0fb6:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 3 );
 80a0fba:	2003      	movs	r0, #3
 80a0fbc:	4770      	bx	lr
    }

    if( len <= 0xFFFFFF )
 80a0fbe:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80a0fc2:	d219      	bcs.n	80a0ff8 <mbedtls_asn1_write_len+0xa2>
    {
        if( *p - start < 4 )
 80a0fc4:	2903      	cmp	r1, #3
 80a0fc6:	dd37      	ble.n	80a1038 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 80a0fc8:	1e59      	subs	r1, r3, #1
 80a0fca:	6001      	str	r1, [r0, #0]
 80a0fcc:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 80a0fd0:	6803      	ldr	r3, [r0, #0]
 80a0fd2:	1e59      	subs	r1, r3, #1
 80a0fd4:	6001      	str	r1, [r0, #0]
 80a0fd6:	0a11      	lsrs	r1, r2, #8
 80a0fd8:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
 80a0fdc:	6803      	ldr	r3, [r0, #0]
 80a0fde:	0c12      	lsrs	r2, r2, #16
 80a0fe0:	1e59      	subs	r1, r3, #1
 80a0fe2:	6001      	str	r1, [r0, #0]
 80a0fe4:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x83;
 80a0fe8:	6803      	ldr	r3, [r0, #0]
 80a0fea:	1e5a      	subs	r2, r3, #1
 80a0fec:	6002      	str	r2, [r0, #0]
 80a0fee:	2283      	movs	r2, #131	; 0x83
 80a0ff0:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 4 );
 80a0ff4:	2004      	movs	r0, #4
 80a0ff6:	4770      	bx	lr

#if SIZE_MAX > 0xFFFFFFFF
    if( len <= 0xFFFFFFFF )
#endif
    {
        if( *p - start < 5 )
 80a0ff8:	2904      	cmp	r1, #4
 80a0ffa:	dd1d      	ble.n	80a1038 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 80a0ffc:	1e59      	subs	r1, r3, #1
 80a0ffe:	6001      	str	r1, [r0, #0]
 80a1000:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 80a1004:	6803      	ldr	r3, [r0, #0]
 80a1006:	1e59      	subs	r1, r3, #1
 80a1008:	6001      	str	r1, [r0, #0]
 80a100a:	0a11      	lsrs	r1, r2, #8
 80a100c:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
 80a1010:	6803      	ldr	r3, [r0, #0]
 80a1012:	1e59      	subs	r1, r3, #1
 80a1014:	6001      	str	r1, [r0, #0]
 80a1016:	0c11      	lsrs	r1, r2, #16
 80a1018:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 24 ) & 0xFF;
 80a101c:	6803      	ldr	r3, [r0, #0]
 80a101e:	0e12      	lsrs	r2, r2, #24
 80a1020:	1e59      	subs	r1, r3, #1
 80a1022:	6001      	str	r1, [r0, #0]
 80a1024:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x84;
 80a1028:	6803      	ldr	r3, [r0, #0]
 80a102a:	1e5a      	subs	r2, r3, #1
 80a102c:	6002      	str	r2, [r0, #0]
 80a102e:	2284      	movs	r2, #132	; 0x84
 80a1030:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 5 );
 80a1034:	2005      	movs	r0, #5
 80a1036:	4770      	bx	lr
int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
{
    if( len < 0x80 )
    {
        if( *p - start < 1 )
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 80a1038:	f06f 006b 	mvn.w	r0, #107	; 0x6b
    }

#if SIZE_MAX > 0xFFFFFFFF
    return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
#endif
}
 80a103c:	4770      	bx	lr

080a103e <mbedtls_asn1_write_tag>:

int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
{
    if( *p - start < 1 )
 80a103e:	6803      	ldr	r3, [r0, #0]
 80a1040:	1a59      	subs	r1, r3, r1
 80a1042:	2900      	cmp	r1, #0
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    *--(*p) = tag;
 80a1044:	bfc1      	itttt	gt
 80a1046:	f103 31ff 	addgt.w	r1, r3, #4294967295
 80a104a:	6001      	strgt	r1, [r0, #0]

    return( 1 );
 80a104c:	2001      	movgt	r0, #1
int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
{
    if( *p - start < 1 )
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    *--(*p) = tag;
 80a104e:	f803 2c01 	strbgt.w	r2, [r3, #-1]
}

int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
{
    if( *p - start < 1 )
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 80a1052:	bfd8      	it	le
 80a1054:	f06f 006b 	mvnle.w	r0, #107	; 0x6b

    *--(*p) = tag;

    return( 1 );
}
 80a1058:	4770      	bx	lr

080a105a <mbedtls_asn1_write_mpi>:
    return( (int) len );
}

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_write_mpi( unsigned char **p, unsigned char *start, const mbedtls_mpi *X )
{
 80a105a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a105c:	4605      	mov	r5, r0
 80a105e:	460e      	mov	r6, r1
    int ret;
    size_t len = 0;

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );
 80a1060:	4610      	mov	r0, r2
    return( (int) len );
}

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_write_mpi( unsigned char **p, unsigned char *start, const mbedtls_mpi *X )
{
 80a1062:	4617      	mov	r7, r2
    int ret;
    size_t len = 0;

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );
 80a1064:	f00b f980 	bl	80ac368 <mbedtls_mpi_size>

    if( *p < start || (size_t)( *p - start ) < len )
 80a1068:	6829      	ldr	r1, [r5, #0]
    int ret;
    size_t len = 0;

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );
 80a106a:	4604      	mov	r4, r0

    if( *p < start || (size_t)( *p - start ) < len )
 80a106c:	42b1      	cmp	r1, r6
 80a106e:	d202      	bcs.n	80a1076 <mbedtls_asn1_write_mpi+0x1c>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 80a1070:	f06f 006b 	mvn.w	r0, #107	; 0x6b
 80a1074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );

    if( *p < start || (size_t)( *p - start ) < len )
 80a1076:	1b8b      	subs	r3, r1, r6
 80a1078:	4298      	cmp	r0, r3
 80a107a:	d8f9      	bhi.n	80a1070 <mbedtls_asn1_write_mpi+0x16>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    (*p) -= len;
 80a107c:	1a09      	subs	r1, r1, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
 80a107e:	4602      	mov	r2, r0
    len = mbedtls_mpi_size( X );

    if( *p < start || (size_t)( *p - start ) < len )
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    (*p) -= len;
 80a1080:	6029      	str	r1, [r5, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
 80a1082:	4638      	mov	r0, r7
 80a1084:	f00b f9ad 	bl	80ac3e2 <mbedtls_mpi_write_binary>
 80a1088:	b9f8      	cbnz	r0, 80a10ca <mbedtls_asn1_write_mpi+0x70>

    // DER format assumes 2s complement for numbers, so the leftmost bit
    // should be 0 for positive numbers and 1 for negative numbers.
    //
    if( X->s ==1 && **p & 0x80 )
 80a108a:	683b      	ldr	r3, [r7, #0]
 80a108c:	2b01      	cmp	r3, #1
 80a108e:	d10c      	bne.n	80a10aa <mbedtls_asn1_write_mpi+0x50>
 80a1090:	682b      	ldr	r3, [r5, #0]
 80a1092:	f993 2000 	ldrsb.w	r2, [r3]
 80a1096:	2a00      	cmp	r2, #0
 80a1098:	da07      	bge.n	80a10aa <mbedtls_asn1_write_mpi+0x50>
    {
        if( *p - start < 1 )
 80a109a:	1b9a      	subs	r2, r3, r6
 80a109c:	2a00      	cmp	r2, #0
 80a109e:	dde7      	ble.n	80a1070 <mbedtls_asn1_write_mpi+0x16>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = 0x00;
 80a10a0:	1e5a      	subs	r2, r3, #1
 80a10a2:	602a      	str	r2, [r5, #0]
        len += 1;
 80a10a4:	3401      	adds	r4, #1
    if( X->s ==1 && **p & 0x80 )
    {
        if( *p - start < 1 )
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = 0x00;
 80a10a6:	f803 0c01 	strb.w	r0, [r3, #-1]
        len += 1;
    }

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 80a10aa:	4622      	mov	r2, r4
 80a10ac:	4631      	mov	r1, r6
 80a10ae:	4628      	mov	r0, r5
 80a10b0:	f7ff ff51 	bl	80a0f56 <mbedtls_asn1_write_len>
 80a10b4:	2800      	cmp	r0, #0
 80a10b6:	db08      	blt.n	80a10ca <mbedtls_asn1_write_mpi+0x70>
 80a10b8:	4404      	add	r4, r0
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 80a10ba:	2202      	movs	r2, #2
 80a10bc:	4631      	mov	r1, r6
 80a10be:	4628      	mov	r0, r5
 80a10c0:	f7ff ffbd 	bl	80a103e <mbedtls_asn1_write_tag>
 80a10c4:	2800      	cmp	r0, #0

    ret = (int) len;
 80a10c6:	bfa8      	it	ge
 80a10c8:	1900      	addge	r0, r0, r4

cleanup:
    return( ret );
}
 80a10ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a10cc <mbedtls_ecdh_gen_public>:
 * Generate public key
 */
int mbedtls_ecdh_gen_public( mbedtls_ecp_group *grp, mbedtls_mpi *d, mbedtls_ecp_point *Q,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 80a10cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a10d0:	461d      	mov	r5, r3
 80a10d2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80a10d4:	4617      	mov	r7, r2

    /* If multiplication is in progress, we already generated a privkey */
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx == NULL || rs_ctx->rsm == NULL )
#endif
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, d, f_rng, p_rng ) );
 80a10d6:	4633      	mov	r3, r6
 80a10d8:	462a      	mov	r2, r5
 * Generate public key
 */
int mbedtls_ecdh_gen_public( mbedtls_ecp_group *grp, mbedtls_mpi *d, mbedtls_ecp_point *Q,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 80a10da:	4604      	mov	r4, r0
 80a10dc:	4688      	mov	r8, r1

    /* If multiplication is in progress, we already generated a privkey */
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx == NULL || rs_ctx->rsm == NULL )
#endif
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, d, f_rng, p_rng ) );
 80a10de:	f003 ff1f 	bl	80a4f20 <mbedtls_ecp_gen_privkey>
 80a10e2:	b948      	cbnz	r0, 80a10f8 <mbedtls_ecdh_gen_public+0x2c>

    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, Q, d, &grp->G,
 80a10e4:	9002      	str	r0, [sp, #8]
 80a10e6:	e88d 0060 	stmia.w	sp, {r5, r6}
 80a10ea:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80a10ee:	4642      	mov	r2, r8
 80a10f0:	4639      	mov	r1, r7
 80a10f2:	4620      	mov	r0, r4
 80a10f4:	f003 fd68 	bl	80a4bc8 <mbedtls_ecp_mul_restartable>
    ECDH_VALIDATE_RET( grp != NULL );
    ECDH_VALIDATE_RET( d != NULL );
    ECDH_VALIDATE_RET( Q != NULL );
    ECDH_VALIDATE_RET( f_rng != NULL );
    return( ecdh_gen_public_restartable( grp, d, Q, f_rng, p_rng, NULL ) );
}
 80a10f8:	b004      	add	sp, #16
 80a10fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a1100 <mbedtls_ecdh_compute_shared>:
 */
int mbedtls_ecdh_compute_shared( mbedtls_ecp_group *grp, mbedtls_mpi *z,
                         const mbedtls_ecp_point *Q, const mbedtls_mpi *d,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng )
{
 80a1100:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1102:	4604      	mov	r4, r0
 80a1104:	4617      	mov	r7, r2
 80a1106:	461e      	mov	r6, r3
 80a1108:	b08f      	sub	sp, #60	; 0x3c
                         mbedtls_ecp_restart_ctx *rs_ctx )
{
    int ret;
    mbedtls_ecp_point P;

    mbedtls_ecp_point_init( &P );
 80a110a:	a805      	add	r0, sp, #20
 */
int mbedtls_ecdh_compute_shared( mbedtls_ecp_group *grp, mbedtls_mpi *z,
                         const mbedtls_ecp_point *Q, const mbedtls_mpi *d,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng )
{
 80a110c:	460d      	mov	r5, r1
                         mbedtls_ecp_restart_ctx *rs_ctx )
{
    int ret;
    mbedtls_ecp_point P;

    mbedtls_ecp_point_init( &P );
 80a110e:	f002 ff97 	bl	80a4040 <mbedtls_ecp_point_init>

    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &P, d, Q,
 80a1112:	2300      	movs	r3, #0
 80a1114:	9302      	str	r3, [sp, #8]
 80a1116:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a1118:	4620      	mov	r0, r4
 80a111a:	9301      	str	r3, [sp, #4]
 80a111c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a111e:	4632      	mov	r2, r6
 80a1120:	9300      	str	r3, [sp, #0]
 80a1122:	a905      	add	r1, sp, #20
 80a1124:	463b      	mov	r3, r7
 80a1126:	f003 fd4f 	bl	80a4bc8 <mbedtls_ecp_mul_restartable>
 80a112a:	4604      	mov	r4, r0
 80a112c:	b950      	cbnz	r0, 80a1144 <mbedtls_ecdh_compute_shared+0x44>
                                                  f_rng, p_rng, rs_ctx ) );

    if( mbedtls_ecp_is_zero( &P ) )
 80a112e:	a805      	add	r0, sp, #20
 80a1130:	f003 fb8e 	bl	80a4850 <mbedtls_ecp_is_zero>
 80a1134:	b928      	cbnz	r0, 80a1142 <mbedtls_ecdh_compute_shared+0x42>
    {
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( z, &P.X ) );
 80a1136:	a905      	add	r1, sp, #20
 80a1138:	4628      	mov	r0, r5
 80a113a:	f00b f84e 	bl	80ac1da <mbedtls_mpi_copy>
 80a113e:	4604      	mov	r4, r0
 80a1140:	e000      	b.n	80a1144 <mbedtls_ecdh_compute_shared+0x44>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &P, d, Q,
                                                  f_rng, p_rng, rs_ctx ) );

    if( mbedtls_ecp_is_zero( &P ) )
    {
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 80a1142:	4c03      	ldr	r4, [pc, #12]	; (80a1150 <mbedtls_ecdh_compute_shared+0x50>)
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( z, &P.X ) );

cleanup:
    mbedtls_ecp_point_free( &P );
 80a1144:	a805      	add	r0, sp, #20
 80a1146:	f002 ffb8 	bl	80a40ba <mbedtls_ecp_point_free>
    ECDH_VALIDATE_RET( Q != NULL );
    ECDH_VALIDATE_RET( d != NULL );
    ECDH_VALIDATE_RET( z != NULL );
    return( ecdh_compute_shared_restartable( grp, z, Q, d,
                                             f_rng, p_rng, NULL ) );
}
 80a114a:	4620      	mov	r0, r4
 80a114c:	b00f      	add	sp, #60	; 0x3c
 80a114e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1150:	ffffb080 	.word	0xffffb080

080a1154 <mbedtls_ecdh_init>:

/*
 * Initialize context
 */
void mbedtls_ecdh_init( mbedtls_ecdh_context *ctx )
{
 80a1154:	b510      	push	{r4, lr}
 80a1156:	4604      	mov	r4, r0
}
#endif /* !MBEDTLS_ECDH_COMPUTE_SHARED_ALT */

static void ecdh_init_internal( mbedtls_ecdh_context_mbed *ctx )
{
    mbedtls_ecp_group_init( &ctx->grp );
 80a1158:	f002 ff80 	bl	80a405c <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &ctx->d  );
 80a115c:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 80a1160:	f00a ffbb 	bl	80ac0da <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &ctx->Q   );
 80a1164:	f104 0088 	add.w	r0, r4, #136	; 0x88
 80a1168:	f002 ff6a 	bl	80a4040 <mbedtls_ecp_point_init>
    mbedtls_ecp_point_init( &ctx->Qp  );
 80a116c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 80a1170:	f002 ff66 	bl	80a4040 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &ctx->z  );
 80a1174:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80a1178:	f00a ffaf 	bl	80ac0da <mbedtls_mpi_init>
{
    ECDH_VALIDATE( ctx != NULL );

#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    ecdh_init_internal( ctx );
    mbedtls_ecp_point_init( &ctx->Vi  );
 80a117c:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 80a1180:	f002 ff5e 	bl	80a4040 <mbedtls_ecp_point_init>
    mbedtls_ecp_point_init( &ctx->Vf  );
 80a1184:	f504 7082 	add.w	r0, r4, #260	; 0x104
 80a1188:	f002 ff5a 	bl	80a4040 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &ctx->_d );
 80a118c:	f504 7094 	add.w	r0, r4, #296	; 0x128
 80a1190:	f00a ffa3 	bl	80ac0da <mbedtls_mpi_init>
#else
    memset( ctx, 0, sizeof( mbedtls_ecdh_context ) );

    ctx->var = MBEDTLS_ECDH_VARIANT_NONE;
#endif
    ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
 80a1194:	2300      	movs	r3, #0
 80a1196:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 80a119a:	bd10      	pop	{r4, pc}

080a119c <mbedtls_ecdh_free>:

/*
 * Free context
 */
void mbedtls_ecdh_free( mbedtls_ecdh_context *ctx )
{
 80a119c:	b510      	push	{r4, lr}
    if( ctx == NULL )
 80a119e:	4604      	mov	r4, r0
 80a11a0:	b1f8      	cbz	r0, 80a11e2 <mbedtls_ecdh_free+0x46>
        return;

#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    mbedtls_ecp_point_free( &ctx->Vi );
 80a11a2:	30e0      	adds	r0, #224	; 0xe0
 80a11a4:	f002 ff89 	bl	80a40ba <mbedtls_ecp_point_free>
    mbedtls_ecp_point_free( &ctx->Vf );
 80a11a8:	f504 7082 	add.w	r0, r4, #260	; 0x104
 80a11ac:	f002 ff85 	bl	80a40ba <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &ctx->_d );
 80a11b0:	f504 7094 	add.w	r0, r4, #296	; 0x128
 80a11b4:	f00a ff97 	bl	80ac0e6 <mbedtls_mpi_free>
#endif
}

static void ecdh_free_internal( mbedtls_ecdh_context_mbed *ctx )
{
    mbedtls_ecp_group_free( &ctx->grp );
 80a11b8:	4620      	mov	r0, r4
 80a11ba:	f002 ff8e 	bl	80a40da <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &ctx->d  );
 80a11be:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 80a11c2:	f00a ff90 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &ctx->Q   );
 80a11c6:	f104 0088 	add.w	r0, r4, #136	; 0x88
 80a11ca:	f002 ff76 	bl	80a40ba <mbedtls_ecp_point_free>
    mbedtls_ecp_point_free( &ctx->Qp  );
 80a11ce:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 80a11d2:	f002 ff72 	bl	80a40ba <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &ctx->z  );
 80a11d6:	f104 00d0 	add.w	r0, r4, #208	; 0xd0

    ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
    ctx->var = MBEDTLS_ECDH_VARIANT_NONE;
    ctx->grp_id = MBEDTLS_ECP_DP_NONE;
#endif
}
 80a11da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    mbedtls_ecp_group_free( &ctx->grp );
    mbedtls_mpi_free( &ctx->d  );
    mbedtls_ecp_point_free( &ctx->Q   );
    mbedtls_ecp_point_free( &ctx->Qp  );
    mbedtls_mpi_free( &ctx->z  );
 80a11de:	f00a bf82 	b.w	80ac0e6 <mbedtls_mpi_free>
 80a11e2:	bd10      	pop	{r4, pc}

080a11e4 <mbedtls_ecdh_read_params>:
 *      } ServerECDHParams;
 */
int mbedtls_ecdh_read_params( mbedtls_ecdh_context *ctx,
                              const unsigned char **buf,
                              const unsigned char *end )
{
 80a11e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a11e6:	4616      	mov	r6, r2
    ECDH_VALIDATE_RET( ctx != NULL );
    ECDH_VALIDATE_RET( buf != NULL );
    ECDH_VALIDATE_RET( *buf != NULL );
    ECDH_VALIDATE_RET( end != NULL );

    if( ( ret = mbedtls_ecp_tls_read_group_id( &grp_id, buf, end - *buf ) )
 80a11e8:	680a      	ldr	r2, [r1, #0]
 *      } ServerECDHParams;
 */
int mbedtls_ecdh_read_params( mbedtls_ecdh_context *ctx,
                              const unsigned char **buf,
                              const unsigned char *end )
{
 80a11ea:	4604      	mov	r4, r0
    ECDH_VALIDATE_RET( ctx != NULL );
    ECDH_VALIDATE_RET( buf != NULL );
    ECDH_VALIDATE_RET( *buf != NULL );
    ECDH_VALIDATE_RET( end != NULL );

    if( ( ret = mbedtls_ecp_tls_read_group_id( &grp_id, buf, end - *buf ) )
 80a11ec:	1ab2      	subs	r2, r6, r2
 80a11ee:	f10d 0007 	add.w	r0, sp, #7
 *      } ServerECDHParams;
 */
int mbedtls_ecdh_read_params( mbedtls_ecdh_context *ctx,
                              const unsigned char **buf,
                              const unsigned char *end )
{
 80a11f2:	460d      	mov	r5, r1
    ECDH_VALIDATE_RET( ctx != NULL );
    ECDH_VALIDATE_RET( buf != NULL );
    ECDH_VALIDATE_RET( *buf != NULL );
    ECDH_VALIDATE_RET( end != NULL );

    if( ( ret = mbedtls_ecp_tls_read_group_id( &grp_id, buf, end - *buf ) )
 80a11f4:	f003 fbec 	bl	80a49d0 <mbedtls_ecp_tls_read_group_id>
 80a11f8:	b978      	cbnz	r0, 80a121a <mbedtls_ecdh_read_params+0x36>
static int ecdh_setup_internal( mbedtls_ecdh_context_mbed *ctx,
                                mbedtls_ecp_group_id grp_id )
{
    int ret;

    ret = mbedtls_ecp_group_load( &ctx->grp, grp_id );
 80a11fa:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a11fe:	4620      	mov	r0, r4
 80a1200:	f007 fb5e 	bl	80a88c0 <mbedtls_ecp_group_load>
    if( ret != 0 )
 80a1204:	b108      	cbz	r0, 80a120a <mbedtls_ecdh_read_params+0x26>
    {
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 80a1206:	4806      	ldr	r0, [pc, #24]	; (80a1220 <mbedtls_ecdh_read_params+0x3c>)
 80a1208:	e007      	b.n	80a121a <mbedtls_ecdh_read_params+0x36>
static int ecdh_read_params_internal( mbedtls_ecdh_context_mbed *ctx,
                                      const unsigned char **buf,
                                      const unsigned char *end )
{
    return( mbedtls_ecp_tls_read_point( &ctx->grp, &ctx->Qp, buf,
                                        end - *buf ) );
 80a120a:	682b      	ldr	r3, [r5, #0]
 80a120c:	462a      	mov	r2, r5
 80a120e:	1af3      	subs	r3, r6, r3
 80a1210:	f104 01ac 	add.w	r1, r4, #172	; 0xac
 80a1214:	4620      	mov	r0, r4
 80a1216:	f003 fbab 	bl	80a4970 <mbedtls_ecp_tls_read_point>
                                               buf, end ) );
        default:
            return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
    }
#endif
}
 80a121a:	b002      	add	sp, #8
 80a121c:	bd70      	pop	{r4, r5, r6, pc}
 80a121e:	bf00      	nop
 80a1220:	ffffb180 	.word	0xffffb180

080a1224 <mbedtls_ecdh_make_public>:
 */
int mbedtls_ecdh_make_public( mbedtls_ecdh_context *ctx, size_t *olen,
                              unsigned char *buf, size_t blen,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng )
{
 80a1224:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a1228:	460f      	mov	r7, r1
    int ret;
#if defined(MBEDTLS_ECP_RESTARTABLE)
    mbedtls_ecp_restart_ctx *rs_ctx = NULL;
#endif

    if( ctx->grp.pbits == 0 )
 80a122a:	6d81      	ldr	r1, [r0, #88]	; 0x58
 */
int mbedtls_ecdh_make_public( mbedtls_ecdh_context *ctx, size_t *olen,
                              unsigned char *buf, size_t blen,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng )
{
 80a122c:	4690      	mov	r8, r2
 80a122e:	4699      	mov	r9, r3
 80a1230:	4604      	mov	r4, r0
 80a1232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a1234:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
#if defined(MBEDTLS_ECP_RESTARTABLE)
    restart_enabled = ctx->restart_enabled;
#endif

#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    return( ecdh_make_public_internal( ctx, olen, ctx->point_format, buf, blen,
 80a1236:	f8d0 60dc 	ldr.w	r6, [r0, #220]	; 0xdc
    int ret;
#if defined(MBEDTLS_ECP_RESTARTABLE)
    mbedtls_ecp_restart_ctx *rs_ctx = NULL;
#endif

    if( ctx->grp.pbits == 0 )
 80a123a:	b1a9      	cbz	r1, 80a1268 <mbedtls_ecdh_make_public+0x44>
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( ( ret = ecdh_gen_public_restartable( &ctx->grp, &ctx->d, &ctx->Q,
                                             f_rng, p_rng, rs_ctx ) ) != 0 )
        return( ret );
#else
    if( ( ret = mbedtls_ecdh_gen_public( &ctx->grp, &ctx->d, &ctx->Q,
 80a123c:	f100 0588 	add.w	r5, r0, #136	; 0x88
 80a1240:	9200      	str	r2, [sp, #0]
 80a1242:	f100 017c 	add.w	r1, r0, #124	; 0x7c
 80a1246:	462a      	mov	r2, r5
 80a1248:	f7ff ff40 	bl	80a10cc <mbedtls_ecdh_gen_public>
 80a124c:	b968      	cbnz	r0, 80a126a <mbedtls_ecdh_make_public+0x46>
                                         f_rng, p_rng ) ) != 0 )
        return( ret );
#endif /* MBEDTLS_ECP_RESTARTABLE */

    return mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, point_format, olen,
                                        buf, blen );
 80a124e:	463b      	mov	r3, r7
 80a1250:	4632      	mov	r2, r6
 80a1252:	4629      	mov	r1, r5
 80a1254:	4620      	mov	r0, r4
 80a1256:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 80a125a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
                                               restart_enabled ) );
        default:
            return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
    }
#endif
}
 80a125e:	b003      	add	sp, #12
 80a1260:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                                         f_rng, p_rng ) ) != 0 )
        return( ret );
#endif /* MBEDTLS_ECP_RESTARTABLE */

    return mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, point_format, olen,
                                        buf, blen );
 80a1264:	f003 bb9c 	b.w	80a49a0 <mbedtls_ecp_tls_write_point>
#if defined(MBEDTLS_ECP_RESTARTABLE)
    mbedtls_ecp_restart_ctx *rs_ctx = NULL;
#endif

    if( ctx->grp.pbits == 0 )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80a1268:	4801      	ldr	r0, [pc, #4]	; (80a1270 <mbedtls_ecdh_make_public+0x4c>)
                                               restart_enabled ) );
        default:
            return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
    }
#endif
}
 80a126a:	b003      	add	sp, #12
 80a126c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1270:	ffffb080 	.word	0xffffb080

080a1274 <mbedtls_ecdh_calc_secret>:
 */
int mbedtls_ecdh_calc_secret( mbedtls_ecdh_context *ctx, size_t *olen,
                              unsigned char *buf, size_t blen,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng )
{
 80a1274:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a1278:	4616      	mov	r6, r2
 80a127a:	4698      	mov	r8, r3
 80a127c:	460f      	mov	r7, r1
 80a127e:	9b08      	ldr	r3, [sp, #32]
 80a1280:	9a09      	ldr	r2, [sp, #36]	; 0x24
    int ret;
#if defined(MBEDTLS_ECP_RESTARTABLE)
    mbedtls_ecp_restart_ctx *rs_ctx = NULL;
#endif

    if( ctx == NULL || ctx->grp.pbits == 0 )
 80a1282:	4604      	mov	r4, r0
 80a1284:	b908      	cbnz	r0, 80a128a <mbedtls_ecdh_calc_secret+0x16>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80a1286:	4814      	ldr	r0, [pc, #80]	; (80a12d8 <mbedtls_ecdh_calc_secret+0x64>)
 80a1288:	e022      	b.n	80a12d0 <mbedtls_ecdh_calc_secret+0x5c>
    int ret;
#if defined(MBEDTLS_ECP_RESTARTABLE)
    mbedtls_ecp_restart_ctx *rs_ctx = NULL;
#endif

    if( ctx == NULL || ctx->grp.pbits == 0 )
 80a128a:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80a128c:	2900      	cmp	r1, #0
 80a128e:	d0fa      	beq.n	80a1286 <mbedtls_ecdh_calc_secret+0x12>
                                                 rs_ctx ) ) != 0 )
    {
        return( ret );
    }
#else
    if( ( ret = mbedtls_ecdh_compute_shared( &ctx->grp, &ctx->z, &ctx->Qp,
 80a1290:	f100 05d0 	add.w	r5, r0, #208	; 0xd0
 80a1294:	9201      	str	r2, [sp, #4]
 80a1296:	9300      	str	r3, [sp, #0]
 80a1298:	f100 02ac 	add.w	r2, r0, #172	; 0xac
 80a129c:	f100 037c 	add.w	r3, r0, #124	; 0x7c
 80a12a0:	4629      	mov	r1, r5
 80a12a2:	f7ff ff2d 	bl	80a1100 <mbedtls_ecdh_compute_shared>
 80a12a6:	b998      	cbnz	r0, 80a12d0 <mbedtls_ecdh_calc_secret+0x5c>
    {
        return( ret );
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    if( mbedtls_mpi_size( &ctx->z ) > blen )
 80a12a8:	4628      	mov	r0, r5
 80a12aa:	f00b f85d 	bl	80ac368 <mbedtls_mpi_size>
 80a12ae:	4580      	cmp	r8, r0
 80a12b0:	d3e9      	bcc.n	80a1286 <mbedtls_ecdh_calc_secret+0x12>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );
 80a12b2:	4631      	mov	r1, r6
 80a12b4:	4628      	mov	r0, r5
#endif /* MBEDTLS_ECP_RESTARTABLE */

    if( mbedtls_mpi_size( &ctx->z ) > blen )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
 80a12b6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80a12b8:	f012 0307 	ands.w	r3, r2, #7
 80a12bc:	bf18      	it	ne
 80a12be:	2301      	movne	r3, #1
 80a12c0:	eb03 02d2 	add.w	r2, r3, r2, lsr #3
 80a12c4:	603a      	str	r2, [r7, #0]
                                               restart_enabled ) );
        default:
            return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }
#endif
}
 80a12c6:	b002      	add	sp, #8
 80a12c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

    if( mbedtls_mpi_size( &ctx->z ) > blen )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );
 80a12cc:	f00b b889 	b.w	80ac3e2 <mbedtls_mpi_write_binary>
                                               restart_enabled ) );
        default:
            return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }
#endif
}
 80a12d0:	b002      	add	sp, #8
 80a12d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a12d6:	bf00      	nop
 80a12d8:	ffffb080 	.word	0xffffb080

080a12dc <mbedtls_cipher_info_from_type>:

    return( mbedtls_cipher_supported );
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_type( const mbedtls_cipher_type_t cipher_type )
{
 80a12dc:	4b05      	ldr	r3, [pc, #20]	; (80a12f4 <mbedtls_cipher_info_from_type+0x18>)
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 80a12de:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80a12e2:	b122      	cbz	r2, 80a12ee <mbedtls_cipher_info_from_type+0x12>
 80a12e4:	3308      	adds	r3, #8
        if( def->type == cipher_type )
 80a12e6:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 80a12ea:	4281      	cmp	r1, r0
 80a12ec:	d1f7      	bne.n	80a12de <mbedtls_cipher_info_from_type+0x2>
            return( def->info );

    return( NULL );
}
 80a12ee:	4610      	mov	r0, r2
 80a12f0:	4770      	bx	lr
 80a12f2:	bf00      	nop
 80a12f4:	080b4aa4 	.word	0x080b4aa4

080a12f8 <mbedtls_cipher_info_from_values>:
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
 80a12f8:	b530      	push	{r4, r5, lr}
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 80a12fa:	4c08      	ldr	r4, [pc, #32]	; (80a131c <mbedtls_cipher_info_from_values+0x24>)
 80a12fc:	6863      	ldr	r3, [r4, #4]
 80a12fe:	b15b      	cbz	r3, 80a1318 <mbedtls_cipher_info_from_values+0x20>
        if( def->info->base->cipher == cipher_id &&
 80a1300:	699d      	ldr	r5, [r3, #24]
 80a1302:	782d      	ldrb	r5, [r5, #0]
 80a1304:	4285      	cmp	r5, r0
 80a1306:	d105      	bne.n	80a1314 <mbedtls_cipher_info_from_values+0x1c>
 80a1308:	685d      	ldr	r5, [r3, #4]
 80a130a:	428d      	cmp	r5, r1
 80a130c:	d102      	bne.n	80a1314 <mbedtls_cipher_info_from_values+0x1c>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 80a130e:	785d      	ldrb	r5, [r3, #1]
 80a1310:	4295      	cmp	r5, r2
 80a1312:	d001      	beq.n	80a1318 <mbedtls_cipher_info_from_values+0x20>
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 80a1314:	3408      	adds	r4, #8
 80a1316:	e7f1      	b.n	80a12fc <mbedtls_cipher_info_from_values+0x4>
            def->info->key_bitlen == (unsigned) key_bitlen &&
            def->info->mode == mode )
            return( def->info );

    return( NULL );
}
 80a1318:	4618      	mov	r0, r3
 80a131a:	bd30      	pop	{r4, r5, pc}
 80a131c:	080b4a9c 	.word	0x080b4a9c

080a1320 <mbedtls_cipher_init>:

void mbedtls_cipher_init( mbedtls_cipher_context_t *ctx )
{
    CIPHER_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 80a1320:	2238      	movs	r2, #56	; 0x38
 80a1322:	2100      	movs	r1, #0
 80a1324:	f011 ba8d 	b.w	80b2842 <memset>

080a1328 <mbedtls_cipher_free>:
}

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
 80a1328:	b510      	push	{r4, lr}
    if( ctx == NULL )
 80a132a:	4604      	mov	r4, r0
 80a132c:	b158      	cbz	r0, 80a1346 <mbedtls_cipher_free+0x1e>
                                 sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
    }
#endif

    if( ctx->cipher_ctx )
 80a132e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80a1330:	b118      	cbz	r0, 80a133a <mbedtls_cipher_free+0x12>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 80a1332:	6823      	ldr	r3, [r4, #0]
 80a1334:	699b      	ldr	r3, [r3, #24]
 80a1336:	695b      	ldr	r3, [r3, #20]
 80a1338:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
 80a133a:	4620      	mov	r0, r4
}
 80a133c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif

    if( ctx->cipher_ctx )
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );

    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
 80a1340:	2138      	movs	r1, #56	; 0x38
 80a1342:	f005 b865 	b.w	80a6410 <mbedtls_platform_zeroize>
 80a1346:	bd10      	pop	{r4, pc}

080a1348 <mbedtls_cipher_setup>:
}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
 80a1348:	b538      	push	{r3, r4, r5, lr}
 80a134a:	4605      	mov	r5, r0
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( cipher_info == NULL )
 80a134c:	460c      	mov	r4, r1
 80a134e:	b159      	cbz	r1, 80a1368 <mbedtls_cipher_setup+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 80a1350:	2238      	movs	r2, #56	; 0x38
 80a1352:	2100      	movs	r1, #0
 80a1354:	f011 fa75 	bl	80b2842 <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 80a1358:	69a3      	ldr	r3, [r4, #24]
 80a135a:	691b      	ldr	r3, [r3, #16]
 80a135c:	4798      	blx	r3
 80a135e:	6368      	str	r0, [r5, #52]	; 0x34
 80a1360:	b120      	cbz	r0, 80a136c <mbedtls_cipher_setup+0x24>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );

    ctx->cipher_info = cipher_info;
 80a1362:	602c      	str	r4, [r5, #0]
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
 80a1364:	2000      	movs	r0, #0
 80a1366:	bd38      	pop	{r3, r4, r5, pc}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80a1368:	4801      	ldr	r0, [pc, #4]	; (80a1370 <mbedtls_cipher_setup+0x28>)
 80a136a:	bd38      	pop	{r3, r4, r5, pc}

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 80a136c:	4801      	ldr	r0, [pc, #4]	; (80a1374 <mbedtls_cipher_setup+0x2c>)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
}
 80a136e:	bd38      	pop	{r3, r4, r5, pc}
 80a1370:	ffff9f00 	.word	0xffff9f00
 80a1374:	ffff9e80 	.word	0xffff9e80

080a1378 <mbedtls_cipher_setkey>:

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx,
                           const unsigned char *key,
                           int key_bitlen,
                           const mbedtls_operation_t operation )
{
 80a1378:	b430      	push	{r4, r5}
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( key != NULL );
    CIPHER_VALIDATE_RET( operation == MBEDTLS_ENCRYPT ||
                         operation == MBEDTLS_DECRYPT );
    if( ctx->cipher_info == NULL )
 80a137a:	6804      	ldr	r4, [r0, #0]
 80a137c:	b1b4      	cbz	r4, 80a13ac <mbedtls_cipher_setkey+0x34>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 80a137e:	6925      	ldr	r5, [r4, #16]
 80a1380:	07ad      	lsls	r5, r5, #30
 80a1382:	d402      	bmi.n	80a138a <mbedtls_cipher_setkey+0x12>
 80a1384:	6865      	ldr	r5, [r4, #4]
 80a1386:	4295      	cmp	r5, r2
 80a1388:	d110      	bne.n	80a13ac <mbedtls_cipher_setkey+0x34>
    ctx->operation = operation;

    /*
     * For OFB, CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 80a138a:	2b01      	cmp	r3, #1
        (int) ctx->cipher_info->key_bitlen != key_bitlen )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    ctx->key_bitlen = key_bitlen;
 80a138c:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
 80a138e:	7203      	strb	r3, [r0, #8]

    /*
     * For OFB, CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 80a1390:	d003      	beq.n	80a139a <mbedtls_cipher_setkey+0x22>
 80a1392:	7865      	ldrb	r5, [r4, #1]
 80a1394:	3d03      	subs	r5, #3
 80a1396:	2d02      	cmp	r5, #2
 80a1398:	d802      	bhi.n	80a13a0 <mbedtls_cipher_setkey+0x28>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
    {
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 80a139a:	69a3      	ldr	r3, [r4, #24]
                                                         ctx->key_bitlen ) );
 80a139c:	689b      	ldr	r3, [r3, #8]
 80a139e:	e002      	b.n	80a13a6 <mbedtls_cipher_setkey+0x2e>
    }

    if( MBEDTLS_DECRYPT == operation )
 80a13a0:	b923      	cbnz	r3, 80a13ac <mbedtls_cipher_setkey+0x34>
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 80a13a2:	69a3      	ldr	r3, [r4, #24]
                                                         ctx->key_bitlen ) );
 80a13a4:	68db      	ldr	r3, [r3, #12]
 80a13a6:	6b40      	ldr	r0, [r0, #52]	; 0x34

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
 80a13a8:	bc30      	pop	{r4, r5}
                                                         ctx->key_bitlen ) );
    }

    if( MBEDTLS_DECRYPT == operation )
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
                                                         ctx->key_bitlen ) );
 80a13aa:	4718      	bx	r3

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
 80a13ac:	4801      	ldr	r0, [pc, #4]	; (80a13b4 <mbedtls_cipher_setkey+0x3c>)
 80a13ae:	bc30      	pop	{r4, r5}
 80a13b0:	4770      	bx	lr
 80a13b2:	bf00      	nop
 80a13b4:	ffff9f00 	.word	0xffff9f00

080a13b8 <mbedtls_cipher_set_iv>:

int mbedtls_cipher_set_iv( mbedtls_cipher_context_t *ctx,
                           const unsigned char *iv,
                           size_t iv_len )
{
 80a13b8:	b538      	push	{r3, r4, r5, lr}
    size_t actual_iv_size;

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( iv_len == 0 || iv != NULL );
    if( ctx->cipher_info == NULL )
 80a13ba:	6803      	ldr	r3, [r0, #0]
}

int mbedtls_cipher_set_iv( mbedtls_cipher_context_t *ctx,
                           const unsigned char *iv,
                           size_t iv_len )
{
 80a13bc:	4605      	mov	r5, r0
    size_t actual_iv_size;

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( iv_len == 0 || iv != NULL );
    if( ctx->cipher_info == NULL )
 80a13be:	b1a3      	cbz	r3, 80a13ea <mbedtls_cipher_set_iv+0x32>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
 80a13c0:	2a10      	cmp	r2, #16
 80a13c2:	d810      	bhi.n	80a13e6 <mbedtls_cipher_set_iv+0x2e>
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
 80a13c4:	6918      	ldr	r0, [r3, #16]
 80a13c6:	07c0      	lsls	r0, r0, #31
 80a13c8:	d403      	bmi.n	80a13d2 <mbedtls_cipher_set_iv+0x1a>
        actual_iv_size = iv_len;
    else
    {
        actual_iv_size = ctx->cipher_info->iv_size;
 80a13ca:	68dc      	ldr	r4, [r3, #12]

        /* avoid reading past the end of input buffer */
        if( actual_iv_size > iv_len )
 80a13cc:	42a2      	cmp	r2, r4
 80a13ce:	d201      	bcs.n	80a13d4 <mbedtls_cipher_set_iv+0x1c>
 80a13d0:	e00b      	b.n	80a13ea <mbedtls_cipher_set_iv+0x32>
 80a13d2:	4614      	mov	r4, r2
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
        }
    }
#endif

    if ( actual_iv_size != 0 )
 80a13d4:	b12c      	cbz	r4, 80a13e2 <mbedtls_cipher_set_iv+0x2a>
    {
        memcpy( ctx->iv, iv, actual_iv_size );
 80a13d6:	4622      	mov	r2, r4
 80a13d8:	f105 0020 	add.w	r0, r5, #32
 80a13dc:	f011 fa0b 	bl	80b27f6 <memcpy>
        ctx->iv_size = actual_iv_size;
 80a13e0:	632c      	str	r4, [r5, #48]	; 0x30
    }

    return( 0 );
 80a13e2:	2000      	movs	r0, #0
 80a13e4:	bd38      	pop	{r3, r4, r5, pc}
    if( ctx->cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80a13e6:	4802      	ldr	r0, [pc, #8]	; (80a13f0 <mbedtls_cipher_set_iv+0x38>)
 80a13e8:	bd38      	pop	{r3, r4, r5, pc}
    size_t actual_iv_size;

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( iv_len == 0 || iv != NULL );
    if( ctx->cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80a13ea:	4802      	ldr	r0, [pc, #8]	; (80a13f4 <mbedtls_cipher_set_iv+0x3c>)
 80a13ec:	bd38      	pop	{r3, r4, r5, pc}
 80a13ee:	bf00      	nop
 80a13f0:	ffff9f80 	.word	0xffff9f80
 80a13f4:	ffff9f00 	.word	0xffff9f00

080a13f8 <mbedtls_cipher_reset>:
}

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( ctx->cipher_info == NULL )
 80a13f8:	6803      	ldr	r3, [r0, #0]
 80a13fa:	b11b      	cbz	r3, 80a1404 <mbedtls_cipher_reset+0xc>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    ctx->unprocessed_len = 0;
 80a13fc:	2300      	movs	r3, #0
 80a13fe:	61c3      	str	r3, [r0, #28]

    return( 0 );
 80a1400:	4618      	mov	r0, r3
 80a1402:	4770      	bx	lr

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( ctx->cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80a1404:	4800      	ldr	r0, [pc, #0]	; (80a1408 <mbedtls_cipher_reset+0x10>)

    ctx->unprocessed_len = 0;

    return( 0 );
}
 80a1406:	4770      	bx	lr
 80a1408:	ffff9f00 	.word	0xffff9f00

080a140c <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
 80a140c:	b470      	push	{r4, r5, r6}
 80a140e:	4614      	mov	r4, r2

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
 80a1410:	6802      	ldr	r2, [r0, #0]
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
 80a1412:	9e03      	ldr	r6, [sp, #12]

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
 80a1414:	b90a      	cbnz	r2, 80a141a <mbedtls_cipher_update+0xe>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80a1416:	481b      	ldr	r0, [pc, #108]	; (80a1484 <mbedtls_cipher_update+0x78>)
 80a1418:	e031      	b.n	80a147e <mbedtls_cipher_update+0x72>

    *olen = 0;
 80a141a:	2200      	movs	r2, #0
 80a141c:	6032      	str	r2, [r6, #0]
 80a141e:	6805      	ldr	r5, [r0, #0]
 */
static inline unsigned int mbedtls_cipher_get_block_size(
    const mbedtls_cipher_context_t *ctx )
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
 80a1420:	b10d      	cbz	r5, 80a1426 <mbedtls_cipher_update+0x1a>
        return 0;

    return ctx->cipher_info->block_size;
 80a1422:	696a      	ldr	r2, [r5, #20]
 80a1424:	e000      	b.n	80a1428 <mbedtls_cipher_update+0x1c>
static inline unsigned int mbedtls_cipher_get_block_size(
    const mbedtls_cipher_context_t *ctx )
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
        return 0;
 80a1426:	462a      	mov	r2, r5
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 80a1428:	786d      	ldrb	r5, [r5, #1]
 80a142a:	2d01      	cmp	r5, #1
 80a142c:	d10c      	bne.n	80a1448 <mbedtls_cipher_update+0x3c>
    {
        if( ilen != block_size )
 80a142e:	4294      	cmp	r4, r2
 80a1430:	d120      	bne.n	80a1474 <mbedtls_cipher_update+0x68>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;
 80a1432:	6034      	str	r4, [r6, #0]

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 80a1434:	6802      	ldr	r2, [r0, #0]
 80a1436:	6992      	ldr	r2, [r2, #24]
 80a1438:	6854      	ldr	r4, [r2, #4]
 80a143a:	460a      	mov	r2, r1
 80a143c:	46a4      	mov	ip, r4
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80a143e:	bc70      	pop	{r4, r5, r6}
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 80a1440:	f990 1008 	ldrsb.w	r1, [r0, #8]
 80a1444:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80a1446:	4760      	bx	ip

        return( 0 );
    }

#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 80a1448:	2d06      	cmp	r5, #6
 80a144a:	d106      	bne.n	80a145a <mbedtls_cipher_update+0x4e>
    {
        *olen = ilen;
 80a144c:	6034      	str	r4, [r6, #0]
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
                                    output ) );
 80a144e:	460a      	mov	r2, r1
 80a1450:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80a1452:	4621      	mov	r1, r4
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80a1454:	bc70      	pop	{r4, r5, r6}
#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
    {
        *olen = ilen;
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
                                    output ) );
 80a1456:	f006 bc9a 	b.w	80a7d8e <mbedtls_gcm_update>
        return( mbedtls_chachapoly_update( (mbedtls_chachapoly_context*) ctx->cipher_ctx,
                                           ilen, input, output ) );
    }
#endif

    if ( 0 == block_size )
 80a145a:	b16a      	cbz	r2, 80a1478 <mbedtls_cipher_update+0x6c>
    {
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
    }

    if( input == output &&
 80a145c:	4299      	cmp	r1, r3
 80a145e:	d10d      	bne.n	80a147c <mbedtls_cipher_update+0x70>
 80a1460:	69c3      	ldr	r3, [r0, #28]
 80a1462:	2b00      	cmp	r3, #0
 80a1464:	d1d7      	bne.n	80a1416 <mbedtls_cipher_update+0xa>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 80a1466:	fbb4 f1f2 	udiv	r1, r4, r2
 80a146a:	fb02 4411 	mls	r4, r2, r1, r4
 80a146e:	2c00      	cmp	r4, #0
 80a1470:	d1d1      	bne.n	80a1416 <mbedtls_cipher_update+0xa>
 80a1472:	e003      	b.n	80a147c <mbedtls_cipher_update+0x70>
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
    {
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 80a1474:	4804      	ldr	r0, [pc, #16]	; (80a1488 <mbedtls_cipher_update+0x7c>)
 80a1476:	e002      	b.n	80a147e <mbedtls_cipher_update+0x72>
    }
#endif

    if ( 0 == block_size )
    {
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
 80a1478:	4804      	ldr	r0, [pc, #16]	; (80a148c <mbedtls_cipher_update+0x80>)
 80a147a:	e000      	b.n	80a147e <mbedtls_cipher_update+0x72>

        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80a147c:	4804      	ldr	r0, [pc, #16]	; (80a1490 <mbedtls_cipher_update+0x84>)
}
 80a147e:	bc70      	pop	{r4, r5, r6}
 80a1480:	4770      	bx	lr
 80a1482:	bf00      	nop
 80a1484:	ffff9f00 	.word	0xffff9f00
 80a1488:	ffff9d80 	.word	0xffff9d80
 80a148c:	ffff9c80 	.word	0xffff9c80
 80a1490:	ffff9f80 	.word	0xffff9f80

080a1494 <mbedtls_cipher_finish>:
}
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
 80a1494:	b510      	push	{r4, lr}
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
 80a1496:	6801      	ldr	r1, [r0, #0]
}
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
 80a1498:	4603      	mov	r3, r0
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
 80a149a:	b1a9      	cbz	r1, 80a14c8 <mbedtls_cipher_finish+0x34>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
 80a149c:	2000      	movs	r0, #0
 80a149e:	6010      	str	r0, [r2, #0]

    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 80a14a0:	6819      	ldr	r1, [r3, #0]
 80a14a2:	784a      	ldrb	r2, [r1, #1]
 80a14a4:	1ed4      	subs	r4, r2, #3
 80a14a6:	2c04      	cmp	r4, #4
 80a14a8:	d911      	bls.n	80a14ce <mbedtls_cipher_finish+0x3a>
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode ||
        MBEDTLS_MODE_GCM == ctx->cipher_info->mode ||
 80a14aa:	2a09      	cmp	r2, #9
 80a14ac:	d00f      	beq.n	80a14ce <mbedtls_cipher_finish+0x3a>
        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )
    {
        return( 0 );
    }

    if ( ( MBEDTLS_CIPHER_CHACHA20          == ctx->cipher_info->type ) ||
 80a14ae:	7809      	ldrb	r1, [r1, #0]
 80a14b0:	3948      	subs	r1, #72	; 0x48
 80a14b2:	2901      	cmp	r1, #1
 80a14b4:	d90b      	bls.n	80a14ce <mbedtls_cipher_finish+0x3a>
         ( MBEDTLS_CIPHER_CHACHA20_POLY1305 == ctx->cipher_info->type ) )
    {
        return( 0 );
    }

    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
 80a14b6:	2a01      	cmp	r2, #1
 80a14b8:	d108      	bne.n	80a14cc <mbedtls_cipher_finish+0x38>
    {
        if( ctx->unprocessed_len != 0 )
 80a14ba:	69db      	ldr	r3, [r3, #28]
 80a14bc:	4283      	cmp	r3, r0
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 80a14be:	f5a0 40c5 	sub.w	r0, r0, #25216	; 0x6280
 80a14c2:	bf08      	it	eq
 80a14c4:	2000      	moveq	r0, #0
 80a14c6:	bd10      	pop	{r4, pc}
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80a14c8:	4801      	ldr	r0, [pc, #4]	; (80a14d0 <mbedtls_cipher_finish+0x3c>)
 80a14ca:	bd10      	pop	{r4, pc}
    }
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80a14cc:	4801      	ldr	r0, [pc, #4]	; (80a14d4 <mbedtls_cipher_finish+0x40>)
}
 80a14ce:	bd10      	pop	{r4, pc}
 80a14d0:	ffff9f00 	.word	0xffff9f00
 80a14d4:	ffff9f80 	.word	0xffff9f80

080a14d8 <mbedtls_cipher_crypt>:
 */
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen )
{
 80a14d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a14da:	b085      	sub	sp, #20
 80a14dc:	4605      	mov	r5, r0
 80a14de:	461f      	mov	r7, r3
 80a14e0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80a14e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    CIPHER_VALIDATE_RET( iv_len == 0 || iv != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );

    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )
 80a14e4:	f7ff ff68 	bl	80a13b8 <mbedtls_cipher_set_iv>
 80a14e8:	b9b8      	cbnz	r0, 80a151a <mbedtls_cipher_crypt+0x42>
}

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( ctx->cipher_info == NULL )
 80a14ea:	682b      	ldr	r3, [r5, #0]
 80a14ec:	b1a3      	cbz	r3, 80a1518 <mbedtls_cipher_crypt+0x40>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    ctx->unprocessed_len = 0;
 80a14ee:	61e8      	str	r0, [r5, #28]
        return( ret );

    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_cipher_update( ctx, input, ilen, output, olen ) ) != 0 )
 80a14f0:	9400      	str	r4, [sp, #0]
 80a14f2:	4633      	mov	r3, r6
 80a14f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a14f6:	4639      	mov	r1, r7
 80a14f8:	4628      	mov	r0, r5
 80a14fa:	f7ff ff87 	bl	80a140c <mbedtls_cipher_update>
 80a14fe:	b960      	cbnz	r0, 80a151a <mbedtls_cipher_crypt+0x42>
        return( ret );

    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen, &finish_olen ) ) != 0 )
 80a1500:	6821      	ldr	r1, [r4, #0]
 80a1502:	aa03      	add	r2, sp, #12
 80a1504:	4431      	add	r1, r6
 80a1506:	4628      	mov	r0, r5
 80a1508:	f7ff ffc4 	bl	80a1494 <mbedtls_cipher_finish>
 80a150c:	b928      	cbnz	r0, 80a151a <mbedtls_cipher_crypt+0x42>
        return( ret );

    *olen += finish_olen;
 80a150e:	6822      	ldr	r2, [r4, #0]
 80a1510:	9b03      	ldr	r3, [sp, #12]
 80a1512:	4413      	add	r3, r2
 80a1514:	6023      	str	r3, [r4, #0]

    return( 0 );
 80a1516:	e000      	b.n	80a151a <mbedtls_cipher_crypt+0x42>

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( ctx->cipher_info == NULL )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80a1518:	4801      	ldr	r0, [pc, #4]	; (80a1520 <mbedtls_cipher_crypt+0x48>)
        return( ret );

    *olen += finish_olen;

    return( 0 );
}
 80a151a:	b005      	add	sp, #20
 80a151c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a151e:	bf00      	nop
 80a1520:	ffff9f00 	.word	0xffff9f00

080a1524 <mbedtls_cipher_auth_encrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 80a1524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80a1528:	6807      	ldr	r7, [r0, #0]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 80a152a:	4614      	mov	r4, r2
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80a152c:	787f      	ldrb	r7, [r7, #1]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 80a152e:	9d07      	ldr	r5, [sp, #28]
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80a1530:	2f06      	cmp	r7, #6
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 80a1532:	9e08      	ldr	r6, [sp, #32]
 80a1534:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a1536:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 80a153a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80a153e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80a1542:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80a1546:	d112      	bne.n	80a156e <mbedtls_cipher_auth_encrypt+0x4a>
    {
        *olen = ilen;
 80a1548:	f8c9 2000 	str.w	r2, [r9]
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
                                   iv, iv_len, ad, ad_len, input, output,
                                   tag_len, tag ) );
 80a154c:	9308      	str	r3, [sp, #32]
 80a154e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 80a1552:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 80a1556:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 80a155a:	960a      	str	r6, [sp, #40]	; 0x28
 80a155c:	9509      	str	r5, [sp, #36]	; 0x24
 80a155e:	9407      	str	r4, [sp, #28]
 80a1560:	460b      	mov	r3, r1
                                ilen, iv, ad, ad_len, input, output, tag ) );
    }
#endif /* MBEDTLS_CHACHAPOLY_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80a1562:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
    {
        *olen = ilen;
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
                                   iv, iv_len, ad, ad_len, input, output,
                                   tag_len, tag ) );
 80a1566:	2101      	movs	r1, #1
 80a1568:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80a156a:	f006 bcfb 	b.w	80a7f64 <mbedtls_gcm_crypt_and_tag>
                                ilen, iv, ad, ad_len, input, output, tag ) );
    }
#endif /* MBEDTLS_CHACHAPOLY_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80a156e:	4801      	ldr	r0, [pc, #4]	; (80a1574 <mbedtls_cipher_auth_encrypt+0x50>)
 80a1570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1574:	ffff9f80 	.word	0xffff9f80

080a1578 <mbedtls_cipher_auth_decrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80a1578:	b530      	push	{r4, r5, lr}
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80a157a:	6805      	ldr	r5, [r0, #0]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80a157c:	b087      	sub	sp, #28
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80a157e:	786d      	ldrb	r5, [r5, #1]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80a1580:	460c      	mov	r4, r1
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80a1582:	2d06      	cmp	r5, #6
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80a1584:	990c      	ldr	r1, [sp, #48]	; 0x30
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80a1586:	d117      	bne.n	80a15b8 <mbedtls_cipher_auth_decrypt+0x40>
    {
        int ret;

        *olen = ilen;
 80a1588:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80a158a:	6029      	str	r1, [r5, #0]
        ret = mbedtls_gcm_auth_decrypt( (mbedtls_gcm_context *)ctx->cipher_ctx, ilen,
 80a158c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80a158e:	9505      	str	r5, [sp, #20]
 80a1590:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80a1592:	9504      	str	r5, [sp, #16]
 80a1594:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80a1596:	9503      	str	r5, [sp, #12]
 80a1598:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80a159a:	9502      	str	r5, [sp, #8]
 80a159c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a159e:	e88d 0028 	stmia.w	sp, {r3, r5}
 80a15a2:	4613      	mov	r3, r2
 80a15a4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80a15a6:	4622      	mov	r2, r4
 80a15a8:	f006 fd01 	bl	80a7fae <mbedtls_gcm_auth_decrypt>
                                iv, iv_len, ad, ad_len,
                                tag, tag_len, input, output );

        if( ret == MBEDTLS_ERR_GCM_AUTH_FAILED )
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
 80a15ac:	4b04      	ldr	r3, [pc, #16]	; (80a15c0 <mbedtls_cipher_auth_decrypt+0x48>)
 80a15ae:	f110 0f12 	cmn.w	r0, #18
 80a15b2:	bf08      	it	eq
 80a15b4:	4618      	moveq	r0, r3
 80a15b6:	e000      	b.n	80a15ba <mbedtls_cipher_auth_decrypt+0x42>

        return( ret );
    }
#endif /* MBEDTLS_CHACHAPOLY_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80a15b8:	4802      	ldr	r0, [pc, #8]	; (80a15c4 <mbedtls_cipher_auth_decrypt+0x4c>)
}
 80a15ba:	b007      	add	sp, #28
 80a15bc:	bd30      	pop	{r4, r5, pc}
 80a15be:	bf00      	nop
 80a15c0:	ffff9d00 	.word	0xffff9d00
 80a15c4:	ffff9f80 	.word	0xffff9f80

080a15c8 <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
 80a15c8:	b530      	push	{r4, r5, lr}
    if( ( end - *p ) < 1 )
 80a15ca:	6803      	ldr	r3, [r0, #0]
 80a15cc:	1acd      	subs	r5, r1, r3
 80a15ce:	2d00      	cmp	r5, #0
 80a15d0:	dc02      	bgt.n	80a15d8 <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a15d2:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 80a15d6:	bd30      	pop	{r4, r5, pc}

    if( ( **p & 0x80 ) == 0 )
 80a15d8:	781c      	ldrb	r4, [r3, #0]
 80a15da:	f014 0f80 	tst.w	r4, #128	; 0x80
 80a15de:	d104      	bne.n	80a15ea <mbedtls_asn1_get_len+0x22>
        *len = *(*p)++;
 80a15e0:	1c5c      	adds	r4, r3, #1
 80a15e2:	6004      	str	r4, [r0, #0]
 80a15e4:	781b      	ldrb	r3, [r3, #0]
 80a15e6:	6013      	str	r3, [r2, #0]
 80a15e8:	e036      	b.n	80a1658 <mbedtls_asn1_get_len+0x90>
    else
    {
        switch( **p & 0x7F )
 80a15ea:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80a15ee:	3c01      	subs	r4, #1
 80a15f0:	2c03      	cmp	r4, #3
 80a15f2:	d838      	bhi.n	80a1666 <mbedtls_asn1_get_len+0x9e>
 80a15f4:	e8df f004 	tbb	[pc, r4]
 80a15f8:	20130902 	.word	0x20130902
        {
        case 1:
            if( ( end - *p ) < 2 )
 80a15fc:	2d01      	cmp	r5, #1
 80a15fe:	d0e8      	beq.n	80a15d2 <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = (*p)[1];
 80a1600:	785b      	ldrb	r3, [r3, #1]
 80a1602:	6013      	str	r3, [r2, #0]
            (*p) += 2;
 80a1604:	6803      	ldr	r3, [r0, #0]
 80a1606:	3302      	adds	r3, #2
 80a1608:	e025      	b.n	80a1656 <mbedtls_asn1_get_len+0x8e>
            break;

        case 2:
            if( ( end - *p ) < 3 )
 80a160a:	2d02      	cmp	r5, #2
 80a160c:	dde1      	ble.n	80a15d2 <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 80a160e:	785c      	ldrb	r4, [r3, #1]
 80a1610:	789b      	ldrb	r3, [r3, #2]
 80a1612:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80a1616:	6013      	str	r3, [r2, #0]
            (*p) += 3;
 80a1618:	6803      	ldr	r3, [r0, #0]
 80a161a:	3303      	adds	r3, #3
 80a161c:	e01b      	b.n	80a1656 <mbedtls_asn1_get_len+0x8e>
            break;

        case 3:
            if( ( end - *p ) < 4 )
 80a161e:	2d03      	cmp	r5, #3
 80a1620:	ddd7      	ble.n	80a15d2 <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 16 ) |
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 80a1622:	789c      	ldrb	r4, [r3, #2]
 80a1624:	785d      	ldrb	r5, [r3, #1]
 80a1626:	0224      	lsls	r4, r4, #8
 80a1628:	78db      	ldrb	r3, [r3, #3]
 80a162a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a162e:	431c      	orrs	r4, r3
 80a1630:	6014      	str	r4, [r2, #0]
            (*p) += 4;
 80a1632:	6803      	ldr	r3, [r0, #0]
 80a1634:	3304      	adds	r3, #4
 80a1636:	e00e      	b.n	80a1656 <mbedtls_asn1_get_len+0x8e>
            break;

        case 4:
            if( ( end - *p ) < 5 )
 80a1638:	2d04      	cmp	r5, #4
 80a163a:	ddca      	ble.n	80a15d2 <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
 80a163c:	789c      	ldrb	r4, [r3, #2]
 80a163e:	785d      	ldrb	r5, [r3, #1]
 80a1640:	0424      	lsls	r4, r4, #16
 80a1642:	ea44 6505 	orr.w	r5, r4, r5, lsl #24
 80a1646:	791c      	ldrb	r4, [r3, #4]
 80a1648:	78db      	ldrb	r3, [r3, #3]
 80a164a:	432c      	orrs	r4, r5
 80a164c:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1650:	6013      	str	r3, [r2, #0]
            (*p) += 5;
 80a1652:	6803      	ldr	r3, [r0, #0]
 80a1654:	3305      	adds	r3, #5
 80a1656:	6003      	str	r3, [r0, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
 80a1658:	6803      	ldr	r3, [r0, #0]
 80a165a:	1ac9      	subs	r1, r1, r3
 80a165c:	6813      	ldr	r3, [r2, #0]
 80a165e:	428b      	cmp	r3, r1
 80a1660:	d8b7      	bhi.n	80a15d2 <mbedtls_asn1_get_len+0xa>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
 80a1662:	2000      	movs	r0, #0
 80a1664:	bd30      	pop	{r4, r5, pc}
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
            (*p) += 5;
            break;

        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80a1666:	f06f 0063 	mvn.w	r0, #99	; 0x63

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
 80a166a:	bd30      	pop	{r4, r5, pc}

080a166c <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
 80a166c:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
 80a166e:	6804      	ldr	r4, [r0, #0]
 80a1670:	1b0e      	subs	r6, r1, r4
 80a1672:	2e00      	cmp	r6, #0
 80a1674:	dd07      	ble.n	80a1686 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
 80a1676:	7826      	ldrb	r6, [r4, #0]
 80a1678:	429e      	cmp	r6, r3
 80a167a:	d107      	bne.n	80a168c <mbedtls_asn1_get_tag+0x20>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 80a167c:	3401      	adds	r4, #1
 80a167e:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 80a1680:	bc70      	pop	{r4, r5, r6}
    if( **p != tag )
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;

    return( mbedtls_asn1_get_len( p, end, len ) );
 80a1682:	f7ff bfa1 	b.w	80a15c8 <mbedtls_asn1_get_len>
int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a1686:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 80a168a:	e001      	b.n	80a1690 <mbedtls_asn1_get_tag+0x24>

    if( **p != tag )
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80a168c:	f06f 0061 	mvn.w	r0, #97	; 0x61

    (*p)++;

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 80a1690:	bc70      	pop	{r4, r5, r6}
 80a1692:	4770      	bx	lr

080a1694 <mbedtls_asn1_get_bool>:

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 80a1694:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 80a1696:	2301      	movs	r3, #1
}

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 80a1698:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 80a169a:	aa01      	add	r2, sp, #4
}

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 80a169c:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 80a169e:	f7ff ffe5 	bl	80a166c <mbedtls_asn1_get_tag>
 80a16a2:	b970      	cbnz	r0, 80a16c2 <mbedtls_asn1_get_bool+0x2e>
        return( ret );

    if( len != 1 )
 80a16a4:	9b01      	ldr	r3, [sp, #4]
 80a16a6:	2b01      	cmp	r3, #1
 80a16a8:	d109      	bne.n	80a16be <mbedtls_asn1_get_bool+0x2a>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = ( **p != 0 ) ? 1 : 0;
 80a16aa:	6823      	ldr	r3, [r4, #0]
 80a16ac:	781b      	ldrb	r3, [r3, #0]
 80a16ae:	3300      	adds	r3, #0
 80a16b0:	bf18      	it	ne
 80a16b2:	2301      	movne	r3, #1
 80a16b4:	602b      	str	r3, [r5, #0]
    (*p)++;
 80a16b6:	6823      	ldr	r3, [r4, #0]
 80a16b8:	3301      	adds	r3, #1
 80a16ba:	6023      	str	r3, [r4, #0]

    return( 0 );
 80a16bc:	e001      	b.n	80a16c2 <mbedtls_asn1_get_bool+0x2e>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
        return( ret );

    if( len != 1 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80a16be:	f06f 0063 	mvn.w	r0, #99	; 0x63

    *val = ( **p != 0 ) ? 1 : 0;
    (*p)++;

    return( 0 );
}
 80a16c2:	b003      	add	sp, #12
 80a16c4:	bd30      	pop	{r4, r5, pc}

080a16c6 <mbedtls_asn1_get_int>:

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 80a16c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80a16c8:	2302      	movs	r3, #2
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 80a16ca:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80a16cc:	aa01      	add	r2, sp, #4
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 80a16ce:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80a16d0:	f7ff ffcc 	bl	80a166c <mbedtls_asn1_get_tag>
 80a16d4:	b9c8      	cbnz	r0, 80a170a <mbedtls_asn1_get_int+0x44>
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
 80a16d6:	9b01      	ldr	r3, [sp, #4]
 80a16d8:	3b01      	subs	r3, #1
 80a16da:	2b03      	cmp	r3, #3
 80a16dc:	d813      	bhi.n	80a1706 <mbedtls_asn1_get_int+0x40>
 80a16de:	6823      	ldr	r3, [r4, #0]
 80a16e0:	f993 3000 	ldrsb.w	r3, [r3]
 80a16e4:	2b00      	cmp	r3, #0
 80a16e6:	db0e      	blt.n	80a1706 <mbedtls_asn1_get_int+0x40>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;
 80a16e8:	6028      	str	r0, [r5, #0]

    while( len-- > 0 )
 80a16ea:	9b01      	ldr	r3, [sp, #4]
 80a16ec:	1e5a      	subs	r2, r3, #1
 80a16ee:	9201      	str	r2, [sp, #4]
 80a16f0:	b15b      	cbz	r3, 80a170a <mbedtls_asn1_get_int+0x44>
    {
        *val = ( *val << 8 ) | **p;
 80a16f2:	6823      	ldr	r3, [r4, #0]
 80a16f4:	682a      	ldr	r2, [r5, #0]
 80a16f6:	781b      	ldrb	r3, [r3, #0]
 80a16f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a16fc:	602b      	str	r3, [r5, #0]
        (*p)++;
 80a16fe:	6823      	ldr	r3, [r4, #0]
 80a1700:	3301      	adds	r3, #1
 80a1702:	6023      	str	r3, [r4, #0]
    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;

    while( len-- > 0 )
 80a1704:	e7f1      	b.n	80a16ea <mbedtls_asn1_get_int+0x24>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80a1706:	f06f 0063 	mvn.w	r0, #99	; 0x63
        *val = ( *val << 8 ) | **p;
        (*p)++;
    }

    return( 0 );
}
 80a170a:	b003      	add	sp, #12
 80a170c:	bd30      	pop	{r4, r5, pc}

080a170e <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 80a170e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80a1710:	2302      	movs	r3, #2

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 80a1712:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80a1714:	aa01      	add	r2, sp, #4

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 80a1716:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80a1718:	f7ff ffa8 	bl	80a166c <mbedtls_asn1_get_tag>
 80a171c:	b940      	cbnz	r0, 80a1730 <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
 80a171e:	9a01      	ldr	r2, [sp, #4]
 80a1720:	6821      	ldr	r1, [r4, #0]
 80a1722:	4628      	mov	r0, r5
 80a1724:	f00a fe26 	bl	80ac374 <mbedtls_mpi_read_binary>

    *p += len;
 80a1728:	6822      	ldr	r2, [r4, #0]
 80a172a:	9b01      	ldr	r3, [sp, #4]
 80a172c:	4413      	add	r3, r2
 80a172e:	6023      	str	r3, [r4, #0]

    return( ret );
}
 80a1730:	b003      	add	sp, #12
 80a1732:	bd30      	pop	{r4, r5, pc}

080a1734 <mbedtls_asn1_get_bitstring>:
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 80a1734:	b570      	push	{r4, r5, r6, lr}
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80a1736:	2303      	movs	r3, #3
}
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 80a1738:	4604      	mov	r4, r0
 80a173a:	460e      	mov	r6, r1
 80a173c:	4615      	mov	r5, r2
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80a173e:	f7ff ff95 	bl	80a166c <mbedtls_asn1_get_tag>
 80a1742:	b9d8      	cbnz	r0, 80a177c <mbedtls_asn1_get_bitstring+0x48>
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
 80a1744:	6813      	ldr	r3, [r2, #0]
 80a1746:	b1a3      	cbz	r3, 80a1772 <mbedtls_asn1_get_bitstring+0x3e>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;
 80a1748:	3b01      	subs	r3, #1
 80a174a:	6013      	str	r3, [r2, #0]

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 80a174c:	6823      	ldr	r3, [r4, #0]
 80a174e:	781b      	ldrb	r3, [r3, #0]
    if( bs->unused_bits > 7 )
 80a1750:	2b07      	cmp	r3, #7
    if( bs->len < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 80a1752:	7113      	strb	r3, [r2, #4]
    if( bs->unused_bits > 7 )
 80a1754:	d810      	bhi.n	80a1778 <mbedtls_asn1_get_bitstring+0x44>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;
 80a1756:	6823      	ldr	r3, [r4, #0]
 80a1758:	3301      	adds	r3, #1
 80a175a:	6023      	str	r3, [r4, #0]

    /* Get actual bitstring */
    bs->p = *p;
 80a175c:	6093      	str	r3, [r2, #8]
    *p += bs->len;
 80a175e:	6822      	ldr	r2, [r4, #0]
 80a1760:	682b      	ldr	r3, [r5, #0]
 80a1762:	4413      	add	r3, r2

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a1764:	429e      	cmp	r6, r3
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;

    /* Get actual bitstring */
    bs->p = *p;
    *p += bs->len;
 80a1766:	6023      	str	r3, [r4, #0]

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a1768:	bf0c      	ite	eq
 80a176a:	2000      	moveq	r0, #0
 80a176c:	f06f 0065 	mvnne.w	r0, #101	; 0x65
 80a1770:	bd70      	pop	{r4, r5, r6, pc}
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a1772:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 80a1776:	bd70      	pop	{r4, r5, r6, pc}
    bs->len -= 1;

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
    if( bs->unused_bits > 7 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80a1778:	f06f 0063 	mvn.w	r0, #99	; 0x63

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 80a177c:	bd70      	pop	{r4, r5, r6, pc}

080a177e <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 80a177e:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80a1780:	2303      	movs	r3, #3
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 80a1782:	4604      	mov	r4, r0
 80a1784:	4615      	mov	r5, r2
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80a1786:	f7ff ff71 	bl	80a166c <mbedtls_asn1_get_tag>
 80a178a:	b958      	cbnz	r0, 80a17a4 <mbedtls_asn1_get_bitstring_null+0x26>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
 80a178c:	6813      	ldr	r3, [r2, #0]
 80a178e:	1e5a      	subs	r2, r3, #1
 80a1790:	2b01      	cmp	r3, #1
 80a1792:	602a      	str	r2, [r5, #0]
 80a1794:	d904      	bls.n	80a17a0 <mbedtls_asn1_get_bitstring_null+0x22>
 80a1796:	6823      	ldr	r3, [r4, #0]
 80a1798:	1c5a      	adds	r2, r3, #1
 80a179a:	6022      	str	r2, [r4, #0]
 80a179c:	781b      	ldrb	r3, [r3, #0]
 80a179e:	b10b      	cbz	r3, 80a17a4 <mbedtls_asn1_get_bitstring_null+0x26>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 80a17a0:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
 80a17a4:	bd38      	pop	{r3, r4, r5, pc}

080a17a6 <mbedtls_asn1_get_sequence_of>:
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 80a17a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a17aa:	4615      	mov	r5, r2
 80a17ac:	4698      	mov	r8, r3
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a17ae:	aa01      	add	r2, sp, #4
 80a17b0:	2330      	movs	r3, #48	; 0x30
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 80a17b2:	4604      	mov	r4, r0
 80a17b4:	460f      	mov	r7, r1
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a17b6:	f7ff ff59 	bl	80a166c <mbedtls_asn1_get_tag>
 80a17ba:	4606      	mov	r6, r0
 80a17bc:	bb78      	cbnz	r0, 80a181e <mbedtls_asn1_get_sequence_of+0x78>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( *p + len != end )
 80a17be:	6822      	ldr	r2, [r4, #0]
 80a17c0:	9b01      	ldr	r3, [sp, #4]
 80a17c2:	4413      	add	r3, r2
 80a17c4:	429f      	cmp	r7, r3
 80a17c6:	d01d      	beq.n	80a1804 <mbedtls_asn1_get_sequence_of+0x5e>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a17c8:	f06f 0665 	mvn.w	r6, #101	; 0x65
 80a17cc:	e027      	b.n	80a181e <mbedtls_asn1_get_sequence_of+0x78>

    while( *p < end )
 80a17ce:	6823      	ldr	r3, [r4, #0]
 80a17d0:	429f      	cmp	r7, r3
 80a17d2:	d91a      	bls.n	80a180a <mbedtls_asn1_get_sequence_of+0x64>
    {
        buf = &(cur->buf);
        buf->tag = **p;
 80a17d4:	781b      	ldrb	r3, [r3, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 80a17d6:	464a      	mov	r2, r9
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;
 80a17d8:	602b      	str	r3, [r5, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 80a17da:	4639      	mov	r1, r7
 80a17dc:	4643      	mov	r3, r8
 80a17de:	4620      	mov	r0, r4
 80a17e0:	f7ff ff44 	bl	80a166c <mbedtls_asn1_get_tag>
 80a17e4:	b9b8      	cbnz	r0, 80a1816 <mbedtls_asn1_get_sequence_of+0x70>
            return( ret );

        buf->p = *p;
 80a17e6:	6823      	ldr	r3, [r4, #0]
 80a17e8:	60ab      	str	r3, [r5, #8]
        *p += buf->len;
 80a17ea:	6822      	ldr	r2, [r4, #0]
 80a17ec:	686b      	ldr	r3, [r5, #4]
 80a17ee:	4413      	add	r3, r2

        /* Allocate and assign next pointer */
        if( *p < end )
 80a17f0:	429f      	cmp	r7, r3

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
            return( ret );

        buf->p = *p;
        *p += buf->len;
 80a17f2:	6023      	str	r3, [r4, #0]

        /* Allocate and assign next pointer */
        if( *p < end )
 80a17f4:	d9eb      	bls.n	80a17ce <mbedtls_asn1_get_sequence_of+0x28>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
 80a17f6:	2110      	movs	r1, #16
 80a17f8:	2001      	movs	r0, #1
 80a17fa:	f010 fedf 	bl	80b25bc <calloc>
                                            sizeof( mbedtls_asn1_sequence ) );
 80a17fe:	60e8      	str	r0, [r5, #12]

            if( cur->next == NULL )
 80a1800:	b158      	cbz	r0, 80a181a <mbedtls_asn1_get_sequence_of+0x74>
 80a1802:	4605      	mov	r5, r0
    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 80a1804:	f105 0904 	add.w	r9, r5, #4
 80a1808:	e7e1      	b.n	80a17ce <mbedtls_asn1_get_sequence_of+0x28>
            cur = cur->next;
        }
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 80a180a:	2300      	movs	r3, #0
 80a180c:	60eb      	str	r3, [r5, #12]

    if( *p != end )
 80a180e:	6823      	ldr	r3, [r4, #0]
 80a1810:	429f      	cmp	r7, r3
 80a1812:	d004      	beq.n	80a181e <mbedtls_asn1_get_sequence_of+0x78>
 80a1814:	e7d8      	b.n	80a17c8 <mbedtls_asn1_get_sequence_of+0x22>
    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 80a1816:	4606      	mov	r6, r0
 80a1818:	e001      	b.n	80a181e <mbedtls_asn1_get_sequence_of+0x78>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
                                            sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 80a181a:	f06f 0669 	mvn.w	r6, #105	; 0x69

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 80a181e:	4630      	mov	r0, r6
 80a1820:	b003      	add	sp, #12
 80a1822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a1826 <mbedtls_asn1_get_alg>:

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 80a1826:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a182a:	4690      	mov	r8, r2
 80a182c:	461f      	mov	r7, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a182e:	aa01      	add	r2, sp, #4
 80a1830:	2330      	movs	r3, #48	; 0x30
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 80a1832:	4604      	mov	r4, r0
 80a1834:	460e      	mov	r6, r1
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a1836:	f7ff ff19 	bl	80a166c <mbedtls_asn1_get_tag>
 80a183a:	4605      	mov	r5, r0
 80a183c:	2800      	cmp	r0, #0
 80a183e:	d13b      	bne.n	80a18b8 <mbedtls_asn1_get_alg+0x92>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
 80a1840:	6823      	ldr	r3, [r4, #0]
 80a1842:	1af6      	subs	r6, r6, r3
 80a1844:	2e00      	cmp	r6, #0
 80a1846:	dd35      	ble.n	80a18b4 <mbedtls_asn1_get_alg+0x8e>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
 80a1848:	4642      	mov	r2, r8
 80a184a:	781b      	ldrb	r3, [r3, #0]
    end = *p + len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 80a184c:	4620      	mov	r0, r4
        return( ret );

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
 80a184e:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
 80a1852:	6826      	ldr	r6, [r4, #0]
 80a1854:	9b01      	ldr	r3, [sp, #4]
 80a1856:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 80a1858:	4631      	mov	r1, r6
 80a185a:	2306      	movs	r3, #6
 80a185c:	f7ff ff06 	bl	80a166c <mbedtls_asn1_get_tag>
 80a1860:	4605      	mov	r5, r0
 80a1862:	bb48      	cbnz	r0, 80a18b8 <mbedtls_asn1_get_alg+0x92>
        return( ret );

    alg->p = *p;
 80a1864:	6823      	ldr	r3, [r4, #0]
 80a1866:	f8c8 3008 	str.w	r3, [r8, #8]
    *p += alg->len;
 80a186a:	6822      	ldr	r2, [r4, #0]
 80a186c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a1870:	18d1      	adds	r1, r2, r3

    if( *p == end )
 80a1872:	428e      	cmp	r6, r1

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( ret );

    alg->p = *p;
    *p += alg->len;
 80a1874:	6021      	str	r1, [r4, #0]

    if( *p == end )
 80a1876:	d104      	bne.n	80a1882 <mbedtls_asn1_get_alg+0x5c>
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
 80a1878:	210c      	movs	r1, #12
 80a187a:	4638      	mov	r0, r7
 80a187c:	f004 fdc8 	bl	80a6410 <mbedtls_platform_zeroize>
        return( 0 );
 80a1880:	e01a      	b.n	80a18b8 <mbedtls_asn1_get_alg+0x92>
    }

    params->tag = **p;
 80a1882:	5cd3      	ldrb	r3, [r2, r3]
 80a1884:	463a      	mov	r2, r7
 80a1886:	f842 3b04 	str.w	r3, [r2], #4
    (*p)++;
 80a188a:	6823      	ldr	r3, [r4, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 80a188c:	4631      	mov	r1, r6
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
        return( 0 );
    }

    params->tag = **p;
    (*p)++;
 80a188e:	3301      	adds	r3, #1
 80a1890:	6023      	str	r3, [r4, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 80a1892:	4620      	mov	r0, r4
 80a1894:	f7ff fe98 	bl	80a15c8 <mbedtls_asn1_get_len>
 80a1898:	4605      	mov	r5, r0
 80a189a:	b968      	cbnz	r0, 80a18b8 <mbedtls_asn1_get_alg+0x92>
        return( ret );

    params->p = *p;
 80a189c:	6823      	ldr	r3, [r4, #0]
 80a189e:	60bb      	str	r3, [r7, #8]
    *p += params->len;
 80a18a0:	6822      	ldr	r2, [r4, #0]
 80a18a2:	687b      	ldr	r3, [r7, #4]
 80a18a4:	4413      	add	r3, r2

    if( *p != end )
 80a18a6:	429e      	cmp	r6, r3

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
        return( ret );

    params->p = *p;
    *p += params->len;
 80a18a8:	6023      	str	r3, [r4, #0]

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a18aa:	bf0c      	ite	eq
 80a18ac:	4605      	moveq	r5, r0
 80a18ae:	f06f 0565 	mvnne.w	r5, #101	; 0x65
 80a18b2:	e001      	b.n	80a18b8 <mbedtls_asn1_get_alg+0x92>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a18b4:	f06f 055f 	mvn.w	r5, #95	; 0x5f

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 80a18b8:	4628      	mov	r0, r5
 80a18ba:	b002      	add	sp, #8
 80a18bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a18c0 <mbedtls_asn1_get_alg_null>:

int mbedtls_asn1_get_alg_null( unsigned char **p,
                       const unsigned char *end,
                       mbedtls_asn1_buf *alg )
{
 80a18c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int ret;
    mbedtls_asn1_buf params;

    memset( &params, 0, sizeof(mbedtls_asn1_buf) );
 80a18c2:	2300      	movs	r3, #0
 80a18c4:	9301      	str	r3, [sp, #4]
 80a18c6:	9302      	str	r3, [sp, #8]
 80a18c8:	9303      	str	r3, [sp, #12]

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
 80a18ca:	ab01      	add	r3, sp, #4
 80a18cc:	f7ff ffab 	bl	80a1826 <mbedtls_asn1_get_alg>
 80a18d0:	b960      	cbnz	r0, 80a18ec <mbedtls_asn1_get_alg_null+0x2c>
        return( ret );

    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
 80a18d2:	9b01      	ldr	r3, [sp, #4]
 80a18d4:	2b05      	cmp	r3, #5
 80a18d6:	d000      	beq.n	80a18da <mbedtls_asn1_get_alg_null+0x1a>
 80a18d8:	b933      	cbnz	r3, 80a18e8 <mbedtls_asn1_get_alg_null+0x28>
 80a18da:	9b02      	ldr	r3, [sp, #8]
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 80a18dc:	2b00      	cmp	r3, #0
 80a18de:	bf0c      	ite	eq
 80a18e0:	2000      	moveq	r0, #0
 80a18e2:	f06f 0067 	mvnne.w	r0, #103	; 0x67
 80a18e6:	e001      	b.n	80a18ec <mbedtls_asn1_get_alg_null+0x2c>
 80a18e8:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
 80a18ec:	b005      	add	sp, #20
 80a18ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a18f4 <_ZL14x509_parse_intPPhjPi>:
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;
 80a18f4:	2300      	movs	r3, #0
        cur = cur->next;
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
 80a18f6:	b530      	push	{r4, r5, lr}
    *res = 0;
 80a18f8:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 80a18fa:	250a      	movs	r5, #10

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
 80a18fc:	b189      	cbz	r1, 80a1922 <_ZL14x509_parse_intPPhjPi+0x2e>
    {
        if( ( **p < '0') || ( **p > '9' ) )
 80a18fe:	6803      	ldr	r3, [r0, #0]
 80a1900:	781b      	ldrb	r3, [r3, #0]
 80a1902:	3b30      	subs	r3, #48	; 0x30
 80a1904:	2b09      	cmp	r3, #9
 80a1906:	d80e      	bhi.n	80a1926 <_ZL14x509_parse_intPPhjPi+0x32>
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 80a1908:	6813      	ldr	r3, [r2, #0]

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
 80a190a:	3901      	subs	r1, #1
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 80a190c:	436b      	muls	r3, r5
 80a190e:	6013      	str	r3, [r2, #0]
        *res += ( *(*p)++ - '0' );
 80a1910:	6803      	ldr	r3, [r0, #0]
 80a1912:	1c5c      	adds	r4, r3, #1
 80a1914:	6004      	str	r4, [r0, #0]
 80a1916:	781b      	ldrb	r3, [r3, #0]
 80a1918:	6814      	ldr	r4, [r2, #0]
 80a191a:	3b30      	subs	r3, #48	; 0x30
 80a191c:	4423      	add	r3, r4
 80a191e:	6013      	str	r3, [r2, #0]

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
 80a1920:	e7ec      	b.n	80a18fc <_ZL14x509_parse_intPPhjPi+0x8>

        *res *= 10;
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
 80a1922:	4608      	mov	r0, r1
 80a1924:	bd30      	pop	{r4, r5, pc}
    *res = 0;

    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );
 80a1926:	4801      	ldr	r0, [pc, #4]	; (80a192c <_ZL14x509_parse_intPPhjPi+0x38>)
        *res *= 10;
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
}
 80a1928:	bd30      	pop	{r4, r5, pc}
 80a192a:	bf00      	nop
 80a192c:	ffffdc00 	.word	0xffffdc00

080a1930 <mbedtls_x509_get_serial>:
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 80a1930:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( end - *p ) < 1 )
 80a1932:	6803      	ldr	r3, [r0, #0]
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 80a1934:	4615      	mov	r5, r2
    int ret;

    if( ( end - *p ) < 1 )
 80a1936:	1aca      	subs	r2, r1, r3
 80a1938:	2a00      	cmp	r2, #0
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 80a193a:	4604      	mov	r4, r0
    int ret;

    if( ( end - *p ) < 1 )
 80a193c:	dd17      	ble.n	80a196e <mbedtls_x509_get_serial+0x3e>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
 80a193e:	781a      	ldrb	r2, [r3, #0]
 80a1940:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80a1944:	2a02      	cmp	r2, #2
 80a1946:	d114      	bne.n	80a1972 <mbedtls_x509_get_serial+0x42>
        **p !=   MBEDTLS_ASN1_INTEGER )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    serial->tag = *(*p)++;
 80a1948:	1c5a      	adds	r2, r3, #1
 80a194a:	6002      	str	r2, [r0, #0]
 80a194c:	462a      	mov	r2, r5
 80a194e:	781b      	ldrb	r3, [r3, #0]
 80a1950:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
 80a1954:	f7ff fe38 	bl	80a15c8 <mbedtls_asn1_get_len>
 80a1958:	b110      	cbz	r0, 80a1960 <mbedtls_x509_get_serial+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
 80a195a:	f5a0 500a 	sub.w	r0, r0, #8832	; 0x2280
 80a195e:	bd38      	pop	{r3, r4, r5, pc}

    serial->p = *p;
 80a1960:	6823      	ldr	r3, [r4, #0]
 80a1962:	60ab      	str	r3, [r5, #8]
    *p += serial->len;
 80a1964:	6822      	ldr	r2, [r4, #0]
 80a1966:	686b      	ldr	r3, [r5, #4]
 80a1968:	4413      	add	r3, r2
 80a196a:	6023      	str	r3, [r4, #0]

    return( 0 );
 80a196c:	bd38      	pop	{r3, r4, r5, pc}
{
    int ret;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a196e:	4802      	ldr	r0, [pc, #8]	; (80a1978 <mbedtls_x509_get_serial+0x48>)
 80a1970:	bd38      	pop	{r3, r4, r5, pc}

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
        **p !=   MBEDTLS_ASN1_INTEGER )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80a1972:	4802      	ldr	r0, [pc, #8]	; (80a197c <mbedtls_x509_get_serial+0x4c>)

    serial->p = *p;
    *p += serial->len;

    return( 0 );
}
 80a1974:	bd38      	pop	{r3, r4, r5, pc}
 80a1976:	bf00      	nop
 80a1978:	ffffdd20 	.word	0xffffdd20
 80a197c:	ffffdd1e 	.word	0xffffdd1e

080a1980 <mbedtls_x509_get_alg_null>:
 *       algorithm               OBJECT IDENTIFIER,
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
int mbedtls_x509_get_alg_null( unsigned char **p, const unsigned char *end,
                       mbedtls_x509_buf *alg )
{
 80a1980:	b508      	push	{r3, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_alg_null( p, end, alg ) ) != 0 )
 80a1982:	f7ff ff9d 	bl	80a18c0 <mbedtls_asn1_get_alg_null>
 80a1986:	b108      	cbz	r0, 80a198c <mbedtls_x509_get_alg_null+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 80a1988:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300

    return( 0 );
}
 80a198c:	bd08      	pop	{r3, pc}

080a198e <mbedtls_x509_get_alg>:
/*
 * Parse an algorithm identifier with (optional) parameters
 */
int mbedtls_x509_get_alg( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *alg, mbedtls_x509_buf *params )
{
 80a198e:	b508      	push	{r3, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
 80a1990:	f7ff ff49 	bl	80a1826 <mbedtls_asn1_get_alg>
 80a1994:	b108      	cbz	r0, 80a199a <mbedtls_x509_get_alg+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 80a1996:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300

    return( 0 );
}
 80a199a:	bd08      	pop	{r3, pc}

080a199c <mbedtls_x509_get_rsassa_pss_params>:
 * option. Enfore this at parsing time.
 */
int mbedtls_x509_get_rsassa_pss_params( const mbedtls_x509_buf *params,
                                mbedtls_md_type_t *md_alg, mbedtls_md_type_t *mgf_md,
                                int *salt_len )
{
 80a199c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a19a0:	461d      	mov	r5, r3
    const unsigned char *end, *end2;
    size_t len;
    mbedtls_x509_buf alg_id, alg_params;

    /* First set everything to defaults */
    *md_alg = MBEDTLS_MD_SHA1;
 80a19a2:	2304      	movs	r3, #4
 80a19a4:	700b      	strb	r3, [r1, #0]
    *mgf_md = MBEDTLS_MD_SHA1;
 80a19a6:	7013      	strb	r3, [r2, #0]
    *salt_len = 20;
 80a19a8:	2314      	movs	r3, #20
 80a19aa:	602b      	str	r3, [r5, #0]

    /* Make sure params is a SEQUENCE and setup bounds */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80a19ac:	6803      	ldr	r3, [r0, #0]
 * option. Enfore this at parsing time.
 */
int mbedtls_x509_get_rsassa_pss_params( const mbedtls_x509_buf *params,
                                mbedtls_md_type_t *md_alg, mbedtls_md_type_t *mgf_md,
                                int *salt_len )
{
 80a19ae:	b08f      	sub	sp, #60	; 0x3c
    *md_alg = MBEDTLS_MD_SHA1;
    *mgf_md = MBEDTLS_MD_SHA1;
    *salt_len = 20;

    /* Make sure params is a SEQUENCE and setup bounds */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80a19b0:	2b30      	cmp	r3, #48	; 0x30
 * option. Enfore this at parsing time.
 */
int mbedtls_x509_get_rsassa_pss_params( const mbedtls_x509_buf *params,
                                mbedtls_md_type_t *md_alg, mbedtls_md_type_t *mgf_md,
                                int *salt_len )
{
 80a19b2:	4688      	mov	r8, r1
 80a19b4:	4616      	mov	r6, r2
    *md_alg = MBEDTLS_MD_SHA1;
    *mgf_md = MBEDTLS_MD_SHA1;
    *salt_len = 20;

    /* Make sure params is a SEQUENCE and setup bounds */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80a19b6:	f040 80ca 	bne.w	80a1b4e <mbedtls_x509_get_rsassa_pss_params+0x1b2>
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    p = (unsigned char *) params->p;
 80a19ba:	6883      	ldr	r3, [r0, #8]
    end = p + params->len;
 80a19bc:	6844      	ldr	r4, [r0, #4]
    /* Make sure params is a SEQUENCE and setup bounds */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    p = (unsigned char *) params->p;
 80a19be:	9301      	str	r3, [sp, #4]
    end = p + params->len;
 80a19c0:	441c      	add	r4, r3

    if( p == end )
 80a19c2:	42a3      	cmp	r3, r4
 80a19c4:	f000 80c1 	beq.w	80a1b4a <mbedtls_x509_get_rsassa_pss_params+0x1ae>
        return( 0 );

    /*
     * HashAlgorithm
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a19c8:	23a0      	movs	r3, #160	; 0xa0
 80a19ca:	aa02      	add	r2, sp, #8
 80a19cc:	4621      	mov	r1, r4
 80a19ce:	a801      	add	r0, sp, #4
 80a19d0:	f7ff fe4c 	bl	80a166c <mbedtls_asn1_get_tag>
 80a19d4:	b9a8      	cbnz	r0, 80a1a02 <mbedtls_x509_get_rsassa_pss_params+0x66>
                    MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )
    {
        end2 = p + len;
 80a19d6:	9b02      	ldr	r3, [sp, #8]
 80a19d8:	9f01      	ldr	r7, [sp, #4]

        /* HashAlgorithm ::= AlgorithmIdentifier (without parameters) */
        if( ( ret = mbedtls_x509_get_alg_null( &p, end2, &alg_id ) ) != 0 )
 80a19da:	aa05      	add	r2, sp, #20
     * HashAlgorithm
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                    MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )
    {
        end2 = p + len;
 80a19dc:	441f      	add	r7, r3

        /* HashAlgorithm ::= AlgorithmIdentifier (without parameters) */
        if( ( ret = mbedtls_x509_get_alg_null( &p, end2, &alg_id ) ) != 0 )
 80a19de:	4639      	mov	r1, r7
 80a19e0:	a801      	add	r0, sp, #4
 80a19e2:	f7ff ffcd 	bl	80a1980 <mbedtls_x509_get_alg_null>
 80a19e6:	2800      	cmp	r0, #0
 80a19e8:	f040 80b9 	bne.w	80a1b5e <mbedtls_x509_get_rsassa_pss_params+0x1c2>
            return( ret );

        if( ( ret = mbedtls_oid_get_md_alg( &alg_id, md_alg ) ) != 0 )
 80a19ec:	4641      	mov	r1, r8
 80a19ee:	a805      	add	r0, sp, #20
 80a19f0:	f003 fc00 	bl	80a51f4 <mbedtls_oid_get_md_alg>
 80a19f4:	2800      	cmp	r0, #0
 80a19f6:	f040 80a5 	bne.w	80a1b44 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
            return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

        if( p != end2 )
 80a19fa:	9b01      	ldr	r3, [sp, #4]
 80a19fc:	429f      	cmp	r7, r3
 80a19fe:	d004      	beq.n	80a1a0a <mbedtls_x509_get_rsassa_pss_params+0x6e>
 80a1a00:	e09e      	b.n	80a1b40 <mbedtls_x509_get_rsassa_pss_params+0x1a4>
            return( MBEDTLS_ERR_X509_INVALID_ALG +
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80a1a02:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80a1a06:	f040 809d 	bne.w	80a1b44 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    if( p == end )
 80a1a0a:	9b01      	ldr	r3, [sp, #4]
 80a1a0c:	429c      	cmp	r4, r3
 80a1a0e:	f000 809c 	beq.w	80a1b4a <mbedtls_x509_get_rsassa_pss_params+0x1ae>
        return( 0 );

    /*
     * MaskGenAlgorithm
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a1a12:	23a1      	movs	r3, #161	; 0xa1
 80a1a14:	aa02      	add	r2, sp, #8
 80a1a16:	4621      	mov	r1, r4
 80a1a18:	a801      	add	r0, sp, #4
 80a1a1a:	f7ff fe27 	bl	80a166c <mbedtls_asn1_get_tag>
 80a1a1e:	2800      	cmp	r0, #0
 80a1a20:	d150      	bne.n	80a1ac4 <mbedtls_x509_get_rsassa_pss_params+0x128>
                    MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 1 ) ) == 0 )
    {
        end2 = p + len;
 80a1a22:	9b02      	ldr	r3, [sp, #8]
 80a1a24:	9f01      	ldr	r7, [sp, #4]

        /* MaskGenAlgorithm ::= AlgorithmIdentifier (params = HashAlgorithm) */
        if( ( ret = mbedtls_x509_get_alg( &p, end2, &alg_id, &alg_params ) ) != 0 )
 80a1a26:	aa05      	add	r2, sp, #20
     * MaskGenAlgorithm
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                    MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 1 ) ) == 0 )
    {
        end2 = p + len;
 80a1a28:	441f      	add	r7, r3

        /* MaskGenAlgorithm ::= AlgorithmIdentifier (params = HashAlgorithm) */
        if( ( ret = mbedtls_x509_get_alg( &p, end2, &alg_id, &alg_params ) ) != 0 )
 80a1a2a:	4639      	mov	r1, r7
 80a1a2c:	ab08      	add	r3, sp, #32
 80a1a2e:	a801      	add	r0, sp, #4
 80a1a30:	f7ff ffad 	bl	80a198e <mbedtls_x509_get_alg>
 80a1a34:	2800      	cmp	r0, #0
 80a1a36:	f040 8092 	bne.w	80a1b5e <mbedtls_x509_get_rsassa_pss_params+0x1c2>
            return( ret );

        /* Only MFG1 is recognised for now */
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_MGF1, &alg_id ) != 0 )
 80a1a3a:	9a06      	ldr	r2, [sp, #24]
 80a1a3c:	2a09      	cmp	r2, #9
 80a1a3e:	f040 8088 	bne.w	80a1b52 <mbedtls_x509_get_rsassa_pss_params+0x1b6>
 80a1a42:	9907      	ldr	r1, [sp, #28]
 80a1a44:	4847      	ldr	r0, [pc, #284]	; (80a1b64 <mbedtls_x509_get_rsassa_pss_params+0x1c8>)
 80a1a46:	f010 fec7 	bl	80b27d8 <memcmp>
 80a1a4a:	2800      	cmp	r0, #0
 80a1a4c:	f040 8081 	bne.w	80a1b52 <mbedtls_x509_get_rsassa_pss_params+0x1b6>
    const unsigned char *end;
    mbedtls_x509_buf md_oid;
    size_t len;

    /* Make sure we got a SEQUENCE and setup bounds */
    if( alg->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80a1a50:	9b08      	ldr	r3, [sp, #32]
 80a1a52:	2b30      	cmp	r3, #48	; 0x30
 80a1a54:	d17b      	bne.n	80a1b4e <mbedtls_x509_get_rsassa_pss_params+0x1b2>
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    p = (unsigned char *) alg->p;
 80a1a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    end = p + alg->len;
 80a1a58:	9a09      	ldr	r2, [sp, #36]	; 0x24
    /* Make sure we got a SEQUENCE and setup bounds */
    if( alg->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    p = (unsigned char *) alg->p;
 80a1a5a:	9303      	str	r3, [sp, #12]
    end = p + alg->len;
 80a1a5c:	eb03 0802 	add.w	r8, r3, r2

    if( p >= end )
 80a1a60:	4543      	cmp	r3, r8
 80a1a62:	d226      	bcs.n	80a1ab2 <mbedtls_x509_get_rsassa_pss_params+0x116>
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    /* Parse md_oid */
    md_oid.tag = *p;
 80a1a64:	781b      	ldrb	r3, [r3, #0]
 80a1a66:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 80a1a6a:	f849 3d0c 	str.w	r3, [r9, #-12]!

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &md_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 80a1a6e:	aa0c      	add	r2, sp, #48	; 0x30
 80a1a70:	2306      	movs	r3, #6
 80a1a72:	4641      	mov	r1, r8
 80a1a74:	a803      	add	r0, sp, #12
 80a1a76:	f7ff fdf9 	bl	80a166c <mbedtls_asn1_get_tag>
 80a1a7a:	2800      	cmp	r0, #0
 80a1a7c:	d16b      	bne.n	80a1b56 <mbedtls_x509_get_rsassa_pss_params+0x1ba>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    md_oid.p = p;
 80a1a7e:	9a03      	ldr	r2, [sp, #12]
    p += md_oid.len;
 80a1a80:	9b0c      	ldr	r3, [sp, #48]	; 0x30

    /* Get md_alg from md_oid */
    if( ( ret = mbedtls_oid_get_md_alg( &md_oid, md_alg ) ) != 0 )
 80a1a82:	4631      	mov	r1, r6

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &md_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    md_oid.p = p;
    p += md_oid.len;
 80a1a84:	4413      	add	r3, r2

    /* Get md_alg from md_oid */
    if( ( ret = mbedtls_oid_get_md_alg( &md_oid, md_alg ) ) != 0 )
 80a1a86:	4648      	mov	r0, r9
    md_oid.tag = *p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &md_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    md_oid.p = p;
 80a1a88:	920d      	str	r2, [sp, #52]	; 0x34
    p += md_oid.len;
 80a1a8a:	9303      	str	r3, [sp, #12]

    /* Get md_alg from md_oid */
    if( ( ret = mbedtls_oid_get_md_alg( &md_oid, md_alg ) ) != 0 )
 80a1a8c:	f003 fbb2 	bl	80a51f4 <mbedtls_oid_get_md_alg>
 80a1a90:	2800      	cmp	r0, #0
 80a1a92:	d160      	bne.n	80a1b56 <mbedtls_x509_get_rsassa_pss_params+0x1ba>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    /* Make sure params is absent of NULL */
    if( p == end )
 80a1a94:	9b03      	ldr	r3, [sp, #12]
 80a1a96:	4598      	cmp	r8, r3
 80a1a98:	d010      	beq.n	80a1abc <mbedtls_x509_get_rsassa_pss_params+0x120>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_NULL ) ) != 0 || len != 0 )
 80a1a9a:	2305      	movs	r3, #5
 80a1a9c:	aa04      	add	r2, sp, #16
 80a1a9e:	4641      	mov	r1, r8
 80a1aa0:	a803      	add	r0, sp, #12
 80a1aa2:	f7ff fde3 	bl	80a166c <mbedtls_asn1_get_tag>
 80a1aa6:	2800      	cmp	r0, #0
 80a1aa8:	d155      	bne.n	80a1b56 <mbedtls_x509_get_rsassa_pss_params+0x1ba>
 80a1aaa:	9b04      	ldr	r3, [sp, #16]
 80a1aac:	2b00      	cmp	r3, #0
 80a1aae:	d152      	bne.n	80a1b56 <mbedtls_x509_get_rsassa_pss_params+0x1ba>
 80a1ab0:	e001      	b.n	80a1ab6 <mbedtls_x509_get_rsassa_pss_params+0x11a>
    p = (unsigned char *) alg->p;
    end = p + alg->len;

    if( p >= end )
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a1ab2:	482d      	ldr	r0, [pc, #180]	; (80a1b68 <mbedtls_x509_get_rsassa_pss_params+0x1cc>)
 80a1ab4:	e053      	b.n	80a1b5e <mbedtls_x509_get_rsassa_pss_params+0x1c2>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_NULL ) ) != 0 || len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    if( p != end )
 80a1ab6:	9b03      	ldr	r3, [sp, #12]
 80a1ab8:	4598      	cmp	r8, r3
 80a1aba:	d141      	bne.n	80a1b40 <mbedtls_x509_get_rsassa_pss_params+0x1a4>

        /* Parse HashAlgorithm */
        if( ( ret = x509_get_hash_alg( &alg_params, mgf_md ) ) != 0 )
            return( ret );

        if( p != end2 )
 80a1abc:	9b01      	ldr	r3, [sp, #4]
 80a1abe:	429f      	cmp	r7, r3
 80a1ac0:	d003      	beq.n	80a1aca <mbedtls_x509_get_rsassa_pss_params+0x12e>
 80a1ac2:	e03d      	b.n	80a1b40 <mbedtls_x509_get_rsassa_pss_params+0x1a4>
            return( MBEDTLS_ERR_X509_INVALID_ALG +
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80a1ac4:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80a1ac8:	d13c      	bne.n	80a1b44 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    if( p == end )
 80a1aca:	9b01      	ldr	r3, [sp, #4]
 80a1acc:	429c      	cmp	r4, r3
 80a1ace:	d03c      	beq.n	80a1b4a <mbedtls_x509_get_rsassa_pss_params+0x1ae>
        return( 0 );

    /*
     * salt_len
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a1ad0:	23a2      	movs	r3, #162	; 0xa2
 80a1ad2:	aa02      	add	r2, sp, #8
 80a1ad4:	4621      	mov	r1, r4
 80a1ad6:	a801      	add	r0, sp, #4
 80a1ad8:	f7ff fdc8 	bl	80a166c <mbedtls_asn1_get_tag>
 80a1adc:	b960      	cbnz	r0, 80a1af8 <mbedtls_x509_get_rsassa_pss_params+0x15c>
                    MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 2 ) ) == 0 )
    {
        end2 = p + len;
 80a1ade:	9b02      	ldr	r3, [sp, #8]
 80a1ae0:	9e01      	ldr	r6, [sp, #4]

        if( ( ret = mbedtls_asn1_get_int( &p, end2, salt_len ) ) != 0 )
 80a1ae2:	462a      	mov	r2, r5
     * salt_len
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                    MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 2 ) ) == 0 )
    {
        end2 = p + len;
 80a1ae4:	441e      	add	r6, r3

        if( ( ret = mbedtls_asn1_get_int( &p, end2, salt_len ) ) != 0 )
 80a1ae6:	4631      	mov	r1, r6
 80a1ae8:	a801      	add	r0, sp, #4
 80a1aea:	f7ff fdec 	bl	80a16c6 <mbedtls_asn1_get_int>
 80a1aee:	bb48      	cbnz	r0, 80a1b44 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
            return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

        if( p != end2 )
 80a1af0:	9b01      	ldr	r3, [sp, #4]
 80a1af2:	429e      	cmp	r6, r3
 80a1af4:	d003      	beq.n	80a1afe <mbedtls_x509_get_rsassa_pss_params+0x162>
 80a1af6:	e023      	b.n	80a1b40 <mbedtls_x509_get_rsassa_pss_params+0x1a4>
            return( MBEDTLS_ERR_X509_INVALID_ALG +
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80a1af8:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80a1afc:	d122      	bne.n	80a1b44 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    if( p == end )
 80a1afe:	9b01      	ldr	r3, [sp, #4]
 80a1b00:	429c      	cmp	r4, r3
 80a1b02:	d022      	beq.n	80a1b4a <mbedtls_x509_get_rsassa_pss_params+0x1ae>
        return( 0 );

    /*
     * trailer_field (if present, must be 1)
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a1b04:	23a3      	movs	r3, #163	; 0xa3
 80a1b06:	aa02      	add	r2, sp, #8
 80a1b08:	4621      	mov	r1, r4
 80a1b0a:	a801      	add	r0, sp, #4
 80a1b0c:	f7ff fdae 	bl	80a166c <mbedtls_asn1_get_tag>
 80a1b10:	b980      	cbnz	r0, 80a1b34 <mbedtls_x509_get_rsassa_pss_params+0x198>
                    MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 3 ) ) == 0 )
    {
        int trailer_field;

        end2 = p + len;
 80a1b12:	9b02      	ldr	r3, [sp, #8]
 80a1b14:	9d01      	ldr	r5, [sp, #4]

        if( ( ret = mbedtls_asn1_get_int( &p, end2, &trailer_field ) ) != 0 )
 80a1b16:	aa0b      	add	r2, sp, #44	; 0x2c
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                    MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 3 ) ) == 0 )
    {
        int trailer_field;

        end2 = p + len;
 80a1b18:	441d      	add	r5, r3

        if( ( ret = mbedtls_asn1_get_int( &p, end2, &trailer_field ) ) != 0 )
 80a1b1a:	4629      	mov	r1, r5
 80a1b1c:	a801      	add	r0, sp, #4
 80a1b1e:	f7ff fdd2 	bl	80a16c6 <mbedtls_asn1_get_int>
 80a1b22:	b978      	cbnz	r0, 80a1b44 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
            return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

        if( p != end2 )
 80a1b24:	9b01      	ldr	r3, [sp, #4]
 80a1b26:	429d      	cmp	r5, r3
 80a1b28:	d10a      	bne.n	80a1b40 <mbedtls_x509_get_rsassa_pss_params+0x1a4>
            return( MBEDTLS_ERR_X509_INVALID_ALG +
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

        if( trailer_field != 1 )
 80a1b2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a1b2c:	2b01      	cmp	r3, #1
 80a1b2e:	d004      	beq.n	80a1b3a <mbedtls_x509_get_rsassa_pss_params+0x19e>
            return( MBEDTLS_ERR_X509_INVALID_ALG );
 80a1b30:	480e      	ldr	r0, [pc, #56]	; (80a1b6c <mbedtls_x509_get_rsassa_pss_params+0x1d0>)
 80a1b32:	e014      	b.n	80a1b5e <mbedtls_x509_get_rsassa_pss_params+0x1c2>
    }
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80a1b34:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80a1b38:	d104      	bne.n	80a1b44 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

    if( p != end )
 80a1b3a:	9b01      	ldr	r3, [sp, #4]
 80a1b3c:	429c      	cmp	r4, r3
 80a1b3e:	d004      	beq.n	80a1b4a <mbedtls_x509_get_rsassa_pss_params+0x1ae>
        if( ( ret = mbedtls_asn1_get_int( &p, end2, &trailer_field ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_ALG + ret );

        if( p != end2 )
            return( MBEDTLS_ERR_X509_INVALID_ALG +
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a1b40:	480b      	ldr	r0, [pc, #44]	; (80a1b70 <mbedtls_x509_get_rsassa_pss_params+0x1d4>)
 80a1b42:	e00c      	b.n	80a1b5e <mbedtls_x509_get_rsassa_pss_params+0x1c2>

        if( trailer_field != 1 )
            return( MBEDTLS_ERR_X509_INVALID_ALG );
    }
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 80a1b44:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
 80a1b48:	e009      	b.n	80a1b5e <mbedtls_x509_get_rsassa_pss_params+0x1c2>

    if( p != end )
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 80a1b4a:	2000      	movs	r0, #0
 80a1b4c:	e007      	b.n	80a1b5e <mbedtls_x509_get_rsassa_pss_params+0x1c2>
    *salt_len = 20;

    /* Make sure params is a SEQUENCE and setup bounds */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80a1b4e:	4809      	ldr	r0, [pc, #36]	; (80a1b74 <mbedtls_x509_get_rsassa_pss_params+0x1d8>)
 80a1b50:	e005      	b.n	80a1b5e <mbedtls_x509_get_rsassa_pss_params+0x1c2>
            return( ret );

        /* Only MFG1 is recognised for now */
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_MGF1, &alg_id ) != 0 )
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE +
                    MBEDTLS_ERR_OID_NOT_FOUND );
 80a1b52:	4809      	ldr	r0, [pc, #36]	; (80a1b78 <mbedtls_x509_get_rsassa_pss_params+0x1dc>)
 80a1b54:	e003      	b.n	80a1b5e <mbedtls_x509_get_rsassa_pss_params+0x1c2>
    /* Make sure params is absent of NULL */
    if( p == end )
        return( 0 );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_NULL ) ) != 0 || len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 80a1b56:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_MGF1, &alg_id ) != 0 )
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE +
                    MBEDTLS_ERR_OID_NOT_FOUND );

        /* Parse HashAlgorithm */
        if( ( ret = x509_get_hash_alg( &alg_params, mgf_md ) ) != 0 )
 80a1b5a:	2800      	cmp	r0, #0
 80a1b5c:	d0ae      	beq.n	80a1abc <mbedtls_x509_get_rsassa_pss_params+0x120>
    if( p != end )
        return( MBEDTLS_ERR_X509_INVALID_ALG +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 80a1b5e:	b00f      	add	sp, #60	; 0x3c
 80a1b60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1b64:	080b3ac8 	.word	0x080b3ac8
 80a1b68:	ffffdca0 	.word	0xffffdca0
 80a1b6c:	ffffdd00 	.word	0xffffdd00
 80a1b70:	ffffdc9a 	.word	0xffffdc9a
 80a1b74:	ffffdc9e 	.word	0xffffdc9e
 80a1b78:	ffffdf52 	.word	0xffffdf52

080a1b7c <mbedtls_x509_get_name>:
 * same set so that they are "merged" together in the functions that consume
 * this list, eg mbedtls_x509_dn_gets().
 */
int mbedtls_x509_get_name( unsigned char **p, const unsigned char *end,
                   mbedtls_x509_name *cur )
{
 80a1b7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a1b80:	4604      	mov	r4, r0
 80a1b82:	460f      	mov	r7, r1
 80a1b84:	4691      	mov	r9, r2
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 80a1b86:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80a1c78 <mbedtls_x509_get_name+0xfc>
    while( 1 )
    {
        /*
         * parse SET
         */
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
 80a1b8a:	2331      	movs	r3, #49	; 0x31
 80a1b8c:	466a      	mov	r2, sp
 80a1b8e:	4639      	mov	r1, r7
 80a1b90:	4620      	mov	r0, r4
 80a1b92:	f7ff fd6b 	bl	80a166c <mbedtls_asn1_get_tag>
 80a1b96:	b110      	cbz	r0, 80a1b9e <mbedtls_x509_get_name+0x22>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SET ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 80a1b98:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
 80a1b9c:	e061      	b.n	80a1c62 <mbedtls_x509_get_name+0xe6>

        end_set  = *p + set_len;
 80a1b9e:	464d      	mov	r5, r9
 80a1ba0:	6826      	ldr	r6, [r4, #0]
 80a1ba2:	9b00      	ldr	r3, [sp, #0]
 80a1ba4:	441e      	add	r6, r3
    int ret;
    size_t len;
    mbedtls_x509_buf *oid;
    mbedtls_x509_buf *val;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a1ba6:	2330      	movs	r3, #48	; 0x30
 80a1ba8:	aa01      	add	r2, sp, #4
 80a1baa:	4631      	mov	r1, r6
 80a1bac:	4620      	mov	r0, r4
 80a1bae:	f7ff fd5d 	bl	80a166c <mbedtls_asn1_get_tag>
 80a1bb2:	bb68      	cbnz	r0, 80a1c10 <mbedtls_x509_get_name+0x94>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    end = *p + len;
 80a1bb4:	9a01      	ldr	r2, [sp, #4]
 80a1bb6:	6823      	ldr	r3, [r4, #0]

    if( ( end - *p ) < 1 )
 80a1bb8:	2a00      	cmp	r2, #0

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    end = *p + len;
 80a1bba:	eb03 0902 	add.w	r9, r3, r2

    if( ( end - *p ) < 1 )
 80a1bbe:	dc01      	bgt.n	80a1bc4 <mbedtls_x509_get_name+0x48>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a1bc0:	4829      	ldr	r0, [pc, #164]	; (80a1c68 <mbedtls_x509_get_name+0xec>)
 80a1bc2:	e04e      	b.n	80a1c62 <mbedtls_x509_get_name+0xe6>

    oid = &cur->oid;
    oid->tag = **p;
 80a1bc4:	462a      	mov	r2, r5
 80a1bc6:	781b      	ldrb	r3, [r3, #0]

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 80a1bc8:	4649      	mov	r1, r9
    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    oid = &cur->oid;
    oid->tag = **p;
 80a1bca:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 80a1bce:	4620      	mov	r0, r4
 80a1bd0:	2306      	movs	r3, #6
 80a1bd2:	f7ff fd4b 	bl	80a166c <mbedtls_asn1_get_tag>
 80a1bd6:	b9d8      	cbnz	r0, 80a1c10 <mbedtls_x509_get_name+0x94>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
 80a1bd8:	6823      	ldr	r3, [r4, #0]
    *p += oid->len;
 80a1bda:	6869      	ldr	r1, [r5, #4]
    oid->tag = **p;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
 80a1bdc:	60ab      	str	r3, [r5, #8]
    *p += oid->len;
 80a1bde:	6820      	ldr	r0, [r4, #0]
 80a1be0:	1843      	adds	r3, r0, r1

    if( ( end - *p ) < 1 )
 80a1be2:	ebc3 0209 	rsb	r2, r3, r9
 80a1be6:	2a00      	cmp	r2, #0

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
    *p += oid->len;
 80a1be8:	6023      	str	r3, [r4, #0]

    if( ( end - *p ) < 1 )
 80a1bea:	dde9      	ble.n	80a1bc0 <mbedtls_x509_get_name+0x44>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
 80a1bec:	5c42      	ldrb	r2, [r0, r1]
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 80a1bee:	2a1e      	cmp	r2, #30
 80a1bf0:	d81c      	bhi.n	80a1c2c <mbedtls_x509_get_name+0xb0>
 80a1bf2:	fa28 f202 	lsr.w	r2, r8, r2
 80a1bf6:	07d2      	lsls	r2, r2, #31
 80a1bf8:	d518      	bpl.n	80a1c2c <mbedtls_x509_get_name+0xb0>
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    val = &cur->val;
    val->tag = *(*p)++;
 80a1bfa:	3301      	adds	r3, #1
 80a1bfc:	6023      	str	r3, [r4, #0]
 80a1bfe:	5c43      	ldrb	r3, [r0, r1]

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 80a1c00:	f105 0210 	add.w	r2, r5, #16
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    val = &cur->val;
    val->tag = *(*p)++;
 80a1c04:	60eb      	str	r3, [r5, #12]

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 80a1c06:	4649      	mov	r1, r9
 80a1c08:	4620      	mov	r0, r4
 80a1c0a:	f7ff fcdd 	bl	80a15c8 <mbedtls_asn1_get_len>
 80a1c0e:	b118      	cbz	r0, 80a1c18 <mbedtls_x509_get_name+0x9c>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 80a1c10:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380

        end_set  = *p + set_len;

        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
 80a1c14:	b170      	cbz	r0, 80a1c34 <mbedtls_x509_get_name+0xb8>
 80a1c16:	e024      	b.n	80a1c62 <mbedtls_x509_get_name+0xe6>
    val->tag = *(*p)++;

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    val->p = *p;
 80a1c18:	6823      	ldr	r3, [r4, #0]
 80a1c1a:	616b      	str	r3, [r5, #20]
    *p += val->len;
 80a1c1c:	6822      	ldr	r2, [r4, #0]
 80a1c1e:	692b      	ldr	r3, [r5, #16]
 80a1c20:	4413      	add	r3, r2

    if( *p != end )
 80a1c22:	4599      	cmp	r9, r3

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    val->p = *p;
    *p += val->len;
 80a1c24:	6023      	str	r3, [r4, #0]

    if( *p != end )
 80a1c26:	d103      	bne.n	80a1c30 <mbedtls_x509_get_name+0xb4>
    {
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }

    cur->next = NULL;
 80a1c28:	61a8      	str	r0, [r5, #24]
 80a1c2a:	e003      	b.n	80a1c34 <mbedtls_x509_get_name+0xb8>
    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80a1c2c:	480f      	ldr	r0, [pc, #60]	; (80a1c6c <mbedtls_x509_get_name+0xf0>)
 80a1c2e:	e018      	b.n	80a1c62 <mbedtls_x509_get_name+0xe6>
    *p += val->len;

    if( *p != end )
    {
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a1c30:	480f      	ldr	r0, [pc, #60]	; (80a1c70 <mbedtls_x509_get_name+0xf4>)
 80a1c32:	e016      	b.n	80a1c62 <mbedtls_x509_get_name+0xe6>
        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
                return( ret );

            if( *p == end_set )
 80a1c34:	6823      	ldr	r3, [r4, #0]
 80a1c36:	429e      	cmp	r6, r3
 80a1c38:	d008      	beq.n	80a1c4c <mbedtls_x509_get_name+0xd0>
                break;

            /* Mark this item as being no the only one in a set */
            cur->next_merged = 1;
 80a1c3a:	2001      	movs	r0, #1
 80a1c3c:	7728      	strb	r0, [r5, #28]

            cur->next = (mbedtls_asn1_named_data *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 80a1c3e:	2120      	movs	r1, #32
 80a1c40:	f010 fcbc 	bl	80b25bc <calloc>
 80a1c44:	61a8      	str	r0, [r5, #24]

            if( cur->next == NULL )
 80a1c46:	b158      	cbz	r0, 80a1c60 <mbedtls_x509_get_name+0xe4>
 80a1c48:	4605      	mov	r5, r0
 80a1c4a:	e7ac      	b.n	80a1ba6 <mbedtls_x509_get_name+0x2a>
        }

        /*
         * continue until end of SEQUENCE is reached
         */
        if( *p == end )
 80a1c4c:	42b7      	cmp	r7, r6
 80a1c4e:	d008      	beq.n	80a1c62 <mbedtls_x509_get_name+0xe6>
            return( 0 );

        cur->next = (mbedtls_asn1_named_data *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 80a1c50:	2120      	movs	r1, #32
 80a1c52:	2001      	movs	r0, #1
 80a1c54:	f010 fcb2 	bl	80b25bc <calloc>
 80a1c58:	4681      	mov	r9, r0
 80a1c5a:	61a8      	str	r0, [r5, #24]

        if( cur->next == NULL )
 80a1c5c:	2800      	cmp	r0, #0
 80a1c5e:	d194      	bne.n	80a1b8a <mbedtls_x509_get_name+0xe>
            cur->next_merged = 1;

            cur->next = (mbedtls_asn1_named_data *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 80a1c60:	4804      	ldr	r0, [pc, #16]	; (80a1c74 <mbedtls_x509_get_name+0xf8>)
        if( cur->next == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        cur = cur->next;
    }
}
 80a1c62:	b003      	add	sp, #12
 80a1c64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1c68:	ffffdc20 	.word	0xffffdc20
 80a1c6c:	ffffdc1e 	.word	0xffffdc1e
 80a1c70:	ffffdc1a 	.word	0xffffdc1a
 80a1c74:	ffffd780 	.word	0xffffd780
 80a1c78:	50581008 	.word	0x50581008

080a1c7c <mbedtls_x509_get_time>:
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 80a1c7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 80a1c7e:	6803      	ldr	r3, [r0, #0]
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 80a1c80:	4614      	mov	r4, r2
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 80a1c82:	1aca      	subs	r2, r1, r3
 80a1c84:	2a00      	cmp	r2, #0
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 80a1c86:	4605      	mov	r5, r0
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 80a1c88:	f340 80a0 	ble.w	80a1dcc <mbedtls_x509_get_time+0x150>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;
 80a1c8c:	781a      	ldrb	r2, [r3, #0]

    if( tag == MBEDTLS_ASN1_UTC_TIME )
 80a1c8e:	2a17      	cmp	r2, #23
 80a1c90:	d004      	beq.n	80a1c9c <mbedtls_x509_get_time+0x20>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
 80a1c92:	2a18      	cmp	r2, #24
 80a1c94:	f040 809c 	bne.w	80a1dd0 <mbedtls_x509_get_time+0x154>
        year_len = 4;
 80a1c98:	2704      	movs	r7, #4
 80a1c9a:	e000      	b.n	80a1c9e <mbedtls_x509_get_time+0x22>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;

    if( tag == MBEDTLS_ASN1_UTC_TIME )
        year_len = 2;
 80a1c9c:	2702      	movs	r7, #2
        year_len = 4;
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 80a1c9e:	3301      	adds	r3, #1
 80a1ca0:	602b      	str	r3, [r5, #0]
    ret = mbedtls_asn1_get_len( p, end, &len );
 80a1ca2:	aa01      	add	r2, sp, #4
 80a1ca4:	4628      	mov	r0, r5
 80a1ca6:	f7ff fc8f 	bl	80a15c8 <mbedtls_asn1_get_len>

    if( ret != 0 )
 80a1caa:	b110      	cbz	r0, 80a1cb2 <mbedtls_x509_get_time+0x36>
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 80a1cac:	f5a0 5010 	sub.w	r0, r0, #9216	; 0x2400
 80a1cb0:	e091      	b.n	80a1dd6 <mbedtls_x509_get_time+0x15a>

    return x509_parse_time( p, len, year_len, tm );
 80a1cb2:	9e01      	ldr	r6, [sp, #4]
    int ret;

    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
 80a1cb4:	f107 0308 	add.w	r3, r7, #8
 80a1cb8:	429e      	cmp	r6, r3
 80a1cba:	f0c0 808b 	bcc.w	80a1dd4 <mbedtls_x509_get_time+0x158>
    len -= yearlen + 8;

    /*
     * Parse year, month, day, hour, minute
     */
    CHECK( x509_parse_int( p, yearlen, &tm->year ) );
 80a1cbe:	4622      	mov	r2, r4
 80a1cc0:	4639      	mov	r1, r7
 80a1cc2:	4628      	mov	r0, r5
 80a1cc4:	f7ff fe16 	bl	80a18f4 <_ZL14x509_parse_intPPhjPi>
 80a1cc8:	2800      	cmp	r0, #0
 80a1cca:	f040 8084 	bne.w	80a1dd6 <mbedtls_x509_get_time+0x15a>
    if ( 2 == yearlen )
 80a1cce:	2f02      	cmp	r7, #2
 80a1cd0:	d108      	bne.n	80a1ce4 <mbedtls_x509_get_time+0x68>
    {
        if ( tm->year < 50 )
 80a1cd2:	6823      	ldr	r3, [r4, #0]
 80a1cd4:	2b31      	cmp	r3, #49	; 0x31
            tm->year += 100;
 80a1cd6:	bfdc      	itt	le
 80a1cd8:	3364      	addle	r3, #100	; 0x64
 80a1cda:	6023      	strle	r3, [r4, #0]

        tm->year += 1900;
 80a1cdc:	6823      	ldr	r3, [r4, #0]
 80a1cde:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80a1ce2:	6023      	str	r3, [r4, #0]
    }

    CHECK( x509_parse_int( p, 2, &tm->mon ) );
 80a1ce4:	1d22      	adds	r2, r4, #4
 80a1ce6:	2102      	movs	r1, #2
 80a1ce8:	4628      	mov	r0, r5
 80a1cea:	f7ff fe03 	bl	80a18f4 <_ZL14x509_parse_intPPhjPi>
 80a1cee:	2800      	cmp	r0, #0
 80a1cf0:	d171      	bne.n	80a1dd6 <mbedtls_x509_get_time+0x15a>
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 80a1cf2:	f104 0208 	add.w	r2, r4, #8
 80a1cf6:	2102      	movs	r1, #2
 80a1cf8:	4628      	mov	r0, r5
 80a1cfa:	f7ff fdfb 	bl	80a18f4 <_ZL14x509_parse_intPPhjPi>
 80a1cfe:	2800      	cmp	r0, #0
 80a1d00:	d169      	bne.n	80a1dd6 <mbedtls_x509_get_time+0x15a>
    CHECK( x509_parse_int( p, 2, &tm->hour ) );
 80a1d02:	f104 020c 	add.w	r2, r4, #12
 80a1d06:	2102      	movs	r1, #2
 80a1d08:	4628      	mov	r0, r5
 80a1d0a:	f7ff fdf3 	bl	80a18f4 <_ZL14x509_parse_intPPhjPi>
 80a1d0e:	2800      	cmp	r0, #0
 80a1d10:	d161      	bne.n	80a1dd6 <mbedtls_x509_get_time+0x15a>
    CHECK( x509_parse_int( p, 2, &tm->min ) );
 80a1d12:	f104 0210 	add.w	r2, r4, #16
 80a1d16:	2102      	movs	r1, #2
 80a1d18:	4628      	mov	r0, r5
 80a1d1a:	f7ff fdeb 	bl	80a18f4 <_ZL14x509_parse_intPPhjPi>
 80a1d1e:	2800      	cmp	r0, #0
 80a1d20:	d159      	bne.n	80a1dd6 <mbedtls_x509_get_time+0x15a>
    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
        return ( MBEDTLS_ERR_X509_INVALID_DATE );
    len -= yearlen + 8;
 80a1d22:	1bf6      	subs	r6, r6, r7
    CHECK( x509_parse_int( p, 2, &tm->min ) );

    /*
     * Parse seconds if present
     */
    if ( len >= 2 )
 80a1d24:	f1a6 0308 	sub.w	r3, r6, #8
 80a1d28:	2b01      	cmp	r3, #1
 80a1d2a:	d953      	bls.n	80a1dd4 <mbedtls_x509_get_time+0x158>
    {
        CHECK( x509_parse_int( p, 2, &tm->sec ) );
 80a1d2c:	f104 0214 	add.w	r2, r4, #20
 80a1d30:	2102      	movs	r1, #2
 80a1d32:	4628      	mov	r0, r5
 80a1d34:	f7ff fdde 	bl	80a18f4 <_ZL14x509_parse_intPPhjPi>
 80a1d38:	2800      	cmp	r0, #0
 80a1d3a:	d14c      	bne.n	80a1dd6 <mbedtls_x509_get_time+0x15a>
        len -= 2;
 80a1d3c:	f1a6 030a 	sub.w	r3, r6, #10
        return ( MBEDTLS_ERR_X509_INVALID_DATE );

    /*
     * Parse trailing 'Z' if present
     */
    if ( 1 == len && 'Z' == **p )
 80a1d40:	2b01      	cmp	r3, #1
 80a1d42:	d107      	bne.n	80a1d54 <mbedtls_x509_get_time+0xd8>
 80a1d44:	682b      	ldr	r3, [r5, #0]
 80a1d46:	781a      	ldrb	r2, [r3, #0]
 80a1d48:	2a5a      	cmp	r2, #90	; 0x5a
 80a1d4a:	d143      	bne.n	80a1dd4 <mbedtls_x509_get_time+0x158>
    {
        (*p)++;
 80a1d4c:	3301      	adds	r3, #1
 80a1d4e:	602b      	str	r3, [r5, #0]
        len--;
 80a1d50:	f1a6 030b 	sub.w	r3, r6, #11
    }

    /*
     * We should have parsed all characters at this point
     */
    if ( 0 != len )
 80a1d54:	2b00      	cmp	r3, #0
 80a1d56:	d13d      	bne.n	80a1dd4 <mbedtls_x509_get_time+0x158>
static int x509_date_is_valid(const mbedtls_x509_time *t )
{
    int ret = MBEDTLS_ERR_X509_INVALID_DATE;
    int month_len;

    CHECK_RANGE( 0, 9999, t->year );
 80a1d58:	f242 720f 	movw	r2, #9999	; 0x270f
 80a1d5c:	6823      	ldr	r3, [r4, #0]
 80a1d5e:	4293      	cmp	r3, r2
 80a1d60:	d838      	bhi.n	80a1dd4 <mbedtls_x509_get_time+0x158>
    CHECK_RANGE( 0, 23,   t->hour );
 80a1d62:	68e2      	ldr	r2, [r4, #12]
 80a1d64:	2a17      	cmp	r2, #23
 80a1d66:	d835      	bhi.n	80a1dd4 <mbedtls_x509_get_time+0x158>
    CHECK_RANGE( 0, 59,   t->min  );
 80a1d68:	6922      	ldr	r2, [r4, #16]
 80a1d6a:	2a3b      	cmp	r2, #59	; 0x3b
 80a1d6c:	d832      	bhi.n	80a1dd4 <mbedtls_x509_get_time+0x158>
    CHECK_RANGE( 0, 59,   t->sec  );
 80a1d6e:	6962      	ldr	r2, [r4, #20]
 80a1d70:	2a3b      	cmp	r2, #59	; 0x3b
 80a1d72:	d82f      	bhi.n	80a1dd4 <mbedtls_x509_get_time+0x158>
 80a1d74:	6861      	ldr	r1, [r4, #4]
 80a1d76:	290c      	cmp	r1, #12
 80a1d78:	d82c      	bhi.n	80a1dd4 <mbedtls_x509_get_time+0x158>
 80a1d7a:	2201      	movs	r2, #1
 80a1d7c:	408a      	lsls	r2, r1
 80a1d7e:	f241 51aa 	movw	r1, #5546	; 0x15aa
 80a1d82:	4011      	ands	r1, r2
 80a1d84:	b9b9      	cbnz	r1, 80a1db6 <mbedtls_x509_get_time+0x13a>
 80a1d86:	f412 6f25 	tst.w	r2, #2640	; 0xa50
 80a1d8a:	d116      	bne.n	80a1dba <mbedtls_x509_get_time+0x13e>
 80a1d8c:	0751      	lsls	r1, r2, #29
 80a1d8e:	d521      	bpl.n	80a1dd4 <mbedtls_x509_get_time+0x158>
            break;
        case 4: case 6: case 9: case 11:
            month_len = 30;
            break;
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
 80a1d90:	079a      	lsls	r2, r3, #30
 80a1d92:	d105      	bne.n	80a1da0 <mbedtls_x509_get_time+0x124>
 80a1d94:	2164      	movs	r1, #100	; 0x64
 80a1d96:	fb93 f2f1 	sdiv	r2, r3, r1
 80a1d9a:	fb01 3212 	mls	r2, r1, r2, r3
 80a1d9e:	b972      	cbnz	r2, 80a1dbe <mbedtls_x509_get_time+0x142>
 80a1da0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a1da4:	fb93 f2f1 	sdiv	r2, r3, r1
 80a1da8:	fb01 3312 	mls	r3, r1, r2, r3
                !( t->year % 400 ) )
                month_len = 29;
            else
                month_len = 28;
 80a1dac:	2b00      	cmp	r3, #0
 80a1dae:	bf0c      	ite	eq
 80a1db0:	231d      	moveq	r3, #29
 80a1db2:	231c      	movne	r3, #28
 80a1db4:	e004      	b.n	80a1dc0 <mbedtls_x509_get_time+0x144>
    CHECK_RANGE( 0, 59,   t->sec  );

    switch( t->mon )
    {
        case 1: case 3: case 5: case 7: case 8: case 10: case 12:
            month_len = 31;
 80a1db6:	231f      	movs	r3, #31
 80a1db8:	e002      	b.n	80a1dc0 <mbedtls_x509_get_time+0x144>
            break;
        case 4: case 6: case 9: case 11:
            month_len = 30;
 80a1dba:	231e      	movs	r3, #30
 80a1dbc:	e000      	b.n	80a1dc0 <mbedtls_x509_get_time+0x144>
            break;
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
                !( t->year % 400 ) )
                month_len = 29;
 80a1dbe:	231d      	movs	r3, #29
                month_len = 28;
            break;
        default:
            return( ret );
    }
    CHECK_RANGE( 1, month_len, t->day );
 80a1dc0:	68a2      	ldr	r2, [r4, #8]
 80a1dc2:	2a00      	cmp	r2, #0
 80a1dc4:	dd06      	ble.n	80a1dd4 <mbedtls_x509_get_time+0x158>
 80a1dc6:	429a      	cmp	r2, r3
 80a1dc8:	dd05      	ble.n	80a1dd6 <mbedtls_x509_get_time+0x15a>
 80a1dca:	e003      	b.n	80a1dd4 <mbedtls_x509_get_time+0x158>
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a1dcc:	4803      	ldr	r0, [pc, #12]	; (80a1ddc <mbedtls_x509_get_time+0x160>)
 80a1dce:	e002      	b.n	80a1dd6 <mbedtls_x509_get_time+0x15a>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
        year_len = 4;
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80a1dd0:	4803      	ldr	r0, [pc, #12]	; (80a1de0 <mbedtls_x509_get_time+0x164>)
 80a1dd2:	e000      	b.n	80a1dd6 <mbedtls_x509_get_time+0x15a>
 80a1dd4:	4803      	ldr	r0, [pc, #12]	; (80a1de4 <mbedtls_x509_get_time+0x168>)

    if( ret != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    return x509_parse_time( p, len, year_len, tm );
}
 80a1dd6:	b003      	add	sp, #12
 80a1dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1dda:	bf00      	nop
 80a1ddc:	ffffdba0 	.word	0xffffdba0
 80a1de0:	ffffdb9e 	.word	0xffffdb9e
 80a1de4:	ffffdc00 	.word	0xffffdc00

080a1de8 <mbedtls_x509_get_sig>:

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 80a1de8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 80a1dea:	6803      	ldr	r3, [r0, #0]

    return x509_parse_time( p, len, year_len, tm );
}

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 80a1dec:	4615      	mov	r5, r2
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 80a1dee:	1aca      	subs	r2, r1, r3
 80a1df0:	2a00      	cmp	r2, #0

    return x509_parse_time( p, len, year_len, tm );
}

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 80a1df2:	4604      	mov	r4, r0
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 80a1df4:	dd10      	ble.n	80a1e18 <mbedtls_x509_get_sig+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 80a1df6:	aa01      	add	r2, sp, #4

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;
 80a1df8:	781e      	ldrb	r6, [r3, #0]

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 80a1dfa:	f7ff fcc0 	bl	80a177e <mbedtls_asn1_get_bitstring_null>
 80a1dfe:	b110      	cbz	r0, 80a1e06 <mbedtls_x509_get_sig+0x1e>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
 80a1e00:	f5a0 5012 	sub.w	r0, r0, #9344	; 0x2480
 80a1e04:	e009      	b.n	80a1e1a <mbedtls_x509_get_sig+0x32>

    sig->tag = tag_type;
    sig->len = len;
 80a1e06:	9b01      	ldr	r3, [sp, #4]
    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );

    sig->tag = tag_type;
 80a1e08:	602e      	str	r6, [r5, #0]
    sig->len = len;
 80a1e0a:	606b      	str	r3, [r5, #4]
    sig->p = *p;
 80a1e0c:	6822      	ldr	r2, [r4, #0]
 80a1e0e:	60aa      	str	r2, [r5, #8]

    *p += len;
 80a1e10:	6822      	ldr	r2, [r4, #0]
 80a1e12:	4413      	add	r3, r2
 80a1e14:	6023      	str	r3, [r4, #0]

    return( 0 );
 80a1e16:	e000      	b.n	80a1e1a <mbedtls_x509_get_sig+0x32>
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a1e18:	4801      	ldr	r0, [pc, #4]	; (80a1e20 <mbedtls_x509_get_sig+0x38>)
    sig->p = *p;

    *p += len;

    return( 0 );
}
 80a1e1a:	b002      	add	sp, #8
 80a1e1c:	bd70      	pop	{r4, r5, r6, pc}
 80a1e1e:	bf00      	nop
 80a1e20:	ffffdb20 	.word	0xffffdb20

080a1e24 <mbedtls_x509_get_sig_alg>:
 * Get signature algorithm from alg OID and optional parameters
 */
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts )
{
 80a1e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1e28:	9f06      	ldr	r7, [sp, #24]
 80a1e2a:	461d      	mov	r5, r3
    int ret;

    if( *sig_opts != NULL )
 80a1e2c:	683b      	ldr	r3, [r7, #0]
 * Get signature algorithm from alg OID and optional parameters
 */
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts )
{
 80a1e2e:	460e      	mov	r6, r1
 80a1e30:	4690      	mov	r8, r2
    int ret;

    if( *sig_opts != NULL )
 80a1e32:	bb43      	cbnz	r3, 80a1e86 <mbedtls_x509_get_sig_alg+0x62>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
 80a1e34:	462a      	mov	r2, r5
 80a1e36:	4641      	mov	r1, r8
 80a1e38:	f003 f97e 	bl	80a5138 <mbedtls_oid_get_sig_alg>
 80a1e3c:	b110      	cbz	r0, 80a1e44 <mbedtls_x509_get_sig_alg+0x20>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
 80a1e3e:	f5a0 5418 	sub.w	r4, r0, #9728	; 0x2600
 80a1e42:	e025      	b.n	80a1e90 <mbedtls_x509_get_sig_alg+0x6c>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
    if( *pk_alg == MBEDTLS_PK_RSASSA_PSS )
 80a1e44:	782b      	ldrb	r3, [r5, #0]
 80a1e46:	2b06      	cmp	r3, #6
 80a1e48:	d113      	bne.n	80a1e72 <mbedtls_x509_get_sig_alg+0x4e>
    {
        mbedtls_pk_rsassa_pss_options *pss_opts;

        pss_opts = (mbedtls_pk_rsassa_pss_options *)mbedtls_calloc( 1, sizeof( mbedtls_pk_rsassa_pss_options ) );
 80a1e4a:	2108      	movs	r1, #8
 80a1e4c:	2001      	movs	r0, #1
 80a1e4e:	f010 fbb5 	bl	80b25bc <calloc>
        if( pss_opts == NULL )
 80a1e52:	4605      	mov	r5, r0
 80a1e54:	b1c8      	cbz	r0, 80a1e8a <mbedtls_x509_get_sig_alg+0x66>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        ret = mbedtls_x509_get_rsassa_pss_params( sig_params,
 80a1e56:	1d03      	adds	r3, r0, #4
 80a1e58:	4602      	mov	r2, r0
 80a1e5a:	4641      	mov	r1, r8
 80a1e5c:	4630      	mov	r0, r6
 80a1e5e:	f7ff fd9d 	bl	80a199c <mbedtls_x509_get_rsassa_pss_params>
                                          md_alg,
                                          &pss_opts->mgf1_hash_id,
                                          &pss_opts->expected_salt_len );
        if( ret != 0 )
 80a1e62:	4604      	mov	r4, r0
 80a1e64:	b118      	cbz	r0, 80a1e6e <mbedtls_x509_get_sig_alg+0x4a>
        {
            mbedtls_free( pss_opts );
 80a1e66:	4628      	mov	r0, r5
 80a1e68:	f00f f93e 	bl	80b10e8 <free>
            return( ret );
 80a1e6c:	e010      	b.n	80a1e90 <mbedtls_x509_get_sig_alg+0x6c>
        }

        *sig_opts = (void *) pss_opts;
 80a1e6e:	603d      	str	r5, [r7, #0]
 80a1e70:	e00e      	b.n	80a1e90 <mbedtls_x509_get_sig_alg+0x6c>
    }
    else
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
 80a1e72:	6833      	ldr	r3, [r6, #0]
 80a1e74:	2b05      	cmp	r3, #5
 80a1e76:	d000      	beq.n	80a1e7a <mbedtls_x509_get_sig_alg+0x56>
 80a1e78:	b94b      	cbnz	r3, 80a1e8e <mbedtls_x509_get_sig_alg+0x6a>
 80a1e7a:	6873      	ldr	r3, [r6, #4]
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 80a1e7c:	4c06      	ldr	r4, [pc, #24]	; (80a1e98 <mbedtls_x509_get_sig_alg+0x74>)
 80a1e7e:	2b00      	cmp	r3, #0
 80a1e80:	bf08      	it	eq
 80a1e82:	2400      	moveq	r4, #0
 80a1e84:	e004      	b.n	80a1e90 <mbedtls_x509_get_sig_alg+0x6c>
                      void **sig_opts )
{
    int ret;

    if( *sig_opts != NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80a1e86:	4c05      	ldr	r4, [pc, #20]	; (80a1e9c <mbedtls_x509_get_sig_alg+0x78>)
 80a1e88:	e002      	b.n	80a1e90 <mbedtls_x509_get_sig_alg+0x6c>
    {
        mbedtls_pk_rsassa_pss_options *pss_opts;

        pss_opts = (mbedtls_pk_rsassa_pss_options *)mbedtls_calloc( 1, sizeof( mbedtls_pk_rsassa_pss_options ) );
        if( pss_opts == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 80a1e8a:	4c05      	ldr	r4, [pc, #20]	; (80a1ea0 <mbedtls_x509_get_sig_alg+0x7c>)
 80a1e8c:	e000      	b.n	80a1e90 <mbedtls_x509_get_sig_alg+0x6c>
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 80a1e8e:	4c02      	ldr	r4, [pc, #8]	; (80a1e98 <mbedtls_x509_get_sig_alg+0x74>)
    }

    return( 0 );
}
 80a1e90:	4620      	mov	r0, r4
 80a1e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1e96:	bf00      	nop
 80a1e98:	ffffdd00 	.word	0xffffdd00
 80a1e9c:	ffffd800 	.word	0xffffd800
 80a1ea0:	ffffd780 	.word	0xffffd780

080a1ea4 <mbedtls_x509_get_ext>:
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                          mbedtls_x509_buf *ext, int tag )
{
 80a1ea4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t len;

    /* Extension structure use EXPLICIT tagging. That is, the actual
     * `Extensions` structure is wrapped by a tag-length pair using
     * the respective context-specific tag. */
    ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 80a1ea6:	f043 04a0 	orr.w	r4, r3, #160	; 0xa0
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                          mbedtls_x509_buf *ext, int tag )
{
 80a1eaa:	4616      	mov	r6, r2

    /* Extension structure use EXPLICIT tagging. That is, the actual
     * `Extensions` structure is wrapped by a tag-length pair using
     * the respective context-specific tag. */
    ret = mbedtls_asn1_get_tag( p, end, &ext->len,
              MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag );
 80a1eac:	4623      	mov	r3, r4
 80a1eae:	3204      	adds	r2, #4
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                          mbedtls_x509_buf *ext, int tag )
{
 80a1eb0:	4605      	mov	r5, r0

    /* Extension structure use EXPLICIT tagging. That is, the actual
     * `Extensions` structure is wrapped by a tag-length pair using
     * the respective context-specific tag. */
    ret = mbedtls_asn1_get_tag( p, end, &ext->len,
              MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag );
 80a1eb2:	f7ff fbdb 	bl	80a166c <mbedtls_asn1_get_tag>
    if( ret != 0 )
 80a1eb6:	b960      	cbnz	r0, 80a1ed2 <mbedtls_x509_get_ext+0x2e>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    ext->tag = MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag;
 80a1eb8:	6034      	str	r4, [r6, #0]
    ext->p   = *p;
 80a1eba:	682b      	ldr	r3, [r5, #0]
    end      = *p + ext->len;

    /*
     * Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a1ebc:	aa01      	add	r2, sp, #4
              MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag );
    if( ret != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    ext->tag = MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag;
    ext->p   = *p;
 80a1ebe:	60b3      	str	r3, [r6, #8]
    end      = *p + ext->len;
 80a1ec0:	6828      	ldr	r0, [r5, #0]
 80a1ec2:	6873      	ldr	r3, [r6, #4]
 80a1ec4:	18c4      	adds	r4, r0, r3

    /*
     * Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a1ec6:	4621      	mov	r1, r4
 80a1ec8:	2330      	movs	r3, #48	; 0x30
 80a1eca:	4628      	mov	r0, r5
 80a1ecc:	f7ff fbce 	bl	80a166c <mbedtls_asn1_get_tag>
 80a1ed0:	b110      	cbz	r0, 80a1ed8 <mbedtls_x509_get_ext+0x34>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 80a1ed2:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
 80a1ed6:	e007      	b.n	80a1ee8 <mbedtls_x509_get_ext+0x44>

    if( end != *p + len )
 80a1ed8:	9b01      	ldr	r3, [sp, #4]
 80a1eda:	6828      	ldr	r0, [r5, #0]
 80a1edc:	4418      	add	r0, r3
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 80a1ede:	4b03      	ldr	r3, [pc, #12]	; (80a1eec <mbedtls_x509_get_ext+0x48>)
 80a1ee0:	4284      	cmp	r4, r0
 80a1ee2:	bf14      	ite	ne
 80a1ee4:	4618      	movne	r0, r3
 80a1ee6:	2000      	moveq	r0, #0
}
 80a1ee8:	b002      	add	sp, #8
 80a1eea:	bd70      	pop	{r4, r5, r6, pc}
 80a1eec:	ffffda9a 	.word	0xffffda9a

080a1ef0 <mbedtls_x509_dn_gets>:
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 80a1ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1ef4:	460f      	mov	r7, r1
 80a1ef6:	4691      	mov	r9, r2

    memset( s, 0, sizeof( s ) );

    name = dn;
    p = buf;
    n = size;
 80a1ef8:	463d      	mov	r5, r7
    const char *short_name = NULL;
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );

    name = dn;
 80a1efa:	464e      	mov	r6, r9
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 80a1efc:	b0c2      	sub	sp, #264	; 0x108
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
 80a1efe:	f04f 0a00 	mov.w	sl, #0
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 80a1f02:	f10d 0808 	add.w	r8, sp, #8
 80a1f06:	f44f 7280 	mov.w	r2, #256	; 0x100
 80a1f0a:	4651      	mov	r1, sl
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 80a1f0c:	4604      	mov	r4, r0
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 80a1f0e:	4640      	mov	r0, r8
{
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
 80a1f10:	f8cd a004 	str.w	sl, [sp, #4]
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 80a1f14:	f010 fc95 	bl	80b2842 <memset>
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
 80a1f18:	4652      	mov	r2, sl
            if( i >= sizeof( s ) - 1 )
                break;

            c = name->val.p[i];
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
                 s[i] = '?';
 80a1f1a:	f04f 0a3f 	mov.w	sl, #63	; 0x3f

    name = dn;
    p = buf;
    n = size;

    while( name != NULL )
 80a1f1e:	2e00      	cmp	r6, #0
 80a1f20:	d057      	beq.n	80a1fd2 <mbedtls_x509_dn_gets+0xe2>
    {
        if( !name->oid.p )
 80a1f22:	68b3      	ldr	r3, [r6, #8]
 80a1f24:	2b00      	cmp	r3, #0
 80a1f26:	d052      	beq.n	80a1fce <mbedtls_x509_dn_gets+0xde>
        {
            name = name->next;
            continue;
        }

        if( name != dn )
 80a1f28:	454e      	cmp	r6, r9
 80a1f2a:	d011      	beq.n	80a1f50 <mbedtls_x509_dn_gets+0x60>
        {
            ret = mbedtls_snprintf( p, n, merge ? " + " : ", " );
 80a1f2c:	4b2b      	ldr	r3, [pc, #172]	; (80a1fdc <mbedtls_x509_dn_gets+0xec>)
 80a1f2e:	492c      	ldr	r1, [pc, #176]	; (80a1fe0 <mbedtls_x509_dn_gets+0xf0>)
 80a1f30:	4620      	mov	r0, r4
 80a1f32:	2a00      	cmp	r2, #0
 80a1f34:	bf14      	ite	ne
 80a1f36:	460a      	movne	r2, r1
 80a1f38:	461a      	moveq	r2, r3
 80a1f3a:	4629      	mov	r1, r5
 80a1f3c:	f00f f8f4 	bl	80b1128 <snprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 80a1f40:	2800      	cmp	r0, #0
 80a1f42:	da01      	bge.n	80a1f48 <mbedtls_x509_dn_gets+0x58>
 80a1f44:	4827      	ldr	r0, [pc, #156]	; (80a1fe4 <mbedtls_x509_dn_gets+0xf4>)
 80a1f46:	e045      	b.n	80a1fd4 <mbedtls_x509_dn_gets+0xe4>
 80a1f48:	4285      	cmp	r5, r0
 80a1f4a:	d9fb      	bls.n	80a1f44 <mbedtls_x509_dn_gets+0x54>
 80a1f4c:	1a2d      	subs	r5, r5, r0
 80a1f4e:	4404      	add	r4, r0
        }

        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );
 80a1f50:	a901      	add	r1, sp, #4
 80a1f52:	4630      	mov	r0, r6
 80a1f54:	f003 f896 	bl	80a5084 <mbedtls_oid_get_attr_short_name>

        if( ret == 0 )
 80a1f58:	b930      	cbnz	r0, 80a1f68 <mbedtls_x509_dn_gets+0x78>
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
 80a1f5a:	9b01      	ldr	r3, [sp, #4]
 80a1f5c:	4a22      	ldr	r2, [pc, #136]	; (80a1fe8 <mbedtls_x509_dn_gets+0xf8>)
 80a1f5e:	4629      	mov	r1, r5
 80a1f60:	4620      	mov	r0, r4
 80a1f62:	f00f f8e1 	bl	80b1128 <snprintf>
 80a1f66:	e004      	b.n	80a1f72 <mbedtls_x509_dn_gets+0x82>
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
 80a1f68:	4a20      	ldr	r2, [pc, #128]	; (80a1fec <mbedtls_x509_dn_gets+0xfc>)
 80a1f6a:	4629      	mov	r1, r5
 80a1f6c:	4620      	mov	r0, r4
 80a1f6e:	f00f f8db 	bl	80b1128 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a1f72:	2800      	cmp	r0, #0
 80a1f74:	dbe6      	blt.n	80a1f44 <mbedtls_x509_dn_gets+0x54>
 80a1f76:	4285      	cmp	r5, r0
 80a1f78:	d9e4      	bls.n	80a1f44 <mbedtls_x509_dn_gets+0x54>
 80a1f7a:	1a2d      	subs	r5, r5, r0
 80a1f7c:	4404      	add	r4, r0

        for( i = 0; i < name->val.len; i++ )
 80a1f7e:	2300      	movs	r3, #0
 80a1f80:	6932      	ldr	r2, [r6, #16]
 80a1f82:	4293      	cmp	r3, r2
 80a1f84:	d213      	bcs.n	80a1fae <mbedtls_x509_dn_gets+0xbe>
        {
            if( i >= sizeof( s ) - 1 )
 80a1f86:	2bff      	cmp	r3, #255	; 0xff
 80a1f88:	d011      	beq.n	80a1fae <mbedtls_x509_dn_gets+0xbe>
                break;

            c = name->val.p[i];
 80a1f8a:	6972      	ldr	r2, [r6, #20]
 80a1f8c:	5cd2      	ldrb	r2, [r2, r3]
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
 80a1f8e:	2a1f      	cmp	r2, #31
 80a1f90:	d906      	bls.n	80a1fa0 <mbedtls_x509_dn_gets+0xb0>
 80a1f92:	2a7f      	cmp	r2, #127	; 0x7f
 80a1f94:	d004      	beq.n	80a1fa0 <mbedtls_x509_dn_gets+0xb0>
 80a1f96:	f102 017f 	add.w	r1, r2, #127	; 0x7f
 80a1f9a:	b2c9      	uxtb	r1, r1
 80a1f9c:	291e      	cmp	r1, #30
 80a1f9e:	d802      	bhi.n	80a1fa6 <mbedtls_x509_dn_gets+0xb6>
                 s[i] = '?';
 80a1fa0:	f808 a003 	strb.w	sl, [r8, r3]
 80a1fa4:	e001      	b.n	80a1faa <mbedtls_x509_dn_gets+0xba>
            else s[i] = c;
 80a1fa6:	f808 2003 	strb.w	r2, [r8, r3]
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
        MBEDTLS_X509_SAFE_SNPRINTF;

        for( i = 0; i < name->val.len; i++ )
 80a1faa:	3301      	adds	r3, #1
 80a1fac:	e7e8      	b.n	80a1f80 <mbedtls_x509_dn_gets+0x90>
            c = name->val.p[i];
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
                 s[i] = '?';
            else s[i] = c;
        }
        s[i] = '\0';
 80a1fae:	2200      	movs	r2, #0
 80a1fb0:	f808 2003 	strb.w	r2, [r8, r3]
        ret = mbedtls_snprintf( p, n, "%s", s );
 80a1fb4:	4629      	mov	r1, r5
 80a1fb6:	4643      	mov	r3, r8
 80a1fb8:	4a0d      	ldr	r2, [pc, #52]	; (80a1ff0 <mbedtls_x509_dn_gets+0x100>)
 80a1fba:	4620      	mov	r0, r4
 80a1fbc:	f00f f8b4 	bl	80b1128 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a1fc0:	2800      	cmp	r0, #0
 80a1fc2:	dbbf      	blt.n	80a1f44 <mbedtls_x509_dn_gets+0x54>
 80a1fc4:	4285      	cmp	r5, r0
 80a1fc6:	d9bd      	bls.n	80a1f44 <mbedtls_x509_dn_gets+0x54>

        merge = name->next_merged;
 80a1fc8:	7f32      	ldrb	r2, [r6, #28]
                 s[i] = '?';
            else s[i] = c;
        }
        s[i] = '\0';
        ret = mbedtls_snprintf( p, n, "%s", s );
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a1fca:	1a2d      	subs	r5, r5, r0
 80a1fcc:	4404      	add	r4, r0

        merge = name->next_merged;
        name = name->next;
 80a1fce:	69b6      	ldr	r6, [r6, #24]
 80a1fd0:	e7a5      	b.n	80a1f1e <mbedtls_x509_dn_gets+0x2e>
    }

    return( (int) ( size - n ) );
 80a1fd2:	1b78      	subs	r0, r7, r5
}
 80a1fd4:	b042      	add	sp, #264	; 0x108
 80a1fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1fda:	bf00      	nop
 80a1fdc:	080b3ad6 	.word	0x080b3ad6
 80a1fe0:	080b3ad2 	.word	0x080b3ad2
 80a1fe4:	ffffd680 	.word	0xffffd680
 80a1fe8:	080b3ad9 	.word	0x080b3ad9
 80a1fec:	080b3add 	.word	0x080b3add
 80a1ff0:	080b51b6 	.word	0x080b51b6

080a1ff4 <mbedtls_x509_serial_gets>:
/*
 * Store the serial in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )
{
 80a1ff4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1ff8:	4680      	mov	r8, r0
 80a1ffa:	460f      	mov	r7, r1
 80a1ffc:	4691      	mov	r9, r2
    int ret;
    size_t i, n, nr;
    char *p;

    p = buf;
    n = size;
 80a1ffe:	460c      	mov	r4, r1

    nr = ( serial->len <= 32 )
 80a2000:	6856      	ldr	r6, [r2, #4]
    for( i = 0; i < nr; i++ )
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
 80a2002:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80a2080 <mbedtls_x509_serial_gets+0x8c>

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;
 80a2006:	2e21      	cmp	r6, #33	; 0x21
    for( i = 0; i < nr; i++ )
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
 80a2008:	f8df b078 	ldr.w	fp, [pc, #120]	; 80a2084 <mbedtls_x509_serial_gets+0x90>

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;
 80a200c:	bf28      	it	cs
 80a200e:	261c      	movcs	r6, #28

    for( i = 0; i < nr; i++ )
 80a2010:	2500      	movs	r5, #0
 80a2012:	42b5      	cmp	r5, r6
 80a2014:	d01c      	beq.n	80a2050 <mbedtls_x509_serial_gets+0x5c>
 80a2016:	f8d9 3008 	ldr.w	r3, [r9, #8]
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
 80a201a:	b91d      	cbnz	r5, 80a2024 <mbedtls_x509_serial_gets+0x30>
 80a201c:	2e01      	cmp	r6, #1
 80a201e:	d001      	beq.n	80a2024 <mbedtls_x509_serial_gets+0x30>
 80a2020:	781a      	ldrb	r2, [r3, #0]
 80a2022:	b19a      	cbz	r2, 80a204c <mbedtls_x509_serial_gets+0x58>
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
 80a2024:	1e72      	subs	r2, r6, #1
 80a2026:	4295      	cmp	r5, r2
 80a2028:	bf34      	ite	cc
 80a202a:	4652      	movcc	r2, sl
 80a202c:	465a      	movcs	r2, fp
 80a202e:	5d5b      	ldrb	r3, [r3, r5]
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
 80a2030:	4621      	mov	r1, r4
 80a2032:	9200      	str	r2, [sp, #0]
 80a2034:	4640      	mov	r0, r8
 80a2036:	4a0f      	ldr	r2, [pc, #60]	; (80a2074 <mbedtls_x509_serial_gets+0x80>)
 80a2038:	f00f f876 	bl	80b1128 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a203c:	2800      	cmp	r0, #0
 80a203e:	da01      	bge.n	80a2044 <mbedtls_x509_serial_gets+0x50>
 80a2040:	480d      	ldr	r0, [pc, #52]	; (80a2078 <mbedtls_x509_serial_gets+0x84>)
 80a2042:	e014      	b.n	80a206e <mbedtls_x509_serial_gets+0x7a>
 80a2044:	4284      	cmp	r4, r0
 80a2046:	d9fb      	bls.n	80a2040 <mbedtls_x509_serial_gets+0x4c>
 80a2048:	1a24      	subs	r4, r4, r0
 80a204a:	4480      	add	r8, r0
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;

    for( i = 0; i < nr; i++ )
 80a204c:	3501      	adds	r5, #1
 80a204e:	e7e0      	b.n	80a2012 <mbedtls_x509_serial_gets+0x1e>
        ret = mbedtls_snprintf( p, n, "%02X%s",
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
        MBEDTLS_X509_SAFE_SNPRINTF;
    }

    if( nr != serial->len )
 80a2050:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80a2054:	429d      	cmp	r5, r3
 80a2056:	d009      	beq.n	80a206c <mbedtls_x509_serial_gets+0x78>
    {
        ret = mbedtls_snprintf( p, n, "...." );
 80a2058:	4a08      	ldr	r2, [pc, #32]	; (80a207c <mbedtls_x509_serial_gets+0x88>)
 80a205a:	4621      	mov	r1, r4
 80a205c:	4640      	mov	r0, r8
 80a205e:	f00f f863 	bl	80b1128 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a2062:	2800      	cmp	r0, #0
 80a2064:	dbec      	blt.n	80a2040 <mbedtls_x509_serial_gets+0x4c>
 80a2066:	4284      	cmp	r4, r0
 80a2068:	d9ea      	bls.n	80a2040 <mbedtls_x509_serial_gets+0x4c>
 80a206a:	1a24      	subs	r4, r4, r0
    }

    return( (int) ( size - n ) );
 80a206c:	1b38      	subs	r0, r7, r4
}
 80a206e:	b003      	add	sp, #12
 80a2070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2074:	080b3ae3 	.word	0x080b3ae3
 80a2078:	ffffd680 	.word	0xffffd680
 80a207c:	080b3aea 	.word	0x080b3aea
 80a2080:	080b3ae1 	.word	0x080b3ae1
 80a2084:	080b40b1 	.word	0x080b40b1

080a2088 <mbedtls_x509_sig_alg_gets>:
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 80a2088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80a208c:	460c      	mov	r4, r1
 80a208e:	4698      	mov	r8, r3
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
 80a2090:	a904      	add	r1, sp, #16
 80a2092:	2300      	movs	r3, #0
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 80a2094:	4607      	mov	r7, r0
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
 80a2096:	f841 3d04 	str.w	r3, [r1, #-4]!

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
 80a209a:	4610      	mov	r0, r2
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 80a209c:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
 80a20a0:	f003 f83e 	bl	80a5120 <mbedtls_oid_get_sig_alg_desc>
    if( ret != 0 )
 80a20a4:	b128      	cbz	r0, 80a20b2 <mbedtls_x509_sig_alg_gets+0x2a>
        ret = mbedtls_snprintf( p, n, "???"  );
 80a20a6:	4a23      	ldr	r2, [pc, #140]	; (80a2134 <mbedtls_x509_sig_alg_gets+0xac>)
 80a20a8:	4621      	mov	r1, r4
 80a20aa:	4638      	mov	r0, r7
 80a20ac:	f00f f83c 	bl	80b1128 <snprintf>
 80a20b0:	e005      	b.n	80a20be <mbedtls_x509_sig_alg_gets+0x36>
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
 80a20b2:	9b03      	ldr	r3, [sp, #12]
 80a20b4:	4a20      	ldr	r2, [pc, #128]	; (80a2138 <mbedtls_x509_sig_alg_gets+0xb0>)
 80a20b6:	4621      	mov	r1, r4
 80a20b8:	4638      	mov	r0, r7
 80a20ba:	f00f f835 	bl	80b1128 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a20be:	2800      	cmp	r0, #0

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
    if( ret != 0 )
        ret = mbedtls_snprintf( p, n, "???"  );
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
 80a20c0:	4606      	mov	r6, r0
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a20c2:	da01      	bge.n	80a20c8 <mbedtls_x509_sig_alg_gets+0x40>
 80a20c4:	481d      	ldr	r0, [pc, #116]	; (80a213c <mbedtls_x509_sig_alg_gets+0xb4>)
 80a20c6:	e032      	b.n	80a212e <mbedtls_x509_sig_alg_gets+0xa6>
 80a20c8:	4284      	cmp	r4, r0
 80a20ca:	d9fb      	bls.n	80a20c4 <mbedtls_x509_sig_alg_gets+0x3c>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
    if( pk_alg == MBEDTLS_PK_RSASSA_PSS )
 80a20cc:	f1b8 0f06 	cmp.w	r8, #6
    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
    if( ret != 0 )
        ret = mbedtls_snprintf( p, n, "???"  );
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a20d0:	eba4 0500 	sub.w	r5, r4, r0

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
    if( pk_alg == MBEDTLS_PK_RSASSA_PSS )
 80a20d4:	d12a      	bne.n	80a212c <mbedtls_x509_sig_alg_gets+0xa4>
        const mbedtls_pk_rsassa_pss_options *pss_opts;
        const mbedtls_md_info_t *md_info, *mgf_md_info;

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) sig_opts;

        md_info = mbedtls_md_info_from_type( md_alg );
 80a20d6:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 80a20da:	f006 f839 	bl	80a8150 <mbedtls_md_info_from_type>
 80a20de:	4680      	mov	r8, r0
        mgf_md_info = mbedtls_md_info_from_type( pss_opts->mgf1_hash_id );
 80a20e0:	f899 0000 	ldrb.w	r0, [r9]
 80a20e4:	f006 f834 	bl	80a8150 <mbedtls_md_info_from_type>
 80a20e8:	4682      	mov	sl, r0

        ret = mbedtls_snprintf( p, n, " (%s, MGF1-%s, 0x%02X)",
 80a20ea:	f1b8 0f00 	cmp.w	r8, #0
 80a20ee:	d004      	beq.n	80a20fa <mbedtls_x509_sig_alg_gets+0x72>
 80a20f0:	4640      	mov	r0, r8
 80a20f2:	f006 f966 	bl	80a83c2 <mbedtls_md_get_name>
 80a20f6:	4680      	mov	r8, r0
 80a20f8:	e001      	b.n	80a20fe <mbedtls_x509_sig_alg_gets+0x76>
 80a20fa:	f8df 8038 	ldr.w	r8, [pc, #56]	; 80a2134 <mbedtls_x509_sig_alg_gets+0xac>
 80a20fe:	f1ba 0f00 	cmp.w	sl, #0
 80a2102:	d003      	beq.n	80a210c <mbedtls_x509_sig_alg_gets+0x84>
 80a2104:	4650      	mov	r0, sl
 80a2106:	f006 f95c 	bl	80a83c2 <mbedtls_md_get_name>
 80a210a:	e000      	b.n	80a210e <mbedtls_x509_sig_alg_gets+0x86>
 80a210c:	4809      	ldr	r0, [pc, #36]	; (80a2134 <mbedtls_x509_sig_alg_gets+0xac>)
                              md_info ? mbedtls_md_get_name( md_info ) : "???",
                              mgf_md_info ? mbedtls_md_get_name( mgf_md_info ) : "???",
                              pss_opts->expected_salt_len );
 80a210e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80a2112:	4a0b      	ldr	r2, [pc, #44]	; (80a2140 <mbedtls_x509_sig_alg_gets+0xb8>)
 80a2114:	e88d 0009 	stmia.w	sp, {r0, r3}
 80a2118:	4629      	mov	r1, r5
 80a211a:	4643      	mov	r3, r8
 80a211c:	19b8      	adds	r0, r7, r6
 80a211e:	f00f f803 	bl	80b1128 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a2122:	2800      	cmp	r0, #0
 80a2124:	dbce      	blt.n	80a20c4 <mbedtls_x509_sig_alg_gets+0x3c>
 80a2126:	4285      	cmp	r5, r0
 80a2128:	d9cc      	bls.n	80a20c4 <mbedtls_x509_sig_alg_gets+0x3c>
 80a212a:	1a2d      	subs	r5, r5, r0
    ((void) pk_alg);
    ((void) md_alg);
    ((void) sig_opts);
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */

    return( (int)( size - n ) );
 80a212c:	1b60      	subs	r0, r4, r5
}
 80a212e:	b004      	add	sp, #16
 80a2130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a2134:	080b3aef 	.word	0x080b3aef
 80a2138:	080b51b6 	.word	0x080b51b6
 80a213c:	ffffd680 	.word	0xffffd680
 80a2140:	080b3af3 	.word	0x080b3af3

080a2144 <mbedtls_x509_key_size_helper>:

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
 80a2144:	b510      	push	{r4, lr}
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
 80a2146:	4613      	mov	r3, r2
 80a2148:	4a06      	ldr	r2, [pc, #24]	; (80a2164 <mbedtls_x509_key_size_helper+0x20>)

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
 80a214a:	460c      	mov	r4, r1
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
 80a214c:	f00e ffec 	bl	80b1128 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a2150:	2800      	cmp	r0, #0
 80a2152:	db05      	blt.n	80a2160 <mbedtls_x509_key_size_helper+0x1c>

    return( 0 );
 80a2154:	4b04      	ldr	r3, [pc, #16]	; (80a2168 <mbedtls_x509_key_size_helper+0x24>)
 80a2156:	4284      	cmp	r4, r0
 80a2158:	bf94      	ite	ls
 80a215a:	4618      	movls	r0, r3
 80a215c:	2000      	movhi	r0, #0
 80a215e:	bd10      	pop	{r4, pc}
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a2160:	4801      	ldr	r0, [pc, #4]	; (80a2168 <mbedtls_x509_key_size_helper+0x24>)

    return( 0 );
}
 80a2162:	bd10      	pop	{r4, pc}
 80a2164:	080b3b0a 	.word	0x080b3b0a
 80a2168:	ffffd680 	.word	0xffffd680

080a216c <mbedtls_x509_time_is_past>:
 80a216c:	2000      	movs	r0, #0
 80a216e:	4770      	bx	lr

080a2170 <mbedtls_x509_time_is_future>:

int mbedtls_x509_time_is_future( const mbedtls_x509_time *from )
{
    ((void) from);
    return( 0 );
}
 80a2170:	2000      	movs	r0, #0
 80a2172:	4770      	bx	lr

080a2174 <_ZL17sha1_process_wrapPvPKh>:
}

static int sha1_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha1_process( (mbedtls_sha1_context *) ctx,
                                           data ) );
 80a2174:	f003 b8ca 	b.w	80a530c <mbedtls_internal_sha1_process>

080a2178 <_ZL15sha1_clone_wrapPvPKv>:
}

static void sha1_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha1_clone( (mbedtls_sha1_context *) dst,
                  (const mbedtls_sha1_context *) src );
 80a2178:	f003 b8a9 	b.w	80a52ce <mbedtls_sha1_clone>

080a217c <_ZL13sha1_ctx_freePv>:
}

static void sha1_ctx_free( void *ctx )
{
 80a217c:	b510      	push	{r4, lr}
 80a217e:	4604      	mov	r4, r0
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
 80a2180:	f003 f8a0 	bl	80a52c4 <mbedtls_sha1_free>
    mbedtls_free( ctx );
 80a2184:	4620      	mov	r0, r4
}
 80a2186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha1_ctx_free( void *ctx )
{
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
    mbedtls_free( ctx );
 80a218a:	f00e bfad 	b.w	80b10e8 <free>

080a218e <_ZL14sha1_ctx_allocv>:
{
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
}

static void *sha1_ctx_alloc( void )
{
 80a218e:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );
 80a2190:	215c      	movs	r1, #92	; 0x5c
 80a2192:	2001      	movs	r0, #1
 80a2194:	f010 fa12 	bl	80b25bc <calloc>

    if( ctx != NULL )
 80a2198:	4604      	mov	r4, r0
 80a219a:	b108      	cbz	r0, 80a21a0 <_ZL14sha1_ctx_allocv+0x12>
        mbedtls_sha1_init( (mbedtls_sha1_context *) ctx );
 80a219c:	f003 f88e 	bl	80a52bc <mbedtls_sha1_init>

    return( ctx );
}
 80a21a0:	4620      	mov	r0, r4
 80a21a2:	bd10      	pop	{r4, pc}

080a21a4 <_ZL16sha1_finish_wrapPvPh>:
                                     input, ilen ) );
}

static int sha1_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
 80a21a4:	f004 b8a0 	b.w	80a62e8 <mbedtls_sha1_finish_ret>

080a21a8 <_ZL16sha1_update_wrapPvPKhj>:

static int sha1_update_wrap( void *ctx, const unsigned char *input,
                              size_t ilen )
{
    return( mbedtls_sha1_update_ret( (mbedtls_sha1_context *) ctx,
                                     input, ilen ) );
 80a21a8:	f004 b864 	b.w	80a6274 <mbedtls_sha1_update_ret>

080a21ac <_ZL16sha1_starts_wrapPv>:

#if defined(MBEDTLS_SHA1_C)

static int sha1_starts_wrap( void *ctx )
{
    return( mbedtls_sha1_starts_ret( (mbedtls_sha1_context *) ctx ) );
 80a21ac:	f003 b894 	b.w	80a52d8 <mbedtls_sha1_starts_ret>

080a21b0 <_ZL19sha224_process_wrapPvPKh>:
}

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
                                             data ) );
 80a21b0:	f7fe ba78 	b.w	80a06a4 <mbedtls_internal_sha256_process>

080a21b4 <_ZL17sha224_clone_wrapPvPKv>:
}

static void sha224_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
                    (const mbedtls_sha256_context *) src );
 80a21b4:	f7fe ba21 	b.w	80a05fa <mbedtls_sha256_clone>

080a21b8 <_ZL15sha224_ctx_freePv>:

    return( ctx );
}

static void sha224_ctx_free( void *ctx )
{
 80a21b8:	b510      	push	{r4, lr}
 80a21ba:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 80a21bc:	f7fe fa18 	bl	80a05f0 <mbedtls_sha256_free>
    mbedtls_free( ctx );
 80a21c0:	4620      	mov	r0, r4
}
 80a21c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha224_ctx_free( void *ctx )
{
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
    mbedtls_free( ctx );
 80a21c6:	f00e bf8f 	b.w	80b10e8 <free>

080a21ca <_ZL16sha224_ctx_allocv>:
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
}

static void *sha224_ctx_alloc( void )
{
 80a21ca:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 80a21cc:	216c      	movs	r1, #108	; 0x6c
 80a21ce:	2001      	movs	r0, #1
 80a21d0:	f010 f9f4 	bl	80b25bc <calloc>

    if( ctx != NULL )
 80a21d4:	4604      	mov	r4, r0
 80a21d6:	b108      	cbz	r0, 80a21dc <_ZL16sha224_ctx_allocv+0x12>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 80a21d8:	f7fe fa06 	bl	80a05e8 <mbedtls_sha256_init>

    return( ctx );
}
 80a21dc:	4620      	mov	r0, r4
 80a21de:	bd10      	pop	{r4, pc}

080a21e0 <_ZL11sha224_wrapPKhjPh>:
}

static int sha224_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
 80a21e0:	2301      	movs	r3, #1
 80a21e2:	f7fe be97 	b.w	80a0f14 <mbedtls_sha256_ret>

080a21e6 <_ZL11sha256_wrapPKhjPh>:
}

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
 80a21e6:	2300      	movs	r3, #0
 80a21e8:	f7fe be94 	b.w	80a0f14 <mbedtls_sha256_ret>

080a21ec <_ZL18sha224_finish_wrapPvPh>:
}

static int sha224_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
                                       output ) );
 80a21ec:	f7fe bdfe 	b.w	80a0dec <mbedtls_sha256_finish_ret>

080a21f0 <_ZL18sha224_update_wrapPvPKhj>:

static int sha224_update_wrap( void *ctx, const unsigned char *input,
                                size_t ilen )
{
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
                                       input, ilen ) );
 80a21f0:	f7fe bdc2 	b.w	80a0d78 <mbedtls_sha256_update_ret>

080a21f4 <_ZL18sha224_starts_wrapPv>:
 */
#if defined(MBEDTLS_SHA256_C)

static int sha224_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
 80a21f4:	2101      	movs	r1, #1
 80a21f6:	f7fe ba05 	b.w	80a0604 <mbedtls_sha256_starts_ret>

080a21fa <_ZL18sha256_starts_wrapPv>:
    sha224_process_wrap,
};

static int sha256_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
 80a21fa:	2100      	movs	r1, #0
 80a21fc:	f7fe ba02 	b.w	80a0604 <mbedtls_sha256_starts_ret>

080a2200 <_ZL19sha384_process_wrapPvPKh>:
}

static int sha384_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha512_process( (mbedtls_sha512_context *) ctx,
                                             data ) );
 80a2200:	f00c bad2 	b.w	80ae7a8 <mbedtls_internal_sha512_process>

080a2204 <_ZL17sha384_clone_wrapPvPKv>:
}

static void sha384_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha512_clone( (mbedtls_sha512_context *) dst,
                    (const mbedtls_sha512_context *) src );
 80a2204:	f00c ba2f 	b.w	80ae666 <mbedtls_sha512_clone>

080a2208 <_ZL15sha384_ctx_freePv>:

    return( ctx );
}

static void sha384_ctx_free( void *ctx )
{
 80a2208:	b510      	push	{r4, lr}
 80a220a:	4604      	mov	r4, r0
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
 80a220c:	f00c fa26 	bl	80ae65c <mbedtls_sha512_free>
    mbedtls_free( ctx );
 80a2210:	4620      	mov	r0, r4
}
 80a2212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha384_ctx_free( void *ctx )
{
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
    mbedtls_free( ctx );
 80a2216:	f00e bf67 	b.w	80b10e8 <free>

080a221a <_ZL16sha384_ctx_allocv>:
{
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
}

static void *sha384_ctx_alloc( void )
{
 80a221a:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
 80a221c:	21d8      	movs	r1, #216	; 0xd8
 80a221e:	2001      	movs	r0, #1
 80a2220:	f010 f9cc 	bl	80b25bc <calloc>

    if( ctx != NULL )
 80a2224:	4604      	mov	r4, r0
 80a2226:	b108      	cbz	r0, 80a222c <_ZL16sha384_ctx_allocv+0x12>
        mbedtls_sha512_init( (mbedtls_sha512_context *) ctx );
 80a2228:	f00c fa14 	bl	80ae654 <mbedtls_sha512_init>

    return( ctx );
}
 80a222c:	4620      	mov	r0, r4
 80a222e:	bd10      	pop	{r4, pc}

080a2230 <_ZL11sha384_wrapPKhjPh>:
}

static int sha384_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
 80a2230:	2301      	movs	r3, #1
 80a2232:	f00d ba7d 	b.w	80af730 <mbedtls_sha512_ret>

080a2236 <_ZL11sha512_wrapPKhjPh>:
}

static int sha512_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 0 ) );
 80a2236:	2300      	movs	r3, #0
 80a2238:	f00d ba7a 	b.w	80af730 <mbedtls_sha512_ret>

080a223c <_ZL18sha384_finish_wrapPvPh>:
}

static int sha384_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha512_finish_ret( (mbedtls_sha512_context *) ctx,
                                       output ) );
 80a223c:	f00d b948 	b.w	80af4d0 <mbedtls_sha512_finish_ret>

080a2240 <_ZL18sha384_update_wrapPvPKhj>:

static int sha384_update_wrap( void *ctx, const unsigned char *input,
                               size_t ilen )
{
    return( mbedtls_sha512_update_ret( (mbedtls_sha512_context *) ctx,
                                       input, ilen ) );
 80a2240:	f00d b8fe 	b.w	80af440 <mbedtls_sha512_update_ret>

080a2244 <_ZL18sha384_starts_wrapPv>:

#if defined(MBEDTLS_SHA512_C)

static int sha384_starts_wrap( void *ctx )
{
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 1 ) );
 80a2244:	2101      	movs	r1, #1
 80a2246:	f00c ba13 	b.w	80ae670 <mbedtls_sha512_starts_ret>

080a224a <_ZL18sha512_starts_wrapPv>:
    sha384_process_wrap,
};

static int sha512_starts_wrap( void *ctx )
{
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 0 ) );
 80a224a:	2100      	movs	r1, #0
 80a224c:	f00c ba10 	b.w	80ae670 <mbedtls_sha512_starts_ret>

080a2250 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>:
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 80a2250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2254:	b095      	sub	sp, #84	; 0x54
 80a2256:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 80a2258:	ae04      	add	r6, sp, #16
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 80a225a:	4607      	mov	r7, r0
 80a225c:	460c      	mov	r4, r1
 80a225e:	4691      	mov	r9, r2
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 80a2260:	2100      	movs	r1, #0
 80a2262:	2240      	movs	r2, #64	; 0x40
 80a2264:	4630      	mov	r0, r6
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 80a2266:	9301      	str	r3, [sp, #4]
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
    memset( counter, 0, 4 );
 80a2268:	f10d 0850 	add.w	r8, sp, #80	; 0x50
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 80a226c:	f010 fae9 	bl	80b2842 <memset>
    memset( counter, 0, 4 );
 80a2270:	2300      	movs	r3, #0

    hlen = mbedtls_md_get_size( md_ctx->md_info );
 80a2272:	6828      	ldr	r0, [r5, #0]
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
    memset( counter, 0, 4 );
 80a2274:	f848 3d44 	str.w	r3, [r8, #-68]!

    hlen = mbedtls_md_get_size( md_ctx->md_info );
 80a2278:	f006 f8a0 	bl	80a83bc <mbedtls_md_get_size>
 80a227c:	4682      	mov	sl, r0

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
 80a227e:	b37c      	cbz	r4, 80a22e0 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x90>
 80a2280:	4554      	cmp	r4, sl
    {
        use_len = hlen;
        if( dlen < hlen )
            use_len = dlen;

        if( ( ret = mbedtls_md_starts( md_ctx ) ) != 0 )
 80a2282:	4628      	mov	r0, r5
 80a2284:	46a3      	mov	fp, r4
 80a2286:	bf28      	it	cs
 80a2288:	46d3      	movcs	fp, sl
 80a228a:	f005 ffaf 	bl	80a81ec <mbedtls_md_starts>
 80a228e:	4603      	mov	r3, r0
 80a2290:	bb38      	cbnz	r0, 80a22e2 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, src, slen ) ) != 0 )
 80a2292:	9a01      	ldr	r2, [sp, #4]
 80a2294:	4649      	mov	r1, r9
 80a2296:	4628      	mov	r0, r5
 80a2298:	f005 ffb2 	bl	80a8200 <mbedtls_md_update>
 80a229c:	4603      	mov	r3, r0
 80a229e:	bb00      	cbnz	r0, 80a22e2 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
 80a22a0:	2204      	movs	r2, #4
 80a22a2:	4641      	mov	r1, r8
 80a22a4:	4628      	mov	r0, r5
 80a22a6:	f005 ffab 	bl	80a8200 <mbedtls_md_update>
 80a22aa:	4603      	mov	r3, r0
 80a22ac:	b9c8      	cbnz	r0, 80a22e2 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
 80a22ae:	4631      	mov	r1, r6
 80a22b0:	4628      	mov	r0, r5
 80a22b2:	f005 ffaf 	bl	80a8214 <mbedtls_md_finish>
 80a22b6:	4603      	mov	r3, r0
 80a22b8:	b998      	cbnz	r0, 80a22e2 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
 80a22ba:	463a      	mov	r2, r7
            goto exit;

        for( i = 0; i < use_len; ++i )
 80a22bc:	455b      	cmp	r3, fp
 80a22be:	d007      	beq.n	80a22d0 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x80>
            *p++ ^= mask[i];
 80a22c0:	f812 0b01 	ldrb.w	r0, [r2], #1
 80a22c4:	5cf1      	ldrb	r1, [r6, r3]
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
            goto exit;

        for( i = 0; i < use_len; ++i )
 80a22c6:	3301      	adds	r3, #1
            *p++ ^= mask[i];
 80a22c8:	4041      	eors	r1, r0
 80a22ca:	f802 1c01 	strb.w	r1, [r2, #-1]
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
            goto exit;

        for( i = 0; i < use_len; ++i )
 80a22ce:	e7f5      	b.n	80a22bc <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x6c>
            *p++ ^= mask[i];

        counter[3]++;
 80a22d0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80a22d4:	441f      	add	r7, r3
 80a22d6:	3201      	adds	r2, #1
 80a22d8:	f88d 200f 	strb.w	r2, [sp, #15]

        dlen -= use_len;
 80a22dc:	1ae4      	subs	r4, r4, r3
    hlen = mbedtls_md_get_size( md_ctx->md_info );

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
 80a22de:	e7ce      	b.n	80a227e <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x2e>
 80a22e0:	4623      	mov	r3, r4

        dlen -= use_len;
    }

exit:
    mbedtls_platform_zeroize( mask, sizeof( mask ) );
 80a22e2:	4630      	mov	r0, r6
 80a22e4:	2140      	movs	r1, #64	; 0x40
 80a22e6:	9301      	str	r3, [sp, #4]
 80a22e8:	f004 f892 	bl	80a6410 <mbedtls_platform_zeroize>

    return( ret );
}
 80a22ec:	9b01      	ldr	r3, [sp, #4]
 80a22ee:	4618      	mov	r0, r3
 80a22f0:	b015      	add	sp, #84	; 0x54
 80a22f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080a22f8 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>:
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 80a22f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a22fc:	461d      	mov	r5, r3
    size_t oid_size  = 0;
 80a22fe:	2300      	movs	r3, #0
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 80a2300:	460e      	mov	r6, r1
 80a2302:	4691      	mov	r9, r2
 80a2304:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    size_t oid_size  = 0;
 80a2308:	9300      	str	r3, [sp, #0]
    size_t nb_pad    = dst_len;
    unsigned char *p = dst;
    const char *oid  = NULL;
 80a230a:	9301      	str	r3, [sp, #4]

    /* Are we signing hashed or raw data? */
    if( md_alg != MBEDTLS_MD_NONE )
 80a230c:	4604      	mov	r4, r0
 80a230e:	b328      	cbz	r0, 80a235c <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x64>
    {
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
 80a2310:	f005 ff1e 	bl	80a8150 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 80a2314:	4606      	mov	r6, r0
 80a2316:	2800      	cmp	r0, #0
 80a2318:	d063      	beq.n	80a23e2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
 80a231a:	4620      	mov	r0, r4
 80a231c:	466a      	mov	r2, sp
 80a231e:	a901      	add	r1, sp, #4
 80a2320:	f002 ff82 	bl	80a5228 <mbedtls_oid_get_oid_by_md>
 80a2324:	4604      	mov	r4, r0
 80a2326:	2800      	cmp	r0, #0
 80a2328:	d15b      	bne.n	80a23e2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 80a232a:	4630      	mov	r0, r6
 80a232c:	f006 f846 	bl	80a83bc <mbedtls_md_get_size>

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
 80a2330:	9f00      	ldr	r7, [sp, #0]
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 80a2332:	4606      	mov	r6, r0

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
 80a2334:	4407      	add	r7, r0
 80a2336:	f107 0308 	add.w	r3, r7, #8
 80a233a:	2b7f      	cmp	r3, #127	; 0x7f
 80a233c:	d851      	bhi.n	80a23e2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
 80a233e:	f110 020a 	adds.w	r2, r0, #10
 80a2342:	d24e      	bcs.n	80a23e2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            10 + hashlen            <  hashlen      ||
            10 + hashlen + oid_size <  10 + hashlen )
 80a2344:	f107 030a 	add.w	r3, r7, #10
        hashlen = mbedtls_md_get_size( md_info );

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
            10 + hashlen            <  hashlen      ||
 80a2348:	429a      	cmp	r2, r3
 80a234a:	d84a      	bhi.n	80a23e2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
         *   (Insist on 1-byte length encodings to protect against variants of
         *    Bleichenbacher's forgery attack against lax PKCS#1v1.5 verification)
         * - Need hashlen bytes for hash
         * - Need oid_size bytes for hash alg OID.
         */
        if( nb_pad < 10 + hashlen + oid_size )
 80a234c:	429d      	cmp	r5, r3
 80a234e:	d348      	bcc.n	80a23e2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
        nb_pad -= 10 + hashlen + oid_size;
 80a2350:	f1a5 030a 	sub.w	r3, r5, #10
 80a2354:	1bdf      	subs	r7, r3, r7
        nb_pad -= hashlen;
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
 80a2356:	2f0a      	cmp	r7, #10
 80a2358:	d806      	bhi.n	80a2368 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x70>
 80a235a:	e042      	b.n	80a23e2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
        nb_pad -= 10 + hashlen + oid_size;
    }
    else
    {
        if( nb_pad < hashlen )
 80a235c:	428d      	cmp	r5, r1
 80a235e:	d340      	bcc.n	80a23e2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        nb_pad -= hashlen;
 80a2360:	1a6d      	subs	r5, r5, r1
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
 80a2362:	2d0a      	cmp	r5, #10
 80a2364:	d93d      	bls.n	80a23e2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
 80a2366:	e03e      	b.n	80a23e6 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xee>

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 80a2368:	46c2      	mov	sl, r8

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    nb_pad -= 3;
 80a236a:	3f03      	subs	r7, #3

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 80a236c:	f80a 4b02 	strb.w	r4, [sl], #2
    *p++ = MBEDTLS_RSA_SIGN;
 80a2370:	2301      	movs	r3, #1
    memset( p, 0xFF, nb_pad );
 80a2372:	463a      	mov	r2, r7
    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
    *p++ = MBEDTLS_RSA_SIGN;
 80a2374:	f888 3001 	strb.w	r3, [r8, #1]
    memset( p, 0xFF, nb_pad );
 80a2378:	21ff      	movs	r1, #255	; 0xff
 80a237a:	4650      	mov	r0, sl
 80a237c:	f010 fa61 	bl	80b2842 <memset>
    p += nb_pad;
 80a2380:	eb0a 0307 	add.w	r3, sl, r7
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 80a2384:	2130      	movs	r1, #48	; 0x30
    /* Write signature header and padding */
    *p++ = 0;
    *p++ = MBEDTLS_RSA_SIGN;
    memset( p, 0xFF, nb_pad );
    p += nb_pad;
    *p++ = 0;
 80a2386:	f80a 4007 	strb.w	r4, [sl, r7]
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 80a238a:	7059      	strb	r1, [r3, #1]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 80a238c:	9f00      	ldr	r7, [sp, #0]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 80a238e:	70d9      	strb	r1, [r3, #3]
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 80a2390:	f107 0208 	add.w	r2, r7, #8
 80a2394:	4432      	add	r2, r6
 80a2396:	709a      	strb	r2, [r3, #2]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
 80a2398:	b2fa      	uxtb	r2, r7
 80a239a:	1d11      	adds	r1, r2, #4
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
 80a239c:	f103 0a07 	add.w	sl, r3, #7
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
 80a23a0:	7119      	strb	r1, [r3, #4]
    *p++ = MBEDTLS_ASN1_OID;
 80a23a2:	2106      	movs	r1, #6
 80a23a4:	7159      	strb	r1, [r3, #5]
    *p++ = (unsigned char) oid_size;
 80a23a6:	719a      	strb	r2, [r3, #6]
    memcpy( p, oid, oid_size );
 80a23a8:	9901      	ldr	r1, [sp, #4]
 80a23aa:	463a      	mov	r2, r7
 80a23ac:	4650      	mov	r0, sl
 80a23ae:	f010 fa22 	bl	80b27f6 <memcpy>
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
 80a23b2:	2205      	movs	r2, #5
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
 80a23b4:	eb0a 0307 	add.w	r3, sl, r7
    *p++ = MBEDTLS_ASN1_NULL;
 80a23b8:	f80a 2007 	strb.w	r2, [sl, r7]
    *p++ = 0x00;
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 80a23bc:	2204      	movs	r2, #4
    *p++ = (unsigned char) hashlen;
 80a23be:	189f      	adds	r7, r3, r2
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
    *p++ = 0x00;
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 80a23c0:	709a      	strb	r2, [r3, #2]
    *p++ = (unsigned char) hashlen;
 80a23c2:	70de      	strb	r6, [r3, #3]
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
    *p++ = 0x00;
 80a23c4:	705c      	strb	r4, [r3, #1]
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
    *p++ = (unsigned char) hashlen;
    memcpy( p, hash, hashlen );
 80a23c6:	4632      	mov	r2, r6
 80a23c8:	4649      	mov	r1, r9
 80a23ca:	4638      	mov	r0, r7
 80a23cc:	f010 fa13 	bl	80b27f6 <memcpy>
    p += hashlen;

    /* Just a sanity-check, should be automatic
     * after the initial bounds check. */
    if( p != dst + dst_len )
 80a23d0:	443e      	add	r6, r7
 80a23d2:	eb08 0305 	add.w	r3, r8, r5
 80a23d6:	429e      	cmp	r6, r3
 80a23d8:	d019      	beq.n	80a240e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x116>
    {
        mbedtls_platform_zeroize( dst, dst_len );
 80a23da:	4629      	mov	r1, r5
 80a23dc:	4640      	mov	r0, r8
 80a23de:	f004 f817 	bl	80a6410 <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a23e2:	4c0d      	ldr	r4, [pc, #52]	; (80a2418 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x120>)
 80a23e4:	e013      	b.n	80a240e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x116>

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 80a23e6:	4643      	mov	r3, r8

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    nb_pad -= 3;
 80a23e8:	1eef      	subs	r7, r5, #3

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 80a23ea:	f803 0b02 	strb.w	r0, [r3], #2
    *p++ = MBEDTLS_RSA_SIGN;
 80a23ee:	2201      	movs	r2, #1
 80a23f0:	f888 2001 	strb.w	r2, [r8, #1]
    memset( p, 0xFF, nb_pad );
 80a23f4:	21ff      	movs	r1, #255	; 0xff
 80a23f6:	463a      	mov	r2, r7
 80a23f8:	4618      	mov	r0, r3
 80a23fa:	f010 fa22 	bl	80b2842 <memset>
 80a23fe:	4603      	mov	r3, r0
    p += nb_pad;
    *p++ = 0;
 80a2400:	55c4      	strb	r4, [r0, r7]

    /* Are we signing raw data? */
    if( md_alg == MBEDTLS_MD_NONE )
    {
        memcpy( p, hash, hashlen );
 80a2402:	1ea8      	subs	r0, r5, #2
 80a2404:	4632      	mov	r2, r6
 80a2406:	4649      	mov	r1, r9
 80a2408:	4418      	add	r0, r3
 80a240a:	f010 f9f4 	bl	80b27f6 <memcpy>
        mbedtls_platform_zeroize( dst, dst_len );
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }

    return( 0 );
}
 80a240e:	4620      	mov	r0, r4
 80a2410:	b002      	add	sp, #8
 80a2412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a2416:	bf00      	nop
 80a2418:	ffffbf80 	.word	0xffffbf80

080a241c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 80a241c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 80a241e:	f100 0508 	add.w	r5, r0, #8
 80a2422:	6847      	ldr	r7, [r0, #4]
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 80a2424:	4604      	mov	r4, r0
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 80a2426:	4628      	mov	r0, r5
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 80a2428:	460e      	mov	r6, r1
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 80a242a:	f009 ff9d 	bl	80ac368 <mbedtls_mpi_size>
 80a242e:	4287      	cmp	r7, r0
 80a2430:	d117      	bne.n	80a2462 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
 80a2432:	6863      	ldr	r3, [r4, #4]
 80a2434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80a2438:	d813      	bhi.n	80a2462 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 80a243a:	2100      	movs	r1, #0
 80a243c:	4628      	mov	r0, r5
 80a243e:	f00a f978 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a2442:	2800      	cmp	r0, #0
 80a2444:	dd0d      	ble.n	80a2462 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
 80a2446:	2100      	movs	r1, #0
 80a2448:	4628      	mov	r0, r5
 80a244a:	f009 ff43 	bl	80ac2d4 <mbedtls_mpi_get_bit>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 80a244e:	b140      	cbz	r0, 80a2462 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
 80a2450:	b1ee      	cbz	r6, 80a248e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x72>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 80a2452:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 80a2456:	2100      	movs	r1, #0
 80a2458:	4628      	mov	r0, r5
 80a245a:	f00a f96a 	bl	80ac732 <mbedtls_mpi_cmp_int>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
 80a245e:	2800      	cmp	r0, #0
 80a2460:	dc01      	bgt.n	80a2466 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x4a>
    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a2462:	481a      	ldr	r0, [pc, #104]	; (80a24cc <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0xb0>)
 80a2464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 80a2466:	2100      	movs	r1, #0
 80a2468:	4628      	mov	r0, r5
 80a246a:	f009 ff33 	bl	80ac2d4 <mbedtls_mpi_get_bit>
#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 80a246e:	2800      	cmp	r0, #0
 80a2470:	d0f7      	beq.n	80a2462 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 80a2472:	f104 0538 	add.w	r5, r4, #56	; 0x38
 80a2476:	2100      	movs	r1, #0
 80a2478:	4628      	mov	r0, r5
 80a247a:	f00a f95a 	bl	80ac732 <mbedtls_mpi_cmp_int>
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 80a247e:	2800      	cmp	r0, #0
 80a2480:	ddef      	ble.n	80a2462 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
 80a2482:	2100      	movs	r1, #0
 80a2484:	4628      	mov	r0, r5
 80a2486:	f009 ff25 	bl	80ac2d4 <mbedtls_mpi_get_bit>
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 80a248a:	2800      	cmp	r0, #0
 80a248c:	d0e9      	beq.n	80a2462 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
 80a248e:	2100      	movs	r1, #0
 80a2490:	f104 0014 	add.w	r0, r4, #20
 80a2494:	f00a f94d 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a2498:	2800      	cmp	r0, #0
 80a249a:	dde2      	ble.n	80a2462 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
 80a249c:	b1a6      	cbz	r6, 80a24c8 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0xac>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 80a249e:	2100      	movs	r1, #0
 80a24a0:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80a24a4:	f00a f945 	bl	80ac732 <mbedtls_mpi_cmp_int>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
 80a24a8:	2800      	cmp	r0, #0
 80a24aa:	ddda      	ble.n	80a2462 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
 80a24ac:	2100      	movs	r1, #0
 80a24ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80a24b2:	f00a f93e 	bl	80ac732 <mbedtls_mpi_cmp_int>
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 80a24b6:	2800      	cmp	r0, #0
 80a24b8:	ddd3      	ble.n	80a2462 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
 80a24ba:	2100      	movs	r1, #0
 80a24bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80a24c0:	f00a f937 	bl	80ac732 <mbedtls_mpi_cmp_int>
#endif

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
 80a24c4:	2800      	cmp	r0, #0
 80a24c6:	ddcc      	ble.n	80a2462 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }
#endif

    return( 0 );
 80a24c8:	2000      	movs	r0, #0
 80a24ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a24cc:	ffffbf80 	.word	0xffffbf80

080a24d0 <mbedtls_rsa_import_raw>:
                            unsigned char const *N, size_t N_len,
                            unsigned char const *P, size_t P_len,
                            unsigned char const *Q, size_t Q_len,
                            unsigned char const *D, size_t D_len,
                            unsigned char const *E, size_t E_len )
{
 80a24d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a24d4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80a24d6:	4604      	mov	r4, r0
 80a24d8:	4698      	mov	r8, r3
 80a24da:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80a24dc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    int ret = 0;
    RSA_VALIDATE_RET( ctx != NULL );

    if( N != NULL )
 80a24de:	b149      	cbz	r1, 80a24f4 <mbedtls_rsa_import_raw+0x24>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
 80a24e0:	f100 0908 	add.w	r9, r0, #8
 80a24e4:	4648      	mov	r0, r9
 80a24e6:	f009 ff45 	bl	80ac374 <mbedtls_mpi_read_binary>
 80a24ea:	bb50      	cbnz	r0, 80a2542 <mbedtls_rsa_import_raw+0x72>
        ctx->len = mbedtls_mpi_size( &ctx->N );
 80a24ec:	4648      	mov	r0, r9
 80a24ee:	f009 ff3b 	bl	80ac368 <mbedtls_mpi_size>
 80a24f2:	6060      	str	r0, [r4, #4]
    }

    if( P != NULL )
 80a24f4:	f1b8 0f00 	cmp.w	r8, #0
 80a24f8:	d101      	bne.n	80a24fe <mbedtls_rsa_import_raw+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );

    if( Q != NULL )
 80a24fa:	b947      	cbnz	r7, 80a250e <mbedtls_rsa_import_raw+0x3e>
 80a24fc:	e00e      	b.n	80a251c <mbedtls_rsa_import_raw+0x4c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
        ctx->len = mbedtls_mpi_size( &ctx->N );
    }

    if( P != NULL )
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
 80a24fe:	9a08      	ldr	r2, [sp, #32]
 80a2500:	4641      	mov	r1, r8
 80a2502:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a2506:	f009 ff35 	bl	80ac374 <mbedtls_mpi_read_binary>
 80a250a:	b9d0      	cbnz	r0, 80a2542 <mbedtls_rsa_import_raw+0x72>
 80a250c:	e7f5      	b.n	80a24fa <mbedtls_rsa_import_raw+0x2a>

    if( Q != NULL )
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
 80a250e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a2510:	4639      	mov	r1, r7
 80a2512:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a2516:	f009 ff2d 	bl	80ac374 <mbedtls_mpi_read_binary>
 80a251a:	b990      	cbnz	r0, 80a2542 <mbedtls_rsa_import_raw+0x72>

    if( D != NULL )
 80a251c:	b136      	cbz	r6, 80a252c <mbedtls_rsa_import_raw+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
 80a251e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a2520:	4631      	mov	r1, r6
 80a2522:	f104 0020 	add.w	r0, r4, #32
 80a2526:	f009 ff25 	bl	80ac374 <mbedtls_mpi_read_binary>
 80a252a:	b950      	cbnz	r0, 80a2542 <mbedtls_rsa_import_raw+0x72>

    if( E != NULL )
 80a252c:	b135      	cbz	r5, 80a253c <mbedtls_rsa_import_raw+0x6c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );
 80a252e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80a2530:	4629      	mov	r1, r5
 80a2532:	f104 0014 	add.w	r0, r4, #20
 80a2536:	f009 ff1d 	bl	80ac374 <mbedtls_mpi_read_binary>

cleanup:

    if( ret != 0 )
 80a253a:	b910      	cbnz	r0, 80a2542 <mbedtls_rsa_import_raw+0x72>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );

    return( 0 );
 80a253c:	2000      	movs	r0, #0
 80a253e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );

cleanup:

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 80a2542:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080

    return( 0 );
}
 80a2546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080a254c <mbedtls_rsa_complete>:

    return( 0 );
}

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
 80a254c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int have_N, have_P, have_Q, have_D, have_E;
    int n_missing, pq_missing, d_missing, is_pub, is_priv;

    RSA_VALIDATE_RET( ctx != NULL );

    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 80a2550:	f100 0b08 	add.w	fp, r0, #8

    return( 0 );
}

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
 80a2554:	b087      	sub	sp, #28
 80a2556:	4607      	mov	r7, r0
    int have_N, have_P, have_Q, have_D, have_E;
    int n_missing, pq_missing, d_missing, is_pub, is_priv;

    RSA_VALIDATE_RET( ctx != NULL );

    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 80a2558:	2100      	movs	r1, #0
 80a255a:	4658      	mov	r0, fp
 80a255c:	f00a f8e9 	bl	80ac732 <mbedtls_mpi_cmp_int>
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 80a2560:	f107 092c 	add.w	r9, r7, #44	; 0x2c
 80a2564:	2100      	movs	r1, #0
    int have_N, have_P, have_Q, have_D, have_E;
    int n_missing, pq_missing, d_missing, is_pub, is_priv;

    RSA_VALIDATE_RET( ctx != NULL );

    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 80a2566:	4680      	mov	r8, r0
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 80a2568:	4648      	mov	r0, r9
 80a256a:	f00a f8e2 	bl	80ac732 <mbedtls_mpi_cmp_int>
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 80a256e:	f107 0a38 	add.w	sl, r7, #56	; 0x38
    int n_missing, pq_missing, d_missing, is_pub, is_priv;

    RSA_VALIDATE_RET( ctx != NULL );

    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 80a2572:	9005      	str	r0, [sp, #20]
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 80a2574:	2100      	movs	r1, #0
 80a2576:	4650      	mov	r0, sl
 80a2578:	f00a f8db 	bl	80ac732 <mbedtls_mpi_cmp_int>
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 80a257c:	f107 0320 	add.w	r3, r7, #32
 80a2580:	2100      	movs	r1, #0

    RSA_VALIDATE_RET( ctx != NULL );

    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 80a2582:	4605      	mov	r5, r0
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 80a2584:	4618      	mov	r0, r3
 80a2586:	9302      	str	r3, [sp, #8]
 80a2588:	f00a f8d3 	bl	80ac732 <mbedtls_mpi_cmp_int>
    have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 80a258c:	f107 0314 	add.w	r3, r7, #20
    RSA_VALIDATE_RET( ctx != NULL );

    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 80a2590:	9004      	str	r0, [sp, #16]
    have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 80a2592:	2100      	movs	r1, #0
 80a2594:	4618      	mov	r0, r3
 80a2596:	9303      	str	r3, [sp, #12]
 80a2598:	f00a f8cb 	bl	80ac732 <mbedtls_mpi_cmp_int>
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 80a259c:	9b05      	ldr	r3, [sp, #20]
 80a259e:	9a04      	ldr	r2, [sp, #16]
 80a25a0:	b14b      	cbz	r3, 80a25b6 <mbedtls_rsa_complete+0x6a>
 80a25a2:	b125      	cbz	r5, 80a25ae <mbedtls_rsa_complete+0x62>
 80a25a4:	b12a      	cbz	r2, 80a25b2 <mbedtls_rsa_complete+0x66>
 80a25a6:	1c06      	adds	r6, r0, #0
 80a25a8:	bf18      	it	ne
 80a25aa:	2601      	movne	r6, #1
 80a25ac:	e013      	b.n	80a25d6 <mbedtls_rsa_complete+0x8a>
 80a25ae:	462e      	mov	r6, r5
 80a25b0:	e011      	b.n	80a25d6 <mbedtls_rsa_complete+0x8a>
 80a25b2:	4616      	mov	r6, r2
 80a25b4:	e00f      	b.n	80a25d6 <mbedtls_rsa_complete+0x8a>
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 80a25b6:	f1b8 0f00 	cmp.w	r8, #0
 80a25ba:	d103      	bne.n	80a25c4 <mbedtls_rsa_complete+0x78>
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80a25bc:	4644      	mov	r4, r8
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 80a25be:	4646      	mov	r6, r8
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 80a25c0:	2200      	movs	r2, #0
 80a25c2:	e024      	b.n	80a260e <mbedtls_rsa_complete+0xc2>
     * (2) D and potentially N missing.
     *
     */

    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 80a25c4:	b9cd      	cbnz	r5, 80a25fa <mbedtls_rsa_complete+0xae>
 80a25c6:	b11a      	cbz	r2, 80a25d0 <mbedtls_rsa_complete+0x84>
 80a25c8:	b9f0      	cbnz	r0, 80a2608 <mbedtls_rsa_complete+0xbc>
 80a25ca:	4606      	mov	r6, r0
 80a25cc:	4604      	mov	r4, r0
 80a25ce:	e00e      	b.n	80a25ee <mbedtls_rsa_complete+0xa2>
 80a25d0:	462e      	mov	r6, r5
 80a25d2:	462c      	mov	r4, r5
 80a25d4:	e00d      	b.n	80a25f2 <mbedtls_rsa_complete+0xa6>
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80a25d6:	b1ad      	cbz	r5, 80a2604 <mbedtls_rsa_complete+0xb8>
 80a25d8:	b992      	cbnz	r2, 80a2600 <mbedtls_rsa_complete+0xb4>
 80a25da:	1c04      	adds	r4, r0, #0
 80a25dc:	bf18      	it	ne
 80a25de:	2401      	movne	r4, #1
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 80a25e0:	f1b8 0f00 	cmp.w	r8, #0
 80a25e4:	d0ec      	beq.n	80a25c0 <mbedtls_rsa_complete+0x74>
 80a25e6:	2b00      	cmp	r3, #0
 80a25e8:	d1ea      	bne.n	80a25c0 <mbedtls_rsa_complete+0x74>
 80a25ea:	2d00      	cmp	r5, #0
 80a25ec:	d1e8      	bne.n	80a25c0 <mbedtls_rsa_complete+0x74>
 80a25ee:	2a00      	cmp	r2, #0
 80a25f0:	d1e6      	bne.n	80a25c0 <mbedtls_rsa_complete+0x74>
 80a25f2:	2800      	cmp	r0, #0
 80a25f4:	d0e4      	beq.n	80a25c0 <mbedtls_rsa_complete+0x74>
 80a25f6:	2201      	movs	r2, #1
 80a25f8:	e009      	b.n	80a260e <mbedtls_rsa_complete+0xc2>
     *
     */

    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80a25fa:	461c      	mov	r4, r3
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 80a25fc:	461e      	mov	r6, r3
 80a25fe:	e7df      	b.n	80a25c0 <mbedtls_rsa_complete+0x74>
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80a2600:	2400      	movs	r4, #0
 80a2602:	e7ed      	b.n	80a25e0 <mbedtls_rsa_complete+0x94>
 80a2604:	462c      	mov	r4, r5
 80a2606:	e7db      	b.n	80a25c0 <mbedtls_rsa_complete+0x74>
     * (2) D and potentially N missing.
     *
     */

    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 80a2608:	2601      	movs	r6, #1
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80a260a:	462c      	mov	r4, r5
 80a260c:	e002      	b.n	80a2614 <mbedtls_rsa_complete+0xc8>
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;

    /* These three alternatives are mutually exclusive */
    is_priv = n_missing || pq_missing || d_missing;
 80a260e:	2e00      	cmp	r6, #0
 80a2610:	d03d      	beq.n	80a268e <mbedtls_rsa_complete+0x142>
 80a2612:	2600      	movs	r6, #0
 80a2614:	9404      	str	r4, [sp, #16]
 80a2616:	2401      	movs	r4, #1

    /*
     * Step 1: Deduce N if P, Q are provided.
     */

    if( !have_N && have_P && have_Q )
 80a2618:	f1b8 0f00 	cmp.w	r8, #0
 80a261c:	d10b      	bne.n	80a2636 <mbedtls_rsa_complete+0xea>
 80a261e:	b153      	cbz	r3, 80a2636 <mbedtls_rsa_complete+0xea>
 80a2620:	b14d      	cbz	r5, 80a2636 <mbedtls_rsa_complete+0xea>
    {
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
 80a2622:	4652      	mov	r2, sl
 80a2624:	4649      	mov	r1, r9
 80a2626:	4658      	mov	r0, fp
 80a2628:	f00a f9a2 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a262c:	bb28      	cbnz	r0, 80a267a <mbedtls_rsa_complete+0x12e>
                                         &ctx->Q ) ) != 0 )
        {
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
        }

        ctx->len = mbedtls_mpi_size( &ctx->N );
 80a262e:	4658      	mov	r0, fp
 80a2630:	f009 fe9a 	bl	80ac368 <mbedtls_mpi_size>
 80a2634:	6078      	str	r0, [r7, #4]

    /*
     * Step 2: Deduce and verify all remaining core parameters.
     */

    if( pq_missing )
 80a2636:	b146      	cbz	r6, 80a264a <mbedtls_rsa_complete+0xfe>
    {
        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,
                                         &ctx->P, &ctx->Q );
 80a2638:	f8cd a000 	str.w	sl, [sp]
 80a263c:	464b      	mov	r3, r9
 80a263e:	9a02      	ldr	r2, [sp, #8]
 80a2640:	9903      	ldr	r1, [sp, #12]
 80a2642:	4658      	mov	r0, fp
 80a2644:	f00d f998 	bl	80af978 <mbedtls_rsa_deduce_primes>
 80a2648:	e007      	b.n	80a265a <mbedtls_rsa_complete+0x10e>
        if( ret != 0 )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );

    }
    else if( d_missing )
 80a264a:	9b04      	ldr	r3, [sp, #16]
 80a264c:	b133      	cbz	r3, 80a265c <mbedtls_rsa_complete+0x110>
    {
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
 80a264e:	9b02      	ldr	r3, [sp, #8]
 80a2650:	9a03      	ldr	r2, [sp, #12]
 80a2652:	4651      	mov	r1, sl
 80a2654:	4648      	mov	r0, r9
 80a2656:	f00d fa8b 	bl	80afb70 <mbedtls_rsa_deduce_private_exponent>
 80a265a:	b970      	cbnz	r0, 80a267a <mbedtls_rsa_complete+0x12e>
     * Step 3: Deduce all additional parameters specific
     *         to our current RSA implementation.
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
 80a265c:	b184      	cbz	r4, 80a2680 <mbedtls_rsa_complete+0x134>
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 80a265e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
 80a2662:	9301      	str	r3, [sp, #4]
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 80a2664:	f107 0350 	add.w	r3, r7, #80	; 0x50
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
 80a2668:	9300      	str	r3, [sp, #0]
 80a266a:	9a02      	ldr	r2, [sp, #8]
 80a266c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80a2670:	4651      	mov	r1, sl
 80a2672:	4648      	mov	r0, r9
 80a2674:	f00d fc20 	bl	80afeb8 <mbedtls_rsa_deduce_crt>
        if( ret != 0 )
 80a2678:	b110      	cbz	r0, 80a2680 <mbedtls_rsa_complete+0x134>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 80a267a:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
 80a267e:	e00c      	b.n	80a269a <mbedtls_rsa_complete+0x14e>

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
 80a2680:	4621      	mov	r1, r4
 80a2682:	4638      	mov	r0, r7
}
 80a2684:	b007      	add	sp, #28
 80a2686:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
 80a268a:	f7ff bec7 	b.w	80a241c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;

    /* These three alternatives are mutually exclusive */
    is_priv = n_missing || pq_missing || d_missing;

    if( !is_priv && !is_pub )
 80a268e:	b90c      	cbnz	r4, 80a2694 <mbedtls_rsa_complete+0x148>
 80a2690:	b112      	cbz	r2, 80a2698 <mbedtls_rsa_complete+0x14c>
 80a2692:	4626      	mov	r6, r4
 80a2694:	9404      	str	r4, [sp, #16]
 80a2696:	e7bf      	b.n	80a2618 <mbedtls_rsa_complete+0xcc>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a2698:	4801      	ldr	r0, [pc, #4]	; (80a26a0 <mbedtls_rsa_complete+0x154>)
    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
}
 80a269a:	b007      	add	sp, #28
 80a269c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a26a0:	ffffbf80 	.word	0xffffbf80

080a26a4 <mbedtls_rsa_init>:
 * Initialize an RSA context
 */
void mbedtls_rsa_init( mbedtls_rsa_context *ctx,
               int padding,
               int hash_id )
{
 80a26a4:	b570      	push	{r4, r5, r6, lr}
 80a26a6:	4604      	mov	r4, r0
 80a26a8:	460e      	mov	r6, r1
 80a26aa:	4615      	mov	r5, r2
    RSA_VALIDATE( ctx != NULL );
    RSA_VALIDATE( padding == MBEDTLS_RSA_PKCS_V15 ||
                  padding == MBEDTLS_RSA_PKCS_V21 );

    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
 80a26ac:	2100      	movs	r1, #0
 80a26ae:	22ac      	movs	r2, #172	; 0xac
 80a26b0:	f010 f8c7 	bl	80b2842 <memset>
{
    RSA_VALIDATE( ctx != NULL );
    RSA_VALIDATE( padding == MBEDTLS_RSA_PKCS_V15 ||
                  padding == MBEDTLS_RSA_PKCS_V21 );

    ctx->padding = padding;
 80a26b4:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    ctx->hash_id = hash_id;
 80a26b8:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 80a26bc:	bd70      	pop	{r4, r5, r6, pc}

080a26be <mbedtls_rsa_get_len>:
 */

size_t mbedtls_rsa_get_len( const mbedtls_rsa_context *ctx )
{
    return( ctx->len );
}
 80a26be:	6840      	ldr	r0, [r0, #4]
 80a26c0:	4770      	bx	lr
	...

080a26c4 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
 80a26c4:	b570      	push	{r4, r5, r6, lr}
    RSA_VALIDATE_RET( ctx != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 80a26c6:	2100      	movs	r1, #0

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
 80a26c8:	4604      	mov	r4, r0
    RSA_VALIDATE_RET( ctx != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 80a26ca:	f7ff fea7 	bl	80a241c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 80a26ce:	4605      	mov	r5, r0
 80a26d0:	b9b8      	cbnz	r0, 80a2702 <mbedtls_rsa_check_pubkey+0x3e>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
 80a26d2:	f104 0608 	add.w	r6, r4, #8
 80a26d6:	4630      	mov	r0, r6
 80a26d8:	f009 fe26 	bl	80ac328 <mbedtls_mpi_bitlen>
 80a26dc:	287f      	cmp	r0, #127	; 0x7f
 80a26de:	d910      	bls.n	80a2702 <mbedtls_rsa_check_pubkey+0x3e>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 80a26e0:	3414      	adds	r4, #20
 80a26e2:	4629      	mov	r1, r5
 80a26e4:	4620      	mov	r0, r4
 80a26e6:	f009 fdf5 	bl	80ac2d4 <mbedtls_mpi_get_bit>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 80a26ea:	b150      	cbz	r0, 80a2702 <mbedtls_rsa_check_pubkey+0x3e>
 80a26ec:	4620      	mov	r0, r4
 80a26ee:	f009 fe1b 	bl	80ac328 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 80a26f2:	2801      	cmp	r0, #1
 80a26f4:	d905      	bls.n	80a2702 <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
 80a26f6:	4631      	mov	r1, r6
 80a26f8:	4620      	mov	r0, r4
 80a26fa:	f009 ffd5 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 80a26fe:	2800      	cmp	r0, #0
 80a2700:	db00      	blt.n	80a2704 <mbedtls_rsa_check_pubkey+0x40>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 80a2702:	4d01      	ldr	r5, [pc, #4]	; (80a2708 <mbedtls_rsa_check_pubkey+0x44>)
    }

    return( 0 );
}
 80a2704:	4628      	mov	r0, r5
 80a2706:	bd70      	pop	{r4, r5, r6, pc}
 80a2708:	ffffbe00 	.word	0xffffbe00

080a270c <mbedtls_rsa_check_privkey>:

/*
 * Check for the consistency of all fields in an RSA private key context
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
 80a270c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a270e:	b085      	sub	sp, #20
 80a2710:	4604      	mov	r4, r0
    RSA_VALIDATE_RET( ctx != NULL );

    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 80a2712:	f7ff ffd7 	bl	80a26c4 <mbedtls_rsa_check_pubkey>
 80a2716:	bb28      	cbnz	r0, 80a2764 <mbedtls_rsa_check_privkey+0x58>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
 80a2718:	2101      	movs	r1, #1
 80a271a:	4620      	mov	r0, r4
 80a271c:	f7ff fe7e 	bl	80a241c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
    RSA_VALIDATE_RET( ctx != NULL );

    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 80a2720:	bb00      	cbnz	r0, 80a2764 <mbedtls_rsa_check_privkey+0x58>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,
 80a2722:	f104 0314 	add.w	r3, r4, #20
 80a2726:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 80a272a:	f104 0638 	add.w	r6, r4, #56	; 0x38
 80a272e:	f104 0720 	add.w	r7, r4, #32
 80a2732:	9002      	str	r0, [sp, #8]
 80a2734:	9001      	str	r0, [sp, #4]
 80a2736:	9300      	str	r3, [sp, #0]
 80a2738:	4632      	mov	r2, r6
 80a273a:	463b      	mov	r3, r7
 80a273c:	4629      	mov	r1, r5
 80a273e:	f104 0008 	add.w	r0, r4, #8
 80a2742:	f00d faf3 	bl	80afd2c <mbedtls_rsa_validate_params>
 80a2746:	b968      	cbnz	r0, 80a2764 <mbedtls_rsa_check_privkey+0x58>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,
 80a2748:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 80a274c:	9301      	str	r3, [sp, #4]
 80a274e:	f104 0350 	add.w	r3, r4, #80	; 0x50
 80a2752:	9300      	str	r3, [sp, #0]
 80a2754:	463a      	mov	r2, r7
 80a2756:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80a275a:	4631      	mov	r1, r6
 80a275c:	4628      	mov	r0, r5
 80a275e:	f00d fa65 	bl	80afc2c <mbedtls_rsa_validate_crt>
 80a2762:	b100      	cbz	r0, 80a2766 <mbedtls_rsa_check_privkey+0x5a>
    RSA_VALIDATE_RET( ctx != NULL );

    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 80a2764:	4801      	ldr	r0, [pc, #4]	; (80a276c <mbedtls_rsa_check_privkey+0x60>)
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }
#endif

    return( 0 );
}
 80a2766:	b005      	add	sp, #20
 80a2768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a276a:	bf00      	nop
 80a276c:	ffffbe00 	.word	0xffffbe00

080a2770 <mbedtls_rsa_check_pub_priv>:
/*
 * Check if contexts holding a public and private key match
 */
int mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,
                                const mbedtls_rsa_context *prv )
{
 80a2770:	b538      	push	{r3, r4, r5, lr}
 80a2772:	4605      	mov	r5, r0
 80a2774:	460c      	mov	r4, r1
    RSA_VALIDATE_RET( pub != NULL );
    RSA_VALIDATE_RET( prv != NULL );

    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 80a2776:	f7ff ffa5 	bl	80a26c4 <mbedtls_rsa_check_pubkey>
 80a277a:	b950      	cbnz	r0, 80a2792 <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
 80a277c:	4620      	mov	r0, r4
 80a277e:	f7ff ffc5 	bl	80a270c <mbedtls_rsa_check_privkey>
                                const mbedtls_rsa_context *prv )
{
    RSA_VALIDATE_RET( pub != NULL );
    RSA_VALIDATE_RET( prv != NULL );

    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 80a2782:	b930      	cbnz	r0, 80a2792 <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 80a2784:	f104 0108 	add.w	r1, r4, #8
 80a2788:	f105 0008 	add.w	r0, r5, #8
 80a278c:	f009 ff8c 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80a2790:	b108      	cbz	r0, 80a2796 <mbedtls_rsa_check_pub_priv+0x26>
    RSA_VALIDATE_RET( prv != NULL );

    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 80a2792:	4805      	ldr	r0, [pc, #20]	; (80a27a8 <mbedtls_rsa_check_pub_priv+0x38>)
 80a2794:	bd38      	pop	{r3, r4, r5, pc}
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
 80a2796:	f104 0114 	add.w	r1, r4, #20
 80a279a:	f105 0014 	add.w	r0, r5, #20
 80a279e:	f009 ff83 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 80a27a2:	2800      	cmp	r0, #0
 80a27a4:	d1f5      	bne.n	80a2792 <mbedtls_rsa_check_pub_priv+0x22>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    return( 0 );
}
 80a27a6:	bd38      	pop	{r3, r4, r5, pc}
 80a27a8:	ffffbe00 	.word	0xffffbe00

080a27ac <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
 80a27ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a27b0:	460c      	mov	r4, r1
 80a27b2:	b086      	sub	sp, #24
    mbedtls_mpi T;
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 80a27b4:	2100      	movs	r1, #0
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
 80a27b6:	4605      	mov	r5, r0
 80a27b8:	4617      	mov	r7, r2
    mbedtls_mpi T;
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 80a27ba:	f7ff fe2f 	bl	80a241c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 80a27be:	4606      	mov	r6, r0
 80a27c0:	bb78      	cbnz	r0, 80a2822 <mbedtls_rsa_public+0x76>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
 80a27c2:	a803      	add	r0, sp, #12
 80a27c4:	f009 fc89 	bl	80ac0da <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 80a27c8:	4621      	mov	r1, r4
 80a27ca:	686a      	ldr	r2, [r5, #4]
 80a27cc:	a803      	add	r0, sp, #12
 80a27ce:	f009 fdd1 	bl	80ac374 <mbedtls_mpi_read_binary>
 80a27d2:	4604      	mov	r4, r0
 80a27d4:	b9f0      	cbnz	r0, 80a2814 <mbedtls_rsa_public+0x68>

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 80a27d6:	f105 0408 	add.w	r4, r5, #8
 80a27da:	4621      	mov	r1, r4
 80a27dc:	a803      	add	r0, sp, #12
 80a27de:	f009 ff63 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80a27e2:	2800      	cmp	r0, #0
 80a27e4:	da14      	bge.n	80a2810 <mbedtls_rsa_public+0x64>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 80a27e6:	f105 0368 	add.w	r3, r5, #104	; 0x68
 80a27ea:	a903      	add	r1, sp, #12
 80a27ec:	9300      	str	r3, [sp, #0]
 80a27ee:	f105 0214 	add.w	r2, r5, #20
 80a27f2:	4623      	mov	r3, r4
 80a27f4:	4608      	mov	r0, r1
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
 80a27f6:	f8d5 8004 	ldr.w	r8, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 80a27fa:	f00a fb27 	bl	80ace4c <mbedtls_mpi_exp_mod>
 80a27fe:	4604      	mov	r4, r0
 80a2800:	b940      	cbnz	r0, 80a2814 <mbedtls_rsa_public+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 80a2802:	4642      	mov	r2, r8
 80a2804:	4639      	mov	r1, r7
 80a2806:	a803      	add	r0, sp, #12
 80a2808:	f009 fdeb 	bl	80ac3e2 <mbedtls_mpi_write_binary>
 80a280c:	4604      	mov	r4, r0
 80a280e:	e001      	b.n	80a2814 <mbedtls_rsa_public+0x68>

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 80a2810:	f06f 0403 	mvn.w	r4, #3
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
 80a2814:	a803      	add	r0, sp, #12
 80a2816:	f009 fc66 	bl	80ac0e6 <mbedtls_mpi_free>

    if( ret != 0 )
 80a281a:	b11c      	cbz	r4, 80a2824 <mbedtls_rsa_public+0x78>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
 80a281c:	f5a4 4685 	sub.w	r6, r4, #17024	; 0x4280
 80a2820:	e000      	b.n	80a2824 <mbedtls_rsa_public+0x78>
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a2822:	4e02      	ldr	r6, [pc, #8]	; (80a282c <mbedtls_rsa_public+0x80>)

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );

    return( 0 );
}
 80a2824:	4630      	mov	r0, r6
 80a2826:	b006      	add	sp, #24
 80a2828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a282c:	ffffbf80 	.word	0xffffbf80

080a2830 <mbedtls_rsa_private>:
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
 80a2830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2834:	460e      	mov	r6, r1
 80a2836:	b0a5      	sub	sp, #148	; 0x94

    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input  != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 1             /* private key checks */,
 80a2838:	2101      	movs	r1, #1
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
 80a283a:	4604      	mov	r4, r0
 80a283c:	4692      	mov	sl, r2
 80a283e:	461d      	mov	r5, r3

    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input  != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 1             /* private key checks */,
 80a2840:	f7ff fdec 	bl	80a241c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 80a2844:	9003      	str	r0, [sp, #12]
 80a2846:	2800      	cmp	r0, #0
 80a2848:	f040 819b 	bne.w	80a2b82 <mbedtls_rsa_private+0x352>
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    /* MPI Initialization */
    mbedtls_mpi_init( &T );
 80a284c:	a806      	add	r0, sp, #24
 80a284e:	f009 fc44 	bl	80ac0da <mbedtls_mpi_init>

    mbedtls_mpi_init( &P1 );
 80a2852:	a809      	add	r0, sp, #36	; 0x24
 80a2854:	f009 fc41 	bl	80ac0da <mbedtls_mpi_init>
    mbedtls_mpi_init( &Q1 );
 80a2858:	a80c      	add	r0, sp, #48	; 0x30
 80a285a:	f009 fc3e 	bl	80ac0da <mbedtls_mpi_init>
    mbedtls_mpi_init( &R );
 80a285e:	a80f      	add	r0, sp, #60	; 0x3c
 80a2860:	f009 fc3b 	bl	80ac0da <mbedtls_mpi_init>

    if( f_rng != NULL )
 80a2864:	b12e      	cbz	r6, 80a2872 <mbedtls_rsa_private+0x42>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_init( &D_blind );
#else
        mbedtls_mpi_init( &DP_blind );
 80a2866:	a818      	add	r0, sp, #96	; 0x60
 80a2868:	f009 fc37 	bl	80ac0da <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
 80a286c:	a81b      	add	r0, sp, #108	; 0x6c
 80a286e:	f009 fc34 	bl	80ac0da <mbedtls_mpi_init>
#endif
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
 80a2872:	a812      	add	r0, sp, #72	; 0x48
 80a2874:	f009 fc31 	bl	80ac0da <mbedtls_mpi_init>
 80a2878:	a815      	add	r0, sp, #84	; 0x54
 80a287a:	f009 fc2e 	bl	80ac0da <mbedtls_mpi_init>
#endif

    mbedtls_mpi_init( &I );
 80a287e:	a81e      	add	r0, sp, #120	; 0x78
 80a2880:	f009 fc2b 	bl	80ac0da <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
 80a2884:	a821      	add	r0, sp, #132	; 0x84
 80a2886:	f009 fc28 	bl	80ac0da <mbedtls_mpi_init>

    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 80a288a:	6862      	ldr	r2, [r4, #4]
 80a288c:	4629      	mov	r1, r5
 80a288e:	a806      	add	r0, sp, #24
 80a2890:	f009 fd70 	bl	80ac374 <mbedtls_mpi_read_binary>
 80a2894:	4607      	mov	r7, r0
 80a2896:	2800      	cmp	r0, #0
 80a2898:	f040 8150 	bne.w	80a2b3c <mbedtls_rsa_private+0x30c>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 80a289c:	f104 0508 	add.w	r5, r4, #8
 80a28a0:	4629      	mov	r1, r5
 80a28a2:	a806      	add	r0, sp, #24
 80a28a4:	f009 ff00 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80a28a8:	2800      	cmp	r0, #0
 80a28aa:	f280 8143 	bge.w	80a2b34 <mbedtls_rsa_private+0x304>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
 80a28ae:	a906      	add	r1, sp, #24
 80a28b0:	a81e      	add	r0, sp, #120	; 0x78
 80a28b2:	f009 fc92 	bl	80ac1da <mbedtls_mpi_copy>
 80a28b6:	4607      	mov	r7, r0
 80a28b8:	2800      	cmp	r0, #0
 80a28ba:	f040 813f 	bne.w	80a2b3c <mbedtls_rsa_private+0x30c>
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
    mbedtls_mpi *DQ = &ctx->DQ;
 80a28be:	f104 0350 	add.w	r3, r4, #80	; 0x50
     * the mod p resp. mod q computation (if used). */
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
 80a28c2:	f104 0944 	add.w	r9, r4, #68	; 0x44
    mbedtls_mpi *DQ = &ctx->DQ;
 80a28c6:	9304      	str	r3, [sp, #16]
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );

    if( f_rng != NULL )
 80a28c8:	2e00      	cmp	r6, #0
 80a28ca:	f000 80c5 	beq.w	80a2a58 <mbedtls_rsa_private+0x228>
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    int ret, count = 0;

    if( ctx->Vf.p != NULL )
 80a28ce:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80a28d2:	b323      	cbz	r3, 80a291e <mbedtls_rsa_private+0xee>
    {
        /* We already have blinding values, just update them by squaring */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
 80a28d4:	f104 088c 	add.w	r8, r4, #140	; 0x8c
 80a28d8:	4642      	mov	r2, r8
 80a28da:	4641      	mov	r1, r8
 80a28dc:	4640      	mov	r0, r8
 80a28de:	f00a f847 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a28e2:	4607      	mov	r7, r0
 80a28e4:	2800      	cmp	r0, #0
 80a28e6:	f040 8129 	bne.w	80a2b3c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
 80a28ea:	462a      	mov	r2, r5
 80a28ec:	4641      	mov	r1, r8
 80a28ee:	4640      	mov	r0, r8
 80a28f0:	f00a fa7a 	bl	80acde8 <mbedtls_mpi_mod_mpi>
 80a28f4:	4607      	mov	r7, r0
 80a28f6:	2800      	cmp	r0, #0
 80a28f8:	f040 8120 	bne.w	80a2b3c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
 80a28fc:	f104 0898 	add.w	r8, r4, #152	; 0x98
 80a2900:	4642      	mov	r2, r8
 80a2902:	4641      	mov	r1, r8
 80a2904:	4640      	mov	r0, r8
 80a2906:	f00a f833 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a290a:	4607      	mov	r7, r0
 80a290c:	2800      	cmp	r0, #0
 80a290e:	f040 8115 	bne.w	80a2b3c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
 80a2912:	462a      	mov	r2, r5
 80a2914:	4641      	mov	r1, r8
 80a2916:	4640      	mov	r0, r8
 80a2918:	f00a fa66 	bl	80acde8 <mbedtls_mpi_mod_mpi>
 80a291c:	e037      	b.n	80a298e <mbedtls_rsa_private+0x15e>
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    int ret, count = 0;

    if( ctx->Vf.p != NULL )
 80a291e:	230c      	movs	r3, #12
 80a2920:	9305      	str	r3, [sp, #20]
    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
            return( MBEDTLS_ERR_RSA_RNG_FAILED );

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 80a2922:	f104 0b98 	add.w	fp, r4, #152	; 0x98
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 80a2926:	f104 088c 	add.w	r8, r4, #140	; 0x8c
        goto cleanup;
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
 80a292a:	9b05      	ldr	r3, [sp, #20]
 80a292c:	3b01      	subs	r3, #1
 80a292e:	9305      	str	r3, [sp, #20]
 80a2930:	f000 812a 	beq.w	80a2b88 <mbedtls_rsa_private+0x358>
            return( MBEDTLS_ERR_RSA_RNG_FAILED );

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 80a2934:	6861      	ldr	r1, [r4, #4]
 80a2936:	4653      	mov	r3, sl
 80a2938:	4632      	mov	r2, r6
 80a293a:	3901      	subs	r1, #1
 80a293c:	4658      	mov	r0, fp
 80a293e:	f00a fd29 	bl	80ad394 <mbedtls_mpi_fill_random>
 80a2942:	4607      	mov	r7, r0
 80a2944:	2800      	cmp	r0, #0
 80a2946:	f040 80f9 	bne.w	80a2b3c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 80a294a:	462a      	mov	r2, r5
 80a294c:	4659      	mov	r1, fp
 80a294e:	4640      	mov	r0, r8
 80a2950:	f00a fc9b 	bl	80ad28a <mbedtls_mpi_gcd>
 80a2954:	4607      	mov	r7, r0
 80a2956:	2800      	cmp	r0, #0
 80a2958:	f040 80f0 	bne.w	80a2b3c <mbedtls_rsa_private+0x30c>
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
 80a295c:	2101      	movs	r1, #1
 80a295e:	4640      	mov	r0, r8
 80a2960:	f009 fee7 	bl	80ac732 <mbedtls_mpi_cmp_int>

        goto cleanup;
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
 80a2964:	2800      	cmp	r0, #0
 80a2966:	d1e0      	bne.n	80a292a <mbedtls_rsa_private+0xfa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );

    /* Blinding value: Vi =  Vf^(-e) mod N */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 80a2968:	462a      	mov	r2, r5
 80a296a:	4659      	mov	r1, fp
 80a296c:	4640      	mov	r0, r8
 80a296e:	f00a fd45 	bl	80ad3fc <mbedtls_mpi_inv_mod>
 80a2972:	4607      	mov	r7, r0
 80a2974:	2800      	cmp	r0, #0
 80a2976:	f040 80e1 	bne.w	80a2b3c <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 80a297a:	f104 0368 	add.w	r3, r4, #104	; 0x68
 80a297e:	9300      	str	r3, [sp, #0]
 80a2980:	f104 0214 	add.w	r2, r4, #20
 80a2984:	462b      	mov	r3, r5
 80a2986:	4641      	mov	r1, r8
 80a2988:	4640      	mov	r0, r8
 80a298a:	f00a fa5f 	bl	80ace4c <mbedtls_mpi_exp_mod>
 80a298e:	4607      	mov	r7, r0
    {
        /*
         * Blinding
         * T = T * Vi mod N
         */
        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
 80a2990:	2800      	cmp	r0, #0
 80a2992:	f040 80d3 	bne.w	80a2b3c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
 80a2996:	a906      	add	r1, sp, #24
 80a2998:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 80a299c:	4608      	mov	r0, r1
 80a299e:	f009 ffe7 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a29a2:	4607      	mov	r7, r0
 80a29a4:	2800      	cmp	r0, #0
 80a29a6:	f040 80c9 	bne.w	80a2b3c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 80a29aa:	a906      	add	r1, sp, #24
 80a29ac:	462a      	mov	r2, r5
 80a29ae:	4608      	mov	r0, r1
 80a29b0:	f00a fa1a 	bl	80acde8 <mbedtls_mpi_mod_mpi>
 80a29b4:	4607      	mov	r7, r0
 80a29b6:	2800      	cmp	r0, #0
 80a29b8:	f040 80c0 	bne.w	80a2b3c <mbedtls_rsa_private+0x30c>

        /*
         * Exponent blinding
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 80a29bc:	2201      	movs	r2, #1
 80a29be:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 80a29c2:	a809      	add	r0, sp, #36	; 0x24
 80a29c4:	f009 ffbe 	bl	80ac944 <mbedtls_mpi_sub_int>
 80a29c8:	4607      	mov	r7, r0
 80a29ca:	2800      	cmp	r0, #0
 80a29cc:	f040 80b6 	bne.w	80a2b3c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 80a29d0:	2201      	movs	r2, #1
 80a29d2:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80a29d6:	a80c      	add	r0, sp, #48	; 0x30
 80a29d8:	f009 ffb4 	bl	80ac944 <mbedtls_mpi_sub_int>
 80a29dc:	4607      	mov	r7, r0
 80a29de:	2800      	cmp	r0, #0
 80a29e0:	f040 80ac 	bne.w	80a2b3c <mbedtls_rsa_private+0x30c>
        D = &D_blind;
#else
        /*
         * DP_blind = ( P - 1 ) * R + DP
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 80a29e4:	4653      	mov	r3, sl
 80a29e6:	4632      	mov	r2, r6
 80a29e8:	211c      	movs	r1, #28
 80a29ea:	a80f      	add	r0, sp, #60	; 0x3c
 80a29ec:	f00a fcd2 	bl	80ad394 <mbedtls_mpi_fill_random>
 80a29f0:	4607      	mov	r7, r0
 80a29f2:	2800      	cmp	r0, #0
 80a29f4:	f040 80a2 	bne.w	80a2b3c <mbedtls_rsa_private+0x30c>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
 80a29f8:	aa0f      	add	r2, sp, #60	; 0x3c
 80a29fa:	a909      	add	r1, sp, #36	; 0x24
 80a29fc:	a818      	add	r0, sp, #96	; 0x60
 80a29fe:	f009 ffb7 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a2a02:	4607      	mov	r7, r0
 80a2a04:	2800      	cmp	r0, #0
 80a2a06:	f040 8099 	bne.w	80a2b3c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
 80a2a0a:	a918      	add	r1, sp, #96	; 0x60
 80a2a0c:	464a      	mov	r2, r9
 80a2a0e:	4608      	mov	r0, r1
 80a2a10:	f009 ff3f 	bl	80ac892 <mbedtls_mpi_add_mpi>
 80a2a14:	4607      	mov	r7, r0
 80a2a16:	2800      	cmp	r0, #0
 80a2a18:	f040 8090 	bne.w	80a2b3c <mbedtls_rsa_private+0x30c>
        DP = &DP_blind;

        /*
         * DQ_blind = ( Q - 1 ) * R + DQ
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 80a2a1c:	4653      	mov	r3, sl
 80a2a1e:	4632      	mov	r2, r6
 80a2a20:	211c      	movs	r1, #28
 80a2a22:	a80f      	add	r0, sp, #60	; 0x3c
 80a2a24:	f00a fcb6 	bl	80ad394 <mbedtls_mpi_fill_random>
 80a2a28:	4607      	mov	r7, r0
 80a2a2a:	2800      	cmp	r0, #0
 80a2a2c:	f040 8086 	bne.w	80a2b3c <mbedtls_rsa_private+0x30c>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
 80a2a30:	aa0f      	add	r2, sp, #60	; 0x3c
 80a2a32:	a90c      	add	r1, sp, #48	; 0x30
 80a2a34:	a81b      	add	r0, sp, #108	; 0x6c
 80a2a36:	f009 ff9b 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a2a3a:	4607      	mov	r7, r0
 80a2a3c:	2800      	cmp	r0, #0
 80a2a3e:	d17d      	bne.n	80a2b3c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
 80a2a40:	a91b      	add	r1, sp, #108	; 0x6c
 80a2a42:	9a04      	ldr	r2, [sp, #16]
 80a2a44:	4608      	mov	r0, r1
 80a2a46:	f009 ff24 	bl	80ac892 <mbedtls_mpi_add_mpi>
 80a2a4a:	4607      	mov	r7, r0
 80a2a4c:	2800      	cmp	r0, #0
 80a2a4e:	d175      	bne.n	80a2b3c <mbedtls_rsa_private+0x30c>
                    &ctx->DQ ) );

        DQ = &DQ_blind;
 80a2a50:	ab1b      	add	r3, sp, #108	; 0x6c
 80a2a52:	9304      	str	r3, [sp, #16]
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
                    &ctx->DP ) );

        DP = &DP_blind;
 80a2a54:	f10d 0960 	add.w	r9, sp, #96	; 0x60
     *
     * TP = input ^ dP mod P
     * TQ = input ^ dQ mod Q
     */

    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
 80a2a58:	f104 0374 	add.w	r3, r4, #116	; 0x74
 80a2a5c:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 80a2a60:	9300      	str	r3, [sp, #0]
 80a2a62:	464a      	mov	r2, r9
 80a2a64:	4643      	mov	r3, r8
 80a2a66:	a906      	add	r1, sp, #24
 80a2a68:	a812      	add	r0, sp, #72	; 0x48
 80a2a6a:	f00a f9ef 	bl	80ace4c <mbedtls_mpi_exp_mod>
 80a2a6e:	4607      	mov	r7, r0
 80a2a70:	2800      	cmp	r0, #0
 80a2a72:	d163      	bne.n	80a2b3c <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
 80a2a74:	f104 0380 	add.w	r3, r4, #128	; 0x80
 80a2a78:	f104 0938 	add.w	r9, r4, #56	; 0x38
 80a2a7c:	9300      	str	r3, [sp, #0]
 80a2a7e:	9a04      	ldr	r2, [sp, #16]
 80a2a80:	464b      	mov	r3, r9
 80a2a82:	a906      	add	r1, sp, #24
 80a2a84:	a815      	add	r0, sp, #84	; 0x54
 80a2a86:	f00a f9e1 	bl	80ace4c <mbedtls_mpi_exp_mod>
 80a2a8a:	4607      	mov	r7, r0
 80a2a8c:	2800      	cmp	r0, #0
 80a2a8e:	d155      	bne.n	80a2b3c <mbedtls_rsa_private+0x30c>

    /*
     * T = (TP - TQ) * (Q^-1 mod P) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
 80a2a90:	aa15      	add	r2, sp, #84	; 0x54
 80a2a92:	a912      	add	r1, sp, #72	; 0x48
 80a2a94:	a806      	add	r0, sp, #24
 80a2a96:	f009 ff1d 	bl	80ac8d4 <mbedtls_mpi_sub_mpi>
 80a2a9a:	4607      	mov	r7, r0
 80a2a9c:	2800      	cmp	r0, #0
 80a2a9e:	d14d      	bne.n	80a2b3c <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
 80a2aa0:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 80a2aa4:	a906      	add	r1, sp, #24
 80a2aa6:	a812      	add	r0, sp, #72	; 0x48
 80a2aa8:	f009 ff62 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a2aac:	4607      	mov	r7, r0
 80a2aae:	2800      	cmp	r0, #0
 80a2ab0:	d144      	bne.n	80a2b3c <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
 80a2ab2:	4642      	mov	r2, r8
 80a2ab4:	a912      	add	r1, sp, #72	; 0x48
 80a2ab6:	a806      	add	r0, sp, #24
 80a2ab8:	f00a f996 	bl	80acde8 <mbedtls_mpi_mod_mpi>
 80a2abc:	4607      	mov	r7, r0
 80a2abe:	2800      	cmp	r0, #0
 80a2ac0:	d13c      	bne.n	80a2b3c <mbedtls_rsa_private+0x30c>

    /*
     * T = TQ + T * Q
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
 80a2ac2:	464a      	mov	r2, r9
 80a2ac4:	a906      	add	r1, sp, #24
 80a2ac6:	a812      	add	r0, sp, #72	; 0x48
 80a2ac8:	f009 ff52 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a2acc:	4607      	mov	r7, r0
 80a2ace:	2800      	cmp	r0, #0
 80a2ad0:	d134      	bne.n	80a2b3c <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
 80a2ad2:	aa12      	add	r2, sp, #72	; 0x48
 80a2ad4:	a915      	add	r1, sp, #84	; 0x54
 80a2ad6:	a806      	add	r0, sp, #24
 80a2ad8:	f009 fedb 	bl	80ac892 <mbedtls_mpi_add_mpi>
 80a2adc:	4607      	mov	r7, r0
 80a2ade:	bb68      	cbnz	r0, 80a2b3c <mbedtls_rsa_private+0x30c>
#endif /* MBEDTLS_RSA_NO_CRT */

    if( f_rng != NULL )
 80a2ae0:	b966      	cbnz	r6, 80a2afc <mbedtls_rsa_private+0x2cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
 80a2ae2:	f104 0368 	add.w	r3, r4, #104	; 0x68
 80a2ae6:	9300      	str	r3, [sp, #0]
 80a2ae8:	f104 0214 	add.w	r2, r4, #20
 80a2aec:	462b      	mov	r3, r5
 80a2aee:	a906      	add	r1, sp, #24
 80a2af0:	a821      	add	r0, sp, #132	; 0x84
 80a2af2:	f00a f9ab 	bl	80ace4c <mbedtls_mpi_exp_mod>
 80a2af6:	4607      	mov	r7, r0
 80a2af8:	bb00      	cbnz	r0, 80a2b3c <mbedtls_rsa_private+0x30c>
 80a2afa:	e00f      	b.n	80a2b1c <mbedtls_rsa_private+0x2ec>
    {
        /*
         * Unblind
         * T = T * Vf mod N
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
 80a2afc:	a906      	add	r1, sp, #24
 80a2afe:	f104 0298 	add.w	r2, r4, #152	; 0x98
 80a2b02:	4608      	mov	r0, r1
 80a2b04:	f009 ff34 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a2b08:	4607      	mov	r7, r0
 80a2b0a:	b9b8      	cbnz	r0, 80a2b3c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 80a2b0c:	a906      	add	r1, sp, #24
 80a2b0e:	462a      	mov	r2, r5
 80a2b10:	4608      	mov	r0, r1
 80a2b12:	f00a f969 	bl	80acde8 <mbedtls_mpi_mod_mpi>
 80a2b16:	4607      	mov	r7, r0
 80a2b18:	b980      	cbnz	r0, 80a2b3c <mbedtls_rsa_private+0x30c>
 80a2b1a:	e7e2      	b.n	80a2ae2 <mbedtls_rsa_private+0x2b2>
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
 80a2b1c:	a91e      	add	r1, sp, #120	; 0x78
 80a2b1e:	a821      	add	r0, sp, #132	; 0x84
 80a2b20:	f009 fdc2 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80a2b24:	b948      	cbnz	r0, 80a2b3a <mbedtls_rsa_private+0x30a>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 80a2b26:	6862      	ldr	r2, [r4, #4]
 80a2b28:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80a2b2a:	a806      	add	r0, sp, #24
 80a2b2c:	f009 fc59 	bl	80ac3e2 <mbedtls_mpi_write_binary>
 80a2b30:	4607      	mov	r7, r0
 80a2b32:	e003      	b.n	80a2b3c <mbedtls_rsa_private+0x30c>
    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 80a2b34:	f06f 0703 	mvn.w	r7, #3
 80a2b38:	e000      	b.n	80a2b3c <mbedtls_rsa_private+0x30c>
    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 80a2b3a:	4f16      	ldr	r7, [pc, #88]	; (80a2b94 <mbedtls_rsa_private+0x364>)
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &P1 );
 80a2b3c:	a809      	add	r0, sp, #36	; 0x24
 80a2b3e:	f009 fad2 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 80a2b42:	a80c      	add	r0, sp, #48	; 0x30
 80a2b44:	f009 facf 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 80a2b48:	a80f      	add	r0, sp, #60	; 0x3c
 80a2b4a:	f009 facc 	bl	80ac0e6 <mbedtls_mpi_free>

    if( f_rng != NULL )
 80a2b4e:	b12e      	cbz	r6, 80a2b5c <mbedtls_rsa_private+0x32c>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_free( &D_blind );
#else
        mbedtls_mpi_free( &DP_blind );
 80a2b50:	a818      	add	r0, sp, #96	; 0x60
 80a2b52:	f009 fac8 	bl	80ac0e6 <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
 80a2b56:	a81b      	add	r0, sp, #108	; 0x6c
 80a2b58:	f009 fac5 	bl	80ac0e6 <mbedtls_mpi_free>
#endif
    }

    mbedtls_mpi_free( &T );
 80a2b5c:	a806      	add	r0, sp, #24
 80a2b5e:	f009 fac2 	bl	80ac0e6 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
 80a2b62:	a812      	add	r0, sp, #72	; 0x48
 80a2b64:	f009 fabf 	bl	80ac0e6 <mbedtls_mpi_free>
 80a2b68:	a815      	add	r0, sp, #84	; 0x54
 80a2b6a:	f009 fabc 	bl	80ac0e6 <mbedtls_mpi_free>
#endif

    mbedtls_mpi_free( &C );
 80a2b6e:	a821      	add	r0, sp, #132	; 0x84
 80a2b70:	f009 fab9 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &I );
 80a2b74:	a81e      	add	r0, sp, #120	; 0x78
 80a2b76:	f009 fab6 	bl	80ac0e6 <mbedtls_mpi_free>

    if( ret != 0 )
 80a2b7a:	b13f      	cbz	r7, 80a2b8c <mbedtls_rsa_private+0x35c>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
 80a2b7c:	f5a7 4386 	sub.w	r3, r7, #17152	; 0x4300
 80a2b80:	e000      	b.n	80a2b84 <mbedtls_rsa_private+0x354>
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 1             /* private key checks */,
                                f_rng != NULL /* blinding y/n       */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a2b82:	4b05      	ldr	r3, [pc, #20]	; (80a2b98 <mbedtls_rsa_private+0x368>)
 80a2b84:	9303      	str	r3, [sp, #12]
 80a2b86:	e001      	b.n	80a2b8c <mbedtls_rsa_private+0x35c>
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
            return( MBEDTLS_ERR_RSA_RNG_FAILED );
 80a2b88:	4f04      	ldr	r7, [pc, #16]	; (80a2b9c <mbedtls_rsa_private+0x36c>)
 80a2b8a:	e7d7      	b.n	80a2b3c <mbedtls_rsa_private+0x30c>

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );

    return( 0 );
}
 80a2b8c:	9803      	ldr	r0, [sp, #12]
 80a2b8e:	b025      	add	sp, #148	; 0x94
 80a2b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2b94:	ffffbc80 	.word	0xffffbc80
 80a2b98:	ffffbf80 	.word	0xffffbf80
 80a2b9c:	ffffbb80 	.word	0xffffbb80

080a2ba0 <mbedtls_rsa_rsaes_oaep_encrypt>:
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
 80a2ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( label_len == 0 || label != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80a2ba4:	2b01      	cmp	r3, #1
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
 80a2ba6:	b08b      	sub	sp, #44	; 0x2c
 80a2ba8:	4680      	mov	r8, r0
 80a2baa:	468b      	mov	fp, r1
 80a2bac:	9203      	str	r2, [sp, #12]
 80a2bae:	9304      	str	r3, [sp, #16]
 80a2bb0:	9f16      	ldr	r7, [sp, #88]	; 0x58
 80a2bb2:	9e18      	ldr	r6, [sp, #96]	; 0x60
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( label_len == 0 || label != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80a2bb4:	d105      	bne.n	80a2bc2 <mbedtls_rsa_rsaes_oaep_encrypt+0x22>
 80a2bb6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80a2bba:	2b01      	cmp	r3, #1
 80a2bbc:	d001      	beq.n	80a2bc2 <mbedtls_rsa_rsaes_oaep_encrypt+0x22>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a2bbe:	4b40      	ldr	r3, [pc, #256]	; (80a2cc0 <mbedtls_rsa_rsaes_oaep_encrypt+0x120>)
 80a2bc0:	e07a      	b.n	80a2cb8 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>

    if( f_rng == NULL )
 80a2bc2:	f1bb 0f00 	cmp.w	fp, #0
 80a2bc6:	d0fa      	beq.n	80a2bbe <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 80a2bc8:	f898 00a8 	ldrb.w	r0, [r8, #168]	; 0xa8
 80a2bcc:	f005 fac0 	bl	80a8150 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80a2bd0:	9002      	str	r0, [sp, #8]
 80a2bd2:	2800      	cmp	r0, #0
 80a2bd4:	d0f3      	beq.n	80a2bbe <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
 80a2bd6:	f8d8 4004 	ldr.w	r4, [r8, #4]
    hlen = mbedtls_md_get_size( md_info );
 80a2bda:	f005 fbef 	bl	80a83bc <mbedtls_md_get_size>

    /* first comparison checks for overflow */
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 80a2bde:	0043      	lsls	r3, r0, #1
 80a2be0:	9305      	str	r3, [sp, #20]
 80a2be2:	0042      	lsls	r2, r0, #1
 80a2be4:	1cbb      	adds	r3, r7, #2
 80a2be6:	4413      	add	r3, r2
 80a2be8:	429f      	cmp	r7, r3
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
    hlen = mbedtls_md_get_size( md_info );
 80a2bea:	4605      	mov	r5, r0

    /* first comparison checks for overflow */
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 80a2bec:	d8e7      	bhi.n	80a2bbe <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
 80a2bee:	429c      	cmp	r4, r3
 80a2bf0:	d3e5      	bcc.n	80a2bbe <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    memset( output, 0, olen );
 80a2bf2:	4622      	mov	r2, r4
 80a2bf4:	2100      	movs	r1, #0
 80a2bf6:	4630      	mov	r0, r6
 80a2bf8:	f00f fe23 	bl	80b2842 <memset>

    *p++ = 0;
 80a2bfc:	f106 0901 	add.w	r9, r6, #1
 80a2c00:	2300      	movs	r3, #0
 80a2c02:	7033      	strb	r3, [r6, #0]

    /* Generate a random octet string seed */
    if( ( ret = f_rng( p_rng, p, hlen ) ) != 0 )
 80a2c04:	462a      	mov	r2, r5
 80a2c06:	4649      	mov	r1, r9
 80a2c08:	9803      	ldr	r0, [sp, #12]
 80a2c0a:	47d8      	blx	fp
 80a2c0c:	b110      	cbz	r0, 80a2c14 <mbedtls_rsa_rsaes_oaep_encrypt+0x74>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 80a2c0e:	f5a0 4389 	sub.w	r3, r0, #17536	; 0x4480
 80a2c12:	e051      	b.n	80a2cb8 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>

    p += hlen;
 80a2c14:	eb09 0a05 	add.w	sl, r9, r5

    /* Construct DB */
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
 80a2c18:	4653      	mov	r3, sl
 80a2c1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80a2c1c:	9914      	ldr	r1, [sp, #80]	; 0x50
 80a2c1e:	9802      	ldr	r0, [sp, #8]
 80a2c20:	f005 fb02 	bl	80a8228 <mbedtls_md>
 80a2c24:	4603      	mov	r3, r0
 80a2c26:	2800      	cmp	r0, #0
 80a2c28:	d146      	bne.n	80a2cb8 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
 80a2c2a:	9005      	str	r0, [sp, #20]
 80a2c2c:	1ea0      	subs	r0, r4, #2
 80a2c2e:	1bc0      	subs	r0, r0, r7
 80a2c30:	006b      	lsls	r3, r5, #1
 80a2c32:	4428      	add	r0, r5
 80a2c34:	1ac0      	subs	r0, r0, r3
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
 80a2c36:	2201      	movs	r2, #1
 80a2c38:	f80a 2000 	strb.w	r2, [sl, r0]
    memcpy( p, input, ilen );
 80a2c3c:	4410      	add	r0, r2
 80a2c3e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80a2c40:	463a      	mov	r2, r7
 80a2c42:	4450      	add	r0, sl

    mbedtls_md_init( &md_ctx );
 80a2c44:	af07      	add	r7, sp, #28
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
    memcpy( p, input, ilen );
 80a2c46:	f00f fdd6 	bl	80b27f6 <memcpy>

    mbedtls_md_init( &md_ctx );
 80a2c4a:	4638      	mov	r0, r7
 80a2c4c:	f005 fa8c 	bl	80a8168 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 80a2c50:	9b05      	ldr	r3, [sp, #20]
 80a2c52:	9902      	ldr	r1, [sp, #8]
 80a2c54:	461a      	mov	r2, r3
 80a2c56:	4638      	mov	r0, r7
 80a2c58:	f005 faa6 	bl	80a81a8 <mbedtls_md_setup>
 80a2c5c:	4603      	mov	r3, r0
 80a2c5e:	b9a8      	cbnz	r0, 80a2c8c <mbedtls_rsa_rsaes_oaep_encrypt+0xec>
        goto exit;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( output + hlen + 1, olen - hlen - 1, output + 1, hlen,
 80a2c60:	f105 0a01 	add.w	sl, r5, #1
 80a2c64:	3c01      	subs	r4, #1
 80a2c66:	44b2      	add	sl, r6
 80a2c68:	1b64      	subs	r4, r4, r5
 80a2c6a:	462b      	mov	r3, r5
 80a2c6c:	9700      	str	r7, [sp, #0]
 80a2c6e:	464a      	mov	r2, r9
 80a2c70:	4621      	mov	r1, r4
 80a2c72:	4650      	mov	r0, sl
 80a2c74:	f7ff faec 	bl	80a2250 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 80a2c78:	4603      	mov	r3, r0
 80a2c7a:	b938      	cbnz	r0, 80a2c8c <mbedtls_rsa_rsaes_oaep_encrypt+0xec>
                          &md_ctx ) ) != 0 )
        goto exit;

    /* maskedSeed: Apply seedMask to seed */
    if( ( ret = mgf_mask( output + 1, hlen, output + hlen + 1, olen - hlen - 1,
 80a2c7c:	4623      	mov	r3, r4
 80a2c7e:	9700      	str	r7, [sp, #0]
 80a2c80:	4652      	mov	r2, sl
 80a2c82:	4629      	mov	r1, r5
 80a2c84:	4648      	mov	r0, r9
 80a2c86:	f7ff fae3 	bl	80a2250 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 80a2c8a:	4603      	mov	r3, r0
                          &md_ctx ) ) != 0 )
        goto exit;

exit:
    mbedtls_md_free( &md_ctx );
 80a2c8c:	a807      	add	r0, sp, #28
 80a2c8e:	9302      	str	r3, [sp, #8]
 80a2c90:	f005 fa6f 	bl	80a8172 <mbedtls_md_free>

    if( ret != 0 )
 80a2c94:	9b02      	ldr	r3, [sp, #8]
 80a2c96:	b97b      	cbnz	r3, 80a2cb8 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
        return( ret );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 80a2c98:	9b04      	ldr	r3, [sp, #16]
 80a2c9a:	b92b      	cbnz	r3, 80a2ca8 <mbedtls_rsa_rsaes_oaep_encrypt+0x108>
 80a2c9c:	4632      	mov	r2, r6
 80a2c9e:	4631      	mov	r1, r6
 80a2ca0:	4640      	mov	r0, r8
 80a2ca2:	f7ff fd83 	bl	80a27ac <mbedtls_rsa_public>
 80a2ca6:	e006      	b.n	80a2cb6 <mbedtls_rsa_rsaes_oaep_encrypt+0x116>
 80a2ca8:	9600      	str	r6, [sp, #0]
 80a2caa:	4633      	mov	r3, r6
 80a2cac:	9a03      	ldr	r2, [sp, #12]
 80a2cae:	4659      	mov	r1, fp
 80a2cb0:	4640      	mov	r0, r8
 80a2cb2:	f7ff fdbd 	bl	80a2830 <mbedtls_rsa_private>
 80a2cb6:	4603      	mov	r3, r0
}
 80a2cb8:	4618      	mov	r0, r3
 80a2cba:	b00b      	add	sp, #44	; 0x2c
 80a2cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2cc0:	ffffbf80 	.word	0xffffbf80

080a2cc4 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 80a2cc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2cc8:	469a      	mov	sl, r3
 80a2cca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    RSA_VALIDATE_RET( mode == MBEDTLS_RSA_PRIVATE ||
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output != NULL );
    RSA_VALIDATE_RET( input != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80a2ccc:	f1ba 0f01 	cmp.w	sl, #1
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 80a2cd0:	4607      	mov	r7, r0
 80a2cd2:	4689      	mov	r9, r1
 80a2cd4:	4693      	mov	fp, r2
 80a2cd6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80a2cda:	9300      	str	r3, [sp, #0]
 80a2cdc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    RSA_VALIDATE_RET( mode == MBEDTLS_RSA_PRIVATE ||
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output != NULL );
    RSA_VALIDATE_RET( input != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80a2cde:	d104      	bne.n	80a2cea <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x26>
 80a2ce0:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80a2ce4:	b10b      	cbz	r3, 80a2cea <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x26>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a2ce6:	482c      	ldr	r0, [pc, #176]	; (80a2d98 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd4>)
 80a2ce8:	e052      	b.n	80a2d90 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xcc>

    olen = ctx->len;

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
 80a2cea:	f118 030b 	adds.w	r3, r8, #11
    RSA_VALIDATE_RET( input != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
 80a2cee:	687c      	ldr	r4, [r7, #4]

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
 80a2cf0:	d2f9      	bcs.n	80a2ce6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x22>
 80a2cf2:	429c      	cmp	r4, r3
 80a2cf4:	d3f7      	bcc.n	80a2ce6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x22>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;
 80a2cf6:	3c03      	subs	r4, #3

    *p++ = 0;
 80a2cf8:	2300      	movs	r3, #0

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;
 80a2cfa:	ebc8 0404 	rsb	r4, r8, r4

    *p++ = 0;
 80a2cfe:	702b      	strb	r3, [r5, #0]
    if( mode == MBEDTLS_RSA_PUBLIC )
 80a2d00:	f1ba 0f00 	cmp.w	sl, #0
 80a2d04:	d119      	bne.n	80a2d3a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x76>
    {
        if( f_rng == NULL )
 80a2d06:	f1b9 0f00 	cmp.w	r9, #0
 80a2d0a:	d0ec      	beq.n	80a2ce6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x22>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        *p++ = MBEDTLS_RSA_CRYPT;
 80a2d0c:	1cae      	adds	r6, r5, #2
 80a2d0e:	2302      	movs	r3, #2
 80a2d10:	706b      	strb	r3, [r5, #1]
 80a2d12:	4434      	add	r4, r6

        while( nb_pad-- > 0 )
 80a2d14:	42a6      	cmp	r6, r4
 80a2d16:	d01a      	beq.n	80a2d4e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x8a>
 80a2d18:	2364      	movs	r3, #100	; 0x64
        {
            int rng_dl = 100;

            do {
                ret = f_rng( p_rng, p, 1 );
 80a2d1a:	2201      	movs	r2, #1
 80a2d1c:	4631      	mov	r1, r6
 80a2d1e:	4658      	mov	r0, fp
 80a2d20:	9301      	str	r3, [sp, #4]
 80a2d22:	47c8      	blx	r9
            } while( *p == 0 && --rng_dl && ret == 0 );
 80a2d24:	7832      	ldrb	r2, [r6, #0]
 80a2d26:	bb7a      	cbnz	r2, 80a2d88 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xc4>
 80a2d28:	9b01      	ldr	r3, [sp, #4]
 80a2d2a:	3b01      	subs	r3, #1
 80a2d2c:	d102      	bne.n	80a2d34 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x70>

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 80a2d2e:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 80a2d32:	e02d      	b.n	80a2d90 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xcc>
        {
            int rng_dl = 100;

            do {
                ret = f_rng( p_rng, p, 1 );
            } while( *p == 0 && --rng_dl && ret == 0 );
 80a2d34:	2800      	cmp	r0, #0
 80a2d36:	d0f0      	beq.n	80a2d1a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x56>
 80a2d38:	e7f9      	b.n	80a2d2e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x6a>
            p++;
        }
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;
 80a2d3a:	2201      	movs	r2, #1
 80a2d3c:	1cab      	adds	r3, r5, #2
 80a2d3e:	706a      	strb	r2, [r5, #1]
 80a2d40:	441c      	add	r4, r3

        while( nb_pad-- > 0 )
            *p++ = 0xFF;
 80a2d42:	22ff      	movs	r2, #255	; 0xff
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;

        while( nb_pad-- > 0 )
 80a2d44:	429c      	cmp	r4, r3
 80a2d46:	d002      	beq.n	80a2d4e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x8a>
            *p++ = 0xFF;
 80a2d48:	f803 2b01 	strb.w	r2, [r3], #1
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;

        while( nb_pad-- > 0 )
 80a2d4c:	e7fa      	b.n	80a2d44 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x80>
            *p++ = 0xFF;
    }

    *p++ = 0;
 80a2d4e:	4620      	mov	r0, r4
 80a2d50:	2300      	movs	r3, #0
 80a2d52:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy( p, input, ilen );
 80a2d56:	4642      	mov	r2, r8
 80a2d58:	9900      	ldr	r1, [sp, #0]
 80a2d5a:	f00f fd4c 	bl	80b27f6 <memcpy>

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 80a2d5e:	f1ba 0f00 	cmp.w	sl, #0
 80a2d62:	d107      	bne.n	80a2d74 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xb0>
 80a2d64:	462a      	mov	r2, r5
 80a2d66:	4629      	mov	r1, r5
 80a2d68:	4638      	mov	r0, r7
}
 80a2d6a:	b003      	add	sp, #12
 80a2d6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *p++ = 0;
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 80a2d70:	f7ff bd1c 	b.w	80a27ac <mbedtls_rsa_public>
 80a2d74:	462b      	mov	r3, r5
 80a2d76:	465a      	mov	r2, fp
 80a2d78:	4649      	mov	r1, r9
 80a2d7a:	4638      	mov	r0, r7
 80a2d7c:	950c      	str	r5, [sp, #48]	; 0x30
}
 80a2d7e:	b003      	add	sp, #12
 80a2d80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *p++ = 0;
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 80a2d84:	f7ff bd54 	b.w	80a2830 <mbedtls_rsa_private>
            do {
                ret = f_rng( p_rng, p, 1 );
            } while( *p == 0 && --rng_dl && ret == 0 );

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
 80a2d88:	2800      	cmp	r0, #0
 80a2d8a:	d1d0      	bne.n	80a2d2e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x6a>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

            p++;
 80a2d8c:	3601      	adds	r6, #1
        if( f_rng == NULL )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        *p++ = MBEDTLS_RSA_CRYPT;

        while( nb_pad-- > 0 )
 80a2d8e:	e7c1      	b.n	80a2d14 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x50>
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
}
 80a2d90:	b003      	add	sp, #12
 80a2d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2d96:	bf00      	nop
 80a2d98:	ffffbf80 	.word	0xffffbf80

080a2d9c <mbedtls_rsa_pkcs1_encrypt>:
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
 80a2d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2d9e:	b087      	sub	sp, #28
    RSA_VALIDATE_RET( mode == MBEDTLS_RSA_PRIVATE ||
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output != NULL );
    RSA_VALIDATE_RET( input != NULL );

    switch( ctx->padding )
 80a2da0:	f8d0 70a4 	ldr.w	r7, [r0, #164]	; 0xa4
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
 80a2da4:	ac0c      	add	r4, sp, #48	; 0x30
 80a2da6:	cc70      	ldmia	r4, {r4, r5, r6}
    RSA_VALIDATE_RET( mode == MBEDTLS_RSA_PRIVATE ||
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output != NULL );
    RSA_VALIDATE_RET( input != NULL );

    switch( ctx->padding )
 80a2da8:	b157      	cbz	r7, 80a2dc0 <mbedtls_rsa_pkcs1_encrypt+0x24>
 80a2daa:	2f01      	cmp	r7, #1
 80a2dac:	d110      	bne.n	80a2dd0 <mbedtls_rsa_pkcs1_encrypt+0x34>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
 80a2dae:	9402      	str	r4, [sp, #8]
 80a2db0:	2400      	movs	r4, #0
 80a2db2:	9604      	str	r6, [sp, #16]
 80a2db4:	9503      	str	r5, [sp, #12]
 80a2db6:	9401      	str	r4, [sp, #4]
 80a2db8:	9400      	str	r4, [sp, #0]
 80a2dba:	f7ff fef1 	bl	80a2ba0 <mbedtls_rsa_rsaes_oaep_encrypt>
 80a2dbe:	e008      	b.n	80a2dd2 <mbedtls_rsa_pkcs1_encrypt+0x36>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
                                                input, output );
 80a2dc0:	960e      	str	r6, [sp, #56]	; 0x38
 80a2dc2:	950d      	str	r5, [sp, #52]	; 0x34
 80a2dc4:	940c      	str	r4, [sp, #48]	; 0x30
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80a2dc6:	b007      	add	sp, #28
 80a2dc8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
                                                input, output );
 80a2dcc:	f7ff bf7a 	b.w	80a2cc4 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 80a2dd0:	4801      	ldr	r0, [pc, #4]	; (80a2dd8 <mbedtls_rsa_pkcs1_encrypt+0x3c>)
    }
}
 80a2dd2:	b007      	add	sp, #28
 80a2dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2dd6:	bf00      	nop
 80a2dd8:	ffffbf00 	.word	0xffffbf00

080a2ddc <mbedtls_rsa_rsaes_oaep_decrypt>:
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
 80a2ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    RSA_VALIDATE_RET( olen != NULL );

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80a2de0:	2b01      	cmp	r3, #1
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
 80a2de2:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
 80a2de6:	4606      	mov	r6, r0
 80a2de8:	468a      	mov	sl, r1
 80a2dea:	9203      	str	r2, [sp, #12]
 80a2dec:	469b      	mov	fp, r3
    RSA_VALIDATE_RET( olen != NULL );

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80a2dee:	d105      	bne.n	80a2dfc <mbedtls_rsa_rsaes_oaep_decrypt+0x20>
 80a2df0:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80a2df4:	2b01      	cmp	r3, #1
 80a2df6:	d001      	beq.n	80a2dfc <mbedtls_rsa_rsaes_oaep_decrypt+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a2df8:	485c      	ldr	r0, [pc, #368]	; (80a2f6c <mbedtls_rsa_rsaes_oaep_decrypt+0x190>)
 80a2dfa:	e0b2      	b.n	80a2f62 <mbedtls_rsa_rsaes_oaep_decrypt+0x186>

    ilen = ctx->len;
 80a2dfc:	6877      	ldr	r7, [r6, #4]

    if( ilen < 16 || ilen > sizeof( buf ) )
 80a2dfe:	f1a7 0310 	sub.w	r3, r7, #16
 80a2e02:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 80a2e06:	d8f7      	bhi.n	80a2df8 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 80a2e08:	f896 00a8 	ldrb.w	r0, [r6, #168]	; 0xa8
 80a2e0c:	f005 f9a0 	bl	80a8150 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80a2e10:	9002      	str	r0, [sp, #8]
 80a2e12:	2800      	cmp	r0, #0
 80a2e14:	d0f0      	beq.n	80a2df8 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80a2e16:	f005 fad1 	bl	80a83bc <mbedtls_md_get_size>

    // checking for integer underflow
    if( 2 * hlen + 2 > ilen )
 80a2e1a:	f100 0801 	add.w	r8, r0, #1
 80a2e1e:	ea4f 0548 	mov.w	r5, r8, lsl #1
 80a2e22:	42af      	cmp	r7, r5

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80a2e24:	4604      	mov	r4, r0

    // checking for integer underflow
    if( 2 * hlen + 2 > ilen )
 80a2e26:	d3e7      	bcc.n	80a2df8 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
 80a2e28:	f10d 0960 	add.w	r9, sp, #96	; 0x60
    /*
     * RSA operation
     */
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 80a2e2c:	f1bb 0f00 	cmp.w	fp, #0
 80a2e30:	d106      	bne.n	80a2e40 <mbedtls_rsa_rsaes_oaep_decrypt+0x64>
 80a2e32:	464a      	mov	r2, r9
 80a2e34:	f8dd 1494 	ldr.w	r1, [sp, #1172]	; 0x494
 80a2e38:	4630      	mov	r0, r6
 80a2e3a:	f7ff fcb7 	bl	80a27ac <mbedtls_rsa_public>
 80a2e3e:	e008      	b.n	80a2e52 <mbedtls_rsa_rsaes_oaep_decrypt+0x76>
 80a2e40:	f8cd 9000 	str.w	r9, [sp]
 80a2e44:	f8dd 3494 	ldr.w	r3, [sp, #1172]	; 0x494
 80a2e48:	9a03      	ldr	r2, [sp, #12]
 80a2e4a:	4651      	mov	r1, sl
 80a2e4c:	4630      	mov	r0, r6
 80a2e4e:	f7ff fcef 	bl	80a2830 <mbedtls_rsa_private>
 80a2e52:	4682      	mov	sl, r0

    if( ret != 0 )
 80a2e54:	2800      	cmp	r0, #0
 80a2e56:	d13c      	bne.n	80a2ed2 <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
        goto cleanup;

    /*
     * Unmask data and generate lHash
     */
    mbedtls_md_init( &md_ctx );
 80a2e58:	ae05      	add	r6, sp, #20
 80a2e5a:	4630      	mov	r0, r6
 80a2e5c:	f005 f984 	bl	80a8168 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 80a2e60:	4652      	mov	r2, sl
 80a2e62:	9902      	ldr	r1, [sp, #8]
 80a2e64:	4630      	mov	r0, r6
 80a2e66:	f005 f99f 	bl	80a81a8 <mbedtls_md_setup>
 80a2e6a:	4682      	mov	sl, r0
 80a2e6c:	b108      	cbz	r0, 80a2e72 <mbedtls_rsa_rsaes_oaep_decrypt+0x96>
    {
        mbedtls_md_free( &md_ctx );
 80a2e6e:	4630      	mov	r0, r6
 80a2e70:	e03b      	b.n	80a2eea <mbedtls_rsa_rsaes_oaep_decrypt+0x10e>
        goto cleanup;
    }

    /* seed: Apply seedMask to maskedSeed */
    if( ( ret = mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
 80a2e72:	f107 3bff 	add.w	fp, r7, #4294967295
 80a2e76:	44c8      	add	r8, r9
 80a2e78:	ebc4 0b0b 	rsb	fp, r4, fp
 80a2e7c:	9600      	str	r6, [sp, #0]
 80a2e7e:	465b      	mov	r3, fp
 80a2e80:	4642      	mov	r2, r8
 80a2e82:	4621      	mov	r1, r4
 80a2e84:	f10d 0061 	add.w	r0, sp, #97	; 0x61
 80a2e88:	f7ff f9e2 	bl	80a2250 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
                          &md_ctx ) ) != 0 ||
 80a2e8c:	4682      	mov	sl, r0
 80a2e8e:	bb58      	cbnz	r0, 80a2ee8 <mbedtls_rsa_rsaes_oaep_decrypt+0x10c>
    /* DB: Apply dbMask to maskedDB */
        ( ret = mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,
 80a2e90:	9600      	str	r6, [sp, #0]
 80a2e92:	4623      	mov	r3, r4
 80a2e94:	f10d 0261 	add.w	r2, sp, #97	; 0x61
 80a2e98:	4659      	mov	r1, fp
 80a2e9a:	4640      	mov	r0, r8
 80a2e9c:	f7ff f9d8 	bl	80a2250 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
        goto cleanup;
    }

    /* seed: Apply seedMask to maskedSeed */
    if( ( ret = mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
                          &md_ctx ) ) != 0 ||
 80a2ea0:	4682      	mov	sl, r0
 80a2ea2:	bb08      	cbnz	r0, 80a2ee8 <mbedtls_rsa_rsaes_oaep_decrypt+0x10c>
 80a2ea4:	e024      	b.n	80a2ef0 <mbedtls_rsa_rsaes_oaep_decrypt+0x114>
     * The only information "leaked" is whether the padding was correct or not
     * (eg, no data is copied if it was not correct). This meets the
     * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between
     * the different error conditions.
     */
    if( bad != 0 )
 80a2ea6:	5c88      	ldrb	r0, [r1, r2]
 80a2ea8:	f080 0001 	eor.w	r0, r0, #1
 80a2eac:	ea50 030e 	orrs.w	r3, r0, lr
 80a2eb0:	d151      	bne.n	80a2f56 <mbedtls_rsa_rsaes_oaep_decrypt+0x17a>
        pad_done |= p[i];
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
    }

    p += pad_len;
    bad |= *p++ ^ 0x01;
 80a2eb2:	3201      	adds	r2, #1
 80a2eb4:	4411      	add	r1, r2
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
 80a2eb6:	aa18      	add	r2, sp, #96	; 0x60
 80a2eb8:	1a8a      	subs	r2, r1, r2
 80a2eba:	f8dd 049c 	ldr.w	r0, [sp, #1180]	; 0x49c
 80a2ebe:	1aba      	subs	r2, r7, r2
 80a2ec0:	4282      	cmp	r2, r0
 80a2ec2:	d84b      	bhi.n	80a2f5c <mbedtls_rsa_rsaes_oaep_decrypt+0x180>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 80a2ec4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
 80a2ec8:	6002      	str	r2, [r0, #0]
    memcpy( output, p, *olen );
 80a2eca:	f8dd 0498 	ldr.w	r0, [sp, #1176]	; 0x498
 80a2ece:	f00f fc92 	bl	80b27f6 <memcpy>
    ret = 0;

cleanup:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 80a2ed2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80a2ed6:	a818      	add	r0, sp, #96	; 0x60
 80a2ed8:	f003 fa9a 	bl	80a6410 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( lhash, sizeof( lhash ) );
 80a2edc:	a808      	add	r0, sp, #32
 80a2ede:	2140      	movs	r1, #64	; 0x40
 80a2ee0:	f003 fa96 	bl	80a6410 <mbedtls_platform_zeroize>

    return( ret );
 80a2ee4:	4650      	mov	r0, sl
 80a2ee6:	e03c      	b.n	80a2f62 <mbedtls_rsa_rsaes_oaep_decrypt+0x186>
                          &md_ctx ) ) != 0 ||
    /* DB: Apply dbMask to maskedDB */
        ( ret = mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,
                          &md_ctx ) ) != 0 )
    {
        mbedtls_md_free( &md_ctx );
 80a2ee8:	a805      	add	r0, sp, #20
 80a2eea:	f005 f942 	bl	80a8172 <mbedtls_md_free>
        goto cleanup;
 80a2eee:	e7f0      	b.n	80a2ed2 <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
    }

    mbedtls_md_free( &md_ctx );
 80a2ef0:	4630      	mov	r0, r6

    /* Generate lHash */
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
 80a2ef2:	ae08      	add	r6, sp, #32
    {
        mbedtls_md_free( &md_ctx );
        goto cleanup;
    }

    mbedtls_md_free( &md_ctx );
 80a2ef4:	f005 f93d 	bl	80a8172 <mbedtls_md_free>

    /* Generate lHash */
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
 80a2ef8:	4633      	mov	r3, r6
 80a2efa:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
 80a2efe:	f8dd 1488 	ldr.w	r1, [sp, #1160]	; 0x488
 80a2f02:	9802      	ldr	r0, [sp, #8]
 80a2f04:	f005 f990 	bl	80a8228 <mbedtls_md>
 80a2f08:	4682      	mov	sl, r0
 80a2f0a:	2800      	cmp	r0, #0
 80a2f0c:	d1e1      	bne.n	80a2ed2 <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 80a2f0e:	4650      	mov	r0, sl
    p = buf;
    bad = 0;

    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */
 80a2f10:	f10d 0361 	add.w	r3, sp, #97	; 0x61
     * Check contents, in "constant-time"
     */
    p = buf;
    bad = 0;

    bad |= *p++; /* First byte must be 0 */
 80a2f14:	f899 e000 	ldrb.w	lr, [r9]

    p += hlen; /* Skip seed */
 80a2f18:	1919      	adds	r1, r3, r4

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 80a2f1a:	42a0      	cmp	r0, r4
 80a2f1c:	d208      	bcs.n	80a2f30 <mbedtls_rsa_rsaes_oaep_decrypt+0x154>
        bad |= lhash[i] ^ *p++;
 80a2f1e:	5c32      	ldrb	r2, [r6, r0]
 80a2f20:	f811 c000 	ldrb.w	ip, [r1, r0]
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 80a2f24:	3001      	adds	r0, #1
        bad |= lhash[i] ^ *p++;
 80a2f26:	ea82 0c0c 	eor.w	ip, r2, ip
 80a2f2a:	ea4c 0e0e 	orr.w	lr, ip, lr
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 80a2f2e:	e7f4      	b.n	80a2f1a <mbedtls_rsa_rsaes_oaep_decrypt+0x13e>
 80a2f30:	4421      	add	r1, r4

    /* Get zero-padding len, but always read till end of buffer
     * (minus one, for the 01 byte) */
    pad_len = 0;
    pad_done = 0;
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 80a2f32:	2400      	movs	r4, #0
 80a2f34:	460e      	mov	r6, r1
 80a2f36:	4622      	mov	r2, r4
 80a2f38:	1b7d      	subs	r5, r7, r5
 80a2f3a:	440d      	add	r5, r1
 80a2f3c:	42b5      	cmp	r5, r6
 80a2f3e:	d0b2      	beq.n	80a2ea6 <mbedtls_rsa_rsaes_oaep_decrypt+0xca>
    {
        pad_done |= p[i];
 80a2f40:	f816 0b01 	ldrb.w	r0, [r6], #1
 80a2f44:	4304      	orrs	r4, r0
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 80a2f46:	4260      	negs	r0, r4
 80a2f48:	4320      	orrs	r0, r4
 80a2f4a:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 80a2f4e:	f080 0001 	eor.w	r0, r0, #1
 80a2f52:	4402      	add	r2, r0

    /* Get zero-padding len, but always read till end of buffer
     * (minus one, for the 01 byte) */
    pad_len = 0;
    pad_done = 0;
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 80a2f54:	e7f2      	b.n	80a2f3c <mbedtls_rsa_rsaes_oaep_decrypt+0x160>
     * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between
     * the different error conditions.
     */
    if( bad != 0 )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 80a2f56:	f8df a018 	ldr.w	sl, [pc, #24]	; 80a2f70 <mbedtls_rsa_rsaes_oaep_decrypt+0x194>
 80a2f5a:	e7ba      	b.n	80a2ed2 <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 80a2f5c:	f8df a014 	ldr.w	sl, [pc, #20]	; 80a2f74 <mbedtls_rsa_rsaes_oaep_decrypt+0x198>
 80a2f60:	e7b7      	b.n	80a2ed2 <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
cleanup:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
    mbedtls_platform_zeroize( lhash, sizeof( lhash ) );

    return( ret );
}
 80a2f62:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
 80a2f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2f6a:	bf00      	nop
 80a2f6c:	ffffbf80 	.word	0xffffbf80
 80a2f70:	ffffbf00 	.word	0xffffbf00
 80a2f74:	ffffbc00 	.word	0xffffbc00

080a2f78 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len )
{
 80a2f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ilen = ctx->len;
    plaintext_max_size = ( output_max_len > ilen - 11 ?
                           ilen - 11 :
                           output_max_len );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80a2f7c:	2b01      	cmp	r3, #1
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len )
{
 80a2f7e:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 80a2f82:	461f      	mov	r7, r3
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output_max_len == 0 || output != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( olen != NULL );

    ilen = ctx->len;
 80a2f84:	6845      	ldr	r5, [r0, #4]
    plaintext_max_size = ( output_max_len > ilen - 11 ?
                           ilen - 11 :
                           output_max_len );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80a2f86:	d104      	bne.n	80a2f92 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1a>
 80a2f88:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80a2f8c:	2b00      	cmp	r3, #0
 80a2f8e:	f040 80be 	bne.w	80a310e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x196>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    if( ilen < 16 || ilen > sizeof( buf ) )
 80a2f92:	f1a5 0310 	sub.w	r3, r5, #16
 80a2f96:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 80a2f9a:	f200 80b8 	bhi.w	80a310e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x196>
 80a2f9e:	ae02      	add	r6, sp, #8
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 80a2fa0:	b94f      	cbnz	r7, 80a2fb6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x3e>
 80a2fa2:	4632      	mov	r2, r6
 80a2fa4:	f8dd 142c 	ldr.w	r1, [sp, #1068]	; 0x42c
 80a2fa8:	f7ff fc00 	bl	80a27ac <mbedtls_rsa_public>

    if( ret != 0 )
 80a2fac:	4604      	mov	r4, r0
 80a2fae:	2800      	cmp	r0, #0
 80a2fb0:	f040 80a6 	bne.w	80a3100 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x188>
 80a2fb4:	e025      	b.n	80a3002 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x8a>
    if( ilen < 16 || ilen > sizeof( buf ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 80a2fb6:	9600      	str	r6, [sp, #0]
 80a2fb8:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
 80a2fbc:	f7ff fc38 	bl	80a2830 <mbedtls_rsa_private>

    if( ret != 0 )
 80a2fc0:	4604      	mov	r4, r0
 80a2fc2:	2800      	cmp	r0, #0
 80a2fc4:	f040 809c 	bne.w	80a3100 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x188>

    /* Check and get padding length in constant time and constant
     * memory trace. The first byte must be 0. */
    bad |= buf[0];

    if( mode == MBEDTLS_RSA_PRIVATE )
 80a2fc8:	2f01      	cmp	r7, #1
    if( ret != 0 )
        goto cleanup;

    /* Check and get padding length in constant time and constant
     * memory trace. The first byte must be 0. */
    bad |= buf[0];
 80a2fca:	7832      	ldrb	r2, [r6, #0]

    if( mode == MBEDTLS_RSA_PRIVATE )
 80a2fcc:	d11a      	bne.n	80a3004 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x8c>
     * attack. Potential side channels include overall timing, memory
     * access patterns (especially visible to an adversary who has access
     * to a shared memory cache), and branches (especially visible to
     * an adversary who has access to a shared code cache or to a shared
     * branch predictor). */
    size_t pad_count = 0;
 80a2fce:	4601      	mov	r1, r0

    if( mode == MBEDTLS_RSA_PRIVATE )
    {
        /* Decode EME-PKCS1-v1_5 padding: 0x00 || 0x02 || PS || 0x00
         * where PS must be at least 8 nonzero bytes. */
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;
 80a2fd0:	7873      	ldrb	r3, [r6, #1]

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count. */
        for( i = 2; i < ilen; i++ )
 80a2fd2:	2402      	movs	r4, #2

    if( mode == MBEDTLS_RSA_PRIVATE )
    {
        /* Decode EME-PKCS1-v1_5 padding: 0x00 || 0x02 || PS || 0x00
         * where PS must be at least 8 nonzero bytes. */
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;
 80a2fd4:	f083 0302 	eor.w	r3, r3, #2
 80a2fd8:	4313      	orrs	r3, r2

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count. */
        for( i = 2; i < ilen; i++ )
        {
            pad_done  |= ((buf[i] | (unsigned char)-buf[i]) >> 7) ^ 1;
 80a2fda:	5d37      	ldrb	r7, [r6, r4]
         * where PS must be at least 8 nonzero bytes. */
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count. */
        for( i = 2; i < ilen; i++ )
 80a2fdc:	3401      	adds	r4, #1
        {
            pad_done  |= ((buf[i] | (unsigned char)-buf[i]) >> 7) ^ 1;
 80a2fde:	427a      	negs	r2, r7
 80a2fe0:	433a      	orrs	r2, r7
 80a2fe2:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80a2fe6:	f082 0201 	eor.w	r2, r2, #1
 80a2fea:	4310      	orrs	r0, r2
 80a2fec:	b2c0      	uxtb	r0, r0
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 80a2fee:	4242      	negs	r2, r0
 80a2ff0:	4302      	orrs	r2, r0
 80a2ff2:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80a2ff6:	f082 0201 	eor.w	r2, r2, #1
         * where PS must be at least 8 nonzero bytes. */
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count. */
        for( i = 2; i < ilen; i++ )
 80a2ffa:	42a5      	cmp	r5, r4
        {
            pad_done  |= ((buf[i] | (unsigned char)-buf[i]) >> 7) ^ 1;
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 80a2ffc:	4411      	add	r1, r2
         * where PS must be at least 8 nonzero bytes. */
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count. */
        for( i = 2; i < ilen; i++ )
 80a2ffe:	d1ec      	bne.n	80a2fda <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x62>
 80a3000:	e01b      	b.n	80a303a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xc2>
    if( ret != 0 )
        goto cleanup;

    /* Check and get padding length in constant time and constant
     * memory trace. The first byte must be 0. */
    bad |= buf[0];
 80a3002:	7832      	ldrb	r2, [r6, #0]
     * to a shared memory cache), and branches (especially visible to
     * an adversary who has access to a shared code cache or to a shared
     * branch predictor). */
    size_t pad_count = 0;
    unsigned bad = 0;
    unsigned char pad_done = 0;
 80a3004:	2000      	movs	r0, #0
     * attack. Potential side channels include overall timing, memory
     * access patterns (especially visible to an adversary who has access
     * to a shared memory cache), and branches (especially visible to
     * an adversary who has access to a shared code cache or to a shared
     * branch predictor). */
    size_t pad_count = 0;
 80a3006:	4601      	mov	r1, r0
    }
    else
    {
        /* Decode EMSA-PKCS1-v1_5 padding: 0x00 || 0x01 || PS || 0x00
         * where PS must be at least 8 bytes with the value 0xFF. */
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;
 80a3008:	7873      	ldrb	r3, [r6, #1]

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count.
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
 80a300a:	2702      	movs	r7, #2
    }
    else
    {
        /* Decode EMSA-PKCS1-v1_5 padding: 0x00 || 0x01 || PS || 0x00
         * where PS must be at least 8 bytes with the value 0xFF. */
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;
 80a300c:	f083 0301 	eor.w	r3, r3, #1
 80a3010:	4313      	orrs	r3, r2
        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count.
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
        {
            pad_done |= if_int( buf[i], 0, 1 );
 80a3012:	5df2      	ldrb	r2, [r6, r7]
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count.
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
 80a3014:	3701      	adds	r7, #1
        {
            pad_done |= if_int( buf[i], 0, 1 );
 80a3016:	2a00      	cmp	r2, #0
 80a3018:	bf08      	it	eq
 80a301a:	f040 0001 	orreq.w	r0, r0, #1
            pad_count += if_int( pad_done, 0, 1 );
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
 80a301e:	43d2      	mvns	r2, r2
        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count.
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
        {
            pad_done |= if_int( buf[i], 0, 1 );
 80a3020:	b2c0      	uxtb	r0, r0
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 80a3022:	4244      	negs	r4, r0
 80a3024:	17e4      	asrs	r4, r4, #31
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
        {
            pad_done |= if_int( buf[i], 0, 1 );
            pad_count += if_int( pad_done, 0, 1 );
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
 80a3026:	b2d2      	uxtb	r2, r2
         * the 0x00 byte and remember the padding length in pad_count.
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
        {
            pad_done |= if_int( buf[i], 0, 1 );
            pad_count += if_int( pad_done, 0, 1 );
 80a3028:	f104 0e01 	add.w	lr, r4, #1
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
 80a302c:	4014      	ands	r4, r2
 80a302e:	4062      	eors	r2, r4
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count.
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
 80a3030:	42bd      	cmp	r5, r7
        {
            pad_done |= if_int( buf[i], 0, 1 );
            pad_count += if_int( pad_done, 0, 1 );
 80a3032:	4471      	add	r1, lr
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
 80a3034:	ea43 0302 	orr.w	r3, r3, r2
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;

        /* Read the whole buffer. Set pad_done to nonzero if we find
         * the 0x00 byte and remember the padding length in pad_count.
         * If there's a non-0xff byte in the padding, the padding is bad. */
        for( i = 2; i < ilen; i++ )
 80a3038:	d1eb      	bne.n	80a3012 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x9a>
    RSA_VALIDATE_RET( olen != NULL );

    ilen = ctx->len;
    plaintext_max_size = ( output_max_len > ilen - 11 ?
                           ilen - 11 :
                           output_max_len );
 80a303a:	f8dd 4434 	ldr.w	r4, [sp, #1076]	; 0x434
 80a303e:	f1a5 020b 	sub.w	r2, r5, #11
 80a3042:	42a2      	cmp	r2, r4
 80a3044:	bf28      	it	cs
 80a3046:	4622      	movcs	r2, r4
 80a3048:	f1a1 0408 	sub.w	r4, r1, #8
 80a304c:	ea43 73d4 	orr.w	r3, r3, r4, lsr #31

    /* If pad_done is still zero, there's no data, only unfinished padding. */
    bad |= if_int( pad_done, 0, 1 );

    /* There must be at least 8 bytes of padding. */
    bad |= size_greater_than( 8, pad_count );
 80a3050:	4244      	negs	r4, r0
 80a3052:	4320      	orrs	r0, r4
 80a3054:	2800      	cmp	r0, #0
 80a3056:	bfb4      	ite	lt
 80a3058:	4618      	movlt	r0, r3
 80a305a:	f043 0001 	orrge.w	r0, r3, #1
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 80a305e:	4243      	negs	r3, r0
 80a3060:	4303      	orrs	r3, r0
     * is invalid, avoid leaking this fact through the size of the
     * output: use the maximum message size that fits in the output
     * buffer. Do it without branches to avoid leaking the padding
     * validity through timing. RSA keys are small enough that all the
     * size_t values involved fit in unsigned int. */
    plaintext_size = if_int( bad,
 80a3062:	1eef      	subs	r7, r5, #3
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 80a3064:	17db      	asrs	r3, r3, #31
     * is invalid, avoid leaking this fact through the size of the
     * output: use the maximum message size that fits in the output
     * buffer. Do it without branches to avoid leaking the padding
     * validity through timing. RSA keys are small enough that all the
     * size_t values involved fit in unsigned int. */
    plaintext_size = if_int( bad,
 80a3066:	1a7f      	subs	r7, r7, r1
 * \return          \c if1 if \p cond is nonzero, otherwise \c if0.
 */
static unsigned if_int( unsigned cond, unsigned if1, unsigned if0 )
{
    unsigned mask = all_or_nothing_int( cond );
    return( ( mask & if1 ) | (~mask & if0 ) );
 80a3068:	2b00      	cmp	r3, #0
 80a306a:	bf18      	it	ne
 80a306c:	4617      	movne	r7, r2
 * \return          \c 1 if `size > max`.
 */
static unsigned size_greater_than( size_t size, size_t max )
{
    /* Return the sign bit (1 for negative) of (max - size). */
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
 80a306e:	1bd1      	subs	r1, r2, r7
 80a3070:	0fc9      	lsrs	r1, r1, #31
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 80a3072:	f1c1 0e00 	rsb	lr, r1, #0
     * data that we're about to copy to the output buffer.
     * We need to copy the same amount of data
     * from the same buffer whether the padding is good or not to
     * avoid leaking the padding validity through overall timing or
     * through memory or cache access patterns. */
    bad = all_or_nothing_int( bad | output_too_large );
 80a3076:	4308      	orrs	r0, r1
 80a3078:	f40e 4488 	and.w	r4, lr, #17408	; 0x4400
     * - OUTPUT_TOO_LARGE if the padding is good but the decrypted
     *   plaintext does not fit in the output buffer.
     * - 0 if the padding is correct. */
    ret = - (int) if_int( bad, - MBEDTLS_ERR_RSA_INVALID_PADDING,
                  if_int( output_too_large, - MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE,
                          0 ) );
 80a307c:	2b00      	cmp	r3, #0
 80a307e:	bf18      	it	ne
 80a3080:	f44f 4482 	movne.w	r4, #16640	; 0x4100
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 80a3084:	4243      	negs	r3, r0
 80a3086:	4318      	orrs	r0, r3
 80a3088:	17c0      	asrs	r0, r0, #31
     * from the same buffer whether the padding is good or not to
     * avoid leaking the padding validity through overall timing or
     * through memory or cache access patterns. */
    bad = all_or_nothing_int( bad | output_too_large );
    for( i = 11; i < ilen; i++ )
        buf[i] &= ~bad;
 80a308a:	43c0      	mvns	r0, r0
     * - OUTPUT_TOO_LARGE if the padding is good but the decrypted
     *   plaintext does not fit in the output buffer.
     * - 0 if the padding is correct. */
    ret = - (int) if_int( bad, - MBEDTLS_ERR_RSA_INVALID_PADDING,
                  if_int( output_too_large, - MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE,
                          0 ) );
 80a308c:	4264      	negs	r4, r4
 80a308e:	f10d 0313 	add.w	r3, sp, #19
     * from the same buffer whether the padding is good or not to
     * avoid leaking the padding validity through overall timing or
     * through memory or cache access patterns. */
    bad = all_or_nothing_int( bad | output_too_large );
    for( i = 11; i < ilen; i++ )
        buf[i] &= ~bad;
 80a3092:	7819      	ldrb	r1, [r3, #0]
 80a3094:	4001      	ands	r1, r0
 80a3096:	f803 1b01 	strb.w	r1, [r3], #1
     * We need to copy the same amount of data
     * from the same buffer whether the padding is good or not to
     * avoid leaking the padding validity through overall timing or
     * through memory or cache access patterns. */
    bad = all_or_nothing_int( bad | output_too_large );
    for( i = 11; i < ilen; i++ )
 80a309a:	1b99      	subs	r1, r3, r6
 80a309c:	428d      	cmp	r5, r1
 80a309e:	d8f8      	bhi.n	80a3092 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x11a>
     * the working buffer, i.e. make it start plaintext_max_size from
     * the end of the buffer. Do this with a memory access trace that
     * does not depend on the plaintext size. After this move, the
     * starting location of the plaintext is no longer sensitive
     * information. */
    mem_move_to_left( buf + ilen - plaintext_max_size,
 80a30a0:	1aa9      	subs	r1, r5, r2
 * \return          \c if1 if \p cond is nonzero, otherwise \c if0.
 */
static unsigned if_int( unsigned cond, unsigned if1, unsigned if0 )
{
    unsigned mask = all_or_nothing_int( cond );
    return( ( mask & if1 ) | (~mask & if0 ) );
 80a30a2:	f1be 0f00 	cmp.w	lr, #0
 80a30a6:	bf18      	it	ne
 80a30a8:	4617      	movne	r7, r2
     * the working buffer, i.e. make it start plaintext_max_size from
     * the end of the buffer. Do this with a memory access trace that
     * does not depend on the plaintext size. After this move, the
     * starting location of the plaintext is no longer sensitive
     * information. */
    mem_move_to_left( buf + ilen - plaintext_max_size,
 80a30aa:	4431      	add	r1, r6
                              size_t total,
                              size_t offset )
{
    volatile unsigned char *buf = (volatile unsigned char *)start;
    size_t i, n;
    if( total == 0 )
 80a30ac:	b93a      	cbnz	r2, 80a30be <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x146>
                      plaintext_max_size,
                      plaintext_max_size - plaintext_size );

    /* Finally copy the decrypted plaintext plus trailing zeros
     * into the output buffer. */
    memcpy( output, buf + ilen - plaintext_max_size, plaintext_max_size );
 80a30ae:	f8dd 0430 	ldr.w	r0, [sp, #1072]	; 0x430
 80a30b2:	f00f fba0 	bl	80b27f6 <memcpy>

    /* Report the amount of data we copied to the output buffer. In case
     * of errors (bad padding or output too large), the value of *olen
     * when this function returns is not specified. Making it equivalent
     * to the good case limits the risks of leaking the padding validity. */
    *olen = plaintext_size;
 80a30b6:	f8dd 3428 	ldr.w	r3, [sp, #1064]	; 0x428
 80a30ba:	601f      	str	r7, [r3, #0]
 80a30bc:	e020      	b.n	80a3100 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x188>
    {
        unsigned no_op = size_greater_than( total - offset, i );
        /* The first `total - offset` passes are a no-op. The last
         * `offset` passes shift the data one byte to the left and
         * zero out the last byte. */
        for( n = 0; n < total - 1; n++ )
 80a30be:	f102 38ff 	add.w	r8, r2, #4294967295
                              size_t total,
                              size_t offset )
{
    volatile unsigned char *buf = (volatile unsigned char *)start;
    size_t i, n;
    if( total == 0 )
 80a30c2:	2500      	movs	r5, #0
        {
            unsigned char current = buf[n];
            unsigned char next = buf[n+1];
            buf[n] = if_int( no_op, current, next );
        }
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
 80a30c4:	eb01 0c08 	add.w	ip, r1, r8
 * \return          \c 1 if `size > max`.
 */
static unsigned size_greater_than( size_t size, size_t max )
{
    /* Return the sign bit (1 for negative) of (max - size). */
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
 80a30c8:	1beb      	subs	r3, r5, r7
     * well-defined and precisely what we want to do here */
#if defined(_MSC_VER)
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 80a30ca:	17db      	asrs	r3, r3, #31
    {
        unsigned no_op = size_greater_than( total - offset, i );
        /* The first `total - offset` passes are a no-op. The last
         * `offset` passes shift the data one byte to the left and
         * zero out the last byte. */
        for( n = 0; n < total - 1; n++ )
 80a30cc:	2000      	movs	r0, #0
 80a30ce:	4580      	cmp	r8, r0
 80a30d0:	d90c      	bls.n	80a30ec <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x174>
        {
            unsigned char current = buf[n];
 80a30d2:	f811 e000 	ldrb.w	lr, [r1, r0]
 80a30d6:	eb01 0900 	add.w	r9, r1, r0
            unsigned char next = buf[n+1];
 80a30da:	3001      	adds	r0, #1
 80a30dc:	f811 a000 	ldrb.w	sl, [r1, r0]
            buf[n] = if_int( no_op, current, next );
 80a30e0:	2b00      	cmp	r3, #0
 80a30e2:	bf08      	it	eq
 80a30e4:	46d6      	moveq	lr, sl
 80a30e6:	f889 e000 	strb.w	lr, [r9]
 80a30ea:	e7f0      	b.n	80a30ce <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x156>
        }
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
 80a30ec:	f89c 0000 	ldrb.w	r0, [ip]
{
    volatile unsigned char *buf = (volatile unsigned char *)start;
    size_t i, n;
    if( total == 0 )
        return;
    for( i = 0; i < total; i++ )
 80a30f0:	3501      	adds	r5, #1
        {
            unsigned char current = buf[n];
            unsigned char next = buf[n+1];
            buf[n] = if_int( no_op, current, next );
        }
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
 80a30f2:	4003      	ands	r3, r0
 80a30f4:	b2db      	uxtb	r3, r3
{
    volatile unsigned char *buf = (volatile unsigned char *)start;
    size_t i, n;
    if( total == 0 )
        return;
    for( i = 0; i < total; i++ )
 80a30f6:	42aa      	cmp	r2, r5
        {
            unsigned char current = buf[n];
            unsigned char next = buf[n+1];
            buf[n] = if_int( no_op, current, next );
        }
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
 80a30f8:	f88c 3000 	strb.w	r3, [ip]
{
    volatile unsigned char *buf = (volatile unsigned char *)start;
    size_t i, n;
    if( total == 0 )
        return;
    for( i = 0; i < total; i++ )
 80a30fc:	d1e4      	bne.n	80a30c8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x150>
 80a30fe:	e7d6      	b.n	80a30ae <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x136>
     * when this function returns is not specified. Making it equivalent
     * to the good case limits the risks of leaking the padding validity. */
    *olen = plaintext_size;

cleanup:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 80a3100:	4630      	mov	r0, r6
 80a3102:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80a3106:	f003 f983 	bl	80a6410 <mbedtls_platform_zeroize>

    return( ret );
 80a310a:	4620      	mov	r0, r4
 80a310c:	e000      	b.n	80a3110 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x198>
    plaintext_max_size = ( output_max_len > ilen - 11 ?
                           ilen - 11 :
                           output_max_len );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a310e:	4802      	ldr	r0, [pc, #8]	; (80a3118 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1a0>)

cleanup:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );

    return( ret );
}
 80a3110:	f50d 6d81 	add.w	sp, sp, #1032	; 0x408
 80a3114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3118:	ffffbf80 	.word	0xffffbf80

080a311c <mbedtls_rsa_pkcs1_decrypt>:
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
 80a311c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a311e:	b087      	sub	sp, #28
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output_max_len == 0 || output != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( olen != NULL );

    switch( ctx->padding )
 80a3120:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
 80a3124:	ac0c      	add	r4, sp, #48	; 0x30
 80a3126:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
                      mode == MBEDTLS_RSA_PUBLIC );
    RSA_VALIDATE_RET( output_max_len == 0 || output != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( olen != NULL );

    switch( ctx->padding )
 80a3128:	f1be 0f00 	cmp.w	lr, #0
 80a312c:	d00c      	beq.n	80a3148 <mbedtls_rsa_pkcs1_decrypt+0x2c>
 80a312e:	f1be 0f01 	cmp.w	lr, #1
 80a3132:	d112      	bne.n	80a315a <mbedtls_rsa_pkcs1_decrypt+0x3e>

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsaes_oaep_decrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           olen, input, output,
                                           output_max_len );
 80a3134:	9402      	str	r4, [sp, #8]
 80a3136:	2400      	movs	r4, #0
 80a3138:	9705      	str	r7, [sp, #20]
 80a313a:	9604      	str	r6, [sp, #16]
 80a313c:	9503      	str	r5, [sp, #12]
 80a313e:	9401      	str	r4, [sp, #4]
 80a3140:	9400      	str	r4, [sp, #0]
 80a3142:	f7ff fe4b 	bl	80a2ddc <mbedtls_rsa_rsaes_oaep_decrypt>
 80a3146:	e009      	b.n	80a315c <mbedtls_rsa_pkcs1_decrypt+0x40>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
                                                input, output, output_max_len );
 80a3148:	970f      	str	r7, [sp, #60]	; 0x3c
 80a314a:	960e      	str	r6, [sp, #56]	; 0x38
 80a314c:	950d      	str	r5, [sp, #52]	; 0x34
 80a314e:	940c      	str	r4, [sp, #48]	; 0x30
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80a3150:	b007      	add	sp, #28
 80a3152:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
                                                input, output, output_max_len );
 80a3156:	f7ff bf0f 	b.w	80a2f78 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
                                           olen, input, output,
                                           output_max_len );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 80a315a:	4801      	ldr	r0, [pc, #4]	; (80a3160 <mbedtls_rsa_pkcs1_decrypt+0x44>)
    }
}
 80a315c:	b007      	add	sp, #28
 80a315e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3160:	ffffbf00 	.word	0xffffbf00

080a3164 <mbedtls_rsa_rsassa_pss_sign>:
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
 80a3164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80a3168:	2b01      	cmp	r3, #1
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
 80a316a:	b09f      	sub	sp, #124	; 0x7c
 80a316c:	4681      	mov	r9, r0
 80a316e:	468b      	mov	fp, r1
 80a3170:	9205      	str	r2, [sp, #20]
 80a3172:	9306      	str	r3, [sp, #24]
 80a3174:	f89d 00a0 	ldrb.w	r0, [sp, #160]	; 0xa0
 80a3178:	9d2b      	ldr	r5, [sp, #172]	; 0xac
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80a317a:	d105      	bne.n	80a3188 <mbedtls_rsa_rsassa_pss_sign+0x24>
 80a317c:	f8d9 30a4 	ldr.w	r3, [r9, #164]	; 0xa4
 80a3180:	2b01      	cmp	r3, #1
 80a3182:	d001      	beq.n	80a3188 <mbedtls_rsa_rsassa_pss_sign+0x24>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a3184:	485c      	ldr	r0, [pc, #368]	; (80a32f8 <mbedtls_rsa_rsassa_pss_sign+0x194>)
 80a3186:	e0b4      	b.n	80a32f2 <mbedtls_rsa_rsassa_pss_sign+0x18e>

    if( f_rng == NULL )
 80a3188:	f1bb 0f00 	cmp.w	fp, #0
 80a318c:	d0fa      	beq.n	80a3184 <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
 80a318e:	f8d9 4004 	ldr.w	r4, [r9, #4]

    if( md_alg != MBEDTLS_MD_NONE )
 80a3192:	b130      	cbz	r0, 80a31a2 <mbedtls_rsa_rsassa_pss_sign+0x3e>
    {
        /* Gather length of hash to sign */
        md_info = mbedtls_md_info_from_type( md_alg );
 80a3194:	f004 ffdc 	bl	80a8150 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 80a3198:	2800      	cmp	r0, #0
 80a319a:	d0f3      	beq.n	80a3184 <mbedtls_rsa_rsassa_pss_sign+0x20>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 80a319c:	f005 f90e 	bl	80a83bc <mbedtls_md_get_size>
 80a31a0:	9029      	str	r0, [sp, #164]	; 0xa4
    }

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 80a31a2:	f899 00a8 	ldrb.w	r0, [r9, #168]	; 0xa8
 80a31a6:	f004 ffd3 	bl	80a8150 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80a31aa:	9007      	str	r0, [sp, #28]
 80a31ac:	2800      	cmp	r0, #0
 80a31ae:	d0e9      	beq.n	80a3184 <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80a31b0:	f005 f904 	bl	80a83bc <mbedtls_md_get_size>
     * enough room, use the maximum salt length that fits. The constraint is
     * that the hash length plus the salt length plus 2 bytes must be at most
     * the key length. This complies with FIPS 186-4 §5.5 (e) and RFC 8017
     * (PKCS#1 v2.2) §9.1.1 step 3. */
    min_slen = hlen - 2;
    if( olen < hlen + min_slen + 2 )
 80a31b4:	0043      	lsls	r3, r0, #1
 80a31b6:	429c      	cmp	r4, r3

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80a31b8:	4682      	mov	sl, r0
     * enough room, use the maximum salt length that fits. The constraint is
     * that the hash length plus the salt length plus 2 bytes must be at most
     * the key length. This complies with FIPS 186-4 §5.5 (e) and RFC 8017
     * (PKCS#1 v2.2) §9.1.1 step 3. */
    min_slen = hlen - 2;
    if( olen < hlen + min_slen + 2 )
 80a31ba:	d3e3      	bcc.n	80a3184 <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    else if( olen >= hlen + hlen + 2 )
 80a31bc:	3302      	adds	r3, #2
 80a31be:	429c      	cmp	r4, r3
        slen = hlen;
 80a31c0:	bf2e      	itee	cs
 80a31c2:	4680      	movcs	r8, r0
    else
        slen = olen - hlen - 2;
 80a31c4:	f1a4 0802 	subcc.w	r8, r4, #2
 80a31c8:	ebc0 0808 	rsbcc	r8, r0, r8

    memset( sig, 0, olen );
 80a31cc:	4622      	mov	r2, r4
 80a31ce:	2100      	movs	r1, #0
 80a31d0:	4628      	mov	r0, r5
 80a31d2:	f00f fb36 	bl	80b2842 <memset>

    /* Generate salt of length slen */
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
 80a31d6:	4642      	mov	r2, r8
 80a31d8:	a90e      	add	r1, sp, #56	; 0x38
 80a31da:	9805      	ldr	r0, [sp, #20]
 80a31dc:	47d8      	blx	fp
 80a31de:	b110      	cbz	r0, 80a31e6 <mbedtls_rsa_rsassa_pss_sign+0x82>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 80a31e0:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 80a31e4:	e085      	b.n	80a32f2 <mbedtls_rsa_rsassa_pss_sign+0x18e>

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80a31e6:	f109 0308 	add.w	r3, r9, #8
 80a31ea:	9009      	str	r0, [sp, #36]	; 0x24
 80a31ec:	4618      	mov	r0, r3
 80a31ee:	9303      	str	r3, [sp, #12]
 80a31f0:	f009 f89a 	bl	80ac328 <mbedtls_mpi_bitlen>
    p += olen - hlen - slen - 2;
 80a31f4:	ebca 0304 	rsb	r3, sl, r4
 80a31f8:	ebc8 0203 	rsb	r2, r8, r3
    *p++ = 0x01;
 80a31fc:	1e56      	subs	r6, r2, #1
 80a31fe:	2101      	movs	r1, #1
 80a3200:	442a      	add	r2, r5
 80a3202:	442e      	add	r6, r5
 80a3204:	f802 1c02 	strb.w	r1, [r2, #-2]
    /* Generate salt of length slen */
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80a3208:	9008      	str	r0, [sp, #32]
    p += olen - hlen - slen - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
 80a320a:	4642      	mov	r2, r8
 80a320c:	a90e      	add	r1, sp, #56	; 0x38
    p += slen;

    mbedtls_md_init( &md_ctx );
 80a320e:	af0b      	add	r7, sp, #44	; 0x2c

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen - slen - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
 80a3210:	4630      	mov	r0, r6
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen - slen - 2;
 80a3212:	9304      	str	r3, [sp, #16]
    *p++ = 0x01;
    memcpy( p, salt, slen );
 80a3214:	f00f faef 	bl	80b27f6 <memcpy>
    p += slen;

    mbedtls_md_init( &md_ctx );
 80a3218:	4638      	mov	r0, r7
 80a321a:	f004 ffa5 	bl	80a8168 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 80a321e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a3220:	9907      	ldr	r1, [sp, #28]
 80a3222:	461a      	mov	r2, r3
 80a3224:	4638      	mov	r0, r7
 80a3226:	f004 ffbf 	bl	80a81a8 <mbedtls_md_setup>
 80a322a:	4602      	mov	r2, r0
 80a322c:	2800      	cmp	r0, #0
 80a322e:	d149      	bne.n	80a32c4 <mbedtls_rsa_rsassa_pss_sign+0x160>
        goto exit;

    /* Generate H = Hash( M' ) */
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
 80a3230:	4638      	mov	r0, r7
 80a3232:	f004 ffdb 	bl	80a81ec <mbedtls_md_starts>
 80a3236:	4602      	mov	r2, r0
 80a3238:	2800      	cmp	r0, #0
 80a323a:	d143      	bne.n	80a32c4 <mbedtls_rsa_rsassa_pss_sign+0x160>
    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen - slen - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
    p += slen;
 80a323c:	4446      	add	r6, r8
        goto exit;

    /* Generate H = Hash( M' ) */
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, p, 8 ) ) != 0 )
 80a323e:	2208      	movs	r2, #8
 80a3240:	4631      	mov	r1, r6
 80a3242:	4638      	mov	r0, r7
 80a3244:	f004 ffdc 	bl	80a8200 <mbedtls_md_update>
 80a3248:	4602      	mov	r2, r0
 80a324a:	2800      	cmp	r0, #0
 80a324c:	d13a      	bne.n	80a32c4 <mbedtls_rsa_rsassa_pss_sign+0x160>
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, hash, hashlen ) ) != 0 )
 80a324e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80a3250:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80a3252:	4638      	mov	r0, r7
 80a3254:	f004 ffd4 	bl	80a8200 <mbedtls_md_update>
 80a3258:	4602      	mov	r2, r0
 80a325a:	bb98      	cbnz	r0, 80a32c4 <mbedtls_rsa_rsassa_pss_sign+0x160>
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, salt, slen ) ) != 0 )
 80a325c:	4642      	mov	r2, r8
 80a325e:	a90e      	add	r1, sp, #56	; 0x38
 80a3260:	4638      	mov	r0, r7
 80a3262:	f004 ffcd 	bl	80a8200 <mbedtls_md_update>
 80a3266:	4602      	mov	r2, r0
 80a3268:	bb60      	cbnz	r0, 80a32c4 <mbedtls_rsa_rsassa_pss_sign+0x160>
        goto exit;
    if( ( ret = mbedtls_md_finish( &md_ctx, p ) ) != 0 )
 80a326a:	4631      	mov	r1, r6
 80a326c:	4638      	mov	r0, r7
 80a326e:	f004 ffd1 	bl	80a8214 <mbedtls_md_finish>
 80a3272:	4602      	mov	r2, r0
 80a3274:	bb30      	cbnz	r0, 80a32c4 <mbedtls_rsa_rsassa_pss_sign+0x160>
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    size_t slen, min_slen, hlen, offset = 0;
 80a3276:	9b08      	ldr	r3, [sp, #32]
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
 80a3278:	4632      	mov	r2, r6
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    size_t slen, min_slen, hlen, offset = 0;
 80a327a:	3b01      	subs	r3, #1
 80a327c:	f013 0f07 	tst.w	r3, #7
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
 80a3280:	9b04      	ldr	r3, [sp, #16]
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    size_t slen, min_slen, hlen, offset = 0;
 80a3282:	bf0c      	ite	eq
 80a3284:	2001      	moveq	r0, #1
 80a3286:	2000      	movne	r0, #0
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
 80a3288:	1e59      	subs	r1, r3, #1
 80a328a:	1a09      	subs	r1, r1, r0
 80a328c:	9700      	str	r7, [sp, #0]
 80a328e:	4653      	mov	r3, sl
 80a3290:	4428      	add	r0, r5
 80a3292:	f7fe ffdd 	bl	80a2250 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 80a3296:	4602      	mov	r2, r0
 80a3298:	b9a0      	cbnz	r0, 80a32c4 <mbedtls_rsa_rsassa_pss_sign+0x160>
 80a329a:	9004      	str	r0, [sp, #16]
                          &md_ctx ) ) != 0 )
        goto exit;

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80a329c:	9803      	ldr	r0, [sp, #12]
 80a329e:	f009 f843 	bl	80ac328 <mbedtls_mpi_bitlen>
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 80a32a2:	ebc0 00c4 	rsb	r0, r0, r4, lsl #3
 80a32a6:	782b      	ldrb	r3, [r5, #0]
 80a32a8:	3001      	adds	r0, #1
 80a32aa:	24ff      	movs	r4, #255	; 0xff
 80a32ac:	fa44 f000 	asr.w	r0, r4, r0
 80a32b0:	4018      	ands	r0, r3

    p += hlen;
    *p++ = 0xBC;
 80a32b2:	23bc      	movs	r3, #188	; 0xbc
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
                          &md_ctx ) ) != 0 )
        goto exit;

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 80a32b4:	7028      	strb	r0, [r5, #0]

    p += hlen;
    *p++ = 0xBC;

    mbedtls_platform_zeroize( salt, sizeof( salt ) );
 80a32b6:	2140      	movs	r1, #64	; 0x40

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    sig[0] &= 0xFF >> ( olen * 8 - msb );

    p += hlen;
    *p++ = 0xBC;
 80a32b8:	f806 300a 	strb.w	r3, [r6, sl]

    mbedtls_platform_zeroize( salt, sizeof( salt ) );
 80a32bc:	a80e      	add	r0, sp, #56	; 0x38
 80a32be:	f003 f8a7 	bl	80a6410 <mbedtls_platform_zeroize>
 80a32c2:	9a04      	ldr	r2, [sp, #16]

exit:
    mbedtls_md_free( &md_ctx );
 80a32c4:	a80b      	add	r0, sp, #44	; 0x2c
 80a32c6:	9203      	str	r2, [sp, #12]
 80a32c8:	f004 ff53 	bl	80a8172 <mbedtls_md_free>

    if( ret != 0 )
 80a32cc:	9a03      	ldr	r2, [sp, #12]
 80a32ce:	b97a      	cbnz	r2, 80a32f0 <mbedtls_rsa_rsassa_pss_sign+0x18c>
        return( ret );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, sig, sig )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
 80a32d0:	9b06      	ldr	r3, [sp, #24]
 80a32d2:	b92b      	cbnz	r3, 80a32e0 <mbedtls_rsa_rsassa_pss_sign+0x17c>
 80a32d4:	462a      	mov	r2, r5
 80a32d6:	4629      	mov	r1, r5
 80a32d8:	4648      	mov	r0, r9
 80a32da:	f7ff fa67 	bl	80a27ac <mbedtls_rsa_public>
 80a32de:	e008      	b.n	80a32f2 <mbedtls_rsa_rsassa_pss_sign+0x18e>
 80a32e0:	9500      	str	r5, [sp, #0]
 80a32e2:	462b      	mov	r3, r5
 80a32e4:	9a05      	ldr	r2, [sp, #20]
 80a32e6:	4659      	mov	r1, fp
 80a32e8:	4648      	mov	r0, r9
 80a32ea:	f7ff faa1 	bl	80a2830 <mbedtls_rsa_private>
 80a32ee:	e000      	b.n	80a32f2 <mbedtls_rsa_rsassa_pss_sign+0x18e>
 80a32f0:	4610      	mov	r0, r2
}
 80a32f2:	b01f      	add	sp, #124	; 0x7c
 80a32f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a32f8:	ffffbf80 	.word	0xffffbf80

080a32fc <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 80a32fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80a3300:	2b01      	cmp	r3, #1
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 80a3302:	4689      	mov	r9, r1
 80a3304:	a90b      	add	r1, sp, #44	; 0x2c
 80a3306:	4605      	mov	r5, r0
 80a3308:	4692      	mov	sl, r2
 80a330a:	c986      	ldmia	r1, {r1, r2, r7}
 80a330c:	461c      	mov	r4, r3
 80a330e:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80a3312:	d103      	bne.n	80a331c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x20>
 80a3314:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 80a3318:	2b00      	cmp	r3, #0
 80a331a:	d14b      	bne.n	80a33b4 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xb8>

    /*
     * Prepare PKCS1-v1.5 encoding (padding and hash identifier)
     */

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,
 80a331c:	9700      	str	r7, [sp, #0]
 80a331e:	686b      	ldr	r3, [r5, #4]
 80a3320:	f7fe ffea 	bl	80a22f8 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
 80a3324:	2800      	cmp	r0, #0
 80a3326:	d149      	bne.n	80a33bc <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>

    /*
     * Call respective RSA primitive
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
 80a3328:	b93c      	cbnz	r4, 80a333a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x3e>
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 80a332a:	463a      	mov	r2, r7
 80a332c:	4639      	mov	r1, r7
 80a332e:	4628      	mov	r0, r5
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
 80a3330:	b002      	add	sp, #8
 80a3332:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 80a3336:	f7ff ba39 	b.w	80a27ac <mbedtls_rsa_public>
     *
     * In order to prevent Lenstra's attack, make the signature in a
     * temporary buffer and check it before returning it.
     */

    sig_try = (unsigned char *)mbedtls_calloc( 1, ctx->len );
 80a333a:	686c      	ldr	r4, [r5, #4]
 80a333c:	2001      	movs	r0, #1
 80a333e:	4621      	mov	r1, r4
 80a3340:	f00f f93c 	bl	80b25bc <calloc>
    if( sig_try == NULL )
 80a3344:	4606      	mov	r6, r0
 80a3346:	b3b8      	cbz	r0, 80a33b8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

    verif = (unsigned char *)mbedtls_calloc( 1, ctx->len );
 80a3348:	4621      	mov	r1, r4
 80a334a:	2001      	movs	r0, #1
 80a334c:	f00f f936 	bl	80b25bc <calloc>
    if( verif == NULL )
 80a3350:	4680      	mov	r8, r0
 80a3352:	b918      	cbnz	r0, 80a335c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x60>
    {
        mbedtls_free( sig_try );
 80a3354:	4630      	mov	r0, r6
 80a3356:	f00d fec7 	bl	80b10e8 <free>
 80a335a:	e02d      	b.n	80a33b8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
 80a335c:	9600      	str	r6, [sp, #0]
 80a335e:	463b      	mov	r3, r7
 80a3360:	4652      	mov	r2, sl
 80a3362:	4649      	mov	r1, r9
 80a3364:	4628      	mov	r0, r5
 80a3366:	f7ff fa63 	bl	80a2830 <mbedtls_rsa_private>
 80a336a:	4604      	mov	r4, r0
 80a336c:	b9d0      	cbnz	r0, 80a33a4 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
 80a336e:	4642      	mov	r2, r8
 80a3370:	4631      	mov	r1, r6
 80a3372:	4628      	mov	r0, r5
 80a3374:	f7ff fa1a 	bl	80a27ac <mbedtls_rsa_public>
 80a3378:	4604      	mov	r4, r0
 80a337a:	b998      	cbnz	r0, 80a33a4 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
static inline int mbedtls_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;
 80a337c:	4603      	mov	r3, r0

    for( i = 0; i < n; i++ )
 80a337e:	4602      	mov	r2, r0
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 80a3380:	686d      	ldr	r5, [r5, #4]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80a3382:	42aa      	cmp	r2, r5
 80a3384:	d007      	beq.n	80a3396 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x9a>
        diff |= A[i] ^ B[i];
 80a3386:	f818 0002 	ldrb.w	r0, [r8, r2]
 80a338a:	5cb9      	ldrb	r1, [r7, r2]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80a338c:	3201      	adds	r2, #1
        diff |= A[i] ^ B[i];
 80a338e:	4041      	eors	r1, r0
 80a3390:	430b      	orrs	r3, r1
 80a3392:	b2db      	uxtb	r3, r3
 80a3394:	e7f5      	b.n	80a3382 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x86>
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 80a3396:	b923      	cbnz	r3, 80a33a2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa6>
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
        goto cleanup;
    }

    memcpy( sig, sig_try, ctx->len );
 80a3398:	4631      	mov	r1, r6
 80a339a:	4638      	mov	r0, r7
 80a339c:	f00f fa2b 	bl	80b27f6 <memcpy>
 80a33a0:	e000      	b.n	80a33a4 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
 80a33a2:	4c08      	ldr	r4, [pc, #32]	; (80a33c4 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc8>)
    }

    memcpy( sig, sig_try, ctx->len );

cleanup:
    mbedtls_free( sig_try );
 80a33a4:	4630      	mov	r0, r6
 80a33a6:	f00d fe9f 	bl	80b10e8 <free>
    mbedtls_free( verif );
 80a33aa:	4640      	mov	r0, r8
 80a33ac:	f00d fe9c 	bl	80b10e8 <free>

    return( ret );
 80a33b0:	4620      	mov	r0, r4
 80a33b2:	e003      	b.n	80a33bc <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a33b4:	4804      	ldr	r0, [pc, #16]	; (80a33c8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xcc>)
 80a33b6:	e001      	b.n	80a33bc <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>
     * temporary buffer and check it before returning it.
     */

    sig_try = (unsigned char *)mbedtls_calloc( 1, ctx->len );
    if( sig_try == NULL )
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 80a33b8:	f06f 000f 	mvn.w	r0, #15
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
 80a33bc:	b002      	add	sp, #8
 80a33be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a33c2:	bf00      	nop
 80a33c4:	ffffbd00 	.word	0xffffbd00
 80a33c8:	ffffbf80 	.word	0xffffbf80

080a33cc <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 80a33cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    switch( ctx->padding )
 80a33ce:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 80a33d2:	ad06      	add	r5, sp, #24
 80a33d4:	f89d 4014 	ldrb.w	r4, [sp, #20]
 80a33d8:	cde0      	ldmia	r5, {r5, r6, r7}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    switch( ctx->padding )
 80a33da:	f1be 0f00 	cmp.w	lr, #0
 80a33de:	d00a      	beq.n	80a33f6 <mbedtls_rsa_pkcs1_sign+0x2a>
 80a33e0:	f1be 0f01 	cmp.w	lr, #1
 80a33e4:	d10f      	bne.n	80a3406 <mbedtls_rsa_pkcs1_sign+0x3a>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
 80a33e6:	9708      	str	r7, [sp, #32]
 80a33e8:	9607      	str	r6, [sp, #28]
 80a33ea:	9506      	str	r5, [sp, #24]
 80a33ec:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80a33ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
 80a33f2:	f7ff beb7 	b.w	80a3164 <mbedtls_rsa_rsassa_pss_sign>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
                                              hashlen, hash, sig );
 80a33f6:	9708      	str	r7, [sp, #32]
 80a33f8:	9607      	str	r6, [sp, #28]
 80a33fa:	9506      	str	r5, [sp, #24]
 80a33fc:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80a33fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
                                              hashlen, hash, sig );
 80a3402:	f7ff bf7b 	b.w	80a32fc <mbedtls_rsa_rsassa_pkcs1_v15_sign>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80a3406:	4801      	ldr	r0, [pc, #4]	; (80a340c <mbedtls_rsa_pkcs1_sign+0x40>)
 80a3408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a340a:	bf00      	nop
 80a340c:	ffffbf00 	.word	0xffffbf00

080a3410 <mbedtls_rsa_rsassa_pss_verify_ext>:
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
 80a3410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80a3414:	2b01      	cmp	r3, #1
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
 80a3416:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
 80a341a:	4605      	mov	r5, r0
 80a341c:	f89d 8488 	ldrb.w	r8, [sp, #1160]	; 0x488
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80a3420:	d105      	bne.n	80a342e <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
 80a3422:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 80a3426:	2801      	cmp	r0, #1
 80a3428:	d001      	beq.n	80a342e <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a342a:	4861      	ldr	r0, [pc, #388]	; (80a35b0 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a0>)
 80a342c:	e0bb      	b.n	80a35a6 <mbedtls_rsa_rsassa_pss_verify_ext+0x196>

    siglen = ctx->len;
 80a342e:	686f      	ldr	r7, [r5, #4]

    if( siglen < 16 || siglen > sizeof( buf ) )
 80a3430:	f1a7 0010 	sub.w	r0, r7, #16
 80a3434:	f5b0 7f7c 	cmp.w	r0, #1008	; 0x3f0
 80a3438:	d8f7      	bhi.n	80a342a <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
 80a343a:	ae18      	add	r6, sp, #96	; 0x60
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 80a343c:	b933      	cbnz	r3, 80a344c <mbedtls_rsa_rsassa_pss_verify_ext+0x3c>
 80a343e:	4632      	mov	r2, r6
 80a3440:	f8dd 149c 	ldr.w	r1, [sp, #1180]	; 0x49c
 80a3444:	4628      	mov	r0, r5
 80a3446:	f7ff f9b1 	bl	80a27ac <mbedtls_rsa_public>
 80a344a:	e005      	b.n	80a3458 <mbedtls_rsa_rsassa_pss_verify_ext+0x48>
 80a344c:	9600      	str	r6, [sp, #0]
 80a344e:	f8dd 349c 	ldr.w	r3, [sp, #1180]	; 0x49c
 80a3452:	4628      	mov	r0, r5
 80a3454:	f7ff f9ec 	bl	80a2830 <mbedtls_rsa_private>

    if( ret != 0 )
 80a3458:	2800      	cmp	r0, #0
 80a345a:	f040 80a4 	bne.w	80a35a6 <mbedtls_rsa_rsassa_pss_verify_ext+0x196>
        return( ret );

    p = buf;

    if( buf[siglen - 1] != 0xBC )
 80a345e:	1e7c      	subs	r4, r7, #1
 80a3460:	5d33      	ldrb	r3, [r6, r4]
 80a3462:	2bbc      	cmp	r3, #188	; 0xbc
 80a3464:	f040 809e 	bne.w	80a35a4 <mbedtls_rsa_rsassa_pss_verify_ext+0x194>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );

    if( md_alg != MBEDTLS_MD_NONE )
 80a3468:	f1b8 0f00 	cmp.w	r8, #0
 80a346c:	d008      	beq.n	80a3480 <mbedtls_rsa_rsassa_pss_verify_ext+0x70>
    {
        /* Gather length of hash to sign */
        md_info = mbedtls_md_info_from_type( md_alg );
 80a346e:	4640      	mov	r0, r8
 80a3470:	f004 fe6e 	bl	80a8150 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 80a3474:	2800      	cmp	r0, #0
 80a3476:	d0d8      	beq.n	80a342a <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 80a3478:	f004 ffa0 	bl	80a83bc <mbedtls_md_get_size>
 80a347c:	f8cd 048c 	str.w	r0, [sp, #1164]	; 0x48c
    }

    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
 80a3480:	f89d 0494 	ldrb.w	r0, [sp, #1172]	; 0x494
 80a3484:	f004 fe64 	bl	80a8150 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80a3488:	4681      	mov	r9, r0
 80a348a:	2800      	cmp	r0, #0
 80a348c:	d0cd      	beq.n	80a342a <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80a348e:	f004 ff95 	bl	80a83bc <mbedtls_md_get_size>

    memset( zeros, 0, 8 );
 80a3492:	2300      	movs	r3, #0

    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80a3494:	4682      	mov	sl, r0
    memset( zeros, 0, 8 );

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80a3496:	f105 0008 	add.w	r0, r5, #8
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );

    memset( zeros, 0, 8 );
 80a349a:	9303      	str	r3, [sp, #12]
 80a349c:	9304      	str	r3, [sp, #16]

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80a349e:	f008 ff43 	bl	80ac328 <mbedtls_mpi_bitlen>

    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 80a34a2:	00fb      	lsls	r3, r7, #3
    memset( zeros, 0, 8 );

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80a34a4:	f100 38ff 	add.w	r8, r0, #4294967295

    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 80a34a8:	7832      	ldrb	r2, [r6, #0]
 80a34aa:	f1c3 0308 	rsb	r3, r3, #8
 80a34ae:	4443      	add	r3, r8
 80a34b0:	fa52 f303 	asrs.w	r3, r2, r3
 80a34b4:	d1b9      	bne.n	80a342a <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
 80a34b6:	f018 0f07 	tst.w	r8, #7
    {
        p++;
        siglen -= 1;
 80a34ba:	bf08      	it	eq
 80a34bc:	4627      	moveq	r7, r4
    }

    if( siglen < hlen + 2 )
 80a34be:	f10a 0302 	add.w	r3, sl, #2
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
    {
        p++;
 80a34c2:	bf0c      	ite	eq
 80a34c4:	f10d 0561 	addeq.w	r5, sp, #97	; 0x61
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );

    if( ret != 0 )
        return( ret );

    p = buf;
 80a34c8:	4635      	movne	r5, r6
    {
        p++;
        siglen -= 1;
    }

    if( siglen < hlen + 2 )
 80a34ca:	429f      	cmp	r7, r3
 80a34cc:	d3ad      	bcc.n	80a342a <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    hash_start = p + siglen - hlen - 1;

    mbedtls_md_init( &md_ctx );
 80a34ce:	ac05      	add	r4, sp, #20
 80a34d0:	4620      	mov	r0, r4
 80a34d2:	f004 fe49 	bl	80a8168 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 80a34d6:	2200      	movs	r2, #0
 80a34d8:	4649      	mov	r1, r9
 80a34da:	4620      	mov	r0, r4
 80a34dc:	f004 fe64 	bl	80a81a8 <mbedtls_md_setup>
 80a34e0:	4683      	mov	fp, r0
 80a34e2:	2800      	cmp	r0, #0
 80a34e4:	d159      	bne.n	80a359a <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        siglen -= 1;
    }

    if( siglen < hlen + 2 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    hash_start = p + siglen - hlen - 1;
 80a34e6:	ea6f 010a 	mvn.w	r1, sl
 80a34ea:	4439      	add	r1, r7
 80a34ec:	eb05 0901 	add.w	r9, r5, r1

    mbedtls_md_init( &md_ctx );
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
        goto exit;

    ret = mgf_mask( p, siglen - hlen - 1, hash_start, hlen, &md_ctx );
 80a34f0:	9400      	str	r4, [sp, #0]
 80a34f2:	4653      	mov	r3, sl
 80a34f4:	464a      	mov	r2, r9
 80a34f6:	4628      	mov	r0, r5
 80a34f8:	f7fe feaa 	bl	80a2250 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
    if( ret != 0 )
 80a34fc:	4683      	mov	fp, r0
 80a34fe:	2800      	cmp	r0, #0
 80a3500:	d14b      	bne.n	80a359a <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;

    buf[0] &= 0xFF >> ( siglen * 8 - msb );
 80a3502:	ebc8 07c7 	rsb	r7, r8, r7, lsl #3
 80a3506:	7833      	ldrb	r3, [r6, #0]
 80a3508:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80a350c:	fa48 f707 	asr.w	r7, r8, r7
 80a3510:	401f      	ands	r7, r3
 80a3512:	7037      	strb	r7, [r6, #0]

    while( p < hash_start - 1 && *p == 0 )
 80a3514:	f109 32ff 	add.w	r2, r9, #4294967295
 80a3518:	4295      	cmp	r5, r2
 80a351a:	4629      	mov	r1, r5
 80a351c:	d203      	bcs.n	80a3526 <mbedtls_rsa_rsassa_pss_verify_ext+0x116>
 80a351e:	780b      	ldrb	r3, [r1, #0]
 80a3520:	3501      	adds	r5, #1
 80a3522:	2b00      	cmp	r3, #0
 80a3524:	d0f8      	beq.n	80a3518 <mbedtls_rsa_rsassa_pss_verify_ext+0x108>
        p++;

    if( *p++ != 0x01 )
 80a3526:	780b      	ldrb	r3, [r1, #0]
 80a3528:	2b01      	cmp	r3, #1
 80a352a:	d134      	bne.n	80a3596 <mbedtls_rsa_rsassa_pss_verify_ext+0x186>
        goto exit;
    }

    observed_salt_len = hash_start - p;

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 80a352c:	f8dd 3498 	ldr.w	r3, [sp, #1176]	; 0x498
    buf[0] &= 0xFF >> ( siglen * 8 - msb );

    while( p < hash_start - 1 && *p == 0 )
        p++;

    if( *p++ != 0x01 )
 80a3530:	1c4d      	adds	r5, r1, #1
        goto exit;
    }

    observed_salt_len = hash_start - p;

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 80a3532:	1c5a      	adds	r2, r3, #1
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto exit;
    }

    observed_salt_len = hash_start - p;
 80a3534:	ebc5 0609 	rsb	r6, r5, r9

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 80a3538:	d001      	beq.n	80a353e <mbedtls_rsa_rsassa_pss_verify_ext+0x12e>
 80a353a:	429e      	cmp	r6, r3
 80a353c:	d12b      	bne.n	80a3596 <mbedtls_rsa_rsassa_pss_verify_ext+0x186>
    }

    /*
     * Generate H = Hash( M' )
     */
    ret = mbedtls_md_starts( &md_ctx );
 80a353e:	4620      	mov	r0, r4
 80a3540:	f004 fe54 	bl	80a81ec <mbedtls_md_starts>
    if ( ret != 0 )
 80a3544:	4683      	mov	fp, r0
 80a3546:	bb40      	cbnz	r0, 80a359a <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, zeros, 8 );
 80a3548:	2208      	movs	r2, #8
 80a354a:	a903      	add	r1, sp, #12
 80a354c:	4620      	mov	r0, r4
 80a354e:	f004 fe57 	bl	80a8200 <mbedtls_md_update>
    if ( ret != 0 )
 80a3552:	4683      	mov	fp, r0
 80a3554:	bb08      	cbnz	r0, 80a359a <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, hash, hashlen );
 80a3556:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
 80a355a:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
 80a355e:	4620      	mov	r0, r4
 80a3560:	f004 fe4e 	bl	80a8200 <mbedtls_md_update>
    if ( ret != 0 )
 80a3564:	4683      	mov	fp, r0
 80a3566:	b9c0      	cbnz	r0, 80a359a <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, p, observed_salt_len );
 80a3568:	4632      	mov	r2, r6
 80a356a:	4629      	mov	r1, r5
 80a356c:	4620      	mov	r0, r4
 80a356e:	f004 fe47 	bl	80a8200 <mbedtls_md_update>
    if ( ret != 0 )
 80a3572:	4683      	mov	fp, r0
 80a3574:	b988      	cbnz	r0, 80a359a <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_finish( &md_ctx, result );
 80a3576:	a908      	add	r1, sp, #32
 80a3578:	4620      	mov	r0, r4
 80a357a:	f004 fe4b 	bl	80a8214 <mbedtls_md_finish>
    if ( ret != 0 )
 80a357e:	4683      	mov	fp, r0
 80a3580:	b958      	cbnz	r0, 80a359a <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;

    if( memcmp( hash_start, result, hlen ) != 0 )
 80a3582:	4652      	mov	r2, sl
 80a3584:	a908      	add	r1, sp, #32
 80a3586:	4648      	mov	r0, r9
 80a3588:	f00f f926 	bl	80b27d8 <memcmp>
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 80a358c:	4a09      	ldr	r2, [pc, #36]	; (80a35b4 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a4>)
 80a358e:	2800      	cmp	r0, #0
 80a3590:	bf18      	it	ne
 80a3592:	4693      	movne	fp, r2
 80a3594:	e001      	b.n	80a359a <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
    while( p < hash_start - 1 && *p == 0 )
        p++;

    if( *p++ != 0x01 )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 80a3596:	f8df b020 	ldr.w	fp, [pc, #32]	; 80a35b8 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
        goto exit;
    }

exit:
    mbedtls_md_free( &md_ctx );
 80a359a:	4620      	mov	r0, r4
 80a359c:	f004 fde9 	bl	80a8172 <mbedtls_md_free>

    return( ret );
 80a35a0:	4658      	mov	r0, fp
 80a35a2:	e000      	b.n	80a35a6 <mbedtls_rsa_rsassa_pss_verify_ext+0x196>
        return( ret );

    p = buf;

    if( buf[siglen - 1] != 0xBC )
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 80a35a4:	4804      	ldr	r0, [pc, #16]	; (80a35b8 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>)

exit:
    mbedtls_md_free( &md_ctx );

    return( ret );
}
 80a35a6:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
 80a35aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a35ae:	bf00      	nop
 80a35b0:	ffffbf80 	.word	0xffffbf80
 80a35b4:	ffffbc80 	.word	0xffffbc80
 80a35b8:	ffffbf00 	.word	0xffffbf00

080a35bc <mbedtls_rsa_rsassa_pss_verify>:
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
 80a35bc:	b570      	push	{r4, r5, r6, lr}
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
 80a35be:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
 80a35c2:	b086      	sub	sp, #24
 80a35c4:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
                        hashlen == 0 ) ||
                      hash != NULL );

    mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
                             ? (mbedtls_md_type_t) ctx->hash_id
                             : md_alg;
 80a35c8:	b10c      	cbz	r4, 80a35ce <mbedtls_rsa_rsassa_pss_verify+0x12>
 80a35ca:	b2e4      	uxtb	r4, r4
 80a35cc:	e000      	b.n	80a35d0 <mbedtls_rsa_rsassa_pss_verify+0x14>
 80a35ce:	462c      	mov	r4, r5

    return( mbedtls_rsa_rsassa_pss_verify_ext( ctx, f_rng, p_rng, mode,
                                       md_alg, hashlen, hash,
                                       mgf1_hash_id, MBEDTLS_RSA_SALT_LEN_ANY,
                                       sig ) );
 80a35d0:	9403      	str	r4, [sp, #12]
 80a35d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80a35d4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80a35d6:	9402      	str	r4, [sp, #8]
 80a35d8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80a35da:	9605      	str	r6, [sp, #20]
 80a35dc:	f04f 36ff 	mov.w	r6, #4294967295
 80a35e0:	9604      	str	r6, [sp, #16]
 80a35e2:	9401      	str	r4, [sp, #4]
 80a35e4:	9500      	str	r5, [sp, #0]
 80a35e6:	f7ff ff13 	bl	80a3410 <mbedtls_rsa_rsassa_pss_verify_ext>

}
 80a35ea:	b006      	add	sp, #24
 80a35ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080a35f0 <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
 80a35f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
                        hashlen == 0 ) ||
                      hash != NULL );

    sig_len = ctx->len;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80a35f4:	2b01      	cmp	r3, #1
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
 80a35f6:	4680      	mov	r8, r0
 80a35f8:	468a      	mov	sl, r1
 80a35fa:	4693      	mov	fp, r2
 80a35fc:	4699      	mov	r9, r3
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    sig_len = ctx->len;
 80a35fe:	6845      	ldr	r5, [r0, #4]

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80a3600:	d102      	bne.n	80a3608 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x18>
 80a3602:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80a3606:	b9eb      	cbnz	r3, 80a3644 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x54>

    /*
     * Prepare expected PKCS1 v1.5 encoding of hash.
     */

    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
 80a3608:	4629      	mov	r1, r5
 80a360a:	2001      	movs	r0, #1
 80a360c:	f00e ffd6 	bl	80b25bc <calloc>
 80a3610:	4606      	mov	r6, r0
 80a3612:	b1c8      	cbz	r0, 80a3648 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x58>
 80a3614:	4629      	mov	r1, r5
 80a3616:	2001      	movs	r0, #1
 80a3618:	f00e ffd0 	bl	80b25bc <calloc>
 80a361c:	4607      	mov	r7, r0
 80a361e:	b9c0      	cbnz	r0, 80a3652 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x62>
        ( encoded_expected = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL )
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 80a3620:	f06f 040f 	mvn.w	r4, #15

cleanup:

    if( encoded != NULL )
    {
        mbedtls_platform_zeroize( encoded, sig_len );
 80a3624:	4630      	mov	r0, r6
 80a3626:	4629      	mov	r1, r5
 80a3628:	f002 fef2 	bl	80a6410 <mbedtls_platform_zeroize>
        mbedtls_free( encoded );
 80a362c:	4630      	mov	r0, r6
 80a362e:	f00d fd5b 	bl	80b10e8 <free>
    }

    if( encoded_expected != NULL )
 80a3632:	b167      	cbz	r7, 80a364e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5e>
    {
        mbedtls_platform_zeroize( encoded_expected, sig_len );
 80a3634:	4638      	mov	r0, r7
 80a3636:	4629      	mov	r1, r5
 80a3638:	f002 feea 	bl	80a6410 <mbedtls_platform_zeroize>
        mbedtls_free( encoded_expected );
 80a363c:	4638      	mov	r0, r7
 80a363e:	f00d fd53 	bl	80b10e8 <free>
 80a3642:	e004      	b.n	80a364e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5e>
                      hash != NULL );

    sig_len = ctx->len;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a3644:	481b      	ldr	r0, [pc, #108]	; (80a36b4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc4>)
 80a3646:	e031      	b.n	80a36ac <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
     */

    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
        ( encoded_expected = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL )
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 80a3648:	f06f 000f 	mvn.w	r0, #15
 80a364c:	e02e      	b.n	80a36ac <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
 80a364e:	4620      	mov	r0, r4
 80a3650:	e02c      	b.n	80a36ac <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
        goto cleanup;
    }

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,
 80a3652:	9000      	str	r0, [sp, #0]
 80a3654:	462b      	mov	r3, r5
 80a3656:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80a3658:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a365a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 80a365e:	f7fe fe4b 	bl	80a22f8 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
 80a3662:	4604      	mov	r4, r0
 80a3664:	2800      	cmp	r0, #0
 80a3666:	d1dd      	bne.n	80a3624 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
     * Apply RSA primitive to get what should be PKCS1 encoded hash.
     */

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, encoded )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 80a3668:	f1b9 0f00 	cmp.w	r9, #0
 80a366c:	d105      	bne.n	80a367a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8a>
 80a366e:	4632      	mov	r2, r6
 80a3670:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80a3672:	4640      	mov	r0, r8
 80a3674:	f7ff f89a 	bl	80a27ac <mbedtls_rsa_public>
 80a3678:	e006      	b.n	80a3688 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x98>
 80a367a:	9600      	str	r6, [sp, #0]
 80a367c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a367e:	465a      	mov	r2, fp
 80a3680:	4651      	mov	r1, sl
 80a3682:	4640      	mov	r0, r8
 80a3684:	f7ff f8d4 	bl	80a2830 <mbedtls_rsa_private>
 80a3688:	4604      	mov	r4, r0
    if( ret != 0 )
 80a368a:	2800      	cmp	r0, #0
 80a368c:	d1ca      	bne.n	80a3624 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
 80a368e:	4603      	mov	r3, r0
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80a3690:	429d      	cmp	r5, r3
 80a3692:	d006      	beq.n	80a36a2 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb2>
        diff |= A[i] ^ B[i];
 80a3694:	5cf0      	ldrb	r0, [r6, r3]
 80a3696:	5cfa      	ldrb	r2, [r7, r3]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80a3698:	3301      	adds	r3, #1
        diff |= A[i] ^ B[i];
 80a369a:	4050      	eors	r0, r2
 80a369c:	4304      	orrs	r4, r0
 80a369e:	b2e4      	uxtb	r4, r4
 80a36a0:	e7f6      	b.n	80a3690 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa0>
     */

    if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,
                                      sig_len ) ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 80a36a2:	2c00      	cmp	r4, #0
 80a36a4:	4c04      	ldr	r4, [pc, #16]	; (80a36b8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>)
 80a36a6:	bf08      	it	eq
 80a36a8:	2400      	moveq	r4, #0
 80a36aa:	e7bb      	b.n	80a3624 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
        mbedtls_platform_zeroize( encoded_expected, sig_len );
        mbedtls_free( encoded_expected );
    }

    return( ret );
}
 80a36ac:	b003      	add	sp, #12
 80a36ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a36b2:	bf00      	nop
 80a36b4:	ffffbf80 	.word	0xffffbf80
 80a36b8:	ffffbc80 	.word	0xffffbc80

080a36bc <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 80a36bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    switch( ctx->padding )
 80a36be:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 80a36c2:	ad06      	add	r5, sp, #24
 80a36c4:	f89d 4014 	ldrb.w	r4, [sp, #20]
 80a36c8:	cde0      	ldmia	r5, {r5, r6, r7}
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    switch( ctx->padding )
 80a36ca:	f1be 0f00 	cmp.w	lr, #0
 80a36ce:	d00a      	beq.n	80a36e6 <mbedtls_rsa_pkcs1_verify+0x2a>
 80a36d0:	f1be 0f01 	cmp.w	lr, #1
 80a36d4:	d10f      	bne.n	80a36f6 <mbedtls_rsa_pkcs1_verify+0x3a>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
 80a36d6:	9708      	str	r7, [sp, #32]
 80a36d8:	9607      	str	r6, [sp, #28]
 80a36da:	9506      	str	r5, [sp, #24]
 80a36dc:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80a36de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
 80a36e2:	f7ff bf6b 	b.w	80a35bc <mbedtls_rsa_rsassa_pss_verify>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
                                                hashlen, hash, sig );
 80a36e6:	9708      	str	r7, [sp, #32]
 80a36e8:	9607      	str	r6, [sp, #28]
 80a36ea:	9506      	str	r5, [sp, #24]
 80a36ec:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80a36ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
                                                hashlen, hash, sig );
 80a36f2:	f7ff bf7d 	b.w	80a35f0 <mbedtls_rsa_rsassa_pkcs1_v15_verify>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80a36f6:	4801      	ldr	r0, [pc, #4]	; (80a36fc <mbedtls_rsa_pkcs1_verify+0x40>)
 80a36f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a36fa:	bf00      	nop
 80a36fc:	ffffbf00 	.word	0xffffbf00

080a3700 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
 80a3700:	b510      	push	{r4, lr}
    if( ctx == NULL )
 80a3702:	4604      	mov	r4, r0
 80a3704:	b3a0      	cbz	r0, 80a3770 <mbedtls_rsa_free+0x70>
        return;

    mbedtls_mpi_free( &ctx->Vi );
 80a3706:	308c      	adds	r0, #140	; 0x8c
 80a3708:	f008 fced 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
 80a370c:	f104 0098 	add.w	r0, r4, #152	; 0x98
 80a3710:	f008 fce9 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
 80a3714:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80a3718:	f008 fce5 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
 80a371c:	f104 0020 	add.w	r0, r4, #32
 80a3720:	f008 fce1 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
 80a3724:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a3728:	f008 fcdd 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
 80a372c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a3730:	f008 fcd9 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
 80a3734:	f104 0014 	add.w	r0, r4, #20
 80a3738:	f008 fcd5 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
 80a373c:	f104 0008 	add.w	r0, r4, #8
 80a3740:	f008 fcd1 	bl	80ac0e6 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
 80a3744:	f104 0080 	add.w	r0, r4, #128	; 0x80
 80a3748:	f008 fccd 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
 80a374c:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80a3750:	f008 fcc9 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
 80a3754:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80a3758:	f008 fcc5 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
 80a375c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80a3760:	f008 fcc1 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
 80a3764:	f104 0044 	add.w	r0, r4, #68	; 0x44
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
 80a3768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
    mbedtls_mpi_free( &ctx->RP );
    mbedtls_mpi_free( &ctx->QP );
    mbedtls_mpi_free( &ctx->DQ );
    mbedtls_mpi_free( &ctx->DP );
 80a376c:	f008 bcbb 	b.w	80ac0e6 <mbedtls_mpi_free>
 80a3770:	bd10      	pop	{r4, pc}

080a3772 <_ZL12ecp_get_typePK17mbedtls_ecp_group>:
/*
 * Get the type of a curve
 */
static inline ecp_curve_type ecp_get_type( const mbedtls_ecp_group *grp )
{
    if( grp->G.X.p == NULL )
 80a3772:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80a3774:	b12b      	cbz	r3, 80a3782 <_ZL12ecp_get_typePK17mbedtls_ecp_group+0x10>
        return( ECP_TYPE_NONE );

    if( grp->G.Y.p == NULL )
 80a3776:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80a3778:	2b00      	cmp	r3, #0
        return( ECP_TYPE_MONTGOMERY );
    else
        return( ECP_TYPE_SHORT_WEIERSTRASS );
 80a377a:	bf0c      	ite	eq
 80a377c:	2002      	moveq	r0, #2
 80a377e:	2001      	movne	r0, #1
 80a3780:	4770      	bx	lr
 * Get the type of a curve
 */
static inline ecp_curve_type ecp_get_type( const mbedtls_ecp_group *grp )
{
    if( grp->G.X.p == NULL )
        return( ECP_TYPE_NONE );
 80a3782:	4618      	mov	r0, r3

    if( grp->G.Y.p == NULL )
        return( ECP_TYPE_MONTGOMERY );
    else
        return( ECP_TYPE_SHORT_WEIERSTRASS );
}
 80a3784:	4770      	bx	lr
	...

080a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>:
 * See the documentation of struct mbedtls_ecp_group.
 *
 * This function is in the critial loop for mbedtls_ecp_mul, so pay attention to perf.
 */
static int ecp_modp( mbedtls_mpi *N, const mbedtls_ecp_group *grp )
{
 80a3788:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( grp->modp == NULL )
 80a378a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 * See the documentation of struct mbedtls_ecp_group.
 *
 * This function is in the critial loop for mbedtls_ecp_mul, so pay attention to perf.
 */
static int ecp_modp( mbedtls_mpi *N, const mbedtls_ecp_group *grp )
{
 80a378c:	4604      	mov	r4, r0
 80a378e:	460d      	mov	r5, r1
    int ret;

    if( grp->modp == NULL )
 80a3790:	b92b      	cbnz	r3, 80a379e <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x16>
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
 80a3792:	1d0a      	adds	r2, r1, #4
        /* we known P, N and the result are positive */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );

cleanup:
    return( ret );
}
 80a3794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static int ecp_modp( mbedtls_mpi *N, const mbedtls_ecp_group *grp )
{
    int ret;

    if( grp->modp == NULL )
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
 80a3798:	4601      	mov	r1, r0
 80a379a:	f009 bb25 	b.w	80acde8 <mbedtls_mpi_mod_mpi>

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 80a379e:	6803      	ldr	r3, [r0, #0]
 80a37a0:	2b00      	cmp	r3, #0
 80a37a2:	db07      	blt.n	80a37b4 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x2c>
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
 80a37a4:	4620      	mov	r0, r4
 80a37a6:	f008 fdbf 	bl	80ac328 <mbedtls_mpi_bitlen>

    if( grp->modp == NULL )
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 80a37aa:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80a37ac:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 80a37b0:	d822      	bhi.n	80a37f8 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x70>
 80a37b2:	e004      	b.n	80a37be <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x36>
 80a37b4:	2100      	movs	r1, #0
 80a37b6:	f008 ffbc 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a37ba:	b9e8      	cbnz	r0, 80a37f8 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x70>
 80a37bc:	e7f2      	b.n	80a37a4 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x1c>
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }

    MBEDTLS_MPI_CHK( grp->modp( N ) );
 80a37be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80a37c0:	4620      	mov	r0, r4
 80a37c2:	4798      	blx	r3
 80a37c4:	bb08      	cbnz	r0, 80a380a <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x82>
 80a37c6:	3504      	adds	r5, #4

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
 80a37c8:	6823      	ldr	r3, [r4, #0]
 80a37ca:	2b00      	cmp	r3, #0
 80a37cc:	da04      	bge.n	80a37d8 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x50>
 80a37ce:	2100      	movs	r1, #0
 80a37d0:	4620      	mov	r0, r4
 80a37d2:	f008 ffae 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a37d6:	b988      	cbnz	r0, 80a37fc <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );

    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
 80a37d8:	4629      	mov	r1, r5
 80a37da:	4620      	mov	r0, r4
 80a37dc:	f008 ff64 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80a37e0:	2800      	cmp	r0, #0
 80a37e2:	db07      	blt.n	80a37f4 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x6c>
        /* we known P, N and the result are positive */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
 80a37e4:	462a      	mov	r2, r5
 80a37e6:	4621      	mov	r1, r4
 80a37e8:	4620      	mov	r0, r4
 80a37ea:	f009 f812 	bl	80ac812 <mbedtls_mpi_sub_abs>
 80a37ee:	2800      	cmp	r0, #0
 80a37f0:	d0f2      	beq.n	80a37d8 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x50>
 80a37f2:	bd38      	pop	{r3, r4, r5, pc}
 80a37f4:	2000      	movs	r0, #0
 80a37f6:	bd38      	pop	{r3, r4, r5, pc}

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80a37f8:	4804      	ldr	r0, [pc, #16]	; (80a380c <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x84>)
 80a37fa:	bd38      	pop	{r3, r4, r5, pc}

    MBEDTLS_MPI_CHK( grp->modp( N ) );

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );
 80a37fc:	462a      	mov	r2, r5
 80a37fe:	4621      	mov	r1, r4
 80a3800:	4620      	mov	r0, r4
 80a3802:	f009 f846 	bl	80ac892 <mbedtls_mpi_add_mpi>
 80a3806:	2800      	cmp	r0, #0
 80a3808:	d0de      	beq.n	80a37c8 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x40>
        /* we known P, N and the result are positive */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );

cleanup:
    return( ret );
}
 80a380a:	bd38      	pop	{r3, r4, r5, pc}
 80a380c:	ffffb080 	.word	0xffffb080

080a3810 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_>:
 *             4M + 4S          (A == -3)
 *             3M + 6S + 1a     otherwise
 */
static int ecp_double_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                           const mbedtls_ecp_point *P )
{
 80a3810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3814:	4606      	mov	r6, r0
 80a3816:	b08d      	sub	sp, #52	; 0x34
#if defined(MBEDTLS_ECP_DOUBLE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_double_jac( grp, R, P ) );
#endif /* MBEDTLS_ECP_DOUBLE_JAC_ALT */

    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
 80a3818:	4668      	mov	r0, sp
 80a381a:	ad03      	add	r5, sp, #12
 *             4M + 4S          (A == -3)
 *             3M + 6S + 1a     otherwise
 */
static int ecp_double_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                           const mbedtls_ecp_point *P )
{
 80a381c:	4689      	mov	r9, r1
 80a381e:	4690      	mov	r8, r2
#if defined(MBEDTLS_ECP_DOUBLE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_double_jac( grp, R, P ) );
#endif /* MBEDTLS_ECP_DOUBLE_JAC_ALT */

    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
 80a3820:	f008 fc5b 	bl	80ac0da <mbedtls_mpi_init>
 80a3824:	4628      	mov	r0, r5
 80a3826:	f008 fc58 	bl	80ac0da <mbedtls_mpi_init>
 80a382a:	a806      	add	r0, sp, #24
 80a382c:	f008 fc55 	bl	80ac0da <mbedtls_mpi_init>
 80a3830:	a809      	add	r0, sp, #36	; 0x24
 80a3832:	f008 fc52 	bl	80ac0da <mbedtls_mpi_init>

    /* Special case for A = -3 */
    if( grp->A.p == NULL )
 80a3836:	69b3      	ldr	r3, [r6, #24]
 80a3838:	2b00      	cmp	r3, #0
 80a383a:	d13f      	bne.n	80a38bc <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0xac>
    {
        /* M = 3(X + Z^2)(X - Z^2) */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 80a383c:	f108 0218 	add.w	r2, r8, #24
 80a3840:	4611      	mov	r1, r2
 80a3842:	4628      	mov	r0, r5
 80a3844:	f009 f894 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a3848:	4604      	mov	r4, r0
 80a384a:	2800      	cmp	r0, #0
 80a384c:	f040 8205 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
 80a3850:	4631      	mov	r1, r6
 80a3852:	4628      	mov	r0, r5
 80a3854:	f7ff ff98 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a3858:	4604      	mov	r4, r0
 80a385a:	2800      	cmp	r0, #0
 80a385c:	f040 81fd 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 80a3860:	462a      	mov	r2, r5
 80a3862:	4641      	mov	r1, r8
 80a3864:	a806      	add	r0, sp, #24
 80a3866:	f009 f814 	bl	80ac892 <mbedtls_mpi_add_mpi>
 80a386a:	4604      	mov	r4, r0
 80a386c:	2800      	cmp	r0, #0
 80a386e:	f040 81f4 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
 80a3872:	1d37      	adds	r7, r6, #4
 80a3874:	4639      	mov	r1, r7
 80a3876:	a806      	add	r0, sp, #24
 80a3878:	f008 ff16 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80a387c:	2800      	cmp	r0, #0
 80a387e:	db08      	blt.n	80a3892 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x82>
 80a3880:	a906      	add	r1, sp, #24
 80a3882:	463a      	mov	r2, r7
 80a3884:	4608      	mov	r0, r1
 80a3886:	f008 ffc4 	bl	80ac812 <mbedtls_mpi_sub_abs>
 80a388a:	4604      	mov	r4, r0
 80a388c:	2800      	cmp	r0, #0
 80a388e:	d0f1      	beq.n	80a3874 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x64>
 80a3890:	e1e3      	b.n	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
 80a3892:	462a      	mov	r2, r5
 80a3894:	4641      	mov	r1, r8
 80a3896:	a809      	add	r0, sp, #36	; 0x24
 80a3898:	f009 f81c 	bl	80ac8d4 <mbedtls_mpi_sub_mpi>
 80a389c:	4604      	mov	r4, r0
 80a389e:	2800      	cmp	r0, #0
 80a38a0:	f040 81db 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
 80a38a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a38a6:	2b00      	cmp	r3, #0
 80a38a8:	f280 8120 	bge.w	80a3aec <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x2dc>
 80a38ac:	2100      	movs	r1, #0
 80a38ae:	a809      	add	r0, sp, #36	; 0x24
 80a38b0:	f008 ff3f 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a38b4:	2800      	cmp	r0, #0
 80a38b6:	f040 8140 	bne.w	80a3b3a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x32a>
 80a38ba:	e117      	b.n	80a3aec <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x2dc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
    }
    else
    {
        /* M = 3.X^2 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
 80a38bc:	4642      	mov	r2, r8
 80a38be:	4641      	mov	r1, r8
 80a38c0:	4628      	mov	r0, r5
 80a38c2:	f009 f855 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a38c6:	4604      	mov	r4, r0
 80a38c8:	2800      	cmp	r0, #0
 80a38ca:	f040 81c6 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
 80a38ce:	4631      	mov	r1, r6
 80a38d0:	4628      	mov	r0, r5
 80a38d2:	f7ff ff59 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a38d6:	4604      	mov	r4, r0
 80a38d8:	2800      	cmp	r0, #0
 80a38da:	f040 81be 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 80a38de:	2203      	movs	r2, #3
 80a38e0:	4629      	mov	r1, r5
 80a38e2:	4668      	mov	r0, sp
 80a38e4:	f009 f8b3 	bl	80aca4e <mbedtls_mpi_mul_int>
 80a38e8:	4604      	mov	r4, r0
 80a38ea:	2800      	cmp	r0, #0
 80a38ec:	f040 81b5 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
 80a38f0:	1d37      	adds	r7, r6, #4
 80a38f2:	4639      	mov	r1, r7
 80a38f4:	4668      	mov	r0, sp
 80a38f6:	f008 fed7 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80a38fa:	2800      	cmp	r0, #0
 80a38fc:	db08      	blt.n	80a3910 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x100>
 80a38fe:	463a      	mov	r2, r7
 80a3900:	4669      	mov	r1, sp
 80a3902:	4668      	mov	r0, sp
 80a3904:	f008 ff85 	bl	80ac812 <mbedtls_mpi_sub_abs>
 80a3908:	4604      	mov	r4, r0
 80a390a:	2800      	cmp	r0, #0
 80a390c:	d0f1      	beq.n	80a38f2 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0xe2>
 80a390e:	e1a4      	b.n	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>

        /* Optimize away for "koblitz" curves with A = 0 */
        if( mbedtls_mpi_cmp_int( &grp->A, 0 ) != 0 )
 80a3910:	f106 0a10 	add.w	sl, r6, #16
 80a3914:	2100      	movs	r1, #0
 80a3916:	4650      	mov	r0, sl
 80a3918:	f008 ff0b 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a391c:	2800      	cmp	r0, #0
 80a391e:	d048      	beq.n	80a39b2 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x1a2>
        {
            /* M += A.Z^4 */
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 80a3920:	f108 0218 	add.w	r2, r8, #24
 80a3924:	4611      	mov	r1, r2
 80a3926:	4628      	mov	r0, r5
 80a3928:	f009 f822 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a392c:	4604      	mov	r4, r0
 80a392e:	2800      	cmp	r0, #0
 80a3930:	f040 8193 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
 80a3934:	4631      	mov	r1, r6
 80a3936:	4628      	mov	r0, r5
 80a3938:	f7ff ff26 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a393c:	4604      	mov	r4, r0
 80a393e:	2800      	cmp	r0, #0
 80a3940:	f040 818b 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 80a3944:	462a      	mov	r2, r5
 80a3946:	4629      	mov	r1, r5
 80a3948:	a806      	add	r0, sp, #24
 80a394a:	f009 f811 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a394e:	4604      	mov	r4, r0
 80a3950:	2800      	cmp	r0, #0
 80a3952:	f040 8182 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
 80a3956:	4631      	mov	r1, r6
 80a3958:	a806      	add	r0, sp, #24
 80a395a:	f7ff ff15 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a395e:	4604      	mov	r4, r0
 80a3960:	2800      	cmp	r0, #0
 80a3962:	f040 817a 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 80a3966:	4652      	mov	r2, sl
 80a3968:	a906      	add	r1, sp, #24
 80a396a:	4628      	mov	r0, r5
 80a396c:	f009 f800 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a3970:	4604      	mov	r4, r0
 80a3972:	2800      	cmp	r0, #0
 80a3974:	f040 8171 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
 80a3978:	4631      	mov	r1, r6
 80a397a:	4628      	mov	r0, r5
 80a397c:	f7ff ff04 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a3980:	4604      	mov	r4, r0
 80a3982:	2800      	cmp	r0, #0
 80a3984:	f040 8169 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
 80a3988:	462a      	mov	r2, r5
 80a398a:	4669      	mov	r1, sp
 80a398c:	4668      	mov	r0, sp
 80a398e:	f008 ff80 	bl	80ac892 <mbedtls_mpi_add_mpi>
 80a3992:	4604      	mov	r4, r0
 80a3994:	2800      	cmp	r0, #0
 80a3996:	f040 8160 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
 80a399a:	4639      	mov	r1, r7
 80a399c:	4668      	mov	r0, sp
 80a399e:	f008 fe83 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80a39a2:	2800      	cmp	r0, #0
 80a39a4:	db05      	blt.n	80a39b2 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x1a2>
 80a39a6:	463a      	mov	r2, r7
 80a39a8:	4669      	mov	r1, sp
 80a39aa:	4668      	mov	r0, sp
 80a39ac:	f008 ff31 	bl	80ac812 <mbedtls_mpi_sub_abs>
 80a39b0:	e7ef      	b.n	80a3992 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x182>
        }
    }

    /* S = 4.X.Y^2 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
 80a39b2:	f108 0b0c 	add.w	fp, r8, #12
 80a39b6:	465a      	mov	r2, fp
 80a39b8:	4659      	mov	r1, fp
 80a39ba:	a806      	add	r0, sp, #24
 80a39bc:	f008 ffd8 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a39c0:	4604      	mov	r4, r0
 80a39c2:	2800      	cmp	r0, #0
 80a39c4:	f040 8149 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
 80a39c8:	4631      	mov	r1, r6
 80a39ca:	a806      	add	r0, sp, #24
 80a39cc:	f7ff fedc 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a39d0:	4604      	mov	r4, r0
 80a39d2:	2800      	cmp	r0, #0
 80a39d4:	f040 8141 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 80a39d8:	2101      	movs	r1, #1
 80a39da:	a806      	add	r0, sp, #24
 80a39dc:	f008 fd36 	bl	80ac44c <mbedtls_mpi_shift_l>
 80a39e0:	4604      	mov	r4, r0
 80a39e2:	2800      	cmp	r0, #0
 80a39e4:	f040 8139 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
 80a39e8:	1d37      	adds	r7, r6, #4
 80a39ea:	4639      	mov	r1, r7
 80a39ec:	a806      	add	r0, sp, #24
 80a39ee:	f008 fe5b 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80a39f2:	2800      	cmp	r0, #0
 80a39f4:	db08      	blt.n	80a3a08 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x1f8>
 80a39f6:	a906      	add	r1, sp, #24
 80a39f8:	463a      	mov	r2, r7
 80a39fa:	4608      	mov	r0, r1
 80a39fc:	f008 ff09 	bl	80ac812 <mbedtls_mpi_sub_abs>
 80a3a00:	4604      	mov	r4, r0
 80a3a02:	2800      	cmp	r0, #0
 80a3a04:	d0f1      	beq.n	80a39ea <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x1da>
 80a3a06:	e128      	b.n	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
 80a3a08:	aa06      	add	r2, sp, #24
 80a3a0a:	4641      	mov	r1, r8
 80a3a0c:	4628      	mov	r0, r5
 80a3a0e:	f008 ffaf 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a3a12:	4604      	mov	r4, r0
 80a3a14:	2800      	cmp	r0, #0
 80a3a16:	f040 8120 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
 80a3a1a:	4631      	mov	r1, r6
 80a3a1c:	4628      	mov	r0, r5
 80a3a1e:	f7ff feb3 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a3a22:	4604      	mov	r4, r0
 80a3a24:	2800      	cmp	r0, #0
 80a3a26:	f040 8118 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 80a3a2a:	2101      	movs	r1, #1
 80a3a2c:	4628      	mov	r0, r5
 80a3a2e:	f008 fd0d 	bl	80ac44c <mbedtls_mpi_shift_l>
 80a3a32:	4604      	mov	r4, r0
 80a3a34:	2800      	cmp	r0, #0
 80a3a36:	f040 8110 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
 80a3a3a:	4639      	mov	r1, r7
 80a3a3c:	4628      	mov	r0, r5
 80a3a3e:	f008 fe33 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80a3a42:	2800      	cmp	r0, #0
 80a3a44:	db05      	blt.n	80a3a52 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x242>
 80a3a46:	463a      	mov	r2, r7
 80a3a48:	4629      	mov	r1, r5
 80a3a4a:	4628      	mov	r0, r5
 80a3a4c:	f008 fee1 	bl	80ac812 <mbedtls_mpi_sub_abs>
 80a3a50:	e7ef      	b.n	80a3a32 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x222>

    /* U = 8.Y^4 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
 80a3a52:	aa06      	add	r2, sp, #24
 80a3a54:	4611      	mov	r1, r2
 80a3a56:	a809      	add	r0, sp, #36	; 0x24
 80a3a58:	f008 ff8a 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a3a5c:	4604      	mov	r4, r0
 80a3a5e:	2800      	cmp	r0, #0
 80a3a60:	f040 80fb 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
 80a3a64:	4631      	mov	r1, r6
 80a3a66:	a809      	add	r0, sp, #36	; 0x24
 80a3a68:	f7ff fe8e 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a3a6c:	4604      	mov	r4, r0
 80a3a6e:	2800      	cmp	r0, #0
 80a3a70:	f040 80f3 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 80a3a74:	2101      	movs	r1, #1
 80a3a76:	a809      	add	r0, sp, #36	; 0x24
 80a3a78:	f008 fce8 	bl	80ac44c <mbedtls_mpi_shift_l>
 80a3a7c:	4604      	mov	r4, r0
 80a3a7e:	2800      	cmp	r0, #0
 80a3a80:	f040 80eb 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
 80a3a84:	4639      	mov	r1, r7
 80a3a86:	a809      	add	r0, sp, #36	; 0x24
 80a3a88:	f008 fe0e 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80a3a8c:	2800      	cmp	r0, #0
 80a3a8e:	db05      	blt.n	80a3a9c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x28c>
 80a3a90:	a909      	add	r1, sp, #36	; 0x24
 80a3a92:	463a      	mov	r2, r7
 80a3a94:	4608      	mov	r0, r1
 80a3a96:	f008 febc 	bl	80ac812 <mbedtls_mpi_sub_abs>
 80a3a9a:	e7ef      	b.n	80a3a7c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x26c>

    /* T = M^2 - 2.S */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
 80a3a9c:	466a      	mov	r2, sp
 80a3a9e:	4669      	mov	r1, sp
 80a3aa0:	a806      	add	r0, sp, #24
 80a3aa2:	f008 ff65 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a3aa6:	4604      	mov	r4, r0
 80a3aa8:	2800      	cmp	r0, #0
 80a3aaa:	f040 80d6 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
 80a3aae:	4631      	mov	r1, r6
 80a3ab0:	a806      	add	r0, sp, #24
 80a3ab2:	f7ff fe69 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a3ab6:	4604      	mov	r4, r0
 80a3ab8:	2800      	cmp	r0, #0
 80a3aba:	f040 80ce 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 80a3abe:	a906      	add	r1, sp, #24
 80a3ac0:	462a      	mov	r2, r5
 80a3ac2:	4608      	mov	r0, r1
 80a3ac4:	f008 ff06 	bl	80ac8d4 <mbedtls_mpi_sub_mpi>
 80a3ac8:	4604      	mov	r4, r0
 80a3aca:	2800      	cmp	r0, #0
 80a3acc:	f040 80c5 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
 80a3ad0:	9b06      	ldr	r3, [sp, #24]
 80a3ad2:	2b00      	cmp	r3, #0
 80a3ad4:	da37      	bge.n	80a3b46 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x336>
 80a3ad6:	2100      	movs	r1, #0
 80a3ad8:	a806      	add	r0, sp, #24
 80a3ada:	f008 fe2a 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a3ade:	b390      	cbz	r0, 80a3b46 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x336>
 80a3ae0:	a906      	add	r1, sp, #24
 80a3ae2:	463a      	mov	r2, r7
 80a3ae4:	4608      	mov	r0, r1
 80a3ae6:	f008 fed4 	bl	80ac892 <mbedtls_mpi_add_mpi>
 80a3aea:	e7ed      	b.n	80a3ac8 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x2b8>
    {
        /* M = 3(X + Z^2)(X - Z^2) */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
 80a3aec:	aa09      	add	r2, sp, #36	; 0x24
 80a3aee:	a906      	add	r1, sp, #24
 80a3af0:	4628      	mov	r0, r5
 80a3af2:	f008 ff3d 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a3af6:	4604      	mov	r4, r0
 80a3af8:	2800      	cmp	r0, #0
 80a3afa:	f040 80ae 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
 80a3afe:	4631      	mov	r1, r6
 80a3b00:	4628      	mov	r0, r5
 80a3b02:	f7ff fe41 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a3b06:	4604      	mov	r4, r0
 80a3b08:	2800      	cmp	r0, #0
 80a3b0a:	f040 80a6 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 80a3b0e:	2203      	movs	r2, #3
 80a3b10:	4629      	mov	r1, r5
 80a3b12:	4668      	mov	r0, sp
 80a3b14:	f008 ff9b 	bl	80aca4e <mbedtls_mpi_mul_int>
 80a3b18:	4604      	mov	r4, r0
 80a3b1a:	2800      	cmp	r0, #0
 80a3b1c:	f040 809d 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
 80a3b20:	4639      	mov	r1, r7
 80a3b22:	4668      	mov	r0, sp
 80a3b24:	f008 fdc0 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80a3b28:	2800      	cmp	r0, #0
 80a3b2a:	f6ff af42 	blt.w	80a39b2 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x1a2>
 80a3b2e:	463a      	mov	r2, r7
 80a3b30:	4669      	mov	r1, sp
 80a3b32:	4668      	mov	r0, sp
 80a3b34:	f008 fe6d 	bl	80ac812 <mbedtls_mpi_sub_abs>
 80a3b38:	e7ee      	b.n	80a3b18 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x308>
    if( grp->A.p == NULL )
    {
        /* M = 3(X + Z^2)(X - Z^2) */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
 80a3b3a:	a909      	add	r1, sp, #36	; 0x24
 80a3b3c:	463a      	mov	r2, r7
 80a3b3e:	4608      	mov	r0, r1
 80a3b40:	f008 fea7 	bl	80ac892 <mbedtls_mpi_add_mpi>
 80a3b44:	e6aa      	b.n	80a389c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x8c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );

    /* T = M^2 - 2.S */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 80a3b46:	a906      	add	r1, sp, #24
 80a3b48:	462a      	mov	r2, r5
 80a3b4a:	4608      	mov	r0, r1
 80a3b4c:	f008 fec2 	bl	80ac8d4 <mbedtls_mpi_sub_mpi>
 80a3b50:	4604      	mov	r4, r0
 80a3b52:	2800      	cmp	r0, #0
 80a3b54:	f040 8081 	bne.w	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
 80a3b58:	9b06      	ldr	r3, [sp, #24]
 80a3b5a:	2b00      	cmp	r3, #0
 80a3b5c:	da04      	bge.n	80a3b68 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x358>
 80a3b5e:	2100      	movs	r1, #0
 80a3b60:	a806      	add	r0, sp, #24
 80a3b62:	f008 fde6 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a3b66:	b928      	cbnz	r0, 80a3b74 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x364>

    /* S = M(S - T) - U */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
 80a3b68:	aa06      	add	r2, sp, #24
 80a3b6a:	4629      	mov	r1, r5
 80a3b6c:	4628      	mov	r0, r5
 80a3b6e:	f008 feb1 	bl	80ac8d4 <mbedtls_mpi_sub_mpi>
 80a3b72:	e012      	b.n	80a3b9a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x38a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );

    /* T = M^2 - 2.S */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 80a3b74:	a906      	add	r1, sp, #24
 80a3b76:	463a      	mov	r2, r7
 80a3b78:	4608      	mov	r0, r1
 80a3b7a:	f008 fe8a 	bl	80ac892 <mbedtls_mpi_add_mpi>
 80a3b7e:	e7e7      	b.n	80a3b50 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x340>

    /* S = M(S - T) - U */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
 80a3b80:	9b03      	ldr	r3, [sp, #12]
 80a3b82:	2b00      	cmp	r3, #0
 80a3b84:	da0d      	bge.n	80a3ba2 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x392>
 80a3b86:	2100      	movs	r1, #0
 80a3b88:	4628      	mov	r0, r5
 80a3b8a:	f008 fdd2 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a3b8e:	b140      	cbz	r0, 80a3ba2 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x392>
 80a3b90:	463a      	mov	r2, r7
 80a3b92:	4629      	mov	r1, r5
 80a3b94:	4628      	mov	r0, r5
 80a3b96:	f008 fe7c 	bl	80ac892 <mbedtls_mpi_add_mpi>
 80a3b9a:	4604      	mov	r4, r0
 80a3b9c:	2800      	cmp	r0, #0
 80a3b9e:	d0ef      	beq.n	80a3b80 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x370>
 80a3ba0:	e05b      	b.n	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
 80a3ba2:	466a      	mov	r2, sp
 80a3ba4:	4629      	mov	r1, r5
 80a3ba6:	4628      	mov	r0, r5
 80a3ba8:	f008 fee2 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a3bac:	4604      	mov	r4, r0
 80a3bae:	2800      	cmp	r0, #0
 80a3bb0:	d153      	bne.n	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
 80a3bb2:	4631      	mov	r1, r6
 80a3bb4:	4628      	mov	r0, r5
 80a3bb6:	f7ff fde7 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a3bba:	4604      	mov	r4, r0
 80a3bbc:	2800      	cmp	r0, #0
 80a3bbe:	d14c      	bne.n	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 80a3bc0:	aa09      	add	r2, sp, #36	; 0x24
 80a3bc2:	4629      	mov	r1, r5
 80a3bc4:	4628      	mov	r0, r5
 80a3bc6:	f008 fe85 	bl	80ac8d4 <mbedtls_mpi_sub_mpi>
 80a3bca:	4604      	mov	r4, r0
 80a3bcc:	2800      	cmp	r0, #0
 80a3bce:	d144      	bne.n	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
 80a3bd0:	46aa      	mov	sl, r5
 80a3bd2:	9b03      	ldr	r3, [sp, #12]
 80a3bd4:	2b00      	cmp	r3, #0
 80a3bd6:	da04      	bge.n	80a3be2 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x3d2>
 80a3bd8:	2100      	movs	r1, #0
 80a3bda:	4650      	mov	r0, sl
 80a3bdc:	f008 fda9 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a3be0:	bb98      	cbnz	r0, 80a3c4a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x43a>

    /* U = 2.Y.Z */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
 80a3be2:	f108 0218 	add.w	r2, r8, #24
 80a3be6:	4659      	mov	r1, fp
 80a3be8:	a809      	add	r0, sp, #36	; 0x24
 80a3bea:	f008 fec1 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a3bee:	4604      	mov	r4, r0
 80a3bf0:	bb98      	cbnz	r0, 80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
 80a3bf2:	4631      	mov	r1, r6
 80a3bf4:	a809      	add	r0, sp, #36	; 0x24
 80a3bf6:	f7ff fdc7 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a3bfa:	4604      	mov	r4, r0
 80a3bfc:	bb68      	cbnz	r0, 80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 80a3bfe:	2101      	movs	r1, #1
 80a3c00:	a809      	add	r0, sp, #36	; 0x24
 80a3c02:	f008 fc23 	bl	80ac44c <mbedtls_mpi_shift_l>
 80a3c06:	4604      	mov	r4, r0
 80a3c08:	bb38      	cbnz	r0, 80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
 80a3c0a:	4639      	mov	r1, r7
 80a3c0c:	a809      	add	r0, sp, #36	; 0x24
 80a3c0e:	f008 fd4b 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80a3c12:	2800      	cmp	r0, #0
 80a3c14:	db05      	blt.n	80a3c22 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x412>
 80a3c16:	a909      	add	r1, sp, #36	; 0x24
 80a3c18:	463a      	mov	r2, r7
 80a3c1a:	4608      	mov	r0, r1
 80a3c1c:	f008 fdf9 	bl	80ac812 <mbedtls_mpi_sub_abs>
 80a3c20:	e7f1      	b.n	80a3c06 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x3f6>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
 80a3c22:	a906      	add	r1, sp, #24
 80a3c24:	4648      	mov	r0, r9
 80a3c26:	f008 fad8 	bl	80ac1da <mbedtls_mpi_copy>
 80a3c2a:	4604      	mov	r4, r0
 80a3c2c:	b9a8      	cbnz	r0, 80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
 80a3c2e:	a903      	add	r1, sp, #12
 80a3c30:	f109 000c 	add.w	r0, r9, #12
 80a3c34:	f008 fad1 	bl	80ac1da <mbedtls_mpi_copy>
 80a3c38:	4604      	mov	r4, r0
 80a3c3a:	b970      	cbnz	r0, 80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );
 80a3c3c:	a909      	add	r1, sp, #36	; 0x24
 80a3c3e:	f109 0018 	add.w	r0, r9, #24
 80a3c42:	f008 faca 	bl	80ac1da <mbedtls_mpi_copy>
 80a3c46:	4604      	mov	r4, r0
 80a3c48:	e007      	b.n	80a3c5a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );

    /* S = M(S - T) - U */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 80a3c4a:	463a      	mov	r2, r7
 80a3c4c:	4651      	mov	r1, sl
 80a3c4e:	4650      	mov	r0, sl
 80a3c50:	f008 fe1f 	bl	80ac892 <mbedtls_mpi_add_mpi>
 80a3c54:	4604      	mov	r4, r0
 80a3c56:	2800      	cmp	r0, #0
 80a3c58:	d0bb      	beq.n	80a3bd2 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x3c2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );

cleanup:
    mbedtls_mpi_free( &M ); mbedtls_mpi_free( &S ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &U );
 80a3c5a:	4668      	mov	r0, sp
 80a3c5c:	f008 fa43 	bl	80ac0e6 <mbedtls_mpi_free>
 80a3c60:	4628      	mov	r0, r5
 80a3c62:	f008 fa40 	bl	80ac0e6 <mbedtls_mpi_free>
 80a3c66:	a806      	add	r0, sp, #24
 80a3c68:	f008 fa3d 	bl	80ac0e6 <mbedtls_mpi_free>
 80a3c6c:	a809      	add	r0, sp, #36	; 0x24
 80a3c6e:	f008 fa3a 	bl	80ac0e6 <mbedtls_mpi_free>

    return( ret );
}
 80a3c72:	4620      	mov	r0, r4
 80a3c74:	b00d      	add	sp, #52	; 0x34
 80a3c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a3c7a <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point>:
/*
 * Normalize jacobian coordinates so that Z == 0 || Z == 1  (GECC 3.2.1)
 * Cost: 1N := 1I + 3M + 1S
 */
static int ecp_normalize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt )
{
 80a3c7a:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    mbedtls_mpi Zi, ZZi;

    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
 80a3c7c:	f101 0718 	add.w	r7, r1, #24
/*
 * Normalize jacobian coordinates so that Z == 0 || Z == 1  (GECC 3.2.1)
 * Cost: 1N := 1I + 3M + 1S
 */
static int ecp_normalize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt )
{
 80a3c80:	b087      	sub	sp, #28
 80a3c82:	4606      	mov	r6, r0
 80a3c84:	460d      	mov	r5, r1
    int ret;
    mbedtls_mpi Zi, ZZi;

    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
 80a3c86:	4638      	mov	r0, r7
 80a3c88:	2100      	movs	r1, #0
 80a3c8a:	f008 fd52 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a3c8e:	2800      	cmp	r0, #0
 80a3c90:	d04d      	beq.n	80a3d2e <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xb4>
#if defined(MBEDTLS_ECP_NORMALIZE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_jac( grp, pt ) );
#endif /* MBEDTLS_ECP_NORMALIZE_JAC_ALT */

    mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 80a3c92:	4668      	mov	r0, sp
 80a3c94:	f008 fa21 	bl	80ac0da <mbedtls_mpi_init>
 80a3c98:	a803      	add	r0, sp, #12
 80a3c9a:	f008 fa1e 	bl	80ac0da <mbedtls_mpi_init>

    /*
     * X = X / Z^2  mod p
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );
 80a3c9e:	1d32      	adds	r2, r6, #4
 80a3ca0:	4639      	mov	r1, r7
 80a3ca2:	4668      	mov	r0, sp
 80a3ca4:	f009 fbaa 	bl	80ad3fc <mbedtls_mpi_inv_mod>
 80a3ca8:	4604      	mov	r4, r0
 80a3caa:	bbc8      	cbnz	r0, 80a3d20 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
 80a3cac:	466a      	mov	r2, sp
 80a3cae:	4669      	mov	r1, sp
 80a3cb0:	a803      	add	r0, sp, #12
 80a3cb2:	f008 fe5d 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a3cb6:	4604      	mov	r4, r0
 80a3cb8:	bb90      	cbnz	r0, 80a3d20 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>
 80a3cba:	4631      	mov	r1, r6
 80a3cbc:	a803      	add	r0, sp, #12
 80a3cbe:	f7ff fd63 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a3cc2:	4604      	mov	r4, r0
 80a3cc4:	bb60      	cbnz	r0, 80a3d20 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 80a3cc6:	aa03      	add	r2, sp, #12
 80a3cc8:	4629      	mov	r1, r5
 80a3cca:	4628      	mov	r0, r5
 80a3ccc:	f008 fe50 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a3cd0:	4604      	mov	r4, r0
 80a3cd2:	bb28      	cbnz	r0, 80a3d20 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>
 80a3cd4:	4631      	mov	r1, r6
 80a3cd6:	4628      	mov	r0, r5
 80a3cd8:	f7ff fd56 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a3cdc:	4604      	mov	r4, r0
 80a3cde:	b9f8      	cbnz	r0, 80a3d20 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>

    /*
     * Y = Y / Z^3  mod p
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 80a3ce0:	350c      	adds	r5, #12
 80a3ce2:	aa03      	add	r2, sp, #12
 80a3ce4:	4629      	mov	r1, r5
 80a3ce6:	4628      	mov	r0, r5
 80a3ce8:	f008 fe42 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a3cec:	4604      	mov	r4, r0
 80a3cee:	b9b8      	cbnz	r0, 80a3d20 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>
 80a3cf0:	4631      	mov	r1, r6
 80a3cf2:	4628      	mov	r0, r5
 80a3cf4:	f7ff fd48 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a3cf8:	4604      	mov	r4, r0
 80a3cfa:	b988      	cbnz	r0, 80a3d20 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 80a3cfc:	466a      	mov	r2, sp
 80a3cfe:	4629      	mov	r1, r5
 80a3d00:	4628      	mov	r0, r5
 80a3d02:	f008 fe35 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a3d06:	4604      	mov	r4, r0
 80a3d08:	b950      	cbnz	r0, 80a3d20 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>
 80a3d0a:	4631      	mov	r1, r6
 80a3d0c:	4628      	mov	r0, r5
 80a3d0e:	f7ff fd3b 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a3d12:	4604      	mov	r4, r0
 80a3d14:	b920      	cbnz	r0, 80a3d20 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa6>

    /*
     * Z = 1
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 80a3d16:	2101      	movs	r1, #1
 80a3d18:	4638      	mov	r0, r7
 80a3d1a:	f008 fabf 	bl	80ac29c <mbedtls_mpi_lset>
 80a3d1e:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 80a3d20:	4668      	mov	r0, sp
 80a3d22:	f008 f9e0 	bl	80ac0e6 <mbedtls_mpi_free>
 80a3d26:	a803      	add	r0, sp, #12
 80a3d28:	f008 f9dd 	bl	80ac0e6 <mbedtls_mpi_free>

    return( ret );
 80a3d2c:	4620      	mov	r0, r4
}
 80a3d2e:	b007      	add	sp, #28
 80a3d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a3d34 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj>:
 *
 * Cost: 1N(t) := 1I + (6t - 3)M + 1S
 */
static int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,
                                   mbedtls_ecp_point *T[], size_t T_size )
{
 80a3d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret;
    size_t i;
    mbedtls_mpi *c, u, Zi, ZZi;

    if( T_size < 2 )
 80a3d38:	2a01      	cmp	r2, #1
 *
 * Cost: 1N(t) := 1I + (6t - 3)M + 1S
 */
static int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,
                                   mbedtls_ecp_point *T[], size_t T_size )
{
 80a3d3a:	b08a      	sub	sp, #40	; 0x28
 80a3d3c:	4607      	mov	r7, r0
 80a3d3e:	460d      	mov	r5, r1
 80a3d40:	4691      	mov	r9, r2
    int ret;
    size_t i;
    mbedtls_mpi *c, u, Zi, ZZi;

    if( T_size < 2 )
 80a3d42:	d803      	bhi.n	80a3d4c <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x18>
        return( ecp_normalize_jac( grp, *T ) );
 80a3d44:	6809      	ldr	r1, [r1, #0]
 80a3d46:	f7ff ff98 	bl	80a3c7a <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point>
 80a3d4a:	e0f1      	b.n	80a3f30 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1fc>
#if defined(MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_jac_many( grp, T, T_size ) );
#endif

    if( ( c = (mbedtls_mpi *)mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
 80a3d4c:	210c      	movs	r1, #12
 80a3d4e:	4610      	mov	r0, r2
 80a3d50:	f00e fc34 	bl	80b25bc <calloc>
 80a3d54:	4680      	mov	r8, r0
 80a3d56:	2800      	cmp	r0, #0
 80a3d58:	f000 80e9 	beq.w	80a3f2e <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1fa>
 80a3d5c:	2400      	movs	r4, #0
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );

    for( i = 0; i < T_size; i++ )
        mbedtls_mpi_init( &c[i] );
 80a3d5e:	260c      	movs	r6, #12
 80a3d60:	fb06 8004 	mla	r0, r6, r4, r8
#endif

    if( ( c = (mbedtls_mpi *)mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );

    for( i = 0; i < T_size; i++ )
 80a3d64:	3401      	adds	r4, #1
        mbedtls_mpi_init( &c[i] );
 80a3d66:	f008 f9b8 	bl	80ac0da <mbedtls_mpi_init>
#endif

    if( ( c = (mbedtls_mpi *)mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );

    for( i = 0; i < T_size; i++ )
 80a3d6a:	45a1      	cmp	r9, r4
 80a3d6c:	d1f8      	bne.n	80a3d60 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x2c>
        mbedtls_mpi_init( &c[i] );

    mbedtls_mpi_init( &u ); mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 80a3d6e:	a801      	add	r0, sp, #4
 80a3d70:	f008 f9b3 	bl	80ac0da <mbedtls_mpi_init>
 80a3d74:	a804      	add	r0, sp, #16
 80a3d76:	f008 f9b0 	bl	80ac0da <mbedtls_mpi_init>
 80a3d7a:	a807      	add	r0, sp, #28
 80a3d7c:	f008 f9ad 	bl	80ac0da <mbedtls_mpi_init>

    /*
     * c[i] = Z_0 * ... * Z_i
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
 80a3d80:	6829      	ldr	r1, [r5, #0]
 80a3d82:	4640      	mov	r0, r8
 80a3d84:	3118      	adds	r1, #24
 80a3d86:	f008 fa28 	bl	80ac1da <mbedtls_mpi_copy>
 80a3d8a:	4604      	mov	r4, r0
 80a3d8c:	2800      	cmp	r0, #0
 80a3d8e:	f040 80b7 	bne.w	80a3f00 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
 80a3d92:	f108 060c 	add.w	r6, r8, #12
 80a3d96:	f04f 0a01 	mov.w	sl, #1
    for( i = 1; i < T_size; i++ )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &c[i], &c[i-1], &T[i]->Z ) );
 80a3d9a:	f855 202a 	ldr.w	r2, [r5, sl, lsl #2]
 80a3d9e:	f1a6 010c 	sub.w	r1, r6, #12
 80a3da2:	3218      	adds	r2, #24
 80a3da4:	4630      	mov	r0, r6
 80a3da6:	f008 fde3 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a3daa:	4604      	mov	r4, r0
 80a3dac:	2800      	cmp	r0, #0
 80a3dae:	f040 80a7 	bne.w	80a3f00 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        MOD_MUL( c[i] );
 80a3db2:	4639      	mov	r1, r7
 80a3db4:	4630      	mov	r0, r6
 80a3db6:	f7ff fce7 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a3dba:	4604      	mov	r4, r0
 80a3dbc:	2800      	cmp	r0, #0
 80a3dbe:	f040 809f 	bne.w	80a3f00 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>

    /*
     * c[i] = Z_0 * ... * Z_i
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
    for( i = 1; i < T_size; i++ )
 80a3dc2:	f10a 0a01 	add.w	sl, sl, #1
 80a3dc6:	45d1      	cmp	r9, sl
 80a3dc8:	f106 060c 	add.w	r6, r6, #12
 80a3dcc:	d1e5      	bne.n	80a3d9a <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x66>
    }

    /*
     * u = 1 / (Z_0 * ... * Z_n) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[T_size-1], &grp->P ) );
 80a3dce:	260c      	movs	r6, #12
 80a3dd0:	fb06 f609 	mul.w	r6, r6, r9
 80a3dd4:	f1a6 010c 	sub.w	r1, r6, #12
 80a3dd8:	1d3a      	adds	r2, r7, #4
 80a3dda:	4441      	add	r1, r8
 80a3ddc:	a801      	add	r0, sp, #4
 80a3dde:	f009 fb0d 	bl	80ad3fc <mbedtls_mpi_inv_mod>
 80a3de2:	4604      	mov	r4, r0
 80a3de4:	2800      	cmp	r0, #0
 80a3de6:	f040 808b 	bne.w	80a3f00 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
 80a3dea:	3e18      	subs	r6, #24

    for( i = T_size - 1; ; i-- )
 80a3dec:	f109 3aff 	add.w	sl, r9, #4294967295
 80a3df0:	eb05 0589 	add.w	r5, r5, r9, lsl #2
 80a3df4:	4446      	add	r6, r8
    {
        /*
         * Zi = 1 / Z_i mod p
         * u = 1 / (Z_0 * ... * Z_i) mod P
         */
        if( i == 0 ) {
 80a3df6:	f1ba 0f00 	cmp.w	sl, #0
 80a3dfa:	d10e      	bne.n	80a3e1a <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0xe6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );
 80a3dfc:	a901      	add	r1, sp, #4
 80a3dfe:	a804      	add	r0, sp, #16
 80a3e00:	f008 f9eb 	bl	80ac1da <mbedtls_mpi_copy>
 80a3e04:	4604      	mov	r4, r0
 80a3e06:	2800      	cmp	r0, #0
 80a3e08:	d17a      	bne.n	80a3f00 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        }

        /*
         * proceed as in normalize()
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 80a3e0a:	aa04      	add	r2, sp, #16
 80a3e0c:	4611      	mov	r1, r2
 80a3e0e:	a807      	add	r0, sp, #28
 80a3e10:	f008 fdae 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a3e14:	4604      	mov	r4, r0
 80a3e16:	b1f0      	cbz	r0, 80a3e56 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x122>
 80a3e18:	e072      	b.n	80a3f00 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        if( i == 0 ) {
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 80a3e1a:	4632      	mov	r2, r6
 80a3e1c:	a901      	add	r1, sp, #4
 80a3e1e:	a804      	add	r0, sp, #16
 80a3e20:	f008 fda6 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a3e24:	4604      	mov	r4, r0
 80a3e26:	2800      	cmp	r0, #0
 80a3e28:	d16a      	bne.n	80a3f00 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
 80a3e2a:	4639      	mov	r1, r7
 80a3e2c:	a804      	add	r0, sp, #16
 80a3e2e:	f7ff fcab 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a3e32:	4604      	mov	r4, r0
 80a3e34:	2800      	cmp	r0, #0
 80a3e36:	d163      	bne.n	80a3f00 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
 80a3e38:	f855 2c04 	ldr.w	r2, [r5, #-4]
 80a3e3c:	a901      	add	r1, sp, #4
 80a3e3e:	3218      	adds	r2, #24
 80a3e40:	4608      	mov	r0, r1
 80a3e42:	f008 fd95 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a3e46:	4604      	mov	r4, r0
 80a3e48:	2800      	cmp	r0, #0
 80a3e4a:	d159      	bne.n	80a3f00 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
 80a3e4c:	4639      	mov	r1, r7
 80a3e4e:	a801      	add	r0, sp, #4
 80a3e50:	f7ff fc9a 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a3e54:	e7d6      	b.n	80a3e04 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0xd0>
        }

        /*
         * proceed as in normalize()
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 80a3e56:	4639      	mov	r1, r7
 80a3e58:	a807      	add	r0, sp, #28
 80a3e5a:	f7ff fc95 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a3e5e:	4604      	mov	r4, r0
 80a3e60:	2800      	cmp	r0, #0
 80a3e62:	d14d      	bne.n	80a3f00 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 80a3e64:	f855 1c04 	ldr.w	r1, [r5, #-4]
 80a3e68:	aa07      	add	r2, sp, #28
 80a3e6a:	4608      	mov	r0, r1
 80a3e6c:	f008 fd80 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a3e70:	4604      	mov	r4, r0
 80a3e72:	2800      	cmp	r0, #0
 80a3e74:	d144      	bne.n	80a3f00 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
 80a3e76:	4639      	mov	r1, r7
 80a3e78:	f855 0c04 	ldr.w	r0, [r5, #-4]
 80a3e7c:	f7ff fc84 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a3e80:	4604      	mov	r4, r0
 80a3e82:	2800      	cmp	r0, #0
 80a3e84:	d13c      	bne.n	80a3f00 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 80a3e86:	f855 1c04 	ldr.w	r1, [r5, #-4]
 80a3e8a:	aa07      	add	r2, sp, #28
 80a3e8c:	310c      	adds	r1, #12
 80a3e8e:	4608      	mov	r0, r1
 80a3e90:	f008 fd6e 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a3e94:	4604      	mov	r4, r0
 80a3e96:	bb98      	cbnz	r0, 80a3f00 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
 80a3e98:	f855 0c04 	ldr.w	r0, [r5, #-4]
 80a3e9c:	4639      	mov	r1, r7
 80a3e9e:	300c      	adds	r0, #12
 80a3ea0:	f7ff fc72 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a3ea4:	4604      	mov	r4, r0
 80a3ea6:	bb58      	cbnz	r0, 80a3f00 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 80a3ea8:	f855 1c04 	ldr.w	r1, [r5, #-4]
 80a3eac:	aa04      	add	r2, sp, #16
 80a3eae:	310c      	adds	r1, #12
 80a3eb0:	4608      	mov	r0, r1
 80a3eb2:	f008 fd5d 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a3eb6:	4604      	mov	r4, r0
 80a3eb8:	bb10      	cbnz	r0, 80a3f00 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
 80a3eba:	f855 0c04 	ldr.w	r0, [r5, #-4]
 80a3ebe:	4639      	mov	r1, r7
 80a3ec0:	300c      	adds	r0, #12
 80a3ec2:	f7ff fc61 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a3ec6:	4604      	mov	r4, r0
 80a3ec8:	b9d0      	cbnz	r0, 80a3f00 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
         * Post-precessing: reclaim some memory by shrinking coordinates
         * - not storing Z (always 1)
         * - shrinking other coordinates, but still keeping the same number of
         *   limbs as P, as otherwise it will too likely be regrown too fast.
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
 80a3eca:	68b9      	ldr	r1, [r7, #8]
 80a3ecc:	f855 0c04 	ldr.w	r0, [r5, #-4]
 80a3ed0:	f008 f945 	bl	80ac15e <mbedtls_mpi_shrink>
 80a3ed4:	4604      	mov	r4, r0
 80a3ed6:	b998      	cbnz	r0, 80a3f00 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );
 80a3ed8:	f855 0c04 	ldr.w	r0, [r5, #-4]
 80a3edc:	68b9      	ldr	r1, [r7, #8]
 80a3ede:	300c      	adds	r0, #12
 80a3ee0:	f008 f93d 	bl	80ac15e <mbedtls_mpi_shrink>
 80a3ee4:	4604      	mov	r4, r0
 80a3ee6:	b958      	cbnz	r0, 80a3f00 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
        mbedtls_mpi_free( &T[i]->Z );
 80a3ee8:	f855 0d04 	ldr.w	r0, [r5, #-4]!
 80a3eec:	3e0c      	subs	r6, #12
 80a3eee:	3018      	adds	r0, #24
 80a3ef0:	f008 f8f9 	bl	80ac0e6 <mbedtls_mpi_free>

        if( i == 0 )
 80a3ef4:	f1ba 0f00 	cmp.w	sl, #0
 80a3ef8:	d002      	beq.n	80a3f00 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1cc>
    /*
     * u = 1 / (Z_0 * ... * Z_n) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[T_size-1], &grp->P ) );

    for( i = T_size - 1; ; i-- )
 80a3efa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80a3efe:	e77a      	b.n	80a3df6 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0xc2>
            break;
    }

cleanup:

    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 80a3f00:	a801      	add	r0, sp, #4
 80a3f02:	f008 f8f0 	bl	80ac0e6 <mbedtls_mpi_free>
 80a3f06:	a804      	add	r0, sp, #16
 80a3f08:	f008 f8ed 	bl	80ac0e6 <mbedtls_mpi_free>
 80a3f0c:	a807      	add	r0, sp, #28
 80a3f0e:	f008 f8ea 	bl	80ac0e6 <mbedtls_mpi_free>
    for( i = 0; i < T_size; i++ )
 80a3f12:	2500      	movs	r5, #0
        mbedtls_mpi_free( &c[i] );
 80a3f14:	260c      	movs	r6, #12
 80a3f16:	fb06 8005 	mla	r0, r6, r5, r8
    }

cleanup:

    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
    for( i = 0; i < T_size; i++ )
 80a3f1a:	3501      	adds	r5, #1
        mbedtls_mpi_free( &c[i] );
 80a3f1c:	f008 f8e3 	bl	80ac0e6 <mbedtls_mpi_free>
    }

cleanup:

    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
    for( i = 0; i < T_size; i++ )
 80a3f20:	45a9      	cmp	r9, r5
 80a3f22:	d1f8      	bne.n	80a3f16 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1e2>
        mbedtls_mpi_free( &c[i] );
    mbedtls_free( c );
 80a3f24:	4640      	mov	r0, r8
 80a3f26:	f00d f8df 	bl	80b10e8 <free>

    return( ret );
 80a3f2a:	4620      	mov	r0, r4
 80a3f2c:	e000      	b.n	80a3f30 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x1fc>
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_jac_many( grp, T, T_size ) );
#endif

    if( ( c = (mbedtls_mpi *)mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );
 80a3f2e:	4802      	ldr	r0, [pc, #8]	; (80a3f38 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj+0x204>)
    for( i = 0; i < T_size; i++ )
        mbedtls_mpi_free( &c[i] );
    mbedtls_free( c );

    return( ret );
}
 80a3f30:	b00a      	add	sp, #40	; 0x28
 80a3f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3f36:	bf00      	nop
 80a3f38:	ffffb280 	.word	0xffffb280

080a3f3c <_ZL19ecp_safe_invert_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointh>:
 * "inv" must be 0 (don't invert) or 1 (invert) or the result will be invalid
 */
static int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,
                            mbedtls_ecp_point *Q,
                            unsigned char inv )
{
 80a3f3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a3f3e:	460c      	mov	r4, r1
 80a3f40:	4605      	mov	r5, r0
    mbedtls_mpi mQY;

    mbedtls_mpi_init( &mQY );

    /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
 80a3f42:	340c      	adds	r4, #12
{
    int ret;
    unsigned char nonzero;
    mbedtls_mpi mQY;

    mbedtls_mpi_init( &mQY );
 80a3f44:	a801      	add	r0, sp, #4
 * "inv" must be 0 (don't invert) or 1 (invert) or the result will be invalid
 */
static int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,
                            mbedtls_ecp_point *Q,
                            unsigned char inv )
{
 80a3f46:	4616      	mov	r6, r2
    int ret;
    unsigned char nonzero;
    mbedtls_mpi mQY;

    mbedtls_mpi_init( &mQY );
 80a3f48:	f008 f8c7 	bl	80ac0da <mbedtls_mpi_init>

    /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
 80a3f4c:	1d29      	adds	r1, r5, #4
 80a3f4e:	4622      	mov	r2, r4
 80a3f50:	a801      	add	r0, sp, #4
 80a3f52:	f008 fcbf 	bl	80ac8d4 <mbedtls_mpi_sub_mpi>
 80a3f56:	4605      	mov	r5, r0
 80a3f58:	b968      	cbnz	r0, 80a3f76 <_ZL19ecp_safe_invert_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointh+0x3a>
    nonzero = mbedtls_mpi_cmp_int( &Q->Y, 0 ) != 0;
 80a3f5a:	4601      	mov	r1, r0
 80a3f5c:	4620      	mov	r0, r4
 80a3f5e:	f008 fbe8 	bl	80ac732 <mbedtls_mpi_cmp_int>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &Q->Y, &mQY, inv & nonzero ) );
 80a3f62:	a901      	add	r1, sp, #4
 80a3f64:	2800      	cmp	r0, #0
 80a3f66:	bf0c      	ite	eq
 80a3f68:	2200      	moveq	r2, #0
 80a3f6a:	f006 0201 	andne.w	r2, r6, #1
 80a3f6e:	4620      	mov	r0, r4
 80a3f70:	f008 f95f 	bl	80ac232 <mbedtls_mpi_safe_cond_assign>
 80a3f74:	4605      	mov	r5, r0

cleanup:
    mbedtls_mpi_free( &mQY );
 80a3f76:	a801      	add	r0, sp, #4
 80a3f78:	f008 f8b5 	bl	80ac0e6 <mbedtls_mpi_free>

    return( ret );
}
 80a3f7c:	4628      	mov	r0, r5
 80a3f7e:	b004      	add	sp, #16
 80a3f80:	bd70      	pop	{r4, r5, r6, pc}

080a3f82 <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh>:
 * See ecp_comb_recode_core() for background
 */
static int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                            const mbedtls_ecp_point T[], unsigned char T_size,
                            unsigned char i )
{
 80a3f82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3f86:	4680      	mov	r8, r0
 80a3f88:	460e      	mov	r6, r1
 80a3f8a:	469b      	mov	fp, r3
 80a3f8c:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80a3f90:	f102 040c 	add.w	r4, r2, #12
    int ret;
    unsigned char ii, j;

    /* Ignore the "sign" bit and scale down */
    ii =  ( i & 0x7Fu ) >> 1;
 80a3f94:	f3c7 0a45 	ubfx	sl, r7, #1, #6
 80a3f98:	2500      	movs	r5, #0

    /* Read the whole table to thwart cache-based timing attacks */
    for( j = 0; j < T_size; j++ )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
 80a3f9a:	f101 090c 	add.w	r9, r1, #12

    /* Ignore the "sign" bit and scale down */
    ii =  ( i & 0x7Fu ) >> 1;

    /* Read the whole table to thwart cache-based timing attacks */
    for( j = 0; j < T_size; j++ )
 80a3f9e:	455d      	cmp	r5, fp
 80a3fa0:	d017      	beq.n	80a3fd2 <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh+0x50>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
 80a3fa2:	b2eb      	uxtb	r3, r5
 80a3fa4:	ebca 0203 	rsb	r2, sl, r3
 80a3fa8:	4253      	negs	r3, r2
 80a3faa:	4153      	adcs	r3, r2
 80a3fac:	461a      	mov	r2, r3
 80a3fae:	f1a4 010c 	sub.w	r1, r4, #12
 80a3fb2:	4630      	mov	r0, r6
 80a3fb4:	9301      	str	r3, [sp, #4]
 80a3fb6:	f008 f93c 	bl	80ac232 <mbedtls_mpi_safe_cond_assign>
 80a3fba:	b990      	cbnz	r0, 80a3fe2 <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh+0x60>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
 80a3fbc:	9b01      	ldr	r3, [sp, #4]
 80a3fbe:	4621      	mov	r1, r4
 80a3fc0:	461a      	mov	r2, r3
 80a3fc2:	4648      	mov	r0, r9
 80a3fc4:	f008 f935 	bl	80ac232 <mbedtls_mpi_safe_cond_assign>
 80a3fc8:	3501      	adds	r5, #1
 80a3fca:	3424      	adds	r4, #36	; 0x24
 80a3fcc:	2800      	cmp	r0, #0
 80a3fce:	d0e6      	beq.n	80a3f9e <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh+0x1c>
 80a3fd0:	e007      	b.n	80a3fe2 <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh+0x60>
    }

    /* Safely invert result if i is "negative" */
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
 80a3fd2:	4631      	mov	r1, r6
 80a3fd4:	4640      	mov	r0, r8
 80a3fd6:	09fa      	lsrs	r2, r7, #7

cleanup:
    return( ret );
}
 80a3fd8:	b003      	add	sp, #12
 80a3fda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
    }

    /* Safely invert result if i is "negative" */
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
 80a3fde:	f7ff bfad 	b.w	80a3f3c <_ZL19ecp_safe_invert_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointh>

cleanup:
    return( ret );
}
 80a3fe2:	b003      	add	sp, #12
 80a3fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a3fe8 <mbedtls_ecp_grp_id_list>:
 */
const mbedtls_ecp_group_id *mbedtls_ecp_grp_id_list( void )
{
    static int init_done = 0;

    if( ! init_done )
 80a3fe8:	4b05      	ldr	r3, [pc, #20]	; (80a4000 <mbedtls_ecp_grp_id_list+0x18>)
 80a3fea:	6819      	ldr	r1, [r3, #0]
 80a3fec:	b929      	cbnz	r1, 80a3ffa <mbedtls_ecp_grp_id_list+0x12>

        for( curve_info = mbedtls_ecp_curve_list();
             curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
             curve_info++ )
        {
            ecp_supported_grp_id[i++] = curve_info->grp_id;
 80a3fee:	4a05      	ldr	r2, [pc, #20]	; (80a4004 <mbedtls_ecp_grp_id_list+0x1c>)
 80a3ff0:	2003      	movs	r0, #3
 80a3ff2:	7010      	strb	r0, [r2, #0]
        }
        ecp_supported_grp_id[i] = MBEDTLS_ECP_DP_NONE;
 80a3ff4:	7051      	strb	r1, [r2, #1]

        init_done = 1;
 80a3ff6:	2201      	movs	r2, #1
 80a3ff8:	601a      	str	r2, [r3, #0]
    }

    return( ecp_supported_grp_id );
}
 80a3ffa:	4802      	ldr	r0, [pc, #8]	; (80a4004 <mbedtls_ecp_grp_id_list+0x1c>)
 80a3ffc:	4770      	bx	lr
 80a3ffe:	bf00      	nop
 80a4000:	20001198 	.word	0x20001198
 80a4004:	2000119c 	.word	0x2000119c

080a4008 <mbedtls_ecp_curve_info_from_grp_id>:
 */
const mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_grp_id( mbedtls_ecp_group_id grp_id )
{
    const mbedtls_ecp_curve_info *curve_info;

    for( curve_info = mbedtls_ecp_curve_list();
 80a4008:	4b05      	ldr	r3, [pc, #20]	; (80a4020 <mbedtls_ecp_curve_info_from_grp_id+0x18>)
         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
 80a400a:	781a      	ldrb	r2, [r3, #0]
 80a400c:	b11a      	cbz	r2, 80a4016 <mbedtls_ecp_curve_info_from_grp_id+0xe>
         curve_info++ )
    {
        if( curve_info->grp_id == grp_id )
 80a400e:	4282      	cmp	r2, r0
 80a4010:	d003      	beq.n	80a401a <mbedtls_ecp_curve_info_from_grp_id+0x12>
 */
const mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_grp_id( mbedtls_ecp_group_id grp_id )
{
    const mbedtls_ecp_curve_info *curve_info;

    for( curve_info = mbedtls_ecp_curve_list();
 80a4012:	330c      	adds	r3, #12
 80a4014:	e7f9      	b.n	80a400a <mbedtls_ecp_curve_info_from_grp_id+0x2>
    {
        if( curve_info->grp_id == grp_id )
            return( curve_info );
    }

    return( NULL );
 80a4016:	4610      	mov	r0, r2
 80a4018:	4770      	bx	lr
 80a401a:	4618      	mov	r0, r3
}
 80a401c:	4770      	bx	lr
 80a401e:	bf00      	nop
 80a4020:	080b3c14 	.word	0x080b3c14

080a4024 <mbedtls_ecp_curve_info_from_tls_id>:
 */
const mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_tls_id( uint16_t tls_id )
{
    const mbedtls_ecp_curve_info *curve_info;

    for( curve_info = mbedtls_ecp_curve_list();
 80a4024:	4b05      	ldr	r3, [pc, #20]	; (80a403c <mbedtls_ecp_curve_info_from_tls_id+0x18>)
         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
 80a4026:	781a      	ldrb	r2, [r3, #0]
 80a4028:	b122      	cbz	r2, 80a4034 <mbedtls_ecp_curve_info_from_tls_id+0x10>
         curve_info++ )
    {
        if( curve_info->tls_id == tls_id )
 80a402a:	885a      	ldrh	r2, [r3, #2]
 80a402c:	4282      	cmp	r2, r0
 80a402e:	d003      	beq.n	80a4038 <mbedtls_ecp_curve_info_from_tls_id+0x14>
 */
const mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_tls_id( uint16_t tls_id )
{
    const mbedtls_ecp_curve_info *curve_info;

    for( curve_info = mbedtls_ecp_curve_list();
 80a4030:	330c      	adds	r3, #12
 80a4032:	e7f8      	b.n	80a4026 <mbedtls_ecp_curve_info_from_tls_id+0x2>
    {
        if( curve_info->tls_id == tls_id )
            return( curve_info );
    }

    return( NULL );
 80a4034:	4610      	mov	r0, r2
 80a4036:	4770      	bx	lr
 80a4038:	4618      	mov	r0, r3
}
 80a403a:	4770      	bx	lr
 80a403c:	080b3c14 	.word	0x080b3c14

080a4040 <mbedtls_ecp_point_init>:

/*
 * Initialize (the components of) a point
 */
void mbedtls_ecp_point_init( mbedtls_ecp_point *pt )
{
 80a4040:	b510      	push	{r4, lr}
 80a4042:	4604      	mov	r4, r0
    ECP_VALIDATE( pt != NULL );

    mbedtls_mpi_init( &pt->X );
 80a4044:	f008 f849 	bl	80ac0da <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Y );
 80a4048:	f104 000c 	add.w	r0, r4, #12
 80a404c:	f008 f845 	bl	80ac0da <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Z );
 80a4050:	f104 0018 	add.w	r0, r4, #24
}
 80a4054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    ECP_VALIDATE( pt != NULL );

    mbedtls_mpi_init( &pt->X );
    mbedtls_mpi_init( &pt->Y );
    mbedtls_mpi_init( &pt->Z );
 80a4058:	f008 b83f 	b.w	80ac0da <mbedtls_mpi_init>

080a405c <mbedtls_ecp_group_init>:

/*
 * Initialize (the components of) a group
 */
void mbedtls_ecp_group_init( mbedtls_ecp_group *grp )
{
 80a405c:	b538      	push	{r3, r4, r5, lr}
 80a405e:	4604      	mov	r4, r0
    ECP_VALIDATE( grp != NULL );

    grp->id = MBEDTLS_ECP_DP_NONE;
 80a4060:	2500      	movs	r5, #0
 80a4062:	f800 5b04 	strb.w	r5, [r0], #4
    mbedtls_mpi_init( &grp->P );
 80a4066:	f008 f838 	bl	80ac0da <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->A );
 80a406a:	f104 0010 	add.w	r0, r4, #16
 80a406e:	f008 f834 	bl	80ac0da <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->B );
 80a4072:	f104 001c 	add.w	r0, r4, #28
 80a4076:	f008 f830 	bl	80ac0da <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &grp->G );
 80a407a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80a407e:	f7ff ffdf 	bl	80a4040 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &grp->N );
 80a4082:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80a4086:	f008 f828 	bl	80ac0da <mbedtls_mpi_init>
    grp->pbits = 0;
 80a408a:	65a5      	str	r5, [r4, #88]	; 0x58
    grp->nbits = 0;
 80a408c:	65e5      	str	r5, [r4, #92]	; 0x5c
    grp->h = 0;
 80a408e:	6625      	str	r5, [r4, #96]	; 0x60
    grp->modp = NULL;
 80a4090:	6665      	str	r5, [r4, #100]	; 0x64
    grp->t_pre = NULL;
 80a4092:	66a5      	str	r5, [r4, #104]	; 0x68
    grp->t_post = NULL;
 80a4094:	66e5      	str	r5, [r4, #108]	; 0x6c
    grp->t_data = NULL;
 80a4096:	6725      	str	r5, [r4, #112]	; 0x70
    grp->T = NULL;
 80a4098:	6765      	str	r5, [r4, #116]	; 0x74
    grp->T_size = 0;
 80a409a:	67a5      	str	r5, [r4, #120]	; 0x78
 80a409c:	bd38      	pop	{r3, r4, r5, pc}

080a409e <mbedtls_ecp_keypair_init>:

/*
 * Initialize (the components of) a key pair
 */
void mbedtls_ecp_keypair_init( mbedtls_ecp_keypair *key )
{
 80a409e:	b510      	push	{r4, lr}
 80a40a0:	4604      	mov	r4, r0
    ECP_VALIDATE( key != NULL );

    mbedtls_ecp_group_init( &key->grp );
 80a40a2:	f7ff ffdb 	bl	80a405c <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &key->d );
 80a40a6:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 80a40aa:	f008 f816 	bl	80ac0da <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &key->Q );
 80a40ae:	f104 0088 	add.w	r0, r4, #136	; 0x88
}
 80a40b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    ECP_VALIDATE( key != NULL );

    mbedtls_ecp_group_init( &key->grp );
    mbedtls_mpi_init( &key->d );
    mbedtls_ecp_point_init( &key->Q );
 80a40b6:	f7ff bfc3 	b.w	80a4040 <mbedtls_ecp_point_init>

080a40ba <mbedtls_ecp_point_free>:

/*
 * Unallocate (the components of) a point
 */
void mbedtls_ecp_point_free( mbedtls_ecp_point *pt )
{
 80a40ba:	b510      	push	{r4, lr}
    if( pt == NULL )
 80a40bc:	4604      	mov	r4, r0
 80a40be:	b158      	cbz	r0, 80a40d8 <mbedtls_ecp_point_free+0x1e>
        return;

    mbedtls_mpi_free( &( pt->X ) );
 80a40c0:	f008 f811 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Y ) );
 80a40c4:	f104 000c 	add.w	r0, r4, #12
 80a40c8:	f008 f80d 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Z ) );
 80a40cc:	f104 0018 	add.w	r0, r4, #24
}
 80a40d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if( pt == NULL )
        return;

    mbedtls_mpi_free( &( pt->X ) );
    mbedtls_mpi_free( &( pt->Y ) );
    mbedtls_mpi_free( &( pt->Z ) );
 80a40d4:	f008 b807 	b.w	80ac0e6 <mbedtls_mpi_free>
 80a40d8:	bd10      	pop	{r4, pc}

080a40da <mbedtls_ecp_group_free>:

/*
 * Unallocate (the components of) a group
 */
void mbedtls_ecp_group_free( mbedtls_ecp_group *grp )
{
 80a40da:	b570      	push	{r4, r5, r6, lr}
    size_t i;

    if( grp == NULL )
 80a40dc:	4604      	mov	r4, r0
 80a40de:	b358      	cbz	r0, 80a4138 <mbedtls_ecp_group_free+0x5e>
        return;

    if( grp->h != 1 )
 80a40e0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80a40e2:	2b01      	cmp	r3, #1
 80a40e4:	d012      	beq.n	80a410c <mbedtls_ecp_group_free+0x32>
    {
        mbedtls_mpi_free( &grp->P );
 80a40e6:	3004      	adds	r0, #4
 80a40e8:	f007 fffd 	bl	80ac0e6 <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->A );
 80a40ec:	f104 0010 	add.w	r0, r4, #16
 80a40f0:	f007 fff9 	bl	80ac0e6 <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->B );
 80a40f4:	f104 001c 	add.w	r0, r4, #28
 80a40f8:	f007 fff5 	bl	80ac0e6 <mbedtls_mpi_free>
        mbedtls_ecp_point_free( &grp->G );
 80a40fc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80a4100:	f7ff ffdb 	bl	80a40ba <mbedtls_ecp_point_free>
        mbedtls_mpi_free( &grp->N );
 80a4104:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80a4108:	f007 ffed 	bl	80ac0e6 <mbedtls_mpi_free>
    }

    if( grp->T != NULL )
 80a410c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80a410e:	b16b      	cbz	r3, 80a412c <mbedtls_ecp_group_free+0x52>
 80a4110:	2500      	movs	r5, #0
    {
        for( i = 0; i < grp->T_size; i++ )
            mbedtls_ecp_point_free( &grp->T[i] );
 80a4112:	2624      	movs	r6, #36	; 0x24
        mbedtls_mpi_free( &grp->N );
    }

    if( grp->T != NULL )
    {
        for( i = 0; i < grp->T_size; i++ )
 80a4114:	6fa3      	ldr	r3, [r4, #120]	; 0x78
            mbedtls_ecp_point_free( &grp->T[i] );
        mbedtls_free( grp->T );
 80a4116:	6f60      	ldr	r0, [r4, #116]	; 0x74
        mbedtls_mpi_free( &grp->N );
    }

    if( grp->T != NULL )
    {
        for( i = 0; i < grp->T_size; i++ )
 80a4118:	429d      	cmp	r5, r3
 80a411a:	d205      	bcs.n	80a4128 <mbedtls_ecp_group_free+0x4e>
            mbedtls_ecp_point_free( &grp->T[i] );
 80a411c:	fb06 0005 	mla	r0, r6, r5, r0
 80a4120:	f7ff ffcb 	bl	80a40ba <mbedtls_ecp_point_free>
        mbedtls_mpi_free( &grp->N );
    }

    if( grp->T != NULL )
    {
        for( i = 0; i < grp->T_size; i++ )
 80a4124:	3501      	adds	r5, #1
 80a4126:	e7f5      	b.n	80a4114 <mbedtls_ecp_group_free+0x3a>
            mbedtls_ecp_point_free( &grp->T[i] );
        mbedtls_free( grp->T );
 80a4128:	f00c ffde 	bl	80b10e8 <free>
    }

    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
 80a412c:	4620      	mov	r0, r4
}
 80a412e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        for( i = 0; i < grp->T_size; i++ )
            mbedtls_ecp_point_free( &grp->T[i] );
        mbedtls_free( grp->T );
    }

    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
 80a4132:	217c      	movs	r1, #124	; 0x7c
 80a4134:	f002 b96c 	b.w	80a6410 <mbedtls_platform_zeroize>
 80a4138:	bd70      	pop	{r4, r5, r6, pc}

080a413a <mbedtls_ecp_keypair_free>:

/*
 * Unallocate (the components of) a key pair
 */
void mbedtls_ecp_keypair_free( mbedtls_ecp_keypair *key )
{
 80a413a:	b510      	push	{r4, lr}
    if( key == NULL )
 80a413c:	4604      	mov	r4, r0
 80a413e:	b158      	cbz	r0, 80a4158 <mbedtls_ecp_keypair_free+0x1e>
        return;

    mbedtls_ecp_group_free( &key->grp );
 80a4140:	f7ff ffcb 	bl	80a40da <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &key->d );
 80a4144:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 80a4148:	f007 ffcd 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &key->Q );
 80a414c:	f104 0088 	add.w	r0, r4, #136	; 0x88
}
 80a4150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if( key == NULL )
        return;

    mbedtls_ecp_group_free( &key->grp );
    mbedtls_mpi_free( &key->d );
    mbedtls_ecp_point_free( &key->Q );
 80a4154:	f7ff bfb1 	b.w	80a40ba <mbedtls_ecp_point_free>
 80a4158:	bd10      	pop	{r4, pc}

080a415a <mbedtls_ecp_copy>:

/*
 * Copy the contents of a point
 */
int mbedtls_ecp_copy( mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
 80a415a:	b538      	push	{r3, r4, r5, lr}
 80a415c:	4604      	mov	r4, r0
 80a415e:	460d      	mov	r5, r1
    int ret;
    ECP_VALIDATE_RET( P != NULL );
    ECP_VALIDATE_RET( Q != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
 80a4160:	f008 f83b 	bl	80ac1da <mbedtls_mpi_copy>
 80a4164:	b970      	cbnz	r0, 80a4184 <mbedtls_ecp_copy+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
 80a4166:	f105 010c 	add.w	r1, r5, #12
 80a416a:	f104 000c 	add.w	r0, r4, #12
 80a416e:	f008 f834 	bl	80ac1da <mbedtls_mpi_copy>
 80a4172:	b938      	cbnz	r0, 80a4184 <mbedtls_ecp_copy+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
 80a4174:	f105 0118 	add.w	r1, r5, #24
 80a4178:	f104 0018 	add.w	r0, r4, #24

cleanup:
    return( ret );
}
 80a417c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ECP_VALIDATE_RET( P != NULL );
    ECP_VALIDATE_RET( Q != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
 80a4180:	f008 b82b 	b.w	80ac1da <mbedtls_mpi_copy>

cleanup:
    return( ret );
}
 80a4184:	bd38      	pop	{r3, r4, r5, pc}

080a4186 <mbedtls_ecp_group_copy>:
int mbedtls_ecp_group_copy( mbedtls_ecp_group *dst, const mbedtls_ecp_group *src )
{
    ECP_VALIDATE_RET( dst != NULL );
    ECP_VALIDATE_RET( src != NULL );

    return( mbedtls_ecp_group_load( dst, src->id ) );
 80a4186:	7809      	ldrb	r1, [r1, #0]
 80a4188:	f004 bb9a 	b.w	80a88c0 <mbedtls_ecp_group_load>

080a418c <mbedtls_ecp_set_zero>:

/*
 * Set point to zero
 */
int mbedtls_ecp_set_zero( mbedtls_ecp_point *pt )
{
 80a418c:	b510      	push	{r4, lr}
    int ret;
    ECP_VALIDATE_RET( pt != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 80a418e:	2101      	movs	r1, #1

/*
 * Set point to zero
 */
int mbedtls_ecp_set_zero( mbedtls_ecp_point *pt )
{
 80a4190:	4604      	mov	r4, r0
    int ret;
    ECP_VALIDATE_RET( pt != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 80a4192:	f008 f883 	bl	80ac29c <mbedtls_mpi_lset>
 80a4196:	b960      	cbnz	r0, 80a41b2 <mbedtls_ecp_set_zero+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
 80a4198:	2101      	movs	r1, #1
 80a419a:	f104 000c 	add.w	r0, r4, #12
 80a419e:	f008 f87d 	bl	80ac29c <mbedtls_mpi_lset>
 80a41a2:	b930      	cbnz	r0, 80a41b2 <mbedtls_ecp_set_zero+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
 80a41a4:	4601      	mov	r1, r0
 80a41a6:	f104 0018 	add.w	r0, r4, #24

cleanup:
    return( ret );
}
 80a41aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    int ret;
    ECP_VALIDATE_RET( pt != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
 80a41ae:	f008 b875 	b.w	80ac29c <mbedtls_mpi_lset>

cleanup:
    return( ret );
}
 80a41b2:	bd10      	pop	{r4, pc}

080a41b4 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_>:
 *
 * Cost: 1A := 8M + 3S
 */
static int ecp_add_mixed( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                          const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
 80a41b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#endif /* MBEDTLS_ECP_ADD_MIXED_ALT */

    /*
     * Trivial cases: P == 0 or Q == 0 (case 1)
     */
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 80a41b8:	f102 0918 	add.w	r9, r2, #24
 *
 * Cost: 1A := 8M + 3S
 */
static int ecp_add_mixed( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                          const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
 80a41bc:	b096      	sub	sp, #88	; 0x58
 80a41be:	4605      	mov	r5, r0
 80a41c0:	460e      	mov	r6, r1
#endif /* MBEDTLS_ECP_ADD_MIXED_ALT */

    /*
     * Trivial cases: P == 0 or Q == 0 (case 1)
     */
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 80a41c2:	4648      	mov	r0, r9
 80a41c4:	2100      	movs	r1, #0
 *
 * Cost: 1A := 8M + 3S
 */
static int ecp_add_mixed( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                          const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
 80a41c6:	4690      	mov	r8, r2
 80a41c8:	461f      	mov	r7, r3
#endif /* MBEDTLS_ECP_ADD_MIXED_ALT */

    /*
     * Trivial cases: P == 0 or Q == 0 (case 1)
     */
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 80a41ca:	f008 fab2 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a41ce:	b908      	cbnz	r0, 80a41d4 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x20>
        return( mbedtls_ecp_copy( R, Q ) );
 80a41d0:	4639      	mov	r1, r7
 80a41d2:	e008      	b.n	80a41e6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x32>

    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )
 80a41d4:	6a3b      	ldr	r3, [r7, #32]
 80a41d6:	b153      	cbz	r3, 80a41ee <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3a>
 80a41d8:	2100      	movs	r1, #0
 80a41da:	f107 0018 	add.w	r0, r7, #24
 80a41de:	f008 faa8 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a41e2:	b920      	cbnz	r0, 80a41ee <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3a>
        return( mbedtls_ecp_copy( R, P ) );
 80a41e4:	4641      	mov	r1, r8
 80a41e6:	4630      	mov	r0, r6
 80a41e8:	f7ff ffb7 	bl	80a415a <mbedtls_ecp_copy>
 80a41ec:	e1bd      	b.n	80a456a <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3b6>

    /*
     * Make sure Q coordinates are normalized
     */
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
 80a41ee:	6a3b      	ldr	r3, [r7, #32]
 80a41f0:	b13b      	cbz	r3, 80a4202 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x4e>
 80a41f2:	2101      	movs	r1, #1
 80a41f4:	f107 0018 	add.w	r0, r7, #24
 80a41f8:	f008 fa9b 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a41fc:	2800      	cmp	r0, #0
 80a41fe:	f040 8095 	bne.w	80a432c <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x178>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 ); mbedtls_mpi_init( &T3 ); mbedtls_mpi_init( &T4 );
 80a4202:	a801      	add	r0, sp, #4
 80a4204:	f007 ff69 	bl	80ac0da <mbedtls_mpi_init>
 80a4208:	a804      	add	r0, sp, #16
 80a420a:	f007 ff66 	bl	80ac0da <mbedtls_mpi_init>
 80a420e:	a807      	add	r0, sp, #28
 80a4210:	f007 ff63 	bl	80ac0da <mbedtls_mpi_init>
 80a4214:	a80a      	add	r0, sp, #40	; 0x28
 80a4216:	f007 ff60 	bl	80ac0da <mbedtls_mpi_init>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
 80a421a:	a80d      	add	r0, sp, #52	; 0x34
 80a421c:	f007 ff5d 	bl	80ac0da <mbedtls_mpi_init>
 80a4220:	a810      	add	r0, sp, #64	; 0x40
 80a4222:	f007 ff5a 	bl	80ac0da <mbedtls_mpi_init>
 80a4226:	a813      	add	r0, sp, #76	; 0x4c
 80a4228:	f007 ff57 	bl	80ac0da <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
 80a422c:	464a      	mov	r2, r9
 80a422e:	4649      	mov	r1, r9
 80a4230:	a801      	add	r0, sp, #4
 80a4232:	f008 fb9d 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a4236:	4604      	mov	r4, r0
 80a4238:	2800      	cmp	r0, #0
 80a423a:	d160      	bne.n	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
 80a423c:	4629      	mov	r1, r5
 80a423e:	a801      	add	r0, sp, #4
 80a4240:	f7ff faa2 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a4244:	4604      	mov	r4, r0
 80a4246:	2800      	cmp	r0, #0
 80a4248:	d159      	bne.n	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 80a424a:	464a      	mov	r2, r9
 80a424c:	a901      	add	r1, sp, #4
 80a424e:	a804      	add	r0, sp, #16
 80a4250:	f008 fb8e 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a4254:	4604      	mov	r4, r0
 80a4256:	2800      	cmp	r0, #0
 80a4258:	d151      	bne.n	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
 80a425a:	4629      	mov	r1, r5
 80a425c:	a804      	add	r0, sp, #16
 80a425e:	f7ff fa93 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a4262:	4604      	mov	r4, r0
 80a4264:	2800      	cmp	r0, #0
 80a4266:	d14a      	bne.n	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 80a4268:	a901      	add	r1, sp, #4
 80a426a:	463a      	mov	r2, r7
 80a426c:	4608      	mov	r0, r1
 80a426e:	f008 fb7f 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a4272:	4604      	mov	r4, r0
 80a4274:	2800      	cmp	r0, #0
 80a4276:	d142      	bne.n	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
 80a4278:	4629      	mov	r1, r5
 80a427a:	a801      	add	r0, sp, #4
 80a427c:	f7ff fa84 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a4280:	4604      	mov	r4, r0
 80a4282:	2800      	cmp	r0, #0
 80a4284:	d13b      	bne.n	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 80a4286:	a904      	add	r1, sp, #16
 80a4288:	f107 020c 	add.w	r2, r7, #12
 80a428c:	4608      	mov	r0, r1
 80a428e:	f008 fb6f 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a4292:	4604      	mov	r4, r0
 80a4294:	2800      	cmp	r0, #0
 80a4296:	d132      	bne.n	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
 80a4298:	4629      	mov	r1, r5
 80a429a:	a804      	add	r0, sp, #16
 80a429c:	f7ff fa74 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a42a0:	4604      	mov	r4, r0
 80a42a2:	bb60      	cbnz	r0, 80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 80a42a4:	a901      	add	r1, sp, #4
 80a42a6:	4642      	mov	r2, r8
 80a42a8:	4608      	mov	r0, r1
 80a42aa:	f008 fb13 	bl	80ac8d4 <mbedtls_mpi_sub_mpi>
 80a42ae:	4604      	mov	r4, r0
 80a42b0:	bb28      	cbnz	r0, 80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
 80a42b2:	1d2f      	adds	r7, r5, #4
 80a42b4:	9b01      	ldr	r3, [sp, #4]
 80a42b6:	2b00      	cmp	r3, #0
 80a42b8:	da05      	bge.n	80a42c6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x112>
 80a42ba:	2100      	movs	r1, #0
 80a42bc:	a801      	add	r0, sp, #4
 80a42be:	f008 fa38 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a42c2:	2800      	cmp	r0, #0
 80a42c4:	d134      	bne.n	80a4330 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x17c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
 80a42c6:	a904      	add	r1, sp, #16
 80a42c8:	f108 0a0c 	add.w	sl, r8, #12
 80a42cc:	4652      	mov	r2, sl
 80a42ce:	4608      	mov	r0, r1
 80a42d0:	f008 fb00 	bl	80ac8d4 <mbedtls_mpi_sub_mpi>
 80a42d4:	4604      	mov	r4, r0
 80a42d6:	b990      	cbnz	r0, 80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
 80a42d8:	1d2f      	adds	r7, r5, #4
 80a42da:	9b04      	ldr	r3, [sp, #16]
 80a42dc:	2b00      	cmp	r3, #0
 80a42de:	db30      	blt.n	80a4342 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x18e>

    /* Special cases (2) and (3) */
    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )
 80a42e0:	2100      	movs	r1, #0
 80a42e2:	a801      	add	r0, sp, #4
 80a42e4:	f008 fa25 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a42e8:	4601      	mov	r1, r0
 80a42ea:	2800      	cmp	r0, #0
 80a42ec:	d038      	beq.n	80a4360 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x1ac>
            ret = mbedtls_ecp_set_zero( R );
            goto cleanup;
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
 80a42ee:	aa01      	add	r2, sp, #4
 80a42f0:	4649      	mov	r1, r9
 80a42f2:	a813      	add	r0, sp, #76	; 0x4c
 80a42f4:	f008 fb3c 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a42f8:	4604      	mov	r4, r0
 80a42fa:	2800      	cmp	r0, #0
 80a42fc:	d03e      	beq.n	80a437c <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x1c8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );

cleanup:

    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );
 80a42fe:	a801      	add	r0, sp, #4
 80a4300:	f007 fef1 	bl	80ac0e6 <mbedtls_mpi_free>
 80a4304:	a804      	add	r0, sp, #16
 80a4306:	f007 feee 	bl	80ac0e6 <mbedtls_mpi_free>
 80a430a:	a807      	add	r0, sp, #28
 80a430c:	f007 feeb 	bl	80ac0e6 <mbedtls_mpi_free>
 80a4310:	a80a      	add	r0, sp, #40	; 0x28
 80a4312:	f007 fee8 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 80a4316:	a80d      	add	r0, sp, #52	; 0x34
 80a4318:	f007 fee5 	bl	80ac0e6 <mbedtls_mpi_free>
 80a431c:	a810      	add	r0, sp, #64	; 0x40
 80a431e:	f007 fee2 	bl	80ac0e6 <mbedtls_mpi_free>
 80a4322:	a813      	add	r0, sp, #76	; 0x4c
 80a4324:	f007 fedf 	bl	80ac0e6 <mbedtls_mpi_free>

    return( ret );
 80a4328:	4620      	mov	r0, r4
 80a432a:	e11e      	b.n	80a456a <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3b6>

    /*
     * Make sure Q coordinates are normalized
     */
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80a432c:	4890      	ldr	r0, [pc, #576]	; (80a4570 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3bc>)
 80a432e:	e11c      	b.n	80a456a <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3b6>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 80a4330:	a901      	add	r1, sp, #4
 80a4332:	463a      	mov	r2, r7
 80a4334:	4608      	mov	r0, r1
 80a4336:	f008 faac 	bl	80ac892 <mbedtls_mpi_add_mpi>
 80a433a:	4604      	mov	r4, r0
 80a433c:	2800      	cmp	r0, #0
 80a433e:	d0b9      	beq.n	80a42b4 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x100>
 80a4340:	e7dd      	b.n	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
 80a4342:	2100      	movs	r1, #0
 80a4344:	a804      	add	r0, sp, #16
 80a4346:	f008 f9f4 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a434a:	2800      	cmp	r0, #0
 80a434c:	d0c8      	beq.n	80a42e0 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x12c>
 80a434e:	a904      	add	r1, sp, #16
 80a4350:	463a      	mov	r2, r7
 80a4352:	4608      	mov	r0, r1
 80a4354:	f008 fa9d 	bl	80ac892 <mbedtls_mpi_add_mpi>
 80a4358:	4604      	mov	r4, r0
 80a435a:	2800      	cmp	r0, #0
 80a435c:	d0bd      	beq.n	80a42da <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x126>
 80a435e:	e7ce      	b.n	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>

    /* Special cases (2) and (3) */
    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )
    {
        if( mbedtls_mpi_cmp_int( &T2, 0 ) == 0 )
 80a4360:	a804      	add	r0, sp, #16
 80a4362:	f008 f9e6 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a4366:	b928      	cbnz	r0, 80a4374 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x1c0>
        {
            ret = ecp_double_jac( grp, R, P );
 80a4368:	4642      	mov	r2, r8
 80a436a:	4631      	mov	r1, r6
 80a436c:	4628      	mov	r0, r5
 80a436e:	f7ff fa4f 	bl	80a3810 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_>
 80a4372:	e0ce      	b.n	80a4512 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x35e>
            goto cleanup;
        }
        else
        {
            ret = mbedtls_ecp_set_zero( R );
 80a4374:	4630      	mov	r0, r6
 80a4376:	f7ff ff09 	bl	80a418c <mbedtls_ecp_set_zero>
 80a437a:	e0ca      	b.n	80a4512 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x35e>
            goto cleanup;
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
 80a437c:	4629      	mov	r1, r5
 80a437e:	a813      	add	r0, sp, #76	; 0x4c
 80a4380:	f7ff fa02 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a4384:	4604      	mov	r4, r0
 80a4386:	2800      	cmp	r0, #0
 80a4388:	d1b9      	bne.n	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 80a438a:	aa01      	add	r2, sp, #4
 80a438c:	4611      	mov	r1, r2
 80a438e:	a807      	add	r0, sp, #28
 80a4390:	f008 faee 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a4394:	4604      	mov	r4, r0
 80a4396:	2800      	cmp	r0, #0
 80a4398:	d1b1      	bne.n	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
 80a439a:	4629      	mov	r1, r5
 80a439c:	a807      	add	r0, sp, #28
 80a439e:	f7ff f9f3 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a43a2:	4604      	mov	r4, r0
 80a43a4:	2800      	cmp	r0, #0
 80a43a6:	d1aa      	bne.n	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 80a43a8:	aa01      	add	r2, sp, #4
 80a43aa:	a907      	add	r1, sp, #28
 80a43ac:	a80a      	add	r0, sp, #40	; 0x28
 80a43ae:	f008 fadf 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a43b2:	4604      	mov	r4, r0
 80a43b4:	2800      	cmp	r0, #0
 80a43b6:	d1a2      	bne.n	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
 80a43b8:	4629      	mov	r1, r5
 80a43ba:	a80a      	add	r0, sp, #40	; 0x28
 80a43bc:	f7ff f9e4 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a43c0:	4604      	mov	r4, r0
 80a43c2:	2800      	cmp	r0, #0
 80a43c4:	d19b      	bne.n	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 80a43c6:	a907      	add	r1, sp, #28
 80a43c8:	4642      	mov	r2, r8
 80a43ca:	4608      	mov	r0, r1
 80a43cc:	f008 fad0 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a43d0:	4604      	mov	r4, r0
 80a43d2:	2800      	cmp	r0, #0
 80a43d4:	d193      	bne.n	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
 80a43d6:	4629      	mov	r1, r5
 80a43d8:	a807      	add	r0, sp, #28
 80a43da:	f7ff f9d5 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a43de:	4604      	mov	r4, r0
 80a43e0:	2800      	cmp	r0, #0
 80a43e2:	d18c      	bne.n	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 80a43e4:	2202      	movs	r2, #2
 80a43e6:	a907      	add	r1, sp, #28
 80a43e8:	a801      	add	r0, sp, #4
 80a43ea:	f008 fb30 	bl	80aca4e <mbedtls_mpi_mul_int>
 80a43ee:	4604      	mov	r4, r0
 80a43f0:	2800      	cmp	r0, #0
 80a43f2:	d184      	bne.n	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
 80a43f4:	1d2f      	adds	r7, r5, #4
 80a43f6:	4639      	mov	r1, r7
 80a43f8:	a801      	add	r0, sp, #4
 80a43fa:	f008 f955 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80a43fe:	2800      	cmp	r0, #0
 80a4400:	db08      	blt.n	80a4414 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x260>
 80a4402:	a901      	add	r1, sp, #4
 80a4404:	463a      	mov	r2, r7
 80a4406:	4608      	mov	r0, r1
 80a4408:	f008 fa03 	bl	80ac812 <mbedtls_mpi_sub_abs>
 80a440c:	4604      	mov	r4, r0
 80a440e:	2800      	cmp	r0, #0
 80a4410:	d0f1      	beq.n	80a43f6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x242>
 80a4412:	e774      	b.n	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
 80a4414:	aa04      	add	r2, sp, #16
 80a4416:	4611      	mov	r1, r2
 80a4418:	a80d      	add	r0, sp, #52	; 0x34
 80a441a:	f008 faa9 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a441e:	4604      	mov	r4, r0
 80a4420:	2800      	cmp	r0, #0
 80a4422:	f47f af6c 	bne.w	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
 80a4426:	4629      	mov	r1, r5
 80a4428:	a80d      	add	r0, sp, #52	; 0x34
 80a442a:	f7ff f9ad 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a442e:	4604      	mov	r4, r0
 80a4430:	2800      	cmp	r0, #0
 80a4432:	f47f af64 	bne.w	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 80a4436:	a90d      	add	r1, sp, #52	; 0x34
 80a4438:	aa01      	add	r2, sp, #4
 80a443a:	4608      	mov	r0, r1
 80a443c:	f008 fa4a 	bl	80ac8d4 <mbedtls_mpi_sub_mpi>
 80a4440:	4604      	mov	r4, r0
 80a4442:	2800      	cmp	r0, #0
 80a4444:	f47f af5b 	bne.w	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
 80a4448:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a444a:	2b00      	cmp	r3, #0
 80a444c:	da05      	bge.n	80a445a <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2a6>
 80a444e:	2100      	movs	r1, #0
 80a4450:	a80d      	add	r0, sp, #52	; 0x34
 80a4452:	f008 f96e 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a4456:	2800      	cmp	r0, #0
 80a4458:	d15d      	bne.n	80a4516 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x362>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
 80a445a:	a90d      	add	r1, sp, #52	; 0x34
 80a445c:	aa0a      	add	r2, sp, #40	; 0x28
 80a445e:	4608      	mov	r0, r1
 80a4460:	f008 fa38 	bl	80ac8d4 <mbedtls_mpi_sub_mpi>
 80a4464:	4604      	mov	r4, r0
 80a4466:	2800      	cmp	r0, #0
 80a4468:	f47f af49 	bne.w	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
 80a446c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a446e:	2b00      	cmp	r3, #0
 80a4470:	db57      	blt.n	80a4522 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x36e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
 80a4472:	a907      	add	r1, sp, #28
 80a4474:	aa0d      	add	r2, sp, #52	; 0x34
 80a4476:	4608      	mov	r0, r1
 80a4478:	f008 fa2c 	bl	80ac8d4 <mbedtls_mpi_sub_mpi>
 80a447c:	4604      	mov	r4, r0
 80a447e:	2800      	cmp	r0, #0
 80a4480:	f47f af3d 	bne.w	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
 80a4484:	9b07      	ldr	r3, [sp, #28]
 80a4486:	2b00      	cmp	r3, #0
 80a4488:	db57      	blt.n	80a453a <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x386>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
 80a448a:	a907      	add	r1, sp, #28
 80a448c:	aa04      	add	r2, sp, #16
 80a448e:	4608      	mov	r0, r1
 80a4490:	f008 fa6e 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a4494:	4604      	mov	r4, r0
 80a4496:	2800      	cmp	r0, #0
 80a4498:	f47f af31 	bne.w	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
 80a449c:	4629      	mov	r1, r5
 80a449e:	a807      	add	r0, sp, #28
 80a44a0:	f7ff f972 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a44a4:	4604      	mov	r4, r0
 80a44a6:	2800      	cmp	r0, #0
 80a44a8:	f47f af29 	bne.w	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 80a44ac:	a90a      	add	r1, sp, #40	; 0x28
 80a44ae:	4652      	mov	r2, sl
 80a44b0:	4608      	mov	r0, r1
 80a44b2:	f008 fa5d 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a44b6:	4604      	mov	r4, r0
 80a44b8:	2800      	cmp	r0, #0
 80a44ba:	f47f af20 	bne.w	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
 80a44be:	4629      	mov	r1, r5
 80a44c0:	a80a      	add	r0, sp, #40	; 0x28
 80a44c2:	f7ff f961 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a44c6:	4604      	mov	r4, r0
 80a44c8:	2800      	cmp	r0, #0
 80a44ca:	f47f af18 	bne.w	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 80a44ce:	aa0a      	add	r2, sp, #40	; 0x28
 80a44d0:	a907      	add	r1, sp, #28
 80a44d2:	a810      	add	r0, sp, #64	; 0x40
 80a44d4:	f008 f9fe 	bl	80ac8d4 <mbedtls_mpi_sub_mpi>
 80a44d8:	4604      	mov	r4, r0
 80a44da:	2800      	cmp	r0, #0
 80a44dc:	f47f af0f 	bne.w	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
 80a44e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a44e2:	2b00      	cmp	r3, #0
 80a44e4:	db35      	blt.n	80a4552 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x39e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );
 80a44e6:	a90d      	add	r1, sp, #52	; 0x34
 80a44e8:	4630      	mov	r0, r6
 80a44ea:	f007 fe76 	bl	80ac1da <mbedtls_mpi_copy>
 80a44ee:	4604      	mov	r4, r0
 80a44f0:	2800      	cmp	r0, #0
 80a44f2:	f47f af04 	bne.w	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
 80a44f6:	a910      	add	r1, sp, #64	; 0x40
 80a44f8:	f106 000c 	add.w	r0, r6, #12
 80a44fc:	f007 fe6d 	bl	80ac1da <mbedtls_mpi_copy>
 80a4500:	4604      	mov	r4, r0
 80a4502:	2800      	cmp	r0, #0
 80a4504:	f47f aefb 	bne.w	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
 80a4508:	a913      	add	r1, sp, #76	; 0x4c
 80a450a:	f106 0018 	add.w	r0, r6, #24
 80a450e:	f007 fe64 	bl	80ac1da <mbedtls_mpi_copy>
 80a4512:	4604      	mov	r4, r0
 80a4514:	e6f3      	b.n	80a42fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x14a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 80a4516:	a90d      	add	r1, sp, #52	; 0x34
 80a4518:	463a      	mov	r2, r7
 80a451a:	4608      	mov	r0, r1
 80a451c:	f008 f9b9 	bl	80ac892 <mbedtls_mpi_add_mpi>
 80a4520:	e78e      	b.n	80a4440 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x28c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
 80a4522:	2100      	movs	r1, #0
 80a4524:	a80d      	add	r0, sp, #52	; 0x34
 80a4526:	f008 f904 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a452a:	2800      	cmp	r0, #0
 80a452c:	d0a1      	beq.n	80a4472 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2be>
 80a452e:	a90d      	add	r1, sp, #52	; 0x34
 80a4530:	463a      	mov	r2, r7
 80a4532:	4608      	mov	r0, r1
 80a4534:	f008 f9ad 	bl	80ac892 <mbedtls_mpi_add_mpi>
 80a4538:	e794      	b.n	80a4464 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2b0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
 80a453a:	2100      	movs	r1, #0
 80a453c:	a807      	add	r0, sp, #28
 80a453e:	f008 f8f8 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a4542:	2800      	cmp	r0, #0
 80a4544:	d0a1      	beq.n	80a448a <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2d6>
 80a4546:	a907      	add	r1, sp, #28
 80a4548:	463a      	mov	r2, r7
 80a454a:	4608      	mov	r0, r1
 80a454c:	f008 f9a1 	bl	80ac892 <mbedtls_mpi_add_mpi>
 80a4550:	e794      	b.n	80a447c <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2c8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 80a4552:	2100      	movs	r1, #0
 80a4554:	a810      	add	r0, sp, #64	; 0x40
 80a4556:	f008 f8ec 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a455a:	2800      	cmp	r0, #0
 80a455c:	d0c3      	beq.n	80a44e6 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x332>
 80a455e:	a910      	add	r1, sp, #64	; 0x40
 80a4560:	463a      	mov	r2, r7
 80a4562:	4608      	mov	r0, r1
 80a4564:	f008 f995 	bl	80ac892 <mbedtls_mpi_add_mpi>
 80a4568:	e7b6      	b.n	80a44d8 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x324>

    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );

    return( ret );
}
 80a456a:	b016      	add	sp, #88	; 0x58
 80a456c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4570:	ffffb080 	.word	0xffffb080

080a4574 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6>:
 * once the auxiliary table has been pre-computed.
 *
 * Scalar recoding may use a parity trick that makes us compute -m * P,
 * if that is the case we'll need to recover m * P at the end.
 */
static int ecp_mul_comb_after_precomp( const mbedtls_ecp_group *grp,
 80a4574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4578:	4605      	mov	r5, r0
 80a457a:	b0d9      	sub	sp, #356	; 0x164
 80a457c:	9302      	str	r3, [sp, #8]
                                   unsigned char *parity_trick )
{
    int ret;
    mbedtls_mpi M, mm;

    mbedtls_mpi_init( &M );
 80a457e:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 * once the auxiliary table has been pre-computed.
 *
 * Scalar recoding may use a parity trick that makes us compute -m * P,
 * if that is the case we'll need to recover m * P at the end.
 */
static int ecp_mul_comb_after_precomp( const mbedtls_ecp_group *grp,
 80a4582:	f89d 3188 	ldrb.w	r3, [sp, #392]	; 0x188
                                   unsigned char *parity_trick )
{
    int ret;
    mbedtls_mpi M, mm;

    mbedtls_mpi_init( &M );
 80a4586:	4658      	mov	r0, fp
 * once the auxiliary table has been pre-computed.
 *
 * Scalar recoding may use a parity trick that makes us compute -m * P,
 * if that is the case we'll need to recover m * P at the end.
 */
static int ecp_mul_comb_after_precomp( const mbedtls_ecp_group *grp,
 80a4588:	460e      	mov	r6, r1
 80a458a:	4617      	mov	r7, r2
 80a458c:	9303      	str	r3, [sp, #12]
 80a458e:	f89d a18c 	ldrb.w	sl, [sp, #396]	; 0x18c

    mbedtls_mpi_init( &M );
    mbedtls_mpi_init( &mm );

    /* N is always odd (see above), just make extra sure */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
 80a4592:	f105 094c 	add.w	r9, r5, #76	; 0x4c
                                   unsigned char *parity_trick )
{
    int ret;
    mbedtls_mpi M, mm;

    mbedtls_mpi_init( &M );
 80a4596:	f007 fda0 	bl	80ac0da <mbedtls_mpi_init>
    mbedtls_mpi_init( &mm );
 80a459a:	a80d      	add	r0, sp, #52	; 0x34
 80a459c:	f007 fd9d 	bl	80ac0da <mbedtls_mpi_init>

    /* N is always odd (see above), just make extra sure */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
 80a45a0:	2100      	movs	r1, #0
 80a45a2:	4648      	mov	r0, r9
 80a45a4:	f007 fe96 	bl	80ac2d4 <mbedtls_mpi_get_bit>
 80a45a8:	2801      	cmp	r0, #1
 80a45aa:	d177      	bne.n	80a469c <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x128>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /* do we need the parity trick? */
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
 80a45ac:	2100      	movs	r1, #0
 80a45ae:	4638      	mov	r0, r7
 80a45b0:	f007 fe90 	bl	80ac2d4 <mbedtls_mpi_get_bit>

    /* execute parity fix in constant time */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 80a45b4:	4639      	mov	r1, r7
    /* N is always odd (see above), just make extra sure */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /* do we need the parity trick? */
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
 80a45b6:	fab0 f880 	clz	r8, r0

    /* execute parity fix in constant time */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 80a45ba:	4658      	mov	r0, fp
 80a45bc:	f007 fe0d 	bl	80ac1da <mbedtls_mpi_copy>
    /* N is always odd (see above), just make extra sure */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /* do we need the parity trick? */
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
 80a45c0:	ea4f 1858 	mov.w	r8, r8, lsr #5

    /* execute parity fix in constant time */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 80a45c4:	4604      	mov	r4, r0
 80a45c6:	2800      	cmp	r0, #0
 80a45c8:	d15e      	bne.n	80a4688 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x114>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );
 80a45ca:	463a      	mov	r2, r7
 80a45cc:	4649      	mov	r1, r9
 80a45ce:	a80d      	add	r0, sp, #52	; 0x34
 80a45d0:	f008 f980 	bl	80ac8d4 <mbedtls_mpi_sub_mpi>
 80a45d4:	4604      	mov	r4, r0
 80a45d6:	2800      	cmp	r0, #0
 80a45d8:	d156      	bne.n	80a4688 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x114>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, *parity_trick ) );
 80a45da:	4642      	mov	r2, r8
 80a45dc:	a90d      	add	r1, sp, #52	; 0x34
 80a45de:	4658      	mov	r0, fp
 80a45e0:	f007 fe27 	bl	80ac232 <mbedtls_mpi_safe_cond_assign>
 80a45e4:	4604      	mov	r4, r0
 80a45e6:	2800      	cmp	r0, #0
 80a45e8:	d14e      	bne.n	80a4688 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x114>
                                  unsigned char w, const mbedtls_mpi *m )
{
    size_t i, j;
    unsigned char c, cc, adjust;

    memset( x, 0, d+1 );
 80a45ea:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80a45ec:	f10d 0958 	add.w	r9, sp, #88	; 0x58
 80a45f0:	1c5a      	adds	r2, r3, #1
 80a45f2:	4601      	mov	r1, r0
 80a45f4:	4648      	mov	r0, r9
 80a45f6:	f00e f924 	bl	80b2842 <memset>

    /* First get the classical comb values (except for x_d = 0) */
    for( i = 0; i < d; i++ )
 80a45fa:	4627      	mov	r7, r4
        for( j = 0; j < w; j++ )
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
 80a45fc:	465b      	mov	r3, fp
    unsigned char c, cc, adjust;

    memset( x, 0, d+1 );

    /* First get the classical comb values (except for x_d = 0) */
    for( i = 0; i < d; i++ )
 80a45fe:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80a4600:	42ba      	cmp	r2, r7
 80a4602:	d01a      	beq.n	80a463a <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0xc6>
 80a4604:	463a      	mov	r2, r7
 80a4606:	f04f 0b00 	mov.w	fp, #0
        for( j = 0; j < w; j++ )
 80a460a:	45da      	cmp	sl, fp
 80a460c:	d913      	bls.n	80a4636 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0xc2>
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
 80a460e:	4611      	mov	r1, r2
 80a4610:	4618      	mov	r0, r3
 80a4612:	9205      	str	r2, [sp, #20]
 80a4614:	9304      	str	r3, [sp, #16]
 80a4616:	f007 fe5d 	bl	80ac2d4 <mbedtls_mpi_get_bit>
 80a461a:	f817 1009 	ldrb.w	r1, [r7, r9]
 80a461e:	fa00 f00b 	lsl.w	r0, r0, fp
 80a4622:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80a4624:	9a05      	ldr	r2, [sp, #20]
 80a4626:	4308      	orrs	r0, r1
 80a4628:	441a      	add	r2, r3
 80a462a:	f807 0009 	strb.w	r0, [r7, r9]

    memset( x, 0, d+1 );

    /* First get the classical comb values (except for x_d = 0) */
    for( i = 0; i < d; i++ )
        for( j = 0; j < w; j++ )
 80a462e:	f10b 0b01 	add.w	fp, fp, #1
 80a4632:	9b04      	ldr	r3, [sp, #16]
 80a4634:	e7e9      	b.n	80a460a <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x96>
    unsigned char c, cc, adjust;

    memset( x, 0, d+1 );

    /* First get the classical comb values (except for x_d = 0) */
    for( i = 0; i < d; i++ )
 80a4636:	3701      	adds	r7, #1
 80a4638:	e7e1      	b.n	80a45fe <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x8a>
 80a463a:	ab16      	add	r3, sp, #88	; 0x58
 80a463c:	f04f 0900 	mov.w	r9, #0
 80a4640:	f04f 0c01 	mov.w	ip, #1
        for( j = 0; j < w; j++ )
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;

    /* Now make sure x_1 .. x_d are odd */
    c = 0;
    for( i = 1; i <= d; i++ )
 80a4644:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80a4646:	3301      	adds	r3, #1
 80a4648:	4562      	cmp	r2, ip
 80a464a:	d31d      	bcc.n	80a4688 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x114>
    {
        /* Add carry and update it */
        cc   = x[i] & c;
 80a464c:	7819      	ldrb	r1, [r3, #0]
        x[i] = x[i] ^ c;
        c = cc;

        /* Adjust if needed, avoiding branches */
        adjust = 1 - ( x[i] & 0x01 );
        c   |= x[i] & ( x[i-1] * adjust );
 80a464e:	f813 7c01 	ldrb.w	r7, [r3, #-1]
    c = 0;
    for( i = 1; i <= d; i++ )
    {
        /* Add carry and update it */
        cc   = x[i] & c;
        x[i] = x[i] ^ c;
 80a4652:	ea81 0009 	eor.w	r0, r1, r9
 80a4656:	f000 0e01 	and.w	lr, r0, #1
 80a465a:	f08e 0e01 	eor.w	lr, lr, #1
        c = cc;

        /* Adjust if needed, avoiding branches */
        adjust = 1 - ( x[i] & 0x01 );
        c   |= x[i] & ( x[i-1] * adjust );
 80a465e:	fb0e f207 	mul.w	r2, lr, r7
 80a4662:	b240      	sxtb	r0, r0
 80a4664:	b252      	sxtb	r2, r2
 80a4666:	ea00 0a02 	and.w	sl, r0, r2
 80a466a:	ea01 0109 	and.w	r1, r1, r9
 80a466e:	ea4a 0901 	orr.w	r9, sl, r1
        x[i] = x[i] ^ ( x[i-1] * adjust );
 80a4672:	4042      	eors	r2, r0
        x[i-1] |= adjust << 7;
 80a4674:	ea47 17ce 	orr.w	r7, r7, lr, lsl #7
        x[i] = x[i] ^ c;
        c = cc;

        /* Adjust if needed, avoiding branches */
        adjust = 1 - ( x[i] & 0x01 );
        c   |= x[i] & ( x[i-1] * adjust );
 80a4678:	fa5f f989 	uxtb.w	r9, r9
        x[i] = x[i] ^ ( x[i-1] * adjust );
 80a467c:	701a      	strb	r2, [r3, #0]
        x[i-1] |= adjust << 7;
 80a467e:	f803 7c01 	strb.w	r7, [r3, #-1]
        for( j = 0; j < w; j++ )
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;

    /* Now make sure x_1 .. x_d are odd */
    c = 0;
    for( i = 1; i <= d; i++ )
 80a4682:	f10c 0c01 	add.w	ip, ip, #1
 80a4686:	e7dd      	b.n	80a4644 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0xd0>

    /* actual scalar recoding */
    ecp_comb_recode_core( k, d, w, &M );

cleanup:
    mbedtls_mpi_free( &mm );
 80a4688:	a80d      	add	r0, sp, #52	; 0x34
 80a468a:	f007 fd2c 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &M );
 80a468e:	a80a      	add	r0, sp, #40	; 0x28
 80a4690:	f007 fd29 	bl	80ac0e6 <mbedtls_mpi_free>
        if( rs_ctx->rsm->state == ecp_rsm_final_norm )
            goto final_norm;
    }
#endif

    MBEDTLS_MPI_CHK( ecp_comb_recode_scalar( grp, m, k, d, w,
 80a4694:	2c00      	cmp	r4, #0
 80a4696:	f040 80d3 	bne.w	80a4840 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2cc>
 80a469a:	e001      	b.n	80a46a0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x12c>
    mbedtls_mpi_init( &M );
    mbedtls_mpi_init( &mm );

    /* N is always odd (see above), just make extra sure */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80a469c:	4c6a      	ldr	r4, [pc, #424]	; (80a4848 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2d4>)
 80a469e:	e0cf      	b.n	80a4840 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2cc>
{
    int ret;
    mbedtls_ecp_point Txi;
    size_t i;

    mbedtls_ecp_point_init( &Txi );
 80a46a0:	a80d      	add	r0, sp, #52	; 0x34
 80a46a2:	f7ff fccd 	bl	80a4040 <mbedtls_ecp_point_init>
    else
#endif
    {
        /* Start with a non-zero point and randomize its coordinates */
        i = d;
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, T_size, x[i] ) );
 80a46a6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80a46a8:	ab16      	add	r3, sp, #88	; 0x58
 80a46aa:	5c9b      	ldrb	r3, [r3, r2]
 80a46ac:	4631      	mov	r1, r6
 80a46ae:	9300      	str	r3, [sp, #0]
 80a46b0:	9a02      	ldr	r2, [sp, #8]
 80a46b2:	9b03      	ldr	r3, [sp, #12]
 80a46b4:	4628      	mov	r0, r5
 80a46b6:	f7ff fc64 	bl	80a3f82 <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh>
 80a46ba:	4604      	mov	r4, r0
 80a46bc:	2800      	cmp	r0, #0
 80a46be:	f040 80af 	bne.w	80a4820 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ac>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
 80a46c2:	f106 0918 	add.w	r9, r6, #24
 80a46c6:	2101      	movs	r1, #1
 80a46c8:	4648      	mov	r0, r9
 80a46ca:	f007 fde7 	bl	80ac29c <mbedtls_mpi_lset>
 80a46ce:	4604      	mov	r4, r0
 80a46d0:	2800      	cmp	r0, #0
 80a46d2:	f040 80a5 	bne.w	80a4820 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ac>
        if( f_rng != 0 )
 80a46d6:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80a46d8:	b943      	cbnz	r3, 80a46ec <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x178>
 80a46da:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80a46dc:	ab58      	add	r3, sp, #352	; 0x160
 80a46de:	189f      	adds	r7, r3, r2
 80a46e0:	f46f 7384 	mvn.w	r3, #264	; 0x108
 80a46e4:	441f      	add	r7, r3
 80a46e6:	f10d 0957 	add.w	r9, sp, #87	; 0x57
 80a46ea:	e093      	b.n	80a4814 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2a0>
#if defined(MBEDTLS_ECP_RANDOMIZE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_randomize_jac( grp, pt, f_rng, p_rng ) );
#endif /* MBEDTLS_ECP_RANDOMIZE_JAC_ALT */

    p_size = ( grp->pbits + 7 ) / 8;
 80a46ec:	6dab      	ldr	r3, [r5, #88]	; 0x58
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 80a46ee:	af07      	add	r7, sp, #28
#if defined(MBEDTLS_ECP_RANDOMIZE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_randomize_jac( grp, pt, f_rng, p_rng ) );
#endif /* MBEDTLS_ECP_RANDOMIZE_JAC_ALT */

    p_size = ( grp->pbits + 7 ) / 8;
 80a46f0:	3307      	adds	r3, #7
 80a46f2:	08db      	lsrs	r3, r3, #3
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 80a46f4:	4638      	mov	r0, r7
#if defined(MBEDTLS_ECP_RANDOMIZE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_randomize_jac( grp, pt, f_rng, p_rng ) );
#endif /* MBEDTLS_ECP_RANDOMIZE_JAC_ALT */

    p_size = ( grp->pbits + 7 ) / 8;
 80a46f6:	9304      	str	r3, [sp, #16]
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 80a46f8:	f007 fcef 	bl	80ac0da <mbedtls_mpi_init>
 80a46fc:	a80a      	add	r0, sp, #40	; 0x28
 80a46fe:	f007 fcec 	bl	80ac0da <mbedtls_mpi_init>
 80a4702:	f04f 0a0c 	mov.w	sl, #12
    /* Generate l such that 1 < l < p */
    do
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );

        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 80a4706:	f105 0b04 	add.w	fp, r5, #4
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );

    /* Generate l such that 1 < l < p */
    do
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
 80a470a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80a470c:	9a65      	ldr	r2, [sp, #404]	; 0x194
 80a470e:	9904      	ldr	r1, [sp, #16]
 80a4710:	4638      	mov	r0, r7
 80a4712:	f008 fe3f 	bl	80ad394 <mbedtls_mpi_fill_random>
 80a4716:	4603      	mov	r3, r0
 80a4718:	2800      	cmp	r0, #0
 80a471a:	d156      	bne.n	80a47ca <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x256>

        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 80a471c:	4659      	mov	r1, fp
 80a471e:	4638      	mov	r0, r7
 80a4720:	f007 ffc2 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80a4724:	2800      	cmp	r0, #0
 80a4726:	db04      	blt.n	80a4732 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x1be>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 80a4728:	2101      	movs	r1, #1
 80a472a:	4638      	mov	r0, r7
 80a472c:	f007 fedd 	bl	80ac4ea <mbedtls_mpi_shift_r>
 80a4730:	e7f1      	b.n	80a4716 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x1a2>

        if( count++ > 10 )
 80a4732:	f1ba 0a01 	subs.w	sl, sl, #1
 80a4736:	d054      	beq.n	80a47e2 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x26e>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
    }
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
 80a4738:	2101      	movs	r1, #1
 80a473a:	4638      	mov	r0, r7
 80a473c:	f007 fff9 	bl	80ac732 <mbedtls_mpi_cmp_int>

    p_size = ( grp->pbits + 7 ) / 8;
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );

    /* Generate l such that 1 < l < p */
    do
 80a4740:	2800      	cmp	r0, #0
 80a4742:	dde2      	ble.n	80a470a <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x196>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
    }
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );

    /* Z = l * Z */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
 80a4744:	463a      	mov	r2, r7
 80a4746:	4649      	mov	r1, r9
 80a4748:	4648      	mov	r0, r9
 80a474a:	f008 f911 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a474e:	4603      	mov	r3, r0
 80a4750:	2800      	cmp	r0, #0
 80a4752:	d13a      	bne.n	80a47ca <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x256>
 80a4754:	4629      	mov	r1, r5
 80a4756:	4648      	mov	r0, r9
 80a4758:	f7ff f816 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a475c:	4603      	mov	r3, r0
 80a475e:	bba0      	cbnz	r0, 80a47ca <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x256>

    /* X = l^2 * X */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 80a4760:	463a      	mov	r2, r7
 80a4762:	4639      	mov	r1, r7
 80a4764:	a80a      	add	r0, sp, #40	; 0x28
 80a4766:	f008 f903 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a476a:	4603      	mov	r3, r0
 80a476c:	bb68      	cbnz	r0, 80a47ca <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x256>
 80a476e:	4629      	mov	r1, r5
 80a4770:	a80a      	add	r0, sp, #40	; 0x28
 80a4772:	f7ff f809 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a4776:	4603      	mov	r3, r0
 80a4778:	bb38      	cbnz	r0, 80a47ca <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x256>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 80a477a:	aa0a      	add	r2, sp, #40	; 0x28
 80a477c:	4631      	mov	r1, r6
 80a477e:	4630      	mov	r0, r6
 80a4780:	f008 f8f6 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a4784:	4603      	mov	r3, r0
 80a4786:	bb00      	cbnz	r0, 80a47ca <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x256>
 80a4788:	4629      	mov	r1, r5
 80a478a:	4630      	mov	r0, r6
 80a478c:	f7fe fffc 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a4790:	4603      	mov	r3, r0
 80a4792:	b9d0      	cbnz	r0, 80a47ca <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x256>

    /* Y = l^3 * Y */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
 80a4794:	a90a      	add	r1, sp, #40	; 0x28
 80a4796:	463a      	mov	r2, r7
 80a4798:	4608      	mov	r0, r1
 80a479a:	f008 f8e9 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a479e:	4603      	mov	r3, r0
 80a47a0:	b998      	cbnz	r0, 80a47ca <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x256>
 80a47a2:	4629      	mov	r1, r5
 80a47a4:	a80a      	add	r0, sp, #40	; 0x28
 80a47a6:	f7fe ffef 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a47aa:	4603      	mov	r3, r0
 80a47ac:	b968      	cbnz	r0, 80a47ca <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x256>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ll ) ); MOD_MUL( pt->Y );
 80a47ae:	f106 090c 	add.w	r9, r6, #12
 80a47b2:	aa0a      	add	r2, sp, #40	; 0x28
 80a47b4:	4649      	mov	r1, r9
 80a47b6:	4648      	mov	r0, r9
 80a47b8:	f008 f8da 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a47bc:	4603      	mov	r3, r0
 80a47be:	b920      	cbnz	r0, 80a47ca <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x256>
 80a47c0:	4629      	mov	r1, r5
 80a47c2:	4648      	mov	r0, r9
 80a47c4:	f7fe ffe0 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a47c8:	4603      	mov	r3, r0

cleanup:
    mbedtls_mpi_free( &l ); mbedtls_mpi_free( &ll );
 80a47ca:	4638      	mov	r0, r7
 80a47cc:	9304      	str	r3, [sp, #16]
 80a47ce:	f007 fc8a 	bl	80ac0e6 <mbedtls_mpi_free>
 80a47d2:	a80a      	add	r0, sp, #40	; 0x28
 80a47d4:	f007 fc87 	bl	80ac0e6 <mbedtls_mpi_free>
        /* Start with a non-zero point and randomize its coordinates */
        i = d;
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, T_size, x[i] ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
        if( f_rng != 0 )
            MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
 80a47d8:	9b04      	ldr	r3, [sp, #16]
 80a47da:	2b00      	cmp	r3, #0
 80a47dc:	f43f af7d 	beq.w	80a46da <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x166>
 80a47e0:	e01b      	b.n	80a481a <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2a6>

        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );

        if( count++ > 10 )
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 80a47e2:	4b1a      	ldr	r3, [pc, #104]	; (80a484c <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2d8>)
 80a47e4:	e019      	b.n	80a481a <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2a6>
    while( i != 0 )
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL + MBEDTLS_ECP_OPS_ADD );
        --i;

        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
 80a47e6:	4632      	mov	r2, r6
 80a47e8:	4631      	mov	r1, r6
 80a47ea:	4628      	mov	r0, r5
 80a47ec:	f7ff f810 	bl	80a3810 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_>
 80a47f0:	b9a8      	cbnz	r0, 80a481e <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2aa>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
 80a47f2:	f817 3901 	ldrb.w	r3, [r7], #-1
 80a47f6:	9a02      	ldr	r2, [sp, #8]
 80a47f8:	9300      	str	r3, [sp, #0]
 80a47fa:	a90d      	add	r1, sp, #52	; 0x34
 80a47fc:	9b03      	ldr	r3, [sp, #12]
 80a47fe:	4628      	mov	r0, r5
 80a4800:	f7ff fbbf 	bl	80a3f82 <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh>
 80a4804:	b958      	cbnz	r0, 80a481e <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2aa>
        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
 80a4806:	ab0d      	add	r3, sp, #52	; 0x34
 80a4808:	4632      	mov	r2, r6
 80a480a:	4631      	mov	r1, r6
 80a480c:	4628      	mov	r0, r5
 80a480e:	f7ff fcd1 	bl	80a41b4 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_>
 80a4812:	b920      	cbnz	r0, 80a481e <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2aa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
        if( f_rng != 0 )
            MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
    }

    while( i != 0 )
 80a4814:	454f      	cmp	r7, r9
 80a4816:	d1e6      	bne.n	80a47e6 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x272>
 80a4818:	e002      	b.n	80a4820 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ac>
        /* Start with a non-zero point and randomize its coordinates */
        i = d;
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, T_size, x[i] ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
        if( f_rng != 0 )
            MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
 80a481a:	461c      	mov	r4, r3
 80a481c:	e000      	b.n	80a4820 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2ac>
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL + MBEDTLS_ECP_OPS_ADD );
        --i;

        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
 80a481e:	4604      	mov	r4, r0
        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
    }

cleanup:

    mbedtls_ecp_point_free( &Txi );
 80a4820:	a80d      	add	r0, sp, #52	; 0x34
 80a4822:	f7ff fc4a 	bl	80a40ba <mbedtls_ecp_point_free>
    }
#endif

    MBEDTLS_MPI_CHK( ecp_comb_recode_scalar( grp, m, k, d, w,
                                            &parity_trick ) );
    MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, RR, T, T_size, k, d,
 80a4826:	b95c      	cbnz	r4, 80a4840 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2cc>
                                        f_rng, p_rng, rs_ctx ) );
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, RR, parity_trick ) );
 80a4828:	4642      	mov	r2, r8
 80a482a:	4631      	mov	r1, r6
 80a482c:	4628      	mov	r0, r5
 80a482e:	f7ff fb85 	bl	80a3f3c <_ZL19ecp_safe_invert_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointh>
 80a4832:	4604      	mov	r4, r0
 80a4834:	b920      	cbnz	r0, 80a4840 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6+0x2cc>
        rs_ctx->rsm->state = ecp_rsm_final_norm;

final_norm:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV );
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, RR ) );
 80a4836:	4631      	mov	r1, r6
 80a4838:	4628      	mov	r0, r5
 80a483a:	f7ff fa1e 	bl	80a3c7a <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point>
 80a483e:	4604      	mov	r4, r0
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, RR ) );
#endif

cleanup:
    return( ret );
}
 80a4840:	4620      	mov	r0, r4
 80a4842:	b059      	add	sp, #356	; 0x164
 80a4844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4848:	ffffb080 	.word	0xffffb080
 80a484c:	ffffb300 	.word	0xffffb300

080a4850 <mbedtls_ecp_is_zero>:

/*
 * Tell if a point is zero
 */
int mbedtls_ecp_is_zero( mbedtls_ecp_point *pt )
{
 80a4850:	b508      	push	{r3, lr}
    ECP_VALIDATE_RET( pt != NULL );

    return( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 );
 80a4852:	2100      	movs	r1, #0
 80a4854:	3018      	adds	r0, #24
 80a4856:	f007 ff6c 	bl	80ac732 <mbedtls_mpi_cmp_int>
}
 80a485a:	fab0 f080 	clz	r0, r0
 80a485e:	0940      	lsrs	r0, r0, #5
 80a4860:	bd08      	pop	{r3, pc}
	...

080a4864 <mbedtls_ecp_point_write_binary>:
 */
int mbedtls_ecp_point_write_binary( const mbedtls_ecp_group *grp,
                                    const mbedtls_ecp_point *P,
                                    int format, size_t *olen,
                                    unsigned char *buf, size_t buflen )
{
 80a4864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a4868:	460e      	mov	r6, r1
 80a486a:	4605      	mov	r5, r0
                      format == MBEDTLS_ECP_PF_COMPRESSED );

    /*
     * Common case: P == 0
     */
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 80a486c:	2100      	movs	r1, #0
 80a486e:	f106 0018 	add.w	r0, r6, #24
 */
int mbedtls_ecp_point_write_binary( const mbedtls_ecp_group *grp,
                                    const mbedtls_ecp_point *P,
                                    int format, size_t *olen,
                                    unsigned char *buf, size_t buflen )
{
 80a4872:	4691      	mov	r9, r2
 80a4874:	4698      	mov	r8, r3
 80a4876:	9c08      	ldr	r4, [sp, #32]
 80a4878:	9f09      	ldr	r7, [sp, #36]	; 0x24
                      format == MBEDTLS_ECP_PF_COMPRESSED );

    /*
     * Common case: P == 0
     */
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 80a487a:	f007 ff5a 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a487e:	b948      	cbnz	r0, 80a4894 <mbedtls_ecp_point_write_binary+0x30>
    {
        if( buflen < 1 )
 80a4880:	b917      	cbnz	r7, 80a4888 <mbedtls_ecp_point_write_binary+0x24>
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
 80a4882:	481f      	ldr	r0, [pc, #124]	; (80a4900 <mbedtls_ecp_point_write_binary+0x9c>)
 80a4884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

        buf[0] = 0x00;
        *olen = 1;
 80a4888:	2301      	movs	r3, #1
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
    {
        if( buflen < 1 )
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );

        buf[0] = 0x00;
 80a488a:	7020      	strb	r0, [r4, #0]
        *olen = 1;
 80a488c:	f8c8 3000 	str.w	r3, [r8]

        return( 0 );
 80a4890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }

    plen = mbedtls_mpi_size( &grp->P );
 80a4894:	1d28      	adds	r0, r5, #4
 80a4896:	f007 fd67 	bl	80ac368 <mbedtls_mpi_size>
 80a489a:	4605      	mov	r5, r0

    if( format == MBEDTLS_ECP_PF_UNCOMPRESSED )
 80a489c:	f1b9 0f00 	cmp.w	r9, #0
 80a48a0:	d114      	bne.n	80a48cc <mbedtls_ecp_point_write_binary+0x68>
    {
        *olen = 2 * plen + 1;
 80a48a2:	0042      	lsls	r2, r0, #1
 80a48a4:	3201      	adds	r2, #1

        if( buflen < *olen )
 80a48a6:	4297      	cmp	r7, r2

    plen = mbedtls_mpi_size( &grp->P );

    if( format == MBEDTLS_ECP_PF_UNCOMPRESSED )
    {
        *olen = 2 * plen + 1;
 80a48a8:	f8c8 2000 	str.w	r2, [r8]

        if( buflen < *olen )
 80a48ac:	d3e9      	bcc.n	80a4882 <mbedtls_ecp_point_write_binary+0x1e>
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );

        buf[0] = 0x04;
 80a48ae:	4621      	mov	r1, r4
 80a48b0:	2304      	movs	r3, #4
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 80a48b2:	4602      	mov	r2, r0
        *olen = 2 * plen + 1;

        if( buflen < *olen )
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );

        buf[0] = 0x04;
 80a48b4:	f801 3b01 	strb.w	r3, [r1], #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 80a48b8:	4630      	mov	r0, r6
 80a48ba:	f007 fd92 	bl	80ac3e2 <mbedtls_mpi_write_binary>
 80a48be:	b9e8      	cbnz	r0, 80a48fc <mbedtls_ecp_point_write_binary+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->Y, buf + 1 + plen, plen ) );
 80a48c0:	1c69      	adds	r1, r5, #1
 80a48c2:	462a      	mov	r2, r5
 80a48c4:	4421      	add	r1, r4
 80a48c6:	f106 000c 	add.w	r0, r6, #12
 80a48ca:	e012      	b.n	80a48f2 <mbedtls_ecp_point_write_binary+0x8e>
    }
    else if( format == MBEDTLS_ECP_PF_COMPRESSED )
 80a48cc:	f1b9 0f01 	cmp.w	r9, #1
 80a48d0:	d113      	bne.n	80a48fa <mbedtls_ecp_point_write_binary+0x96>
    {
        *olen = plen + 1;
 80a48d2:	1c43      	adds	r3, r0, #1

        if( buflen < *olen )
 80a48d4:	429f      	cmp	r7, r3
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->Y, buf + 1 + plen, plen ) );
    }
    else if( format == MBEDTLS_ECP_PF_COMPRESSED )
    {
        *olen = plen + 1;
 80a48d6:	f8c8 3000 	str.w	r3, [r8]

        if( buflen < *olen )
 80a48da:	d3d2      	bcc.n	80a4882 <mbedtls_ecp_point_write_binary+0x1e>
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );

        buf[0] = 0x02 + mbedtls_mpi_get_bit( &P->Y, 0 );
 80a48dc:	2100      	movs	r1, #0
 80a48de:	f106 000c 	add.w	r0, r6, #12
 80a48e2:	f007 fcf7 	bl	80ac2d4 <mbedtls_mpi_get_bit>
 80a48e6:	4621      	mov	r1, r4
 80a48e8:	3002      	adds	r0, #2
 80a48ea:	f801 0b01 	strb.w	r0, [r1], #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 80a48ee:	462a      	mov	r2, r5
 80a48f0:	4630      	mov	r0, r6
    }

cleanup:
    return( ret );
}
 80a48f2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

        if( buflen < *olen )
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );

        buf[0] = 0x02 + mbedtls_mpi_get_bit( &P->Y, 0 );
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 80a48f6:	f007 bd74 	b.w	80ac3e2 <mbedtls_mpi_write_binary>
int mbedtls_ecp_point_write_binary( const mbedtls_ecp_group *grp,
                                    const mbedtls_ecp_point *P,
                                    int format, size_t *olen,
                                    unsigned char *buf, size_t buflen )
{
    int ret = 0;
 80a48fa:	2000      	movs	r0, #0
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
    }

cleanup:
    return( ret );
}
 80a48fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a4900:	ffffb100 	.word	0xffffb100

080a4904 <mbedtls_ecp_point_read_binary>:
 * Import a point from unsigned binary data (SEC1 2.3.4)
 */
int mbedtls_ecp_point_read_binary( const mbedtls_ecp_group *grp,
                                   mbedtls_ecp_point *pt,
                                   const unsigned char *buf, size_t ilen )
{
 80a4904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4906:	460c      	mov	r4, r1
 80a4908:	4615      	mov	r5, r2
    size_t plen;
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( pt  != NULL );
    ECP_VALIDATE_RET( buf != NULL );

    if( ilen < 1 )
 80a490a:	461f      	mov	r7, r3
 80a490c:	b90b      	cbnz	r3, 80a4912 <mbedtls_ecp_point_read_binary+0xe>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80a490e:	4816      	ldr	r0, [pc, #88]	; (80a4968 <mbedtls_ecp_point_read_binary+0x64>)
 80a4910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( buf[0] == 0x00 )
 80a4912:	7813      	ldrb	r3, [r2, #0]
 80a4914:	b933      	cbnz	r3, 80a4924 <mbedtls_ecp_point_read_binary+0x20>
    {
        if( ilen == 1 )
 80a4916:	2f01      	cmp	r7, #1
 80a4918:	d1f9      	bne.n	80a490e <mbedtls_ecp_point_read_binary+0xa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );

cleanup:
    return( ret );
}
 80a491a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    if( buf[0] == 0x00 )
    {
        if( ilen == 1 )
            return( mbedtls_ecp_set_zero( pt ) );
 80a491e:	4608      	mov	r0, r1
 80a4920:	f7ff bc34 	b.w	80a418c <mbedtls_ecp_set_zero>
        else
            return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }

    plen = mbedtls_mpi_size( &grp->P );
 80a4924:	3004      	adds	r0, #4
 80a4926:	f007 fd1f 	bl	80ac368 <mbedtls_mpi_size>

    if( buf[0] != 0x04 )
 80a492a:	782b      	ldrb	r3, [r5, #0]
            return( mbedtls_ecp_set_zero( pt ) );
        else
            return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }

    plen = mbedtls_mpi_size( &grp->P );
 80a492c:	4606      	mov	r6, r0

    if( buf[0] != 0x04 )
 80a492e:	2b04      	cmp	r3, #4
 80a4930:	d118      	bne.n	80a4964 <mbedtls_ecp_point_read_binary+0x60>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );

    if( ilen != 2 * plen + 1 )
 80a4932:	0042      	lsls	r2, r0, #1
 80a4934:	3201      	adds	r2, #1
 80a4936:	4297      	cmp	r7, r2
 80a4938:	d1e9      	bne.n	80a490e <mbedtls_ecp_point_read_binary+0xa>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->X, buf + 1, plen ) );
 80a493a:	4602      	mov	r2, r0
 80a493c:	1c69      	adds	r1, r5, #1
 80a493e:	4620      	mov	r0, r4
 80a4940:	f007 fd18 	bl	80ac374 <mbedtls_mpi_read_binary>
 80a4944:	b978      	cbnz	r0, 80a4966 <mbedtls_ecp_point_read_binary+0x62>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );
 80a4946:	1c71      	adds	r1, r6, #1
 80a4948:	4632      	mov	r2, r6
 80a494a:	4429      	add	r1, r5
 80a494c:	f104 000c 	add.w	r0, r4, #12
 80a4950:	f007 fd10 	bl	80ac374 <mbedtls_mpi_read_binary>
 80a4954:	b938      	cbnz	r0, 80a4966 <mbedtls_ecp_point_read_binary+0x62>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 80a4956:	f104 0018 	add.w	r0, r4, #24
 80a495a:	2101      	movs	r1, #1

cleanup:
    return( ret );
}
 80a495c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if( ilen != 2 * plen + 1 )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->X, buf + 1, plen ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 80a4960:	f007 bc9c 	b.w	80ac29c <mbedtls_mpi_lset>
    }

    plen = mbedtls_mpi_size( &grp->P );

    if( buf[0] != 0x04 )
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 80a4964:	4801      	ldr	r0, [pc, #4]	; (80a496c <mbedtls_ecp_point_read_binary+0x68>)
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );

cleanup:
    return( ret );
}
 80a4966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4968:	ffffb080 	.word	0xffffb080
 80a496c:	ffffb180 	.word	0xffffb180

080a4970 <mbedtls_ecp_tls_read_point>:
    ECP_VALIDATE_RET( *buf != NULL );

    /*
     * We must have at least two bytes (1 for length, at least one for data)
     */
    if( buf_len < 2 )
 80a4970:	2b01      	cmp	r3, #1
 *      } ECPoint;
 */
int mbedtls_ecp_tls_read_point( const mbedtls_ecp_group *grp,
                                mbedtls_ecp_point *pt,
                                const unsigned char **buf, size_t buf_len )
{
 80a4972:	b430      	push	{r4, r5}
 80a4974:	4615      	mov	r5, r2
    ECP_VALIDATE_RET( *buf != NULL );

    /*
     * We must have at least two bytes (1 for length, at least one for data)
     */
    if( buf_len < 2 )
 80a4976:	d90d      	bls.n	80a4994 <mbedtls_ecp_tls_read_point+0x24>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    data_len = *(*buf)++;
 80a4978:	6814      	ldr	r4, [r2, #0]
 80a497a:	1c62      	adds	r2, r4, #1
 80a497c:	602a      	str	r2, [r5, #0]
 80a497e:	7824      	ldrb	r4, [r4, #0]
    if( data_len < 1 || data_len > buf_len - 1 )
 80a4980:	b144      	cbz	r4, 80a4994 <mbedtls_ecp_tls_read_point+0x24>
 80a4982:	3b01      	subs	r3, #1
 80a4984:	429c      	cmp	r4, r3
 80a4986:	d805      	bhi.n	80a4994 <mbedtls_ecp_tls_read_point+0x24>

    /*
     * Save buffer start for read_binary and update buf
     */
    buf_start = *buf;
    *buf += data_len;
 80a4988:	1913      	adds	r3, r2, r4
 80a498a:	602b      	str	r3, [r5, #0]

    return( mbedtls_ecp_point_read_binary( grp, pt, buf_start, data_len ) );
 80a498c:	4623      	mov	r3, r4
}
 80a498e:	bc30      	pop	{r4, r5}
     * Save buffer start for read_binary and update buf
     */
    buf_start = *buf;
    *buf += data_len;

    return( mbedtls_ecp_point_read_binary( grp, pt, buf_start, data_len ) );
 80a4990:	f7ff bfb8 	b.w	80a4904 <mbedtls_ecp_point_read_binary>
}
 80a4994:	4801      	ldr	r0, [pc, #4]	; (80a499c <mbedtls_ecp_tls_read_point+0x2c>)
 80a4996:	bc30      	pop	{r4, r5}
 80a4998:	4770      	bx	lr
 80a499a:	bf00      	nop
 80a499c:	ffffb080 	.word	0xffffb080

080a49a0 <mbedtls_ecp_tls_write_point>:
 *      } ECPoint;
 */
int mbedtls_ecp_tls_write_point( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt,
                         int format, size_t *olen,
                         unsigned char *buf, size_t blen )
{
 80a49a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a49a2:	9c07      	ldr	r4, [sp, #28]
 80a49a4:	461d      	mov	r5, r3
 80a49a6:	9e06      	ldr	r6, [sp, #24]
                      format == MBEDTLS_ECP_PF_COMPRESSED );

    /*
     * buffer length must be at least one, for our length byte
     */
    if( blen < 1 )
 80a49a8:	b164      	cbz	r4, 80a49c4 <mbedtls_ecp_tls_write_point+0x24>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    if( ( ret = mbedtls_ecp_point_write_binary( grp, pt, format,
 80a49aa:	3c01      	subs	r4, #1
 80a49ac:	9401      	str	r4, [sp, #4]
 80a49ae:	1c74      	adds	r4, r6, #1
 80a49b0:	9400      	str	r4, [sp, #0]
 80a49b2:	f7ff ff57 	bl	80a4864 <mbedtls_ecp_point_write_binary>
 80a49b6:	b930      	cbnz	r0, 80a49c6 <mbedtls_ecp_tls_write_point+0x26>
        return( ret );

    /*
     * write length to the first byte and update total length
     */
    buf[0] = (unsigned char) *olen;
 80a49b8:	682b      	ldr	r3, [r5, #0]
 80a49ba:	7033      	strb	r3, [r6, #0]
    ++*olen;
 80a49bc:	682b      	ldr	r3, [r5, #0]
 80a49be:	3301      	adds	r3, #1
 80a49c0:	602b      	str	r3, [r5, #0]

    return( 0 );
 80a49c2:	e000      	b.n	80a49c6 <mbedtls_ecp_tls_write_point+0x26>

    /*
     * buffer length must be at least one, for our length byte
     */
    if( blen < 1 )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80a49c4:	4801      	ldr	r0, [pc, #4]	; (80a49cc <mbedtls_ecp_tls_write_point+0x2c>)
     */
    buf[0] = (unsigned char) *olen;
    ++*olen;

    return( 0 );
}
 80a49c6:	b002      	add	sp, #8
 80a49c8:	bd70      	pop	{r4, r5, r6, pc}
 80a49ca:	bf00      	nop
 80a49cc:	ffffb080 	.word	0xffffb080

080a49d0 <mbedtls_ecp_tls_read_group_id>:
    ECP_VALIDATE_RET( *buf != NULL );

    /*
     * We expect at least three bytes (see below)
     */
    if( len < 3 )
 80a49d0:	2a02      	cmp	r2, #2
 * Read a group id from an ECParameters record (RFC 4492) and convert it to
 * mbedtls_ecp_group_id.
 */
int mbedtls_ecp_tls_read_group_id( mbedtls_ecp_group_id *grp,
                                   const unsigned char **buf, size_t len )
{
 80a49d2:	b510      	push	{r4, lr}
 80a49d4:	4604      	mov	r4, r0
    ECP_VALIDATE_RET( *buf != NULL );

    /*
     * We expect at least three bytes (see below)
     */
    if( len < 3 )
 80a49d6:	d801      	bhi.n	80a49dc <mbedtls_ecp_tls_read_group_id+0xc>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80a49d8:	480c      	ldr	r0, [pc, #48]	; (80a4a0c <mbedtls_ecp_tls_read_group_id+0x3c>)
 80a49da:	bd10      	pop	{r4, pc}

    /*
     * First byte is curve_type; only named_curve is handled
     */
    if( *(*buf)++ != MBEDTLS_ECP_TLS_NAMED_CURVE )
 80a49dc:	680b      	ldr	r3, [r1, #0]
 80a49de:	1c5a      	adds	r2, r3, #1
 80a49e0:	600a      	str	r2, [r1, #0]
 80a49e2:	781a      	ldrb	r2, [r3, #0]
 80a49e4:	2a03      	cmp	r2, #3
 80a49e6:	d1f7      	bne.n	80a49d8 <mbedtls_ecp_tls_read_group_id+0x8>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /*
     * Next two bytes are the namedcurve value
     */
    tls_id = *(*buf)++;
 80a49e8:	1c9a      	adds	r2, r3, #2
 80a49ea:	600a      	str	r2, [r1, #0]
    tls_id <<= 8;
    tls_id |= *(*buf)++;
 80a49ec:	1cda      	adds	r2, r3, #3
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /*
     * Next two bytes are the namedcurve value
     */
    tls_id = *(*buf)++;
 80a49ee:	7858      	ldrb	r0, [r3, #1]
    tls_id <<= 8;
    tls_id |= *(*buf)++;
 80a49f0:	600a      	str	r2, [r1, #0]

    if( ( curve_info = mbedtls_ecp_curve_info_from_tls_id( tls_id ) ) == NULL )
 80a49f2:	789b      	ldrb	r3, [r3, #2]
 80a49f4:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a49f8:	f7ff fb14 	bl	80a4024 <mbedtls_ecp_curve_info_from_tls_id>
 80a49fc:	b118      	cbz	r0, 80a4a06 <mbedtls_ecp_tls_read_group_id+0x36>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );

    *grp = curve_info->grp_id;
 80a49fe:	7803      	ldrb	r3, [r0, #0]

    return( 0 );
 80a4a00:	2000      	movs	r0, #0
    tls_id |= *(*buf)++;

    if( ( curve_info = mbedtls_ecp_curve_info_from_tls_id( tls_id ) ) == NULL )
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );

    *grp = curve_info->grp_id;
 80a4a02:	7023      	strb	r3, [r4, #0]

    return( 0 );
 80a4a04:	bd10      	pop	{r4, pc}
    tls_id = *(*buf)++;
    tls_id <<= 8;
    tls_id |= *(*buf)++;

    if( ( curve_info = mbedtls_ecp_curve_info_from_tls_id( tls_id ) ) == NULL )
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 80a4a06:	4802      	ldr	r0, [pc, #8]	; (80a4a10 <mbedtls_ecp_tls_read_group_id+0x40>)

    *grp = curve_info->grp_id;

    return( 0 );
}
 80a4a08:	bd10      	pop	{r4, pc}
 80a4a0a:	bf00      	nop
 80a4a0c:	ffffb080 	.word	0xffffb080
 80a4a10:	ffffb180 	.word	0xffffb180

080a4a14 <mbedtls_ecp_check_pubkey>:
/*
 * Check that a point is valid as a public key
 */
int mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp,
                              const mbedtls_ecp_point *pt )
{
 80a4a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4a16:	460f      	mov	r7, r1
 80a4a18:	b087      	sub	sp, #28
 80a4a1a:	4605      	mov	r5, r0
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( pt  != NULL );

    /* Must use affine coordinates */
    if( mbedtls_mpi_cmp_int( &pt->Z, 1 ) != 0 )
 80a4a1c:	2101      	movs	r1, #1
 80a4a1e:	f107 0018 	add.w	r0, r7, #24
 80a4a22:	f007 fe86 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a4a26:	4606      	mov	r6, r0
 80a4a28:	bb10      	cbnz	r0, 80a4a70 <mbedtls_ecp_check_pubkey+0x5c>
#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
        return( ecp_check_pubkey_mx( grp, pt ) );
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 80a4a2a:	4628      	mov	r0, r5
 80a4a2c:	f7fe fea1 	bl	80a3772 <_ZL12ecp_get_typePK17mbedtls_ecp_group>
 80a4a30:	2801      	cmp	r0, #1
 80a4a32:	d11b      	bne.n	80a4a6c <mbedtls_ecp_check_pubkey+0x58>
{
    int ret;
    mbedtls_mpi YY, RHS;

    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 80a4a34:	4631      	mov	r1, r6
 80a4a36:	4638      	mov	r0, r7
 80a4a38:	f007 fe7b 	bl	80ac732 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 80a4a3c:	2800      	cmp	r0, #0
 80a4a3e:	db17      	blt.n	80a4a70 <mbedtls_ecp_check_pubkey+0x5c>
    int ret;
    mbedtls_mpi YY, RHS;

    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 80a4a40:	f107 040c 	add.w	r4, r7, #12
 80a4a44:	4631      	mov	r1, r6
 80a4a46:	4620      	mov	r0, r4
 80a4a48:	f007 fe73 	bl	80ac732 <mbedtls_mpi_cmp_int>
{
    int ret;
    mbedtls_mpi YY, RHS;

    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 80a4a4c:	2800      	cmp	r0, #0
 80a4a4e:	db0f      	blt.n	80a4a70 <mbedtls_ecp_check_pubkey+0x5c>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 80a4a50:	1d2e      	adds	r6, r5, #4
 80a4a52:	4631      	mov	r1, r6
 80a4a54:	4638      	mov	r0, r7
 80a4a56:	f007 fe27 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
    int ret;
    mbedtls_mpi YY, RHS;

    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 80a4a5a:	2800      	cmp	r0, #0
 80a4a5c:	da08      	bge.n	80a4a70 <mbedtls_ecp_check_pubkey+0x5c>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )
 80a4a5e:	4631      	mov	r1, r6
 80a4a60:	4620      	mov	r0, r4
 80a4a62:	f007 fe21 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
    mbedtls_mpi YY, RHS;

    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 80a4a66:	2800      	cmp	r0, #0
 80a4a68:	da02      	bge.n	80a4a70 <mbedtls_ecp_check_pubkey+0x5c>
 80a4a6a:	e003      	b.n	80a4a74 <mbedtls_ecp_check_pubkey+0x60>
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
        return( ecp_check_pubkey_sw( grp, pt ) );
#endif
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80a4a6c:	4845      	ldr	r0, [pc, #276]	; (80a4b84 <mbedtls_ecp_check_pubkey+0x170>)
 80a4a6e:	e086      	b.n	80a4b7e <mbedtls_ecp_check_pubkey+0x16a>
    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 80a4a70:	4845      	ldr	r0, [pc, #276]	; (80a4b88 <mbedtls_ecp_check_pubkey+0x174>)
 80a4a72:	e084      	b.n	80a4b7e <mbedtls_ecp_check_pubkey+0x16a>

    mbedtls_mpi_init( &YY ); mbedtls_mpi_init( &RHS );
 80a4a74:	4668      	mov	r0, sp
 80a4a76:	f007 fb30 	bl	80ac0da <mbedtls_mpi_init>
 80a4a7a:	a803      	add	r0, sp, #12
 80a4a7c:	f007 fb2d 	bl	80ac0da <mbedtls_mpi_init>

    /*
     * YY = Y^2
     * RHS = X (X^2 + A) + B = X^3 + A X + B
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
 80a4a80:	4622      	mov	r2, r4
 80a4a82:	4621      	mov	r1, r4
 80a4a84:	4668      	mov	r0, sp
 80a4a86:	f007 ff73 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a4a8a:	4604      	mov	r4, r0
 80a4a8c:	2800      	cmp	r0, #0
 80a4a8e:	d14d      	bne.n	80a4b2c <mbedtls_ecp_check_pubkey+0x118>
 80a4a90:	4629      	mov	r1, r5
 80a4a92:	4668      	mov	r0, sp
 80a4a94:	f7fe fe78 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a4a98:	4604      	mov	r4, r0
 80a4a9a:	2800      	cmp	r0, #0
 80a4a9c:	d146      	bne.n	80a4b2c <mbedtls_ecp_check_pubkey+0x118>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
 80a4a9e:	463a      	mov	r2, r7
 80a4aa0:	4639      	mov	r1, r7
 80a4aa2:	a803      	add	r0, sp, #12
 80a4aa4:	f007 ff64 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a4aa8:	4604      	mov	r4, r0
 80a4aaa:	2800      	cmp	r0, #0
 80a4aac:	d13e      	bne.n	80a4b2c <mbedtls_ecp_check_pubkey+0x118>
 80a4aae:	4629      	mov	r1, r5
 80a4ab0:	a803      	add	r0, sp, #12
 80a4ab2:	f7fe fe69 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a4ab6:	4604      	mov	r4, r0
 80a4ab8:	2800      	cmp	r0, #0
 80a4aba:	d137      	bne.n	80a4b2c <mbedtls_ecp_check_pubkey+0x118>

    /* Special case for A = -3 */
    if( grp->A.p == NULL )
 80a4abc:	69ab      	ldr	r3, [r5, #24]
 80a4abe:	b9a3      	cbnz	r3, 80a4aea <mbedtls_ecp_check_pubkey+0xd6>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
 80a4ac0:	a903      	add	r1, sp, #12
 80a4ac2:	2203      	movs	r2, #3
 80a4ac4:	4608      	mov	r0, r1
 80a4ac6:	f007 ff3d 	bl	80ac944 <mbedtls_mpi_sub_int>
 80a4aca:	4604      	mov	r4, r0
 80a4acc:	bb70      	cbnz	r0, 80a4b2c <mbedtls_ecp_check_pubkey+0x118>
 80a4ace:	9b03      	ldr	r3, [sp, #12]
 80a4ad0:	2b00      	cmp	r3, #0
 80a4ad2:	da1e      	bge.n	80a4b12 <mbedtls_ecp_check_pubkey+0xfe>
 80a4ad4:	2100      	movs	r1, #0
 80a4ad6:	a803      	add	r0, sp, #12
 80a4ad8:	f007 fe2b 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a4adc:	b1c8      	cbz	r0, 80a4b12 <mbedtls_ecp_check_pubkey+0xfe>
 80a4ade:	a903      	add	r1, sp, #12
 80a4ae0:	4632      	mov	r2, r6
 80a4ae2:	4608      	mov	r0, r1
 80a4ae4:	f007 fed5 	bl	80ac892 <mbedtls_mpi_add_mpi>
 80a4ae8:	e7ef      	b.n	80a4aca <mbedtls_ecp_check_pubkey+0xb6>
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );
 80a4aea:	a903      	add	r1, sp, #12
 80a4aec:	f105 0210 	add.w	r2, r5, #16
 80a4af0:	4608      	mov	r0, r1
 80a4af2:	f007 fece 	bl	80ac892 <mbedtls_mpi_add_mpi>
 80a4af6:	4604      	mov	r4, r0
 80a4af8:	b9c0      	cbnz	r0, 80a4b2c <mbedtls_ecp_check_pubkey+0x118>
 80a4afa:	4631      	mov	r1, r6
 80a4afc:	a803      	add	r0, sp, #12
 80a4afe:	f007 fdd3 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80a4b02:	2800      	cmp	r0, #0
 80a4b04:	db05      	blt.n	80a4b12 <mbedtls_ecp_check_pubkey+0xfe>
 80a4b06:	a903      	add	r1, sp, #12
 80a4b08:	4632      	mov	r2, r6
 80a4b0a:	4608      	mov	r0, r1
 80a4b0c:	f007 fe81 	bl	80ac812 <mbedtls_mpi_sub_abs>
 80a4b10:	e7f1      	b.n	80a4af6 <mbedtls_ecp_check_pubkey+0xe2>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
 80a4b12:	a903      	add	r1, sp, #12
 80a4b14:	463a      	mov	r2, r7
 80a4b16:	4608      	mov	r0, r1
 80a4b18:	f007 ff2a 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a4b1c:	4604      	mov	r4, r0
 80a4b1e:	b928      	cbnz	r0, 80a4b2c <mbedtls_ecp_check_pubkey+0x118>
 80a4b20:	4629      	mov	r1, r5
 80a4b22:	a803      	add	r0, sp, #12
 80a4b24:	f7fe fe30 	bl	80a3788 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
 80a4b28:	4604      	mov	r4, r0
 80a4b2a:	b138      	cbz	r0, 80a4b3c <mbedtls_ecp_check_pubkey+0x128>
    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )
        ret = MBEDTLS_ERR_ECP_INVALID_KEY;

cleanup:

    mbedtls_mpi_free( &YY ); mbedtls_mpi_free( &RHS );
 80a4b2c:	4668      	mov	r0, sp
 80a4b2e:	f007 fada 	bl	80ac0e6 <mbedtls_mpi_free>
 80a4b32:	a803      	add	r0, sp, #12
 80a4b34:	f007 fad7 	bl	80ac0e6 <mbedtls_mpi_free>

    return( ret );
 80a4b38:	4620      	mov	r0, r4
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
        return( ecp_check_pubkey_mx( grp, pt ) );
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
        return( ecp_check_pubkey_sw( grp, pt ) );
 80a4b3a:	e020      	b.n	80a4b7e <mbedtls_ecp_check_pubkey+0x16a>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 80a4b3c:	a903      	add	r1, sp, #12
 80a4b3e:	f105 021c 	add.w	r2, r5, #28
 80a4b42:	4608      	mov	r0, r1
 80a4b44:	f007 fea5 	bl	80ac892 <mbedtls_mpi_add_mpi>
 80a4b48:	4604      	mov	r4, r0
 80a4b4a:	2800      	cmp	r0, #0
 80a4b4c:	d1ee      	bne.n	80a4b2c <mbedtls_ecp_check_pubkey+0x118>
 80a4b4e:	4631      	mov	r1, r6
 80a4b50:	a803      	add	r0, sp, #12
 80a4b52:	f007 fda9 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80a4b56:	2800      	cmp	r0, #0
 80a4b58:	db08      	blt.n	80a4b6c <mbedtls_ecp_check_pubkey+0x158>
 80a4b5a:	a903      	add	r1, sp, #12
 80a4b5c:	4632      	mov	r2, r6
 80a4b5e:	4608      	mov	r0, r1
 80a4b60:	f007 fe57 	bl	80ac812 <mbedtls_mpi_sub_abs>
 80a4b64:	2800      	cmp	r0, #0
 80a4b66:	d0f2      	beq.n	80a4b4e <mbedtls_ecp_check_pubkey+0x13a>
 80a4b68:	4604      	mov	r4, r0
 80a4b6a:	e7df      	b.n	80a4b2c <mbedtls_ecp_check_pubkey+0x118>

    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )
 80a4b6c:	a903      	add	r1, sp, #12
 80a4b6e:	4668      	mov	r0, sp
 80a4b70:	f007 fd9a 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
        ret = MBEDTLS_ERR_ECP_INVALID_KEY;
 80a4b74:	2800      	cmp	r0, #0
 80a4b76:	4c04      	ldr	r4, [pc, #16]	; (80a4b88 <mbedtls_ecp_check_pubkey+0x174>)
 80a4b78:	bf08      	it	eq
 80a4b7a:	2400      	moveq	r4, #0
 80a4b7c:	e7d6      	b.n	80a4b2c <mbedtls_ecp_check_pubkey+0x118>
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
        return( ecp_check_pubkey_sw( grp, pt ) );
#endif
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
 80a4b7e:	b007      	add	sp, #28
 80a4b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a4b82:	bf00      	nop
 80a4b84:	ffffb080 	.word	0xffffb080
 80a4b88:	ffffb380 	.word	0xffffb380

080a4b8c <mbedtls_ecp_check_privkey>:
/*
 * Check that an mbedtls_mpi is valid as a private key
 */
int mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp,
                               const mbedtls_mpi *d )
{
 80a4b8c:	b538      	push	{r3, r4, r5, lr}
 80a4b8e:	460c      	mov	r4, r1
 80a4b90:	4605      	mov	r5, r0

        return( 0 );
    }
#endif /* ECP_MONTGOMERY */
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 80a4b92:	f7fe fdee 	bl	80a3772 <_ZL12ecp_get_typePK17mbedtls_ecp_group>
 80a4b96:	2801      	cmp	r0, #1
 80a4b98:	4601      	mov	r1, r0
 80a4b9a:	d10d      	bne.n	80a4bb8 <mbedtls_ecp_check_privkey+0x2c>
    {
        /* see SEC1 3.2 */
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 80a4b9c:	4620      	mov	r0, r4
 80a4b9e:	f007 fdc8 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a4ba2:	2800      	cmp	r0, #0
 80a4ba4:	db0a      	blt.n	80a4bbc <mbedtls_ecp_check_privkey+0x30>
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 80a4ba6:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 80a4baa:	4620      	mov	r0, r4
 80a4bac:	f007 fd7c 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
#endif /* ECP_MONTGOMERY */
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
    {
        /* see SEC1 3.2 */
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 80a4bb0:	2800      	cmp	r0, #0
 80a4bb2:	da03      	bge.n	80a4bbc <mbedtls_ecp_check_privkey+0x30>
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
        else
            return( 0 );
 80a4bb4:	2000      	movs	r0, #0
 80a4bb6:	bd38      	pop	{r3, r4, r5, pc}
    }
#endif /* ECP_SHORTWEIERSTRASS */

    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80a4bb8:	4801      	ldr	r0, [pc, #4]	; (80a4bc0 <mbedtls_ecp_check_privkey+0x34>)
 80a4bba:	bd38      	pop	{r3, r4, r5, pc}
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
    {
        /* see SEC1 3.2 */
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 80a4bbc:	4801      	ldr	r0, [pc, #4]	; (80a4bc4 <mbedtls_ecp_check_privkey+0x38>)
            return( 0 );
    }
#endif /* ECP_SHORTWEIERSTRASS */

    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
 80a4bbe:	bd38      	pop	{r3, r4, r5, pc}
 80a4bc0:	ffffb080 	.word	0xffffb080
 80a4bc4:	ffffb380 	.word	0xffffb380

080a4bc8 <mbedtls_ecp_mul_restartable>:
 */
int mbedtls_ecp_mul_restartable( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
 80a4bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4bcc:	b0af      	sub	sp, #188	; 0xbc
 80a4bce:	910a      	str	r1, [sp, #40]	; 0x28
    {
        /* check_privkey is free */
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_CHK );

        /* Common sanity checks */
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
 80a4bd0:	4611      	mov	r1, r2
 */
int mbedtls_ecp_mul_restartable( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
 80a4bd2:	4605      	mov	r5, r0
 80a4bd4:	920b      	str	r2, [sp, #44]	; 0x2c
 80a4bd6:	461f      	mov	r7, r3
    {
        /* check_privkey is free */
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_CHK );

        /* Common sanity checks */
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
 80a4bd8:	f7ff ffd8 	bl	80a4b8c <mbedtls_ecp_check_privkey>
 80a4bdc:	4683      	mov	fp, r0
 80a4bde:	2800      	cmp	r0, #0
 80a4be0:	f040 8112 	bne.w	80a4e08 <mbedtls_ecp_mul_restartable+0x240>
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, P ) );
 80a4be4:	4639      	mov	r1, r7
 80a4be6:	4628      	mov	r0, r5
 80a4be8:	f7ff ff14 	bl	80a4a14 <mbedtls_ecp_check_pubkey>
 80a4bec:	4683      	mov	fp, r0
 80a4bee:	2800      	cmp	r0, #0
 80a4bf0:	f040 810a 	bne.w	80a4e08 <mbedtls_ecp_mul_restartable+0x240>
#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
        MBEDTLS_MPI_CHK( ecp_mul_mxz( grp, R, m, P, f_rng, p_rng ) );
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 80a4bf4:	4628      	mov	r0, r5
 80a4bf6:	f7fe fdbc 	bl	80a3772 <_ZL12ecp_get_typePK17mbedtls_ecp_group>
 80a4bfa:	2801      	cmp	r0, #1
 80a4bfc:	f040 8084 	bne.w	80a4d08 <mbedtls_ecp_mul_restartable+0x140>

    ECP_RS_ENTER( rsm );

    /* Is P the base point ? */
#if MBEDTLS_ECP_FIXED_POINT_OPTIM == 1
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 80a4c00:	f105 0134 	add.w	r1, r5, #52	; 0x34
 80a4c04:	f107 000c 	add.w	r0, r7, #12
 80a4c08:	f007 fd4e 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80a4c0c:	b948      	cbnz	r0, 80a4c22 <mbedtls_ecp_mul_restartable+0x5a>
               mbedtls_mpi_cmp_mpi( &P->X, &grp->G.X ) == 0 );
 80a4c0e:	f105 0128 	add.w	r1, r5, #40	; 0x28
 80a4c12:	4638      	mov	r0, r7
 80a4c14:	f007 fd48 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>

    ECP_RS_ENTER( rsm );

    /* Is P the base point ? */
#if MBEDTLS_ECP_FIXED_POINT_OPTIM == 1
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 80a4c18:	fab0 f980 	clz	r9, r0
 80a4c1c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80a4c20:	e000      	b.n	80a4c24 <mbedtls_ecp_mul_restartable+0x5c>
 80a4c22:	46d9      	mov	r9, fp
 80a4c24:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    /*
     * Minimize the number of multiplications, that is minimize
     * 10 * d * w + 18 * 2^(w-1) + 11 * d + 7 * w, with d = ceil( nbits / w )
     * (see costs of the various parts, with 1S = 1M)
     */
    w = grp->nbits >= 384 ? 5 : 4;
 80a4c26:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80a4c2a:	bf2c      	ite	cs
 80a4c2c:	2605      	movcs	r6, #5
 80a4c2e:	2604      	movcc	r6, #4
    /*
     * If P == G, pre-compute a bit more, since this may be re-used later.
     * Just adding one avoids upping the cost of the first mul too much,
     * and the memory cost too.
     */
    if( p_eq_g )
 80a4c30:	f1b9 0f00 	cmp.w	r9, #0
 80a4c34:	d000      	beq.n	80a4c38 <mbedtls_ecp_mul_restartable+0x70>
        w++;
 80a4c36:	3601      	adds	r6, #1
     * (The last test is useful only for very small curves in the test suite.)
     */
    if( w > MBEDTLS_ECP_WINDOW_SIZE )
        w = MBEDTLS_ECP_WINDOW_SIZE;
    if( w >= grp->nbits )
        w = 2;
 80a4c38:	42b3      	cmp	r3, r6
 80a4c3a:	bf98      	it	ls
 80a4c3c:	2602      	movls	r6, #2
#endif

    /* Pick window size and deduce related sizes */
    w = ecp_pick_window_size( grp, p_eq_g );
    T_size = 1U << ( w - 1 );
    d = ( grp->nbits + w - 1 ) / w;
 80a4c3e:	3b01      	subs	r3, #1
 80a4c40:	4433      	add	r3, r6
 80a4c42:	fbb3 f3f6 	udiv	r3, r3, r6
    p_eq_g = 0;
#endif

    /* Pick window size and deduce related sizes */
    w = ecp_pick_window_size( grp, p_eq_g );
    T_size = 1U << ( w - 1 );
 80a4c46:	f106 38ff 	add.w	r8, r6, #4294967295
 80a4c4a:	2201      	movs	r2, #1
 80a4c4c:	fa02 f208 	lsl.w	r2, r2, r8
 80a4c50:	9207      	str	r2, [sp, #28]
 80a4c52:	f89d 201c 	ldrb.w	r2, [sp, #28]
    d = ( grp->nbits + w - 1 ) / w;
 80a4c56:	9309      	str	r3, [sp, #36]	; 0x24
    p_eq_g = 0;
#endif

    /* Pick window size and deduce related sizes */
    w = ecp_pick_window_size( grp, p_eq_g );
    T_size = 1U << ( w - 1 );
 80a4c58:	9208      	str	r2, [sp, #32]
    d = ( grp->nbits + w - 1 ) / w;

    /* Pre-computed table: do we have it already for the base point? */
    if( p_eq_g && grp->T != NULL )
 80a4c5a:	f1b9 0f00 	cmp.w	r9, #0
 80a4c5e:	d001      	beq.n	80a4c64 <mbedtls_ecp_mul_restartable+0x9c>
 80a4c60:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 80a4c62:	bb24      	cbnz	r4, 80a4cae <mbedtls_ecp_mul_restartable+0xe6>
    }
    else
#endif
    /* Allocate table if we didn't have any */
    {
        T = (mbedtls_ecp_point *)mbedtls_calloc( T_size, sizeof( mbedtls_ecp_point ) );
 80a4c64:	2124      	movs	r1, #36	; 0x24
 80a4c66:	9807      	ldr	r0, [sp, #28]
 80a4c68:	f00d fca8 	bl	80b25bc <calloc>
        if( T == NULL )
 80a4c6c:	4604      	mov	r4, r0
 80a4c6e:	2800      	cmp	r0, #0
 80a4c70:	d02e      	beq.n	80a4cd0 <mbedtls_ecp_mul_restartable+0x108>
 80a4c72:	f04f 0a00 	mov.w	sl, #0
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
            goto cleanup;
        }

        for( i = 0; i < T_size; i++ )
            mbedtls_ecp_point_init( &T[i] );
 80a4c76:	f04f 0b24 	mov.w	fp, #36	; 0x24
 80a4c7a:	fb0b 400a 	mla	r0, fp, sl, r4
 80a4c7e:	f7ff f9df 	bl	80a4040 <mbedtls_ecp_point_init>
 80a4c82:	f10a 0a01 	add.w	sl, sl, #1
        {
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
            goto cleanup;
        }

        for( i = 0; i < T_size; i++ )
 80a4c86:	9a08      	ldr	r2, [sp, #32]
 80a4c88:	fa5f f38a 	uxtb.w	r3, sl
 80a4c8c:	429a      	cmp	r2, r3
 80a4c8e:	d8f4      	bhi.n	80a4c7a <mbedtls_ecp_mul_restartable+0xb2>
 80a4c90:	e03d      	b.n	80a4d0e <mbedtls_ecp_mul_restartable+0x146>
    for( j = 0; j + 1 < T_size; j++ )
        TT[j] = T + j + 1;

    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV + 6 * j - 2 );

    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
 80a4c92:	9b07      	ldr	r3, [sp, #28]
 80a4c94:	a90f      	add	r1, sp, #60	; 0x3c
 80a4c96:	1e5a      	subs	r2, r3, #1
 80a4c98:	4628      	mov	r0, r5
 80a4c9a:	f7ff f84b 	bl	80a3d34 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj>
    }

    /* Compute table (or finish computing it) if not done already */
    if( !T_ok )
    {
        MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d, rs_ctx ) );
 80a4c9e:	4683      	mov	fp, r0
 80a4ca0:	b9c0      	cbnz	r0, 80a4cd4 <mbedtls_ecp_mul_restartable+0x10c>

        if( p_eq_g )
 80a4ca2:	f1b9 0f00 	cmp.w	r9, #0
 80a4ca6:	d002      	beq.n	80a4cae <mbedtls_ecp_mul_restartable+0xe6>
        {
            /* almost transfer ownership of T to the group, but keep a copy of
             * the pointer to use for calling the next function more easily */
            grp->T = T;
            grp->T_size = T_size;
 80a4ca8:	9b07      	ldr	r3, [sp, #28]

        if( p_eq_g )
        {
            /* almost transfer ownership of T to the group, but keep a copy of
             * the pointer to use for calling the next function more easily */
            grp->T = T;
 80a4caa:	676c      	str	r4, [r5, #116]	; 0x74
            grp->T_size = T_size;
 80a4cac:	67ab      	str	r3, [r5, #120]	; 0x78
        }
    }

    /* Actual comb multiplication using precomputed points */
    MBEDTLS_MPI_CHK( ecp_mul_comb_after_precomp( grp, R, m,
 80a4cae:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 80a4cb0:	9601      	str	r6, [sp, #4]
 80a4cb2:	9304      	str	r3, [sp, #16]
 80a4cb4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80a4cb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a4cb8:	9303      	str	r3, [sp, #12]
 80a4cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a4cbc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a4cbe:	9302      	str	r3, [sp, #8]
 80a4cc0:	9b08      	ldr	r3, [sp, #32]
 80a4cc2:	4628      	mov	r0, r5
 80a4cc4:	9300      	str	r3, [sp, #0]
 80a4cc6:	4623      	mov	r3, r4
 80a4cc8:	f7ff fc54 	bl	80a4574 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.6>
 80a4ccc:	4683      	mov	fp, r0
 80a4cce:	e001      	b.n	80a4cd4 <mbedtls_ecp_mul_restartable+0x10c>
    /* Allocate table if we didn't have any */
    {
        T = (mbedtls_ecp_point *)mbedtls_calloc( T_size, sizeof( mbedtls_ecp_point ) );
        if( T == NULL )
        {
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
 80a4cd0:	f8df b13c 	ldr.w	fp, [pc, #316]	; 80a4e10 <mbedtls_ecp_mul_restartable+0x248>
                                                 f_rng, p_rng, rs_ctx ) );

cleanup:

    /* does T belong to the group? */
    if( T == grp->T )
 80a4cd4:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 80a4cd6:	42a2      	cmp	r2, r4
 80a4cd8:	d00e      	beq.n	80a4cf8 <mbedtls_ecp_mul_restartable+0x130>
        T = NULL;
    }
#endif

    /* did T belong to us? then let's destroy it! */
    if( T != NULL )
 80a4cda:	b16c      	cbz	r4, 80a4cf8 <mbedtls_ecp_mul_restartable+0x130>
 80a4cdc:	2500      	movs	r5, #0
    {
        for( i = 0; i < T_size; i++ )
            mbedtls_ecp_point_free( &T[i] );
 80a4cde:	2624      	movs	r6, #36	; 0x24
 80a4ce0:	fb06 4005 	mla	r0, r6, r5, r4
 80a4ce4:	f7ff f9e9 	bl	80a40ba <mbedtls_ecp_point_free>
 80a4ce8:	3501      	adds	r5, #1
#endif

    /* did T belong to us? then let's destroy it! */
    if( T != NULL )
    {
        for( i = 0; i < T_size; i++ )
 80a4cea:	9b08      	ldr	r3, [sp, #32]
 80a4cec:	b2ea      	uxtb	r2, r5
 80a4cee:	4293      	cmp	r3, r2
 80a4cf0:	d8f6      	bhi.n	80a4ce0 <mbedtls_ecp_mul_restartable+0x118>
            mbedtls_ecp_point_free( &T[i] );
        mbedtls_free( T );
 80a4cf2:	4620      	mov	r0, r4
 80a4cf4:	f00c f9f8 	bl	80b10e8 <free>
    /* don't free R while in progress in case R == P */
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( ret != MBEDTLS_ERR_ECP_IN_PROGRESS )
#endif
    /* prevent caller from using invalid value */
    if( ret != 0 )
 80a4cf8:	f1bb 0f00 	cmp.w	fp, #0
 80a4cfc:	f000 8084 	beq.w	80a4e08 <mbedtls_ecp_mul_restartable+0x240>
        mbedtls_ecp_point_free( R );
 80a4d00:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a4d02:	f7ff f9da 	bl	80a40ba <mbedtls_ecp_point_free>
 80a4d06:	e07f      	b.n	80a4e08 <mbedtls_ecp_mul_restartable+0x240>
        /* Common sanity checks */
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, P ) );
    }

    ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 80a4d08:	f8df b108 	ldr.w	fp, [pc, #264]	; 80a4e14 <mbedtls_ecp_mul_restartable+0x24c>
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL )
        rs_ctx->depth--;
#endif

    return( ret );
 80a4d0c:	e07c      	b.n	80a4e08 <mbedtls_ecp_mul_restartable+0x240>
#endif
    /*
     * Set T[0] = P and
     * T[2^{l-1}] = 2^{dl} P for l = 1 .. w-1 (this is not the final value)
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );
 80a4d0e:	4639      	mov	r1, r7
 80a4d10:	4620      	mov	r0, r4
 80a4d12:	f7ff fa22 	bl	80a415a <mbedtls_ecp_copy>
 80a4d16:	4683      	mov	fp, r0
 80a4d18:	2800      	cmp	r0, #0
 80a4d1a:	d1db      	bne.n	80a4cd4 <mbedtls_ecp_mul_restartable+0x10c>
        j = rs_ctx->rsm->i;
    else
#endif
        j = 0;

    for( ; j < d * ( w - 1 ); j++ )
 80a4d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL );

        i = 1U << ( j / d );
        cur = T + i;
 80a4d1e:	2724      	movs	r7, #36	; 0x24
        j = rs_ctx->rsm->i;
    else
#endif
        j = 0;

    for( ; j < d * ( w - 1 ); j++ )
 80a4d20:	fb03 f308 	mul.w	r3, r3, r8
 80a4d24:	46d8      	mov	r8, fp
 80a4d26:	930c      	str	r3, [sp, #48]	; 0x30
 80a4d28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a4d2a:	4543      	cmp	r3, r8
 80a4d2c:	d023      	beq.n	80a4d76 <mbedtls_ecp_mul_restartable+0x1ae>
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL );

        i = 1U << ( j / d );
 80a4d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a4d30:	2201      	movs	r2, #1
 80a4d32:	fbb8 f3f3 	udiv	r3, r8, r3
 80a4d36:	fa02 f103 	lsl.w	r1, r2, r3
        cur = T + i;

        if( j % d == 0 )
 80a4d3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    for( ; j < d * ( w - 1 ); j++ )
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL );

        i = 1U << ( j / d );
        cur = T + i;
 80a4d3c:	fa5f fa81 	uxtb.w	sl, r1

        if( j % d == 0 )
 80a4d40:	fb02 8313 	mls	r3, r2, r3, r8
    for( ; j < d * ( w - 1 ); j++ )
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL );

        i = 1U << ( j / d );
        cur = T + i;
 80a4d44:	fb07 4a0a 	mla	sl, r7, sl, r4

        if( j % d == 0 )
 80a4d48:	b153      	cbz	r3, 80a4d60 <mbedtls_ecp_mul_restartable+0x198>
            MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );

        MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );
 80a4d4a:	4652      	mov	r2, sl
 80a4d4c:	4651      	mov	r1, sl
 80a4d4e:	4628      	mov	r0, r5
 80a4d50:	f7fe fd5e 	bl	80a3810 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_>
 80a4d54:	4683      	mov	fp, r0
 80a4d56:	2800      	cmp	r0, #0
 80a4d58:	d1bc      	bne.n	80a4cd4 <mbedtls_ecp_mul_restartable+0x10c>
        j = rs_ctx->rsm->i;
    else
#endif
        j = 0;

    for( ; j < d * ( w - 1 ); j++ )
 80a4d5a:	f108 0801 	add.w	r8, r8, #1
 80a4d5e:	e7e3      	b.n	80a4d28 <mbedtls_ecp_mul_restartable+0x160>

        i = 1U << ( j / d );
        cur = T + i;

        if( j % d == 0 )
            MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
 80a4d60:	f3c1 0146 	ubfx	r1, r1, #1, #7
 80a4d64:	fb07 4101 	mla	r1, r7, r1, r4
 80a4d68:	4650      	mov	r0, sl
 80a4d6a:	f7ff f9f6 	bl	80a415a <mbedtls_ecp_copy>
 80a4d6e:	4683      	mov	fp, r0
 80a4d70:	2800      	cmp	r0, #0
 80a4d72:	d0ea      	beq.n	80a4d4a <mbedtls_ecp_mul_restartable+0x182>
 80a4d74:	e7ae      	b.n	80a4cd4 <mbedtls_ecp_mul_restartable+0x10c>
        j = rs_ctx->rsm->i;
    else
#endif
        j = 0;

    for( ; j < d * ( w - 1 ); j++ )
 80a4d76:	2200      	movs	r2, #0
 80a4d78:	2301      	movs	r3, #1
     * Normalize current elements in T. As T has holes,
     * use an auxiliary array of pointers to elements in T.
     */
    j = 0;
    for( i = 1; i < T_size; i <<= 1 )
        TT[j++] = T + i;
 80a4d7a:	2724      	movs	r7, #36	; 0x24
 80a4d7c:	fb07 4003 	mla	r0, r7, r3, r4
 80a4d80:	a90f      	add	r1, sp, #60	; 0x3c
 80a4d82:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
    /*
     * Normalize current elements in T. As T has holes,
     * use an auxiliary array of pointers to elements in T.
     */
    j = 0;
    for( i = 1; i < T_size; i <<= 1 )
 80a4d86:	005b      	lsls	r3, r3, #1
 80a4d88:	9808      	ldr	r0, [sp, #32]
 80a4d8a:	b2db      	uxtb	r3, r3
 80a4d8c:	4298      	cmp	r0, r3
 80a4d8e:	f102 0201 	add.w	r2, r2, #1
 80a4d92:	d8f3      	bhi.n	80a4d7c <mbedtls_ecp_mul_restartable+0x1b4>
        TT[j++] = T + i;

    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV + 6 * j - 2 );

    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
 80a4d94:	4628      	mov	r0, r5
 80a4d96:	f7fe ffcd 	bl	80a3d34 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj>
 80a4d9a:	4683      	mov	fp, r0
 80a4d9c:	2800      	cmp	r0, #0
 80a4d9e:	d199      	bne.n	80a4cd4 <mbedtls_ecp_mul_restartable+0x10c>
 80a4da0:	f04f 0801 	mov.w	r8, #1

    for( i = 1; i < T_size; i <<= 1 )
    {
        j = i;
        while( j-- )
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
 80a4da4:	4647      	mov	r7, r8
 80a4da6:	2324      	movs	r3, #36	; 0x24
 80a4da8:	fb03 4308 	mla	r3, r3, r8, r4
 80a4dac:	930d      	str	r3, [sp, #52]	; 0x34
 80a4dae:	2348      	movs	r3, #72	; 0x48
 80a4db0:	fb03 4a08 	mla	sl, r3, r8, r4
 80a4db4:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80a4db8:	fb03 f308 	mul.w	r3, r3, r8
 80a4dbc:	f1aa 0a24 	sub.w	sl, sl, #36	; 0x24
 80a4dc0:	930c      	str	r3, [sp, #48]	; 0x30
 80a4dc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a4dc4:	4651      	mov	r1, sl
 80a4dc6:	4452      	add	r2, sl
 80a4dc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a4dca:	4628      	mov	r0, r5
 80a4dcc:	f7ff f9f2 	bl	80a41b4 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_>
 80a4dd0:	3f01      	subs	r7, #1
 80a4dd2:	f1aa 0a24 	sub.w	sl, sl, #36	; 0x24
 80a4dd6:	4683      	mov	fp, r0
 80a4dd8:	2800      	cmp	r0, #0
 80a4dda:	f47f af7b 	bne.w	80a4cd4 <mbedtls_ecp_mul_restartable+0x10c>
    MBEDTLS_ECP_BUDGET( ( T_size - 1 ) * MBEDTLS_ECP_OPS_ADD );

    for( i = 1; i < T_size; i <<= 1 )
    {
        j = i;
        while( j-- )
 80a4dde:	2f00      	cmp	r7, #0
 80a4de0:	d1ef      	bne.n	80a4dc2 <mbedtls_ecp_mul_restartable+0x1fa>
     * Compute the remaining ones using the minimal number of additions
     * Be careful to update T[2^l] only after using it!
     */
    MBEDTLS_ECP_BUDGET( ( T_size - 1 ) * MBEDTLS_ECP_OPS_ADD );

    for( i = 1; i < T_size; i <<= 1 )
 80a4de2:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80a4de6:	9b08      	ldr	r3, [sp, #32]
 80a4de8:	fa5f f888 	uxtb.w	r8, r8
 80a4dec:	4543      	cmp	r3, r8
 80a4dee:	d8d9      	bhi.n	80a4da4 <mbedtls_ecp_mul_restartable+0x1dc>
 80a4df0:	ab0e      	add	r3, sp, #56	; 0x38
     * Normalize final elements in T. Even though there are no holes now, we
     * still need the auxiliary array for homogeneity with the previous
     * call. Also, skip T[0] which is already normalised, being a copy of P.
     */
    for( j = 0; j + 1 < T_size; j++ )
        TT[j] = T + j + 1;
 80a4df2:	2124      	movs	r1, #36	; 0x24
    /*
     * Normalize final elements in T. Even though there are no holes now, we
     * still need the auxiliary array for homogeneity with the previous
     * call. Also, skip T[0] which is already normalised, being a copy of P.
     */
    for( j = 0; j + 1 < T_size; j++ )
 80a4df4:	9a07      	ldr	r2, [sp, #28]
 80a4df6:	3701      	adds	r7, #1
 80a4df8:	42ba      	cmp	r2, r7
 80a4dfa:	f43f af4a 	beq.w	80a4c92 <mbedtls_ecp_mul_restartable+0xca>
        TT[j] = T + j + 1;
 80a4dfe:	fb01 4207 	mla	r2, r1, r7, r4
 80a4e02:	f843 2f04 	str.w	r2, [r3, #4]!
 80a4e06:	e7f5      	b.n	80a4df4 <mbedtls_ecp_mul_restartable+0x22c>
    if( rs_ctx != NULL )
        rs_ctx->depth--;
#endif

    return( ret );
}
 80a4e08:	4658      	mov	r0, fp
 80a4e0a:	b02f      	add	sp, #188	; 0xbc
 80a4e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4e10:	ffffb280 	.word	0xffffb280
 80a4e14:	ffffb080 	.word	0xffffb080

080a4e18 <mbedtls_ecp_mul>:
 * Multiplication R = m * P
 */
int mbedtls_ecp_mul( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80a4e18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( R   != NULL );
    ECP_VALIDATE_RET( m   != NULL );
    ECP_VALIDATE_RET( P   != NULL );
    return( mbedtls_ecp_mul_restartable( grp, R, m, P, f_rng, p_rng, NULL ) );
 80a4e1a:	2400      	movs	r4, #0
 80a4e1c:	9402      	str	r4, [sp, #8]
 80a4e1e:	9c07      	ldr	r4, [sp, #28]
 80a4e20:	9401      	str	r4, [sp, #4]
 80a4e22:	9c06      	ldr	r4, [sp, #24]
 80a4e24:	9400      	str	r4, [sp, #0]
 80a4e26:	f7ff fecf 	bl	80a4bc8 <mbedtls_ecp_mul_restartable>
}
 80a4e2a:	b004      	add	sp, #16
 80a4e2c:	bd10      	pop	{r4, pc}

080a4e2e <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv>:
static int mbedtls_ecp_mul_shortcuts( mbedtls_ecp_group *grp,
                                      mbedtls_ecp_point *R,
                                      const mbedtls_mpi *m,
                                      const mbedtls_ecp_point *P,
                                      mbedtls_ecp_restart_ctx *rs_ctx )
{
 80a4e2e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a4e32:	4607      	mov	r7, r0
 80a4e34:	460c      	mov	r4, r1
    int ret;

    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
 80a4e36:	4610      	mov	r0, r2
 80a4e38:	2101      	movs	r1, #1
static int mbedtls_ecp_mul_shortcuts( mbedtls_ecp_group *grp,
                                      mbedtls_ecp_point *R,
                                      const mbedtls_mpi *m,
                                      const mbedtls_ecp_point *P,
                                      mbedtls_ecp_restart_ctx *rs_ctx )
{
 80a4e3a:	4615      	mov	r5, r2
 80a4e3c:	461e      	mov	r6, r3
 80a4e3e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    int ret;

    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
 80a4e42:	f007 fc76 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a4e46:	b930      	cbnz	r0, 80a4e56 <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv+0x28>
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 80a4e48:	4631      	mov	r1, r6
 80a4e4a:	4620      	mov	r0, r4
                                                      NULL, NULL, rs_ctx ) );
    }

cleanup:
    return( ret );
}
 80a4e4c:	b004      	add	sp, #16
 80a4e4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
{
    int ret;

    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 80a4e52:	f7ff b982 	b.w	80a415a <mbedtls_ecp_copy>
    }
    else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )
 80a4e56:	f04f 31ff 	mov.w	r1, #4294967295
 80a4e5a:	4628      	mov	r0, r5
 80a4e5c:	f007 fc69 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a4e60:	b998      	cbnz	r0, 80a4e8a <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv+0x5c>
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 80a4e62:	4631      	mov	r1, r6
 80a4e64:	4620      	mov	r0, r4
 80a4e66:	f7ff f978 	bl	80a415a <mbedtls_ecp_copy>
 80a4e6a:	4605      	mov	r5, r0
 80a4e6c:	b9c8      	cbnz	r0, 80a4ea2 <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv+0x74>
        if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )
 80a4e6e:	340c      	adds	r4, #12
 80a4e70:	4601      	mov	r1, r0
 80a4e72:	4620      	mov	r0, r4
 80a4e74:	f007 fc5d 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a4e78:	b198      	cbz	r0, 80a4ea2 <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv+0x74>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
 80a4e7a:	4622      	mov	r2, r4
 80a4e7c:	4620      	mov	r0, r4
 80a4e7e:	1d39      	adds	r1, r7, #4
                                                      NULL, NULL, rs_ctx ) );
    }

cleanup:
    return( ret );
}
 80a4e80:	b004      	add	sp, #16
 80a4e82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    }
    else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
        if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
 80a4e86:	f007 bd25 	b.w	80ac8d4 <mbedtls_mpi_sub_mpi>
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, R, m, P,
 80a4e8a:	2300      	movs	r3, #0
 80a4e8c:	9301      	str	r3, [sp, #4]
 80a4e8e:	9300      	str	r3, [sp, #0]
 80a4e90:	462a      	mov	r2, r5
 80a4e92:	f8cd 8008 	str.w	r8, [sp, #8]
 80a4e96:	4633      	mov	r3, r6
 80a4e98:	4621      	mov	r1, r4
 80a4e9a:	4638      	mov	r0, r7
 80a4e9c:	f7ff fe94 	bl	80a4bc8 <mbedtls_ecp_mul_restartable>
 80a4ea0:	4605      	mov	r5, r0
                                                      NULL, NULL, rs_ctx ) );
    }

cleanup:
    return( ret );
}
 80a4ea2:	4628      	mov	r0, r5
 80a4ea4:	b004      	add	sp, #16
 80a4ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a4eac <mbedtls_ecp_muladd_restartable>:
int mbedtls_ecp_muladd_restartable(
             mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             const mbedtls_mpi *n, const mbedtls_ecp_point *Q,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
 80a4eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4eb0:	b08c      	sub	sp, #48	; 0x30
 80a4eb2:	4605      	mov	r5, r0
 80a4eb4:	460e      	mov	r6, r1
 80a4eb6:	4614      	mov	r4, r2
 80a4eb8:	4698      	mov	r8, r3
    ECP_VALIDATE_RET( m   != NULL );
    ECP_VALIDATE_RET( P   != NULL );
    ECP_VALIDATE_RET( n   != NULL );
    ECP_VALIDATE_RET( Q   != NULL );

    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
 80a4eba:	f7fe fc5a 	bl	80a3772 <_ZL12ecp_get_typePK17mbedtls_ecp_group>
 80a4ebe:	2801      	cmp	r0, #1
int mbedtls_ecp_muladd_restartable(
             mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             const mbedtls_mpi *n, const mbedtls_ecp_point *Q,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
 80a4ec0:	9f14      	ldr	r7, [sp, #80]	; 0x50
    ECP_VALIDATE_RET( m   != NULL );
    ECP_VALIDATE_RET( P   != NULL );
    ECP_VALIDATE_RET( n   != NULL );
    ECP_VALIDATE_RET( Q   != NULL );

    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
 80a4ec2:	d126      	bne.n	80a4f12 <mbedtls_ecp_muladd_restartable+0x66>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );

    mbedtls_ecp_point_init( &mP );
 80a4ec4:	a803      	add	r0, sp, #12
 80a4ec6:	f7ff f8bb 	bl	80a4040 <mbedtls_ecp_point_init>
        if( rs_ctx->ma->state == ecp_rsma_norm )
            goto norm;
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pmP, m, P, rs_ctx ) );
 80a4eca:	4622      	mov	r2, r4
 80a4ecc:	9700      	str	r7, [sp, #0]
 80a4ece:	4643      	mov	r3, r8
 80a4ed0:	a903      	add	r1, sp, #12
 80a4ed2:	4628      	mov	r0, r5
 80a4ed4:	f7ff ffab 	bl	80a4e2e <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv>
 80a4ed8:	4604      	mov	r4, r0
 80a4eda:	b9a8      	cbnz	r0, 80a4f08 <mbedtls_ecp_muladd_restartable+0x5c>
    if( rs_ctx != NULL && rs_ctx->ma != NULL )
        rs_ctx->ma->state = ecp_rsma_mul2;

mul2:
#endif
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pR,  n, Q, rs_ctx ) );
 80a4edc:	9700      	str	r7, [sp, #0]
 80a4ede:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a4ee0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80a4ee2:	4631      	mov	r1, r6
 80a4ee4:	4628      	mov	r0, r5
 80a4ee6:	f7ff ffa2 	bl	80a4e2e <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv>
 80a4eea:	4604      	mov	r4, r0
 80a4eec:	b960      	cbnz	r0, 80a4f08 <mbedtls_ecp_muladd_restartable+0x5c>
        rs_ctx->ma->state = ecp_rsma_add;

add:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_ADD );
    MBEDTLS_MPI_CHK( ecp_add_mixed( grp, pR, pmP, pR ) );
 80a4eee:	4633      	mov	r3, r6
 80a4ef0:	aa03      	add	r2, sp, #12
 80a4ef2:	4631      	mov	r1, r6
 80a4ef4:	4628      	mov	r0, r5
 80a4ef6:	f7ff f95d 	bl	80a41b4 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_>
 80a4efa:	4604      	mov	r4, r0
 80a4efc:	b920      	cbnz	r0, 80a4f08 <mbedtls_ecp_muladd_restartable+0x5c>
        rs_ctx->ma->state = ecp_rsma_norm;

norm:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV );
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, pR ) );
 80a4efe:	4631      	mov	r1, r6
 80a4f00:	4628      	mov	r0, r5
 80a4f02:	f7fe feba 	bl	80a3c7a <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point>
 80a4f06:	4604      	mov	r4, r0
#if defined(MBEDTLS_ECP_INTERNAL_ALT)
    if( is_grp_capable )
        mbedtls_internal_ecp_free( grp );
#endif /* MBEDTLS_ECP_INTERNAL_ALT */

    mbedtls_ecp_point_free( &mP );
 80a4f08:	a803      	add	r0, sp, #12
 80a4f0a:	f7ff f8d6 	bl	80a40ba <mbedtls_ecp_point_free>

    ECP_RS_LEAVE( ma );

    return( ret );
 80a4f0e:	4620      	mov	r0, r4
 80a4f10:	e000      	b.n	80a4f14 <mbedtls_ecp_muladd_restartable+0x68>
    ECP_VALIDATE_RET( P   != NULL );
    ECP_VALIDATE_RET( n   != NULL );
    ECP_VALIDATE_RET( Q   != NULL );

    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 80a4f12:	4802      	ldr	r0, [pc, #8]	; (80a4f1c <mbedtls_ecp_muladd_restartable+0x70>)
    mbedtls_ecp_point_free( &mP );

    ECP_RS_LEAVE( ma );

    return( ret );
}
 80a4f14:	b00c      	add	sp, #48	; 0x30
 80a4f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4f1a:	bf00      	nop
 80a4f1c:	ffffb180 	.word	0xffffb180

080a4f20 <mbedtls_ecp_gen_privkey>:
 */
int mbedtls_ecp_gen_privkey( const mbedtls_ecp_group *grp,
                     mbedtls_mpi *d,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 80a4f20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4f24:	4607      	mov	r7, r0

    ECP_VALIDATE_RET( grp   != NULL );
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    n_size = ( grp->nbits + 7 ) / 8;
 80a4f26:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 */
int mbedtls_ecp_gen_privkey( const mbedtls_ecp_group *grp,
                     mbedtls_mpi *d,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 80a4f28:	460d      	mov	r5, r1
 80a4f2a:	4692      	mov	sl, r2
 80a4f2c:	469b      	mov	fp, r3
        }
    }
#endif /* ECP_MONTGOMERY */

#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 80a4f2e:	f7fe fc20 	bl	80a3772 <_ZL12ecp_get_typePK17mbedtls_ecp_group>

    ECP_VALIDATE_RET( grp   != NULL );
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    n_size = ( grp->nbits + 7 ) / 8;
 80a4f32:	3407      	adds	r4, #7
        }
    }
#endif /* ECP_MONTGOMERY */

#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 80a4f34:	2801      	cmp	r0, #1

    ECP_VALIDATE_RET( grp   != NULL );
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    n_size = ( grp->nbits + 7 ) / 8;
 80a4f36:	ea4f 04d4 	mov.w	r4, r4, lsr #3
        }
    }
#endif /* ECP_MONTGOMERY */

#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 80a4f3a:	d124      	bne.n	80a4f86 <mbedtls_ecp_gen_privkey+0x66>
             */
            if( ++count > 30 )
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
        }
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
 80a4f3c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
         * This also avoids any biais, which is especially important for ECDSA.
         */
        do
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
 80a4f40:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80a4f44:	261f      	movs	r6, #31
             */
            if( ++count > 30 )
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
        }
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
 80a4f46:	9301      	str	r3, [sp, #4]
         * - try until result is in the desired range.
         * This also avoids any biais, which is especially important for ECDSA.
         */
        do
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
 80a4f48:	465b      	mov	r3, fp
 80a4f4a:	4652      	mov	r2, sl
 80a4f4c:	4621      	mov	r1, r4
 80a4f4e:	4628      	mov	r0, r5
 80a4f50:	f008 fa20 	bl	80ad394 <mbedtls_mpi_fill_random>
 80a4f54:	4680      	mov	r8, r0
 80a4f56:	b9d8      	cbnz	r0, 80a4f90 <mbedtls_ecp_gen_privkey+0x70>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
 80a4f58:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80a4f5a:	4628      	mov	r0, r5
 80a4f5c:	ebc1 0109 	rsb	r1, r1, r9
 80a4f60:	f007 fac3 	bl	80ac4ea <mbedtls_mpi_shift_r>
 80a4f64:	4680      	mov	r8, r0
 80a4f66:	b998      	cbnz	r0, 80a4f90 <mbedtls_ecp_gen_privkey+0x70>
             *
             * For most curves, 1 try is enough with overwhelming probability,
             * since N starts with a lot of 1s in binary, but some curves
             * such as secp224k1 are actually very close to the worst case.
             */
            if( ++count > 30 )
 80a4f68:	3e01      	subs	r6, #1
 80a4f6a:	d00f      	beq.n	80a4f8c <mbedtls_ecp_gen_privkey+0x6c>
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
        }
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 80a4f6c:	2101      	movs	r1, #1
 80a4f6e:	4628      	mov	r0, r5
 80a4f70:	f007 fbdf 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a4f74:	2800      	cmp	r0, #0
 80a4f76:	dbe7      	blt.n	80a4f48 <mbedtls_ecp_gen_privkey+0x28>
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
 80a4f78:	9901      	ldr	r1, [sp, #4]
 80a4f7a:	4628      	mov	r0, r5
 80a4f7c:	f007 fb94 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
             * such as secp224k1 are actually very close to the worst case.
             */
            if( ++count > 30 )
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
        }
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 80a4f80:	2800      	cmp	r0, #0
 80a4f82:	dae1      	bge.n	80a4f48 <mbedtls_ecp_gen_privkey+0x28>
 80a4f84:	e004      	b.n	80a4f90 <mbedtls_ecp_gen_privkey+0x70>
int mbedtls_ecp_gen_privkey( const mbedtls_ecp_group *grp,
                     mbedtls_mpi *d,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
    int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 80a4f86:	f8df 8010 	ldr.w	r8, [pc, #16]	; 80a4f98 <mbedtls_ecp_gen_privkey+0x78>
 80a4f8a:	e001      	b.n	80a4f90 <mbedtls_ecp_gen_privkey+0x70>
             * For most curves, 1 try is enough with overwhelming probability,
             * since N starts with a lot of 1s in binary, but some curves
             * such as secp224k1 are actually very close to the worst case.
             */
            if( ++count > 30 )
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 80a4f8c:	f8df 800c 	ldr.w	r8, [pc, #12]	; 80a4f9c <mbedtls_ecp_gen_privkey+0x7c>
    }
#endif /* ECP_SHORTWEIERSTRASS */

cleanup:
    return( ret );
}
 80a4f90:	4640      	mov	r0, r8
 80a4f92:	b003      	add	sp, #12
 80a4f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4f98:	ffffb080 	.word	0xffffb080
 80a4f9c:	ffffb300 	.word	0xffffb300

080a4fa0 <mbedtls_ecp_check_pub_priv>:

/*
 * Check a public-private key pair
 */
int mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv )
{
 80a4fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    mbedtls_ecp_point Q;
    mbedtls_ecp_group grp;
    ECP_VALIDATE_RET( pub != NULL );
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 80a4fa4:	7803      	ldrb	r3, [r0, #0]

/*
 * Check a public-private key pair
 */
int mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv )
{
 80a4fa6:	b0aa      	sub	sp, #168	; 0xa8
 80a4fa8:	4605      	mov	r5, r0
 80a4faa:	460c      	mov	r4, r1
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
 80a4fac:	2b00      	cmp	r3, #0
 80a4fae:	d049      	beq.n	80a5044 <mbedtls_ecp_check_pub_priv+0xa4>
    mbedtls_ecp_point Q;
    mbedtls_ecp_group grp;
    ECP_VALIDATE_RET( pub != NULL );
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 80a4fb0:	780a      	ldrb	r2, [r1, #0]
 80a4fb2:	429a      	cmp	r2, r3
 80a4fb4:	d146      	bne.n	80a5044 <mbedtls_ecp_check_pub_priv+0xa4>
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
 80a4fb6:	f101 0688 	add.w	r6, r1, #136	; 0x88
 80a4fba:	4631      	mov	r1, r6
 80a4fbc:	3088      	adds	r0, #136	; 0x88
 80a4fbe:	f007 fb73 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
    mbedtls_ecp_group grp;
    ECP_VALIDATE_RET( pub != NULL );
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
        pub->grp.id != prv->grp.id ||
 80a4fc2:	2800      	cmp	r0, #0
 80a4fc4:	d13e      	bne.n	80a5044 <mbedtls_ecp_check_pub_priv+0xa4>
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
 80a4fc6:	f104 0794 	add.w	r7, r4, #148	; 0x94
 80a4fca:	4639      	mov	r1, r7
 80a4fcc:	f105 0094 	add.w	r0, r5, #148	; 0x94
 80a4fd0:	f007 fb6a 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
    ECP_VALIDATE_RET( pub != NULL );
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
 80a4fd4:	2800      	cmp	r0, #0
 80a4fd6:	d135      	bne.n	80a5044 <mbedtls_ecp_check_pub_priv+0xa4>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
 80a4fd8:	f104 08a0 	add.w	r8, r4, #160	; 0xa0
 80a4fdc:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 80a4fe0:	4641      	mov	r1, r8
 80a4fe2:	f007 fb61 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
 80a4fe6:	4605      	mov	r5, r0
 80a4fe8:	bb60      	cbnz	r0, 80a5044 <mbedtls_ecp_check_pub_priv+0xa4>
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }

    mbedtls_ecp_point_init( &Q );
 80a4fea:	a802      	add	r0, sp, #8
 80a4fec:	f7ff f828 	bl	80a4040 <mbedtls_ecp_point_init>
    mbedtls_ecp_group_init( &grp );
 80a4ff0:	a80b      	add	r0, sp, #44	; 0x2c
 80a4ff2:	f7ff f833 	bl	80a405c <mbedtls_ecp_group_init>

    /* mbedtls_ecp_mul() needs a non-const group... */
    mbedtls_ecp_group_copy( &grp, &prv->grp );
 80a4ff6:	4621      	mov	r1, r4
 80a4ff8:	a80b      	add	r0, sp, #44	; 0x2c
 80a4ffa:	f7ff f8c4 	bl	80a4186 <mbedtls_ecp_group_copy>

    /* Also checks d is valid */
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );
 80a4ffe:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80a5002:	f104 027c 	add.w	r2, r4, #124	; 0x7c
 80a5006:	9501      	str	r5, [sp, #4]
 80a5008:	9500      	str	r5, [sp, #0]
 80a500a:	a902      	add	r1, sp, #8
 80a500c:	a80b      	add	r0, sp, #44	; 0x2c
 80a500e:	f7ff ff03 	bl	80a4e18 <mbedtls_ecp_mul>
 80a5012:	4604      	mov	r4, r0
 80a5014:	b970      	cbnz	r0, 80a5034 <mbedtls_ecp_check_pub_priv+0x94>

    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
 80a5016:	4631      	mov	r1, r6
 80a5018:	a802      	add	r0, sp, #8
 80a501a:	f007 fb45 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
 80a501e:	b998      	cbnz	r0, 80a5048 <mbedtls_ecp_check_pub_priv+0xa8>
 80a5020:	4639      	mov	r1, r7
 80a5022:	a805      	add	r0, sp, #20
 80a5024:	f007 fb40 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
    mbedtls_ecp_group_copy( &grp, &prv->grp );

    /* Also checks d is valid */
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );

    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
 80a5028:	b970      	cbnz	r0, 80a5048 <mbedtls_ecp_check_pub_priv+0xa8>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
        mbedtls_mpi_cmp_mpi( &Q.Z, &prv->Q.Z ) )
 80a502a:	4641      	mov	r1, r8
 80a502c:	a808      	add	r0, sp, #32
 80a502e:	f007 fb3b 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>

    /* Also checks d is valid */
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );

    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
 80a5032:	b948      	cbnz	r0, 80a5048 <mbedtls_ecp_check_pub_priv+0xa8>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
        goto cleanup;
    }

cleanup:
    mbedtls_ecp_point_free( &Q );
 80a5034:	a802      	add	r0, sp, #8
 80a5036:	f7ff f840 	bl	80a40ba <mbedtls_ecp_point_free>
    mbedtls_ecp_group_free( &grp );
 80a503a:	a80b      	add	r0, sp, #44	; 0x2c
 80a503c:	f7ff f84d 	bl	80a40da <mbedtls_ecp_group_free>

    return( ret );
 80a5040:	4620      	mov	r0, r4
 80a5042:	e003      	b.n	80a504c <mbedtls_ecp_check_pub_priv+0xac>
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80a5044:	4803      	ldr	r0, [pc, #12]	; (80a5054 <mbedtls_ecp_check_pub_priv+0xb4>)
 80a5046:	e001      	b.n	80a504c <mbedtls_ecp_check_pub_priv+0xac>

    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
        mbedtls_mpi_cmp_mpi( &Q.Z, &prv->Q.Z ) )
    {
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 80a5048:	4c02      	ldr	r4, [pc, #8]	; (80a5054 <mbedtls_ecp_check_pub_priv+0xb4>)
 80a504a:	e7f3      	b.n	80a5034 <mbedtls_ecp_check_pub_priv+0x94>
cleanup:
    mbedtls_ecp_point_free( &Q );
    mbedtls_ecp_group_free( &grp );

    return( ret );
}
 80a504c:	b02a      	add	sp, #168	; 0xa8
 80a504e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a5052:	bf00      	nop
 80a5054:	ffffb080 	.word	0xffffb080

080a5058 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 80a5058:	b538      	push	{r3, r4, r5, lr}
 80a505a:	4605      	mov	r5, r0
 80a505c:	b160      	cbz	r0, 80a5078 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x20>
 80a505e:	4c08      	ldr	r4, [pc, #32]	; (80a5080 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x28>)
 80a5060:	6820      	ldr	r0, [r4, #0]
 80a5062:	b158      	cbz	r0, 80a507c <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x24>
 80a5064:	6862      	ldr	r2, [r4, #4]
 80a5066:	686b      	ldr	r3, [r5, #4]
 80a5068:	429a      	cmp	r2, r3
 80a506a:	d103      	bne.n	80a5074 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x1c>
 80a506c:	68a9      	ldr	r1, [r5, #8]
 80a506e:	f00d fbb3 	bl	80b27d8 <memcmp>
 80a5072:	b110      	cbz	r0, 80a507a <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x22>
 80a5074:	3414      	adds	r4, #20
 80a5076:	e7f3      	b.n	80a5060 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x8>
 80a5078:	bd38      	pop	{r3, r4, r5, pc}
 80a507a:	4620      	mov	r0, r4
 80a507c:	bd38      	pop	{r3, r4, r5, pc}
 80a507e:	bf00      	nop
 80a5080:	080b484c 	.word	0x080b484c

080a5084 <mbedtls_oid_get_attr_short_name>:
        NULL,
    }
};

FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 80a5084:	b570      	push	{r4, r5, r6, lr}
 80a5086:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        NULL,
    }
};

FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
 80a5088:	4605      	mov	r5, r0
 80a508a:	b160      	cbz	r0, 80a50a6 <mbedtls_oid_get_attr_short_name+0x22>
 80a508c:	4c09      	ldr	r4, [pc, #36]	; (80a50b4 <mbedtls_oid_get_attr_short_name+0x30>)
 80a508e:	6820      	ldr	r0, [r4, #0]
 80a5090:	b148      	cbz	r0, 80a50a6 <mbedtls_oid_get_attr_short_name+0x22>
 80a5092:	6862      	ldr	r2, [r4, #4]
 80a5094:	686b      	ldr	r3, [r5, #4]
 80a5096:	429a      	cmp	r2, r3
 80a5098:	d103      	bne.n	80a50a2 <mbedtls_oid_get_attr_short_name+0x1e>
 80a509a:	68a9      	ldr	r1, [r5, #8]
 80a509c:	f00d fb9c 	bl	80b27d8 <memcmp>
 80a50a0:	b120      	cbz	r0, 80a50ac <mbedtls_oid_get_attr_short_name+0x28>
 80a50a2:	3414      	adds	r4, #20
 80a50a4:	e7f3      	b.n	80a508e <mbedtls_oid_get_attr_short_name+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 80a50a6:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80a50aa:	bd70      	pop	{r4, r5, r6, pc}
 80a50ac:	6923      	ldr	r3, [r4, #16]
 80a50ae:	6033      	str	r3, [r6, #0]
 80a50b0:	bd70      	pop	{r4, r5, r6, pc}
 80a50b2:	bf00      	nop
 80a50b4:	080b3c2c 	.word	0x080b3c2c

080a50b8 <mbedtls_oid_get_x509_ext_type>:
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 80a50b8:	b570      	push	{r4, r5, r6, lr}
 80a50ba:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 80a50bc:	4605      	mov	r5, r0
 80a50be:	b160      	cbz	r0, 80a50da <mbedtls_oid_get_x509_ext_type+0x22>
 80a50c0:	4c09      	ldr	r4, [pc, #36]	; (80a50e8 <mbedtls_oid_get_x509_ext_type+0x30>)
 80a50c2:	6820      	ldr	r0, [r4, #0]
 80a50c4:	b148      	cbz	r0, 80a50da <mbedtls_oid_get_x509_ext_type+0x22>
 80a50c6:	6862      	ldr	r2, [r4, #4]
 80a50c8:	686b      	ldr	r3, [r5, #4]
 80a50ca:	429a      	cmp	r2, r3
 80a50cc:	d103      	bne.n	80a50d6 <mbedtls_oid_get_x509_ext_type+0x1e>
 80a50ce:	68a9      	ldr	r1, [r5, #8]
 80a50d0:	f00d fb82 	bl	80b27d8 <memcmp>
 80a50d4:	b120      	cbz	r0, 80a50e0 <mbedtls_oid_get_x509_ext_type+0x28>
 80a50d6:	3414      	adds	r4, #20
 80a50d8:	e7f3      	b.n	80a50c2 <mbedtls_oid_get_x509_ext_type+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 80a50da:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80a50de:	bd70      	pop	{r4, r5, r6, pc}
 80a50e0:	6923      	ldr	r3, [r4, #16]
 80a50e2:	6033      	str	r3, [r6, #0]
 80a50e4:	bd70      	pop	{r4, r5, r6, pc}
 80a50e6:	bf00      	nop
 80a50e8:	080b49c8 	.word	0x080b49c8

080a50ec <mbedtls_oid_get_extended_key_usage>:
    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     "id-kp-OCSPSigning",     "OCSP Signing" },
    { NULL, 0, NULL, NULL },
};

FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 80a50ec:	b570      	push	{r4, r5, r6, lr}
 80a50ee:	460e      	mov	r6, r1
    { ADD_LEN( MBEDTLS_OID_TIME_STAMPING ),    "id-kp-timeStamping",    "Time Stamping" },
    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     "id-kp-OCSPSigning",     "OCSP Signing" },
    { NULL, 0, NULL, NULL },
};

FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
 80a50f0:	4605      	mov	r5, r0
 80a50f2:	b160      	cbz	r0, 80a510e <mbedtls_oid_get_extended_key_usage+0x22>
 80a50f4:	4c09      	ldr	r4, [pc, #36]	; (80a511c <mbedtls_oid_get_extended_key_usage+0x30>)
 80a50f6:	6820      	ldr	r0, [r4, #0]
 80a50f8:	b148      	cbz	r0, 80a510e <mbedtls_oid_get_extended_key_usage+0x22>
 80a50fa:	6862      	ldr	r2, [r4, #4]
 80a50fc:	686b      	ldr	r3, [r5, #4]
 80a50fe:	429a      	cmp	r2, r3
 80a5100:	d103      	bne.n	80a510a <mbedtls_oid_get_extended_key_usage+0x1e>
 80a5102:	68a9      	ldr	r1, [r5, #8]
 80a5104:	f00d fb68 	bl	80b27d8 <memcmp>
 80a5108:	b120      	cbz	r0, 80a5114 <mbedtls_oid_get_extended_key_usage+0x28>
 80a510a:	3410      	adds	r4, #16
 80a510c:	e7f3      	b.n	80a50f6 <mbedtls_oid_get_extended_key_usage+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 80a510e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80a5112:	bd70      	pop	{r4, r5, r6, pc}
 80a5114:	68e3      	ldr	r3, [r4, #12]
 80a5116:	6033      	str	r3, [r6, #0]
 80a5118:	bd70      	pop	{r4, r5, r6, pc}
 80a511a:	bf00      	nop
 80a511c:	080b3dbc 	.word	0x080b3dbc

080a5120 <mbedtls_oid_get_sig_alg_desc>:
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
 80a5120:	b510      	push	{r4, lr}
 80a5122:	460c      	mov	r4, r1
 80a5124:	f7ff ff98 	bl	80a5058 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>
 80a5128:	b118      	cbz	r0, 80a5132 <mbedtls_oid_get_sig_alg_desc+0x12>
 80a512a:	68c3      	ldr	r3, [r0, #12]
 80a512c:	2000      	movs	r0, #0
 80a512e:	6023      	str	r3, [r4, #0]
 80a5130:	bd10      	pop	{r4, pc}
 80a5132:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80a5136:	bd10      	pop	{r4, pc}

080a5138 <mbedtls_oid_get_sig_alg>:
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
 80a5138:	b538      	push	{r3, r4, r5, lr}
 80a513a:	460d      	mov	r5, r1
 80a513c:	4614      	mov	r4, r2
 80a513e:	f7ff ff8b 	bl	80a5058 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>
 80a5142:	b128      	cbz	r0, 80a5150 <mbedtls_oid_get_sig_alg+0x18>
 80a5144:	7c03      	ldrb	r3, [r0, #16]
 80a5146:	702b      	strb	r3, [r5, #0]
 80a5148:	7c43      	ldrb	r3, [r0, #17]
 80a514a:	2000      	movs	r0, #0
 80a514c:	7023      	strb	r3, [r4, #0]
 80a514e:	bd38      	pop	{r3, r4, r5, pc}
 80a5150:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80a5154:	bd38      	pop	{r3, r4, r5, pc}
	...

080a5158 <mbedtls_oid_get_pk_alg>:
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 80a5158:	b570      	push	{r4, r5, r6, lr}
 80a515a:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 80a515c:	4605      	mov	r5, r0
 80a515e:	b160      	cbz	r0, 80a517a <mbedtls_oid_get_pk_alg+0x22>
 80a5160:	4c09      	ldr	r4, [pc, #36]	; (80a5188 <mbedtls_oid_get_pk_alg+0x30>)
 80a5162:	6820      	ldr	r0, [r4, #0]
 80a5164:	b148      	cbz	r0, 80a517a <mbedtls_oid_get_pk_alg+0x22>
 80a5166:	6862      	ldr	r2, [r4, #4]
 80a5168:	686b      	ldr	r3, [r5, #4]
 80a516a:	429a      	cmp	r2, r3
 80a516c:	d103      	bne.n	80a5176 <mbedtls_oid_get_pk_alg+0x1e>
 80a516e:	68a9      	ldr	r1, [r5, #8]
 80a5170:	f00d fb32 	bl	80b27d8 <memcmp>
 80a5174:	b120      	cbz	r0, 80a5180 <mbedtls_oid_get_pk_alg+0x28>
 80a5176:	3414      	adds	r4, #20
 80a5178:	e7f3      	b.n	80a5162 <mbedtls_oid_get_pk_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 80a517a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80a517e:	bd70      	pop	{r4, r5, r6, pc}
 80a5180:	7c23      	ldrb	r3, [r4, #16]
 80a5182:	7033      	strb	r3, [r6, #0]
 80a5184:	bd70      	pop	{r4, r5, r6, pc}
 80a5186:	bf00      	nop
 80a5188:	080b3e2c 	.word	0x080b3e2c

080a518c <mbedtls_oid_get_ec_grp>:
        MBEDTLS_ECP_DP_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 80a518c:	b570      	push	{r4, r5, r6, lr}
 80a518e:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_ECP_DP_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
 80a5190:	4605      	mov	r5, r0
 80a5192:	b160      	cbz	r0, 80a51ae <mbedtls_oid_get_ec_grp+0x22>
 80a5194:	4c09      	ldr	r4, [pc, #36]	; (80a51bc <mbedtls_oid_get_ec_grp+0x30>)
 80a5196:	6820      	ldr	r0, [r4, #0]
 80a5198:	b148      	cbz	r0, 80a51ae <mbedtls_oid_get_ec_grp+0x22>
 80a519a:	6862      	ldr	r2, [r4, #4]
 80a519c:	686b      	ldr	r3, [r5, #4]
 80a519e:	429a      	cmp	r2, r3
 80a51a0:	d103      	bne.n	80a51aa <mbedtls_oid_get_ec_grp+0x1e>
 80a51a2:	68a9      	ldr	r1, [r5, #8]
 80a51a4:	f00d fb18 	bl	80b27d8 <memcmp>
 80a51a8:	b120      	cbz	r0, 80a51b4 <mbedtls_oid_get_ec_grp+0x28>
 80a51aa:	3414      	adds	r4, #20
 80a51ac:	e7f3      	b.n	80a5196 <mbedtls_oid_get_ec_grp+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 80a51ae:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80a51b2:	bd70      	pop	{r4, r5, r6, pc}
 80a51b4:	7c23      	ldrb	r3, [r4, #16]
 80a51b6:	7033      	strb	r3, [r6, #0]
 80a51b8:	bd70      	pop	{r4, r5, r6, pc}
 80a51ba:	bf00      	nop
 80a51bc:	080b3eb8 	.word	0x080b3eb8

080a51c0 <mbedtls_oid_get_cipher_alg>:
        MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
 80a51c0:	b570      	push	{r4, r5, r6, lr}
 80a51c2:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
 80a51c4:	4605      	mov	r5, r0
 80a51c6:	b160      	cbz	r0, 80a51e2 <mbedtls_oid_get_cipher_alg+0x22>
 80a51c8:	4c09      	ldr	r4, [pc, #36]	; (80a51f0 <mbedtls_oid_get_cipher_alg+0x30>)
 80a51ca:	6820      	ldr	r0, [r4, #0]
 80a51cc:	b148      	cbz	r0, 80a51e2 <mbedtls_oid_get_cipher_alg+0x22>
 80a51ce:	6862      	ldr	r2, [r4, #4]
 80a51d0:	686b      	ldr	r3, [r5, #4]
 80a51d2:	429a      	cmp	r2, r3
 80a51d4:	d103      	bne.n	80a51de <mbedtls_oid_get_cipher_alg+0x1e>
 80a51d6:	68a9      	ldr	r1, [r5, #8]
 80a51d8:	f00d fafe 	bl	80b27d8 <memcmp>
 80a51dc:	b120      	cbz	r0, 80a51e8 <mbedtls_oid_get_cipher_alg+0x28>
 80a51de:	3414      	adds	r4, #20
 80a51e0:	e7f3      	b.n	80a51ca <mbedtls_oid_get_cipher_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
 80a51e2:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80a51e6:	bd70      	pop	{r4, r5, r6, pc}
 80a51e8:	7c23      	ldrb	r3, [r4, #16]
 80a51ea:	7033      	strb	r3, [r6, #0]
 80a51ec:	bd70      	pop	{r4, r5, r6, pc}
 80a51ee:	bf00      	nop
 80a51f0:	080b3e7c 	.word	0x080b3e7c

080a51f4 <mbedtls_oid_get_md_alg>:
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
 80a51f4:	b570      	push	{r4, r5, r6, lr}
 80a51f6:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
 80a51f8:	4605      	mov	r5, r0
 80a51fa:	b160      	cbz	r0, 80a5216 <mbedtls_oid_get_md_alg+0x22>
 80a51fc:	4c09      	ldr	r4, [pc, #36]	; (80a5224 <mbedtls_oid_get_md_alg+0x30>)
 80a51fe:	6820      	ldr	r0, [r4, #0]
 80a5200:	b148      	cbz	r0, 80a5216 <mbedtls_oid_get_md_alg+0x22>
 80a5202:	6862      	ldr	r2, [r4, #4]
 80a5204:	686b      	ldr	r3, [r5, #4]
 80a5206:	429a      	cmp	r2, r3
 80a5208:	d103      	bne.n	80a5212 <mbedtls_oid_get_md_alg+0x1e>
 80a520a:	68a9      	ldr	r1, [r5, #8]
 80a520c:	f00d fae4 	bl	80b27d8 <memcmp>
 80a5210:	b120      	cbz	r0, 80a521c <mbedtls_oid_get_md_alg+0x28>
 80a5212:	3414      	adds	r4, #20
 80a5214:	e7f3      	b.n	80a51fe <mbedtls_oid_get_md_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
 80a5216:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80a521a:	bd70      	pop	{r4, r5, r6, pc}
 80a521c:	7c23      	ldrb	r3, [r4, #16]
 80a521e:	7033      	strb	r3, [r6, #0]
 80a5220:	bd70      	pop	{r4, r5, r6, pc}
 80a5222:	bf00      	nop
 80a5224:	080b47d4 	.word	0x080b47d4

080a5228 <mbedtls_oid_get_oid_by_md>:
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
 80a5228:	b530      	push	{r4, r5, lr}
 80a522a:	4b08      	ldr	r3, [pc, #32]	; (80a524c <mbedtls_oid_get_oid_by_md+0x24>)
 80a522c:	681c      	ldr	r4, [r3, #0]
 80a522e:	b14c      	cbz	r4, 80a5244 <mbedtls_oid_get_oid_by_md+0x1c>
 80a5230:	7c1d      	ldrb	r5, [r3, #16]
 80a5232:	4285      	cmp	r5, r0
 80a5234:	d104      	bne.n	80a5240 <mbedtls_oid_get_oid_by_md+0x18>
 80a5236:	600c      	str	r4, [r1, #0]
 80a5238:	685b      	ldr	r3, [r3, #4]
 80a523a:	2000      	movs	r0, #0
 80a523c:	6013      	str	r3, [r2, #0]
 80a523e:	bd30      	pop	{r4, r5, pc}
 80a5240:	3314      	adds	r3, #20
 80a5242:	e7f3      	b.n	80a522c <mbedtls_oid_get_oid_by_md+0x4>
 80a5244:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80a5248:	bd30      	pop	{r4, r5, pc}
 80a524a:	bf00      	nop
 80a524c:	080b47d4 	.word	0x080b47d4

080a5250 <mbedtls_oid_get_md_hmac>:
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
 80a5250:	b570      	push	{r4, r5, r6, lr}
 80a5252:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
 80a5254:	4605      	mov	r5, r0
 80a5256:	b160      	cbz	r0, 80a5272 <mbedtls_oid_get_md_hmac+0x22>
 80a5258:	4c09      	ldr	r4, [pc, #36]	; (80a5280 <mbedtls_oid_get_md_hmac+0x30>)
 80a525a:	6820      	ldr	r0, [r4, #0]
 80a525c:	b148      	cbz	r0, 80a5272 <mbedtls_oid_get_md_hmac+0x22>
 80a525e:	6862      	ldr	r2, [r4, #4]
 80a5260:	686b      	ldr	r3, [r5, #4]
 80a5262:	429a      	cmp	r2, r3
 80a5264:	d103      	bne.n	80a526e <mbedtls_oid_get_md_hmac+0x1e>
 80a5266:	68a9      	ldr	r1, [r5, #8]
 80a5268:	f00d fab6 	bl	80b27d8 <memcmp>
 80a526c:	b120      	cbz	r0, 80a5278 <mbedtls_oid_get_md_hmac+0x28>
 80a526e:	3414      	adds	r4, #20
 80a5270:	e7f3      	b.n	80a525a <mbedtls_oid_get_md_hmac+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
 80a5272:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80a5276:	bd70      	pop	{r4, r5, r6, pc}
 80a5278:	7c23      	ldrb	r3, [r4, #16]
 80a527a:	7033      	strb	r3, [r6, #0]
 80a527c:	bd70      	pop	{r4, r5, r6, pc}
 80a527e:	bf00      	nop
 80a5280:	080b4950 	.word	0x080b4950

080a5284 <mbedtls_oid_get_pkcs12_pbe_alg>:
        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
 80a5284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a5286:	460f      	mov	r7, r1
 80a5288:	4616      	mov	r6, r2
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
 80a528a:	4605      	mov	r5, r0
 80a528c:	b160      	cbz	r0, 80a52a8 <mbedtls_oid_get_pkcs12_pbe_alg+0x24>
 80a528e:	4c0a      	ldr	r4, [pc, #40]	; (80a52b8 <mbedtls_oid_get_pkcs12_pbe_alg+0x34>)
 80a5290:	6820      	ldr	r0, [r4, #0]
 80a5292:	b148      	cbz	r0, 80a52a8 <mbedtls_oid_get_pkcs12_pbe_alg+0x24>
 80a5294:	6862      	ldr	r2, [r4, #4]
 80a5296:	686b      	ldr	r3, [r5, #4]
 80a5298:	429a      	cmp	r2, r3
 80a529a:	d103      	bne.n	80a52a4 <mbedtls_oid_get_pkcs12_pbe_alg+0x20>
 80a529c:	68a9      	ldr	r1, [r5, #8]
 80a529e:	f00d fa9b 	bl	80b27d8 <memcmp>
 80a52a2:	b120      	cbz	r0, 80a52ae <mbedtls_oid_get_pkcs12_pbe_alg+0x2a>
 80a52a4:	3414      	adds	r4, #20
 80a52a6:	e7f3      	b.n	80a5290 <mbedtls_oid_get_pkcs12_pbe_alg+0xc>
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
 80a52a8:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80a52ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a52ae:	7c23      	ldrb	r3, [r4, #16]
 80a52b0:	703b      	strb	r3, [r7, #0]
 80a52b2:	7c63      	ldrb	r3, [r4, #17]
 80a52b4:	7033      	strb	r3, [r6, #0]
 80a52b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a52b8:	080b4798 	.word	0x080b4798

080a52bc <mbedtls_sha1_init>:

void mbedtls_sha1_init( mbedtls_sha1_context *ctx )
{
    SHA1_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha1_context ) );
 80a52bc:	225c      	movs	r2, #92	; 0x5c
 80a52be:	2100      	movs	r1, #0
 80a52c0:	f00d babf 	b.w	80b2842 <memset>

080a52c4 <mbedtls_sha1_free>:
}

void mbedtls_sha1_free( mbedtls_sha1_context *ctx )
{
    if( ctx == NULL )
 80a52c4:	b110      	cbz	r0, 80a52cc <mbedtls_sha1_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha1_context ) );
 80a52c6:	215c      	movs	r1, #92	; 0x5c
 80a52c8:	f001 b8a2 	b.w	80a6410 <mbedtls_platform_zeroize>
 80a52cc:	4770      	bx	lr

080a52ce <mbedtls_sha1_clone>:
}

void mbedtls_sha1_clone( mbedtls_sha1_context *dst,
                         const mbedtls_sha1_context *src )
{
 80a52ce:	b508      	push	{r3, lr}
    SHA1_VALIDATE( dst != NULL );
    SHA1_VALIDATE( src != NULL );

    *dst = *src;
 80a52d0:	225c      	movs	r2, #92	; 0x5c
 80a52d2:	f00d fa90 	bl	80b27f6 <memcpy>
 80a52d6:	bd08      	pop	{r3, pc}

080a52d8 <mbedtls_sha1_starts_ret>:

/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
 80a52d8:	4603      	mov	r3, r0
    SHA1_VALIDATE_RET( ctx != NULL );

    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
 80a52da:	4a0a      	ldr	r2, [pc, #40]	; (80a5304 <mbedtls_sha1_starts_ret+0x2c>)
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
    SHA1_VALIDATE_RET( ctx != NULL );

    ctx->total[0] = 0;
 80a52dc:	2000      	movs	r0, #0
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
 80a52de:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 80a52e0:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80a52e4:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 80a52e6:	f102 4229 	add.w	r2, r2, #2835349504	; 0xa9000000
 80a52ea:	f5a2 1296 	sub.w	r2, r2, #1228800	; 0x12c000
 80a52ee:	f6a2 628b 	subw	r2, r2, #3723	; 0xe8b
 80a52f2:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 80a52f4:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
 80a52f8:	615a      	str	r2, [r3, #20]
    ctx->state[4] = 0xC3D2E1F0;
 80a52fa:	4a03      	ldr	r2, [pc, #12]	; (80a5308 <mbedtls_sha1_starts_ret+0x30>)
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
    SHA1_VALIDATE_RET( ctx != NULL );

    ctx->total[0] = 0;
 80a52fc:	6018      	str	r0, [r3, #0]
    ctx->total[1] = 0;
 80a52fe:	6058      	str	r0, [r3, #4]

    ctx->state[0] = 0x67452301;
    ctx->state[1] = 0xEFCDAB89;
    ctx->state[2] = 0x98BADCFE;
    ctx->state[3] = 0x10325476;
    ctx->state[4] = 0xC3D2E1F0;
 80a5300:	619a      	str	r2, [r3, #24]

    return( 0 );
}
 80a5302:	4770      	bx	lr
 80a5304:	67452301 	.word	0x67452301
 80a5308:	c3d2e1f0 	.word	0xc3d2e1f0

080a530c <mbedtls_internal_sha1_process>:
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 80a530c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t temp, W[16], A, B, C, D, E;

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( (const unsigned char *)data != NULL );

    GET_UINT32_BE( W[ 0], data,  0 );
 80a5310:	784b      	ldrb	r3, [r1, #1]
 80a5312:	780c      	ldrb	r4, [r1, #0]
 80a5314:	041b      	lsls	r3, r3, #16
 80a5316:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80a531a:	78cc      	ldrb	r4, [r1, #3]
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 80a531c:	b097      	sub	sp, #92	; 0x5c
    uint32_t temp, W[16], A, B, C, D, E;

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( (const unsigned char *)data != NULL );

    GET_UINT32_BE( W[ 0], data,  0 );
 80a531e:	4323      	orrs	r3, r4
 80a5320:	788c      	ldrb	r4, [r1, #2]
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 80a5322:	9001      	str	r0, [sp, #4]
    uint32_t temp, W[16], A, B, C, D, E;

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( (const unsigned char *)data != NULL );

    GET_UINT32_BE( W[ 0], data,  0 );
 80a5324:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80a5328:	9306      	str	r3, [sp, #24]
    GET_UINT32_BE( W[ 1], data,  4 );
 80a532a:	794b      	ldrb	r3, [r1, #5]
 80a532c:	7908      	ldrb	r0, [r1, #4]
 80a532e:	041b      	lsls	r3, r3, #16
 80a5330:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80a5334:	79c8      	ldrb	r0, [r1, #7]
    GET_UINT32_BE( W[ 2], data,  8 );
 80a5336:	f891 9008 	ldrb.w	r9, [r1, #8]

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( (const unsigned char *)data != NULL );

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
 80a533a:	4303      	orrs	r3, r0
 80a533c:	7988      	ldrb	r0, [r1, #6]
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
 80a533e:	f891 a00c 	ldrb.w	sl, [r1, #12]

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( (const unsigned char *)data != NULL );

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
 80a5342:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80a5346:	9307      	str	r3, [sp, #28]
    GET_UINT32_BE( W[ 2], data,  8 );
 80a5348:	7a4b      	ldrb	r3, [r1, #9]
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
 80a534a:	7c0a      	ldrb	r2, [r1, #16]
    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( (const unsigned char *)data != NULL );

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 80a534c:	041b      	lsls	r3, r3, #16
 80a534e:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
 80a5352:	f891 900b 	ldrb.w	r9, [r1, #11]
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
 80a5356:	f891 8014 	ldrb.w	r8, [r1, #20]
    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( (const unsigned char *)data != NULL );

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 80a535a:	ea43 0309 	orr.w	r3, r3, r9
 80a535e:	f891 900a 	ldrb.w	r9, [r1, #10]
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
 80a5362:	f891 c018 	ldrb.w	ip, [r1, #24]
    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( (const unsigned char *)data != NULL );

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 80a5366:	ea43 2909 	orr.w	r9, r3, r9, lsl #8
    GET_UINT32_BE( W[ 3], data, 12 );
 80a536a:	7b4b      	ldrb	r3, [r1, #13]
 80a536c:	041b      	lsls	r3, r3, #16
 80a536e:	ea43 630a 	orr.w	r3, r3, sl, lsl #24
 80a5372:	f891 a00f 	ldrb.w	sl, [r1, #15]
 80a5376:	ea43 030a 	orr.w	r3, r3, sl
 80a537a:	f891 a00e 	ldrb.w	sl, [r1, #14]
 80a537e:	ea43 2a0a 	orr.w	sl, r3, sl, lsl #8
    GET_UINT32_BE( W[ 4], data, 16 );
 80a5382:	7c4b      	ldrb	r3, [r1, #17]
 80a5384:	041b      	lsls	r3, r3, #16
 80a5386:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80a538a:	7cca      	ldrb	r2, [r1, #19]
 80a538c:	4313      	orrs	r3, r2
 80a538e:	7c8a      	ldrb	r2, [r1, #18]
 80a5390:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a5394:	930e      	str	r3, [sp, #56]	; 0x38
    GET_UINT32_BE( W[ 5], data, 20 );
 80a5396:	7d4b      	ldrb	r3, [r1, #21]
 80a5398:	041b      	lsls	r3, r3, #16
 80a539a:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 80a539e:	f891 8017 	ldrb.w	r8, [r1, #23]
 80a53a2:	ea43 0308 	orr.w	r3, r3, r8
 80a53a6:	f891 8016 	ldrb.w	r8, [r1, #22]
 80a53aa:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
 80a53ae:	930f      	str	r3, [sp, #60]	; 0x3c
    GET_UINT32_BE( W[ 6], data, 24 );
 80a53b0:	7e4b      	ldrb	r3, [r1, #25]
 80a53b2:	041b      	lsls	r3, r3, #16
 80a53b4:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 80a53b8:	f891 c01b 	ldrb.w	ip, [r1, #27]
    GET_UINT32_BE( W[ 7], data, 28 );
 80a53bc:	f891 e01c 	ldrb.w	lr, [r1, #28]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
 80a53c0:	ea43 030c 	orr.w	r3, r3, ip
 80a53c4:	f891 c01a 	ldrb.w	ip, [r1, #26]
    GET_UINT32_BE( W[ 7], data, 28 );
    GET_UINT32_BE( W[ 8], data, 32 );
 80a53c8:	f891 6020 	ldrb.w	r6, [r1, #32]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
 80a53cc:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80a53d0:	9310      	str	r3, [sp, #64]	; 0x40
    GET_UINT32_BE( W[ 7], data, 28 );
 80a53d2:	7f4b      	ldrb	r3, [r1, #29]
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
 80a53d4:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
    GET_UINT32_BE( W[ 7], data, 28 );
 80a53d8:	041b      	lsls	r3, r3, #16
 80a53da:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 80a53de:	f891 e01f 	ldrb.w	lr, [r1, #31]
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
    GET_UINT32_BE( W[10], data, 40 );
 80a53e2:	f891 0028 	ldrb.w	r0, [r1, #40]	; 0x28
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
    GET_UINT32_BE( W[ 7], data, 28 );
 80a53e6:	ea43 030e 	orr.w	r3, r3, lr
 80a53ea:	f891 e01e 	ldrb.w	lr, [r1, #30]
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
    GET_UINT32_BE( W[10], data, 40 );
    GET_UINT32_BE( W[11], data, 44 );
    GET_UINT32_BE( W[12], data, 48 );
 80a53ee:	f891 4030 	ldrb.w	r4, [r1, #48]	; 0x30
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
    GET_UINT32_BE( W[ 7], data, 28 );
 80a53f2:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a53f6:	9313      	str	r3, [sp, #76]	; 0x4c
    GET_UINT32_BE( W[ 8], data, 32 );
 80a53f8:	f891 3021 	ldrb.w	r3, [r1, #33]	; 0x21
 80a53fc:	041b      	lsls	r3, r3, #16
 80a53fe:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 80a5402:	f891 6023 	ldrb.w	r6, [r1, #35]	; 0x23
 80a5406:	4333      	orrs	r3, r6
 80a5408:	f891 6022 	ldrb.w	r6, [r1, #34]	; 0x22
 80a540c:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 80a5410:	9309      	str	r3, [sp, #36]	; 0x24
    GET_UINT32_BE( W[ 9], data, 36 );
 80a5412:	f891 3025 	ldrb.w	r3, [r1, #37]	; 0x25
 80a5416:	041b      	lsls	r3, r3, #16
 80a5418:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80a541c:	f891 2027 	ldrb.w	r2, [r1, #39]	; 0x27
 80a5420:	4313      	orrs	r3, r2
 80a5422:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
 80a5426:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a542a:	930a      	str	r3, [sp, #40]	; 0x28
    GET_UINT32_BE( W[10], data, 40 );
 80a542c:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
    GET_UINT32_BE( W[11], data, 44 );
 80a5430:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
    GET_UINT32_BE( W[ 7], data, 28 );
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
    GET_UINT32_BE( W[10], data, 40 );
 80a5434:	041b      	lsls	r3, r3, #16
 80a5436:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80a543a:	f891 002b 	ldrb.w	r0, [r1, #43]	; 0x2b
 80a543e:	4303      	orrs	r3, r0
 80a5440:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
 80a5444:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80a5448:	930b      	str	r3, [sp, #44]	; 0x2c
    GET_UINT32_BE( W[11], data, 44 );
 80a544a:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 80a544e:	041b      	lsls	r3, r3, #16
 80a5450:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80a5454:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
 80a5458:	4313      	orrs	r3, r2
 80a545a:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
 80a545e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a5462:	930c      	str	r3, [sp, #48]	; 0x30
    GET_UINT32_BE( W[12], data, 48 );
 80a5464:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 80a5468:	041b      	lsls	r3, r3, #16
 80a546a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80a546e:	f891 4033 	ldrb.w	r4, [r1, #51]	; 0x33
 80a5472:	4323      	orrs	r3, r4
 80a5474:	f891 4032 	ldrb.w	r4, [r1, #50]	; 0x32
 80a5478:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80a547c:	930d      	str	r3, [sp, #52]	; 0x34
    GET_UINT32_BE( W[13], data, 52 );
 80a547e:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 80a5482:	f891 2034 	ldrb.w	r2, [r1, #52]	; 0x34
 80a5486:	041b      	lsls	r3, r3, #16
 80a5488:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80a548c:	f891 2037 	ldrb.w	r2, [r1, #55]	; 0x37
 80a5490:	4313      	orrs	r3, r2
 80a5492:	f891 2036 	ldrb.w	r2, [r1, #54]	; 0x36
 80a5496:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a549a:	9302      	str	r3, [sp, #8]
    GET_UINT32_BE( W[14], data, 56 );
 80a549c:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 80a54a0:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
 80a54a4:	041b      	lsls	r3, r3, #16
 80a54a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80a54aa:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
 80a54ae:	4313      	orrs	r3, r2
 80a54b0:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 80a54b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a54b8:	9303      	str	r3, [sp, #12]
    GET_UINT32_BE( W[15], data, 60 );
 80a54ba:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
 80a54be:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
 80a54c2:	041b      	lsls	r3, r3, #16
 80a54c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80a54c8:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 80a54cc:	f891 103e 	ldrb.w	r1, [r1, #62]	; 0x3e
 80a54d0:	4313      	orrs	r3, r2
 80a54d2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80a54d6:	9304      	str	r3, [sp, #16]
    {                                                           \
        (e) += S((a),5) + F((b),(c),(d)) + K + (x);             \
        (b) = S((b),30);                                        \
    } while( 0 )

    A = ctx->state[0];
 80a54d8:	9b01      	ldr	r3, [sp, #4]
 80a54da:	689b      	ldr	r3, [r3, #8]
 80a54dc:	9311      	str	r3, [sp, #68]	; 0x44
    B = ctx->state[1];
 80a54de:	9b01      	ldr	r3, [sp, #4]
 80a54e0:	68db      	ldr	r3, [r3, #12]
 80a54e2:	9314      	str	r3, [sp, #80]	; 0x50
    C = ctx->state[2];
 80a54e4:	9b01      	ldr	r3, [sp, #4]
 80a54e6:	691b      	ldr	r3, [r3, #16]
 80a54e8:	9305      	str	r3, [sp, #20]
    D = ctx->state[3];
 80a54ea:	9b01      	ldr	r3, [sp, #4]
 80a54ec:	695b      	ldr	r3, [r3, #20]
 80a54ee:	9312      	str	r3, [sp, #72]	; 0x48
    E = ctx->state[4];
 80a54f0:	9b01      	ldr	r3, [sp, #4]

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
 80a54f2:	9a12      	ldr	r2, [sp, #72]	; 0x48

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
 80a54f4:	699b      	ldr	r3, [r3, #24]
 80a54f6:	9315      	str	r3, [sp, #84]	; 0x54

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
 80a54f8:	9b05      	ldr	r3, [sp, #20]
 80a54fa:	ea83 0002 	eor.w	r0, r3, r2
 80a54fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a5500:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a5502:	4018      	ands	r0, r3
 80a5504:	4050      	eors	r0, r2
 80a5506:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a5508:	4ade      	ldr	r2, [pc, #888]	; (80a5884 <mbedtls_internal_sha1_process+0x578>)
    P( E, A, B, C, D, W[1]  );
 80a550a:	ea4f 04b1 	mov.w	r4, r1, ror #2
    E = ctx->state[4];

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
 80a550e:	4413      	add	r3, r2
 80a5510:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 80a5514:	4418      	add	r0, r3
 80a5516:	9b06      	ldr	r3, [sp, #24]
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
 80a5518:	18a7      	adds	r7, r4, r2
    E = ctx->state[4];

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
 80a551a:	4418      	add	r0, r3
 80a551c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a551e:	ea4f 05b3 	mov.w	r5, r3, ror #2
    P( E, A, B, C, D, W[1]  );
 80a5522:	9b05      	ldr	r3, [sp, #20]
    P( D, E, A, B, C, W[2]  );
 80a5524:	ea85 0804 	eor.w	r8, r5, r4

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
 80a5528:	ea83 0c05 	eor.w	ip, r3, r5
 80a552c:	9b05      	ldr	r3, [sp, #20]
 80a552e:	ea0c 0c01 	and.w	ip, ip, r1
 80a5532:	ea8c 0c03 	eor.w	ip, ip, r3
 80a5536:	9b12      	ldr	r3, [sp, #72]	; 0x48
    P( D, E, A, B, C, W[2]  );
 80a5538:	ea08 0800 	and.w	r8, r8, r0

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
 80a553c:	4413      	add	r3, r2
 80a553e:	449c      	add	ip, r3
 80a5540:	9b07      	ldr	r3, [sp, #28]
    P( D, E, A, B, C, W[2]  );
 80a5542:	ea88 0805 	eor.w	r8, r8, r5

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
 80a5546:	449c      	add	ip, r3
    P( D, E, A, B, C, W[2]  );
 80a5548:	9b05      	ldr	r3, [sp, #20]

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
 80a554a:	eb0c 6cf0 	add.w	ip, ip, r0, ror #27
    P( D, E, A, B, C, W[2]  );
 80a554e:	4413      	add	r3, r2
 80a5550:	ea4f 00b0 	mov.w	r0, r0, ror #2
 80a5554:	444b      	add	r3, r9
    P( C, D, E, A, B, W[3]  );
 80a5556:	ea84 0100 	eor.w	r1, r4, r0
#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
 80a555a:	4498      	add	r8, r3
    P( C, D, E, A, B, W[3]  );
 80a555c:	ea01 010c 	and.w	r1, r1, ip
 80a5560:	18ab      	adds	r3, r5, r2
#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
 80a5562:	eb08 68fc 	add.w	r8, r8, ip, ror #27
    P( C, D, E, A, B, W[3]  );
 80a5566:	4061      	eors	r1, r4
 80a5568:	ea4f 0cbc 	mov.w	ip, ip, ror #2
 80a556c:	4453      	add	r3, sl
    P( B, C, D, E, A, W[4]  );
 80a556e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
 80a5570:	440b      	add	r3, r1
    P( B, C, D, E, A, W[4]  );
 80a5572:	ea80 010c 	eor.w	r1, r0, ip
 80a5576:	ea01 0108 	and.w	r1, r1, r8
 80a557a:	4041      	eors	r1, r0
 80a557c:	4427      	add	r7, r4
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
 80a557e:	eb03 63f8 	add.w	r3, r3, r8, ror #27
    P( B, C, D, E, A, W[4]  );
 80a5582:	440f      	add	r7, r1
 80a5584:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( A, B, C, D, E, W[5]  );
 80a5588:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80a558a:	ea8c 0408 	eor.w	r4, ip, r8
 80a558e:	401c      	ands	r4, r3
 80a5590:	4411      	add	r1, r2
 80a5592:	ea84 040c 	eor.w	r4, r4, ip
 80a5596:	4401      	add	r1, r0

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
 80a5598:	eb07 67f3 	add.w	r7, r7, r3, ror #27
    P( A, B, C, D, E, W[5]  );
 80a559c:	4421      	add	r1, r4
 80a559e:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( E, A, B, C, D, W[6]  );
 80a55a2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80a55a4:	ea88 0003 	eor.w	r0, r8, r3
 80a55a8:	18a6      	adds	r6, r4, r2
 80a55aa:	4038      	ands	r0, r7
    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
 80a55ac:	eb01 61f7 	add.w	r1, r1, r7, ror #27
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
 80a55b0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
 80a55b2:	ea4f 07b7 	mov.w	r7, r7, ror #2
 80a55b6:	ea80 0008 	eor.w	r0, r0, r8
 80a55ba:	4466      	add	r6, ip
 80a55bc:	4406      	add	r6, r0
    P( D, E, A, B, C, W[7]  );
 80a55be:	ea83 0007 	eor.w	r0, r3, r7
 80a55c2:	eb04 0e02 	add.w	lr, r4, r2
 80a55c6:	4008      	ands	r0, r1
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
 80a55c8:	eb06 66f1 	add.w	r6, r6, r1, ror #27
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
 80a55cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
 80a55ce:	ea4f 01b1 	mov.w	r1, r1, ror #2
 80a55d2:	4058      	eors	r0, r3
 80a55d4:	44c6      	add	lr, r8
 80a55d6:	4486      	add	lr, r0
    P( C, D, E, A, B, W[8]  );
 80a55d8:	ea87 0001 	eor.w	r0, r7, r1
 80a55dc:	18a5      	adds	r5, r4, r2
 80a55de:	4030      	ands	r0, r6
 80a55e0:	4078      	eors	r0, r7
 80a55e2:	441d      	add	r5, r3
    P( D, E, A, B, C, W[2]  );
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
 80a55e4:	eb0e 6ef6 	add.w	lr, lr, r6, ror #27
    P( C, D, E, A, B, W[8]  );
 80a55e8:	4405      	add	r5, r0
 80a55ea:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( B, C, D, E, A, W[9]  );
 80a55ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a55f0:	ea81 0306 	eor.w	r3, r1, r6
 80a55f4:	1884      	adds	r4, r0, r2
 80a55f6:	ea03 030e 	and.w	r3, r3, lr
    P( C, D, E, A, B, W[3]  );
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
 80a55fa:	eb05 65fe 	add.w	r5, r5, lr, ror #27
    P( B, C, D, E, A, W[9]  );
 80a55fe:	404b      	eors	r3, r1
 80a5600:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( A, B, C, D, E, W[10] );
 80a5604:	980b      	ldr	r0, [sp, #44]	; 0x2c
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
 80a5606:	443c      	add	r4, r7
 80a5608:	441c      	add	r4, r3
    P( A, B, C, D, E, W[10] );
 80a560a:	ea86 030e 	eor.w	r3, r6, lr
 80a560e:	402b      	ands	r3, r5
 80a5610:	4410      	add	r0, r2
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
 80a5612:	eb04 64f5 	add.w	r4, r4, r5, ror #27
    P( A, B, C, D, E, W[10] );
 80a5616:	4073      	eors	r3, r6
 80a5618:	ea4f 05b5 	mov.w	r5, r5, ror #2
 80a561c:	4408      	add	r0, r1
    P( E, A, B, C, D, W[11] );
 80a561e:	990c      	ldr	r1, [sp, #48]	; 0x30
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
 80a5620:	4418      	add	r0, r3
    P( E, A, B, C, D, W[11] );
 80a5622:	ea8e 0305 	eor.w	r3, lr, r5
 80a5626:	eb01 0b02 	add.w	fp, r1, r2
 80a562a:	4023      	ands	r3, r4
    P( A, B, C, D, E, W[5]  );
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
 80a562c:	eb00 60f4 	add.w	r0, r0, r4, ror #27
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
 80a5630:	990d      	ldr	r1, [sp, #52]	; 0x34
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
 80a5632:	ea4f 04b4 	mov.w	r4, r4, ror #2
 80a5636:	ea83 030e 	eor.w	r3, r3, lr
 80a563a:	44b3      	add	fp, r6
 80a563c:	449b      	add	fp, r3
    P( D, E, A, B, C, W[12] );
 80a563e:	ea85 0304 	eor.w	r3, r5, r4
 80a5642:	eb01 0802 	add.w	r8, r1, r2
 80a5646:	4003      	ands	r3, r0
 80a5648:	406b      	eors	r3, r5
 80a564a:	44f0      	add	r8, lr
    P( E, A, B, C, D, W[6]  );
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
 80a564c:	eb0b 6bf0 	add.w	fp, fp, r0, ror #27
    P( D, E, A, B, C, W[12] );
 80a5650:	4498      	add	r8, r3
 80a5652:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( C, D, E, A, B, W[13] );
 80a5656:	9b02      	ldr	r3, [sp, #8]
 80a5658:	ea84 0100 	eor.w	r1, r4, r0
 80a565c:	ea01 010b 	and.w	r1, r1, fp
 80a5660:	4413      	add	r3, r2
    P( D, E, A, B, C, W[7]  );
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
 80a5662:	eb08 68fb 	add.w	r8, r8, fp, ror #27
    P( C, D, E, A, B, W[13] );
 80a5666:	4061      	eors	r1, r4
 80a5668:	ea4f 0bbb 	mov.w	fp, fp, ror #2
 80a566c:	442b      	add	r3, r5
    P( B, C, D, E, A, W[14] );
 80a566e:	9d03      	ldr	r5, [sp, #12]
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
 80a5670:	440b      	add	r3, r1
    P( B, C, D, E, A, W[14] );
 80a5672:	ea80 010b 	eor.w	r1, r0, fp
 80a5676:	18af      	adds	r7, r5, r2
 80a5678:	ea01 0108 	and.w	r1, r1, r8
 80a567c:	4041      	eors	r1, r0
 80a567e:	4427      	add	r7, r4
 80a5680:	440f      	add	r7, r1
    P( A, B, C, D, E, W[15] );
 80a5682:	9904      	ldr	r1, [sp, #16]
    P( C, D, E, A, B, W[8]  );
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
 80a5684:	eb03 63f8 	add.w	r3, r3, r8, ror #27
    P( B, C, D, E, A, W[14] );
 80a5688:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( A, B, C, D, E, W[15] );
 80a568c:	ea8b 0408 	eor.w	r4, fp, r8
 80a5690:	4411      	add	r1, r2
 80a5692:	401c      	ands	r4, r3
 80a5694:	4401      	add	r1, r0
    P( E, A, B, C, D, R(16) );
 80a5696:	9806      	ldr	r0, [sp, #24]
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
 80a5698:	ea84 040b 	eor.w	r4, r4, fp
 80a569c:	4421      	add	r1, r4
    P( E, A, B, C, D, R(16) );
 80a569e:	ea80 0409 	eor.w	r4, r0, r9
 80a56a2:	9809      	ldr	r0, [sp, #36]	; 0x24
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
 80a56a4:	eb07 67f3 	add.w	r7, r7, r3, ror #27
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 80a56a8:	4044      	eors	r4, r0
 80a56aa:	9802      	ldr	r0, [sp, #8]
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
 80a56ac:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( E, A, B, C, D, R(16) );
 80a56b0:	4044      	eors	r4, r0
 80a56b2:	ea4f 70f4 	mov.w	r0, r4, ror #31
 80a56b6:	9006      	str	r0, [sp, #24]
 80a56b8:	9c06      	ldr	r4, [sp, #24]
 80a56ba:	ea88 0003 	eor.w	r0, r8, r3
 80a56be:	eb04 0c02 	add.w	ip, r4, r2
 80a56c2:	4038      	ands	r0, r7
 80a56c4:	ea80 0008 	eor.w	r0, r0, r8
 80a56c8:	44dc      	add	ip, fp
 80a56ca:	4484      	add	ip, r0
    P( D, E, A, B, C, R(17) );
 80a56cc:	9807      	ldr	r0, [sp, #28]
 80a56ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a56d0:	ea80 000a 	eor.w	r0, r0, sl
 80a56d4:	4060      	eors	r0, r4
 80a56d6:	4068      	eors	r0, r5
 80a56d8:	ea4f 70f0 	mov.w	r0, r0, ror #31
 80a56dc:	9007      	str	r0, [sp, #28]
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
 80a56de:	eb01 61f7 	add.w	r1, r1, r7, ror #27
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
 80a56e2:	9c07      	ldr	r4, [sp, #28]
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 80a56e4:	ea4f 07b7 	mov.w	r7, r7, ror #2
    P( D, E, A, B, C, R(17) );
 80a56e8:	ea83 0007 	eor.w	r0, r3, r7
 80a56ec:	eb04 0e02 	add.w	lr, r4, r2
 80a56f0:	4008      	ands	r0, r1
 80a56f2:	4058      	eors	r0, r3
 80a56f4:	44c6      	add	lr, r8
 80a56f6:	4486      	add	lr, r0
    P( C, D, E, A, B, R(18) );
 80a56f8:	980e      	ldr	r0, [sp, #56]	; 0x38
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 80a56fa:	eb0c 6cf1 	add.w	ip, ip, r1, ror #27
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 80a56fe:	ea89 0900 	eor.w	r9, r9, r0
 80a5702:	980b      	ldr	r0, [sp, #44]	; 0x2c
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
 80a5704:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(18) );
 80a5708:	ea89 0900 	eor.w	r9, r9, r0
 80a570c:	9804      	ldr	r0, [sp, #16]
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
 80a570e:	eb0e 6efc 	add.w	lr, lr, ip, ror #27
    P( C, D, E, A, B, R(18) );
 80a5712:	ea89 0900 	eor.w	r9, r9, r0
 80a5716:	ea4f 70f9 	mov.w	r0, r9, ror #31
 80a571a:	9008      	str	r0, [sp, #32]
 80a571c:	9c08      	ldr	r4, [sp, #32]
 80a571e:	ea87 0001 	eor.w	r0, r7, r1
 80a5722:	18a6      	adds	r6, r4, r2
 80a5724:	441e      	add	r6, r3
    P( B, C, D, E, A, R(19) );
 80a5726:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 80a5728:	ea00 000c 	and.w	r0, r0, ip
    P( B, C, D, E, A, R(19) );
 80a572c:	ea8a 0a03 	eor.w	sl, sl, r3
 80a5730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 80a5732:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( B, C, D, E, A, R(19) );
 80a5736:	ea8a 0a03 	eor.w	sl, sl, r3
 80a573a:	9b06      	ldr	r3, [sp, #24]
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 80a573c:	4078      	eors	r0, r7
    P( B, C, D, E, A, R(19) );
 80a573e:	ea8a 0a03 	eor.w	sl, sl, r3
 80a5742:	ea4f 7afa 	mov.w	sl, sl, ror #31
 80a5746:	ea81 030c 	eor.w	r3, r1, ip
 80a574a:	ea03 030e 	and.w	r3, r3, lr
 80a574e:	4452      	add	r2, sl
 80a5750:	404b      	eors	r3, r1
 80a5752:	443a      	add	r2, r7
 80a5754:	189d      	adds	r5, r3, r2
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 80a5756:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a5758:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80a575a:	4f4b      	ldr	r7, [pc, #300]	; (80a5888 <mbedtls_internal_sha1_process+0x57c>)
 80a575c:	ea83 0902 	eor.w	r9, r3, r2
 80a5760:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 80a5762:	4406      	add	r6, r0
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 80a5764:	ea89 0903 	eor.w	r9, r9, r3
 80a5768:	9b07      	ldr	r3, [sp, #28]
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 80a576a:	eb06 66fe 	add.w	r6, r6, lr, ror #27
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 80a576e:	ea89 0903 	eor.w	r9, r9, r3
 80a5772:	ea4f 79f9 	mov.w	r9, r9, ror #31
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
 80a5776:	ea4f 0ebe 	mov.w	lr, lr, ror #2
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 80a577a:	ea8c 030e 	eor.w	r3, ip, lr
 80a577e:	eb09 0007 	add.w	r0, r9, r7
 80a5782:	4073      	eors	r3, r6
 80a5784:	4408      	add	r0, r1
    P( E, A, B, C, D, R(21) );
 80a5786:	9a13      	ldr	r2, [sp, #76]	; 0x4c
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 80a5788:	4418      	add	r0, r3
    P( E, A, B, C, D, R(21) );
 80a578a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
 80a578c:	eb05 65f6 	add.w	r5, r5, r6, ror #27

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
 80a5790:	ea83 0802 	eor.w	r8, r3, r2
 80a5794:	9b02      	ldr	r3, [sp, #8]
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 80a5796:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( E, A, B, C, D, R(21) );
 80a579a:	ea88 0803 	eor.w	r8, r8, r3
 80a579e:	ea88 0804 	eor.w	r8, r8, r4
 80a57a2:	ea4f 78f8 	mov.w	r8, r8, ror #31
 80a57a6:	ea8e 0306 	eor.w	r3, lr, r6
 80a57aa:	eb08 0207 	add.w	r2, r8, r7
 80a57ae:	406b      	eors	r3, r5
 80a57b0:	4462      	add	r2, ip
    P( D, E, A, B, C, R(22) );
 80a57b2:	9909      	ldr	r1, [sp, #36]	; 0x24

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
 80a57b4:	441a      	add	r2, r3
    P( D, E, A, B, C, R(22) );
 80a57b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 80a57b8:	eb00 60f5 	add.w	r0, r0, r5, ror #27
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
 80a57bc:	ea83 0c01 	eor.w	ip, r3, r1
 80a57c0:	9b03      	ldr	r3, [sp, #12]

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
 80a57c2:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( D, E, A, B, C, R(22) );
 80a57c6:	ea8c 0c03 	eor.w	ip, ip, r3
 80a57ca:	ea8c 0c0a 	eor.w	ip, ip, sl
 80a57ce:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 80a57d2:	ea86 0305 	eor.w	r3, r6, r5
 80a57d6:	eb0c 0407 	add.w	r4, ip, r7
 80a57da:	4043      	eors	r3, r0
 80a57dc:	4474      	add	r4, lr
    P( C, D, E, A, B, R(23) );
 80a57de:	990a      	ldr	r1, [sp, #40]	; 0x28
#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
 80a57e0:	441c      	add	r4, r3
    P( C, D, E, A, B, R(23) );
 80a57e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
 80a57e4:	eb02 62f0 	add.w	r2, r2, r0, ror #27
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
 80a57e8:	ea83 0e01 	eor.w	lr, r3, r1
 80a57ec:	9b04      	ldr	r3, [sp, #16]
#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
 80a57ee:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( C, D, E, A, B, R(23) );
 80a57f2:	ea8e 0e03 	eor.w	lr, lr, r3
 80a57f6:	ea8e 0e09 	eor.w	lr, lr, r9
 80a57fa:	ea4f 7efe 	mov.w	lr, lr, ror #31
 80a57fe:	ea85 0100 	eor.w	r1, r5, r0
 80a5802:	eb0e 0307 	add.w	r3, lr, r7
 80a5806:	4051      	eors	r1, r2
 80a5808:	4433      	add	r3, r6
 80a580a:	440b      	add	r3, r1
    P( B, C, D, E, A, R(24) );
 80a580c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80a580e:	9909      	ldr	r1, [sp, #36]	; 0x24
#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
 80a5810:	eb04 64f2 	add.w	r4, r4, r2, ror #27
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
 80a5814:	404e      	eors	r6, r1
 80a5816:	9906      	ldr	r1, [sp, #24]
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
 80a5818:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, R(24) );
 80a581c:	404e      	eors	r6, r1
 80a581e:	ea86 0608 	eor.w	r6, r6, r8
 80a5822:	ea4f 71f6 	mov.w	r1, r6, ror #31
 80a5826:	9109      	str	r1, [sp, #36]	; 0x24
 80a5828:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a582a:	ea80 0102 	eor.w	r1, r0, r2
 80a582e:	eb06 0b07 	add.w	fp, r6, r7
 80a5832:	4061      	eors	r1, r4
 80a5834:	44ab      	add	fp, r5
 80a5836:	448b      	add	fp, r1
    P( A, B, C, D, E, R(25) );
 80a5838:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80a583a:	990a      	ldr	r1, [sp, #40]	; 0x28
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
 80a583c:	eb03 63f4 	add.w	r3, r3, r4, ror #27
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
 80a5840:	4069      	eors	r1, r5
 80a5842:	9d07      	ldr	r5, [sp, #28]

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
 80a5844:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( A, B, C, D, E, R(25) );
 80a5848:	4069      	eors	r1, r5
 80a584a:	ea81 010c 	eor.w	r1, r1, ip
 80a584e:	ea4f 71f1 	mov.w	r1, r1, ror #31
 80a5852:	910a      	str	r1, [sp, #40]	; 0x28
 80a5854:	ea82 0504 	eor.w	r5, r2, r4
 80a5858:	4439      	add	r1, r7
 80a585a:	405d      	eors	r5, r3
 80a585c:	4401      	add	r1, r0
 80a585e:	4429      	add	r1, r5
    P( E, A, B, C, D, R(26) );
 80a5860:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80a5862:	9d0d      	ldr	r5, [sp, #52]	; 0x34

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
 80a5864:	eb0b 6bf3 	add.w	fp, fp, r3, ror #27
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
 80a5868:	4068      	eors	r0, r5
 80a586a:	9d08      	ldr	r5, [sp, #32]
    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
 80a586c:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( E, A, B, C, D, R(26) );
 80a5870:	4068      	eors	r0, r5
 80a5872:	ea80 000e 	eor.w	r0, r0, lr
 80a5876:	ea4f 70f0 	mov.w	r0, r0, ror #31
 80a587a:	900b      	str	r0, [sp, #44]	; 0x2c
 80a587c:	ea84 0503 	eor.w	r5, r4, r3
 80a5880:	e004      	b.n	80a588c <mbedtls_internal_sha1_process+0x580>
 80a5882:	bf00      	nop
 80a5884:	5a827999 	.word	0x5a827999
 80a5888:	6ed9eba1 	.word	0x6ed9eba1
 80a588c:	4438      	add	r0, r7
 80a588e:	ea85 050b 	eor.w	r5, r5, fp
 80a5892:	4410      	add	r0, r2
 80a5894:	4428      	add	r0, r5
    P( D, E, A, B, C, R(27) );
 80a5896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a5898:	9d02      	ldr	r5, [sp, #8]
    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
 80a589a:	eb01 61fb 	add.w	r1, r1, fp, ror #27
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
 80a589e:	406a      	eors	r2, r5
 80a58a0:	ea82 020a 	eor.w	r2, r2, sl
 80a58a4:	4072      	eors	r2, r6
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
 80a58a6:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( D, E, A, B, C, R(27) );
 80a58aa:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80a58ae:	920c      	str	r2, [sp, #48]	; 0x30
 80a58b0:	ea83 050b 	eor.w	r5, r3, fp
 80a58b4:	443a      	add	r2, r7
 80a58b6:	404d      	eors	r5, r1
 80a58b8:	4422      	add	r2, r4
 80a58ba:	442a      	add	r2, r5
    P( C, D, E, A, B, R(28) );
 80a58bc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80a58be:	9d03      	ldr	r5, [sp, #12]
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
 80a58c0:	eb00 60f1 	add.w	r0, r0, r1, ror #27
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
 80a58c4:	406c      	eors	r4, r5
 80a58c6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a58c8:	ea84 0409 	eor.w	r4, r4, r9
 80a58cc:	406c      	eors	r4, r5
 80a58ce:	ea4f 74f4 	mov.w	r4, r4, ror #31
 80a58d2:	940d      	str	r4, [sp, #52]	; 0x34
 80a58d4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
 80a58d6:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(28) );
 80a58da:	ea8b 0401 	eor.w	r4, fp, r1
 80a58de:	443d      	add	r5, r7
 80a58e0:	4044      	eors	r4, r0
 80a58e2:	441d      	add	r5, r3
 80a58e4:	4425      	add	r5, r4
    P( B, C, D, E, A, R(29) );
 80a58e6:	9b02      	ldr	r3, [sp, #8]
 80a58e8:	9c04      	ldr	r4, [sp, #16]
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
 80a58ea:	eb02 62f0 	add.w	r2, r2, r0, ror #27
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
 80a58ee:	4063      	eors	r3, r4
 80a58f0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80a58f2:	ea83 0308 	eor.w	r3, r3, r8
 80a58f6:	4063      	eors	r3, r4
 80a58f8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80a58fc:	9302      	str	r3, [sp, #8]
 80a58fe:	9c02      	ldr	r4, [sp, #8]
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
 80a5900:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( B, C, D, E, A, R(29) );
 80a5904:	ea81 0300 	eor.w	r3, r1, r0
 80a5908:	443c      	add	r4, r7
 80a590a:	4053      	eors	r3, r2
 80a590c:	445c      	add	r4, fp
 80a590e:	441c      	add	r4, r3
    P( A, B, C, D, E, R(30) );
 80a5910:	9b03      	ldr	r3, [sp, #12]
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
 80a5912:	eb05 65f2 	add.w	r5, r5, r2, ror #27
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 80a5916:	461e      	mov	r6, r3
 80a5918:	9b06      	ldr	r3, [sp, #24]
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
 80a591a:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( A, B, C, D, E, R(30) );
 80a591e:	4073      	eors	r3, r6
 80a5920:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80a5922:	ea83 030c 	eor.w	r3, r3, ip
 80a5926:	4073      	eors	r3, r6
 80a5928:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80a592c:	9303      	str	r3, [sp, #12]
 80a592e:	443b      	add	r3, r7
    P( E, A, B, C, D, R(31) );
 80a5930:	9e07      	ldr	r6, [sp, #28]
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 80a5932:	440b      	add	r3, r1
    P( E, A, B, C, D, R(31) );
 80a5934:	9904      	ldr	r1, [sp, #16]
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 80a5936:	ea80 0b02 	eor.w	fp, r0, r2
    P( E, A, B, C, D, R(31) );
 80a593a:	4071      	eors	r1, r6
 80a593c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80a593e:	ea81 010e 	eor.w	r1, r1, lr
 80a5942:	4071      	eors	r1, r6
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
 80a5944:	eb04 64f5 	add.w	r4, r4, r5, ror #27
    P( A, B, C, D, E, R(30) );
 80a5948:	ea8b 0b05 	eor.w	fp, fp, r5
    P( E, A, B, C, D, R(31) );
 80a594c:	ea4f 71f1 	mov.w	r1, r1, ror #31
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 80a5950:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( E, A, B, C, D, R(31) );
 80a5954:	9104      	str	r1, [sp, #16]
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 80a5956:	445b      	add	r3, fp
    P( E, A, B, C, D, R(31) );
 80a5958:	4439      	add	r1, r7
 80a595a:	ea82 0b05 	eor.w	fp, r2, r5
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 80a595e:	eb03 63f4 	add.w	r3, r3, r4, ror #27
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
 80a5962:	9e08      	ldr	r6, [sp, #32]
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 80a5964:	ea8b 0b04 	eor.w	fp, fp, r4
 80a5968:	4401      	add	r1, r0
 80a596a:	ea4f 00b4 	mov.w	r0, r4, ror #2
    P( D, E, A, B, C, R(32) );
 80a596e:	9c06      	ldr	r4, [sp, #24]
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 80a5970:	4459      	add	r1, fp
    P( D, E, A, B, C, R(32) );
 80a5972:	4074      	eors	r4, r6
 80a5974:	9e09      	ldr	r6, [sp, #36]	; 0x24
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 80a5976:	eb01 61f3 	add.w	r1, r1, r3, ror #27
    P( D, E, A, B, C, R(32) );
 80a597a:	4074      	eors	r4, r6
 80a597c:	9e02      	ldr	r6, [sp, #8]
 80a597e:	4074      	eors	r4, r6
 80a5980:	ea4f 74f4 	mov.w	r4, r4, ror #31
 80a5984:	9406      	str	r4, [sp, #24]
 80a5986:	9e06      	ldr	r6, [sp, #24]
 80a5988:	ea85 0400 	eor.w	r4, r5, r0
 80a598c:	eb06 0b07 	add.w	fp, r6, r7
 80a5990:	445a      	add	r2, fp
 80a5992:	405c      	eors	r4, r3
 80a5994:	4414      	add	r4, r2
    P( C, D, E, A, B, R(33) );
 80a5996:	9a07      	ldr	r2, [sp, #28]
 80a5998:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80a599a:	ea82 020a 	eor.w	r2, r2, sl
 80a599e:	4072      	eors	r2, r6
 80a59a0:	9e03      	ldr	r6, [sp, #12]
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
 80a59a2:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( C, D, E, A, B, R(33) );
 80a59a6:	4072      	eors	r2, r6
 80a59a8:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80a59ac:	9207      	str	r2, [sp, #28]
 80a59ae:	9e07      	ldr	r6, [sp, #28]
 80a59b0:	ea80 0203 	eor.w	r2, r0, r3
 80a59b4:	eb06 0b07 	add.w	fp, r6, r7
 80a59b8:	445d      	add	r5, fp
 80a59ba:	404a      	eors	r2, r1
 80a59bc:	442a      	add	r2, r5
    P( B, C, D, E, A, R(34) );
 80a59be:	9d08      	ldr	r5, [sp, #32]
 80a59c0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80a59c2:	ea85 0509 	eor.w	r5, r5, r9
 80a59c6:	4075      	eors	r5, r6
 80a59c8:	9e04      	ldr	r6, [sp, #16]
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
 80a59ca:	eb04 64f1 	add.w	r4, r4, r1, ror #27
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
 80a59ce:	4075      	eors	r5, r6
 80a59d0:	ea4f 75f5 	mov.w	r5, r5, ror #31
 80a59d4:	9508      	str	r5, [sp, #32]
 80a59d6:	9e08      	ldr	r6, [sp, #32]
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 80a59d8:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( B, C, D, E, A, R(34) );
 80a59dc:	eb06 0b07 	add.w	fp, r6, r7
 80a59e0:	ea83 0501 	eor.w	r5, r3, r1
 80a59e4:	4458      	add	r0, fp
 80a59e6:	4065      	eors	r5, r4
 80a59e8:	4405      	add	r5, r0
    P( A, B, C, D, E, R(35) );
 80a59ea:	980c      	ldr	r0, [sp, #48]	; 0x30
 80a59ec:	ea8a 0a08 	eor.w	sl, sl, r8
 80a59f0:	ea8a 0a00 	eor.w	sl, sl, r0
 80a59f4:	9806      	ldr	r0, [sp, #24]
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 80a59f6:	eb02 62f4 	add.w	r2, r2, r4, ror #27
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
 80a59fa:	ea8a 0a00 	eor.w	sl, sl, r0
 80a59fe:	ea4f 7bfa 	mov.w	fp, sl, ror #31
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
 80a5a02:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( A, B, C, D, E, R(35) );
 80a5a06:	eb0b 0a07 	add.w	sl, fp, r7
 80a5a0a:	ea81 0004 	eor.w	r0, r1, r4
 80a5a0e:	4050      	eors	r0, r2
 80a5a10:	4453      	add	r3, sl
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
 80a5a12:	eb05 65f2 	add.w	r5, r5, r2, ror #27
    P( A, B, C, D, E, R(35) );
 80a5a16:	4403      	add	r3, r0
 80a5a18:	eb03 60f5 	add.w	r0, r3, r5, ror #27
    P( E, A, B, C, D, R(36) );
 80a5a1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a5a1e:	ea89 090c 	eor.w	r9, r9, ip
 80a5a22:	ea89 0903 	eor.w	r9, r9, r3
 80a5a26:	9b07      	ldr	r3, [sp, #28]
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
 80a5a28:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(36) );
 80a5a2c:	ea89 0903 	eor.w	r9, r9, r3
 80a5a30:	ea4f 7af9 	mov.w	sl, r9, ror #31
 80a5a34:	eb0a 0907 	add.w	r9, sl, r7
 80a5a38:	ea84 0302 	eor.w	r3, r4, r2
 80a5a3c:	406b      	eors	r3, r5
 80a5a3e:	4449      	add	r1, r9
 80a5a40:	4419      	add	r1, r3
 80a5a42:	eb01 63f0 	add.w	r3, r1, r0, ror #27
    P( D, E, A, B, C, R(37) );
 80a5a46:	9902      	ldr	r1, [sp, #8]
 80a5a48:	ea88 080e 	eor.w	r8, r8, lr
 80a5a4c:	ea88 0801 	eor.w	r8, r8, r1
 80a5a50:	ea88 0806 	eor.w	r8, r8, r6
 80a5a54:	ea4f 71f8 	mov.w	r1, r8, ror #31
 80a5a58:	910e      	str	r1, [sp, #56]	; 0x38
 80a5a5a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
 80a5a5c:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( D, E, A, B, C, R(37) );
 80a5a60:	eb06 0807 	add.w	r8, r6, r7
 80a5a64:	ea82 0105 	eor.w	r1, r2, r5
 80a5a68:	4041      	eors	r1, r0
 80a5a6a:	4444      	add	r4, r8
 80a5a6c:	440c      	add	r4, r1
 80a5a6e:	eb04 61f3 	add.w	r1, r4, r3, ror #27
    P( C, D, E, A, B, R(38) );
 80a5a72:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
 80a5a74:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( C, D, E, A, B, R(38) );
 80a5a78:	ea8c 0c04 	eor.w	ip, ip, r4
 80a5a7c:	9c03      	ldr	r4, [sp, #12]
    P( B, C, D, E, A, R(39) );
 80a5a7e:	ea4f 08b1 	mov.w	r8, r1, ror #2
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
 80a5a82:	ea8c 0c04 	eor.w	ip, ip, r4
 80a5a86:	ea8c 0c0b 	eor.w	ip, ip, fp
 80a5a8a:	ea4f 74fc 	mov.w	r4, ip, ror #31
 80a5a8e:	940f      	str	r4, [sp, #60]	; 0x3c
 80a5a90:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80a5a92:	ea85 0400 	eor.w	r4, r5, r0
 80a5a96:	eb06 0c07 	add.w	ip, r6, r7
 80a5a9a:	405c      	eors	r4, r3
 80a5a9c:	4462      	add	r2, ip
 80a5a9e:	4422      	add	r2, r4
 80a5aa0:	eb02 64f1 	add.w	r4, r2, r1, ror #27
    P( B, C, D, E, A, R(39) );
 80a5aa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
 80a5aa6:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(39) );
 80a5aaa:	ea8e 0e02 	eor.w	lr, lr, r2
 80a5aae:	9a04      	ldr	r2, [sp, #16]
 80a5ab0:	ea8e 0e02 	eor.w	lr, lr, r2
 80a5ab4:	ea8e 0e0a 	eor.w	lr, lr, sl
 80a5ab8:	ea4f 72fe 	mov.w	r2, lr, ror #31
 80a5abc:	9210      	str	r2, [sp, #64]	; 0x40
 80a5abe:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80a5ac0:	ea80 0203 	eor.w	r2, r0, r3
 80a5ac4:	4437      	add	r7, r6
 80a5ac6:	404a      	eors	r2, r1
 80a5ac8:	443d      	add	r5, r7
#undef F

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 80a5aca:	9e09      	ldr	r6, [sp, #36]	; 0x24
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
 80a5acc:	4415      	add	r5, r2
#undef F

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 80a5ace:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a5ad0:	ea04 0108 	and.w	r1, r4, r8
 80a5ad4:	4056      	eors	r6, r2
 80a5ad6:	9a06      	ldr	r2, [sp, #24]
 80a5ad8:	4fd3      	ldr	r7, [pc, #844]	; (80a5e28 <mbedtls_internal_sha1_process+0xb1c>)
 80a5ada:	4056      	eors	r6, r2
 80a5adc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
 80a5ade:	eb05 65f4 	add.w	r5, r5, r4, ror #27
#undef F

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 80a5ae2:	4056      	eors	r6, r2
 80a5ae4:	ea4f 72f6 	mov.w	r2, r6, ror #31
 80a5ae8:	9209      	str	r2, [sp, #36]	; 0x24
 80a5aea:	ea44 0208 	orr.w	r2, r4, r8
 80a5aee:	401a      	ands	r2, r3
 80a5af0:	430a      	orrs	r2, r1
 80a5af2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a5af4:	ea4f 04b4 	mov.w	r4, r4, ror #2
 80a5af8:	4439      	add	r1, r7
 80a5afa:	4408      	add	r0, r1
 80a5afc:	eb00 60f5 	add.w	r0, r0, r5, ror #27
 80a5b00:	4402      	add	r2, r0
    P( E, A, B, C, D, R(41) );
 80a5b02:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a5b04:	980c      	ldr	r0, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(42) );
 80a5b06:	ea4f 06b2 	mov.w	r6, r2, ror #2

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
 80a5b0a:	4041      	eors	r1, r0
 80a5b0c:	9807      	ldr	r0, [sp, #28]
 80a5b0e:	4041      	eors	r1, r0
 80a5b10:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80a5b12:	4041      	eors	r1, r0
 80a5b14:	ea4f 71f1 	mov.w	r1, r1, ror #31
 80a5b18:	ea45 0004 	orr.w	r0, r5, r4
 80a5b1c:	910a      	str	r1, [sp, #40]	; 0x28
 80a5b1e:	ea00 0008 	and.w	r0, r0, r8
 80a5b22:	ea05 0104 	and.w	r1, r5, r4
 80a5b26:	4308      	orrs	r0, r1
 80a5b28:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a5b2a:	ea4f 05b5 	mov.w	r5, r5, ror #2
 80a5b2e:	4439      	add	r1, r7
 80a5b30:	440b      	add	r3, r1
 80a5b32:	4403      	add	r3, r0
    P( D, E, A, B, C, R(42) );
 80a5b34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80a5b36:	980d      	ldr	r0, [sp, #52]	; 0x34

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
 80a5b38:	eb03 63f2 	add.w	r3, r3, r2, ror #27
    P( D, E, A, B, C, R(42) );
 80a5b3c:	4048      	eors	r0, r1
 80a5b3e:	9908      	ldr	r1, [sp, #32]
    P( C, D, E, A, B, R(43) );
 80a5b40:	ea4f 0eb3 	mov.w	lr, r3, ror #2
#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
 80a5b44:	4048      	eors	r0, r1
 80a5b46:	9910      	ldr	r1, [sp, #64]	; 0x40
 80a5b48:	4048      	eors	r0, r1
 80a5b4a:	ea4f 71f0 	mov.w	r1, r0, ror #31
 80a5b4e:	ea42 0005 	orr.w	r0, r2, r5
 80a5b52:	910b      	str	r1, [sp, #44]	; 0x2c
 80a5b54:	4020      	ands	r0, r4
 80a5b56:	ea02 0105 	and.w	r1, r2, r5
 80a5b5a:	4308      	orrs	r0, r1
 80a5b5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    P( C, D, E, A, B, R(43) );
 80a5b5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
 80a5b60:	4439      	add	r1, r7
 80a5b62:	4441      	add	r1, r8
 80a5b64:	eb01 61f3 	add.w	r1, r1, r3, ror #27
 80a5b68:	4408      	add	r0, r1
    P( C, D, E, A, B, R(43) );
 80a5b6a:	9902      	ldr	r1, [sp, #8]
 80a5b6c:	4051      	eors	r1, r2
 80a5b6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a5b70:	ea81 010b 	eor.w	r1, r1, fp
 80a5b74:	4051      	eors	r1, r2
 80a5b76:	ea4f 72f1 	mov.w	r2, r1, ror #31
 80a5b7a:	ea43 0106 	orr.w	r1, r3, r6
 80a5b7e:	920c      	str	r2, [sp, #48]	; 0x30
 80a5b80:	4029      	ands	r1, r5
 80a5b82:	ea03 0206 	and.w	r2, r3, r6
 80a5b86:	4311      	orrs	r1, r2
 80a5b88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    P( B, C, D, E, A, R(44) );
 80a5b8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
 80a5b8c:	443a      	add	r2, r7
 80a5b8e:	4414      	add	r4, r2
    P( B, C, D, E, A, R(44) );
 80a5b90:	9a03      	ldr	r2, [sp, #12]
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
 80a5b92:	440c      	add	r4, r1
    P( B, C, D, E, A, R(44) );
 80a5b94:	4053      	eors	r3, r2
 80a5b96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a5b98:	ea83 030a 	eor.w	r3, r3, sl
 80a5b9c:	4053      	eors	r3, r2
 80a5b9e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80a5ba2:	930d      	str	r3, [sp, #52]	; 0x34
 80a5ba4:	ea40 030e 	orr.w	r3, r0, lr
 80a5ba8:	ea03 0206 	and.w	r2, r3, r6
 80a5bac:	ea00 030e 	and.w	r3, r0, lr
 80a5bb0:	4313      	orrs	r3, r2
 80a5bb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
 80a5bb4:	eb04 61f0 	add.w	r1, r4, r0, ror #27
    P( B, C, D, E, A, R(44) );
 80a5bb8:	443a      	add	r2, r7
 80a5bba:	4415      	add	r5, r2
 80a5bbc:	eb05 65f1 	add.w	r5, r5, r1, ror #27
 80a5bc0:	441d      	add	r5, r3
    P( A, B, C, D, E, R(45) );
 80a5bc2:	9a04      	ldr	r2, [sp, #16]
 80a5bc4:	9b02      	ldr	r3, [sp, #8]

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
 80a5bc6:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( A, B, C, D, E, R(45) );
 80a5bca:	405a      	eors	r2, r3
 80a5bcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a5bce:	405a      	eors	r2, r3
 80a5bd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a5bd2:	405a      	eors	r2, r3
 80a5bd4:	ea4f 73f2 	mov.w	r3, r2, ror #31
 80a5bd8:	9302      	str	r3, [sp, #8]
 80a5bda:	9a02      	ldr	r2, [sp, #8]
 80a5bdc:	ea41 0300 	orr.w	r3, r1, r0
 80a5be0:	ea03 0c0e 	and.w	ip, r3, lr
 80a5be4:	443a      	add	r2, r7
 80a5be6:	ea01 0300 	and.w	r3, r1, r0
 80a5bea:	ea4c 0303 	orr.w	r3, ip, r3
 80a5bee:	4432      	add	r2, r6
 80a5bf0:	441a      	add	r2, r3
 80a5bf2:	eb02 6cf5 	add.w	ip, r2, r5, ror #27
    P( E, A, B, C, D, R(46) );
 80a5bf6:	9b03      	ldr	r3, [sp, #12]
    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
 80a5bf8:	ea4f 02b1 	mov.w	r2, r1, ror #2
    P( E, A, B, C, D, R(46) );
 80a5bfc:	9906      	ldr	r1, [sp, #24]
 80a5bfe:	ea45 0402 	orr.w	r4, r5, r2
 80a5c02:	ea83 0901 	eor.w	r9, r3, r1
 80a5c06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a5c08:	4004      	ands	r4, r0
 80a5c0a:	ea89 0903 	eor.w	r9, r9, r3
 80a5c0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(47) );
 80a5c10:	9904      	ldr	r1, [sp, #16]
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
 80a5c12:	ea89 0903 	eor.w	r9, r9, r3
 80a5c16:	ea4f 73f9 	mov.w	r3, r9, ror #31
 80a5c1a:	9303      	str	r3, [sp, #12]
 80a5c1c:	ea05 0302 	and.w	r3, r5, r2
 80a5c20:	431c      	orrs	r4, r3
 80a5c22:	9b03      	ldr	r3, [sp, #12]
 80a5c24:	443b      	add	r3, r7
 80a5c26:	449e      	add	lr, r3
 80a5c28:	eb0e 6efc 	add.w	lr, lr, ip, ror #27
 80a5c2c:	44a6      	add	lr, r4
    P( D, E, A, B, C, R(47) );
 80a5c2e:	9c07      	ldr	r4, [sp, #28]
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
 80a5c30:	ea4f 03b5 	mov.w	r3, r5, ror #2
    P( D, E, A, B, C, R(47) );
 80a5c34:	ea81 0804 	eor.w	r8, r1, r4
 80a5c38:	9910      	ldr	r1, [sp, #64]	; 0x40
 80a5c3a:	ea4c 0403 	orr.w	r4, ip, r3
 80a5c3e:	ea88 0801 	eor.w	r8, r8, r1
 80a5c42:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a5c44:	4014      	ands	r4, r2
 80a5c46:	ea88 0801 	eor.w	r8, r8, r1
 80a5c4a:	ea4f 71f8 	mov.w	r1, r8, ror #31
 80a5c4e:	9104      	str	r1, [sp, #16]
 80a5c50:	ea0c 0103 	and.w	r1, ip, r3
 80a5c54:	430c      	orrs	r4, r1
 80a5c56:	9904      	ldr	r1, [sp, #16]
 80a5c58:	ea4f 0cbc 	mov.w	ip, ip, ror #2
 80a5c5c:	eb01 0807 	add.w	r8, r1, r7
 80a5c60:	4440      	add	r0, r8
    P( C, D, E, A, B, R(48) );
 80a5c62:	9906      	ldr	r1, [sp, #24]
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
 80a5c64:	eb04 0800 	add.w	r8, r4, r0
    P( C, D, E, A, B, R(48) );
 80a5c68:	9808      	ldr	r0, [sp, #32]
 80a5c6a:	ea4e 040c 	orr.w	r4, lr, ip
 80a5c6e:	ea81 0900 	eor.w	r9, r1, r0
 80a5c72:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a5c74:	401c      	ands	r4, r3
 80a5c76:	ea89 0901 	eor.w	r9, r9, r1
 80a5c7a:	9902      	ldr	r1, [sp, #8]
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
 80a5c7c:	eb08 68fe 	add.w	r8, r8, lr, ror #27
    P( C, D, E, A, B, R(48) );
 80a5c80:	ea89 0901 	eor.w	r9, r9, r1
 80a5c84:	ea4f 71f9 	mov.w	r1, r9, ror #31
 80a5c88:	9106      	str	r1, [sp, #24]
 80a5c8a:	ea0e 010c 	and.w	r1, lr, ip
 80a5c8e:	ea44 0001 	orr.w	r0, r4, r1
 80a5c92:	9906      	ldr	r1, [sp, #24]
 80a5c94:	4439      	add	r1, r7
 80a5c96:	4411      	add	r1, r2
 80a5c98:	eb01 65f8 	add.w	r5, r1, r8, ror #27
    P( B, C, D, E, A, R(49) );
 80a5c9c:	9a07      	ldr	r2, [sp, #28]
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
 80a5c9e:	1944      	adds	r4, r0, r5
    P( B, C, D, E, A, R(49) );
 80a5ca0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a5ca2:	ea82 020b 	eor.w	r2, r2, fp
 80a5ca6:	4042      	eors	r2, r0
 80a5ca8:	9803      	ldr	r0, [sp, #12]
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
 80a5caa:	ea4f 01be 	mov.w	r1, lr, ror #2
    P( B, C, D, E, A, R(49) );
 80a5cae:	4042      	eors	r2, r0
 80a5cb0:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80a5cb4:	ea48 0001 	orr.w	r0, r8, r1
 80a5cb8:	9207      	str	r2, [sp, #28]
 80a5cba:	ea00 000c 	and.w	r0, r0, ip
 80a5cbe:	ea08 0201 	and.w	r2, r8, r1
 80a5cc2:	4310      	orrs	r0, r2
 80a5cc4:	9a07      	ldr	r2, [sp, #28]
 80a5cc6:	ea4f 08b8 	mov.w	r8, r8, ror #2
 80a5cca:	19d6      	adds	r6, r2, r7
 80a5ccc:	4433      	add	r3, r6
 80a5cce:	18c6      	adds	r6, r0, r3
    P( A, B, C, D, E, R(50) );
 80a5cd0:	9b08      	ldr	r3, [sp, #32]
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
 80a5cd2:	eb06 69f4 	add.w	r9, r6, r4, ror #27
    P( A, B, C, D, E, R(50) );
 80a5cd6:	ea83 060a 	eor.w	r6, r3, sl
 80a5cda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a5cdc:	ea44 0208 	orr.w	r2, r4, r8
 80a5ce0:	405e      	eors	r6, r3
 80a5ce2:	9b04      	ldr	r3, [sp, #16]
 80a5ce4:	400a      	ands	r2, r1
 80a5ce6:	405e      	eors	r6, r3
 80a5ce8:	ea4f 7ef6 	mov.w	lr, r6, ror #31
 80a5cec:	ea04 0308 	and.w	r3, r4, r8
 80a5cf0:	4313      	orrs	r3, r2
 80a5cf2:	eb0e 0207 	add.w	r2, lr, r7
 80a5cf6:	4462      	add	r2, ip
 80a5cf8:	eb02 62f9 	add.w	r2, r2, r9, ror #27
 80a5cfc:	441a      	add	r2, r3
    P( E, A, B, C, D, R(51) );
 80a5cfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
 80a5d00:	ea4f 05b4 	mov.w	r5, r4, ror #2
    P( E, A, B, C, D, R(51) );
 80a5d04:	ea8b 0c03 	eor.w	ip, fp, r3
 80a5d08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a5d0a:	ea4f 06b9 	mov.w	r6, r9, ror #2
 80a5d0e:	ea8c 0c03 	eor.w	ip, ip, r3
 80a5d12:	9b06      	ldr	r3, [sp, #24]
    P( D, E, A, B, C, R(52) );
 80a5d14:	ea42 0006 	orr.w	r0, r2, r6
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
 80a5d18:	ea8c 0c03 	eor.w	ip, ip, r3
 80a5d1c:	ea49 0305 	orr.w	r3, r9, r5
 80a5d20:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 80a5d24:	ea03 0b08 	and.w	fp, r3, r8
 80a5d28:	ea09 0305 	and.w	r3, r9, r5
 80a5d2c:	ea4b 0303 	orr.w	r3, fp, r3
 80a5d30:	eb0c 0b07 	add.w	fp, ip, r7
 80a5d34:	448b      	add	fp, r1
 80a5d36:	449b      	add	fp, r3
    P( D, E, A, B, C, R(52) );
 80a5d38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a5d3a:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a5d3c:	ea8a 0303 	eor.w	r3, sl, r3
 80a5d40:	404b      	eors	r3, r1
 80a5d42:	9907      	ldr	r1, [sp, #28]
 80a5d44:	4028      	ands	r0, r5
 80a5d46:	404b      	eors	r3, r1
 80a5d48:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80a5d4c:	9308      	str	r3, [sp, #32]
 80a5d4e:	9908      	ldr	r1, [sp, #32]
 80a5d50:	ea02 0306 	and.w	r3, r2, r6
 80a5d54:	4303      	orrs	r3, r0
 80a5d56:	19c8      	adds	r0, r1, r7
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
 80a5d58:	eb0b 6bf2 	add.w	fp, fp, r2, ror #27
    P( D, E, A, B, C, R(52) );
 80a5d5c:	4440      	add	r0, r8
 80a5d5e:	eb00 60fb 	add.w	r0, r0, fp, ror #27
 80a5d62:	4418      	add	r0, r3
    P( C, D, E, A, B, R(53) );
 80a5d64:	9910      	ldr	r1, [sp, #64]	; 0x40
 80a5d66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
 80a5d68:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( C, D, E, A, B, R(53) );
 80a5d6c:	404b      	eors	r3, r1
 80a5d6e:	9902      	ldr	r1, [sp, #8]
 80a5d70:	404b      	eors	r3, r1
 80a5d72:	ea83 030e 	eor.w	r3, r3, lr
 80a5d76:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80a5d7a:	930e      	str	r3, [sp, #56]	; 0x38
 80a5d7c:	990e      	ldr	r1, [sp, #56]	; 0x38
 80a5d7e:	ea4b 0302 	orr.w	r3, fp, r2
 80a5d82:	ea03 0406 	and.w	r4, r3, r6
 80a5d86:	ea0b 0302 	and.w	r3, fp, r2
 80a5d8a:	4323      	orrs	r3, r4
 80a5d8c:	19cc      	adds	r4, r1, r7
 80a5d8e:	442c      	add	r4, r5
    P( B, C, D, E, A, R(54) );
 80a5d90:	9909      	ldr	r1, [sp, #36]	; 0x24
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
 80a5d92:	441c      	add	r4, r3
    P( B, C, D, E, A, R(54) );
 80a5d94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
 80a5d96:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( B, C, D, E, A, R(54) );
 80a5d9a:	ea83 0901 	eor.w	r9, r3, r1
 80a5d9e:	9b03      	ldr	r3, [sp, #12]
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
 80a5da0:	eb04 64f0 	add.w	r4, r4, r0, ror #27
    P( B, C, D, E, A, R(54) );
 80a5da4:	ea89 0903 	eor.w	r9, r9, r3
 80a5da8:	ea89 090c 	eor.w	r9, r9, ip
 80a5dac:	ea4f 73f9 	mov.w	r3, r9, ror #31
 80a5db0:	930f      	str	r3, [sp, #60]	; 0x3c
 80a5db2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80a5db4:	ea40 090b 	orr.w	r9, r0, fp
 80a5db8:	ea09 0902 	and.w	r9, r9, r2
 80a5dbc:	ea00 030b 	and.w	r3, r0, fp
 80a5dc0:	ea49 0303 	orr.w	r3, r9, r3
 80a5dc4:	eb01 0907 	add.w	r9, r1, r7
 80a5dc8:	44b1      	add	r9, r6
 80a5dca:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 80a5dce:	4499      	add	r9, r3
    P( A, B, C, D, E, R(55) );
 80a5dd0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a5dd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
 80a5dd4:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( A, B, C, D, E, R(55) );
 80a5dd8:	ea83 0801 	eor.w	r8, r3, r1
 80a5ddc:	9b04      	ldr	r3, [sp, #16]
 80a5dde:	ea88 0803 	eor.w	r8, r8, r3
 80a5de2:	9b08      	ldr	r3, [sp, #32]
 80a5de4:	ea88 0803 	eor.w	r8, r8, r3
 80a5de8:	ea4f 73f8 	mov.w	r3, r8, ror #31
 80a5dec:	9310      	str	r3, [sp, #64]	; 0x40
 80a5dee:	9910      	ldr	r1, [sp, #64]	; 0x40
 80a5df0:	ea44 0300 	orr.w	r3, r4, r0
 80a5df4:	ea03 080b 	and.w	r8, r3, fp
 80a5df8:	ea04 0300 	and.w	r3, r4, r0
 80a5dfc:	ea48 0303 	orr.w	r3, r8, r3
 80a5e00:	eb01 0807 	add.w	r8, r1, r7
 80a5e04:	4490      	add	r8, r2
 80a5e06:	4498      	add	r8, r3
    P( E, A, B, C, D, R(56) );
 80a5e08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a5e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
 80a5e0c:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(56) );
 80a5e10:	ea83 0602 	eor.w	r6, r3, r2
 80a5e14:	9b06      	ldr	r3, [sp, #24]
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
 80a5e16:	eb08 68f9 	add.w	r8, r8, r9, ror #27
    P( E, A, B, C, D, R(56) );
 80a5e1a:	405e      	eors	r6, r3
 80a5e1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a5e1e:	405e      	eors	r6, r3
 80a5e20:	ea4f 73f6 	mov.w	r3, r6, ror #31
 80a5e24:	e002      	b.n	80a5e2c <mbedtls_internal_sha1_process+0xb20>
 80a5e26:	bf00      	nop
 80a5e28:	8f1bbcdc 	.word	0x8f1bbcdc
 80a5e2c:	9309      	str	r3, [sp, #36]	; 0x24
 80a5e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a5e30:	ea49 0604 	orr.w	r6, r9, r4
 80a5e34:	4006      	ands	r6, r0
 80a5e36:	ea09 0304 	and.w	r3, r9, r4
 80a5e3a:	4333      	orrs	r3, r6
 80a5e3c:	19d6      	adds	r6, r2, r7
 80a5e3e:	445e      	add	r6, fp
 80a5e40:	eb06 66f8 	add.w	r6, r6, r8, ror #27
 80a5e44:	441e      	add	r6, r3
    P( D, E, A, B, C, R(57) );
 80a5e46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a5e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
 80a5e4a:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( D, E, A, B, C, R(57) );
 80a5e4e:	ea83 0b02 	eor.w	fp, r3, r2
 80a5e52:	9b07      	ldr	r3, [sp, #28]
    P( C, D, E, A, B, R(58) );
 80a5e54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
 80a5e56:	ea8b 0b03 	eor.w	fp, fp, r3
 80a5e5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a5e5c:	ea8b 0b03 	eor.w	fp, fp, r3
 80a5e60:	ea48 0309 	orr.w	r3, r8, r9
 80a5e64:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 80a5e68:	ea03 0a04 	and.w	sl, r3, r4
 80a5e6c:	ea08 0309 	and.w	r3, r8, r9
 80a5e70:	ea4a 0303 	orr.w	r3, sl, r3
 80a5e74:	eb0b 0a07 	add.w	sl, fp, r7
 80a5e78:	4482      	add	sl, r0
 80a5e7a:	449a      	add	sl, r3
    P( C, D, E, A, B, R(58) );
 80a5e7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
 80a5e7e:	eb0a 6af6 	add.w	sl, sl, r6, ror #27
    P( C, D, E, A, B, R(58) );
 80a5e82:	ea83 0502 	eor.w	r5, r3, r2
 80a5e86:	ea85 050e 	eor.w	r5, r5, lr
 80a5e8a:	404d      	eors	r5, r1
 80a5e8c:	ea4f 73f5 	mov.w	r3, r5, ror #31
 80a5e90:	19dd      	adds	r5, r3, r7
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
 80a5e92:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( C, D, E, A, B, R(58) );
 80a5e96:	4425      	add	r5, r4
 80a5e98:	930a      	str	r3, [sp, #40]	; 0x28
 80a5e9a:	eb05 63fa 	add.w	r3, r5, sl, ror #27
 80a5e9e:	ea46 0508 	orr.w	r5, r6, r8
 80a5ea2:	ea06 0208 	and.w	r2, r6, r8
 80a5ea6:	ea05 0509 	and.w	r5, r5, r9
 80a5eaa:	4315      	orrs	r5, r2
 80a5eac:	441d      	add	r5, r3
    P( B, C, D, E, A, R(59) );
 80a5eae:	9a02      	ldr	r2, [sp, #8]
 80a5eb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
 80a5eb2:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( B, C, D, E, A, R(59) );
 80a5eb6:	ea83 0102 	eor.w	r1, r3, r2
 80a5eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a5ebc:	ea81 010c 	eor.w	r1, r1, ip
 80a5ec0:	4059      	eors	r1, r3
 80a5ec2:	ea4f 73f1 	mov.w	r3, r1, ror #31
 80a5ec6:	930b      	str	r3, [sp, #44]	; 0x2c
 80a5ec8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a5eca:	ea4a 0106 	orr.w	r1, sl, r6
 80a5ece:	ea01 0108 	and.w	r1, r1, r8
 80a5ed2:	ea0a 0306 	and.w	r3, sl, r6
 80a5ed6:	4417      	add	r7, r2
 80a5ed8:	444f      	add	r7, r9
 80a5eda:	430b      	orrs	r3, r1
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 80a5edc:	9a03      	ldr	r2, [sp, #12]
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
 80a5ede:	19d9      	adds	r1, r3, r7
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 80a5ee0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a5ee2:	4fd9      	ldr	r7, [pc, #868]	; (80a6248 <mbedtls_internal_sha1_process+0xf3c>)
 80a5ee4:	4053      	eors	r3, r2
 80a5ee6:	9a08      	ldr	r2, [sp, #32]
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
 80a5ee8:	ea4f 0aba 	mov.w	sl, sl, ror #2
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 80a5eec:	4053      	eors	r3, r2
 80a5eee:	ea83 030b 	eor.w	r3, r3, fp
 80a5ef2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80a5ef6:	930c      	str	r3, [sp, #48]	; 0x30
 80a5ef8:	ea86 020a 	eor.w	r2, r6, sl
 80a5efc:	443b      	add	r3, r7
 80a5efe:	406a      	eors	r2, r5
 80a5f00:	4443      	add	r3, r8
    P( E, A, B, C, D, R(61) );
 80a5f02:	9804      	ldr	r0, [sp, #16]
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 80a5f04:	4413      	add	r3, r2
    P( E, A, B, C, D, R(61) );
 80a5f06:	9a02      	ldr	r2, [sp, #8]
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
 80a5f08:	eb01 61f5 	add.w	r1, r1, r5, ror #27

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
 80a5f0c:	4042      	eors	r2, r0
 80a5f0e:	980e      	ldr	r0, [sp, #56]	; 0x38
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 80a5f10:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( E, A, B, C, D, R(61) );
 80a5f14:	4042      	eors	r2, r0
 80a5f16:	980a      	ldr	r0, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(62) );
 80a5f18:	9c06      	ldr	r4, [sp, #24]

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
 80a5f1a:	4042      	eors	r2, r0
 80a5f1c:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80a5f20:	9202      	str	r2, [sp, #8]
 80a5f22:	ea8a 0005 	eor.w	r0, sl, r5
 80a5f26:	443a      	add	r2, r7
 80a5f28:	4048      	eors	r0, r1
 80a5f2a:	4432      	add	r2, r6
 80a5f2c:	4402      	add	r2, r0
    P( D, E, A, B, C, R(62) );
 80a5f2e:	9803      	ldr	r0, [sp, #12]
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 80a5f30:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
 80a5f34:	ea80 0904 	eor.w	r9, r0, r4
 80a5f38:	980f      	ldr	r0, [sp, #60]	; 0x3c

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
 80a5f3a:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, R(62) );
 80a5f3e:	ea89 0900 	eor.w	r9, r9, r0
 80a5f42:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80a5f44:	ea85 0401 	eor.w	r4, r5, r1
 80a5f48:	ea89 0900 	eor.w	r9, r9, r0
 80a5f4c:	ea4f 70f9 	mov.w	r0, r9, ror #31
 80a5f50:	9003      	str	r0, [sp, #12]
 80a5f52:	4438      	add	r0, r7
 80a5f54:	405c      	eors	r4, r3
 80a5f56:	4450      	add	r0, sl
    P( C, D, E, A, B, R(63) );
 80a5f58:	9e07      	ldr	r6, [sp, #28]
#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
 80a5f5a:	4420      	add	r0, r4
    P( C, D, E, A, B, R(63) );
 80a5f5c:	9c04      	ldr	r4, [sp, #16]

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
 80a5f5e:	eb02 62f3 	add.w	r2, r2, r3, ror #27
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
 80a5f62:	ea84 0806 	eor.w	r8, r4, r6
 80a5f66:	9c10      	ldr	r4, [sp, #64]	; 0x40
#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
 80a5f68:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( C, D, E, A, B, R(63) );
 80a5f6c:	ea88 0804 	eor.w	r8, r8, r4
 80a5f70:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80a5f72:	ea81 0603 	eor.w	r6, r1, r3
 80a5f76:	ea88 0804 	eor.w	r8, r8, r4
 80a5f7a:	ea4f 74f8 	mov.w	r4, r8, ror #31
 80a5f7e:	9404      	str	r4, [sp, #16]
 80a5f80:	443c      	add	r4, r7
 80a5f82:	442c      	add	r4, r5
    P( B, C, D, E, A, R(64) );
 80a5f84:	9d06      	ldr	r5, [sp, #24]
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
 80a5f86:	4056      	eors	r6, r2
    P( B, C, D, E, A, R(64) );
 80a5f88:	ea85 090e 	eor.w	r9, r5, lr
 80a5f8c:	9d09      	ldr	r5, [sp, #36]	; 0x24
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
 80a5f8e:	4434      	add	r4, r6
    P( B, C, D, E, A, R(64) );
 80a5f90:	ea89 0905 	eor.w	r9, r9, r5
 80a5f94:	9d02      	ldr	r5, [sp, #8]
#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
 80a5f96:	eb00 60f2 	add.w	r0, r0, r2, ror #27
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
 80a5f9a:	ea89 0905 	eor.w	r9, r9, r5
 80a5f9e:	ea4f 75f9 	mov.w	r5, r9, ror #31
 80a5fa2:	9506      	str	r5, [sp, #24]
 80a5fa4:	9e06      	ldr	r6, [sp, #24]
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
 80a5fa6:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, R(64) );
 80a5faa:	eb06 0907 	add.w	r9, r6, r7
 80a5fae:	4489      	add	r9, r1
    P( A, B, C, D, E, R(65) );
 80a5fb0:	9907      	ldr	r1, [sp, #28]

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
 80a5fb2:	ea83 0502 	eor.w	r5, r3, r2
    P( A, B, C, D, E, R(65) );
 80a5fb6:	ea81 080c 	eor.w	r8, r1, ip
 80a5fba:	9903      	ldr	r1, [sp, #12]
 80a5fbc:	ea88 080b 	eor.w	r8, r8, fp
 80a5fc0:	ea88 0801 	eor.w	r8, r8, r1
 80a5fc4:	ea4f 71f8 	mov.w	r1, r8, ror #31
 80a5fc8:	9107      	str	r1, [sp, #28]

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
 80a5fca:	4045      	eors	r5, r0
 80a5fcc:	44a9      	add	r9, r5
    P( A, B, C, D, E, R(65) );
 80a5fce:	9d07      	ldr	r5, [sp, #28]
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
 80a5fd0:	eb04 64f0 	add.w	r4, r4, r0, ror #27
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
 80a5fd4:	eb05 0807 	add.w	r8, r5, r7
 80a5fd8:	4498      	add	r8, r3
    P( E, A, B, C, D, R(66) );
 80a5fda:	9b08      	ldr	r3, [sp, #32]

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
 80a5fdc:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
 80a5fe0:	ea8e 0603 	eor.w	r6, lr, r3
 80a5fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
 80a5fe6:	ea82 0100 	eor.w	r1, r2, r0
    P( E, A, B, C, D, R(66) );
 80a5fea:	405e      	eors	r6, r3
 80a5fec:	9b04      	ldr	r3, [sp, #16]

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
 80a5fee:	eb09 69f4 	add.w	r9, r9, r4, ror #27
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
 80a5ff2:	405e      	eors	r6, r3
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
 80a5ff4:	4061      	eors	r1, r4
    P( E, A, B, C, D, R(66) );
 80a5ff6:	ea4f 76f6 	mov.w	r6, r6, ror #31
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
 80a5ffa:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(66) );
 80a5ffe:	ea80 0304 	eor.w	r3, r0, r4
 80a6002:	eb06 0e07 	add.w	lr, r6, r7
 80a6006:	ea83 0309 	eor.w	r3, r3, r9
 80a600a:	4496      	add	lr, r2
 80a600c:	449e      	add	lr, r3
    P( D, E, A, B, C, R(67) );
 80a600e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
 80a6010:	4488      	add	r8, r1
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
 80a6012:	ea8c 0a03 	eor.w	sl, ip, r3
 80a6016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
 80a6018:	eb08 68f9 	add.w	r8, r8, r9, ror #27
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
 80a601c:	ea8a 0a03 	eor.w	sl, sl, r3
 80a6020:	9b06      	ldr	r3, [sp, #24]
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
 80a6022:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( D, E, A, B, C, R(67) );
 80a6026:	ea8a 0a03 	eor.w	sl, sl, r3
 80a602a:	ea4f 7afa 	mov.w	sl, sl, ror #31
 80a602e:	ea84 0309 	eor.w	r3, r4, r9
 80a6032:	eb0a 0c07 	add.w	ip, sl, r7
 80a6036:	ea83 0308 	eor.w	r3, r3, r8
 80a603a:	4484      	add	ip, r0
    P( C, D, E, A, B, R(68) );
 80a603c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
 80a603e:	449c      	add	ip, r3
    P( C, D, E, A, B, R(68) );
 80a6040:	9b08      	ldr	r3, [sp, #32]
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
 80a6042:	eb0e 6ef8 	add.w	lr, lr, r8, ror #27
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
 80a6046:	4053      	eors	r3, r2
 80a6048:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
 80a604a:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( C, D, E, A, B, R(68) );
 80a604e:	4053      	eors	r3, r2
 80a6050:	406b      	eors	r3, r5
 80a6052:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80a6056:	9308      	str	r3, [sp, #32]
 80a6058:	9a08      	ldr	r2, [sp, #32]
 80a605a:	ea89 0308 	eor.w	r3, r9, r8
 80a605e:	19d5      	adds	r5, r2, r7
 80a6060:	ea83 030e 	eor.w	r3, r3, lr
 80a6064:	4425      	add	r5, r4
 80a6066:	441d      	add	r5, r3
    P( B, C, D, E, A, R(69) );
 80a6068:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a606a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
 80a606c:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
 80a6070:	4053      	eors	r3, r2
 80a6072:	9a02      	ldr	r2, [sp, #8]
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
 80a6074:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( B, C, D, E, A, R(69) );
 80a6078:	4053      	eors	r3, r2
 80a607a:	4073      	eors	r3, r6
 80a607c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80a6080:	930d      	str	r3, [sp, #52]	; 0x34
 80a6082:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a6084:	ea88 030e 	eor.w	r3, r8, lr
 80a6088:	19d1      	adds	r1, r2, r7
 80a608a:	ea83 030c 	eor.w	r3, r3, ip
 80a608e:	4449      	add	r1, r9
    P( A, B, C, D, E, R(70) );
 80a6090:	9a09      	ldr	r2, [sp, #36]	; 0x24
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
 80a6092:	4419      	add	r1, r3
    P( A, B, C, D, E, R(70) );
 80a6094:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
 80a6096:	eb05 65fc 	add.w	r5, r5, ip, ror #27
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
 80a609a:	ea83 0902 	eor.w	r9, r3, r2
 80a609e:	9b03      	ldr	r3, [sp, #12]
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
 80a60a0:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( A, B, C, D, E, R(70) );
 80a60a4:	ea89 0903 	eor.w	r9, r9, r3
 80a60a8:	ea89 090a 	eor.w	r9, r9, sl
 80a60ac:	ea4f 79f9 	mov.w	r9, r9, ror #31
 80a60b0:	ea8e 020c 	eor.w	r2, lr, ip
 80a60b4:	eb09 0307 	add.w	r3, r9, r7
 80a60b8:	406a      	eors	r2, r5
 80a60ba:	4443      	add	r3, r8
 80a60bc:	4413      	add	r3, r2
    P( E, A, B, C, D, R(71) );
 80a60be:	9a10      	ldr	r2, [sp, #64]	; 0x40
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
 80a60c0:	eb01 61f5 	add.w	r1, r1, r5, ror #27
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
 80a60c4:	ea82 080b 	eor.w	r8, r2, fp
 80a60c8:	9a04      	ldr	r2, [sp, #16]
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
 80a60ca:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( E, A, B, C, D, R(71) );
 80a60ce:	ea88 0802 	eor.w	r8, r8, r2
 80a60d2:	9a08      	ldr	r2, [sp, #32]
 80a60d4:	ea8c 0005 	eor.w	r0, ip, r5
 80a60d8:	ea88 0802 	eor.w	r8, r8, r2
 80a60dc:	ea4f 78f8 	mov.w	r8, r8, ror #31
 80a60e0:	eb08 0207 	add.w	r2, r8, r7
 80a60e4:	4048      	eors	r0, r1
 80a60e6:	4472      	add	r2, lr
    P( D, E, A, B, C, R(72) );
 80a60e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
 80a60ea:	4402      	add	r2, r0
    P( D, E, A, B, C, R(72) );
 80a60ec:	9809      	ldr	r0, [sp, #36]	; 0x24
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
 80a60ee:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 80a60f2:	ea80 0e04 	eor.w	lr, r0, r4
 80a60f6:	9806      	ldr	r0, [sp, #24]
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
 80a60f8:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, R(72) );
 80a60fc:	ea8e 0e00 	eor.w	lr, lr, r0
 80a6100:	980d      	ldr	r0, [sp, #52]	; 0x34
 80a6102:	ea85 0401 	eor.w	r4, r5, r1
 80a6106:	ea8e 0e00 	eor.w	lr, lr, r0
 80a610a:	ea4f 7efe 	mov.w	lr, lr, ror #31
 80a610e:	eb0e 0007 	add.w	r0, lr, r7
 80a6112:	405c      	eors	r4, r3
 80a6114:	4460      	add	r0, ip
 80a6116:	4420      	add	r0, r4
    P( C, D, E, A, B, R(73) );
 80a6118:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
 80a611a:	eb02 62f3 	add.w	r2, r2, r3, ror #27
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
 80a611e:	ea8b 0c04 	eor.w	ip, fp, r4
 80a6122:	9c07      	ldr	r4, [sp, #28]
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 80a6124:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( C, D, E, A, B, R(73) );
 80a6128:	ea8c 0c04 	eor.w	ip, ip, r4
 80a612c:	ea8c 0c09 	eor.w	ip, ip, r9
 80a6130:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 80a6134:	eb0c 0407 	add.w	r4, ip, r7
 80a6138:	ea81 0b03 	eor.w	fp, r1, r3
 80a613c:	442c      	add	r4, r5
    P( B, C, D, E, A, R(74) );
 80a613e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
 80a6140:	ea8b 0b02 	eor.w	fp, fp, r2
 80a6144:	445c      	add	r4, fp
    P( B, C, D, E, A, R(74) );
 80a6146:	46ab      	mov	fp, r5
 80a6148:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 80a614a:	eb00 60f2 	add.w	r0, r0, r2, ror #27
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 80a614e:	ea8b 0505 	eor.w	r5, fp, r5
 80a6152:	406e      	eors	r6, r5
 80a6154:	ea86 0608 	eor.w	r6, r6, r8
 80a6158:	ea4f 75f6 	mov.w	r5, r6, ror #31
 80a615c:	9509      	str	r5, [sp, #36]	; 0x24
 80a615e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
 80a6160:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, R(74) );
 80a6164:	eb06 0b07 	add.w	fp, r6, r7
 80a6168:	ea83 0502 	eor.w	r5, r3, r2
 80a616c:	4459      	add	r1, fp
 80a616e:	4045      	eors	r5, r0
 80a6170:	440d      	add	r5, r1
    P( A, B, C, D, E, R(75) );
 80a6172:	990b      	ldr	r1, [sp, #44]	; 0x2c
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
 80a6174:	eb04 64f0 	add.w	r4, r4, r0, ror #27
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
 80a6178:	460e      	mov	r6, r1
 80a617a:	9902      	ldr	r1, [sp, #8]
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 80a617c:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( A, B, C, D, E, R(75) );
 80a6180:	4071      	eors	r1, r6
 80a6182:	ea81 0a0a 	eor.w	sl, r1, sl
 80a6186:	ea8a 0e0e 	eor.w	lr, sl, lr
 80a618a:	ea4f 7efe 	mov.w	lr, lr, ror #31
 80a618e:	eb0e 0a07 	add.w	sl, lr, r7
 80a6192:	ea82 0100 	eor.w	r1, r2, r0
 80a6196:	4453      	add	r3, sl
 80a6198:	4061      	eors	r1, r4
 80a619a:	4419      	add	r1, r3
    P( E, A, B, C, D, R(76) );
 80a619c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 80a619e:	eb05 65f4 	add.w	r5, r5, r4, ror #27
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
 80a61a2:	461e      	mov	r6, r3
 80a61a4:	9b03      	ldr	r3, [sp, #12]
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
 80a61a6:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(76) );
 80a61aa:	4073      	eors	r3, r6
 80a61ac:	9e08      	ldr	r6, [sp, #32]
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
 80a61ae:	eb01 61f5 	add.w	r1, r1, r5, ror #27
    P( E, A, B, C, D, R(76) );
 80a61b2:	4073      	eors	r3, r6
 80a61b4:	ea83 0c0c 	eor.w	ip, r3, ip
 80a61b8:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 80a61bc:	eb0c 0a07 	add.w	sl, ip, r7
 80a61c0:	ea80 0304 	eor.w	r3, r0, r4
 80a61c4:	4452      	add	r2, sl
 80a61c6:	406b      	eors	r3, r5
    P( D, E, A, B, C, R(77) );
 80a61c8:	9e04      	ldr	r6, [sp, #16]
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
 80a61ca:	4413      	add	r3, r2
    P( D, E, A, B, C, R(77) );
 80a61cc:	9a02      	ldr	r2, [sp, #8]
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
 80a61ce:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( D, E, A, B, C, R(77) );
 80a61d2:	4072      	eors	r2, r6
 80a61d4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80a61d6:	ea84 0a05 	eor.w	sl, r4, r5
 80a61da:	4072      	eors	r2, r6
 80a61dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
 80a61de:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( D, E, A, B, C, R(77) );
 80a61e2:	4072      	eors	r2, r6
 80a61e4:	eb07 72f2 	add.w	r2, r7, r2, ror #31
    P( C, D, E, A, B, R(78) );
 80a61e8:	9e06      	ldr	r6, [sp, #24]
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
 80a61ea:	4410      	add	r0, r2
    P( C, D, E, A, B, R(78) );
 80a61ec:	9a03      	ldr	r2, [sp, #12]
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
 80a61ee:	ea8a 0a01 	eor.w	sl, sl, r1
    P( C, D, E, A, B, R(78) );
 80a61f2:	4072      	eors	r2, r6
 80a61f4:	ea82 0909 	eor.w	r9, r2, r9
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
 80a61f8:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(78) );
 80a61fc:	ea89 090e 	eor.w	r9, r9, lr
 80a6200:	eb07 79f9 	add.w	r9, r7, r9, ror #31
 80a6204:	ea85 0601 	eor.w	r6, r5, r1
 80a6208:	405e      	eors	r6, r3
 80a620a:	444c      	add	r4, r9
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 80a620c:	9a04      	ldr	r2, [sp, #16]
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
 80a620e:	4434      	add	r4, r6
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 80a6210:	9e07      	ldr	r6, [sp, #28]
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
 80a6212:	4450      	add	r0, sl
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 80a6214:	4072      	eors	r2, r6
 80a6216:	ea82 0808 	eor.w	r8, r2, r8
 80a621a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
 80a621c:	eb00 60f3 	add.w	r0, r0, r3, ror #27
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 80a6220:	4417      	add	r7, r2
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
 80a6222:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 80a6226:	ea88 0c0c 	eor.w	ip, r8, ip
 80a622a:	ea81 0603 	eor.w	r6, r1, r3
 80a622e:	eb07 7cfc 	add.w	ip, r7, ip, ror #31
 80a6232:	4046      	eors	r6, r0
 80a6234:	4465      	add	r5, ip
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
 80a6236:	eb04 64f0 	add.w	r4, r4, r0, ror #27
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 80a623a:	9a01      	ldr	r2, [sp, #4]
 80a623c:	4435      	add	r5, r6
 80a623e:	eb05 65f4 	add.w	r5, r5, r4, ror #27
 80a6242:	6095      	str	r5, [r2, #8]
 80a6244:	e002      	b.n	80a624c <mbedtls_internal_sha1_process+0xf40>
 80a6246:	bf00      	nop
 80a6248:	ca62c1d6 	.word	0xca62c1d6
    ctx->state[1] += B;
 80a624c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a624e:	4414      	add	r4, r2
 80a6250:	9a01      	ldr	r2, [sp, #4]
 80a6252:	60d4      	str	r4, [r2, #12]
    ctx->state[2] += C;
 80a6254:	9a05      	ldr	r2, [sp, #20]
 80a6256:	eb02 00b0 	add.w	r0, r2, r0, ror #2
 80a625a:	9a01      	ldr	r2, [sp, #4]
 80a625c:	6110      	str	r0, [r2, #16]
    ctx->state[3] += D;
 80a625e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ctx->state[4] += E;

    return( 0 );
}
 80a6260:	2000      	movs	r0, #0
#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 80a6262:	4413      	add	r3, r2
 80a6264:	9a01      	ldr	r2, [sp, #4]
 80a6266:	6153      	str	r3, [r2, #20]
    ctx->state[4] += E;
 80a6268:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a626a:	4419      	add	r1, r3
 80a626c:	6191      	str	r1, [r2, #24]

    return( 0 );
}
 80a626e:	b017      	add	sp, #92	; 0x5c
 80a6270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a6274 <mbedtls_sha1_update_ret>:
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
 80a6274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a6278:	4604      	mov	r4, r0
 80a627a:	460e      	mov	r6, r1
    uint32_t left;

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 80a627c:	4615      	mov	r5, r2
 80a627e:	b382      	cbz	r2, 80a62e2 <mbedtls_sha1_update_ret+0x6e>
        return( 0 );

    left = ctx->total[0] & 0x3F;
 80a6280:	6803      	ldr	r3, [r0, #0]
 80a6282:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 80a6286:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 80a6288:	429a      	cmp	r2, r3
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 80a628a:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 80a628c:	bf82      	ittt	hi
 80a628e:	6863      	ldrhi	r3, [r4, #4]
 80a6290:	3301      	addhi	r3, #1
 80a6292:	6063      	strhi	r3, [r4, #4]

    if( left && ilen >= fill )
 80a6294:	b180      	cbz	r0, 80a62b8 <mbedtls_sha1_update_ret+0x44>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 80a6296:	f1c0 0740 	rsb	r7, r0, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 80a629a:	42ba      	cmp	r2, r7
 80a629c:	d31b      	bcc.n	80a62d6 <mbedtls_sha1_update_ret+0x62>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 80a629e:	f104 081c 	add.w	r8, r4, #28
 80a62a2:	463a      	mov	r2, r7
 80a62a4:	4440      	add	r0, r8
 80a62a6:	f00c faa6 	bl	80b27f6 <memcpy>

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 80a62aa:	4641      	mov	r1, r8
 80a62ac:	4620      	mov	r0, r4
 80a62ae:	f7ff f82d 	bl	80a530c <mbedtls_internal_sha1_process>
 80a62b2:	b9b8      	cbnz	r0, 80a62e4 <mbedtls_sha1_update_ret+0x70>
            return( ret );

        input += fill;
 80a62b4:	443e      	add	r6, r7
        ilen  -= fill;
 80a62b6:	1bed      	subs	r5, r5, r7
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
 80a62b8:	462f      	mov	r7, r5
 80a62ba:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 80a62bc:	2f3f      	cmp	r7, #63	; 0x3f
 80a62be:	4431      	add	r1, r6
 80a62c0:	d905      	bls.n	80a62ce <mbedtls_sha1_update_ret+0x5a>
    {
        if( ( ret = mbedtls_internal_sha1_process( ctx, input ) ) != 0 )
 80a62c2:	4620      	mov	r0, r4
 80a62c4:	f7ff f822 	bl	80a530c <mbedtls_internal_sha1_process>
 80a62c8:	b960      	cbnz	r0, 80a62e4 <mbedtls_sha1_update_ret+0x70>
            return( ret );

        input += 64;
        ilen  -= 64;
 80a62ca:	3f40      	subs	r7, #64	; 0x40
 80a62cc:	e7f5      	b.n	80a62ba <mbedtls_sha1_update_ret+0x46>
    }

    if( ilen > 0 )
 80a62ce:	b147      	cbz	r7, 80a62e2 <mbedtls_sha1_update_ret+0x6e>
 80a62d0:	463d      	mov	r5, r7
 80a62d2:	460e      	mov	r6, r1
 80a62d4:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 80a62d6:	341c      	adds	r4, #28
 80a62d8:	462a      	mov	r2, r5
 80a62da:	4631      	mov	r1, r6
 80a62dc:	4420      	add	r0, r4
 80a62de:	f00c fa8a 	bl	80b27f6 <memcpy>

    return( 0 );
 80a62e2:	2000      	movs	r0, #0
}
 80a62e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a62e8 <mbedtls_sha1_finish_ret>:
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
 80a62e8:	b570      	push	{r4, r5, r6, lr}
 80a62ea:	4604      	mov	r4, r0
    SHA1_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 80a62ec:	6803      	ldr	r3, [r0, #0]

    ctx->buffer[used++] = 0x80;
 80a62ee:	2280      	movs	r2, #128	; 0x80
    SHA1_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 80a62f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
 80a62f4:	1c58      	adds	r0, r3, #1

    if( used <= 56 )
 80a62f6:	2838      	cmp	r0, #56	; 0x38
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 80a62f8:	4423      	add	r3, r4
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
 80a62fa:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 80a62fc:	771a      	strb	r2, [r3, #28]
 80a62fe:	f104 061c 	add.w	r6, r4, #28

    if( used <= 56 )
 80a6302:	d804      	bhi.n	80a630e <mbedtls_sha1_finish_ret+0x26>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 80a6304:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 80a6308:	2100      	movs	r1, #0
 80a630a:	4430      	add	r0, r6
 80a630c:	e00e      	b.n	80a632c <mbedtls_sha1_finish_ret+0x44>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 80a630e:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 80a6312:	2100      	movs	r1, #0
 80a6314:	4430      	add	r0, r6
 80a6316:	f00c fa94 	bl	80b2842 <memset>

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 80a631a:	4631      	mov	r1, r6
 80a631c:	4620      	mov	r0, r4
 80a631e:	f7fe fff5 	bl	80a530c <mbedtls_internal_sha1_process>
 80a6322:	2800      	cmp	r0, #0
 80a6324:	d153      	bne.n	80a63ce <mbedtls_sha1_finish_ret+0xe6>
            return( ret );

        memset( ctx->buffer, 0, 56 );
 80a6326:	4601      	mov	r1, r0
 80a6328:	4630      	mov	r0, r6
 80a632a:	2238      	movs	r2, #56	; 0x38
 80a632c:	f00c fa89 	bl	80b2842 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 80a6330:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
 80a6332:	6861      	ldr	r1, [r4, #4]
 80a6334:	0f5a      	lsrs	r2, r3, #29
 80a6336:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80a633a:	0e11      	lsrs	r1, r2, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 80a633c:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80a633e:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
 80a6342:	0c11      	lsrs	r1, r2, #16
 80a6344:	f884 1055 	strb.w	r1, [r4, #85]	; 0x55
 80a6348:	f884 2057 	strb.w	r2, [r4, #87]	; 0x57
 80a634c:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 80a634e:	0e1a      	lsrs	r2, r3, #24
 80a6350:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 80a6354:	0c1a      	lsrs	r2, r3, #16
 80a6356:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80a635a:	0a1a      	lsrs	r2, r3, #8
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80a635c:	f884 1056 	strb.w	r1, [r4, #86]	; 0x56
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 80a6360:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
 80a6364:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b

    if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 80a6368:	4631      	mov	r1, r6
 80a636a:	4620      	mov	r0, r4
 80a636c:	f7fe ffce 	bl	80a530c <mbedtls_internal_sha1_process>
 80a6370:	2800      	cmp	r0, #0
 80a6372:	d12c      	bne.n	80a63ce <mbedtls_sha1_finish_ret+0xe6>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 80a6374:	7ae3      	ldrb	r3, [r4, #11]
 80a6376:	702b      	strb	r3, [r5, #0]
 80a6378:	8963      	ldrh	r3, [r4, #10]
 80a637a:	706b      	strb	r3, [r5, #1]
 80a637c:	68a3      	ldr	r3, [r4, #8]
 80a637e:	0a1b      	lsrs	r3, r3, #8
 80a6380:	70ab      	strb	r3, [r5, #2]
 80a6382:	68a3      	ldr	r3, [r4, #8]
 80a6384:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 80a6386:	7be3      	ldrb	r3, [r4, #15]
 80a6388:	712b      	strb	r3, [r5, #4]
 80a638a:	89e3      	ldrh	r3, [r4, #14]
 80a638c:	716b      	strb	r3, [r5, #5]
 80a638e:	68e3      	ldr	r3, [r4, #12]
 80a6390:	0a1b      	lsrs	r3, r3, #8
 80a6392:	71ab      	strb	r3, [r5, #6]
 80a6394:	68e3      	ldr	r3, [r4, #12]
 80a6396:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 80a6398:	7ce3      	ldrb	r3, [r4, #19]
 80a639a:	722b      	strb	r3, [r5, #8]
 80a639c:	8a63      	ldrh	r3, [r4, #18]
 80a639e:	726b      	strb	r3, [r5, #9]
 80a63a0:	6923      	ldr	r3, [r4, #16]
 80a63a2:	0a1b      	lsrs	r3, r3, #8
 80a63a4:	72ab      	strb	r3, [r5, #10]
 80a63a6:	6923      	ldr	r3, [r4, #16]
 80a63a8:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 80a63aa:	7de3      	ldrb	r3, [r4, #23]
 80a63ac:	732b      	strb	r3, [r5, #12]
 80a63ae:	8ae3      	ldrh	r3, [r4, #22]
 80a63b0:	736b      	strb	r3, [r5, #13]
 80a63b2:	6963      	ldr	r3, [r4, #20]
 80a63b4:	0a1b      	lsrs	r3, r3, #8
 80a63b6:	73ab      	strb	r3, [r5, #14]
 80a63b8:	6963      	ldr	r3, [r4, #20]
 80a63ba:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 80a63bc:	7ee3      	ldrb	r3, [r4, #27]
 80a63be:	742b      	strb	r3, [r5, #16]
 80a63c0:	8b63      	ldrh	r3, [r4, #26]
 80a63c2:	746b      	strb	r3, [r5, #17]
 80a63c4:	69a3      	ldr	r3, [r4, #24]
 80a63c6:	0a1b      	lsrs	r3, r3, #8
 80a63c8:	74ab      	strb	r3, [r5, #18]
 80a63ca:	69a3      	ldr	r3, [r4, #24]
 80a63cc:	74eb      	strb	r3, [r5, #19]

    return( 0 );
}
 80a63ce:	bd70      	pop	{r4, r5, r6, pc}

080a63d0 <mbedtls_sha1_ret>:
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
 80a63d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a63d2:	b099      	sub	sp, #100	; 0x64
 80a63d4:	4606      	mov	r6, r0
    mbedtls_sha1_context ctx;

    SHA1_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA1_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha1_init( &ctx );
 80a63d6:	a801      	add	r0, sp, #4
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
 80a63d8:	460f      	mov	r7, r1
 80a63da:	4615      	mov	r5, r2
    mbedtls_sha1_context ctx;

    SHA1_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA1_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha1_init( &ctx );
 80a63dc:	f7fe ff6e 	bl	80a52bc <mbedtls_sha1_init>

    if( ( ret = mbedtls_sha1_starts_ret( &ctx ) ) != 0 )
 80a63e0:	a801      	add	r0, sp, #4
 80a63e2:	f7fe ff79 	bl	80a52d8 <mbedtls_sha1_starts_ret>
 80a63e6:	4604      	mov	r4, r0
 80a63e8:	b958      	cbnz	r0, 80a6402 <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_update_ret( &ctx, input, ilen ) ) != 0 )
 80a63ea:	463a      	mov	r2, r7
 80a63ec:	4631      	mov	r1, r6
 80a63ee:	a801      	add	r0, sp, #4
 80a63f0:	f7ff ff40 	bl	80a6274 <mbedtls_sha1_update_ret>
 80a63f4:	4604      	mov	r4, r0
 80a63f6:	b920      	cbnz	r0, 80a6402 <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_finish_ret( &ctx, output ) ) != 0 )
 80a63f8:	4629      	mov	r1, r5
 80a63fa:	a801      	add	r0, sp, #4
 80a63fc:	f7ff ff74 	bl	80a62e8 <mbedtls_sha1_finish_ret>
 80a6400:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha1_free( &ctx );
 80a6402:	a801      	add	r0, sp, #4
 80a6404:	f7fe ff5e 	bl	80a52c4 <mbedtls_sha1_free>

    return( ret );
}
 80a6408:	4620      	mov	r0, r4
 80a640a:	b019      	add	sp, #100	; 0x64
 80a640c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a6410 <mbedtls_platform_zeroize>:

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
 80a6410:	460a      	mov	r2, r1
 80a6412:	b119      	cbz	r1, 80a641c <mbedtls_platform_zeroize+0xc>
        memset_func( buf, 0, len );
 80a6414:	4b02      	ldr	r3, [pc, #8]	; (80a6420 <mbedtls_platform_zeroize+0x10>)
 80a6416:	2100      	movs	r1, #0
 80a6418:	681b      	ldr	r3, [r3, #0]
 80a641a:	4718      	bx	r3
 80a641c:	4770      	bx	lr
 80a641e:	bf00      	nop
 80a6420:	20000000 	.word	0x20000000

080a6424 <mbedtls_timing_get_timer.part.0>:
    (void) _beginthread( TimerProc, 0, NULL );
}

#else /* _WIN32 && !EFIX64 && !EFI32 */

unsigned long mbedtls_timing_get_timer( struct mbedtls_timing_hr_time *val, int reset )
 80a6424:	b513      	push	{r0, r1, r4, lr}
 80a6426:	4604      	mov	r4, r0
    }
    else
    {
        unsigned long delta;
        struct timeval now;
        gettimeofday( &now, NULL );
 80a6428:	2100      	movs	r1, #0
 80a642a:	4668      	mov	r0, sp
 80a642c:	f00c fb1a 	bl	80b2a64 <gettimeofday>
        delta = ( now.tv_sec  - t->start.tv_sec  ) * 1000ul
              + ( now.tv_usec - t->start.tv_usec ) / 1000;
 80a6430:	9b00      	ldr	r3, [sp, #0]
 80a6432:	6822      	ldr	r2, [r4, #0]
 80a6434:	6861      	ldr	r1, [r4, #4]
 80a6436:	1a9a      	subs	r2, r3, r2
 80a6438:	9b01      	ldr	r3, [sp, #4]
 80a643a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a643e:	1a5b      	subs	r3, r3, r1
 80a6440:	fb93 f3f0 	sdiv	r3, r3, r0
        return( delta );
    }
}
 80a6444:	fb00 3002 	mla	r0, r0, r2, r3
 80a6448:	b002      	add	sp, #8
 80a644a:	bd10      	pop	{r4, pc}

080a644c <_gettimeofday>:
#define HAVE_HARDCLOCK

#include "rtc_hal.h"
#include "timer_hal.h"
extern "C" int _gettimeofday( struct timeval *tv, void *tzvp )
{
 80a644c:	b538      	push	{r3, r4, r5, lr}
 80a644e:	4604      	mov	r4, r0
    uint32_t t = HAL_Timer_Milliseconds();  // get uptime
 80a6450:	f00a fcb6 	bl	80b0dc0 <HAL_Timer_Get_Milli_Seconds>
 80a6454:	4605      	mov	r5, r0
    tv->tv_sec = HAL_RTC_Get_UnixTime();    // get rtc time before Particle.syncTime()
 80a6456:	f00a fcbb 	bl	80b0dd0 <HAL_RTC_Get_UnixTime>
    tv->tv_usec = ( t % 1000 )*1000;        // get remaining microseconds
 80a645a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
#include "rtc_hal.h"
#include "timer_hal.h"
extern "C" int _gettimeofday( struct timeval *tv, void *tzvp )
{
    uint32_t t = HAL_Timer_Milliseconds();  // get uptime
    tv->tv_sec = HAL_RTC_Get_UnixTime();    // get rtc time before Particle.syncTime()
 80a645e:	6020      	str	r0, [r4, #0]
    tv->tv_usec = ( t % 1000 )*1000;        // get remaining microseconds
 80a6460:	fbb5 f0f3 	udiv	r0, r5, r3
 80a6464:	fb03 5010 	mls	r0, r3, r0, r5
 80a6468:	4343      	muls	r3, r0
 80a646a:	6063      	str	r3, [r4, #4]
    return 0;
} // end _gettimeofday()
 80a646c:	2000      	movs	r0, #0
 80a646e:	bd38      	pop	{r3, r4, r5, pc}

080a6470 <mbedtls_timing_set_delay>:
 */
void mbedtls_timing_set_delay( void *data, uint32_t int_ms, uint32_t fin_ms )
{
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;

    ctx->int_ms = int_ms;
 80a6470:	6201      	str	r1, [r0, #32]
    ctx->fin_ms = fin_ms;
 80a6472:	6242      	str	r2, [r0, #36]	; 0x24

    if( fin_ms != 0 )
 80a6474:	b112      	cbz	r2, 80a647c <mbedtls_timing_set_delay+0xc>
{
    struct _hr_time *t = (struct _hr_time *) val;

    if( reset )
    {
        gettimeofday( &t->start, NULL );
 80a6476:	2100      	movs	r1, #0
 80a6478:	f00c baf4 	b.w	80b2a64 <gettimeofday>
 80a647c:	4770      	bx	lr

080a647e <mbedtls_timing_get_delay>:

/*
 * Get number of delays expired
 */
int mbedtls_timing_get_delay( void *data )
{
 80a647e:	b510      	push	{r4, lr}
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
 80a6480:	6a43      	ldr	r3, [r0, #36]	; 0x24

/*
 * Get number of delays expired
 */
int mbedtls_timing_get_delay( void *data )
{
 80a6482:	4604      	mov	r4, r0
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
 80a6484:	b153      	cbz	r3, 80a649c <mbedtls_timing_get_delay+0x1e>
 80a6486:	f7ff ffcd 	bl	80a6424 <mbedtls_timing_get_timer.part.0>
        return( -1 );

    elapsed_ms = mbedtls_timing_get_timer( &ctx->timer, 0 );

    if( elapsed_ms >= ctx->fin_ms )
 80a648a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a648c:	4283      	cmp	r3, r0
 80a648e:	d908      	bls.n	80a64a2 <mbedtls_timing_get_delay+0x24>
{
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
        return( -1 );
 80a6490:	6a23      	ldr	r3, [r4, #32]
 80a6492:	4283      	cmp	r3, r0
 80a6494:	bf8c      	ite	hi
 80a6496:	2000      	movhi	r0, #0
 80a6498:	2001      	movls	r0, #1
 80a649a:	bd10      	pop	{r4, pc}
 80a649c:	f04f 30ff 	mov.w	r0, #4294967295
 80a64a0:	bd10      	pop	{r4, pc}

    elapsed_ms = mbedtls_timing_get_timer( &ctx->timer, 0 );

    if( elapsed_ms >= ctx->fin_ms )
        return( 2 );
 80a64a2:	2002      	movs	r0, #2

    if( elapsed_ms >= ctx->int_ms )
        return( 1 );

    return( 0 );
}
 80a64a4:	bd10      	pop	{r4, pc}

080a64a6 <mbedtls_pkcs5_pbkdf2_hmac>:

int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx, const unsigned char *password,
                       size_t plen, const unsigned char *salt, size_t slen,
                       unsigned int iteration_count,
                       uint32_t key_length, unsigned char *output )
{
 80a64a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a64aa:	4604      	mov	r4, r0
 80a64ac:	b0a5      	sub	sp, #148	; 0x94
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
 80a64ae:	6800      	ldr	r0, [r0, #0]

int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx, const unsigned char *password,
                       size_t plen, const unsigned char *salt, size_t slen,
                       unsigned int iteration_count,
                       uint32_t key_length, unsigned char *output )
{
 80a64b0:	9301      	str	r3, [sp, #4]
 80a64b2:	460f      	mov	r7, r1
 80a64b4:	4693      	mov	fp, r2
 80a64b6:	9e30      	ldr	r6, [sp, #192]	; 0xc0
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
 80a64b8:	f001 ff80 	bl	80a83bc <mbedtls_md_get_size>
 80a64bc:	4681      	mov	r9, r0
    size_t use_len;
    unsigned char *out_p = output;
    unsigned char counter[4];

    memset( counter, 0, 4 );
 80a64be:	2300      	movs	r3, #0
 80a64c0:	9303      	str	r3, [sp, #12]
    counter[3] = 1;
 80a64c2:	2301      	movs	r3, #1
 80a64c4:	f88d 300f 	strb.w	r3, [sp, #15]
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
            return( ret );

        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
 80a64c8:	f10d 0850 	add.w	r8, sp, #80	; 0x50
#if UINT_MAX > 0xFFFFFFFF
    if( iteration_count > 0xFFFFFFFF )
        return( MBEDTLS_ERR_PKCS5_BAD_INPUT_DATA );
#endif

    while( key_length )
 80a64cc:	2e00      	cmp	r6, #0
 80a64ce:	d05c      	beq.n	80a658a <mbedtls_pkcs5_pbkdf2_hmac+0xe4>
    {
        // U1 ends up in work
        //
        if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
 80a64d0:	465a      	mov	r2, fp
 80a64d2:	4639      	mov	r1, r7
 80a64d4:	4620      	mov	r0, r4
 80a64d6:	f001 feb7 	bl	80a8248 <mbedtls_md_hmac_starts>
 80a64da:	2800      	cmp	r0, #0
 80a64dc:	d156      	bne.n	80a658c <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, salt, slen ) ) != 0 )
 80a64de:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80a64e0:	9901      	ldr	r1, [sp, #4]
 80a64e2:	4620      	mov	r0, r4
 80a64e4:	f001 ff10 	bl	80a8308 <mbedtls_md_hmac_update>
 80a64e8:	2800      	cmp	r0, #0
 80a64ea:	d14f      	bne.n	80a658c <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
 80a64ec:	2204      	movs	r2, #4
 80a64ee:	a903      	add	r1, sp, #12
 80a64f0:	4620      	mov	r0, r4
 80a64f2:	f001 ff09 	bl	80a8308 <mbedtls_md_hmac_update>
 80a64f6:	2800      	cmp	r0, #0
 80a64f8:	d148      	bne.n	80a658c <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
 80a64fa:	4641      	mov	r1, r8
 80a64fc:	4620      	mov	r0, r4
 80a64fe:	f001 ff13 	bl	80a8328 <mbedtls_md_hmac_finish>
 80a6502:	2800      	cmp	r0, #0
 80a6504:	d142      	bne.n	80a658c <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        memcpy( md1, work, md_size );
 80a6506:	ad04      	add	r5, sp, #16
 80a6508:	464a      	mov	r2, r9
 80a650a:	4641      	mov	r1, r8
 80a650c:	4628      	mov	r0, r5
 80a650e:	f00c f972 	bl	80b27f6 <memcpy>

        for( i = 1; i < iteration_count; i++ )
 80a6512:	f04f 0a01 	mov.w	sl, #1
 80a6516:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80a6518:	459a      	cmp	sl, r3
 80a651a:	d21d      	bcs.n	80a6558 <mbedtls_pkcs5_pbkdf2_hmac+0xb2>
        {
            // U2 ends up in md1
            //
            if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
 80a651c:	465a      	mov	r2, fp
 80a651e:	4639      	mov	r1, r7
 80a6520:	4620      	mov	r0, r4
 80a6522:	f001 fe91 	bl	80a8248 <mbedtls_md_hmac_starts>
 80a6526:	bb88      	cbnz	r0, 80a658c <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            if( ( ret = mbedtls_md_hmac_update( ctx, md1, md_size ) ) != 0 )
 80a6528:	464a      	mov	r2, r9
 80a652a:	4629      	mov	r1, r5
 80a652c:	4620      	mov	r0, r4
 80a652e:	f001 feeb 	bl	80a8308 <mbedtls_md_hmac_update>
 80a6532:	bb58      	cbnz	r0, 80a658c <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
 80a6534:	4629      	mov	r1, r5
 80a6536:	4620      	mov	r0, r4
 80a6538:	f001 fef6 	bl	80a8328 <mbedtls_md_hmac_finish>
 80a653c:	bb30      	cbnz	r0, 80a658c <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            // U1 xor U2
            //
            for( j = 0; j < md_size; j++ )
 80a653e:	4548      	cmp	r0, r9
 80a6540:	da07      	bge.n	80a6552 <mbedtls_pkcs5_pbkdf2_hmac+0xac>
                work[j] ^= md1[j];
 80a6542:	f810 2008 	ldrb.w	r2, [r0, r8]
 80a6546:	5d43      	ldrb	r3, [r0, r5]
 80a6548:	4053      	eors	r3, r2
 80a654a:	f800 3008 	strb.w	r3, [r0, r8]
            if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
                return( ret );

            // U1 xor U2
            //
            for( j = 0; j < md_size; j++ )
 80a654e:	3001      	adds	r0, #1
 80a6550:	e7f5      	b.n	80a653e <mbedtls_pkcs5_pbkdf2_hmac+0x98>
        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
            return( ret );

        memcpy( md1, work, md_size );

        for( i = 1; i < iteration_count; i++ )
 80a6552:	f10a 0a01 	add.w	sl, sl, #1
 80a6556:	e7de      	b.n	80a6516 <mbedtls_pkcs5_pbkdf2_hmac+0x70>
            //
            for( j = 0; j < md_size; j++ )
                work[j] ^= md1[j];
        }

        use_len = ( key_length < md_size ) ? key_length : md_size;
 80a6558:	454e      	cmp	r6, r9
 80a655a:	4635      	mov	r5, r6
 80a655c:	bf28      	it	cs
 80a655e:	464d      	movcs	r5, r9
        memcpy( out_p, work, use_len );
 80a6560:	4641      	mov	r1, r8
 80a6562:	462a      	mov	r2, r5
 80a6564:	9831      	ldr	r0, [sp, #196]	; 0xc4
 80a6566:	f00c f946 	bl	80b27f6 <memcpy>

        key_length -= (uint32_t) use_len;
        out_p += use_len;
 80a656a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
        }

        use_len = ( key_length < md_size ) ? key_length : md_size;
        memcpy( out_p, work, use_len );

        key_length -= (uint32_t) use_len;
 80a656c:	1b76      	subs	r6, r6, r5
        out_p += use_len;
 80a656e:	442b      	add	r3, r5
 80a6570:	9331      	str	r3, [sp, #196]	; 0xc4
 80a6572:	aa04      	add	r2, sp, #16

        for( i = 4; i > 0; i-- )
            if( ++counter[i - 1] != 0 )
 80a6574:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 80a6578:	3301      	adds	r3, #1
 80a657a:	b2db      	uxtb	r3, r3
 80a657c:	7013      	strb	r3, [r2, #0]
 80a657e:	2b00      	cmp	r3, #0
 80a6580:	d1a4      	bne.n	80a64cc <mbedtls_pkcs5_pbkdf2_hmac+0x26>
        memcpy( out_p, work, use_len );

        key_length -= (uint32_t) use_len;
        out_p += use_len;

        for( i = 4; i > 0; i-- )
 80a6582:	ab03      	add	r3, sp, #12
 80a6584:	4293      	cmp	r3, r2
 80a6586:	d1f5      	bne.n	80a6574 <mbedtls_pkcs5_pbkdf2_hmac+0xce>
 80a6588:	e7a0      	b.n	80a64cc <mbedtls_pkcs5_pbkdf2_hmac+0x26>
            if( ++counter[i - 1] != 0 )
                break;
    }

    return( 0 );
 80a658a:	4630      	mov	r0, r6
}
 80a658c:	b025      	add	sp, #148	; 0x94
 80a658e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080a6594 <mbedtls_pkcs5_pbes2>:

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
 80a6594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a6598:	461f      	mov	r7, r3
 80a659a:	b0bb      	sub	sp, #236	; 0xec
    int ret, iterations = 0, keylen = 0;
 80a659c:	2300      	movs	r3, #0
 80a659e:	9306      	str	r3, [sp, #24]
 80a65a0:	9307      	str	r3, [sp, #28]
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
    unsigned char key[32], iv[32];
    size_t olen = 0;
 80a65a2:	9309      	str	r3, [sp, #36]	; 0x24
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
    end = p + pbe_params->len;
 80a65a4:	6844      	ldr	r4, [r0, #4]
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
 80a65a6:	6883      	ldr	r3, [r0, #8]
{
    int ret, iterations = 0, keylen = 0;
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
 80a65a8:	f04f 0904 	mov.w	r9, #4
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
 80a65ac:	9308      	str	r3, [sp, #32]
    end = p + pbe_params->len;
 80a65ae:	441c      	add	r4, r3
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80a65b0:	6803      	ldr	r3, [r0, #0]

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
 80a65b2:	460d      	mov	r5, r1
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80a65b4:	2b30      	cmp	r3, #48	; 0x30

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
 80a65b6:	4616      	mov	r6, r2
    int ret, iterations = 0, keylen = 0;
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
 80a65b8:	f88d 9016 	strb.w	r9, [sp, #22]
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80a65bc:	f040 80c9 	bne.w	80a6752 <mbedtls_pkcs5_pbes2+0x1be>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &kdf_alg_oid, &kdf_alg_params ) ) != 0 )
 80a65c0:	ab10      	add	r3, sp, #64	; 0x40
 80a65c2:	aa0a      	add	r2, sp, #40	; 0x28
 80a65c4:	4621      	mov	r1, r4
 80a65c6:	a808      	add	r0, sp, #32
 80a65c8:	f7fb f92d 	bl	80a1826 <mbedtls_asn1_get_alg>
 80a65cc:	2800      	cmp	r0, #0
 80a65ce:	d158      	bne.n	80a6682 <mbedtls_pkcs5_pbes2+0xee>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    // Only PBKDF2 supported at the moment
    //
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
 80a65d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a65d2:	2a09      	cmp	r2, #9
 80a65d4:	d14c      	bne.n	80a6670 <mbedtls_pkcs5_pbes2+0xdc>
 80a65d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a65d8:	4861      	ldr	r0, [pc, #388]	; (80a6760 <mbedtls_pkcs5_pbes2+0x1cc>)
 80a65da:	f00c f8fd 	bl	80b27d8 <memcmp>
 80a65de:	2800      	cmp	r0, #0
 80a65e0:	d146      	bne.n	80a6670 <mbedtls_pkcs5_pbes2+0xdc>
                                      mbedtls_asn1_buf *salt, int *iterations,
                                      int *keylen, mbedtls_md_type_t *md_type )
{
    int ret;
    mbedtls_asn1_buf prf_alg_oid;
    unsigned char *p = params->p;
 80a65e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    const unsigned char *end = params->p + params->len;
 80a65e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
                                      mbedtls_asn1_buf *salt, int *iterations,
                                      int *keylen, mbedtls_md_type_t *md_type )
{
    int ret;
    mbedtls_asn1_buf prf_alg_oid;
    unsigned char *p = params->p;
 80a65e6:	9324      	str	r3, [sp, #144]	; 0x90
    const unsigned char *end = params->p + params->len;
 80a65e8:	eb03 0802 	add.w	r8, r3, r2

    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80a65ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a65ee:	2b30      	cmp	r3, #48	; 0x30
 80a65f0:	f040 80af 	bne.w	80a6752 <mbedtls_pkcs5_pbes2+0x1be>
     *    keyLength         INTEGER OPTIONAL
     *    prf               AlgorithmIdentifier DEFAULT algid-hmacWithSHA1
     *  }
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 80a65f4:	464b      	mov	r3, r9
 80a65f6:	aa17      	add	r2, sp, #92	; 0x5c
 80a65f8:	4641      	mov	r1, r8
 80a65fa:	a824      	add	r0, sp, #144	; 0x90
 80a65fc:	f7fb f836 	bl	80a166c <mbedtls_asn1_get_tag>
 80a6600:	b9f8      	cbnz	r0, 80a6642 <mbedtls_pkcs5_pbes2+0xae>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
 80a6602:	9a24      	ldr	r2, [sp, #144]	; 0x90
    p += salt->len;
 80a6604:	9b17      	ldr	r3, [sp, #92]	; 0x5c
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
 80a6606:	9218      	str	r2, [sp, #96]	; 0x60
    p += salt->len;
 80a6608:	4413      	add	r3, r2

    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
 80a660a:	4641      	mov	r1, r8
 80a660c:	aa06      	add	r2, sp, #24
 80a660e:	a824      	add	r0, sp, #144	; 0x90
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
    p += salt->len;
 80a6610:	9324      	str	r3, [sp, #144]	; 0x90

    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
 80a6612:	f7fb f858 	bl	80a16c6 <mbedtls_asn1_get_int>
 80a6616:	b9a0      	cbnz	r0, 80a6642 <mbedtls_pkcs5_pbes2+0xae>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( p == end )
 80a6618:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80a661a:	4598      	cmp	r8, r3
 80a661c:	d022      	beq.n	80a6664 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_int( &p, end, keylen ) ) != 0 )
 80a661e:	aa07      	add	r2, sp, #28
 80a6620:	4641      	mov	r1, r8
 80a6622:	a824      	add	r0, sp, #144	; 0x90
 80a6624:	f7fb f84f 	bl	80a16c6 <mbedtls_asn1_get_int>
 80a6628:	b110      	cbz	r0, 80a6630 <mbedtls_pkcs5_pbes2+0x9c>
    {
        if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80a662a:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80a662e:	d108      	bne.n	80a6642 <mbedtls_pkcs5_pbes2+0xae>
            return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
    }

    if( p == end )
 80a6630:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80a6632:	4598      	cmp	r8, r3
 80a6634:	d016      	beq.n	80a6664 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
 80a6636:	aa2c      	add	r2, sp, #176	; 0xb0
 80a6638:	4641      	mov	r1, r8
 80a663a:	a824      	add	r0, sp, #144	; 0x90
 80a663c:	f7fb f940 	bl	80a18c0 <mbedtls_asn1_get_alg_null>
 80a6640:	b128      	cbz	r0, 80a664e <mbedtls_pkcs5_pbes2+0xba>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
 80a6642:	f5a0 503c 	sub.w	r0, r0, #12032	; 0x2f00
    // Only PBKDF2 supported at the moment
    //
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( ( ret = pkcs5_parse_pbkdf2_params( &kdf_alg_params,
 80a6646:	2800      	cmp	r0, #0
 80a6648:	f040 8086 	bne.w	80a6758 <mbedtls_pkcs5_pbes2+0x1c4>
 80a664c:	e00a      	b.n	80a6664 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
 80a664e:	f10d 0116 	add.w	r1, sp, #22
 80a6652:	a82c      	add	r0, sp, #176	; 0xb0
 80a6654:	f7fe fdfc 	bl	80a5250 <mbedtls_oid_get_md_hmac>
 80a6658:	b950      	cbnz	r0, 80a6670 <mbedtls_pkcs5_pbes2+0xdc>
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( p != end )
 80a665a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80a665c:	4598      	cmp	r8, r3
 80a665e:	d001      	beq.n	80a6664 <mbedtls_pkcs5_pbes2+0xd0>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a6660:	4840      	ldr	r0, [pc, #256]	; (80a6764 <mbedtls_pkcs5_pbes2+0x1d0>)
 80a6662:	e079      	b.n	80a6758 <mbedtls_pkcs5_pbes2+0x1c4>
                                           &md_type ) ) != 0 )
    {
        return( ret );
    }

    md_info = mbedtls_md_info_from_type( md_type );
 80a6664:	f89d 0016 	ldrb.w	r0, [sp, #22]
 80a6668:	f001 fd72 	bl	80a8150 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80a666c:	4681      	mov	r9, r0
 80a666e:	b908      	cbnz	r0, 80a6674 <mbedtls_pkcs5_pbes2+0xe0>

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );
 80a6670:	483d      	ldr	r0, [pc, #244]	; (80a6768 <mbedtls_pkcs5_pbes2+0x1d4>)
 80a6672:	e071      	b.n	80a6758 <mbedtls_pkcs5_pbes2+0x1c4>

    md_info = mbedtls_md_info_from_type( md_type );
    if( md_info == NULL )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &enc_scheme_oid,
 80a6674:	ab13      	add	r3, sp, #76	; 0x4c
 80a6676:	aa0d      	add	r2, sp, #52	; 0x34
 80a6678:	4621      	mov	r1, r4
 80a667a:	a808      	add	r0, sp, #32
 80a667c:	f7fb f8d3 	bl	80a1826 <mbedtls_asn1_get_alg>
 80a6680:	b110      	cbz	r0, 80a6688 <mbedtls_pkcs5_pbes2+0xf4>
                              &enc_scheme_params ) ) != 0 )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
 80a6682:	f5a0 503c 	sub.w	r0, r0, #12032	; 0x2f00
 80a6686:	e067      	b.n	80a6758 <mbedtls_pkcs5_pbes2+0x1c4>
    }

    if( mbedtls_oid_get_cipher_alg( &enc_scheme_oid, &cipher_alg ) != 0 )
 80a6688:	f10d 0117 	add.w	r1, sp, #23
 80a668c:	a80d      	add	r0, sp, #52	; 0x34
 80a668e:	f7fe fd97 	bl	80a51c0 <mbedtls_oid_get_cipher_alg>
 80a6692:	2800      	cmp	r0, #0
 80a6694:	d1ec      	bne.n	80a6670 <mbedtls_pkcs5_pbes2+0xdc>
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    cipher_info = mbedtls_cipher_info_from_type( cipher_alg );
 80a6696:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80a669a:	f7fa fe1f 	bl	80a12dc <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 80a669e:	4680      	mov	r8, r0
 80a66a0:	2800      	cmp	r0, #0
 80a66a2:	d0e5      	beq.n	80a6670 <mbedtls_pkcs5_pbes2+0xdc>

    /*
     * The value of keylen from pkcs5_parse_pbkdf2_params() is ignored
     * since it is optional and we don't know if it was set or not
     */
    keylen = cipher_info->key_bitlen / 8;
 80a66a4:	6843      	ldr	r3, [r0, #4]
 80a66a6:	08db      	lsrs	r3, r3, #3
 80a66a8:	9307      	str	r3, [sp, #28]

    if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
 80a66aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a66ac:	2b04      	cmp	r3, #4
 80a66ae:	d152      	bne.n	80a6756 <mbedtls_pkcs5_pbes2+0x1c2>
 80a66b0:	68c3      	ldr	r3, [r0, #12]
 80a66b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a66b4:	429a      	cmp	r2, r3
 80a66b6:	d14e      	bne.n	80a6756 <mbedtls_pkcs5_pbes2+0x1c2>
        enc_scheme_params.len != cipher_info->iv_size )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
    }

    mbedtls_md_init( &md_ctx );
 80a66b8:	a819      	add	r0, sp, #100	; 0x64
 80a66ba:	f001 fd55 	bl	80a8168 <mbedtls_md_init>
    mbedtls_cipher_init( &cipher_ctx );
 80a66be:	a82c      	add	r0, sp, #176	; 0xb0
 80a66c0:	f7fa fe2e 	bl	80a1320 <mbedtls_cipher_init>

    memcpy( iv, enc_scheme_params.p, enc_scheme_params.len );
 80a66c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a66c6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80a66c8:	a824      	add	r0, sp, #144	; 0x90
 80a66ca:	f00c f894 	bl	80b27f6 <memcpy>

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 80a66ce:	2201      	movs	r2, #1
 80a66d0:	4649      	mov	r1, r9
 80a66d2:	a819      	add	r0, sp, #100	; 0x64
 80a66d4:	f001 fd68 	bl	80a81a8 <mbedtls_md_setup>
 80a66d8:	4604      	mov	r4, r0
 80a66da:	2800      	cmp	r0, #0
 80a66dc:	d131      	bne.n	80a6742 <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_pkcs5_pbkdf2_hmac( &md_ctx, pwd, pwdlen, salt.p, salt.len,
 80a66de:	9b07      	ldr	r3, [sp, #28]
 80a66e0:	f10d 0970 	add.w	r9, sp, #112	; 0x70
 80a66e4:	9302      	str	r3, [sp, #8]
 80a66e6:	9b06      	ldr	r3, [sp, #24]
 80a66e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80a66ec:	9301      	str	r3, [sp, #4]
 80a66ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a66f0:	463a      	mov	r2, r7
 80a66f2:	9300      	str	r3, [sp, #0]
 80a66f4:	4631      	mov	r1, r6
 80a66f6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80a66f8:	a819      	add	r0, sp, #100	; 0x64
 80a66fa:	f7ff fed4 	bl	80a64a6 <mbedtls_pkcs5_pbkdf2_hmac>
 80a66fe:	4604      	mov	r4, r0
 80a6700:	b9f8      	cbnz	r0, 80a6742 <mbedtls_pkcs5_pbes2+0x1ae>
                                   iterations, keylen, key ) ) != 0 )
    {
        goto exit;
    }

    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
 80a6702:	4641      	mov	r1, r8
 80a6704:	a82c      	add	r0, sp, #176	; 0xb0
 80a6706:	f7fa fe1f 	bl	80a1348 <mbedtls_cipher_setup>
 80a670a:	4604      	mov	r4, r0
 80a670c:	b9c8      	cbnz	r0, 80a6742 <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
 80a670e:	9a07      	ldr	r2, [sp, #28]
 80a6710:	b26b      	sxtb	r3, r5
 80a6712:	00d2      	lsls	r2, r2, #3
 80a6714:	4649      	mov	r1, r9
 80a6716:	a82c      	add	r0, sp, #176	; 0xb0
 80a6718:	f7fa fe2e 	bl	80a1378 <mbedtls_cipher_setkey>
 80a671c:	4604      	mov	r4, r0
 80a671e:	b980      	cbnz	r0, 80a6742 <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_cipher_crypt( &cipher_ctx, iv, enc_scheme_params.len,
 80a6720:	ab09      	add	r3, sp, #36	; 0x24
 80a6722:	9302      	str	r3, [sp, #8]
 80a6724:	9b44      	ldr	r3, [sp, #272]	; 0x110
 80a6726:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a6728:	9301      	str	r3, [sp, #4]
 80a672a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80a672c:	a924      	add	r1, sp, #144	; 0x90
 80a672e:	9300      	str	r3, [sp, #0]
 80a6730:	a82c      	add	r0, sp, #176	; 0xb0
 80a6732:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80a6734:	f7fa fed0 	bl	80a14d8 <mbedtls_cipher_crypt>
                              data, datalen, output, &olen ) ) != 0 )
        ret = MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH;
 80a6738:	f5a4 5438 	sub.w	r4, r4, #11776	; 0x2e00
 80a673c:	2800      	cmp	r0, #0
 80a673e:	bf08      	it	eq
 80a6740:	2400      	moveq	r4, #0

exit:
    mbedtls_md_free( &md_ctx );
 80a6742:	a819      	add	r0, sp, #100	; 0x64
 80a6744:	f001 fd15 	bl	80a8172 <mbedtls_md_free>
    mbedtls_cipher_free( &cipher_ctx );
 80a6748:	a82c      	add	r0, sp, #176	; 0xb0
 80a674a:	f7fa fded 	bl	80a1328 <mbedtls_cipher_free>

    return( ret );
 80a674e:	4620      	mov	r0, r4
 80a6750:	e002      	b.n	80a6758 <mbedtls_pkcs5_pbes2+0x1c4>
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80a6752:	4806      	ldr	r0, [pc, #24]	; (80a676c <mbedtls_pkcs5_pbes2+0x1d8>)
 80a6754:	e000      	b.n	80a6758 <mbedtls_pkcs5_pbes2+0x1c4>
    keylen = cipher_info->key_bitlen / 8;

    if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
        enc_scheme_params.len != cipher_info->iv_size )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
 80a6756:	4806      	ldr	r0, [pc, #24]	; (80a6770 <mbedtls_pkcs5_pbes2+0x1dc>)
exit:
    mbedtls_md_free( &md_ctx );
    mbedtls_cipher_free( &cipher_ctx );

    return( ret );
}
 80a6758:	b03b      	add	sp, #236	; 0xec
 80a675a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a675e:	bf00      	nop
 80a6760:	080b4a40 	.word	0x080b4a40
 80a6764:	ffffd09a 	.word	0xffffd09a
 80a6768:	ffffd180 	.word	0xffffd180
 80a676c:	ffffd09e 	.word	0xffffd09e
 80a6770:	ffffd100 	.word	0xffffd100

080a6774 <_ZL12gcm_ctx_freePv>:

    return( ctx );
}

static void gcm_ctx_free( void *ctx )
{
 80a6774:	b510      	push	{r4, lr}
 80a6776:	4604      	mov	r4, r0
    mbedtls_gcm_free( (mbedtls_gcm_context *)ctx );
 80a6778:	f001 fc45 	bl	80a8006 <mbedtls_gcm_free>
    mbedtls_free( ctx );
 80a677c:	4620      	mov	r0, r4
}
 80a677e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void gcm_ctx_free( void *ctx )
{
    mbedtls_gcm_free( (mbedtls_gcm_context *)ctx );
    mbedtls_free( ctx );
 80a6782:	f00a bcb1 	b.w	80b10e8 <free>

080a6786 <_ZL13gcm_ctx_allocv>:
#endif

#if defined(MBEDTLS_GCM_C)
/* shared by all GCM ciphers */
static void *gcm_ctx_alloc( void )
{
 80a6786:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 80a6788:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80a678c:	2001      	movs	r0, #1
 80a678e:	f00b ff15 	bl	80b25bc <calloc>

    if( ctx != NULL )
 80a6792:	4604      	mov	r4, r0
 80a6794:	b108      	cbz	r0, 80a679a <_ZL13gcm_ctx_allocv+0x14>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
 80a6796:	f001 f9a1 	bl	80a7adc <mbedtls_gcm_init>

    return( ctx );
}
 80a679a:	4620      	mov	r0, r4
 80a679c:	bd10      	pop	{r4, pc}

080a679e <_ZL19gcm_aes_setkey_wrapPvPKhj>:
#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
                     key, key_bitlen );
 80a679e:	4613      	mov	r3, r2
 80a67a0:	460a      	mov	r2, r1
 80a67a2:	2102      	movs	r1, #2
 80a67a4:	f001 b99f 	b.w	80a7ae6 <mbedtls_gcm_setkey>

080a67a8 <_ZL12aes_ctx_freePv>:

    return( aes );
}

static void aes_ctx_free( void *ctx )
{
 80a67a8:	b510      	push	{r4, lr}
 80a67aa:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 80a67ac:	f007 f885 	bl	80ad8ba <mbedtls_aes_free>
    mbedtls_free( ctx );
 80a67b0:	4620      	mov	r0, r4
}
 80a67b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void aes_ctx_free( void *ctx )
{
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
    mbedtls_free( ctx );
 80a67b6:	f00a bc97 	b.w	80b10e8 <free>

080a67ba <_ZL13aes_ctx_allocv>:
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
}

static void * aes_ctx_alloc( void )
{
 80a67ba:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = (mbedtls_aes_context *)mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 80a67bc:	f44f 718c 	mov.w	r1, #280	; 0x118
 80a67c0:	2001      	movs	r0, #1
 80a67c2:	f00b fefb 	bl	80b25bc <calloc>

    if( aes == NULL )
 80a67c6:	4604      	mov	r4, r0
 80a67c8:	b108      	cbz	r0, 80a67ce <_ZL13aes_ctx_allocv+0x14>
        return( NULL );

    mbedtls_aes_init( aes );
 80a67ca:	f007 f871 	bl	80ad8b0 <mbedtls_aes_init>

    return( aes );
}
 80a67ce:	4620      	mov	r0, r4
 80a67d0:	bd10      	pop	{r4, pc}

080a67d2 <_ZL19aes_setkey_dec_wrapPvPKhj>:
#endif /* MBEDTLS_CIPHER_MODE_XTS */

static int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 80a67d2:	f007 b975 	b.w	80adac0 <mbedtls_aes_setkey_dec>

080a67d6 <_ZL19aes_setkey_enc_wrapPvPKhj>:
}

static int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 80a67d6:	f007 b877 	b.w	80ad8c8 <mbedtls_aes_setkey_enc>

080a67da <_ZL18aes_crypt_ecb_wrapPv19mbedtls_operation_tPKhPh>:
#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 80a67da:	f007 bd6f 	b.w	80ae2bc <mbedtls_aes_crypt_ecb>

080a67de <_ZL10rsa_can_do17mbedtls_pk_type_t>:
#include <stdint.h>

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_RSA ||
 80a67de:	2801      	cmp	r0, #1
 80a67e0:	d002      	beq.n	80a67e8 <_ZL10rsa_can_do17mbedtls_pk_type_t+0xa>
 80a67e2:	1f83      	subs	r3, r0, #6
 80a67e4:	4258      	negs	r0, r3
 80a67e6:	4158      	adcs	r0, r3
            type == MBEDTLS_PK_RSASSA_PSS );
}
 80a67e8:	4770      	bx	lr
	...

080a67ec <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item>:
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 80a67ec:	2301      	movs	r3, #1
    items->name = "rsa.N";
 80a67ee:	4a06      	ldr	r2, [pc, #24]	; (80a6808 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x1c>)
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 80a67f0:	700b      	strb	r3, [r1, #0]
    items->name = "rsa.N";
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
 80a67f2:	730b      	strb	r3, [r1, #12]
    items->name = "rsa.E";
 80a67f4:	4b05      	ldr	r3, [pc, #20]	; (80a680c <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x20>)
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.N";
 80a67f6:	604a      	str	r2, [r1, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 80a67f8:	f100 0208 	add.w	r2, r0, #8

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 80a67fc:	3014      	adds	r0, #20

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.N";
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 80a67fe:	608a      	str	r2, [r1, #8]

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
 80a6800:	610b      	str	r3, [r1, #16]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 80a6802:	6148      	str	r0, [r1, #20]
 80a6804:	4770      	bx	lr
 80a6806:	bf00      	nop
 80a6808:	080b4ba4 	.word	0x080b4ba4
 80a680c:	080b4baa 	.word	0x080b4baa

080a6810 <_ZL12eckey_can_do17mbedtls_pk_type_t>:
 */
static int eckey_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
            type == MBEDTLS_PK_ECKEY_DH ||
            type == MBEDTLS_PK_ECDSA );
 80a6810:	3802      	subs	r0, #2
}
 80a6812:	2802      	cmp	r0, #2
 80a6814:	bf8c      	ite	hi
 80a6816:	2000      	movhi	r0, #0
 80a6818:	2001      	movls	r0, #1
 80a681a:	4770      	bx	lr

080a681c <_ZL16eckey_get_bitlenPKv>:

static size_t eckey_get_bitlen( const void *ctx )
{
    return( ((mbedtls_ecp_keypair *) ctx)->grp.pbits );
}
 80a681c:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80a681e:	4770      	bx	lr

080a6820 <_ZL11eckey_debugPKvP21mbedtls_pk_debug_item>:
    mbedtls_free( ctx );
}

static void eckey_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_ECP;
 80a6820:	2302      	movs	r3, #2
 80a6822:	700b      	strb	r3, [r1, #0]
    items->name = "eckey.Q";
 80a6824:	4b02      	ldr	r3, [pc, #8]	; (80a6830 <_ZL11eckey_debugPKvP21mbedtls_pk_debug_item+0x10>)
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
 80a6826:	3088      	adds	r0, #136	; 0x88
}

static void eckey_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_ECP;
    items->name = "eckey.Q";
 80a6828:	604b      	str	r3, [r1, #4]
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
 80a682a:	6088      	str	r0, [r1, #8]
 80a682c:	4770      	bx	lr
 80a682e:	bf00      	nop
 80a6830:	080b4bb0 	.word	0x080b4bb0

080a6834 <_ZL14eckeydh_can_do17mbedtls_pk_type_t>:
 * EC key restricted to ECDH
 */
static int eckeydh_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
            type == MBEDTLS_PK_ECKEY_DH );
 80a6834:	3802      	subs	r0, #2
}
 80a6836:	2801      	cmp	r0, #1
 80a6838:	bf8c      	ite	hi
 80a683a:	2000      	movhi	r0, #0
 80a683c:	2001      	movls	r0, #1
 80a683e:	4770      	bx	lr

080a6840 <_ZL12ecdsa_can_do17mbedtls_pk_type_t>:

#if defined(MBEDTLS_ECDSA_C)
static int ecdsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECDSA );
}
 80a6840:	1f03      	subs	r3, r0, #4
 80a6842:	4258      	negs	r0, r3
 80a6844:	4158      	adcs	r0, r3
 80a6846:	4770      	bx	lr

080a6848 <_ZL13rsa_free_wrapPv>:

    return( ctx );
}

static void rsa_free_wrap( void *ctx )
{
 80a6848:	b510      	push	{r4, lr}
 80a684a:	4604      	mov	r4, r0
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
 80a684c:	f7fc ff58 	bl	80a3700 <mbedtls_rsa_free>
    mbedtls_free( ctx );
 80a6850:	4620      	mov	r0, r4
}
 80a6852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void rsa_free_wrap( void *ctx )
{
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
    mbedtls_free( ctx );
 80a6856:	f00a bc47 	b.w	80b10e8 <free>

080a685a <_ZL14rsa_alloc_wrapv>:
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
                                (const mbedtls_rsa_context *) prv ) );
}

static void *rsa_alloc_wrap( void )
{
 80a685a:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
 80a685c:	21ac      	movs	r1, #172	; 0xac
 80a685e:	2001      	movs	r0, #1
 80a6860:	f00b feac 	bl	80b25bc <calloc>

    if( ctx != NULL )
 80a6864:	4604      	mov	r4, r0
 80a6866:	b118      	cbz	r0, 80a6870 <_ZL14rsa_alloc_wrapv+0x16>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
 80a6868:	2200      	movs	r2, #0
 80a686a:	4611      	mov	r1, r2
 80a686c:	f7fb ff1a 	bl	80a26a4 <mbedtls_rsa_init>

    return( ctx );
}
 80a6870:	4620      	mov	r0, r4
 80a6872:	bd10      	pop	{r4, pc}

080a6874 <_ZL19rsa_check_pair_wrapPKvS0_>:
}

static int rsa_check_pair_wrap( const void *pub, const void *prv )
{
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
                                (const mbedtls_rsa_context *) prv ) );
 80a6874:	f7fb bf7c 	b.w	80a2770 <mbedtls_rsa_check_pub_priv>

080a6878 <_ZL14rsa_get_bitlenPKv>:
    return( type == MBEDTLS_PK_RSA ||
            type == MBEDTLS_PK_RSASSA_PSS );
}

static size_t rsa_get_bitlen( const void *ctx )
{
 80a6878:	b508      	push	{r3, lr}
    const mbedtls_rsa_context * rsa = (const mbedtls_rsa_context *) ctx;
    return( 8 * mbedtls_rsa_get_len( rsa ) );
 80a687a:	f7fb ff20 	bl	80a26be <mbedtls_rsa_get_len>
}
 80a687e:	00c0      	lsls	r0, r0, #3
 80a6880:	bd08      	pop	{r3, pc}
	...

080a6884 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:

static int rsa_encrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80a6884:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6888:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80a688c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80a6890:	4604      	mov	r4, r0
 80a6892:	4688      	mov	r8, r1
 80a6894:	4617      	mov	r7, r2
 80a6896:	4699      	mov	r9, r3
 80a6898:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80a689a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    *olen = mbedtls_rsa_get_len( rsa );
 80a689c:	f7fb ff0f 	bl	80a26be <mbedtls_rsa_get_len>

    if( *olen > osize )
 80a68a0:	4550      	cmp	r0, sl
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    *olen = mbedtls_rsa_get_len( rsa );
 80a68a2:	f8cb 0000 	str.w	r0, [fp]

    if( *olen > osize )
 80a68a6:	d80d      	bhi.n	80a68c4 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x40>
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
                                       ilen, input, output ) );
 80a68a8:	4632      	mov	r2, r6
 80a68aa:	4629      	mov	r1, r5
 80a68ac:	4620      	mov	r0, r4
 80a68ae:	2300      	movs	r3, #0
 80a68b0:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80a68b4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80a68b8:	970a      	str	r7, [sp, #40]	; 0x28
}
 80a68ba:	b001      	add	sp, #4
 80a68bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if( *olen > osize )
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
                                       ilen, input, output ) );
 80a68c0:	f7fc ba6c 	b.w	80a2d9c <mbedtls_rsa_pkcs1_encrypt>
}
 80a68c4:	4801      	ldr	r0, [pc, #4]	; (80a68cc <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x48>)
 80a68c6:	b001      	add	sp, #4
 80a68c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a68cc:	ffffbc00 	.word	0xffffbc00

080a68d0 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:

static int rsa_decrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80a68d0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a68d4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80a68d6:	4693      	mov	fp, r2
 80a68d8:	4604      	mov	r4, r0
 80a68da:	4688      	mov	r8, r1
 80a68dc:	4699      	mov	r9, r3
 80a68de:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80a68e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80a68e4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;

    if( ilen != mbedtls_rsa_get_len( rsa ) )
 80a68e6:	f7fb feea 	bl	80a26be <mbedtls_rsa_get_len>
 80a68ea:	4558      	cmp	r0, fp
 80a68ec:	d10f      	bne.n	80a690e <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x3e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
 80a68ee:	4632      	mov	r2, r6
 80a68f0:	4629      	mov	r1, r5
 80a68f2:	4620      	mov	r0, r4
 80a68f4:	2301      	movs	r3, #1
 80a68f6:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80a68fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80a68fe:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80a6902:	970a      	str	r7, [sp, #40]	; 0x28
}
 80a6904:	b001      	add	sp, #4
 80a6906:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if( ilen != mbedtls_rsa_get_len( rsa ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
 80a690a:	f7fc bc07 	b.w	80a311c <mbedtls_rsa_pkcs1_decrypt>
}
 80a690e:	4802      	ldr	r0, [pc, #8]	; (80a6918 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x48>)
 80a6910:	b001      	add	sp, #4
 80a6912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6916:	bf00      	nop
 80a6918:	ffffbf80 	.word	0xffffbf80

080a691c <_ZL13rsa_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_>:

static int rsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80a691c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6920:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80a6924:	460f      	mov	r7, r1
 80a6926:	4691      	mov	r9, r2
 80a6928:	4698      	mov	r8, r3
 80a692a:	4604      	mov	r4, r0
 80a692c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80a6930:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80a6932:	9e0d      	ldr	r6, [sp, #52]	; 0x34
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
 80a6934:	f7fb fec3 	bl	80a26be <mbedtls_rsa_get_len>

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
 80a6938:	4632      	mov	r2, r6
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
 80a693a:	f8cb 0000 	str.w	r0, [fp]

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
 80a693e:	4629      	mov	r1, r5
 80a6940:	4620      	mov	r0, r4
 80a6942:	2301      	movs	r3, #1
 80a6944:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80a6948:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80a694c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80a6950:	970a      	str	r7, [sp, #40]	; 0x28
}
 80a6952:	b001      	add	sp, #4
 80a6954:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
 80a6958:	f7fc bd38 	b.w	80a33cc <mbedtls_rsa_pkcs1_sign>

080a695c <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>:
}

static int rsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 80a695c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a6960:	b085      	sub	sp, #20
 80a6962:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80a6964:	4606      	mov	r6, r0
 80a6966:	460f      	mov	r7, r1
 80a6968:	4691      	mov	r9, r2
 80a696a:	4698      	mov	r8, r3
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 80a696c:	f7fb fea7 	bl	80a26be <mbedtls_rsa_get_len>
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
 80a6970:	42a0      	cmp	r0, r4
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 80a6972:	4605      	mov	r5, r0
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
 80a6974:	d80f      	bhi.n	80a6996 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3a>
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );

    if( ( ret = mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL,
 80a6976:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a6978:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
 80a697c:	9303      	str	r3, [sp, #12]
 80a697e:	2300      	movs	r3, #0
 80a6980:	461a      	mov	r2, r3
 80a6982:	4619      	mov	r1, r3
 80a6984:	4630      	mov	r0, r6
 80a6986:	f7fc fe99 	bl	80a36bc <mbedtls_rsa_pkcs1_verify>
 80a698a:	b928      	cbnz	r0, 80a6998 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3c>
     * We have a special error code for that so that so that callers can
     * use mbedtls_pk_verify() to check "Does the buffer start with a
     * valid signature?" and not just "Does the buffer contain a valid
     * signature?". */
    if( sig_len > rsa_len )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 80a698c:	4b04      	ldr	r3, [pc, #16]	; (80a69a0 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x44>)
 80a698e:	42a5      	cmp	r5, r4
 80a6990:	bf38      	it	cc
 80a6992:	4618      	movcc	r0, r3
 80a6994:	e000      	b.n	80a6998 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3c>
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 80a6996:	4803      	ldr	r0, [pc, #12]	; (80a69a4 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x48>)
     * signature?". */
    if( sig_len > rsa_len )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

    return( 0 );
}
 80a6998:	b005      	add	sp, #20
 80a699a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a699e:	bf00      	nop
 80a69a0:	ffffc700 	.word	0xffffc700
 80a69a4:	ffffbc80 	.word	0xffffbc80

080a69a8 <_ZL15eckey_free_wrapPv>:

    return( ctx );
}

static void eckey_free_wrap( void *ctx )
{
 80a69a8:	b510      	push	{r4, lr}
 80a69aa:	4604      	mov	r4, r0
    mbedtls_ecp_keypair_free( (mbedtls_ecp_keypair *) ctx );
 80a69ac:	f7fd fbc5 	bl	80a413a <mbedtls_ecp_keypair_free>
    mbedtls_free( ctx );
 80a69b0:	4620      	mov	r0, r4
}
 80a69b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void eckey_free_wrap( void *ctx )
{
    mbedtls_ecp_keypair_free( (mbedtls_ecp_keypair *) ctx );
    mbedtls_free( ctx );
 80a69b6:	f00a bb97 	b.w	80b10e8 <free>

080a69ba <_ZL16eckey_alloc_wrapv>:
    return( mbedtls_ecp_check_pub_priv( (const mbedtls_ecp_keypair *) pub,
                                (const mbedtls_ecp_keypair *) prv ) );
}

static void *eckey_alloc_wrap( void )
{
 80a69ba:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );
 80a69bc:	21ac      	movs	r1, #172	; 0xac
 80a69be:	2001      	movs	r0, #1
 80a69c0:	f00b fdfc 	bl	80b25bc <calloc>

    if( ctx != NULL )
 80a69c4:	4604      	mov	r4, r0
 80a69c6:	b108      	cbz	r0, 80a69cc <_ZL16eckey_alloc_wrapv+0x12>
        mbedtls_ecp_keypair_init( (mbedtls_ecp_keypair *)ctx );
 80a69c8:	f7fd fb69 	bl	80a409e <mbedtls_ecp_keypair_init>

    return( ctx );
}
 80a69cc:	4620      	mov	r0, r4
 80a69ce:	bd10      	pop	{r4, pc}

080a69d0 <_ZL16eckey_check_pairPKvS0_>:
#endif /* MBEDTLS_ECDSA_C */

static int eckey_check_pair( const void *pub, const void *prv )
{
    return( mbedtls_ecp_check_pub_priv( (const mbedtls_ecp_keypair *) pub,
                                (const mbedtls_ecp_keypair *) prv ) );
 80a69d0:	f7fe bae6 	b.w	80a4fa0 <mbedtls_ecp_check_pub_priv>

080a69d4 <_ZL16ecdsa_alloc_wrapv>:

}
#endif /* MBEDTLS_ECP_RESTARTABLE */

static void *ecdsa_alloc_wrap( void )
{
 80a69d4:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecdsa_context ) );
 80a69d6:	21ac      	movs	r1, #172	; 0xac
 80a69d8:	2001      	movs	r0, #1
 80a69da:	f00b fdef 	bl	80b25bc <calloc>

    if( ctx != NULL )
 80a69de:	4604      	mov	r4, r0
 80a69e0:	b108      	cbz	r0, 80a69e6 <_ZL16ecdsa_alloc_wrapv+0x12>
        mbedtls_ecdsa_init( (mbedtls_ecdsa_context *) ctx );
 80a69e2:	f000 fab0 	bl	80a6f46 <mbedtls_ecdsa_init>

    return( ctx );
}
 80a69e6:	4620      	mov	r0, r4
 80a69e8:	bd10      	pop	{r4, pc}

080a69ea <_ZL15ecdsa_free_wrapPv>:

static void ecdsa_free_wrap( void *ctx )
{
 80a69ea:	b510      	push	{r4, lr}
 80a69ec:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( (mbedtls_ecdsa_context *) ctx );
 80a69ee:	f000 faac 	bl	80a6f4a <mbedtls_ecdsa_free>
    mbedtls_free( ctx );
 80a69f2:	4620      	mov	r0, r4
}
 80a69f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void ecdsa_free_wrap( void *ctx )
{
    mbedtls_ecdsa_free( (mbedtls_ecdsa_context *) ctx );
    mbedtls_free( ctx );
 80a69f8:	f00a bb76 	b.w	80b10e8 <free>

080a69fc <_ZL15ecdsa_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_>:

static int ecdsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80a69fc:	b410      	push	{r4}
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
                md_alg, hash, hash_len, sig, sig_len, f_rng, p_rng ) );
}
 80a69fe:	bc10      	pop	{r4}
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
                md_alg, hash, hash_len, sig, sig_len, f_rng, p_rng ) );
 80a6a00:	f000 ba3a 	b.w	80a6e78 <mbedtls_ecdsa_write_signature>

080a6a04 <_ZL15eckey_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_>:

static int eckey_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80a6a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a6a06:	4604      	mov	r4, r0
 80a6a08:	b0b1      	sub	sp, #196	; 0xc4
    int ret;
    mbedtls_ecdsa_context ecdsa;

    mbedtls_ecdsa_init( &ecdsa );
 80a6a0a:	a805      	add	r0, sp, #20

static int eckey_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80a6a0c:	460d      	mov	r5, r1
 80a6a0e:	4616      	mov	r6, r2
 80a6a10:	461f      	mov	r7, r3
    int ret;
    mbedtls_ecdsa_context ecdsa;

    mbedtls_ecdsa_init( &ecdsa );
 80a6a12:	f000 fa98 	bl	80a6f46 <mbedtls_ecdsa_init>

    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, (const mbedtls_ecp_keypair *)ctx ) ) == 0 )
 80a6a16:	4621      	mov	r1, r4
 80a6a18:	a805      	add	r0, sp, #20
 80a6a1a:	f000 fa9a 	bl	80a6f52 <mbedtls_ecdsa_from_keypair>
 80a6a1e:	4604      	mov	r4, r0
 80a6a20:	b970      	cbnz	r0, 80a6a40 <_ZL15eckey_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_+0x3c>
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
                md_alg, hash, hash_len, sig, sig_len, f_rng, p_rng ) );
 80a6a22:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 80a6a24:	4632      	mov	r2, r6
 80a6a26:	9303      	str	r3, [sp, #12]
 80a6a28:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80a6a2a:	4629      	mov	r1, r5
 80a6a2c:	9302      	str	r3, [sp, #8]
 80a6a2e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80a6a30:	a805      	add	r0, sp, #20
 80a6a32:	9301      	str	r3, [sp, #4]
 80a6a34:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80a6a36:	9300      	str	r3, [sp, #0]
 80a6a38:	463b      	mov	r3, r7
 80a6a3a:	f000 fa1d 	bl	80a6e78 <mbedtls_ecdsa_write_signature>
 80a6a3e:	4604      	mov	r4, r0

    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, (const mbedtls_ecp_keypair *)ctx ) ) == 0 )
        ret = ecdsa_sign_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len,
                               f_rng, p_rng );

    mbedtls_ecdsa_free( &ecdsa );
 80a6a40:	a805      	add	r0, sp, #20
 80a6a42:	f000 fa82 	bl	80a6f4a <mbedtls_ecdsa_free>

    return( ret );
}
 80a6a46:	4620      	mov	r0, r4
 80a6a48:	b031      	add	sp, #196	; 0xc4
 80a6a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a6a4c <_ZL17ecdsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>:
}

static int ecdsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                       const unsigned char *hash, size_t hash_len,
                       const unsigned char *sig, size_t sig_len )
{
 80a6a4c:	b507      	push	{r0, r1, r2, lr}
 80a6a4e:	4611      	mov	r1, r2
 80a6a50:	461a      	mov	r2, r3
    int ret;
    ((void) md_alg);

    ret = mbedtls_ecdsa_read_signature( (mbedtls_ecdsa_context *) ctx,
 80a6a52:	9b05      	ldr	r3, [sp, #20]
 80a6a54:	9300      	str	r3, [sp, #0]
 80a6a56:	9b04      	ldr	r3, [sp, #16]
 80a6a58:	f000 fa6c 	bl	80a6f34 <mbedtls_ecdsa_read_signature>

    if( ret == MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

    return( ret );
}
 80a6a5c:	4b03      	ldr	r3, [pc, #12]	; (80a6a6c <_ZL17ecdsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x20>)
 80a6a5e:	f510 4f98 	cmn.w	r0, #19456	; 0x4c00
 80a6a62:	bf08      	it	eq
 80a6a64:	4618      	moveq	r0, r3
 80a6a66:	b003      	add	sp, #12
 80a6a68:	f85d fb04 	ldr.w	pc, [sp], #4
 80a6a6c:	ffffc700 	.word	0xffffc700

080a6a70 <_ZL17eckey_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>:
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );

static int eckey_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                       const unsigned char *hash, size_t hash_len,
                       const unsigned char *sig, size_t sig_len )
{
 80a6a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a6a72:	4604      	mov	r4, r0
 80a6a74:	b0af      	sub	sp, #188	; 0xbc
    int ret;
    mbedtls_ecdsa_context ecdsa;

    mbedtls_ecdsa_init( &ecdsa );
 80a6a76:	a803      	add	r0, sp, #12
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng );

static int eckey_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                       const unsigned char *hash, size_t hash_len,
                       const unsigned char *sig, size_t sig_len )
{
 80a6a78:	460d      	mov	r5, r1
 80a6a7a:	4616      	mov	r6, r2
 80a6a7c:	461f      	mov	r7, r3
    int ret;
    mbedtls_ecdsa_context ecdsa;

    mbedtls_ecdsa_init( &ecdsa );
 80a6a7e:	f000 fa62 	bl	80a6f46 <mbedtls_ecdsa_init>

    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, (const mbedtls_ecp_keypair *)ctx ) ) == 0 )
 80a6a82:	4621      	mov	r1, r4
 80a6a84:	a803      	add	r0, sp, #12
 80a6a86:	f000 fa64 	bl	80a6f52 <mbedtls_ecdsa_from_keypair>
 80a6a8a:	4604      	mov	r4, r0
 80a6a8c:	b950      	cbnz	r0, 80a6aa4 <_ZL17eckey_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x34>
        ret = ecdsa_verify_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len );
 80a6a8e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80a6a90:	4632      	mov	r2, r6
 80a6a92:	9301      	str	r3, [sp, #4]
 80a6a94:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80a6a96:	4629      	mov	r1, r5
 80a6a98:	9300      	str	r3, [sp, #0]
 80a6a9a:	a803      	add	r0, sp, #12
 80a6a9c:	463b      	mov	r3, r7
 80a6a9e:	f7ff ffd5 	bl	80a6a4c <_ZL17ecdsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>
 80a6aa2:	4604      	mov	r4, r0

    mbedtls_ecdsa_free( &ecdsa );
 80a6aa4:	a803      	add	r0, sp, #12
 80a6aa6:	f000 fa50 	bl	80a6f4a <mbedtls_ecdsa_free>

    return( ret );
}
 80a6aaa:	4620      	mov	r0, r4
 80a6aac:	b02f      	add	sp, #188	; 0xbc
 80a6aae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a6ab0 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj>:
 * Derive a suitable integer for group grp from a buffer of length len
 * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3
 */
static int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,
                       const unsigned char *buf, size_t blen )
{
 80a6ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret;
    size_t n_size = ( grp->nbits + 7 ) / 8;
 80a6ab2:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 * Derive a suitable integer for group grp from a buffer of length len
 * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3
 */
static int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,
                       const unsigned char *buf, size_t blen )
{
 80a6ab4:	460e      	mov	r6, r1
    int ret;
    size_t n_size = ( grp->nbits + 7 ) / 8;
 80a6ab6:	3407      	adds	r4, #7
 80a6ab8:	08e4      	lsrs	r4, r4, #3
 80a6aba:	429c      	cmp	r4, r3
 80a6abc:	bf28      	it	cs
 80a6abe:	461c      	movcs	r4, r3
 * Derive a suitable integer for group grp from a buffer of length len
 * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3
 */
static int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,
                       const unsigned char *buf, size_t blen )
{
 80a6ac0:	4611      	mov	r1, r2
 80a6ac2:	4605      	mov	r5, r0
    int ret;
    size_t n_size = ( grp->nbits + 7 ) / 8;
    size_t use_size = blen > n_size ? n_size : blen;

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
 80a6ac4:	4622      	mov	r2, r4
 80a6ac6:	4630      	mov	r0, r6
 80a6ac8:	f005 fc54 	bl	80ac374 <mbedtls_mpi_read_binary>
 80a6acc:	4607      	mov	r7, r0
 80a6ace:	b9c0      	cbnz	r0, 80a6b02 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj+0x52>
    if( use_size * 8 > grp->nbits )
 80a6ad0:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 80a6ad2:	00e4      	lsls	r4, r4, #3
 80a6ad4:	428c      	cmp	r4, r1
 80a6ad6:	d80d      	bhi.n	80a6af4 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj+0x44>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );

    /* While at it, reduce modulo N */
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
 80a6ad8:	354c      	adds	r5, #76	; 0x4c
 80a6ada:	4629      	mov	r1, r5
 80a6adc:	4630      	mov	r0, r6
 80a6ade:	f005 fde3 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80a6ae2:	2800      	cmp	r0, #0
 80a6ae4:	db0d      	blt.n	80a6b02 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj+0x52>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
 80a6ae6:	462a      	mov	r2, r5
 80a6ae8:	4631      	mov	r1, r6
 80a6aea:	4630      	mov	r0, r6

cleanup:
    return( ret );
}
 80a6aec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if( use_size * 8 > grp->nbits )
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );

    /* While at it, reduce modulo N */
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
 80a6af0:	f005 bef0 	b.w	80ac8d4 <mbedtls_mpi_sub_mpi>
    size_t n_size = ( grp->nbits + 7 ) / 8;
    size_t use_size = blen > n_size ? n_size : blen;

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
    if( use_size * 8 > grp->nbits )
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );
 80a6af4:	1a61      	subs	r1, r4, r1
 80a6af6:	4630      	mov	r0, r6
 80a6af8:	f005 fcf7 	bl	80ac4ea <mbedtls_mpi_shift_r>
 80a6afc:	2800      	cmp	r0, #0
 80a6afe:	d0eb      	beq.n	80a6ad8 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj+0x28>
 80a6b00:	4607      	mov	r7, r0
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );

cleanup:
    return( ret );
}
 80a6b02:	4638      	mov	r0, r7
 80a6b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a6b08 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0>:
#if !defined(MBEDTLS_ECDSA_SIGN_ALT)
/*
 * Compute ECDSA signature of a hashed message (SEC1 4.1.3)
 * Obviously, compared to SEC1 4.1.3, we skip step 4 (hash message)
 */
static int ecdsa_sign_restartable( mbedtls_ecp_group *grp,
 80a6b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6b0c:	469b      	mov	fp, r3
    mbedtls_ecp_point R;
    mbedtls_mpi k, e, t;
    mbedtls_mpi *pk = &k, *pr = r;

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
 80a6b0e:	6d43      	ldr	r3, [r0, #84]	; 0x54
#if !defined(MBEDTLS_ECDSA_SIGN_ALT)
/*
 * Compute ECDSA signature of a hashed message (SEC1 4.1.3)
 * Obviously, compared to SEC1 4.1.3, we skip step 4 (hash message)
 */
static int ecdsa_sign_restartable( mbedtls_ecp_group *grp,
 80a6b10:	b09b      	sub	sp, #108	; 0x6c
 80a6b12:	4606      	mov	r6, r0
 80a6b14:	468a      	mov	sl, r1
 80a6b16:	4615      	mov	r5, r2
    mbedtls_ecp_point R;
    mbedtls_mpi k, e, t;
    mbedtls_mpi *pk = &k, *pr = r;

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
 80a6b18:	b173      	cbz	r3, 80a6b38 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x30>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /* Make sure d is in range 1..n-1 */
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 80a6b1a:	2101      	movs	r1, #1
 80a6b1c:	4658      	mov	r0, fp
 80a6b1e:	f005 fe08 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80a6b22:	2800      	cmp	r0, #0
 80a6b24:	db0a      	blt.n	80a6b3c <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x34>
 80a6b26:	f106 074c 	add.w	r7, r6, #76	; 0x4c
 80a6b2a:	4639      	mov	r1, r7
 80a6b2c:	4658      	mov	r0, fp
 80a6b2e:	f005 fdbb 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80a6b32:	2800      	cmp	r0, #0
 80a6b34:	da02      	bge.n	80a6b3c <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x34>
 80a6b36:	e003      	b.n	80a6b40 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x38>
    mbedtls_mpi k, e, t;
    mbedtls_mpi *pk = &k, *pr = r;

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80a6b38:	4854      	ldr	r0, [pc, #336]	; (80a6c8c <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x184>)
 80a6b3a:	e0a4      	b.n	80a6c86 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x17e>

    /* Make sure d is in range 1..n-1 */
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 80a6b3c:	4854      	ldr	r0, [pc, #336]	; (80a6c90 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x188>)
 80a6b3e:	e0a2      	b.n	80a6c86 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x17e>
 80a6b40:	f10d 0918 	add.w	r9, sp, #24
                int (*f_rng_blind)(void *, unsigned char *, size_t),
                void *p_rng_blind,
                mbedtls_ecdsa_restart_ctx *rs_ctx )
{
    int ret, key_tries, sign_tries;
    int *p_sign_tries = &sign_tries, *p_key_tries = &key_tries;
 80a6b44:	46c8      	mov	r8, r9

    /* Make sure d is in range 1..n-1 */
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
        return( MBEDTLS_ERR_ECP_INVALID_KEY );

    mbedtls_ecp_point_init( &R );
 80a6b46:	a811      	add	r0, sp, #68	; 0x44
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
 80a6b48:	ac08      	add	r4, sp, #32

    /* Make sure d is in range 1..n-1 */
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
        return( MBEDTLS_ERR_ECP_INVALID_KEY );

    mbedtls_ecp_point_init( &R );
 80a6b4a:	f7fd fa79 	bl	80a4040 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
 80a6b4e:	4620      	mov	r0, r4
 80a6b50:	f005 fac3 	bl	80ac0da <mbedtls_mpi_init>
 80a6b54:	a80b      	add	r0, sp, #44	; 0x2c
 80a6b56:	f005 fac0 	bl	80ac0da <mbedtls_mpi_init>
 80a6b5a:	a80e      	add	r0, sp, #56	; 0x38
 80a6b5c:	f005 fabd 	bl	80ac0da <mbedtls_mpi_init>
        if( rs_ctx->sig->state == ecdsa_sig_modn )
            goto modn;
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    *p_sign_tries = 0;
 80a6b60:	2300      	movs	r3, #0
 80a6b62:	9307      	str	r3, [sp, #28]

        /*
         * Steps 1-3: generate a suitable ephemeral keypair
         * and set r = xR mod n
         */
        *p_key_tries = 0;
 80a6b64:	9305      	str	r3, [sp, #20]
#endif /* MBEDTLS_ECP_RESTARTABLE */

    *p_sign_tries = 0;
    do
    {
        if( *p_sign_tries++ > 10 )
 80a6b66:	f859 3f04 	ldr.w	r3, [r9, #4]!
 80a6b6a:	2b0a      	cmp	r3, #10
 80a6b6c:	dd01      	ble.n	80a6b72 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x6a>
        {
            ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
 80a6b6e:	4b49      	ldr	r3, [pc, #292]	; (80a6c94 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x18c>)
 80a6b70:	e07a      	b.n	80a6c68 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>

        /*
         * Steps 1-3: generate a suitable ephemeral keypair
         * and set r = xR mod n
         */
        *p_key_tries = 0;
 80a6b72:	9b05      	ldr	r3, [sp, #20]
 80a6b74:	f8c8 3000 	str.w	r3, [r8]
            if( rs_ctx != NULL && rs_ctx->sig != NULL )
                rs_ctx->sig->state = ecdsa_sig_mul;

mul:
#endif
            MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &R, pk, &grp->G,
 80a6b78:	f106 0328 	add.w	r3, r6, #40	; 0x28
 80a6b7c:	9304      	str	r3, [sp, #16]
         * and set r = xR mod n
         */
        *p_key_tries = 0;
        do
        {
            if( *p_key_tries++ > 10 )
 80a6b7e:	f858 3b04 	ldr.w	r3, [r8], #4
 80a6b82:	2b0a      	cmp	r3, #10
 80a6b84:	dcf3      	bgt.n	80a6b6e <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x66>
            {
                ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
                goto cleanup;
            }

            MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, pk, f_rng, p_rng ) );
 80a6b86:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80a6b88:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80a6b8a:	4621      	mov	r1, r4
 80a6b8c:	4630      	mov	r0, r6
 80a6b8e:	f7fe f9c7 	bl	80a4f20 <mbedtls_ecp_gen_privkey>
 80a6b92:	4603      	mov	r3, r0
 80a6b94:	2800      	cmp	r0, #0
 80a6b96:	d167      	bne.n	80a6c68 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
            if( rs_ctx != NULL && rs_ctx->sig != NULL )
                rs_ctx->sig->state = ecdsa_sig_mul;

mul:
#endif
            MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &R, pk, &grp->G,
 80a6b98:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80a6b9a:	9002      	str	r0, [sp, #8]
 80a6b9c:	9301      	str	r3, [sp, #4]
 80a6b9e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80a6ba0:	4622      	mov	r2, r4
 80a6ba2:	9300      	str	r3, [sp, #0]
 80a6ba4:	a911      	add	r1, sp, #68	; 0x44
 80a6ba6:	9b04      	ldr	r3, [sp, #16]
 80a6ba8:	4630      	mov	r0, r6
 80a6baa:	f7fe f80d 	bl	80a4bc8 <mbedtls_ecp_mul_restartable>
 80a6bae:	4603      	mov	r3, r0
 80a6bb0:	2800      	cmp	r0, #0
 80a6bb2:	d159      	bne.n	80a6c68 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
                                                          f_rng_blind,
                                                          p_rng_blind,
                                                          ECDSA_RS_ECP ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pr, &R.X, &grp->N ) );
 80a6bb4:	463a      	mov	r2, r7
 80a6bb6:	a911      	add	r1, sp, #68	; 0x44
 80a6bb8:	4650      	mov	r0, sl
 80a6bba:	f006 f915 	bl	80acde8 <mbedtls_mpi_mod_mpi>
 80a6bbe:	4603      	mov	r3, r0
 80a6bc0:	2800      	cmp	r0, #0
 80a6bc2:	d151      	bne.n	80a6c68 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
        }
        while( mbedtls_mpi_cmp_int( pr, 0 ) == 0 );
 80a6bc4:	4601      	mov	r1, r0
 80a6bc6:	4650      	mov	r0, sl
 80a6bc8:	f005 fdb3 	bl	80ac732 <mbedtls_mpi_cmp_int>
        /*
         * Steps 1-3: generate a suitable ephemeral keypair
         * and set r = xR mod n
         */
        *p_key_tries = 0;
        do
 80a6bcc:	2800      	cmp	r0, #0
 80a6bce:	d0d6      	beq.n	80a6b7e <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x76>
        ECDSA_BUDGET( MBEDTLS_ECP_OPS_INV + 4 );

        /*
         * Step 5: derive MPI from hashed message
         */
        MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 80a6bd0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80a6bd2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80a6bd4:	a90b      	add	r1, sp, #44	; 0x2c
 80a6bd6:	4630      	mov	r0, r6
 80a6bd8:	f7ff ff6a 	bl	80a6ab0 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj>
 80a6bdc:	4603      	mov	r3, r0
 80a6bde:	2800      	cmp	r0, #0
 80a6be0:	d142      	bne.n	80a6c68 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>

        /*
         * Generate a random value to blind inv_mod in next step,
         * avoiding a potential timing leak.
         */
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, &t, f_rng_blind,
 80a6be2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80a6be4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80a6be6:	a90e      	add	r1, sp, #56	; 0x38
 80a6be8:	4630      	mov	r0, r6
 80a6bea:	f7fe f999 	bl	80a4f20 <mbedtls_ecp_gen_privkey>
 80a6bee:	4603      	mov	r3, r0
 80a6bf0:	2800      	cmp	r0, #0
 80a6bf2:	d139      	bne.n	80a6c68 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
                                                  p_rng_blind ) );

        /*
         * Step 6: compute s = (e + r * d) / k = t (e + rd) / (kt) mod n
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, pr, d ) );
 80a6bf4:	465a      	mov	r2, fp
 80a6bf6:	4651      	mov	r1, sl
 80a6bf8:	4628      	mov	r0, r5
 80a6bfa:	f005 feb9 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a6bfe:	4603      	mov	r3, r0
 80a6c00:	bb90      	cbnz	r0, 80a6c68 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &e, &e, s ) );
 80a6c02:	a90b      	add	r1, sp, #44	; 0x2c
 80a6c04:	462a      	mov	r2, r5
 80a6c06:	4608      	mov	r0, r1
 80a6c08:	f005 fe43 	bl	80ac892 <mbedtls_mpi_add_mpi>
 80a6c0c:	4603      	mov	r3, r0
 80a6c0e:	bb58      	cbnz	r0, 80a6c68 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &e, &e, &t ) );
 80a6c10:	a90b      	add	r1, sp, #44	; 0x2c
 80a6c12:	aa0e      	add	r2, sp, #56	; 0x38
 80a6c14:	4608      	mov	r0, r1
 80a6c16:	f005 feab 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a6c1a:	4603      	mov	r3, r0
 80a6c1c:	bb20      	cbnz	r0, 80a6c68 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pk, pk, &t ) );
 80a6c1e:	aa0e      	add	r2, sp, #56	; 0x38
 80a6c20:	4621      	mov	r1, r4
 80a6c22:	4620      	mov	r0, r4
 80a6c24:	f005 fea4 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a6c28:	4603      	mov	r3, r0
 80a6c2a:	b9e8      	cbnz	r0, 80a6c68 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( s, pk, &grp->N ) );
 80a6c2c:	463a      	mov	r2, r7
 80a6c2e:	4621      	mov	r1, r4
 80a6c30:	4628      	mov	r0, r5
 80a6c32:	f006 fbe3 	bl	80ad3fc <mbedtls_mpi_inv_mod>
 80a6c36:	4603      	mov	r3, r0
 80a6c38:	b9b0      	cbnz	r0, 80a6c68 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, s, &e ) );
 80a6c3a:	aa0b      	add	r2, sp, #44	; 0x2c
 80a6c3c:	4629      	mov	r1, r5
 80a6c3e:	4628      	mov	r0, r5
 80a6c40:	f005 fe96 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a6c44:	4603      	mov	r3, r0
 80a6c46:	b978      	cbnz	r0, 80a6c68 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( s, s, &grp->N ) );
 80a6c48:	463a      	mov	r2, r7
 80a6c4a:	4629      	mov	r1, r5
 80a6c4c:	4628      	mov	r0, r5
 80a6c4e:	f006 f8cb 	bl	80acde8 <mbedtls_mpi_mod_mpi>
 80a6c52:	4603      	mov	r3, r0
 80a6c54:	b940      	cbnz	r0, 80a6c68 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x160>
    }
    while( mbedtls_mpi_cmp_int( s, 0 ) == 0 );
 80a6c56:	4601      	mov	r1, r0
 80a6c58:	9004      	str	r0, [sp, #16]
 80a6c5a:	4628      	mov	r0, r5
 80a6c5c:	f005 fd69 	bl	80ac732 <mbedtls_mpi_cmp_int>
            goto modn;
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    *p_sign_tries = 0;
    do
 80a6c60:	9b04      	ldr	r3, [sp, #16]
 80a6c62:	2800      	cmp	r0, #0
 80a6c64:	f43f af7f 	beq.w	80a6b66 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x5e>
    if( rs_ctx != NULL && rs_ctx->sig != NULL )
        mbedtls_mpi_copy( r, pr );
#endif

cleanup:
    mbedtls_ecp_point_free( &R );
 80a6c68:	a811      	add	r0, sp, #68	; 0x44
 80a6c6a:	9304      	str	r3, [sp, #16]
 80a6c6c:	f7fd fa25 	bl	80a40ba <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );
 80a6c70:	a808      	add	r0, sp, #32
 80a6c72:	f005 fa38 	bl	80ac0e6 <mbedtls_mpi_free>
 80a6c76:	a80b      	add	r0, sp, #44	; 0x2c
 80a6c78:	f005 fa35 	bl	80ac0e6 <mbedtls_mpi_free>
 80a6c7c:	a80e      	add	r0, sp, #56	; 0x38
 80a6c7e:	f005 fa32 	bl	80ac0e6 <mbedtls_mpi_free>

    ECDSA_RS_LEAVE( sig );

    return( ret );
 80a6c82:	9b04      	ldr	r3, [sp, #16]
 80a6c84:	4618      	mov	r0, r3
}
 80a6c86:	b01b      	add	sp, #108	; 0x6c
 80a6c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6c8c:	ffffb080 	.word	0xffffb080
 80a6c90:	ffffb380 	.word	0xffffb380
 80a6c94:	ffffb300 	.word	0xffffb300

080a6c98 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1>:
#if !defined(MBEDTLS_ECDSA_VERIFY_ALT)
/*
 * Verify ECDSA signature of hashed message (SEC1 4.1.4)
 * Obviously, compared to SEC1 4.1.3, we skip step 2 (hash message)
 */
static int ecdsa_verify_restartable( mbedtls_ecp_group *grp,
 80a6c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a6c9c:	4606      	mov	r6, r0
 80a6c9e:	b09a      	sub	sp, #104	; 0x68
    int ret;
    mbedtls_mpi e, s_inv, u1, u2;
    mbedtls_ecp_point R;
    mbedtls_mpi *pu1 = &u1, *pu2 = &u2;

    mbedtls_ecp_point_init( &R );
 80a6ca0:	a811      	add	r0, sp, #68	; 0x44
#if !defined(MBEDTLS_ECDSA_VERIFY_ALT)
/*
 * Verify ECDSA signature of hashed message (SEC1 4.1.4)
 * Obviously, compared to SEC1 4.1.3, we skip step 2 (hash message)
 */
static int ecdsa_verify_restartable( mbedtls_ecp_group *grp,
 80a6ca2:	4698      	mov	r8, r3
 80a6ca4:	460c      	mov	r4, r1
 80a6ca6:	4617      	mov	r7, r2
    int ret;
    mbedtls_mpi e, s_inv, u1, u2;
    mbedtls_ecp_point R;
    mbedtls_mpi *pu1 = &u1, *pu2 = &u2;

    mbedtls_ecp_point_init( &R );
 80a6ca8:	f7fd f9ca 	bl	80a4040 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv );
 80a6cac:	a805      	add	r0, sp, #20
 80a6cae:	f005 fa14 	bl	80ac0da <mbedtls_mpi_init>
 80a6cb2:	a808      	add	r0, sp, #32
 80a6cb4:	f005 fa11 	bl	80ac0da <mbedtls_mpi_init>
    mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );
 80a6cb8:	a80b      	add	r0, sp, #44	; 0x2c
 80a6cba:	f005 fa0e 	bl	80ac0da <mbedtls_mpi_init>
 80a6cbe:	a80e      	add	r0, sp, #56	; 0x38
 80a6cc0:	f005 fa0b 	bl	80ac0da <mbedtls_mpi_init>

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
 80a6cc4:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80a6cc6:	2b00      	cmp	r3, #0
 80a6cc8:	d068      	beq.n	80a6d9c <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0x104>
#endif /* MBEDTLS_ECP_RESTARTABLE */

    /*
     * Step 1: make sure r and s are in range 1..n-1
     */
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 80a6cca:	2101      	movs	r1, #1
 80a6ccc:	9820      	ldr	r0, [sp, #128]	; 0x80
 80a6cce:	f005 fd30 	bl	80ac732 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 80a6cd2:	2800      	cmp	r0, #0
 80a6cd4:	db50      	blt.n	80a6d78 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe0>
#endif /* MBEDTLS_ECP_RESTARTABLE */

    /*
     * Step 1: make sure r and s are in range 1..n-1
     */
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 80a6cd6:	f106 054c 	add.w	r5, r6, #76	; 0x4c
 80a6cda:	4629      	mov	r1, r5
 80a6cdc:	9820      	ldr	r0, [sp, #128]	; 0x80
 80a6cde:	f005 fce3 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80a6ce2:	2800      	cmp	r0, #0
 80a6ce4:	da48      	bge.n	80a6d78 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe0>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 80a6ce6:	2101      	movs	r1, #1
 80a6ce8:	9821      	ldr	r0, [sp, #132]	; 0x84
 80a6cea:	f005 fd22 	bl	80ac732 <mbedtls_mpi_cmp_int>
#endif /* MBEDTLS_ECP_RESTARTABLE */

    /*
     * Step 1: make sure r and s are in range 1..n-1
     */
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 80a6cee:	2800      	cmp	r0, #0
 80a6cf0:	db42      	blt.n	80a6d78 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe0>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 80a6cf2:	4629      	mov	r1, r5
 80a6cf4:	9821      	ldr	r0, [sp, #132]	; 0x84
 80a6cf6:	f005 fcd7 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80a6cfa:	2800      	cmp	r0, #0
 80a6cfc:	da3c      	bge.n	80a6d78 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe0>
    }

    /*
     * Step 3: derive MPI from hashed message
     */
    MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 80a6cfe:	4622      	mov	r2, r4
 80a6d00:	463b      	mov	r3, r7
 80a6d02:	a905      	add	r1, sp, #20
 80a6d04:	4630      	mov	r0, r6
 80a6d06:	f7ff fed3 	bl	80a6ab0 <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj>
 80a6d0a:	4604      	mov	r4, r0
 80a6d0c:	2800      	cmp	r0, #0
 80a6d0e:	d134      	bne.n	80a6d7a <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>
    /*
     * Step 4: u1 = e / s mod n, u2 = r / s mod n
     */
    ECDSA_BUDGET( MBEDTLS_ECP_OPS_CHK + MBEDTLS_ECP_OPS_INV + 2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &s_inv, s, &grp->N ) );
 80a6d10:	462a      	mov	r2, r5
 80a6d12:	9921      	ldr	r1, [sp, #132]	; 0x84
 80a6d14:	a808      	add	r0, sp, #32
 80a6d16:	f006 fb71 	bl	80ad3fc <mbedtls_mpi_inv_mod>
 80a6d1a:	4604      	mov	r4, r0
 80a6d1c:	bb68      	cbnz	r0, 80a6d7a <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu1, &e, &s_inv ) );
 80a6d1e:	aa08      	add	r2, sp, #32
 80a6d20:	a905      	add	r1, sp, #20
 80a6d22:	a80b      	add	r0, sp, #44	; 0x2c
 80a6d24:	f005 fe24 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a6d28:	4604      	mov	r4, r0
 80a6d2a:	bb30      	cbnz	r0, 80a6d7a <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu1, pu1, &grp->N ) );
 80a6d2c:	a90b      	add	r1, sp, #44	; 0x2c
 80a6d2e:	462a      	mov	r2, r5
 80a6d30:	4608      	mov	r0, r1
 80a6d32:	f006 f859 	bl	80acde8 <mbedtls_mpi_mod_mpi>
 80a6d36:	4604      	mov	r4, r0
 80a6d38:	b9f8      	cbnz	r0, 80a6d7a <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu2, r, &s_inv ) );
 80a6d3a:	aa08      	add	r2, sp, #32
 80a6d3c:	9920      	ldr	r1, [sp, #128]	; 0x80
 80a6d3e:	a80e      	add	r0, sp, #56	; 0x38
 80a6d40:	f005 fe16 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80a6d44:	4604      	mov	r4, r0
 80a6d46:	b9c0      	cbnz	r0, 80a6d7a <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu2, pu2, &grp->N ) );
 80a6d48:	af0e      	add	r7, sp, #56	; 0x38
 80a6d4a:	462a      	mov	r2, r5
 80a6d4c:	4639      	mov	r1, r7
 80a6d4e:	4638      	mov	r0, r7
 80a6d50:	f006 f84a 	bl	80acde8 <mbedtls_mpi_mod_mpi>
 80a6d54:	4604      	mov	r4, r0
 80a6d56:	b980      	cbnz	r0, 80a6d7a <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>
muladd:
#endif
    /*
     * Step 5: R = u1 G + u2 Q
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_muladd_restartable( grp,
 80a6d58:	9002      	str	r0, [sp, #8]
 80a6d5a:	e88d 0180 	stmia.w	sp, {r7, r8}
 80a6d5e:	f106 0328 	add.w	r3, r6, #40	; 0x28
 80a6d62:	aa0b      	add	r2, sp, #44	; 0x2c
 80a6d64:	a911      	add	r1, sp, #68	; 0x44
 80a6d66:	4630      	mov	r0, r6
 80a6d68:	f7fe f8a0 	bl	80a4eac <mbedtls_ecp_muladd_restartable>
 80a6d6c:	4604      	mov	r4, r0
 80a6d6e:	b920      	cbnz	r0, 80a6d7a <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>
                     &R, pu1, &grp->G, pu2, Q, ECDSA_RS_ECP ) );

    if( mbedtls_ecp_is_zero( &R ) )
 80a6d70:	a811      	add	r0, sp, #68	; 0x44
 80a6d72:	f7fd fd6d 	bl	80a4850 <mbedtls_ecp_is_zero>
 80a6d76:	b198      	cbz	r0, 80a6da0 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0x108>
    /*
     * Step 8: check if v (that is, R.X) is equal to r
     */
    if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 80a6d78:	4c12      	ldr	r4, [pc, #72]	; (80a6dc4 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0x12c>)
        goto cleanup;
    }

cleanup:
    mbedtls_ecp_point_free( &R );
 80a6d7a:	a811      	add	r0, sp, #68	; 0x44
 80a6d7c:	f7fd f99d 	bl	80a40ba <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &e ); mbedtls_mpi_free( &s_inv );
 80a6d80:	a805      	add	r0, sp, #20
 80a6d82:	f005 f9b0 	bl	80ac0e6 <mbedtls_mpi_free>
 80a6d86:	a808      	add	r0, sp, #32
 80a6d88:	f005 f9ad 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );
 80a6d8c:	a80b      	add	r0, sp, #44	; 0x2c
 80a6d8e:	f005 f9aa 	bl	80ac0e6 <mbedtls_mpi_free>
 80a6d92:	a80e      	add	r0, sp, #56	; 0x38
 80a6d94:	f005 f9a7 	bl	80ac0e6 <mbedtls_mpi_free>

    ECDSA_RS_LEAVE( ver );

    return( ret );
 80a6d98:	4620      	mov	r0, r4
 80a6d9a:	e010      	b.n	80a6dbe <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0x126>
    mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv );
    mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80a6d9c:	480a      	ldr	r0, [pc, #40]	; (80a6dc8 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0x130>)
 80a6d9e:	e00e      	b.n	80a6dbe <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0x126>

    /*
     * Step 6: convert xR to an integer (no-op)
     * Step 7: reduce xR mod n (gives v)
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &R.X, &R.X, &grp->N ) );
 80a6da0:	a911      	add	r1, sp, #68	; 0x44
 80a6da2:	462a      	mov	r2, r5
 80a6da4:	4608      	mov	r0, r1
 80a6da6:	f006 f81f 	bl	80acde8 <mbedtls_mpi_mod_mpi>
 80a6daa:	4604      	mov	r4, r0
 80a6dac:	2800      	cmp	r0, #0
 80a6dae:	d1e4      	bne.n	80a6d7a <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>

    /*
     * Step 8: check if v (that is, R.X) is equal to r
     */
    if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )
 80a6db0:	9920      	ldr	r1, [sp, #128]	; 0x80
 80a6db2:	a811      	add	r0, sp, #68	; 0x44
 80a6db4:	f005 fc78 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80a6db8:	2800      	cmp	r0, #0
 80a6dba:	d0de      	beq.n	80a6d7a <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe2>
 80a6dbc:	e7dc      	b.n	80a6d78 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1+0xe0>
    mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );

    ECDSA_RS_LEAVE( ver );

    return( ret );
}
 80a6dbe:	b01a      	add	sp, #104	; 0x68
 80a6dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a6dc4:	ffffb200 	.word	0xffffb200
 80a6dc8:	ffffb080 	.word	0xffffb080

080a6dcc <mbedtls_ecdsa_write_signature_restartable>:
                           const unsigned char *hash, size_t hlen,
                           unsigned char *sig, size_t *slen,
                           int (*f_rng)(void *, unsigned char *, size_t),
                           void *p_rng,
                           mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 80a6dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a6dd0:	4617      	mov	r7, r2
 80a6dd2:	4698      	mov	r8, r3
 80a6dd4:	4604      	mov	r4, r0
 80a6dd6:	b0b2      	sub	sp, #200	; 0xc8
 80a6dd8:	9d3a      	ldr	r5, [sp, #232]	; 0xe8
 80a6dda:	9e3b      	ldr	r6, [sp, #236]	; 0xec
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );

    mbedtls_mpi_init( &r );
 80a6ddc:	a808      	add	r0, sp, #32
 80a6dde:	f005 f97c 	bl	80ac0da <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
 80a6de2:	a80b      	add	r0, sp, #44	; 0x2c
 80a6de4:	f005 f979 	bl	80ac0da <mbedtls_mpi_init>
#if defined(MBEDTLS_ECDSA_SIGN_ALT)
    MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign( &ctx->grp, &r, &s, &ctx->d,
                         hash, hlen, f_rng, p_rng ) );
#else
    /* Use the same RNG for both blinding and ephemeral key generation */
    MBEDTLS_MPI_CHK( ecdsa_sign_restartable( &ctx->grp, &r, &s, &ctx->d,
 80a6de8:	e88d 0180 	stmia.w	sp, {r7, r8}
 80a6dec:	9605      	str	r6, [sp, #20]
 80a6dee:	9504      	str	r5, [sp, #16]
 80a6df0:	9603      	str	r6, [sp, #12]
 80a6df2:	9502      	str	r5, [sp, #8]
 80a6df4:	f104 037c 	add.w	r3, r4, #124	; 0x7c
 80a6df8:	aa0b      	add	r2, sp, #44	; 0x2c
 80a6dfa:	a908      	add	r1, sp, #32
 80a6dfc:	4620      	mov	r0, r4
 80a6dfe:	f7ff fe83 	bl	80a6b08 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0>
 80a6e02:	4607      	mov	r7, r0
 80a6e04:	bb70      	cbnz	r0, 80a6e64 <mbedtls_ecdsa_write_signature_restartable+0x98>
static int ecdsa_signature_to_asn1( const mbedtls_mpi *r, const mbedtls_mpi *s,
                                    unsigned char *sig, size_t *slen )
{
    int ret;
    unsigned char buf[MBEDTLS_ECDSA_MAX_LEN];
    unsigned char *p = buf + sizeof( buf );
 80a6e06:	ae32      	add	r6, sp, #200	; 0xc8
 80a6e08:	f10d 03c5 	add.w	r3, sp, #197	; 0xc5
 80a6e0c:	f846 3dac 	str.w	r3, [r6, #-172]!
    size_t len = 0;

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
 80a6e10:	aa0b      	add	r2, sp, #44	; 0x2c
 80a6e12:	a90e      	add	r1, sp, #56	; 0x38
 80a6e14:	4630      	mov	r0, r6
 80a6e16:	f7fa f920 	bl	80a105a <mbedtls_asn1_write_mpi>
 80a6e1a:	1e04      	subs	r4, r0, #0
 80a6e1c:	db21      	blt.n	80a6e62 <mbedtls_ecdsa_write_signature_restartable+0x96>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );
 80a6e1e:	aa08      	add	r2, sp, #32
 80a6e20:	a90e      	add	r1, sp, #56	; 0x38
 80a6e22:	4630      	mov	r0, r6
 80a6e24:	f7fa f919 	bl	80a105a <mbedtls_asn1_write_mpi>
 80a6e28:	2800      	cmp	r0, #0
 80a6e2a:	db19      	blt.n	80a6e60 <mbedtls_ecdsa_write_signature_restartable+0x94>
 80a6e2c:	1825      	adds	r5, r4, r0

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
 80a6e2e:	462a      	mov	r2, r5
 80a6e30:	a90e      	add	r1, sp, #56	; 0x38
 80a6e32:	4630      	mov	r0, r6
 80a6e34:	f7fa f88f 	bl	80a0f56 <mbedtls_asn1_write_len>
 80a6e38:	1e04      	subs	r4, r0, #0
 80a6e3a:	db12      	blt.n	80a6e62 <mbedtls_ecdsa_write_signature_restartable+0x96>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 80a6e3c:	2230      	movs	r2, #48	; 0x30
 80a6e3e:	a90e      	add	r1, sp, #56	; 0x38
 80a6e40:	4630      	mov	r0, r6
 80a6e42:	f7fa f8fc 	bl	80a103e <mbedtls_asn1_write_tag>
 80a6e46:	2800      	cmp	r0, #0
 80a6e48:	db0a      	blt.n	80a6e60 <mbedtls_ecdsa_write_signature_restartable+0x94>
 80a6e4a:	442c      	add	r4, r5
 80a6e4c:	4404      	add	r4, r0
                                       MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) );

    memcpy( sig, p, len );
 80a6e4e:	4622      	mov	r2, r4
 80a6e50:	9907      	ldr	r1, [sp, #28]
 80a6e52:	9838      	ldr	r0, [sp, #224]	; 0xe0
 80a6e54:	f00b fccf 	bl	80b27f6 <memcpy>
    *slen = len;
 80a6e58:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 80a6e5a:	601c      	str	r4, [r3, #0]

    return( 0 );
 80a6e5c:	463c      	mov	r4, r7
 80a6e5e:	e000      	b.n	80a6e62 <mbedtls_ecdsa_write_signature_restartable+0x96>

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 80a6e60:	4604      	mov	r4, r0
                                             hash, hlen, f_rng, p_rng, f_rng,
                                             p_rng, rs_ctx ) );
#endif /* MBEDTLS_ECDSA_SIGN_ALT */
#endif /* MBEDTLS_ECDSA_DETERMINISTIC */

    MBEDTLS_MPI_CHK( ecdsa_signature_to_asn1( &r, &s, sig, slen ) );
 80a6e62:	4627      	mov	r7, r4

cleanup:
    mbedtls_mpi_free( &r );
 80a6e64:	a808      	add	r0, sp, #32
 80a6e66:	f005 f93e 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 80a6e6a:	a80b      	add	r0, sp, #44	; 0x2c
 80a6e6c:	f005 f93b 	bl	80ac0e6 <mbedtls_mpi_free>

    return( ret );
}
 80a6e70:	4638      	mov	r0, r7
 80a6e72:	b032      	add	sp, #200	; 0xc8
 80a6e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a6e78 <mbedtls_ecdsa_write_signature>:
                                 mbedtls_md_type_t md_alg,
                                 const unsigned char *hash, size_t hlen,
                                 unsigned char *sig, size_t *slen,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 80a6e78:	b510      	push	{r4, lr}
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );
    return( mbedtls_ecdsa_write_signature_restartable(
                ctx, md_alg, hash, hlen, sig, slen, f_rng, p_rng, NULL ) );
 80a6e7a:	2400      	movs	r4, #0
                                 mbedtls_md_type_t md_alg,
                                 const unsigned char *hash, size_t hlen,
                                 unsigned char *sig, size_t *slen,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 80a6e7c:	b086      	sub	sp, #24
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );
    return( mbedtls_ecdsa_write_signature_restartable(
                ctx, md_alg, hash, hlen, sig, slen, f_rng, p_rng, NULL ) );
 80a6e7e:	9404      	str	r4, [sp, #16]
 80a6e80:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80a6e82:	9403      	str	r4, [sp, #12]
 80a6e84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a6e86:	9402      	str	r4, [sp, #8]
 80a6e88:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80a6e8a:	9401      	str	r4, [sp, #4]
 80a6e8c:	9c08      	ldr	r4, [sp, #32]
 80a6e8e:	9400      	str	r4, [sp, #0]
 80a6e90:	f7ff ff9c 	bl	80a6dcc <mbedtls_ecdsa_write_signature_restartable>
}
 80a6e94:	b006      	add	sp, #24
 80a6e96:	bd10      	pop	{r4, pc}

080a6e98 <mbedtls_ecdsa_read_signature_restartable>:
 */
int mbedtls_ecdsa_read_signature_restartable( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 80a6e98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a6e9c:	b08b      	sub	sp, #44	; 0x2c
    int ret;
    unsigned char *p = (unsigned char *) sig;
    const unsigned char *end = sig + slen;
 80a6e9e:	9d12      	ldr	r5, [sp, #72]	; 0x48
    mbedtls_mpi r, s;
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );

    mbedtls_mpi_init( &r );
 80a6ea0:	ae04      	add	r6, sp, #16
 */
int mbedtls_ecdsa_read_signature_restartable( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 80a6ea2:	4604      	mov	r4, r0
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );

    mbedtls_mpi_init( &r );
    mbedtls_mpi_init( &s );
 80a6ea4:	af07      	add	r7, sp, #28
    mbedtls_mpi r, s;
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );

    mbedtls_mpi_init( &r );
 80a6ea6:	4630      	mov	r0, r6
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
    int ret;
    unsigned char *p = (unsigned char *) sig;
    const unsigned char *end = sig + slen;
 80a6ea8:	441d      	add	r5, r3
 */
int mbedtls_ecdsa_read_signature_restartable( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 80a6eaa:	4688      	mov	r8, r1
 80a6eac:	4691      	mov	r9, r2
    int ret;
    unsigned char *p = (unsigned char *) sig;
 80a6eae:	9302      	str	r3, [sp, #8]
    mbedtls_mpi r, s;
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );

    mbedtls_mpi_init( &r );
 80a6eb0:	f005 f913 	bl	80ac0da <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
 80a6eb4:	4638      	mov	r0, r7
 80a6eb6:	f005 f910 	bl	80ac0da <mbedtls_mpi_init>

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a6eba:	2330      	movs	r3, #48	; 0x30
 80a6ebc:	aa03      	add	r2, sp, #12
 80a6ebe:	4629      	mov	r1, r5
 80a6ec0:	a802      	add	r0, sp, #8
 80a6ec2:	f7fa fbd3 	bl	80a166c <mbedtls_asn1_get_tag>
 80a6ec6:	b998      	cbnz	r0, 80a6ef0 <mbedtls_ecdsa_read_signature_restartable+0x58>
    {
        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
        goto cleanup;
    }

    if( p + len != end )
 80a6ec8:	9b03      	ldr	r3, [sp, #12]
 80a6eca:	9a02      	ldr	r2, [sp, #8]
 80a6ecc:	4413      	add	r3, r2
 80a6ece:	429d      	cmp	r5, r3
 80a6ed0:	d10c      	bne.n	80a6eec <mbedtls_ecdsa_read_signature_restartable+0x54>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
        goto cleanup;
    }

    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
 80a6ed2:	4632      	mov	r2, r6
 80a6ed4:	4629      	mov	r1, r5
 80a6ed6:	a802      	add	r0, sp, #8
 80a6ed8:	f7fa fc19 	bl	80a170e <mbedtls_asn1_get_mpi>
 80a6edc:	b940      	cbnz	r0, 80a6ef0 <mbedtls_ecdsa_read_signature_restartable+0x58>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
 80a6ede:	463a      	mov	r2, r7
 80a6ee0:	4629      	mov	r1, r5
 80a6ee2:	a802      	add	r0, sp, #8
 80a6ee4:	f7fa fc13 	bl	80a170e <mbedtls_asn1_get_mpi>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
        goto cleanup;
    }

    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
 80a6ee8:	b910      	cbnz	r0, 80a6ef0 <mbedtls_ecdsa_read_signature_restartable+0x58>
 80a6eea:	e004      	b.n	80a6ef6 <mbedtls_ecdsa_read_signature_restartable+0x5e>
    }

    if( p + len != end )
    {
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
 80a6eec:	4c0f      	ldr	r4, [pc, #60]	; (80a6f2c <mbedtls_ecdsa_read_signature_restartable+0x94>)
 80a6eee:	e012      	b.n	80a6f16 <mbedtls_ecdsa_read_signature_restartable+0x7e>
    }

    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
    {
        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 80a6ef0:	f5a0 449f 	sub.w	r4, r0, #20352	; 0x4f80
        goto cleanup;
 80a6ef4:	e00f      	b.n	80a6f16 <mbedtls_ecdsa_read_signature_restartable+0x7e>
#if defined(MBEDTLS_ECDSA_VERIFY_ALT)
    if( ( ret = mbedtls_ecdsa_verify( &ctx->grp, hash, hlen,
                                      &ctx->Q, &r, &s ) ) != 0 )
        goto cleanup;
#else
    if( ( ret = ecdsa_verify_restartable( &ctx->grp, hash, hlen,
 80a6ef6:	f104 0388 	add.w	r3, r4, #136	; 0x88
 80a6efa:	4620      	mov	r0, r4
 80a6efc:	e88d 00c0 	stmia.w	sp, {r6, r7}
 80a6f00:	464a      	mov	r2, r9
 80a6f02:	4641      	mov	r1, r8
 80a6f04:	f7ff fec8 	bl	80a6c98 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.1>
 80a6f08:	4604      	mov	r4, r0
 80a6f0a:	b920      	cbnz	r0, 80a6f16 <mbedtls_ecdsa_read_signature_restartable+0x7e>

    /* At this point we know that the buffer starts with a valid signature.
     * Return 0 if the buffer just contains the signature, and a specific
     * error code if the valid signature is followed by more data. */
    if( p != end )
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;
 80a6f0c:	4b08      	ldr	r3, [pc, #32]	; (80a6f30 <mbedtls_ecdsa_read_signature_restartable+0x98>)
 80a6f0e:	9a02      	ldr	r2, [sp, #8]
 80a6f10:	4295      	cmp	r5, r2
 80a6f12:	bf18      	it	ne
 80a6f14:	461c      	movne	r4, r3

cleanup:
    mbedtls_mpi_free( &r );
 80a6f16:	4630      	mov	r0, r6
 80a6f18:	f005 f8e5 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 80a6f1c:	4638      	mov	r0, r7
 80a6f1e:	f005 f8e2 	bl	80ac0e6 <mbedtls_mpi_free>

    return( ret );
}
 80a6f22:	4620      	mov	r0, r4
 80a6f24:	b00b      	add	sp, #44	; 0x2c
 80a6f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a6f2a:	bf00      	nop
 80a6f2c:	ffffb01a 	.word	0xffffb01a
 80a6f30:	ffffb400 	.word	0xffffb400

080a6f34 <mbedtls_ecdsa_read_signature>:
 * Read and check signature
 */
int mbedtls_ecdsa_read_signature( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen )
{
 80a6f34:	b513      	push	{r0, r1, r4, lr}
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    return( mbedtls_ecdsa_read_signature_restartable(
                ctx, hash, hlen, sig, slen, NULL ) );
 80a6f36:	2400      	movs	r4, #0
 80a6f38:	9401      	str	r4, [sp, #4]
 80a6f3a:	9c04      	ldr	r4, [sp, #16]
 80a6f3c:	9400      	str	r4, [sp, #0]
 80a6f3e:	f7ff ffab 	bl	80a6e98 <mbedtls_ecdsa_read_signature_restartable>
}
 80a6f42:	b002      	add	sp, #8
 80a6f44:	bd10      	pop	{r4, pc}

080a6f46 <mbedtls_ecdsa_init>:
 */
void mbedtls_ecdsa_init( mbedtls_ecdsa_context *ctx )
{
    ECDSA_VALIDATE( ctx != NULL );

    mbedtls_ecp_keypair_init( ctx );
 80a6f46:	f7fd b8aa 	b.w	80a409e <mbedtls_ecp_keypair_init>

080a6f4a <mbedtls_ecdsa_free>:
/*
 * Free context
 */
void mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx )
{
    if( ctx == NULL )
 80a6f4a:	b108      	cbz	r0, 80a6f50 <mbedtls_ecdsa_free+0x6>
        return;

    mbedtls_ecp_keypair_free( ctx );
 80a6f4c:	f7fd b8f5 	b.w	80a413a <mbedtls_ecp_keypair_free>
 80a6f50:	4770      	bx	lr

080a6f52 <mbedtls_ecdsa_from_keypair>:

/*
 * Set context from an mbedtls_ecp_keypair
 */
int mbedtls_ecdsa_from_keypair( mbedtls_ecdsa_context *ctx, const mbedtls_ecp_keypair *key )
{
 80a6f52:	b570      	push	{r4, r5, r6, lr}
 80a6f54:	4605      	mov	r5, r0
 80a6f56:	460e      	mov	r6, r1
    int ret;
    ECDSA_VALIDATE_RET( ctx != NULL );
    ECDSA_VALIDATE_RET( key != NULL );

    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
 80a6f58:	f7fd f915 	bl	80a4186 <mbedtls_ecp_group_copy>
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
 80a6f5c:	4604      	mov	r4, r0
 80a6f5e:	b978      	cbnz	r0, 80a6f80 <mbedtls_ecdsa_from_keypair+0x2e>
 80a6f60:	f106 017c 	add.w	r1, r6, #124	; 0x7c
 80a6f64:	f105 007c 	add.w	r0, r5, #124	; 0x7c
 80a6f68:	f005 f937 	bl	80ac1da <mbedtls_mpi_copy>
{
    int ret;
    ECDSA_VALIDATE_RET( ctx != NULL );
    ECDSA_VALIDATE_RET( key != NULL );

    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
 80a6f6c:	4604      	mov	r4, r0
 80a6f6e:	b938      	cbnz	r0, 80a6f80 <mbedtls_ecdsa_from_keypair+0x2e>
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
        ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 )
 80a6f70:	f106 0188 	add.w	r1, r6, #136	; 0x88
 80a6f74:	f105 0088 	add.w	r0, r5, #136	; 0x88
 80a6f78:	f7fd f8ef 	bl	80a415a <mbedtls_ecp_copy>
    int ret;
    ECDSA_VALIDATE_RET( ctx != NULL );
    ECDSA_VALIDATE_RET( key != NULL );

    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
 80a6f7c:	4604      	mov	r4, r0
 80a6f7e:	b110      	cbz	r0, 80a6f86 <mbedtls_ecdsa_from_keypair+0x34>
        ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 )
    {
        mbedtls_ecdsa_free( ctx );
 80a6f80:	4628      	mov	r0, r5
 80a6f82:	f7ff ffe2 	bl	80a6f4a <mbedtls_ecdsa_free>
    }

    return( ret );
}
 80a6f86:	4620      	mov	r0, r4
 80a6f88:	bd70      	pop	{r4, r5, r6, pc}
	...

080a6f8c <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context>:
 *  }
 */
static int pk_get_rsapubkey( unsigned char **p,
                             const unsigned char *end,
                             mbedtls_rsa_context *rsa )
{
 80a6f8c:	b570      	push	{r4, r5, r6, lr}
 80a6f8e:	b08a      	sub	sp, #40	; 0x28
 80a6f90:	4616      	mov	r6, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a6f92:	2330      	movs	r3, #48	; 0x30
 80a6f94:	aa09      	add	r2, sp, #36	; 0x24
 *  }
 */
static int pk_get_rsapubkey( unsigned char **p,
                             const unsigned char *end,
                             mbedtls_rsa_context *rsa )
{
 80a6f96:	4604      	mov	r4, r0
 80a6f98:	460d      	mov	r5, r1
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a6f9a:	f7fa fb67 	bl	80a166c <mbedtls_asn1_get_tag>
 80a6f9e:	bb30      	cbnz	r0, 80a6fee <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x62>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( *p + len != end )
 80a6fa0:	6822      	ldr	r2, [r4, #0]
 80a6fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a6fa4:	4413      	add	r3, r2
 80a6fa6:	429d      	cmp	r5, r3
 80a6fa8:	d001      	beq.n	80a6fae <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x22>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a6faa:	4824      	ldr	r0, [pc, #144]	; (80a703c <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xb0>)
 80a6fac:	e043      	b.n	80a7036 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xaa>

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80a6fae:	2302      	movs	r3, #2
 80a6fb0:	aa09      	add	r2, sp, #36	; 0x24
 80a6fb2:	4629      	mov	r1, r5
 80a6fb4:	4620      	mov	r0, r4
 80a6fb6:	f7fa fb59 	bl	80a166c <mbedtls_asn1_get_tag>
 80a6fba:	b9c0      	cbnz	r0, 80a6fee <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x62>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
 80a6fbc:	9006      	str	r0, [sp, #24]
 80a6fbe:	9005      	str	r0, [sp, #20]
 80a6fc0:	9004      	str	r0, [sp, #16]
 80a6fc2:	9003      	str	r0, [sp, #12]
 80a6fc4:	9002      	str	r0, [sp, #8]
 80a6fc6:	9001      	str	r0, [sp, #4]
 80a6fc8:	9000      	str	r0, [sp, #0]
 80a6fca:	4603      	mov	r3, r0
 80a6fcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a6fce:	6821      	ldr	r1, [r4, #0]
 80a6fd0:	4630      	mov	r0, r6
 80a6fd2:	f7fb fa7d 	bl	80a24d0 <mbedtls_rsa_import_raw>
 80a6fd6:	bb68      	cbnz	r0, 80a7034 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xa8>
                                        NULL, 0, NULL, 0 ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 80a6fd8:	6822      	ldr	r2, [r4, #0]
 80a6fda:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80a6fdc:	4629      	mov	r1, r5

    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 80a6fde:	4413      	add	r3, r2
 80a6fe0:	6023      	str	r3, [r4, #0]

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80a6fe2:	aa09      	add	r2, sp, #36	; 0x24
 80a6fe4:	2302      	movs	r3, #2
 80a6fe6:	4620      	mov	r0, r4
 80a6fe8:	f7fa fb40 	bl	80a166c <mbedtls_asn1_get_tag>
 80a6fec:	b110      	cbz	r0, 80a6ff4 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x68>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 80a6fee:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
 80a6ff2:	e020      	b.n	80a7036 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xaa>

    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
 80a6ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a6ff6:	9004      	str	r0, [sp, #16]
 80a6ff8:	9306      	str	r3, [sp, #24]
 80a6ffa:	6823      	ldr	r3, [r4, #0]
 80a6ffc:	9003      	str	r0, [sp, #12]
 80a6ffe:	9305      	str	r3, [sp, #20]
 80a7000:	9002      	str	r0, [sp, #8]
 80a7002:	9001      	str	r0, [sp, #4]
 80a7004:	9000      	str	r0, [sp, #0]
 80a7006:	4603      	mov	r3, r0
 80a7008:	4602      	mov	r2, r0
 80a700a:	4601      	mov	r1, r0
 80a700c:	4630      	mov	r0, r6
 80a700e:	f7fb fa5f 	bl	80a24d0 <mbedtls_rsa_import_raw>
 80a7012:	b978      	cbnz	r0, 80a7034 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xa8>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 80a7014:	6822      	ldr	r2, [r4, #0]
 80a7016:	9b09      	ldr	r3, [sp, #36]	; 0x24

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 80a7018:	4630      	mov	r0, r6

    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 80a701a:	4413      	add	r3, r2
 80a701c:	6023      	str	r3, [r4, #0]

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 80a701e:	f7fb fa95 	bl	80a254c <mbedtls_rsa_complete>
 80a7022:	b938      	cbnz	r0, 80a7034 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xa8>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
 80a7024:	4630      	mov	r0, r6
 80a7026:	f7fb fb4d 	bl	80a26c4 <mbedtls_rsa_check_pubkey>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 80a702a:	b918      	cbnz	r0, 80a7034 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xa8>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
    }

    if( *p != end )
 80a702c:	6823      	ldr	r3, [r4, #0]
 80a702e:	429d      	cmp	r5, r3
 80a7030:	d001      	beq.n	80a7036 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xaa>
 80a7032:	e7ba      	b.n	80a6faa <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x1e>
    *p += len;

    if( mbedtls_rsa_complete( rsa ) != 0 ||
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 80a7034:	4802      	ldr	r0, [pc, #8]	; (80a7040 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xb4>)
    if( *p != end )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 80a7036:	b00a      	add	sp, #40	; 0x28
 80a7038:	bd70      	pop	{r4, r5, r6, pc}
 80a703a:	bf00      	nop
 80a703c:	ffffc49a 	.word	0xffffc49a
 80a7040:	ffffc500 	.word	0xffffc500

080a7044 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group>:
 *   namedCurve         OBJECT IDENTIFIER
 *   specifiedCurve     SpecifiedECDomain -- = SEQUENCE { ... }
 *   -- implicitCurve   NULL
 */
static int pk_use_ecparams( const mbedtls_asn1_buf *params, mbedtls_ecp_group *grp )
{
 80a7044:	b513      	push	{r0, r1, r4, lr}
    int ret;
    mbedtls_ecp_group_id grp_id;

    if( params->tag == MBEDTLS_ASN1_OID )
 80a7046:	6803      	ldr	r3, [r0, #0]
 *   namedCurve         OBJECT IDENTIFIER
 *   specifiedCurve     SpecifiedECDomain -- = SEQUENCE { ... }
 *   -- implicitCurve   NULL
 */
static int pk_use_ecparams( const mbedtls_asn1_buf *params, mbedtls_ecp_group *grp )
{
 80a7048:	460c      	mov	r4, r1
    int ret;
    mbedtls_ecp_group_id grp_id;

    if( params->tag == MBEDTLS_ASN1_OID )
 80a704a:	2b06      	cmp	r3, #6
 80a704c:	d001      	beq.n	80a7052 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0xe>
    {
#if defined(MBEDTLS_PK_PARSE_EC_EXTENDED)
        if( ( ret = pk_group_id_from_specified( params, &grp_id ) ) != 0 )
            return( ret );
#else
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 80a704e:	480a      	ldr	r0, [pc, #40]	; (80a7078 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x34>)
 80a7050:	e00f      	b.n	80a7072 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x2e>
    int ret;
    mbedtls_ecp_group_id grp_id;

    if( params->tag == MBEDTLS_ASN1_OID )
    {
        if( mbedtls_oid_get_ec_grp( params, &grp_id ) != 0 )
 80a7052:	f10d 0107 	add.w	r1, sp, #7
 80a7056:	f7fe f899 	bl	80a518c <mbedtls_oid_get_ec_grp>
 80a705a:	b948      	cbnz	r0, 80a7070 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x2c>
    }

    /*
     * grp may already be initilialized; if so, make sure IDs match
     */
    if( grp->id != MBEDTLS_ECP_DP_NONE && grp->id != grp_id )
 80a705c:	7823      	ldrb	r3, [r4, #0]
 80a705e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a7062:	b10b      	cbz	r3, 80a7068 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x24>
 80a7064:	4299      	cmp	r1, r3
 80a7066:	d1f2      	bne.n	80a704e <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0xa>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );

    if( ( ret = mbedtls_ecp_group_load( grp, grp_id ) ) != 0 )
 80a7068:	4620      	mov	r0, r4
 80a706a:	f001 fc29 	bl	80a88c0 <mbedtls_ecp_group_load>
 80a706e:	e000      	b.n	80a7072 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x2e>
    mbedtls_ecp_group_id grp_id;

    if( params->tag == MBEDTLS_ASN1_OID )
    {
        if( mbedtls_oid_get_ec_grp( params, &grp_id ) != 0 )
            return( MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE );
 80a7070:	4802      	ldr	r0, [pc, #8]	; (80a707c <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x38>)

    if( ( ret = mbedtls_ecp_group_load( grp, grp_id ) ) != 0 )
        return( ret );

    return( 0 );
}
 80a7072:	b002      	add	sp, #8
 80a7074:	bd10      	pop	{r4, pc}
 80a7076:	bf00      	nop
 80a7078:	ffffc300 	.word	0xffffc300
 80a707c:	ffffc600 	.word	0xffffc600

080a7080 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>:
 * Parse a PKCS#1 encoded private RSA key
 */
static int pk_parse_key_pkcs1_der( mbedtls_rsa_context *rsa,
                                   const unsigned char *key,
                                   size_t keylen )
{
 80a7080:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a7082:	460c      	mov	r4, r1
 80a7084:	4615      	mov	r5, r2
 80a7086:	b08f      	sub	sp, #60	; 0x3c
 80a7088:	4607      	mov	r7, r0
    int ret, version;
    size_t len;
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );
 80a708a:	a80b      	add	r0, sp, #44	; 0x2c
 80a708c:	f005 f825 	bl	80ac0da <mbedtls_mpi_init>
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a7090:	2330      	movs	r3, #48	; 0x30
 80a7092:	aa09      	add	r2, sp, #36	; 0x24
 80a7094:	1961      	adds	r1, r4, r5
 80a7096:	a80a      	add	r0, sp, #40	; 0x28
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );

    p = (unsigned char *) key;
 80a7098:	940a      	str	r4, [sp, #40]	; 0x28
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a709a:	f7fa fae7 	bl	80a166c <mbedtls_asn1_get_tag>
 80a709e:	b940      	cbnz	r0, 80a70b2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x32>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 80a70a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a70a2:	9e0a      	ldr	r6, [sp, #40]	; 0x28

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 80a70a4:	aa08      	add	r2, sp, #32
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 80a70a6:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 80a70a8:	4631      	mov	r1, r6
 80a70aa:	a80a      	add	r0, sp, #40	; 0x28
 80a70ac:	f7fa fb0b 	bl	80a16c6 <mbedtls_asn1_get_int>
 80a70b0:	b110      	cbz	r0, 80a70b8 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x38>
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 80a70b2:	f5a0 5574 	sub.w	r5, r0, #15616	; 0x3d00
 80a70b6:	e0d4      	b.n	80a7262 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    }

    if( version != 0 )
 80a70b8:	9d08      	ldr	r5, [sp, #32]
 80a70ba:	b9dd      	cbnz	r5, 80a70f4 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x74>
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
    }

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a70bc:	2302      	movs	r3, #2
 80a70be:	aa09      	add	r2, sp, #36	; 0x24
 80a70c0:	4631      	mov	r1, r6
 80a70c2:	a80a      	add	r0, sp, #40	; 0x28
 80a70c4:	f7fa fad2 	bl	80a166c <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80a70c8:	4604      	mov	r4, r0
 80a70ca:	2800      	cmp	r0, #0
 80a70cc:	f040 80c5 	bne.w	80a725a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
 80a70d0:	9006      	str	r0, [sp, #24]
 80a70d2:	9005      	str	r0, [sp, #20]
 80a70d4:	9004      	str	r0, [sp, #16]
 80a70d6:	9003      	str	r0, [sp, #12]
 80a70d8:	9002      	str	r0, [sp, #8]
 80a70da:	9001      	str	r0, [sp, #4]
 80a70dc:	9000      	str	r0, [sp, #0]
 80a70de:	4603      	mov	r3, r0
 80a70e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a70e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a70e4:	4638      	mov	r0, r7
 80a70e6:	f7fb f9f3 	bl	80a24d0 <mbedtls_rsa_import_raw>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
    }

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80a70ea:	4604      	mov	r4, r0
 80a70ec:	2800      	cmp	r0, #0
 80a70ee:	f040 80b4 	bne.w	80a725a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 80a70f2:	e001      	b.n	80a70f8 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x78>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    if( version != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
 80a70f4:	4d5c      	ldr	r5, [pc, #368]	; (80a7268 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e8>)
 80a70f6:	e0b4      	b.n	80a7262 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80a70f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a70fa:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a70fc:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80a70fe:	4413      	add	r3, r2
 80a7100:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a7102:	aa09      	add	r2, sp, #36	; 0x24
 80a7104:	2302      	movs	r3, #2
 80a7106:	a80a      	add	r0, sp, #40	; 0x28
 80a7108:	f7fa fab0 	bl	80a166c <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80a710c:	4604      	mov	r4, r0
 80a710e:	2800      	cmp	r0, #0
 80a7110:	f040 80a3 	bne.w	80a725a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
 80a7114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a7116:	9404      	str	r4, [sp, #16]
 80a7118:	9306      	str	r3, [sp, #24]
 80a711a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a711c:	9403      	str	r4, [sp, #12]
 80a711e:	9305      	str	r3, [sp, #20]
 80a7120:	9402      	str	r4, [sp, #8]
 80a7122:	9401      	str	r4, [sp, #4]
 80a7124:	9400      	str	r4, [sp, #0]
 80a7126:	4623      	mov	r3, r4
 80a7128:	4622      	mov	r2, r4
 80a712a:	4621      	mov	r1, r4
 80a712c:	4638      	mov	r0, r7
 80a712e:	f7fb f9cf 	bl	80a24d0 <mbedtls_rsa_import_raw>
        goto cleanup;
    p += len;

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80a7132:	4604      	mov	r4, r0
 80a7134:	2800      	cmp	r0, #0
 80a7136:	f040 8090 	bne.w	80a725a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, p, len ) ) != 0 )
        goto cleanup;
    p += len;
 80a713a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a713c:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import D */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a713e:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, p, len ) ) != 0 )
        goto cleanup;
    p += len;
 80a7140:	4413      	add	r3, r2
 80a7142:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import D */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a7144:	aa09      	add	r2, sp, #36	; 0x24
 80a7146:	2302      	movs	r3, #2
 80a7148:	a80a      	add	r0, sp, #40	; 0x28
 80a714a:	f7fa fa8f 	bl	80a166c <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80a714e:	4604      	mov	r4, r0
 80a7150:	2800      	cmp	r0, #0
 80a7152:	f040 8082 	bne.w	80a725a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
 80a7156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a7158:	9406      	str	r4, [sp, #24]
 80a715a:	9304      	str	r3, [sp, #16]
 80a715c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a715e:	9405      	str	r4, [sp, #20]
 80a7160:	9303      	str	r3, [sp, #12]
 80a7162:	9402      	str	r4, [sp, #8]
 80a7164:	9401      	str	r4, [sp, #4]
 80a7166:	9400      	str	r4, [sp, #0]
 80a7168:	4623      	mov	r3, r4
 80a716a:	4622      	mov	r2, r4
 80a716c:	4621      	mov	r1, r4
 80a716e:	4638      	mov	r0, r7
 80a7170:	f7fb f9ae 	bl	80a24d0 <mbedtls_rsa_import_raw>
        goto cleanup;
    p += len;

    /* Import D */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80a7174:	4604      	mov	r4, r0
 80a7176:	2800      	cmp	r0, #0
 80a7178:	d16f      	bne.n	80a725a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        p, len, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80a717a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a717c:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import P */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a717e:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        p, len, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80a7180:	4413      	add	r3, r2
 80a7182:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import P */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a7184:	aa09      	add	r2, sp, #36	; 0x24
 80a7186:	2302      	movs	r3, #2
 80a7188:	a80a      	add	r0, sp, #40	; 0x28
 80a718a:	f7fa fa6f 	bl	80a166c <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80a718e:	4604      	mov	r4, r0
 80a7190:	2800      	cmp	r0, #0
 80a7192:	d162      	bne.n	80a725a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
 80a7194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a7196:	2200      	movs	r2, #0
 80a7198:	9300      	str	r3, [sp, #0]
 80a719a:	9206      	str	r2, [sp, #24]
 80a719c:	9205      	str	r2, [sp, #20]
 80a719e:	9204      	str	r2, [sp, #16]
 80a71a0:	9203      	str	r2, [sp, #12]
 80a71a2:	9202      	str	r2, [sp, #8]
 80a71a4:	9201      	str	r2, [sp, #4]
 80a71a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a71a8:	4611      	mov	r1, r2
 80a71aa:	4638      	mov	r0, r7
 80a71ac:	f7fb f990 	bl	80a24d0 <mbedtls_rsa_import_raw>
        goto cleanup;
    p += len;

    /* Import P */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80a71b0:	4604      	mov	r4, r0
 80a71b2:	2800      	cmp	r0, #0
 80a71b4:	d151      	bne.n	80a725a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80a71b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a71b8:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import Q */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a71ba:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80a71bc:	4413      	add	r3, r2
 80a71be:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import Q */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a71c0:	aa09      	add	r2, sp, #36	; 0x24
 80a71c2:	2302      	movs	r3, #2
 80a71c4:	a80a      	add	r0, sp, #40	; 0x28
 80a71c6:	f7fa fa51 	bl	80a166c <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80a71ca:	4604      	mov	r4, r0
 80a71cc:	2800      	cmp	r0, #0
 80a71ce:	d144      	bne.n	80a725a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
 80a71d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a71d2:	9406      	str	r4, [sp, #24]
 80a71d4:	9302      	str	r3, [sp, #8]
 80a71d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a71d8:	9405      	str	r4, [sp, #20]
 80a71da:	9404      	str	r4, [sp, #16]
 80a71dc:	9403      	str	r4, [sp, #12]
 80a71de:	9301      	str	r3, [sp, #4]
 80a71e0:	9400      	str	r4, [sp, #0]
 80a71e2:	4623      	mov	r3, r4
 80a71e4:	4622      	mov	r2, r4
 80a71e6:	4621      	mov	r1, r4
 80a71e8:	4638      	mov	r0, r7
 80a71ea:	f7fb f971 	bl	80a24d0 <mbedtls_rsa_import_raw>
        goto cleanup;
    p += len;

    /* Import Q */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80a71ee:	4604      	mov	r4, r0
 80a71f0:	2800      	cmp	r0, #0
 80a71f2:	d132      	bne.n	80a725a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80a71f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a71f6:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
 80a71f8:	4638      	mov	r0, r7
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80a71fa:	4413      	add	r3, r2
 80a71fc:	930a      	str	r3, [sp, #40]	; 0x28

    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
 80a71fe:	f7fb f9a5 	bl	80a254c <mbedtls_rsa_complete>
 80a7202:	4604      	mov	r4, r0
 80a7204:	b9c8      	cbnz	r0, 80a723a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1ba>
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 80a7206:	aa0b      	add	r2, sp, #44	; 0x2c
 80a7208:	4631      	mov	r1, r6
 80a720a:	a80a      	add	r0, sp, #40	; 0x28
 80a720c:	f7fa fa7f 	bl	80a170e <mbedtls_asn1_get_mpi>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 80a7210:	4604      	mov	r4, r0
 80a7212:	bb10      	cbnz	r0, 80a725a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 80a7214:	aa0b      	add	r2, sp, #44	; 0x2c
 80a7216:	4631      	mov	r1, r6
 80a7218:	a80a      	add	r0, sp, #40	; 0x28
 80a721a:	f7fa fa78 	bl	80a170e <mbedtls_asn1_get_mpi>
    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 80a721e:	4604      	mov	r4, r0
 80a7220:	b9d8      	cbnz	r0, 80a725a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 )
 80a7222:	aa0b      	add	r2, sp, #44	; 0x2c
 80a7224:	4631      	mov	r1, r6
 80a7226:	a80a      	add	r0, sp, #40	; 0x28
 80a7228:	f7fa fa71 	bl	80a170e <mbedtls_asn1_get_mpi>
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 80a722c:	4604      	mov	r4, r0
 80a722e:	b9a0      	cbnz	r0, 80a725a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        goto cleanup;

    if( p != end )
    {
        ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH ;
 80a7230:	4b0e      	ldr	r3, [pc, #56]	; (80a726c <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1ec>)
 80a7232:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a7234:	4296      	cmp	r6, r2
 80a7236:	bf18      	it	ne
 80a7238:	461c      	movne	r4, r3
    }

cleanup:

    mbedtls_mpi_free( &T );
 80a723a:	a80b      	add	r0, sp, #44	; 0x2c
 80a723c:	f004 ff53 	bl	80ac0e6 <mbedtls_mpi_free>

    if( ret != 0 )
 80a7240:	b17c      	cbz	r4, 80a7262 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    {
        /* Wrap error code if it's coming from a lower level */
        if( ( ret & 0xff80 ) == 0 )
 80a7242:	f64f 7380 	movw	r3, #65408	; 0xff80
 80a7246:	4023      	ands	r3, r4
 80a7248:	b913      	cbnz	r3, 80a7250 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1d0>
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret;
 80a724a:	f5a4 5574 	sub.w	r5, r4, #15616	; 0x3d00
 80a724e:	e000      	b.n	80a7252 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1d2>
        else
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT;
 80a7250:	4d07      	ldr	r5, [pc, #28]	; (80a7270 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1f0>)

        mbedtls_rsa_free( rsa );
 80a7252:	4638      	mov	r0, r7
 80a7254:	f7fc fa54 	bl	80a3700 <mbedtls_rsa_free>
 80a7258:	e003      	b.n	80a7262 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH ;
    }

cleanup:

    mbedtls_mpi_free( &T );
 80a725a:	a80b      	add	r0, sp, #44	; 0x2c
 80a725c:	f004 ff43 	bl	80ac0e6 <mbedtls_mpi_free>
 80a7260:	e7ef      	b.n	80a7242 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1c2>

        mbedtls_rsa_free( rsa );
    }

    return( ret );
}
 80a7262:	4628      	mov	r0, r5
 80a7264:	b00f      	add	sp, #60	; 0x3c
 80a7266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a7268:	ffffc280 	.word	0xffffc280
 80a726c:	ffffc29a 	.word	0xffffc29a
 80a7270:	ffffc300 	.word	0xffffc300

080a7274 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>:
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
 80a7274:	b530      	push	{r4, r5, lr}
 80a7276:	4615      	mov	r5, r2
 80a7278:	b085      	sub	sp, #20
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 80a727a:	2200      	movs	r2, #0
 80a727c:	601a      	str	r2, [r3, #0]
 80a727e:	605a      	str	r2, [r3, #4]
 80a7280:	609a      	str	r2, [r3, #8]

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 80a7282:	aa01      	add	r2, sp, #4
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
 80a7284:	461c      	mov	r4, r3
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 80a7286:	f7fa face 	bl	80a1826 <mbedtls_asn1_get_alg>
 80a728a:	b110      	cbz	r0, 80a7292 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x1e>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
 80a728c:	f5a0 506a 	sub.w	r0, r0, #14976	; 0x3a80
 80a7290:	e014      	b.n	80a72bc <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
 80a7292:	4629      	mov	r1, r5
 80a7294:	a801      	add	r0, sp, #4
 80a7296:	f7fd ff5f 	bl	80a5158 <mbedtls_oid_get_pk_alg>
 80a729a:	b960      	cbnz	r0, 80a72b6 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x42>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
 80a729c:	782b      	ldrb	r3, [r5, #0]
 80a729e:	2b01      	cmp	r3, #1
 80a72a0:	d10c      	bne.n	80a72bc <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 80a72a2:	6823      	ldr	r3, [r4, #0]
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
 80a72a4:	2b05      	cmp	r3, #5
 80a72a6:	d000      	beq.n	80a72aa <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x36>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 80a72a8:	b93b      	cbnz	r3, 80a72ba <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x46>
 80a72aa:	6863      	ldr	r3, [r4, #4]
                params->len != 0 ) )
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 80a72ac:	4804      	ldr	r0, [pc, #16]	; (80a72c0 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
 80a72ae:	2b00      	cmp	r3, #0
 80a72b0:	bf08      	it	eq
 80a72b2:	2000      	moveq	r0, #0
 80a72b4:	e002      	b.n	80a72bc <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 80a72b6:	4803      	ldr	r0, [pc, #12]	; (80a72c4 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x50>)
 80a72b8:	e000      	b.n	80a72bc <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
                params->len != 0 ) )
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 80a72ba:	4801      	ldr	r0, [pc, #4]	; (80a72c0 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
    }

    return( 0 );
}
 80a72bc:	b005      	add	sp, #20
 80a72be:	bd30      	pop	{r4, r5, pc}
 80a72c0:	ffffc580 	.word	0xffffc580
 80a72c4:	ffffc380 	.word	0xffffc380

080a72c8 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj>:
 * Parse a SEC1 encoded private EC key
 */
static int pk_parse_key_sec1_der( mbedtls_ecp_keypair *eck,
                                  const unsigned char *key,
                                  size_t keylen )
{
 80a72c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a72ca:	b089      	sub	sp, #36	; 0x24
 80a72cc:	4605      	mov	r5, r0
    int ret;
    int version, pubkey_done;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
 80a72ce:	9104      	str	r1, [sp, #16]
     *      privateKey     OCTET STRING,
     *      parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,
     *      publicKey  [1] BIT STRING OPTIONAL
     *    }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a72d0:	2330      	movs	r3, #48	; 0x30
 80a72d2:	4411      	add	r1, r2
 80a72d4:	a804      	add	r0, sp, #16
 80a72d6:	aa03      	add	r2, sp, #12
 80a72d8:	f7fa f9c8 	bl	80a166c <mbedtls_asn1_get_tag>
 80a72dc:	2800      	cmp	r0, #0
 80a72de:	d168      	bne.n	80a73b2 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xea>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 80a72e0:	9b03      	ldr	r3, [sp, #12]
 80a72e2:	9f04      	ldr	r7, [sp, #16]

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 80a72e4:	aa02      	add	r2, sp, #8
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 80a72e6:	441f      	add	r7, r3

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 80a72e8:	4639      	mov	r1, r7
 80a72ea:	a804      	add	r0, sp, #16
 80a72ec:	f7fa f9eb 	bl	80a16c6 <mbedtls_asn1_get_int>
 80a72f0:	2800      	cmp	r0, #0
 80a72f2:	d15e      	bne.n	80a73b2 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xea>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 1 )
 80a72f4:	9b02      	ldr	r3, [sp, #8]
 80a72f6:	2b01      	cmp	r3, #1
 80a72f8:	f040 8094 	bne.w	80a7424 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x15c>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 80a72fc:	2304      	movs	r3, #4
 80a72fe:	aa03      	add	r2, sp, #12
 80a7300:	4639      	mov	r1, r7
 80a7302:	a804      	add	r0, sp, #16
 80a7304:	f7fa f9b2 	bl	80a166c <mbedtls_asn1_get_tag>
 80a7308:	2800      	cmp	r0, #0
 80a730a:	d152      	bne.n	80a73b2 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xea>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_mpi_read_binary( &eck->d, p, len ) ) != 0 )
 80a730c:	f105 067c 	add.w	r6, r5, #124	; 0x7c
 80a7310:	9a03      	ldr	r2, [sp, #12]
 80a7312:	9904      	ldr	r1, [sp, #16]
 80a7314:	4630      	mov	r0, r6
 80a7316:	f005 f82d 	bl	80ac374 <mbedtls_mpi_read_binary>
 80a731a:	4604      	mov	r4, r0
 80a731c:	2800      	cmp	r0, #0
 80a731e:	d166      	bne.n	80a73ee <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x126>
    {
        mbedtls_ecp_keypair_free( eck );
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    p += len;
 80a7320:	9a04      	ldr	r2, [sp, #16]
 80a7322:	9b03      	ldr	r3, [sp, #12]
 80a7324:	4413      	add	r3, r2

    pubkey_done = 0;
    if( p != end )
 80a7326:	429f      	cmp	r7, r3
    {
        mbedtls_ecp_keypair_free( eck );
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    p += len;
 80a7328:	9304      	str	r3, [sp, #16]

    pubkey_done = 0;
    if( p != end )
 80a732a:	d02e      	beq.n	80a738a <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xc2>
    {
        /*
         * Is 'parameters' present?
         */
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a732c:	23a0      	movs	r3, #160	; 0xa0
 80a732e:	aa03      	add	r2, sp, #12
 80a7330:	4639      	mov	r1, r7
 80a7332:	a804      	add	r0, sp, #16
 80a7334:	f7fa f99a 	bl	80a166c <mbedtls_asn1_get_tag>
 80a7338:	4604      	mov	r4, r0
 80a733a:	bb18      	cbnz	r0, 80a7384 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xbc>
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )
        {
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
 80a733c:	9a03      	ldr	r2, [sp, #12]
 80a733e:	9b04      	ldr	r3, [sp, #16]
static int pk_get_ecparams( unsigned char **p, const unsigned char *end,
                            mbedtls_asn1_buf *params )
{
    int ret;

    if ( end - *p < 1 )
 80a7340:	2a00      	cmp	r2, #0
         * Is 'parameters' present?
         */
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )
        {
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
 80a7342:	eb03 0402 	add.w	r4, r3, r2
static int pk_get_ecparams( unsigned char **p, const unsigned char *end,
                            mbedtls_asn1_buf *params )
{
    int ret;

    if ( end - *p < 1 )
 80a7346:	dd71      	ble.n	80a742c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x164>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    /* Tag may be either OID or SEQUENCE */
    params->tag = **p;
 80a7348:	781b      	ldrb	r3, [r3, #0]
    if( params->tag != MBEDTLS_ASN1_OID
 80a734a:	2b06      	cmp	r3, #6
    if ( end - *p < 1 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    /* Tag may be either OID or SEQUENCE */
    params->tag = **p;
 80a734c:	9305      	str	r3, [sp, #20]
    if( params->tag != MBEDTLS_ASN1_OID
 80a734e:	d16f      	bne.n	80a7430 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x168>
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    }

    if( ( ret = mbedtls_asn1_get_tag( p, end, &params->len, params->tag ) ) != 0 )
 80a7350:	aa06      	add	r2, sp, #24
 80a7352:	4621      	mov	r1, r4
 80a7354:	a804      	add	r0, sp, #16
 80a7356:	f7fa f989 	bl	80a166c <mbedtls_asn1_get_tag>
 80a735a:	b150      	cbz	r0, 80a7372 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xaa>
         * Is 'parameters' present?
         */
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )
        {
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
 80a735c:	f5b0 5474 	subs.w	r4, r0, #15616	; 0x3d00
 80a7360:	d167      	bne.n	80a7432 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x16a>
                ( ret = pk_use_ecparams( &params, &eck->grp )  ) != 0 )
 80a7362:	4629      	mov	r1, r5
 80a7364:	a805      	add	r0, sp, #20
 80a7366:	f7ff fe6d 	bl	80a7044 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group>
         * Is 'parameters' present?
         */
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )
        {
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
 80a736a:	4604      	mov	r4, r0
 80a736c:	2800      	cmp	r0, #0
 80a736e:	d160      	bne.n	80a7432 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x16a>
 80a7370:	e00b      	b.n	80a738a <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xc2>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &params->len, params->tag ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    params->p = *p;
 80a7372:	9a04      	ldr	r2, [sp, #16]
    *p += params->len;
 80a7374:	9b06      	ldr	r3, [sp, #24]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &params->len, params->tag ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    params->p = *p;
 80a7376:	9207      	str	r2, [sp, #28]
    *p += params->len;
 80a7378:	4413      	add	r3, r2

    if( *p != end )
 80a737a:	429c      	cmp	r4, r3
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    params->p = *p;
    *p += params->len;
 80a737c:	9304      	str	r3, [sp, #16]

    if( *p != end )
 80a737e:	d0f0      	beq.n	80a7362 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x9a>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a7380:	4c2f      	ldr	r4, [pc, #188]	; (80a7440 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x178>)
 80a7382:	e056      	b.n	80a7432 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x16a>
            {
                mbedtls_ecp_keypair_free( eck );
                return( ret );
            }
        }
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80a7384:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80a7388:	d131      	bne.n	80a73ee <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x126>
            mbedtls_ecp_keypair_free( eck );
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
        }
    }

    if( p != end )
 80a738a:	9b04      	ldr	r3, [sp, #16]
 80a738c:	429f      	cmp	r7, r3
 80a738e:	d034      	beq.n	80a73fa <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x132>
    {
        /*
         * Is 'publickey' present? If not, or if we can't read it (eg because it
         * is compressed), create it from the private key.
         */
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a7390:	23a1      	movs	r3, #161	; 0xa1
 80a7392:	aa03      	add	r2, sp, #12
 80a7394:	4639      	mov	r1, r7
 80a7396:	a804      	add	r0, sp, #16
 80a7398:	f7fa f968 	bl	80a166c <mbedtls_asn1_get_tag>
 80a739c:	4604      	mov	r4, r0
 80a739e:	bb18      	cbnz	r0, 80a73e8 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x120>
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 1 ) ) == 0 )
        {
            end2 = p + len;
 80a73a0:	9b03      	ldr	r3, [sp, #12]
 80a73a2:	9c04      	ldr	r4, [sp, #16]

            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
 80a73a4:	aa03      	add	r2, sp, #12
         * is compressed), create it from the private key.
         */
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 1 ) ) == 0 )
        {
            end2 = p + len;
 80a73a6:	441c      	add	r4, r3

            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
 80a73a8:	4621      	mov	r1, r4
 80a73aa:	a804      	add	r0, sp, #16
 80a73ac:	f7fa f9e7 	bl	80a177e <mbedtls_asn1_get_bitstring_null>
 80a73b0:	b110      	cbz	r0, 80a73b8 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xf0>
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 80a73b2:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
 80a73b6:	e03f      	b.n	80a7438 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x170>

            if( p + len != end2 )
 80a73b8:	9a04      	ldr	r2, [sp, #16]
 80a73ba:	9b03      	ldr	r3, [sp, #12]
 80a73bc:	4413      	add	r3, r2
 80a73be:	429c      	cmp	r4, r3
 80a73c0:	d132      	bne.n	80a7428 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x160>
static int pk_get_ecpubkey( unsigned char **p, const unsigned char *end,
                            mbedtls_ecp_keypair *key )
{
    int ret;

    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
 80a73c2:	f105 0788 	add.w	r7, r5, #136	; 0x88
 80a73c6:	1aa3      	subs	r3, r4, r2
 80a73c8:	4639      	mov	r1, r7
 80a73ca:	4628      	mov	r0, r5
 80a73cc:	f7fd fa9a 	bl	80a4904 <mbedtls_ecp_point_read_binary>
 80a73d0:	b918      	cbnz	r0, 80a73da <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x112>
                    (const unsigned char *) *p, end - *p ) ) == 0 )
    {
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
 80a73d2:	4639      	mov	r1, r7
 80a73d4:	4628      	mov	r0, r5
 80a73d6:	f7fd fb1d 	bl	80a4a14 <mbedtls_ecp_check_pubkey>
    }

    /*
     * We know mbedtls_ecp_point_read_binary consumed all bytes or failed
     */
    *p = (unsigned char *) end;
 80a73da:	9404      	str	r4, [sp, #16]

            if( p + len != end2 )
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                        MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

            if( ( ret = pk_get_ecpubkey( &p, end2, eck ) ) == 0 )
 80a73dc:	b1d8      	cbz	r0, 80a7416 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x14e>
            {
                /*
                 * The only acceptable failure mode of pk_get_ecpubkey() above
                 * is if the point format is not recognized.
                 */
                if( ret != MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE )
 80a73de:	f510 4f9d 	cmn.w	r0, #20096	; 0x4e80
 80a73e2:	d00a      	beq.n	80a73fa <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x132>
                    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 80a73e4:	4c17      	ldr	r4, [pc, #92]	; (80a7444 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x17c>)
 80a73e6:	e027      	b.n	80a7438 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x170>
            }
        }
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80a73e8:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80a73ec:	d005      	beq.n	80a73fa <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x132>

    if( ! pubkey_done &&
        ( ret = mbedtls_ecp_mul( &eck->grp, &eck->Q, &eck->d, &eck->grp.G,
                                                      NULL, NULL ) ) != 0 )
    {
        mbedtls_ecp_keypair_free( eck );
 80a73ee:	4628      	mov	r0, r5
 80a73f0:	f7fc fea3 	bl	80a413a <mbedtls_ecp_keypair_free>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 80a73f4:	f5a4 5474 	sub.w	r4, r4, #15616	; 0x3d00
 80a73f8:	e01e      	b.n	80a7438 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x170>
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
        }
    }

    if( ! pubkey_done &&
        ( ret = mbedtls_ecp_mul( &eck->grp, &eck->Q, &eck->d, &eck->grp.G,
 80a73fa:	2300      	movs	r3, #0
 80a73fc:	9301      	str	r3, [sp, #4]
 80a73fe:	9300      	str	r3, [sp, #0]
 80a7400:	4632      	mov	r2, r6
 80a7402:	f105 0328 	add.w	r3, r5, #40	; 0x28
 80a7406:	f105 0188 	add.w	r1, r5, #136	; 0x88
 80a740a:	4628      	mov	r0, r5
 80a740c:	f7fd fd04 	bl	80a4e18 <mbedtls_ecp_mul>
            mbedtls_ecp_keypair_free( eck );
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
        }
    }

    if( ! pubkey_done &&
 80a7410:	4604      	mov	r4, r0
 80a7412:	2800      	cmp	r0, #0
 80a7414:	d1eb      	bne.n	80a73ee <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x126>
    {
        mbedtls_ecp_keypair_free( eck );
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    if( ( ret = mbedtls_ecp_check_privkey( &eck->grp, &eck->d ) ) != 0 )
 80a7416:	4631      	mov	r1, r6
 80a7418:	4628      	mov	r0, r5
 80a741a:	f7fd fbb7 	bl	80a4b8c <mbedtls_ecp_check_privkey>
 80a741e:	4604      	mov	r4, r0
 80a7420:	b150      	cbz	r0, 80a7438 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x170>
 80a7422:	e006      	b.n	80a7432 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x16a>

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 1 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
 80a7424:	4c08      	ldr	r4, [pc, #32]	; (80a7448 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x180>)
 80a7426:	e007      	b.n	80a7438 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x170>
            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

            if( p + len != end2 )
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                        MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a7428:	4c05      	ldr	r4, [pc, #20]	; (80a7440 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x178>)
 80a742a:	e005      	b.n	80a7438 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x170>
{
    int ret;

    if ( end - *p < 1 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a742c:	4c07      	ldr	r4, [pc, #28]	; (80a744c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x184>)
 80a742e:	e000      	b.n	80a7432 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x16a>
            && params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE )
#endif
            )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80a7430:	4c07      	ldr	r4, [pc, #28]	; (80a7450 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x188>)
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )
        {
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
                ( ret = pk_use_ecparams( &params, &eck->grp )  ) != 0 )
            {
                mbedtls_ecp_keypair_free( eck );
 80a7432:	4628      	mov	r0, r5
 80a7434:	f7fc fe81 	bl	80a413a <mbedtls_ecp_keypair_free>
        mbedtls_ecp_keypair_free( eck );
        return( ret );
    }

    return( 0 );
}
 80a7438:	4620      	mov	r0, r4
 80a743a:	b009      	add	sp, #36	; 0x24
 80a743c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a743e:	bf00      	nop
 80a7440:	ffffc29a 	.word	0xffffc29a
 80a7444:	ffffc300 	.word	0xffffc300
 80a7448:	ffffc280 	.word	0xffffc280
 80a744c:	ffffc2a0 	.word	0xffffc2a0
 80a7450:	ffffc29e 	.word	0xffffc29e

080a7454 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>:
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
 80a7454:	b570      	push	{r4, r5, r6, lr}
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 80a7456:	2300      	movs	r3, #0
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
 80a7458:	b088      	sub	sp, #32
 80a745a:	4605      	mov	r5, r0
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
 80a745c:	9104      	str	r1, [sp, #16]
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 80a745e:	f88d 3007 	strb.w	r3, [sp, #7]
     *    PrivateKey ::= OCTET STRING
     *
     *  The PrivateKey OCTET STRING is a SEC1 ECPrivateKey
     */

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a7462:	4411      	add	r1, r2
 80a7464:	2330      	movs	r3, #48	; 0x30
 80a7466:	aa03      	add	r2, sp, #12
 80a7468:	a804      	add	r0, sp, #16
 80a746a:	f7fa f8ff 	bl	80a166c <mbedtls_asn1_get_tag>
 80a746e:	b9d0      	cbnz	r0, 80a74a6 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x52>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 80a7470:	9b03      	ldr	r3, [sp, #12]
 80a7472:	9e04      	ldr	r6, [sp, #16]

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 80a7474:	aa02      	add	r2, sp, #8
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 80a7476:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 80a7478:	4631      	mov	r1, r6
 80a747a:	a804      	add	r0, sp, #16
 80a747c:	f7fa f923 	bl	80a16c6 <mbedtls_asn1_get_int>
 80a7480:	b988      	cbnz	r0, 80a74a6 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x52>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 0 )
 80a7482:	9c02      	ldr	r4, [sp, #8]
 80a7484:	2c00      	cmp	r4, #0
 80a7486:	d13f      	bne.n	80a7508 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xb4>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );

    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
 80a7488:	ab05      	add	r3, sp, #20
 80a748a:	f10d 0207 	add.w	r2, sp, #7
 80a748e:	4631      	mov	r1, r6
 80a7490:	a804      	add	r0, sp, #16
 80a7492:	f7ff feef 	bl	80a7274 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
 80a7496:	b930      	cbnz	r0, 80a74a6 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x52>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 80a7498:	2304      	movs	r3, #4
 80a749a:	aa03      	add	r2, sp, #12
 80a749c:	4631      	mov	r1, r6
 80a749e:	a804      	add	r0, sp, #16
 80a74a0:	f7fa f8e4 	bl	80a166c <mbedtls_asn1_get_tag>
 80a74a4:	b110      	cbz	r0, 80a74ac <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x58>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 80a74a6:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
 80a74aa:	e039      	b.n	80a7520 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>

    if( len < 1 )
 80a74ac:	9b03      	ldr	r3, [sp, #12]
 80a74ae:	b36b      	cbz	r3, 80a750c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xb8>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 80a74b0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a74b4:	f002 fd72 	bl	80a9f9c <mbedtls_pk_info_from_type>
 80a74b8:	4601      	mov	r1, r0
 80a74ba:	b908      	cbnz	r0, 80a74c0 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x6c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 80a74bc:	4c1a      	ldr	r4, [pc, #104]	; (80a7528 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xd4>)
 80a74be:	e02f      	b.n	80a7520 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 80a74c0:	4628      	mov	r0, r5
 80a74c2:	f002 fd77 	bl	80a9fb4 <mbedtls_pk_setup>
 80a74c6:	bb18      	cbnz	r0, 80a7510 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xbc>
        return( ret );

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA )
 80a74c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a74cc:	2b01      	cmp	r3, #1
 80a74ce:	d10a      	bne.n	80a74e6 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x92>
    {
        if( ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), p, len ) ) != 0 )
 80a74d0:	9a03      	ldr	r2, [sp, #12]
 80a74d2:	9904      	ldr	r1, [sp, #16]
 80a74d4:	6868      	ldr	r0, [r5, #4]
 80a74d6:	f7ff fdd3 	bl	80a7080 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
 80a74da:	4604      	mov	r4, r0
 80a74dc:	b1d0      	cbz	r0, 80a7514 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xc0>
        {
            mbedtls_pk_free( pk );
 80a74de:	4628      	mov	r0, r5
 80a74e0:	f002 fd4c 	bl	80a9f7c <mbedtls_pk_free>
            return( ret );
 80a74e4:	e01c      	b.n	80a7520 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>
        }
    } else
#endif /* MBEDTLS_RSA_C */
#if defined(MBEDTLS_ECP_C)
    if( pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH )
 80a74e6:	3b02      	subs	r3, #2
 80a74e8:	2b01      	cmp	r3, #1
 80a74ea:	d8e7      	bhi.n	80a74bc <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x68>
    {
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
 80a74ec:	6869      	ldr	r1, [r5, #4]
 80a74ee:	a805      	add	r0, sp, #20
 80a74f0:	f7ff fda8 	bl	80a7044 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group>
 80a74f4:	4606      	mov	r6, r0
 80a74f6:	b978      	cbnz	r0, 80a7518 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xc4>
            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ), p, len )  ) != 0 )
 80a74f8:	9a03      	ldr	r2, [sp, #12]
 80a74fa:	9904      	ldr	r1, [sp, #16]
 80a74fc:	6868      	ldr	r0, [r5, #4]
 80a74fe:	f7ff fee3 	bl	80a72c8 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj>
    } else
#endif /* MBEDTLS_RSA_C */
#if defined(MBEDTLS_ECP_C)
    if( pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH )
    {
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
 80a7502:	4606      	mov	r6, r0
 80a7504:	b940      	cbnz	r0, 80a7518 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xc4>
 80a7506:	e00b      	b.n	80a7520 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );
 80a7508:	4c08      	ldr	r4, [pc, #32]	; (80a752c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xd8>)
 80a750a:	e009      	b.n	80a7520 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( len < 1 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a750c:	4c08      	ldr	r4, [pc, #32]	; (80a7530 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xdc>)
 80a750e:	e007      	b.n	80a7520 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>
 80a7510:	4604      	mov	r4, r0
 80a7512:	e005      	b.n	80a7520 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>
        }
    } else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    return( 0 );
 80a7514:	2400      	movs	r4, #0
 80a7516:	e003      	b.n	80a7520 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xcc>
    if( pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH )
    {
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ), p, len )  ) != 0 )
        {
            mbedtls_pk_free( pk );
 80a7518:	4628      	mov	r0, r5
 80a751a:	f002 fd2f 	bl	80a9f7c <mbedtls_pk_free>
            return( ret );
 80a751e:	4634      	mov	r4, r6
    } else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    return( 0 );
}
 80a7520:	4620      	mov	r0, r4
 80a7522:	b008      	add	sp, #32
 80a7524:	bd70      	pop	{r4, r5, r6, pc}
 80a7526:	bf00      	nop
 80a7528:	ffffc380 	.word	0xffffc380
 80a752c:	ffffc280 	.word	0xffffc280
 80a7530:	ffffc2a0 	.word	0xffffc2a0

080a7534 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>:
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
static int pk_parse_key_pkcs8_encrypted_der(
                                    mbedtls_pk_context *pk,
                                    unsigned char *key, size_t keylen,
                                    const unsigned char *pwd, size_t pwdlen )
{
 80a7534:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a7536:	b091      	sub	sp, #68	; 0x44
 80a7538:	9d16      	ldr	r5, [sp, #88]	; 0x58
#if defined(MBEDTLS_PKCS12_C)
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_md_type_t md_alg;
#endif

    p = key;
 80a753a:	9109      	str	r1, [sp, #36]	; 0x24
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
static int pk_parse_key_pkcs8_encrypted_der(
                                    mbedtls_pk_context *pk,
                                    unsigned char *key, size_t keylen,
                                    const unsigned char *pwd, size_t pwdlen )
{
 80a753c:	4606      	mov	r6, r0
 80a753e:	461f      	mov	r7, r3
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_md_type_t md_alg;
#endif

    p = key;
    end = p + keylen;
 80a7540:	4411      	add	r1, r2

    if( pwdlen == 0 )
 80a7542:	2d00      	cmp	r5, #0
 80a7544:	d066      	beq.n	80a7614 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe0>
     *  EncryptedData ::= OCTET STRING
     *
     *  The EncryptedData OCTET STRING is a PKCS#8 PrivateKeyInfo
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a7546:	2330      	movs	r3, #48	; 0x30
 80a7548:	aa08      	add	r2, sp, #32
 80a754a:	a809      	add	r0, sp, #36	; 0x24
 80a754c:	f7fa f88e 	bl	80a166c <mbedtls_asn1_get_tag>
 80a7550:	b980      	cbnz	r0, 80a7574 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x40>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 80a7552:	9b08      	ldr	r3, [sp, #32]
 80a7554:	9c09      	ldr	r4, [sp, #36]	; 0x24

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
 80a7556:	aa0a      	add	r2, sp, #40	; 0x28
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 80a7558:	441c      	add	r4, r3

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
 80a755a:	4621      	mov	r1, r4
 80a755c:	ab0d      	add	r3, sp, #52	; 0x34
 80a755e:	a809      	add	r0, sp, #36	; 0x24
 80a7560:	f7fa f961 	bl	80a1826 <mbedtls_asn1_get_alg>
 80a7564:	b930      	cbnz	r0, 80a7574 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x40>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 80a7566:	2304      	movs	r3, #4
 80a7568:	aa08      	add	r2, sp, #32
 80a756a:	4621      	mov	r1, r4
 80a756c:	a809      	add	r0, sp, #36	; 0x24
 80a756e:	f7fa f87d 	bl	80a166c <mbedtls_asn1_get_tag>
 80a7572:	b110      	cbz	r0, 80a757a <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x46>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 80a7574:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
 80a7578:	e055      	b.n	80a7626 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>

    /*
     * Decrypt EncryptedData with appropriate PBE
     */
#if defined(MBEDTLS_PKCS12_C)
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
 80a757a:	f10d 011f 	add.w	r1, sp, #31
 80a757e:	f10d 021e 	add.w	r2, sp, #30
 80a7582:	a80a      	add	r0, sp, #40	; 0x28
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    buf = p;
 80a7584:	9c09      	ldr	r4, [sp, #36]	; 0x24

    /*
     * Decrypt EncryptedData with appropriate PBE
     */
#if defined(MBEDTLS_PKCS12_C)
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
 80a7586:	f7fd fe7d 	bl	80a5284 <mbedtls_oid_get_pkcs12_pbe_alg>
 80a758a:	4601      	mov	r1, r0
 80a758c:	b9a0      	cbnz	r0, 80a75b8 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x84>
    {
        if( ( ret = mbedtls_pkcs12_pbe( &pbe_params, MBEDTLS_PKCS12_PBE_DECRYPT,
 80a758e:	9808      	ldr	r0, [sp, #32]
 80a7590:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80a7594:	9003      	str	r0, [sp, #12]
 80a7596:	9809      	ldr	r0, [sp, #36]	; 0x24
 80a7598:	f89d 201e 	ldrb.w	r2, [sp, #30]
 80a759c:	9002      	str	r0, [sp, #8]
 80a759e:	9404      	str	r4, [sp, #16]
 80a75a0:	9501      	str	r5, [sp, #4]
 80a75a2:	9700      	str	r7, [sp, #0]
 80a75a4:	a80d      	add	r0, sp, #52	; 0x34
 80a75a6:	f006 ff89 	bl	80ae4bc <mbedtls_pkcs12_pbe>
 80a75aa:	2800      	cmp	r0, #0
 80a75ac:	d036      	beq.n	80a761c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
                                cipher_alg, md_alg,
                                pwd, pwdlen, p, len, buf ) ) != 0 )
        {
            if( ret == MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH )
 80a75ae:	f510 5ff0 	cmn.w	r0, #7680	; 0x1e00
 80a75b2:	d138      	bne.n	80a7626 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
                return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
 80a75b4:	481d      	ldr	r0, [pc, #116]	; (80a762c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf8>)
 80a75b6:	e036      	b.n	80a7626 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
            return( ret );
        }

        decrypted = 1;
    }
    else if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS12_PBE_SHA1_RC4_128, &pbe_alg_oid ) == 0 )
 80a75b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a75ba:	2a0a      	cmp	r2, #10
 80a75bc:	d114      	bne.n	80a75e8 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xb4>
 80a75be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a75c0:	481b      	ldr	r0, [pc, #108]	; (80a7630 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xfc>)
 80a75c2:	f00b f909 	bl	80b27d8 <memcmp>
 80a75c6:	4601      	mov	r1, r0
 80a75c8:	bb30      	cbnz	r0, 80a7618 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
    {
        if( ( ret = mbedtls_pkcs12_pbe_sha1_rc4_128( &pbe_params,
 80a75ca:	9b08      	ldr	r3, [sp, #32]
 80a75cc:	9402      	str	r4, [sp, #8]
 80a75ce:	9301      	str	r3, [sp, #4]
 80a75d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a75d2:	463a      	mov	r2, r7
 80a75d4:	9300      	str	r3, [sp, #0]
 80a75d6:	a80d      	add	r0, sp, #52	; 0x34
 80a75d8:	462b      	mov	r3, r5
 80a75da:	f006 fe91 	bl	80ae300 <mbedtls_pkcs12_pbe_sha1_rc4_128>
 80a75de:	bb10      	cbnz	r0, 80a7626 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
        }

        // Best guess for password mismatch when using RC4. If first tag is
        // not MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE
        //
        if( *buf != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80a75e0:	7823      	ldrb	r3, [r4, #0]
 80a75e2:	2b30      	cmp	r3, #48	; 0x30
 80a75e4:	d01a      	beq.n	80a761c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
 80a75e6:	e7e5      	b.n	80a75b4 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x80>
        decrypted = 1;
    }
    else
#endif /* MBEDTLS_PKCS12_C */
#if defined(MBEDTLS_PKCS5_C)
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBES2, &pbe_alg_oid ) == 0 )
 80a75e8:	2a09      	cmp	r2, #9
 80a75ea:	d115      	bne.n	80a7618 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
 80a75ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a75ee:	4811      	ldr	r0, [pc, #68]	; (80a7634 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x100>)
 80a75f0:	f00b f8f2 	bl	80b27d8 <memcmp>
 80a75f4:	4601      	mov	r1, r0
 80a75f6:	b978      	cbnz	r0, 80a7618 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
    {
        if( ( ret = mbedtls_pkcs5_pbes2( &pbe_params, MBEDTLS_PKCS5_DECRYPT, pwd, pwdlen,
 80a75f8:	9b08      	ldr	r3, [sp, #32]
 80a75fa:	9402      	str	r4, [sp, #8]
 80a75fc:	9301      	str	r3, [sp, #4]
 80a75fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a7600:	463a      	mov	r2, r7
 80a7602:	9300      	str	r3, [sp, #0]
 80a7604:	a80d      	add	r0, sp, #52	; 0x34
 80a7606:	462b      	mov	r3, r5
 80a7608:	f7fe ffc4 	bl	80a6594 <mbedtls_pkcs5_pbes2>
 80a760c:	b130      	cbz	r0, 80a761c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
                                  p, len, buf ) ) != 0 )
        {
            if( ret == MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH )
 80a760e:	f510 5f38 	cmn.w	r0, #11776	; 0x2e00
 80a7612:	e7ce      	b.n	80a75b2 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x7e>

    p = key;
    end = p + keylen;

    if( pwdlen == 0 )
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
 80a7614:	4808      	ldr	r0, [pc, #32]	; (80a7638 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x104>)
 80a7616:	e006      	b.n	80a7626 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
    {
        ((void) pwd);
    }

    if( decrypted == 0 )
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
 80a7618:	4808      	ldr	r0, [pc, #32]	; (80a763c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x108>)
 80a761a:	e004      	b.n	80a7626 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>

    return( pk_parse_key_pkcs8_unencrypted_der( pk, buf, len ) );
 80a761c:	9a08      	ldr	r2, [sp, #32]
 80a761e:	4621      	mov	r1, r4
 80a7620:	4630      	mov	r0, r6
 80a7622:	f7ff ff17 	bl	80a7454 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
}
 80a7626:	b011      	add	sp, #68	; 0x44
 80a7628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a762a:	bf00      	nop
 80a762c:	ffffc480 	.word	0xffffc480
 80a7630:	080b4c88 	.word	0x080b4c88
 80a7634:	080b4c93 	.word	0x080b4c93
 80a7638:	ffffc400 	.word	0xffffc400
 80a763c:	ffffc680 	.word	0xffffc680

080a7640 <mbedtls_pk_parse_subpubkey>:
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 80a7640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 80a7644:	2300      	movs	r3, #0
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 80a7646:	b087      	sub	sp, #28
 80a7648:	4617      	mov	r7, r2
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 80a764a:	f88d 3007 	strb.w	r3, [sp, #7]
    PK_VALIDATE_RET( p != NULL );
    PK_VALIDATE_RET( *p != NULL );
    PK_VALIDATE_RET( end != NULL );
    PK_VALIDATE_RET( pk != NULL );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a764e:	aa02      	add	r2, sp, #8
 80a7650:	2330      	movs	r3, #48	; 0x30
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 80a7652:	4606      	mov	r6, r0
    PK_VALIDATE_RET( p != NULL );
    PK_VALIDATE_RET( *p != NULL );
    PK_VALIDATE_RET( end != NULL );
    PK_VALIDATE_RET( pk != NULL );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a7654:	f7fa f80a 	bl	80a166c <mbedtls_asn1_get_tag>
 80a7658:	b110      	cbz	r0, 80a7660 <mbedtls_pk_parse_subpubkey+0x20>
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 80a765a:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
 80a765e:	e05c      	b.n	80a771a <mbedtls_pk_parse_subpubkey+0xda>
    }

    end = *p + len;
 80a7660:	9b02      	ldr	r3, [sp, #8]
 80a7662:	6835      	ldr	r5, [r6, #0]

    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 80a7664:	f10d 0207 	add.w	r2, sp, #7
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = *p + len;
 80a7668:	441d      	add	r5, r3

    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 80a766a:	4629      	mov	r1, r5
 80a766c:	ab03      	add	r3, sp, #12
 80a766e:	4630      	mov	r0, r6
 80a7670:	f7ff fe00 	bl	80a7274 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
 80a7674:	2800      	cmp	r0, #0
 80a7676:	d150      	bne.n	80a771a <mbedtls_pk_parse_subpubkey+0xda>
        return( ret );

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 80a7678:	aa02      	add	r2, sp, #8
 80a767a:	4629      	mov	r1, r5
 80a767c:	4630      	mov	r0, r6
 80a767e:	f7fa f87e 	bl	80a177e <mbedtls_asn1_get_bitstring_null>
 80a7682:	b110      	cbz	r0, 80a768a <mbedtls_pk_parse_subpubkey+0x4a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 80a7684:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
 80a7688:	e047      	b.n	80a771a <mbedtls_pk_parse_subpubkey+0xda>

    if( *p + len != end )
 80a768a:	6832      	ldr	r2, [r6, #0]
 80a768c:	9b02      	ldr	r3, [sp, #8]
 80a768e:	4413      	add	r3, r2
 80a7690:	429d      	cmp	r5, r3
 80a7692:	d139      	bne.n	80a7708 <mbedtls_pk_parse_subpubkey+0xc8>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 80a7694:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a7698:	f002 fc80 	bl	80a9f9c <mbedtls_pk_info_from_type>
 80a769c:	4601      	mov	r1, r0
 80a769e:	b3a8      	cbz	r0, 80a770c <mbedtls_pk_parse_subpubkey+0xcc>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 80a76a0:	4638      	mov	r0, r7
 80a76a2:	f002 fc87 	bl	80a9fb4 <mbedtls_pk_setup>
 80a76a6:	2800      	cmp	r0, #0
 80a76a8:	d137      	bne.n	80a771a <mbedtls_pk_parse_subpubkey+0xda>
        return( ret );

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA )
 80a76aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a76ae:	2b01      	cmp	r3, #1
 80a76b0:	d107      	bne.n	80a76c2 <mbedtls_pk_parse_subpubkey+0x82>
    {
        ret = pk_get_rsapubkey( p, end, mbedtls_pk_rsa( *pk ) );
 80a76b2:	687a      	ldr	r2, [r7, #4]
 80a76b4:	4629      	mov	r1, r5
 80a76b6:	4630      	mov	r0, r6
 80a76b8:	f7ff fc68 	bl	80a6f8c <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context>
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;

    if( ret == 0 && *p != end )
 80a76bc:	4604      	mov	r4, r0
 80a76be:	b1f0      	cbz	r0, 80a76fe <mbedtls_pk_parse_subpubkey+0xbe>
 80a76c0:	e027      	b.n	80a7712 <mbedtls_pk_parse_subpubkey+0xd2>
    {
        ret = pk_get_rsapubkey( p, end, mbedtls_pk_rsa( *pk ) );
    } else
#endif /* MBEDTLS_RSA_C */
#if defined(MBEDTLS_ECP_C)
    if( pk_alg == MBEDTLS_PK_ECKEY_DH || pk_alg == MBEDTLS_PK_ECKEY )
 80a76c2:	3b02      	subs	r3, #2
 80a76c4:	2b01      	cmp	r3, #1
 80a76c6:	d823      	bhi.n	80a7710 <mbedtls_pk_parse_subpubkey+0xd0>
    {
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
 80a76c8:	6879      	ldr	r1, [r7, #4]
 80a76ca:	a803      	add	r0, sp, #12
 80a76cc:	f7ff fcba 	bl	80a7044 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group>
        if( ret == 0 )
 80a76d0:	4604      	mov	r4, r0
 80a76d2:	b9f0      	cbnz	r0, 80a7712 <mbedtls_pk_parse_subpubkey+0xd2>
 80a76d4:	f8d7 8004 	ldr.w	r8, [r7, #4]
                            mbedtls_ecp_keypair *key )
{
    int ret;

    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
                    (const unsigned char *) *p, end - *p ) ) == 0 )
 80a76d8:	6832      	ldr	r2, [r6, #0]
static int pk_get_ecpubkey( unsigned char **p, const unsigned char *end,
                            mbedtls_ecp_keypair *key )
{
    int ret;

    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
 80a76da:	f108 0988 	add.w	r9, r8, #136	; 0x88
 80a76de:	1aab      	subs	r3, r5, r2
 80a76e0:	4649      	mov	r1, r9
 80a76e2:	4640      	mov	r0, r8
 80a76e4:	f7fd f90e 	bl	80a4904 <mbedtls_ecp_point_read_binary>
 80a76e8:	4604      	mov	r4, r0
 80a76ea:	b920      	cbnz	r0, 80a76f6 <mbedtls_pk_parse_subpubkey+0xb6>
                    (const unsigned char *) *p, end - *p ) ) == 0 )
    {
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
 80a76ec:	4649      	mov	r1, r9
 80a76ee:	4640      	mov	r0, r8
 80a76f0:	f7fd f990 	bl	80a4a14 <mbedtls_ecp_check_pubkey>
 80a76f4:	4604      	mov	r4, r0
    }

    /*
     * We know mbedtls_ecp_point_read_binary consumed all bytes or failed
     */
    *p = (unsigned char *) end;
 80a76f6:	6035      	str	r5, [r6, #0]
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;

    if( ret == 0 && *p != end )
 80a76f8:	b95c      	cbnz	r4, 80a7712 <mbedtls_pk_parse_subpubkey+0xd2>
 80a76fa:	2000      	movs	r0, #0
 80a76fc:	e00d      	b.n	80a771a <mbedtls_pk_parse_subpubkey+0xda>
 80a76fe:	6833      	ldr	r3, [r6, #0]
 80a7700:	429d      	cmp	r5, r3
 80a7702:	d0fa      	beq.n	80a76fa <mbedtls_pk_parse_subpubkey+0xba>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
 80a7704:	4c06      	ldr	r4, [pc, #24]	; (80a7720 <mbedtls_pk_parse_subpubkey+0xe0>)
 80a7706:	e004      	b.n	80a7712 <mbedtls_pk_parse_subpubkey+0xd2>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( *p + len != end )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a7708:	4805      	ldr	r0, [pc, #20]	; (80a7720 <mbedtls_pk_parse_subpubkey+0xe0>)
 80a770a:	e006      	b.n	80a771a <mbedtls_pk_parse_subpubkey+0xda>

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 80a770c:	4805      	ldr	r0, [pc, #20]	; (80a7724 <mbedtls_pk_parse_subpubkey+0xe4>)
 80a770e:	e004      	b.n	80a771a <mbedtls_pk_parse_subpubkey+0xda>
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
        if( ret == 0 )
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
 80a7710:	4c04      	ldr	r4, [pc, #16]	; (80a7724 <mbedtls_pk_parse_subpubkey+0xe4>)
    if( ret == 0 && *p != end )
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;

    if( ret != 0 )
        mbedtls_pk_free( pk );
 80a7712:	4638      	mov	r0, r7
 80a7714:	f002 fc32 	bl	80a9f7c <mbedtls_pk_free>
 80a7718:	4620      	mov	r0, r4

    return( ret );
}
 80a771a:	b007      	add	sp, #28
 80a771c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a7720:	ffffc49a 	.word	0xffffc49a
 80a7724:	ffffc380 	.word	0xffffc380

080a7728 <mbedtls_pk_parse_key>:
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
 80a7728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a772c:	b089      	sub	sp, #36	; 0x24
 80a772e:	4605      	mov	r5, r0
 80a7730:	460c      	mov	r4, r1
 80a7732:	461f      	mov	r7, r3
 80a7734:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    size_t len;
    mbedtls_pem_context pem;
#endif

    PK_VALIDATE_RET( pk != NULL );
    if( keylen == 0 )
 80a7738:	4616      	mov	r6, r2
 80a773a:	2a00      	cmp	r2, #0
 80a773c:	f000 80f7 	beq.w	80a792e <mbedtls_pk_parse_key+0x206>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
    PK_VALIDATE_RET( key != NULL );

#if defined(MBEDTLS_PEM_PARSE_C)
   mbedtls_pem_init( &pem );
 80a7740:	a805      	add	r0, sp, #20

#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
 80a7742:	f106 39ff 	add.w	r9, r6, #4294967295
    if( keylen == 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
    PK_VALIDATE_RET( key != NULL );

#if defined(MBEDTLS_PEM_PARSE_C)
   mbedtls_pem_init( &pem );
 80a7746:	f008 f814 	bl	80af772 <mbedtls_pem_init>

#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
 80a774a:	f814 3009 	ldrb.w	r3, [r4, r9]
 80a774e:	b123      	cbz	r3, 80a775a <mbedtls_pk_parse_key+0x32>
        return( ret );
#endif /* MBEDTLS_RSA_C */

#if defined(MBEDTLS_ECP_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
 80a7750:	f814 3009 	ldrb.w	r3, [r4, r9]
 80a7754:	2b00      	cmp	r3, #0
 80a7756:	d13f      	bne.n	80a77d8 <mbedtls_pk_parse_key+0xb0>
 80a7758:	e029      	b.n	80a77ae <mbedtls_pk_parse_key+0x86>
#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
 80a775a:	ab04      	add	r3, sp, #16
 80a775c:	9302      	str	r3, [sp, #8]
 80a775e:	e88d 0180 	stmia.w	sp, {r7, r8}
 80a7762:	4623      	mov	r3, r4
 80a7764:	4a75      	ldr	r2, [pc, #468]	; (80a793c <mbedtls_pk_parse_key+0x214>)
 80a7766:	4976      	ldr	r1, [pc, #472]	; (80a7940 <mbedtls_pk_parse_key+0x218>)
 80a7768:	a805      	add	r0, sp, #20
 80a776a:	f008 f807 	bl	80af77c <mbedtls_pem_read_buffer>
                               "-----BEGIN RSA PRIVATE KEY-----",
                               "-----END RSA PRIVATE KEY-----",
                               key, pwd, pwdlen, &len );

    if( ret == 0 )
 80a776e:	b978      	cbnz	r0, 80a7790 <mbedtls_pk_parse_key+0x68>
    {
        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
 80a7770:	2001      	movs	r0, #1
 80a7772:	f002 fc13 	bl	80a9f9c <mbedtls_pk_info_from_type>
        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
 80a7776:	4601      	mov	r1, r0
 80a7778:	4628      	mov	r0, r5
 80a777a:	f002 fc1b 	bl	80a9fb4 <mbedtls_pk_setup>
 80a777e:	4604      	mov	r4, r0
 80a7780:	2800      	cmp	r0, #0
 80a7782:	d177      	bne.n	80a7874 <mbedtls_pk_parse_key+0x14c>
            ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ),
 80a7784:	9a06      	ldr	r2, [sp, #24]
 80a7786:	9905      	ldr	r1, [sp, #20]
 80a7788:	6868      	ldr	r0, [r5, #4]
 80a778a:	f7ff fc79 	bl	80a7080 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
 80a778e:	e06f      	b.n	80a7870 <mbedtls_pk_parse_key+0x148>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
 80a7790:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
 80a7794:	d101      	bne.n	80a779a <mbedtls_pk_parse_key+0x72>
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
 80a7796:	486b      	ldr	r0, [pc, #428]	; (80a7944 <mbedtls_pk_parse_key+0x21c>)
 80a7798:	e0cc      	b.n	80a7934 <mbedtls_pk_parse_key+0x20c>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
 80a779a:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
 80a779e:	d101      	bne.n	80a77a4 <mbedtls_pk_parse_key+0x7c>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
 80a77a0:	4869      	ldr	r0, [pc, #420]	; (80a7948 <mbedtls_pk_parse_key+0x220>)
 80a77a2:	e0c7      	b.n	80a7934 <mbedtls_pk_parse_key+0x20c>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 80a77a4:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 80a77a8:	f040 80c4 	bne.w	80a7934 <mbedtls_pk_parse_key+0x20c>
 80a77ac:	e7d0      	b.n	80a7750 <mbedtls_pk_parse_key+0x28>
#if defined(MBEDTLS_ECP_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
 80a77ae:	ab04      	add	r3, sp, #16
 80a77b0:	9302      	str	r3, [sp, #8]
 80a77b2:	e88d 0180 	stmia.w	sp, {r7, r8}
 80a77b6:	4623      	mov	r3, r4
 80a77b8:	4a64      	ldr	r2, [pc, #400]	; (80a794c <mbedtls_pk_parse_key+0x224>)
 80a77ba:	4965      	ldr	r1, [pc, #404]	; (80a7950 <mbedtls_pk_parse_key+0x228>)
 80a77bc:	a805      	add	r0, sp, #20
 80a77be:	f007 ffdd 	bl	80af77c <mbedtls_pem_read_buffer>
                               "-----BEGIN EC PRIVATE KEY-----",
                               "-----END EC PRIVATE KEY-----",
                               key, pwd, pwdlen, &len );
    if( ret == 0 )
 80a77c2:	b168      	cbz	r0, 80a77e0 <mbedtls_pk_parse_key+0xb8>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
 80a77c4:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
 80a77c8:	d0e5      	beq.n	80a7796 <mbedtls_pk_parse_key+0x6e>
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
 80a77ca:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
 80a77ce:	d0e7      	beq.n	80a77a0 <mbedtls_pk_parse_key+0x78>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 80a77d0:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 80a77d4:	f040 80ae 	bne.w	80a7934 <mbedtls_pk_parse_key+0x20c>
        return( ret );
#endif /* MBEDTLS_ECP_C */

    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
 80a77d8:	f814 3009 	ldrb.w	r3, [r4, r9]
 80a77dc:	b9a3      	cbnz	r3, 80a7808 <mbedtls_pk_parse_key+0xe0>
 80a77de:	e017      	b.n	80a7810 <mbedtls_pk_parse_key+0xe8>
                               "-----BEGIN EC PRIVATE KEY-----",
                               "-----END EC PRIVATE KEY-----",
                               key, pwd, pwdlen, &len );
    if( ret == 0 )
    {
        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );
 80a77e0:	2002      	movs	r0, #2
 80a77e2:	f002 fbdb 	bl	80a9f9c <mbedtls_pk_info_from_type>

        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
 80a77e6:	4601      	mov	r1, r0
 80a77e8:	4628      	mov	r0, r5
 80a77ea:	f002 fbe3 	bl	80a9fb4 <mbedtls_pk_setup>
 80a77ee:	4604      	mov	r4, r0
 80a77f0:	2800      	cmp	r0, #0
 80a77f2:	d13f      	bne.n	80a7874 <mbedtls_pk_parse_key+0x14c>
            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
 80a77f4:	9a06      	ldr	r2, [sp, #24]
 80a77f6:	9905      	ldr	r1, [sp, #20]
 80a77f8:	6868      	ldr	r0, [r5, #4]
 80a77fa:	f7ff fd65 	bl	80a72c8 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj>
 80a77fe:	e037      	b.n	80a7870 <mbedtls_pk_parse_key+0x148>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 80a7800:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 80a7804:	f040 8096 	bne.w	80a7934 <mbedtls_pk_parse_key+0x20c>
        return( ret );

#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
 80a7808:	f814 3009 	ldrb.w	r3, [r4, r9]
 80a780c:	b9ab      	cbnz	r3, 80a783a <mbedtls_pk_parse_key+0x112>
 80a780e:	e01b      	b.n	80a7848 <mbedtls_pk_parse_key+0x120>

    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
 80a7810:	aa04      	add	r2, sp, #16
 80a7812:	9202      	str	r2, [sp, #8]
 80a7814:	9301      	str	r3, [sp, #4]
 80a7816:	9300      	str	r3, [sp, #0]
 80a7818:	4a4e      	ldr	r2, [pc, #312]	; (80a7954 <mbedtls_pk_parse_key+0x22c>)
 80a781a:	4623      	mov	r3, r4
 80a781c:	494e      	ldr	r1, [pc, #312]	; (80a7958 <mbedtls_pk_parse_key+0x230>)
 80a781e:	a805      	add	r0, sp, #20
 80a7820:	f007 ffac 	bl	80af77c <mbedtls_pem_read_buffer>
                               "-----BEGIN PRIVATE KEY-----",
                               "-----END PRIVATE KEY-----",
                               key, NULL, 0, &len );
    if( ret == 0 )
 80a7824:	2800      	cmp	r0, #0
 80a7826:	d1eb      	bne.n	80a7800 <mbedtls_pk_parse_key+0xd8>
    {
        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
 80a7828:	9a06      	ldr	r2, [sp, #24]
 80a782a:	9905      	ldr	r1, [sp, #20]
 80a782c:	4628      	mov	r0, r5
 80a782e:	f7ff fe11 	bl	80a7454 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
 80a7832:	e01d      	b.n	80a7870 <mbedtls_pk_parse_key+0x148>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 80a7834:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 80a7838:	d17c      	bne.n	80a7934 <mbedtls_pk_parse_key+0x20c>
     */
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
    {
        unsigned char *key_copy;

        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
 80a783a:	4631      	mov	r1, r6
 80a783c:	2001      	movs	r0, #1
 80a783e:	f00a febd 	bl	80b25bc <calloc>
 80a7842:	4681      	mov	r9, r0
 80a7844:	b9f0      	cbnz	r0, 80a7884 <mbedtls_pk_parse_key+0x15c>
 80a7846:	e074      	b.n	80a7932 <mbedtls_pk_parse_key+0x20a>
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
 80a7848:	aa04      	add	r2, sp, #16
 80a784a:	9202      	str	r2, [sp, #8]
 80a784c:	9301      	str	r3, [sp, #4]
 80a784e:	9300      	str	r3, [sp, #0]
 80a7850:	4a42      	ldr	r2, [pc, #264]	; (80a795c <mbedtls_pk_parse_key+0x234>)
 80a7852:	4623      	mov	r3, r4
 80a7854:	4942      	ldr	r1, [pc, #264]	; (80a7960 <mbedtls_pk_parse_key+0x238>)
 80a7856:	a805      	add	r0, sp, #20
 80a7858:	f007 ff90 	bl	80af77c <mbedtls_pem_read_buffer>
                               "-----BEGIN ENCRYPTED PRIVATE KEY-----",
                               "-----END ENCRYPTED PRIVATE KEY-----",
                               key, NULL, 0, &len );
    if( ret == 0 )
 80a785c:	2800      	cmp	r0, #0
 80a785e:	d1e9      	bne.n	80a7834 <mbedtls_pk_parse_key+0x10c>
    {
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
 80a7860:	f8cd 8000 	str.w	r8, [sp]
 80a7864:	463b      	mov	r3, r7
 80a7866:	9a06      	ldr	r2, [sp, #24]
 80a7868:	9905      	ldr	r1, [sp, #20]
 80a786a:	4628      	mov	r0, r5
 80a786c:	f7ff fe62 	bl	80a7534 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>
 80a7870:	4604      	mov	r4, r0
 80a7872:	b110      	cbz	r0, 80a787a <mbedtls_pk_parse_key+0x152>
                                                      pem.buf, pem.buflen,
                                                      pwd, pwdlen ) ) != 0 )
        {
            mbedtls_pk_free( pk );
 80a7874:	4628      	mov	r0, r5
 80a7876:	f002 fb81 	bl	80a9f7c <mbedtls_pk_free>
        }

        mbedtls_pem_free( &pem );
 80a787a:	a805      	add	r0, sp, #20
 80a787c:	f008 f808 	bl	80af890 <mbedtls_pem_free>
                               "-----BEGIN ENCRYPTED PRIVATE KEY-----",
                               "-----END ENCRYPTED PRIVATE KEY-----",
                               key, NULL, 0, &len );
    if( ret == 0 )
    {
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
 80a7880:	4620      	mov	r0, r4
        {
            mbedtls_pk_free( pk );
        }

        mbedtls_pem_free( &pem );
        return( ret );
 80a7882:	e057      	b.n	80a7934 <mbedtls_pk_parse_key+0x20c>
        unsigned char *key_copy;

        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );

        memcpy( key_copy, key, keylen );
 80a7884:	4632      	mov	r2, r6
 80a7886:	4621      	mov	r1, r4
 80a7888:	f00a ffb5 	bl	80b27f6 <memcpy>

        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
 80a788c:	463b      	mov	r3, r7
 80a788e:	4632      	mov	r2, r6
 80a7890:	4649      	mov	r1, r9
 80a7892:	f8cd 8000 	str.w	r8, [sp]
 80a7896:	4628      	mov	r0, r5
 80a7898:	f7ff fe4c 	bl	80a7534 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>
 80a789c:	4607      	mov	r7, r0
                                                pwd, pwdlen );

        mbedtls_platform_zeroize( key_copy, keylen );
 80a789e:	4631      	mov	r1, r6
 80a78a0:	4648      	mov	r0, r9
 80a78a2:	f7fe fdb5 	bl	80a6410 <mbedtls_platform_zeroize>
        mbedtls_free( key_copy );
 80a78a6:	4648      	mov	r0, r9
 80a78a8:	f009 fc1e 	bl	80b10e8 <free>
    }

    if( ret == 0 )
 80a78ac:	b90f      	cbnz	r7, 80a78b2 <mbedtls_pk_parse_key+0x18a>
        return( 0 );
 80a78ae:	2000      	movs	r0, #0
 80a78b0:	e040      	b.n	80a7934 <mbedtls_pk_parse_key+0x20c>

    mbedtls_pk_free( pk );
 80a78b2:	4628      	mov	r0, r5
 80a78b4:	f002 fb62 	bl	80a9f7c <mbedtls_pk_free>
    mbedtls_pk_init( pk );
 80a78b8:	4628      	mov	r0, r5
 80a78ba:	f002 fb5b 	bl	80a9f74 <mbedtls_pk_init>

    if( ret == MBEDTLS_ERR_PK_PASSWORD_MISMATCH )
 80a78be:	f517 5f6e 	cmn.w	r7, #15232	; 0x3b80
 80a78c2:	f43f af68 	beq.w	80a7796 <mbedtls_pk_parse_key+0x6e>
    {
        return( ret );
    }
#endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */

    if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk, key, keylen ) ) == 0 )
 80a78c6:	4632      	mov	r2, r6
 80a78c8:	4621      	mov	r1, r4
 80a78ca:	4628      	mov	r0, r5
 80a78cc:	f7ff fdc2 	bl	80a7454 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
 80a78d0:	2800      	cmp	r0, #0
 80a78d2:	d0ec      	beq.n	80a78ae <mbedtls_pk_parse_key+0x186>
        return( 0 );

    mbedtls_pk_free( pk );
 80a78d4:	4628      	mov	r0, r5
 80a78d6:	f002 fb51 	bl	80a9f7c <mbedtls_pk_free>
    mbedtls_pk_init( pk );
 80a78da:	4628      	mov	r0, r5
 80a78dc:	f002 fb4a 	bl	80a9f74 <mbedtls_pk_init>

#if defined(MBEDTLS_RSA_C)

    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
 80a78e0:	2001      	movs	r0, #1
 80a78e2:	f002 fb5b 	bl	80a9f9c <mbedtls_pk_info_from_type>
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
 80a78e6:	4601      	mov	r1, r0
 80a78e8:	4628      	mov	r0, r5
 80a78ea:	f002 fb63 	bl	80a9fb4 <mbedtls_pk_setup>
 80a78ee:	b930      	cbnz	r0, 80a78fe <mbedtls_pk_parse_key+0x1d6>
        pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), key, keylen ) == 0 )
 80a78f0:	4632      	mov	r2, r6
 80a78f2:	4621      	mov	r1, r4
 80a78f4:	6868      	ldr	r0, [r5, #4]
 80a78f6:	f7ff fbc3 	bl	80a7080 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
    mbedtls_pk_init( pk );

#if defined(MBEDTLS_RSA_C)

    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
 80a78fa:	2800      	cmp	r0, #0
 80a78fc:	d0d7      	beq.n	80a78ae <mbedtls_pk_parse_key+0x186>
        pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), key, keylen ) == 0 )
    {
        return( 0 );
    }

    mbedtls_pk_free( pk );
 80a78fe:	4628      	mov	r0, r5
 80a7900:	f002 fb3c 	bl	80a9f7c <mbedtls_pk_free>
    mbedtls_pk_init( pk );
 80a7904:	4628      	mov	r0, r5
 80a7906:	f002 fb35 	bl	80a9f74 <mbedtls_pk_init>
#endif /* MBEDTLS_RSA_C */

#if defined(MBEDTLS_ECP_C)
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );
 80a790a:	2002      	movs	r0, #2
 80a790c:	f002 fb46 	bl	80a9f9c <mbedtls_pk_info_from_type>
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
 80a7910:	4601      	mov	r1, r0
 80a7912:	4628      	mov	r0, r5
 80a7914:	f002 fb4e 	bl	80a9fb4 <mbedtls_pk_setup>
 80a7918:	b930      	cbnz	r0, 80a7928 <mbedtls_pk_parse_key+0x200>
        pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
 80a791a:	4632      	mov	r2, r6
 80a791c:	4621      	mov	r1, r4
 80a791e:	6868      	ldr	r0, [r5, #4]
 80a7920:	f7ff fcd2 	bl	80a72c8 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj>
    mbedtls_pk_init( pk );
#endif /* MBEDTLS_RSA_C */

#if defined(MBEDTLS_ECP_C)
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
 80a7924:	2800      	cmp	r0, #0
 80a7926:	d0c2      	beq.n	80a78ae <mbedtls_pk_parse_key+0x186>
        pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
                               key, keylen ) == 0 )
    {
        return( 0 );
    }
    mbedtls_pk_free( pk );
 80a7928:	4628      	mov	r0, r5
 80a792a:	f002 fb27 	bl	80a9f7c <mbedtls_pk_free>
    mbedtls_pem_context pem;
#endif

    PK_VALIDATE_RET( pk != NULL );
    if( keylen == 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 80a792e:	480d      	ldr	r0, [pc, #52]	; (80a7964 <mbedtls_pk_parse_key+0x23c>)
 80a7930:	e000      	b.n	80a7934 <mbedtls_pk_parse_key+0x20c>
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
    {
        unsigned char *key_copy;

        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 80a7932:	480d      	ldr	r0, [pc, #52]	; (80a7968 <mbedtls_pk_parse_key+0x240>)
     * twice, once here and once by the caller, but this is
     * also ok and in line with the mbedtls_pk_free() calls
     * on failed PEM parsing attempts. */

    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
}
 80a7934:	b009      	add	sp, #36	; 0x24
 80a7936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a793a:	bf00      	nop
 80a793c:	080b4c9d 	.word	0x080b4c9d
 80a7940:	080b4cbb 	.word	0x080b4cbb
 80a7944:	ffffc480 	.word	0xffffc480
 80a7948:	ffffc400 	.word	0xffffc400
 80a794c:	080b4cdb 	.word	0x080b4cdb
 80a7950:	080b4cf8 	.word	0x080b4cf8
 80a7954:	080b4d17 	.word	0x080b4d17
 80a7958:	080b4d31 	.word	0x080b4d31
 80a795c:	080b4d4d 	.word	0x080b4d4d
 80a7960:	080b4d71 	.word	0x080b4d71
 80a7964:	ffffc300 	.word	0xffffc300
 80a7968:	ffffc080 	.word	0xffffc080

080a796c <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
 80a796c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7970:	7bcb      	ldrb	r3, [r1, #15]
 80a7972:	b093      	sub	sp, #76	; 0x4c
 80a7974:	f003 030f 	and.w	r3, r3, #15
 80a7978:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
 80a797c:	e9d3 672e 	ldrd	r6, r7, [r3, #184]	; 0xb8
    zl = ctx->HL[lo];
 80a7980:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
        if( i != 15 )
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
 80a7984:	f8df c150 	ldr.w	ip, [pc, #336]	; 80a7ad8 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x16c>
 80a7988:	f101 0310 	add.w	r3, r1, #16
 80a798c:	9310      	str	r3, [sp, #64]	; 0x40
    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
 80a798e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a7990:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
 80a7994:	9310      	str	r3, [sp, #64]	; 0x40
 80a7996:	f00e 030f 	and.w	r3, lr, #15
 80a799a:	9311      	str	r3, [sp, #68]	; 0x44
        hi = x[i] >> 4;

        if( i != 15 )
 80a799c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
        hi = x[i] >> 4;
 80a799e:	ea4f 1e2e 	mov.w	lr, lr, asr #4

        if( i != 15 )
 80a79a2:	ebc1 0803 	rsb	r8, r1, r3
 80a79a6:	f1b8 0f0f 	cmp.w	r8, #15
 80a79aa:	d03a      	beq.n	80a7a22 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0xb6>
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
 80a79ac:	0733      	lsls	r3, r6, #28
 80a79ae:	9309      	str	r3, [sp, #36]	; 0x24
 80a79b0:	2300      	movs	r3, #0
 80a79b2:	9308      	str	r3, [sp, #32]
 80a79b4:	0923      	lsrs	r3, r4, #4
 80a79b6:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 80a79ba:	9300      	str	r3, [sp, #0]
 80a79bc:	092b      	lsrs	r3, r5, #4
 80a79be:	9301      	str	r3, [sp, #4]
 80a79c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80a79c2:	e9dd ab00 	ldrd	sl, fp, [sp]
 80a79c6:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
 80a79ca:	0933      	lsrs	r3, r6, #4
 80a79cc:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80a79d0:	9302      	str	r3, [sp, #8]
 80a79d2:	093b      	lsrs	r3, r7, #4
 80a79d4:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80a79d8:	9303      	str	r3, [sp, #12]
 80a79da:	ea48 080a 	orr.w	r8, r8, sl
 80a79de:	ea49 090b 	orr.w	r9, r9, fp
 80a79e2:	e9d5 672e 	ldrd	r6, r7, [r5, #184]	; 0xb8
 80a79e6:	46c2      	mov	sl, r8
 80a79e8:	46cb      	mov	fp, r9
 80a79ea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80a79ee:	ea88 0806 	eor.w	r8, r8, r6
 80a79f2:	4646      	mov	r6, r8
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
 80a79f4:	f004 040f 	and.w	r4, r4, #15
            zh ^= ctx->HH[lo];
 80a79f8:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
 80a79fc:	ea89 0907 	eor.w	r9, r9, r7
 80a7a00:	0423      	lsls	r3, r4, #16
 80a7a02:	930d      	str	r3, [sp, #52]	; 0x34
 80a7a04:	2300      	movs	r3, #0
 80a7a06:	464f      	mov	r7, r9
 80a7a08:	930c      	str	r3, [sp, #48]	; 0x30
 80a7a0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80a7a0e:	4073      	eors	r3, r6
 80a7a10:	461e      	mov	r6, r3
 80a7a12:	407c      	eors	r4, r7
 80a7a14:	4627      	mov	r7, r4
            zl ^= ctx->HL[lo];
 80a7a16:	e9d5 450e 	ldrd	r4, r5, [r5, #56]	; 0x38
 80a7a1a:	ea84 040a 	eor.w	r4, r4, sl
 80a7a1e:	ea85 050b 	eor.w	r5, r5, fp

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
 80a7a22:	0733      	lsls	r3, r6, #28
 80a7a24:	930b      	str	r3, [sp, #44]	; 0x2c
 80a7a26:	2300      	movs	r3, #0
 80a7a28:	930a      	str	r3, [sp, #40]	; 0x28
 80a7a2a:	0923      	lsrs	r3, r4, #4
 80a7a2c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 80a7a30:	9304      	str	r3, [sp, #16]
 80a7a32:	092b      	lsrs	r3, r5, #4
 80a7a34:	9305      	str	r3, [sp, #20]
 80a7a36:	0933      	lsrs	r3, r6, #4
 80a7a38:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80a7a3c:	9306      	str	r3, [sp, #24]
 80a7a3e:	093b      	lsrs	r3, r7, #4
 80a7a40:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 80a7a44:	9307      	str	r3, [sp, #28]
 80a7a46:	e9de 672e 	ldrd	r6, r7, [lr, #184]	; 0xb8
 80a7a4a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80a7a4e:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 80a7a52:	ea48 080a 	orr.w	r8, r8, sl
 80a7a56:	ea49 090b 	orr.w	r9, r9, fp
 80a7a5a:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80a7a5e:	ea8a 0a06 	eor.w	sl, sl, r6
 80a7a62:	4656      	mov	r6, sl
 80a7a64:	ea8b 0b07 	eor.w	fp, fp, r7
 80a7a68:	465f      	mov	r7, fp
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
 80a7a6a:	f004 040f 	and.w	r4, r4, #15
        zh ^= ctx->HH[hi];
 80a7a6e:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
 80a7a72:	0423      	lsls	r3, r4, #16
 80a7a74:	930f      	str	r3, [sp, #60]	; 0x3c
 80a7a76:	2300      	movs	r3, #0
 80a7a78:	930e      	str	r3, [sp, #56]	; 0x38
 80a7a7a:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 80a7a7e:	4073      	eors	r3, r6
 80a7a80:	461e      	mov	r6, r3
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
 80a7a82:	9b10      	ldr	r3, [sp, #64]	; 0x40

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
 80a7a84:	407c      	eors	r4, r7
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
 80a7a86:	4299      	cmp	r1, r3

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
 80a7a88:	4627      	mov	r7, r4
        zl ^= ctx->HL[hi];
 80a7a8a:	e9de 450e 	ldrd	r4, r5, [lr, #56]	; 0x38
 80a7a8e:	ea84 0408 	eor.w	r4, r4, r8
 80a7a92:	ea85 0509 	eor.w	r5, r5, r9
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
 80a7a96:	f47f af7a 	bne.w	80a798e <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x22>
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 80a7a9a:	0e3b      	lsrs	r3, r7, #24
 80a7a9c:	7013      	strb	r3, [r2, #0]
 80a7a9e:	0c3b      	lsrs	r3, r7, #16
 80a7aa0:	7053      	strb	r3, [r2, #1]
 80a7aa2:	0a3b      	lsrs	r3, r7, #8
 80a7aa4:	7093      	strb	r3, [r2, #2]
    PUT_UINT32_BE( zh, output, 4 );
 80a7aa6:	0e33      	lsrs	r3, r6, #24
 80a7aa8:	7113      	strb	r3, [r2, #4]
 80a7aaa:	0c33      	lsrs	r3, r6, #16
 80a7aac:	7153      	strb	r3, [r2, #5]
 80a7aae:	0a33      	lsrs	r3, r6, #8
 80a7ab0:	7193      	strb	r3, [r2, #6]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 80a7ab2:	0e2b      	lsrs	r3, r5, #24
 80a7ab4:	7213      	strb	r3, [r2, #8]
 80a7ab6:	0c2b      	lsrs	r3, r5, #16
 80a7ab8:	7253      	strb	r3, [r2, #9]
 80a7aba:	0a2b      	lsrs	r3, r5, #8
 80a7abc:	7293      	strb	r3, [r2, #10]
    PUT_UINT32_BE( zl, output, 12 );
 80a7abe:	0e23      	lsrs	r3, r4, #24
 80a7ac0:	7313      	strb	r3, [r2, #12]
 80a7ac2:	0c23      	lsrs	r3, r4, #16
 80a7ac4:	7353      	strb	r3, [r2, #13]
 80a7ac6:	0a23      	lsrs	r3, r4, #8
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 80a7ac8:	70d7      	strb	r7, [r2, #3]
    PUT_UINT32_BE( zh, output, 4 );
 80a7aca:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 80a7acc:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_BE( zl, output, 12 );
 80a7ace:	7393      	strb	r3, [r2, #14]
 80a7ad0:	73d4      	strb	r4, [r2, #15]
}
 80a7ad2:	b013      	add	sp, #76	; 0x4c
 80a7ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7ad8:	080b4e08 	.word	0x080b4e08

080a7adc <mbedtls_gcm_init>:
 * Initialize a context
 */
void mbedtls_gcm_init( mbedtls_gcm_context *ctx )
{
    GCM_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
 80a7adc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80a7ae0:	2100      	movs	r1, #0
 80a7ae2:	f00a beae 	b.w	80b2842 <memset>

080a7ae6 <mbedtls_gcm_setkey>:

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 80a7ae6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7aea:	4604      	mov	r4, r0
 80a7aec:	b08d      	sub	sp, #52	; 0x34
 80a7aee:	4608      	mov	r0, r1
 80a7af0:	4691      	mov	r9, r2

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( key != NULL );
    GCM_VALIDATE_RET( keybits == 128 || keybits == 192 || keybits == 256 );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 80a7af2:	4619      	mov	r1, r3
 80a7af4:	2201      	movs	r2, #1

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 80a7af6:	4698      	mov	r8, r3

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( key != NULL );
    GCM_VALIDATE_RET( keybits == 128 || keybits == 192 || keybits == 256 );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 80a7af8:	f7f9 fbfe 	bl	80a12f8 <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
 80a7afc:	2800      	cmp	r0, #0
 80a7afe:	f000 809c 	beq.w	80a7c3a <mbedtls_gcm_setkey+0x154>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    if( cipher_info->block_size != 16 )
 80a7b02:	6945      	ldr	r5, [r0, #20]
 80a7b04:	9002      	str	r0, [sp, #8]
 80a7b06:	2d10      	cmp	r5, #16
 80a7b08:	f040 8097 	bne.w	80a7c3a <mbedtls_gcm_setkey+0x154>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    mbedtls_cipher_free( &ctx->cipher_ctx );
 80a7b0c:	4620      	mov	r0, r4
 80a7b0e:	f7f9 fc0b 	bl	80a1328 <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 80a7b12:	9902      	ldr	r1, [sp, #8]
 80a7b14:	4620      	mov	r0, r4
 80a7b16:	f7f9 fc17 	bl	80a1348 <mbedtls_cipher_setup>
 80a7b1a:	4684      	mov	ip, r0
 80a7b1c:	2800      	cmp	r0, #0
 80a7b1e:	f040 808e 	bne.w	80a7c3e <mbedtls_gcm_setkey+0x158>
        return( ret );

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 80a7b22:	2301      	movs	r3, #1
 80a7b24:	4642      	mov	r2, r8
 80a7b26:	4649      	mov	r1, r9
 80a7b28:	4620      	mov	r0, r4
 80a7b2a:	f7f9 fc25 	bl	80a1378 <mbedtls_cipher_setkey>
 80a7b2e:	4684      	mov	ip, r0
 80a7b30:	2800      	cmp	r0, #0
 80a7b32:	f040 8084 	bne.w	80a7c3e <mbedtls_gcm_setkey+0x158>
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;

    memset( h, 0, 16 );
 80a7b36:	4601      	mov	r1, r0
{
    int ret, i, j;
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;
 80a7b38:	9007      	str	r0, [sp, #28]

    memset( h, 0, 16 );
 80a7b3a:	462a      	mov	r2, r5
 80a7b3c:	a808      	add	r0, sp, #32
 80a7b3e:	f00a fe80 	bl	80b2842 <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
 80a7b42:	ab07      	add	r3, sp, #28
 80a7b44:	9300      	str	r3, [sp, #0]
 80a7b46:	ab08      	add	r3, sp, #32
 80a7b48:	462a      	mov	r2, r5
 80a7b4a:	4619      	mov	r1, r3
 80a7b4c:	4620      	mov	r0, r4
 80a7b4e:	f7f9 fc5d 	bl	80a140c <mbedtls_cipher_update>
 80a7b52:	4684      	mov	ip, r0
 80a7b54:	2800      	cmp	r0, #0
 80a7b56:	d172      	bne.n	80a7c3e <mbedtls_gcm_setkey+0x158>
        return( ret );

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
    GET_UINT32_BE( lo, h,  4  );
    vh = (uint64_t) hi << 32 | lo;
 80a7b58:	4662      	mov	r2, ip
 80a7b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a7b5c:	9908      	ldr	r1, [sp, #32]
 80a7b5e:	ba18      	rev	r0, r3
 80a7b60:	ba0b      	rev	r3, r1
 80a7b62:	990b      	ldr	r1, [sp, #44]	; 0x2c

    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;
 80a7b64:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a7b66:	fa91 fe81 	rev.w	lr, r1
        return( ret );

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
    GET_UINT32_BE( lo, h,  4  );
    vh = (uint64_t) hi << 32 | lo;
 80a7b6a:	4302      	orrs	r2, r0

    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;
 80a7b6c:	ba29      	rev	r1, r5
 80a7b6e:	ea4c 000e 	orr.w	r0, ip, lr

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
 80a7b72:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    ctx->HH[8] = vh;
 80a7b76:	e9c4 233e 	strd	r2, r3, [r4, #248]	; 0xf8
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
 80a7b7a:	f04f 0900 	mov.w	r9, #0
 80a7b7e:	f04f 0800 	mov.w	r8, #0
 80a7b82:	e9c4 892e 	strd	r8, r9, [r4, #184]	; 0xb8
    ctx->HL[0] = 0;
 80a7b86:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
 80a7b8a:	f04f 0e03 	mov.w	lr, #3

    for( i = 4; i > 0; i >>= 1 )
 80a7b8e:	2504      	movs	r5, #4
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 80a7b90:	f04f 4961 	mov.w	r9, #3774873600	; 0xe1000000
 80a7b94:	f000 0801 	and.w	r8, r0, #1
        vl  = ( vh << 63 ) | ( vl >> 1 );
 80a7b98:	07d7      	lsls	r7, r2, #31
 80a7b9a:	0849      	lsrs	r1, r1, #1
 80a7b9c:	ea4f 0030 	mov.w	r0, r0, rrx
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 80a7ba0:	085b      	lsrs	r3, r3, #1
 80a7ba2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a7ba6:	fb09 fb08 	mul.w	fp, r9, r8
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
 80a7baa:	2600      	movs	r6, #0
 80a7bac:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
 80a7bb0:	4330      	orrs	r0, r6
 80a7bb2:	4339      	orrs	r1, r7
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 80a7bb4:	4072      	eors	r2, r6
 80a7bb6:	ea83 030b 	eor.w	r3, r3, fp

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
 80a7bba:	f1be 0e01 	subs.w	lr, lr, #1
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);

        ctx->HL[i] = vl;
 80a7bbe:	e9c8 010e 	strd	r0, r1, [r8, #56]	; 0x38
        ctx->HH[i] = vh;
 80a7bc2:	e9c8 232e 	strd	r2, r3, [r8, #184]	; 0xb8

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
 80a7bc6:	ea4f 0565 	mov.w	r5, r5, asr #1
 80a7bca:	d1e3      	bne.n	80a7b94 <mbedtls_gcm_setkey+0xae>
 80a7bcc:	f04f 0803 	mov.w	r8, #3
 80a7bd0:	2202      	movs	r2, #2
        ctx->HH[i] = vh;
    }

    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 80a7bd2:	f104 0938 	add.w	r9, r4, #56	; 0x38
 80a7bd6:	f104 0eb8 	add.w	lr, r4, #184	; 0xb8
 80a7bda:	00d3      	lsls	r3, r2, #3
 80a7bdc:	eb09 0703 	add.w	r7, r9, r3
 80a7be0:	4473      	add	r3, lr
        vh = *HiH;
 80a7be2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80a7be6:	4676      	mov	r6, lr
 80a7be8:	e9cd 0102 	strd	r0, r1, [sp, #8]
        vl = *HiL;
 80a7bec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80a7bf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a7bf4:	4648      	mov	r0, r9
        for( j = 1; j < i; j++ )
 80a7bf6:	2101      	movs	r1, #1
        {
            HiH[j] = vh ^ ctx->HH[j];
 80a7bf8:	e9f6 4502 	ldrd	r4, r5, [r6, #8]!
 80a7bfc:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 80a7c00:	ea8a 0a04 	eor.w	sl, sl, r4
 80a7c04:	ea8b 0b05 	eor.w	fp, fp, r5
 80a7c08:	4654      	mov	r4, sl
 80a7c0a:	465d      	mov	r5, fp
            HiL[j] = vl ^ ctx->HL[j];
 80a7c0c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
        {
            HiH[j] = vh ^ ctx->HH[j];
 80a7c10:	e9e3 4502 	strd	r4, r5, [r3, #8]!
            HiL[j] = vl ^ ctx->HL[j];
 80a7c14:	e9f0 4502 	ldrd	r4, r5, [r0, #8]!
 80a7c18:	ea8a 0a04 	eor.w	sl, sl, r4
 80a7c1c:	ea8b 0b05 	eor.w	fp, fp, r5
 80a7c20:	4654      	mov	r4, sl
 80a7c22:	465d      	mov	r5, fp
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
 80a7c24:	3101      	adds	r1, #1
 80a7c26:	4291      	cmp	r1, r2
        {
            HiH[j] = vh ^ ctx->HH[j];
            HiL[j] = vl ^ ctx->HL[j];
 80a7c28:	e9e7 4502 	strd	r4, r5, [r7, #8]!
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
 80a7c2c:	d1e4      	bne.n	80a7bf8 <mbedtls_gcm_setkey+0x112>

        ctx->HL[i] = vl;
        ctx->HH[i] = vh;
    }

    for( i = 2; i <= 8; i *= 2 )
 80a7c2e:	f1b8 0801 	subs.w	r8, r8, #1
 80a7c32:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a7c36:	d1d0      	bne.n	80a7bda <mbedtls_gcm_setkey+0xf4>
 80a7c38:	e001      	b.n	80a7c3e <mbedtls_gcm_setkey+0x158>
    GCM_VALIDATE_RET( key != NULL );
    GCM_VALIDATE_RET( keybits == 128 || keybits == 192 || keybits == 256 );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80a7c3a:	f06f 0c13 	mvn.w	ip, #19

    if( ( ret = gcm_gen_table( ctx ) ) != 0 )
        return( ret );

    return( 0 );
}
 80a7c3e:	4660      	mov	r0, ip
 80a7c40:	b00d      	add	sp, #52	; 0x34
 80a7c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a7c46 <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 80a7c46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 80a7c4a:	f04f 0900 	mov.w	r9, #0
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 80a7c4e:	b08b      	sub	sp, #44	; 0x2c
 80a7c50:	4604      	mov	r4, r0
 80a7c52:	468b      	mov	fp, r1
 80a7c54:	4617      	mov	r7, r2
 80a7c56:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 80a7c5a:	f8cd 9014 	str.w	r9, [sp, #20]
    GCM_VALIDATE_RET( iv != NULL );
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
 80a7c5e:	461d      	mov	r5, r3
 80a7c60:	2b00      	cmp	r3, #0
 80a7c62:	f000 808e 	beq.w	80a7d82 <mbedtls_gcm_starts+0x13c>
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 80a7c66:	f500 76ac 	add.w	r6, r0, #344	; 0x158
 80a7c6a:	2210      	movs	r2, #16
 80a7c6c:	4649      	mov	r1, r9
 80a7c6e:	4630      	mov	r0, r6
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 80a7c70:	f504 7ab4 	add.w	sl, r4, #360	; 0x168
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 80a7c74:	f00a fde5 	bl	80b2842 <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 80a7c78:	4649      	mov	r1, r9
 80a7c7a:	2210      	movs	r2, #16
 80a7c7c:	4650      	mov	r0, sl
 80a7c7e:	f00a fde0 	bl	80b2842 <memset>

    ctx->mode = mode;
 80a7c82:	f8c4 b178 	str.w	fp, [r4, #376]	; 0x178
    ctx->len = 0;
    ctx->add_len = 0;
 80a7c86:	46a3      	mov	fp, r4

    memset( ctx->y, 0x00, sizeof(ctx->y) );
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );

    ctx->mode = mode;
    ctx->len = 0;
 80a7c88:	2000      	movs	r0, #0
 80a7c8a:	2100      	movs	r1, #0
 80a7c8c:	f504 739c 	add.w	r3, r4, #312	; 0x138
    ctx->add_len = 0;

    if( iv_len == 12 )
 80a7c90:	2d0c      	cmp	r5, #12

    memset( ctx->y, 0x00, sizeof(ctx->y) );
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );

    ctx->mode = mode;
    ctx->len = 0;
 80a7c92:	e9c3 0100 	strd	r0, r1, [r3]
    ctx->add_len = 0;
 80a7c96:	e9eb 0150 	strd	r0, r1, [fp, #320]!	; 0x140

    if( iv_len == 12 )
 80a7c9a:	d10a      	bne.n	80a7cb2 <mbedtls_gcm_starts+0x6c>
    {
        memcpy( ctx->y, iv, iv_len );
 80a7c9c:	683b      	ldr	r3, [r7, #0]
 80a7c9e:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
 80a7ca2:	687b      	ldr	r3, [r7, #4]
 80a7ca4:	6073      	str	r3, [r6, #4]
 80a7ca6:	68bb      	ldr	r3, [r7, #8]
 80a7ca8:	60b3      	str	r3, [r6, #8]
        ctx->y[15] = 1;
 80a7caa:	2301      	movs	r3, #1
 80a7cac:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
 80a7cb0:	e03a      	b.n	80a7d28 <mbedtls_gcm_starts+0xe2>
    }
    else
    {
        memset( work_buf, 0x00, 16 );
 80a7cb2:	2210      	movs	r2, #16
 80a7cb4:	4649      	mov	r1, r9
 80a7cb6:	a806      	add	r0, sp, #24
 80a7cb8:	f00a fdc3 	bl	80b2842 <memset>
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 80a7cbc:	00eb      	lsls	r3, r5, #3
 80a7cbe:	0e1a      	lsrs	r2, r3, #24
 80a7cc0:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 80a7cc4:	0c1a      	lsrs	r2, r3, #16
 80a7cc6:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
 80a7cca:	0a1a      	lsrs	r2, r3, #8
 80a7ccc:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
 80a7cd0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27

        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 80a7cd4:	462b      	mov	r3, r5
 80a7cd6:	f204 1957 	addw	r9, r4, #343	; 0x157
 80a7cda:	4649      	mov	r1, r9
 80a7cdc:	2d10      	cmp	r5, #16
 80a7cde:	bf28      	it	cs
 80a7ce0:	2310      	movcs	r3, #16
 80a7ce2:	463a      	mov	r2, r7
 80a7ce4:	441f      	add	r7, r3

            for( i = 0; i < use_len; i++ )
                ctx->y[i] ^= p[i];
 80a7ce6:	f812 eb01 	ldrb.w	lr, [r2], #1
 80a7cea:	f811 0f01 	ldrb.w	r0, [r1, #1]!
        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;

            for( i = 0; i < use_len; i++ )
 80a7cee:	42ba      	cmp	r2, r7
                ctx->y[i] ^= p[i];
 80a7cf0:	ea8e 0000 	eor.w	r0, lr, r0
 80a7cf4:	7008      	strb	r0, [r1, #0]
        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;

            for( i = 0; i < use_len; i++ )
 80a7cf6:	d1f6      	bne.n	80a7ce6 <mbedtls_gcm_starts+0xa0>
                ctx->y[i] ^= p[i];

            gcm_mult( ctx, ctx->y, ctx->y );
 80a7cf8:	4632      	mov	r2, r6
 80a7cfa:	4631      	mov	r1, r6
 80a7cfc:	4620      	mov	r0, r4
 80a7cfe:	9303      	str	r3, [sp, #12]
 80a7d00:	f7ff fe34 	bl	80a796c <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
    {
        memset( work_buf, 0x00, 16 );
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );

        p = iv;
        while( iv_len > 0 )
 80a7d04:	9b03      	ldr	r3, [sp, #12]
 80a7d06:	1aed      	subs	r5, r5, r3
 80a7d08:	d1e4      	bne.n	80a7cd4 <mbedtls_gcm_starts+0x8e>
            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
            ctx->y[i] ^= work_buf[i];
 80a7d0a:	ab06      	add	r3, sp, #24
 80a7d0c:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80a7d10:	5d5b      	ldrb	r3, [r3, r5]

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
 80a7d12:	3501      	adds	r5, #1
            ctx->y[i] ^= work_buf[i];
 80a7d14:	4053      	eors	r3, r2

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
 80a7d16:	2d10      	cmp	r5, #16
            ctx->y[i] ^= work_buf[i];
 80a7d18:	f889 3000 	strb.w	r3, [r9]

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
 80a7d1c:	d1f5      	bne.n	80a7d0a <mbedtls_gcm_starts+0xc4>
            ctx->y[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->y, ctx->y );
 80a7d1e:	4632      	mov	r2, r6
 80a7d20:	4631      	mov	r1, r6
 80a7d22:	4620      	mov	r0, r4
 80a7d24:	f7ff fe22 	bl	80a796c <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
 80a7d28:	ab05      	add	r3, sp, #20
 80a7d2a:	9300      	str	r3, [sp, #0]
 80a7d2c:	2210      	movs	r2, #16
 80a7d2e:	f504 73a4 	add.w	r3, r4, #328	; 0x148
 80a7d32:	4631      	mov	r1, r6
 80a7d34:	4620      	mov	r0, r4
 80a7d36:	f7f9 fb69 	bl	80a140c <mbedtls_cipher_update>
 80a7d3a:	4605      	mov	r5, r0
 80a7d3c:	bb18      	cbnz	r0, 80a7d86 <mbedtls_gcm_starts+0x140>
                             &olen ) ) != 0 )
    {
        return( ret );
    }

    ctx->add_len = add_len;
 80a7d3e:	f8c4 8140 	str.w	r8, [r4, #320]	; 0x140
 80a7d42:	f8cb 0004 	str.w	r0, [fp, #4]
    p = add;
    while( add_len > 0 )
 80a7d46:	f1b8 0f00 	cmp.w	r8, #0
 80a7d4a:	d01c      	beq.n	80a7d86 <mbedtls_gcm_starts+0x140>
    {
        use_len = ( add_len < 16 ) ? add_len : 16;
 80a7d4c:	4646      	mov	r6, r8
 80a7d4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a7d50:	2e10      	cmp	r6, #16
 80a7d52:	4619      	mov	r1, r3
 80a7d54:	bf28      	it	cs
 80a7d56:	2610      	movcs	r6, #16
 80a7d58:	4431      	add	r1, r6
 80a7d5a:	f204 1267 	addw	r2, r4, #359	; 0x167
 80a7d5e:	9114      	str	r1, [sp, #80]	; 0x50

        for( i = 0; i < use_len; i++ )
            ctx->buf[i] ^= p[i];
 80a7d60:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a7d64:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80a7d68:	4041      	eors	r1, r0
 80a7d6a:	7011      	strb	r1, [r2, #0]
    p = add;
    while( add_len > 0 )
    {
        use_len = ( add_len < 16 ) ? add_len : 16;

        for( i = 0; i < use_len; i++ )
 80a7d6c:	9914      	ldr	r1, [sp, #80]	; 0x50
 80a7d6e:	4299      	cmp	r1, r3
 80a7d70:	d1f6      	bne.n	80a7d60 <mbedtls_gcm_starts+0x11a>
            ctx->buf[i] ^= p[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );
 80a7d72:	4652      	mov	r2, sl
 80a7d74:	4651      	mov	r1, sl
 80a7d76:	4620      	mov	r0, r4
 80a7d78:	f7ff fdf8 	bl	80a796c <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        add_len -= use_len;
 80a7d7c:	ebc6 0808 	rsb	r8, r6, r8
        return( ret );
    }

    ctx->add_len = add_len;
    p = add;
    while( add_len > 0 )
 80a7d80:	e7e1      	b.n	80a7d46 <mbedtls_gcm_starts+0x100>
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
      ( (uint64_t) iv_len  ) >> 61 != 0 ||
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80a7d82:	f06f 0513 	mvn.w	r5, #19
        add_len -= use_len;
        p += use_len;
    }

    return( 0 );
}
 80a7d86:	4628      	mov	r0, r5
 80a7d88:	b00b      	add	sp, #44	; 0x2c
 80a7d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a7d8e <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 80a7d8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7d92:	461f      	mov	r7, r3
 80a7d94:	b08b      	sub	sp, #44	; 0x2c
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
 80a7d96:	2300      	movs	r3, #0

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( output > input && (size_t) ( output - input ) < length )
 80a7d98:	4297      	cmp	r7, r2

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 80a7d9a:	4604      	mov	r4, r0
 80a7d9c:	460e      	mov	r6, r1
 80a7d9e:	4690      	mov	r8, r2
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
 80a7da0:	9305      	str	r3, [sp, #20]

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( output > input && (size_t) ( output - input ) < length )
 80a7da2:	d902      	bls.n	80a7daa <mbedtls_gcm_update+0x1c>
 80a7da4:	1abb      	subs	r3, r7, r2
 80a7da6:	428b      	cmp	r3, r1
 80a7da8:	d35c      	bcc.n	80a7e64 <mbedtls_gcm_update+0xd6>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
 80a7daa:	4625      	mov	r5, r4
 80a7dac:	e9f5 014e 	ldrd	r0, r1, [r5, #312]!	; 0x138
 80a7db0:	1982      	adds	r2, r0, r6
 80a7db2:	f141 0300 	adc.w	r3, r1, #0
 80a7db6:	428b      	cmp	r3, r1
 80a7db8:	bf08      	it	eq
 80a7dba:	4282      	cmpeq	r2, r0
 80a7dbc:	d352      	bcc.n	80a7e64 <mbedtls_gcm_update+0xd6>
 80a7dbe:	210f      	movs	r1, #15
 80a7dc0:	f06f 001f 	mvn.w	r0, #31
 80a7dc4:	4299      	cmp	r1, r3
 80a7dc6:	bf08      	it	eq
 80a7dc8:	4290      	cmpeq	r0, r2
 80a7dca:	d34b      	bcc.n	80a7e64 <mbedtls_gcm_update+0xd6>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    ctx->len += length;
 80a7dcc:	e9c5 2300 	strd	r2, r3, [r5]
 80a7dd0:	f504 73b2 	add.w	r3, r4, #356	; 0x164
 80a7dd4:	9302      	str	r3, [sp, #8]

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 80a7dd6:	f504 73ac 	add.w	r3, r4, #344	; 0x158
 80a7dda:	f10d 0a18 	add.w	sl, sp, #24
 80a7dde:	9303      	str	r3, [sp, #12]
    }

    ctx->len += length;

    p = input;
    while( length > 0 )
 80a7de0:	2e00      	cmp	r6, #0
 80a7de2:	d042      	beq.n	80a7e6a <mbedtls_gcm_update+0xdc>
 80a7de4:	f504 75b4 	add.w	r5, r4, #360	; 0x168
    {
        use_len = ( length < 16 ) ? length : 16;
 80a7de8:	462a      	mov	r2, r5
 80a7dea:	46ab      	mov	fp, r5
 80a7dec:	2e10      	cmp	r6, #16
 80a7dee:	46b1      	mov	r9, r6
 80a7df0:	bf28      	it	cs
 80a7df2:	f04f 0910 	movcs.w	r9, #16

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
 80a7df6:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 80a7dfa:	3301      	adds	r3, #1
 80a7dfc:	b2db      	uxtb	r3, r3
 80a7dfe:	7013      	strb	r3, [r2, #0]
 80a7e00:	b913      	cbnz	r3, 80a7e08 <mbedtls_gcm_update+0x7a>
    p = input;
    while( length > 0 )
    {
        use_len = ( length < 16 ) ? length : 16;

        for( i = 16; i > 12; i-- )
 80a7e02:	9b02      	ldr	r3, [sp, #8]
 80a7e04:	429a      	cmp	r2, r3
 80a7e06:	d1f6      	bne.n	80a7df6 <mbedtls_gcm_update+0x68>
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 80a7e08:	ab05      	add	r3, sp, #20
 80a7e0a:	9300      	str	r3, [sp, #0]
 80a7e0c:	2210      	movs	r2, #16
 80a7e0e:	4653      	mov	r3, sl
 80a7e10:	9903      	ldr	r1, [sp, #12]
 80a7e12:	4620      	mov	r0, r4
 80a7e14:	f7f9 fafa 	bl	80a140c <mbedtls_cipher_update>
 80a7e18:	bb40      	cbnz	r0, 80a7e6c <mbedtls_gcm_update+0xde>
 80a7e1a:	4642      	mov	r2, r8
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 80a7e1c:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
 80a7e20:	b91b      	cbnz	r3, 80a7e2a <mbedtls_gcm_update+0x9c>
                ctx->buf[i] ^= p[i];
 80a7e22:	7829      	ldrb	r1, [r5, #0]
 80a7e24:	7813      	ldrb	r3, [r2, #0]
 80a7e26:	404b      	eors	r3, r1
 80a7e28:	702b      	strb	r3, [r5, #0]
            out_p[i] = ectr[i] ^ p[i];
 80a7e2a:	f812 1b01 	ldrb.w	r1, [r2], #1
 80a7e2e:	f81a 3000 	ldrb.w	r3, [sl, r0]
 80a7e32:	3501      	adds	r5, #1
 80a7e34:	404b      	eors	r3, r1
 80a7e36:	543b      	strb	r3, [r7, r0]
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 80a7e38:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
                                   &olen ) ) != 0 )
        {
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
 80a7e3c:	3001      	adds	r0, #1
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
                ctx->buf[i] ^= p[i];
            out_p[i] = ectr[i] ^ p[i];
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 80a7e3e:	2901      	cmp	r1, #1
                ctx->buf[i] ^= out_p[i];
 80a7e40:	bf02      	ittt	eq
 80a7e42:	f815 1c01 	ldrbeq.w	r1, [r5, #-1]
 80a7e46:	404b      	eoreq	r3, r1
 80a7e48:	f805 3c01 	strbeq.w	r3, [r5, #-1]
                                   &olen ) ) != 0 )
        {
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
 80a7e4c:	4581      	cmp	r9, r0
 80a7e4e:	d1e5      	bne.n	80a7e1c <mbedtls_gcm_update+0x8e>
            out_p[i] = ectr[i] ^ p[i];
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
                ctx->buf[i] ^= out_p[i];
        }

        gcm_mult( ctx, ctx->buf, ctx->buf );
 80a7e50:	465a      	mov	r2, fp
 80a7e52:	4659      	mov	r1, fp
 80a7e54:	4620      	mov	r0, r4
 80a7e56:	f7ff fd89 	bl	80a796c <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        length -= use_len;
 80a7e5a:	ebc9 0606 	rsb	r6, r9, r6
        p += use_len;
 80a7e5e:	44c8      	add	r8, r9
        out_p += use_len;
 80a7e60:	444f      	add	r7, r9
    }

    ctx->len += length;

    p = input;
    while( length > 0 )
 80a7e62:	e7bd      	b.n	80a7de0 <mbedtls_gcm_update+0x52>
    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( output > input && (size_t) ( output - input ) < length )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80a7e64:	f06f 0013 	mvn.w	r0, #19
 80a7e68:	e000      	b.n	80a7e6c <mbedtls_gcm_update+0xde>
        length -= use_len;
        p += use_len;
        out_p += use_len;
    }

    return( 0 );
 80a7e6a:	4630      	mov	r0, r6
}
 80a7e6c:	b00b      	add	sp, #44	; 0x2c
 80a7e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a7e72 <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 80a7e72:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80a7e76:	4688      	mov	r8, r1
    uint64_t orig_add_len;

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    orig_len = ctx->len * 8;
 80a7e78:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
 80a7e7c:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 80a7e80:	00cd      	lsls	r5, r1, #3
    orig_add_len = ctx->add_len * 8;
 80a7e82:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
    uint64_t orig_add_len;

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    orig_len = ctx->len * 8;
 80a7e86:	ea45 7553 	orr.w	r5, r5, r3, lsr #29
 80a7e8a:	00dc      	lsls	r4, r3, #3
    orig_add_len = ctx->add_len * 8;
 80a7e8c:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
 80a7e90:	00cf      	lsls	r7, r1, #3
 80a7e92:	ea47 7753 	orr.w	r7, r7, r3, lsr #29
 80a7e96:	00de      	lsls	r6, r3, #3

    if( tag_len > 16 || tag_len < 4 )
 80a7e98:	1f13      	subs	r3, r2, #4
 80a7e9a:	2b0c      	cmp	r3, #12
}

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 80a7e9c:	4681      	mov	r9, r0
 80a7e9e:	4692      	mov	sl, r2
    GCM_VALIDATE_RET( tag != NULL );

    orig_len = ctx->len * 8;
    orig_add_len = ctx->add_len * 8;

    if( tag_len > 16 || tag_len < 4 )
 80a7ea0:	d85b      	bhi.n	80a7f5a <mbedtls_gcm_finish+0xe8>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    memcpy( tag, ctx->base_ectr, tag_len );
 80a7ea2:	f500 71a4 	add.w	r1, r0, #328	; 0x148
 80a7ea6:	4640      	mov	r0, r8
 80a7ea8:	f00a fca5 	bl	80b27f6 <memcpy>

    if( orig_len || orig_add_len )
 80a7eac:	ea54 0305 	orrs.w	r3, r4, r5
 80a7eb0:	d104      	bne.n	80a7ebc <mbedtls_gcm_finish+0x4a>
 80a7eb2:	ea56 0307 	orrs.w	r3, r6, r7
 80a7eb6:	d101      	bne.n	80a7ebc <mbedtls_gcm_finish+0x4a>

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
 80a7eb8:	2000      	movs	r0, #0
 80a7eba:	e050      	b.n	80a7f5e <mbedtls_gcm_finish+0xec>

    memcpy( tag, ctx->base_ectr, tag_len );

    if( orig_len || orig_add_len )
    {
        memset( work_buf, 0x00, 16 );
 80a7ebc:	2210      	movs	r2, #16
 80a7ebe:	2100      	movs	r1, #0
 80a7ec0:	4668      	mov	r0, sp
 80a7ec2:	f00a fcbe 	bl	80b2842 <memset>

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 80a7ec6:	0e3b      	lsrs	r3, r7, #24
 80a7ec8:	f88d 3000 	strb.w	r3, [sp]
 80a7ecc:	0c3b      	lsrs	r3, r7, #16
 80a7ece:	f88d 3001 	strb.w	r3, [sp, #1]
 80a7ed2:	0a3b      	lsrs	r3, r7, #8
 80a7ed4:	f88d 3002 	strb.w	r3, [sp, #2]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 80a7ed8:	0e33      	lsrs	r3, r6, #24
 80a7eda:	f88d 3004 	strb.w	r3, [sp, #4]
 80a7ede:	0c33      	lsrs	r3, r6, #16
 80a7ee0:	f88d 3005 	strb.w	r3, [sp, #5]
 80a7ee4:	0a33      	lsrs	r3, r6, #8
 80a7ee6:	f88d 3006 	strb.w	r3, [sp, #6]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 80a7eea:	0e2b      	lsrs	r3, r5, #24
 80a7eec:	f88d 3008 	strb.w	r3, [sp, #8]
 80a7ef0:	0c2b      	lsrs	r3, r5, #16
 80a7ef2:	f88d 3009 	strb.w	r3, [sp, #9]
 80a7ef6:	0a2b      	lsrs	r3, r5, #8
 80a7ef8:	f88d 300a 	strb.w	r3, [sp, #10]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 80a7efc:	0e23      	lsrs	r3, r4, #24
 80a7efe:	f88d 300c 	strb.w	r3, [sp, #12]
 80a7f02:	0c23      	lsrs	r3, r4, #16
 80a7f04:	f88d 300d 	strb.w	r3, [sp, #13]
 80a7f08:	f88d 400f 	strb.w	r4, [sp, #15]
 80a7f0c:	0a23      	lsrs	r3, r4, #8
 80a7f0e:	f209 1467 	addw	r4, r9, #359	; 0x167
 80a7f12:	4622      	mov	r2, r4
 80a7f14:	f88d 300e 	strb.w	r3, [sp, #14]

    if( orig_len || orig_add_len )
    {
        memset( work_buf, 0x00, 16 );

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 80a7f18:	f88d 7003 	strb.w	r7, [sp, #3]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 80a7f1c:	f88d 6007 	strb.w	r6, [sp, #7]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 80a7f20:	f88d 500b 	strb.w	r5, [sp, #11]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 80a7f24:	2300      	movs	r3, #0
            ctx->buf[i] ^= work_buf[i];
 80a7f26:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80a7f2a:	f81d 1003 	ldrb.w	r1, [sp, r3]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 80a7f2e:	3301      	adds	r3, #1
            ctx->buf[i] ^= work_buf[i];
 80a7f30:	4041      	eors	r1, r0
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 80a7f32:	2b10      	cmp	r3, #16
            ctx->buf[i] ^= work_buf[i];
 80a7f34:	7011      	strb	r1, [r2, #0]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 80a7f36:	d1f6      	bne.n	80a7f26 <mbedtls_gcm_finish+0xb4>
            ctx->buf[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );
 80a7f38:	f509 72b4 	add.w	r2, r9, #360	; 0x168
 80a7f3c:	4611      	mov	r1, r2
 80a7f3e:	4648      	mov	r0, r9
 80a7f40:	f7ff fd14 	bl	80a796c <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
 80a7f44:	4641      	mov	r1, r8
 80a7f46:	44c2      	add	sl, r8

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
 80a7f48:	780a      	ldrb	r2, [r1, #0]
 80a7f4a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80a7f4e:	4053      	eors	r3, r2
 80a7f50:	f801 3b01 	strb.w	r3, [r1], #1
        for( i = 0; i < 16; i++ )
            ctx->buf[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );

        for( i = 0; i < tag_len; i++ )
 80a7f54:	4551      	cmp	r1, sl
 80a7f56:	d1f7      	bne.n	80a7f48 <mbedtls_gcm_finish+0xd6>
 80a7f58:	e7ae      	b.n	80a7eb8 <mbedtls_gcm_finish+0x46>

    orig_len = ctx->len * 8;
    orig_add_len = ctx->add_len * 8;

    if( tag_len > 16 || tag_len < 4 )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80a7f5a:	f06f 0013 	mvn.w	r0, #19
        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
}
 80a7f5e:	b004      	add	sp, #16
 80a7f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a7f64 <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 80a7f64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a7f68:	4617      	mov	r7, r2
 80a7f6a:	461a      	mov	r2, r3
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 80a7f6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 80a7f6e:	4604      	mov	r4, r0
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 80a7f70:	9301      	str	r3, [sp, #4]
 80a7f72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 80a7f74:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 80a7f78:	9300      	str	r3, [sp, #0]
 80a7f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 80a7f7c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80a7f80:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80a7f82:	9d10      	ldr	r5, [sp, #64]	; 0x40
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 80a7f84:	f7ff fe5f 	bl	80a7c46 <mbedtls_gcm_starts>
 80a7f88:	b970      	cbnz	r0, 80a7fa8 <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
 80a7f8a:	464b      	mov	r3, r9
 80a7f8c:	4642      	mov	r2, r8
 80a7f8e:	4639      	mov	r1, r7
 80a7f90:	4620      	mov	r0, r4
 80a7f92:	f7ff fefc 	bl	80a7d8e <mbedtls_gcm_update>
 80a7f96:	b938      	cbnz	r0, 80a7fa8 <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 80a7f98:	4632      	mov	r2, r6
 80a7f9a:	4629      	mov	r1, r5
 80a7f9c:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
 80a7f9e:	b003      	add	sp, #12
 80a7fa0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 80a7fa4:	f7ff bf65 	b.w	80a7e72 <mbedtls_gcm_finish>
        return( ret );

    return( 0 );
}
 80a7fa8:	b003      	add	sp, #12
 80a7faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a7fae <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 80a7fae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a7fb0:	460e      	mov	r6, r1
 80a7fb2:	b08d      	sub	sp, #52	; 0x34
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( tag != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 80a7fb4:	9916      	ldr	r1, [sp, #88]	; 0x58
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 80a7fb6:	9c15      	ldr	r4, [sp, #84]	; 0x54
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( tag != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 80a7fb8:	9103      	str	r1, [sp, #12]
 80a7fba:	9913      	ldr	r1, [sp, #76]	; 0x4c
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 80a7fbc:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( tag != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 80a7fbe:	9102      	str	r1, [sp, #8]
 80a7fc0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80a7fc2:	af08      	add	r7, sp, #32
 80a7fc4:	9101      	str	r1, [sp, #4]
 80a7fc6:	9300      	str	r3, [sp, #0]
 80a7fc8:	9706      	str	r7, [sp, #24]
 80a7fca:	4613      	mov	r3, r2
 80a7fcc:	9405      	str	r4, [sp, #20]
 80a7fce:	9504      	str	r5, [sp, #16]
 80a7fd0:	4632      	mov	r2, r6
 80a7fd2:	2100      	movs	r1, #0
 80a7fd4:	f7ff ffc6 	bl	80a7f64 <mbedtls_gcm_crypt_and_tag>
 80a7fd8:	b998      	cbnz	r0, 80a8002 <mbedtls_gcm_auth_decrypt+0x54>
 80a7fda:	4602      	mov	r2, r0
 80a7fdc:	4603      	mov	r3, r0
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 80a7fde:	42a3      	cmp	r3, r4
 80a7fe0:	d008      	beq.n	80a7ff4 <mbedtls_gcm_auth_decrypt+0x46>
        diff |= tag[i] ^ check_tag[i];
 80a7fe2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80a7fe4:	f811 e003 	ldrb.w	lr, [r1, r3]
 80a7fe8:	5cf9      	ldrb	r1, [r7, r3]
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 80a7fea:	3301      	adds	r3, #1
        diff |= tag[i] ^ check_tag[i];
 80a7fec:	ea8e 0101 	eor.w	r1, lr, r1
 80a7ff0:	430a      	orrs	r2, r1
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 80a7ff2:	e7f4      	b.n	80a7fde <mbedtls_gcm_auth_decrypt+0x30>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
 80a7ff4:	b12a      	cbz	r2, 80a8002 <mbedtls_gcm_auth_decrypt+0x54>
    {
        mbedtls_platform_zeroize( output, length );
 80a7ff6:	4628      	mov	r0, r5
 80a7ff8:	4631      	mov	r1, r6
 80a7ffa:	f7fe fa09 	bl	80a6410 <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
 80a7ffe:	f06f 0011 	mvn.w	r0, #17
    }

    return( 0 );
}
 80a8002:	b00d      	add	sp, #52	; 0x34
 80a8004:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a8006 <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
 80a8006:	b510      	push	{r4, lr}
    if( ctx == NULL )
 80a8008:	4604      	mov	r4, r0
 80a800a:	b140      	cbz	r0, 80a801e <mbedtls_gcm_free+0x18>
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
 80a800c:	f7f9 f98c 	bl	80a1328 <mbedtls_cipher_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
 80a8010:	4620      	mov	r0, r4
}
 80a8012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
    if( ctx == NULL )
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
 80a8016:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80a801a:	f7fe b9f9 	b.w	80a6410 <mbedtls_platform_zeroize>
 80a801e:	bd10      	pop	{r4, pc}

080a8020 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 80a8020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 80a8024:	2700      	movs	r7, #0
 80a8026:	463c      	mov	r4, r7
 80a8028:	463d      	mov	r5, r7
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 80a802a:	f8dd e01c 	ldr.w	lr, [sp, #28]
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 80a802e:	f8df 8118 	ldr.w	r8, [pc, #280]	; 80a8148 <mbedtls_base64_decode+0x128>
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 80a8032:	4575      	cmp	r5, lr
 80a8034:	d22d      	bcs.n	80a8092 <mbedtls_base64_decode+0x72>
 80a8036:	f04f 0c00 	mov.w	ip, #0
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
 80a803a:	5d5e      	ldrb	r6, [r3, r5]
 80a803c:	2e20      	cmp	r6, #32
 80a803e:	d104      	bne.n	80a804a <mbedtls_base64_decode+0x2a>
        {
            ++i;
 80a8040:	3501      	adds	r5, #1
    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
 80a8042:	45ae      	cmp	lr, r5
        {
            ++i;
            ++x;
 80a8044:	f10c 0c01 	add.w	ip, ip, #1
    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
 80a8048:	d8f7      	bhi.n	80a803a <mbedtls_base64_decode+0x1a>
            ++i;
            ++x;
        }

        /* Spaces at end of buffer are OK */
        if( i == slen )
 80a804a:	45ae      	cmp	lr, r5
 80a804c:	d021      	beq.n	80a8092 <mbedtls_base64_decode+0x72>
            break;

        if( ( slen - i ) >= 2 &&
 80a804e:	ebc5 060e 	rsb	r6, r5, lr
 80a8052:	2e01      	cmp	r6, #1
 80a8054:	d906      	bls.n	80a8064 <mbedtls_base64_decode+0x44>
 80a8056:	5d5e      	ldrb	r6, [r3, r5]
 80a8058:	2e0d      	cmp	r6, #13
 80a805a:	d103      	bne.n	80a8064 <mbedtls_base64_decode+0x44>
            src[i] == '\r' && src[i + 1] == '\n' )
 80a805c:	195e      	adds	r6, r3, r5
 80a805e:	7876      	ldrb	r6, [r6, #1]
 80a8060:	2e0a      	cmp	r6, #10
 80a8062:	d014      	beq.n	80a808e <mbedtls_base64_decode+0x6e>
            continue;

        if( src[i] == '\n' )
 80a8064:	5d5e      	ldrb	r6, [r3, r5]
 80a8066:	2e0a      	cmp	r6, #10
 80a8068:	d011      	beq.n	80a808e <mbedtls_base64_decode+0x6e>
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
 80a806a:	f1bc 0f00 	cmp.w	ip, #0
 80a806e:	d166      	bne.n	80a813e <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
 80a8070:	2e3d      	cmp	r6, #61	; 0x3d
 80a8072:	d102      	bne.n	80a807a <mbedtls_base64_decode+0x5a>
 80a8074:	3701      	adds	r7, #1
 80a8076:	2f02      	cmp	r7, #2
 80a8078:	d861      	bhi.n	80a813e <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 80a807a:	f016 0f80 	tst.w	r6, #128	; 0x80
 80a807e:	d15e      	bne.n	80a813e <mbedtls_base64_decode+0x11e>
 80a8080:	f818 6006 	ldrb.w	r6, [r8, r6]
 80a8084:	2e7f      	cmp	r6, #127	; 0x7f
 80a8086:	d05a      	beq.n	80a813e <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 80a8088:	2e3f      	cmp	r6, #63	; 0x3f
 80a808a:	d956      	bls.n	80a813a <mbedtls_base64_decode+0x11a>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
 80a808c:	3401      	adds	r4, #1
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 80a808e:	3501      	adds	r5, #1
 80a8090:	e7cf      	b.n	80a8032 <mbedtls_base64_decode+0x12>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
    }

    if( n == 0 )
 80a8092:	b91c      	cbnz	r4, 80a809c <mbedtls_base64_decode+0x7c>
    {
        *olen = 0;
 80a8094:	6014      	str	r4, [r2, #0]
        return( 0 );
 80a8096:	4620      	mov	r0, r4
 80a8098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
    n -= j;
 80a809c:	f004 0e07 	and.w	lr, r4, #7
 80a80a0:	2606      	movs	r6, #6
 80a80a2:	08e4      	lsrs	r4, r4, #3
 80a80a4:	fb06 fe0e 	mul.w	lr, r6, lr
 80a80a8:	4366      	muls	r6, r4
 80a80aa:	f10e 0e07 	add.w	lr, lr, #7
 80a80ae:	1bf6      	subs	r6, r6, r7
 80a80b0:	eb06 04de 	add.w	r4, r6, lr, lsr #3

    if( dst == NULL || dlen < n )
 80a80b4:	b160      	cbz	r0, 80a80d0 <mbedtls_base64_decode+0xb0>
 80a80b6:	428c      	cmp	r4, r1
 80a80b8:	d80a      	bhi.n	80a80d0 <mbedtls_base64_decode+0xb0>
 80a80ba:	2600      	movs	r6, #0
 80a80bc:	eb03 0e05 	add.w	lr, r3, r5
 80a80c0:	4601      	mov	r1, r0
 80a80c2:	2503      	movs	r5, #3
 80a80c4:	4634      	mov	r4, r6
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 80a80c6:	f8df c080 	ldr.w	ip, [pc, #128]	; 80a8148 <mbedtls_base64_decode+0x128>
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 80a80ca:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80a814c <mbedtls_base64_decode+0x12c>
 80a80ce:	e00f      	b.n	80a80f0 <mbedtls_base64_decode+0xd0>
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
    n -= j;

    if( dst == NULL || dlen < n )
    {
        *olen = n;
 80a80d0:	6014      	str	r4, [r2, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 80a80d2:	f06f 0029 	mvn.w	r0, #41	; 0x29
 80a80d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 80a80da:	f813 9b01 	ldrb.w	r9, [r3], #1
 80a80de:	f1a9 070a 	sub.w	r7, r9, #10
 80a80e2:	b2ff      	uxtb	r7, r7
 80a80e4:	2f16      	cmp	r7, #22
 80a80e6:	d806      	bhi.n	80a80f6 <mbedtls_base64_decode+0xd6>
 80a80e8:	fa28 f707 	lsr.w	r7, r8, r7
 80a80ec:	07ff      	lsls	r7, r7, #31
 80a80ee:	d502      	bpl.n	80a80f6 <mbedtls_base64_decode+0xd6>
    {
        *olen = n;
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 80a80f0:	4573      	cmp	r3, lr
 80a80f2:	d1f2      	bne.n	80a80da <mbedtls_base64_decode+0xba>
 80a80f4:	e01c      	b.n	80a8130 <mbedtls_base64_decode+0x110>
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 80a80f6:	f81c 7009 	ldrb.w	r7, [ip, r9]
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
 80a80fa:	3401      	adds	r4, #1
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 80a80fc:	2f40      	cmp	r7, #64	; 0x40
 80a80fe:	bf08      	it	eq
 80a8100:	3d01      	subeq	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 80a8102:	f007 073f 	and.w	r7, r7, #63	; 0x3f

        if( ++n == 4 )
 80a8106:	2c04      	cmp	r4, #4
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 80a8108:	ea47 1686 	orr.w	r6, r7, r6, lsl #6

        if( ++n == 4 )
 80a810c:	d1f0      	bne.n	80a80f0 <mbedtls_base64_decode+0xd0>
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 80a810e:	b16d      	cbz	r5, 80a812c <mbedtls_base64_decode+0x10c>
 80a8110:	0c34      	lsrs	r4, r6, #16
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 80a8112:	2d01      	cmp	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 80a8114:	700c      	strb	r4, [r1, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 80a8116:	d101      	bne.n	80a811c <mbedtls_base64_decode+0xfc>
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 80a8118:	3101      	adds	r1, #1
 80a811a:	e007      	b.n	80a812c <mbedtls_base64_decode+0x10c>
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
            if( j > 2 ) *p++ = (unsigned char)( x       );
 80a811c:	2d02      	cmp	r5, #2

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 80a811e:	ea4f 2416 	mov.w	r4, r6, lsr #8
 80a8122:	704c      	strb	r4, [r1, #1]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 80a8124:	bf16      	itet	ne
 80a8126:	708e      	strbne	r6, [r1, #2]

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 80a8128:	3102      	addeq	r1, #2
            if( j > 2 ) *p++ = (unsigned char)( x       );
 80a812a:	3103      	addne	r1, #3
        j -= ( base64_dec_map[*src] == 64 );
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
 80a812c:	2400      	movs	r4, #0
 80a812e:	e7df      	b.n	80a80f0 <mbedtls_base64_decode+0xd0>
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
            if( j > 2 ) *p++ = (unsigned char)( x       );
        }
    }

    *olen = p - dst;
 80a8130:	1a08      	subs	r0, r1, r0
 80a8132:	6010      	str	r0, [r2, #0]

    return( 0 );
 80a8134:	2000      	movs	r0, #0
 80a8136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 80a813a:	2f00      	cmp	r7, #0
 80a813c:	d0a6      	beq.n	80a808c <mbedtls_base64_decode+0x6c>
        if( src[i] == '\n' )
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 80a813e:	f06f 002b 	mvn.w	r0, #43	; 0x2b
 80a8142:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a8146:	bf00      	nop
 80a8148:	080b4e88 	.word	0x080b4e88
 80a814c:	00400009 	.word	0x00400009

080a8150 <mbedtls_md_info_from_type>:
#endif
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
 80a8150:	3804      	subs	r0, #4
 80a8152:	b2c0      	uxtb	r0, r0
 80a8154:	2804      	cmp	r0, #4
 80a8156:	bf9a      	itte	ls
 80a8158:	4b02      	ldrls	r3, [pc, #8]	; (80a8164 <mbedtls_md_info_from_type+0x14>)
 80a815a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80a815e:	2000      	movhi	r0, #0
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
    }
}
 80a8160:	4770      	bx	lr
 80a8162:	bf00      	nop
 80a8164:	080b4f08 	.word	0x080b4f08

080a8168 <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
 80a8168:	2300      	movs	r3, #0
 80a816a:	6003      	str	r3, [r0, #0]
 80a816c:	6043      	str	r3, [r0, #4]
 80a816e:	6083      	str	r3, [r0, #8]
 80a8170:	4770      	bx	lr

080a8172 <mbedtls_md_free>:
}

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
 80a8172:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 80a8174:	4604      	mov	r4, r0
 80a8176:	b1a8      	cbz	r0, 80a81a4 <mbedtls_md_free+0x32>
 80a8178:	6803      	ldr	r3, [r0, #0]
 80a817a:	b19b      	cbz	r3, 80a81a4 <mbedtls_md_free+0x32>
        return;

    if( ctx->md_ctx != NULL )
 80a817c:	6840      	ldr	r0, [r0, #4]
 80a817e:	b108      	cbz	r0, 80a8184 <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
 80a8180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a8182:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
 80a8184:	68a0      	ldr	r0, [r4, #8]
 80a8186:	b138      	cbz	r0, 80a8198 <mbedtls_md_free+0x26>
    {
        mbedtls_platform_zeroize( ctx->hmac_ctx,
                                  2 * ctx->md_info->block_size );
 80a8188:	6823      	ldr	r3, [r4, #0]
 80a818a:	68d9      	ldr	r1, [r3, #12]
 80a818c:	0049      	lsls	r1, r1, #1
 80a818e:	f7fe f93f 	bl	80a6410 <mbedtls_platform_zeroize>
        mbedtls_free( ctx->hmac_ctx );
 80a8192:	68a0      	ldr	r0, [r4, #8]
 80a8194:	f008 ffa8 	bl	80b10e8 <free>
    }

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
 80a8198:	4620      	mov	r0, r4
}
 80a819a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mbedtls_platform_zeroize( ctx->hmac_ctx,
                                  2 * ctx->md_info->block_size );
        mbedtls_free( ctx->hmac_ctx );
    }

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
 80a819e:	210c      	movs	r1, #12
 80a81a0:	f7fe b936 	b.w	80a6410 <mbedtls_platform_zeroize>
 80a81a4:	bd10      	pop	{r4, pc}
	...

080a81a8 <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
 80a81a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a81aa:	4605      	mov	r5, r0
 80a81ac:	4617      	mov	r7, r2
    if( md_info == NULL || ctx == NULL )
 80a81ae:	460c      	mov	r4, r1
 80a81b0:	b199      	cbz	r1, 80a81da <mbedtls_md_setup+0x32>
 80a81b2:	b190      	cbz	r0, 80a81da <mbedtls_md_setup+0x32>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
 80a81b4:	6a0b      	ldr	r3, [r1, #32]
 80a81b6:	4798      	blx	r3
 80a81b8:	4606      	mov	r6, r0
 80a81ba:	6068      	str	r0, [r5, #4]
 80a81bc:	b178      	cbz	r0, 80a81de <mbedtls_md_setup+0x36>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
 80a81be:	b14f      	cbz	r7, 80a81d4 <mbedtls_md_setup+0x2c>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
 80a81c0:	68e1      	ldr	r1, [r4, #12]
 80a81c2:	2002      	movs	r0, #2
 80a81c4:	f00a f9fa 	bl	80b25bc <calloc>
 80a81c8:	60a8      	str	r0, [r5, #8]
        if( ctx->hmac_ctx == NULL )
 80a81ca:	b918      	cbnz	r0, 80a81d4 <mbedtls_md_setup+0x2c>
        {
            md_info->ctx_free_func( ctx->md_ctx );
 80a81cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a81ce:	4630      	mov	r0, r6
 80a81d0:	4798      	blx	r3
 80a81d2:	e004      	b.n	80a81de <mbedtls_md_setup+0x36>
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
        }
    }

    ctx->md_info = md_info;
 80a81d4:	602c      	str	r4, [r5, #0]

    return( 0 );
 80a81d6:	2000      	movs	r0, #0
 80a81d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
    if( md_info == NULL || ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80a81da:	4802      	ldr	r0, [pc, #8]	; (80a81e4 <mbedtls_md_setup+0x3c>)
 80a81dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 80a81de:	4802      	ldr	r0, [pc, #8]	; (80a81e8 <mbedtls_md_setup+0x40>)
    }

    ctx->md_info = md_info;

    return( 0 );
}
 80a81e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a81e2:	bf00      	nop
 80a81e4:	ffffaf00 	.word	0xffffaf00
 80a81e8:	ffffae80 	.word	0xffffae80

080a81ec <mbedtls_md_starts>:

int mbedtls_md_starts( mbedtls_md_context_t *ctx )
{
    if( ctx == NULL || ctx->md_info == NULL )
 80a81ec:	b120      	cbz	r0, 80a81f8 <mbedtls_md_starts+0xc>
 80a81ee:	6803      	ldr	r3, [r0, #0]
 80a81f0:	b113      	cbz	r3, 80a81f8 <mbedtls_md_starts+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->starts_func( ctx->md_ctx ) );
 80a81f2:	691b      	ldr	r3, [r3, #16]
 80a81f4:	6840      	ldr	r0, [r0, #4]
 80a81f6:	4718      	bx	r3
}
 80a81f8:	4800      	ldr	r0, [pc, #0]	; (80a81fc <mbedtls_md_starts+0x10>)
 80a81fa:	4770      	bx	lr
 80a81fc:	ffffaf00 	.word	0xffffaf00

080a8200 <mbedtls_md_update>:

int mbedtls_md_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL )
 80a8200:	b120      	cbz	r0, 80a820c <mbedtls_md_update+0xc>
 80a8202:	6803      	ldr	r3, [r0, #0]
 80a8204:	b113      	cbz	r3, 80a820c <mbedtls_md_update+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 80a8206:	695b      	ldr	r3, [r3, #20]
 80a8208:	6840      	ldr	r0, [r0, #4]
 80a820a:	4718      	bx	r3
}
 80a820c:	4800      	ldr	r0, [pc, #0]	; (80a8210 <mbedtls_md_update+0x10>)
 80a820e:	4770      	bx	lr
 80a8210:	ffffaf00 	.word	0xffffaf00

080a8214 <mbedtls_md_finish>:

int mbedtls_md_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
    if( ctx == NULL || ctx->md_info == NULL )
 80a8214:	b120      	cbz	r0, 80a8220 <mbedtls_md_finish+0xc>
 80a8216:	6803      	ldr	r3, [r0, #0]
 80a8218:	b113      	cbz	r3, 80a8220 <mbedtls_md_finish+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 80a821a:	699b      	ldr	r3, [r3, #24]
 80a821c:	6840      	ldr	r0, [r0, #4]
 80a821e:	4718      	bx	r3
}
 80a8220:	4800      	ldr	r0, [pc, #0]	; (80a8224 <mbedtls_md_finish+0x10>)
 80a8222:	4770      	bx	lr
 80a8224:	ffffaf00 	.word	0xffffaf00

080a8228 <mbedtls_md>:

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
 80a8228:	b430      	push	{r4, r5}
 80a822a:	460d      	mov	r5, r1
 80a822c:	4611      	mov	r1, r2
    if( md_info == NULL )
 80a822e:	b128      	cbz	r0, 80a823c <mbedtls_md+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
 80a8230:	69c4      	ldr	r4, [r0, #28]
 80a8232:	461a      	mov	r2, r3
 80a8234:	4628      	mov	r0, r5
 80a8236:	4623      	mov	r3, r4
}
 80a8238:	bc30      	pop	{r4, r5}
            unsigned char *output )
{
    if( md_info == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
 80a823a:	4718      	bx	r3
}
 80a823c:	4801      	ldr	r0, [pc, #4]	; (80a8244 <mbedtls_md+0x1c>)
 80a823e:	bc30      	pop	{r4, r5}
 80a8240:	4770      	bx	lr
 80a8242:	bf00      	nop
 80a8244:	ffffaf00 	.word	0xffffaf00

080a8248 <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 80a8248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a824c:	460e      	mov	r6, r1
 80a824e:	b090      	sub	sp, #64	; 0x40
 80a8250:	4690      	mov	r8, r2
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80a8252:	4604      	mov	r4, r0
 80a8254:	2800      	cmp	r0, #0
 80a8256:	d050      	beq.n	80a82fa <mbedtls_md_hmac_starts+0xb2>
 80a8258:	6803      	ldr	r3, [r0, #0]
 80a825a:	2b00      	cmp	r3, #0
 80a825c:	d04d      	beq.n	80a82fa <mbedtls_md_hmac_starts+0xb2>
 80a825e:	6882      	ldr	r2, [r0, #8]
 80a8260:	2a00      	cmp	r2, #0
 80a8262:	d04a      	beq.n	80a82fa <mbedtls_md_hmac_starts+0xb2>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
 80a8264:	68da      	ldr	r2, [r3, #12]
 80a8266:	4542      	cmp	r2, r8
 80a8268:	d219      	bcs.n	80a829e <mbedtls_md_hmac_starts+0x56>
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 80a826a:	691b      	ldr	r3, [r3, #16]
 80a826c:	6840      	ldr	r0, [r0, #4]
 80a826e:	4798      	blx	r3
 80a8270:	4605      	mov	r5, r0
 80a8272:	2800      	cmp	r0, #0
 80a8274:	d13b      	bne.n	80a82ee <mbedtls_md_hmac_starts+0xa6>
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
 80a8276:	6823      	ldr	r3, [r4, #0]
 80a8278:	4642      	mov	r2, r8
 80a827a:	695b      	ldr	r3, [r3, #20]
 80a827c:	4631      	mov	r1, r6
 80a827e:	6860      	ldr	r0, [r4, #4]
 80a8280:	4798      	blx	r3
 80a8282:	4605      	mov	r5, r0
 80a8284:	2800      	cmp	r0, #0
 80a8286:	d132      	bne.n	80a82ee <mbedtls_md_hmac_starts+0xa6>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
 80a8288:	6823      	ldr	r3, [r4, #0]
 80a828a:	4669      	mov	r1, sp
 80a828c:	699b      	ldr	r3, [r3, #24]
 80a828e:	6860      	ldr	r0, [r4, #4]
 80a8290:	4798      	blx	r3
 80a8292:	4605      	mov	r5, r0
 80a8294:	bb58      	cbnz	r0, 80a82ee <mbedtls_md_hmac_starts+0xa6>
            goto cleanup;

        keylen = ctx->md_info->size;
        key = sum;
 80a8296:	466e      	mov	r6, sp
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
            goto cleanup;

        keylen = ctx->md_info->size;
 80a8298:	6823      	ldr	r3, [r4, #0]
 80a829a:	f8d3 8008 	ldr.w	r8, [r3, #8]
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 80a829e:	6823      	ldr	r3, [r4, #0]

        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
 80a82a0:	68a7      	ldr	r7, [r4, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 80a82a2:	68da      	ldr	r2, [r3, #12]

    memset( ipad, 0x36, ctx->md_info->block_size );
 80a82a4:	2136      	movs	r1, #54	; 0x36
 80a82a6:	4638      	mov	r0, r7
        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 80a82a8:	18bd      	adds	r5, r7, r2

    memset( ipad, 0x36, ctx->md_info->block_size );
 80a82aa:	f00a faca 	bl	80b2842 <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
 80a82ae:	6823      	ldr	r3, [r4, #0]
 80a82b0:	215c      	movs	r1, #92	; 0x5c
 80a82b2:	68da      	ldr	r2, [r3, #12]
 80a82b4:	4628      	mov	r0, r5
 80a82b6:	f00a fac4 	bl	80b2842 <memset>

    for( i = 0; i < keylen; i++ )
 80a82ba:	2300      	movs	r3, #0
 80a82bc:	4598      	cmp	r8, r3
 80a82be:	d009      	beq.n	80a82d4 <mbedtls_md_hmac_starts+0x8c>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 80a82c0:	5cf9      	ldrb	r1, [r7, r3]
 80a82c2:	5cf2      	ldrb	r2, [r6, r3]
 80a82c4:	404a      	eors	r2, r1
 80a82c6:	54fa      	strb	r2, [r7, r3]
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 80a82c8:	5ce9      	ldrb	r1, [r5, r3]
 80a82ca:	5cf2      	ldrb	r2, [r6, r3]
 80a82cc:	404a      	eors	r2, r1
 80a82ce:	54ea      	strb	r2, [r5, r3]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 80a82d0:	3301      	adds	r3, #1
 80a82d2:	e7f3      	b.n	80a82bc <mbedtls_md_hmac_starts+0x74>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 80a82d4:	6823      	ldr	r3, [r4, #0]
 80a82d6:	6860      	ldr	r0, [r4, #4]
 80a82d8:	691b      	ldr	r3, [r3, #16]
 80a82da:	4798      	blx	r3
 80a82dc:	4605      	mov	r5, r0
 80a82de:	b930      	cbnz	r0, 80a82ee <mbedtls_md_hmac_starts+0xa6>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
 80a82e0:	6823      	ldr	r3, [r4, #0]
 80a82e2:	4639      	mov	r1, r7
 80a82e4:	695d      	ldr	r5, [r3, #20]
 80a82e6:	68da      	ldr	r2, [r3, #12]
 80a82e8:	6860      	ldr	r0, [r4, #4]
 80a82ea:	47a8      	blx	r5
 80a82ec:	4605      	mov	r5, r0
                                           ctx->md_info->block_size ) ) != 0 )
        goto cleanup;

cleanup:
    mbedtls_platform_zeroize( sum, sizeof( sum ) );
 80a82ee:	4668      	mov	r0, sp
 80a82f0:	2140      	movs	r1, #64	; 0x40
 80a82f2:	f7fe f88d 	bl	80a6410 <mbedtls_platform_zeroize>

    return( ret );
 80a82f6:	4628      	mov	r0, r5
 80a82f8:	e000      	b.n	80a82fc <mbedtls_md_hmac_starts+0xb4>
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80a82fa:	4802      	ldr	r0, [pc, #8]	; (80a8304 <mbedtls_md_hmac_starts+0xbc>)

cleanup:
    mbedtls_platform_zeroize( sum, sizeof( sum ) );

    return( ret );
}
 80a82fc:	b010      	add	sp, #64	; 0x40
 80a82fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a8302:	bf00      	nop
 80a8304:	ffffaf00 	.word	0xffffaf00

080a8308 <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 80a8308:	b410      	push	{r4}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80a830a:	b138      	cbz	r0, 80a831c <mbedtls_md_hmac_update+0x14>
 80a830c:	6803      	ldr	r3, [r0, #0]
 80a830e:	b12b      	cbz	r3, 80a831c <mbedtls_md_hmac_update+0x14>
 80a8310:	6884      	ldr	r4, [r0, #8]
 80a8312:	b11c      	cbz	r4, 80a831c <mbedtls_md_hmac_update+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 80a8314:	695b      	ldr	r3, [r3, #20]
 80a8316:	6840      	ldr	r0, [r0, #4]
}
 80a8318:	bc10      	pop	{r4}
int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 80a831a:	4718      	bx	r3
}
 80a831c:	4801      	ldr	r0, [pc, #4]	; (80a8324 <mbedtls_md_hmac_update+0x1c>)
 80a831e:	bc10      	pop	{r4}
 80a8320:	4770      	bx	lr
 80a8322:	bf00      	nop
 80a8324:	ffffaf00 	.word	0xffffaf00

080a8328 <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 80a8328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a832c:	460e      	mov	r6, r1
 80a832e:	b090      	sub	sp, #64	; 0x40
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80a8330:	4604      	mov	r4, r0
 80a8332:	b320      	cbz	r0, 80a837e <mbedtls_md_hmac_finish+0x56>
 80a8334:	6803      	ldr	r3, [r0, #0]
 80a8336:	b313      	cbz	r3, 80a837e <mbedtls_md_hmac_finish+0x56>
 80a8338:	6885      	ldr	r5, [r0, #8]
 80a833a:	b305      	cbz	r5, 80a837e <mbedtls_md_hmac_finish+0x56>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 80a833c:	f8d3 800c 	ldr.w	r8, [r3, #12]

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
 80a8340:	4669      	mov	r1, sp
 80a8342:	699b      	ldr	r3, [r3, #24]
 80a8344:	6840      	ldr	r0, [r0, #4]
 80a8346:	4798      	blx	r3
 80a8348:	b9d0      	cbnz	r0, 80a8380 <mbedtls_md_hmac_finish+0x58>
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 80a834a:	6823      	ldr	r3, [r4, #0]
 80a834c:	6860      	ldr	r0, [r4, #4]
 80a834e:	691b      	ldr	r3, [r3, #16]
 80a8350:	4798      	blx	r3
 80a8352:	b9a8      	cbnz	r0, 80a8380 <mbedtls_md_hmac_finish+0x58>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
 80a8354:	6823      	ldr	r3, [r4, #0]
 80a8356:	eb05 0108 	add.w	r1, r5, r8
 80a835a:	695f      	ldr	r7, [r3, #20]
 80a835c:	68da      	ldr	r2, [r3, #12]
 80a835e:	6860      	ldr	r0, [r4, #4]
 80a8360:	47b8      	blx	r7
 80a8362:	b968      	cbnz	r0, 80a8380 <mbedtls_md_hmac_finish+0x58>
                                           ctx->md_info->block_size ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
 80a8364:	6823      	ldr	r3, [r4, #0]
 80a8366:	4669      	mov	r1, sp
 80a8368:	695d      	ldr	r5, [r3, #20]
 80a836a:	689a      	ldr	r2, [r3, #8]
 80a836c:	6860      	ldr	r0, [r4, #4]
 80a836e:	47a8      	blx	r5
 80a8370:	b930      	cbnz	r0, 80a8380 <mbedtls_md_hmac_finish+0x58>
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 80a8372:	6823      	ldr	r3, [r4, #0]
 80a8374:	4631      	mov	r1, r6
 80a8376:	699b      	ldr	r3, [r3, #24]
 80a8378:	6860      	ldr	r0, [r4, #4]
 80a837a:	4798      	blx	r3
 80a837c:	e000      	b.n	80a8380 <mbedtls_md_hmac_finish+0x58>
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80a837e:	4802      	ldr	r0, [pc, #8]	; (80a8388 <mbedtls_md_hmac_finish+0x60>)
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}
 80a8380:	b010      	add	sp, #64	; 0x40
 80a8382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a8386:	bf00      	nop
 80a8388:	ffffaf00 	.word	0xffffaf00

080a838c <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
 80a838c:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80a838e:	4604      	mov	r4, r0
 80a8390:	b180      	cbz	r0, 80a83b4 <mbedtls_md_hmac_reset+0x28>
 80a8392:	6803      	ldr	r3, [r0, #0]
 80a8394:	b173      	cbz	r3, 80a83b4 <mbedtls_md_hmac_reset+0x28>
 80a8396:	6885      	ldr	r5, [r0, #8]
 80a8398:	b165      	cbz	r5, 80a83b4 <mbedtls_md_hmac_reset+0x28>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 80a839a:	691b      	ldr	r3, [r3, #16]
 80a839c:	6840      	ldr	r0, [r0, #4]
 80a839e:	4798      	blx	r3
 80a83a0:	b948      	cbnz	r0, 80a83b6 <mbedtls_md_hmac_reset+0x2a>
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 80a83a2:	6823      	ldr	r3, [r4, #0]
                                       ctx->md_info->block_size ) );
 80a83a4:	4629      	mov	r1, r5
 80a83a6:	695e      	ldr	r6, [r3, #20]
 80a83a8:	68da      	ldr	r2, [r3, #12]
 80a83aa:	6860      	ldr	r0, [r4, #4]
 80a83ac:	4633      	mov	r3, r6
}
 80a83ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
 80a83b2:	4718      	bx	r3
{
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80a83b4:	4800      	ldr	r0, [pc, #0]	; (80a83b8 <mbedtls_md_hmac_reset+0x2c>)

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
}
 80a83b6:	bd70      	pop	{r4, r5, r6, pc}
 80a83b8:	ffffaf00 	.word	0xffffaf00

080a83bc <mbedtls_md_get_size>:
    return( ctx->md_info->process_func( ctx->md_ctx, data ) );
}

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 80a83bc:	b100      	cbz	r0, 80a83c0 <mbedtls_md_get_size+0x4>
        return( 0 );

    return md_info->size;
 80a83be:	7a00      	ldrb	r0, [r0, #8]
}
 80a83c0:	4770      	bx	lr

080a83c2 <mbedtls_md_get_name>:
    return md_info->type;
}

const char *mbedtls_md_get_name( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 80a83c2:	b100      	cbz	r0, 80a83c6 <mbedtls_md_get_name+0x4>
        return( NULL );

    return md_info->name;
 80a83c4:	6840      	ldr	r0, [r0, #4]
}
 80a83c6:	4770      	bx	lr

080a83c8 <_ZL5add32PmmPa>:
/*
 * Helpers for addition and subtraction of chunks, with signed carry.
 */
static inline void add32( uint32_t *dst, uint32_t src, signed char *carry )
{
    *dst += src;
 80a83c8:	6803      	ldr	r3, [r0, #0]
 80a83ca:	440b      	add	r3, r1
 80a83cc:	6003      	str	r3, [r0, #0]
    *carry += ( *dst < src );
 80a83ce:	7810      	ldrb	r0, [r2, #0]
 80a83d0:	4299      	cmp	r1, r3
 80a83d2:	bf94      	ite	ls
 80a83d4:	4603      	movls	r3, r0
 80a83d6:	1c43      	addhi	r3, r0, #1
 80a83d8:	7013      	strb	r3, [r2, #0]
 80a83da:	4770      	bx	lr

080a83dc <_ZL5sub32PmmPa>:
}

static inline void sub32( uint32_t *dst, uint32_t src, signed char *carry )
{
    *carry -= ( *dst < src );
 80a83dc:	6803      	ldr	r3, [r0, #0]
    *dst += src;
    *carry += ( *dst < src );
}

static inline void sub32( uint32_t *dst, uint32_t src, signed char *carry )
{
 80a83de:	b510      	push	{r4, lr}
    *carry -= ( *dst < src );
 80a83e0:	7814      	ldrb	r4, [r2, #0]
 80a83e2:	428b      	cmp	r3, r1
 80a83e4:	bf38      	it	cc
 80a83e6:	3c01      	subcc	r4, #1
 80a83e8:	7014      	strb	r4, [r2, #0]
    *dst -= src;
 80a83ea:	6803      	ldr	r3, [r0, #0]
 80a83ec:	1a5b      	subs	r3, r3, r1
 80a83ee:	6003      	str	r3, [r0, #0]
 80a83f0:	bd10      	pop	{r4, pc}

080a83f2 <_ZL12ecp_mod_p256P11mbedtls_mpi>:
#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
/*
 * Fast quasi-reduction modulo p256 (FIPS 186-3 D.2.3)
 */
static int ecp_mod_p256( mbedtls_mpi *N )
{
 80a83f2:	b530      	push	{r4, r5, lr}
 80a83f4:	4604      	mov	r4, r0
 80a83f6:	b08f      	sub	sp, #60	; 0x3c
    INIT( 256 );
 80a83f8:	2301      	movs	r3, #1
 80a83fa:	2100      	movs	r1, #0
 80a83fc:	9302      	str	r3, [sp, #8]
 80a83fe:	a805      	add	r0, sp, #20
 80a8400:	2309      	movs	r3, #9
 80a8402:	2224      	movs	r2, #36	; 0x24
 80a8404:	f88d 1003 	strb.w	r1, [sp, #3]
 80a8408:	9303      	str	r3, [sp, #12]
 80a840a:	9004      	str	r0, [sp, #16]
 80a840c:	f00a fa19 	bl	80b2842 <memset>
 80a8410:	2110      	movs	r1, #16
 80a8412:	4620      	mov	r0, r4
 80a8414:	f003 fe79 	bl	80ac10a <mbedtls_mpi_grow>
 80a8418:	4605      	mov	r5, r0
 80a841a:	2800      	cmp	r0, #0
 80a841c:	f040 824d 	bne.w	80a88ba <_ZL12ecp_mod_p256P11mbedtls_mpi+0x4c8>
 80a8420:	68a3      	ldr	r3, [r4, #8]

    ADD(  8 ); ADD(  9 );
 80a8422:	a801      	add	r0, sp, #4
/*
 * Fast quasi-reduction modulo p256 (FIPS 186-3 D.2.3)
 */
static int ecp_mod_p256( mbedtls_mpi *N )
{
    INIT( 256 );
 80a8424:	681a      	ldr	r2, [r3, #0]

    ADD(  8 ); ADD(  9 );
 80a8426:	6a19      	ldr	r1, [r3, #32]
/*
 * Fast quasi-reduction modulo p256 (FIPS 186-3 D.2.3)
 */
static int ecp_mod_p256( mbedtls_mpi *N )
{
    INIT( 256 );
 80a8428:	9201      	str	r2, [sp, #4]

    ADD(  8 ); ADD(  9 );
 80a842a:	f10d 0203 	add.w	r2, sp, #3
 80a842e:	f7ff ffcb 	bl	80a83c8 <_ZL5add32PmmPa>
 80a8432:	68a3      	ldr	r3, [r4, #8]
 80a8434:	f10d 0203 	add.w	r2, sp, #3
 80a8438:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80a843a:	a801      	add	r0, sp, #4
 80a843c:	f7ff ffc4 	bl	80a83c8 <_ZL5add32PmmPa>
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
 80a8440:	68a3      	ldr	r3, [r4, #8]
 80a8442:	f10d 0203 	add.w	r2, sp, #3
 80a8446:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80a8448:	a801      	add	r0, sp, #4
 80a844a:	f7ff ffc7 	bl	80a83dc <_ZL5sub32PmmPa>
 80a844e:	68a3      	ldr	r3, [r4, #8]
 80a8450:	f10d 0203 	add.w	r2, sp, #3
 80a8454:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80a8456:	a801      	add	r0, sp, #4
 80a8458:	f7ff ffc0 	bl	80a83dc <_ZL5sub32PmmPa>
 80a845c:	68a3      	ldr	r3, [r4, #8]
 80a845e:	f10d 0203 	add.w	r2, sp, #3
 80a8462:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80a8464:	a801      	add	r0, sp, #4
 80a8466:	f7ff ffb9 	bl	80a83dc <_ZL5sub32PmmPa>
 80a846a:	68a3      	ldr	r3, [r4, #8]
 80a846c:	f10d 0203 	add.w	r2, sp, #3
 80a8470:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80a8472:	a801      	add	r0, sp, #4
 80a8474:	f7ff ffb2 	bl	80a83dc <_ZL5sub32PmmPa>
 80a8478:	9a01      	ldr	r2, [sp, #4]
 80a847a:	68a3      	ldr	r3, [r4, #8]
 80a847c:	601a      	str	r2, [r3, #0]
 80a847e:	68a3      	ldr	r3, [r4, #8]
 80a8480:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80a8484:	685b      	ldr	r3, [r3, #4]
 80a8486:	2900      	cmp	r1, #0
 80a8488:	9301      	str	r3, [sp, #4]
 80a848a:	f88d 5003 	strb.w	r5, [sp, #3]
 80a848e:	f10d 0203 	add.w	r2, sp, #3
 80a8492:	da04      	bge.n	80a849e <_ZL12ecp_mod_p256P11mbedtls_mpi+0xac>
 80a8494:	4249      	negs	r1, r1
 80a8496:	a801      	add	r0, sp, #4
 80a8498:	f7ff ffa0 	bl	80a83dc <_ZL5sub32PmmPa>
 80a849c:	e002      	b.n	80a84a4 <_ZL12ecp_mod_p256P11mbedtls_mpi+0xb2>
 80a849e:	a801      	add	r0, sp, #4
 80a84a0:	f7ff ff92 	bl	80a83c8 <_ZL5add32PmmPa>

    ADD(  9 ); ADD( 10 );
 80a84a4:	68a3      	ldr	r3, [r4, #8]
 80a84a6:	f10d 0203 	add.w	r2, sp, #3
 80a84aa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80a84ac:	a801      	add	r0, sp, #4
 80a84ae:	f7ff ff8b 	bl	80a83c8 <_ZL5add32PmmPa>
 80a84b2:	68a3      	ldr	r3, [r4, #8]
 80a84b4:	f10d 0203 	add.w	r2, sp, #3
 80a84b8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80a84ba:	a801      	add	r0, sp, #4
 80a84bc:	f7ff ff84 	bl	80a83c8 <_ZL5add32PmmPa>
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
 80a84c0:	68a3      	ldr	r3, [r4, #8]
 80a84c2:	f10d 0203 	add.w	r2, sp, #3
 80a84c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80a84c8:	a801      	add	r0, sp, #4
 80a84ca:	f7ff ff87 	bl	80a83dc <_ZL5sub32PmmPa>
 80a84ce:	68a3      	ldr	r3, [r4, #8]
 80a84d0:	f10d 0203 	add.w	r2, sp, #3
 80a84d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80a84d6:	a801      	add	r0, sp, #4
 80a84d8:	f7ff ff80 	bl	80a83dc <_ZL5sub32PmmPa>
 80a84dc:	68a3      	ldr	r3, [r4, #8]
 80a84de:	f10d 0203 	add.w	r2, sp, #3
 80a84e2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80a84e4:	a801      	add	r0, sp, #4
 80a84e6:	f7ff ff79 	bl	80a83dc <_ZL5sub32PmmPa>
 80a84ea:	68a3      	ldr	r3, [r4, #8]
 80a84ec:	f10d 0203 	add.w	r2, sp, #3
 80a84f0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80a84f2:	a801      	add	r0, sp, #4
 80a84f4:	f7ff ff72 	bl	80a83dc <_ZL5sub32PmmPa>
 80a84f8:	9a01      	ldr	r2, [sp, #4]
 80a84fa:	68a3      	ldr	r3, [r4, #8]
 80a84fc:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80a8500:	605a      	str	r2, [r3, #4]
 80a8502:	68a3      	ldr	r3, [r4, #8]
 80a8504:	f10d 0203 	add.w	r2, sp, #3
 80a8508:	689b      	ldr	r3, [r3, #8]
 80a850a:	9301      	str	r3, [sp, #4]
 80a850c:	2300      	movs	r3, #0
 80a850e:	4299      	cmp	r1, r3
 80a8510:	f88d 3003 	strb.w	r3, [sp, #3]
 80a8514:	da04      	bge.n	80a8520 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x12e>
 80a8516:	4249      	negs	r1, r1
 80a8518:	a801      	add	r0, sp, #4
 80a851a:	f7ff ff5f 	bl	80a83dc <_ZL5sub32PmmPa>
 80a851e:	e002      	b.n	80a8526 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x134>
 80a8520:	a801      	add	r0, sp, #4
 80a8522:	f7ff ff51 	bl	80a83c8 <_ZL5add32PmmPa>

    ADD( 10 ); ADD( 11 );
 80a8526:	68a3      	ldr	r3, [r4, #8]
 80a8528:	f10d 0203 	add.w	r2, sp, #3
 80a852c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80a852e:	a801      	add	r0, sp, #4
 80a8530:	f7ff ff4a 	bl	80a83c8 <_ZL5add32PmmPa>
 80a8534:	68a3      	ldr	r3, [r4, #8]
 80a8536:	f10d 0203 	add.w	r2, sp, #3
 80a853a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80a853c:	a801      	add	r0, sp, #4
 80a853e:	f7ff ff43 	bl	80a83c8 <_ZL5add32PmmPa>
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
 80a8542:	68a3      	ldr	r3, [r4, #8]
 80a8544:	f10d 0203 	add.w	r2, sp, #3
 80a8548:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80a854a:	a801      	add	r0, sp, #4
 80a854c:	f7ff ff46 	bl	80a83dc <_ZL5sub32PmmPa>
 80a8550:	68a3      	ldr	r3, [r4, #8]
 80a8552:	f10d 0203 	add.w	r2, sp, #3
 80a8556:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80a8558:	a801      	add	r0, sp, #4
 80a855a:	f7ff ff3f 	bl	80a83dc <_ZL5sub32PmmPa>
 80a855e:	68a3      	ldr	r3, [r4, #8]
 80a8560:	f10d 0203 	add.w	r2, sp, #3
 80a8564:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80a8566:	a801      	add	r0, sp, #4
 80a8568:	f7ff ff38 	bl	80a83dc <_ZL5sub32PmmPa>
 80a856c:	9a01      	ldr	r2, [sp, #4]
 80a856e:	68a3      	ldr	r3, [r4, #8]
 80a8570:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80a8574:	609a      	str	r2, [r3, #8]
 80a8576:	68a3      	ldr	r3, [r4, #8]
 80a8578:	f10d 0203 	add.w	r2, sp, #3
 80a857c:	68db      	ldr	r3, [r3, #12]
 80a857e:	9301      	str	r3, [sp, #4]
 80a8580:	2300      	movs	r3, #0
 80a8582:	4299      	cmp	r1, r3
 80a8584:	f88d 3003 	strb.w	r3, [sp, #3]
 80a8588:	da04      	bge.n	80a8594 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x1a2>
 80a858a:	4249      	negs	r1, r1
 80a858c:	a801      	add	r0, sp, #4
 80a858e:	f7ff ff25 	bl	80a83dc <_ZL5sub32PmmPa>
 80a8592:	e002      	b.n	80a859a <_ZL12ecp_mod_p256P11mbedtls_mpi+0x1a8>
 80a8594:	a801      	add	r0, sp, #4
 80a8596:	f7ff ff17 	bl	80a83c8 <_ZL5add32PmmPa>

    ADD( 11 ); ADD( 11 ); ADD( 12 ); ADD( 12 ); ADD( 13 );
 80a859a:	68a3      	ldr	r3, [r4, #8]
 80a859c:	f10d 0203 	add.w	r2, sp, #3
 80a85a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80a85a2:	a801      	add	r0, sp, #4
 80a85a4:	f7ff ff10 	bl	80a83c8 <_ZL5add32PmmPa>
 80a85a8:	68a3      	ldr	r3, [r4, #8]
 80a85aa:	f10d 0203 	add.w	r2, sp, #3
 80a85ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80a85b0:	a801      	add	r0, sp, #4
 80a85b2:	f7ff ff09 	bl	80a83c8 <_ZL5add32PmmPa>
 80a85b6:	68a3      	ldr	r3, [r4, #8]
 80a85b8:	f10d 0203 	add.w	r2, sp, #3
 80a85bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80a85be:	a801      	add	r0, sp, #4
 80a85c0:	f7ff ff02 	bl	80a83c8 <_ZL5add32PmmPa>
 80a85c4:	68a3      	ldr	r3, [r4, #8]
 80a85c6:	f10d 0203 	add.w	r2, sp, #3
 80a85ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80a85cc:	a801      	add	r0, sp, #4
 80a85ce:	f7ff fefb 	bl	80a83c8 <_ZL5add32PmmPa>
 80a85d2:	68a3      	ldr	r3, [r4, #8]
 80a85d4:	f10d 0203 	add.w	r2, sp, #3
 80a85d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80a85da:	a801      	add	r0, sp, #4
 80a85dc:	f7ff fef4 	bl	80a83c8 <_ZL5add32PmmPa>
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
 80a85e0:	68a3      	ldr	r3, [r4, #8]
 80a85e2:	f10d 0203 	add.w	r2, sp, #3
 80a85e6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80a85e8:	a801      	add	r0, sp, #4
 80a85ea:	f7ff fef7 	bl	80a83dc <_ZL5sub32PmmPa>
 80a85ee:	68a3      	ldr	r3, [r4, #8]
 80a85f0:	f10d 0203 	add.w	r2, sp, #3
 80a85f4:	6a19      	ldr	r1, [r3, #32]
 80a85f6:	a801      	add	r0, sp, #4
 80a85f8:	f7ff fef0 	bl	80a83dc <_ZL5sub32PmmPa>
 80a85fc:	68a3      	ldr	r3, [r4, #8]
 80a85fe:	f10d 0203 	add.w	r2, sp, #3
 80a8602:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80a8604:	a801      	add	r0, sp, #4
 80a8606:	f7ff fee9 	bl	80a83dc <_ZL5sub32PmmPa>
 80a860a:	9a01      	ldr	r2, [sp, #4]
 80a860c:	68a3      	ldr	r3, [r4, #8]
 80a860e:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80a8612:	60da      	str	r2, [r3, #12]
 80a8614:	68a3      	ldr	r3, [r4, #8]
 80a8616:	f10d 0203 	add.w	r2, sp, #3
 80a861a:	691b      	ldr	r3, [r3, #16]
 80a861c:	9301      	str	r3, [sp, #4]
 80a861e:	2300      	movs	r3, #0
 80a8620:	4299      	cmp	r1, r3
 80a8622:	f88d 3003 	strb.w	r3, [sp, #3]
 80a8626:	da04      	bge.n	80a8632 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x240>
 80a8628:	4249      	negs	r1, r1
 80a862a:	a801      	add	r0, sp, #4
 80a862c:	f7ff fed6 	bl	80a83dc <_ZL5sub32PmmPa>
 80a8630:	e002      	b.n	80a8638 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x246>
 80a8632:	a801      	add	r0, sp, #4
 80a8634:	f7ff fec8 	bl	80a83c8 <_ZL5add32PmmPa>

    ADD( 12 ); ADD( 12 ); ADD( 13 ); ADD( 13 ); ADD( 14 );
 80a8638:	68a3      	ldr	r3, [r4, #8]
 80a863a:	f10d 0203 	add.w	r2, sp, #3
 80a863e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80a8640:	a801      	add	r0, sp, #4
 80a8642:	f7ff fec1 	bl	80a83c8 <_ZL5add32PmmPa>
 80a8646:	68a3      	ldr	r3, [r4, #8]
 80a8648:	f10d 0203 	add.w	r2, sp, #3
 80a864c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80a864e:	a801      	add	r0, sp, #4
 80a8650:	f7ff feba 	bl	80a83c8 <_ZL5add32PmmPa>
 80a8654:	68a3      	ldr	r3, [r4, #8]
 80a8656:	f10d 0203 	add.w	r2, sp, #3
 80a865a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80a865c:	a801      	add	r0, sp, #4
 80a865e:	f7ff feb3 	bl	80a83c8 <_ZL5add32PmmPa>
 80a8662:	68a3      	ldr	r3, [r4, #8]
 80a8664:	f10d 0203 	add.w	r2, sp, #3
 80a8668:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80a866a:	a801      	add	r0, sp, #4
 80a866c:	f7ff feac 	bl	80a83c8 <_ZL5add32PmmPa>
 80a8670:	68a3      	ldr	r3, [r4, #8]
 80a8672:	f10d 0203 	add.w	r2, sp, #3
 80a8676:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80a8678:	a801      	add	r0, sp, #4
 80a867a:	f7ff fea5 	bl	80a83c8 <_ZL5add32PmmPa>
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
 80a867e:	68a3      	ldr	r3, [r4, #8]
 80a8680:	f10d 0203 	add.w	r2, sp, #3
 80a8684:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80a8686:	a801      	add	r0, sp, #4
 80a8688:	f7ff fea8 	bl	80a83dc <_ZL5sub32PmmPa>
 80a868c:	68a3      	ldr	r3, [r4, #8]
 80a868e:	f10d 0203 	add.w	r2, sp, #3
 80a8692:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80a8694:	a801      	add	r0, sp, #4
 80a8696:	f7ff fea1 	bl	80a83dc <_ZL5sub32PmmPa>
 80a869a:	9a01      	ldr	r2, [sp, #4]
 80a869c:	68a3      	ldr	r3, [r4, #8]
 80a869e:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80a86a2:	611a      	str	r2, [r3, #16]
 80a86a4:	68a3      	ldr	r3, [r4, #8]
 80a86a6:	f10d 0203 	add.w	r2, sp, #3
 80a86aa:	695b      	ldr	r3, [r3, #20]
 80a86ac:	9301      	str	r3, [sp, #4]
 80a86ae:	2300      	movs	r3, #0
 80a86b0:	4299      	cmp	r1, r3
 80a86b2:	f88d 3003 	strb.w	r3, [sp, #3]
 80a86b6:	da04      	bge.n	80a86c2 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x2d0>
 80a86b8:	4249      	negs	r1, r1
 80a86ba:	a801      	add	r0, sp, #4
 80a86bc:	f7ff fe8e 	bl	80a83dc <_ZL5sub32PmmPa>
 80a86c0:	e002      	b.n	80a86c8 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x2d6>
 80a86c2:	a801      	add	r0, sp, #4
 80a86c4:	f7ff fe80 	bl	80a83c8 <_ZL5add32PmmPa>

    ADD( 13 ); ADD( 13 ); ADD( 14 ); ADD( 14 ); ADD( 15 );
 80a86c8:	68a3      	ldr	r3, [r4, #8]
 80a86ca:	f10d 0203 	add.w	r2, sp, #3
 80a86ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80a86d0:	a801      	add	r0, sp, #4
 80a86d2:	f7ff fe79 	bl	80a83c8 <_ZL5add32PmmPa>
 80a86d6:	68a3      	ldr	r3, [r4, #8]
 80a86d8:	f10d 0203 	add.w	r2, sp, #3
 80a86dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80a86de:	a801      	add	r0, sp, #4
 80a86e0:	f7ff fe72 	bl	80a83c8 <_ZL5add32PmmPa>
 80a86e4:	68a3      	ldr	r3, [r4, #8]
 80a86e6:	f10d 0203 	add.w	r2, sp, #3
 80a86ea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80a86ec:	a801      	add	r0, sp, #4
 80a86ee:	f7ff fe6b 	bl	80a83c8 <_ZL5add32PmmPa>
 80a86f2:	68a3      	ldr	r3, [r4, #8]
 80a86f4:	f10d 0203 	add.w	r2, sp, #3
 80a86f8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80a86fa:	a801      	add	r0, sp, #4
 80a86fc:	f7ff fe64 	bl	80a83c8 <_ZL5add32PmmPa>
 80a8700:	68a3      	ldr	r3, [r4, #8]
 80a8702:	f10d 0203 	add.w	r2, sp, #3
 80a8706:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80a8708:	a801      	add	r0, sp, #4
 80a870a:	f7ff fe5d 	bl	80a83c8 <_ZL5add32PmmPa>
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
 80a870e:	68a3      	ldr	r3, [r4, #8]
 80a8710:	f10d 0203 	add.w	r2, sp, #3
 80a8714:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80a8716:	a801      	add	r0, sp, #4
 80a8718:	f7ff fe60 	bl	80a83dc <_ZL5sub32PmmPa>
 80a871c:	68a3      	ldr	r3, [r4, #8]
 80a871e:	f10d 0203 	add.w	r2, sp, #3
 80a8722:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80a8724:	a801      	add	r0, sp, #4
 80a8726:	f7ff fe59 	bl	80a83dc <_ZL5sub32PmmPa>
 80a872a:	9a01      	ldr	r2, [sp, #4]
 80a872c:	68a3      	ldr	r3, [r4, #8]
 80a872e:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80a8732:	615a      	str	r2, [r3, #20]
 80a8734:	68a3      	ldr	r3, [r4, #8]
 80a8736:	f10d 0203 	add.w	r2, sp, #3
 80a873a:	699b      	ldr	r3, [r3, #24]
 80a873c:	9301      	str	r3, [sp, #4]
 80a873e:	2300      	movs	r3, #0
 80a8740:	4299      	cmp	r1, r3
 80a8742:	f88d 3003 	strb.w	r3, [sp, #3]
 80a8746:	da04      	bge.n	80a8752 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x360>
 80a8748:	4249      	negs	r1, r1
 80a874a:	a801      	add	r0, sp, #4
 80a874c:	f7ff fe46 	bl	80a83dc <_ZL5sub32PmmPa>
 80a8750:	e002      	b.n	80a8758 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x366>
 80a8752:	a801      	add	r0, sp, #4
 80a8754:	f7ff fe38 	bl	80a83c8 <_ZL5add32PmmPa>

    ADD( 14 ); ADD( 14 ); ADD( 15 ); ADD( 15 ); ADD( 14 ); ADD( 13 );
 80a8758:	68a3      	ldr	r3, [r4, #8]
 80a875a:	f10d 0203 	add.w	r2, sp, #3
 80a875e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80a8760:	a801      	add	r0, sp, #4
 80a8762:	f7ff fe31 	bl	80a83c8 <_ZL5add32PmmPa>
 80a8766:	68a3      	ldr	r3, [r4, #8]
 80a8768:	f10d 0203 	add.w	r2, sp, #3
 80a876c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80a876e:	a801      	add	r0, sp, #4
 80a8770:	f7ff fe2a 	bl	80a83c8 <_ZL5add32PmmPa>
 80a8774:	68a3      	ldr	r3, [r4, #8]
 80a8776:	f10d 0203 	add.w	r2, sp, #3
 80a877a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80a877c:	a801      	add	r0, sp, #4
 80a877e:	f7ff fe23 	bl	80a83c8 <_ZL5add32PmmPa>
 80a8782:	68a3      	ldr	r3, [r4, #8]
 80a8784:	f10d 0203 	add.w	r2, sp, #3
 80a8788:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80a878a:	a801      	add	r0, sp, #4
 80a878c:	f7ff fe1c 	bl	80a83c8 <_ZL5add32PmmPa>
 80a8790:	68a3      	ldr	r3, [r4, #8]
 80a8792:	f10d 0203 	add.w	r2, sp, #3
 80a8796:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80a8798:	a801      	add	r0, sp, #4
 80a879a:	f7ff fe15 	bl	80a83c8 <_ZL5add32PmmPa>
 80a879e:	68a3      	ldr	r3, [r4, #8]
 80a87a0:	f10d 0203 	add.w	r2, sp, #3
 80a87a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80a87a6:	a801      	add	r0, sp, #4
 80a87a8:	f7ff fe0e 	bl	80a83c8 <_ZL5add32PmmPa>
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
 80a87ac:	68a3      	ldr	r3, [r4, #8]
 80a87ae:	f10d 0203 	add.w	r2, sp, #3
 80a87b2:	6a19      	ldr	r1, [r3, #32]
 80a87b4:	a801      	add	r0, sp, #4
 80a87b6:	f7ff fe11 	bl	80a83dc <_ZL5sub32PmmPa>
 80a87ba:	68a3      	ldr	r3, [r4, #8]
 80a87bc:	f10d 0203 	add.w	r2, sp, #3
 80a87c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80a87c2:	a801      	add	r0, sp, #4
 80a87c4:	f7ff fe0a 	bl	80a83dc <_ZL5sub32PmmPa>
 80a87c8:	9a01      	ldr	r2, [sp, #4]
 80a87ca:	68a3      	ldr	r3, [r4, #8]
 80a87cc:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80a87d0:	619a      	str	r2, [r3, #24]
 80a87d2:	68a3      	ldr	r3, [r4, #8]
 80a87d4:	f10d 0203 	add.w	r2, sp, #3
 80a87d8:	69db      	ldr	r3, [r3, #28]
 80a87da:	9301      	str	r3, [sp, #4]
 80a87dc:	2300      	movs	r3, #0
 80a87de:	4299      	cmp	r1, r3
 80a87e0:	f88d 3003 	strb.w	r3, [sp, #3]
 80a87e4:	da04      	bge.n	80a87f0 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x3fe>
 80a87e6:	4249      	negs	r1, r1
 80a87e8:	a801      	add	r0, sp, #4
 80a87ea:	f7ff fdf7 	bl	80a83dc <_ZL5sub32PmmPa>
 80a87ee:	e002      	b.n	80a87f6 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x404>
 80a87f0:	a801      	add	r0, sp, #4
 80a87f2:	f7ff fde9 	bl	80a83c8 <_ZL5add32PmmPa>

    ADD( 15 ); ADD( 15 ); ADD( 15 ); ADD( 8 );
 80a87f6:	68a3      	ldr	r3, [r4, #8]
 80a87f8:	f10d 0203 	add.w	r2, sp, #3
 80a87fc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80a87fe:	a801      	add	r0, sp, #4
 80a8800:	f7ff fde2 	bl	80a83c8 <_ZL5add32PmmPa>
 80a8804:	68a3      	ldr	r3, [r4, #8]
 80a8806:	f10d 0203 	add.w	r2, sp, #3
 80a880a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80a880c:	a801      	add	r0, sp, #4
 80a880e:	f7ff fddb 	bl	80a83c8 <_ZL5add32PmmPa>
 80a8812:	68a3      	ldr	r3, [r4, #8]
 80a8814:	f10d 0203 	add.w	r2, sp, #3
 80a8818:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80a881a:	a801      	add	r0, sp, #4
 80a881c:	f7ff fdd4 	bl	80a83c8 <_ZL5add32PmmPa>
 80a8820:	68a3      	ldr	r3, [r4, #8]
 80a8822:	f10d 0203 	add.w	r2, sp, #3
 80a8826:	6a19      	ldr	r1, [r3, #32]
 80a8828:	a801      	add	r0, sp, #4
 80a882a:	f7ff fdcd 	bl	80a83c8 <_ZL5add32PmmPa>
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
 80a882e:	68a3      	ldr	r3, [r4, #8]
 80a8830:	f10d 0203 	add.w	r2, sp, #3
 80a8834:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80a8836:	a801      	add	r0, sp, #4
 80a8838:	f7ff fdd0 	bl	80a83dc <_ZL5sub32PmmPa>
 80a883c:	68a3      	ldr	r3, [r4, #8]
 80a883e:	f10d 0203 	add.w	r2, sp, #3
 80a8842:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80a8844:	a801      	add	r0, sp, #4
 80a8846:	f7ff fdc9 	bl	80a83dc <_ZL5sub32PmmPa>
 80a884a:	68a3      	ldr	r3, [r4, #8]
 80a884c:	f10d 0203 	add.w	r2, sp, #3
 80a8850:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80a8852:	a801      	add	r0, sp, #4
 80a8854:	f7ff fdc2 	bl	80a83dc <_ZL5sub32PmmPa>
 80a8858:	68a3      	ldr	r3, [r4, #8]
 80a885a:	f10d 0203 	add.w	r2, sp, #3
 80a885e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80a8860:	a801      	add	r0, sp, #4
 80a8862:	f7ff fdbb 	bl	80a83dc <_ZL5sub32PmmPa>
 80a8866:	68a3      	ldr	r3, [r4, #8]
 80a8868:	9a01      	ldr	r2, [sp, #4]
 80a886a:	61da      	str	r2, [r3, #28]
 80a886c:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 80a8870:	68a2      	ldr	r2, [r4, #8]
 80a8872:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80a8876:	6213      	str	r3, [r2, #32]
 80a8878:	2300      	movs	r3, #0
 80a887a:	9301      	str	r3, [sp, #4]
 80a887c:	2308      	movs	r3, #8
 80a887e:	6862      	ldr	r2, [r4, #4]
 80a8880:	3301      	adds	r3, #1
 80a8882:	4293      	cmp	r3, r2
 80a8884:	d204      	bcs.n	80a8890 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x49e>
 80a8886:	68a2      	ldr	r2, [r4, #8]
 80a8888:	9901      	ldr	r1, [sp, #4]
 80a888a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80a888e:	e7f6      	b.n	80a887e <_ZL12ecp_mod_p256P11mbedtls_mpi+0x48c>
 80a8890:	f99d 2003 	ldrsb.w	r2, [sp, #3]
 80a8894:	2a00      	cmp	r2, #0
 80a8896:	da10      	bge.n	80a88ba <_ZL12ecp_mod_p256P11mbedtls_mpi+0x4c8>
#else
    if( bits == 224 )
        C->p[ C->n - 1 ] = ((mbedtls_mpi_uint) -c) << 32;
    else
#endif
        C->p[ C->n - 1 ] = (mbedtls_mpi_uint) -c;
 80a8898:	9b03      	ldr	r3, [sp, #12]
 80a889a:	9904      	ldr	r1, [sp, #16]
 80a889c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80a88a0:	4252      	negs	r2, r2
 80a88a2:	3b01      	subs	r3, #1
 80a88a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* N = - ( C - N ) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, C, N ) );
 80a88a8:	4620      	mov	r0, r4
 80a88aa:	4622      	mov	r2, r4
 80a88ac:	a902      	add	r1, sp, #8
 80a88ae:	f003 ffb0 	bl	80ac812 <mbedtls_mpi_sub_abs>
 80a88b2:	b910      	cbnz	r0, 80a88ba <_ZL12ecp_mod_p256P11mbedtls_mpi+0x4c8>
    N->s = -1;
 80a88b4:	f04f 33ff 	mov.w	r3, #4294967295
 80a88b8:	6023      	str	r3, [r4, #0]
    ADD( 15 ); ADD( 15 ); ADD( 15 ); ADD( 8 );
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7

cleanup:
    return( ret );
}
 80a88ba:	4628      	mov	r0, r5
 80a88bc:	b00f      	add	sp, #60	; 0x3c
 80a88be:	bd30      	pop	{r4, r5, pc}

080a88c0 <mbedtls_ecp_group_load>:

/*
 * Set a group using well-known domain parameters
 */
int mbedtls_ecp_group_load( mbedtls_ecp_group *grp, mbedtls_ecp_group_id id )
{
 80a88c0:	b538      	push	{r3, r4, r5, lr}
 80a88c2:	460d      	mov	r5, r1
 80a88c4:	4604      	mov	r4, r0
    ECP_VALIDATE_RET( grp != NULL );
    mbedtls_ecp_group_free( grp );
 80a88c6:	f7fb fc08 	bl	80a40da <mbedtls_ecp_group_free>

    grp->id = id;

    switch( id )
 80a88ca:	2d03      	cmp	r5, #3
int mbedtls_ecp_group_load( mbedtls_ecp_group *grp, mbedtls_ecp_group_id id )
{
    ECP_VALIDATE_RET( grp != NULL );
    mbedtls_ecp_group_free( grp );

    grp->id = id;
 80a88cc:	7025      	strb	r5, [r4, #0]

    switch( id )
 80a88ce:	d127      	bne.n	80a8920 <mbedtls_ecp_group_load+0x60>
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
    X->n = len / sizeof( mbedtls_mpi_uint );
    X->p = (mbedtls_mpi_uint *) p;
 80a88d0:	4a16      	ldr	r2, [pc, #88]	; (80a892c <mbedtls_ecp_group_load+0x6c>)
            return( LOAD_GROUP( secp224r1 ) );
#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP256R1:
            NIST_MODP( p256 );
 80a88d2:	4b17      	ldr	r3, [pc, #92]	; (80a8930 <mbedtls_ecp_group_load+0x70>)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
    X->n = len / sizeof( mbedtls_mpi_uint );
    X->p = (mbedtls_mpi_uint *) p;
 80a88d4:	60e2      	str	r2, [r4, #12]
 80a88d6:	4a17      	ldr	r2, [pc, #92]	; (80a8934 <mbedtls_ecp_group_load+0x74>)
            return( LOAD_GROUP( secp224r1 ) );
#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP256R1:
            NIST_MODP( p256 );
 80a88d8:	6663      	str	r3, [r4, #100]	; 0x64
 * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
    X->n = len / sizeof( mbedtls_mpi_uint );
 80a88da:	2308      	movs	r3, #8
 80a88dc:	60a3      	str	r3, [r4, #8]
 80a88de:	6223      	str	r3, [r4, #32]
    X->p = (mbedtls_mpi_uint *) p;
 80a88e0:	6262      	str	r2, [r4, #36]	; 0x24
 * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
    X->n = len / sizeof( mbedtls_mpi_uint );
 80a88e2:	6523      	str	r3, [r4, #80]	; 0x50
 80a88e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80a88e6:	63a3      	str	r3, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
 80a88e8:	4a13      	ldr	r2, [pc, #76]	; (80a8938 <mbedtls_ecp_group_load+0x78>)
 80a88ea:	4b14      	ldr	r3, [pc, #80]	; (80a893c <mbedtls_ecp_group_load+0x7c>)
 80a88ec:	6562      	str	r2, [r4, #84]	; 0x54
 80a88ee:	63e3      	str	r3, [r4, #60]	; 0x3c
 80a88f0:	4a13      	ldr	r2, [pc, #76]	; (80a8940 <mbedtls_ecp_group_load+0x80>)
static inline void ecp_mpi_set1( mbedtls_mpi *X )
{
    static mbedtls_mpi_uint one[] = { 1 };
    X->s = 1;
    X->n = 1;
    X->p = one;
 80a88f2:	4b14      	ldr	r3, [pc, #80]	; (80a8944 <mbedtls_ecp_group_load+0x84>)
 * Create an MPI from embedded constants
 * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
 80a88f4:	2501      	movs	r5, #1
    X->n = len / sizeof( mbedtls_mpi_uint );
    X->p = (mbedtls_mpi_uint *) p;
 80a88f6:	6322      	str	r2, [r4, #48]	; 0x30
static inline void ecp_mpi_set1( mbedtls_mpi *X )
{
    static mbedtls_mpi_uint one[] = { 1 };
    X->s = 1;
    X->n = 1;
    X->p = one;
 80a88f8:	64a3      	str	r3, [r4, #72]	; 0x48
 * Create an MPI from embedded constants
 * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
    X->s = 1;
 80a88fa:	6065      	str	r5, [r4, #4]
 80a88fc:	61e5      	str	r5, [r4, #28]
 80a88fe:	64e5      	str	r5, [r4, #76]	; 0x4c
 80a8900:	62a5      	str	r5, [r4, #40]	; 0x28
 80a8902:	6365      	str	r5, [r4, #52]	; 0x34
 * Set an MPI to static value 1
 */
static inline void ecp_mpi_set1( mbedtls_mpi *X )
{
    static mbedtls_mpi_uint one[] = { 1 };
    X->s = 1;
 80a8904:	6425      	str	r5, [r4, #64]	; 0x40
    X->n = 1;
 80a8906:	6465      	str	r5, [r4, #68]	; 0x44

    ecp_mpi_load( &grp->G.X, gx, gxlen );
    ecp_mpi_load( &grp->G.Y, gy, gylen );
    ecp_mpi_set1( &grp->G.Z );

    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 80a8908:	1d20      	adds	r0, r4, #4
 80a890a:	f003 fd0d 	bl	80ac328 <mbedtls_mpi_bitlen>
 80a890e:	65a0      	str	r0, [r4, #88]	; 0x58
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
 80a8910:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80a8914:	f003 fd08 	bl	80ac328 <mbedtls_mpi_bitlen>

    grp->h = 1;
 80a8918:	6625      	str	r5, [r4, #96]	; 0x60
    ecp_mpi_load( &grp->G.X, gx, gxlen );
    ecp_mpi_load( &grp->G.Y, gy, gylen );
    ecp_mpi_set1( &grp->G.Z );

    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
 80a891a:	65e0      	str	r0, [r4, #92]	; 0x5c
#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP256R1:
            NIST_MODP( p256 );
            return( LOAD_GROUP( secp256r1 ) );
 80a891c:	2000      	movs	r0, #0
 80a891e:	bd38      	pop	{r3, r4, r5, pc}
            grp->modp = ecp_mod_p448;
            return( ecp_use_curve448( grp ) );
#endif /* MBEDTLS_ECP_DP_CURVE448_ENABLED */

        default:
            mbedtls_ecp_group_free( grp );
 80a8920:	4620      	mov	r0, r4
 80a8922:	f7fb fbda 	bl	80a40da <mbedtls_ecp_group_free>
            return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 80a8926:	4808      	ldr	r0, [pc, #32]	; (80a8948 <mbedtls_ecp_group_load+0x88>)
    }
}
 80a8928:	bd38      	pop	{r3, r4, r5, pc}
 80a892a:	bf00      	nop
 80a892c:	080b4f5c 	.word	0x080b4f5c
 80a8930:	080a83f3 	.word	0x080a83f3
 80a8934:	080b4f1c 	.word	0x080b4f1c
 80a8938:	080b4f3c 	.word	0x080b4f3c
 80a893c:	080b4f9c 	.word	0x080b4f9c
 80a8940:	080b4f7c 	.word	0x080b4f7c
 80a8944:	20000004 	.word	0x20000004
 80a8948:	ffffb180 	.word	0xffffb180

080a894c <_ZL15x509_memcasecmpPKvS0_j>:

/*
 * Like memcmp, but case-insensitive and always returns -1 if different
 */
static int x509_memcasecmp( const void *s1, const void *s2, size_t len )
{
 80a894c:	b530      	push	{r4, r5, lr}
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = (const unsigned char *)s1, *n2 = (const unsigned char *)s2;

    for( i = 0; i < len; i++ )
 80a894e:	2400      	movs	r4, #0
 80a8950:	4294      	cmp	r4, r2
 80a8952:	d00c      	beq.n	80a896e <_ZL15x509_memcasecmpPKvS0_j+0x22>
    {
        diff = n1[i] ^ n2[i];
 80a8954:	5d03      	ldrb	r3, [r0, r4]
 80a8956:	5d0d      	ldrb	r5, [r1, r4]

        if( diff == 0 )
 80a8958:	405d      	eors	r5, r3
 80a895a:	d006      	beq.n	80a896a <_ZL15x509_memcasecmpPKvS0_j+0x1e>
            continue;

        if( diff == 32 &&
 80a895c:	2d20      	cmp	r5, #32
 80a895e:	d108      	bne.n	80a8972 <_ZL15x509_memcasecmpPKvS0_j+0x26>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 80a8960:	f023 0320 	bic.w	r3, r3, #32
 80a8964:	3b41      	subs	r3, #65	; 0x41
 80a8966:	2b19      	cmp	r3, #25
 80a8968:	d803      	bhi.n	80a8972 <_ZL15x509_memcasecmpPKvS0_j+0x26>
{
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = (const unsigned char *)s1, *n2 = (const unsigned char *)s2;

    for( i = 0; i < len; i++ )
 80a896a:	3401      	adds	r4, #1
 80a896c:	e7f0      	b.n	80a8950 <_ZL15x509_memcasecmpPKvS0_j+0x4>
        }

        return( -1 );
    }

    return( 0 );
 80a896e:	2000      	movs	r0, #0
 80a8970:	bd30      	pop	{r4, r5, pc}
              ( n1[i] >= 'A' && n1[i] <= 'Z' ) ) )
        {
            continue;
        }

        return( -1 );
 80a8972:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return( 0 );
}
 80a8976:	bd30      	pop	{r4, r5, pc}

080a8978 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>:
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
 80a8978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a897a:	4605      	mov	r5, r0
 80a897c:	460c      	mov	r4, r1
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
 80a897e:	b925      	cbnz	r5, 80a898a <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x12>
 80a8980:	1c20      	adds	r0, r4, #0
 80a8982:	bf18      	it	ne
 80a8984:	2001      	movne	r0, #1
 80a8986:	4240      	negs	r0, r0
 80a8988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        if( a == NULL || b == NULL )
 80a898a:	2c00      	cmp	r4, #0
 80a898c:	d031      	beq.n	80a89f2 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
 80a898e:	682a      	ldr	r2, [r5, #0]
 80a8990:	6823      	ldr	r3, [r4, #0]
 80a8992:	429a      	cmp	r2, r3
 80a8994:	d12d      	bne.n	80a89f2 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            a->oid.len != b->oid.len ||
 80a8996:	686a      	ldr	r2, [r5, #4]
    {
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
 80a8998:	6863      	ldr	r3, [r4, #4]
 80a899a:	429a      	cmp	r2, r3
 80a899c:	d129      	bne.n	80a89f2 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            a->oid.len != b->oid.len ||
            memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
 80a899e:	68a1      	ldr	r1, [r4, #8]
 80a89a0:	68a8      	ldr	r0, [r5, #8]
 80a89a2:	f009 ff19 	bl	80b27d8 <memcmp>
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
            a->oid.len != b->oid.len ||
 80a89a6:	bb20      	cbnz	r0, 80a89f2 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
 80a89a8:	68ef      	ldr	r7, [r5, #12]
 80a89aa:	68e6      	ldr	r6, [r4, #12]
 80a89ac:	42b7      	cmp	r7, r6
 80a89ae:	d108      	bne.n	80a89c2 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        a->len == b->len &&
 80a89b0:	692a      	ldr	r2, [r5, #16]
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
 80a89b2:	6923      	ldr	r3, [r4, #16]
 80a89b4:	429a      	cmp	r2, r3
 80a89b6:	d104      	bne.n	80a89c2 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        a->len == b->len &&
        memcmp( a->p, b->p, b->len ) == 0 )
 80a89b8:	6961      	ldr	r1, [r4, #20]
 80a89ba:	6968      	ldr	r0, [r5, #20]
 80a89bc:	f009 ff0c 	bl	80b27d8 <memcmp>
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
        a->len == b->len &&
 80a89c0:	b180      	cbz	r0, 80a89e4 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6c>
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        a->len == b->len &&
 80a89c2:	2f0c      	cmp	r7, #12
 80a89c4:	d001      	beq.n	80a89ca <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x52>
        memcmp( a->p, b->p, b->len ) == 0 )
    {
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 80a89c6:	2f13      	cmp	r7, #19
 80a89c8:	d113      	bne.n	80a89f2 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
 80a89ca:	2e0c      	cmp	r6, #12
 80a89cc:	d001      	beq.n	80a89d2 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x5a>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 80a89ce:	2e13      	cmp	r6, #19
 80a89d0:	d10f      	bne.n	80a89f2 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a->len == b->len &&
 80a89d2:	692a      	ldr	r2, [r5, #16]
    {
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 80a89d4:	6923      	ldr	r3, [r4, #16]
 80a89d6:	429a      	cmp	r2, r3
 80a89d8:	d10b      	bne.n	80a89f2 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a->len == b->len &&
        x509_memcasecmp( a->p, b->p, b->len ) == 0 )
 80a89da:	6961      	ldr	r1, [r4, #20]
 80a89dc:	6968      	ldr	r0, [r5, #20]
 80a89de:	f7ff ffb5 	bl	80a894c <_ZL15x509_memcasecmpPKvS0_j>
        {
            return( -1 );
        }

        /* value */
        if( x509_string_cmp( &a->val, &b->val ) != 0 )
 80a89e2:	b930      	cbnz	r0, 80a89f2 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        /* structure of the list of sets */
        if( a->next_merged != b->next_merged )
 80a89e4:	7f2a      	ldrb	r2, [r5, #28]
 80a89e6:	7f23      	ldrb	r3, [r4, #28]
 80a89e8:	429a      	cmp	r2, r3
 80a89ea:	d102      	bne.n	80a89f2 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        a = a->next;
 80a89ec:	69ad      	ldr	r5, [r5, #24]
        b = b->next;
 80a89ee:	69a4      	ldr	r4, [r4, #24]
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
 80a89f0:	e7c5      	b.n	80a897e <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6>
    {
        if( a == NULL || b == NULL )
            return( -1 );
 80a89f2:	f04f 30ff 	mov.w	r0, #4294967295
        b = b->next;
    }

    /* a == NULL == b */
    return( 0 );
}
 80a89f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a89f8 <_ZL25x509_profile_check_md_algPK24mbedtls_x509_crt_profile17mbedtls_md_type_t.isra.1>:
 * Return 0 if pk_alg is acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( pk_alg == MBEDTLS_PK_NONE )
 80a89f8:	b151      	cbz	r1, 80a8a10 <_ZL25x509_profile_check_md_algPK24mbedtls_x509_crt_profile17mbedtls_md_type_t.isra.1+0x18>
        return( -1 );

    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 80a89fa:	2301      	movs	r3, #1
 80a89fc:	3901      	subs	r1, #1
 80a89fe:	fa03 f101 	lsl.w	r1, r3, r1
 80a8a02:	6803      	ldr	r3, [r0, #0]
 80a8a04:	4219      	tst	r1, r3
 80a8a06:	bf0c      	ite	eq
 80a8a08:	f04f 30ff 	moveq.w	r0, #4294967295
 80a8a0c:	2000      	movne	r0, #0
 80a8a0e:	4770      	bx	lr
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( pk_alg == MBEDTLS_PK_NONE )
        return( -1 );
 80a8a10:	f04f 30ff 	mov.w	r0, #4294967295

    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
        return( 0 );

    return( -1 );
}
 80a8a14:	4770      	bx	lr

080a8a16 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>:
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
 80a8a16:	b570      	push	{r4, r5, r6, lr}
 80a8a18:	4615      	mov	r5, r2
    int ret;

    if( *p == end )
 80a8a1a:	6802      	ldr	r2, [r0, #0]
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
 80a8a1c:	4604      	mov	r4, r0
    int ret;

    if( *p == end )
 80a8a1e:	428a      	cmp	r2, r1
 80a8a20:	d101      	bne.n	80a8a26 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x10>
        return( 0 );
 80a8a22:	2000      	movs	r0, #0
 80a8a24:	bd70      	pop	{r4, r5, r6, pc}

    uid->tag = **p;
 80a8a26:	7816      	ldrb	r6, [r2, #0]
 80a8a28:	462a      	mov	r2, r5

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 80a8a2a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    int ret;

    if( *p == end )
        return( 0 );

    uid->tag = **p;
 80a8a2e:	f842 6b04 	str.w	r6, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 80a8a32:	f7f8 fe1b 	bl	80a166c <mbedtls_asn1_get_tag>
 80a8a36:	b128      	cbz	r0, 80a8a44 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x2e>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | n ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80a8a38:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80a8a3c:	d0f1      	beq.n	80a8a22 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0xc>
            return( 0 );

        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 80a8a3e:	f5a0 5006 	sub.w	r0, r0, #8576	; 0x2180
 80a8a42:	bd70      	pop	{r4, r5, r6, pc}
    }

    uid->p = *p;
 80a8a44:	6823      	ldr	r3, [r4, #0]
 80a8a46:	60ab      	str	r3, [r5, #8]
    *p += uid->len;
 80a8a48:	6822      	ldr	r2, [r4, #0]
 80a8a4a:	686b      	ldr	r3, [r5, #4]
 80a8a4c:	4413      	add	r3, r2
 80a8a4e:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 80a8a50:	bd70      	pop	{r4, r5, r6, pc}

080a8a52 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context>:
 * Check key against profile
 * Return 0 if pk is acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
                                   const mbedtls_pk_context *pk )
{
 80a8a52:	b538      	push	{r3, r4, r5, lr}
 80a8a54:	4604      	mov	r4, r0
    const mbedtls_pk_type_t pk_alg = mbedtls_pk_get_type( pk );
 80a8a56:	4608      	mov	r0, r1
 * Check key against profile
 * Return 0 if pk is acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
                                   const mbedtls_pk_context *pk )
{
 80a8a58:	460d      	mov	r5, r1
    const mbedtls_pk_type_t pk_alg = mbedtls_pk_get_type( pk );
 80a8a5a:	f001 fbb5 	bl	80aa1c8 <mbedtls_pk_get_type>

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 80a8a5e:	2801      	cmp	r0, #1
 80a8a60:	d001      	beq.n	80a8a66 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context+0x14>
 80a8a62:	2806      	cmp	r0, #6
 80a8a64:	d109      	bne.n	80a8a7a <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context+0x28>
    {
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
 80a8a66:	4628      	mov	r0, r5
 80a8a68:	f001 fb42 	bl	80aa0f0 <mbedtls_pk_get_bitlen>
 80a8a6c:	68e3      	ldr	r3, [r4, #12]
 80a8a6e:	4298      	cmp	r0, r3
 80a8a70:	f04f 30ff 	mov.w	r0, #4294967295
 80a8a74:	bf28      	it	cs
 80a8a76:	2000      	movcs	r0, #0
 80a8a78:	bd38      	pop	{r3, r4, r5, pc}
        return( -1 );
    }
#endif

#if defined(MBEDTLS_ECP_C)
    if( pk_alg == MBEDTLS_PK_ECDSA ||
 80a8a7a:	3802      	subs	r0, #2
 80a8a7c:	b2c0      	uxtb	r0, r0
 80a8a7e:	2802      	cmp	r0, #2
 80a8a80:	d80d      	bhi.n	80a8a9e <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context+0x4c>
        pk_alg == MBEDTLS_PK_ECKEY ||
        pk_alg == MBEDTLS_PK_ECKEY_DH )
    {
        const mbedtls_ecp_group_id gid = mbedtls_pk_ec( *pk )->grp.id;
 80a8a82:	686b      	ldr	r3, [r5, #4]
 80a8a84:	781b      	ldrb	r3, [r3, #0]

        if( gid == MBEDTLS_ECP_DP_NONE )
 80a8a86:	b153      	cbz	r3, 80a8a9e <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context+0x4c>
            return( -1 );

        if( ( profile->allowed_curves & MBEDTLS_X509_ID_FLAG( gid ) ) != 0 )
 80a8a88:	2201      	movs	r2, #1
 80a8a8a:	3b01      	subs	r3, #1
 80a8a8c:	fa02 f303 	lsl.w	r3, r2, r3
 80a8a90:	68a2      	ldr	r2, [r4, #8]
 80a8a92:	4213      	tst	r3, r2
 80a8a94:	bf0c      	ite	eq
 80a8a96:	f04f 30ff 	moveq.w	r0, #4294967295
 80a8a9a:	2000      	movne	r0, #0
 80a8a9c:	bd38      	pop	{r3, r4, r5, pc}

        return( -1 );
    }
#endif

    return( -1 );
 80a8a9e:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a8aa2:	bd38      	pop	{r3, r4, r5, pc}

080a8aa4 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj>:
/*
 * Check for CN match
 */
static int x509_crt_check_cn( const mbedtls_x509_buf *name,
                              const char *cn, size_t cn_len )
{
 80a8aa4:	b570      	push	{r4, r5, r6, lr}
    /* try exact match */
    if( name->len == cn_len &&
 80a8aa6:	6845      	ldr	r5, [r0, #4]
/*
 * Check for CN match
 */
static int x509_crt_check_cn( const mbedtls_x509_buf *name,
                              const char *cn, size_t cn_len )
{
 80a8aa8:	4606      	mov	r6, r0
    /* try exact match */
    if( name->len == cn_len &&
 80a8aaa:	4295      	cmp	r5, r2
/*
 * Check for CN match
 */
static int x509_crt_check_cn( const mbedtls_x509_buf *name,
                              const char *cn, size_t cn_len )
{
 80a8aac:	460c      	mov	r4, r1
    /* try exact match */
    if( name->len == cn_len &&
 80a8aae:	d104      	bne.n	80a8aba <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x16>
        x509_memcasecmp( cn, name->p, cn_len ) == 0 )
 80a8ab0:	6881      	ldr	r1, [r0, #8]
 80a8ab2:	4620      	mov	r0, r4
 80a8ab4:	f7ff ff4a 	bl	80a894c <_ZL15x509_memcasecmpPKvS0_j>
 */
static int x509_crt_check_cn( const mbedtls_x509_buf *name,
                              const char *cn, size_t cn_len )
{
    /* try exact match */
    if( name->len == cn_len &&
 80a8ab8:	b350      	cbz	r0, 80a8b10 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x6c>
 * Return 0 if name matches wildcard, -1 otherwise
 */
static int x509_check_wildcard( const char *cn, const mbedtls_x509_buf *name )
{
    size_t i;
    size_t cn_idx = 0, cn_len = strlen( cn );
 80a8aba:	4620      	mov	r0, r4
 80a8abc:	f009 ff12 	bl	80b28e4 <strlen>

    /* We can't have a match if there is no wildcard to match */
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
 80a8ac0:	2d02      	cmp	r5, #2
 80a8ac2:	d922      	bls.n	80a8b0a <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x66>
 80a8ac4:	68b3      	ldr	r3, [r6, #8]
 80a8ac6:	781a      	ldrb	r2, [r3, #0]
 80a8ac8:	2a2a      	cmp	r2, #42	; 0x2a
 80a8aca:	d11e      	bne.n	80a8b0a <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x66>
 80a8acc:	785a      	ldrb	r2, [r3, #1]
 80a8ace:	2a2e      	cmp	r2, #46	; 0x2e
 80a8ad0:	d11b      	bne.n	80a8b0a <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x66>
 80a8ad2:	2200      	movs	r2, #0
        return( -1 );

    for( i = 0; i < cn_len; ++i )
 80a8ad4:	4290      	cmp	r0, r2
 80a8ad6:	d013      	beq.n	80a8b00 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x5c>
    {
        if( cn[i] == '.' )
 80a8ad8:	4621      	mov	r1, r4
 80a8ada:	780e      	ldrb	r6, [r1, #0]
 80a8adc:	3401      	adds	r4, #1
 80a8ade:	2e2e      	cmp	r6, #46	; 0x2e
 80a8ae0:	d001      	beq.n	80a8ae6 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x42>

    /* We can't have a match if there is no wildcard to match */
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
        return( -1 );

    for( i = 0; i < cn_len; ++i )
 80a8ae2:	3201      	adds	r2, #1
 80a8ae4:	e7f6      	b.n	80a8ad4 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x30>
            cn_idx = i;
            break;
        }
    }

    if( cn_idx == 0 )
 80a8ae6:	b182      	cbz	r2, 80a8b0a <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x66>
        return( -1 );

    if( cn_len - cn_idx == name->len - 1 &&
 80a8ae8:	1a82      	subs	r2, r0, r2
 80a8aea:	3d01      	subs	r5, #1
 80a8aec:	42aa      	cmp	r2, r5
 80a8aee:	d107      	bne.n	80a8b00 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x5c>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
 80a8af0:	1c58      	adds	r0, r3, #1
 80a8af2:	f7ff ff2b 	bl	80a894c <_ZL15x509_memcasecmpPKvS0_j>
    }

    if( cn_idx == 0 )
        return( -1 );

    if( cn_len - cn_idx == name->len - 1 &&
 80a8af6:	3000      	adds	r0, #0
 80a8af8:	bf18      	it	ne
 80a8afa:	2001      	movne	r0, #1
 80a8afc:	4240      	negs	r0, r0
 80a8afe:	e001      	b.n	80a8b04 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x60>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
    {
        return( 0 );
    }

    return( -1 );
 80a8b00:	f04f 30ff 	mov.w	r0, #4294967295
    {
        return( 0 );
    }

    /* try wildcard match */
    if( x509_check_wildcard( cn, name ) == 0 )
 80a8b04:	4240      	negs	r0, r0
 80a8b06:	4240      	negs	r0, r0
 80a8b08:	bd70      	pop	{r4, r5, r6, pc}
    {
        return( 0 );
    }

    return( -1 );
 80a8b0a:	f04f 30ff 	mov.w	r0, #4294967295
 80a8b0e:	bd70      	pop	{r4, r5, r6, pc}
}
 80a8b10:	bd70      	pop	{r4, r5, r6, pc}
	...

080a8b14 <mbedtls_x509_crt_info>:
 */
#define BEFORE_COLON    18
#define BC              "18"
int mbedtls_x509_crt_info( char *buf, size_t size, const char *prefix,
                   const mbedtls_x509_crt *crt )
{
 80a8b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8b18:	4681      	mov	r9, r0
 80a8b1a:	b08d      	sub	sp, #52	; 0x34
 80a8b1c:	460f      	mov	r7, r1
 80a8b1e:	4690      	mov	r8, r2
    char key_size_str[BEFORE_COLON];

    p = buf;
    n = size;

    if( NULL == crt )
 80a8b20:	461e      	mov	r6, r3
 80a8b22:	b94b      	cbnz	r3, 80a8b38 <mbedtls_x509_crt_info+0x24>
    {
        ret = mbedtls_snprintf( p, n, "\nCertificate is uninitialised!\n" );
 80a8b24:	4aa7      	ldr	r2, [pc, #668]	; (80a8dc4 <mbedtls_x509_crt_info+0x2b0>)
 80a8b26:	f008 faff 	bl	80b1128 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a8b2a:	2800      	cmp	r0, #0
 80a8b2c:	f2c0 82ec 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8b30:	4287      	cmp	r7, r0
 80a8b32:	f200 82ea 	bhi.w	80a910a <mbedtls_x509_crt_info+0x5f6>
 80a8b36:	e2e7      	b.n	80a9108 <mbedtls_x509_crt_info+0x5f4>

        return( (int) ( size - n ) );
    }

    ret = mbedtls_snprintf( p, n, "%scert. version     : %d\n",
 80a8b38:	699b      	ldr	r3, [r3, #24]
 80a8b3a:	9300      	str	r3, [sp, #0]
 80a8b3c:	4613      	mov	r3, r2
 80a8b3e:	4aa2      	ldr	r2, [pc, #648]	; (80a8dc8 <mbedtls_x509_crt_info+0x2b4>)
 80a8b40:	f008 faf2 	bl	80b1128 <snprintf>
                               prefix, crt->version );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a8b44:	2800      	cmp	r0, #0
 80a8b46:	f2c0 82df 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8b4a:	4287      	cmp	r7, r0
 80a8b4c:	f240 82dc 	bls.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8b50:	1a3c      	subs	r4, r7, r0
 80a8b52:	4481      	add	r9, r0
    ret = mbedtls_snprintf( p, n, "%sserial number     : ",
 80a8b54:	4643      	mov	r3, r8
 80a8b56:	4a9d      	ldr	r2, [pc, #628]	; (80a8dcc <mbedtls_x509_crt_info+0x2b8>)
 80a8b58:	4621      	mov	r1, r4
 80a8b5a:	4648      	mov	r0, r9
 80a8b5c:	f008 fae4 	bl	80b1128 <snprintf>
                               prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a8b60:	2800      	cmp	r0, #0
 80a8b62:	f2c0 82d1 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8b66:	4284      	cmp	r4, r0
 80a8b68:	f240 82ce 	bls.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8b6c:	1a24      	subs	r4, r4, r0
 80a8b6e:	4481      	add	r9, r0

    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
 80a8b70:	f106 021c 	add.w	r2, r6, #28
 80a8b74:	4621      	mov	r1, r4
 80a8b76:	4648      	mov	r0, r9
 80a8b78:	f7f9 fa3c 	bl	80a1ff4 <mbedtls_x509_serial_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a8b7c:	2800      	cmp	r0, #0
 80a8b7e:	f2c0 82c3 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8b82:	4284      	cmp	r4, r0
 80a8b84:	f240 82c0 	bls.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8b88:	1a24      	subs	r4, r4, r0
 80a8b8a:	4481      	add	r9, r0

    ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
 80a8b8c:	4643      	mov	r3, r8
 80a8b8e:	4a90      	ldr	r2, [pc, #576]	; (80a8dd0 <mbedtls_x509_crt_info+0x2bc>)
 80a8b90:	4621      	mov	r1, r4
 80a8b92:	4648      	mov	r0, r9
 80a8b94:	f008 fac8 	bl	80b1128 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a8b98:	2800      	cmp	r0, #0
 80a8b9a:	f2c0 82b5 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8b9e:	4284      	cmp	r4, r0
 80a8ba0:	f240 82b2 	bls.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8ba4:	1a24      	subs	r4, r4, r0
 80a8ba6:	4481      	add	r9, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
 80a8ba8:	f106 024c 	add.w	r2, r6, #76	; 0x4c
 80a8bac:	4621      	mov	r1, r4
 80a8bae:	4648      	mov	r0, r9
 80a8bb0:	f7f9 f99e 	bl	80a1ef0 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a8bb4:	2800      	cmp	r0, #0
 80a8bb6:	f2c0 82a7 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8bba:	4284      	cmp	r4, r0
 80a8bbc:	f240 82a4 	bls.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8bc0:	1a24      	subs	r4, r4, r0
 80a8bc2:	4481      	add	r9, r0

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
 80a8bc4:	4643      	mov	r3, r8
 80a8bc6:	4a83      	ldr	r2, [pc, #524]	; (80a8dd4 <mbedtls_x509_crt_info+0x2c0>)
 80a8bc8:	4621      	mov	r1, r4
 80a8bca:	4648      	mov	r0, r9
 80a8bcc:	f008 faac 	bl	80b1128 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a8bd0:	2800      	cmp	r0, #0
 80a8bd2:	f2c0 8299 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8bd6:	4284      	cmp	r4, r0
 80a8bd8:	f240 8296 	bls.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8bdc:	1a24      	subs	r4, r4, r0
 80a8bde:	4481      	add	r9, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
 80a8be0:	f106 026c 	add.w	r2, r6, #108	; 0x6c
 80a8be4:	4621      	mov	r1, r4
 80a8be6:	4648      	mov	r0, r9
 80a8be8:	f7f9 f982 	bl	80a1ef0 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a8bec:	2800      	cmp	r0, #0
 80a8bee:	f2c0 828b 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8bf2:	4284      	cmp	r4, r0
 80a8bf4:	f240 8288 	bls.w	80a9108 <mbedtls_x509_crt_info+0x5f4>

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
 80a8bf8:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a8bfc:	1a24      	subs	r4, r4, r0

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
 80a8bfe:	9305      	str	r3, [sp, #20]
 80a8c00:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a8c04:	4481      	add	r9, r0

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
 80a8c06:	9304      	str	r3, [sp, #16]
 80a8c08:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 80a8c0c:	4a72      	ldr	r2, [pc, #456]	; (80a8dd8 <mbedtls_x509_crt_info+0x2c4>)
 80a8c0e:	9303      	str	r3, [sp, #12]
 80a8c10:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80a8c14:	4621      	mov	r1, r4
 80a8c16:	9302      	str	r3, [sp, #8]
 80a8c18:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80a8c1c:	4648      	mov	r0, r9
 80a8c1e:	9301      	str	r3, [sp, #4]
 80a8c20:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 80a8c24:	9300      	str	r3, [sp, #0]
 80a8c26:	4643      	mov	r3, r8
 80a8c28:	f008 fa7e 	bl	80b1128 <snprintf>
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a8c2c:	2800      	cmp	r0, #0
 80a8c2e:	f2c0 826b 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8c32:	4284      	cmp	r4, r0
 80a8c34:	f240 8268 	bls.w	80a9108 <mbedtls_x509_crt_info+0x5f4>

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
 80a8c38:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a8c3c:	1a24      	subs	r4, r4, r0

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
 80a8c3e:	9305      	str	r3, [sp, #20]
 80a8c40:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a8c44:	4481      	add	r9, r0

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
 80a8c46:	9304      	str	r3, [sp, #16]
 80a8c48:	f8d6 30b0 	ldr.w	r3, [r6, #176]	; 0xb0
 80a8c4c:	4a63      	ldr	r2, [pc, #396]	; (80a8ddc <mbedtls_x509_crt_info+0x2c8>)
 80a8c4e:	9303      	str	r3, [sp, #12]
 80a8c50:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 80a8c54:	4621      	mov	r1, r4
 80a8c56:	9302      	str	r3, [sp, #8]
 80a8c58:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
 80a8c5c:	4648      	mov	r0, r9
 80a8c5e:	9301      	str	r3, [sp, #4]
 80a8c60:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 80a8c64:	9300      	str	r3, [sp, #0]
 80a8c66:	4643      	mov	r3, r8
 80a8c68:	f008 fa5e 	bl	80b1128 <snprintf>
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a8c6c:	2800      	cmp	r0, #0
 80a8c6e:	f2c0 824b 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8c72:	4284      	cmp	r4, r0
 80a8c74:	f240 8248 	bls.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8c78:	1a24      	subs	r4, r4, r0
 80a8c7a:	4481      	add	r9, r0

    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
 80a8c7c:	4643      	mov	r3, r8
 80a8c7e:	4a58      	ldr	r2, [pc, #352]	; (80a8de0 <mbedtls_x509_crt_info+0x2cc>)
 80a8c80:	4621      	mov	r1, r4
 80a8c82:	4648      	mov	r0, r9
 80a8c84:	f008 fa50 	bl	80b1128 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a8c88:	2800      	cmp	r0, #0
 80a8c8a:	f2c0 823d 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8c8e:	4284      	cmp	r4, r0
 80a8c90:	f240 823a 	bls.w	80a9108 <mbedtls_x509_crt_info+0x5f4>

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
 80a8c94:	f8d6 212c 	ldr.w	r2, [r6, #300]	; 0x12c
 80a8c98:	f896 3129 	ldrb.w	r3, [r6, #297]	; 0x129
 80a8c9c:	9201      	str	r2, [sp, #4]
 80a8c9e:	f896 2128 	ldrb.w	r2, [r6, #296]	; 0x128
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a8ca2:	1a24      	subs	r4, r4, r0
 80a8ca4:	4481      	add	r9, r0

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
 80a8ca6:	9200      	str	r2, [sp, #0]
 80a8ca8:	4621      	mov	r1, r4
 80a8caa:	f106 0228 	add.w	r2, r6, #40	; 0x28
 80a8cae:	4648      	mov	r0, r9
 80a8cb0:	f7f9 f9ea 	bl	80a2088 <mbedtls_x509_sig_alg_gets>
                             crt->sig_md, crt->sig_opts );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a8cb4:	1e05      	subs	r5, r0, #0
 80a8cb6:	f2c0 8227 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8cba:	42ac      	cmp	r4, r5
 80a8cbc:	f240 8224 	bls.w	80a9108 <mbedtls_x509_crt_info+0x5f4>

    /* Key size */
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
 80a8cc0:	f106 0bbc 	add.w	fp, r6, #188	; 0xbc
 80a8cc4:	4658      	mov	r0, fp
 80a8cc6:	f001 fa75 	bl	80aa1b4 <mbedtls_pk_get_name>
 80a8cca:	f10d 0a1c 	add.w	sl, sp, #28
 80a8cce:	4602      	mov	r2, r0
 80a8cd0:	2112      	movs	r1, #18
 80a8cd2:	4650      	mov	r0, sl
 80a8cd4:	f7f9 fa36 	bl	80a2144 <mbedtls_x509_key_size_helper>
 80a8cd8:	2800      	cmp	r0, #0
 80a8cda:	f040 8216 	bne.w	80a910a <mbedtls_x509_crt_info+0x5f6>
    {
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
 80a8cde:	4658      	mov	r0, fp
 80a8ce0:	f001 fa06 	bl	80aa0f0 <mbedtls_pk_get_bitlen>
    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
                             crt->sig_md, crt->sig_opts );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a8ce4:	1b64      	subs	r4, r4, r5
 80a8ce6:	444d      	add	r5, r9
                                      mbedtls_pk_get_name( &crt->pk ) ) ) != 0 )
    {
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
 80a8ce8:	9001      	str	r0, [sp, #4]
 80a8cea:	f8cd a000 	str.w	sl, [sp]
 80a8cee:	4643      	mov	r3, r8
 80a8cf0:	4a3c      	ldr	r2, [pc, #240]	; (80a8de4 <mbedtls_x509_crt_info+0x2d0>)
 80a8cf2:	4621      	mov	r1, r4
 80a8cf4:	4628      	mov	r0, r5
 80a8cf6:	f008 fa17 	bl	80b1128 <snprintf>
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a8cfa:	2800      	cmp	r0, #0
 80a8cfc:	f2c0 8204 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8d00:	4284      	cmp	r4, r0
 80a8d02:	f240 8201 	bls.w	80a9108 <mbedtls_x509_crt_info+0x5f4>

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 80a8d06:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a8d0a:	1a24      	subs	r4, r4, r0

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 80a8d0c:	05db      	lsls	r3, r3, #23
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a8d0e:	4405      	add	r5, r0

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 80a8d10:	d527      	bpl.n	80a8d62 <mbedtls_x509_crt_info+0x24e>
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 80a8d12:	f8d6 10fc 	ldr.w	r1, [r6, #252]	; 0xfc
 80a8d16:	4a34      	ldr	r2, [pc, #208]	; (80a8de8 <mbedtls_x509_crt_info+0x2d4>)
 80a8d18:	4b34      	ldr	r3, [pc, #208]	; (80a8dec <mbedtls_x509_crt_info+0x2d8>)
 80a8d1a:	4628      	mov	r0, r5
 80a8d1c:	2900      	cmp	r1, #0
 80a8d1e:	bf18      	it	ne
 80a8d20:	4613      	movne	r3, r2
 80a8d22:	4a33      	ldr	r2, [pc, #204]	; (80a8df0 <mbedtls_x509_crt_info+0x2dc>)
 80a8d24:	9300      	str	r3, [sp, #0]
 80a8d26:	4621      	mov	r1, r4
 80a8d28:	4643      	mov	r3, r8
 80a8d2a:	f008 f9fd 	bl	80b1128 <snprintf>
                        crt->ca_istrue ? "true" : "false" );
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a8d2e:	2800      	cmp	r0, #0
 80a8d30:	f2c0 81ea 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8d34:	4284      	cmp	r4, r0
 80a8d36:	f240 81e7 	bls.w	80a9108 <mbedtls_x509_crt_info+0x5f4>

        if( crt->max_pathlen > 0 )
 80a8d3a:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
                        crt->ca_istrue ? "true" : "false" );
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a8d3e:	1a24      	subs	r4, r4, r0

        if( crt->max_pathlen > 0 )
 80a8d40:	2b00      	cmp	r3, #0

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
                        crt->ca_istrue ? "true" : "false" );
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a8d42:	4405      	add	r5, r0

        if( crt->max_pathlen > 0 )
 80a8d44:	dd0d      	ble.n	80a8d62 <mbedtls_x509_crt_info+0x24e>
        {
            ret = mbedtls_snprintf( p, n, ", max_pathlen=%d", crt->max_pathlen - 1 );
 80a8d46:	3b01      	subs	r3, #1
 80a8d48:	4a2a      	ldr	r2, [pc, #168]	; (80a8df4 <mbedtls_x509_crt_info+0x2e0>)
 80a8d4a:	4621      	mov	r1, r4
 80a8d4c:	4628      	mov	r0, r5
 80a8d4e:	f008 f9eb 	bl	80b1128 <snprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 80a8d52:	2800      	cmp	r0, #0
 80a8d54:	f2c0 81d8 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8d58:	4284      	cmp	r4, r0
 80a8d5a:	f240 81d5 	bls.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8d5e:	1a24      	subs	r4, r4, r0
 80a8d60:	4405      	add	r5, r0
        }
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 80a8d62:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 80a8d66:	0698      	lsls	r0, r3, #26
 80a8d68:	d551      	bpl.n	80a8e0e <mbedtls_x509_crt_info+0x2fa>
    {
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
 80a8d6a:	4643      	mov	r3, r8
 80a8d6c:	4a22      	ldr	r2, [pc, #136]	; (80a8df8 <mbedtls_x509_crt_info+0x2e4>)
 80a8d6e:	4621      	mov	r1, r4
 80a8d70:	4628      	mov	r0, r5
 80a8d72:	f008 f9d9 	bl	80b1128 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a8d76:	2800      	cmp	r0, #0
 80a8d78:	f2c0 81c6 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8d7c:	42a0      	cmp	r0, r4
 80a8d7e:	f080 81c3 	bcs.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
{
    size_t i;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
 80a8d82:	f8df e078 	ldr.w	lr, [pc, #120]	; 80a8dfc <mbedtls_x509_crt_info+0x2e8>
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
    {
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a8d86:	1a24      	subs	r4, r4, r0
 80a8d88:	4405      	add	r5, r0

        if( ( ret = x509_info_subject_alt_name( &p, &n,
 80a8d8a:	f106 02e8 	add.w	r2, r6, #232	; 0xe8
    size_t i;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
    size_t sep_len = 0;
 80a8d8e:	2000      	movs	r0, #0

    while( cur != NULL )
    {
        if( cur->buf.len + sep_len >= n )
 80a8d90:	6851      	ldr	r1, [r2, #4]
 80a8d92:	2300      	movs	r3, #0
 80a8d94:	4401      	add	r1, r0
 80a8d96:	42a1      	cmp	r1, r4
 80a8d98:	d301      	bcc.n	80a8d9e <mbedtls_x509_crt_info+0x28a>
        {
            *p = '\0';
 80a8d9a:	702b      	strb	r3, [r5, #0]
 80a8d9c:	e1b4      	b.n	80a9108 <mbedtls_x509_crt_info+0x5f4>
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
        }

        n -= cur->buf.len + sep_len;
 80a8d9e:	1a64      	subs	r4, r4, r1
        for( i = 0; i < sep_len; i++ )
 80a8da0:	4283      	cmp	r3, r0
 80a8da2:	d004      	beq.n	80a8dae <mbedtls_x509_crt_info+0x29a>
            *p++ = sep[i];
 80a8da4:	f81e 1003 	ldrb.w	r1, [lr, r3]
 80a8da8:	54e9      	strb	r1, [r5, r3]
            *p = '\0';
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
        }

        n -= cur->buf.len + sep_len;
        for( i = 0; i < sep_len; i++ )
 80a8daa:	3301      	adds	r3, #1
 80a8dac:	e7f8      	b.n	80a8da0 <mbedtls_x509_crt_info+0x28c>
 80a8dae:	441d      	add	r5, r3
 80a8db0:	4628      	mov	r0, r5
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
 80a8db2:	6851      	ldr	r1, [r2, #4]
 80a8db4:	1a2b      	subs	r3, r5, r0
 80a8db6:	4299      	cmp	r1, r3
 80a8db8:	d922      	bls.n	80a8e00 <mbedtls_x509_crt_info+0x2ec>
            *p++ = cur->buf.p[i];
 80a8dba:	6891      	ldr	r1, [r2, #8]
 80a8dbc:	5ccb      	ldrb	r3, [r1, r3]
 80a8dbe:	f805 3b01 	strb.w	r3, [r5], #1
 80a8dc2:	e7f6      	b.n	80a8db2 <mbedtls_x509_crt_info+0x29e>
 80a8dc4:	080b5087 	.word	0x080b5087
 80a8dc8:	080b50a7 	.word	0x080b50a7
 80a8dcc:	080b50c1 	.word	0x080b50c1
 80a8dd0:	080b50d8 	.word	0x080b50d8
 80a8dd4:	080b50f0 	.word	0x080b50f0
 80a8dd8:	080b5108 	.word	0x080b5108
 80a8ddc:	080b513d 	.word	0x080b513d
 80a8de0:	080b5172 	.word	0x080b5172
 80a8de4:	080b518a 	.word	0x080b518a
 80a8de8:	080b507c 	.word	0x080b507c
 80a8dec:	080b5081 	.word	0x080b5081
 80a8df0:	080b519c 	.word	0x080b519c
 80a8df4:	080b51b9 	.word	0x080b51b9
 80a8df8:	080b51ca 	.word	0x080b51ca
 80a8dfc:	080b40b1 	.word	0x080b40b1

        sep = ", ";
        sep_len = 2;

        cur = cur->next;
 80a8e00:	68d2      	ldr	r2, [r2, #12]
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
            *p++ = cur->buf.p[i];

        sep = ", ";
        sep_len = 2;
 80a8e02:	2002      	movs	r0, #2
        for( i = 0; i < sep_len; i++ )
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
            *p++ = cur->buf.p[i];

        sep = ", ";
 80a8e04:	f8df e314 	ldr.w	lr, [pc, #788]	; 80a911c <mbedtls_x509_crt_info+0x608>
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
    size_t sep_len = 0;

    while( cur != NULL )
 80a8e08:	2a00      	cmp	r2, #0
 80a8e0a:	d1c1      	bne.n	80a8d90 <mbedtls_x509_crt_info+0x27c>
        sep_len = 2;

        cur = cur->next;
    }

    *p = '\0';
 80a8e0c:	702a      	strb	r2, [r5, #0]
        if( ( ret = x509_info_subject_alt_name( &p, &n,
                                            &crt->subject_alt_names ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
 80a8e0e:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 80a8e12:	03d9      	lsls	r1, r3, #15
 80a8e14:	f140 8098 	bpl.w	80a8f48 <mbedtls_x509_crt_info+0x434>
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
 80a8e18:	4643      	mov	r3, r8
 80a8e1a:	4abd      	ldr	r2, [pc, #756]	; (80a9110 <mbedtls_x509_crt_info+0x5fc>)
 80a8e1c:	4621      	mov	r1, r4
 80a8e1e:	4628      	mov	r0, r5
 80a8e20:	f008 f982 	bl	80b1128 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a8e24:	2800      	cmp	r0, #0
 80a8e26:	f2c0 816f 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8e2a:	42a0      	cmp	r0, r4
 80a8e2c:	f080 816c 	bcs.w	80a9108 <mbedtls_x509_crt_info+0x5f4>

        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
 80a8e30:	f896 9118 	ldrb.w	r9, [r6, #280]	; 0x118
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a8e34:	1a24      	subs	r4, r4, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 80a8e36:	f019 0f80 	tst.w	r9, #128	; 0x80
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a8e3a:	4405      	add	r5, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 80a8e3c:	4bb5      	ldr	r3, [pc, #724]	; (80a9114 <mbedtls_x509_crt_info+0x600>)
 80a8e3e:	d00d      	beq.n	80a8e5c <mbedtls_x509_crt_info+0x348>
 80a8e40:	4ab5      	ldr	r2, [pc, #724]	; (80a9118 <mbedtls_x509_crt_info+0x604>)
 80a8e42:	4621      	mov	r1, r4
 80a8e44:	4628      	mov	r0, r5
 80a8e46:	f008 f96f 	bl	80b1128 <snprintf>
 80a8e4a:	2800      	cmp	r0, #0
 80a8e4c:	f2c0 815c 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8e50:	4284      	cmp	r4, r0
 80a8e52:	f240 8159 	bls.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8e56:	4bb1      	ldr	r3, [pc, #708]	; (80a911c <mbedtls_x509_crt_info+0x608>)
 80a8e58:	1a24      	subs	r4, r4, r0
 80a8e5a:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
 80a8e5c:	f019 0f40 	tst.w	r9, #64	; 0x40
 80a8e60:	d00d      	beq.n	80a8e7e <mbedtls_x509_crt_info+0x36a>
 80a8e62:	4aaf      	ldr	r2, [pc, #700]	; (80a9120 <mbedtls_x509_crt_info+0x60c>)
 80a8e64:	4621      	mov	r1, r4
 80a8e66:	4628      	mov	r0, r5
 80a8e68:	f008 f95e 	bl	80b1128 <snprintf>
 80a8e6c:	2800      	cmp	r0, #0
 80a8e6e:	f2c0 814b 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8e72:	4284      	cmp	r4, r0
 80a8e74:	f240 8148 	bls.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8e78:	4ba8      	ldr	r3, [pc, #672]	; (80a911c <mbedtls_x509_crt_info+0x608>)
 80a8e7a:	1a24      	subs	r4, r4, r0
 80a8e7c:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
 80a8e7e:	f019 0f20 	tst.w	r9, #32
 80a8e82:	d00d      	beq.n	80a8ea0 <mbedtls_x509_crt_info+0x38c>
 80a8e84:	4aa7      	ldr	r2, [pc, #668]	; (80a9124 <mbedtls_x509_crt_info+0x610>)
 80a8e86:	4621      	mov	r1, r4
 80a8e88:	4628      	mov	r0, r5
 80a8e8a:	f008 f94d 	bl	80b1128 <snprintf>
 80a8e8e:	2800      	cmp	r0, #0
 80a8e90:	f2c0 813a 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8e94:	4284      	cmp	r4, r0
 80a8e96:	f240 8137 	bls.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8e9a:	4ba0      	ldr	r3, [pc, #640]	; (80a911c <mbedtls_x509_crt_info+0x608>)
 80a8e9c:	1a24      	subs	r4, r4, r0
 80a8e9e:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
 80a8ea0:	f019 0f10 	tst.w	r9, #16
 80a8ea4:	d00d      	beq.n	80a8ec2 <mbedtls_x509_crt_info+0x3ae>
 80a8ea6:	4aa0      	ldr	r2, [pc, #640]	; (80a9128 <mbedtls_x509_crt_info+0x614>)
 80a8ea8:	4621      	mov	r1, r4
 80a8eaa:	4628      	mov	r0, r5
 80a8eac:	f008 f93c 	bl	80b1128 <snprintf>
 80a8eb0:	2800      	cmp	r0, #0
 80a8eb2:	f2c0 8129 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8eb6:	4284      	cmp	r4, r0
 80a8eb8:	f240 8126 	bls.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8ebc:	4b97      	ldr	r3, [pc, #604]	; (80a911c <mbedtls_x509_crt_info+0x608>)
 80a8ebe:	1a24      	subs	r4, r4, r0
 80a8ec0:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
 80a8ec2:	f019 0f08 	tst.w	r9, #8
 80a8ec6:	d00d      	beq.n	80a8ee4 <mbedtls_x509_crt_info+0x3d0>
 80a8ec8:	4a98      	ldr	r2, [pc, #608]	; (80a912c <mbedtls_x509_crt_info+0x618>)
 80a8eca:	4621      	mov	r1, r4
 80a8ecc:	4628      	mov	r0, r5
 80a8ece:	f008 f92b 	bl	80b1128 <snprintf>
 80a8ed2:	2800      	cmp	r0, #0
 80a8ed4:	f2c0 8118 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8ed8:	4284      	cmp	r4, r0
 80a8eda:	f240 8115 	bls.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8ede:	4b8f      	ldr	r3, [pc, #572]	; (80a911c <mbedtls_x509_crt_info+0x608>)
 80a8ee0:	1a24      	subs	r4, r4, r0
 80a8ee2:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
 80a8ee4:	f019 0f04 	tst.w	r9, #4
 80a8ee8:	d00d      	beq.n	80a8f06 <mbedtls_x509_crt_info+0x3f2>
 80a8eea:	4a91      	ldr	r2, [pc, #580]	; (80a9130 <mbedtls_x509_crt_info+0x61c>)
 80a8eec:	4621      	mov	r1, r4
 80a8eee:	4628      	mov	r0, r5
 80a8ef0:	f008 f91a 	bl	80b1128 <snprintf>
 80a8ef4:	2800      	cmp	r0, #0
 80a8ef6:	f2c0 8107 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8efa:	4284      	cmp	r4, r0
 80a8efc:	f240 8104 	bls.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8f00:	4b86      	ldr	r3, [pc, #536]	; (80a911c <mbedtls_x509_crt_info+0x608>)
 80a8f02:	1a24      	subs	r4, r4, r0
 80a8f04:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
 80a8f06:	f019 0f02 	tst.w	r9, #2
 80a8f0a:	d00d      	beq.n	80a8f28 <mbedtls_x509_crt_info+0x414>
 80a8f0c:	4a89      	ldr	r2, [pc, #548]	; (80a9134 <mbedtls_x509_crt_info+0x620>)
 80a8f0e:	4621      	mov	r1, r4
 80a8f10:	4628      	mov	r0, r5
 80a8f12:	f008 f909 	bl	80b1128 <snprintf>
 80a8f16:	2800      	cmp	r0, #0
 80a8f18:	f2c0 80f6 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8f1c:	4284      	cmp	r4, r0
 80a8f1e:	f240 80f3 	bls.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8f22:	4b7e      	ldr	r3, [pc, #504]	; (80a911c <mbedtls_x509_crt_info+0x608>)
 80a8f24:	1a24      	subs	r4, r4, r0
 80a8f26:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA,  "Object Signing CA" );
 80a8f28:	f019 0f01 	tst.w	r9, #1
 80a8f2c:	d00c      	beq.n	80a8f48 <mbedtls_x509_crt_info+0x434>
 80a8f2e:	4a82      	ldr	r2, [pc, #520]	; (80a9138 <mbedtls_x509_crt_info+0x624>)
 80a8f30:	4621      	mov	r1, r4
 80a8f32:	4628      	mov	r0, r5
 80a8f34:	f008 f8f8 	bl	80b1128 <snprintf>
 80a8f38:	2800      	cmp	r0, #0
 80a8f3a:	f2c0 80e5 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8f3e:	4284      	cmp	r4, r0
 80a8f40:	f240 80e2 	bls.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8f44:	1a24      	subs	r4, r4, r0
 80a8f46:	4405      	add	r5, r0

        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
 80a8f48:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 80a8f4c:	075a      	lsls	r2, r3, #29
 80a8f4e:	f140 809f 	bpl.w	80a9090 <mbedtls_x509_crt_info+0x57c>
    {
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
 80a8f52:	4643      	mov	r3, r8
 80a8f54:	4a79      	ldr	r2, [pc, #484]	; (80a913c <mbedtls_x509_crt_info+0x628>)
 80a8f56:	4621      	mov	r1, r4
 80a8f58:	4628      	mov	r0, r5
 80a8f5a:	f008 f8e5 	bl	80b1128 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a8f5e:	2800      	cmp	r0, #0
 80a8f60:	f2c0 80d2 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8f64:	42a0      	cmp	r0, r4
 80a8f66:	f080 80cf 	bcs.w	80a9108 <mbedtls_x509_crt_info+0x5f4>

        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
 80a8f6a:	f8d6 9104 	ldr.w	r9, [r6, #260]	; 0x104
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
    {
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a8f6e:	1a24      	subs	r4, r4, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
 80a8f70:	f019 0f80 	tst.w	r9, #128	; 0x80
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
    {
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a8f74:	4405      	add	r5, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
 80a8f76:	4b67      	ldr	r3, [pc, #412]	; (80a9114 <mbedtls_x509_crt_info+0x600>)
 80a8f78:	d00d      	beq.n	80a8f96 <mbedtls_x509_crt_info+0x482>
 80a8f7a:	4a71      	ldr	r2, [pc, #452]	; (80a9140 <mbedtls_x509_crt_info+0x62c>)
 80a8f7c:	4621      	mov	r1, r4
 80a8f7e:	4628      	mov	r0, r5
 80a8f80:	f008 f8d2 	bl	80b1128 <snprintf>
 80a8f84:	2800      	cmp	r0, #0
 80a8f86:	f2c0 80bf 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8f8a:	4284      	cmp	r4, r0
 80a8f8c:	f240 80bc 	bls.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8f90:	4b62      	ldr	r3, [pc, #392]	; (80a911c <mbedtls_x509_crt_info+0x608>)
 80a8f92:	1a24      	subs	r4, r4, r0
 80a8f94:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
 80a8f96:	f019 0f40 	tst.w	r9, #64	; 0x40
 80a8f9a:	d00d      	beq.n	80a8fb8 <mbedtls_x509_crt_info+0x4a4>
 80a8f9c:	4a69      	ldr	r2, [pc, #420]	; (80a9144 <mbedtls_x509_crt_info+0x630>)
 80a8f9e:	4621      	mov	r1, r4
 80a8fa0:	4628      	mov	r0, r5
 80a8fa2:	f008 f8c1 	bl	80b1128 <snprintf>
 80a8fa6:	2800      	cmp	r0, #0
 80a8fa8:	f2c0 80ae 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8fac:	4284      	cmp	r4, r0
 80a8fae:	f240 80ab 	bls.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8fb2:	4b5a      	ldr	r3, [pc, #360]	; (80a911c <mbedtls_x509_crt_info+0x608>)
 80a8fb4:	1a24      	subs	r4, r4, r0
 80a8fb6:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
 80a8fb8:	f019 0f20 	tst.w	r9, #32
 80a8fbc:	d00d      	beq.n	80a8fda <mbedtls_x509_crt_info+0x4c6>
 80a8fbe:	4a62      	ldr	r2, [pc, #392]	; (80a9148 <mbedtls_x509_crt_info+0x634>)
 80a8fc0:	4621      	mov	r1, r4
 80a8fc2:	4628      	mov	r0, r5
 80a8fc4:	f008 f8b0 	bl	80b1128 <snprintf>
 80a8fc8:	2800      	cmp	r0, #0
 80a8fca:	f2c0 809d 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8fce:	4284      	cmp	r4, r0
 80a8fd0:	f240 809a 	bls.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8fd4:	4b51      	ldr	r3, [pc, #324]	; (80a911c <mbedtls_x509_crt_info+0x608>)
 80a8fd6:	1a24      	subs	r4, r4, r0
 80a8fd8:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
 80a8fda:	f019 0f10 	tst.w	r9, #16
 80a8fde:	d00d      	beq.n	80a8ffc <mbedtls_x509_crt_info+0x4e8>
 80a8fe0:	4a5a      	ldr	r2, [pc, #360]	; (80a914c <mbedtls_x509_crt_info+0x638>)
 80a8fe2:	4621      	mov	r1, r4
 80a8fe4:	4628      	mov	r0, r5
 80a8fe6:	f008 f89f 	bl	80b1128 <snprintf>
 80a8fea:	2800      	cmp	r0, #0
 80a8fec:	f2c0 808c 	blt.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8ff0:	4284      	cmp	r4, r0
 80a8ff2:	f240 8089 	bls.w	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a8ff6:	4b49      	ldr	r3, [pc, #292]	; (80a911c <mbedtls_x509_crt_info+0x608>)
 80a8ff8:	1a24      	subs	r4, r4, r0
 80a8ffa:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
 80a8ffc:	f019 0f08 	tst.w	r9, #8
 80a9000:	d00b      	beq.n	80a901a <mbedtls_x509_crt_info+0x506>
 80a9002:	4a53      	ldr	r2, [pc, #332]	; (80a9150 <mbedtls_x509_crt_info+0x63c>)
 80a9004:	4621      	mov	r1, r4
 80a9006:	4628      	mov	r0, r5
 80a9008:	f008 f88e 	bl	80b1128 <snprintf>
 80a900c:	2800      	cmp	r0, #0
 80a900e:	db7b      	blt.n	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a9010:	4284      	cmp	r4, r0
 80a9012:	d979      	bls.n	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a9014:	4b41      	ldr	r3, [pc, #260]	; (80a911c <mbedtls_x509_crt_info+0x608>)
 80a9016:	1a24      	subs	r4, r4, r0
 80a9018:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
 80a901a:	f019 0f04 	tst.w	r9, #4
 80a901e:	d00b      	beq.n	80a9038 <mbedtls_x509_crt_info+0x524>
 80a9020:	4a4c      	ldr	r2, [pc, #304]	; (80a9154 <mbedtls_x509_crt_info+0x640>)
 80a9022:	4621      	mov	r1, r4
 80a9024:	4628      	mov	r0, r5
 80a9026:	f008 f87f 	bl	80b1128 <snprintf>
 80a902a:	2800      	cmp	r0, #0
 80a902c:	db6c      	blt.n	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a902e:	4284      	cmp	r4, r0
 80a9030:	d96a      	bls.n	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a9032:	4b3a      	ldr	r3, [pc, #232]	; (80a911c <mbedtls_x509_crt_info+0x608>)
 80a9034:	1a24      	subs	r4, r4, r0
 80a9036:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
 80a9038:	f019 0f02 	tst.w	r9, #2
 80a903c:	d00b      	beq.n	80a9056 <mbedtls_x509_crt_info+0x542>
 80a903e:	4a46      	ldr	r2, [pc, #280]	; (80a9158 <mbedtls_x509_crt_info+0x644>)
 80a9040:	4621      	mov	r1, r4
 80a9042:	4628      	mov	r0, r5
 80a9044:	f008 f870 	bl	80b1128 <snprintf>
 80a9048:	2800      	cmp	r0, #0
 80a904a:	db5d      	blt.n	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a904c:	4284      	cmp	r4, r0
 80a904e:	d95b      	bls.n	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a9050:	4b32      	ldr	r3, [pc, #200]	; (80a911c <mbedtls_x509_crt_info+0x608>)
 80a9052:	1a24      	subs	r4, r4, r0
 80a9054:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
 80a9056:	f019 0f01 	tst.w	r9, #1
 80a905a:	d00b      	beq.n	80a9074 <mbedtls_x509_crt_info+0x560>
 80a905c:	4a3f      	ldr	r2, [pc, #252]	; (80a915c <mbedtls_x509_crt_info+0x648>)
 80a905e:	4621      	mov	r1, r4
 80a9060:	4628      	mov	r0, r5
 80a9062:	f008 f861 	bl	80b1128 <snprintf>
 80a9066:	2800      	cmp	r0, #0
 80a9068:	db4e      	blt.n	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a906a:	4284      	cmp	r4, r0
 80a906c:	d94c      	bls.n	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a906e:	4b2b      	ldr	r3, [pc, #172]	; (80a911c <mbedtls_x509_crt_info+0x608>)
 80a9070:	1a24      	subs	r4, r4, r0
 80a9072:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DECIPHER_ONLY,        "Decipher Only" );
 80a9074:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 80a9078:	d00a      	beq.n	80a9090 <mbedtls_x509_crt_info+0x57c>
 80a907a:	4a39      	ldr	r2, [pc, #228]	; (80a9160 <mbedtls_x509_crt_info+0x64c>)
 80a907c:	4621      	mov	r1, r4
 80a907e:	4628      	mov	r0, r5
 80a9080:	f008 f852 	bl	80b1128 <snprintf>
 80a9084:	2800      	cmp	r0, #0
 80a9086:	db3f      	blt.n	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a9088:	4284      	cmp	r4, r0
 80a908a:	d93d      	bls.n	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a908c:	1a24      	subs	r4, r4, r0
 80a908e:	4405      	add	r5, r0

        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
 80a9090:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 80a9094:	051b      	lsls	r3, r3, #20
 80a9096:	d52b      	bpl.n	80a90f0 <mbedtls_x509_crt_info+0x5dc>
    {
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
 80a9098:	4643      	mov	r3, r8
 80a909a:	4a32      	ldr	r2, [pc, #200]	; (80a9164 <mbedtls_x509_crt_info+0x650>)
 80a909c:	4621      	mov	r1, r4
 80a909e:	4628      	mov	r0, r5
 80a90a0:	f008 f842 	bl	80b1128 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a90a4:	2800      	cmp	r0, #0
 80a90a6:	db2f      	blt.n	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a90a8:	42a0      	cmp	r0, r4
 80a90aa:	d22d      	bcs.n	80a9108 <mbedtls_x509_crt_info+0x5f4>
    int ret;
    const char *desc;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";
 80a90ac:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80a9114 <mbedtls_x509_crt_info+0x600>

    while( cur != NULL )
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
            desc = "???";
 80a90b0:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80a9174 <mbedtls_x509_crt_info+0x660>
    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
    {
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;

        if( ( ret = x509_info_ext_key_usage( &p, &n,
 80a90b4:	f506 7684 	add.w	r6, r6, #264	; 0x108
static int x509_info_ext_key_usage( char **buf, size_t *size,
                                    const mbedtls_x509_sequence *extended_key_usage )
{
    int ret;
    const char *desc;
    size_t n = *size;
 80a90b8:	1a24      	subs	r4, r4, r0
    char *p = *buf;
 80a90ba:	4405      	add	r5, r0
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";

    while( cur != NULL )
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
 80a90bc:	a906      	add	r1, sp, #24
 80a90be:	4630      	mov	r0, r6
 80a90c0:	f7fc f814 	bl	80a50ec <mbedtls_oid_get_extended_key_usage>
 80a90c4:	b108      	cbz	r0, 80a90ca <mbedtls_x509_crt_info+0x5b6>
            desc = "???";
 80a90c6:	f8cd 9018 	str.w	r9, [sp, #24]

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
 80a90ca:	9b06      	ldr	r3, [sp, #24]
 80a90cc:	4a26      	ldr	r2, [pc, #152]	; (80a9168 <mbedtls_x509_crt_info+0x654>)
 80a90ce:	9300      	str	r3, [sp, #0]
 80a90d0:	4621      	mov	r1, r4
 80a90d2:	4643      	mov	r3, r8
 80a90d4:	4628      	mov	r0, r5
 80a90d6:	f008 f827 	bl	80b1128 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a90da:	2800      	cmp	r0, #0
 80a90dc:	db14      	blt.n	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a90de:	42a0      	cmp	r0, r4
 80a90e0:	d212      	bcs.n	80a9108 <mbedtls_x509_crt_info+0x5f4>

        sep = ", ";

        cur = cur->next;
 80a90e2:	68f6      	ldr	r6, [r6, #12]
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
            desc = "???";

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a90e4:	1a24      	subs	r4, r4, r0
 80a90e6:	4405      	add	r5, r0

        sep = ", ";
 80a90e8:	f8df 8030 	ldr.w	r8, [pc, #48]	; 80a911c <mbedtls_x509_crt_info+0x608>
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";

    while( cur != NULL )
 80a90ec:	2e00      	cmp	r6, #0
 80a90ee:	d1e5      	bne.n	80a90bc <mbedtls_x509_crt_info+0x5a8>
        if( ( ret = x509_info_ext_key_usage( &p, &n,
                                             &crt->ext_key_usage ) ) != 0 )
            return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n" );
 80a90f0:	4a1e      	ldr	r2, [pc, #120]	; (80a916c <mbedtls_x509_crt_info+0x658>)
 80a90f2:	4621      	mov	r1, r4
 80a90f4:	4628      	mov	r0, r5
 80a90f6:	f008 f817 	bl	80b1128 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a90fa:	2800      	cmp	r0, #0
 80a90fc:	db04      	blt.n	80a9108 <mbedtls_x509_crt_info+0x5f4>
 80a90fe:	4284      	cmp	r4, r0
 80a9100:	d902      	bls.n	80a9108 <mbedtls_x509_crt_info+0x5f4>

    return( (int) ( size - n ) );
 80a9102:	1a20      	subs	r0, r4, r0
 80a9104:	1a38      	subs	r0, r7, r0
 80a9106:	e000      	b.n	80a910a <mbedtls_x509_crt_info+0x5f6>
    while( cur != NULL )
    {
        if( cur->buf.len + sep_len >= n )
        {
            *p = '\0';
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
 80a9108:	4819      	ldr	r0, [pc, #100]	; (80a9170 <mbedtls_x509_crt_info+0x65c>)

    ret = mbedtls_snprintf( p, n, "\n" );
    MBEDTLS_X509_SAFE_SNPRINTF;

    return( (int) ( size - n ) );
}
 80a910a:	b00d      	add	sp, #52	; 0x34
 80a910c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a9110:	080b51e2 	.word	0x080b51e2
 80a9114:	080b40b1 	.word	0x080b40b1
 80a9118:	080b51fa 	.word	0x080b51fa
 80a911c:	080b3ad6 	.word	0x080b3ad6
 80a9120:	080b5207 	.word	0x080b5207
 80a9124:	080b5214 	.word	0x080b5214
 80a9128:	080b521c 	.word	0x080b521c
 80a912c:	080b522d 	.word	0x080b522d
 80a9130:	080b5238 	.word	0x080b5238
 80a9134:	080b5241 	.word	0x080b5241
 80a9138:	080b524c 	.word	0x080b524c
 80a913c:	080b5260 	.word	0x080b5260
 80a9140:	080b5278 	.word	0x080b5278
 80a9144:	080b528c 	.word	0x080b528c
 80a9148:	080b529e 	.word	0x080b529e
 80a914c:	080b52b1 	.word	0x080b52b1
 80a9150:	080b52c5 	.word	0x080b52c5
 80a9154:	080b52d5 	.word	0x080b52d5
 80a9158:	080b52e5 	.word	0x080b52e5
 80a915c:	080b52f0 	.word	0x080b52f0
 80a9160:	080b5300 	.word	0x080b5300
 80a9164:	080b5310 	.word	0x080b5310
 80a9168:	080b5328 	.word	0x080b5328
 80a916c:	080b42ed 	.word	0x080b42ed
 80a9170:	ffffd680 	.word	0xffffd680
 80a9174:	080b3aef 	.word	0x080b3aef

080a9178 <mbedtls_x509_crt_verify_info>:
    { 0, NULL }
};

int mbedtls_x509_crt_verify_info( char *buf, size_t size, const char *prefix,
                          uint32_t flags )
{
 80a9178:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a917c:	4607      	mov	r7, r0
 80a917e:	460d      	mov	r5, r1
 80a9180:	4691      	mov	r9, r2
 80a9182:	4698      	mov	r8, r3
    int ret;
    const struct x509_crt_verify_string *cur;
    char *p = buf;
    size_t n = size;
 80a9184:	460c      	mov	r4, r1
 80a9186:	4e18      	ldr	r6, [pc, #96]	; (80a91e8 <mbedtls_x509_crt_verify_info+0x70>)

    for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
 80a9188:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80a918c:	b1cb      	cbz	r3, 80a91c2 <mbedtls_x509_crt_verify_info+0x4a>
    {
        if( ( flags & cur->code ) == 0 )
 80a918e:	f856 2c08 	ldr.w	r2, [r6, #-8]
 80a9192:	ea18 0f02 	tst.w	r8, r2
 80a9196:	d012      	beq.n	80a91be <mbedtls_x509_crt_verify_info+0x46>
            continue;

        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
 80a9198:	9300      	str	r3, [sp, #0]
 80a919a:	4a14      	ldr	r2, [pc, #80]	; (80a91ec <mbedtls_x509_crt_verify_info+0x74>)
 80a919c:	464b      	mov	r3, r9
 80a919e:	4621      	mov	r1, r4
 80a91a0:	4638      	mov	r0, r7
 80a91a2:	f007 ffc1 	bl	80b1128 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a91a6:	2800      	cmp	r0, #0
 80a91a8:	da01      	bge.n	80a91ae <mbedtls_x509_crt_verify_info+0x36>
 80a91aa:	4811      	ldr	r0, [pc, #68]	; (80a91f0 <mbedtls_x509_crt_verify_info+0x78>)
 80a91ac:	e018      	b.n	80a91e0 <mbedtls_x509_crt_verify_info+0x68>
 80a91ae:	4284      	cmp	r4, r0
 80a91b0:	d9fb      	bls.n	80a91aa <mbedtls_x509_crt_verify_info+0x32>
        flags ^= cur->code;
 80a91b2:	f856 3c08 	ldr.w	r3, [r6, #-8]
    {
        if( ( flags & cur->code ) == 0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a91b6:	1a24      	subs	r4, r4, r0
 80a91b8:	4407      	add	r7, r0
        flags ^= cur->code;
 80a91ba:	ea88 0803 	eor.w	r8, r8, r3
 80a91be:	3608      	adds	r6, #8
    int ret;
    const struct x509_crt_verify_string *cur;
    char *p = buf;
    size_t n = size;

    for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
 80a91c0:	e7e2      	b.n	80a9188 <mbedtls_x509_crt_verify_info+0x10>
        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
        MBEDTLS_X509_SAFE_SNPRINTF;
        flags ^= cur->code;
    }

    if( flags != 0 )
 80a91c2:	f1b8 0f00 	cmp.w	r8, #0
 80a91c6:	d00a      	beq.n	80a91de <mbedtls_x509_crt_verify_info+0x66>
    {
        ret = mbedtls_snprintf( p, n, "%sUnknown reason "
                                       "(this should not happen)\n", prefix );
 80a91c8:	464b      	mov	r3, r9
 80a91ca:	4a0a      	ldr	r2, [pc, #40]	; (80a91f4 <mbedtls_x509_crt_verify_info+0x7c>)
 80a91cc:	4621      	mov	r1, r4
 80a91ce:	4638      	mov	r0, r7
 80a91d0:	f007 ffaa 	bl	80b1128 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a91d4:	2800      	cmp	r0, #0
 80a91d6:	dbe8      	blt.n	80a91aa <mbedtls_x509_crt_verify_info+0x32>
 80a91d8:	4284      	cmp	r4, r0
 80a91da:	d9e6      	bls.n	80a91aa <mbedtls_x509_crt_verify_info+0x32>
 80a91dc:	1a24      	subs	r4, r4, r0
    }

    return( (int) ( size - n ) );
 80a91de:	1b28      	subs	r0, r5, r4
}
 80a91e0:	b003      	add	sp, #12
 80a91e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a91e6:	bf00      	nop
 80a91e8:	080b4fcc 	.word	0x080b4fcc
 80a91ec:	080b532d 	.word	0x080b532d
 80a91f0:	ffffd680 	.word	0xffffd680
 80a91f4:	080b5333 	.word	0x080b5333

080a91f8 <mbedtls_x509_crt_check_key_usage>:
{
    unsigned int usage_must, usage_may;
    unsigned int may_mask = MBEDTLS_X509_KU_ENCIPHER_ONLY
                          | MBEDTLS_X509_KU_DECIPHER_ONLY;

    if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
 80a91f8:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 80a91fc:	f013 0304 	ands.w	r3, r3, #4
 80a9200:	d01a      	beq.n	80a9238 <mbedtls_x509_crt_check_key_usage+0x40>
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
 80a9202:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
 80a9206:	f421 4000 	bic.w	r0, r1, #32768	; 0x8000
 80a920a:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
 80a920e:	f023 0301 	bic.w	r3, r3, #1
 80a9212:	f020 0001 	bic.w	r0, r0, #1
 80a9216:	400b      	ands	r3, r1
 80a9218:	4298      	cmp	r0, r3
 80a921a:	d10c      	bne.n	80a9236 <mbedtls_x509_crt_check_key_usage+0x3e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    usage_may = usage & may_mask;

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
 80a921c:	f248 0301 	movw	r3, #32769	; 0x8001
 80a9220:	f248 0001 	movw	r0, #32769	; 0x8001
 80a9224:	430a      	orrs	r2, r1
 80a9226:	4013      	ands	r3, r2
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80a9228:	4a04      	ldr	r2, [pc, #16]	; (80a923c <mbedtls_x509_crt_check_key_usage+0x44>)

    usage_may = usage & may_mask;

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
 80a922a:	4008      	ands	r0, r1
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80a922c:	4298      	cmp	r0, r3
 80a922e:	bf14      	ite	ne
 80a9230:	4613      	movne	r3, r2
 80a9232:	2300      	moveq	r3, #0
 80a9234:	e000      	b.n	80a9238 <mbedtls_x509_crt_check_key_usage+0x40>
 80a9236:	4b01      	ldr	r3, [pc, #4]	; (80a923c <mbedtls_x509_crt_check_key_usage+0x44>)

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    return( 0 );
}
 80a9238:	4618      	mov	r0, r3
 80a923a:	4770      	bx	lr
 80a923c:	ffffd800 	.word	0xffffd800

080a9240 <mbedtls_x509_crt_check_extended_key_usage>:

#if defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)
int mbedtls_x509_crt_check_extended_key_usage( const mbedtls_x509_crt *crt,
                                       const char *usage_oid,
                                       size_t usage_len )
{
 80a9240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const mbedtls_x509_sequence *cur;

    /* Extension is not mandatory, absent means no restriction */
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
 80a9242:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8

#if defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)
int mbedtls_x509_crt_check_extended_key_usage( const mbedtls_x509_crt *crt,
                                       const char *usage_oid,
                                       size_t usage_len )
{
 80a9246:	4604      	mov	r4, r0
    const mbedtls_x509_sequence *cur;

    /* Extension is not mandatory, absent means no restriction */
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
 80a9248:	f413 6000 	ands.w	r0, r3, #2048	; 0x800

#if defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)
int mbedtls_x509_crt_check_extended_key_usage( const mbedtls_x509_crt *crt,
                                       const char *usage_oid,
                                       size_t usage_len )
{
 80a924c:	460f      	mov	r7, r1
 80a924e:	4616      	mov	r6, r2
    const mbedtls_x509_sequence *cur;

    /* Extension is not mandatory, absent means no restriction */
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
 80a9250:	d016      	beq.n	80a9280 <mbedtls_x509_crt_check_extended_key_usage+0x40>
        return( 0 );

    /*
     * Look for the requested usage (or wildcard ANY) in our list
     */
    for( cur = &crt->ext_key_usage; cur != NULL; cur = cur->next )
 80a9252:	f504 7484 	add.w	r4, r4, #264	; 0x108
    {
        const mbedtls_x509_buf *cur_oid = &cur->buf;

        if( cur_oid->len == usage_len &&
 80a9256:	6865      	ldr	r5, [r4, #4]
 80a9258:	42b5      	cmp	r5, r6
 80a925a:	d105      	bne.n	80a9268 <mbedtls_x509_crt_check_extended_key_usage+0x28>
            memcmp( cur_oid->p, usage_oid, usage_len ) == 0 )
 80a925c:	4632      	mov	r2, r6
 80a925e:	4639      	mov	r1, r7
 80a9260:	68a0      	ldr	r0, [r4, #8]
 80a9262:	f009 fab9 	bl	80b27d8 <memcmp>
     */
    for( cur = &crt->ext_key_usage; cur != NULL; cur = cur->next )
    {
        const mbedtls_x509_buf *cur_oid = &cur->buf;

        if( cur_oid->len == usage_len &&
 80a9266:	b158      	cbz	r0, 80a9280 <mbedtls_x509_crt_check_extended_key_usage+0x40>
            memcmp( cur_oid->p, usage_oid, usage_len ) == 0 )
        {
            return( 0 );
        }

        if( MBEDTLS_OID_CMP( MBEDTLS_OID_ANY_EXTENDED_KEY_USAGE, cur_oid ) == 0 )
 80a9268:	2d04      	cmp	r5, #4
 80a926a:	d105      	bne.n	80a9278 <mbedtls_x509_crt_check_extended_key_usage+0x38>
 80a926c:	462a      	mov	r2, r5
 80a926e:	68a1      	ldr	r1, [r4, #8]
 80a9270:	4804      	ldr	r0, [pc, #16]	; (80a9284 <mbedtls_x509_crt_check_extended_key_usage+0x44>)
 80a9272:	f009 fab1 	bl	80b27d8 <memcmp>
 80a9276:	b118      	cbz	r0, 80a9280 <mbedtls_x509_crt_check_extended_key_usage+0x40>
        return( 0 );

    /*
     * Look for the requested usage (or wildcard ANY) in our list
     */
    for( cur = &crt->ext_key_usage; cur != NULL; cur = cur->next )
 80a9278:	68e4      	ldr	r4, [r4, #12]
 80a927a:	2c00      	cmp	r4, #0
 80a927c:	d1eb      	bne.n	80a9256 <mbedtls_x509_crt_check_extended_key_usage+0x16>

        if( MBEDTLS_OID_CMP( MBEDTLS_OID_ANY_EXTENDED_KEY_USAGE, cur_oid ) == 0 )
            return( 0 );
    }

    return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80a927e:	4802      	ldr	r0, [pc, #8]	; (80a9288 <mbedtls_x509_crt_check_extended_key_usage+0x48>)
}
 80a9280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a9282:	bf00      	nop
 80a9284:	080b4fbc 	.word	0x080b4fbc
 80a9288:	ffffd800 	.word	0xffffd800

080a928c <mbedtls_x509_crt_is_revoked>:
#if defined(MBEDTLS_X509_CRL_PARSE_C)
/*
 * Return 1 if the certificate is revoked, or 0 otherwise.
 */
int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl )
{
 80a928c:	b538      	push	{r3, r4, r5, lr}
 80a928e:	4605      	mov	r5, r0
    const mbedtls_x509_crl_entry *cur = &crl->entry;
 80a9290:	f101 0484 	add.w	r4, r1, #132	; 0x84

    while( cur != NULL && cur->serial.len != 0 )
 80a9294:	b1a4      	cbz	r4, 80a92c0 <mbedtls_x509_crt_is_revoked+0x34>
 80a9296:	6922      	ldr	r2, [r4, #16]
 80a9298:	b1a2      	cbz	r2, 80a92c4 <mbedtls_x509_crt_is_revoked+0x38>
    {
        if( crt->serial.len == cur->serial.len &&
 80a929a:	6a2b      	ldr	r3, [r5, #32]
 80a929c:	429a      	cmp	r2, r3
 80a929e:	d001      	beq.n	80a92a4 <mbedtls_x509_crt_is_revoked+0x18>
        {
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
                return( 1 );
        }

        cur = cur->next;
 80a92a0:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 */
int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl )
{
    const mbedtls_x509_crl_entry *cur = &crl->entry;

    while( cur != NULL && cur->serial.len != 0 )
 80a92a2:	e7f7      	b.n	80a9294 <mbedtls_x509_crt_is_revoked+0x8>
    {
        if( crt->serial.len == cur->serial.len &&
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
 80a92a4:	6961      	ldr	r1, [r4, #20]
 80a92a6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80a92a8:	f009 fa96 	bl	80b27d8 <memcmp>
{
    const mbedtls_x509_crl_entry *cur = &crl->entry;

    while( cur != NULL && cur->serial.len != 0 )
    {
        if( crt->serial.len == cur->serial.len &&
 80a92ac:	2800      	cmp	r0, #0
 80a92ae:	d1f7      	bne.n	80a92a0 <mbedtls_x509_crt_is_revoked+0x14>
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
        {
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
 80a92b0:	f104 0018 	add.w	r0, r4, #24
 80a92b4:	f7f8 ff5a 	bl	80a216c <mbedtls_x509_time_is_past>
 80a92b8:	2800      	cmp	r0, #0
 80a92ba:	d0f1      	beq.n	80a92a0 <mbedtls_x509_crt_is_revoked+0x14>
                return( 1 );
 80a92bc:	2001      	movs	r0, #1
 80a92be:	bd38      	pop	{r3, r4, r5, pc}
        }

        cur = cur->next;
    }

    return( 0 );
 80a92c0:	4620      	mov	r0, r4
 80a92c2:	bd38      	pop	{r3, r4, r5, pc}
 80a92c4:	4610      	mov	r0, r2
}
 80a92c6:	bd38      	pop	{r3, r4, r5, pc}

080a92c8 <mbedtls_x509_crt_verify_restartable>:
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy,
                     mbedtls_x509_crt_restart_ctx *rs_ctx )
{
 80a92c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a92cc:	b0b7      	sub	sp, #220	; 0xdc
 80a92ce:	9305      	str	r3, [sp, #20]
    int ret;
    mbedtls_pk_type_t pk_type;
    mbedtls_x509_crt_verify_chain ver_chain;
    uint32_t ee_flags;

    *flags = 0;
 80a92d0:	2300      	movs	r3, #0
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy,
                     mbedtls_x509_crt_restart_ctx *rs_ctx )
{
 80a92d2:	4604      	mov	r4, r0
{
    size_t i;

    for( i = 0; i < MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE; i++ )
    {
        ver_chain->items[i].crt = NULL;
 80a92d4:	4618      	mov	r0, r3
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy,
                     mbedtls_x509_crt_restart_ctx *rs_ctx )
{
 80a92d6:	920c      	str	r2, [sp, #48]	; 0x30
    int ret;
    mbedtls_pk_type_t pk_type;
    mbedtls_x509_crt_verify_chain ver_chain;
    uint32_t ee_flags;

    *flags = 0;
 80a92d8:	9a41      	ldr	r2, [sp, #260]	; 0x104
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy,
                     mbedtls_x509_crt_restart_ctx *rs_ctx )
{
 80a92da:	9e40      	ldr	r6, [sp, #256]	; 0x100
 80a92dc:	9109      	str	r1, [sp, #36]	; 0x24
    int ret;
    mbedtls_pk_type_t pk_type;
    mbedtls_x509_crt_verify_chain ver_chain;
    uint32_t ee_flags;

    *flags = 0;
 80a92de:	6013      	str	r3, [r2, #0]
{
    size_t i;

    for( i = 0; i < MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE; i++ )
    {
        ver_chain->items[i].crt = NULL;
 80a92e0:	ad21      	add	r5, sp, #132	; 0x84
        ver_chain->items[i].flags = (uint32_t) -1;
 80a92e2:	f04f 31ff 	mov.w	r1, #4294967295
{
    size_t i;

    for( i = 0; i < MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE; i++ )
    {
        ver_chain->items[i].crt = NULL;
 80a92e6:	5158      	str	r0, [r3, r5]
        ver_chain->items[i].flags = (uint32_t) -1;
 80a92e8:	18ea      	adds	r2, r5, r3
 80a92ea:	3308      	adds	r3, #8
static void x509_crt_verify_chain_reset(
    mbedtls_x509_crt_verify_chain *ver_chain )
{
    size_t i;

    for( i = 0; i < MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE; i++ )
 80a92ec:	2b50      	cmp	r3, #80	; 0x50
    {
        ver_chain->items[i].crt = NULL;
        ver_chain->items[i].flags = (uint32_t) -1;
 80a92ee:	6051      	str	r1, [r2, #4]
static void x509_crt_verify_chain_reset(
    mbedtls_x509_crt_verify_chain *ver_chain )
{
    size_t i;

    for( i = 0; i < MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE; i++ )
 80a92f0:	d1f9      	bne.n	80a92e6 <mbedtls_x509_crt_verify_restartable+0x1e>

    *flags = 0;
    ee_flags = 0;
    x509_crt_verify_chain_reset( &ver_chain );

    if( profile == NULL )
 80a92f2:	9b05      	ldr	r3, [sp, #20]
 80a92f4:	2b00      	cmp	r3, #0
 80a92f6:	f000 8120 	beq.w	80a953a <mbedtls_x509_crt_verify_restartable+0x272>
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
        goto exit;
    }

    /* check name if requested */
    if( cn != NULL )
 80a92fa:	b34e      	cbz	r6, 80a9350 <mbedtls_x509_crt_verify_restartable+0x88>
                                  const char *cn,
                                  uint32_t *flags )
{
    const mbedtls_x509_name *name;
    const mbedtls_x509_sequence *cur;
    size_t cn_len = strlen( cn );
 80a92fc:	4630      	mov	r0, r6
 80a92fe:	f009 faf1 	bl	80b28e4 <strlen>

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 80a9302:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
                                  const char *cn,
                                  uint32_t *flags )
{
    const mbedtls_x509_name *name;
    const mbedtls_x509_sequence *cur;
    size_t cn_len = strlen( cn );
 80a9306:	4607      	mov	r7, r0

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 80a9308:	069b      	lsls	r3, r3, #26
 80a930a:	d50d      	bpl.n	80a9328 <mbedtls_x509_crt_verify_restartable+0x60>
    {
        for( cur = &crt->subject_alt_names; cur != NULL; cur = cur->next )
 80a930c:	f104 08e8 	add.w	r8, r4, #232	; 0xe8
        {
            if( x509_crt_check_cn( &cur->buf, cn, cn_len ) == 0 )
 80a9310:	463a      	mov	r2, r7
 80a9312:	4631      	mov	r1, r6
 80a9314:	4640      	mov	r0, r8
 80a9316:	f7ff fbc5 	bl	80a8aa4 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj>
 80a931a:	b1d8      	cbz	r0, 80a9354 <mbedtls_x509_crt_verify_restartable+0x8c>
    const mbedtls_x509_sequence *cur;
    size_t cn_len = strlen( cn );

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
    {
        for( cur = &crt->subject_alt_names; cur != NULL; cur = cur->next )
 80a931c:	f8d8 800c 	ldr.w	r8, [r8, #12]
 80a9320:	f1b8 0f00 	cmp.w	r8, #0
 80a9324:	d1f4      	bne.n	80a9310 <mbedtls_x509_crt_verify_restartable+0x48>
 80a9326:	e01c      	b.n	80a9362 <mbedtls_x509_crt_verify_restartable+0x9a>
        if( cur == NULL )
            *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
    }
    else
    {
        for( name = &crt->subject; name != NULL; name = name->next )
 80a9328:	f104 086c 	add.w	r8, r4, #108	; 0x6c
        {
            if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 &&
 80a932c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80a9330:	2a03      	cmp	r2, #3
 80a9332:	d111      	bne.n	80a9358 <mbedtls_x509_crt_verify_restartable+0x90>
 80a9334:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80a9338:	4893      	ldr	r0, [pc, #588]	; (80a9588 <mbedtls_x509_crt_verify_restartable+0x2c0>)
 80a933a:	f009 fa4d 	bl	80b27d8 <memcmp>
 80a933e:	b958      	cbnz	r0, 80a9358 <mbedtls_x509_crt_verify_restartable+0x90>
                x509_crt_check_cn( &name->val, cn, cn_len ) == 0 )
 80a9340:	463a      	mov	r2, r7
 80a9342:	4631      	mov	r1, r6
 80a9344:	f108 000c 	add.w	r0, r8, #12
 80a9348:	f7ff fbac 	bl	80a8aa4 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj>
    }
    else
    {
        for( name = &crt->subject; name != NULL; name = name->next )
        {
            if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 &&
 80a934c:	b920      	cbnz	r0, 80a9358 <mbedtls_x509_crt_verify_restartable+0x90>
 80a934e:	e001      	b.n	80a9354 <mbedtls_x509_crt_verify_restartable+0x8c>
    mbedtls_pk_type_t pk_type;
    mbedtls_x509_crt_verify_chain ver_chain;
    uint32_t ee_flags;

    *flags = 0;
    ee_flags = 0;
 80a9350:	46b3      	mov	fp, r6
 80a9352:	e008      	b.n	80a9366 <mbedtls_x509_crt_verify_restartable+0x9e>
 80a9354:	4683      	mov	fp, r0
 80a9356:	e006      	b.n	80a9366 <mbedtls_x509_crt_verify_restartable+0x9e>
        if( cur == NULL )
            *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
    }
    else
    {
        for( name = &crt->subject; name != NULL; name = name->next )
 80a9358:	f8d8 8018 	ldr.w	r8, [r8, #24]
 80a935c:	f1b8 0f00 	cmp.w	r8, #0
 80a9360:	d1e4      	bne.n	80a932c <mbedtls_x509_crt_verify_restartable+0x64>
                break;
            }
        }

        if( name == NULL )
            *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
 80a9362:	f04f 0b04 	mov.w	fp, #4
    /* check name if requested */
    if( cn != NULL )
        x509_crt_verify_name( crt, cn, &ee_flags );

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 80a9366:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
 80a936a:	4630      	mov	r0, r6
 80a936c:	f000 ff2c 	bl	80aa1c8 <mbedtls_pk_get_type>
 80a9370:	9b05      	ldr	r3, [sp, #20]

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
 80a9372:	4601      	mov	r1, r0
 80a9374:	3304      	adds	r3, #4
 80a9376:	4618      	mov	r0, r3
 80a9378:	9306      	str	r3, [sp, #24]
 80a937a:	f7ff fb3d 	bl	80a89f8 <_ZL25x509_profile_check_md_algPK24mbedtls_x509_crt_profile17mbedtls_md_type_t.isra.1>
 80a937e:	b108      	cbz	r0, 80a9384 <mbedtls_x509_crt_verify_restartable+0xbc>
        ee_flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 80a9380:	f44b 4b00 	orr.w	fp, fp, #32768	; 0x8000

    if( x509_profile_check_key( profile, &crt->pk ) != 0 )
 80a9384:	4631      	mov	r1, r6
 80a9386:	9805      	ldr	r0, [sp, #20]
 80a9388:	f7ff fb63 	bl	80a8a52 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context>
 80a938c:	b108      	cbz	r0, 80a9392 <mbedtls_x509_crt_verify_restartable+0xca>
        ee_flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 80a938e:	f44b 3b80 	orr.w	fp, fp, #65536	; 0x10000
    {
        ver_chain->items[i].crt = NULL;
        ver_chain->items[i].flags = (uint32_t) -1;
    }

    ver_chain->len = 0;
 80a9392:	2700      	movs	r7, #0
#endif /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */

    child = crt;
    self_cnt = 0;
    parent_is_trusted = 0;
    child_is_trusted = 0;
 80a9394:	463e      	mov	r6, r7
        goto find_parent;
    }
#endif /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */

    child = crt;
    self_cnt = 0;
 80a9396:	9707      	str	r7, [sp, #28]
    child_is_trusted = 0;

    while( 1 ) {
        /* Add certificate to the verification chain */
        cur = &ver_chain->items[ver_chain->len];
        cur->crt = child;
 80a9398:	ab21      	add	r3, sp, #132	; 0x84
 80a939a:	f843 4037 	str.w	r4, [r3, r7, lsl #3]
        cur->flags = 0;
 80a939e:	2300      	movs	r3, #0
 80a93a0:	606b      	str	r3, [r5, #4]
        ver_chain->len++;
        flags = &cur->flags;

        /* Check time-validity (all certificates) */
        if( mbedtls_x509_time_is_past( &child->valid_to ) )
 80a93a2:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
    while( 1 ) {
        /* Add certificate to the verification chain */
        cur = &ver_chain->items[ver_chain->len];
        cur->crt = child;
        cur->flags = 0;
        ver_chain->len++;
 80a93a6:	f107 0a01 	add.w	sl, r7, #1
        flags = &cur->flags;

        /* Check time-validity (all certificates) */
        if( mbedtls_x509_time_is_past( &child->valid_to ) )
 80a93aa:	f7f8 fedf 	bl	80a216c <mbedtls_x509_time_is_past>
 80a93ae:	b108      	cbz	r0, 80a93b4 <mbedtls_x509_crt_verify_restartable+0xec>
            *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 80a93b0:	2301      	movs	r3, #1
 80a93b2:	606b      	str	r3, [r5, #4]

        if( mbedtls_x509_time_is_future( &child->valid_from ) )
 80a93b4:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 80a93b8:	f7f8 feda 	bl	80a2170 <mbedtls_x509_time_is_future>
 80a93bc:	b118      	cbz	r0, 80a93c6 <mbedtls_x509_crt_verify_restartable+0xfe>
            *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 80a93be:	686b      	ldr	r3, [r5, #4]
 80a93c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80a93c4:	606b      	str	r3, [r5, #4]

        /* Stop here for trusted roots (but not for trusted EE certs) */
        if( child_is_trusted )
 80a93c6:	2e00      	cmp	r6, #0
 80a93c8:	f040 8194 	bne.w	80a96f4 <mbedtls_x509_crt_verify_restartable+0x42c>
            return( 0 );

        /* Check signature algorithm: MD & PK algs */
        if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
 80a93cc:	f894 1128 	ldrb.w	r1, [r4, #296]	; 0x128
 80a93d0:	9805      	ldr	r0, [sp, #20]
 80a93d2:	f7ff fb11 	bl	80a89f8 <_ZL25x509_profile_check_md_algPK24mbedtls_x509_crt_profile17mbedtls_md_type_t.isra.1>
 80a93d6:	b118      	cbz	r0, 80a93e0 <mbedtls_x509_crt_verify_restartable+0x118>
            *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 80a93d8:	686b      	ldr	r3, [r5, #4]
 80a93da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80a93de:	606b      	str	r3, [r5, #4]

        if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
 80a93e0:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
 80a93e4:	9806      	ldr	r0, [sp, #24]
 80a93e6:	f7ff fb07 	bl	80a89f8 <_ZL25x509_profile_check_md_algPK24mbedtls_x509_crt_profile17mbedtls_md_type_t.isra.1>
 80a93ea:	b118      	cbz	r0, 80a93f4 <mbedtls_x509_crt_verify_restartable+0x12c>
            *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 80a93ec:	686b      	ldr	r3, [r5, #4]
 80a93ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80a93f2:	606b      	str	r3, [r5, #4]

        /* Special case: EE certs that are locally trusted */
        if( ver_chain->len == 1 &&
 80a93f4:	f1ba 0f01 	cmp.w	sl, #1
 80a93f8:	d119      	bne.n	80a942e <mbedtls_x509_crt_verify_restartable+0x166>
                    mbedtls_x509_crt *trust_ca )
{
    mbedtls_x509_crt *cur;

    /* must be self-issued */
    if( x509_name_cmp( &crt->issuer, &crt->subject ) != 0 )
 80a93fa:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 80a93fe:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80a9402:	f7ff fab9 	bl	80a8978 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
 80a9406:	b978      	cbnz	r0, 80a9428 <mbedtls_x509_crt_verify_restartable+0x160>
 80a9408:	9e09      	ldr	r6, [sp, #36]	; 0x24
        return( -1 );

    /* look for an exact match with trusted cert */
    for( cur = trust_ca; cur != NULL; cur = cur->next )
 80a940a:	b186      	cbz	r6, 80a942e <mbedtls_x509_crt_verify_restartable+0x166>
    {
        if( crt->raw.len == cur->raw.len &&
 80a940c:	6862      	ldr	r2, [r4, #4]
 80a940e:	6873      	ldr	r3, [r6, #4]
 80a9410:	429a      	cmp	r2, r3
 80a9412:	d106      	bne.n	80a9422 <mbedtls_x509_crt_verify_restartable+0x15a>
            memcmp( crt->raw.p, cur->raw.p, crt->raw.len ) == 0 )
 80a9414:	68b1      	ldr	r1, [r6, #8]
 80a9416:	68a0      	ldr	r0, [r4, #8]
 80a9418:	f009 f9de 	bl	80b27d8 <memcmp>
        return( -1 );

    /* look for an exact match with trusted cert */
    for( cur = trust_ca; cur != NULL; cur = cur->next )
    {
        if( crt->raw.len == cur->raw.len &&
 80a941c:	2800      	cmp	r0, #0
 80a941e:	f000 8169 	beq.w	80a96f4 <mbedtls_x509_crt_verify_restartable+0x42c>
    /* must be self-issued */
    if( x509_name_cmp( &crt->issuer, &crt->subject ) != 0 )
        return( -1 );

    /* look for an exact match with trusted cert */
    for( cur = trust_ca; cur != NULL; cur = cur->next )
 80a9422:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 80a9426:	e7f0      	b.n	80a940a <mbedtls_x509_crt_verify_restartable+0x142>
                    mbedtls_x509_crt *trust_ca )
{
    mbedtls_x509_crt *cur;

    /* must be self-issued */
    if( x509_name_cmp( &crt->issuer, &crt->subject ) != 0 )
 80a9428:	f8cd a010 	str.w	sl, [sp, #16]
 80a942c:	e001      	b.n	80a9432 <mbedtls_x509_crt_verify_restartable+0x16a>
        return( -1 );

    /* look for an exact match with trusted cert */
    for( cur = trust_ca; cur != NULL; cur = cur->next )
 80a942e:	2301      	movs	r3, #1
 80a9430:	9304      	str	r3, [sp, #16]
                                  int top )
{
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 80a9432:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 80a9436:	930d      	str	r3, [sp, #52]	; 0x34
        rs_ctx->parent_is_trusted = -1;
    }
#endif

    while( 1 ) {
        search_list = *parent_is_trusted ? trust_ca : child->next;
 80a9438:	9b04      	ldr	r3, [sp, #16]
 80a943a:	b913      	cbnz	r3, 80a9442 <mbedtls_x509_crt_verify_restartable+0x17a>
 80a943c:	f8d4 6130 	ldr.w	r6, [r4, #304]	; 0x130
 80a9440:	e000      	b.n	80a9444 <mbedtls_x509_crt_verify_restartable+0x17c>
 80a9442:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a9444:	2300      	movs	r3, #0
 80a9446:	4698      	mov	r8, r3
 80a9448:	9308      	str	r3, [sp, #32]
#endif

    fallback_parent = NULL;
    fallback_signature_is_good = 0;

    for( parent = candidates; parent != NULL; parent = parent->next )
 80a944a:	2e00      	cmp	r6, #0
 80a944c:	d06b      	beq.n	80a9526 <mbedtls_x509_crt_verify_restartable+0x25e>
                                  int top )
{
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 80a944e:	f106 016c 	add.w	r1, r6, #108	; 0x6c
 80a9452:	980d      	ldr	r0, [sp, #52]	; 0x34
 80a9454:	f7ff fa90 	bl	80a8978 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
 80a9458:	2800      	cmp	r0, #0
 80a945a:	d161      	bne.n	80a9520 <mbedtls_x509_crt_verify_restartable+0x258>

    /* Parent must have the basicConstraints CA bit set as a general rule */
    need_ca_bit = 1;

    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
 80a945c:	9b04      	ldr	r3, [sp, #16]
 80a945e:	b113      	cbz	r3, 80a9466 <mbedtls_x509_crt_verify_restartable+0x19e>
 80a9460:	69b3      	ldr	r3, [r6, #24]
 80a9462:	2b02      	cmp	r3, #2
 80a9464:	dd09      	ble.n	80a947a <mbedtls_x509_crt_verify_restartable+0x1b2>
        need_ca_bit = 0;

    if( need_ca_bit && ! parent->ca_istrue )
 80a9466:	f8d6 30fc 	ldr.w	r3, [r6, #252]	; 0xfc
 80a946a:	2b00      	cmp	r3, #0
 80a946c:	d058      	beq.n	80a9520 <mbedtls_x509_crt_verify_restartable+0x258>
        return( -1 );

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( need_ca_bit &&
        mbedtls_x509_crt_check_key_usage( parent, MBEDTLS_X509_KU_KEY_CERT_SIGN ) != 0 )
 80a946e:	2104      	movs	r1, #4
 80a9470:	4630      	mov	r0, r6
 80a9472:	f7ff fec1 	bl	80a91f8 <mbedtls_x509_crt_check_key_usage>
    fallback_signature_is_good = 0;

    for( parent = candidates; parent != NULL; parent = parent->next )
    {
        /* basic parenting skills (name, CA bit, key usage) */
        if( x509_crt_check_parent( child, parent, top ) != 0 )
 80a9476:	2800      	cmp	r0, #0
 80a9478:	d152      	bne.n	80a9520 <mbedtls_x509_crt_verify_restartable+0x258>
            continue;

        /* +1 because stored max_pathlen is 1 higher that the actual value */
        if( parent->max_pathlen > 0 &&
 80a947a:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
 80a947e:	2b00      	cmp	r3, #0
 80a9480:	dd04      	ble.n	80a948c <mbedtls_x509_crt_verify_restartable+0x1c4>
 80a9482:	9a07      	ldr	r2, [sp, #28]
 80a9484:	ebc2 020a 	rsb	r2, r2, sl
 80a9488:	4293      	cmp	r3, r2
 80a948a:	d349      	bcc.n	80a9520 <mbedtls_x509_crt_verify_restartable+0x258>
                                     mbedtls_x509_crt_restart_ctx *rs_ctx )
{
    const mbedtls_md_info_t *md_info;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];

    md_info = mbedtls_md_info_from_type( child->sig_md );
 80a948c:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
 80a9490:	f7fe fe5e 	bl	80a8150 <mbedtls_md_info_from_type>
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 80a9494:	ab11      	add	r3, sp, #68	; 0x44
 80a9496:	6922      	ldr	r2, [r4, #16]
 80a9498:	6961      	ldr	r1, [r4, #20]
                                     mbedtls_x509_crt_restart_ctx *rs_ctx )
{
    const mbedtls_md_info_t *md_info;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];

    md_info = mbedtls_md_info_from_type( child->sig_md );
 80a949a:	900a      	str	r0, [sp, #40]	; 0x28
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 80a949c:	f7fe fec4 	bl	80a8228 <mbedtls_md>
 80a94a0:	b110      	cbz	r0, 80a94a8 <mbedtls_x509_crt_verify_restartable+0x1e0>
    {
        /* Note: this can't happen except after an internal error */
        return( -1 );
 80a94a2:	f04f 30ff 	mov.w	r0, #4294967295
 80a94a6:	e023      	b.n	80a94f0 <mbedtls_x509_crt_verify_restartable+0x228>
    }

    /* Skip expensive computation on obvious mismatch */
    if( ! mbedtls_pk_can_do( &parent->pk, child->sig_pk ) )
 80a94a8:	f106 09bc 	add.w	r9, r6, #188	; 0xbc
 80a94ac:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
 80a94b0:	4648      	mov	r0, r9
 80a94b2:	f000 fd95 	bl	80a9fe0 <mbedtls_pk_can_do>
 80a94b6:	2800      	cmp	r0, #0
 80a94b8:	d0f3      	beq.n	80a94a2 <mbedtls_x509_crt_verify_restartable+0x1da>
    }
#else
    (void) rs_ctx;
#endif

    return( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 80a94ba:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 80a94be:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 80a94c2:	930b      	str	r3, [sp, #44]	; 0x2c
                child->sig_md, hash, mbedtls_md_get_size( md_info ),
 80a94c4:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 80a94c8:	980a      	ldr	r0, [sp, #40]	; 0x28
    }
#else
    (void) rs_ctx;
#endif

    return( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 80a94ca:	910f      	str	r1, [sp, #60]	; 0x3c
                child->sig_md, hash, mbedtls_md_get_size( md_info ),
 80a94cc:	930e      	str	r3, [sp, #56]	; 0x38
 80a94ce:	f7fe ff75 	bl	80a83bc <mbedtls_md_get_size>
                child->sig.p, child->sig.len ) );
 80a94d2:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 80a94d6:	ab11      	add	r3, sp, #68	; 0x44
 80a94d8:	9203      	str	r2, [sp, #12]
 80a94da:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80a94de:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80a94e0:	9202      	str	r2, [sp, #8]
 80a94e2:	9001      	str	r0, [sp, #4]
 80a94e4:	9300      	str	r3, [sp, #0]
 80a94e6:	464a      	mov	r2, r9
 80a94e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a94ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80a94ec:	f000 fe08 	bl	80aa100 <mbedtls_pk_verify_ext>
#else
        (void) ret;
#endif

        signature_is_good = ret == 0;
        if( top && ! signature_is_good )
 80a94f0:	9b04      	ldr	r3, [sp, #16]
 80a94f2:	b103      	cbz	r3, 80a94f6 <mbedtls_x509_crt_verify_restartable+0x22e>
 80a94f4:	b9a0      	cbnz	r0, 80a9520 <mbedtls_x509_crt_verify_restartable+0x258>
        }
#else
        (void) ret;
#endif

        signature_is_good = ret == 0;
 80a94f6:	fab0 f980 	clz	r9, r0
        if( top && ! signature_is_good )
            continue;

        /* optional time check */
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
 80a94fa:	f106 00a4 	add.w	r0, r6, #164	; 0xa4
        }
#else
        (void) ret;
#endif

        signature_is_good = ret == 0;
 80a94fe:	ea4f 1959 	mov.w	r9, r9, lsr #5
        if( top && ! signature_is_good )
            continue;

        /* optional time check */
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
 80a9502:	f7f8 fe33 	bl	80a216c <mbedtls_x509_time_is_past>
 80a9506:	b928      	cbnz	r0, 80a9514 <mbedtls_x509_crt_verify_restartable+0x24c>
            mbedtls_x509_time_is_future( &parent->valid_from ) )
 80a9508:	f106 008c 	add.w	r0, r6, #140	; 0x8c
 80a950c:	f7f8 fe30 	bl	80a2170 <mbedtls_x509_time_is_future>
        signature_is_good = ret == 0;
        if( top && ! signature_is_good )
            continue;

        /* optional time check */
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
 80a9510:	2800      	cmp	r0, #0
 80a9512:	d040      	beq.n	80a9596 <mbedtls_x509_crt_verify_restartable+0x2ce>
            mbedtls_x509_time_is_future( &parent->valid_from ) )
        {
            if( fallback_parent == NULL )
 80a9514:	f1b8 0f00 	cmp.w	r8, #0
 80a9518:	d102      	bne.n	80a9520 <mbedtls_x509_crt_verify_restartable+0x258>
 80a951a:	46b0      	mov	r8, r6
        }
#else
        (void) ret;
#endif

        signature_is_good = ret == 0;
 80a951c:	f8cd 9020 	str.w	r9, [sp, #32]
#endif

    fallback_parent = NULL;
    fallback_signature_is_good = 0;

    for( parent = candidates; parent != NULL; parent = parent->next )
 80a9520:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 80a9524:	e791      	b.n	80a944a <mbedtls_x509_crt_verify_restartable+0x182>
#else
        (void) ret;
#endif

        /* stop here if found or already in second iteration */
        if( *parent != NULL || *parent_is_trusted == 0 )
 80a9526:	f1b8 0f00 	cmp.w	r8, #0
 80a952a:	d131      	bne.n	80a9590 <mbedtls_x509_crt_verify_restartable+0x2c8>
 80a952c:	9b04      	ldr	r3, [sp, #16]
 80a952e:	2b00      	cmp	r3, #0
 80a9530:	f000 8095 	beq.w	80a965e <mbedtls_x509_crt_verify_restartable+0x396>
            break;

        /* prepare second iteration */
        *parent_is_trusted = 0;
 80a9534:	f8cd 8010 	str.w	r8, [sp, #16]
 80a9538:	e780      	b.n	80a943c <mbedtls_x509_crt_verify_restartable+0x174>
    ee_flags = 0;
    x509_crt_verify_chain_reset( &ver_chain );

    if( profile == NULL )
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
 80a953a:	4814      	ldr	r0, [pc, #80]	; (80a958c <mbedtls_x509_crt_verify_restartable+0x2c4>)
 80a953c:	e01f      	b.n	80a957e <mbedtls_x509_crt_verify_restartable+0x2b6>

        if( NULL != f_vrfy )
            if( ( ret = f_vrfy( p_vrfy, cur->crt, (int) i-1, &cur_flags ) ) != 0 )
                return( ret );

        *flags |= cur_flags;
 80a953e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80a9540:	3d08      	subs	r5, #8
 80a9542:	681a      	ldr	r2, [r3, #0]
 80a9544:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80a9546:	4313      	orrs	r3, r2
 80a9548:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80a954a:	6013      	str	r3, [r2, #0]
 80a954c:	4622      	mov	r2, r4
    int ret;
    unsigned i;
    uint32_t cur_flags;
    const mbedtls_x509_crt_verify_chain_item *cur;

    for( i = ver_chain->len; i != 0; --i )
 80a954e:	2c00      	cmp	r4, #0
 80a9550:	f000 80da 	beq.w	80a9708 <mbedtls_x509_crt_verify_restartable+0x440>
    {
        cur = &ver_chain->items[i-1];
        cur_flags = cur->flags;
 80a9554:	682b      	ldr	r3, [r5, #0]
 80a9556:	1e54      	subs	r4, r2, #1
 80a9558:	9311      	str	r3, [sp, #68]	; 0x44

        if( NULL != f_vrfy )
 80a955a:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80a955c:	2b00      	cmp	r3, #0
 80a955e:	d0ee      	beq.n	80a953e <mbedtls_x509_crt_verify_restartable+0x276>
            if( ( ret = f_vrfy( p_vrfy, cur->crt, (int) i-1, &cur_flags ) ) != 0 )
 80a9560:	ab11      	add	r3, sp, #68	; 0x44
 80a9562:	4622      	mov	r2, r4
 80a9564:	f855 1c04 	ldr.w	r1, [r5, #-4]
 80a9568:	9843      	ldr	r0, [sp, #268]	; 0x10c
 80a956a:	9e42      	ldr	r6, [sp, #264]	; 0x108
 80a956c:	47b0      	blx	r6
 80a956e:	2800      	cmp	r0, #0
 80a9570:	d0e5      	beq.n	80a953e <mbedtls_x509_crt_verify_restartable+0x276>
#endif

    /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
 80a9572:	f510 5f1c 	cmn.w	r0, #9984	; 0x2700
 80a9576:	d070      	beq.n	80a965a <mbedtls_x509_crt_verify_restartable+0x392>
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;

    if( ret != 0 )
 80a9578:	2800      	cmp	r0, #0
 80a957a:	f000 80c5 	beq.w	80a9708 <mbedtls_x509_crt_verify_restartable+0x440>
    {
        *flags = (uint32_t) -1;
 80a957e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80a9580:	f04f 33ff 	mov.w	r3, #4294967295
 80a9584:	6013      	str	r3, [r2, #0]
        return( ret );
 80a9586:	e0c5      	b.n	80a9714 <mbedtls_x509_crt_verify_restartable+0x44c>
 80a9588:	080b44e1 	.word	0x080b44e1
 80a958c:	ffffd800 	.word	0xffffd800
#else
        (void) ret;
#endif

        /* stop here if found or already in second iteration */
        if( *parent != NULL || *parent_is_trusted == 0 )
 80a9590:	4646      	mov	r6, r8
 80a9592:	f8dd 9020 	ldr.w	r9, [sp, #32]
        }

        /* Count intermediate self-issued (not necessarily self-signed) certs.
         * These can occur with some strategies for key rollover, see [SIRO],
         * and should be excluded from max_pathlen checks. */
        if( ver_chain->len != 1 &&
 80a9596:	f1ba 0f01 	cmp.w	sl, #1
 80a959a:	d00c      	beq.n	80a95b6 <mbedtls_x509_crt_verify_restartable+0x2ee>
            x509_name_cmp( &child->issuer, &child->subject ) == 0 )
 80a959c:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 80a95a0:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80a95a4:	f7ff f9e8 	bl	80a8978 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
        }

        /* Count intermediate self-issued (not necessarily self-signed) certs.
         * These can occur with some strategies for key rollover, see [SIRO],
         * and should be excluded from max_pathlen checks. */
        if( ver_chain->len != 1 &&
 80a95a8:	2800      	cmp	r0, #0
 80a95aa:	d062      	beq.n	80a9672 <mbedtls_x509_crt_verify_restartable+0x3aa>
            self_cnt++;
        }

        /* path_cnt is 0 for the first intermediate CA,
         * and if parent is trusted it's not an intermediate CA */
        if( ! parent_is_trusted &&
 80a95ac:	9b04      	ldr	r3, [sp, #16]
 80a95ae:	b913      	cbnz	r3, 80a95b6 <mbedtls_x509_crt_verify_restartable+0x2ee>
 80a95b0:	f1ba 0f08 	cmp.w	sl, #8
 80a95b4:	d851      	bhi.n	80a965a <mbedtls_x509_crt_verify_restartable+0x392>
            /* return immediately to avoid overflow the chain array */
            return( MBEDTLS_ERR_X509_FATAL_ERROR );
        }

        /* signature was checked while searching parent */
        if( ! signature_is_good )
 80a95b6:	f1b9 0f00 	cmp.w	r9, #0
 80a95ba:	d103      	bne.n	80a95c4 <mbedtls_x509_crt_verify_restartable+0x2fc>
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 80a95bc:	686b      	ldr	r3, [r5, #4]
 80a95be:	f043 0308 	orr.w	r3, r3, #8
 80a95c2:	606b      	str	r3, [r5, #4]

        /* check size of signing key */
        if( x509_profile_check_key( profile, &parent->pk ) != 0 )
 80a95c4:	f106 09bc 	add.w	r9, r6, #188	; 0xbc
 80a95c8:	4649      	mov	r1, r9
 80a95ca:	9805      	ldr	r0, [sp, #20]
 80a95cc:	f7ff fa41 	bl	80a8a52 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context>
 80a95d0:	b118      	cbz	r0, 80a95da <mbedtls_x509_crt_verify_restartable+0x312>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 80a95d2:	686b      	ldr	r3, [r5, #4]
 80a95d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80a95d8:	606b      	str	r3, [r5, #4]
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
            x509_name_cmp( &crl_list->issuer, &ca->subject ) != 0 )
 80a95da:	f106 036c 	add.w	r3, r6, #108	; 0x6c

        /* optional time check */
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
            mbedtls_x509_time_is_future( &parent->valid_from ) )
        {
            if( fallback_parent == NULL )
 80a95de:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80a95e2:	2700      	movs	r7, #0
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
            x509_name_cmp( &crl_list->issuer, &ca->subject ) != 0 )
 80a95e4:	930b      	str	r3, [sp, #44]	; 0x2c
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
        return( flags );

    while( crl_list != NULL )
 80a95e6:	f1b8 0f00 	cmp.w	r8, #0
 80a95ea:	d02e      	beq.n	80a964a <mbedtls_x509_crt_verify_restartable+0x382>
    {
        if( crl_list->version == 0 ||
 80a95ec:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80a95f0:	2b00      	cmp	r3, #0
 80a95f2:	d07c      	beq.n	80a96ee <mbedtls_x509_crt_verify_restartable+0x426>
            x509_name_cmp( &crl_list->issuer, &ca->subject ) != 0 )
 80a95f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80a95f6:	f108 0034 	add.w	r0, r8, #52	; 0x34
 80a95fa:	f7ff f9bd 	bl	80a8978 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
    if( ca == NULL )
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
 80a95fe:	2800      	cmp	r0, #0
 80a9600:	d175      	bne.n	80a96ee <mbedtls_x509_crt_verify_restartable+0x426>

        /*
         * Check if the CA is configured to sign CRLs
         */
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
        if( mbedtls_x509_crt_check_key_usage( ca,
 80a9602:	2102      	movs	r1, #2
 80a9604:	4630      	mov	r0, r6
 80a9606:	f7ff fdf7 	bl	80a91f8 <mbedtls_x509_crt_check_key_usage>
 80a960a:	b9e0      	cbnz	r0, 80a9646 <mbedtls_x509_crt_verify_restartable+0x37e>
#endif

        /*
         * Check if CRL is correctly signed by the trusted CA
         */
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
 80a960c:	f898 20e8 	ldrb.w	r2, [r8, #232]	; 0xe8
 80a9610:	9805      	ldr	r0, [sp, #20]
 80a9612:	4611      	mov	r1, r2
 80a9614:	f7ff f9f0 	bl	80a89f8 <_ZL25x509_profile_check_md_algPK24mbedtls_x509_crt_profile17mbedtls_md_type_t.isra.1>
 80a9618:	b108      	cbz	r0, 80a961e <mbedtls_x509_crt_verify_restartable+0x356>
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;
 80a961a:	f447 3700 	orr.w	r7, r7, #131072	; 0x20000

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
 80a961e:	f898 10e9 	ldrb.w	r1, [r8, #233]	; 0xe9
 80a9622:	9806      	ldr	r0, [sp, #24]
 80a9624:	f7ff f9e8 	bl	80a89f8 <_ZL25x509_profile_check_md_algPK24mbedtls_x509_crt_profile17mbedtls_md_type_t.isra.1>
 80a9628:	b108      	cbz	r0, 80a962e <mbedtls_x509_crt_verify_restartable+0x366>
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;
 80a962a:	f447 2780 	orr.w	r7, r7, #262144	; 0x40000

        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
 80a962e:	4610      	mov	r0, r2
 80a9630:	f7fe fd8e 	bl	80a8150 <mbedtls_md_info_from_type>
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
 80a9634:	ab11      	add	r3, sp, #68	; 0x44
 80a9636:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80a963a:	f8d8 1014 	ldr.w	r1, [r8, #20]
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;

        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
 80a963e:	9008      	str	r0, [sp, #32]
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
 80a9640:	f7fe fdf2 	bl	80a8228 <mbedtls_md>
 80a9644:	b1c8      	cbz	r0, 80a967a <mbedtls_x509_crt_verify_restartable+0x3b2>

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
                           crl_list->sig.p, crl_list->sig.len ) != 0 )
        {
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
 80a9646:	f047 0710 	orr.w	r7, r7, #16
        if( x509_profile_check_key( profile, &parent->pk ) != 0 )
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

#if defined(MBEDTLS_X509_CRL_PARSE_C)
        /* Check trusted CA's CRL for the given crt */
        *flags |= x509_crt_verifycrl( child, parent, ca_crl, profile );
 80a964a:	686b      	ldr	r3, [r5, #4]
 80a964c:	4634      	mov	r4, r6
 80a964e:	431f      	orrs	r7, r3
 80a9650:	606f      	str	r7, [r5, #4]
    while( 1 ) {
        /* Add certificate to the verification chain */
        cur = &ver_chain->items[ver_chain->len];
        cur->crt = child;
        cur->flags = 0;
        ver_chain->len++;
 80a9652:	9e04      	ldr	r6, [sp, #16]
 80a9654:	3508      	adds	r5, #8
 80a9656:	4657      	mov	r7, sl
 80a9658:	e69e      	b.n	80a9398 <mbedtls_x509_crt_verify_restartable+0xd0>

    /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;
 80a965a:	4830      	ldr	r0, [pc, #192]	; (80a971c <mbedtls_x509_crt_verify_restartable+0x454>)
 80a965c:	e78f      	b.n	80a957e <mbedtls_x509_crt_verify_restartable+0x2b6>
#endif

        /* No parent? We're done here */
        if( parent == NULL )
        {
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 80a965e:	ab36      	add	r3, sp, #216	; 0xd8
 80a9660:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80a9664:	f857 3c50 	ldr.w	r3, [r7, #-80]
 80a9668:	f043 0308 	orr.w	r3, r3, #8
 80a966c:	f847 3c50 	str.w	r3, [r7, #-80]
 80a9670:	e040      	b.n	80a96f4 <mbedtls_x509_crt_verify_restartable+0x42c>
         * These can occur with some strategies for key rollover, see [SIRO],
         * and should be excluded from max_pathlen checks. */
        if( ver_chain->len != 1 &&
            x509_name_cmp( &child->issuer, &child->subject ) == 0 )
        {
            self_cnt++;
 80a9672:	9b07      	ldr	r3, [sp, #28]
 80a9674:	3301      	adds	r3, #1
 80a9676:	9307      	str	r3, [sp, #28]
 80a9678:	e798      	b.n	80a95ac <mbedtls_x509_crt_verify_restartable+0x2e4>
            /* Note: this can't happen except after an internal error */
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
            break;
        }

        if( x509_profile_check_key( profile, &ca->pk ) != 0 )
 80a967a:	4649      	mov	r1, r9
 80a967c:	9805      	ldr	r0, [sp, #20]
 80a967e:	f7ff f9e8 	bl	80a8a52 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context>
 80a9682:	b108      	cbz	r0, 80a9688 <mbedtls_x509_crt_verify_restartable+0x3c0>
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 80a9684:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 80a9688:	f898 30e9 	ldrb.w	r3, [r8, #233]	; 0xe9
 80a968c:	f8d8 10ec 	ldr.w	r1, [r8, #236]	; 0xec
 80a9690:	930a      	str	r3, [sp, #40]	; 0x28
 80a9692:	f898 30e8 	ldrb.w	r3, [r8, #232]	; 0xe8
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 80a9696:	9808      	ldr	r0, [sp, #32]
        }

        if( x509_profile_check_key( profile, &ca->pk ) != 0 )
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 80a9698:	910e      	str	r1, [sp, #56]	; 0x38
 80a969a:	930d      	str	r3, [sp, #52]	; 0x34
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 80a969c:	f7fe fe8e 	bl	80a83bc <mbedtls_md_get_size>
        }

        if( x509_profile_check_key( profile, &ca->pk ) != 0 )
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 80a96a0:	f8d8 20e0 	ldr.w	r2, [r8, #224]	; 0xe0
 80a96a4:	ab11      	add	r3, sp, #68	; 0x44
 80a96a6:	9203      	str	r2, [sp, #12]
 80a96a8:	f8d8 20e4 	ldr.w	r2, [r8, #228]	; 0xe4
 80a96ac:	990e      	ldr	r1, [sp, #56]	; 0x38
 80a96ae:	9202      	str	r2, [sp, #8]
 80a96b0:	9001      	str	r0, [sp, #4]
 80a96b2:	9300      	str	r3, [sp, #0]
 80a96b4:	464a      	mov	r2, r9
 80a96b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a96b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a96ba:	f000 fd21 	bl	80aa100 <mbedtls_pk_verify_ext>
 80a96be:	2800      	cmp	r0, #0
 80a96c0:	d1c1      	bne.n	80a9646 <mbedtls_x509_crt_verify_restartable+0x37e>
        }

        /*
         * Check for validity of CRL (Do not drop out)
         */
        if( mbedtls_x509_time_is_past( &crl_list->next_update ) )
 80a96c2:	f108 006c 	add.w	r0, r8, #108	; 0x6c
 80a96c6:	f7f8 fd51 	bl	80a216c <mbedtls_x509_time_is_past>
 80a96ca:	b108      	cbz	r0, 80a96d0 <mbedtls_x509_crt_verify_restartable+0x408>
            flags |= MBEDTLS_X509_BADCRL_EXPIRED;
 80a96cc:	f047 0720 	orr.w	r7, r7, #32

        if( mbedtls_x509_time_is_future( &crl_list->this_update ) )
 80a96d0:	f108 0054 	add.w	r0, r8, #84	; 0x54
 80a96d4:	f7f8 fd4c 	bl	80a2170 <mbedtls_x509_time_is_future>
 80a96d8:	b108      	cbz	r0, 80a96de <mbedtls_x509_crt_verify_restartable+0x416>
            flags |= MBEDTLS_X509_BADCRL_FUTURE;
 80a96da:	f447 6780 	orr.w	r7, r7, #1024	; 0x400

        /*
         * Check if certificate is revoked
         */
        if( mbedtls_x509_crt_is_revoked( crt, crl_list ) )
 80a96de:	4641      	mov	r1, r8
 80a96e0:	4620      	mov	r0, r4
 80a96e2:	f7ff fdd3 	bl	80a928c <mbedtls_x509_crt_is_revoked>
 80a96e6:	b110      	cbz	r0, 80a96ee <mbedtls_x509_crt_verify_restartable+0x426>
        {
            flags |= MBEDTLS_X509_BADCERT_REVOKED;
 80a96e8:	f047 0702 	orr.w	r7, r7, #2
 80a96ec:	e7ad      	b.n	80a964a <mbedtls_x509_crt_verify_restartable+0x382>
    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
            x509_name_cmp( &crl_list->issuer, &ca->subject ) != 0 )
        {
            crl_list = crl_list->next;
 80a96ee:	f8d8 80f0 	ldr.w	r8, [r8, #240]	; 0xf0
 80a96f2:	e778      	b.n	80a95e6 <mbedtls_x509_crt_verify_restartable+0x31e>

    if( ret != 0 )
        goto exit;

    /* Merge end-entity flags */
    ver_chain.items[0].flags |= ee_flags;
 80a96f4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80a96f6:	ab36      	add	r3, sp, #216	; 0xd8
 80a96f8:	ea40 000b 	orr.w	r0, r0, fp
 80a96fc:	eb03 05ca 	add.w	r5, r3, sl, lsl #3
 80a9700:	9022      	str	r0, [sp, #136]	; 0x88
 80a9702:	3d58      	subs	r5, #88	; 0x58
 80a9704:	4652      	mov	r2, sl
 80a9706:	e725      	b.n	80a9554 <mbedtls_x509_crt_verify_restartable+0x28c>
    {
        *flags = (uint32_t) -1;
        return( ret );
    }

    if( *flags != 0 )
 80a9708:	9b41      	ldr	r3, [sp, #260]	; 0x104
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );
 80a970a:	4805      	ldr	r0, [pc, #20]	; (80a9720 <mbedtls_x509_crt_verify_restartable+0x458>)
    {
        *flags = (uint32_t) -1;
        return( ret );
    }

    if( *flags != 0 )
 80a970c:	681b      	ldr	r3, [r3, #0]
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );
 80a970e:	2b00      	cmp	r3, #0
 80a9710:	bf08      	it	eq
 80a9712:	2000      	moveq	r0, #0

    return( 0 );
}
 80a9714:	b037      	add	sp, #220	; 0xdc
 80a9716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a971a:	bf00      	nop
 80a971c:	ffffd000 	.word	0xffffd000
 80a9720:	ffffd900 	.word	0xffffd900

080a9724 <mbedtls_x509_crt_init>:
/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
 80a9724:	f44f 729a 	mov.w	r2, #308	; 0x134
 80a9728:	2100      	movs	r1, #0
 80a972a:	f009 b88a 	b.w	80b2842 <memset>

080a972e <mbedtls_x509_crt_free>:

/*
 * Unallocate all certificate data
 */
void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
{
 80a972e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_sequence *seq_cur;
    mbedtls_x509_sequence *seq_prv;

    if( crt == NULL )
 80a9730:	4606      	mov	r6, r0
 80a9732:	2800      	cmp	r0, #0
 80a9734:	d057      	beq.n	80a97e6 <mbedtls_x509_crt_free+0xb8>
 80a9736:	4604      	mov	r4, r0
        return;

    do
    {
        mbedtls_pk_free( &cert_cur->pk );
 80a9738:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 80a973c:	f000 fc1e 	bl	80a9f7c <mbedtls_pk_free>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
 80a9740:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 80a9744:	f007 fcd0 	bl	80b10e8 <free>
#endif

        name_cur = cert_cur->issuer.next;
 80a9748:	6e65      	ldr	r5, [r4, #100]	; 0x64
        while( name_cur != NULL )
 80a974a:	b14d      	cbz	r5, 80a9760 <mbedtls_x509_crt_free+0x32>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80a974c:	4628      	mov	r0, r5

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 80a974e:	69af      	ldr	r7, [r5, #24]
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80a9750:	2120      	movs	r1, #32
 80a9752:	f7fc fe5d 	bl	80a6410 <mbedtls_platform_zeroize>
            mbedtls_free( name_prv );
 80a9756:	4628      	mov	r0, r5
 80a9758:	f007 fcc6 	bl	80b10e8 <free>

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 80a975c:	463d      	mov	r5, r7
#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
 80a975e:	e7f4      	b.n	80a974a <mbedtls_x509_crt_free+0x1c>
            name_cur = name_cur->next;
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
 80a9760:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        while( name_cur != NULL )
 80a9764:	b14d      	cbz	r5, 80a977a <mbedtls_x509_crt_free+0x4c>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80a9766:	4628      	mov	r0, r5

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 80a9768:	69af      	ldr	r7, [r5, #24]
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80a976a:	2120      	movs	r1, #32
 80a976c:	f7fc fe50 	bl	80a6410 <mbedtls_platform_zeroize>
            mbedtls_free( name_prv );
 80a9770:	4628      	mov	r0, r5
 80a9772:	f007 fcb9 	bl	80b10e8 <free>

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 80a9776:	463d      	mov	r5, r7
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
 80a9778:	e7f4      	b.n	80a9764 <mbedtls_x509_crt_free+0x36>
            name_cur = name_cur->next;
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
 80a977a:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
        while( seq_cur != NULL )
 80a977e:	b14d      	cbz	r5, 80a9794 <mbedtls_x509_crt_free+0x66>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_platform_zeroize( seq_prv,
                                      sizeof( mbedtls_x509_sequence ) );
 80a9780:	4628      	mov	r0, r5

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 80a9782:	68ef      	ldr	r7, [r5, #12]
            mbedtls_platform_zeroize( seq_prv,
                                      sizeof( mbedtls_x509_sequence ) );
 80a9784:	2110      	movs	r1, #16
 80a9786:	f7fc fe43 	bl	80a6410 <mbedtls_platform_zeroize>
            mbedtls_free( seq_prv );
 80a978a:	4628      	mov	r0, r5
 80a978c:	f007 fcac 	bl	80b10e8 <free>

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 80a9790:	463d      	mov	r5, r7
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
 80a9792:	e7f4      	b.n	80a977e <mbedtls_x509_crt_free+0x50>
            mbedtls_platform_zeroize( seq_prv,
                                      sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
 80a9794:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
        while( seq_cur != NULL )
 80a9798:	b14d      	cbz	r5, 80a97ae <mbedtls_x509_crt_free+0x80>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_platform_zeroize( seq_prv,
                                      sizeof( mbedtls_x509_sequence ) );
 80a979a:	4628      	mov	r0, r5

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 80a979c:	68ef      	ldr	r7, [r5, #12]
            mbedtls_platform_zeroize( seq_prv,
                                      sizeof( mbedtls_x509_sequence ) );
 80a979e:	2110      	movs	r1, #16
 80a97a0:	f7fc fe36 	bl	80a6410 <mbedtls_platform_zeroize>
            mbedtls_free( seq_prv );
 80a97a4:	4628      	mov	r0, r5
 80a97a6:	f007 fc9f 	bl	80b10e8 <free>

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 80a97aa:	463d      	mov	r5, r7
                                      sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
 80a97ac:	e7f4      	b.n	80a9798 <mbedtls_x509_crt_free+0x6a>
            mbedtls_platform_zeroize( seq_prv,
                                      sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        if( cert_cur->raw.p != NULL )
 80a97ae:	68a0      	ldr	r0, [r4, #8]
 80a97b0:	b128      	cbz	r0, 80a97be <mbedtls_x509_crt_free+0x90>
        {
            mbedtls_platform_zeroize( cert_cur->raw.p, cert_cur->raw.len );
 80a97b2:	6861      	ldr	r1, [r4, #4]
 80a97b4:	f7fc fe2c 	bl	80a6410 <mbedtls_platform_zeroize>
            mbedtls_free( cert_cur->raw.p );
 80a97b8:	68a0      	ldr	r0, [r4, #8]
 80a97ba:	f007 fc95 	bl	80b10e8 <free>
        }

        cert_cur = cert_cur->next;
 80a97be:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    }
    while( cert_cur != NULL );
 80a97c2:	2c00      	cmp	r4, #0
 80a97c4:	d1b8      	bne.n	80a9738 <mbedtls_x509_crt_free+0xa>
 80a97c6:	4634      	mov	r4, r6
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;

        mbedtls_platform_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 80a97c8:	f44f 719a 	mov.w	r1, #308	; 0x134
 80a97cc:	4620      	mov	r0, r4

    cert_cur = crt;
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;
 80a97ce:	f8d4 5130 	ldr.w	r5, [r4, #304]	; 0x130

        mbedtls_platform_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 80a97d2:	f7fc fe1d 	bl	80a6410 <mbedtls_platform_zeroize>
        if( cert_prv != crt )
 80a97d6:	42b4      	cmp	r4, r6
 80a97d8:	d002      	beq.n	80a97e0 <mbedtls_x509_crt_free+0xb2>
            mbedtls_free( cert_prv );
 80a97da:	4620      	mov	r0, r4
 80a97dc:	f007 fc84 	bl	80b10e8 <free>
    }
    while( cert_cur != NULL );
 80a97e0:	462c      	mov	r4, r5
 80a97e2:	2d00      	cmp	r5, #0
 80a97e4:	d1f0      	bne.n	80a97c8 <mbedtls_x509_crt_free+0x9a>
 80a97e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a97e8 <mbedtls_x509_crt_parse_der>:
 * Parse one X.509 certificate in DER format from a buffer and add them to a
 * chained list
 */
int mbedtls_x509_crt_parse_der( mbedtls_x509_crt *chain, const unsigned char *buf,
                        size_t buflen )
{
 80a97e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a97ec:	4688      	mov	r8, r1
 80a97ee:	b09b      	sub	sp, #108	; 0x6c
 80a97f0:	4615      	mov	r5, r2
    mbedtls_x509_crt *crt = chain, *prev = NULL;

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
 80a97f2:	4682      	mov	sl, r0
 80a97f4:	2800      	cmp	r0, #0
 80a97f6:	f000 81bd 	beq.w	80a9b74 <mbedtls_x509_crt_parse_der+0x38c>
 80a97fa:	2900      	cmp	r1, #0
 80a97fc:	f000 81ba 	beq.w	80a9b74 <mbedtls_x509_crt_parse_der+0x38c>
 80a9800:	4604      	mov	r4, r0
 80a9802:	f04f 0900 	mov.w	r9, #0
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    while( crt->version != 0 && crt->next != NULL )
 80a9806:	69a3      	ldr	r3, [r4, #24]
 80a9808:	b1a3      	cbz	r3, 80a9834 <mbedtls_x509_crt_parse_der+0x4c>
 80a980a:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 80a980e:	46a1      	mov	r9, r4
 80a9810:	b10b      	cbz	r3, 80a9816 <mbedtls_x509_crt_parse_der+0x2e>
 80a9812:	461c      	mov	r4, r3
 80a9814:	e7f7      	b.n	80a9806 <mbedtls_x509_crt_parse_der+0x1e>
    /*
     * Add new certificate on the end of the chain if needed.
     */
    if( crt->version != 0 && crt->next == NULL )
    {
        crt->next = (mbedtls_x509_crt *)mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
 80a9816:	f44f 719a 	mov.w	r1, #308	; 0x134
 80a981a:	2001      	movs	r0, #1
 80a981c:	f008 fece 	bl	80b25bc <calloc>
 80a9820:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130

        if( crt->next == NULL )
 80a9824:	2800      	cmp	r0, #0
 80a9826:	f000 81a7 	beq.w	80a9b78 <mbedtls_x509_crt_parse_der+0x390>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        prev = crt;
        mbedtls_x509_crt_init( crt->next );
 80a982a:	f7ff ff7b 	bl	80a9724 <mbedtls_x509_crt_init>
 80a982e:	46a1      	mov	r9, r4
        crt = crt->next;
 80a9830:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    int ret;
    size_t len;
    unsigned char *p, *end, *crt_end;
    mbedtls_x509_buf sig_params1, sig_params2, sig_oid2;

    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 80a9834:	2300      	movs	r3, #0
 80a9836:	930b      	str	r3, [sp, #44]	; 0x2c
 80a9838:	930c      	str	r3, [sp, #48]	; 0x30
 80a983a:	930d      	str	r3, [sp, #52]	; 0x34
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
 80a983c:	930e      	str	r3, [sp, #56]	; 0x38
 80a983e:	930f      	str	r3, [sp, #60]	; 0x3c
 80a9840:	9310      	str	r3, [sp, #64]	; 0x40
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
 80a9842:	9311      	str	r3, [sp, #68]	; 0x44
 80a9844:	9312      	str	r3, [sp, #72]	; 0x48
 80a9846:	9313      	str	r3, [sp, #76]	; 0x4c

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
 80a9848:	2c00      	cmp	r4, #0
 80a984a:	f000 80ef 	beq.w	80a9a2c <mbedtls_x509_crt_parse_der+0x244>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
    len = buflen;
 80a984e:	ae1a      	add	r6, sp, #104	; 0x68
 80a9850:	f846 5d54 	str.w	r5, [r6, #-84]!
    end = p + len;
 80a9854:	eb08 0b05 	add.w	fp, r8, r5
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a9858:	2330      	movs	r3, #48	; 0x30
 80a985a:	4632      	mov	r2, r6
 80a985c:	4659      	mov	r1, fp
 80a985e:	a806      	add	r0, sp, #24
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
 80a9860:	f8cd 8018 	str.w	r8, [sp, #24]
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a9864:	f7f7 ff02 	bl	80a166c <mbedtls_asn1_get_tag>
 80a9868:	b120      	cbz	r0, 80a9874 <mbedtls_x509_crt_parse_der+0x8c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 80a986a:	4620      	mov	r0, r4
 80a986c:	f7ff ff5f 	bl	80a972e <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
 80a9870:	4dbb      	ldr	r5, [pc, #748]	; (80a9b60 <mbedtls_x509_crt_parse_der+0x378>)
 80a9872:	e168      	b.n	80a9b46 <mbedtls_x509_crt_parse_der+0x35e>
    }

    if( len > (size_t) ( end - p ) )
 80a9874:	9d06      	ldr	r5, [sp, #24]
 80a9876:	9f05      	ldr	r7, [sp, #20]
 80a9878:	ebc5 0b0b 	rsb	fp, r5, fp
 80a987c:	45bb      	cmp	fp, r7
 80a987e:	f0c0 80d0 	bcc.w	80a9a22 <mbedtls_x509_crt_parse_der+0x23a>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }
    crt_end = p + len;

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
 80a9882:	443d      	add	r5, r7
 80a9884:	ebc8 0505 	rsb	r5, r8, r5
 80a9888:	6065      	str	r5, [r4, #4]
    crt->raw.p = p = (unsigned char *)mbedtls_calloc( 1, crt->raw.len );
 80a988a:	4629      	mov	r1, r5
 80a988c:	2001      	movs	r0, #1
 80a988e:	f008 fe95 	bl	80b25bc <calloc>
 80a9892:	4683      	mov	fp, r0
 80a9894:	9006      	str	r0, [sp, #24]
 80a9896:	60a0      	str	r0, [r4, #8]
    if( p == NULL )
 80a9898:	2800      	cmp	r0, #0
 80a989a:	f000 80c9 	beq.w	80a9a30 <mbedtls_x509_crt_parse_der+0x248>
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
 80a989e:	462a      	mov	r2, r5

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
 80a98a0:	1bed      	subs	r5, r5, r7
 80a98a2:	445d      	add	r5, fp
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char *)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
 80a98a4:	4641      	mov	r1, r8

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
    end = crt_end = p + len;
 80a98a6:	442f      	add	r7, r5
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char *)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
 80a98a8:	f008 ffa5 	bl	80b27f6 <memcpy>
    end = crt_end = p + len;

    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;
 80a98ac:	6165      	str	r5, [r4, #20]

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a98ae:	2330      	movs	r3, #48	; 0x30
 80a98b0:	4632      	mov	r2, r6
 80a98b2:	4639      	mov	r1, r7
 80a98b4:	a806      	add	r0, sp, #24
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
 80a98b6:	9506      	str	r5, [sp, #24]
    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a98b8:	f7f7 fed8 	bl	80a166c <mbedtls_asn1_get_tag>
 80a98bc:	4605      	mov	r5, r0
 80a98be:	2800      	cmp	r0, #0
 80a98c0:	d15b      	bne.n	80a997a <mbedtls_x509_crt_parse_der+0x192>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    end = p + len;
 80a98c2:	9b05      	ldr	r3, [sp, #20]
 80a98c4:	9e06      	ldr	r6, [sp, #24]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a98c6:	aa17      	add	r2, sp, #92	; 0x5c
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    end = p + len;
 80a98c8:	441e      	add	r6, r3
    crt->tbs.len = end - crt->tbs.p;
 80a98ca:	6963      	ldr	r3, [r4, #20]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a98cc:	4631      	mov	r1, r6
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    end = p + len;
    crt->tbs.len = end - crt->tbs.p;
 80a98ce:	1af3      	subs	r3, r6, r3
 80a98d0:	6123      	str	r3, [r4, #16]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a98d2:	a806      	add	r0, sp, #24
 80a98d4:	23a0      	movs	r3, #160	; 0xa0
 80a98d6:	f7f7 fec9 	bl	80a166c <mbedtls_asn1_get_tag>
 80a98da:	b138      	cbz	r0, 80a98ec <mbedtls_x509_crt_parse_der+0x104>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80a98dc:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80a98e0:	d101      	bne.n	80a98e6 <mbedtls_x509_crt_parse_der+0xfe>
        {
            *ver = 0;
 80a98e2:	61a5      	str	r5, [r4, #24]
 80a98e4:	e017      	b.n	80a9916 <mbedtls_x509_crt_parse_der+0x12e>
            return( 0 );
        }

        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 80a98e6:	f5a0 5506 	sub.w	r5, r0, #8576	; 0x2180
 80a98ea:	e011      	b.n	80a9910 <mbedtls_x509_crt_parse_der+0x128>
    }

    end = *p + len;
 80a98ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a98ee:	9d06      	ldr	r5, [sp, #24]

    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 80a98f0:	f104 0218 	add.w	r2, r4, #24
        }

        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    end = *p + len;
 80a98f4:	441d      	add	r5, r3

    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 80a98f6:	4629      	mov	r1, r5
 80a98f8:	a806      	add	r0, sp, #24
 80a98fa:	f7f7 fee4 	bl	80a16c6 <mbedtls_asn1_get_int>
 80a98fe:	b110      	cbz	r0, 80a9906 <mbedtls_x509_crt_parse_der+0x11e>
        return( MBEDTLS_ERR_X509_INVALID_VERSION + ret );
 80a9900:	f5a0 5508 	sub.w	r5, r0, #8704	; 0x2200
 80a9904:	e004      	b.n	80a9910 <mbedtls_x509_crt_parse_der+0x128>

    if( *p != end )
 80a9906:	9b06      	ldr	r3, [sp, #24]
 80a9908:	429d      	cmp	r5, r3
 80a990a:	d004      	beq.n	80a9916 <mbedtls_x509_crt_parse_der+0x12e>
        return( MBEDTLS_ERR_X509_INVALID_VERSION +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a990c:	4d95      	ldr	r5, [pc, #596]	; (80a9b64 <mbedtls_x509_crt_parse_der+0x37c>)
 80a990e:	e1b3      	b.n	80a9c78 <mbedtls_x509_crt_parse_der+0x490>
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 80a9910:	2d00      	cmp	r5, #0
 80a9912:	f040 81b1 	bne.w	80a9c78 <mbedtls_x509_crt_parse_der+0x490>
 80a9916:	f104 021c 	add.w	r2, r4, #28
 80a991a:	4631      	mov	r1, r6
 80a991c:	a806      	add	r0, sp, #24
 80a991e:	f7f8 f807 	bl	80a1930 <mbedtls_x509_get_serial>
     *
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 80a9922:	4605      	mov	r5, r0
 80a9924:	2800      	cmp	r0, #0
 80a9926:	f040 81a7 	bne.w	80a9c78 <mbedtls_x509_crt_parse_der+0x490>
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
        ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
 80a992a:	f104 0828 	add.w	r8, r4, #40	; 0x28
 80a992e:	ab0b      	add	r3, sp, #44	; 0x2c
 80a9930:	4642      	mov	r2, r8
 80a9932:	4631      	mov	r1, r6
 80a9934:	a806      	add	r0, sp, #24
 80a9936:	f7f8 f82a 	bl	80a198e <mbedtls_x509_get_alg>
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 80a993a:	4605      	mov	r5, r0
 80a993c:	2800      	cmp	r0, #0
 80a993e:	f040 819b 	bne.w	80a9c78 <mbedtls_x509_crt_parse_der+0x490>
 80a9942:	e11b      	b.n	80a9b7c <mbedtls_x509_crt_parse_der+0x394>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
    }

    crt->version++;
 80a9944:	3301      	adds	r3, #1
 80a9946:	61a3      	str	r3, [r4, #24]

    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
 80a9948:	f504 7396 	add.w	r3, r4, #300	; 0x12c
 80a994c:	9300      	str	r3, [sp, #0]
 80a994e:	f504 7294 	add.w	r2, r4, #296	; 0x128
 80a9952:	f204 1329 	addw	r3, r4, #297	; 0x129
 80a9956:	a90b      	add	r1, sp, #44	; 0x2c
 80a9958:	4640      	mov	r0, r8
 80a995a:	f7f8 fa63 	bl	80a1e24 <mbedtls_x509_get_sig_alg>
 80a995e:	4605      	mov	r5, r0
 80a9960:	2800      	cmp	r0, #0
 80a9962:	f040 8189 	bne.w	80a9c78 <mbedtls_x509_crt_parse_der+0x490>
    }

    /*
     * issuer               Name
     */
    crt->issuer_raw.p = p;
 80a9966:	9b06      	ldr	r3, [sp, #24]

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a9968:	aa05      	add	r2, sp, #20
    }

    /*
     * issuer               Name
     */
    crt->issuer_raw.p = p;
 80a996a:	63e3      	str	r3, [r4, #60]	; 0x3c

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a996c:	4631      	mov	r1, r6
 80a996e:	2330      	movs	r3, #48	; 0x30
 80a9970:	a806      	add	r0, sp, #24
 80a9972:	f7f7 fe7b 	bl	80a166c <mbedtls_asn1_get_tag>
 80a9976:	4605      	mov	r5, r0
 80a9978:	b128      	cbz	r0, 80a9986 <mbedtls_x509_crt_parse_der+0x19e>
    crt->subject_raw.p = p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 80a997a:	4620      	mov	r0, r4
 80a997c:	f7ff fed7 	bl	80a972e <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 80a9980:	f5a5 5506 	sub.w	r5, r5, #8576	; 0x2180
 80a9984:	e0dc      	b.n	80a9b40 <mbedtls_x509_crt_parse_der+0x358>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
 80a9986:	9b05      	ldr	r3, [sp, #20]
 80a9988:	9906      	ldr	r1, [sp, #24]
 80a998a:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80a998e:	4419      	add	r1, r3
 80a9990:	a806      	add	r0, sp, #24
 80a9992:	f7f8 f8f3 	bl	80a1b7c <mbedtls_x509_get_name>
 80a9996:	4605      	mov	r5, r0
 80a9998:	2800      	cmp	r0, #0
 80a999a:	f040 816d 	bne.w	80a9c78 <mbedtls_x509_crt_parse_der+0x490>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->issuer_raw.len = p - crt->issuer_raw.p;
 80a999e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a99a0:	9b06      	ldr	r3, [sp, #24]
                           mbedtls_x509_time *to )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a99a2:	4631      	mov	r1, r6
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->issuer_raw.len = p - crt->issuer_raw.p;
 80a99a4:	1a9b      	subs	r3, r3, r2
 80a99a6:	63a3      	str	r3, [r4, #56]	; 0x38
                           mbedtls_x509_time *to )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a99a8:	aa17      	add	r2, sp, #92	; 0x5c
 80a99aa:	2330      	movs	r3, #48	; 0x30
 80a99ac:	a806      	add	r0, sp, #24
 80a99ae:	f7f7 fe5d 	bl	80a166c <mbedtls_asn1_get_tag>
 80a99b2:	2800      	cmp	r0, #0
 80a99b4:	f000 80eb 	beq.w	80a9b8e <mbedtls_x509_crt_parse_der+0x3a6>
     * Validity ::= SEQUENCE {
     *      notBefore      Time,
     *      notAfter       Time }
     *
     */
    if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
 80a99b8:	f5b0 5510 	subs.w	r5, r0, #9216	; 0x2400
 80a99bc:	f040 815c 	bne.w	80a9c78 <mbedtls_x509_crt_parse_der+0x490>
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
 80a99c0:	f10d 0868 	add.w	r8, sp, #104	; 0x68
 80a99c4:	f858 3d50 	ldr.w	r3, [r8, #-80]!

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a99c8:	aa05      	add	r2, sp, #20
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
 80a99ca:	64a3      	str	r3, [r4, #72]	; 0x48

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a99cc:	4631      	mov	r1, r6
 80a99ce:	2330      	movs	r3, #48	; 0x30
 80a99d0:	4640      	mov	r0, r8
 80a99d2:	f7f7 fe4b 	bl	80a166c <mbedtls_asn1_get_tag>
 80a99d6:	4605      	mov	r5, r0
 80a99d8:	2800      	cmp	r0, #0
 80a99da:	d1ce      	bne.n	80a997a <mbedtls_x509_crt_parse_der+0x192>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 80a99dc:	9b05      	ldr	r3, [sp, #20]
 80a99de:	2b00      	cmp	r3, #0
 80a99e0:	f040 80f1 	bne.w	80a9bc6 <mbedtls_x509_crt_parse_der+0x3de>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->subject_raw.len = p - crt->subject_raw.p;
 80a99e4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80a99e6:	9b06      	ldr	r3, [sp, #24]

    /*
     * SubjectPublicKeyInfo
     */
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 80a99e8:	4631      	mov	r1, r6
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->subject_raw.len = p - crt->subject_raw.p;
 80a99ea:	1a9b      	subs	r3, r3, r2
 80a99ec:	6463      	str	r3, [r4, #68]	; 0x44

    /*
     * SubjectPublicKeyInfo
     */
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 80a99ee:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 80a99f2:	4640      	mov	r0, r8
 80a99f4:	f7fd fe24 	bl	80a7640 <mbedtls_pk_parse_subpubkey>
 80a99f8:	4605      	mov	r5, r0
 80a99fa:	2800      	cmp	r0, #0
 80a99fc:	f040 813c 	bne.w	80a9c78 <mbedtls_x509_crt_parse_der+0x490>
     *  subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
     *                       -- If present, version shall be v2 or v3
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
 80a9a00:	69a3      	ldr	r3, [r4, #24]
 80a9a02:	3b02      	subs	r3, #2
 80a9a04:	2b01      	cmp	r3, #1
 80a9a06:	f240 80e9 	bls.w	80a9bdc <mbedtls_x509_crt_parse_der+0x3f4>
            mbedtls_x509_crt_free( crt );
            return( ret );
        }
    }

    if( crt->version == 2 || crt->version == 3 )
 80a9a0a:	69a3      	ldr	r3, [r4, #24]
 80a9a0c:	3b02      	subs	r3, #2
 80a9a0e:	2b01      	cmp	r3, #1
 80a9a10:	f240 80f0 	bls.w	80a9bf4 <mbedtls_x509_crt_parse_der+0x40c>
            return( ret );
        }
    }

#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
 80a9a14:	69a3      	ldr	r3, [r4, #24]
 80a9a16:	2b03      	cmp	r3, #3
 80a9a18:	d00c      	beq.n	80a9a34 <mbedtls_x509_crt_parse_der+0x24c>
            mbedtls_x509_crt_free( crt );
            return( ret );
        }
    }

    if( p != end )
 80a9a1a:	9b06      	ldr	r3, [sp, #24]
 80a9a1c:	429e      	cmp	r6, r3
 80a9a1e:	f000 80fe 	beq.w	80a9c1e <mbedtls_x509_crt_parse_der+0x436>
        return( ret );
    }

    if( p != end )
    {
        mbedtls_x509_crt_free( crt );
 80a9a22:	4620      	mov	r0, r4
 80a9a24:	f7ff fe83 	bl	80a972e <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a9a28:	4d4f      	ldr	r5, [pc, #316]	; (80a9b68 <mbedtls_x509_crt_parse_der+0x380>)
 80a9a2a:	e08c      	b.n	80a9b46 <mbedtls_x509_crt_parse_der+0x35e>

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80a9a2c:	4d4f      	ldr	r5, [pc, #316]	; (80a9b6c <mbedtls_x509_crt_parse_der+0x384>)
 80a9a2e:	e08a      	b.n	80a9b46 <mbedtls_x509_crt_parse_der+0x35e>

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char *)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 80a9a30:	4d4f      	ldr	r5, [pc, #316]	; (80a9b70 <mbedtls_x509_crt_parse_der+0x388>)
 80a9a32:	e088      	b.n	80a9b46 <mbedtls_x509_crt_parse_der+0x35e>
{
    int ret;
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( *p == end )
 80a9a34:	9a06      	ldr	r2, [sp, #24]
 80a9a36:	4296      	cmp	r6, r2
 80a9a38:	d0ef      	beq.n	80a9a1a <mbedtls_x509_crt_parse_der+0x232>
        return( 0 );

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
 80a9a3a:	f104 02dc 	add.w	r2, r4, #220	; 0xdc
 80a9a3e:	4631      	mov	r1, r6
 80a9a40:	4640      	mov	r0, r8
 80a9a42:	f7f8 fa2f 	bl	80a1ea4 <mbedtls_x509_get_ext>
 80a9a46:	4603      	mov	r3, r0
 80a9a48:	2800      	cmp	r0, #0
 80a9a4a:	d173      	bne.n	80a9b34 <mbedtls_x509_crt_parse_der+0x34c>
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 80a9a4c:	4680      	mov	r8, r0
        return( 0 );

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
        return( ret );

    end = crt->v3_ext.p + crt->v3_ext.len;
 80a9a4e:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
 80a9a52:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 80a9a56:	188a      	adds	r2, r1, r2
 80a9a58:	9202      	str	r2, [sp, #8]
    while( *p < end )
 80a9a5a:	9b06      	ldr	r3, [sp, #24]
 80a9a5c:	9a02      	ldr	r2, [sp, #8]
 80a9a5e:	429a      	cmp	r2, r3
 80a9a60:	f240 80d9 	bls.w	80a9c16 <mbedtls_x509_crt_parse_der+0x42e>
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
        int is_critical = 0; /* DEFAULT FALSE */
        int ext_type = 0;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a9a64:	2330      	movs	r3, #48	; 0x30
 80a9a66:	aa07      	add	r2, sp, #28
 80a9a68:	9902      	ldr	r1, [sp, #8]
 80a9a6a:	a806      	add	r0, sp, #24
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 80a9a6c:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80a9a70:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
 80a9a74:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
        int is_critical = 0; /* DEFAULT FALSE */
 80a9a78:	f8cd 8020 	str.w	r8, [sp, #32]
        int ext_type = 0;
 80a9a7c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a9a80:	f7f7 fdf4 	bl	80a166c <mbedtls_asn1_get_tag>
 80a9a84:	2800      	cmp	r0, #0
 80a9a86:	f040 80fb 	bne.w	80a9c80 <mbedtls_x509_crt_parse_der+0x498>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;
 80a9a8a:	9b07      	ldr	r3, [sp, #28]
 80a9a8c:	9d06      	ldr	r5, [sp, #24]

        /* Get extension ID */
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &extn_oid.len,
 80a9a8e:	aa15      	add	r2, sp, #84	; 0x54

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;
 80a9a90:	441d      	add	r5, r3

        /* Get extension ID */
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &extn_oid.len,
 80a9a92:	4629      	mov	r1, r5
 80a9a94:	2306      	movs	r3, #6
 80a9a96:	a806      	add	r0, sp, #24
 80a9a98:	f7f7 fde8 	bl	80a166c <mbedtls_asn1_get_tag>
 80a9a9c:	2800      	cmp	r0, #0
 80a9a9e:	f040 80ef 	bne.w	80a9c80 <mbedtls_x509_crt_parse_der+0x498>
                                          MBEDTLS_ASN1_OID ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.tag = MBEDTLS_ASN1_OID;
 80a9aa2:	2306      	movs	r3, #6
        extn_oid.p = *p;
 80a9aa4:	9a06      	ldr	r2, [sp, #24]
        /* Get extension ID */
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &extn_oid.len,
                                          MBEDTLS_ASN1_OID ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.tag = MBEDTLS_ASN1_OID;
 80a9aa6:	9314      	str	r3, [sp, #80]	; 0x50
        extn_oid.p = *p;
        *p += extn_oid.len;
 80a9aa8:	9b15      	ldr	r3, [sp, #84]	; 0x54
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &extn_oid.len,
                                          MBEDTLS_ASN1_OID ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.tag = MBEDTLS_ASN1_OID;
        extn_oid.p = *p;
 80a9aaa:	9216      	str	r2, [sp, #88]	; 0x58
        *p += extn_oid.len;
 80a9aac:	4413      	add	r3, r2

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 80a9aae:	4629      	mov	r1, r5
 80a9ab0:	aa08      	add	r2, sp, #32
 80a9ab2:	a806      	add	r0, sp, #24
                                          MBEDTLS_ASN1_OID ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.tag = MBEDTLS_ASN1_OID;
        extn_oid.p = *p;
        *p += extn_oid.len;
 80a9ab4:	9306      	str	r3, [sp, #24]

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 80a9ab6:	f7f7 fded 	bl	80a1694 <mbedtls_asn1_get_bool>
 80a9aba:	2800      	cmp	r0, #0
 80a9abc:	f040 80a6 	bne.w	80a9c0c <mbedtls_x509_crt_parse_der+0x424>
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        /* Data should be octet string type */
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
 80a9ac0:	2304      	movs	r3, #4
 80a9ac2:	aa07      	add	r2, sp, #28
 80a9ac4:	4629      	mov	r1, r5
 80a9ac6:	a806      	add	r0, sp, #24
 80a9ac8:	f7f7 fdd0 	bl	80a166c <mbedtls_asn1_get_tag>
 80a9acc:	2800      	cmp	r0, #0
 80a9ace:	f040 80d7 	bne.w	80a9c80 <mbedtls_x509_crt_parse_der+0x498>
                MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_octet = *p + len;

        if( end_ext_octet != end_ext_data )
 80a9ad2:	9b07      	ldr	r3, [sp, #28]
 80a9ad4:	9a06      	ldr	r2, [sp, #24]
 80a9ad6:	4413      	add	r3, r2
 80a9ad8:	429d      	cmp	r5, r3
 80a9ada:	f040 809e 	bne.w	80a9c1a <mbedtls_x509_crt_parse_der+0x432>
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

        /*
         * Detect supported extensions
         */
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
 80a9ade:	a909      	add	r1, sp, #36	; 0x24
 80a9ae0:	a814      	add	r0, sp, #80	; 0x50
 80a9ae2:	f7fb fae9 	bl	80a50b8 <mbedtls_oid_get_x509_ext_type>

        if( ret != 0 )
 80a9ae6:	2800      	cmp	r0, #0
 80a9ae8:	f040 80d0 	bne.w	80a9c8c <mbedtls_x509_crt_parse_der+0x4a4>
#endif
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
 80a9aec:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
 80a9af0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a9af2:	ea11 0302 	ands.w	r3, r1, r2
 80a9af6:	f040 81b9 	bne.w	80a9e6c <mbedtls_x509_crt_parse_der+0x684>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;
 80a9afa:	4311      	orrs	r1, r2

        switch( ext_type )
 80a9afc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;
 80a9b00:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8

        switch( ext_type )
 80a9b04:	f040 80c8 	bne.w	80a9c98 <mbedtls_x509_crt_parse_der+0x4b0>
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 80a9b08:	f504 7280 	add.w	r2, r4, #256	; 0x100
 80a9b0c:	9203      	str	r2, [sp, #12]
    /*
     * BasicConstraints ::= SEQUENCE {
     *      cA                      BOOLEAN DEFAULT FALSE,
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
 80a9b0e:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    *max_pathlen = 0; /* endless */
 80a9b12:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a9b16:	aa17      	add	r2, sp, #92	; 0x5c
 80a9b18:	2330      	movs	r3, #48	; 0x30
 80a9b1a:	4629      	mov	r1, r5
 80a9b1c:	a806      	add	r0, sp, #24

        switch( ext_type )
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 80a9b1e:	f104 0bfc 	add.w	fp, r4, #252	; 0xfc
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
    *max_pathlen = 0; /* endless */

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a9b22:	f7f7 fda3 	bl	80a166c <mbedtls_asn1_get_tag>
 80a9b26:	2800      	cmp	r0, #0
 80a9b28:	f000 80c4 	beq.w	80a9cb4 <mbedtls_x509_crt_parse_der+0x4cc>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 80a9b2c:	f5a0 5314 	sub.w	r3, r0, #9472	; 0x2500
                return( ret );
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 80a9b30:	2b00      	cmp	r3, #0
 80a9b32:	d092      	beq.n	80a9a5a <mbedtls_x509_crt_parse_der+0x272>
#endif
    {
        ret = x509_get_crt_ext( &p, end, crt );
        if( ret != 0 )
        {
            mbedtls_x509_crt_free( crt );
 80a9b34:	4620      	mov	r0, r4
 80a9b36:	9302      	str	r3, [sp, #8]
 80a9b38:	f7ff fdf9 	bl	80a972e <mbedtls_x509_crt_free>
 80a9b3c:	9b02      	ldr	r3, [sp, #8]
 80a9b3e:	461d      	mov	r5, r3
        prev = crt;
        mbedtls_x509_crt_init( crt->next );
        crt = crt->next;
    }

    if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
 80a9b40:	2d00      	cmp	r5, #0
 80a9b42:	f000 8199 	beq.w	80a9e78 <mbedtls_x509_crt_parse_der+0x690>
    {
        if( prev )
 80a9b46:	f1b9 0f00 	cmp.w	r9, #0
 80a9b4a:	d002      	beq.n	80a9b52 <mbedtls_x509_crt_parse_der+0x36a>
            prev->next = NULL;
 80a9b4c:	2300      	movs	r3, #0
 80a9b4e:	f8c9 3130 	str.w	r3, [r9, #304]	; 0x130

        if( crt != chain )
 80a9b52:	4554      	cmp	r4, sl
 80a9b54:	f000 8190 	beq.w	80a9e78 <mbedtls_x509_crt_parse_der+0x690>
            mbedtls_free( crt );
 80a9b58:	4620      	mov	r0, r4
 80a9b5a:	f007 fac5 	bl	80b10e8 <free>
 80a9b5e:	e18b      	b.n	80a9e78 <mbedtls_x509_crt_parse_der+0x690>
 80a9b60:	ffffde80 	.word	0xffffde80
 80a9b64:	ffffdd9a 	.word	0xffffdd9a
 80a9b68:	ffffde1a 	.word	0xffffde1a
 80a9b6c:	ffffd800 	.word	0xffffd800
 80a9b70:	ffffd780 	.word	0xffffd780

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80a9b74:	4db0      	ldr	r5, [pc, #704]	; (80a9e38 <mbedtls_x509_crt_parse_der+0x650>)
 80a9b76:	e17f      	b.n	80a9e78 <mbedtls_x509_crt_parse_der+0x690>
    if( crt->version != 0 && crt->next == NULL )
    {
        crt->next = (mbedtls_x509_crt *)mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );

        if( crt->next == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 80a9b78:	4db0      	ldr	r5, [pc, #704]	; (80a9e3c <mbedtls_x509_crt_parse_der+0x654>)
 80a9b7a:	e17d      	b.n	80a9e78 <mbedtls_x509_crt_parse_der+0x690>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->version < 0 || crt->version > 2 )
 80a9b7c:	69a3      	ldr	r3, [r4, #24]
 80a9b7e:	2b02      	cmp	r3, #2
 80a9b80:	f67f aee0 	bls.w	80a9944 <mbedtls_x509_crt_parse_der+0x15c>
    {
        mbedtls_x509_crt_free( crt );
 80a9b84:	4620      	mov	r0, r4
 80a9b86:	f7ff fdd2 	bl	80a972e <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
 80a9b8a:	4dad      	ldr	r5, [pc, #692]	; (80a9e40 <mbedtls_x509_crt_parse_der+0x658>)
 80a9b8c:	e7db      	b.n	80a9b46 <mbedtls_x509_crt_parse_der+0x35e>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    end = *p + len;
 80a9b8e:	9a06      	ldr	r2, [sp, #24]
 80a9b90:	9b17      	ldr	r3, [sp, #92]	; 0x5c

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 80a9b92:	a806      	add	r0, sp, #24

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    end = *p + len;
 80a9b94:	eb02 0803 	add.w	r8, r2, r3

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 80a9b98:	4641      	mov	r1, r8
 80a9b9a:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 80a9b9e:	f7f8 f86d 	bl	80a1c7c <mbedtls_x509_get_time>
 80a9ba2:	4605      	mov	r5, r0
 80a9ba4:	2800      	cmp	r0, #0
 80a9ba6:	d167      	bne.n	80a9c78 <mbedtls_x509_crt_parse_der+0x490>
        return( ret );

    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 80a9ba8:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
 80a9bac:	4641      	mov	r1, r8
 80a9bae:	a806      	add	r0, sp, #24
 80a9bb0:	f7f8 f864 	bl	80a1c7c <mbedtls_x509_get_time>
 80a9bb4:	4605      	mov	r5, r0
 80a9bb6:	2800      	cmp	r0, #0
 80a9bb8:	d15e      	bne.n	80a9c78 <mbedtls_x509_crt_parse_der+0x490>
        return( ret );

    if( *p != end )
 80a9bba:	9b06      	ldr	r3, [sp, #24]
 80a9bbc:	4598      	cmp	r8, r3
 80a9bbe:	f43f aeff 	beq.w	80a99c0 <mbedtls_x509_crt_parse_der+0x1d8>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a9bc2:	4da0      	ldr	r5, [pc, #640]	; (80a9e44 <mbedtls_x509_crt_parse_der+0x65c>)
 80a9bc4:	e058      	b.n	80a9c78 <mbedtls_x509_crt_parse_der+0x490>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 80a9bc6:	9906      	ldr	r1, [sp, #24]
 80a9bc8:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 80a9bcc:	4419      	add	r1, r3
 80a9bce:	4640      	mov	r0, r8
 80a9bd0:	f7f7 ffd4 	bl	80a1b7c <mbedtls_x509_get_name>
 80a9bd4:	4605      	mov	r5, r0
 80a9bd6:	2800      	cmp	r0, #0
 80a9bd8:	d14e      	bne.n	80a9c78 <mbedtls_x509_crt_parse_der+0x490>
 80a9bda:	e703      	b.n	80a99e4 <mbedtls_x509_crt_parse_der+0x1fc>
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
    {
        ret = x509_get_uid( &p, end, &crt->issuer_id,  1 );
 80a9bdc:	2301      	movs	r3, #1
 80a9bde:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
 80a9be2:	4631      	mov	r1, r6
 80a9be4:	4640      	mov	r0, r8
 80a9be6:	f7fe ff16 	bl	80a8a16 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
 80a9bea:	4605      	mov	r5, r0
 80a9bec:	2800      	cmp	r0, #0
 80a9bee:	f43f af0c 	beq.w	80a9a0a <mbedtls_x509_crt_parse_der+0x222>
 80a9bf2:	e041      	b.n	80a9c78 <mbedtls_x509_crt_parse_der+0x490>
        }
    }

    if( crt->version == 2 || crt->version == 3 )
    {
        ret = x509_get_uid( &p, end, &crt->subject_id,  2 );
 80a9bf4:	2302      	movs	r3, #2
 80a9bf6:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
 80a9bfa:	4631      	mov	r1, r6
 80a9bfc:	4640      	mov	r0, r8
 80a9bfe:	f7fe ff0a 	bl	80a8a16 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
 80a9c02:	4605      	mov	r5, r0
 80a9c04:	2800      	cmp	r0, #0
 80a9c06:	f43f af05 	beq.w	80a9a14 <mbedtls_x509_crt_parse_der+0x22c>
 80a9c0a:	e035      	b.n	80a9c78 <mbedtls_x509_crt_parse_der+0x490>
        extn_oid.tag = MBEDTLS_ASN1_OID;
        extn_oid.p = *p;
        *p += extn_oid.len;

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 80a9c0c:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80a9c10:	f43f af56 	beq.w	80a9ac0 <mbedtls_x509_crt_parse_der+0x2d8>
 80a9c14:	e034      	b.n	80a9c80 <mbedtls_x509_crt_parse_der+0x498>
        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
        }
    }

    if( *p != end )
 80a9c16:	f43f af00 	beq.w	80a9a1a <mbedtls_x509_crt_parse_der+0x232>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a9c1a:	4b8b      	ldr	r3, [pc, #556]	; (80a9e48 <mbedtls_x509_crt_parse_der+0x660>)
 80a9c1c:	e78a      	b.n	80a9b34 <mbedtls_x509_crt_parse_der+0x34c>
     *  -- end of TBSCertificate
     *
     *  signatureAlgorithm   AlgorithmIdentifier,
     *  signatureValue       BIT STRING
     */
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
 80a9c1e:	ab0e      	add	r3, sp, #56	; 0x38
 80a9c20:	aa11      	add	r2, sp, #68	; 0x44
 80a9c22:	4639      	mov	r1, r7
 80a9c24:	a806      	add	r0, sp, #24
 80a9c26:	f7f7 feb2 	bl	80a198e <mbedtls_x509_get_alg>
 80a9c2a:	4605      	mov	r5, r0
 80a9c2c:	bb20      	cbnz	r0, 80a9c78 <mbedtls_x509_crt_parse_der+0x490>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
 80a9c2e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80a9c30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80a9c32:	429a      	cmp	r2, r3
 80a9c34:	d10e      	bne.n	80a9c54 <mbedtls_x509_crt_parse_der+0x46c>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 80a9c36:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80a9c38:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80a9c3a:	f008 fdcd 	bl	80b27d8 <memcmp>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
 80a9c3e:	b948      	cbnz	r0, 80a9c54 <mbedtls_x509_crt_parse_der+0x46c>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
        sig_params1.len != sig_params2.len ||
 80a9c40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 80a9c42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a9c44:	429a      	cmp	r2, r3
 80a9c46:	d105      	bne.n	80a9c54 <mbedtls_x509_crt_parse_der+0x46c>
        sig_params1.len != sig_params2.len ||
 80a9c48:	b14a      	cbz	r2, 80a9c5e <mbedtls_x509_crt_parse_der+0x476>
        ( sig_params1.len != 0 &&
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
 80a9c4a:	9910      	ldr	r1, [sp, #64]	; 0x40
 80a9c4c:	980d      	ldr	r0, [sp, #52]	; 0x34
 80a9c4e:	f008 fdc3 	bl	80b27d8 <memcmp>
    }

    if( crt->sig_oid.len != sig_oid2.len ||
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
        sig_params1.len != sig_params2.len ||
        ( sig_params1.len != 0 &&
 80a9c52:	b120      	cbz	r0, 80a9c5e <mbedtls_x509_crt_parse_der+0x476>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
    {
        mbedtls_x509_crt_free( crt );
 80a9c54:	4620      	mov	r0, r4
 80a9c56:	f7ff fd6a 	bl	80a972e <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
 80a9c5a:	4d7c      	ldr	r5, [pc, #496]	; (80a9e4c <mbedtls_x509_crt_parse_der+0x664>)
 80a9c5c:	e773      	b.n	80a9b46 <mbedtls_x509_crt_parse_der+0x35e>
    }

    if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
 80a9c5e:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80a9c62:	4639      	mov	r1, r7
 80a9c64:	a806      	add	r0, sp, #24
 80a9c66:	f7f8 f8bf 	bl	80a1de8 <mbedtls_x509_get_sig>
 80a9c6a:	4605      	mov	r5, r0
 80a9c6c:	b920      	cbnz	r0, 80a9c78 <mbedtls_x509_crt_parse_der+0x490>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( p != end )
 80a9c6e:	9b06      	ldr	r3, [sp, #24]
 80a9c70:	429f      	cmp	r7, r3
 80a9c72:	f000 8101 	beq.w	80a9e78 <mbedtls_x509_crt_parse_der+0x690>
 80a9c76:	e6d4      	b.n	80a9a22 <mbedtls_x509_crt_parse_der+0x23a>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 80a9c78:	4620      	mov	r0, r4
 80a9c7a:	f7ff fd58 	bl	80a972e <mbedtls_x509_crt_free>
 80a9c7e:	e75f      	b.n	80a9b40 <mbedtls_x509_crt_parse_der+0x358>
        *p += extn_oid.len;

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 80a9c80:	f5a0 5314 	sub.w	r3, r0, #9472	; 0x2500
#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
#endif
    {
        ret = x509_get_crt_ext( &p, end, crt );
        if( ret != 0 )
 80a9c84:	2b00      	cmp	r3, #0
 80a9c86:	f43f aec8 	beq.w	80a9a1a <mbedtls_x509_crt_parse_der+0x232>
 80a9c8a:	e753      	b.n	80a9b34 <mbedtls_x509_crt_parse_der+0x34c>
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
 80a9c8c:	9b08      	ldr	r3, [sp, #32]
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );

        if( ret != 0 )
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;
 80a9c8e:	9506      	str	r5, [sp, #24]

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
 80a9c90:	2b00      	cmp	r3, #0
 80a9c92:	f43f aee2 	beq.w	80a9a5a <mbedtls_x509_crt_parse_der+0x272>
 80a9c96:	e0e7      	b.n	80a9e68 <mbedtls_x509_crt_parse_der+0x680>
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;

        switch( ext_type )
 80a9c98:	dc04      	bgt.n	80a9ca4 <mbedtls_x509_crt_parse_der+0x4bc>
 80a9c9a:	2a04      	cmp	r2, #4
 80a9c9c:	d03b      	beq.n	80a9d16 <mbedtls_x509_crt_parse_der+0x52e>
 80a9c9e:	2a20      	cmp	r2, #32
 80a9ca0:	d069      	beq.n	80a9d76 <mbedtls_x509_crt_parse_der+0x58e>
 80a9ca2:	e0e5      	b.n	80a9e70 <mbedtls_x509_crt_parse_der+0x688>
 80a9ca4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80a9ca8:	d056      	beq.n	80a9d58 <mbedtls_x509_crt_parse_der+0x570>
 80a9caa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80a9cae:	f000 80b3 	beq.w	80a9e18 <mbedtls_x509_crt_parse_der+0x630>
 80a9cb2:	e0dd      	b.n	80a9e70 <mbedtls_x509_crt_parse_der+0x688>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p == end )
 80a9cb4:	9b06      	ldr	r3, [sp, #24]
 80a9cb6:	429d      	cmp	r5, r3
 80a9cb8:	f43f aecf 	beq.w	80a9a5a <mbedtls_x509_crt_parse_der+0x272>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
 80a9cbc:	465a      	mov	r2, fp
 80a9cbe:	4629      	mov	r1, r5
 80a9cc0:	a806      	add	r0, sp, #24
 80a9cc2:	f7f7 fce7 	bl	80a1694 <mbedtls_asn1_get_bool>
 80a9cc6:	b188      	cbz	r0, 80a9cec <mbedtls_x509_crt_parse_der+0x504>
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80a9cc8:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80a9ccc:	f47f af2e 	bne.w	80a9b2c <mbedtls_x509_crt_parse_der+0x344>
            ret = mbedtls_asn1_get_int( p, end, ca_istrue );
 80a9cd0:	465a      	mov	r2, fp
 80a9cd2:	4629      	mov	r1, r5
 80a9cd4:	a806      	add	r0, sp, #24
 80a9cd6:	f7f7 fcf6 	bl	80a16c6 <mbedtls_asn1_get_int>

        if( ret != 0 )
 80a9cda:	2800      	cmp	r0, #0
 80a9cdc:	f47f af26 	bne.w	80a9b2c <mbedtls_x509_crt_parse_der+0x344>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        if( *ca_istrue != 0 )
 80a9ce0:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 80a9ce4:	b113      	cbz	r3, 80a9cec <mbedtls_x509_crt_parse_der+0x504>
            *ca_istrue = 1;
 80a9ce6:	2301      	movs	r3, #1
 80a9ce8:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    }

    if( *p == end )
 80a9cec:	9b06      	ldr	r3, [sp, #24]
 80a9cee:	429d      	cmp	r5, r3
 80a9cf0:	f43f aeb3 	beq.w	80a9a5a <mbedtls_x509_crt_parse_der+0x272>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
 80a9cf4:	9a03      	ldr	r2, [sp, #12]
 80a9cf6:	4629      	mov	r1, r5
 80a9cf8:	a806      	add	r0, sp, #24
 80a9cfa:	f7f7 fce4 	bl	80a16c6 <mbedtls_asn1_get_int>
 80a9cfe:	2800      	cmp	r0, #0
 80a9d00:	f47f af14 	bne.w	80a9b2c <mbedtls_x509_crt_parse_der+0x344>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p != end )
 80a9d04:	9b06      	ldr	r3, [sp, #24]
 80a9d06:	429d      	cmp	r5, r3
 80a9d08:	d187      	bne.n	80a9c1a <mbedtls_x509_crt_parse_der+0x432>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    (*max_pathlen)++;
 80a9d0a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80a9d0e:	3301      	adds	r3, #1
 80a9d10:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80a9d14:	e6a1      	b.n	80a9a5a <mbedtls_x509_crt_parse_der+0x272>
{
    int ret;
    size_t i;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 80a9d16:	aa17      	add	r2, sp, #92	; 0x5c
 80a9d18:	4629      	mov	r1, r5
 80a9d1a:	a806      	add	r0, sp, #24
                               const unsigned char *end,
                               unsigned int *key_usage)
{
    int ret;
    size_t i;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 80a9d1c:	9317      	str	r3, [sp, #92]	; 0x5c
 80a9d1e:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80a9d22:	9319      	str	r3, [sp, #100]	; 0x64

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 80a9d24:	f7f7 fd06 	bl	80a1734 <mbedtls_asn1_get_bitstring>
 80a9d28:	2800      	cmp	r0, #0
 80a9d2a:	d17f      	bne.n	80a9e2c <mbedtls_x509_crt_parse_der+0x644>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( bs.len < 1 )
 80a9d2c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80a9d2e:	2a00      	cmp	r2, #0
 80a9d30:	f000 80a0 	beq.w	80a9e74 <mbedtls_x509_crt_parse_der+0x68c>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
 80a9d34:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 80a9d38:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80a9d3a:	5c2b      	ldrb	r3, [r5, r0]
 80a9d3c:	00c1      	lsls	r1, r0, #3
 80a9d3e:	408b      	lsls	r3, r1
 80a9d40:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 80a9d44:	3001      	adds	r0, #1
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 80a9d46:	430b      	orrs	r3, r1
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 80a9d48:	4282      	cmp	r2, r0
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 80a9d4a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 80a9d4e:	f43f ae84 	beq.w	80a9a5a <mbedtls_x509_crt_parse_der+0x272>
 80a9d52:	2804      	cmp	r0, #4
 80a9d54:	d1f1      	bne.n	80a9d3a <mbedtls_x509_crt_parse_der+0x552>
 80a9d56:	e680      	b.n	80a9a5a <mbedtls_x509_crt_parse_der+0x272>
                               const unsigned char *end,
                               mbedtls_x509_sequence *ext_key_usage)
{
    int ret;

    if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
 80a9d58:	2306      	movs	r3, #6
 80a9d5a:	f504 7284 	add.w	r2, r4, #264	; 0x108
 80a9d5e:	4629      	mov	r1, r5
 80a9d60:	a806      	add	r0, sp, #24
 80a9d62:	f7f7 fd20 	bl	80a17a6 <mbedtls_asn1_get_sequence_of>
 80a9d66:	2800      	cmp	r0, #0
 80a9d68:	d160      	bne.n	80a9e2c <mbedtls_x509_crt_parse_der+0x644>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
 80a9d6a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80a9d6e:	2b00      	cmp	r3, #0
 80a9d70:	f47f ae73 	bne.w	80a9a5a <mbedtls_x509_crt_parse_der+0x272>
 80a9d74:	e07e      	b.n	80a9e74 <mbedtls_x509_crt_parse_der+0x68c>
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a9d76:	2330      	movs	r3, #48	; 0x30
 80a9d78:	aa0a      	add	r2, sp, #40	; 0x28
 80a9d7a:	4629      	mov	r1, r5
 80a9d7c:	a806      	add	r0, sp, #24
                return( ret );
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 80a9d7e:	f104 0be8 	add.w	fp, r4, #232	; 0xe8
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a9d82:	f7f7 fc73 	bl	80a166c <mbedtls_asn1_get_tag>
 80a9d86:	2800      	cmp	r0, #0
 80a9d88:	f47f aed0 	bne.w	80a9b2c <mbedtls_x509_crt_parse_der+0x344>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p + len != end )
 80a9d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a9d8e:	9a06      	ldr	r2, [sp, #24]
 80a9d90:	4413      	add	r3, r2
 80a9d92:	429d      	cmp	r5, r3
 80a9d94:	f47f af41 	bne.w	80a9c1a <mbedtls_x509_crt_parse_der+0x432>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    while( *p < end )
 80a9d98:	9a06      	ldr	r2, [sp, #24]
 80a9d9a:	4295      	cmp	r5, r2
 80a9d9c:	d933      	bls.n	80a9e06 <mbedtls_x509_crt_parse_der+0x61e>
    {
        if( ( end - *p ) < 1 )
 80a9d9e:	1aab      	subs	r3, r5, r2
 80a9da0:	2b00      	cmp	r3, #0
 80a9da2:	dd35      	ble.n	80a9e10 <mbedtls_x509_crt_parse_der+0x628>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
 80a9da4:	f812 3b01 	ldrb.w	r3, [r2], #1
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 80a9da8:	4629      	mov	r1, r5
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
        (*p)++;
 80a9daa:	9206      	str	r2, [sp, #24]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 80a9dac:	a806      	add	r0, sp, #24
 80a9dae:	aa17      	add	r2, sp, #92	; 0x5c
    {
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
 80a9db0:	9303      	str	r3, [sp, #12]
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 80a9db2:	f7f7 fc09 	bl	80a15c8 <mbedtls_asn1_get_len>
 80a9db6:	9b03      	ldr	r3, [sp, #12]
 80a9db8:	2800      	cmp	r0, #0
 80a9dba:	f47f aeb7 	bne.w	80a9b2c <mbedtls_x509_crt_parse_der+0x344>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        if( ( tag & MBEDTLS_ASN1_TAG_CLASS_MASK ) !=
 80a9dbe:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 80a9dc2:	2a80      	cmp	r2, #128	; 0x80
 80a9dc4:	d150      	bne.n	80a9e68 <mbedtls_x509_crt_parse_der+0x680>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
        }

        /* Skip everything but DNS name */
        if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
 80a9dc6:	2b82      	cmp	r3, #130	; 0x82
 80a9dc8:	d002      	beq.n	80a9dd0 <mbedtls_x509_crt_parse_der+0x5e8>
        {
            *p += tag_len;
 80a9dca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a9dcc:	9a06      	ldr	r2, [sp, #24]
 80a9dce:	e017      	b.n	80a9e00 <mbedtls_x509_crt_parse_der+0x618>
            continue;
        }

        /* Allocate and assign next pointer */
        if( cur->buf.p != NULL )
 80a9dd0:	f8db 3008 	ldr.w	r3, [fp, #8]
 80a9dd4:	b15b      	cbz	r3, 80a9dee <mbedtls_x509_crt_parse_der+0x606>
        {
            if( cur->next != NULL )
 80a9dd6:	f8db 300c 	ldr.w	r3, [fp, #12]
 80a9dda:	2b00      	cmp	r3, #0
 80a9ddc:	d146      	bne.n	80a9e6c <mbedtls_x509_crt_parse_der+0x684>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

            cur->next = (mbedtls_asn1_sequence *)mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
 80a9dde:	2110      	movs	r1, #16
 80a9de0:	2001      	movs	r0, #1
 80a9de2:	f008 fbeb 	bl	80b25bc <calloc>
 80a9de6:	f8cb 000c 	str.w	r0, [fp, #12]

            if( cur->next == NULL )
 80a9dea:	b198      	cbz	r0, 80a9e14 <mbedtls_x509_crt_parse_der+0x62c>
 80a9dec:	4683      	mov	fp, r0

            cur = cur->next;
        }

        buf = &(cur->buf);
        buf->tag = tag;
 80a9dee:	2382      	movs	r3, #130	; 0x82
 80a9df0:	f8cb 3000 	str.w	r3, [fp]
        buf->p = *p;
 80a9df4:	9a06      	ldr	r2, [sp, #24]
 80a9df6:	f8cb 2008 	str.w	r2, [fp, #8]
        buf->len = tag_len;
 80a9dfa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a9dfc:	f8cb 3004 	str.w	r3, [fp, #4]
        *p += buf->len;
 80a9e00:	4413      	add	r3, r2
 80a9e02:	9306      	str	r3, [sp, #24]
 80a9e04:	e7c8      	b.n	80a9d98 <mbedtls_x509_crt_parse_der+0x5b0>
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 80a9e06:	f8cb 800c 	str.w	r8, [fp, #12]

    if( *p != end )
 80a9e0a:	f43f ae26 	beq.w	80a9a5a <mbedtls_x509_crt_parse_der+0x272>
 80a9e0e:	e704      	b.n	80a9c1a <mbedtls_x509_crt_parse_der+0x432>

    while( *p < end )
    {
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a9e10:	4b0f      	ldr	r3, [pc, #60]	; (80a9e50 <mbedtls_x509_crt_parse_der+0x668>)
 80a9e12:	e68f      	b.n	80a9b34 <mbedtls_x509_crt_parse_der+0x34c>

            cur->next = (mbedtls_asn1_sequence *)mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                        MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 80a9e14:	4b0f      	ldr	r3, [pc, #60]	; (80a9e54 <mbedtls_x509_crt_parse_der+0x66c>)
 80a9e16:	e68d      	b.n	80a9b34 <mbedtls_x509_crt_parse_der+0x34c>
                                       unsigned char *ns_cert_type)
{
    int ret;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 80a9e18:	aa17      	add	r2, sp, #92	; 0x5c
 80a9e1a:	4629      	mov	r1, r5
 80a9e1c:	a806      	add	r0, sp, #24
static int x509_get_ns_cert_type( unsigned char **p,
                                       const unsigned char *end,
                                       unsigned char *ns_cert_type)
{
    int ret;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 80a9e1e:	9317      	str	r3, [sp, #92]	; 0x5c
 80a9e20:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80a9e24:	9319      	str	r3, [sp, #100]	; 0x64

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 80a9e26:	f7f7 fc85 	bl	80a1734 <mbedtls_asn1_get_bitstring>
 80a9e2a:	b1a8      	cbz	r0, 80a9e58 <mbedtls_x509_crt_parse_der+0x670>
                return( ret );
            break;

        case MBEDTLS_X509_EXT_NS_CERT_TYPE:
            /* Parse netscape certificate type */
            if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
 80a9e2c:	f5b0 5314 	subs.w	r3, r0, #9472	; 0x2500
 80a9e30:	f43f ae13 	beq.w	80a9a5a <mbedtls_x509_crt_parse_der+0x272>
 80a9e34:	e67e      	b.n	80a9b34 <mbedtls_x509_crt_parse_der+0x34c>
 80a9e36:	bf00      	nop
 80a9e38:	ffffd800 	.word	0xffffd800
 80a9e3c:	ffffd780 	.word	0xffffd780
 80a9e40:	ffffda80 	.word	0xffffda80
 80a9e44:	ffffdb9a 	.word	0xffffdb9a
 80a9e48:	ffffda9a 	.word	0xffffda9a
 80a9e4c:	ffffd980 	.word	0xffffd980
 80a9e50:	ffffdaa0 	.word	0xffffdaa0
 80a9e54:	ffffda96 	.word	0xffffda96
    mbedtls_x509_bitstring bs = { 0, 0, NULL };

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( bs.len != 1 )
 80a9e58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a9e5a:	2b01      	cmp	r3, #1
 80a9e5c:	d10a      	bne.n	80a9e74 <mbedtls_x509_crt_parse_der+0x68c>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *ns_cert_type = *bs.p;
 80a9e5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a9e60:	781b      	ldrb	r3, [r3, #0]
 80a9e62:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
 80a9e66:	e5f8      	b.n	80a9a5a <mbedtls_x509_crt_parse_der+0x272>
#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
            {
                /* Data is marked as critical: fail */
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                        MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80a9e68:	4b05      	ldr	r3, [pc, #20]	; (80a9e80 <mbedtls_x509_crt_parse_der+0x698>)
 80a9e6a:	e663      	b.n	80a9b34 <mbedtls_x509_crt_parse_der+0x34c>
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
 80a9e6c:	4b05      	ldr	r3, [pc, #20]	; (80a9e84 <mbedtls_x509_crt_parse_der+0x69c>)
 80a9e6e:	e661      	b.n	80a9b34 <mbedtls_x509_crt_parse_der+0x34c>
                    &crt->ns_cert_type ) ) != 0 )
                return( ret );
            break;

        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
 80a9e70:	4b05      	ldr	r3, [pc, #20]	; (80a9e88 <mbedtls_x509_crt_parse_der+0x6a0>)
 80a9e72:	e65f      	b.n	80a9b34 <mbedtls_x509_crt_parse_der+0x34c>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80a9e74:	4b05      	ldr	r3, [pc, #20]	; (80a9e8c <mbedtls_x509_crt_parse_der+0x6a4>)
 80a9e76:	e65d      	b.n	80a9b34 <mbedtls_x509_crt_parse_der+0x34c>

        return( ret );
    }

    return( 0 );
}
 80a9e78:	4628      	mov	r0, r5
 80a9e7a:	b01b      	add	sp, #108	; 0x6c
 80a9e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a9e80:	ffffda9e 	.word	0xffffda9e
 80a9e84:	ffffdb00 	.word	0xffffdb00
 80a9e88:	ffffdf80 	.word	0xffffdf80
 80a9e8c:	ffffda9c 	.word	0xffffda9c

080a9e90 <mbedtls_x509_crt_parse>:
/*
 * Parse one or more PEM certificates from a buffer and add them to the chained
 * list
 */
int mbedtls_x509_crt_parse( mbedtls_x509_crt *chain, const unsigned char *buf, size_t buflen )
{
 80a9e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a9e94:	460d      	mov	r5, r1
 80a9e96:	b088      	sub	sp, #32
 80a9e98:	4617      	mov	r7, r2
#endif

    /*
     * Check for valid input
     */
    if( chain == NULL || buf == NULL )
 80a9e9a:	4681      	mov	r9, r0
 80a9e9c:	2800      	cmp	r0, #0
 80a9e9e:	d054      	beq.n	80a9f4a <mbedtls_x509_crt_parse+0xba>
 80a9ea0:	2900      	cmp	r1, #0
 80a9ea2:	d052      	beq.n	80a9f4a <mbedtls_x509_crt_parse+0xba>
    /*
     * Determine buffer content. Buffer contains either one DER certificate or
     * one or more PEM certificates.
     */
#if defined(MBEDTLS_PEM_PARSE_C)
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 80a9ea4:	2a00      	cmp	r2, #0
 80a9ea6:	d054      	beq.n	80a9f52 <mbedtls_x509_crt_parse+0xc2>
 80a9ea8:	188b      	adds	r3, r1, r2
 80a9eaa:	f813 4c01 	ldrb.w	r4, [r3, #-1]
 80a9eae:	2c00      	cmp	r4, #0
 80a9eb0:	d14f      	bne.n	80a9f52 <mbedtls_x509_crt_parse+0xc2>
        strstr( (const char *) buf, "-----BEGIN CERTIFICATE-----" ) != NULL )
 80a9eb2:	492c      	ldr	r1, [pc, #176]	; (80a9f64 <mbedtls_x509_crt_parse+0xd4>)
 80a9eb4:	4628      	mov	r0, r5
 80a9eb6:	f008 fd32 	bl	80b291e <strstr>
    /*
     * Determine buffer content. Buffer contains either one DER certificate or
     * one or more PEM certificates.
     */
#if defined(MBEDTLS_PEM_PARSE_C)
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 80a9eba:	2800      	cmp	r0, #0
 80a9ebc:	d049      	beq.n	80a9f52 <mbedtls_x509_crt_parse+0xc2>
 80a9ebe:	46a0      	mov	r8, r4
 80a9ec0:	46a2      	mov	sl, r4
    {
        int ret;
        mbedtls_pem_context pem;

        /* 1 rather than 0 since the terminating NULL byte is counted in */
        while( buflen > 1 )
 80a9ec2:	2f01      	cmp	r7, #1
 80a9ec4:	d938      	bls.n	80a9f38 <mbedtls_x509_crt_parse+0xa8>
        {
            size_t use_len;
            mbedtls_pem_init( &pem );
 80a9ec6:	a805      	add	r0, sp, #20
 80a9ec8:	f005 fc53 	bl	80af772 <mbedtls_pem_init>

            /* If we get there, we know the string is null-terminated */
            ret = mbedtls_pem_read_buffer( &pem,
 80a9ecc:	ab04      	add	r3, sp, #16
 80a9ece:	9302      	str	r3, [sp, #8]
 80a9ed0:	2300      	movs	r3, #0
 80a9ed2:	9301      	str	r3, [sp, #4]
 80a9ed4:	9300      	str	r3, [sp, #0]
 80a9ed6:	4a24      	ldr	r2, [pc, #144]	; (80a9f68 <mbedtls_x509_crt_parse+0xd8>)
 80a9ed8:	462b      	mov	r3, r5
 80a9eda:	4922      	ldr	r1, [pc, #136]	; (80a9f64 <mbedtls_x509_crt_parse+0xd4>)
 80a9edc:	a805      	add	r0, sp, #20
 80a9ede:	f005 fc4d 	bl	80af77c <mbedtls_pem_read_buffer>
                           "-----BEGIN CERTIFICATE-----",
                           "-----END CERTIFICATE-----",
                           buf, NULL, 0, &use_len );

            if( ret == 0 )
 80a9ee2:	4606      	mov	r6, r0
 80a9ee4:	b968      	cbnz	r0, 80a9f02 <mbedtls_x509_crt_parse+0x72>
            {
                /*
                 * Was PEM encoded
                 */
                buflen -= use_len;
 80a9ee6:	9b04      	ldr	r3, [sp, #16]
                continue;
            }
            else
                break;

            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 80a9ee8:	9a06      	ldr	r2, [sp, #24]
 80a9eea:	9905      	ldr	r1, [sp, #20]
 80a9eec:	4648      	mov	r0, r9
            if( ret == 0 )
            {
                /*
                 * Was PEM encoded
                 */
                buflen -= use_len;
 80a9eee:	1aff      	subs	r7, r7, r3
                buf += use_len;
 80a9ef0:	441d      	add	r5, r3
                continue;
            }
            else
                break;

            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 80a9ef2:	f7ff fc79 	bl	80a97e8 <mbedtls_x509_crt_parse_der>
 80a9ef6:	4606      	mov	r6, r0

            mbedtls_pem_free( &pem );
 80a9ef8:	a805      	add	r0, sp, #20
 80a9efa:	f005 fcc9 	bl	80af890 <mbedtls_pem_free>

            if( ret != 0 )
 80a9efe:	b96e      	cbnz	r6, 80a9f1c <mbedtls_x509_crt_parse+0x8c>
 80a9f00:	e015      	b.n	80a9f2e <mbedtls_x509_crt_parse+0x9e>
                 * Was PEM encoded
                 */
                buflen -= use_len;
                buf += use_len;
            }
            else if( ret == MBEDTLS_ERR_PEM_BAD_INPUT_DATA )
 80a9f02:	f510 5fa4 	cmn.w	r0, #5248	; 0x1480
 80a9f06:	d015      	beq.n	80a9f34 <mbedtls_x509_crt_parse+0xa4>
            {
                return( ret );
            }
            else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 80a9f08:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 80a9f0c:	d014      	beq.n	80a9f38 <mbedtls_x509_crt_parse+0xa8>
            {
                mbedtls_pem_free( &pem );
 80a9f0e:	a805      	add	r0, sp, #20
 80a9f10:	f005 fcbe 	bl	80af890 <mbedtls_pem_free>

                /*
                 * PEM header and footer were found
                 */
                buflen -= use_len;
 80a9f14:	9b04      	ldr	r3, [sp, #16]
 80a9f16:	1aff      	subs	r7, r7, r3
                buf += use_len;
 80a9f18:	441d      	add	r5, r3
 80a9f1a:	e002      	b.n	80a9f22 <mbedtls_x509_crt_parse+0x92>
            if( ret != 0 )
            {
                /*
                 * Quit parsing on a memory error
                 */
                if( ret == MBEDTLS_ERR_X509_ALLOC_FAILED )
 80a9f1c:	f516 5f22 	cmn.w	r6, #10368	; 0x2880
 80a9f20:	d008      	beq.n	80a9f34 <mbedtls_x509_crt_parse+0xa4>
                    return( ret );

                if( first_error == 0 )
 80a9f22:	f1b8 0f00 	cmp.w	r8, #0
 80a9f26:	bf08      	it	eq
 80a9f28:	46b0      	moveq	r8, r6
                    first_error = ret;

                total_failed++;
 80a9f2a:	3401      	adds	r4, #1
                continue;
 80a9f2c:	e7c9      	b.n	80a9ec2 <mbedtls_x509_crt_parse+0x32>
            }

            success = 1;
 80a9f2e:	f04f 0a01 	mov.w	sl, #1
 80a9f32:	e7c6      	b.n	80a9ec2 <mbedtls_x509_crt_parse+0x32>
 80a9f34:	4630      	mov	r0, r6
 80a9f36:	e011      	b.n	80a9f5c <mbedtls_x509_crt_parse+0xcc>
        }
    }

    if( success )
 80a9f38:	f1ba 0f00 	cmp.w	sl, #0
 80a9f3c:	d107      	bne.n	80a9f4e <mbedtls_x509_crt_parse+0xbe>
        return( total_failed );
    else if( first_error )
 80a9f3e:	480b      	ldr	r0, [pc, #44]	; (80a9f6c <mbedtls_x509_crt_parse+0xdc>)
 80a9f40:	f1b8 0f00 	cmp.w	r8, #0
 80a9f44:	bf18      	it	ne
 80a9f46:	4640      	movne	r0, r8
 80a9f48:	e008      	b.n	80a9f5c <mbedtls_x509_crt_parse+0xcc>

    /*
     * Check for valid input
     */
    if( chain == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80a9f4a:	4809      	ldr	r0, [pc, #36]	; (80a9f70 <mbedtls_x509_crt_parse+0xe0>)
 80a9f4c:	e006      	b.n	80a9f5c <mbedtls_x509_crt_parse+0xcc>
 80a9f4e:	4620      	mov	r0, r4
 80a9f50:	e004      	b.n	80a9f5c <mbedtls_x509_crt_parse+0xcc>
    {
        buf_format = MBEDTLS_X509_FORMAT_PEM;
    }

    if( buf_format == MBEDTLS_X509_FORMAT_DER )
        return mbedtls_x509_crt_parse_der( chain, buf, buflen );
 80a9f52:	463a      	mov	r2, r7
 80a9f54:	4629      	mov	r1, r5
 80a9f56:	4648      	mov	r0, r9
 80a9f58:	f7ff fc46 	bl	80a97e8 <mbedtls_x509_crt_parse_der>
    else if( first_error )
        return( first_error );
    else
        return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
#endif /* MBEDTLS_PEM_PARSE_C */
}
 80a9f5c:	b008      	add	sp, #32
 80a9f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a9f62:	bf00      	nop
 80a9f64:	080b535e 	.word	0x080b535e
 80a9f68:	080b537a 	.word	0x080b537a
 80a9f6c:	ffffd880 	.word	0xffffd880
 80a9f70:	ffffd800 	.word	0xffffd800

080a9f74 <mbedtls_pk_init>:
 */
void mbedtls_pk_init( mbedtls_pk_context *ctx )
{
    PK_VALIDATE( ctx != NULL );

    ctx->pk_info = NULL;
 80a9f74:	2300      	movs	r3, #0
 80a9f76:	6003      	str	r3, [r0, #0]
    ctx->pk_ctx = NULL;
 80a9f78:	6043      	str	r3, [r0, #4]
 80a9f7a:	4770      	bx	lr

080a9f7c <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
 80a9f7c:	b510      	push	{r4, lr}
    if( ctx == NULL )
 80a9f7e:	4604      	mov	r4, r0
 80a9f80:	b150      	cbz	r0, 80a9f98 <mbedtls_pk_free+0x1c>
        return;

    if ( ctx->pk_info != NULL )
 80a9f82:	6803      	ldr	r3, [r0, #0]
 80a9f84:	b113      	cbz	r3, 80a9f8c <mbedtls_pk_free+0x10>
        ctx->pk_info->ctx_free_func( ctx->pk_ctx );
 80a9f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a9f88:	6840      	ldr	r0, [r0, #4]
 80a9f8a:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );
 80a9f8c:	4620      	mov	r0, r4
}
 80a9f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return;

    if ( ctx->pk_info != NULL )
        ctx->pk_info->ctx_free_func( ctx->pk_ctx );

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );
 80a9f92:	2108      	movs	r1, #8
 80a9f94:	f7fc ba3c 	b.w	80a6410 <mbedtls_platform_zeroize>
 80a9f98:	bd10      	pop	{r4, pc}
	...

080a9f9c <mbedtls_pk_info_from_type>:

/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
 80a9f9c:	3801      	subs	r0, #1
 80a9f9e:	b2c0      	uxtb	r0, r0
 80a9fa0:	2803      	cmp	r0, #3
 80a9fa2:	bf9a      	itte	ls
 80a9fa4:	4b02      	ldrls	r3, [pc, #8]	; (80a9fb0 <mbedtls_pk_info_from_type+0x14>)
 80a9fa6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80a9faa:	2000      	movhi	r0, #0
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
    }
}
 80a9fac:	4770      	bx	lr
 80a9fae:	bf00      	nop
 80a9fb0:	080b5794 	.word	0x080b5794

080a9fb4 <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
 80a9fb4:	b570      	push	{r4, r5, r6, lr}
 80a9fb6:	4605      	mov	r5, r0
    PK_VALIDATE_RET( ctx != NULL );
    if( info == NULL || ctx->pk_info != NULL )
 80a9fb8:	460e      	mov	r6, r1
 80a9fba:	b141      	cbz	r1, 80a9fce <mbedtls_pk_setup+0x1a>
 80a9fbc:	6804      	ldr	r4, [r0, #0]
 80a9fbe:	b934      	cbnz	r4, 80a9fce <mbedtls_pk_setup+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
 80a9fc0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80a9fc2:	4798      	blx	r3
 80a9fc4:	6068      	str	r0, [r5, #4]
 80a9fc6:	b120      	cbz	r0, 80a9fd2 <mbedtls_pk_setup+0x1e>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );

    ctx->pk_info = info;
 80a9fc8:	602e      	str	r6, [r5, #0]

    return( 0 );
 80a9fca:	4620      	mov	r0, r4
 80a9fcc:	bd70      	pop	{r4, r5, r6, pc}
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
    PK_VALIDATE_RET( ctx != NULL );
    if( info == NULL || ctx->pk_info != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 80a9fce:	4802      	ldr	r0, [pc, #8]	; (80a9fd8 <mbedtls_pk_setup+0x24>)
 80a9fd0:	bd70      	pop	{r4, r5, r6, pc}

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 80a9fd2:	4802      	ldr	r0, [pc, #8]	; (80a9fdc <mbedtls_pk_setup+0x28>)

    ctx->pk_info = info;

    return( 0 );
}
 80a9fd4:	bd70      	pop	{r4, r5, r6, pc}
 80a9fd6:	bf00      	nop
 80a9fd8:	ffffc180 	.word	0xffffc180
 80a9fdc:	ffffc080 	.word	0xffffc080

080a9fe0 <mbedtls_pk_can_do>:
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
    /* A context with null pk_info is not set up yet and can't do anything.
     * For backward compatibility, also accept NULL instead of a context
     * pointer. */
    if( ctx == NULL || ctx->pk_info == NULL )
 80a9fe0:	b120      	cbz	r0, 80a9fec <mbedtls_pk_can_do+0xc>
 80a9fe2:	6803      	ldr	r3, [r0, #0]
 80a9fe4:	b113      	cbz	r3, 80a9fec <mbedtls_pk_can_do+0xc>
        return( 0 );

    return( ctx->pk_info->can_do( type ) );
 80a9fe6:	68db      	ldr	r3, [r3, #12]
 80a9fe8:	4608      	mov	r0, r1
 80a9fea:	4718      	bx	r3
}
 80a9fec:	2000      	movs	r0, #0
 80a9fee:	4770      	bx	lr

080a9ff0 <mbedtls_pk_verify_restartable>:
int mbedtls_pk_verify_restartable( mbedtls_pk_context *ctx,
               mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len,
               mbedtls_pk_restart_ctx *rs_ctx )
{
 80a9ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a9ff4:	4617      	mov	r7, r2
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL ||
 80a9ff6:	6802      	ldr	r2, [r0, #0]
int mbedtls_pk_verify_restartable( mbedtls_pk_context *ctx,
               mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len,
               mbedtls_pk_restart_ctx *rs_ctx )
{
 80a9ff8:	4604      	mov	r4, r0
 80a9ffa:	460e      	mov	r6, r1
 80a9ffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80aa000:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL ||
 80aa004:	b912      	cbnz	r2, 80aa00c <mbedtls_pk_verify_restartable+0x1c>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 80aa006:	480e      	ldr	r0, [pc, #56]	; (80aa040 <mbedtls_pk_verify_restartable+0x50>)
 80aa008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
 80aa00c:	b93b      	cbnz	r3, 80aa01e <mbedtls_pk_verify_restartable+0x2e>
        return( 0 );

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 80aa00e:	4608      	mov	r0, r1
 80aa010:	f7fe f89e 	bl	80a8150 <mbedtls_md_info_from_type>
 80aa014:	2800      	cmp	r0, #0
 80aa016:	d0f6      	beq.n	80aa006 <mbedtls_pk_verify_restartable+0x16>
        return( -1 );

    *hash_len = mbedtls_md_get_size( md_info );
 80aa018:	f7fe f9d0 	bl	80a83bc <mbedtls_md_get_size>
 80aa01c:	4603      	mov	r3, r0
    }
#else /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */
    (void) rs_ctx;
#endif /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */

    if( ctx->pk_info->verify_func == NULL )
 80aa01e:	6822      	ldr	r2, [r4, #0]
 80aa020:	6915      	ldr	r5, [r2, #16]
 80aa022:	b155      	cbz	r5, 80aa03a <mbedtls_pk_verify_restartable+0x4a>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
 80aa024:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80aa028:	f8cd 8020 	str.w	r8, [sp, #32]
 80aa02c:	463a      	mov	r2, r7
 80aa02e:	4631      	mov	r1, r6
 80aa030:	6860      	ldr	r0, [r4, #4]
 80aa032:	46ac      	mov	ip, r5
}
 80aa034:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
 80aa038:	4760      	bx	ip
#else /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */
    (void) rs_ctx;
#endif /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */

    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 80aa03a:	4802      	ldr	r0, [pc, #8]	; (80aa044 <mbedtls_pk_verify_restartable+0x54>)
 80aa03c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80aa040:	ffffc180 	.word	0xffffc180
 80aa044:	ffffc100 	.word	0xffffc100

080aa048 <mbedtls_pk_verify>:
 * Verify a signature
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
 80aa048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( mbedtls_pk_verify_restartable( ctx, md_alg, hash, hash_len,
                                           sig, sig_len, NULL ) );
 80aa04a:	2400      	movs	r4, #0
 80aa04c:	9402      	str	r4, [sp, #8]
 80aa04e:	9c07      	ldr	r4, [sp, #28]
 80aa050:	9401      	str	r4, [sp, #4]
 80aa052:	9c06      	ldr	r4, [sp, #24]
 80aa054:	9400      	str	r4, [sp, #0]
 80aa056:	f7ff ffcb 	bl	80a9ff0 <mbedtls_pk_verify_restartable>
}
 80aa05a:	b004      	add	sp, #16
 80aa05c:	bd10      	pop	{r4, pc}
	...

080aa060 <mbedtls_pk_sign_restartable>:
             mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_pk_restart_ctx *rs_ctx )
{
 80aa060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80aa064:	4616      	mov	r6, r2
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL ||
 80aa066:	6802      	ldr	r2, [r0, #0]
             mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_pk_restart_ctx *rs_ctx )
{
 80aa068:	af08      	add	r7, sp, #32
 80aa06a:	4604      	mov	r4, r0
 80aa06c:	e897 0780 	ldmia.w	r7, {r7, r8, r9, sl}
 80aa070:	460d      	mov	r5, r1
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL ||
 80aa072:	b912      	cbnz	r2, 80aa07a <mbedtls_pk_sign_restartable+0x1a>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 80aa074:	4811      	ldr	r0, [pc, #68]	; (80aa0bc <mbedtls_pk_sign_restartable+0x5c>)
 80aa076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
 80aa07a:	b93b      	cbnz	r3, 80aa08c <mbedtls_pk_sign_restartable+0x2c>
        return( 0 );

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 80aa07c:	4608      	mov	r0, r1
 80aa07e:	f7fe f867 	bl	80a8150 <mbedtls_md_info_from_type>
 80aa082:	2800      	cmp	r0, #0
 80aa084:	d0f6      	beq.n	80aa074 <mbedtls_pk_sign_restartable+0x14>
        return( -1 );

    *hash_len = mbedtls_md_get_size( md_info );
 80aa086:	f7fe f999 	bl	80a83bc <mbedtls_md_get_size>
 80aa08a:	4603      	mov	r3, r0
    }
#else /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */
    (void) rs_ctx;
#endif /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */

    if( ctx->pk_info->sign_func == NULL )
 80aa08c:	6822      	ldr	r2, [r4, #0]
 80aa08e:	f8d2 e014 	ldr.w	lr, [r2, #20]
 80aa092:	f1be 0f00 	cmp.w	lr, #0
 80aa096:	d00d      	beq.n	80aa0b4 <mbedtls_pk_sign_restartable+0x54>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
 80aa098:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80aa09c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80aa0a0:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80aa0a4:	9708      	str	r7, [sp, #32]
 80aa0a6:	4632      	mov	r2, r6
 80aa0a8:	4629      	mov	r1, r5
 80aa0aa:	6860      	ldr	r0, [r4, #4]
 80aa0ac:	46f4      	mov	ip, lr
}
 80aa0ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
 80aa0b2:	4760      	bx	ip
#else /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */
    (void) rs_ctx;
#endif /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */

    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 80aa0b4:	4802      	ldr	r0, [pc, #8]	; (80aa0c0 <mbedtls_pk_sign_restartable+0x60>)
 80aa0b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80aa0ba:	bf00      	nop
 80aa0bc:	ffffc180 	.word	0xffffc180
 80aa0c0:	ffffc100 	.word	0xffffc100

080aa0c4 <mbedtls_pk_encrypt>:
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80aa0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( input != NULL || ilen == 0 );
    PK_VALIDATE_RET( output != NULL || osize == 0 );
    PK_VALIDATE_RET( olen != NULL );

    if( ctx->pk_info == NULL )
 80aa0c6:	6804      	ldr	r4, [r0, #0]
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80aa0c8:	ad05      	add	r5, sp, #20
 80aa0ca:	e895 40e0 	ldmia.w	r5, {r5, r6, r7, lr}
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( input != NULL || ilen == 0 );
    PK_VALIDATE_RET( output != NULL || osize == 0 );
    PK_VALIDATE_RET( olen != NULL );

    if( ctx->pk_info == NULL )
 80aa0ce:	b134      	cbz	r4, 80aa0de <mbedtls_pk_encrypt+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->encrypt_func == NULL )
 80aa0d0:	69e4      	ldr	r4, [r4, #28]
 80aa0d2:	b134      	cbz	r4, 80aa0e2 <mbedtls_pk_encrypt+0x1e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
 80aa0d4:	46a4      	mov	ip, r4
}
 80aa0d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    if( ctx->pk_info->encrypt_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
 80aa0da:	6840      	ldr	r0, [r0, #4]
 80aa0dc:	4760      	bx	ip
    PK_VALIDATE_RET( input != NULL || ilen == 0 );
    PK_VALIDATE_RET( output != NULL || osize == 0 );
    PK_VALIDATE_RET( olen != NULL );

    if( ctx->pk_info == NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 80aa0de:	4802      	ldr	r0, [pc, #8]	; (80aa0e8 <mbedtls_pk_encrypt+0x24>)
 80aa0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

    if( ctx->pk_info->encrypt_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 80aa0e2:	4802      	ldr	r0, [pc, #8]	; (80aa0ec <mbedtls_pk_encrypt+0x28>)

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
}
 80aa0e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80aa0e6:	bf00      	nop
 80aa0e8:	ffffc180 	.word	0xffffc180
 80aa0ec:	ffffc100 	.word	0xffffc100

080aa0f0 <mbedtls_pk_get_bitlen>:
 */
size_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )
{
    /* For backward compatibility, accept NULL or a context that
     * isn't set up yet, and return a fake value that should be safe. */
    if( ctx == NULL || ctx->pk_info == NULL )
 80aa0f0:	b120      	cbz	r0, 80aa0fc <mbedtls_pk_get_bitlen+0xc>
 80aa0f2:	6803      	ldr	r3, [r0, #0]
 80aa0f4:	b113      	cbz	r3, 80aa0fc <mbedtls_pk_get_bitlen+0xc>
        return( 0 );

    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
 80aa0f6:	689b      	ldr	r3, [r3, #8]
 80aa0f8:	6840      	ldr	r0, [r0, #4]
 80aa0fa:	4718      	bx	r3
}
 80aa0fc:	2000      	movs	r0, #0
 80aa0fe:	4770      	bx	lr

080aa100 <mbedtls_pk_verify_ext>:
 */
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 80aa100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80aa104:	461f      	mov	r7, r3
 80aa106:	b087      	sub	sp, #28
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL )
 80aa108:	6813      	ldr	r3, [r2, #0]
 */
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 80aa10a:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 80aa10e:	4683      	mov	fp, r0
 80aa110:	e898 0700 	ldmia.w	r8, {r8, r9, sl}
 80aa114:	460d      	mov	r5, r1
 80aa116:	4614      	mov	r4, r2
 80aa118:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL )
 80aa11a:	b90b      	cbnz	r3, 80aa120 <mbedtls_pk_verify_ext+0x20>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 80aa11c:	4821      	ldr	r0, [pc, #132]	; (80aa1a4 <mbedtls_pk_verify_ext+0xa4>)
 80aa11e:	e03d      	b.n	80aa19c <mbedtls_pk_verify_ext+0x9c>

    if( ! mbedtls_pk_can_do( ctx, type ) )
 80aa120:	4601      	mov	r1, r0
 80aa122:	4610      	mov	r0, r2
 80aa124:	f7ff ff5c 	bl	80a9fe0 <mbedtls_pk_can_do>
 80aa128:	2800      	cmp	r0, #0
 80aa12a:	d034      	beq.n	80aa196 <mbedtls_pk_verify_ext+0x96>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    if( type == MBEDTLS_PK_RSASSA_PSS )
 80aa12c:	f1bb 0f06 	cmp.w	fp, #6
 80aa130:	d123      	bne.n	80aa17a <mbedtls_pk_verify_ext+0x7a>
#if SIZE_MAX > UINT_MAX
        if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

        if( options == NULL )
 80aa132:	2d00      	cmp	r5, #0
 80aa134:	d0f2      	beq.n	80aa11c <mbedtls_pk_verify_ext+0x1c>
 *
 * \return          Key length in bytes, or 0 on error
 */
static inline size_t mbedtls_pk_get_len( const mbedtls_pk_context *ctx )
{
    return( ( mbedtls_pk_get_bitlen( ctx ) + 7 ) / 8 );
 80aa136:	4620      	mov	r0, r4
 80aa138:	f7ff ffda 	bl	80aa0f0 <mbedtls_pk_get_bitlen>
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) options;

        if( sig_len < mbedtls_pk_get_len( ctx ) )
 80aa13c:	3007      	adds	r0, #7
 80aa13e:	ebb6 0fd0 	cmp.w	r6, r0, lsr #3
 80aa142:	d32a      	bcc.n	80aa19a <mbedtls_pk_verify_ext+0x9a>
            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );

        ret = mbedtls_rsa_rsassa_pss_verify_ext( mbedtls_pk_rsa( *ctx ),
 80aa144:	686b      	ldr	r3, [r5, #4]
 80aa146:	f8cd a014 	str.w	sl, [sp, #20]
 80aa14a:	9304      	str	r3, [sp, #16]
 80aa14c:	782b      	ldrb	r3, [r5, #0]
 80aa14e:	f8cd 8008 	str.w	r8, [sp, #8]
 80aa152:	9303      	str	r3, [sp, #12]
 80aa154:	2300      	movs	r3, #0
 80aa156:	e88d 0280 	stmia.w	sp, {r7, r9}
 80aa15a:	461a      	mov	r2, r3
 80aa15c:	4619      	mov	r1, r3
 80aa15e:	6860      	ldr	r0, [r4, #4]
 80aa160:	f7f9 f956 	bl	80a3410 <mbedtls_rsa_rsassa_pss_verify_ext>
                NULL, NULL, MBEDTLS_RSA_PUBLIC,
                md_alg, (unsigned int) hash_len, hash,
                pss_opts->mgf1_hash_id,
                pss_opts->expected_salt_len,
                sig );
        if( ret != 0 )
 80aa164:	b9d0      	cbnz	r0, 80aa19c <mbedtls_pk_verify_ext+0x9c>
 80aa166:	4620      	mov	r0, r4
 80aa168:	f7ff ffc2 	bl	80aa0f0 <mbedtls_pk_get_bitlen>
            return( ret );

        if( sig_len > mbedtls_pk_get_len( ctx ) )
 80aa16c:	3007      	adds	r0, #7
            return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

        return( 0 );
 80aa16e:	ebb6 0fd0 	cmp.w	r6, r0, lsr #3
 80aa172:	480d      	ldr	r0, [pc, #52]	; (80aa1a8 <mbedtls_pk_verify_ext+0xa8>)
 80aa174:	bf98      	it	ls
 80aa176:	2000      	movls	r0, #0
 80aa178:	e010      	b.n	80aa19c <mbedtls_pk_verify_ext+0x9c>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_RSA_C && MBEDTLS_PKCS1_V21 */
    }

    /* General case: no options */
    if( options != NULL )
 80aa17a:	2d00      	cmp	r5, #0
 80aa17c:	d1ce      	bne.n	80aa11c <mbedtls_pk_verify_ext+0x1c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 80aa17e:	464b      	mov	r3, r9
 80aa180:	4642      	mov	r2, r8
 80aa182:	4639      	mov	r1, r7
 80aa184:	4620      	mov	r0, r4
 80aa186:	9611      	str	r6, [sp, #68]	; 0x44
 80aa188:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
}
 80aa18c:	b007      	add	sp, #28
 80aa18e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 80aa192:	f7ff bf59 	b.w	80aa048 <mbedtls_pk_verify>

    if( ctx->pk_info == NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ! mbedtls_pk_can_do( ctx, type ) )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 80aa196:	4805      	ldr	r0, [pc, #20]	; (80aa1ac <mbedtls_pk_verify_ext+0xac>)
 80aa198:	e000      	b.n	80aa19c <mbedtls_pk_verify_ext+0x9c>
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) options;

        if( sig_len < mbedtls_pk_get_len( ctx ) )
            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 80aa19a:	4805      	ldr	r0, [pc, #20]	; (80aa1b0 <mbedtls_pk_verify_ext+0xb0>)
    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
}
 80aa19c:	b007      	add	sp, #28
 80aa19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aa1a2:	bf00      	nop
 80aa1a4:	ffffc180 	.word	0xffffc180
 80aa1a8:	ffffc700 	.word	0xffffc700
 80aa1ac:	ffffc100 	.word	0xffffc100
 80aa1b0:	ffffbc80 	.word	0xffffbc80

080aa1b4 <mbedtls_pk_get_name>:
/*
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 80aa1b4:	b118      	cbz	r0, 80aa1be <mbedtls_pk_get_name+0xa>
 80aa1b6:	6803      	ldr	r3, [r0, #0]
 80aa1b8:	b10b      	cbz	r3, 80aa1be <mbedtls_pk_get_name+0xa>
        return( "invalid PK" );

    return( ctx->pk_info->name );
 80aa1ba:	6858      	ldr	r0, [r3, #4]
 80aa1bc:	4770      	bx	lr
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( "invalid PK" );
 80aa1be:	4801      	ldr	r0, [pc, #4]	; (80aa1c4 <mbedtls_pk_get_name+0x10>)

    return( ctx->pk_info->name );
}
 80aa1c0:	4770      	bx	lr
 80aa1c2:	bf00      	nop
 80aa1c4:	080b5788 	.word	0x080b5788

080aa1c8 <mbedtls_pk_get_type>:
/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 80aa1c8:	b110      	cbz	r0, 80aa1d0 <mbedtls_pk_get_type+0x8>
 80aa1ca:	6800      	ldr	r0, [r0, #0]
 80aa1cc:	b100      	cbz	r0, 80aa1d0 <mbedtls_pk_get_type+0x8>
        return( MBEDTLS_PK_NONE );

    return( ctx->pk_info->type );
 80aa1ce:	7800      	ldrb	r0, [r0, #0]
}
 80aa1d0:	4770      	bx	lr

080aa1d2 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>:
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
    if( ssl->f_set_timer == NULL )
 80aa1d2:	6c83      	ldr	r3, [r0, #72]	; 0x48
/*
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
 80aa1d4:	460a      	mov	r2, r1
    if( ssl->f_set_timer == NULL )
 80aa1d6:	b113      	cbz	r3, 80aa1de <_ZL13ssl_set_timerP19mbedtls_ssl_contextm+0xc>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "set_timer to %d ms", (int) millisecs ) );
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 80aa1d8:	0889      	lsrs	r1, r1, #2
 80aa1da:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80aa1dc:	4718      	bx	r3
 80aa1de:	4770      	bx	lr

080aa1e0 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>:
        ssl->out_iv  = ssl->out_hdr + 13;
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_hdr - 8;
 80aa1e0:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80aa1e4:	f1a3 0208 	sub.w	r2, r3, #8
 80aa1e8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
        ssl->out_len = ssl->out_hdr + 3;
 80aa1ec:	1cda      	adds	r2, r3, #3
        ssl->out_iv  = ssl->out_hdr + 5;
 80aa1ee:	3305      	adds	r3, #5
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_hdr - 8;
        ssl->out_len = ssl->out_hdr + 3;
 80aa1f0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
        ssl->out_iv  = ssl->out_hdr + 5;
 80aa1f4:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    }

    /* Adjust out_msg to make space for explicit IV, if used. */
    if( transform != NULL &&
 80aa1f8:	b131      	cbz	r1, 80aa208 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform+0x28>
 80aa1fa:	68c2      	ldr	r2, [r0, #12]
 80aa1fc:	2a01      	cmp	r2, #1
        ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->out_msg = ssl->out_iv + transform->ivlen - transform->fixed_ivlen;
 80aa1fe:	bfc1      	itttt	gt
 80aa200:	68ca      	ldrgt	r2, [r1, #12]
 80aa202:	6909      	ldrgt	r1, [r1, #16]
 80aa204:	1a52      	subgt	r2, r2, r1
 80aa206:	189b      	addgt	r3, r3, r2
    }
    else
        ssl->out_msg = ssl->out_iv;
 80aa208:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
 80aa20c:	4770      	bx	lr
	...

080aa210 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi>:

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 80aa210:	b5f0      	push	{r4, r5, r6, r7, lr}
    int len = 12;
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
 80aa212:	6ac5      	ldr	r5, [r0, #44]	; 0x2c

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 80aa214:	b0a9      	sub	sp, #164	; 0xa4
 80aa216:	4604      	mov	r4, r0
 80aa218:	460f      	mov	r7, r1
 80aa21a:	4616      	mov	r6, r2
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
    if( !session )
 80aa21c:	b905      	cbnz	r5, 80aa220 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
 80aa21e:	6a85      	ldr	r5, [r0, #40]	; 0x28

    mbedtls_sha256_init( &sha256 );
 80aa220:	a80d      	add	r0, sp, #52	; 0x34
 80aa222:	f7f6 f9e1 	bl	80a05e8 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha256" ) );

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 80aa226:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80aa228:	a80d      	add	r0, sp, #52	; 0x34
 80aa22a:	f501 71ac 	add.w	r1, r1, #344	; 0x158
 80aa22e:	f7f6 f9e4 	bl	80a05fa <mbedtls_sha256_clone>
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 80aa232:	4b10      	ldr	r3, [pc, #64]	; (80aa274 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x64>)
 80aa234:	4910      	ldr	r1, [pc, #64]	; (80aa278 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x68>)

    mbedtls_sha256_finish_ret( &sha256, padbuf );
 80aa236:	a80d      	add	r0, sp, #52	; 0x34
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 80aa238:	2e00      	cmp	r6, #0
 80aa23a:	bf0c      	ite	eq
 80aa23c:	461e      	moveq	r6, r3
 80aa23e:	460e      	movne	r6, r1

    mbedtls_sha256_finish_ret( &sha256, padbuf );
 80aa240:	a905      	add	r1, sp, #20
 80aa242:	f7f6 fdd3 	bl	80a0dec <mbedtls_sha256_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
 80aa246:	6b23      	ldr	r3, [r4, #48]	; 0x30
                             padbuf, 32, buf, len );
 80aa248:	220c      	movs	r2, #12
 80aa24a:	2420      	movs	r4, #32
 80aa24c:	9202      	str	r2, [sp, #8]
 80aa24e:	9701      	str	r7, [sp, #4]
 80aa250:	9400      	str	r4, [sp, #0]
 80aa252:	4632      	mov	r2, r6
 80aa254:	f8d3 72ac 	ldr.w	r7, [r3, #684]	; 0x2ac
 80aa258:	2130      	movs	r1, #48	; 0x30
 80aa25a:	ab05      	add	r3, sp, #20
 80aa25c:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 80aa260:	47b8      	blx	r7

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );

    mbedtls_sha256_free( &sha256 );
 80aa262:	a80d      	add	r0, sp, #52	; 0x34
 80aa264:	f7f6 f9c4 	bl	80a05f0 <mbedtls_sha256_free>

    mbedtls_platform_zeroize(  padbuf, sizeof(  padbuf ) );
 80aa268:	4621      	mov	r1, r4
 80aa26a:	a805      	add	r0, sp, #20
 80aa26c:	f7fc f8d0 	bl	80a6410 <mbedtls_platform_zeroize>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
}
 80aa270:	b029      	add	sp, #164	; 0xa4
 80aa272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80aa274:	080b57a9 	.word	0x080b57a9
 80aa278:	080b57b9 	.word	0x080b57b9

080aa27c <_ZL26ssl_calc_verify_tls_sha256P19mbedtls_ssl_contextPh>:
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
void ssl_calc_verify_tls_sha256( mbedtls_ssl_context *ssl, unsigned char hash[32] )
{
 80aa27c:	b530      	push	{r4, r5, lr}
 80aa27e:	4605      	mov	r5, r0
 80aa280:	460c      	mov	r4, r1
 80aa282:	b09d      	sub	sp, #116	; 0x74
    mbedtls_sha256_context sha256;

    mbedtls_sha256_init( &sha256 );
 80aa284:	a801      	add	r0, sp, #4
 80aa286:	f7f6 f9af 	bl	80a05e8 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 80aa28a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80aa28c:	a801      	add	r0, sp, #4
 80aa28e:	f501 71ac 	add.w	r1, r1, #344	; 0x158
 80aa292:	f7f6 f9b2 	bl	80a05fa <mbedtls_sha256_clone>
    mbedtls_sha256_finish_ret( &sha256, hash );
 80aa296:	4621      	mov	r1, r4
 80aa298:	a801      	add	r0, sp, #4
 80aa29a:	f7f6 fda7 	bl	80a0dec <mbedtls_sha256_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 32 );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );

    mbedtls_sha256_free( &sha256 );
 80aa29e:	a801      	add	r0, sp, #4
 80aa2a0:	f7f6 f9a6 	bl	80a05f0 <mbedtls_sha256_free>

    return;
}
 80aa2a4:	b01d      	add	sp, #116	; 0x74
 80aa2a6:	bd30      	pop	{r4, r5, pc}

080aa2a8 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>:
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
 80aa2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80aa2ac:	4604      	mov	r4, r0
 80aa2ae:	b0b7      	sub	sp, #220	; 0xdc
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
 80aa2b0:	a803      	add	r0, sp, #12
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
 80aa2b2:	468a      	mov	sl, r1
 80aa2b4:	4693      	mov	fp, r2
 80aa2b6:	4699      	mov	r9, r3
 80aa2b8:	9e43      	ldr	r6, [sp, #268]	; 0x10c
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
 80aa2ba:	f7fd ff55 	bl	80a8168 <mbedtls_md_init>

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
 80aa2be:	4620      	mov	r0, r4
 80aa2c0:	f7fd ff46 	bl	80a8150 <mbedtls_md_info_from_type>
 80aa2c4:	4607      	mov	r7, r0
 80aa2c6:	2800      	cmp	r0, #0
 80aa2c8:	d072      	beq.n	80aa3b0 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x108>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );

    md_len = mbedtls_md_get_size( md_info );
 80aa2ca:	f7fe f877 	bl	80a83bc <mbedtls_md_get_size>
 80aa2ce:	4604      	mov	r4, r0

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
 80aa2d0:	4648      	mov	r0, r9
 80aa2d2:	f008 fb07 	bl	80b28e4 <strlen>
 80aa2d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80aa2d8:	1823      	adds	r3, r4, r0
 80aa2da:	189a      	adds	r2, r3, r2
 80aa2dc:	2a80      	cmp	r2, #128	; 0x80
 80aa2de:	4605      	mov	r5, r0
 80aa2e0:	9301      	str	r3, [sp, #4]
 80aa2e2:	d867      	bhi.n	80aa3b4 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
 80aa2e4:	ab16      	add	r3, sp, #88	; 0x58
 80aa2e6:	eb03 0804 	add.w	r8, r3, r4
 80aa2ea:	4602      	mov	r2, r0
 80aa2ec:	4649      	mov	r1, r9
 80aa2ee:	4640      	mov	r0, r8
 80aa2f0:	f008 fa81 	bl	80b27f6 <memcpy>
    memcpy( tmp + md_len + nb, random, rlen );
 80aa2f4:	9b01      	ldr	r3, [sp, #4]
 80aa2f6:	a816      	add	r0, sp, #88	; 0x58
 80aa2f8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80aa2fa:	9940      	ldr	r1, [sp, #256]	; 0x100
 80aa2fc:	4418      	add	r0, r3
 80aa2fe:	f008 fa7a 	bl	80b27f6 <memcpy>
    nb += rlen;

    /*
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 80aa302:	4639      	mov	r1, r7
 80aa304:	2201      	movs	r2, #1
 80aa306:	a803      	add	r0, sp, #12
 80aa308:	f7fd ff4e 	bl	80a81a8 <mbedtls_md_setup>
 80aa30c:	4607      	mov	r7, r0
 80aa30e:	2800      	cmp	r0, #0
 80aa310:	d151      	bne.n	80aa3b6 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10e>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
    memcpy( tmp + md_len + nb, random, rlen );
    nb += rlen;
 80aa312:	9b41      	ldr	r3, [sp, #260]	; 0x104
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
        return( ret );

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 80aa314:	4651      	mov	r1, sl
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
    memcpy( tmp + md_len + nb, random, rlen );
    nb += rlen;
 80aa316:	441d      	add	r5, r3
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
        return( ret );

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 80aa318:	465a      	mov	r2, fp
 80aa31a:	a803      	add	r0, sp, #12
 80aa31c:	f7fd ff94 	bl	80a8248 <mbedtls_md_hmac_starts>
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
 80aa320:	462a      	mov	r2, r5
 80aa322:	4641      	mov	r1, r8
 80aa324:	a803      	add	r0, sp, #12
 80aa326:	f7fd ffef 	bl	80a8308 <mbedtls_md_hmac_update>
    mbedtls_md_hmac_finish( &md_ctx, tmp );
 80aa32a:	a916      	add	r1, sp, #88	; 0x58
 80aa32c:	a803      	add	r0, sp, #12
 80aa32e:	f7fd fffb 	bl	80a8328 <mbedtls_md_hmac_finish>

    for( i = 0; i < dlen; i += md_len )
 80aa332:	46b8      	mov	r8, r7
 80aa334:	f10d 0a18 	add.w	sl, sp, #24
    {
        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 80aa338:	4425      	add	r5, r4

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
    mbedtls_md_hmac_finish( &md_ctx, tmp );

    for( i = 0; i < dlen; i += md_len )
 80aa33a:	45b0      	cmp	r8, r6

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
    }

    mbedtls_md_free( &md_ctx );
 80aa33c:	a803      	add	r0, sp, #12

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
    mbedtls_md_hmac_finish( &md_ctx, tmp );

    for( i = 0; i < dlen; i += md_len )
 80aa33e:	d22c      	bcs.n	80aa39a <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xf2>
    {
        mbedtls_md_hmac_reset ( &md_ctx );
 80aa340:	f7fe f824 	bl	80a838c <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 80aa344:	462a      	mov	r2, r5
 80aa346:	a916      	add	r1, sp, #88	; 0x58
 80aa348:	a803      	add	r0, sp, #12
 80aa34a:	f7fd ffdd 	bl	80a8308 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, h_i );
 80aa34e:	4651      	mov	r1, sl
 80aa350:	a803      	add	r0, sp, #12
 80aa352:	f7fd ffe9 	bl	80a8328 <mbedtls_md_hmac_finish>

        mbedtls_md_hmac_reset ( &md_ctx );
 80aa356:	a803      	add	r0, sp, #12
 80aa358:	f7fe f818 	bl	80a838c <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
 80aa35c:	4622      	mov	r2, r4
 80aa35e:	a916      	add	r1, sp, #88	; 0x58
 80aa360:	a803      	add	r0, sp, #12
 80aa362:	f7fd ffd1 	bl	80a8308 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, tmp );
 80aa366:	a916      	add	r1, sp, #88	; 0x58
 80aa368:	a803      	add	r0, sp, #12
 80aa36a:	f7fd ffdd 	bl	80a8328 <mbedtls_md_hmac_finish>

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 80aa36e:	eb08 0104 	add.w	r1, r8, r4
 80aa372:	428e      	cmp	r6, r1
 80aa374:	bf36      	itet	cc
 80aa376:	fbb6 f2f4 	udivcc	r2, r6, r4
 80aa37a:	4622      	movcs	r2, r4
 80aa37c:	fb04 6212 	mlscc	r2, r4, r2, r6

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
 80aa380:	9842      	ldr	r0, [sp, #264]	; 0x108
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
 80aa382:	2300      	movs	r3, #0
            dstbuf[i + j]  = h_i[j];
 80aa384:	4480      	add	r8, r0
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
 80aa386:	4293      	cmp	r3, r2
 80aa388:	d101      	bne.n	80aa38e <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xe6>

        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 80aa38a:	4688      	mov	r8, r1
 80aa38c:	e7d5      	b.n	80aa33a <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x92>

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
 80aa38e:	f81a 0003 	ldrb.w	r0, [sl, r3]
 80aa392:	f808 0003 	strb.w	r0, [r8, r3]
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
 80aa396:	3301      	adds	r3, #1
 80aa398:	e7f5      	b.n	80aa386 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xde>
            dstbuf[i + j]  = h_i[j];
    }

    mbedtls_md_free( &md_ctx );
 80aa39a:	f7fd feea 	bl	80a8172 <mbedtls_md_free>

    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 80aa39e:	a816      	add	r0, sp, #88	; 0x58
 80aa3a0:	2180      	movs	r1, #128	; 0x80
 80aa3a2:	f7fc f835 	bl	80a6410 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( h_i, sizeof( h_i ) );
 80aa3a6:	2140      	movs	r1, #64	; 0x40
 80aa3a8:	4650      	mov	r0, sl
 80aa3aa:	f7fc f831 	bl	80a6410 <mbedtls_platform_zeroize>

    return( 0 );
 80aa3ae:	e002      	b.n	80aa3b6 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10e>
    int ret;

    mbedtls_md_init( &md_ctx );

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80aa3b0:	4f03      	ldr	r7, [pc, #12]	; (80aa3c0 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x118>)
 80aa3b2:	e000      	b.n	80aa3b6 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10e>

    md_len = mbedtls_md_get_size( md_info );

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80aa3b4:	4f03      	ldr	r7, [pc, #12]	; (80aa3c4 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x11c>)

    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
    mbedtls_platform_zeroize( h_i, sizeof( h_i ) );

    return( 0 );
}
 80aa3b6:	4638      	mov	r0, r7
 80aa3b8:	b037      	add	sp, #220	; 0xdc
 80aa3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aa3be:	bf00      	nop
 80aa3c0:	ffff9400 	.word	0xffff9400
 80aa3c4:	ffff8f00 	.word	0xffff8f00

080aa3c8 <_ZL14tls_prf_sha256PKhjPKcS0_jPhj>:
#if defined(MBEDTLS_SHA256_C)
static int tls_prf_sha256( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
 80aa3c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
                             label, random, rlen, dstbuf, dlen ) );
 80aa3ca:	9c08      	ldr	r4, [sp, #32]
 80aa3cc:	9403      	str	r4, [sp, #12]
 80aa3ce:	9c07      	ldr	r4, [sp, #28]
 80aa3d0:	9402      	str	r4, [sp, #8]
 80aa3d2:	9c06      	ldr	r4, [sp, #24]
 80aa3d4:	e88d 0018 	stmia.w	sp, {r3, r4}
 80aa3d8:	4613      	mov	r3, r2
 80aa3da:	460a      	mov	r2, r1
 80aa3dc:	4601      	mov	r1, r0
 80aa3de:	2006      	movs	r0, #6
 80aa3e0:	f7ff ff62 	bl	80aa2a8 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
 80aa3e4:	b004      	add	sp, #16
 80aa3e6:	bd10      	pop	{r4, pc}

080aa3e8 <_ZL14tls_prf_sha384PKhjPKcS0_jPhj>:
#if defined(MBEDTLS_SHA512_C)
static int tls_prf_sha384( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
 80aa3e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA384, secret, slen,
                             label, random, rlen, dstbuf, dlen ) );
 80aa3ea:	9c08      	ldr	r4, [sp, #32]
 80aa3ec:	9403      	str	r4, [sp, #12]
 80aa3ee:	9c07      	ldr	r4, [sp, #28]
 80aa3f0:	9402      	str	r4, [sp, #8]
 80aa3f2:	9c06      	ldr	r4, [sp, #24]
 80aa3f4:	e88d 0018 	stmia.w	sp, {r3, r4}
 80aa3f8:	4613      	mov	r3, r2
 80aa3fa:	460a      	mov	r2, r1
 80aa3fc:	4601      	mov	r1, r0
 80aa3fe:	2007      	movs	r0, #7
 80aa400:	f7ff ff52 	bl	80aa2a8 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
 80aa404:	b004      	add	sp, #16
 80aa406:	bd10      	pop	{r4, pc}

080aa408 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi>:
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
static void ssl_calc_finished_tls_sha384(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 80aa408:	b5f0      	push	{r4, r5, r6, r7, lr}
    int len = 12;
    const char *sender;
    mbedtls_sha512_context sha512;
    unsigned char padbuf[48];

    mbedtls_ssl_session *session = ssl->session_negotiate;
 80aa40a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
static void ssl_calc_finished_tls_sha384(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 80aa40c:	b0c7      	sub	sp, #284	; 0x11c
 80aa40e:	4604      	mov	r4, r0
 80aa410:	460f      	mov	r7, r1
 80aa412:	4616      	mov	r6, r2
    const char *sender;
    mbedtls_sha512_context sha512;
    unsigned char padbuf[48];

    mbedtls_ssl_session *session = ssl->session_negotiate;
    if( !session )
 80aa414:	b905      	cbnz	r5, 80aa418 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
 80aa416:	6a85      	ldr	r5, [r0, #40]	; 0x28

    mbedtls_sha512_init( &sha512 );
 80aa418:	a810      	add	r0, sp, #64	; 0x40
 80aa41a:	f004 f91b 	bl	80ae654 <mbedtls_sha512_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha384" ) );

    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 80aa41e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80aa420:	a810      	add	r0, sp, #64	; 0x40
 80aa422:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
 80aa426:	f004 f91e 	bl	80ae666 <mbedtls_sha512_clone>
                   sha512.state, sizeof( sha512.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 80aa42a:	4b10      	ldr	r3, [pc, #64]	; (80aa46c <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x64>)
 80aa42c:	4910      	ldr	r1, [pc, #64]	; (80aa470 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x68>)

    mbedtls_sha512_finish_ret( &sha512, padbuf );
 80aa42e:	a810      	add	r0, sp, #64	; 0x40
                   sha512.state, sizeof( sha512.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 80aa430:	2e00      	cmp	r6, #0
 80aa432:	bf0c      	ite	eq
 80aa434:	461e      	moveq	r6, r3
 80aa436:	460e      	movne	r6, r1

    mbedtls_sha512_finish_ret( &sha512, padbuf );
 80aa438:	a904      	add	r1, sp, #16
 80aa43a:	f005 f849 	bl	80af4d0 <mbedtls_sha512_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
 80aa43e:	6b23      	ldr	r3, [r4, #48]	; 0x30
                             padbuf, 48, buf, len );
 80aa440:	220c      	movs	r2, #12
 80aa442:	2430      	movs	r4, #48	; 0x30
 80aa444:	9202      	str	r2, [sp, #8]
 80aa446:	9701      	str	r7, [sp, #4]
 80aa448:	9400      	str	r4, [sp, #0]
 80aa44a:	4632      	mov	r2, r6
 80aa44c:	4621      	mov	r1, r4
 80aa44e:	f8d3 72ac 	ldr.w	r7, [r3, #684]	; 0x2ac
 80aa452:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 80aa456:	ab04      	add	r3, sp, #16
 80aa458:	47b8      	blx	r7

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );

    mbedtls_sha512_free( &sha512 );
 80aa45a:	a810      	add	r0, sp, #64	; 0x40
 80aa45c:	f004 f8fe 	bl	80ae65c <mbedtls_sha512_free>

    mbedtls_platform_zeroize(  padbuf, sizeof( padbuf ) );
 80aa460:	4621      	mov	r1, r4
 80aa462:	a804      	add	r0, sp, #16
 80aa464:	f7fb ffd4 	bl	80a6410 <mbedtls_platform_zeroize>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
}
 80aa468:	b047      	add	sp, #284	; 0x11c
 80aa46a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80aa46c:	080b57a9 	.word	0x080b57a9
 80aa470:	080b57b9 	.word	0x080b57b9

080aa474 <_ZL26ssl_calc_verify_tls_sha384P19mbedtls_ssl_contextPh>:
}
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
void ssl_calc_verify_tls_sha384( mbedtls_ssl_context *ssl, unsigned char hash[48] )
{
 80aa474:	b530      	push	{r4, r5, lr}
 80aa476:	4605      	mov	r5, r0
 80aa478:	460c      	mov	r4, r1
 80aa47a:	b0b7      	sub	sp, #220	; 0xdc
    mbedtls_sha512_context sha512;

    mbedtls_sha512_init( &sha512 );
 80aa47c:	4668      	mov	r0, sp
 80aa47e:	f004 f8e9 	bl	80ae654 <mbedtls_sha512_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha384" ) );

    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 80aa482:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80aa484:	4668      	mov	r0, sp
 80aa486:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
 80aa48a:	f004 f8ec 	bl	80ae666 <mbedtls_sha512_clone>
    mbedtls_sha512_finish_ret( &sha512, hash );
 80aa48e:	4621      	mov	r1, r4
 80aa490:	4668      	mov	r0, sp
 80aa492:	f005 f81d 	bl	80af4d0 <mbedtls_sha512_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 48 );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );

    mbedtls_sha512_free( &sha512 );
 80aa496:	4668      	mov	r0, sp
 80aa498:	f004 f8e0 	bl	80ae65c <mbedtls_sha512_free>

    return;
}
 80aa49c:	b037      	add	sp, #220	; 0xdc
 80aa49e:	bd30      	pop	{r4, r5, pc}

080aa4a0 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context>:

/* Append a new keycert entry to a (possibly empty) list */
static int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
 80aa4a0:	b570      	push	{r4, r5, r6, lr}
 80aa4a2:	4604      	mov	r4, r0
 80aa4a4:	460e      	mov	r6, r1
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 80aa4a6:	2001      	movs	r0, #1
 80aa4a8:	210c      	movs	r1, #12

/* Append a new keycert entry to a (possibly empty) list */
static int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
 80aa4aa:	4615      	mov	r5, r2
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 80aa4ac:	f008 f886 	bl	80b25bc <calloc>
    if( new_cert == NULL )
 80aa4b0:	b178      	cbz	r0, 80aa4d2 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x32>
    new_cert->cert = cert;
    new_cert->key  = key;
    new_cert->next = NULL;

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
 80aa4b2:	6822      	ldr	r2, [r4, #0]
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new_cert->cert = cert;
    new_cert->key  = key;
    new_cert->next = NULL;
 80aa4b4:	2300      	movs	r3, #0

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new_cert->cert = cert;
 80aa4b6:	6006      	str	r6, [r0, #0]
    new_cert->key  = key;
 80aa4b8:	6045      	str	r5, [r0, #4]
    new_cert->next = NULL;
 80aa4ba:	6083      	str	r3, [r0, #8]

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
 80aa4bc:	b912      	cbnz	r2, 80aa4c4 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x24>
    {
        *head = new_cert;
 80aa4be:	6020      	str	r0, [r4, #0]
        while( cur->next != NULL )
            cur = cur->next;
        cur->next = new_cert;
    }

    return( 0 );
 80aa4c0:	4610      	mov	r0, r2
 80aa4c2:	bd70      	pop	{r4, r5, r6, pc}
        *head = new_cert;
    }
    else
    {
        mbedtls_ssl_key_cert *cur = *head;
        while( cur->next != NULL )
 80aa4c4:	6893      	ldr	r3, [r2, #8]
 80aa4c6:	b10b      	cbz	r3, 80aa4cc <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x2c>
 80aa4c8:	461a      	mov	r2, r3
 80aa4ca:	e7fb      	b.n	80aa4c4 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x24>
            cur = cur->next;
        cur->next = new_cert;
 80aa4cc:	6090      	str	r0, [r2, #8]
    }

    return( 0 );
 80aa4ce:	4618      	mov	r0, r3
 80aa4d0:	bd70      	pop	{r4, r5, r6, pc}
{
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 80aa4d2:	4801      	ldr	r0, [pc, #4]	; (80aa4d8 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x38>)
            cur = cur->next;
        cur->next = new_cert;
    }

    return( 0 );
}
 80aa4d4:	bd70      	pop	{r4, r5, r6, pc}
 80aa4d6:	bf00      	nop
 80aa4d8:	ffff8100 	.word	0xffff8100

080aa4dc <_ZL26ssl_update_checksum_sha256P19mbedtls_ssl_contextPKhj>:
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_update_checksum_sha256( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 80aa4dc:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80aa4de:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 80aa4e2:	f7f6 bc49 	b.w	80a0d78 <mbedtls_sha256_update_ret>

080aa4e6 <_ZL26ssl_update_checksum_sha384P19mbedtls_ssl_contextPKhj>:

#if defined(MBEDTLS_SHA512_C)
static void ssl_update_checksum_sha384( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 80aa4e6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80aa4e8:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
 80aa4ec:	f004 bfa8 	b.w	80af440 <mbedtls_sha512_update_ret>

080aa4f0 <_ZL25ssl_update_checksum_startP19mbedtls_ssl_contextPKhj>:
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}

static void ssl_update_checksum_start( mbedtls_ssl_context *ssl,
                                       const unsigned char *buf, size_t len )
{
 80aa4f0:	b570      	push	{r4, r5, r6, lr}
 80aa4f2:	4604      	mov	r4, r0
 80aa4f4:	460d      	mov	r5, r1
 80aa4f6:	4616      	mov	r6, r2
     mbedtls_md5_update_ret( &ssl->handshake->fin_md5 , buf, len );
    mbedtls_sha1_update_ret( &ssl->handshake->fin_sha1, buf, len );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 80aa4f8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80aa4fa:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 80aa4fe:	f7f6 fc3b 	bl	80a0d78 <mbedtls_sha256_update_ret>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 80aa502:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80aa504:	4632      	mov	r2, r6
 80aa506:	4629      	mov	r1, r5
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}
 80aa508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 80aa50c:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
 80aa510:	f004 bf96 	b.w	80af440 <mbedtls_sha512_update_ret>

080aa514 <_ZL25ssl_reset_in_out_pointersP19mbedtls_ssl_context>:
        ssl->in_hdr  = ssl->in_buf;
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    {
        ssl->out_hdr = ssl->out_buf + 8;
 80aa514:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
/*
 * Setup an SSL context
 */

static void ssl_reset_in_out_pointers( mbedtls_ssl_context *ssl )
{
 80aa518:	b510      	push	{r4, lr}
        ssl->in_hdr  = ssl->in_buf;
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    {
        ssl->out_hdr = ssl->out_buf + 8;
 80aa51a:	3308      	adds	r3, #8
 80aa51c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
        ssl->in_hdr  = ssl->in_buf  + 8;
 80aa520:	6d03      	ldr	r3, [r0, #80]	; 0x50
    }

    /* Derive other internal pointers. */
    ssl_update_out_pointers( ssl, NULL /* no transform enabled */ );
 80aa522:	2100      	movs	r1, #0
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    {
        ssl->out_hdr = ssl->out_buf + 8;
        ssl->in_hdr  = ssl->in_buf  + 8;
 80aa524:	3308      	adds	r3, #8
 80aa526:	6583      	str	r3, [r0, #88]	; 0x58
    }

    /* Derive other internal pointers. */
    ssl_update_out_pointers( ssl, NULL /* no transform enabled */ );
 80aa528:	f7ff fe5a 	bl	80aa1e0 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>
        ssl->in_iv  = ssl->in_hdr + 13;
    }
    else
#endif
    {
        ssl->in_ctr = ssl->in_hdr - 8;
 80aa52c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80aa52e:	f1a3 0208 	sub.w	r2, r3, #8
 80aa532:	6542      	str	r2, [r0, #84]	; 0x54
        ssl->in_len = ssl->in_hdr + 3;
 80aa534:	1cda      	adds	r2, r3, #3
        ssl->in_iv  = ssl->in_hdr + 5;
 80aa536:	3305      	adds	r3, #5
    }
    else
#endif
    {
        ssl->in_ctr = ssl->in_hdr - 8;
        ssl->in_len = ssl->in_hdr + 3;
 80aa538:	65c2      	str	r2, [r0, #92]	; 0x5c
        ssl->in_iv  = ssl->in_hdr + 5;
 80aa53a:	6603      	str	r3, [r0, #96]	; 0x60
        ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->in_msg = ssl->in_iv + transform->ivlen - transform->fixed_ivlen;
    }
    else
        ssl->in_msg = ssl->in_iv;
 80aa53c:	6643      	str	r3, [r0, #100]	; 0x64
 80aa53e:	bd10      	pop	{r4, pc}

080aa540 <mbedtls_ssl_derive_keys>:
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 80aa540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
 80aa544:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
 80aa546:	6c04      	ldr	r4, [r0, #64]	; 0x40
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 80aa548:	b0d7      	sub	sp, #348	; 0x15c
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
 80aa54a:	9305      	str	r3, [sp, #20]
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );

    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 80aa54c:	6823      	ldr	r3, [r4, #0]
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
 80aa54e:	6b05      	ldr	r5, [r0, #48]	; 0x30
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 80aa550:	4680      	mov	r8, r0
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );

    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 80aa552:	7a18      	ldrb	r0, [r3, #8]
 80aa554:	f7f6 fec2 	bl	80a12dc <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 80aa558:	4606      	mov	r6, r0
 80aa55a:	b908      	cbnz	r0, 80aa560 <mbedtls_ssl_derive_keys+0x20>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "cipher info for %d not found",
                            transform->ciphersuite_info->cipher ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80aa55c:	4ba3      	ldr	r3, [pc, #652]	; (80aa7ec <mbedtls_ssl_derive_keys+0x2ac>)
 80aa55e:	e140      	b.n	80aa7e2 <mbedtls_ssl_derive_keys+0x2a2>
    }

    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
 80aa560:	6823      	ldr	r3, [r4, #0]
 80aa562:	7a58      	ldrb	r0, [r3, #9]
 80aa564:	f7fd fdf4 	bl	80a8150 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80aa568:	4682      	mov	sl, r0
 80aa56a:	2800      	cmp	r0, #0
 80aa56c:	d0f6      	beq.n	80aa55c <mbedtls_ssl_derive_keys+0x1c>
    }
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 80aa56e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80aa572:	2b03      	cmp	r3, #3
 80aa574:	d001      	beq.n	80aa57a <mbedtls_ssl_derive_keys+0x3a>
    else
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80aa576:	4b9e      	ldr	r3, [pc, #632]	; (80aa7f0 <mbedtls_ssl_derive_keys+0x2b0>)
 80aa578:	e133      	b.n	80aa7e2 <mbedtls_ssl_derive_keys+0x2a2>
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 80aa57a:	6823      	ldr	r3, [r4, #0]
    }
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 80aa57c:	7a5b      	ldrb	r3, [r3, #9]
 80aa57e:	2b07      	cmp	r3, #7
 80aa580:	d107      	bne.n	80aa592 <mbedtls_ssl_derive_keys+0x52>
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
    {
        handshake->tls_prf = tls_prf_sha384;
 80aa582:	4b9c      	ldr	r3, [pc, #624]	; (80aa7f4 <mbedtls_ssl_derive_keys+0x2b4>)
 80aa584:	f8c5 32ac 	str.w	r3, [r5, #684]	; 0x2ac
        handshake->calc_verify = ssl_calc_verify_tls_sha384;
 80aa588:	4b9b      	ldr	r3, [pc, #620]	; (80aa7f8 <mbedtls_ssl_derive_keys+0x2b8>)
 80aa58a:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        handshake->calc_finished = ssl_calc_finished_tls_sha384;
 80aa58e:	4b9b      	ldr	r3, [pc, #620]	; (80aa7fc <mbedtls_ssl_derive_keys+0x2bc>)
 80aa590:	e006      	b.n	80aa5a0 <mbedtls_ssl_derive_keys+0x60>
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
    {
        handshake->tls_prf = tls_prf_sha256;
 80aa592:	4b9b      	ldr	r3, [pc, #620]	; (80aa800 <mbedtls_ssl_derive_keys+0x2c0>)
 80aa594:	f8c5 32ac 	str.w	r3, [r5, #684]	; 0x2ac
        handshake->calc_verify = ssl_calc_verify_tls_sha256;
 80aa598:	4b9a      	ldr	r3, [pc, #616]	; (80aa804 <mbedtls_ssl_derive_keys+0x2c4>)
 80aa59a:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
 80aa59e:	4b9a      	ldr	r3, [pc, #616]	; (80aa808 <mbedtls_ssl_derive_keys+0x2c8>)
 80aa5a0:	f8c5 32a8 	str.w	r3, [r5, #680]	; 0x2a8
     *     MD5( premaster + SHA1( 'CCC' + premaster + randbytes ) )
     *
     * TLSv1+:
     *   master = PRF( premaster, "master secret", randbytes )[0..47]
     */
    if( handshake->resume == 0 )
 80aa5a4:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 80aa5a8:	f505 7b3d 	add.w	fp, r5, #756	; 0x2f4
 80aa5ac:	f505 792d 	add.w	r9, r5, #692	; 0x2b4
 80aa5b0:	b9b3      	cbnz	r3, 80aa5e0 <mbedtls_ssl_derive_keys+0xa0>
            }

        }
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 80aa5b2:	2330      	movs	r3, #48	; 0x30
 80aa5b4:	9302      	str	r3, [sp, #8]
 80aa5b6:	9b05      	ldr	r3, [sp, #20]
 80aa5b8:	4a94      	ldr	r2, [pc, #592]	; (80aa80c <mbedtls_ssl_derive_keys+0x2cc>)
 80aa5ba:	332c      	adds	r3, #44	; 0x2c
 80aa5bc:	9301      	str	r3, [sp, #4]
 80aa5be:	2340      	movs	r3, #64	; 0x40
 80aa5c0:	9300      	str	r3, [sp, #0]
 80aa5c2:	f8d5 72ac 	ldr.w	r7, [r5, #684]	; 0x2ac
 80aa5c6:	464b      	mov	r3, r9
 80aa5c8:	f8d5 12b0 	ldr.w	r1, [r5, #688]	; 0x2b0
 80aa5cc:	4658      	mov	r0, fp
 80aa5ce:	47b8      	blx	r7
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
        if( ret != 0 )
 80aa5d0:	4603      	mov	r3, r0
 80aa5d2:	2800      	cmp	r0, #0
 80aa5d4:	f040 8105 	bne.w	80aa7e2 <mbedtls_ssl_derive_keys+0x2a2>
            MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
            return( ret );
        }

        mbedtls_platform_zeroize( handshake->premaster,
                                  sizeof(handshake->premaster) );
 80aa5d8:	2154      	movs	r1, #84	; 0x54
 80aa5da:	4658      	mov	r0, fp
 80aa5dc:	f7fb ff18 	bl	80a6410 <mbedtls_platform_zeroize>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "no premaster (session resumed)" ) );

    /*
     * Swap the client and server random values.
     */
    memcpy( tmp, handshake->randbytes, 64 );
 80aa5e0:	464b      	mov	r3, r9
 80aa5e2:	af06      	add	r7, sp, #24
 80aa5e4:	463a      	mov	r2, r7
 80aa5e6:	6818      	ldr	r0, [r3, #0]
 80aa5e8:	6859      	ldr	r1, [r3, #4]
 80aa5ea:	3308      	adds	r3, #8
 80aa5ec:	c203      	stmia	r2!, {r0, r1}
 80aa5ee:	455b      	cmp	r3, fp
 80aa5f0:	4617      	mov	r7, r2
 80aa5f2:	d1f7      	bne.n	80aa5e4 <mbedtls_ssl_derive_keys+0xa4>
    memcpy( handshake->randbytes, tmp + 32, 32 );
 80aa5f4:	464a      	mov	r2, r9
 80aa5f6:	af0e      	add	r7, sp, #56	; 0x38
 80aa5f8:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
 80aa5fc:	463b      	mov	r3, r7
 80aa5fe:	cb03      	ldmia	r3!, {r0, r1}
 80aa600:	455b      	cmp	r3, fp
 80aa602:	6010      	str	r0, [r2, #0]
 80aa604:	6051      	str	r1, [r2, #4]
 80aa606:	461f      	mov	r7, r3
 80aa608:	f102 0208 	add.w	r2, r2, #8
 80aa60c:	d1f6      	bne.n	80aa5fc <mbedtls_ssl_derive_keys+0xbc>
    memcpy( handshake->randbytes + 32, tmp, 32 );
 80aa60e:	af06      	add	r7, sp, #24
 80aa610:	f505 7235 	add.w	r2, r5, #724	; 0x2d4
 80aa614:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 80aa618:	463b      	mov	r3, r7
 80aa61a:	cb03      	ldmia	r3!, {r0, r1}
 80aa61c:	4573      	cmp	r3, lr
 80aa61e:	6010      	str	r0, [r2, #0]
 80aa620:	6051      	str	r1, [r2, #4]
 80aa622:	461f      	mov	r7, r3
 80aa624:	f102 0208 	add.w	r2, r2, #8
 80aa628:	d1f6      	bne.n	80aa618 <mbedtls_ssl_derive_keys+0xd8>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 80aa62a:	2140      	movs	r1, #64	; 0x40
 80aa62c:	a806      	add	r0, sp, #24
 80aa62e:	f7fb feef 	bl	80a6410 <mbedtls_platform_zeroize>
     *      ...
     *
     *  TLSv1:
     *    key block = PRF( master, "key expansion", randbytes )
     */
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 80aa632:	9f05      	ldr	r7, [sp, #20]
 80aa634:	f8cd b004 	str.w	fp, [sp, #4]
 80aa638:	f44f 7380 	mov.w	r3, #256	; 0x100
 80aa63c:	f04f 0b40 	mov.w	fp, #64	; 0x40
 80aa640:	9302      	str	r3, [sp, #8]
 80aa642:	f8cd b000 	str.w	fp, [sp]
 80aa646:	372c      	adds	r7, #44	; 0x2c
 80aa648:	464b      	mov	r3, r9
 80aa64a:	f8d5 52ac 	ldr.w	r5, [r5, #684]	; 0x2ac
 80aa64e:	4a70      	ldr	r2, [pc, #448]	; (80aa810 <mbedtls_ssl_derive_keys+0x2d0>)
 80aa650:	2130      	movs	r1, #48	; 0x30
 80aa652:	4638      	mov	r0, r7
 80aa654:	47a8      	blx	r5
                              handshake->randbytes, 64, keyblk, 256 );
    if( ret != 0 )
 80aa656:	4603      	mov	r3, r0
 80aa658:	2800      	cmp	r0, #0
 80aa65a:	f040 80c2 	bne.w	80aa7e2 <mbedtls_ssl_derive_keys+0x2a2>
    MBEDTLS_SSL_DEBUG_BUF( 3, "master secret", session->master, 48 );
    MBEDTLS_SSL_DEBUG_BUF( 4, "random bytes", handshake->randbytes, 64 );
    MBEDTLS_SSL_DEBUG_BUF( 4, "key block", keyblk, 256 );

    mbedtls_platform_zeroize( handshake->randbytes,
                              sizeof( handshake->randbytes ) );
 80aa65e:	4659      	mov	r1, fp
 80aa660:	4648      	mov	r0, r9
 80aa662:	f7fb fed5 	bl	80a6410 <mbedtls_platform_zeroize>

    /*
     * Determine the appropriate key, IV and MAC length.
     */

    transform->keylen = cipher_info->key_bitlen / 8;
 80aa666:	6873      	ldr	r3, [r6, #4]
 80aa668:	08db      	lsrs	r3, r3, #3
 80aa66a:	6063      	str	r3, [r4, #4]

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
 80aa66c:	7873      	ldrb	r3, [r6, #1]
 80aa66e:	2b06      	cmp	r3, #6
 80aa670:	d003      	beq.n	80aa67a <mbedtls_ssl_derive_keys+0x13a>
 80aa672:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80aa676:	2b08      	cmp	r3, #8
 80aa678:	d116      	bne.n	80aa6a8 <mbedtls_ssl_derive_keys+0x168>
        cipher_info->mode == MBEDTLS_MODE_CCM ||
        cipher_info->mode == MBEDTLS_MODE_CHACHAPOLY )
    {
        size_t taglen, explicit_ivlen;

        transform->maclen = 0;
 80aa67a:	2300      	movs	r3, #0
 80aa67c:	6163      	str	r3, [r4, #20]

        /* All modes haves 96-bit IVs;
         * GCM and CCM has 4 implicit and 8 explicit bytes
         * ChachaPoly has all 12 bytes implicit
         */
        transform->ivlen = 12;
 80aa67e:	230c      	movs	r3, #12
 80aa680:	60e3      	str	r3, [r4, #12]
        if( cipher_info->mode == MBEDTLS_MODE_CHACHAPOLY )
 80aa682:	7872      	ldrb	r2, [r6, #1]
        cipher_info->mode == MBEDTLS_MODE_CHACHAPOLY )
    {
        size_t taglen, explicit_ivlen;

        transform->maclen = 0;
        mac_key_len = 0;
 80aa684:	2500      	movs	r5, #0
        /* All modes haves 96-bit IVs;
         * GCM and CCM has 4 implicit and 8 explicit bytes
         * ChachaPoly has all 12 bytes implicit
         */
        transform->ivlen = 12;
        if( cipher_info->mode == MBEDTLS_MODE_CHACHAPOLY )
 80aa686:	2a0a      	cmp	r2, #10
            transform->fixed_ivlen = 12;
        else
            transform->fixed_ivlen = 4;
 80aa688:	bf18      	it	ne
 80aa68a:	2304      	movne	r3, #4
 80aa68c:	6123      	str	r3, [r4, #16]

        /* All modes have 128-bit tags, except CCM_8 (ciphersuite flag) */
        taglen = transform->ciphersuite_info->flags &
 80aa68e:	6823      	ldr	r3, [r4, #0]
                  MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 80aa690:	7f1b      	ldrb	r3, [r3, #28]
 80aa692:	f013 0f02 	tst.w	r3, #2


        /* Minimum length of encrypted record */
        explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
        transform->minlen = explicit_ivlen + taglen;
 80aa696:	6923      	ldr	r3, [r4, #16]
        else
            transform->fixed_ivlen = 4;

        /* All modes have 128-bit tags, except CCM_8 (ciphersuite flag) */
        taglen = transform->ciphersuite_info->flags &
                  MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 80aa698:	bf14      	ite	ne
 80aa69a:	2208      	movne	r2, #8
 80aa69c:	2210      	moveq	r2, #16


        /* Minimum length of encrypted record */
        explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
        transform->minlen = explicit_ivlen + taglen;
 80aa69e:	f1c3 030c 	rsb	r3, r3, #12
 80aa6a2:	4413      	add	r3, r2
 80aa6a4:	60a3      	str	r3, [r4, #8]
 80aa6a6:	e01b      	b.n	80aa6e0 <mbedtls_ssl_derive_keys+0x1a0>
    }
    else
    {
        /* Initialize HMAC contexts */
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 80aa6a8:	2201      	movs	r2, #1
 80aa6aa:	4651      	mov	r1, sl
 80aa6ac:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80aa6b0:	f7fd fd7a 	bl	80a81a8 <mbedtls_md_setup>
 80aa6b4:	2800      	cmp	r0, #0
 80aa6b6:	f040 8083 	bne.w	80aa7c0 <mbedtls_ssl_derive_keys+0x280>
            ( ret = mbedtls_md_setup( &transform->md_ctx_dec, md_info, 1 ) ) != 0 )
 80aa6ba:	2201      	movs	r2, #1
 80aa6bc:	4651      	mov	r1, sl
 80aa6be:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80aa6c2:	f7fd fd71 	bl	80a81a8 <mbedtls_md_setup>
        transform->minlen = explicit_ivlen + taglen;
    }
    else
    {
        /* Initialize HMAC contexts */
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 80aa6c6:	2800      	cmp	r0, #0
 80aa6c8:	d17a      	bne.n	80aa7c0 <mbedtls_ssl_derive_keys+0x280>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
            return( ret );
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
 80aa6ca:	4650      	mov	r0, sl
 80aa6cc:	f7fd fe76 	bl	80a83bc <mbedtls_md_get_size>
        transform->maclen = mac_key_len;
 80aa6d0:	6160      	str	r0, [r4, #20]
#endif
        }
#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */

        /* IV length */
        transform->ivlen = cipher_info->iv_size;
 80aa6d2:	68f1      	ldr	r1, [r6, #12]
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
            return( ret );
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
 80aa6d4:	4605      	mov	r5, r0
#endif
        }
#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */

        /* IV length */
        transform->ivlen = cipher_info->iv_size;
 80aa6d6:	60e1      	str	r1, [r4, #12]

        /* Minimum length */
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
 80aa6d8:	7873      	ldrb	r3, [r6, #1]
 80aa6da:	2b07      	cmp	r3, #7
 80aa6dc:	d172      	bne.n	80aa7c4 <mbedtls_ssl_derive_keys+0x284>
            transform->minlen = transform->maclen;
 80aa6de:	60a5      	str	r5, [r4, #8]

    /*
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 80aa6e0:	f8d8 3000 	ldr.w	r3, [r8]
 80aa6e4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80aa6e8:	07db      	lsls	r3, r3, #31
 80aa6ea:	f53f af44 	bmi.w	80aa576 <mbedtls_ssl_derive_keys+0x36>
    {
        key1 = keyblk + mac_key_len * 2;
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
 80aa6ee:	6863      	ldr	r3, [r4, #4]
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
    {
        key1 = keyblk + mac_key_len * 2;
 80aa6f0:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        mac_dec = keyblk + mac_key_len;

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
 80aa6f4:	f8d4 b010 	ldr.w	fp, [r4, #16]
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
    {
        key1 = keyblk + mac_key_len * 2;
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
 80aa6f8:	eb0a 0903 	add.w	r9, sl, r3
 80aa6fc:	aa16      	add	r2, sp, #88	; 0x58
 80aa6fe:	4491      	add	r9, r2

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
                            transform->fixed_ivlen : transform->ivlen;
 80aa700:	f1bb 0f00 	cmp.w	fp, #0
 80aa704:	d101      	bne.n	80aa70a <mbedtls_ssl_derive_keys+0x1ca>
 80aa706:	f8d4 b00c 	ldr.w	fp, [r4, #12]
        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
 80aa70a:	eb09 0103 	add.w	r1, r9, r3
 80aa70e:	465a      	mov	r2, fp
 80aa710:	f104 0018 	add.w	r0, r4, #24
 80aa714:	9305      	str	r3, [sp, #20]
 80aa716:	f008 f86e 	bl	80b27f6 <memcpy>
        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
                iv_copy_len );
 80aa71a:	9b05      	ldr	r3, [sp, #20]
 80aa71c:	465a      	mov	r2, fp
 80aa71e:	eb0b 0103 	add.w	r1, fp, r3
 80aa722:	4449      	add	r1, r9
 80aa724:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80aa728:	f008 f865 	bl	80b27f6 <memcpy>
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 80aa72c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80aa730:	2b00      	cmp	r3, #0
 80aa732:	f77f af20 	ble.w	80aa576 <mbedtls_ssl_derive_keys+0x36>
    {
        /* For HMAC-based ciphersuites, initialize the HMAC transforms.
           For AEAD-based ciphersuites, there is nothing to do here. */
        if( mac_key_len != 0 )
 80aa736:	b165      	cbz	r5, 80aa752 <mbedtls_ssl_derive_keys+0x212>
        {
            mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, mac_key_len );
 80aa738:	462a      	mov	r2, r5
 80aa73a:	a916      	add	r1, sp, #88	; 0x58
 80aa73c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80aa740:	f7fd fd82 	bl	80a8248 <mbedtls_md_hmac_starts>
            mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, mac_key_len );
 80aa744:	ab16      	add	r3, sp, #88	; 0x58
 80aa746:	462a      	mov	r2, r5
 80aa748:	1959      	adds	r1, r3, r5
 80aa74a:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80aa74e:	f7fd fd7b 	bl	80a8248 <mbedtls_md_hmac_starts>
        }
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */

#if defined(MBEDTLS_SSL_EXPORT_KEYS)
    if( ssl->conf->f_export_keys != NULL )
 80aa752:	f8d8 0000 	ldr.w	r0, [r8]
 80aa756:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
 80aa75a:	f1b8 0f00 	cmp.w	r8, #0
 80aa75e:	d008      	beq.n	80aa772 <mbedtls_ssl_derive_keys+0x232>
    {
        ssl->conf->f_export_keys( ssl->conf->p_export_keys,
                                  session->master, keyblk,
                                  mac_key_len, transform->keylen,
                                  iv_copy_len );
 80aa760:	f8cd b004 	str.w	fp, [sp, #4]
 80aa764:	6863      	ldr	r3, [r4, #4]
 80aa766:	aa16      	add	r2, sp, #88	; 0x58
 80aa768:	9300      	str	r3, [sp, #0]
 80aa76a:	4639      	mov	r1, r7
 80aa76c:	462b      	mov	r3, r5
 80aa76e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80aa770:	47c0      	blx	r8
    }
#endif

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
 80aa772:	f104 0550 	add.w	r5, r4, #80	; 0x50
 80aa776:	4631      	mov	r1, r6
 80aa778:	4628      	mov	r0, r5
 80aa77a:	f7f6 fde5 	bl	80a1348 <mbedtls_cipher_setup>
 80aa77e:	4603      	mov	r3, r0
 80aa780:	bb78      	cbnz	r0, 80aa7e2 <mbedtls_ssl_derive_keys+0x2a2>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
 80aa782:	3488      	adds	r4, #136	; 0x88
 80aa784:	4631      	mov	r1, r6
 80aa786:	4620      	mov	r0, r4
 80aa788:	f7f6 fdde 	bl	80a1348 <mbedtls_cipher_setup>
 80aa78c:	4603      	mov	r3, r0
 80aa78e:	bb40      	cbnz	r0, 80aa7e2 <mbedtls_ssl_derive_keys+0x2a2>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
 80aa790:	a916      	add	r1, sp, #88	; 0x58
 80aa792:	2301      	movs	r3, #1
 80aa794:	6872      	ldr	r2, [r6, #4]
 80aa796:	4451      	add	r1, sl
 80aa798:	4628      	mov	r0, r5
 80aa79a:	f7f6 fded 	bl	80a1378 <mbedtls_cipher_setkey>
 80aa79e:	4603      	mov	r3, r0
 80aa7a0:	b9f8      	cbnz	r0, 80aa7e2 <mbedtls_ssl_derive_keys+0x2a2>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
 80aa7a2:	6872      	ldr	r2, [r6, #4]
 80aa7a4:	4649      	mov	r1, r9
 80aa7a6:	4620      	mov	r0, r4
 80aa7a8:	f7f6 fde6 	bl	80a1378 <mbedtls_cipher_setkey>
 80aa7ac:	4603      	mov	r3, r0
 80aa7ae:	b9c0      	cbnz	r0, 80aa7e2 <mbedtls_ssl_derive_keys+0x2a2>
 80aa7b0:	9005      	str	r0, [sp, #20]
            return( ret );
        }
    }
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    mbedtls_platform_zeroize( keyblk, sizeof( keyblk ) );
 80aa7b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80aa7b6:	a816      	add	r0, sp, #88	; 0x58
 80aa7b8:	f7fb fe2a 	bl	80a6410 <mbedtls_platform_zeroize>
    }
#endif /* MBEDTLS_ZLIB_SUPPORT */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );

    return( 0 );
 80aa7bc:	9b05      	ldr	r3, [sp, #20]
 80aa7be:	e010      	b.n	80aa7e2 <mbedtls_ssl_derive_keys+0x2a2>
    else
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80aa7c0:	4603      	mov	r3, r0
 80aa7c2:	e00e      	b.n	80aa7e2 <mbedtls_ssl_derive_keys+0x2a2>
            }
            else
#endif
            {
                transform->minlen = transform->maclen
                                  + cipher_info->block_size
 80aa7c4:	6973      	ldr	r3, [r6, #20]
                                  - transform->maclen % cipher_info->block_size;
 80aa7c6:	fbb5 f2f3 	udiv	r2, r5, r3
 80aa7ca:	fb03 3302 	mla	r3, r3, r2, r3
 80aa7ce:	60a3      	str	r3, [r4, #8]
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_1 )
                ; /* No need to adjust minlen */
            else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 80aa7d0:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80aa7d4:	3a02      	subs	r2, #2
 80aa7d6:	2a01      	cmp	r2, #1
 80aa7d8:	f63f aecd 	bhi.w	80aa576 <mbedtls_ssl_derive_keys+0x36>
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
            {
                transform->minlen += transform->ivlen;
 80aa7dc:	440b      	add	r3, r1
 80aa7de:	60a3      	str	r3, [r4, #8]
 80aa7e0:	e77e      	b.n	80aa6e0 <mbedtls_ssl_derive_keys+0x1a0>
#endif /* MBEDTLS_ZLIB_SUPPORT */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );

    return( 0 );
}
 80aa7e2:	4618      	mov	r0, r3
 80aa7e4:	b057      	add	sp, #348	; 0x15c
 80aa7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aa7ea:	bf00      	nop
 80aa7ec:	ffff8f00 	.word	0xffff8f00
 80aa7f0:	ffff9400 	.word	0xffff9400
 80aa7f4:	080aa3e9 	.word	0x080aa3e9
 80aa7f8:	080aa475 	.word	0x080aa475
 80aa7fc:	080aa409 	.word	0x080aa409
 80aa800:	080aa3c9 	.word	0x080aa3c9
 80aa804:	080aa27d 	.word	0x080aa27d
 80aa808:	080aa211 	.word	0x080aa211
 80aa80c:	080b57c9 	.word	0x080b57c9
 80aa810:	080b57d7 	.word	0x080b57d7

080aa814 <mbedtls_ssl_psk_derive_premaster>:
#endif /* MBEDTLS_SHA512_C */
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
int mbedtls_ssl_psk_derive_premaster( mbedtls_ssl_context *ssl, mbedtls_key_exchange_type_t key_ex )
{
 80aa814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80aa818:	4606      	mov	r6, r0
    unsigned char *p = ssl->handshake->premaster;
 80aa81a:	6b00      	ldr	r0, [r0, #48]	; 0x30
    unsigned char *end = p + sizeof( ssl->handshake->premaster );
    const unsigned char *psk = ssl->conf->psk;
 80aa81c:	6832      	ldr	r2, [r6, #0]
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
int mbedtls_ssl_psk_derive_premaster( mbedtls_ssl_context *ssl, mbedtls_key_exchange_type_t key_ex )
{
    unsigned char *p = ssl->handshake->premaster;
 80aa81e:	f500 733d 	add.w	r3, r0, #756	; 0x2f4
    unsigned char *end = p + sizeof( ssl->handshake->premaster );
    const unsigned char *psk = ssl->conf->psk;
 80aa822:	6e57      	ldr	r7, [r2, #100]	; 0x64
    size_t psk_len = ssl->conf->psk_len;
 80aa824:	6e94      	ldr	r4, [r2, #104]	; 0x68

    /* If the psk callback was called, use its result */
    if( ssl->handshake->psk != NULL )
 80aa826:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
int mbedtls_ssl_psk_derive_premaster( mbedtls_ssl_context *ssl, mbedtls_key_exchange_type_t key_ex )
{
    unsigned char *p = ssl->handshake->premaster;
    unsigned char *end = p + sizeof( ssl->handshake->premaster );
 80aa82a:	f500 7552 	add.w	r5, r0, #840	; 0x348
    const unsigned char *psk = ssl->conf->psk;
    size_t psk_len = ssl->conf->psk_len;

    /* If the psk callback was called, use its result */
    if( ssl->handshake->psk != NULL )
 80aa82e:	b112      	cbz	r2, 80aa836 <mbedtls_ssl_psk_derive_premaster+0x22>
 80aa830:	4617      	mov	r7, r2
    {
        psk = ssl->handshake->psk;
        psk_len = ssl->handshake->psk_len;
 80aa832:	f8d0 4140 	ldr.w	r4, [r0, #320]	; 0x140
     *     opaque psk<0..2^16-1>;
     * };
     * with "other_secret" depending on the particular key exchange
     */
#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)
    if( key_ex == MBEDTLS_KEY_EXCHANGE_PSK )
 80aa836:	2905      	cmp	r1, #5
 80aa838:	d11a      	bne.n	80aa870 <mbedtls_ssl_psk_derive_premaster+0x5c>
    {
        if( end - p < 2 )
 80aa83a:	1aeb      	subs	r3, r5, r3
 80aa83c:	2b01      	cmp	r3, #1
 80aa83e:	dc02      	bgt.n	80aa846 <mbedtls_ssl_psk_derive_premaster+0x32>
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80aa840:	4821      	ldr	r0, [pc, #132]	; (80aa8c8 <mbedtls_ssl_psk_derive_premaster+0xb4>)
 80aa842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

        *(p++) = (unsigned char)( psk_len >> 8 );
        *(p++) = (unsigned char)( psk_len      );
 80aa846:	f200 28f6 	addw	r8, r0, #758	; 0x2f6
    if( key_ex == MBEDTLS_KEY_EXCHANGE_PSK )
    {
        if( end - p < 2 )
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

        *(p++) = (unsigned char)( psk_len >> 8 );
 80aa84a:	0a23      	lsrs	r3, r4, #8
        *(p++) = (unsigned char)( psk_len      );

        if( end < p || (size_t)( end - p ) < psk_len )
 80aa84c:	4545      	cmp	r5, r8
    if( key_ex == MBEDTLS_KEY_EXCHANGE_PSK )
    {
        if( end - p < 2 )
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

        *(p++) = (unsigned char)( psk_len >> 8 );
 80aa84e:	f880 32f4 	strb.w	r3, [r0, #756]	; 0x2f4
        *(p++) = (unsigned char)( psk_len      );
 80aa852:	f880 42f5 	strb.w	r4, [r0, #757]	; 0x2f5

        if( end < p || (size_t)( end - p ) < psk_len )
 80aa856:	d3f3      	bcc.n	80aa840 <mbedtls_ssl_psk_derive_premaster+0x2c>
 80aa858:	ebc8 0305 	rsb	r3, r8, r5
 80aa85c:	42a3      	cmp	r3, r4
 80aa85e:	d3ef      	bcc.n	80aa840 <mbedtls_ssl_psk_derive_premaster+0x2c>
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

        memset( p, 0, psk_len );
 80aa860:	4622      	mov	r2, r4
 80aa862:	2100      	movs	r1, #0
 80aa864:	4640      	mov	r0, r8
 80aa866:	f007 ffec 	bl	80b2842 <memset>
        p += psk_len;
 80aa86a:	eb08 0004 	add.w	r0, r8, r4
 80aa86e:	e00c      	b.n	80aa88a <mbedtls_ssl_psk_derive_premaster+0x76>
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)
    if( key_ex == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
 80aa870:	2907      	cmp	r1, #7
 80aa872:	d126      	bne.n	80aa8c2 <mbedtls_ssl_psk_derive_premaster+0xae>
    {
        /*
         * other_secret already set by the ClientKeyExchange message,
         * and is 48 bytes long
         */
        if( end - p < 2 )
 80aa874:	1aeb      	subs	r3, r5, r3
 80aa876:	2b01      	cmp	r3, #1
 80aa878:	dde2      	ble.n	80aa840 <mbedtls_ssl_psk_derive_premaster+0x2c>
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

        *p++ = 0;
 80aa87a:	2300      	movs	r3, #0
 80aa87c:	f880 32f4 	strb.w	r3, [r0, #756]	; 0x2f4
        *p++ = 48;
 80aa880:	2330      	movs	r3, #48	; 0x30
 80aa882:	f880 32f5 	strb.w	r3, [r0, #757]	; 0x2f5
        p += 48;
 80aa886:	f200 3026 	addw	r0, r0, #806	; 0x326
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    /* opaque psk<0..2^16-1>; */
    if( end - p < 2 )
 80aa88a:	1a2b      	subs	r3, r5, r0
 80aa88c:	2b01      	cmp	r3, #1
 80aa88e:	ddd7      	ble.n	80aa840 <mbedtls_ssl_psk_derive_premaster+0x2c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    *(p++) = (unsigned char)( psk_len >> 8 );
 80aa890:	4603      	mov	r3, r0
 80aa892:	0a22      	lsrs	r2, r4, #8
 80aa894:	f803 2b02 	strb.w	r2, [r3], #2
    *(p++) = (unsigned char)( psk_len      );

    if( end < p || (size_t)( end - p ) < psk_len )
 80aa898:	429d      	cmp	r5, r3
    /* opaque psk<0..2^16-1>; */
    if( end - p < 2 )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    *(p++) = (unsigned char)( psk_len >> 8 );
    *(p++) = (unsigned char)( psk_len      );
 80aa89a:	7044      	strb	r4, [r0, #1]

    if( end < p || (size_t)( end - p ) < psk_len )
 80aa89c:	d3d0      	bcc.n	80aa840 <mbedtls_ssl_psk_derive_premaster+0x2c>
 80aa89e:	1aed      	subs	r5, r5, r3
 80aa8a0:	42a5      	cmp	r5, r4
 80aa8a2:	d3cd      	bcc.n	80aa840 <mbedtls_ssl_psk_derive_premaster+0x2c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    memcpy( p, psk, psk_len );
 80aa8a4:	4622      	mov	r2, r4
 80aa8a6:	4639      	mov	r1, r7
 80aa8a8:	4618      	mov	r0, r3
 80aa8aa:	f007 ffa4 	bl	80b27f6 <memcpy>
    p += psk_len;

    ssl->handshake->pmslen = p - ssl->handshake->premaster;
 80aa8ae:	6b32      	ldr	r2, [r6, #48]	; 0x30
 80aa8b0:	4404      	add	r4, r0
 80aa8b2:	f502 733d 	add.w	r3, r2, #756	; 0x2f4
 80aa8b6:	1ae4      	subs	r4, r4, r3
 80aa8b8:	f8c2 42b0 	str.w	r4, [r2, #688]	; 0x2b0

    return( 0 );
 80aa8bc:	2000      	movs	r0, #0
 80aa8be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80aa8c2:	4802      	ldr	r0, [pc, #8]	; (80aa8cc <mbedtls_ssl_psk_derive_premaster+0xb8>)
    p += psk_len;

    ssl->handshake->pmslen = p - ssl->handshake->premaster;

    return( 0 );
}
 80aa8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80aa8c8:	ffff8f00 	.word	0xffff8f00
 80aa8cc:	ffff9400 	.word	0xffff9400

080aa8d0 <mbedtls_ssl_fetch_input>:
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
 80aa8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 80aa8d2:	6943      	ldr	r3, [r0, #20]
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
 80aa8d4:	4604      	mov	r4, r0
 80aa8d6:	460e      	mov	r6, r1
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 80aa8d8:	b90b      	cbnz	r3, 80aa8de <mbedtls_ssl_fetch_input+0xe>
 80aa8da:	6983      	ldr	r3, [r0, #24]
 80aa8dc:	b19b      	cbz	r3, 80aa906 <mbedtls_ssl_fetch_input+0x36>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    if( nb_want > MBEDTLS_SSL_IN_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
 80aa8de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80aa8e0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80aa8e2:	1a9b      	subs	r3, r3, r2
 80aa8e4:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 80aa8e8:	332d      	adds	r3, #45	; 0x2d
 80aa8ea:	42b3      	cmp	r3, r6
 80aa8ec:	d30b      	bcc.n	80aa906 <mbedtls_ssl_fetch_input+0x36>
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
 80aa8ee:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80aa8f0:	42ae      	cmp	r6, r5
 80aa8f2:	d90a      	bls.n	80aa90a <mbedtls_ssl_fetch_input+0x3a>
/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
    if( ssl->f_get_timer == NULL )
 80aa8f4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
        {
            len = nb_want - ssl->in_left;
 80aa8f6:	1b75      	subs	r5, r6, r5
/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
    if( ssl->f_get_timer == NULL )
 80aa8f8:	b14b      	cbz	r3, 80aa90e <mbedtls_ssl_fetch_input+0x3e>
        return( 0 );

    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
 80aa8fa:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80aa8fc:	4798      	blx	r3
 80aa8fe:	2802      	cmp	r0, #2
 80aa900:	d105      	bne.n	80aa90e <mbedtls_ssl_fetch_input+0x3e>
        while( ssl->in_left < nb_want )
        {
            len = nb_want - ssl->in_left;

            if( ssl_check_timer( ssl ) != 0 )
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
 80aa902:	4812      	ldr	r0, [pc, #72]	; (80aa94c <mbedtls_ssl_fetch_input+0x7c>)
 80aa904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80aa906:	4812      	ldr	r0, [pc, #72]	; (80aa950 <mbedtls_ssl_fetch_input+0x80>)
 80aa908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );

    return( 0 );
 80aa90a:	2000      	movs	r0, #0
 80aa90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

            if( ssl_check_timer( ssl ) != 0 )
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
            else
            {
                if( ssl->f_recv_timeout != NULL )
 80aa90e:	69a7      	ldr	r7, [r4, #24]
 80aa910:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80aa912:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80aa914:	b137      	cbz	r7, 80aa924 <mbedtls_ssl_fetch_input+0x54>
                {
                    ret = ssl->f_recv_timeout( ssl->p_bio,
                                               ssl->in_hdr + ssl->in_left, len,
                                               ssl->conf->read_timeout );
 80aa916:	6823      	ldr	r3, [r4, #0]
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
            else
            {
                if( ssl->f_recv_timeout != NULL )
                {
                    ret = ssl->f_recv_timeout( ssl->p_bio,
 80aa918:	4401      	add	r1, r0
 80aa91a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80aa91c:	462a      	mov	r2, r5
 80aa91e:	69e0      	ldr	r0, [r4, #28]
 80aa920:	47b8      	blx	r7
 80aa922:	e004      	b.n	80aa92e <mbedtls_ssl_fetch_input+0x5e>
                                               ssl->in_hdr + ssl->in_left, len,
                                               ssl->conf->read_timeout );
                }
                else
                {
                    ret = ssl->f_recv( ssl->p_bio,
 80aa924:	4401      	add	r1, r0
 80aa926:	6963      	ldr	r3, [r4, #20]
 80aa928:	462a      	mov	r2, r5
 80aa92a:	69e0      	ldr	r0, [r4, #28]
 80aa92c:	4798      	blx	r3

            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );

            if( ret == 0 )
 80aa92e:	2800      	cmp	r0, #0
 80aa930:	d006      	beq.n	80aa940 <mbedtls_ssl_fetch_input+0x70>
                return( MBEDTLS_ERR_SSL_CONN_EOF );

            if( ret < 0 )
 80aa932:	db09      	blt.n	80aa948 <mbedtls_ssl_fetch_input+0x78>
                return( ret );

            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
 80aa934:	4285      	cmp	r5, r0
 80aa936:	d305      	bcc.n	80aa944 <mbedtls_ssl_fetch_input+0x74>
                    ( "f_recv returned %d bytes but only %lu were requested",
                    ret, (unsigned long)len ) );
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            ssl->in_left += ret;
 80aa938:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80aa93a:	4418      	add	r0, r3
 80aa93c:	6760      	str	r0, [r4, #116]	; 0x74
 80aa93e:	e7d6      	b.n	80aa8ee <mbedtls_ssl_fetch_input+0x1e>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );

            if( ret == 0 )
                return( MBEDTLS_ERR_SSL_CONN_EOF );
 80aa940:	4804      	ldr	r0, [pc, #16]	; (80aa954 <mbedtls_ssl_fetch_input+0x84>)
 80aa942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
            {
                MBEDTLS_SSL_DEBUG_MSG( 1,
                    ( "f_recv returned %d bytes but only %lu were requested",
                    ret, (unsigned long)len ) );
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80aa944:	4804      	ldr	r0, [pc, #16]	; (80aa958 <mbedtls_ssl_fetch_input+0x88>)
 80aa946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );

    return( 0 );
}
 80aa948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80aa94a:	bf00      	nop
 80aa94c:	ffff9800 	.word	0xffff9800
 80aa950:	ffff8f00 	.word	0xffff8f00
 80aa954:	ffff8d80 	.word	0xffff8d80
 80aa958:	ffff9400 	.word	0xffff9400

080aa95c <mbedtls_ssl_flush_output>:

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
 80aa95c:	b538      	push	{r3, r4, r5, lr}
    int ret;
    unsigned char *buf;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );

    if( ssl->f_send == NULL )
 80aa95e:	6903      	ldr	r3, [r0, #16]

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
 80aa960:	4605      	mov	r5, r0
    int ret;
    unsigned char *buf;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );

    if( ssl->f_send == NULL )
 80aa962:	b30b      	cbz	r3, 80aa9a8 <mbedtls_ssl_flush_output+0x4c>
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    /* Avoid incrementing counter if data is flushed */
    if( ssl->out_left == 0 )
 80aa964:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 80aa968:	b308      	cbz	r0, 80aa9ae <mbedtls_ssl_flush_output+0x52>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
        return( 0 );
    }

    while( ssl->out_left > 0 )
 80aa96a:	f8d5 40a4 	ldr.w	r4, [r5, #164]	; 0xa4
 80aa96e:	b184      	cbz	r4, 80aa992 <mbedtls_ssl_flush_output+0x36>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
                       mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen, ssl->out_left ) );

        buf = ssl->out_hdr - ssl->out_left;
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 80aa970:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 80aa974:	692b      	ldr	r3, [r5, #16]
 80aa976:	4622      	mov	r2, r4
 80aa978:	1b09      	subs	r1, r1, r4
 80aa97a:	69e8      	ldr	r0, [r5, #28]
 80aa97c:	4798      	blx	r3

        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );

        if( ret <= 0 )
 80aa97e:	2800      	cmp	r0, #0
 80aa980:	dd15      	ble.n	80aa9ae <mbedtls_ssl_flush_output+0x52>
            return( ret );

        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
 80aa982:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
 80aa986:	4282      	cmp	r2, r0
 80aa988:	d310      	bcc.n	80aa9ac <mbedtls_ssl_flush_output+0x50>
                ( "f_send returned %d bytes but only %lu bytes were sent",
                ret, (unsigned long)ssl->out_left ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_left -= ret;
 80aa98a:	1a10      	subs	r0, r2, r0
 80aa98c:	f8c5 00a4 	str.w	r0, [r5, #164]	; 0xa4
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
        return( 0 );
    }

    while( ssl->out_left > 0 )
 80aa990:	e7eb      	b.n	80aa96a <mbedtls_ssl_flush_output+0xe>
        ssl->out_hdr = ssl->out_buf;
    }
    else
#endif
    {
        ssl->out_hdr = ssl->out_buf + 8;
 80aa992:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    }
    ssl_update_out_pointers( ssl, ssl->transform_out );
 80aa996:	4628      	mov	r0, r5
        ssl->out_hdr = ssl->out_buf;
    }
    else
#endif
    {
        ssl->out_hdr = ssl->out_buf + 8;
 80aa998:	3308      	adds	r3, #8
 80aa99a:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }
    ssl_update_out_pointers( ssl, ssl->transform_out );
 80aa99e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80aa9a0:	f7ff fc1e 	bl	80aa1e0 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>
 80aa9a4:	4620      	mov	r0, r4
 80aa9a6:	bd38      	pop	{r3, r4, r5, pc}

    if( ssl->f_send == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80aa9a8:	4801      	ldr	r0, [pc, #4]	; (80aa9b0 <mbedtls_ssl_flush_output+0x54>)
 80aa9aa:	bd38      	pop	{r3, r4, r5, pc}
        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1,
                ( "f_send returned %d bytes but only %lu bytes were sent",
                ret, (unsigned long)ssl->out_left ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80aa9ac:	4801      	ldr	r0, [pc, #4]	; (80aa9b4 <mbedtls_ssl_flush_output+0x58>)
    ssl_update_out_pointers( ssl, ssl->transform_out );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );

    return( 0 );
}
 80aa9ae:	bd38      	pop	{r3, r4, r5, pc}
 80aa9b0:	ffff8f00 	.word	0xffff8f00
 80aa9b4:	ffff9400 	.word	0xffff9400

080aa9b8 <mbedtls_ssl_write_record>:
 *  - ssl->out_msgtype: type of the message (AppData, Handshake, Alert, CCS)
 *  - ssl->out_msglen: length of the record content (excl headers)
 *  - ssl->out_msg: record content
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl, uint8_t force_flush )
{
 80aa9b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80aa9bc:	4604      	mov	r4, r0

        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, ssl->out_hdr + 1 );

        memcpy( ssl->out_ctr, ssl->cur_out_ctr, 8 );
 80aa9be:	4626      	mov	r6, r4
    if( !done )
    {
        unsigned i;
        size_t protected_record_size;

        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
 80aa9c0:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 *  - ssl->out_msgtype: type of the message (AppData, Handshake, Alert, CCS)
 *  - ssl->out_msglen: length of the record content (excl headers)
 *  - ssl->out_msg: record content
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl, uint8_t force_flush )
{
 80aa9c4:	460f      	mov	r7, r1
    if( !done )
    {
        unsigned i;
        size_t protected_record_size;

        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
 80aa9c6:	f8d0 109c 	ldr.w	r1, [r0, #156]	; 0x9c
 *  - ssl->out_msg: record content
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl, uint8_t force_flush )
{
    int ret, done = 0;
    size_t len = ssl->out_msglen;
 80aa9ca:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    if( !done )
    {
        unsigned i;
        size_t protected_record_size;

        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
 80aa9ce:	7011      	strb	r1, [r2, #0]
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 80aa9d0:	68c1      	ldr	r1, [r0, #12]
                           ssl->conf->transport, ssl->out_hdr + 1 );
 80aa9d2:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 80aa9d6:	6880      	ldr	r0, [r0, #8]
        ver[1] = (unsigned char) minor;
 80aa9d8:	7091      	strb	r1, [r2, #2]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 80aa9da:	7050      	strb	r0, [r2, #1]

        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, ssl->out_hdr + 1 );

        memcpy( ssl->out_ctr, ssl->cur_out_ctr, 8 );
 80aa9dc:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80aa9e0:	f856 2fa8 	ldr.w	r2, [r6, #168]!
 *  - ssl->out_msgtype: type of the message (AppData, Handshake, Alert, CCS)
 *  - ssl->out_msglen: length of the record content (excl headers)
 *  - ssl->out_msg: record content
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl, uint8_t force_flush )
{
 80aa9e4:	b091      	sub	sp, #68	; 0x44

        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, ssl->out_hdr + 1 );

        memcpy( ssl->out_ctr, ssl->cur_out_ctr, 8 );
 80aa9e6:	600a      	str	r2, [r1, #0]
 80aa9e8:	6872      	ldr	r2, [r6, #4]
 80aa9ea:	604a      	str	r2, [r1, #4]
        ssl->out_len[0] = (unsigned char)( len >> 8 );
 80aa9ec:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80aa9f0:	0a19      	lsrs	r1, r3, #8
 80aa9f2:	7011      	strb	r1, [r2, #0]
        ssl->out_len[1] = (unsigned char)( len      );
 80aa9f4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80aa9f8:	7053      	strb	r3, [r2, #1]

        if( ssl->transform_out != NULL )
 80aa9fa:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80aa9fc:	2d00      	cmp	r5, #0
 80aa9fe:	f000 8095 	beq.w	80aab2c <mbedtls_ssl_write_record+0x174>
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
 80aaa02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80aaa04:	2b00      	cmp	r3, #0
 80aaa06:	f000 80ac 	beq.w	80aab62 <mbedtls_ssl_write_record+0x1aa>
 80aaa0a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode(
    const mbedtls_cipher_context_t *ctx )
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, MBEDTLS_MODE_NONE );
    if( ctx->cipher_info == NULL )
 80aaa0c:	2b00      	cmp	r3, #0
 80aaa0e:	f000 80a8 	beq.w	80aab62 <mbedtls_ssl_write_record+0x1aa>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
 80aaa12:	785b      	ldrb	r3, [r3, #1]
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || \
    defined(MBEDTLS_CCM_C) || \
    defined(MBEDTLS_CHACHAPOLY_C)
    if( mode == MBEDTLS_MODE_GCM ||
 80aaa14:	2b06      	cmp	r3, #6
 80aaa16:	d004      	beq.n	80aaa22 <mbedtls_ssl_write_record+0x6a>
 80aaa18:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80aaa1c:	2b08      	cmp	r3, #8
 80aaa1e:	f040 80a0 	bne.w	80aab62 <mbedtls_ssl_write_record+0x1aa>
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_out;
        unsigned char taglen = transform->ciphersuite_info->flags &
 80aaa22:	682b      	ldr	r3, [r5, #0]
        size_t explicit_ivlen = transform->ivlen - transform->fixed_ivlen;

        /*
         * Prepare additional authenticated data
         */
        memcpy( add_data, ssl->out_ctr, 8 );
 80aaa24:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_out;
        unsigned char taglen = transform->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 80aaa28:	7f1b      	ldrb	r3, [r3, #28]
        size_t explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
 80aaa2a:	68ea      	ldr	r2, [r5, #12]
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_out;
        unsigned char taglen = transform->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 80aaa2c:	f013 0f02 	tst.w	r3, #2
        size_t explicit_ivlen = transform->ivlen - transform->fixed_ivlen;

        /*
         * Prepare additional authenticated data
         */
        memcpy( add_data, ssl->out_ctr, 8 );
 80aaa30:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_out;
        unsigned char taglen = transform->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
        size_t explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
 80aaa34:	f8d5 c010 	ldr.w	ip, [r5, #16]

        /*
         * Prepare additional authenticated data
         */
        memcpy( add_data, ssl->out_ctr, 8 );
 80aaa38:	6818      	ldr	r0, [r3, #0]
 80aaa3a:	6859      	ldr	r1, [r3, #4]
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_out;
        unsigned char taglen = transform->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 80aaa3c:	bf18      	it	ne
 80aaa3e:	f04f 0808 	movne.w	r8, #8
        size_t explicit_ivlen = transform->ivlen - transform->fixed_ivlen;

        /*
         * Prepare additional authenticated data
         */
        memcpy( add_data, ssl->out_ctr, 8 );
 80aaa42:	e8ae 0003 	stmia.w	lr!, {r0, r1}
        add_data[8]  = ssl->out_msgtype;
 80aaa46:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 80aaa4a:	68a0      	ldr	r0, [r4, #8]

        /*
         * Prepare additional authenticated data
         */
        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
 80aaa4c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 80aaa50:	68e1      	ldr	r1, [r4, #12]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 80aaa52:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
        ver[1] = (unsigned char) minor;
 80aaa56:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
         */
        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 80aaa5a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_out;
        unsigned char taglen = transform->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 80aaa5e:	bf08      	it	eq
 80aaa60:	f04f 0810 	moveq.w	r8, #16
         */
        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 80aaa64:	0a08      	lsrs	r0, r1, #8
 80aaa66:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
        add_data[12] = ssl->out_msglen & 0xFF;
 80aaa6a:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data for AEAD", add_data, 13 );

        /*
         * Generate IV
         */
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
 80aaa6e:	68e9      	ldr	r1, [r5, #12]
 80aaa70:	290c      	cmp	r1, #12
 80aaa72:	d176      	bne.n	80aab62 <mbedtls_ssl_write_record+0x1aa>
 80aaa74:	f1bc 0f04 	cmp.w	ip, #4
 80aaa78:	d10e      	bne.n	80aaa98 <mbedtls_ssl_write_record+0xe0>
        {
            /* GCM and CCM: fixed || explicit (=seqnum) */
            memcpy( iv, transform->iv_enc, transform->fixed_ivlen );
 80aaa7a:	69a8      	ldr	r0, [r5, #24]
            memcpy( iv + transform->fixed_ivlen, ssl->out_ctr, 8 );
 80aaa7c:	6859      	ldr	r1, [r3, #4]
         * Generate IV
         */
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
        {
            /* GCM and CCM: fixed || explicit (=seqnum) */
            memcpy( iv, transform->iv_enc, transform->fixed_ivlen );
 80aaa7e:	9009      	str	r0, [sp, #36]	; 0x24
            memcpy( iv + transform->fixed_ivlen, ssl->out_ctr, 8 );
 80aaa80:	6818      	ldr	r0, [r3, #0]
 80aaa82:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80aaa86:	e8ae 0003 	stmia.w	lr!, {r0, r1}
            memcpy( ssl->out_iv, ssl->out_ctr, 8 );
 80aaa8a:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 80aaa8e:	6819      	ldr	r1, [r3, #0]
 80aaa90:	6001      	str	r1, [r0, #0]
 80aaa92:	6859      	ldr	r1, [r3, #4]
 80aaa94:	6041      	str	r1, [r0, #4]
 80aaa96:	e01c      	b.n	80aaad2 <mbedtls_ssl_write_record+0x11a>

        }
        else if( transform->ivlen == 12 && transform->fixed_ivlen == 12 )
 80aaa98:	f1bc 0f0c 	cmp.w	ip, #12
 80aaa9c:	d161      	bne.n	80aab62 <mbedtls_ssl_write_record+0x1aa>
        {
            /* ChachaPoly: fixed XOR sequence number */
            unsigned char i;

            memcpy( iv, transform->iv_enc, transform->fixed_ivlen );
 80aaa9e:	46a9      	mov	r9, r5
 80aaaa0:	f859 0f18 	ldr.w	r0, [r9, #24]!
 80aaaa4:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 80aaaa8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80aaaac:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80aaab0:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80aaab4:	1e59      	subs	r1, r3, #1
 80aaab6:	f8ce 0000 	str.w	r0, [lr]
 80aaaba:	3307      	adds	r3, #7
 80aaabc:	a80a      	add	r0, sp, #40	; 0x28

            for( i = 0; i < 8; i++ )
                iv[i+4] ^= ssl->out_ctr[i];
 80aaabe:	f811 ef01 	ldrb.w	lr, [r1, #1]!
 80aaac2:	f890 9000 	ldrb.w	r9, [r0]
            /* ChachaPoly: fixed XOR sequence number */
            unsigned char i;

            memcpy( iv, transform->iv_enc, transform->fixed_ivlen );

            for( i = 0; i < 8; i++ )
 80aaac6:	428b      	cmp	r3, r1
                iv[i+4] ^= ssl->out_ctr[i];
 80aaac8:	ea89 0e0e 	eor.w	lr, r9, lr
 80aaacc:	f800 eb01 	strb.w	lr, [r0], #1
            /* ChachaPoly: fixed XOR sequence number */
            unsigned char i;

            memcpy( iv, transform->iv_enc, transform->fixed_ivlen );

            for( i = 0; i < 8; i++ )
 80aaad0:	d1f5      	bne.n	80aaabe <mbedtls_ssl_write_record+0x106>

        /*
         * Fix message length with added IV
         */
        enc_msg = ssl->out_msg;
        enc_msglen = ssl->out_msglen;
 80aaad2:	f8d4 90a0 	ldr.w	r9, [r4, #160]	; 0xa0
                                  ssl->out_iv, explicit_ivlen );

        /*
         * Fix message length with added IV
         */
        enc_msg = ssl->out_msg;
 80aaad6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
        enc_msglen = ssl->out_msglen;
        ssl->out_msglen += explicit_ivlen;
 80aaada:	444a      	add	r2, r9
 80aaadc:	ebcc 0202 	rsb	r2, ip, r2
 80aaae0:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
                                    ssl->out_msglen ) );

        /*
         * Encrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_encrypt( &transform->cipher_ctx_enc,
 80aaae4:	eb03 0209 	add.w	r2, r3, r9
 80aaae8:	9205      	str	r2, [sp, #20]
 80aaaea:	9303      	str	r3, [sp, #12]
 80aaaec:	aa08      	add	r2, sp, #32
 80aaaee:	9301      	str	r3, [sp, #4]
 80aaaf0:	230d      	movs	r3, #13
 80aaaf2:	9300      	str	r3, [sp, #0]
 80aaaf4:	f8cd 8018 	str.w	r8, [sp, #24]
 80aaaf8:	9204      	str	r2, [sp, #16]
 80aaafa:	f8cd 9008 	str.w	r9, [sp, #8]
 80aaafe:	ab0c      	add	r3, sp, #48	; 0x30
 80aab00:	68ea      	ldr	r2, [r5, #12]
 80aab02:	a909      	add	r1, sp, #36	; 0x24
 80aab04:	f105 0050 	add.w	r0, r5, #80	; 0x50
 80aab08:	f7f6 fd0c 	bl	80a1524 <mbedtls_cipher_auth_encrypt>
 80aab0c:	bb90      	cbnz	r0, 80aab74 <mbedtls_ssl_write_record+0x1bc>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_encrypt", ret );
            return( ret );
        }

        if( olen != enc_msglen )
 80aab0e:	9b08      	ldr	r3, [sp, #32]
 80aab10:	4599      	cmp	r9, r3
 80aab12:	d126      	bne.n	80aab62 <mbedtls_ssl_write_record+0x1aa>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
 80aab14:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
                return( ret );
            }

            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
 80aab18:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
 80aab1c:	4443      	add	r3, r8
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
                return( ret );
            }

            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
 80aab1e:	0a19      	lsrs	r1, r3, #8
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
 80aab20:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
                return( ret );
            }

            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
 80aab24:	7011      	strb	r1, [r2, #0]
            ssl->out_len[1] = (unsigned char)( len      );
 80aab26:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80aab2a:	7053      	strb	r3, [r2, #1]
                                    ssl->out_hdr[2], len ) );

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
                               ssl->out_hdr, protected_record_size );

        ssl->out_left += protected_record_size;
 80aab2c:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
            ssl->out_len[1] = (unsigned char)( len      );
        }

        protected_record_size = len + mbedtls_ssl_hdr_len( ssl );
 80aab30:	3305      	adds	r3, #5
                                    ssl->out_hdr[2], len ) );

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
                               ssl->out_hdr, protected_record_size );

        ssl->out_left += protected_record_size;
 80aab32:	441a      	add	r2, r3
 80aab34:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
        ssl->out_hdr  += protected_record_size;
 80aab38:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        ssl_update_out_pointers( ssl, ssl->transform_out );
 80aab3c:	6ba1      	ldr	r1, [r4, #56]	; 0x38

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
                               ssl->out_hdr, protected_record_size );

        ssl->out_left += protected_record_size;
        ssl->out_hdr  += protected_record_size;
 80aab3e:	4413      	add	r3, r2
 80aab40:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        ssl_update_out_pointers( ssl, ssl->transform_out );
 80aab44:	4620      	mov	r0, r4
 80aab46:	f7ff fb4b 	bl	80aa1e0 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>
 80aab4a:	f104 02b0 	add.w	r2, r4, #176	; 0xb0

        for( i = 8; i > ssl_ep_len( ssl ); i-- )
            if( ++ssl->cur_out_ctr[i - 1] != 0 )
 80aab4e:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 80aab52:	3301      	adds	r3, #1
 80aab54:	b2db      	uxtb	r3, r3
 80aab56:	7013      	strb	r3, [r2, #0]
 80aab58:	b92b      	cbnz	r3, 80aab66 <mbedtls_ssl_write_record+0x1ae>

        ssl->out_left += protected_record_size;
        ssl->out_hdr  += protected_record_size;
        ssl_update_out_pointers( ssl, ssl->transform_out );

        for( i = 8; i > ssl_ep_len( ssl ); i-- )
 80aab5a:	4296      	cmp	r6, r2
 80aab5c:	d1f7      	bne.n	80aab4e <mbedtls_ssl_write_record+0x196>

        /* The loop goes to its end iff the counter is wrapping */
        if( i == ssl_ep_len( ssl ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 80aab5e:	4807      	ldr	r0, [pc, #28]	; (80aab7c <mbedtls_ssl_write_record+0x1c4>)
 80aab60:	e008      	b.n	80aab74 <mbedtls_ssl_write_record+0x1bc>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80aab62:	4807      	ldr	r0, [pc, #28]	; (80aab80 <mbedtls_ssl_write_record+0x1c8>)
 80aab64:	e006      	b.n	80aab74 <mbedtls_ssl_write_record+0x1bc>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "Still %u bytes available in current datagram", (unsigned) remaining ) );
        }
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    if( ( flush == SSL_FORCE_FLUSH ) &&
 80aab66:	2f01      	cmp	r7, #1
 80aab68:	d103      	bne.n	80aab72 <mbedtls_ssl_write_record+0x1ba>
        ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 80aab6a:	4620      	mov	r0, r4
 80aab6c:	f7ff fef6 	bl	80aa95c <mbedtls_ssl_flush_output>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "Still %u bytes available in current datagram", (unsigned) remaining ) );
        }
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    if( ( flush == SSL_FORCE_FLUSH ) &&
 80aab70:	b900      	cbnz	r0, 80aab74 <mbedtls_ssl_write_record+0x1bc>
        return( ret );
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write record" ) );

    return( 0 );
 80aab72:	2000      	movs	r0, #0
}
 80aab74:	b011      	add	sp, #68	; 0x44
 80aab76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80aab7a:	bf00      	nop
 80aab7c:	ffff9480 	.word	0xffff9480
 80aab80:	ffff9400 	.word	0xffff9400

080aab84 <mbedtls_ssl_write_handshake_msg>:
 *   - ssl->out_msglen: the length of the record contents
 *      (including handshake headers but excluding record headers)
 *   - ssl->out_msg: the record contents (handshake headers + content)
 */
int mbedtls_ssl_write_handshake_msg( mbedtls_ssl_context *ssl )
{
 80aab84:	b538      	push	{r3, r4, r5, lr}
 80aab86:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write handshake message" ) );

    /*
     * Sanity checks
     */
    if( ssl->out_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE          &&
 80aab88:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 */
int mbedtls_ssl_write_handshake_msg( mbedtls_ssl_context *ssl )
{
    int ret;
    const size_t hs_len = ssl->out_msglen - 4;
    const unsigned char hs_type = ssl->out_msg[0];
 80aab8c:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write handshake message" ) );

    /*
     * Sanity checks
     */
    if( ssl->out_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE          &&
 80aab90:	2a16      	cmp	r2, #22
 *   - ssl->out_msg: the record contents (handshake headers + content)
 */
int mbedtls_ssl_write_handshake_msg( mbedtls_ssl_context *ssl )
{
    int ret;
    const size_t hs_len = ssl->out_msglen - 4;
 80aab92:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    const unsigned char hs_type = ssl->out_msg[0];
 80aab96:	7808      	ldrb	r0, [r1, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write handshake message" ) );

    /*
     * Sanity checks
     */
    if( ssl->out_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE          &&
 80aab98:	d002      	beq.n	80aaba0 <mbedtls_ssl_write_handshake_msg+0x1c>
 80aab9a:	2a14      	cmp	r2, #20
 80aab9c:	d001      	beq.n	80aaba2 <mbedtls_ssl_write_handshake_msg+0x1e>
 80aab9e:	e024      	b.n	80aabea <mbedtls_ssl_write_handshake_msg+0x66>
    }

    /* Whenever we send anything different from a
     * HelloRequest we should be in a handshake - double check. */
    if( ! ( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
            hs_type          == MBEDTLS_SSL_HS_HELLO_REQUEST ) &&
 80aaba0:	b300      	cbz	r0, 80aabe4 <mbedtls_ssl_write_handshake_msg+0x60>
 80aaba2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80aaba4:	b30d      	cbz	r5, 80aabea <mbedtls_ssl_write_handshake_msg+0x66>
     * writing functions must obey the bounds of the
     * outgoing record buffer, but better be safe.
     *
     * Note: We deliberately do not check for the MTU or MFL here.
     */
    if( ssl->out_msglen > MBEDTLS_SSL_OUT_CONTENT_LEN )
 80aaba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80aabaa:	d81e      	bhi.n	80aabea <mbedtls_ssl_write_handshake_msg+0x66>
    }

    /*
     * Fill handshake headers
     */
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80aabac:	2a16      	cmp	r2, #22
 80aabae:	d113      	bne.n	80aabd8 <mbedtls_ssl_write_handshake_msg+0x54>
 *   - ssl->out_msg: the record contents (handshake headers + content)
 */
int mbedtls_ssl_write_handshake_msg( mbedtls_ssl_context *ssl )
{
    int ret;
    const size_t hs_len = ssl->out_msglen - 4;
 80aabb0:	3b04      	subs	r3, #4
    /*
     * Fill handshake headers
     */
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
    {
        ssl->out_msg[1] = (unsigned char)( hs_len >> 16 );
 80aabb2:	0c1a      	lsrs	r2, r3, #16
 80aabb4:	704a      	strb	r2, [r1, #1]
        ssl->out_msg[2] = (unsigned char)( hs_len >>  8 );
 80aabb6:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80aabba:	0a19      	lsrs	r1, r3, #8
 80aabbc:	7091      	strb	r1, [r2, #2]
        ssl->out_msg[3] = (unsigned char)( hs_len       );
 80aabbe:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80aabc2:	70d3      	strb	r3, [r2, #3]
            memcpy( ssl->out_msg + 9, ssl->out_msg + 1, 3 );
        }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

        /* Update running hashes of handshake messages seen */
        if( hs_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
 80aabc4:	b140      	cbz	r0, 80aabd8 <mbedtls_ssl_write_handshake_msg+0x54>
            ssl->handshake->update_checksum( ssl, ssl->out_msg, ssl->out_msglen );
 80aabc6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80aabc8:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 80aabcc:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 80aabd0:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80aabd4:	4620      	mov	r0, r4
 80aabd6:	4798      	blx	r3
        }
    }
    else
#endif
    {
        if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
 80aabd8:	4620      	mov	r0, r4
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write handshake message" ) );

    return( 0 );
}
 80aabda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
    }
    else
#endif
    {
        if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
 80aabde:	2101      	movs	r1, #1
 80aabe0:	f7ff beea 	b.w	80aa9b8 <mbedtls_ssl_write_record>
     * writing functions must obey the bounds of the
     * outgoing record buffer, but better be safe.
     *
     * Note: We deliberately do not check for the MTU or MFL here.
     */
    if( ssl->out_msglen > MBEDTLS_SSL_OUT_CONTENT_LEN )
 80aabe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80aabe8:	d9e2      	bls.n	80aabb0 <mbedtls_ssl_write_handshake_msg+0x2c>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write handshake message" ) );

    return( 0 );
}
 80aabea:	4801      	ldr	r0, [pc, #4]	; (80aabf0 <mbedtls_ssl_write_handshake_msg+0x6c>)
 80aabec:	bd38      	pop	{r3, r4, r5, pc}
 80aabee:	bf00      	nop
 80aabf0:	ffff9400 	.word	0xffff9400

080aabf4 <mbedtls_ssl_prepare_handshake_record>:
            ( ssl->in_msg[2] << 8  ) |
              ssl->in_msg[3] );
}

int mbedtls_ssl_prepare_handshake_record( mbedtls_ssl_context *ssl )
{
 80aabf4:	b510      	push	{r4, lr}
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 80aabf6:	6f04      	ldr	r4, [r0, #112]	; 0x70
 80aabf8:	2c03      	cmp	r4, #3
 80aabfa:	d90f      	bls.n	80aac1c <mbedtls_ssl_prepare_handshake_record+0x28>
 80aabfc:	6e41      	ldr	r1, [r0, #100]	; 0x64
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + ssl_get_hs_total_len( ssl );
 80aabfe:	788a      	ldrb	r2, [r1, #2]
 80aac00:	784b      	ldrb	r3, [r1, #1]
 80aac02:	0212      	lsls	r2, r2, #8
 80aac04:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80aac08:	78ca      	ldrb	r2, [r1, #3]
 80aac0a:	4313      	orrs	r3, r2
 80aac0c:	3304      	adds	r3, #4
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 80aac0e:	4a04      	ldr	r2, [pc, #16]	; (80aac20 <mbedtls_ssl_prepare_handshake_record+0x2c>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + ssl_get_hs_total_len( ssl );
 80aac10:	6783      	str	r3, [r0, #120]	; 0x78
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 80aac12:	429c      	cmp	r4, r3
 80aac14:	bf34      	ite	cc
 80aac16:	4610      	movcc	r0, r2
 80aac18:	2000      	movcs	r0, #0
 80aac1a:	bd10      	pop	{r4, pc}
{
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 80aac1c:	4801      	ldr	r0, [pc, #4]	; (80aac24 <mbedtls_ssl_prepare_handshake_record+0x30>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
}
 80aac1e:	bd10      	pop	{r4, pc}
 80aac20:	ffff8f80 	.word	0xffff8f80
 80aac24:	ffff8e00 	.word	0xffff8e00

080aac28 <mbedtls_ssl_update_handshake_status>:

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_handshake_params * const hs = ssl->handshake;

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
 80aac28:	6842      	ldr	r2, [r0, #4]

    return( 0 );
}

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{
 80aac2a:	b410      	push	{r4}
    mbedtls_ssl_handshake_params * const hs = ssl->handshake;

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
 80aac2c:	2a10      	cmp	r2, #16
 80aac2e:	d008      	beq.n	80aac42 <mbedtls_ssl_update_handshake_status+0x1a>
    return( 0 );
}

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_handshake_params * const hs = ssl->handshake;
 80aac30:	6b02      	ldr	r2, [r0, #48]	; 0x30

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
 80aac32:	b132      	cbz	r2, 80aac42 <mbedtls_ssl_update_handshake_status+0x1a>
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 80aac34:	f8d2 42a0 	ldr.w	r4, [r2, #672]	; 0x2a0
 80aac38:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80aac3a:	4623      	mov	r3, r4
 80aac3c:	6f82      	ldr	r2, [r0, #120]	; 0x78

        /* Create a fresh last entry */
        memset( hs_buf, 0, sizeof( mbedtls_ssl_hs_buffer ) );
    }
#endif
}
 80aac3e:	bc10      	pop	{r4}
{
    mbedtls_ssl_handshake_params * const hs = ssl->handshake;

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 80aac40:	4718      	bx	r3

        /* Create a fresh last entry */
        memset( hs_buf, 0, sizeof( mbedtls_ssl_hs_buffer ) );
    }
#endif
}
 80aac42:	bc10      	pop	{r4}
 80aac44:	4770      	bx	lr
	...

080aac48 <mbedtls_ssl_handle_message_type>:

    return( 0 );
}

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
 80aac48:	b510      	push	{r4, lr}
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80aac4a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c

    return( 0 );
}

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
 80aac4c:	4604      	mov	r4, r0
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80aac4e:	2b16      	cmp	r3, #22
 80aac50:	d003      	beq.n	80aac5a <mbedtls_ssl_handle_message_type+0x12>
        {
            return( ret );
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
 80aac52:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80aac54:	2b14      	cmp	r3, #20
 80aac56:	d10d      	bne.n	80aac74 <mbedtls_ssl_handle_message_type+0x2c>
 80aac58:	e004      	b.n	80aac64 <mbedtls_ssl_handle_message_type+0x1c>
    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
    {
        if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )
 80aac5a:	f7ff ffcb 	bl	80aabf4 <mbedtls_ssl_prepare_handshake_record>
 80aac5e:	2800      	cmp	r0, #0
 80aac60:	d0f7      	beq.n	80aac52 <mbedtls_ssl_handle_message_type+0xa>
 80aac62:	bd10      	pop	{r4, pc}
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
    {
        if( ssl->in_msglen != 1 )
 80aac64:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80aac66:	2b01      	cmp	r3, #1
 80aac68:	d118      	bne.n	80aac9c <mbedtls_ssl_handle_message_type+0x54>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid CCS message, len: %d",
                           ssl->in_msglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }

        if( ssl->in_msg[0] != 1 )
 80aac6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    {
        if( ssl->in_msglen != 1 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid CCS message, len: %d",
                           ssl->in_msglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 80aac6c:	480f      	ldr	r0, [pc, #60]	; (80aacac <mbedtls_ssl_handle_message_type+0x64>)
        }

        if( ssl->in_msg[0] != 1 )
 80aac6e:	781b      	ldrb	r3, [r3, #0]
    {
        if( ssl->in_msglen != 1 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid CCS message, len: %d",
                           ssl->in_msglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 80aac70:	2b01      	cmp	r3, #1
 80aac72:	e00e      	b.n	80aac92 <mbedtls_ssl_handle_message_type+0x4a>
            return( MBEDTLS_ERR_SSL_EARLY_MESSAGE );
        }
#endif
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 80aac74:	2b15      	cmp	r3, #21
 80aac76:	d10f      	bne.n	80aac98 <mbedtls_ssl_handle_message_type+0x50>
    {
        if( ssl->in_msglen != 2 )
 80aac78:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80aac7a:	2b02      	cmp	r3, #2
 80aac7c:	d10e      	bne.n	80aac9c <mbedtls_ssl_handle_message_type+0x54>
                       ssl->in_msg[0], ssl->in_msg[1] ) );

        /*
         * Ignore non-fatal alerts, except close_notify and no_renegotiation
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
 80aac7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80aac80:	781a      	ldrb	r2, [r3, #0]
 80aac82:	2a02      	cmp	r2, #2
 80aac84:	d00c      	beq.n	80aaca0 <mbedtls_ssl_handle_message_type+0x58>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 80aac86:	2a01      	cmp	r2, #1
 80aac88:	d10c      	bne.n	80aaca4 <mbedtls_ssl_handle_message_type+0x5c>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
 80aac8a:	785b      	ldrb	r3, [r3, #1]
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 80aac8c:	b163      	cbz	r3, 80aaca8 <mbedtls_ssl_handle_message_type+0x60>
    {
        ssl_handshake_wrapup_free_hs_transform( ssl );
    }
#endif

    return( 0 );
 80aac8e:	4808      	ldr	r0, [pc, #32]	; (80aacb0 <mbedtls_ssl_handle_message_type+0x68>)
 80aac90:	2b64      	cmp	r3, #100	; 0x64
 80aac92:	bf08      	it	eq
 80aac94:	2000      	moveq	r0, #0
 80aac96:	bd10      	pop	{r4, pc}
 80aac98:	2000      	movs	r0, #0
 80aac9a:	bd10      	pop	{r4, pc}
    {
        if( ssl->in_msglen != 1 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid CCS message, len: %d",
                           ssl->in_msglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 80aac9c:	4803      	ldr	r0, [pc, #12]	; (80aacac <mbedtls_ssl_handle_message_type+0x64>)
 80aac9e:	bd10      	pop	{r4, pc}
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
 80aaca0:	4804      	ldr	r0, [pc, #16]	; (80aacb4 <mbedtls_ssl_handle_message_type+0x6c>)
 80aaca2:	bd10      	pop	{r4, pc}
            return( 0 );
        }
#endif /* MBEDTLS_SSL_PROTO_SSL3 && MBEDTLS_SSL_SRV_C */

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
 80aaca4:	4802      	ldr	r0, [pc, #8]	; (80aacb0 <mbedtls_ssl_handle_message_type+0x68>)
 80aaca6:	bd10      	pop	{r4, pc}

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a close notify message" ) );
            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
 80aaca8:	4803      	ldr	r0, [pc, #12]	; (80aacb8 <mbedtls_ssl_handle_message_type+0x70>)
        ssl_handshake_wrapup_free_hs_transform( ssl );
    }
#endif

    return( 0 );
}
 80aacaa:	bd10      	pop	{r4, pc}
 80aacac:	ffff8e00 	.word	0xffff8e00
 80aacb0:	ffff9980 	.word	0xffff9980
 80aacb4:	ffff8880 	.word	0xffff8880
 80aacb8:	ffff8780 	.word	0xffff8780

080aacbc <mbedtls_ssl_send_alert_message>:
}

int mbedtls_ssl_send_alert_message( mbedtls_ssl_context *ssl,
                            unsigned char level,
                            unsigned char message )
{
 80aacbc:	b410      	push	{r4}
    int ret;

    if( ssl == NULL || ssl->conf == NULL )
 80aacbe:	b188      	cbz	r0, 80aace4 <mbedtls_ssl_send_alert_message+0x28>
 80aacc0:	6804      	ldr	r4, [r0, #0]
 80aacc2:	b17c      	cbz	r4, 80aace4 <mbedtls_ssl_send_alert_message+0x28>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> send alert message" ) );
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "send alert level=%u message=%u", level, message ));

    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
 80aacc4:	2415      	movs	r4, #21
 80aacc6:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
    ssl->out_msglen = 2;
 80aacca:	2402      	movs	r4, #2
 80aaccc:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
    ssl->out_msg[0] = level;
 80aacd0:	f8d0 4098 	ldr.w	r4, [r0, #152]	; 0x98
 80aacd4:	7021      	strb	r1, [r4, #0]
    ssl->out_msg[1] = message;
 80aacd6:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98

    if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
 80aacda:	2101      	movs	r1, #1
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "send alert level=%u message=%u", level, message ));

    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
    ssl->out_msglen = 2;
    ssl->out_msg[0] = level;
    ssl->out_msg[1] = message;
 80aacdc:	705a      	strb	r2, [r3, #1]
        return( ret );
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );

    return( 0 );
}
 80aacde:	bc10      	pop	{r4}
    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
    ssl->out_msglen = 2;
    ssl->out_msg[0] = level;
    ssl->out_msg[1] = message;

    if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
 80aace0:	f7ff be6a 	b.w	80aa9b8 <mbedtls_ssl_write_record>
        return( ret );
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );

    return( 0 );
}
 80aace4:	4801      	ldr	r0, [pc, #4]	; (80aacec <mbedtls_ssl_send_alert_message+0x30>)
 80aace6:	bc10      	pop	{r4}
 80aace8:	4770      	bx	lr
 80aacea:	bf00      	nop
 80aacec:	ffff8f00 	.word	0xffff8f00

080aacf0 <mbedtls_ssl_read_record>:
static int ssl_get_next_record( mbedtls_ssl_context *ssl );
static int ssl_record_is_in_progress( mbedtls_ssl_context *ssl );

int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl,
                             unsigned update_hs_digest )
{
 80aacf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );

    if( ssl->keep_current_message == 0 )
 80aacf4:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
static int ssl_get_next_record( mbedtls_ssl_context *ssl );
static int ssl_record_is_in_progress( mbedtls_ssl_context *ssl );

int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl,
                             unsigned update_hs_digest )
{
 80aacf8:	b090      	sub	sp, #64	; 0x40
 80aacfa:	4604      	mov	r4, r0
 80aacfc:	460e      	mov	r6, r1
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );

    if( ssl->keep_current_message == 0 )
 80aacfe:	b9a5      	cbnz	r5, 80aad2a <mbedtls_ssl_read_record+0x3a>
        else
        {
            ssl->in_msglen = 0;
        }

        ssl->in_hslen   = 0;
 80aad00:	462f      	mov	r7, r5
     *     and consumes through mbedtls_ssl_read only.
     *
     */

    /* Case (1): Handshake messages */
    if( ssl->in_hslen != 0 )
 80aad02:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80aad04:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80aad06:	b169      	cbz	r1, 80aad24 <mbedtls_ssl_read_record+0x34>
    {
        /* Hard assertion to be sure that no application data
         * is in flight, as corrupting ssl->in_msglen during
         * ssl->in_offt != NULL is fatal. */
        if( ssl->in_offt != NULL )
 80aad08:	b99b      	cbnz	r3, 80aad32 <mbedtls_ssl_read_record+0x42>
         *     should not be treated as a silently corrected assertion.
         *     Additionally, ssl->in_hslen might be arbitrarily out of
         *     bounds after handling a DTLS message with an unexpected
         *     sequence number, see mbedtls_ssl_prepare_handshake_record.
         */
        if( ssl->in_hslen < ssl->in_msglen )
 80aad0a:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80aad0c:	4291      	cmp	r1, r2
 80aad0e:	d206      	bcs.n	80aad1e <mbedtls_ssl_read_record+0x2e>
        {
            ssl->in_msglen -= ssl->in_hslen;
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
 80aad10:	6e60      	ldr	r0, [r4, #100]	; 0x64
         *     bounds after handling a DTLS message with an unexpected
         *     sequence number, see mbedtls_ssl_prepare_handshake_record.
         */
        if( ssl->in_hslen < ssl->in_msglen )
        {
            ssl->in_msglen -= ssl->in_hslen;
 80aad12:	1a52      	subs	r2, r2, r1
 80aad14:	6722      	str	r2, [r4, #112]	; 0x70
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
                     ssl->in_msglen );
 80aad16:	4401      	add	r1, r0
 80aad18:	f007 fd78 	bl	80b280c <memmove>
 80aad1c:	e000      	b.n	80aad20 <mbedtls_ssl_read_record+0x30>
            MBEDTLS_SSL_DEBUG_BUF( 4, "remaining content in record",
                                   ssl->in_msg, ssl->in_msglen );
        }
        else
        {
            ssl->in_msglen = 0;
 80aad1e:	6723      	str	r3, [r4, #112]	; 0x70
        }

        ssl->in_hslen   = 0;
 80aad20:	67a7      	str	r7, [r4, #120]	; 0x78
 80aad22:	e008      	b.n	80aad36 <mbedtls_ssl_read_record+0x46>
    }
    /* Case (4): Application data */
    else if( ssl->in_offt != NULL )
 80aad24:	b93b      	cbnz	r3, 80aad36 <mbedtls_ssl_read_record+0x46>
        return( 0 );
    }
    /* Everything else (CCS & Alerts) */
    else
    {
        ssl->in_msglen = 0;
 80aad26:	6723      	str	r3, [r4, #112]	; 0x70
 80aad28:	e005      	b.n	80aad36 <mbedtls_ssl_read_record+0x46>
        }
    }
    else
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "reuse previously read message" ) );
        ssl->keep_current_message = 0;
 80aad2a:	2500      	movs	r5, #0
 80aad2c:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
 80aad30:	e127      	b.n	80aaf82 <mbedtls_ssl_read_record+0x292>
         * is in flight, as corrupting ssl->in_msglen during
         * ssl->in_offt != NULL is fatal. */
        if( ssl->in_offt != NULL )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80aad32:	4d96      	ldr	r5, [pc, #600]	; (80aaf8c <mbedtls_ssl_read_record+0x29c>)
 80aad34:	e125      	b.n	80aaf82 <mbedtls_ssl_read_record+0x292>
    return( 0 );
}

static int ssl_record_is_in_progress( mbedtls_ssl_context *ssl )
{
    if( ssl->in_msglen > 0 )
 80aad36:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80aad38:	2b00      	cmp	r3, #0
 80aad3a:	f040 8105 	bne.w	80aaf48 <mbedtls_ssl_read_record+0x258>
    ret = ssl_load_buffered_record( ssl );
    if( ret != 0 )
        return( ret );
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
 80aad3e:	2105      	movs	r1, #5
 80aad40:	4620      	mov	r0, r4
 80aad42:	f7ff fdc5 	bl	80aa8d0 <mbedtls_ssl_fetch_input>
 80aad46:	2800      	cmp	r0, #0
 80aad48:	f040 8113 	bne.w	80aaf72 <mbedtls_ssl_read_record+0x282>
{
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
 80aad4c:	6da2      	ldr	r2, [r4, #88]	; 0x58
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 80aad4e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
{
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
 80aad50:	7813      	ldrb	r3, [r2, #0]
 80aad52:	66e3      	str	r3, [r4, #108]	; 0x6c
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 80aad54:	f890 e000 	ldrb.w	lr, [r0]
 80aad58:	7841      	ldrb	r1, [r0, #1]
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 80aad5a:	3b14      	subs	r3, #20
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 80aad5c:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 80aad60:	6721      	str	r1, [r4, #112]	; 0x70
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 80aad62:	2b03      	cmp	r3, #3
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
 80aad64:	f892 e001 	ldrb.w	lr, [r2, #1]

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
    mbedtls_ssl_read_version( &major_ver, &minor_ver, ssl->conf->transport, ssl->in_hdr + 1 );
 80aad68:	6820      	ldr	r0, [r4, #0]
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
        *minor = ver[1];
 80aad6a:	7892      	ldrb	r2, [r2, #2]
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 80aad6c:	d905      	bls.n	80aad7a <mbedtls_ssl_read_record+0x8a>
        /* Silently ignore invalid DTLS records as recommended by RFC 6347
         * Section 4.1.2.7 */
        if( ssl->conf->transport != MBEDTLS_SSL_TRANSPORT_DATAGRAM )
#endif /* MBEDTLS_SSL_PROTO_DTLS */
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                    MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 80aad6e:	220a      	movs	r2, #10
 80aad70:	2102      	movs	r1, #2
 80aad72:	4620      	mov	r0, r4
 80aad74:	f7ff ffa2 	bl	80aacbc <mbedtls_ssl_send_alert_message>
 80aad78:	e0e2      	b.n	80aaf40 <mbedtls_ssl_read_record+0x250>

        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check version */
    if( major_ver != ssl->major_ver )
 80aad7a:	68a3      	ldr	r3, [r4, #8]
 80aad7c:	459e      	cmp	lr, r3
 80aad7e:	f040 80df 	bne.w	80aaf40 <mbedtls_ssl_read_record+0x250>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "major version mismatch" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    if( minor_ver > ssl->conf->max_minor_ver )
 80aad82:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
 80aad86:	429a      	cmp	r2, r3
 80aad88:	f300 80da 	bgt.w	80aaf40 <mbedtls_ssl_read_record+0x250>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "minor version mismatch" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check length against the size of our buffer */
    if( ssl->in_msglen > MBEDTLS_SSL_IN_BUFFER_LEN
 80aad8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80aad8e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80aad90:	1a9b      	subs	r3, r3, r2
 80aad92:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 80aad96:	332d      	adds	r3, #45	; 0x2d
 80aad98:	4299      	cmp	r1, r3
 80aad9a:	f200 80d1 	bhi.w	80aaf40 <mbedtls_ssl_read_record+0x250>
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */


    /* Check length against bounds of the current transform and version */
    if( ssl->transform_in == NULL )
 80aad9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80aada0:	b923      	cbnz	r3, 80aadac <mbedtls_ssl_read_record+0xbc>
    {
        if( ssl->in_msglen < 1 ||
 80aada2:	1e4b      	subs	r3, r1, #1
 80aada4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80aada8:	d30c      	bcc.n	80aadc4 <mbedtls_ssl_read_record+0xd4>
 80aadaa:	e0c9      	b.n	80aaf40 <mbedtls_ssl_read_record+0x250>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
    }
    else
    {
        if( ssl->in_msglen < ssl->transform_in->minlen )
 80aadac:	689b      	ldr	r3, [r3, #8]
 80aadae:	4299      	cmp	r1, r3
 80aadb0:	f0c0 80c6 	bcc.w	80aaf40 <mbedtls_ssl_read_record+0x250>
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * TLS encrypted messages can have up to 256 bytes of padding
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 80aadb4:	68e2      	ldr	r2, [r4, #12]
 80aadb6:	2a00      	cmp	r2, #0
 80aadb8:	dd04      	ble.n	80aadc4 <mbedtls_ssl_read_record+0xd4>
 80aadba:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80aadbe:	4299      	cmp	r1, r3
 80aadc0:	f200 80be 	bhi.w	80aaf40 <mbedtls_ssl_read_record+0x250>
    }

    /*
     * Read and optionally decrypt the message contents
     */
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
 80aadc4:	3105      	adds	r1, #5
 80aadc6:	4620      	mov	r0, r4
 80aadc8:	f7ff fd82 	bl	80aa8d0 <mbedtls_ssl_fetch_input>
 80aadcc:	2800      	cmp	r0, #0
 80aadce:	f040 80d0 	bne.w	80aaf72 <mbedtls_ssl_read_record+0x282>

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
 80aadd2:	f8d4 e034 	ldr.w	lr, [r4, #52]	; 0x34
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "more than one record within datagram" ) );
        }
    }
    else
#endif
        ssl->in_left = 0;
 80aadd6:	6760      	str	r0, [r4, #116]	; 0x74

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
 80aadd8:	f1be 0f00 	cmp.w	lr, #0
 80aaddc:	f000 80b4 	beq.w	80aaf48 <mbedtls_ssl_read_record+0x258>
    size_t padlen = 0, correct = 1;
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
 80aade0:	6a23      	ldr	r3, [r4, #32]
 80aade2:	2b00      	cmp	r3, #0
 80aade4:	f000 80ae 	beq.w	80aaf44 <mbedtls_ssl_read_record+0x254>
 80aade8:	f8de 3088 	ldr.w	r3, [lr, #136]	; 0x88
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode(
    const mbedtls_cipher_context_t *ctx )
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, MBEDTLS_MODE_NONE );
    if( ctx->cipher_info == NULL )
 80aadec:	b103      	cbz	r3, 80aadf0 <mbedtls_ssl_read_record+0x100>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
 80aadee:	785b      	ldrb	r3, [r3, #1]
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_in->cipher_ctx_dec );

    if( ssl->in_msglen < ssl->transform_in->minlen )
 80aadf0:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80aadf2:	f8de 1008 	ldr.w	r1, [lr, #8]
 80aadf6:	428a      	cmp	r2, r1
 80aadf8:	f0c0 808a 	bcc.w	80aaf10 <mbedtls_ssl_read_record+0x220>
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || \
    defined(MBEDTLS_CCM_C) || \
    defined(MBEDTLS_CHACHAPOLY_C)
    if( mode == MBEDTLS_MODE_GCM ||
 80aadfc:	2b06      	cmp	r3, #6
 80aadfe:	d004      	beq.n	80aae0a <mbedtls_ssl_read_record+0x11a>
 80aae00:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80aae04:	2b08      	cmp	r3, #8
 80aae06:	f040 809d 	bne.w	80aaf44 <mbedtls_ssl_read_record+0x254>
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_in;
        unsigned char taglen = transform->ciphersuite_info->flags &
 80aae0a:	f8de 3000 	ldr.w	r3, [lr]
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
        size_t explicit_iv_len = transform->ivlen - transform->fixed_ivlen;
 80aae0e:	f8de 1010 	ldr.w	r1, [lr, #16]
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_in;
        unsigned char taglen = transform->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 80aae12:	7f1b      	ldrb	r3, [r3, #28]
 80aae14:	f013 0f02 	tst.w	r3, #2
        size_t explicit_iv_len = transform->ivlen - transform->fixed_ivlen;
 80aae18:	f8de 300c 	ldr.w	r3, [lr, #12]
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char iv[12];
        mbedtls_ssl_transform *transform = ssl->transform_in;
        unsigned char taglen = transform->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 80aae1c:	bf0c      	ite	eq
 80aae1e:	f04f 0c10 	moveq.w	ip, #16
 80aae22:	f04f 0c08 	movne.w	ip, #8
        size_t explicit_iv_len = transform->ivlen - transform->fixed_ivlen;
 80aae26:	ebc1 0803 	rsb	r8, r1, r3

        /*
         * Compute and update sizes
         */
        if( ssl->in_msglen < explicit_iv_len + taglen )
 80aae2a:	eb08 030c 	add.w	r3, r8, ip
 80aae2e:	429a      	cmp	r2, r3
 80aae30:	d36e      	bcc.n	80aaf10 <mbedtls_ssl_read_record+0x220>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < explicit_iv_len (%d) "
                                "+ taglen (%d)", ssl->in_msglen,
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
 80aae32:	ebc8 0802 	rsb	r8, r8, r2
 80aae36:	ebcc 0808 	rsb	r8, ip, r8
        ssl->in_msglen = dec_msglen;

        /*
         * Prepare additional authenticated data
         */
        memcpy( add_data, ssl->in_ctr, 8 );
 80aae3a:	6d63      	ldr	r3, [r4, #84]	; 0x54
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;

        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;
 80aae3c:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70

        /*
         * Prepare additional authenticated data
         */
        memcpy( add_data, ssl->in_ctr, 8 );
 80aae40:	6859      	ldr	r1, [r3, #4]
 80aae42:	6818      	ldr	r0, [r3, #0]
 80aae44:	aa0c      	add	r2, sp, #48	; 0x30
 80aae46:	c203      	stmia	r2!, {r0, r1}
        add_data[8]  = ssl->in_msgtype;
 80aae48:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
        add_data[12] = ssl->in_msglen & 0xFF;
 80aae4a:	f88d 803c 	strb.w	r8, [sp, #60]	; 0x3c

        /*
         * Prepare additional authenticated data
         */
        memcpy( add_data, ssl->in_ctr, 8 );
        add_data[8]  = ssl->in_msgtype;
 80aae4e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 80aae52:	68e2      	ldr	r2, [r4, #12]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 80aae54:	68a1      	ldr	r1, [r4, #8]
        ver[1] = (unsigned char) minor;
 80aae56:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
         */
        memcpy( add_data, ssl->in_ctr, 8 );
        add_data[8]  = ssl->in_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
 80aae5a:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80aae5e:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data for AEAD", add_data, 13 );

        /*
         * Prepare IV
         */
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
 80aae62:	f8de 200c 	ldr.w	r2, [lr, #12]
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;

        dec_msg = ssl->in_msg;
 80aae66:	f8d4 a064 	ldr.w	sl, [r4, #100]	; 0x64
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data for AEAD", add_data, 13 );

        /*
         * Prepare IV
         */
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
 80aae6a:	2a0c      	cmp	r2, #12
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 80aae6c:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data for AEAD", add_data, 13 );

        /*
         * Prepare IV
         */
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
 80aae70:	d168      	bne.n	80aaf44 <mbedtls_ssl_read_record+0x254>
 80aae72:	f8de 2010 	ldr.w	r2, [lr, #16]
 80aae76:	2a04      	cmp	r2, #4
 80aae78:	d108      	bne.n	80aae8c <mbedtls_ssl_read_record+0x19c>
        {
            /* GCM and CCM: fixed || explicit (transmitted) */
            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );
 80aae7a:	f8de 0028 	ldr.w	r0, [lr, #40]	; 0x28
            memcpy( iv + transform->fixed_ivlen, ssl->in_iv, 8 );
 80aae7e:	6e22      	ldr	r2, [r4, #96]	; 0x60
         * Prepare IV
         */
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
        {
            /* GCM and CCM: fixed || explicit (transmitted) */
            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );
 80aae80:	9009      	str	r0, [sp, #36]	; 0x24
            memcpy( iv + transform->fixed_ivlen, ssl->in_iv, 8 );
 80aae82:	6810      	ldr	r0, [r2, #0]
 80aae84:	6851      	ldr	r1, [r2, #4]
 80aae86:	ab0a      	add	r3, sp, #40	; 0x28
 80aae88:	c303      	stmia	r3!, {r0, r1}
 80aae8a:	e018      	b.n	80aaebe <mbedtls_ssl_read_record+0x1ce>

        }
        else if( transform->ivlen == 12 && transform->fixed_ivlen == 12 )
 80aae8c:	2a0c      	cmp	r2, #12
 80aae8e:	d159      	bne.n	80aaf44 <mbedtls_ssl_read_record+0x254>
        {
            /* ChachaPoly: fixed XOR sequence number */
            unsigned char i;

            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );
 80aae90:	46f1      	mov	r9, lr
 80aae92:	f859 0f28 	ldr.w	r0, [r9, #40]!
 80aae96:	aa09      	add	r2, sp, #36	; 0x24
 80aae98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80aae9c:	c203      	stmia	r2!, {r0, r1}
 80aae9e:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80aaea2:	a90a      	add	r1, sp, #40	; 0x28
 80aaea4:	6010      	str	r0, [r2, #0]
 80aaea6:	1e5a      	subs	r2, r3, #1
 80aaea8:	3307      	adds	r3, #7

            for( i = 0; i < 8; i++ )
                iv[i+4] ^= ssl->in_ctr[i];
 80aaeaa:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80aaeae:	f891 9000 	ldrb.w	r9, [r1]
            /* ChachaPoly: fixed XOR sequence number */
            unsigned char i;

            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );

            for( i = 0; i < 8; i++ )
 80aaeb2:	4293      	cmp	r3, r2
                iv[i+4] ^= ssl->in_ctr[i];
 80aaeb4:	ea89 0000 	eor.w	r0, r9, r0
 80aaeb8:	f801 0b01 	strb.w	r0, [r1], #1
            /* ChachaPoly: fixed XOR sequence number */
            unsigned char i;

            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );

            for( i = 0; i < 8; i++ )
 80aaebc:	d1f5      	bne.n	80aaeaa <mbedtls_ssl_read_record+0x1ba>
        MBEDTLS_SSL_DEBUG_BUF( 4, "TAG used", dec_msg + dec_msglen, taglen );

        /*
         * Decrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
 80aaebe:	eb0a 0308 	add.w	r3, sl, r8
 80aaec2:	9305      	str	r3, [sp, #20]
 80aaec4:	ab08      	add	r3, sp, #32
 80aaec6:	9304      	str	r3, [sp, #16]
 80aaec8:	230d      	movs	r3, #13
 80aaeca:	9300      	str	r3, [sp, #0]
 80aaecc:	f8cd c018 	str.w	ip, [sp, #24]
 80aaed0:	f8cd a00c 	str.w	sl, [sp, #12]
 80aaed4:	f8cd 8008 	str.w	r8, [sp, #8]
 80aaed8:	f8cd a004 	str.w	sl, [sp, #4]
 80aaedc:	ab0c      	add	r3, sp, #48	; 0x30
 80aaede:	220c      	movs	r2, #12
 80aaee0:	a909      	add	r1, sp, #36	; 0x24
 80aaee2:	f10e 0088 	add.w	r0, lr, #136	; 0x88
 80aaee6:	f7f6 fb47 	bl	80a1578 <mbedtls_cipher_auth_decrypt>
 80aaeea:	b120      	cbz	r0, 80aaef6 <mbedtls_ssl_read_record+0x206>
                                         dec_msg_result, &olen,
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );

            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
 80aaeec:	f510 4fc6 	cmn.w	r0, #25344	; 0x6300
 80aaef0:	d00e      	beq.n	80aaf10 <mbedtls_ssl_read_record+0x220>
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
    {
        if( ( ret = ssl_decrypt_buf( ssl ) ) != 0 )
 80aaef2:	b300      	cbz	r0, 80aaf36 <mbedtls_ssl_read_record+0x246>
 80aaef4:	e03d      	b.n	80aaf72 <mbedtls_ssl_read_record+0x282>

            return( ret );
        }
        auth_done++;

        if( olen != dec_msglen )
 80aaef6:	9b08      	ldr	r3, [sp, #32]
 80aaef8:	4598      	cmp	r8, r3
 80aaefa:	d123      	bne.n	80aaf44 <mbedtls_ssl_read_record+0x254>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ssl->in_msglen == 0 )
 80aaefc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80aaefe:	b96b      	cbnz	r3, 80aaf1c <mbedtls_ssl_read_record+0x22c>
    {
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
 80aaf00:	68e3      	ldr	r3, [r4, #12]
 80aaf02:	2b03      	cmp	r3, #3
 80aaf04:	d006      	beq.n	80aaf14 <mbedtls_ssl_read_record+0x224>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

        ssl->nb_zero++;
 80aaf06:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80aaf08:	3301      	adds	r3, #1

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
 80aaf0a:	2b03      	cmp	r3, #3
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

        ssl->nb_zero++;
 80aaf0c:	67e3      	str	r3, [r4, #124]	; 0x7c

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
 80aaf0e:	dd06      	ble.n	80aaf1e <mbedtls_ssl_read_record+0x22e>
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );

            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
                return( MBEDTLS_ERR_SSL_INVALID_MAC );
 80aaf10:	481f      	ldr	r0, [pc, #124]	; (80aaf90 <mbedtls_ssl_read_record+0x2a0>)
 80aaf12:	e032      	b.n	80aaf7a <mbedtls_ssl_read_record+0x28a>

    if( ssl->in_msglen == 0 )
    {
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
            && ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 80aaf14:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80aaf16:	2b17      	cmp	r3, #23
 80aaf18:	d0f5      	beq.n	80aaf06 <mbedtls_ssl_read_record+0x216>
 80aaf1a:	e030      	b.n	80aaf7e <mbedtls_ssl_read_record+0x28e>
                                "messages, possible DoS attack" ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
    }
    else
        ssl->nb_zero = 0;
 80aaf1c:	67e0      	str	r0, [r4, #124]	; 0x7c
                                         dec_msg_result, &olen,
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );

            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
 80aaf1e:	2207      	movs	r2, #7
    else
#endif
    {
        unsigned char i;
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
            if( ++ssl->in_ctr[i - 1] != 0 )
 80aaf20:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80aaf22:	5c8b      	ldrb	r3, [r1, r2]
 80aaf24:	3301      	adds	r3, #1
 80aaf26:	b2db      	uxtb	r3, r3
 80aaf28:	548b      	strb	r3, [r1, r2]
 80aaf2a:	b923      	cbnz	r3, 80aaf36 <mbedtls_ssl_read_record+0x246>
    }
    else
#endif
    {
        unsigned char i;
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
 80aaf2c:	f112 32ff 	adds.w	r2, r2, #4294967295
 80aaf30:	d2f6      	bcs.n	80aaf20 <mbedtls_ssl_read_record+0x230>

        /* The loop goes to its end iff the counter is wrapping */
        if( i == ssl_ep_len( ssl ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 80aaf32:	4818      	ldr	r0, [pc, #96]	; (80aaf94 <mbedtls_ssl_read_record+0x2a4>)
 80aaf34:	e021      	b.n	80aaf7a <mbedtls_ssl_read_record+0x28a>
        }

        MBEDTLS_SSL_DEBUG_BUF( 4, "input payload after decrypt",
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_IN_CONTENT_LEN )
 80aaf36:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80aaf38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80aaf3c:	d904      	bls.n	80aaf48 <mbedtls_ssl_read_record+0x258>
 80aaf3e:	e01e      	b.n	80aaf7e <mbedtls_ssl_read_record+0x28e>
        ssl->keep_current_message = 0;
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );

    return( 0 );
 80aaf40:	4d15      	ldr	r5, [pc, #84]	; (80aaf98 <mbedtls_ssl_read_record+0x2a8>)
 80aaf42:	e01e      	b.n	80aaf82 <mbedtls_ssl_read_record+0x292>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80aaf44:	4811      	ldr	r0, [pc, #68]	; (80aaf8c <mbedtls_ssl_read_record+0x29c>)
 80aaf46:	e018      	b.n	80aaf7a <mbedtls_ssl_read_record+0x28a>
                        return( ret );
                    }
                }
            }

            ret = mbedtls_ssl_handle_message_type( ssl );
 80aaf48:	4620      	mov	r0, r4
 80aaf4a:	f7ff fe7d 	bl	80aac48 <mbedtls_ssl_handle_message_type>

                ret = MBEDTLS_ERR_SSL_CONTINUE_PROCESSING;
            }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

        } while( MBEDTLS_ERR_SSL_NON_FATAL           == ret  ||
 80aaf4e:	f510 4fcd 	cmn.w	r0, #26240	; 0x6680
 80aaf52:	f43f aed6 	beq.w	80aad02 <mbedtls_ssl_read_record+0x12>
 80aaf56:	f510 4fcb 	cmn.w	r0, #25984	; 0x6580
 80aaf5a:	f43f aed2 	beq.w	80aad02 <mbedtls_ssl_read_record+0x12>
                 MBEDTLS_ERR_SSL_CONTINUE_PROCESSING == ret );

        if( 0 != ret )
 80aaf5e:	b960      	cbnz	r0, 80aaf7a <mbedtls_ssl_read_record+0x28a>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_handle_message_type" ), ret );
            return( ret );
        }

        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
 80aaf60:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80aaf62:	2b16      	cmp	r3, #22
 80aaf64:	d10d      	bne.n	80aaf82 <mbedtls_ssl_read_record+0x292>
 80aaf66:	2e01      	cmp	r6, #1
 80aaf68:	d10b      	bne.n	80aaf82 <mbedtls_ssl_read_record+0x292>
            update_hs_digest == 1 )
        {
            mbedtls_ssl_update_handshake_status( ssl );
 80aaf6a:	4620      	mov	r0, r4
 80aaf6c:	f7ff fe5c 	bl	80aac28 <mbedtls_ssl_update_handshake_status>
 80aaf70:	e007      	b.n	80aaf82 <mbedtls_ssl_read_record+0x292>

                if( have_buffered == 0 )
#endif /* MBEDTLS_SSL_PROTO_DTLS */
                {
                    ret = ssl_get_next_record( ssl );
                    if( ret == MBEDTLS_ERR_SSL_CONTINUE_PROCESSING )
 80aaf72:	f510 4fcb 	cmn.w	r0, #25984	; 0x6580
 80aaf76:	f43f aec4 	beq.w	80aad02 <mbedtls_ssl_read_record+0x12>
         * is in flight, as corrupting ssl->in_msglen during
         * ssl->in_offt != NULL is fatal. */
        if( ssl->in_offt != NULL )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80aaf7a:	4605      	mov	r5, r0
 80aaf7c:	e001      	b.n	80aaf82 <mbedtls_ssl_read_record+0x292>
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_IN_CONTENT_LEN )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 80aaf7e:	4806      	ldr	r0, [pc, #24]	; (80aaf98 <mbedtls_ssl_read_record+0x2a8>)
 80aaf80:	e7fb      	b.n	80aaf7a <mbedtls_ssl_read_record+0x28a>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );

    return( 0 );
}
 80aaf82:	4628      	mov	r0, r5
 80aaf84:	b010      	add	sp, #64	; 0x40
 80aaf86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80aaf8a:	bf00      	nop
 80aaf8c:	ffff9400 	.word	0xffff9400
 80aaf90:	ffff8e80 	.word	0xffff8e80
 80aaf94:	ffff9480 	.word	0xffff9480
 80aaf98:	ffff8e00 	.word	0xffff8e00

080aaf9c <mbedtls_ssl_write_certificate>:

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
 80aaf9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 80aaf9e:	6c03      	ldr	r3, [r0, #64]	; 0x40

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
 80aafa0:	4604      	mov	r4, r0
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 80aafa2:	681b      	ldr	r3, [r3, #0]
 80aafa4:	7a9a      	ldrb	r2, [r3, #10]
 80aafa6:	2a0b      	cmp	r2, #11
 80aafa8:	d809      	bhi.n	80aafbe <mbedtls_ssl_write_certificate+0x22>
 80aafaa:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80aafae:	40d3      	lsrs	r3, r2
 80aafb0:	07da      	lsls	r2, r3, #31
 80aafb2:	d504      	bpl.n	80aafbe <mbedtls_ssl_write_certificate+0x22>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
        ssl->state++;
 80aafb4:	6863      	ldr	r3, [r4, #4]
        return( 0 );
 80aafb6:	2000      	movs	r0, #0
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
        ssl->state++;
 80aafb8:	3301      	adds	r3, #1
 80aafba:	6063      	str	r3, [r4, #4]
        return( 0 );
 80aafbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 80aafbe:	6822      	ldr	r2, [r4, #0]
 80aafc0:	f892 307c 	ldrb.w	r3, [r2, #124]	; 0x7c
 80aafc4:	07db      	lsls	r3, r3, #31
 80aafc6:	d403      	bmi.n	80aafd0 <mbedtls_ssl_write_certificate+0x34>
    {
        if( ssl->client_auth == 0 )
 80aafc8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80aafcc:	2b00      	cmp	r3, #0
 80aafce:	d0f1      	beq.n	80aafb4 <mbedtls_ssl_write_certificate+0x18>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 80aafd0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80aafd2:	b113      	cbz	r3, 80aafda <mbedtls_ssl_write_certificate+0x3e>
 80aafd4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80aafd8:	b90b      	cbnz	r3, 80aafde <mbedtls_ssl_write_certificate+0x42>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 80aafda:	6d13      	ldr	r3, [r2, #80]	; 0x50

    return( key_cert == NULL ? NULL : key_cert->cert );
 80aafdc:	b30b      	cbz	r3, 80ab022 <mbedtls_ssl_write_certificate+0x86>
 80aafde:	681e      	ldr	r6, [r3, #0]
 80aafe0:	2307      	movs	r3, #7
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
    crt = mbedtls_ssl_own_cert( ssl );

    while( crt != NULL )
 80aafe2:	b1fe      	cbz	r6, 80ab024 <mbedtls_ssl_write_certificate+0x88>
    {
        n = crt->raw.len;
 80aafe4:	6875      	ldr	r5, [r6, #4]
        if( n > MBEDTLS_SSL_OUT_CONTENT_LEN - 3 - i )
 80aafe6:	f5c3 52ff 	rsb	r2, r3, #8160	; 0x1fe0
 80aafea:	321d      	adds	r2, #29
 80aafec:	4295      	cmp	r5, r2
 80aafee:	d836      	bhi.n	80ab05e <mbedtls_ssl_write_certificate+0xc2>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
                           i + 3 + n, MBEDTLS_SSL_OUT_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
 80aaff0:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80aaff4:	0c29      	lsrs	r1, r5, #16
 80aaff6:	54d1      	strb	r1, [r2, r3]
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
 80aaff8:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80aaffc:	0a29      	lsrs	r1, r5, #8
 80aaffe:	441a      	add	r2, r3
 80ab000:	7051      	strb	r1, [r2, #1]
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 80ab002:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 80ab006:	1cdf      	adds	r7, r3, #3
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 80ab008:	441a      	add	r2, r3
 80ab00a:	7095      	strb	r5, [r2, #2]

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 80ab00c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 80ab010:	68b1      	ldr	r1, [r6, #8]
 80ab012:	462a      	mov	r2, r5
 80ab014:	4438      	add	r0, r7
 80ab016:	f007 fbee 	bl	80b27f6 <memcpy>
        i += n; crt = crt->next;
 80ab01a:	19eb      	adds	r3, r5, r7
 80ab01c:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
    crt = mbedtls_ssl_own_cert( ssl );

    while( crt != NULL )
 80ab020:	e7df      	b.n	80aafe2 <mbedtls_ssl_write_certificate+0x46>
 80ab022:	2307      	movs	r3, #7

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
        i += n; crt = crt->next;
    }

    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
 80ab024:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80ab028:	1fda      	subs	r2, r3, #7
 80ab02a:	0c10      	lsrs	r0, r2, #16
 80ab02c:	7108      	strb	r0, [r1, #4]
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
 80ab02e:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80ab032:	0a10      	lsrs	r0, r2, #8
 80ab034:	7148      	strb	r0, [r1, #5]
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 80ab036:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
write_msg:
#endif

    ssl->state++;

    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 80ab03a:	4620      	mov	r0, r4
        i += n; crt = crt->next;
    }

    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 80ab03c:	718a      	strb	r2, [r1, #6]

    ssl->out_msglen  = i;
 80ab03e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 80ab042:	2316      	movs	r3, #22
 80ab044:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
 80ab048:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80ab04c:	220b      	movs	r2, #11
 80ab04e:	701a      	strb	r2, [r3, #0]

#if defined(MBEDTLS_SSL_PROTO_SSL3) && defined(MBEDTLS_SSL_CLI_C)
write_msg:
#endif

    ssl->state++;
 80ab050:	6863      	ldr	r3, [r4, #4]
 80ab052:	3301      	adds	r3, #1
 80ab054:	6063      	str	r3, [r4, #4]
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );

    return( ret );
}
 80ab056:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
write_msg:
#endif

    ssl->state++;

    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 80ab05a:	f7ff bd93 	b.w	80aab84 <mbedtls_ssl_write_handshake_msg>
        n = crt->raw.len;
        if( n > MBEDTLS_SSL_OUT_CONTENT_LEN - 3 - i )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
                           i + 3 + n, MBEDTLS_SSL_OUT_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
 80ab05e:	4801      	ldr	r0, [pc, #4]	; (80ab064 <mbedtls_ssl_write_certificate+0xc8>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );

    return( ret );
}
 80ab060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80ab062:	bf00      	nop
 80ab064:	ffff8b00 	.word	0xffff8b00

080ab068 <mbedtls_ssl_write_change_cipher_spec>:
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
 80ab068:	2214      	movs	r2, #20
    ssl->out_msglen  = 1;
    ssl->out_msg[0]  = 1;
 80ab06a:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
 80ab06e:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
    ssl->out_msglen  = 1;
 80ab072:	2201      	movs	r2, #1
 80ab074:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
    ssl->out_msg[0]  = 1;
 80ab078:	700a      	strb	r2, [r1, #0]

    ssl->state++;
 80ab07a:	6842      	ldr	r2, [r0, #4]
 80ab07c:	3201      	adds	r2, #1
 80ab07e:	6042      	str	r2, [r0, #4]

    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 80ab080:	f7ff bd80 	b.w	80aab84 <mbedtls_ssl_write_handshake_msg>

080ab084 <mbedtls_ssl_parse_change_cipher_spec>:

    return( 0 );
}

int mbedtls_ssl_parse_change_cipher_spec( mbedtls_ssl_context *ssl )
{
 80ab084:	b510      	push	{r4, lr}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 80ab086:	2101      	movs	r1, #1

    return( 0 );
}

int mbedtls_ssl_parse_change_cipher_spec( mbedtls_ssl_context *ssl )
{
 80ab088:	4604      	mov	r4, r0
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 80ab08a:	f7ff fe31 	bl	80aacf0 <mbedtls_ssl_read_record>
 80ab08e:	bb28      	cbnz	r0, 80ab0dc <mbedtls_ssl_parse_change_cipher_spec+0x58>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
 80ab090:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80ab092:	2b14      	cmp	r3, #20
 80ab094:	d006      	beq.n	80ab0a4 <mbedtls_ssl_parse_change_cipher_spec+0x20>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 80ab096:	220a      	movs	r2, #10
 80ab098:	2102      	movs	r1, #2
 80ab09a:	4620      	mov	r0, r4
 80ab09c:	f7ff fe0e 	bl	80aacbc <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80ab0a0:	480f      	ldr	r0, [pc, #60]	; (80ab0e0 <mbedtls_ssl_parse_change_cipher_spec+0x5c>)
 80ab0a2:	bd10      	pop	{r4, pc}
    /*
     * Switch to our negotiated transform and session parameters for inbound
     * data.
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for inbound data" ) );
    ssl->transform_in = ssl->transform_negotiate;
 80ab0a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80ab0a6:	6363      	str	r3, [r4, #52]	; 0x34
    ssl->session_in = ssl->session_negotiate;
 80ab0a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80ab0aa:	6223      	str	r3, [r4, #32]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->in_ctr, 0, 8 );
 80ab0ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80ab0ae:	6018      	str	r0, [r3, #0]
 80ab0b0:	6058      	str	r0, [r3, #4]
        ssl->in_iv  = ssl->in_hdr + 13;
    }
    else
#endif
    {
        ssl->in_ctr = ssl->in_hdr - 8;
 80ab0b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->in_ctr, 0, 8 );

    ssl_update_in_pointers( ssl, ssl->transform_negotiate );
 80ab0b4:	6c21      	ldr	r1, [r4, #64]	; 0x40
        ssl->in_iv  = ssl->in_hdr + 13;
    }
    else
#endif
    {
        ssl->in_ctr = ssl->in_hdr - 8;
 80ab0b6:	f1a3 0208 	sub.w	r2, r3, #8
 80ab0ba:	6562      	str	r2, [r4, #84]	; 0x54
        ssl->in_len = ssl->in_hdr + 3;
 80ab0bc:	1cda      	adds	r2, r3, #3
        ssl->in_iv  = ssl->in_hdr + 5;
 80ab0be:	3305      	adds	r3, #5
    }
    else
#endif
    {
        ssl->in_ctr = ssl->in_hdr - 8;
        ssl->in_len = ssl->in_hdr + 3;
 80ab0c0:	65e2      	str	r2, [r4, #92]	; 0x5c
        ssl->in_iv  = ssl->in_hdr + 5;
 80ab0c2:	6623      	str	r3, [r4, #96]	; 0x60
    }

    /* Offset in_msg from in_iv to allow space for explicit IV, if used. */
    if( transform != NULL &&
 80ab0c4:	b131      	cbz	r1, 80ab0d4 <mbedtls_ssl_parse_change_cipher_spec+0x50>
 80ab0c6:	68e2      	ldr	r2, [r4, #12]
 80ab0c8:	2a01      	cmp	r2, #1
        ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->in_msg = ssl->in_iv + transform->ivlen - transform->fixed_ivlen;
 80ab0ca:	bfc1      	itttt	gt
 80ab0cc:	68ca      	ldrgt	r2, [r1, #12]
 80ab0ce:	6909      	ldrgt	r1, [r1, #16]
 80ab0d0:	1a52      	subgt	r2, r2, r1
 80ab0d2:	189b      	addgt	r3, r3, r2
    }
    else
        ssl->in_msg = ssl->in_iv;
 80ab0d4:	6663      	str	r3, [r4, #100]	; 0x64
            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
        }
    }
#endif

    ssl->state++;
 80ab0d6:	6863      	ldr	r3, [r4, #4]
 80ab0d8:	3301      	adds	r3, #1
 80ab0da:	6063      	str	r3, [r4, #4]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );

    return( 0 );
}
 80ab0dc:	bd10      	pop	{r4, pc}
 80ab0de:	bf00      	nop
 80ab0e0:	ffff8900 	.word	0xffff8900

080ab0e4 <mbedtls_ssl_optimize_checksum>:
        ssl->handshake->update_checksum = ssl_update_checksum_md5sha1;
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 80ab0e4:	7a4b      	ldrb	r3, [r1, #9]
 80ab0e6:	2b07      	cmp	r3, #7
        ssl->handshake->update_checksum = ssl_update_checksum_sha384;
 80ab0e8:	bf08      	it	eq
 80ab0ea:	4a03      	ldreq	r2, [pc, #12]	; (80ab0f8 <mbedtls_ssl_optimize_checksum+0x14>)
 80ab0ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ciphersuite_info->mac != MBEDTLS_MD_SHA384 )
        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
 80ab0ee:	bf18      	it	ne
 80ab0f0:	4a02      	ldrne	r2, [pc, #8]	; (80ab0fc <mbedtls_ssl_optimize_checksum+0x18>)
 80ab0f2:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
 80ab0f6:	4770      	bx	lr
 80ab0f8:	080aa4e7 	.word	0x080aa4e7
 80ab0fc:	080aa4dd 	.word	0x080aa4dd

080ab100 <mbedtls_ssl_write_finished>:

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
}

int mbedtls_ssl_write_finished( mbedtls_ssl_context *ssl )
{
 80ab100:	b510      	push	{r4, lr}
    int ret, hash_len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );

    ssl_update_out_pointers( ssl, ssl->transform_negotiate );
 80ab102:	6c01      	ldr	r1, [r0, #64]	; 0x40

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
}

int mbedtls_ssl_write_finished( mbedtls_ssl_context *ssl )
{
 80ab104:	4604      	mov	r4, r0
    int ret, hash_len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );

    ssl_update_out_pointers( ssl, ssl->transform_negotiate );
 80ab106:	f7ff f86b 	bl	80aa1e0 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>

    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
 80ab10a:	6803      	ldr	r3, [r0, #0]
 80ab10c:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
 80ab110:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 80ab114:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80ab116:	f002 0201 	and.w	r2, r2, #1
 80ab11a:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 80ab11e:	3104      	adds	r1, #4
 80ab120:	4798      	blx	r3
     * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites
     * may define some other value. Currently (early 2016), no defined
     * ciphersuite does this (and this is unlikely to change as activity has
     * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.
     */
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 80ab122:	68e3      	ldr	r3, [r4, #12]
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
#endif

    ssl->out_msglen  = 4 + hash_len;
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 80ab124:	2214      	movs	r2, #20
     * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites
     * may define some other value. Currently (early 2016), no defined
     * ciphersuite does this (and this is unlikely to change as activity has
     * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.
     */
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 80ab126:	2b00      	cmp	r3, #0
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
#endif

    ssl->out_msglen  = 4 + hash_len;
 80ab128:	bf14      	ite	ne
 80ab12a:	2310      	movne	r3, #16
 80ab12c:	2328      	moveq	r3, #40	; 0x28
 80ab12e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 80ab132:	2316      	movs	r3, #22
 80ab134:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 80ab138:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80ab13c:	701a      	strb	r2, [r3, #0]

    /*
     * In case of session resuming, invert the client and server
     * ChangeCipherSpec messages order.
     */
    if( ssl->handshake->resume != 0 )
 80ab13e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80ab140:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80ab144:	b133      	cbz	r3, 80ab154 <mbedtls_ssl_write_finished+0x54>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 80ab146:	6823      	ldr	r3, [r4, #0]
 80ab148:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80ab14c:	07db      	lsls	r3, r3, #31
 80ab14e:	d404      	bmi.n	80ab15a <mbedtls_ssl_write_finished+0x5a>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 80ab150:	230f      	movs	r3, #15
 80ab152:	e001      	b.n	80ab158 <mbedtls_ssl_write_finished+0x58>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
#endif
    }
    else
        ssl->state++;
 80ab154:	6863      	ldr	r3, [r4, #4]
 80ab156:	3301      	adds	r3, #1
 80ab158:	6063      	str	r3, [r4, #4]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->cur_out_ctr, 0, 8 );
 80ab15a:	2300      	movs	r3, #0
 80ab15c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 80ab160:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac

    ssl->transform_out = ssl->transform_negotiate;
 80ab164:	6c23      	ldr	r3, [r4, #64]	; 0x40
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 80ab166:	4620      	mov	r0, r4
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->cur_out_ctr, 0, 8 );

    ssl->transform_out = ssl->transform_negotiate;
 80ab168:	63a3      	str	r3, [r4, #56]	; 0x38
    ssl->session_out = ssl->session_negotiate;
 80ab16a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80ab16c:	6263      	str	r3, [r4, #36]	; 0x24
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write finished" ) );

    return( 0 );
}
 80ab16e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 80ab172:	f7ff bd07 	b.w	80aab84 <mbedtls_ssl_write_handshake_msg>
	...

080ab178 <mbedtls_ssl_parse_finished>:
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
 80ab178:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 80ab17a:	6803      	ldr	r3, [r0, #0]
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
 80ab17c:	4604      	mov	r4, r0
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 80ab17e:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 80ab182:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80ab184:	43d2      	mvns	r2, r2
 80ab186:	ad01      	add	r5, sp, #4
 80ab188:	4629      	mov	r1, r5
 80ab18a:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 80ab18e:	f002 0201 	and.w	r2, r2, #1
 80ab192:	4798      	blx	r3

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 80ab194:	2101      	movs	r1, #1
 80ab196:	4620      	mov	r0, r4
 80ab198:	f7ff fdaa 	bl	80aacf0 <mbedtls_ssl_read_record>
 80ab19c:	2800      	cmp	r0, #0
 80ab19e:	d13b      	bne.n	80ab218 <mbedtls_ssl_parse_finished+0xa0>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80ab1a0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80ab1a2:	2b16      	cmp	r3, #22
 80ab1a4:	d006      	beq.n	80ab1b4 <mbedtls_ssl_parse_finished+0x3c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 80ab1a6:	220a      	movs	r2, #10
 80ab1a8:	2102      	movs	r1, #2
 80ab1aa:	4620      	mov	r0, r4
 80ab1ac:	f7ff fd86 	bl	80aacbc <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80ab1b0:	481a      	ldr	r0, [pc, #104]	; (80ab21c <mbedtls_ssl_parse_finished+0xa4>)
 80ab1b2:	e031      	b.n	80ab218 <mbedtls_ssl_parse_finished+0xa0>
        hash_len = 36;
    else
#endif
        hash_len = 12;

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
 80ab1b4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80ab1b6:	780b      	ldrb	r3, [r1, #0]
 80ab1b8:	2b14      	cmp	r3, #20
 80ab1ba:	d115      	bne.n	80ab1e8 <mbedtls_ssl_parse_finished+0x70>
 80ab1bc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80ab1be:	2b10      	cmp	r3, #16
 80ab1c0:	d112      	bne.n	80ab1e8 <mbedtls_ssl_parse_finished+0x70>
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;
 80ab1c2:	f88d 0003 	strb.w	r0, [sp, #3]
 80ab1c6:	1d03      	adds	r3, r0, #4
    for( i = 0; i < n; i++ )
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
 80ab1c8:	5ccb      	ldrb	r3, [r1, r3]
 80ab1ca:	5c2a      	ldrb	r2, [r5, r0]
        diff |= x ^ y;
 80ab1cc:	f89d 6003 	ldrb.w	r6, [sp, #3]
 80ab1d0:	4053      	eors	r3, r2
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80ab1d2:	3001      	adds	r0, #1
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
 80ab1d4:	4333      	orrs	r3, r6
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80ab1d6:	280c      	cmp	r0, #12
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
 80ab1d8:	f88d 3003 	strb.w	r3, [sp, #3]
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80ab1dc:	d1f3      	bne.n	80ab1c6 <mbedtls_ssl_parse_finished+0x4e>
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
    }

    return( diff );
 80ab1de:	f89d 3003 	ldrb.w	r3, [sp, #3]
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
    }

    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
 80ab1e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80ab1e6:	b133      	cbz	r3, 80ab1f6 <mbedtls_ssl_parse_finished+0x7e>
                      buf, hash_len ) != 0 )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 80ab1e8:	2232      	movs	r2, #50	; 0x32
 80ab1ea:	2102      	movs	r1, #2
 80ab1ec:	4620      	mov	r0, r4
 80ab1ee:	f7ff fd65 	bl	80aacbc <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 80ab1f2:	480b      	ldr	r0, [pc, #44]	; (80ab220 <mbedtls_ssl_parse_finished+0xa8>)
 80ab1f4:	e010      	b.n	80ab218 <mbedtls_ssl_parse_finished+0xa0>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->peer_verify_data, buf, hash_len );
#endif

    if( ssl->handshake->resume != 0 )
 80ab1f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80ab1f8:	f8d3 0348 	ldr.w	r0, [r3, #840]	; 0x348
 80ab1fc:	b138      	cbz	r0, 80ab20e <mbedtls_ssl_parse_finished+0x96>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 80ab1fe:	6823      	ldr	r3, [r4, #0]
 80ab200:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
 80ab204:	f010 0001 	ands.w	r0, r0, #1
 80ab208:	d105      	bne.n	80ab216 <mbedtls_ssl_parse_finished+0x9e>
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
 80ab20a:	230a      	movs	r3, #10
 80ab20c:	e001      	b.n	80ab212 <mbedtls_ssl_parse_finished+0x9a>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
#endif
    }
    else
        ssl->state++;
 80ab20e:	6863      	ldr	r3, [r4, #4]
 80ab210:	3301      	adds	r3, #1
 80ab212:	6063      	str	r3, [r4, #4]
 80ab214:	e000      	b.n	80ab218 <mbedtls_ssl_parse_finished+0xa0>
        mbedtls_ssl_recv_flight_completed( ssl );
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse finished" ) );

    return( 0 );
 80ab216:	4610      	mov	r0, r2
}
 80ab218:	b004      	add	sp, #16
 80ab21a:	bd70      	pop	{r4, r5, r6, pc}
 80ab21c:	ffff8900 	.word	0xffff8900
 80ab220:	ffff8180 	.word	0xffff8180

080ab224 <mbedtls_ssl_session_init>:
    mbedtls_md_init( &transform->md_ctx_dec );
}

void mbedtls_ssl_session_init( mbedtls_ssl_session *session )
{
    memset( session, 0, sizeof(mbedtls_ssl_session) );
 80ab224:	2274      	movs	r2, #116	; 0x74
 80ab226:	2100      	movs	r1, #0
 80ab228:	f007 bb0b 	b.w	80b2842 <memset>

080ab22c <mbedtls_ssl_init>:
/*
 * Initialize an SSL context
 */
void mbedtls_ssl_init( mbedtls_ssl_context *ssl )
{
    memset( ssl, 0, sizeof( mbedtls_ssl_context ) );
 80ab22c:	22bc      	movs	r2, #188	; 0xbc
 80ab22e:	2100      	movs	r1, #0
 80ab230:	f007 bb07 	b.w	80b2842 <memset>

080ab234 <mbedtls_ssl_conf_authmode>:
}
#endif

void mbedtls_ssl_conf_authmode( mbedtls_ssl_config *conf, int authmode )
{
    conf->authmode   = authmode;
 80ab234:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80ab238:	f361 0383 	bfi	r3, r1, #2, #2
 80ab23c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
 80ab240:	4770      	bx	lr

080ab242 <mbedtls_ssl_conf_verify>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
void mbedtls_ssl_conf_verify( mbedtls_ssl_config *conf,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
    conf->f_vrfy      = f_vrfy;
 80ab242:	6341      	str	r1, [r0, #52]	; 0x34
    conf->p_vrfy      = p_vrfy;
 80ab244:	6382      	str	r2, [r0, #56]	; 0x38
 80ab246:	4770      	bx	lr

080ab248 <mbedtls_ssl_conf_rng>:

void mbedtls_ssl_conf_rng( mbedtls_ssl_config *conf,
                  int (*f_rng)(void *, unsigned char *, size_t),
                  void *p_rng )
{
    conf->f_rng      = f_rng;
 80ab248:	6181      	str	r1, [r0, #24]
    conf->p_rng      = p_rng;
 80ab24a:	61c2      	str	r2, [r0, #28]
 80ab24c:	4770      	bx	lr

080ab24e <mbedtls_ssl_conf_dbg>:

void mbedtls_ssl_conf_dbg( mbedtls_ssl_config *conf,
                  void (*f_dbg)(void *, int, const char *, int, const char *),
                  void  *p_dbg )
{
    conf->f_dbg      = f_dbg;
 80ab24e:	6101      	str	r1, [r0, #16]
    conf->p_dbg      = p_dbg;
 80ab250:	6142      	str	r2, [r0, #20]
 80ab252:	4770      	bx	lr

080ab254 <mbedtls_ssl_set_bio>:
        mbedtls_ssl_recv_t *f_recv,
        mbedtls_ssl_recv_timeout_t *f_recv_timeout )
{
    ssl->p_bio          = p_bio;
    ssl->f_send         = f_send;
    ssl->f_recv         = f_recv;
 80ab254:	6143      	str	r3, [r0, #20]
    ssl->f_recv_timeout = f_recv_timeout;
 80ab256:	9b00      	ldr	r3, [sp, #0]
        void *p_bio,
        mbedtls_ssl_send_t *f_send,
        mbedtls_ssl_recv_t *f_recv,
        mbedtls_ssl_recv_timeout_t *f_recv_timeout )
{
    ssl->p_bio          = p_bio;
 80ab258:	61c1      	str	r1, [r0, #28]
    ssl->f_send         = f_send;
 80ab25a:	6102      	str	r2, [r0, #16]
    ssl->f_recv         = f_recv;
    ssl->f_recv_timeout = f_recv_timeout;
 80ab25c:	6183      	str	r3, [r0, #24]
 80ab25e:	4770      	bx	lr

080ab260 <mbedtls_ssl_set_timer_cb>:

void mbedtls_ssl_set_timer_cb( mbedtls_ssl_context *ssl,
                               void *p_timer,
                               mbedtls_ssl_set_timer_t *f_set_timer,
                               mbedtls_ssl_get_timer_t *f_get_timer )
{
 80ab260:	b410      	push	{r4}
    ssl->p_timer        = p_timer;
 80ab262:	6441      	str	r1, [r0, #68]	; 0x44
    ssl->f_set_timer    = f_set_timer;
 80ab264:	6482      	str	r2, [r0, #72]	; 0x48
    ssl->f_get_timer    = f_get_timer;
 80ab266:	64c3      	str	r3, [r0, #76]	; 0x4c

    /* Make sure we start with no timer running */
    ssl_set_timer( ssl, 0 );
 80ab268:	2100      	movs	r1, #0
}
 80ab26a:	bc10      	pop	{r4}
    ssl->p_timer        = p_timer;
    ssl->f_set_timer    = f_set_timer;
    ssl->f_get_timer    = f_get_timer;

    /* Make sure we start with no timer running */
    ssl_set_timer( ssl, 0 );
 80ab26c:	f7fe bfb1 	b.w	80aa1d2 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>

080ab270 <mbedtls_ssl_conf_own_cert>:

int mbedtls_ssl_conf_own_cert( mbedtls_ssl_config *conf,
                              mbedtls_x509_crt *own_cert,
                              mbedtls_pk_context *pk_key )
{
    return( ssl_append_key_cert( &conf->key_cert, own_cert, pk_key ) );
 80ab270:	3050      	adds	r0, #80	; 0x50
 80ab272:	f7ff b915 	b.w	80aa4a0 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context>

080ab276 <mbedtls_ssl_conf_ca_chain>:

void mbedtls_ssl_conf_ca_chain( mbedtls_ssl_config *conf,
                               mbedtls_x509_crt *ca_chain,
                               mbedtls_x509_crl *ca_crl )
{
    conf->ca_chain   = ca_chain;
 80ab276:	6541      	str	r1, [r0, #84]	; 0x54
    conf->ca_crl     = ca_crl;
 80ab278:	6582      	str	r2, [r0, #88]	; 0x58
 80ab27a:	4770      	bx	lr

080ab27c <mbedtls_ssl_set_hostname>:
}
#endif /* MBEDTLS_ECP_C */

#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_set_hostname( mbedtls_ssl_context *ssl, const char *hostname )
{
 80ab27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80ab27e:	4606      	mov	r6, r0
    /* Initialize to suppress unnecessary compiler warning */
    size_t hostname_len = 0;

    /* Check if new hostname is valid before
     * making any change to current one */
    if( hostname != NULL )
 80ab280:	460c      	mov	r4, r1
 80ab282:	b131      	cbz	r1, 80ab292 <mbedtls_ssl_set_hostname+0x16>
    {
        hostname_len = strlen( hostname );
 80ab284:	4608      	mov	r0, r1
 80ab286:	f007 fb2d 	bl	80b28e4 <strlen>

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 80ab28a:	28ff      	cmp	r0, #255	; 0xff

    /* Check if new hostname is valid before
     * making any change to current one */
    if( hostname != NULL )
    {
        hostname_len = strlen( hostname );
 80ab28c:	4605      	mov	r5, r0

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 80ab28e:	d901      	bls.n	80ab294 <mbedtls_ssl_set_hostname+0x18>
 80ab290:	e022      	b.n	80ab2d8 <mbedtls_ssl_set_hostname+0x5c>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_set_hostname( mbedtls_ssl_context *ssl, const char *hostname )
{
    /* Initialize to suppress unnecessary compiler warning */
    size_t hostname_len = 0;
 80ab292:	460d      	mov	r5, r1
    }

    /* Now it's clear that we will overwrite the old hostname,
     * so we can free it safely */

    if( ssl->hostname != NULL )
 80ab294:	f8d6 70b4 	ldr.w	r7, [r6, #180]	; 0xb4
 80ab298:	b157      	cbz	r7, 80ab2b0 <mbedtls_ssl_set_hostname+0x34>
    {
        mbedtls_platform_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 80ab29a:	4638      	mov	r0, r7
 80ab29c:	f007 fb22 	bl	80b28e4 <strlen>
 80ab2a0:	4601      	mov	r1, r0
 80ab2a2:	4638      	mov	r0, r7
 80ab2a4:	f7fb f8b4 	bl	80a6410 <mbedtls_platform_zeroize>
        mbedtls_free( ssl->hostname );
 80ab2a8:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
 80ab2ac:	f005 ff1c 	bl	80b10e8 <free>
    }

    /* Passing NULL as hostname shall clear the old one */

    if( hostname == NULL )
 80ab2b0:	b91c      	cbnz	r4, 80ab2ba <mbedtls_ssl_set_hostname+0x3e>
    {
        ssl->hostname = NULL;
 80ab2b2:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
        memcpy( ssl->hostname, hostname, hostname_len );

        ssl->hostname[hostname_len] = '\0';
    }

    return( 0 );
 80ab2b6:	4620      	mov	r0, r4
 80ab2b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        ssl->hostname = NULL;
    }
    else
    {
        ssl->hostname = (char *)mbedtls_calloc( 1, hostname_len + 1 );
 80ab2ba:	1c69      	adds	r1, r5, #1
 80ab2bc:	2001      	movs	r0, #1
 80ab2be:	f007 f97d 	bl	80b25bc <calloc>
 80ab2c2:	4607      	mov	r7, r0
 80ab2c4:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
        if( ssl->hostname == NULL )
 80ab2c8:	b140      	cbz	r0, 80ab2dc <mbedtls_ssl_set_hostname+0x60>
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

        memcpy( ssl->hostname, hostname, hostname_len );
 80ab2ca:	462a      	mov	r2, r5
 80ab2cc:	4621      	mov	r1, r4
 80ab2ce:	f007 fa92 	bl	80b27f6 <memcpy>

        ssl->hostname[hostname_len] = '\0';
 80ab2d2:	2000      	movs	r0, #0
 80ab2d4:	5578      	strb	r0, [r7, r5]
 80ab2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( hostname != NULL )
    {
        hostname_len = strlen( hostname );

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80ab2d8:	4801      	ldr	r0, [pc, #4]	; (80ab2e0 <mbedtls_ssl_set_hostname+0x64>)
 80ab2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    else
    {
        ssl->hostname = (char *)mbedtls_calloc( 1, hostname_len + 1 );
        if( ssl->hostname == NULL )
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 80ab2dc:	4801      	ldr	r0, [pc, #4]	; (80ab2e4 <mbedtls_ssl_set_hostname+0x68>)

        ssl->hostname[hostname_len] = '\0';
    }

    return( 0 );
}
 80ab2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80ab2e0:	ffff8f00 	.word	0xffff8f00
 80ab2e4:	ffff8100 	.word	0xffff8100

080ab2e8 <mbedtls_ssl_conf_min_version>:
    conf->max_minor_ver = minor;
}

void mbedtls_ssl_conf_min_version( mbedtls_ssl_config *conf, int major, int minor )
{
    conf->min_major_ver = major;
 80ab2e8:	f880 107a 	strb.w	r1, [r0, #122]	; 0x7a
    conf->min_minor_ver = minor;
 80ab2ec:	f880 207b 	strb.w	r2, [r0, #123]	; 0x7b
 80ab2f0:	4770      	bx	lr

080ab2f2 <mbedtls_ssl_get_verify_result>:
    return( 0 );
}

uint32_t mbedtls_ssl_get_verify_result( const mbedtls_ssl_context *ssl )
{
    if( ssl->session != NULL )
 80ab2f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80ab2f4:	b90b      	cbnz	r3, 80ab2fa <mbedtls_ssl_get_verify_result+0x8>
        return( ssl->session->verify_result );

    if( ssl->session_negotiate != NULL )
 80ab2f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80ab2f8:	b10b      	cbz	r3, 80ab2fe <mbedtls_ssl_get_verify_result+0xc>
        return( ssl->session_negotiate->verify_result );
 80ab2fa:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80ab2fc:	4770      	bx	lr

    return( 0xFFFFFFFF );
 80ab2fe:	f04f 30ff 	mov.w	r0, #4294967295
}
 80ab302:	4770      	bx	lr

080ab304 <mbedtls_ssl_get_max_frag_len>:
    size_t max_len;

    /*
     * Assume mfl_code is correct since it was checked when set
     */
    max_len = ssl_mfl_code_to_length( ssl->conf->mfl_code );
 80ab304:	6803      	ldr	r3, [r0, #0]
 80ab306:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80ab30a:	f3c3 1382 	ubfx	r3, r3, #6, #3
 80ab30e:	3b01      	subs	r3, #1
 80ab310:	2b03      	cmp	r3, #3
 80ab312:	bf96      	itet	ls
 80ab314:	4a16      	ldrls	r2, [pc, #88]	; (80ab370 <mbedtls_ssl_get_max_frag_len+0x6c>)
 *    } MaxFragmentLength;
 * and we add 0 -> extension unused
 */
static unsigned int ssl_mfl_code_to_length( int mfl )
{
    switch( mfl )
 80ab316:	f44f 5300 	movhi.w	r3, #8192	; 0x2000
 80ab31a:	f832 3013 	ldrhls.w	r3, [r2, r3, lsl #1]
     * Assume mfl_code is correct since it was checked when set
     */
    max_len = ssl_mfl_code_to_length( ssl->conf->mfl_code );

    /* Check if a smaller max length was negotiated */
    if( ssl->session_out != NULL &&
 80ab31e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80ab320:	b182      	cbz	r2, 80ab344 <mbedtls_ssl_get_max_frag_len+0x40>
 80ab322:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 80ab326:	3a01      	subs	r2, #1
 80ab328:	2a03      	cmp	r2, #3
 80ab32a:	d806      	bhi.n	80ab33a <mbedtls_ssl_get_max_frag_len+0x36>
 80ab32c:	4910      	ldr	r1, [pc, #64]	; (80ab370 <mbedtls_ssl_get_max_frag_len+0x6c>)
 80ab32e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80ab332:	4293      	cmp	r3, r2
 80ab334:	bf28      	it	cs
 80ab336:	4613      	movcs	r3, r2
 80ab338:	e004      	b.n	80ab344 <mbedtls_ssl_get_max_frag_len+0x40>
 80ab33a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80ab33e:	bf28      	it	cs
 80ab340:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
    {
        max_len = ssl_mfl_code_to_length( ssl->session_out->mfl_code );
    }

    /* During a handshake, use the value being negotiated */
    if( ssl->session_negotiate != NULL &&
 80ab344:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80ab346:	b182      	cbz	r2, 80ab36a <mbedtls_ssl_get_max_frag_len+0x66>
 80ab348:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 80ab34c:	3a01      	subs	r2, #1
 80ab34e:	2a03      	cmp	r2, #3
 80ab350:	d806      	bhi.n	80ab360 <mbedtls_ssl_get_max_frag_len+0x5c>
 80ab352:	4907      	ldr	r1, [pc, #28]	; (80ab370 <mbedtls_ssl_get_max_frag_len+0x6c>)
 80ab354:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80ab358:	4293      	cmp	r3, r2
 80ab35a:	bf28      	it	cs
 80ab35c:	4613      	movcs	r3, r2
 80ab35e:	e004      	b.n	80ab36a <mbedtls_ssl_get_max_frag_len+0x66>
 80ab360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80ab364:	bf28      	it	cs
 80ab366:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
    {
        max_len = ssl_mfl_code_to_length( ssl->session_negotiate->mfl_code );
    }

    return( max_len );
}
 80ab36a:	4618      	mov	r0, r3
 80ab36c:	4770      	bx	lr
 80ab36e:	bf00      	nop
 80ab370:	080b580e 	.word	0x080b580e

080ab374 <mbedtls_ssl_get_max_out_record_payload>:
            ssl->mtu : ssl->handshake->mtu );
}
#endif /* MBEDTLS_SSL_PROTO_DTLS */

int mbedtls_ssl_get_max_out_record_payload( const mbedtls_ssl_context *ssl )
{
 80ab374:	b508      	push	{r3, lr}
    !defined(MBEDTLS_SSL_PROTO_DTLS)
    (void) ssl;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    const size_t mfl = mbedtls_ssl_get_max_frag_len( ssl );
 80ab376:	f7ff ffc5 	bl	80ab304 <mbedtls_ssl_get_max_frag_len>
    !defined(MBEDTLS_SSL_PROTO_DTLS)
    ((void) ssl);
#endif

    return( (int) max_len );
}
 80ab37a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80ab37e:	bf28      	it	cs
 80ab380:	f44f 5000 	movcs.w	r0, #8192	; 0x2000
 80ab384:	bd08      	pop	{r3, pc}
	...

080ab388 <mbedtls_ssl_handshake_step>:
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;

    if( ssl == NULL || ssl->conf == NULL )
 80ab388:	b138      	cbz	r0, 80ab39a <mbedtls_ssl_handshake_step+0x12>
 80ab38a:	6803      	ldr	r3, [r0, #0]
 80ab38c:	b12b      	cbz	r3, 80ab39a <mbedtls_ssl_handshake_step+0x12>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 80ab38e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80ab392:	07db      	lsls	r3, r3, #31
 80ab394:	d403      	bmi.n	80ab39e <mbedtls_ssl_handshake_step+0x16>
        ret = mbedtls_ssl_handshake_client_step( ssl );
 80ab396:	f004 be4f 	b.w	80b0038 <mbedtls_ssl_handshake_client_step>
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80ab39a:	4802      	ldr	r0, [pc, #8]	; (80ab3a4 <mbedtls_ssl_handshake_step+0x1c>)
 80ab39c:	4770      	bx	lr
/*
 * Perform a single step of the SSL handshake
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 80ab39e:	4802      	ldr	r0, [pc, #8]	; (80ab3a8 <mbedtls_ssl_handshake_step+0x20>)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
        ret = mbedtls_ssl_handshake_server_step( ssl );
#endif

    return( ret );
}
 80ab3a0:	4770      	bx	lr
 80ab3a2:	bf00      	nop
 80ab3a4:	ffff8f00 	.word	0xffff8f00
 80ab3a8:	ffff8f80 	.word	0xffff8f80

080ab3ac <mbedtls_ssl_handshake>:

/*
 * Perform the SSL handshake
 */
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
 80ab3ac:	b510      	push	{r4, lr}
    int ret = 0;

    if( ssl == NULL || ssl->conf == NULL )
 80ab3ae:	4604      	mov	r4, r0
 80ab3b0:	b150      	cbz	r0, 80ab3c8 <mbedtls_ssl_handshake+0x1c>
 80ab3b2:	6803      	ldr	r3, [r0, #0]
 80ab3b4:	b143      	cbz	r3, 80ab3c8 <mbedtls_ssl_handshake+0x1c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> handshake" ) );

    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 80ab3b6:	6863      	ldr	r3, [r4, #4]
 80ab3b8:	2b10      	cmp	r3, #16
 80ab3ba:	d007      	beq.n	80ab3cc <mbedtls_ssl_handshake+0x20>
    {
        ret = mbedtls_ssl_handshake_step( ssl );
 80ab3bc:	4620      	mov	r0, r4
 80ab3be:	f7ff ffe3 	bl	80ab388 <mbedtls_ssl_handshake_step>

        if( ret != 0 )
 80ab3c2:	2800      	cmp	r0, #0
 80ab3c4:	d0f7      	beq.n	80ab3b6 <mbedtls_ssl_handshake+0xa>
 80ab3c6:	bd10      	pop	{r4, pc}
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
    int ret = 0;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80ab3c8:	4801      	ldr	r0, [pc, #4]	; (80ab3d0 <mbedtls_ssl_handshake+0x24>)
 80ab3ca:	bd10      	pop	{r4, pc}
 80ab3cc:	2000      	movs	r0, #0
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= handshake" ) );

    return( ret );
}
 80ab3ce:	bd10      	pop	{r4, pc}
 80ab3d0:	ffff8f00 	.word	0xffff8f00

080ab3d4 <mbedtls_ssl_read>:

/*
 * Receive application data decrypted from the SSL layer
 */
int mbedtls_ssl_read( mbedtls_ssl_context *ssl, unsigned char *buf, size_t len )
{
 80ab3d4:	b570      	push	{r4, r5, r6, lr}
 80ab3d6:	460e      	mov	r6, r1
 80ab3d8:	4614      	mov	r4, r2
    int ret;
    size_t n;

    if( ssl == NULL || ssl->conf == NULL )
 80ab3da:	4605      	mov	r5, r0
 80ab3dc:	2800      	cmp	r0, #0
 80ab3de:	d05f      	beq.n	80ab4a0 <mbedtls_ssl_read+0xcc>
 80ab3e0:	6803      	ldr	r3, [r0, #0]
 80ab3e2:	2b00      	cmp	r3, #0
 80ab3e4:	d05c      	beq.n	80ab4a0 <mbedtls_ssl_read+0xcc>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        return( ret );
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 80ab3e6:	6843      	ldr	r3, [r0, #4]
 80ab3e8:	2b10      	cmp	r3, #16
 80ab3ea:	d006      	beq.n	80ab3fa <mbedtls_ssl_read+0x26>
    {
        ret = mbedtls_ssl_handshake( ssl );
 80ab3ec:	f7ff ffde 	bl	80ab3ac <mbedtls_ssl_handshake>
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 80ab3f0:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
 80ab3f4:	d001      	beq.n	80ab3fa <mbedtls_ssl_read+0x26>
 80ab3f6:	2800      	cmp	r0, #0
 80ab3f8:	d16a      	bne.n	80ab4d0 <mbedtls_ssl_read+0xfc>
            return( ret );
        }
    }

    /* Loop as long as no application data record is available */
    while( ssl->in_offt == NULL )
 80ab3fa:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 80ab3fc:	2900      	cmp	r1, #0
 80ab3fe:	d13a      	bne.n	80ab476 <mbedtls_ssl_read+0xa2>
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
 80ab400:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80ab402:	b11b      	cbz	r3, 80ab40c <mbedtls_ssl_read+0x38>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
 80ab404:	6c68      	ldr	r0, [r5, #68]	; 0x44
 80ab406:	4798      	blx	r3

    /* Loop as long as no application data record is available */
    while( ssl->in_offt == NULL )
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
 80ab408:	3001      	adds	r0, #1
 80ab40a:	d04f      	beq.n	80ab4ac <mbedtls_ssl_read+0xd8>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
        {
            ssl_set_timer( ssl, ssl->conf->read_timeout );
        }

        if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 80ab40c:	2101      	movs	r1, #1
 80ab40e:	4628      	mov	r0, r5
 80ab410:	f7ff fc6e 	bl	80aacf0 <mbedtls_ssl_read_record>
 80ab414:	b120      	cbz	r0, 80ab420 <mbedtls_ssl_read+0x4c>
        {
            if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 80ab416:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 80ab41a:	d159      	bne.n	80ab4d0 <mbedtls_ssl_read+0xfc>
                return( 0 );
 80ab41c:	2000      	movs	r0, #0
 80ab41e:	bd70      	pop	{r4, r5, r6, pc}

            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
            return( ret );
        }

        if( ssl->in_msglen  == 0 &&
 80ab420:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80ab422:	b95b      	cbnz	r3, 80ab43c <mbedtls_ssl_read+0x68>
 80ab424:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80ab426:	2b17      	cmp	r3, #23
 80ab428:	d108      	bne.n	80ab43c <mbedtls_ssl_read+0x68>
            ssl->in_msgtype == MBEDTLS_SSL_MSG_APPLICATION_DATA )
        {
            /*
             * OpenSSL sends empty messages to randomize the IV
             */
            if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 80ab42a:	2101      	movs	r1, #1
 80ab42c:	4628      	mov	r0, r5
 80ab42e:	f7ff fc5f 	bl	80aacf0 <mbedtls_ssl_read_record>
 80ab432:	b118      	cbz	r0, 80ab43c <mbedtls_ssl_read+0x68>
            {
                if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 80ab434:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 80ab438:	d0f0      	beq.n	80ab41c <mbedtls_ssl_read+0x48>
 80ab43a:	bd70      	pop	{r4, r5, r6, pc}
                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
                return( ret );
            }
        }

        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80ab43c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80ab43e:	2b16      	cmp	r3, #22
 80ab440:	d10b      	bne.n	80ab45a <mbedtls_ssl_read+0x86>
             * - For server-side, expect CLIENT_HELLO.
             * - Fail (TLS) or silently drop record (DTLS) in other cases.
             */

#if defined(MBEDTLS_SSL_CLI_C)
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 80ab442:	682b      	ldr	r3, [r5, #0]
 80ab444:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80ab448:	07db      	lsls	r3, r3, #31
 80ab44a:	d435      	bmi.n	80ab4b8 <mbedtls_ssl_read+0xe4>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 80ab44c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
             * - For server-side, expect CLIENT_HELLO.
             * - Fail (TLS) or silently drop record (DTLS) in other cases.
             */

#if defined(MBEDTLS_SSL_CLI_C)
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 80ab44e:	781b      	ldrb	r3, [r3, #0]
 80ab450:	bb53      	cbnz	r3, 80ab4a8 <mbedtls_ssl_read+0xd4>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 80ab452:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80ab454:	2b04      	cmp	r3, #4
 80ab456:	d127      	bne.n	80ab4a8 <mbedtls_ssl_read+0xd4>
 80ab458:	e02e      	b.n	80ab4b8 <mbedtls_ssl_read+0xe4>
            }
        }
#endif /* MBEDTLS_SSL_RENEGOTIATION */

        /* Fatal and closure alerts handled by mbedtls_ssl_read_record() */
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 80ab45a:	2b15      	cmp	r3, #21
 80ab45c:	d022      	beq.n	80ab4a4 <mbedtls_ssl_read+0xd0>
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
            return( MBEDTLS_ERR_SSL_WANT_READ );
        }

        if( ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 80ab45e:	2b17      	cmp	r3, #23
 80ab460:	d122      	bne.n	80ab4a8 <mbedtls_ssl_read+0xd4>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
        }

        ssl->in_offt = ssl->in_msg;
 80ab462:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80ab464:	66ab      	str	r3, [r5, #104]	; 0x68

        /* We're going to return something now, cancel timer,
         * except if handshake (renegotiation) is in progress */
        if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 80ab466:	686b      	ldr	r3, [r5, #4]
 80ab468:	2b10      	cmp	r3, #16
 80ab46a:	d1c6      	bne.n	80ab3fa <mbedtls_ssl_read+0x26>
            ssl_set_timer( ssl, 0 );
 80ab46c:	2100      	movs	r1, #0
 80ab46e:	4628      	mov	r0, r5
 80ab470:	f7fe feaf 	bl	80aa1d2 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>
 80ab474:	e7c1      	b.n	80ab3fa <mbedtls_ssl_read+0x26>
        }
#endif /* MBEDTLS_SSL_SRV_C && MBEDTLS_SSL_RENEGOTIATION */
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    }

    n = ( len < ssl->in_msglen )
 80ab476:	6f28      	ldr	r0, [r5, #112]	; 0x70
 80ab478:	4284      	cmp	r4, r0
 80ab47a:	bf28      	it	cs
 80ab47c:	4604      	movcs	r4, r0
        ? len : ssl->in_msglen;

    memcpy( buf, ssl->in_offt, n );
 80ab47e:	4630      	mov	r0, r6
 80ab480:	4622      	mov	r2, r4
 80ab482:	f007 f9b8 	bl	80b27f6 <memcpy>
    ssl->in_msglen -= n;
 80ab486:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80ab488:	1b1b      	subs	r3, r3, r4
 80ab48a:	672b      	str	r3, [r5, #112]	; 0x70

    if( ssl->in_msglen == 0 )
 80ab48c:	b91b      	cbnz	r3, 80ab496 <mbedtls_ssl_read+0xc2>
    {
        /* all bytes consumed */
        ssl->in_offt = NULL;
 80ab48e:	66ab      	str	r3, [r5, #104]	; 0x68
        ssl->keep_current_message = 0;
 80ab490:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
 80ab494:	e002      	b.n	80ab49c <mbedtls_ssl_read+0xc8>
    }
    else
    {
        /* more data available */
        ssl->in_offt += n;
 80ab496:	6eab      	ldr	r3, [r5, #104]	; 0x68
 80ab498:	4423      	add	r3, r4
 80ab49a:	66ab      	str	r3, [r5, #104]	; 0x68
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );

    return( (int) n );
 80ab49c:	4620      	mov	r0, r4
 80ab49e:	bd70      	pop	{r4, r5, r6, pc}
{
    int ret;
    size_t n;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80ab4a0:	480c      	ldr	r0, [pc, #48]	; (80ab4d4 <mbedtls_ssl_read+0x100>)
 80ab4a2:	bd70      	pop	{r4, r5, r6, pc}

        /* Fatal and closure alerts handled by mbedtls_ssl_read_record() */
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
            return( MBEDTLS_ERR_SSL_WANT_READ );
 80ab4a4:	480c      	ldr	r0, [pc, #48]	; (80ab4d8 <mbedtls_ssl_read+0x104>)
 80ab4a6:	bd70      	pop	{r4, r5, r6, pc}
                if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
                {
                    continue;
                }
#endif
                return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80ab4a8:	480c      	ldr	r0, [pc, #48]	; (80ab4dc <mbedtls_ssl_read+0x108>)
 80ab4aa:	bd70      	pop	{r4, r5, r6, pc}
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
            ssl->f_get_timer( ssl->p_timer ) == -1 )
        {
            ssl_set_timer( ssl, ssl->conf->read_timeout );
 80ab4ac:	682b      	ldr	r3, [r5, #0]
 80ab4ae:	4628      	mov	r0, r5
 80ab4b0:	6f59      	ldr	r1, [r3, #116]	; 0x74
 80ab4b2:	f7fe fe8e 	bl	80aa1d2 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>
 80ab4b6:	e7a9      	b.n	80ab40c <mbedtls_ssl_read+0x38>
                }
                else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
                if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 80ab4b8:	68eb      	ldr	r3, [r5, #12]
 80ab4ba:	2b00      	cmp	r3, #0
 80ab4bc:	dd07      	ble.n	80ab4ce <mbedtls_ssl_read+0xfa>
                {
                    if( ( ret = mbedtls_ssl_send_alert_message( ssl,
 80ab4be:	2264      	movs	r2, #100	; 0x64
 80ab4c0:	2101      	movs	r1, #1
 80ab4c2:	4628      	mov	r0, r5
 80ab4c4:	f7ff fbfa 	bl	80aacbc <mbedtls_ssl_send_alert_message>
 80ab4c8:	2800      	cmp	r0, #0
 80ab4ca:	d096      	beq.n	80ab3fa <mbedtls_ssl_read+0x26>
 80ab4cc:	bd70      	pop	{r4, r5, r6, pc}
                else
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 ||
          MBEDTLS_SSL_PROTO_TLS1_2 */
                {
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80ab4ce:	4804      	ldr	r0, [pc, #16]	; (80ab4e0 <mbedtls_ssl_read+0x10c>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );

    return( (int) n );
}
 80ab4d0:	bd70      	pop	{r4, r5, r6, pc}
 80ab4d2:	bf00      	nop
 80ab4d4:	ffff8f00 	.word	0xffff8f00
 80ab4d8:	ffff9700 	.word	0xffff9700
 80ab4dc:	ffff8900 	.word	0xffff8900
 80ab4e0:	ffff9400 	.word	0xffff9400

080ab4e4 <mbedtls_ssl_write>:

/*
 * Write application data (public-facing wrapper)
 */
int mbedtls_ssl_write( mbedtls_ssl_context *ssl, const unsigned char *buf, size_t len )
{
 80ab4e4:	b570      	push	{r4, r5, r6, lr}
 80ab4e6:	460e      	mov	r6, r1
 80ab4e8:	4615      	mov	r5, r2
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );

    if( ssl == NULL || ssl->conf == NULL )
 80ab4ea:	4604      	mov	r4, r0
 80ab4ec:	b368      	cbz	r0, 80ab54a <mbedtls_ssl_write+0x66>
 80ab4ee:	6803      	ldr	r3, [r0, #0]
 80ab4f0:	b35b      	cbz	r3, 80ab54a <mbedtls_ssl_write+0x66>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        return( ret );
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 80ab4f2:	6843      	ldr	r3, [r0, #4]
 80ab4f4:	2b10      	cmp	r3, #16
 80ab4f6:	d105      	bne.n	80ab504 <mbedtls_ssl_write+0x20>
 * corresponding return code is 0 on success.
 */
static int ssl_write_real( mbedtls_ssl_context *ssl,
                           const unsigned char *buf, size_t len )
{
    int ret = mbedtls_ssl_get_max_out_record_payload( ssl );
 80ab4f8:	4620      	mov	r0, r4
 80ab4fa:	f7ff ff3b 	bl	80ab374 <mbedtls_ssl_get_max_out_record_payload>
    const size_t max_len = (size_t) ret;

    if( ret < 0 )
 80ab4fe:	2800      	cmp	r0, #0
 80ab500:	da05      	bge.n	80ab50e <mbedtls_ssl_write+0x2a>
 80ab502:	bd70      	pop	{r4, r5, r6, pc}
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
    {
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
 80ab504:	f7ff ff52 	bl	80ab3ac <mbedtls_ssl_handshake>
 80ab508:	2800      	cmp	r0, #0
 80ab50a:	d0f5      	beq.n	80ab4f8 <mbedtls_ssl_write+0x14>
 80ab50c:	bd70      	pop	{r4, r5, r6, pc}
        else
#endif
            len = max_len;
    }

    if( ssl->out_left != 0 )
 80ab50e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80ab512:	4285      	cmp	r5, r0
 80ab514:	bf28      	it	cs
 80ab516:	4605      	movcs	r5, r0
 80ab518:	b12b      	cbz	r3, 80ab526 <mbedtls_ssl_write+0x42>
         * The user has previously tried to send the data and
         * MBEDTLS_ERR_SSL_WANT_WRITE or the message was only partially
         * written. In this case, we expect the high-level write function
         * (e.g. mbedtls_ssl_write()) to be called with the same parameters
         */
        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 80ab51a:	4620      	mov	r0, r4
 80ab51c:	f7ff fa1e 	bl	80aa95c <mbedtls_ssl_flush_output>
 80ab520:	b9a0      	cbnz	r0, 80ab54c <mbedtls_ssl_write+0x68>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
            return( ret );
        }
    }

    return( (int) len );
 80ab522:	4628      	mov	r0, r5
 80ab524:	bd70      	pop	{r4, r5, r6, pc}
         * The user is trying to send a message the first time, so we need to
         * copy the data into the internal buffers and setup the data structure
         * to keep track of partial writes
         */
        ssl->out_msglen  = len;
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 80ab526:	2317      	movs	r3, #23
        memcpy( ssl->out_msg, buf, len );
 80ab528:	4631      	mov	r1, r6
        /*
         * The user is trying to send a message the first time, so we need to
         * copy the data into the internal buffers and setup the data structure
         * to keep track of partial writes
         */
        ssl->out_msglen  = len;
 80ab52a:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 80ab52e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        memcpy( ssl->out_msg, buf, len );
 80ab532:	462a      	mov	r2, r5
 80ab534:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 80ab538:	f007 f95d 	bl	80b27f6 <memcpy>

        if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
 80ab53c:	2101      	movs	r1, #1
 80ab53e:	4620      	mov	r0, r4
 80ab540:	f7ff fa3a 	bl	80aa9b8 <mbedtls_ssl_write_record>
 80ab544:	2800      	cmp	r0, #0
 80ab546:	d0ec      	beq.n	80ab522 <mbedtls_ssl_write+0x3e>
 80ab548:	bd70      	pop	{r4, r5, r6, pc}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80ab54a:	4801      	ldr	r0, [pc, #4]	; (80ab550 <mbedtls_ssl_write+0x6c>)
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write" ) );

    return( ret );
}
 80ab54c:	bd70      	pop	{r4, r5, r6, pc}
 80ab54e:	bf00      	nop
 80ab550:	ffff8f00 	.word	0xffff8f00

080ab554 <mbedtls_ssl_transform_free>:

    return( 0 );
}

void mbedtls_ssl_transform_free( mbedtls_ssl_transform *transform )
{
 80ab554:	b510      	push	{r4, lr}
    if( transform == NULL )
 80ab556:	4604      	mov	r4, r0
 80ab558:	b1a0      	cbz	r0, 80ab584 <mbedtls_ssl_transform_free+0x30>
#if defined(MBEDTLS_ZLIB_SUPPORT)
    deflateEnd( &transform->ctx_deflate );
    inflateEnd( &transform->ctx_inflate );
#endif

    mbedtls_cipher_free( &transform->cipher_ctx_enc );
 80ab55a:	3050      	adds	r0, #80	; 0x50
 80ab55c:	f7f5 fee4 	bl	80a1328 <mbedtls_cipher_free>
    mbedtls_cipher_free( &transform->cipher_ctx_dec );
 80ab560:	f104 0088 	add.w	r0, r4, #136	; 0x88
 80ab564:	f7f5 fee0 	bl	80a1328 <mbedtls_cipher_free>

    mbedtls_md_free( &transform->md_ctx_enc );
 80ab568:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80ab56c:	f7fc fe01 	bl	80a8172 <mbedtls_md_free>
    mbedtls_md_free( &transform->md_ctx_dec );
 80ab570:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80ab574:	f7fc fdfd 	bl	80a8172 <mbedtls_md_free>

    mbedtls_platform_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 80ab578:	4620      	mov	r0, r4
}
 80ab57a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_cipher_free( &transform->cipher_ctx_dec );

    mbedtls_md_free( &transform->md_ctx_enc );
    mbedtls_md_free( &transform->md_ctx_dec );

    mbedtls_platform_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 80ab57e:	21c0      	movs	r1, #192	; 0xc0
 80ab580:	f7fa bf46 	b.w	80a6410 <mbedtls_platform_zeroize>
 80ab584:	bd10      	pop	{r4, pc}

080ab586 <mbedtls_ssl_handshake_free>:
}

#endif /* MBEDTLS_SSL_PROTO_DTLS */

void mbedtls_ssl_handshake_free( mbedtls_ssl_context *ssl )
{
 80ab586:	b538      	push	{r3, r4, r5, lr}
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
 80ab588:	6b04      	ldr	r4, [r0, #48]	; 0x30

    if( handshake == NULL )
 80ab58a:	b344      	cbz	r4, 80ab5de <mbedtls_ssl_handshake_free+0x58>
    mbedtls_md5_free(    &handshake->fin_md5  );
    mbedtls_sha1_free(   &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_free(   &handshake->fin_sha256    );
 80ab58c:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 80ab590:	f7f5 f82e 	bl	80a05f0 <mbedtls_sha256_free>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_free(   &handshake->fin_sha512    );
 80ab594:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
 80ab598:	f003 f860 	bl	80ae65c <mbedtls_sha512_free>

#if defined(MBEDTLS_DHM_C)
    mbedtls_dhm_free( &handshake->dhm_ctx );
#endif
#if defined(MBEDTLS_ECDH_C)
    mbedtls_ecdh_free( &handshake->ecdh_ctx );
 80ab59c:	1d20      	adds	r0, r4, #4
 80ab59e:	f7f5 fdfd 	bl	80a119c <mbedtls_ecdh_free>
#endif

#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
    /* explicit void pointer cast for buggy MS compiler */
    mbedtls_free( (void *) handshake->curves );
 80ab5a2:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
 80ab5a6:	f005 fd9f 	bl	80b10e8 <free>
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    if( handshake->psk != NULL )
 80ab5aa:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 80ab5ae:	b138      	cbz	r0, 80ab5c0 <mbedtls_ssl_handshake_free+0x3a>
    {
        mbedtls_platform_zeroize( handshake->psk, handshake->psk_len );
 80ab5b0:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
 80ab5b4:	f7fa ff2c 	bl	80a6410 <mbedtls_platform_zeroize>
        mbedtls_free( handshake->psk );
 80ab5b8:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 80ab5bc:	f005 fd94 	bl	80b10e8 <free>
    defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    /*
     * Free only the linked list wrapper, not the keys themselves
     * since the belong to the SNI callback
     */
    if( handshake->sni_key_cert != NULL )
 80ab5c0:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
 80ab5c4:	b930      	cbnz	r0, 80ab5d4 <mbedtls_ssl_handshake_free+0x4e>
    ssl_flight_free( handshake->flight );
    ssl_buffering_free( ssl );
#endif

    mbedtls_platform_zeroize( handshake,
                              sizeof( mbedtls_ssl_handshake_params ) );
 80ab5c6:	4620      	mov	r0, r4
}
 80ab5c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssl_flight_free( handshake->flight );
    ssl_buffering_free( ssl );
#endif

    mbedtls_platform_zeroize( handshake,
                              sizeof( mbedtls_ssl_handshake_params ) );
 80ab5cc:	f44f 7158 	mov.w	r1, #864	; 0x360
 80ab5d0:	f7fa bf1e 	b.w	80a6410 <mbedtls_platform_zeroize>
    {
        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;

        while( cur != NULL )
        {
            next = cur->next;
 80ab5d4:	6885      	ldr	r5, [r0, #8]
            mbedtls_free( cur );
 80ab5d6:	f005 fd87 	bl	80b10e8 <free>
     */
    if( handshake->sni_key_cert != NULL )
    {
        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;

        while( cur != NULL )
 80ab5da:	4628      	mov	r0, r5
 80ab5dc:	e7f2      	b.n	80ab5c4 <mbedtls_ssl_handshake_free+0x3e>
 80ab5de:	bd38      	pop	{r3, r4, r5, pc}

080ab5e0 <mbedtls_ssl_session_free>:
    mbedtls_platform_zeroize( handshake,
                              sizeof( mbedtls_ssl_handshake_params ) );
}

void mbedtls_ssl_session_free( mbedtls_ssl_session *session )
{
 80ab5e0:	b510      	push	{r4, lr}
    if( session == NULL )
 80ab5e2:	4604      	mov	r4, r0
 80ab5e4:	b178      	cbz	r0, 80ab606 <mbedtls_ssl_session_free+0x26>
        return;

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( session->peer_cert != NULL )
 80ab5e6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80ab5e8:	b120      	cbz	r0, 80ab5f4 <mbedtls_ssl_session_free+0x14>
    {
        mbedtls_x509_crt_free( session->peer_cert );
 80ab5ea:	f7fe f8a0 	bl	80a972e <mbedtls_x509_crt_free>
        mbedtls_free( session->peer_cert );
 80ab5ee:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80ab5f0:	f005 fd7a 	bl	80b10e8 <free>
    }
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
 80ab5f4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80ab5f6:	f005 fd77 	bl	80b10e8 <free>
#endif

    mbedtls_platform_zeroize( session, sizeof( mbedtls_ssl_session ) );
 80ab5fa:	4620      	mov	r0, r4
}
 80ab5fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
#endif

    mbedtls_platform_zeroize( session, sizeof( mbedtls_ssl_session ) );
 80ab600:	2174      	movs	r1, #116	; 0x74
 80ab602:	f7fa bf05 	b.w	80a6410 <mbedtls_platform_zeroize>
 80ab606:	bd10      	pop	{r4, pc}

080ab608 <mbedtls_ssl_handshake_wrapup>:

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
}

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
 80ab608:	b538      	push	{r3, r4, r5, lr}
 80ab60a:	4604      	mov	r4, r0
    int resume = ssl->handshake->resume;
 80ab60c:	6b03      	ldr	r3, [r0, #48]	; 0x30
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
 80ab60e:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
}

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
    int resume = ssl->handshake->resume;
 80ab610:	f8d3 5348 	ldr.w	r5, [r3, #840]	; 0x348
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
 80ab614:	b120      	cbz	r0, 80ab620 <mbedtls_ssl_handshake_wrapup+0x18>
        /* RFC 7366 3.1: keep the EtM state */
        ssl->session_negotiate->encrypt_then_mac =
                  ssl->session->encrypt_then_mac;
#endif

        mbedtls_ssl_session_free( ssl->session );
 80ab616:	f7ff ffe3 	bl	80ab5e0 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 80ab61a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80ab61c:	f005 fd64 	bl	80b10e8 <free>
    }
    ssl->session = ssl->session_negotiate;
 80ab620:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ssl->session_negotiate = NULL;
 80ab622:	2300      	movs	r3, #0

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
 80ab624:	6822      	ldr	r2, [r4, #0]
#endif

        mbedtls_ssl_session_free( ssl->session );
        mbedtls_free( ssl->session );
    }
    ssl->session = ssl->session_negotiate;
 80ab626:	62a1      	str	r1, [r4, #40]	; 0x28
    ssl->session_negotiate = NULL;
 80ab628:	62e3      	str	r3, [r4, #44]	; 0x2c

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
 80ab62a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80ab62c:	b123      	cbz	r3, 80ab638 <mbedtls_ssl_handshake_wrapup+0x30>
 80ab62e:	6888      	ldr	r0, [r1, #8]
 80ab630:	b110      	cbz	r0, 80ab638 <mbedtls_ssl_handshake_wrapup+0x30>
        ssl->session->id_len != 0 &&
 80ab632:	b90d      	cbnz	r5, 80ab638 <mbedtls_ssl_handshake_wrapup+0x30>
        resume == 0 )
    {
        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
 80ab634:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80ab636:	4798      	blx	r3
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup: final free" ) );

    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl );
 80ab638:	4620      	mov	r0, r4
 80ab63a:	f7ff ffa4 	bl	80ab586 <mbedtls_ssl_handshake_free>
    mbedtls_free( ssl->handshake );
 80ab63e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80ab640:	f005 fd52 	bl	80b10e8 <free>
    ssl->handshake = NULL;

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
 80ab644:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl );
    mbedtls_free( ssl->handshake );
    ssl->handshake = NULL;
 80ab646:	2300      	movs	r3, #0
 80ab648:	6323      	str	r3, [r4, #48]	; 0x30

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
 80ab64a:	b120      	cbz	r0, 80ab656 <mbedtls_ssl_handshake_wrapup+0x4e>
    {
        mbedtls_ssl_transform_free( ssl->transform );
 80ab64c:	f7ff ff82 	bl	80ab554 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 80ab650:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80ab652:	f005 fd49 	bl	80b10e8 <free>
    }
    ssl->transform = ssl->transform_negotiate;
 80ab656:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80ab658:	63e3      	str	r3, [r4, #60]	; 0x3c
    ssl->transform_negotiate = NULL;
 80ab65a:	2300      	movs	r3, #0
 80ab65c:	6423      	str	r3, [r4, #64]	; 0x40
    }
    else
#endif
        ssl_handshake_wrapup_free_hs_transform( ssl );

    ssl->state++;
 80ab65e:	6863      	ldr	r3, [r4, #4]
 80ab660:	3301      	adds	r3, #1
 80ab662:	6063      	str	r3, [r4, #4]
 80ab664:	bd38      	pop	{r3, r4, r5, pc}
	...

080ab668 <_ZL18ssl_handshake_initP19mbedtls_ssl_context>:
{
    memset( session, 0, sizeof(mbedtls_ssl_session) );
}

static int ssl_handshake_init( mbedtls_ssl_context *ssl )
{
 80ab668:	b538      	push	{r3, r4, r5, lr}
 80ab66a:	4604      	mov	r4, r0
    /* Clear old handshake information if present */
    if( ssl->transform_negotiate )
 80ab66c:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80ab66e:	b108      	cbz	r0, 80ab674 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xc>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 80ab670:	f7ff ff70 	bl	80ab554 <mbedtls_ssl_transform_free>
    if( ssl->session_negotiate )
 80ab674:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80ab676:	b108      	cbz	r0, 80ab67c <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x14>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 80ab678:	f7ff ffb2 	bl	80ab5e0 <mbedtls_ssl_session_free>
    if( ssl->handshake )
 80ab67c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80ab67e:	b113      	cbz	r3, 80ab686 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x1e>
        mbedtls_ssl_handshake_free( ssl );
 80ab680:	4620      	mov	r0, r4
 80ab682:	f7ff ff80 	bl	80ab586 <mbedtls_ssl_handshake_free>

    /*
     * Either the pointers are now NULL or cleared properly and can be freed.
     * Now allocate missing structures.
     */
    if( ssl->transform_negotiate == NULL )
 80ab686:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80ab688:	b923      	cbnz	r3, 80ab694 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x2c>
    {
        ssl->transform_negotiate = (mbedtls_ssl_transform *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
 80ab68a:	21c0      	movs	r1, #192	; 0xc0
 80ab68c:	2001      	movs	r0, #1
 80ab68e:	f006 ff95 	bl	80b25bc <calloc>
 80ab692:	6420      	str	r0, [r4, #64]	; 0x40
    }

    if( ssl->session_negotiate == NULL )
 80ab694:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80ab696:	b923      	cbnz	r3, 80ab6a2 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x3a>
    {
        ssl->session_negotiate = (mbedtls_ssl_session *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
 80ab698:	2174      	movs	r1, #116	; 0x74
 80ab69a:	2001      	movs	r0, #1
 80ab69c:	f006 ff8e 	bl	80b25bc <calloc>
 80ab6a0:	62e0      	str	r0, [r4, #44]	; 0x2c
    }

    if( ssl->handshake == NULL )
 80ab6a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80ab6a4:	b92b      	cbnz	r3, 80ab6b2 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x4a>
    {
        ssl->handshake = (mbedtls_ssl_handshake_params *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
 80ab6a6:	f44f 7158 	mov.w	r1, #864	; 0x360
 80ab6aa:	2001      	movs	r0, #1
 80ab6ac:	f006 ff86 	bl	80b25bc <calloc>
 80ab6b0:	6320      	str	r0, [r4, #48]	; 0x30
    }

    /* All pointers should exist and can be directly freed without issue */
    if( ssl->handshake == NULL ||
 80ab6b2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80ab6b4:	b118      	cbz	r0, 80ab6be <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x56>
 80ab6b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80ab6b8:	b10b      	cbz	r3, 80ab6be <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x56>
        ssl->transform_negotiate == NULL ||
        ssl->session_negotiate == NULL )
 80ab6ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        ssl->handshake = (mbedtls_ssl_handshake_params *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
    }

    /* All pointers should exist and can be directly freed without issue */
    if( ssl->handshake == NULL ||
        ssl->transform_negotiate == NULL ||
 80ab6bc:	b96b      	cbnz	r3, 80ab6da <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x72>
        ssl->session_negotiate == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc() of ssl sub-contexts failed" ) );

        mbedtls_free( ssl->handshake );
 80ab6be:	f005 fd13 	bl	80b10e8 <free>
        mbedtls_free( ssl->transform_negotiate );
 80ab6c2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80ab6c4:	f005 fd10 	bl	80b10e8 <free>
        mbedtls_free( ssl->session_negotiate );
 80ab6c8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80ab6ca:	f005 fd0d 	bl	80b10e8 <free>

        ssl->handshake = NULL;
 80ab6ce:	2300      	movs	r3, #0
 80ab6d0:	6323      	str	r3, [r4, #48]	; 0x30
        ssl->transform_negotiate = NULL;
 80ab6d2:	6423      	str	r3, [r4, #64]	; 0x40
        ssl->session_negotiate = NULL;
 80ab6d4:	62e3      	str	r3, [r4, #44]	; 0x2c

        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 80ab6d6:	4821      	ldr	r0, [pc, #132]	; (80ab75c <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xf4>)
 80ab6d8:	bd38      	pop	{r3, r4, r5, pc}
    }

    /* Initialize structures */
    mbedtls_ssl_session_init( ssl->session_negotiate );
 80ab6da:	4618      	mov	r0, r3
 80ab6dc:	f7ff fda2 	bl	80ab224 <mbedtls_ssl_session_init>
    ssl_transform_init( ssl->transform_negotiate );
 80ab6e0:	6c25      	ldr	r5, [r4, #64]	; 0x40
#endif
}

static void ssl_transform_init( mbedtls_ssl_transform *transform )
{
    memset( transform, 0, sizeof(mbedtls_ssl_transform) );
 80ab6e2:	22c0      	movs	r2, #192	; 0xc0
 80ab6e4:	2100      	movs	r1, #0
 80ab6e6:	4628      	mov	r0, r5
 80ab6e8:	f007 f8ab 	bl	80b2842 <memset>

    mbedtls_cipher_init( &transform->cipher_ctx_enc );
 80ab6ec:	f105 0050 	add.w	r0, r5, #80	; 0x50
 80ab6f0:	f7f5 fe16 	bl	80a1320 <mbedtls_cipher_init>
    mbedtls_cipher_init( &transform->cipher_ctx_dec );
 80ab6f4:	f105 0088 	add.w	r0, r5, #136	; 0x88
 80ab6f8:	f7f5 fe12 	bl	80a1320 <mbedtls_cipher_init>

    mbedtls_md_init( &transform->md_ctx_enc );
 80ab6fc:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80ab700:	f7fc fd32 	bl	80a8168 <mbedtls_md_init>
    mbedtls_md_init( &transform->md_ctx_dec );
 80ab704:	f105 0044 	add.w	r0, r5, #68	; 0x44
 80ab708:	f7fc fd2e 	bl	80a8168 <mbedtls_md_init>
    }

    /* Initialize structures */
    mbedtls_ssl_session_init( ssl->session_negotiate );
    ssl_transform_init( ssl->transform_negotiate );
    ssl_handshake_params_init( ssl->handshake );
 80ab70c:	6b24      	ldr	r4, [r4, #48]	; 0x30
    return( 0 );
}

static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
{
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 80ab70e:	f44f 7258 	mov.w	r2, #864	; 0x360
     mbedtls_md5_starts_ret( &handshake->fin_md5  );
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 80ab712:	f504 75ac 	add.w	r5, r4, #344	; 0x158
    return( 0 );
}

static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
{
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 80ab716:	2100      	movs	r1, #0
 80ab718:	4620      	mov	r0, r4
 80ab71a:	f007 f892 	bl	80b2842 <memset>
     mbedtls_md5_starts_ret( &handshake->fin_md5  );
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 80ab71e:	4628      	mov	r0, r5
 80ab720:	f7f4 ff62 	bl	80a05e8 <mbedtls_sha256_init>
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
 80ab724:	2100      	movs	r1, #0
 80ab726:	4628      	mov	r0, r5
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_init(   &handshake->fin_sha512    );
 80ab728:	f504 75e4 	add.w	r5, r4, #456	; 0x1c8
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
 80ab72c:	f7f4 ff6a 	bl	80a0604 <mbedtls_sha256_starts_ret>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_init(   &handshake->fin_sha512    );
 80ab730:	4628      	mov	r0, r5
 80ab732:	f002 ff8f 	bl	80ae654 <mbedtls_sha512_init>
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
 80ab736:	2101      	movs	r1, #1
 80ab738:	4628      	mov	r0, r5
 80ab73a:	f002 ff99 	bl	80ae670 <mbedtls_sha512_starts_ret>
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    handshake->update_checksum = ssl_update_checksum_start;
 80ab73e:	4b08      	ldr	r3, [pc, #32]	; (80ab760 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xf8>)

/* Allow exactly one hash algorithm for each signature. */
void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
                                          mbedtls_md_type_t md_alg )
{
    set->rsa   = md_alg;
 80ab740:	2500      	movs	r5, #0
    mbedtls_sha512_init(   &handshake->fin_sha512    );
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    handshake->update_checksum = ssl_update_checksum_start;
 80ab742:	f8c4 32a0 	str.w	r3, [r4, #672]	; 0x2a0

#if defined(MBEDTLS_DHM_C)
    mbedtls_dhm_init( &handshake->dhm_ctx );
#endif
#if defined(MBEDTLS_ECDH_C)
    mbedtls_ecdh_init( &handshake->ecdh_ctx );
 80ab746:	1d20      	adds	r0, r4, #4

/* Allow exactly one hash algorithm for each signature. */
void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
                                          mbedtls_md_type_t md_alg )
{
    set->rsa   = md_alg;
 80ab748:	7025      	strb	r5, [r4, #0]
    set->ecdsa = md_alg;
 80ab74a:	7065      	strb	r5, [r4, #1]

#if defined(MBEDTLS_DHM_C)
    mbedtls_dhm_init( &handshake->dhm_ctx );
#endif
#if defined(MBEDTLS_ECDH_C)
    mbedtls_ecdh_init( &handshake->ecdh_ctx );
 80ab74c:	f7f5 fd02 	bl	80a1154 <mbedtls_ecdh_init>
#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
    mbedtls_x509_crt_restart_init( &handshake->ecrs_ctx );
#endif

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
 80ab750:	2303      	movs	r3, #3
 80ab752:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148

        ssl_set_timer( ssl, 0 );
    }
#endif

    return( 0 );
 80ab756:	4628      	mov	r0, r5
}
 80ab758:	bd38      	pop	{r3, r4, r5, pc}
 80ab75a:	bf00      	nop
 80ab75c:	ffff8100 	.word	0xffff8100
 80ab760:	080aa4f1 	.word	0x080aa4f1

080ab764 <mbedtls_ssl_setup>:
    ssl_update_in_pointers ( ssl, NULL /* no transform enabled */ );
}

int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
 80ab764:	b538      	push	{r3, r4, r5, lr}
    /*
     * Prepare base structures
     */

    /* Set to NULL in case of an error condition */
    ssl->out_buf = NULL;
 80ab766:	2300      	movs	r3, #0
int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
    int ret;

    ssl->conf = conf;
 80ab768:	6001      	str	r1, [r0, #0]
    ssl_update_in_pointers ( ssl, NULL /* no transform enabled */ );
}

int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
 80ab76a:	4604      	mov	r4, r0
    /*
     * Prepare base structures
     */

    /* Set to NULL in case of an error condition */
    ssl->out_buf = NULL;
 80ab76c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

    ssl->in_buf = (unsigned char *)mbedtls_calloc( 1, MBEDTLS_SSL_IN_BUFFER_LEN );
 80ab770:	f242 012d 	movw	r1, #8237	; 0x202d
 80ab774:	2001      	movs	r0, #1
 80ab776:	f006 ff21 	bl	80b25bc <calloc>
 80ab77a:	6520      	str	r0, [r4, #80]	; 0x50
    if( ssl->in_buf == NULL )
 80ab77c:	b908      	cbnz	r0, 80ab782 <mbedtls_ssl_setup+0x1e>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", MBEDTLS_SSL_IN_BUFFER_LEN) );
        ret = MBEDTLS_ERR_SSL_ALLOC_FAILED;
 80ab77e:	4d18      	ldr	r5, [pc, #96]	; (80ab7e0 <mbedtls_ssl_setup+0x7c>)
 80ab780:	e010      	b.n	80ab7a4 <mbedtls_ssl_setup+0x40>
        goto error;
    }

    ssl->out_buf = (unsigned char *)mbedtls_calloc( 1, MBEDTLS_SSL_OUT_BUFFER_LEN );
 80ab782:	f242 012d 	movw	r1, #8237	; 0x202d
 80ab786:	2001      	movs	r0, #1
 80ab788:	f006 ff18 	bl	80b25bc <calloc>
 80ab78c:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if( ssl->out_buf == NULL )
 80ab790:	2800      	cmp	r0, #0
 80ab792:	d0f4      	beq.n	80ab77e <mbedtls_ssl_setup+0x1a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", MBEDTLS_SSL_OUT_BUFFER_LEN) );
        ret = MBEDTLS_ERR_SSL_ALLOC_FAILED;
        goto error;
    }

    ssl_reset_in_out_pointers( ssl );
 80ab794:	4620      	mov	r0, r4
 80ab796:	f7fe febd 	bl	80aa514 <_ZL25ssl_reset_in_out_pointersP19mbedtls_ssl_context>

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 80ab79a:	4620      	mov	r0, r4
 80ab79c:	f7ff ff64 	bl	80ab668 <_ZL18ssl_handshake_initP19mbedtls_ssl_context>
 80ab7a0:	4605      	mov	r5, r0
 80ab7a2:	b1d0      	cbz	r0, 80ab7da <mbedtls_ssl_setup+0x76>
        goto error;

    return( 0 );

error:
    mbedtls_free( ssl->in_buf );
 80ab7a4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80ab7a6:	f005 fc9f 	bl	80b10e8 <free>
    mbedtls_free( ssl->out_buf );
 80ab7aa:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80ab7ae:	f005 fc9b 	bl	80b10e8 <free>

    ssl->conf = NULL;
 80ab7b2:	2300      	movs	r3, #0
 80ab7b4:	6023      	str	r3, [r4, #0]

    ssl->in_buf = NULL;
 80ab7b6:	6523      	str	r3, [r4, #80]	; 0x50
    ssl->out_buf = NULL;
 80ab7b8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

    ssl->in_hdr = NULL;
 80ab7bc:	65a3      	str	r3, [r4, #88]	; 0x58
    ssl->in_ctr = NULL;
 80ab7be:	6563      	str	r3, [r4, #84]	; 0x54
    ssl->in_len = NULL;
 80ab7c0:	65e3      	str	r3, [r4, #92]	; 0x5c
    ssl->in_iv = NULL;
 80ab7c2:	6623      	str	r3, [r4, #96]	; 0x60
    ssl->in_msg = NULL;
 80ab7c4:	6663      	str	r3, [r4, #100]	; 0x64

    ssl->out_hdr = NULL;
 80ab7c6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    ssl->out_ctr = NULL;
 80ab7ca:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    ssl->out_len = NULL;
 80ab7ce:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    ssl->out_iv = NULL;
 80ab7d2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    ssl->out_msg = NULL;
 80ab7d6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98

    return( ret );
}
 80ab7da:	4628      	mov	r0, r5
 80ab7dc:	bd38      	pop	{r3, r4, r5, pc}
 80ab7de:	bf00      	nop
 80ab7e0:	ffff8100 	.word	0xffff8100

080ab7e4 <mbedtls_ssl_free>:

/*
 * Free an SSL context
 */
void mbedtls_ssl_free( mbedtls_ssl_context *ssl )
{
 80ab7e4:	b538      	push	{r3, r4, r5, lr}
    if( ssl == NULL )
 80ab7e6:	4604      	mov	r4, r0
 80ab7e8:	2800      	cmp	r0, #0
 80ab7ea:	d049      	beq.n	80ab880 <mbedtls_ssl_free+0x9c>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> free" ) );

    if( ssl->out_buf != NULL )
 80ab7ec:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 80ab7f0:	b138      	cbz	r0, 80ab802 <mbedtls_ssl_free+0x1e>
    {
        mbedtls_platform_zeroize( ssl->out_buf, MBEDTLS_SSL_OUT_BUFFER_LEN );
 80ab7f2:	f242 012d 	movw	r1, #8237	; 0x202d
 80ab7f6:	f7fa fe0b 	bl	80a6410 <mbedtls_platform_zeroize>
        mbedtls_free( ssl->out_buf );
 80ab7fa:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80ab7fe:	f005 fc73 	bl	80b10e8 <free>
    }

    if( ssl->in_buf != NULL )
 80ab802:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80ab804:	b130      	cbz	r0, 80ab814 <mbedtls_ssl_free+0x30>
    {
        mbedtls_platform_zeroize( ssl->in_buf, MBEDTLS_SSL_IN_BUFFER_LEN );
 80ab806:	f242 012d 	movw	r1, #8237	; 0x202d
 80ab80a:	f7fa fe01 	bl	80a6410 <mbedtls_platform_zeroize>
        mbedtls_free( ssl->in_buf );
 80ab80e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80ab810:	f005 fc6a 	bl	80b10e8 <free>
        mbedtls_platform_zeroize( ssl->compress_buf, MBEDTLS_SSL_COMPRESS_BUFFER_LEN );
        mbedtls_free( ssl->compress_buf );
    }
#endif

    if( ssl->transform )
 80ab814:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80ab816:	b120      	cbz	r0, 80ab822 <mbedtls_ssl_free+0x3e>
    {
        mbedtls_ssl_transform_free( ssl->transform );
 80ab818:	f7ff fe9c 	bl	80ab554 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 80ab81c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80ab81e:	f005 fc63 	bl	80b10e8 <free>
    }

    if( ssl->handshake )
 80ab822:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80ab824:	b18b      	cbz	r3, 80ab84a <mbedtls_ssl_free+0x66>
    {
        mbedtls_ssl_handshake_free( ssl );
 80ab826:	4620      	mov	r0, r4
 80ab828:	f7ff fead 	bl	80ab586 <mbedtls_ssl_handshake_free>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 80ab82c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80ab82e:	f7ff fe91 	bl	80ab554 <mbedtls_ssl_transform_free>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 80ab832:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80ab834:	f7ff fed4 	bl	80ab5e0 <mbedtls_ssl_session_free>

        mbedtls_free( ssl->handshake );
 80ab838:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80ab83a:	f005 fc55 	bl	80b10e8 <free>
        mbedtls_free( ssl->transform_negotiate );
 80ab83e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80ab840:	f005 fc52 	bl	80b10e8 <free>
        mbedtls_free( ssl->session_negotiate );
 80ab844:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80ab846:	f005 fc4f 	bl	80b10e8 <free>
    }

    if( ssl->session )
 80ab84a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80ab84c:	b120      	cbz	r0, 80ab858 <mbedtls_ssl_free+0x74>
    {
        mbedtls_ssl_session_free( ssl->session );
 80ab84e:	f7ff fec7 	bl	80ab5e0 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 80ab852:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80ab854:	f005 fc48 	bl	80b10e8 <free>
    }

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( ssl->hostname != NULL )
 80ab858:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 80ab85c:	b155      	cbz	r5, 80ab874 <mbedtls_ssl_free+0x90>
    {
        mbedtls_platform_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 80ab85e:	4628      	mov	r0, r5
 80ab860:	f007 f840 	bl	80b28e4 <strlen>
 80ab864:	4601      	mov	r1, r0
 80ab866:	4628      	mov	r0, r5
 80ab868:	f7fa fdd2 	bl	80a6410 <mbedtls_platform_zeroize>
        mbedtls_free( ssl->hostname );
 80ab86c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80ab870:	f005 fc3a 	bl	80b10e8 <free>
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );

    /* Actually clear after last debug message */
    mbedtls_platform_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 80ab874:	4620      	mov	r0, r4
}
 80ab876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );

    /* Actually clear after last debug message */
    mbedtls_platform_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 80ab87a:	21bc      	movs	r1, #188	; 0xbc
 80ab87c:	f7fa bdc8 	b.w	80a6410 <mbedtls_platform_zeroize>
 80ab880:	bd38      	pop	{r3, r4, r5, pc}

080ab882 <mbedtls_ssl_config_init>:
/*
 * Initialze mbedtls_ssl_config
 */
void mbedtls_ssl_config_init( mbedtls_ssl_config *conf )
{
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
 80ab882:	2280      	movs	r2, #128	; 0x80
 80ab884:	2100      	movs	r1, #0
 80ab886:	f006 bfdc 	b.w	80b2842 <memset>
	...

080ab88c <mbedtls_ssl_config_defaults>:
/*
 * Load default in mbedtls_ssl_config
 */
int mbedtls_ssl_config_defaults( mbedtls_ssl_config *conf,
                                 int endpoint, int transport, int preset )
{
 80ab88c:	b510      	push	{r4, lr}
 80ab88e:	4604      	mov	r4, r0
/*
 * SSL set accessors
 */
void mbedtls_ssl_conf_endpoint( mbedtls_ssl_config *conf, int endpoint )
{
    conf->endpoint   = endpoint;
 80ab890:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
 80ab894:	f361 0000 	bfi	r0, r1, #0, #1
}

void mbedtls_ssl_conf_transport( mbedtls_ssl_config *conf, int transport )
{
    conf->transport = transport;
 80ab898:	f362 0041 	bfi	r0, r2, #1, #1
 80ab89c:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c

    /*
     * Things that are common to all presets
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
 80ab8a0:	b951      	cbnz	r1, 80ab8b8 <mbedtls_ssl_config_defaults+0x2c>
    {
        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
 80ab8a2:	2102      	movs	r1, #2
 80ab8a4:	b2c2      	uxtb	r2, r0
 80ab8a6:	f361 0283 	bfi	r2, r1, #2, #2
 80ab8aa:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
        conf->session_tickets = MBEDTLS_SSL_SESSION_TICKETS_ENABLED;
 80ab8ae:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
 80ab8b2:	430a      	orrs	r2, r1
 80ab8b4:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
#endif

    /*
     * Preset-specific defaults
     */
    switch( preset )
 80ab8b8:	2b02      	cmp	r3, #2
 80ab8ba:	f04f 0303 	mov.w	r3, #3
    {
        /*
         * NSA Suite B
         */
        case MBEDTLS_SSL_PRESET_SUITEB:
            conf->min_major_ver = MBEDTLS_SSL_MAJOR_VERSION_3;
 80ab8be:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
            conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_3; /* TLS 1.2 */
 80ab8c2:	f884 307b 	strb.w	r3, [r4, #123]	; 0x7b
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 80ab8c6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
 80ab8ca:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
#endif

    /*
     * Preset-specific defaults
     */
    switch( preset )
 80ab8ce:	d10b      	bne.n	80ab8e8 <mbedtls_ssl_config_defaults+0x5c>

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   ssl_preset_suiteb_ciphersuites;
 80ab8d0:	4b0d      	ldr	r3, [pc, #52]	; (80ab908 <mbedtls_ssl_config_defaults+0x7c>)
 80ab8d2:	60e3      	str	r3, [r4, #12]
 80ab8d4:	60a3      	str	r3, [r4, #8]
 80ab8d6:	6063      	str	r3, [r4, #4]
 80ab8d8:	6023      	str	r3, [r4, #0]

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
 80ab8da:	4b0c      	ldr	r3, [pc, #48]	; (80ab90c <mbedtls_ssl_config_defaults+0x80>)
 80ab8dc:	64e3      	str	r3, [r4, #76]	; 0x4c
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_suiteb_hashes;
 80ab8de:	4b0c      	ldr	r3, [pc, #48]	; (80ab910 <mbedtls_ssl_config_defaults+0x84>)
 80ab8e0:	65e3      	str	r3, [r4, #92]	; 0x5c
#endif

#if defined(MBEDTLS_ECP_C)
            conf->curve_list = ssl_preset_suiteb_curves;
 80ab8e2:	4b0c      	ldr	r3, [pc, #48]	; (80ab914 <mbedtls_ssl_config_defaults+0x88>)
 80ab8e4:	6623      	str	r3, [r4, #96]	; 0x60
#endif
            break;
 80ab8e6:	e00c      	b.n	80ab902 <mbedtls_ssl_config_defaults+0x76>

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
 80ab8e8:	f003 fff4 	bl	80af8d4 <mbedtls_ssl_list_ciphersuites>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 80ab8ec:	4b0a      	ldr	r3, [pc, #40]	; (80ab918 <mbedtls_ssl_config_defaults+0x8c>)

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
 80ab8ee:	60e0      	str	r0, [r4, #12]

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 80ab8f0:	64e3      	str	r3, [r4, #76]	; 0x4c
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_default_hashes;
 80ab8f2:	4b0a      	ldr	r3, [pc, #40]	; (80ab91c <mbedtls_ssl_config_defaults+0x90>)

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
 80ab8f4:	60a0      	str	r0, [r4, #8]
 80ab8f6:	6060      	str	r0, [r4, #4]
 80ab8f8:	6020      	str	r0, [r4, #0]
#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_default_hashes;
 80ab8fa:	65e3      	str	r3, [r4, #92]	; 0x5c
#endif

#if defined(MBEDTLS_ECP_C)
            conf->curve_list = mbedtls_ecp_grp_id_list();
 80ab8fc:	f7f8 fb74 	bl	80a3fe8 <mbedtls_ecp_grp_id_list>
 80ab900:	6620      	str	r0, [r4, #96]	; 0x60
            conf->dhm_min_bitlen = 1024;
#endif
    }

    return( 0 );
}
 80ab902:	2000      	movs	r0, #0
 80ab904:	bd10      	pop	{r4, pc}
 80ab906:	bf00      	nop
 80ab908:	20000008 	.word	0x20000008
 80ab90c:	080b5778 	.word	0x080b5778
 80ab910:	20000030 	.word	0x20000030
 80ab914:	2000002c 	.word	0x2000002c
 80ab918:	080b506c 	.word	0x080b506c
 80ab91c:	20000014 	.word	0x20000014

080ab920 <mbedtls_ssl_config_free>:

/*
 * Free mbedtls_ssl_config
 */
void mbedtls_ssl_config_free( mbedtls_ssl_config *conf )
{
 80ab920:	b538      	push	{r3, r4, r5, lr}
 80ab922:	4604      	mov	r4, r0
    mbedtls_mpi_free( &conf->dhm_P );
    mbedtls_mpi_free( &conf->dhm_G );
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    if( conf->psk != NULL )
 80ab924:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80ab926:	b140      	cbz	r0, 80ab93a <mbedtls_ssl_config_free+0x1a>
    {
        mbedtls_platform_zeroize( conf->psk, conf->psk_len );
 80ab928:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80ab92a:	f7fa fd71 	bl	80a6410 <mbedtls_platform_zeroize>
        mbedtls_free( conf->psk );
 80ab92e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80ab930:	f005 fbda 	bl	80b10e8 <free>
        conf->psk = NULL;
 80ab934:	2300      	movs	r3, #0
 80ab936:	6663      	str	r3, [r4, #100]	; 0x64
        conf->psk_len = 0;
 80ab938:	66a3      	str	r3, [r4, #104]	; 0x68
    }

    if( conf->psk_identity != NULL )
 80ab93a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80ab93c:	b140      	cbz	r0, 80ab950 <mbedtls_ssl_config_free+0x30>
    {
        mbedtls_platform_zeroize( conf->psk_identity, conf->psk_identity_len );
 80ab93e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80ab940:	f7fa fd66 	bl	80a6410 <mbedtls_platform_zeroize>
        mbedtls_free( conf->psk_identity );
 80ab944:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80ab946:	f005 fbcf 	bl	80b10e8 <free>
        conf->psk_identity = NULL;
 80ab94a:	2300      	movs	r3, #0
 80ab94c:	66e3      	str	r3, [r4, #108]	; 0x6c
        conf->psk_identity_len = 0;
 80ab94e:	6723      	str	r3, [r4, #112]	; 0x70
    }
#endif

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
 80ab950:	6d20      	ldr	r0, [r4, #80]	; 0x50
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static void ssl_key_cert_free( mbedtls_ssl_key_cert *key_cert )
{
    mbedtls_ssl_key_cert *cur = key_cert, *next;

    while( cur != NULL )
 80ab952:	b120      	cbz	r0, 80ab95e <mbedtls_ssl_config_free+0x3e>
    {
        next = cur->next;
 80ab954:	6885      	ldr	r5, [r0, #8]
        mbedtls_free( cur );
 80ab956:	f005 fbc7 	bl	80b10e8 <free>
        cur = next;
 80ab95a:	4628      	mov	r0, r5
 80ab95c:	e7f9      	b.n	80ab952 <mbedtls_ssl_config_free+0x32>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
#endif

    mbedtls_platform_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 80ab95e:	4620      	mov	r0, r4
}
 80ab960:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
#endif

    mbedtls_platform_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 80ab964:	2180      	movs	r1, #128	; 0x80
 80ab966:	f7fa bd53 	b.w	80a6410 <mbedtls_platform_zeroize>

080ab96a <mbedtls_ssl_sig_from_pk>:
    ( defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C) )
/*
 * Convert between MBEDTLS_PK_XXX and SSL_SIG_XXX
 */
unsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk )
{
 80ab96a:	b510      	push	{r4, lr}
#if defined(MBEDTLS_RSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
 80ab96c:	2101      	movs	r1, #1
    ( defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C) )
/*
 * Convert between MBEDTLS_PK_XXX and SSL_SIG_XXX
 */
unsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk )
{
 80ab96e:	4604      	mov	r4, r0
#if defined(MBEDTLS_RSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
 80ab970:	f7fe fb36 	bl	80a9fe0 <mbedtls_pk_can_do>
 80ab974:	b940      	cbnz	r0, 80ab988 <mbedtls_ssl_sig_from_pk+0x1e>
        return( MBEDTLS_SSL_SIG_RSA );
#endif
#if defined(MBEDTLS_ECDSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
 80ab976:	2104      	movs	r1, #4
 80ab978:	4620      	mov	r0, r4
 80ab97a:	f7fe fb31 	bl	80a9fe0 <mbedtls_pk_can_do>
 80ab97e:	2800      	cmp	r0, #0
        return( MBEDTLS_SSL_SIG_ECDSA );
#endif
    return( MBEDTLS_SSL_SIG_ANON );
 80ab980:	bf14      	ite	ne
 80ab982:	2003      	movne	r0, #3
 80ab984:	2000      	moveq	r0, #0
 80ab986:	bd10      	pop	{r4, pc}
 */
unsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk )
{
#if defined(MBEDTLS_RSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
        return( MBEDTLS_SSL_SIG_RSA );
 80ab988:	2001      	movs	r0, #1
#if defined(MBEDTLS_ECDSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
        return( MBEDTLS_SSL_SIG_ECDSA );
#endif
    return( MBEDTLS_SSL_SIG_ANON );
}
 80ab98a:	bd10      	pop	{r4, pc}

080ab98c <mbedtls_ssl_pk_alg_from_sig>:
    }
}

mbedtls_pk_type_t mbedtls_ssl_pk_alg_from_sig( unsigned char sig )
{
    switch( sig )
 80ab98c:	2801      	cmp	r0, #1
 80ab98e:	d003      	beq.n	80ab998 <mbedtls_ssl_pk_alg_from_sig+0xc>
 80ab990:	2803      	cmp	r0, #3
#if defined(MBEDTLS_ECDSA_C)
        case MBEDTLS_SSL_SIG_ECDSA:
            return( MBEDTLS_PK_ECDSA );
#endif
        default:
            return( MBEDTLS_PK_NONE );
 80ab992:	bf0c      	ite	eq
 80ab994:	2004      	moveq	r0, #4
 80ab996:	2000      	movne	r0, #0
    }
}
 80ab998:	4770      	bx	lr
	...

080ab99c <mbedtls_ssl_md_alg_from_hash>:

/*
 * Convert from MBEDTLS_SSL_HASH_XXX to MBEDTLS_MD_XXX
 */
mbedtls_md_type_t mbedtls_ssl_md_alg_from_hash( unsigned char hash )
{
 80ab99c:	3802      	subs	r0, #2
 80ab99e:	b2c0      	uxtb	r0, r0
 80ab9a0:	2804      	cmp	r0, #4
 80ab9a2:	bf9a      	itte	ls
 80ab9a4:	4b01      	ldrls	r3, [pc, #4]	; (80ab9ac <mbedtls_ssl_md_alg_from_hash+0x10>)
 80ab9a6:	5c18      	ldrbls	r0, [r3, r0]
 80ab9a8:	2000      	movhi	r0, #0
            return( MBEDTLS_MD_SHA512 );
#endif
        default:
            return( MBEDTLS_MD_NONE );
    }
}
 80ab9aa:	4770      	bx	lr
 80ab9ac:	080b57a4 	.word	0x080b57a4

080ab9b0 <mbedtls_ssl_hash_from_md_alg>:

/*
 * Convert from MBEDTLS_MD_XXX to MBEDTLS_SSL_HASH_XXX
 */
unsigned char mbedtls_ssl_hash_from_md_alg( int md )
{
 80ab9b0:	3804      	subs	r0, #4
 80ab9b2:	2804      	cmp	r0, #4
 80ab9b4:	bf9a      	itte	ls
 80ab9b6:	4b02      	ldrls	r3, [pc, #8]	; (80ab9c0 <mbedtls_ssl_hash_from_md_alg+0x10>)
 80ab9b8:	5c18      	ldrbls	r0, [r3, r0]
    switch( md )
 80ab9ba:	2000      	movhi	r0, #0
            return( MBEDTLS_SSL_HASH_SHA512 );
#endif
        default:
            return( MBEDTLS_SSL_HASH_NONE );
    }
}
 80ab9bc:	4770      	bx	lr
 80ab9be:	bf00      	nop
 80ab9c0:	080b5816 	.word	0x080b5816

080ab9c4 <mbedtls_ssl_check_curve>:
 */
int mbedtls_ssl_check_curve( const mbedtls_ssl_context *ssl, mbedtls_ecp_group_id grp_id )
{
    const mbedtls_ecp_group_id *gid;

    if( ssl->conf->curve_list == NULL )
 80ab9c4:	6803      	ldr	r3, [r0, #0]
 80ab9c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80ab9c8:	b13b      	cbz	r3, 80ab9da <mbedtls_ssl_check_curve+0x16>
 80ab9ca:	3b01      	subs	r3, #1
        return( -1 );

    for( gid = ssl->conf->curve_list; *gid != MBEDTLS_ECP_DP_NONE; gid++ )
 80ab9cc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80ab9d0:	b11a      	cbz	r2, 80ab9da <mbedtls_ssl_check_curve+0x16>
        if( *gid == grp_id )
 80ab9d2:	428a      	cmp	r2, r1
 80ab9d4:	d1fa      	bne.n	80ab9cc <mbedtls_ssl_check_curve+0x8>
            return( 0 );
 80ab9d6:	2000      	movs	r0, #0
 80ab9d8:	4770      	bx	lr
int mbedtls_ssl_check_curve( const mbedtls_ssl_context *ssl, mbedtls_ecp_group_id grp_id )
{
    const mbedtls_ecp_group_id *gid;

    if( ssl->conf->curve_list == NULL )
        return( -1 );
 80ab9da:	f04f 30ff 	mov.w	r0, #4294967295
    for( gid = ssl->conf->curve_list; *gid != MBEDTLS_ECP_DP_NONE; gid++ )
        if( *gid == grp_id )
            return( 0 );

    return( -1 );
}
 80ab9de:	4770      	bx	lr

080ab9e0 <mbedtls_ssl_check_sig_hash>:
int mbedtls_ssl_check_sig_hash( const mbedtls_ssl_context *ssl,
                                mbedtls_md_type_t md )
{
    const int *cur;

    if( ssl->conf->sig_hashes == NULL )
 80ab9e0:	6803      	ldr	r3, [r0, #0]
 80ab9e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80ab9e4:	b13b      	cbz	r3, 80ab9f6 <mbedtls_ssl_check_sig_hash+0x16>
 80ab9e6:	3b04      	subs	r3, #4
        return( -1 );

    for( cur = ssl->conf->sig_hashes; *cur != MBEDTLS_MD_NONE; cur++ )
 80ab9e8:	f853 2f04 	ldr.w	r2, [r3, #4]!
 80ab9ec:	b11a      	cbz	r2, 80ab9f6 <mbedtls_ssl_check_sig_hash+0x16>
        if( *cur == (int) md )
 80ab9ee:	428a      	cmp	r2, r1
 80ab9f0:	d1fa      	bne.n	80ab9e8 <mbedtls_ssl_check_sig_hash+0x8>
            return( 0 );
 80ab9f2:	2000      	movs	r0, #0
 80ab9f4:	4770      	bx	lr
                                mbedtls_md_type_t md )
{
    const int *cur;

    if( ssl->conf->sig_hashes == NULL )
        return( -1 );
 80ab9f6:	f04f 30ff 	mov.w	r0, #4294967295
    for( cur = ssl->conf->sig_hashes; *cur != MBEDTLS_MD_NONE; cur++ )
        if( *cur == (int) md )
            return( 0 );

    return( -1 );
}
 80ab9fa:	4770      	bx	lr

080ab9fc <mbedtls_ssl_check_cert_usage>:
    ((void) cert_endpoint);
    ((void) flags);
#endif

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
 80ab9fc:	2a01      	cmp	r2, #1
#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_check_cert_usage( const mbedtls_x509_crt *cert,
                          const mbedtls_ssl_ciphersuite_t *ciphersuite,
                          int cert_endpoint,
                          uint32_t *flags )
{
 80ab9fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80aba00:	4607      	mov	r7, r0
 80aba02:	4616      	mov	r6, r2
 80aba04:	461d      	mov	r5, r3
    ((void) cert_endpoint);
    ((void) flags);
#endif

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
 80aba06:	d110      	bne.n	80aba2a <mbedtls_ssl_check_cert_usage+0x2e>
    {
        /* Server part of the key exchange */
        switch( ciphersuite->key_exchange )
 80aba08:	7a8a      	ldrb	r2, [r1, #10]
 80aba0a:	2a0a      	cmp	r2, #10
 80aba0c:	d80f      	bhi.n	80aba2e <mbedtls_ssl_check_cert_usage+0x32>
 80aba0e:	fa06 f202 	lsl.w	r2, r6, r2
 80aba12:	f012 0f82 	tst.w	r2, #130	; 0x82
 80aba16:	d10c      	bne.n	80aba32 <mbedtls_ssl_check_cert_usage+0x36>
 80aba18:	f412 6fc0 	tst.w	r2, #1536	; 0x600
 80aba1c:	d10b      	bne.n	80aba36 <mbedtls_ssl_check_cert_usage+0x3a>
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    int usage = 0;
 80aba1e:	f012 0f1c 	tst.w	r2, #28
 80aba22:	bf14      	ite	ne
 80aba24:	2180      	movne	r1, #128	; 0x80
 80aba26:	2100      	moveq	r1, #0
 80aba28:	e006      	b.n	80aba38 <mbedtls_ssl_check_cert_usage+0x3c>
        }
    }
    else
    {
        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
 80aba2a:	2180      	movs	r1, #128	; 0x80
 80aba2c:	e004      	b.n	80aba38 <mbedtls_ssl_check_cert_usage+0x3c>
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    int usage = 0;
 80aba2e:	2100      	movs	r1, #0
 80aba30:	e002      	b.n	80aba38 <mbedtls_ssl_check_cert_usage+0x3c>
        /* Server part of the key exchange */
        switch( ciphersuite->key_exchange )
        {
            case MBEDTLS_KEY_EXCHANGE_RSA:
            case MBEDTLS_KEY_EXCHANGE_RSA_PSK:
                usage = MBEDTLS_X509_KU_KEY_ENCIPHERMENT;
 80aba32:	2120      	movs	r1, #32
 80aba34:	e000      	b.n	80aba38 <mbedtls_ssl_check_cert_usage+0x3c>
                usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
                break;

            case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
            case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
                usage = MBEDTLS_X509_KU_KEY_AGREEMENT;
 80aba36:	2108      	movs	r1, #8
    {
        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
    }

    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
 80aba38:	4638      	mov	r0, r7
 80aba3a:	f7fd fbdd 	bl	80a91f8 <mbedtls_x509_crt_check_key_usage>
 80aba3e:	b130      	cbz	r0, 80aba4e <mbedtls_ssl_check_cert_usage+0x52>
    {
        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
 80aba40:	682b      	ldr	r3, [r5, #0]
        ret = -1;
 80aba42:	f04f 34ff 	mov.w	r4, #4294967295
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
    }

    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
    {
        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
 80aba46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80aba4a:	602b      	str	r3, [r5, #0]
 80aba4c:	e000      	b.n	80aba50 <mbedtls_ssl_check_cert_usage+0x54>
int mbedtls_ssl_check_cert_usage( const mbedtls_x509_crt *cert,
                          const mbedtls_ssl_ciphersuite_t *ciphersuite,
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
 80aba4e:	4604      	mov	r4, r0
    {
        ext_oid = MBEDTLS_OID_CLIENT_AUTH;
        ext_len = MBEDTLS_OID_SIZE( MBEDTLS_OID_CLIENT_AUTH );
    }

    if( mbedtls_x509_crt_check_extended_key_usage( cert, ext_oid, ext_len ) != 0 )
 80aba50:	4b08      	ldr	r3, [pc, #32]	; (80aba74 <mbedtls_ssl_check_cert_usage+0x78>)
 80aba52:	4909      	ldr	r1, [pc, #36]	; (80aba78 <mbedtls_ssl_check_cert_usage+0x7c>)
 80aba54:	2208      	movs	r2, #8
 80aba56:	2e01      	cmp	r6, #1
 80aba58:	bf18      	it	ne
 80aba5a:	4619      	movne	r1, r3
 80aba5c:	4638      	mov	r0, r7
 80aba5e:	f7fd fbef 	bl	80a9240 <mbedtls_x509_crt_check_extended_key_usage>
 80aba62:	b128      	cbz	r0, 80aba70 <mbedtls_ssl_check_cert_usage+0x74>
    {
        *flags |= MBEDTLS_X509_BADCERT_EXT_KEY_USAGE;
 80aba64:	682b      	ldr	r3, [r5, #0]
        ret = -1;
 80aba66:	f04f 34ff 	mov.w	r4, #4294967295
        ext_len = MBEDTLS_OID_SIZE( MBEDTLS_OID_CLIENT_AUTH );
    }

    if( mbedtls_x509_crt_check_extended_key_usage( cert, ext_oid, ext_len ) != 0 )
    {
        *flags |= MBEDTLS_X509_BADCERT_EXT_KEY_USAGE;
 80aba6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80aba6e:	602b      	str	r3, [r5, #0]
        ret = -1;
    }
#endif /* MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE */

    return( ret );
}
 80aba70:	4620      	mov	r0, r4
 80aba72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80aba74:	080b4332 	.word	0x080b4332
 80aba78:	080b42fa 	.word	0x080b42fa

080aba7c <mbedtls_ssl_parse_certificate>:

    return( 0 );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 80aba7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret;
    const mbedtls_ssl_ciphersuite_t * const ciphersuite_info =
          ssl->transform_negotiate->ciphersuite_info;
 80aba80:	6c03      	ldr	r3, [r0, #64]	; 0x40

    return( 0 );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 80aba82:	b086      	sub	sp, #24
    int ret;
    const mbedtls_ssl_ciphersuite_t * const ciphersuite_info =
          ssl->transform_negotiate->ciphersuite_info;
 80aba84:	f8d3 9000 	ldr.w	r9, [r3]

    return( 0 );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 80aba88:	4604      	mov	r4, r0
#endif
    void *rs_ctx = NULL;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 80aba8a:	f899 200a 	ldrb.w	r2, [r9, #10]
 80aba8e:	2a0b      	cmp	r2, #11
 80aba90:	d808      	bhi.n	80abaa4 <mbedtls_ssl_parse_certificate+0x28>
 80aba92:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80aba96:	40d3      	lsrs	r3, r2
 80aba98:	f003 0301 	and.w	r3, r3, #1
 80aba9c:	f083 0001 	eor.w	r0, r3, #1
 80abaa0:	2b00      	cmp	r3, #0
 80abaa2:	d143      	bne.n	80abb2c <mbedtls_ssl_parse_certificate+0xb0>
#if defined(MBEDTLS_SSL_SRV_C) && defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    const int authmode = ssl->handshake->sni_authmode != MBEDTLS_SSL_VERIFY_UNSET
                       ? ssl->handshake->sni_authmode
                       : ssl->conf->authmode;
#else
    const int authmode = ssl->conf->authmode;
 80abaa4:	6823      	ldr	r3, [r4, #0]
    {
        goto crt_verify;
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 80abaa6:	2101      	movs	r1, #1
 80abaa8:	4620      	mov	r0, r4
#if defined(MBEDTLS_SSL_SRV_C) && defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    const int authmode = ssl->handshake->sni_authmode != MBEDTLS_SSL_VERIFY_UNSET
                       ? ssl->handshake->sni_authmode
                       : ssl->conf->authmode;
#else
    const int authmode = ssl->conf->authmode;
 80abaaa:	f893 707c 	ldrb.w	r7, [r3, #124]	; 0x7c
    {
        goto crt_verify;
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 80abaae:	f7ff f91f 	bl	80aacf0 <mbedtls_ssl_read_record>
#if defined(MBEDTLS_SSL_SRV_C) && defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    const int authmode = ssl->handshake->sni_authmode != MBEDTLS_SSL_VERIFY_UNSET
                       ? ssl->handshake->sni_authmode
                       : ssl->conf->authmode;
#else
    const int authmode = ssl->conf->authmode;
 80abab2:	f3c7 0781 	ubfx	r7, r7, #2, #2
    {
        goto crt_verify;
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 80abab6:	4605      	mov	r5, r0
 80abab8:	2800      	cmp	r0, #0
 80ababa:	d14b      	bne.n	80abb54 <mbedtls_ssl_parse_certificate+0xd8>
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
          MBEDTLS_SSL_PROTO_TLS1_2 */
#endif /* MBEDTLS_SSL_SRV_C */

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80ababc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80ababe:	2b16      	cmp	r3, #22
 80abac0:	d006      	beq.n	80abad0 <mbedtls_ssl_parse_certificate+0x54>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 80abac2:	220a      	movs	r2, #10
 80abac4:	2102      	movs	r1, #2
 80abac6:	4620      	mov	r0, r4
 80abac8:	f7ff f8f8 	bl	80aacbc <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80abacc:	4884      	ldr	r0, [pc, #528]	; (80abce0 <mbedtls_ssl_parse_certificate+0x264>)
 80abace:	e02d      	b.n	80abb2c <mbedtls_ssl_parse_certificate+0xb0>
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 80abad0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80abad2:	7813      	ldrb	r3, [r2, #0]
 80abad4:	2b0b      	cmp	r3, #11
 80abad6:	d10b      	bne.n	80abaf0 <mbedtls_ssl_parse_certificate+0x74>
        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
 80abad8:	6fa1      	ldr	r1, [r4, #120]	; 0x78
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 80abada:	2909      	cmp	r1, #9
 80abadc:	d908      	bls.n	80abaf0 <mbedtls_ssl_parse_certificate+0x74>
    /*
     * Same message structure as in mbedtls_ssl_write_certificate()
     */
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];

    if( ssl->in_msg[i] != 0 ||
 80abade:	7913      	ldrb	r3, [r2, #4]
 80abae0:	b933      	cbnz	r3, 80abaf0 <mbedtls_ssl_parse_certificate+0x74>
 80abae2:	7950      	ldrb	r0, [r2, #5]
 80abae4:	7993      	ldrb	r3, [r2, #6]
 80abae6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80abaea:	3307      	adds	r3, #7
 80abaec:	4299      	cmp	r1, r3
 80abaee:	d006      	beq.n	80abafe <mbedtls_ssl_parse_certificate+0x82>
    while( i < ssl->in_hslen )
    {
        if ( i + 3 > ssl->in_hslen ) {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                           MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 80abaf0:	2232      	movs	r2, #50	; 0x32
 80abaf2:	2102      	movs	r1, #2
 80abaf4:	4620      	mov	r0, r4
 80abaf6:	f7ff f8e1 	bl	80aacbc <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 80abafa:	487a      	ldr	r0, [pc, #488]	; (80abce4 <mbedtls_ssl_parse_certificate+0x268>)
 80abafc:	e016      	b.n	80abb2c <mbedtls_ssl_parse_certificate+0xb0>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
    }

    /* In case we tried to reuse a session but it failed */
    if( ssl->session_negotiate->peer_cert != NULL )
 80abafe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80abb00:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80abb02:	b128      	cbz	r0, 80abb10 <mbedtls_ssl_parse_certificate+0x94>
    {
        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
 80abb04:	f7fd fe13 	bl	80a972e <mbedtls_x509_crt_free>
        mbedtls_free( ssl->session_negotiate->peer_cert );
 80abb08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80abb0a:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80abb0c:	f005 faec 	bl	80b10e8 <free>
    }

    if( ( ssl->session_negotiate->peer_cert = (mbedtls_x509_crt *)mbedtls_calloc( 1,
 80abb10:	f44f 719a 	mov.w	r1, #308	; 0x134
 80abb14:	2001      	movs	r0, #1
 80abb16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80abb18:	f006 fd50 	bl	80b25bc <calloc>
 80abb1c:	65f0      	str	r0, [r6, #92]	; 0x5c
 80abb1e:	b948      	cbnz	r0, 80abb34 <mbedtls_ssl_parse_certificate+0xb8>
                    sizeof( mbedtls_x509_crt ) ) ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
                       sizeof( mbedtls_x509_crt ) ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 80abb20:	2250      	movs	r2, #80	; 0x50
 80abb22:	2102      	movs	r1, #2
 80abb24:	4620      	mov	r0, r4
 80abb26:	f7ff f8c9 	bl	80aacbc <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 80abb2a:	486f      	ldr	r0, [pc, #444]	; (80abce8 <mbedtls_ssl_parse_certificate+0x26c>)
        {
            ret = 0;
        }
#endif

        ssl->state++;
 80abb2c:	6863      	ldr	r3, [r4, #4]
 80abb2e:	3301      	adds	r3, #1
 80abb30:	6063      	str	r3, [r4, #4]
        return( ret );
 80abb32:	e0d1      	b.n	80abcd8 <mbedtls_ssl_parse_certificate+0x25c>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 80abb34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
        switch( ret )
 80abb36:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 80abcf0 <mbedtls_ssl_parse_certificate+0x274>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 80abb3a:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80abb3c:	f7fd fdf2 	bl	80a9724 <mbedtls_x509_crt_init>

    i += 3;
 80abb40:	2607      	movs	r6, #7

    while( i < ssl->in_hslen )
 80abb42:	f8d4 e078 	ldr.w	lr, [r4, #120]	; 0x78
 80abb46:	45b6      	cmp	lr, r6
 80abb48:	d806      	bhi.n	80abb58 <mbedtls_ssl_parse_certificate+0xdc>
crt_verify:
    if( ssl->handshake->ecrs_enabled)
        rs_ctx = &ssl->handshake->ecrs_ctx;
#endif

    if( authmode != MBEDTLS_SSL_VERIFY_NONE )
 80abb4a:	2f00      	cmp	r7, #0
 80abb4c:	d136      	bne.n	80abbbc <mbedtls_ssl_parse_certificate+0x140>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Certificate verification flags clear" ) );
        }
#endif /* MBEDTLS_DEBUG_C */
    }

    ssl->state++;
 80abb4e:	6863      	ldr	r3, [r4, #4]
 80abb50:	3301      	adds	r3, #1
 80abb52:	6063      	str	r3, [r4, #4]
 80abb54:	4628      	mov	r0, r5
 80abb56:	e0bf      	b.n	80abcd8 <mbedtls_ssl_parse_certificate+0x25c>

    i += 3;

    while( i < ssl->in_hslen )
    {
        if ( i + 3 > ssl->in_hslen ) {
 80abb58:	1cf1      	adds	r1, r6, #3
 80abb5a:	458e      	cmp	lr, r1
 80abb5c:	d3c8      	bcc.n	80abaf0 <mbedtls_ssl_parse_certificate+0x74>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                           MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }
        if( ssl->in_msg[i] != 0 )
 80abb5e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80abb60:	5d83      	ldrb	r3, [r0, r6]
 80abb62:	2b00      	cmp	r3, #0
 80abb64:	d1c4      	bne.n	80abaf0 <mbedtls_ssl_parse_certificate+0x74>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 80abb66:	4406      	add	r6, r0
            | (unsigned int) ssl->in_msg[i + 2];
 80abb68:	7872      	ldrb	r2, [r6, #1]
 80abb6a:	78b3      	ldrb	r3, [r6, #2]
 80abb6c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
        i += 3;

        if( n < 128 || i + n > ssl->in_hslen )
 80abb70:	2a7f      	cmp	r2, #127	; 0x7f
 80abb72:	d9bd      	bls.n	80abaf0 <mbedtls_ssl_parse_certificate+0x74>
 80abb74:	188e      	adds	r6, r1, r2
 80abb76:	45b6      	cmp	lr, r6
 80abb78:	d3ba      	bcc.n	80abaf0 <mbedtls_ssl_parse_certificate+0x74>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 80abb7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80abb7c:	4401      	add	r1, r0
 80abb7e:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80abb80:	f7fd fe32 	bl	80a97e8 <mbedtls_x509_crt_parse_der>
                                  ssl->in_msg + i, n );
        switch( ret )
 80abb84:	4550      	cmp	r0, sl
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 80abb86:	4680      	mov	r8, r0
                                  ssl->in_msg + i, n );
        switch( ret )
 80abb88:	d0db      	beq.n	80abb42 <mbedtls_ssl_parse_certificate+0xc6>
 80abb8a:	dc03      	bgt.n	80abb94 <mbedtls_ssl_parse_certificate+0x118>
 80abb8c:	f510 5f22 	cmn.w	r0, #10368	; 0x2880
 80abb90:	d00a      	beq.n	80abba8 <mbedtls_ssl_parse_certificate+0x12c>
 80abb92:	e007      	b.n	80abba4 <mbedtls_ssl_parse_certificate+0x128>
 80abb94:	f510 5f16 	cmn.w	r0, #9600	; 0x2580
 80abb98:	d002      	beq.n	80abba0 <mbedtls_ssl_parse_certificate+0x124>
 80abb9a:	2800      	cmp	r0, #0
 80abb9c:	d0d1      	beq.n	80abb42 <mbedtls_ssl_parse_certificate+0xc6>
 80abb9e:	e001      	b.n	80abba4 <mbedtls_ssl_parse_certificate+0x128>
        case MBEDTLS_ERR_X509_ALLOC_FAILED:
            alert = MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR;
            goto crt_parse_der_failed;

        case MBEDTLS_ERR_X509_UNKNOWN_VERSION:
            alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 80abba0:	222b      	movs	r2, #43	; 0x2b
 80abba2:	e002      	b.n	80abbaa <mbedtls_ssl_parse_certificate+0x12e>
            goto crt_parse_der_failed;

        default:
            alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 80abba4:	222a      	movs	r2, #42	; 0x2a
 80abba6:	e000      	b.n	80abbaa <mbedtls_ssl_parse_certificate+0x12e>
            /* Ignore certificate with an unknown algorithm: maybe a
               prior certificate was already trusted. */
            break;

        case MBEDTLS_ERR_X509_ALLOC_FAILED:
            alert = MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR;
 80abba8:	2250      	movs	r2, #80	; 0x50
            goto crt_parse_der_failed;

        default:
            alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
        crt_parse_der_failed:
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL, alert );
 80abbaa:	2102      	movs	r1, #2
 80abbac:	4620      	mov	r0, r4
 80abbae:	f7ff f885 	bl	80aacbc <mbedtls_ssl_send_alert_message>
           let it decide whether to alert. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ( ret = ssl_parse_certificate_chain( ssl ) ) != 0 )
 80abbb2:	f1b8 0f00 	cmp.w	r8, #0
 80abbb6:	d0c8      	beq.n	80abb4a <mbedtls_ssl_parse_certificate+0xce>
 80abbb8:	4640      	mov	r0, r8
 80abbba:	e7b7      	b.n	80abb2c <mbedtls_ssl_parse_certificate+0xb0>
    {
        mbedtls_x509_crt *ca_chain;
        mbedtls_x509_crl *ca_crl;

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
        if( ssl->handshake->sni_ca_chain != NULL )
 80abbbc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80abbbe:	6823      	ldr	r3, [r4, #0]
 80abbc0:	f8d2 8150 	ldr.w	r8, [r2, #336]	; 0x150
 80abbc4:	f1b8 0f00 	cmp.w	r8, #0
 80abbc8:	d002      	beq.n	80abbd0 <mbedtls_ssl_parse_certificate+0x154>
        {
            ca_chain = ssl->handshake->sni_ca_chain;
            ca_crl   = ssl->handshake->sni_ca_crl;
 80abbca:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
 80abbce:	e002      	b.n	80abbd6 <mbedtls_ssl_parse_certificate+0x15a>
        }
        else
#endif
        {
            ca_chain = ssl->conf->ca_chain;
 80abbd0:	f8d3 8054 	ldr.w	r8, [r3, #84]	; 0x54
            ca_crl   = ssl->conf->ca_crl;
 80abbd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
        }

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_restartable(
 80abbd6:	2100      	movs	r1, #0
 80abbd8:	9104      	str	r1, [sp, #16]
 80abbda:	6b99      	ldr	r1, [r3, #56]	; 0x38
                                ssl->session_negotiate->peer_cert,
 80abbdc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        }

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_restartable(
 80abbde:	9103      	str	r1, [sp, #12]
 80abbe0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80abbe2:	9102      	str	r1, [sp, #8]
 80abbe4:	f100 0160 	add.w	r1, r0, #96	; 0x60
 80abbe8:	9101      	str	r1, [sp, #4]
 80abbea:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 80abbee:	9100      	str	r1, [sp, #0]
 80abbf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80abbf2:	4641      	mov	r1, r8
 80abbf4:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80abbf6:	f7fd fb67 	bl	80a92c8 <mbedtls_x509_crt_verify_restartable>
         * Secondary checks: always done, but change 'ret' only if it was 0
         */

#if defined(MBEDTLS_ECP_C)
        {
            const mbedtls_pk_context *pk = &ssl->session_negotiate->peer_cert->pk;
 80abbfa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        }

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_restartable(
 80abbfc:	4606      	mov	r6, r0
         * Secondary checks: always done, but change 'ret' only if it was 0
         */

#if defined(MBEDTLS_ECP_C)
        {
            const mbedtls_pk_context *pk = &ssl->session_negotiate->peer_cert->pk;
 80abbfe:	f8d3 a05c 	ldr.w	sl, [r3, #92]	; 0x5c

            /* If certificate uses an EC key, make sure the curve is OK */
            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
 80abc02:	2102      	movs	r1, #2
 80abc04:	f10a 00bc 	add.w	r0, sl, #188	; 0xbc
 80abc08:	f7fe f9ea 	bl	80a9fe0 <mbedtls_pk_can_do>
 80abc0c:	b138      	cbz	r0, 80abc1e <mbedtls_ssl_parse_certificate+0x1a2>
                mbedtls_ssl_check_curve( ssl, mbedtls_pk_ec( *pk )->grp.id ) != 0 )
 80abc0e:	f8da 30c0 	ldr.w	r3, [sl, #192]	; 0xc0
 80abc12:	4620      	mov	r0, r4
 80abc14:	7819      	ldrb	r1, [r3, #0]
 80abc16:	f7ff fed5 	bl	80ab9c4 <mbedtls_ssl_check_curve>
#if defined(MBEDTLS_ECP_C)
        {
            const mbedtls_pk_context *pk = &ssl->session_negotiate->peer_cert->pk;

            /* If certificate uses an EC key, make sure the curve is OK */
            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
 80abc1a:	2800      	cmp	r0, #0
 80abc1c:	d14c      	bne.n	80abcb8 <mbedtls_ssl_parse_certificate+0x23c>
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
            }
        }
#endif /* MBEDTLS_ECP_C */

        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 80abc1e:	6823      	ldr	r3, [r4, #0]
 80abc20:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80abc22:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 80abc26:	4649      	mov	r1, r9
 80abc28:	f002 0201 	and.w	r2, r2, #1
 80abc2c:	f100 0360 	add.w	r3, r0, #96	; 0x60
 80abc30:	f082 0201 	eor.w	r2, r2, #1
 80abc34:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80abc36:	f7ff fee1 	bl	80ab9fc <mbedtls_ssl_check_cert_usage>
 80abc3a:	b100      	cbz	r0, 80abc3e <mbedtls_ssl_parse_certificate+0x1c2>
                                 ciphersuite_info,
                                 ! ssl->conf->endpoint,
                                 &ssl->session_negotiate->verify_result ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
            if( ret == 0 )
 80abc3c:	b19e      	cbz	r6, 80abc66 <mbedtls_ssl_parse_certificate+0x1ea>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 80abc3e:	2f01      	cmp	r7, #1
 80abc40:	d106      	bne.n	80abc50 <mbedtls_ssl_parse_certificate+0x1d4>
 80abc42:	f516 5f1c 	cmn.w	r6, #9984	; 0x2700
 80abc46:	d082      	beq.n	80abb4e <mbedtls_ssl_parse_certificate+0xd2>
            ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
 80abc48:	f516 4ff4 	cmn.w	r6, #31232	; 0x7a00
 80abc4c:	f43f af7f 	beq.w	80abb4e <mbedtls_ssl_parse_certificate+0xd2>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 80abc50:	f1b8 0f00 	cmp.w	r8, #0
 80abc54:	d101      	bne.n	80abc5a <mbedtls_ssl_parse_certificate+0x1de>
 80abc56:	2f02      	cmp	r7, #2
 80abc58:	d003      	beq.n	80abc62 <mbedtls_ssl_parse_certificate+0x1e6>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
        }

        if( ret != 0 )
 80abc5a:	2e00      	cmp	r6, #0
 80abc5c:	f43f af77 	beq.w	80abb4e <mbedtls_ssl_parse_certificate+0xd2>
 80abc60:	e008      	b.n	80abc74 <mbedtls_ssl_parse_certificate+0x1f8>
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 80abc62:	4e22      	ldr	r6, [pc, #136]	; (80abcec <mbedtls_ssl_parse_certificate+0x270>)
 80abc64:	e006      	b.n	80abc74 <mbedtls_ssl_parse_certificate+0x1f8>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 80abc66:	2f01      	cmp	r7, #1
 80abc68:	f43f af71 	beq.w	80abb4e <mbedtls_ssl_parse_certificate+0xd2>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 80abc6c:	f1b8 0f00 	cmp.w	r8, #0
 80abc70:	d02c      	beq.n	80abccc <mbedtls_ssl_parse_certificate+0x250>
                                 ! ssl->conf->endpoint,
                                 &ssl->session_negotiate->verify_result ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
            if( ret == 0 )
                ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
 80abc72:	4e1c      	ldr	r6, [pc, #112]	; (80abce4 <mbedtls_ssl_parse_certificate+0x268>)
            uint8_t alert;

            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
 80abc74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80abc76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80abc78:	05df      	lsls	r7, r3, #23
 80abc7a:	d40e      	bmi.n	80abc9a <mbedtls_ssl_parse_certificate+0x21e>
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
 80abc7c:	075d      	lsls	r5, r3, #29
 80abc7e:	d40e      	bmi.n	80abc9e <mbedtls_ssl_parse_certificate+0x222>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
 80abc80:	f413 3fdc 	tst.w	r3, #112640	; 0x1b800
 80abc84:	d10d      	bne.n	80abca2 <mbedtls_ssl_parse_certificate+0x226>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
 80abc86:	07d8      	lsls	r0, r3, #31
 80abc88:	d40d      	bmi.n	80abca6 <mbedtls_ssl_parse_certificate+0x22a>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
 80abc8a:	0799      	lsls	r1, r3, #30
 80abc8c:	d40d      	bmi.n	80abcaa <mbedtls_ssl_parse_certificate+0x22e>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
 80abc8e:	f013 0f08 	tst.w	r3, #8
 80abc92:	bf14      	ite	ne
 80abc94:	2230      	movne	r2, #48	; 0x30
 80abc96:	222e      	moveq	r2, #46	; 0x2e
 80abc98:	e008      	b.n	80abcac <mbedtls_ssl_parse_certificate+0x230>

            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
 80abc9a:	2231      	movs	r2, #49	; 0x31
 80abc9c:	e006      	b.n	80abcac <mbedtls_ssl_parse_certificate+0x230>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
                alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 80abc9e:	222a      	movs	r2, #42	; 0x2a
 80abca0:	e004      	b.n	80abcac <mbedtls_ssl_parse_certificate+0x230>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 80abca2:	222b      	movs	r2, #43	; 0x2b
 80abca4:	e002      	b.n	80abcac <mbedtls_ssl_parse_certificate+0x230>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
 80abca6:	222d      	movs	r2, #45	; 0x2d
 80abca8:	e000      	b.n	80abcac <mbedtls_ssl_parse_certificate+0x230>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
 80abcaa:	222c      	movs	r2, #44	; 0x2c
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            alert );
 80abcac:	2102      	movs	r1, #2
 80abcae:	4620      	mov	r0, r4
 80abcb0:	f7ff f804 	bl	80aacbc <mbedtls_ssl_send_alert_message>
 80abcb4:	4635      	mov	r5, r6
 80abcb6:	e74a      	b.n	80abb4e <mbedtls_ssl_parse_certificate+0xd2>

            /* If certificate uses an EC key, make sure the curve is OK */
            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
                mbedtls_ssl_check_curve( ssl, mbedtls_pk_ec( *pk )->grp.id ) != 0 )
            {
                ssl->session_negotiate->verify_result |= MBEDTLS_X509_BADCERT_BAD_KEY;
 80abcb8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80abcba:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80abcbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80abcc0:	6613      	str	r3, [r2, #96]	; 0x60

                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (EC key curve)" ) );
                if( ret == 0 )
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
 80abcc2:	4b08      	ldr	r3, [pc, #32]	; (80abce4 <mbedtls_ssl_parse_certificate+0x268>)
 80abcc4:	2e00      	cmp	r6, #0
 80abcc6:	bf08      	it	eq
 80abcc8:	461e      	moveq	r6, r3
 80abcca:	e7a8      	b.n	80abc1e <mbedtls_ssl_parse_certificate+0x1a2>
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 80abccc:	4b07      	ldr	r3, [pc, #28]	; (80abcec <mbedtls_ssl_parse_certificate+0x270>)
 80abcce:	4e05      	ldr	r6, [pc, #20]	; (80abce4 <mbedtls_ssl_parse_certificate+0x268>)
 80abcd0:	2f02      	cmp	r7, #2
 80abcd2:	bf08      	it	eq
 80abcd4:	461e      	moveq	r6, r3
 80abcd6:	e7cd      	b.n	80abc74 <mbedtls_ssl_parse_certificate+0x1f8>
    ssl->state++;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate" ) );

    return( ret );
}
 80abcd8:	b006      	add	sp, #24
 80abcda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80abcde:	bf00      	nop
 80abce0:	ffff8900 	.word	0xffff8900
 80abce4:	ffff8600 	.word	0xffff8600
 80abce8:	ffff8100 	.word	0xffff8100
 80abcec:	ffff8980 	.word	0xffff8980
 80abcf0:	ffffd9d2 	.word	0xffffd9d2

080abcf4 <mbedtls_ssl_write_version>:
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 80abcf4:	7018      	strb	r0, [r3, #0]
        ver[1] = (unsigned char) minor;
 80abcf6:	7059      	strb	r1, [r3, #1]
 80abcf8:	4770      	bx	lr

080abcfa <mbedtls_ssl_read_version>:
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
 80abcfa:	781a      	ldrb	r2, [r3, #0]
 80abcfc:	6002      	str	r2, [r0, #0]
        *minor = ver[1];
 80abcfe:	785b      	ldrb	r3, [r3, #1]
 80abd00:	600b      	str	r3, [r1, #0]
 80abd02:	4770      	bx	lr

080abd04 <mbedtls_ssl_get_key_exchange_md_tls1_2>:
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
int mbedtls_ssl_get_key_exchange_md_tls1_2( mbedtls_ssl_context *ssl,
                                            unsigned char *hash, size_t *hashlen,
                                            unsigned char *data, size_t data_len,
                                            mbedtls_md_type_t md_alg )
{
 80abd04:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80abd08:	4605      	mov	r5, r0
    int ret = 0;
    mbedtls_md_context_t ctx;
    const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
 80abd0a:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
int mbedtls_ssl_get_key_exchange_md_tls1_2( mbedtls_ssl_context *ssl,
                                            unsigned char *hash, size_t *hashlen,
                                            unsigned char *data, size_t data_len,
                                            mbedtls_md_type_t md_alg )
{
 80abd0e:	4690      	mov	r8, r2
 80abd10:	460e      	mov	r6, r1
 80abd12:	461f      	mov	r7, r3
    int ret = 0;
    mbedtls_md_context_t ctx;
    const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
 80abd14:	f7fc fa1c 	bl	80a8150 <mbedtls_md_info_from_type>
 80abd18:	4604      	mov	r4, r0
    *hashlen = mbedtls_md_get_size( md_info );
 80abd1a:	f7fc fb4f 	bl	80a83bc <mbedtls_md_get_size>
 80abd1e:	f8c8 0000 	str.w	r0, [r8]

    mbedtls_md_init( &ctx );
 80abd22:	a801      	add	r0, sp, #4
 80abd24:	f7fc fa20 	bl	80a8168 <mbedtls_md_init>
     *     opaque client_random[32];
     *     opaque server_random[32];
     *     ServerDHParams params;
     * };
     */
    if( ( ret = mbedtls_md_setup( &ctx, md_info, 0 ) ) != 0 )
 80abd28:	4621      	mov	r1, r4
 80abd2a:	2200      	movs	r2, #0
 80abd2c:	a801      	add	r0, sp, #4
 80abd2e:	f7fc fa3b 	bl	80a81a8 <mbedtls_md_setup>
 80abd32:	4604      	mov	r4, r0
 80abd34:	b9c8      	cbnz	r0, 80abd6a <mbedtls_ssl_get_key_exchange_md_tls1_2+0x66>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
        goto exit;
    }
    if( ( ret = mbedtls_md_starts( &ctx ) ) != 0 )
 80abd36:	a801      	add	r0, sp, #4
 80abd38:	f7fc fa58 	bl	80a81ec <mbedtls_md_starts>
 80abd3c:	4604      	mov	r4, r0
 80abd3e:	b9a0      	cbnz	r0, 80abd6a <mbedtls_ssl_get_key_exchange_md_tls1_2+0x66>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_starts", ret );
        goto exit;
    }
    if( ( ret = mbedtls_md_update( &ctx, ssl->handshake->randbytes, 64 ) ) != 0 )
 80abd40:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80abd42:	2240      	movs	r2, #64	; 0x40
 80abd44:	f501 712d 	add.w	r1, r1, #692	; 0x2b4
 80abd48:	a801      	add	r0, sp, #4
 80abd4a:	f7fc fa59 	bl	80a8200 <mbedtls_md_update>
 80abd4e:	4604      	mov	r4, r0
 80abd50:	b958      	cbnz	r0, 80abd6a <mbedtls_ssl_get_key_exchange_md_tls1_2+0x66>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_update", ret );
        goto exit;
    }
    if( ( ret = mbedtls_md_update( &ctx, data, data_len ) ) != 0 )
 80abd52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80abd54:	4639      	mov	r1, r7
 80abd56:	a801      	add	r0, sp, #4
 80abd58:	f7fc fa52 	bl	80a8200 <mbedtls_md_update>
 80abd5c:	4604      	mov	r4, r0
 80abd5e:	b920      	cbnz	r0, 80abd6a <mbedtls_ssl_get_key_exchange_md_tls1_2+0x66>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_update", ret );
        goto exit;
    }
    if( ( ret = mbedtls_md_finish( &ctx, hash ) ) != 0 )
 80abd60:	4631      	mov	r1, r6
 80abd62:	a801      	add	r0, sp, #4
 80abd64:	f7fc fa56 	bl	80a8214 <mbedtls_md_finish>
 80abd68:	4604      	mov	r4, r0
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_finish", ret );
        goto exit;
    }

exit:
    mbedtls_md_free( &ctx );
 80abd6a:	a801      	add	r0, sp, #4
 80abd6c:	f7fc fa01 	bl	80a8172 <mbedtls_md_free>

    if( ret != 0 )
 80abd70:	b124      	cbz	r4, 80abd7c <mbedtls_ssl_get_key_exchange_md_tls1_2+0x78>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 80abd72:	2250      	movs	r2, #80	; 0x50
 80abd74:	2102      	movs	r1, #2
 80abd76:	4628      	mov	r0, r5
 80abd78:	f7fe ffa0 	bl	80aacbc <mbedtls_ssl_send_alert_message>

    return( ret );
}
 80abd7c:	4620      	mov	r0, r4
 80abd7e:	b004      	add	sp, #16
 80abd80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080abd84 <_ZL11mpi_sub_hlpjPmS_>:
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 80abd84:	2300      	movs	r3, #0

/*
 * Helper for mbedtls_mpi subtraction
 */
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
 80abd86:	b5f0      	push	{r4, r5, r6, r7, lr}
 80abd88:	4616      	mov	r6, r2
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 80abd8a:	461c      	mov	r4, r3
 80abd8c:	4284      	cmp	r4, r0
 80abd8e:	d016      	beq.n	80abdbe <_ZL11mpi_sub_hlpjPmS_+0x3a>
    {
        z = ( *d <  c );     *d -=  c;
 80abd90:	f8d6 e000 	ldr.w	lr, [r6]
 80abd94:	ebc3 050e 	rsb	r5, r3, lr
 80abd98:	6035      	str	r5, [r6, #0]
        c = ( *d < *s ) + z; *d -= *s;
 80abd9a:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 80abd9e:	3401      	adds	r4, #1
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
 80abda0:	42bd      	cmp	r5, r7
 80abda2:	bf2c      	ite	cs
 80abda4:	f04f 0c00 	movcs.w	ip, #0
 80abda8:	f04f 0c01 	movcc.w	ip, #1
 80abdac:	1bed      	subs	r5, r5, r7
 80abdae:	4573      	cmp	r3, lr
 80abdb0:	bf94      	ite	ls
 80abdb2:	4663      	movls	r3, ip
 80abdb4:	f10c 0301 	addhi.w	r3, ip, #1
 80abdb8:	f846 5b04 	str.w	r5, [r6], #4
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 80abdbc:	e7e6      	b.n	80abd8c <_ZL11mpi_sub_hlpjPmS_+0x8>
 80abdbe:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 80abdc2:	b143      	cbz	r3, 80abdd6 <_ZL11mpi_sub_hlpjPmS_+0x52>
    {
        z = ( *d < c ); *d -= c;
 80abdc4:	6811      	ldr	r1, [r2, #0]
 80abdc6:	1ac8      	subs	r0, r1, r3
        c = z; d++;
 80abdc8:	428b      	cmp	r3, r1
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
    {
        z = ( *d < c ); *d -= c;
 80abdca:	f842 0b04 	str.w	r0, [r2], #4
        c = z; d++;
 80abdce:	bf94      	ite	ls
 80abdd0:	2300      	movls	r3, #0
 80abdd2:	2301      	movhi	r3, #1
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 80abdd4:	e7f5      	b.n	80abdc2 <_ZL11mpi_sub_hlpjPmS_+0x3e>
 80abdd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080abdd8 <_ZL11mpi_mul_hlpjPmS_m>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 80abdd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    mbedtls_mpi_uint c = 0, t = 0;
 80abdda:	4684      	mov	ip, r0
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 80abddc:	4686      	mov	lr, r0
 80abdde:	b087      	sub	sp, #28
 80abde0:	9301      	str	r3, [sp, #4]
    mbedtls_mpi_uint c = 0, t = 0;
 80abde2:	2300      	movs	r3, #0
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 80abde4:	9103      	str	r1, [sp, #12]
 80abde6:	9202      	str	r2, [sp, #8]
    mbedtls_mpi_uint c = 0, t = 0;
 80abde8:	9305      	str	r3, [sp, #20]
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 80abdea:	f1bc 0f0f 	cmp.w	ip, #15
 80abdee:	f240 80ca 	bls.w	80abf86 <_ZL11mpi_mul_hlpjPmS_m+0x1ae>

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
 80abdf2:	9803      	ldr	r0, [sp, #12]
 80abdf4:	9902      	ldr	r1, [sp, #8]
 80abdf6:	9a05      	ldr	r2, [sp, #20]
 80abdf8:	9b01      	ldr	r3, [sp, #4]
 80abdfa:	f850 4b04 	ldr.w	r4, [r0], #4
 80abdfe:	f04f 0500 	mov.w	r5, #0
 80abe02:	680e      	ldr	r6, [r1, #0]
 80abe04:	fbe3 2504 	umlal	r2, r5, r3, r4
 80abe08:	18b7      	adds	r7, r6, r2
 80abe0a:	f145 0200 	adc.w	r2, r5, #0
 80abe0e:	f841 7b04 	str.w	r7, [r1], #4
 80abe12:	f850 4b04 	ldr.w	r4, [r0], #4
 80abe16:	f04f 0500 	mov.w	r5, #0
 80abe1a:	680e      	ldr	r6, [r1, #0]
 80abe1c:	fbe3 2504 	umlal	r2, r5, r3, r4
 80abe20:	18b7      	adds	r7, r6, r2
 80abe22:	f145 0200 	adc.w	r2, r5, #0
 80abe26:	f841 7b04 	str.w	r7, [r1], #4
 80abe2a:	f850 4b04 	ldr.w	r4, [r0], #4
 80abe2e:	f04f 0500 	mov.w	r5, #0
 80abe32:	680e      	ldr	r6, [r1, #0]
 80abe34:	fbe3 2504 	umlal	r2, r5, r3, r4
 80abe38:	18b7      	adds	r7, r6, r2
 80abe3a:	f145 0200 	adc.w	r2, r5, #0
 80abe3e:	f841 7b04 	str.w	r7, [r1], #4
 80abe42:	f850 4b04 	ldr.w	r4, [r0], #4
 80abe46:	f04f 0500 	mov.w	r5, #0
 80abe4a:	680e      	ldr	r6, [r1, #0]
 80abe4c:	fbe3 2504 	umlal	r2, r5, r3, r4
 80abe50:	18b7      	adds	r7, r6, r2
 80abe52:	f145 0200 	adc.w	r2, r5, #0
 80abe56:	f841 7b04 	str.w	r7, [r1], #4
 80abe5a:	f850 4b04 	ldr.w	r4, [r0], #4
 80abe5e:	f04f 0500 	mov.w	r5, #0
 80abe62:	680e      	ldr	r6, [r1, #0]
 80abe64:	fbe3 2504 	umlal	r2, r5, r3, r4
 80abe68:	18b7      	adds	r7, r6, r2
 80abe6a:	f145 0200 	adc.w	r2, r5, #0
 80abe6e:	f841 7b04 	str.w	r7, [r1], #4
 80abe72:	f850 4b04 	ldr.w	r4, [r0], #4
 80abe76:	f04f 0500 	mov.w	r5, #0
 80abe7a:	680e      	ldr	r6, [r1, #0]
 80abe7c:	fbe3 2504 	umlal	r2, r5, r3, r4
 80abe80:	18b7      	adds	r7, r6, r2
 80abe82:	f145 0200 	adc.w	r2, r5, #0
 80abe86:	f841 7b04 	str.w	r7, [r1], #4
 80abe8a:	f850 4b04 	ldr.w	r4, [r0], #4
 80abe8e:	f04f 0500 	mov.w	r5, #0
 80abe92:	680e      	ldr	r6, [r1, #0]
 80abe94:	fbe3 2504 	umlal	r2, r5, r3, r4
 80abe98:	18b7      	adds	r7, r6, r2
 80abe9a:	f145 0200 	adc.w	r2, r5, #0
 80abe9e:	f841 7b04 	str.w	r7, [r1], #4
 80abea2:	f850 4b04 	ldr.w	r4, [r0], #4
 80abea6:	f04f 0500 	mov.w	r5, #0
 80abeaa:	680e      	ldr	r6, [r1, #0]
 80abeac:	fbe3 2504 	umlal	r2, r5, r3, r4
 80abeb0:	18b7      	adds	r7, r6, r2
 80abeb2:	f145 0200 	adc.w	r2, r5, #0
 80abeb6:	f841 7b04 	str.w	r7, [r1], #4
 80abeba:	f850 4b04 	ldr.w	r4, [r0], #4
 80abebe:	f04f 0500 	mov.w	r5, #0
 80abec2:	680e      	ldr	r6, [r1, #0]
 80abec4:	fbe3 2504 	umlal	r2, r5, r3, r4
 80abec8:	18b7      	adds	r7, r6, r2
 80abeca:	f145 0200 	adc.w	r2, r5, #0
 80abece:	f841 7b04 	str.w	r7, [r1], #4
 80abed2:	f850 4b04 	ldr.w	r4, [r0], #4
 80abed6:	f04f 0500 	mov.w	r5, #0
 80abeda:	680e      	ldr	r6, [r1, #0]
 80abedc:	fbe3 2504 	umlal	r2, r5, r3, r4
 80abee0:	18b7      	adds	r7, r6, r2
 80abee2:	f145 0200 	adc.w	r2, r5, #0
 80abee6:	f841 7b04 	str.w	r7, [r1], #4
 80abeea:	f850 4b04 	ldr.w	r4, [r0], #4
 80abeee:	f04f 0500 	mov.w	r5, #0
 80abef2:	680e      	ldr	r6, [r1, #0]
 80abef4:	fbe3 2504 	umlal	r2, r5, r3, r4
 80abef8:	18b7      	adds	r7, r6, r2
 80abefa:	f145 0200 	adc.w	r2, r5, #0
 80abefe:	f841 7b04 	str.w	r7, [r1], #4
 80abf02:	f850 4b04 	ldr.w	r4, [r0], #4
 80abf06:	f04f 0500 	mov.w	r5, #0
 80abf0a:	680e      	ldr	r6, [r1, #0]
 80abf0c:	fbe3 2504 	umlal	r2, r5, r3, r4
 80abf10:	18b7      	adds	r7, r6, r2
 80abf12:	f145 0200 	adc.w	r2, r5, #0
 80abf16:	f841 7b04 	str.w	r7, [r1], #4
 80abf1a:	f850 4b04 	ldr.w	r4, [r0], #4
 80abf1e:	f04f 0500 	mov.w	r5, #0
 80abf22:	680e      	ldr	r6, [r1, #0]
 80abf24:	fbe3 2504 	umlal	r2, r5, r3, r4
 80abf28:	18b7      	adds	r7, r6, r2
 80abf2a:	f145 0200 	adc.w	r2, r5, #0
 80abf2e:	f841 7b04 	str.w	r7, [r1], #4
 80abf32:	f850 4b04 	ldr.w	r4, [r0], #4
 80abf36:	f04f 0500 	mov.w	r5, #0
 80abf3a:	680e      	ldr	r6, [r1, #0]
 80abf3c:	fbe3 2504 	umlal	r2, r5, r3, r4
 80abf40:	18b7      	adds	r7, r6, r2
 80abf42:	f145 0200 	adc.w	r2, r5, #0
 80abf46:	f841 7b04 	str.w	r7, [r1], #4
 80abf4a:	f850 4b04 	ldr.w	r4, [r0], #4
 80abf4e:	f04f 0500 	mov.w	r5, #0
 80abf52:	680e      	ldr	r6, [r1, #0]
 80abf54:	fbe3 2504 	umlal	r2, r5, r3, r4
 80abf58:	18b7      	adds	r7, r6, r2
 80abf5a:	f145 0200 	adc.w	r2, r5, #0
 80abf5e:	f841 7b04 	str.w	r7, [r1], #4
 80abf62:	f850 4b04 	ldr.w	r4, [r0], #4
 80abf66:	f04f 0500 	mov.w	r5, #0
 80abf6a:	680e      	ldr	r6, [r1, #0]
 80abf6c:	fbe3 2504 	umlal	r2, r5, r3, r4
 80abf70:	18b7      	adds	r7, r6, r2
 80abf72:	f145 0200 	adc.w	r2, r5, #0
 80abf76:	f841 7b04 	str.w	r7, [r1], #4
 80abf7a:	9205      	str	r2, [sp, #20]
 80abf7c:	9102      	str	r1, [sp, #8]
 80abf7e:	9003      	str	r0, [sp, #12]
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 80abf80:	f1ac 0c10 	sub.w	ip, ip, #16
 80abf84:	e731      	b.n	80abdea <_ZL11mpi_mul_hlpjPmS_m+0x12>
 80abf86:	f00e 0e0f 	and.w	lr, lr, #15
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 80abf8a:	f1be 0f07 	cmp.w	lr, #7
 80abf8e:	d966      	bls.n	80ac05e <_ZL11mpi_mul_hlpjPmS_m+0x286>
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
 80abf90:	9803      	ldr	r0, [sp, #12]
 80abf92:	9902      	ldr	r1, [sp, #8]
 80abf94:	9a05      	ldr	r2, [sp, #20]
 80abf96:	9b01      	ldr	r3, [sp, #4]
 80abf98:	f850 4b04 	ldr.w	r4, [r0], #4
 80abf9c:	f04f 0500 	mov.w	r5, #0
 80abfa0:	680e      	ldr	r6, [r1, #0]
 80abfa2:	fbe3 2504 	umlal	r2, r5, r3, r4
 80abfa6:	18b7      	adds	r7, r6, r2
 80abfa8:	f145 0200 	adc.w	r2, r5, #0
 80abfac:	f841 7b04 	str.w	r7, [r1], #4
 80abfb0:	f850 4b04 	ldr.w	r4, [r0], #4
 80abfb4:	f04f 0500 	mov.w	r5, #0
 80abfb8:	680e      	ldr	r6, [r1, #0]
 80abfba:	fbe3 2504 	umlal	r2, r5, r3, r4
 80abfbe:	18b7      	adds	r7, r6, r2
 80abfc0:	f145 0200 	adc.w	r2, r5, #0
 80abfc4:	f841 7b04 	str.w	r7, [r1], #4
 80abfc8:	f850 4b04 	ldr.w	r4, [r0], #4
 80abfcc:	f04f 0500 	mov.w	r5, #0
 80abfd0:	680e      	ldr	r6, [r1, #0]
 80abfd2:	fbe3 2504 	umlal	r2, r5, r3, r4
 80abfd6:	18b7      	adds	r7, r6, r2
 80abfd8:	f145 0200 	adc.w	r2, r5, #0
 80abfdc:	f841 7b04 	str.w	r7, [r1], #4
 80abfe0:	f850 4b04 	ldr.w	r4, [r0], #4
 80abfe4:	f04f 0500 	mov.w	r5, #0
 80abfe8:	680e      	ldr	r6, [r1, #0]
 80abfea:	fbe3 2504 	umlal	r2, r5, r3, r4
 80abfee:	18b7      	adds	r7, r6, r2
 80abff0:	f145 0200 	adc.w	r2, r5, #0
 80abff4:	f841 7b04 	str.w	r7, [r1], #4
 80abff8:	f850 4b04 	ldr.w	r4, [r0], #4
 80abffc:	f04f 0500 	mov.w	r5, #0
 80ac000:	680e      	ldr	r6, [r1, #0]
 80ac002:	fbe3 2504 	umlal	r2, r5, r3, r4
 80ac006:	18b7      	adds	r7, r6, r2
 80ac008:	f145 0200 	adc.w	r2, r5, #0
 80ac00c:	f841 7b04 	str.w	r7, [r1], #4
 80ac010:	f850 4b04 	ldr.w	r4, [r0], #4
 80ac014:	f04f 0500 	mov.w	r5, #0
 80ac018:	680e      	ldr	r6, [r1, #0]
 80ac01a:	fbe3 2504 	umlal	r2, r5, r3, r4
 80ac01e:	18b7      	adds	r7, r6, r2
 80ac020:	f145 0200 	adc.w	r2, r5, #0
 80ac024:	f841 7b04 	str.w	r7, [r1], #4
 80ac028:	f850 4b04 	ldr.w	r4, [r0], #4
 80ac02c:	f04f 0500 	mov.w	r5, #0
 80ac030:	680e      	ldr	r6, [r1, #0]
 80ac032:	fbe3 2504 	umlal	r2, r5, r3, r4
 80ac036:	18b7      	adds	r7, r6, r2
 80ac038:	f145 0200 	adc.w	r2, r5, #0
 80ac03c:	f841 7b04 	str.w	r7, [r1], #4
 80ac040:	f850 4b04 	ldr.w	r4, [r0], #4
 80ac044:	f04f 0500 	mov.w	r5, #0
 80ac048:	680e      	ldr	r6, [r1, #0]
 80ac04a:	fbe3 2504 	umlal	r2, r5, r3, r4
 80ac04e:	18b7      	adds	r7, r6, r2
 80ac050:	f145 0200 	adc.w	r2, r5, #0
 80ac054:	f841 7b04 	str.w	r7, [r1], #4
 80ac058:	9205      	str	r2, [sp, #20]
 80ac05a:	9102      	str	r1, [sp, #8]
 80ac05c:	9003      	str	r0, [sp, #12]
 80ac05e:	f00e 0e07 	and.w	lr, lr, #7
    }

    for( ; i > 0; i-- )
 80ac062:	f1be 0f00 	cmp.w	lr, #0
 80ac066:	d015      	beq.n	80ac094 <_ZL11mpi_mul_hlpjPmS_m+0x2bc>
    {
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
 80ac068:	9803      	ldr	r0, [sp, #12]
 80ac06a:	9902      	ldr	r1, [sp, #8]
 80ac06c:	9a05      	ldr	r2, [sp, #20]
 80ac06e:	9b01      	ldr	r3, [sp, #4]
 80ac070:	f850 4b04 	ldr.w	r4, [r0], #4
 80ac074:	f04f 0500 	mov.w	r5, #0
 80ac078:	680e      	ldr	r6, [r1, #0]
 80ac07a:	fbe3 2504 	umlal	r2, r5, r3, r4
 80ac07e:	18b7      	adds	r7, r6, r2
 80ac080:	f145 0200 	adc.w	r2, r5, #0
 80ac084:	f841 7b04 	str.w	r7, [r1], #4
 80ac088:	9205      	str	r2, [sp, #20]
 80ac08a:	9102      	str	r1, [sp, #8]
 80ac08c:	9003      	str	r0, [sp, #12]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 80ac08e:	f10e 3eff 	add.w	lr, lr, #4294967295
 80ac092:	e7e6      	b.n	80ac062 <_ZL11mpi_mul_hlpjPmS_m+0x28a>
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
 80ac094:	9a02      	ldr	r2, [sp, #8]
 80ac096:	9b05      	ldr	r3, [sp, #20]
 80ac098:	6811      	ldr	r1, [r2, #0]
 80ac09a:	440b      	add	r3, r1
 80ac09c:	6013      	str	r3, [r2, #0]
 80ac09e:	9b02      	ldr	r3, [sp, #8]
 80ac0a0:	9a05      	ldr	r2, [sp, #20]
 80ac0a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80ac0a6:	4291      	cmp	r1, r2
 80ac0a8:	bf34      	ite	cc
 80ac0aa:	2201      	movcc	r2, #1
 80ac0ac:	2200      	movcs	r2, #0
 80ac0ae:	9205      	str	r2, [sp, #20]
 80ac0b0:	9302      	str	r3, [sp, #8]
    }
    while( c != 0 );
 80ac0b2:	d3ef      	bcc.n	80ac094 <_ZL11mpi_mul_hlpjPmS_m+0x2bc>
}
 80ac0b4:	b007      	add	sp, #28
 80ac0b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080ac0b8 <_ZL21mpi_bigendian_to_hostPmj.part.1>:
     * For that, simultaneously traverse the limbs from left to right
     * and from right to left, as long as the left index is not bigger
     * than the right index (it's not a problem if limbs is odd and the
     * indices coincide in the last iteration).
     */
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
 80ac0b8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80ac0bc:	3901      	subs	r1, #1
 80ac0be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
         cur_limb_left <= cur_limb_right;
 80ac0c2:	4288      	cmp	r0, r1
 80ac0c4:	d808      	bhi.n	80ac0d8 <_ZL21mpi_bigendian_to_hostPmj.part.1+0x20>
#if defined(have_bswap)
    /* The compiler is hopefully able to statically evaluate this! */
    switch( sizeof(mbedtls_mpi_uint) )
    {
        case 4:
            return( __builtin_bswap32(x) );
 80ac0c6:	6803      	ldr	r3, [r0, #0]
 80ac0c8:	680a      	ldr	r2, [r1, #0]
 80ac0ca:	ba1b      	rev	r3, r3
 80ac0cc:	ba12      	rev	r2, r2
    {
        mbedtls_mpi_uint tmp;
        /* Note that if cur_limb_left == cur_limb_right,
         * this code effectively swaps the bytes only once. */
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
 80ac0ce:	f840 2b04 	str.w	r2, [r0], #4
        *cur_limb_right = tmp;
 80ac0d2:	f841 3904 	str.w	r3, [r1], #-4
 80ac0d6:	e7f4      	b.n	80ac0c2 <_ZL21mpi_bigendian_to_hostPmj.part.1+0xa>
 80ac0d8:	4770      	bx	lr

080ac0da <mbedtls_mpi_init>:
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80ac0da:	2301      	movs	r3, #1
 80ac0dc:	6003      	str	r3, [r0, #0]
    X->n = 0;
 80ac0de:	2300      	movs	r3, #0
 80ac0e0:	6043      	str	r3, [r0, #4]
    X->p = NULL;
 80ac0e2:	6083      	str	r3, [r0, #8]
 80ac0e4:	4770      	bx	lr

080ac0e6 <mbedtls_mpi_free>:

/*
 * Unallocate one MPI
 */
void mbedtls_mpi_free( mbedtls_mpi *X )
{
 80ac0e6:	b510      	push	{r4, lr}
    if( X == NULL )
 80ac0e8:	4604      	mov	r4, r0
 80ac0ea:	b168      	cbz	r0, 80ac108 <mbedtls_mpi_free+0x22>
        return;

    if( X->p != NULL )
 80ac0ec:	6880      	ldr	r0, [r0, #8]
 80ac0ee:	b130      	cbz	r0, 80ac0fe <mbedtls_mpi_free+0x18>
#define CHARS_TO_LIMBS(i) ( (i) / ciL + ( (i) % ciL != 0 ) )

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n )
{
    mbedtls_platform_zeroize( v, ciL * n );
 80ac0f0:	6861      	ldr	r1, [r4, #4]
 80ac0f2:	0089      	lsls	r1, r1, #2
 80ac0f4:	f7fa f98c 	bl	80a6410 <mbedtls_platform_zeroize>
        return;

    if( X->p != NULL )
    {
        mbedtls_mpi_zeroize( X->p, X->n );
        mbedtls_free( X->p );
 80ac0f8:	68a0      	ldr	r0, [r4, #8]
 80ac0fa:	f004 fff5 	bl	80b10e8 <free>
    }

    X->s = 1;
 80ac0fe:	2301      	movs	r3, #1
 80ac100:	6023      	str	r3, [r4, #0]
    X->n = 0;
 80ac102:	2300      	movs	r3, #0
 80ac104:	6063      	str	r3, [r4, #4]
    X->p = NULL;
 80ac106:	60a3      	str	r3, [r4, #8]
 80ac108:	bd10      	pop	{r4, pc}

080ac10a <mbedtls_mpi_grow>:
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
    mbedtls_mpi_uint *p;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 80ac10a:	f242 7310 	movw	r3, #10000	; 0x2710
 80ac10e:	4299      	cmp	r1, r3

/*
 * Enlarge to the specified number of limbs
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
 80ac110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80ac114:	4604      	mov	r4, r0
 80ac116:	460e      	mov	r6, r1
    mbedtls_mpi_uint *p;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 80ac118:	d903      	bls.n	80ac122 <mbedtls_mpi_grow+0x18>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 80ac11a:	f06f 000f 	mvn.w	r0, #15
 80ac11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    if( X->n < nblimbs )
 80ac122:	6845      	ldr	r5, [r0, #4]
 80ac124:	42a9      	cmp	r1, r5
 80ac126:	d917      	bls.n	80ac158 <mbedtls_mpi_grow+0x4e>
    {
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 80ac128:	2104      	movs	r1, #4
 80ac12a:	4630      	mov	r0, r6
 80ac12c:	f006 fa46 	bl	80b25bc <calloc>
 80ac130:	4680      	mov	r8, r0
 80ac132:	2800      	cmp	r0, #0
 80ac134:	d0f1      	beq.n	80ac11a <mbedtls_mpi_grow+0x10>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

        if( X->p != NULL )
 80ac136:	68a7      	ldr	r7, [r4, #8]
 80ac138:	b15f      	cbz	r7, 80ac152 <mbedtls_mpi_grow+0x48>
        {
            memcpy( p, X->p, X->n * ciL );
 80ac13a:	00ad      	lsls	r5, r5, #2
 80ac13c:	462a      	mov	r2, r5
 80ac13e:	4639      	mov	r1, r7
 80ac140:	f006 fb59 	bl	80b27f6 <memcpy>
#define CHARS_TO_LIMBS(i) ( (i) / ciL + ( (i) % ciL != 0 ) )

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n )
{
    mbedtls_platform_zeroize( v, ciL * n );
 80ac144:	4638      	mov	r0, r7
 80ac146:	4629      	mov	r1, r5
 80ac148:	f7fa f962 	bl	80a6410 <mbedtls_platform_zeroize>

        if( X->p != NULL )
        {
            memcpy( p, X->p, X->n * ciL );
            mbedtls_mpi_zeroize( X->p, X->n );
            mbedtls_free( X->p );
 80ac14c:	68a0      	ldr	r0, [r4, #8]
 80ac14e:	f004 ffcb 	bl	80b10e8 <free>
        }

        X->n = nblimbs;
 80ac152:	6066      	str	r6, [r4, #4]
        X->p = p;
 80ac154:	f8c4 8008 	str.w	r8, [r4, #8]
    }

    return( 0 );
 80ac158:	2000      	movs	r0, #0
}
 80ac15a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080ac15e <mbedtls_mpi_shrink>:
{
    mbedtls_mpi_uint *p;
    size_t i;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 80ac15e:	f242 7310 	movw	r3, #10000	; 0x2710
 80ac162:	4299      	cmp	r1, r3
/*
 * Resize down as much as possible,
 * while keeping at least the specified number of limbs
 */
int mbedtls_mpi_shrink( mbedtls_mpi *X, size_t nblimbs )
{
 80ac164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80ac168:	4606      	mov	r6, r0
 80ac16a:	460c      	mov	r4, r1
    mbedtls_mpi_uint *p;
    size_t i;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 80ac16c:	d903      	bls.n	80ac176 <mbedtls_mpi_shrink+0x18>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 80ac16e:	f06f 000f 	mvn.w	r0, #15
 80ac172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    /* Actually resize up in this case */
    if( X->n <= nblimbs )
 80ac176:	6843      	ldr	r3, [r0, #4]
 80ac178:	4299      	cmp	r1, r3
 80ac17a:	d303      	bcc.n	80ac184 <mbedtls_mpi_shrink+0x26>

    X->n = i;
    X->p = p;

    return( 0 );
}
 80ac17c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

    /* Actually resize up in this case */
    if( X->n <= nblimbs )
        return( mbedtls_mpi_grow( X, nblimbs ) );
 80ac180:	f7ff bfc3 	b.w	80ac10a <mbedtls_mpi_grow>

    for( i = X->n - 1; i > 0; i-- )
 80ac184:	1e59      	subs	r1, r3, #1
 80ac186:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80ac18a:	3b01      	subs	r3, #1
 80ac18c:	009d      	lsls	r5, r3, #2
 80ac18e:	462b      	mov	r3, r5
 80ac190:	b129      	cbz	r1, 80ac19e <mbedtls_mpi_shrink+0x40>
        if( X->p[i] != 0 )
 80ac192:	68b2      	ldr	r2, [r6, #8]
 80ac194:	58d2      	ldr	r2, [r2, r3]
 80ac196:	3b04      	subs	r3, #4
 80ac198:	b90a      	cbnz	r2, 80ac19e <mbedtls_mpi_shrink+0x40>

    /* Actually resize up in this case */
    if( X->n <= nblimbs )
        return( mbedtls_mpi_grow( X, nblimbs ) );

    for( i = X->n - 1; i > 0; i-- )
 80ac19a:	3901      	subs	r1, #1
 80ac19c:	e7f8      	b.n	80ac190 <mbedtls_mpi_shrink+0x32>
        if( X->p[i] != 0 )
            break;
    i++;
 80ac19e:	3101      	adds	r1, #1
 80ac1a0:	428c      	cmp	r4, r1
 80ac1a2:	bf38      	it	cc
 80ac1a4:	460c      	movcc	r4, r1

    if( i < nblimbs )
        i = nblimbs;

    if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( i, ciL ) ) == NULL )
 80ac1a6:	2104      	movs	r1, #4
 80ac1a8:	4620      	mov	r0, r4
 80ac1aa:	f006 fa07 	bl	80b25bc <calloc>
 80ac1ae:	4680      	mov	r8, r0
 80ac1b0:	2800      	cmp	r0, #0
 80ac1b2:	d0dc      	beq.n	80ac16e <mbedtls_mpi_shrink+0x10>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

    if( X->p != NULL )
 80ac1b4:	68b7      	ldr	r7, [r6, #8]
 80ac1b6:	b157      	cbz	r7, 80ac1ce <mbedtls_mpi_shrink+0x70>
    {
        memcpy( p, X->p, i * ciL );
 80ac1b8:	00a2      	lsls	r2, r4, #2
 80ac1ba:	4639      	mov	r1, r7
 80ac1bc:	f006 fb1b 	bl	80b27f6 <memcpy>
#define CHARS_TO_LIMBS(i) ( (i) / ciL + ( (i) % ciL != 0 ) )

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n )
{
    mbedtls_platform_zeroize( v, ciL * n );
 80ac1c0:	4638      	mov	r0, r7
 80ac1c2:	1d29      	adds	r1, r5, #4
 80ac1c4:	f7fa f924 	bl	80a6410 <mbedtls_platform_zeroize>

    if( X->p != NULL )
    {
        memcpy( p, X->p, i * ciL );
        mbedtls_mpi_zeroize( X->p, X->n );
        mbedtls_free( X->p );
 80ac1c8:	68b0      	ldr	r0, [r6, #8]
 80ac1ca:	f004 ff8d 	bl	80b10e8 <free>
    }

    X->n = i;
 80ac1ce:	6074      	str	r4, [r6, #4]
    X->p = p;
 80ac1d0:	f8c6 8008 	str.w	r8, [r6, #8]

    return( 0 );
 80ac1d4:	2000      	movs	r0, #0
}
 80ac1d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080ac1da <mbedtls_mpi_copy>:
    int ret = 0;
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    if( X == Y )
 80ac1da:	4288      	cmp	r0, r1

/*
 * Copy the contents of Y into X
 */
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 80ac1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80ac1de:	4606      	mov	r6, r0
 80ac1e0:	460f      	mov	r7, r1
    int ret = 0;
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    if( X == Y )
 80ac1e2:	d024      	beq.n	80ac22e <mbedtls_mpi_copy+0x54>
        return( 0 );

    if( Y->p == NULL )
 80ac1e4:	688d      	ldr	r5, [r1, #8]
 80ac1e6:	b915      	cbnz	r5, 80ac1ee <mbedtls_mpi_copy+0x14>
    {
        mbedtls_mpi_free( X );
 80ac1e8:	f7ff ff7d 	bl	80ac0e6 <mbedtls_mpi_free>
 80ac1ec:	e01f      	b.n	80ac22e <mbedtls_mpi_copy+0x54>
        return( 0 );
    }

    for( i = Y->n - 1; i > 0; i-- )
 80ac1ee:	684c      	ldr	r4, [r1, #4]
 80ac1f0:	3c01      	subs	r4, #1
 80ac1f2:	b11c      	cbz	r4, 80ac1fc <mbedtls_mpi_copy+0x22>
        if( Y->p[i] != 0 )
 80ac1f4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80ac1f8:	2b00      	cmp	r3, #0
 80ac1fa:	d0f9      	beq.n	80ac1f0 <mbedtls_mpi_copy+0x16>
            break;
    i++;

    X->s = Y->s;

    if( X->n < i )
 80ac1fc:	6872      	ldr	r2, [r6, #4]
    }

    for( i = Y->n - 1; i > 0; i-- )
        if( Y->p[i] != 0 )
            break;
    i++;
 80ac1fe:	3401      	adds	r4, #1

    X->s = Y->s;
 80ac200:	683b      	ldr	r3, [r7, #0]

    if( X->n < i )
 80ac202:	4294      	cmp	r4, r2
    for( i = Y->n - 1; i > 0; i-- )
        if( Y->p[i] != 0 )
            break;
    i++;

    X->s = Y->s;
 80ac204:	6033      	str	r3, [r6, #0]

    if( X->n < i )
 80ac206:	d905      	bls.n	80ac214 <mbedtls_mpi_copy+0x3a>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 80ac208:	4621      	mov	r1, r4
 80ac20a:	4630      	mov	r0, r6
 80ac20c:	f7ff ff7d 	bl	80ac10a <mbedtls_mpi_grow>
 80ac210:	b140      	cbz	r0, 80ac224 <mbedtls_mpi_copy+0x4a>
 80ac212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    else
    {
        memset( X->p + i, 0, ( X->n - i ) * ciL );
 80ac214:	68b0      	ldr	r0, [r6, #8]
 80ac216:	1b12      	subs	r2, r2, r4
 80ac218:	0092      	lsls	r2, r2, #2
 80ac21a:	2100      	movs	r1, #0
 80ac21c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80ac220:	f006 fb0f 	bl	80b2842 <memset>
    }

    memcpy( X->p, Y->p, i * ciL );
 80ac224:	00a2      	lsls	r2, r4, #2
 80ac226:	68b9      	ldr	r1, [r7, #8]
 80ac228:	68b0      	ldr	r0, [r6, #8]
 80ac22a:	f006 fae4 	bl	80b27f6 <memcpy>
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    if( X == Y )
        return( 0 );
 80ac22e:	2000      	movs	r0, #0
    memcpy( X->p, Y->p, i * ciL );

cleanup:

    return( ret );
}
 80ac230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080ac232 <mbedtls_mpi_safe_cond_assign>:
 * Conditionally assign X = Y, without leaking information
 * about whether the assignment was made or not.
 * (Leaking information about the respective sizes of X and Y is ok however.)
 */
int mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X, const mbedtls_mpi *Y, unsigned char assign )
{
 80ac232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80ac234:	460d      	mov	r5, r1
    MPI_VALIDATE_RET( Y != NULL );

    /* make sure assign is 0 or 1 in a time-constant manner */
    assign = (assign | (unsigned char)-assign) >> 7;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 80ac236:	6849      	ldr	r1, [r1, #4]
 * Conditionally assign X = Y, without leaking information
 * about whether the assignment was made or not.
 * (Leaking information about the respective sizes of X and Y is ok however.)
 */
int mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X, const mbedtls_mpi *Y, unsigned char assign )
{
 80ac238:	4604      	mov	r4, r0
 80ac23a:	4616      	mov	r6, r2
    MPI_VALIDATE_RET( Y != NULL );

    /* make sure assign is 0 or 1 in a time-constant manner */
    assign = (assign | (unsigned char)-assign) >> 7;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 80ac23c:	f7ff ff65 	bl	80ac10a <mbedtls_mpi_grow>
 80ac240:	bb58      	cbnz	r0, 80ac29a <mbedtls_mpi_safe_cond_assign+0x68>
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    /* make sure assign is 0 or 1 in a time-constant manner */
    assign = (assign | (unsigned char)-assign) >> 7;
 80ac242:	4273      	negs	r3, r6
 80ac244:	ea46 0203 	orr.w	r2, r6, r3

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );

    X->s = X->s * ( 1 - assign ) + Y->s * assign;
 80ac248:	6829      	ldr	r1, [r5, #0]
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    /* make sure assign is 0 or 1 in a time-constant manner */
    assign = (assign | (unsigned char)-assign) >> 7;
 80ac24a:	f3c2 12c0 	ubfx	r2, r2, #7, #1

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );

    X->s = X->s * ( 1 - assign ) + Y->s * assign;
 80ac24e:	4351      	muls	r1, r2
 80ac250:	6823      	ldr	r3, [r4, #0]
 80ac252:	f1c2 0601 	rsb	r6, r2, #1
 80ac256:	fb03 1306 	mla	r3, r3, r6, r1
 80ac25a:	6023      	str	r3, [r4, #0]

    for( i = 0; i < Y->n; i++ )
 80ac25c:	4603      	mov	r3, r0
 80ac25e:	6869      	ldr	r1, [r5, #4]
 80ac260:	428b      	cmp	r3, r1
 80ac262:	ea4f 0183 	mov.w	r1, r3, lsl #2
 80ac266:	d20d      	bcs.n	80ac284 <mbedtls_mpi_safe_cond_assign+0x52>
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;
 80ac268:	68a9      	ldr	r1, [r5, #8]
 80ac26a:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80ac26e:	f851 7023 	ldr.w	r7, [r1, r3, lsl #2]
 80ac272:	f85e 1023 	ldr.w	r1, [lr, r3, lsl #2]
 80ac276:	4371      	muls	r1, r6
 80ac278:	fb07 1102 	mla	r1, r7, r2, r1
 80ac27c:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );

    X->s = X->s * ( 1 - assign ) + Y->s * assign;

    for( i = 0; i < Y->n; i++ )
 80ac280:	3301      	adds	r3, #1
 80ac282:	e7ec      	b.n	80ac25e <mbedtls_mpi_safe_cond_assign+0x2c>
 80ac284:	460a      	mov	r2, r1
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;

    for( ; i < X->n; i++ )
 80ac286:	6861      	ldr	r1, [r4, #4]
 80ac288:	428b      	cmp	r3, r1
 80ac28a:	d206      	bcs.n	80ac29a <mbedtls_mpi_safe_cond_assign+0x68>
        X->p[i] *= ( 1 - assign );
 80ac28c:	68a5      	ldr	r5, [r4, #8]
    X->s = X->s * ( 1 - assign ) + Y->s * assign;

    for( i = 0; i < Y->n; i++ )
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;

    for( ; i < X->n; i++ )
 80ac28e:	3301      	adds	r3, #1
        X->p[i] *= ( 1 - assign );
 80ac290:	58a9      	ldr	r1, [r5, r2]
 80ac292:	4371      	muls	r1, r6
 80ac294:	50a9      	str	r1, [r5, r2]
 80ac296:	3204      	adds	r2, #4
    X->s = X->s * ( 1 - assign ) + Y->s * assign;

    for( i = 0; i < Y->n; i++ )
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;

    for( ; i < X->n; i++ )
 80ac298:	e7f5      	b.n	80ac286 <mbedtls_mpi_safe_cond_assign+0x54>
        X->p[i] *= ( 1 - assign );

cleanup:
    return( ret );
}
 80ac29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080ac29c <mbedtls_mpi_lset>:

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 80ac29c:	b570      	push	{r4, r5, r6, lr}
 80ac29e:	460e      	mov	r6, r1
    int ret;
    MPI_VALIDATE_RET( X != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 80ac2a0:	2101      	movs	r1, #1

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 80ac2a2:	4604      	mov	r4, r0
    int ret;
    MPI_VALIDATE_RET( X != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 80ac2a4:	f7ff ff31 	bl	80ac10a <mbedtls_mpi_grow>
 80ac2a8:	4605      	mov	r5, r0
 80ac2aa:	b988      	cbnz	r0, 80ac2d0 <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
 80ac2ac:	6862      	ldr	r2, [r4, #4]
 80ac2ae:	4601      	mov	r1, r0
 80ac2b0:	0092      	lsls	r2, r2, #2
 80ac2b2:	68a0      	ldr	r0, [r4, #8]
 80ac2b4:	f006 fac5 	bl	80b2842 <memset>

    X->p[0] = ( z < 0 ) ? -z : z;
 80ac2b8:	68a3      	ldr	r3, [r4, #8]
 80ac2ba:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
 80ac2be:	2e00      	cmp	r6, #0
    MPI_VALIDATE_RET( X != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    memset( X->p, 0, X->n * ciL );

    X->p[0] = ( z < 0 ) ? -z : z;
 80ac2c0:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
 80ac2c4:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 80ac2c6:	bfb4      	ite	lt
 80ac2c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80ac2cc:	2301      	movge	r3, #1
 80ac2ce:	6023      	str	r3, [r4, #0]

cleanup:

    return( ret );
}
 80ac2d0:	4628      	mov	r0, r5
 80ac2d2:	bd70      	pop	{r4, r5, r6, pc}

080ac2d4 <mbedtls_mpi_get_bit>:
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
    MPI_VALIDATE_RET( X != NULL );

    if( X->n * biL <= pos )
 80ac2d4:	6843      	ldr	r3, [r0, #4]
 80ac2d6:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
        return( 0 );

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 80ac2da:	bf3f      	itttt	cc
 80ac2dc:	6883      	ldrcc	r3, [r0, #8]
 80ac2de:	094a      	lsrcc	r2, r1, #5
 80ac2e0:	f853 3022 	ldrcc.w	r3, [r3, r2, lsl #2]
 80ac2e4:	f001 001f 	andcc.w	r0, r1, #31
 80ac2e8:	bf3a      	itte	cc
 80ac2ea:	fa23 f000 	lsrcc.w	r0, r3, r0
 80ac2ee:	f000 0001 	andcc.w	r0, r0, #1
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
    MPI_VALIDATE_RET( X != NULL );

    if( X->n * biL <= pos )
        return( 0 );
 80ac2f2:	2000      	movcs	r0, #0

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
}
 80ac2f4:	4770      	bx	lr

080ac2f6 <mbedtls_mpi_lsb>:
/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;
 80ac2f6:	2300      	movs	r3, #0
    MBEDTLS_INTERNAL_VALIDATE_RET( X != NULL, 0 );

    for( i = 0; i < X->n; i++ )
 80ac2f8:	461a      	mov	r2, r3

/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
 80ac2fa:	b570      	push	{r4, r5, r6, lr}
    size_t i, j, count = 0;
    MBEDTLS_INTERNAL_VALIDATE_RET( X != NULL, 0 );

    for( i = 0; i < X->n; i++ )
 80ac2fc:	6844      	ldr	r4, [r0, #4]
 80ac2fe:	42a2      	cmp	r2, r4
 80ac300:	d00e      	beq.n	80ac320 <mbedtls_mpi_lsb+0x2a>
        for( j = 0; j < biL; j++, count++ )
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 80ac302:	6881      	ldr	r1, [r0, #8]
 80ac304:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
 80ac308:	2100      	movs	r1, #0
 80ac30a:	fa25 f601 	lsr.w	r6, r5, r1
 80ac30e:	07f6      	lsls	r6, r6, #31
 80ac310:	d408      	bmi.n	80ac324 <mbedtls_mpi_lsb+0x2e>
{
    size_t i, j, count = 0;
    MBEDTLS_INTERNAL_VALIDATE_RET( X != NULL, 0 );

    for( i = 0; i < X->n; i++ )
        for( j = 0; j < biL; j++, count++ )
 80ac312:	3101      	adds	r1, #1
 80ac314:	2920      	cmp	r1, #32
 80ac316:	f103 0301 	add.w	r3, r3, #1
 80ac31a:	d1f6      	bne.n	80ac30a <mbedtls_mpi_lsb+0x14>
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;
    MBEDTLS_INTERNAL_VALIDATE_RET( X != NULL, 0 );

    for( i = 0; i < X->n; i++ )
 80ac31c:	3201      	adds	r2, #1
 80ac31e:	e7ee      	b.n	80ac2fe <mbedtls_mpi_lsb+0x8>
        for( j = 0; j < biL; j++, count++ )
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
                return( count );

    return( 0 );
 80ac320:	2000      	movs	r0, #0
 80ac322:	bd70      	pop	{r4, r5, r6, pc}
 80ac324:	4618      	mov	r0, r3
}
 80ac326:	bd70      	pop	{r4, r5, r6, pc}

080ac328 <mbedtls_mpi_bitlen>:

/*
 * Return the number of bits
 */
size_t mbedtls_mpi_bitlen( const mbedtls_mpi *X )
{
 80ac328:	b510      	push	{r4, lr}
    size_t i, j;

    if( X->n == 0 )
 80ac32a:	6843      	ldr	r3, [r0, #4]
 80ac32c:	b1d3      	cbz	r3, 80ac364 <mbedtls_mpi_bitlen+0x3c>
 80ac32e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80ac332:	3a01      	subs	r2, #1
        return( 0 );

    for( i = X->n - 1; i > 0; i-- )
 80ac334:	1e59      	subs	r1, r3, #1
 80ac336:	0092      	lsls	r2, r2, #2
 80ac338:	6883      	ldr	r3, [r0, #8]
 80ac33a:	b121      	cbz	r1, 80ac346 <mbedtls_mpi_bitlen+0x1e>
        if( X->p[i] != 0 )
 80ac33c:	589c      	ldr	r4, [r3, r2]
 80ac33e:	3a04      	subs	r2, #4
 80ac340:	b90c      	cbnz	r4, 80ac346 <mbedtls_mpi_bitlen+0x1e>
    size_t i, j;

    if( X->n == 0 )
        return( 0 );

    for( i = X->n - 1; i > 0; i-- )
 80ac342:	3901      	subs	r1, #1
 80ac344:	e7f8      	b.n	80ac338 <mbedtls_mpi_bitlen+0x10>
        if( X->p[i] != 0 )
            break;

    j = biL - mbedtls_clz( X->p[i] );
 80ac346:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 80ac34a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000

    for( j = 0; j < biL; j++ )
 80ac34e:	2300      	movs	r3, #0
    {
        if( x & mask ) break;
 80ac350:	4210      	tst	r0, r2
 80ac352:	d104      	bne.n	80ac35e <mbedtls_mpi_bitlen+0x36>
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
 80ac354:	3301      	adds	r3, #1
 80ac356:	2b20      	cmp	r3, #32
    {
        if( x & mask ) break;

        mask >>= 1;
 80ac358:	ea4f 0252 	mov.w	r2, r2, lsr #1
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
 80ac35c:	d1f8      	bne.n	80ac350 <mbedtls_mpi_bitlen+0x28>
        if( X->p[i] != 0 )
            break;

    j = biL - mbedtls_clz( X->p[i] );

    return( ( i * biL ) + j );
 80ac35e:	ebc3 1341 	rsb	r3, r3, r1, lsl #5
 80ac362:	3320      	adds	r3, #32
}
 80ac364:	4618      	mov	r0, r3
 80ac366:	bd10      	pop	{r4, pc}

080ac368 <mbedtls_mpi_size>:

/*
 * Return the total size in bytes
 */
size_t mbedtls_mpi_size( const mbedtls_mpi *X )
{
 80ac368:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 80ac36a:	f7ff ffdd 	bl	80ac328 <mbedtls_mpi_bitlen>
 80ac36e:	3007      	adds	r0, #7
}
 80ac370:	08c0      	lsrs	r0, r0, #3
 80ac372:	bd08      	pop	{r3, pc}

080ac374 <mbedtls_mpi_read_binary>:

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 80ac374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret;
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
 80ac378:	f012 0403 	ands.w	r4, r2, #3
 80ac37c:	bf18      	it	ne
 80ac37e:	2401      	movne	r4, #1

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 80ac380:	6843      	ldr	r3, [r0, #4]
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
    int ret;
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
 80ac382:	eb04 0492 	add.w	r4, r4, r2, lsr #2

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 80ac386:	429c      	cmp	r4, r3

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 80ac388:	4607      	mov	r7, r0
 80ac38a:	4688      	mov	r8, r1
 80ac38c:	4615      	mov	r5, r2

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 80ac38e:	d106      	bne.n	80ac39e <mbedtls_mpi_read_binary+0x2a>
    {
        mbedtls_mpi_free( X );
        mbedtls_mpi_init( X );
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 80ac390:	2100      	movs	r1, #0
 80ac392:	4638      	mov	r0, r7
 80ac394:	f7ff ff82 	bl	80ac29c <mbedtls_mpi_lset>
 80ac398:	4606      	mov	r6, r0
 80ac39a:	b178      	cbz	r0, 80ac3bc <mbedtls_mpi_read_binary+0x48>
 80ac39c:	e01e      	b.n	80ac3dc <mbedtls_mpi_read_binary+0x68>
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
    {
        mbedtls_mpi_free( X );
 80ac39e:	f7ff fea2 	bl	80ac0e6 <mbedtls_mpi_free>
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80ac3a2:	2301      	movs	r3, #1
 80ac3a4:	603b      	str	r3, [r7, #0]
    X->n = 0;
 80ac3a6:	2300      	movs	r3, #0
 80ac3a8:	607b      	str	r3, [r7, #4]
    X->p = NULL;
 80ac3aa:	60bb      	str	r3, [r7, #8]
    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
    {
        mbedtls_mpi_free( X );
        mbedtls_mpi_init( X );
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 80ac3ac:	4621      	mov	r1, r4
 80ac3ae:	4638      	mov	r0, r7
 80ac3b0:	f7ff feab 	bl	80ac10a <mbedtls_mpi_grow>
 80ac3b4:	4606      	mov	r6, r0
 80ac3b6:	2800      	cmp	r0, #0
 80ac3b8:	d0ea      	beq.n	80ac390 <mbedtls_mpi_read_binary+0x1c>
 80ac3ba:	e00f      	b.n	80ac3dc <mbedtls_mpi_read_binary+0x68>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    /* Avoid calling `memcpy` with NULL source argument,
     * even if buflen is 0. */
    if( buf != NULL )
 80ac3bc:	f1b8 0f00 	cmp.w	r8, #0
 80ac3c0:	d00c      	beq.n	80ac3dc <mbedtls_mpi_read_binary+0x68>
    {
        Xp = (unsigned char*) X->p;
        memcpy( Xp + overhead, buf, buflen );
 80ac3c2:	68bb      	ldr	r3, [r7, #8]
 80ac3c4:	ebc5 0084 	rsb	r0, r5, r4, lsl #2
 80ac3c8:	462a      	mov	r2, r5
 80ac3ca:	4641      	mov	r1, r8
 80ac3cc:	4418      	add	r0, r3
 80ac3ce:	f006 fa12 	bl	80b27f6 <memcpy>

static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
{
    mbedtls_mpi_uint *cur_limb_left;
    mbedtls_mpi_uint *cur_limb_right;
    if( limbs == 0 )
 80ac3d2:	b11c      	cbz	r4, 80ac3dc <mbedtls_mpi_read_binary+0x68>
 80ac3d4:	4621      	mov	r1, r4
 80ac3d6:	68b8      	ldr	r0, [r7, #8]
 80ac3d8:	f7ff fe6e 	bl	80ac0b8 <_ZL21mpi_bigendian_to_hostPmj.part.1>
    }

cleanup:

    return( ret );
}
 80ac3dc:	4630      	mov	r0, r6
 80ac3de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080ac3e2 <mbedtls_mpi_write_binary>:
/*
 * Export X into unsigned binary data, big endian
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X,
                              unsigned char *buf, size_t buflen )
{
 80ac3e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80ac3e4:	4605      	mov	r5, r0
    size_t i;

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    stored_bytes = X->n * ciL;
 80ac3e6:	686c      	ldr	r4, [r5, #4]
/*
 * Export X into unsigned binary data, big endian
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X,
                              unsigned char *buf, size_t buflen )
{
 80ac3e8:	4608      	mov	r0, r1
    size_t i;

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    stored_bytes = X->n * ciL;
 80ac3ea:	00a4      	lsls	r4, r4, #2

    if( stored_bytes < buflen )
 80ac3ec:	4294      	cmp	r4, r2
 80ac3ee:	d301      	bcc.n	80ac3f4 <mbedtls_mpi_write_binary+0x12>
 80ac3f0:	4613      	mov	r3, r2
 80ac3f2:	e014      	b.n	80ac41e <mbedtls_mpi_write_binary+0x3c>
         * null bytes and record the position at which to start
         * writing the significant bytes. In this case, the execution
         * trace of this function does not depend on the value of the
         * number. */
        bytes_to_copy = stored_bytes;
        p = buf + buflen - stored_bytes;
 80ac3f4:	1b12      	subs	r2, r2, r4
 80ac3f6:	188e      	adds	r6, r1, r2
        memset( buf, 0, buflen - stored_bytes );
 80ac3f8:	2100      	movs	r1, #0
 80ac3fa:	f006 fa22 	bl	80b2842 <memset>
         * null bytes and record the position at which to start
         * writing the significant bytes. In this case, the execution
         * trace of this function does not depend on the value of the
         * number. */
        bytes_to_copy = stored_bytes;
        p = buf + buflen - stored_bytes;
 80ac3fe:	4630      	mov	r0, r6
 80ac400:	4622      	mov	r2, r4
 80ac402:	e00e      	b.n	80ac422 <mbedtls_mpi_write_binary+0x40>
         * However X may fit if its leading bytes are zero. */
        bytes_to_copy = buflen;
        p = buf;
        for( i = bytes_to_copy; i < stored_bytes; i++ )
        {
            if( GET_BYTE( X, i ) != 0 )
 80ac404:	68af      	ldr	r7, [r5, #8]
 80ac406:	f003 0103 	and.w	r1, r3, #3
 80ac40a:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 80ac40e:	00ce      	lsls	r6, r1, #3
 80ac410:	f857 102e 	ldr.w	r1, [r7, lr, lsl #2]
 80ac414:	40f1      	lsrs	r1, r6
 80ac416:	f011 0fff 	tst.w	r1, #255	; 0xff
 80ac41a:	d112      	bne.n	80ac442 <mbedtls_mpi_write_binary+0x60>
    {
        /* The output buffer is smaller than the allocated size of X.
         * However X may fit if its leading bytes are zero. */
        bytes_to_copy = buflen;
        p = buf;
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 80ac41c:	3301      	adds	r3, #1
 80ac41e:	429c      	cmp	r4, r3
 80ac420:	d1f0      	bne.n	80ac404 <mbedtls_mpi_write_binary+0x22>
 80ac422:	4410      	add	r0, r2
            if( GET_BYTE( X, i ) != 0 )
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
        }
    }

    for( i = 0; i < bytes_to_copy; i++ )
 80ac424:	2300      	movs	r3, #0
 80ac426:	429a      	cmp	r2, r3
 80ac428:	d00e      	beq.n	80ac448 <mbedtls_mpi_write_binary+0x66>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
 80ac42a:	68ae      	ldr	r6, [r5, #8]
 80ac42c:	f003 0103 	and.w	r1, r3, #3
 80ac430:	089f      	lsrs	r7, r3, #2
 80ac432:	00cc      	lsls	r4, r1, #3
 80ac434:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
            if( GET_BYTE( X, i ) != 0 )
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
        }
    }

    for( i = 0; i < bytes_to_copy; i++ )
 80ac438:	3301      	adds	r3, #1
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
 80ac43a:	40e1      	lsrs	r1, r4
 80ac43c:	f800 1d01 	strb.w	r1, [r0, #-1]!
            if( GET_BYTE( X, i ) != 0 )
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
        }
    }

    for( i = 0; i < bytes_to_copy; i++ )
 80ac440:	e7f1      	b.n	80ac426 <mbedtls_mpi_write_binary+0x44>
        bytes_to_copy = buflen;
        p = buf;
        for( i = bytes_to_copy; i < stored_bytes; i++ )
        {
            if( GET_BYTE( X, i ) != 0 )
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 80ac442:	f06f 0007 	mvn.w	r0, #7
 80ac446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    for( i = 0; i < bytes_to_copy; i++ )
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );

    return( 0 );
 80ac448:	2000      	movs	r0, #0
}
 80ac44a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080ac44c <mbedtls_mpi_shift_l>:

/*
 * Left-shift: X <<= count
 */
int mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count )
{
 80ac44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80ac44e:	4604      	mov	r4, r0
 80ac450:	460d      	mov	r5, r1
    int ret;
    size_t i, v0, t1;
    mbedtls_mpi_uint r0 = 0, r1;
    MPI_VALIDATE_RET( X != NULL );

    v0 = count / (biL    );
 80ac452:	094e      	lsrs	r6, r1, #5
    t1 = count & (biL - 1);
 80ac454:	f001 071f 	and.w	r7, r1, #31

    i = mbedtls_mpi_bitlen( X ) + count;
 80ac458:	f7ff ff66 	bl	80ac328 <mbedtls_mpi_bitlen>

    if( X->n * biL < i )
 80ac45c:	6863      	ldr	r3, [r4, #4]
    MPI_VALIDATE_RET( X != NULL );

    v0 = count / (biL    );
    t1 = count & (biL - 1);

    i = mbedtls_mpi_bitlen( X ) + count;
 80ac45e:	4428      	add	r0, r5

    if( X->n * biL < i )
 80ac460:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
 80ac464:	d809      	bhi.n	80ac47a <mbedtls_mpi_shift_l+0x2e>
    ret = 0;

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 80ac466:	b346      	cbz	r6, 80ac4ba <mbedtls_mpi_shift_l+0x6e>
    {
        for( i = X->n; i > v0; i-- )
 80ac468:	6863      	ldr	r3, [r4, #4]
 80ac46a:	f06f 0103 	mvn.w	r1, #3
 80ac46e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80ac472:	3a01      	subs	r2, #1
 80ac474:	0092      	lsls	r2, r2, #2
 80ac476:	4371      	muls	r1, r6
 80ac478:	e00b      	b.n	80ac492 <mbedtls_mpi_shift_l+0x46>
    t1 = count & (biL - 1);

    i = mbedtls_mpi_bitlen( X ) + count;

    if( X->n * biL < i )
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 80ac47a:	f010 011f 	ands.w	r1, r0, #31
 80ac47e:	bf18      	it	ne
 80ac480:	2101      	movne	r1, #1
 80ac482:	eb01 1150 	add.w	r1, r1, r0, lsr #5
 80ac486:	4620      	mov	r0, r4
 80ac488:	f7ff fe3f 	bl	80ac10a <mbedtls_mpi_grow>
 80ac48c:	2800      	cmp	r0, #0
 80ac48e:	d0ea      	beq.n	80ac466 <mbedtls_mpi_shift_l+0x1a>
 80ac490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
 80ac492:	429e      	cmp	r6, r3
 80ac494:	d206      	bcs.n	80ac4a4 <mbedtls_mpi_shift_l+0x58>
            X->p[i - 1] = X->p[i - v0 - 1];
 80ac496:	68a0      	ldr	r0, [r4, #8]
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
 80ac498:	3b01      	subs	r3, #1
            X->p[i - 1] = X->p[i - v0 - 1];
 80ac49a:	1885      	adds	r5, r0, r2
 80ac49c:	586d      	ldr	r5, [r5, r1]
 80ac49e:	5085      	str	r5, [r0, r2]
 80ac4a0:	3a04      	subs	r2, #4
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
 80ac4a2:	e7f6      	b.n	80ac492 <mbedtls_mpi_shift_l+0x46>
 80ac4a4:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80ac4a8:	3a01      	subs	r2, #1
 80ac4aa:	0092      	lsls	r2, r2, #2
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
            X->p[i - 1] = 0;
 80ac4ac:	2000      	movs	r0, #0
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
 80ac4ae:	b123      	cbz	r3, 80ac4ba <mbedtls_mpi_shift_l+0x6e>
            X->p[i - 1] = 0;
 80ac4b0:	68a1      	ldr	r1, [r4, #8]
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
 80ac4b2:	3b01      	subs	r3, #1
            X->p[i - 1] = 0;
 80ac4b4:	5088      	str	r0, [r1, r2]
 80ac4b6:	3a04      	subs	r2, #4
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
 80ac4b8:	e7f9      	b.n	80ac4ae <mbedtls_mpi_shift_l+0x62>
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 80ac4ba:	b90f      	cbnz	r7, 80ac4c0 <mbedtls_mpi_shift_l+0x74>
    i = mbedtls_mpi_bitlen( X ) + count;

    if( X->n * biL < i )
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );

    ret = 0;
 80ac4bc:	2000      	movs	r0, #0
 80ac4be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80ac4c0:	00b3      	lsls	r3, r6, #2
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 80ac4c2:	2200      	movs	r2, #0
    {
        for( i = v0; i < X->n; i++ )
        {
            r1 = X->p[i] >> (biL - t1);
 80ac4c4:	f1c7 0e20 	rsb	lr, r7, #32
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
 80ac4c8:	6861      	ldr	r1, [r4, #4]
 80ac4ca:	428e      	cmp	r6, r1
 80ac4cc:	d2f6      	bcs.n	80ac4bc <mbedtls_mpi_shift_l+0x70>
        {
            r1 = X->p[i] >> (biL - t1);
 80ac4ce:	68a0      	ldr	r0, [r4, #8]
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
 80ac4d0:	3601      	adds	r6, #1
        {
            r1 = X->p[i] >> (biL - t1);
 80ac4d2:	58c1      	ldr	r1, [r0, r3]
            X->p[i] <<= t1;
 80ac4d4:	fa01 f507 	lsl.w	r5, r1, r7
 80ac4d8:	50c5      	str	r5, [r0, r3]
            X->p[i] |= r0;
 80ac4da:	68a0      	ldr	r0, [r4, #8]
 80ac4dc:	58c5      	ldr	r5, [r0, r3]
 80ac4de:	432a      	orrs	r2, r5
 80ac4e0:	50c2      	str	r2, [r0, r3]
 80ac4e2:	3304      	adds	r3, #4
            r0 = r1;
 80ac4e4:	fa21 f20e 	lsr.w	r2, r1, lr
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
 80ac4e8:	e7ee      	b.n	80ac4c8 <mbedtls_mpi_shift_l+0x7c>

080ac4ea <mbedtls_mpi_shift_r>:

/*
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
 80ac4ea:	b5f0      	push	{r4, r5, r6, r7, lr}
    MPI_VALIDATE_RET( X != NULL );

    v0 = count /  biL;
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 80ac4ec:	6843      	ldr	r3, [r0, #4]
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
    MPI_VALIDATE_RET( X != NULL );

    v0 = count /  biL;
 80ac4ee:	094a      	lsrs	r2, r1, #5
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 80ac4f0:	429a      	cmp	r2, r3
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
    MPI_VALIDATE_RET( X != NULL );

    v0 = count /  biL;
    v1 = count & (biL - 1);
 80ac4f2:	f001 011f 	and.w	r1, r1, #31

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 80ac4f6:	d801      	bhi.n	80ac4fc <mbedtls_mpi_shift_r+0x12>
 80ac4f8:	d105      	bne.n	80ac506 <mbedtls_mpi_shift_r+0x1c>
 80ac4fa:	b159      	cbz	r1, 80ac514 <mbedtls_mpi_shift_r+0x2a>
            r0 = r1;
        }
    }

    return( 0 );
}
 80ac4fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    v0 = count /  biL;
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
        return mbedtls_mpi_lset( X, 0 );
 80ac500:	2100      	movs	r1, #0
 80ac502:	f7ff becb 	b.w	80ac29c <mbedtls_mpi_lset>

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 80ac506:	b1d2      	cbz	r2, 80ac53e <mbedtls_mpi_shift_r+0x54>
 80ac508:	2300      	movs	r3, #0
    {
        for( i = 0; i < X->n - v0; i++ )
 80ac50a:	6844      	ldr	r4, [r0, #4]
 80ac50c:	1aa4      	subs	r4, r4, r2
 80ac50e:	42a3      	cmp	r3, r4
 80ac510:	d305      	bcc.n	80ac51e <mbedtls_mpi_shift_r+0x34>
 80ac512:	e001      	b.n	80ac518 <mbedtls_mpi_shift_r+0x2e>
        return mbedtls_mpi_lset( X, 0 );

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 80ac514:	b35a      	cbz	r2, 80ac56e <mbedtls_mpi_shift_r+0x84>
 80ac516:	460b      	mov	r3, r1
 80ac518:	009a      	lsls	r2, r3, #2
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
            X->p[i] = 0;
 80ac51a:	2500      	movs	r5, #0
 80ac51c:	e007      	b.n	80ac52e <mbedtls_mpi_shift_r+0x44>
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];
 80ac51e:	6884      	ldr	r4, [r0, #8]
 80ac520:	189d      	adds	r5, r3, r2
 80ac522:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 80ac526:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
 80ac52a:	3301      	adds	r3, #1
 80ac52c:	e7ed      	b.n	80ac50a <mbedtls_mpi_shift_r+0x20>
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 80ac52e:	6844      	ldr	r4, [r0, #4]
 80ac530:	42a3      	cmp	r3, r4
 80ac532:	d204      	bcs.n	80ac53e <mbedtls_mpi_shift_r+0x54>
            X->p[i] = 0;
 80ac534:	6884      	ldr	r4, [r0, #8]
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 80ac536:	3301      	adds	r3, #1
            X->p[i] = 0;
 80ac538:	50a5      	str	r5, [r4, r2]
 80ac53a:	3204      	adds	r2, #4
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 80ac53c:	e7f7      	b.n	80ac52e <mbedtls_mpi_shift_r+0x44>
    }

    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
 80ac53e:	b1b1      	cbz	r1, 80ac56e <mbedtls_mpi_shift_r+0x84>
    {
        for( i = X->n; i > 0; i-- )
 80ac540:	6844      	ldr	r4, [r0, #4]
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
 80ac542:	2200      	movs	r2, #0
 80ac544:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80ac548:	3b01      	subs	r3, #1
 80ac54a:	009b      	lsls	r3, r3, #2
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
        {
            r1 = X->p[i - 1] << (biL - v1);
 80ac54c:	f1c1 0e20 	rsb	lr, r1, #32
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
 80ac550:	b16c      	cbz	r4, 80ac56e <mbedtls_mpi_shift_r+0x84>
        {
            r1 = X->p[i - 1] << (biL - v1);
 80ac552:	6886      	ldr	r6, [r0, #8]
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
 80ac554:	3c01      	subs	r4, #1
        {
            r1 = X->p[i - 1] << (biL - v1);
 80ac556:	58f5      	ldr	r5, [r6, r3]
            X->p[i - 1] >>= v1;
 80ac558:	fa25 f701 	lsr.w	r7, r5, r1
 80ac55c:	50f7      	str	r7, [r6, r3]
            X->p[i - 1] |= r0;
 80ac55e:	6886      	ldr	r6, [r0, #8]
 80ac560:	58f7      	ldr	r7, [r6, r3]
 80ac562:	433a      	orrs	r2, r7
 80ac564:	50f2      	str	r2, [r6, r3]
 80ac566:	3b04      	subs	r3, #4
            r0 = r1;
 80ac568:	fa05 f20e 	lsl.w	r2, r5, lr
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
 80ac56c:	e7f0      	b.n	80ac550 <mbedtls_mpi_shift_r+0x66>
            r0 = r1;
        }
    }

    return( 0 );
}
 80ac56e:	2000      	movs	r0, #0
 80ac570:	bdf0      	pop	{r4, r5, r6, r7, pc}

080ac572 <mbedtls_mpi_cmp_abs>:

/*
 * Compare unsigned values
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 80ac572:	b570      	push	{r4, r5, r6, lr}
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
 80ac574:	6843      	ldr	r3, [r0, #4]
 80ac576:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80ac57a:	3a01      	subs	r2, #1
 80ac57c:	0092      	lsls	r2, r2, #2
 80ac57e:	b12b      	cbz	r3, 80ac58c <mbedtls_mpi_cmp_abs+0x1a>
        if( X->p[i - 1] != 0 )
 80ac580:	6884      	ldr	r4, [r0, #8]
 80ac582:	58a4      	ldr	r4, [r4, r2]
 80ac584:	3a04      	subs	r2, #4
 80ac586:	b90c      	cbnz	r4, 80ac58c <mbedtls_mpi_cmp_abs+0x1a>
{
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
 80ac588:	3b01      	subs	r3, #1
 80ac58a:	e7f8      	b.n	80ac57e <mbedtls_mpi_cmp_abs+0xc>
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 80ac58c:	684c      	ldr	r4, [r1, #4]
 80ac58e:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 80ac592:	3a01      	subs	r2, #1
 80ac594:	0092      	lsls	r2, r2, #2
 80ac596:	b1c4      	cbz	r4, 80ac5ca <mbedtls_mpi_cmp_abs+0x58>
        if( Y->p[j - 1] != 0 )
 80ac598:	688d      	ldr	r5, [r1, #8]
 80ac59a:	58ae      	ldr	r6, [r5, r2]
 80ac59c:	3a04      	subs	r2, #4
 80ac59e:	b90e      	cbnz	r6, 80ac5a4 <mbedtls_mpi_cmp_abs+0x32>

    for( i = X->n; i > 0; i-- )
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 80ac5a0:	3c01      	subs	r4, #1
 80ac5a2:	e7f8      	b.n	80ac596 <mbedtls_mpi_cmp_abs+0x24>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  1 );
 80ac5a4:	429c      	cmp	r4, r3
 80ac5a6:	d30b      	bcc.n	80ac5c0 <mbedtls_mpi_cmp_abs+0x4e>
    if( j > i ) return( -1 );
 80ac5a8:	d913      	bls.n	80ac5d2 <mbedtls_mpi_cmp_abs+0x60>
 80ac5aa:	e00b      	b.n	80ac5c4 <mbedtls_mpi_cmp_abs+0x52>
 80ac5ac:	f1a2 0204 	sub.w	r2, r2, #4

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 80ac5b0:	d308      	bcc.n	80ac5c4 <mbedtls_mpi_cmp_abs+0x52>
        return( 0 );

    if( i > j ) return(  1 );
    if( j > i ) return( -1 );

    for( ; i > 0; i-- )
 80ac5b2:	3b01      	subs	r3, #1
 80ac5b4:	b193      	cbz	r3, 80ac5dc <mbedtls_mpi_cmp_abs+0x6a>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 80ac5b6:	6881      	ldr	r1, [r0, #8]
 80ac5b8:	588c      	ldr	r4, [r1, r2]
 80ac5ba:	58a9      	ldr	r1, [r5, r2]
 80ac5bc:	428c      	cmp	r4, r1
 80ac5be:	d9f5      	bls.n	80ac5ac <mbedtls_mpi_cmp_abs+0x3a>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  1 );
 80ac5c0:	2001      	movs	r0, #1
 80ac5c2:	bd70      	pop	{r4, r5, r6, pc}
    if( j > i ) return( -1 );
 80ac5c4:	f04f 30ff 	mov.w	r0, #4294967295
 80ac5c8:	bd70      	pop	{r4, r5, r6, pc}
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    }

    return( 0 );
 80ac5ca:	1c18      	adds	r0, r3, #0
 80ac5cc:	bf18      	it	ne
 80ac5ce:	2001      	movne	r0, #1
 80ac5d0:	bd70      	pop	{r4, r5, r6, pc}
 80ac5d2:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80ac5d6:	3a01      	subs	r2, #1
 80ac5d8:	0092      	lsls	r2, r2, #2
 80ac5da:	e7eb      	b.n	80ac5b4 <mbedtls_mpi_cmp_abs+0x42>
 80ac5dc:	4618      	mov	r0, r3
 80ac5de:	bd70      	pop	{r4, r5, r6, pc}

080ac5e0 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 80ac5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80ac5e4:	4616      	mov	r6, r2
 80ac5e6:	b085      	sub	sp, #20
 80ac5e8:	9303      	str	r3, [sp, #12]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 80ac5ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 80ac5ec:	4681      	mov	r9, r0
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 80ac5ee:	685a      	ldr	r2, [r3, #4]
 80ac5f0:	6873      	ldr	r3, [r6, #4]
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 80ac5f2:	468b      	mov	fp, r1
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 80ac5f4:	3301      	adds	r3, #1
 80ac5f6:	429a      	cmp	r2, r3
 80ac5f8:	d351      	bcc.n	80ac69e <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xbe>
 80ac5fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80ac5fc:	6898      	ldr	r0, [r3, #8]
 80ac5fe:	2800      	cmp	r0, #0
 80ac600:	d04d      	beq.n	80ac69e <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xbe>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
 80ac602:	0092      	lsls	r2, r2, #2
 80ac604:	2100      	movs	r1, #0
 80ac606:	f006 f91c 	bl	80b2842 <memset>

    d = T->p;
 80ac60a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    n = N->n;
 80ac60c:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
 80ac610:	689b      	ldr	r3, [r3, #8]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 80ac612:	f10a 0701 	add.w	r7, sl, #1
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
 80ac616:	9300      	str	r3, [sp, #0]
    n = N->n;
    m = ( B->n < n ) ? B->n : n;
 80ac618:	f8db 3004 	ldr.w	r3, [fp, #4]
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
 80ac61c:	9d00      	ldr	r5, [sp, #0]
 80ac61e:	4553      	cmp	r3, sl
 80ac620:	bf28      	it	cs
 80ac622:	4653      	movcs	r3, sl
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 80ac624:	00bf      	lsls	r7, r7, #2
 80ac626:	9302      	str	r3, [sp, #8]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 80ac628:	2400      	movs	r4, #0
 80ac62a:	4554      	cmp	r4, sl
 80ac62c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80ac630:	d01b      	beq.n	80ac66a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x8a>
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 80ac632:	f8db 1008 	ldr.w	r1, [fp, #8]
    for( i = 0; i < n; i++ )
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
 80ac636:	f850 8024 	ldr.w	r8, [r0, r4, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 80ac63a:	682a      	ldr	r2, [r5, #0]
 80ac63c:	680b      	ldr	r3, [r1, #0]

        mpi_mul_hlp( m, B->p, d, u0 );
 80ac63e:	9802      	ldr	r0, [sp, #8]
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 80ac640:	fb03 2308 	mla	r3, r3, r8, r2
 80ac644:	9a03      	ldr	r2, [sp, #12]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 80ac646:	3401      	adds	r4, #1
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 80ac648:	4353      	muls	r3, r2

        mpi_mul_hlp( m, B->p, d, u0 );
 80ac64a:	462a      	mov	r2, r5
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 80ac64c:	9301      	str	r3, [sp, #4]

        mpi_mul_hlp( m, B->p, d, u0 );
 80ac64e:	4643      	mov	r3, r8
 80ac650:	f7ff fbc2 	bl	80abdd8 <_ZL11mpi_mul_hlpjPmS_m>
        mpi_mul_hlp( n, N->p, d, u1 );
 80ac654:	9b01      	ldr	r3, [sp, #4]
 80ac656:	462a      	mov	r2, r5
 80ac658:	68b1      	ldr	r1, [r6, #8]
 80ac65a:	4650      	mov	r0, sl
 80ac65c:	f7ff fbbc 	bl	80abdd8 <_ZL11mpi_mul_hlpjPmS_m>

        *d++ = u0; d[n + 1] = 0;
 80ac660:	f845 8b04 	str.w	r8, [r5], #4
 80ac664:	2300      	movs	r3, #0
 80ac666:	51eb      	str	r3, [r5, r7]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 80ac668:	e7df      	b.n	80ac62a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x4a>
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
 80ac66a:	9b00      	ldr	r3, [sp, #0]
 80ac66c:	1f39      	subs	r1, r7, #4
 80ac66e:	440b      	add	r3, r1
 80ac670:	463a      	mov	r2, r7
 80ac672:	4619      	mov	r1, r3
 80ac674:	f006 f8bf 	bl	80b27f6 <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
 80ac678:	4631      	mov	r1, r6
 80ac67a:	4648      	mov	r0, r9
 80ac67c:	f7ff ff79 	bl	80ac572 <mbedtls_mpi_cmp_abs>
 80ac680:	2800      	cmp	r0, #0
        mpi_sub_hlp( n, N->p, A->p );
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 80ac682:	bfb8      	it	lt
 80ac684:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80ac686:	4620      	mov	r0, r4
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
        mpi_sub_hlp( n, N->p, A->p );
 80ac688:	bfa7      	ittee	ge
 80ac68a:	f8d9 2008 	ldrge.w	r2, [r9, #8]
 80ac68e:	68b1      	ldrge	r1, [r6, #8]
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 80ac690:	689a      	ldrlt	r2, [r3, #8]
 80ac692:	f8d9 1008 	ldrlt.w	r1, [r9, #8]
 80ac696:	f7ff fb75 	bl	80abd84 <_ZL11mpi_sub_hlpjPmS_>

    return( 0 );
 80ac69a:	2000      	movs	r0, #0
 80ac69c:	e001      	b.n	80ac6a2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xc2>
{
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80ac69e:	f06f 0003 	mvn.w	r0, #3
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );

    return( 0 );
}
 80ac6a2:	b005      	add	sp, #20
 80ac6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080ac6a8 <mbedtls_mpi_cmp_mpi>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 80ac6a8:	b570      	push	{r4, r5, r6, lr}
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
 80ac6aa:	6843      	ldr	r3, [r0, #4]
 80ac6ac:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80ac6b0:	3a01      	subs	r2, #1
 80ac6b2:	0092      	lsls	r2, r2, #2
 80ac6b4:	b12b      	cbz	r3, 80ac6c2 <mbedtls_mpi_cmp_mpi+0x1a>
        if( X->p[i - 1] != 0 )
 80ac6b6:	6884      	ldr	r4, [r0, #8]
 80ac6b8:	58a4      	ldr	r4, [r4, r2]
 80ac6ba:	3a04      	subs	r2, #4
 80ac6bc:	b90c      	cbnz	r4, 80ac6c2 <mbedtls_mpi_cmp_mpi+0x1a>
{
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
 80ac6be:	3b01      	subs	r3, #1
 80ac6c0:	e7f8      	b.n	80ac6b4 <mbedtls_mpi_cmp_mpi+0xc>
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 80ac6c2:	684c      	ldr	r4, [r1, #4]
 80ac6c4:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 80ac6c8:	3a01      	subs	r2, #1
 80ac6ca:	0092      	lsls	r2, r2, #2
 80ac6cc:	b364      	cbz	r4, 80ac728 <mbedtls_mpi_cmp_mpi+0x80>
        if( Y->p[j - 1] != 0 )
 80ac6ce:	688d      	ldr	r5, [r1, #8]
 80ac6d0:	58ae      	ldr	r6, [r5, r2]
 80ac6d2:	3a04      	subs	r2, #4
 80ac6d4:	b90e      	cbnz	r6, 80ac6da <mbedtls_mpi_cmp_mpi+0x32>

    for( i = X->n; i > 0; i-- )
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 80ac6d6:	3c01      	subs	r4, #1
 80ac6d8:	e7f8      	b.n	80ac6cc <mbedtls_mpi_cmp_mpi+0x24>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  X->s );
 80ac6da:	429c      	cmp	r4, r3
 80ac6dc:	d201      	bcs.n	80ac6e2 <mbedtls_mpi_cmp_mpi+0x3a>
 80ac6de:	6802      	ldr	r2, [r0, #0]
 80ac6e0:	e025      	b.n	80ac72e <mbedtls_mpi_cmp_mpi+0x86>
 80ac6e2:	6809      	ldr	r1, [r1, #0]
    if( j > i ) return( -Y->s );
 80ac6e4:	d901      	bls.n	80ac6ea <mbedtls_mpi_cmp_mpi+0x42>
 80ac6e6:	424a      	negs	r2, r1
 80ac6e8:	e021      	b.n	80ac72e <mbedtls_mpi_cmp_mpi+0x86>

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 80ac6ea:	6802      	ldr	r2, [r0, #0]
 80ac6ec:	2a00      	cmp	r2, #0
 80ac6ee:	dd01      	ble.n	80ac6f4 <mbedtls_mpi_cmp_mpi+0x4c>
 80ac6f0:	2900      	cmp	r1, #0
 80ac6f2:	db14      	blt.n	80ac71e <mbedtls_mpi_cmp_mpi+0x76>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 80ac6f4:	2900      	cmp	r1, #0
 80ac6f6:	dd01      	ble.n	80ac6fc <mbedtls_mpi_cmp_mpi+0x54>
 80ac6f8:	2a00      	cmp	r2, #0
 80ac6fa:	db12      	blt.n	80ac722 <mbedtls_mpi_cmp_mpi+0x7a>
 80ac6fc:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 80ac700:	3901      	subs	r1, #1
 80ac702:	0089      	lsls	r1, r1, #2

    for( ; i > 0; i-- )
 80ac704:	b193      	cbz	r3, 80ac72c <mbedtls_mpi_cmp_mpi+0x84>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 80ac706:	6884      	ldr	r4, [r0, #8]
 80ac708:	5866      	ldr	r6, [r4, r1]
 80ac70a:	586c      	ldr	r4, [r5, r1]
 80ac70c:	42a6      	cmp	r6, r4
 80ac70e:	d80e      	bhi.n	80ac72e <mbedtls_mpi_cmp_mpi+0x86>
 80ac710:	f1a1 0104 	sub.w	r1, r1, #4
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 80ac714:	d201      	bcs.n	80ac71a <mbedtls_mpi_cmp_mpi+0x72>
 80ac716:	4252      	negs	r2, r2
 80ac718:	e009      	b.n	80ac72e <mbedtls_mpi_cmp_mpi+0x86>
    if( j > i ) return( -Y->s );

    if( X->s > 0 && Y->s < 0 ) return(  1 );
    if( Y->s > 0 && X->s < 0 ) return( -1 );

    for( ; i > 0; i-- )
 80ac71a:	3b01      	subs	r3, #1
 80ac71c:	e7f2      	b.n	80ac704 <mbedtls_mpi_cmp_mpi+0x5c>
        return( 0 );

    if( i > j ) return(  X->s );
    if( j > i ) return( -Y->s );

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 80ac71e:	2201      	movs	r2, #1
 80ac720:	e005      	b.n	80ac72e <mbedtls_mpi_cmp_mpi+0x86>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 80ac722:	f04f 32ff 	mov.w	r2, #4294967295
 80ac726:	e002      	b.n	80ac72e <mbedtls_mpi_cmp_mpi+0x86>

    for( j = Y->n; j > 0; j-- )
        if( Y->p[j - 1] != 0 )
            break;

    if( i == 0 && j == 0 )
 80ac728:	2b00      	cmp	r3, #0
 80ac72a:	d1d8      	bne.n	80ac6de <mbedtls_mpi_cmp_mpi+0x36>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    }

    return( 0 );
 80ac72c:	461a      	mov	r2, r3
}
 80ac72e:	4610      	mov	r0, r2
 80ac730:	bd70      	pop	{r4, r5, r6, pc}

080ac732 <mbedtls_mpi_cmp_int>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 80ac732:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );

    *p  = ( z < 0 ) ? -z : z;
 80ac734:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 80ac738:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
 80ac73c:	2900      	cmp	r1, #0
{
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );

    *p  = ( z < 0 ) ? -z : z;
 80ac73e:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
 80ac740:	bfb4      	ite	lt
 80ac742:	f04f 33ff 	movlt.w	r3, #4294967295
 80ac746:	2301      	movge	r3, #1
 80ac748:	9301      	str	r3, [sp, #4]
    Y.n = 1;
    Y.p = p;

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 80ac74a:	a901      	add	r1, sp, #4
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );

    *p  = ( z < 0 ) ? -z : z;
    Y.s = ( z < 0 ) ? -1 : 1;
    Y.n = 1;
 80ac74c:	2301      	movs	r3, #1
 80ac74e:	9302      	str	r3, [sp, #8]
    Y.p = p;
 80ac750:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 80ac754:	f7ff ffa8 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
}
 80ac758:	b005      	add	sp, #20
 80ac75a:	f85d fb04 	ldr.w	pc, [sp], #4

080ac75e <mbedtls_mpi_add_abs>:
    mbedtls_mpi_uint *o, *p, c, tmp;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( X == B )
 80ac75e:	4290      	cmp	r0, r2

/*
 * Unsigned addition: X = |A| + |B|  (HAC 14.7)
 */
int mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80ac760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80ac764:	4606      	mov	r6, r0
 80ac766:	4615      	mov	r5, r2
    mbedtls_mpi_uint *o, *p, c, tmp;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( X == B )
 80ac768:	d006      	beq.n	80ac778 <mbedtls_mpi_add_abs+0x1a>
    {
        const mbedtls_mpi *T = A; A = X; B = T;
    }

    if( X != A )
 80ac76a:	4288      	cmp	r0, r1
 80ac76c:	d005      	beq.n	80ac77a <mbedtls_mpi_add_abs+0x1c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 80ac76e:	f7ff fd34 	bl	80ac1da <mbedtls_mpi_copy>
 80ac772:	4607      	mov	r7, r0
 80ac774:	b108      	cbz	r0, 80ac77a <mbedtls_mpi_add_abs+0x1c>
 80ac776:	e049      	b.n	80ac80c <mbedtls_mpi_add_abs+0xae>
 80ac778:	460d      	mov	r5, r1

    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;
 80ac77a:	2301      	movs	r3, #1
 80ac77c:	6033      	str	r3, [r6, #0]

    for( j = B->n; j > 0; j-- )
 80ac77e:	686c      	ldr	r4, [r5, #4]
 80ac780:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80ac784:	3b01      	subs	r3, #1
 80ac786:	009b      	lsls	r3, r3, #2
 80ac788:	b12c      	cbz	r4, 80ac796 <mbedtls_mpi_add_abs+0x38>
        if( B->p[j - 1] != 0 )
 80ac78a:	68aa      	ldr	r2, [r5, #8]
 80ac78c:	58d2      	ldr	r2, [r2, r3]
 80ac78e:	3b04      	subs	r3, #4
 80ac790:	b90a      	cbnz	r2, 80ac796 <mbedtls_mpi_add_abs+0x38>
    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;

    for( j = B->n; j > 0; j-- )
 80ac792:	3c01      	subs	r4, #1
 80ac794:	e7f8      	b.n	80ac788 <mbedtls_mpi_add_abs+0x2a>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 80ac796:	4621      	mov	r1, r4
 80ac798:	4630      	mov	r0, r6
 80ac79a:	f7ff fcb6 	bl	80ac10a <mbedtls_mpi_grow>
 80ac79e:	4607      	mov	r7, r0
 80ac7a0:	2800      	cmp	r0, #0
 80ac7a2:	d133      	bne.n	80ac80c <mbedtls_mpi_add_abs+0xae>

    o = B->p; p = X->p; c = 0;
 80ac7a4:	68b3      	ldr	r3, [r6, #8]
 80ac7a6:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80ac7aa:	4618      	mov	r0, r3
 80ac7ac:	463d      	mov	r5, r7

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 80ac7ae:	4639      	mov	r1, r7
 80ac7b0:	42a1      	cmp	r1, r4
 80ac7b2:	d00f      	beq.n	80ac7d4 <mbedtls_mpi_add_abs+0x76>
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
 80ac7b4:	6802      	ldr	r2, [r0, #0]
    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
    {
        tmp= *o;
 80ac7b6:	f85c e021 	ldr.w	lr, [ip, r1, lsl #2]
        *p +=  c; c  = ( *p <  c );
 80ac7ba:	18ad      	adds	r5, r5, r2
        *p += tmp; c += ( *p < tmp );
 80ac7bc:	4475      	add	r5, lr
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
 80ac7be:	bf2c      	ite	cs
 80ac7c0:	2201      	movcs	r2, #1
 80ac7c2:	2200      	movcc	r2, #0
        *p += tmp; c += ( *p < tmp );
 80ac7c4:	f840 5b04 	str.w	r5, [r0], #4
    o = B->p; p = X->p; c = 0;

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 80ac7c8:	3101      	adds	r1, #1
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
 80ac7ca:	45ae      	cmp	lr, r5
 80ac7cc:	bf94      	ite	ls
 80ac7ce:	4615      	movls	r5, r2
 80ac7d0:	1c55      	addhi	r5, r2, #1
    o = B->p; p = X->p; c = 0;

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 80ac7d2:	e7ed      	b.n	80ac7b0 <mbedtls_mpi_add_abs+0x52>
 80ac7d4:	ea4f 0884 	mov.w	r8, r4, lsl #2
 80ac7d8:	4443      	add	r3, r8
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
    }

    while( c != 0 )
 80ac7da:	b1bd      	cbz	r5, 80ac80c <mbedtls_mpi_add_abs+0xae>
    {
        if( i >= X->n )
 80ac7dc:	6872      	ldr	r2, [r6, #4]
 80ac7de:	4294      	cmp	r4, r2
 80ac7e0:	f104 0401 	add.w	r4, r4, #1
 80ac7e4:	d306      	bcc.n	80ac7f4 <mbedtls_mpi_add_abs+0x96>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 80ac7e6:	4621      	mov	r1, r4
 80ac7e8:	4630      	mov	r0, r6
 80ac7ea:	f7ff fc8e 	bl	80ac10a <mbedtls_mpi_grow>
 80ac7ee:	b960      	cbnz	r0, 80ac80a <mbedtls_mpi_add_abs+0xac>
            p = X->p + i;
 80ac7f0:	68b3      	ldr	r3, [r6, #8]
 80ac7f2:	4443      	add	r3, r8
        }

        *p += c; c = ( *p < c ); i++; p++;
 80ac7f4:	681a      	ldr	r2, [r3, #0]
 80ac7f6:	f108 0804 	add.w	r8, r8, #4
 80ac7fa:	442a      	add	r2, r5
 80ac7fc:	4295      	cmp	r5, r2
 80ac7fe:	f843 2b04 	str.w	r2, [r3], #4
 80ac802:	bf94      	ite	ls
 80ac804:	2500      	movls	r5, #0
 80ac806:	2501      	movhi	r5, #1
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
    }

    while( c != 0 )
 80ac808:	e7e7      	b.n	80ac7da <mbedtls_mpi_add_abs+0x7c>
    {
        if( i >= X->n )
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 80ac80a:	4607      	mov	r7, r0
    }

cleanup:

    return( ret );
}
 80ac80c:	4638      	mov	r0, r7
 80ac80e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080ac812 <mbedtls_mpi_sub_abs>:

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80ac812:	b5f0      	push	{r4, r5, r6, r7, lr}
 80ac814:	460f      	mov	r7, r1
 80ac816:	b085      	sub	sp, #20
 80ac818:	4606      	mov	r6, r0
    size_t n;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 80ac81a:	4611      	mov	r1, r2
 80ac81c:	4638      	mov	r0, r7

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80ac81e:	4615      	mov	r5, r2
    size_t n;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 80ac820:	f7ff fea7 	bl	80ac572 <mbedtls_mpi_cmp_abs>
 80ac824:	2800      	cmp	r0, #0
 80ac826:	db30      	blt.n	80ac88a <mbedtls_mpi_sub_abs+0x78>
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80ac828:	2301      	movs	r3, #1
 80ac82a:	9301      	str	r3, [sp, #4]
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    mbedtls_mpi_init( &TB );

    if( X == B )
 80ac82c:	42b5      	cmp	r5, r6
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
 80ac82e:	f04f 0300 	mov.w	r3, #0
 80ac832:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 80ac834:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    mbedtls_mpi_init( &TB );

    if( X == B )
 80ac836:	d106      	bne.n	80ac846 <mbedtls_mpi_sub_abs+0x34>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 80ac838:	4629      	mov	r1, r5
 80ac83a:	a801      	add	r0, sp, #4
 80ac83c:	f7ff fccd 	bl	80ac1da <mbedtls_mpi_copy>
 80ac840:	4604      	mov	r4, r0
 80ac842:	b9e8      	cbnz	r0, 80ac880 <mbedtls_mpi_sub_abs+0x6e>
        B = &TB;
 80ac844:	ad01      	add	r5, sp, #4
    }

    if( X != A )
 80ac846:	42b7      	cmp	r7, r6
 80ac848:	d107      	bne.n	80ac85a <mbedtls_mpi_sub_abs+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );

    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;
 80ac84a:	2301      	movs	r3, #1
 80ac84c:	6033      	str	r3, [r6, #0]

    ret = 0;

    for( n = B->n; n > 0; n-- )
 80ac84e:	6868      	ldr	r0, [r5, #4]
 80ac850:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 80ac854:	3b01      	subs	r3, #1
 80ac856:	009b      	lsls	r3, r3, #2
 80ac858:	e00b      	b.n	80ac872 <mbedtls_mpi_sub_abs+0x60>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
        B = &TB;
    }

    if( X != A )
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 80ac85a:	4639      	mov	r1, r7
 80ac85c:	4630      	mov	r0, r6
 80ac85e:	f7ff fcbc 	bl	80ac1da <mbedtls_mpi_copy>
 80ac862:	4604      	mov	r4, r0
 80ac864:	b960      	cbnz	r0, 80ac880 <mbedtls_mpi_sub_abs+0x6e>
 80ac866:	e7f0      	b.n	80ac84a <mbedtls_mpi_sub_abs+0x38>
    X->s = 1;

    ret = 0;

    for( n = B->n; n > 0; n-- )
        if( B->p[n - 1] != 0 )
 80ac868:	68aa      	ldr	r2, [r5, #8]
 80ac86a:	58d2      	ldr	r2, [r2, r3]
 80ac86c:	3b04      	subs	r3, #4
 80ac86e:	b912      	cbnz	r2, 80ac876 <mbedtls_mpi_sub_abs+0x64>
     */
    X->s = 1;

    ret = 0;

    for( n = B->n; n > 0; n-- )
 80ac870:	3801      	subs	r0, #1
 80ac872:	2800      	cmp	r0, #0
 80ac874:	d1f8      	bne.n	80ac868 <mbedtls_mpi_sub_abs+0x56>
        if( B->p[n - 1] != 0 )
            break;

    mpi_sub_hlp( n, B->p, X->p );
 80ac876:	68b2      	ldr	r2, [r6, #8]
 80ac878:	68a9      	ldr	r1, [r5, #8]
 80ac87a:	f7ff fa83 	bl	80abd84 <_ZL11mpi_sub_hlpjPmS_>
    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;

    ret = 0;
 80ac87e:	2400      	movs	r4, #0

    mpi_sub_hlp( n, B->p, X->p );

cleanup:

    mbedtls_mpi_free( &TB );
 80ac880:	a801      	add	r0, sp, #4
 80ac882:	f7ff fc30 	bl	80ac0e6 <mbedtls_mpi_free>

    return( ret );
 80ac886:	4620      	mov	r0, r4
 80ac888:	e001      	b.n	80ac88e <mbedtls_mpi_sub_abs+0x7c>
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 80ac88a:	f06f 0009 	mvn.w	r0, #9
cleanup:

    mbedtls_mpi_free( &TB );

    return( ret );
}
 80ac88e:	b005      	add	sp, #20
 80ac890:	bdf0      	pop	{r4, r5, r6, r7, pc}

080ac892 <mbedtls_mpi_add_mpi>:

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80ac892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
 80ac894:	680c      	ldr	r4, [r1, #0]
    if( A->s * B->s < 0 )
 80ac896:	6813      	ldr	r3, [r2, #0]

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80ac898:	4605      	mov	r5, r0
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
    if( A->s * B->s < 0 )
 80ac89a:	4363      	muls	r3, r4

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80ac89c:	460f      	mov	r7, r1
 80ac89e:	4616      	mov	r6, r2
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
    if( A->s * B->s < 0 )
 80ac8a0:	d513      	bpl.n	80ac8ca <mbedtls_mpi_add_mpi+0x38>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 80ac8a2:	4611      	mov	r1, r2
 80ac8a4:	4638      	mov	r0, r7
 80ac8a6:	f7ff fe64 	bl	80ac572 <mbedtls_mpi_cmp_abs>
 80ac8aa:	2800      	cmp	r0, #0
 80ac8ac:	db05      	blt.n	80ac8ba <mbedtls_mpi_add_mpi+0x28>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 80ac8ae:	4632      	mov	r2, r6
 80ac8b0:	4639      	mov	r1, r7
 80ac8b2:	4628      	mov	r0, r5
 80ac8b4:	f7ff ffad 	bl	80ac812 <mbedtls_mpi_sub_abs>
 80ac8b8:	e009      	b.n	80ac8ce <mbedtls_mpi_add_mpi+0x3c>
            X->s =  s;
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 80ac8ba:	463a      	mov	r2, r7
 80ac8bc:	4631      	mov	r1, r6
 80ac8be:	4628      	mov	r0, r5
 80ac8c0:	f7ff ffa7 	bl	80ac812 <mbedtls_mpi_sub_abs>
 80ac8c4:	b928      	cbnz	r0, 80ac8d2 <mbedtls_mpi_add_mpi+0x40>
            X->s = -s;
 80ac8c6:	4264      	negs	r4, r4
 80ac8c8:	e002      	b.n	80ac8d0 <mbedtls_mpi_add_mpi+0x3e>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 80ac8ca:	f7ff ff48 	bl	80ac75e <mbedtls_mpi_add_abs>
 80ac8ce:	b900      	cbnz	r0, 80ac8d2 <mbedtls_mpi_add_mpi+0x40>
        X->s = s;
 80ac8d0:	602c      	str	r4, [r5, #0]
    }

cleanup:

    return( ret );
}
 80ac8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080ac8d4 <mbedtls_mpi_sub_mpi>:

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80ac8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
 80ac8d6:	680c      	ldr	r4, [r1, #0]
    if( A->s * B->s > 0 )
 80ac8d8:	6813      	ldr	r3, [r2, #0]

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80ac8da:	4605      	mov	r5, r0
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
    if( A->s * B->s > 0 )
 80ac8dc:	4363      	muls	r3, r4
 80ac8de:	2b00      	cmp	r3, #0

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80ac8e0:	460f      	mov	r7, r1
 80ac8e2:	4616      	mov	r6, r2
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
    if( A->s * B->s > 0 )
 80ac8e4:	dd13      	ble.n	80ac90e <mbedtls_mpi_sub_mpi+0x3a>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 80ac8e6:	4611      	mov	r1, r2
 80ac8e8:	4638      	mov	r0, r7
 80ac8ea:	f7ff fe42 	bl	80ac572 <mbedtls_mpi_cmp_abs>
 80ac8ee:	2800      	cmp	r0, #0
 80ac8f0:	db05      	blt.n	80ac8fe <mbedtls_mpi_sub_mpi+0x2a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 80ac8f2:	4632      	mov	r2, r6
 80ac8f4:	4639      	mov	r1, r7
 80ac8f6:	4628      	mov	r0, r5
 80ac8f8:	f7ff ff8b 	bl	80ac812 <mbedtls_mpi_sub_abs>
 80ac8fc:	e009      	b.n	80ac912 <mbedtls_mpi_sub_mpi+0x3e>
            X->s =  s;
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 80ac8fe:	463a      	mov	r2, r7
 80ac900:	4631      	mov	r1, r6
 80ac902:	4628      	mov	r0, r5
 80ac904:	f7ff ff85 	bl	80ac812 <mbedtls_mpi_sub_abs>
 80ac908:	b928      	cbnz	r0, 80ac916 <mbedtls_mpi_sub_mpi+0x42>
            X->s = -s;
 80ac90a:	4264      	negs	r4, r4
 80ac90c:	e002      	b.n	80ac914 <mbedtls_mpi_sub_mpi+0x40>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 80ac90e:	f7ff ff26 	bl	80ac75e <mbedtls_mpi_add_abs>
 80ac912:	b900      	cbnz	r0, 80ac916 <mbedtls_mpi_sub_mpi+0x42>
        X->s = s;
 80ac914:	602c      	str	r4, [r5, #0]
    }

cleanup:

    return( ret );
}
 80ac916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080ac918 <mbedtls_mpi_add_int>:

/*
 * Signed addition: X = A + b
 */
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 80ac918:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
 80ac91a:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 80ac91e:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 80ac922:	2a00      	cmp	r2, #0
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
 80ac924:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 80ac926:	bfb4      	ite	lt
 80ac928:	f04f 33ff 	movlt.w	r3, #4294967295
 80ac92c:	2301      	movge	r3, #1
 80ac92e:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    _B.p = p;

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 80ac930:	aa01      	add	r2, sp, #4
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
    _B.s = ( b < 0 ) ? -1 : 1;
    _B.n = 1;
 80ac932:	2301      	movs	r3, #1
 80ac934:	9302      	str	r3, [sp, #8]
    _B.p = p;
 80ac936:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 80ac93a:	f7ff ffaa 	bl	80ac892 <mbedtls_mpi_add_mpi>
}
 80ac93e:	b005      	add	sp, #20
 80ac940:	f85d fb04 	ldr.w	pc, [sp], #4

080ac944 <mbedtls_mpi_sub_int>:

/*
 * Signed subtraction: X = A - b
 */
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 80ac944:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
 80ac946:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 80ac94a:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 80ac94e:	2a00      	cmp	r2, #0
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
 80ac950:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 80ac952:	bfb4      	ite	lt
 80ac954:	f04f 33ff 	movlt.w	r3, #4294967295
 80ac958:	2301      	movge	r3, #1
 80ac95a:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    _B.p = p;

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 80ac95c:	aa01      	add	r2, sp, #4
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
    _B.s = ( b < 0 ) ? -1 : 1;
    _B.n = 1;
 80ac95e:	2301      	movs	r3, #1
 80ac960:	9302      	str	r3, [sp, #8]
    _B.p = p;
 80ac962:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 80ac966:	f7ff ffb5 	bl	80ac8d4 <mbedtls_mpi_sub_mpi>
}
 80ac96a:	b005      	add	sp, #20
 80ac96c:	f85d fb04 	ldr.w	pc, [sp], #4

080ac970 <mbedtls_mpi_mul_mpi>:

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80ac970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
 80ac974:	2300      	movs	r3, #0

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80ac976:	b086      	sub	sp, #24
 80ac978:	4615      	mov	r5, r2
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 80ac97a:	4288      	cmp	r0, r1
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
 80ac97c:	f04f 0201 	mov.w	r2, #1

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80ac980:	4681      	mov	r9, r0
 80ac982:	460e      	mov	r6, r1
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
 80ac984:	e88d 000c 	stmia.w	sp, {r2, r3}
    X->p = NULL;
 80ac988:	9302      	str	r3, [sp, #8]
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80ac98a:	9203      	str	r2, [sp, #12]
    X->n = 0;
 80ac98c:	9304      	str	r3, [sp, #16]
    X->p = NULL;
 80ac98e:	9305      	str	r3, [sp, #20]
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 80ac990:	d106      	bne.n	80ac9a0 <mbedtls_mpi_mul_mpi+0x30>
 80ac992:	4668      	mov	r0, sp
 80ac994:	f7ff fc21 	bl	80ac1da <mbedtls_mpi_copy>
 80ac998:	4604      	mov	r4, r0
 80ac99a:	2800      	cmp	r0, #0
 80ac99c:	d14d      	bne.n	80aca3a <mbedtls_mpi_mul_mpi+0xca>
 80ac99e:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 80ac9a0:	45a9      	cmp	r9, r5
 80ac9a2:	d107      	bne.n	80ac9b4 <mbedtls_mpi_mul_mpi+0x44>
 80ac9a4:	4649      	mov	r1, r9
 80ac9a6:	a803      	add	r0, sp, #12
 80ac9a8:	f7ff fc17 	bl	80ac1da <mbedtls_mpi_copy>
 80ac9ac:	4604      	mov	r4, r0
 80ac9ae:	2800      	cmp	r0, #0
 80ac9b0:	d143      	bne.n	80aca3a <mbedtls_mpi_mul_mpi+0xca>
 80ac9b2:	ad03      	add	r5, sp, #12

    for( i = A->n; i > 0; i-- )
 80ac9b4:	f8d6 a004 	ldr.w	sl, [r6, #4]
 80ac9b8:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 80ac9bc:	3b01      	subs	r3, #1
 80ac9be:	009b      	lsls	r3, r3, #2
 80ac9c0:	f1ba 0f00 	cmp.w	sl, #0
 80ac9c4:	d006      	beq.n	80ac9d4 <mbedtls_mpi_mul_mpi+0x64>
        if( A->p[i - 1] != 0 )
 80ac9c6:	68b2      	ldr	r2, [r6, #8]
 80ac9c8:	58d2      	ldr	r2, [r2, r3]
 80ac9ca:	3b04      	subs	r3, #4
 80ac9cc:	b912      	cbnz	r2, 80ac9d4 <mbedtls_mpi_mul_mpi+0x64>
    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }

    for( i = A->n; i > 0; i-- )
 80ac9ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80ac9d2:	e7f5      	b.n	80ac9c0 <mbedtls_mpi_mul_mpi+0x50>
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
 80ac9d4:	686f      	ldr	r7, [r5, #4]
 80ac9d6:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 80ac9da:	3b01      	subs	r3, #1
 80ac9dc:	009b      	lsls	r3, r3, #2
 80ac9de:	b12f      	cbz	r7, 80ac9ec <mbedtls_mpi_mul_mpi+0x7c>
        if( B->p[j - 1] != 0 )
 80ac9e0:	68aa      	ldr	r2, [r5, #8]
 80ac9e2:	58d2      	ldr	r2, [r2, r3]
 80ac9e4:	3b04      	subs	r3, #4
 80ac9e6:	b90a      	cbnz	r2, 80ac9ec <mbedtls_mpi_mul_mpi+0x7c>

    for( i = A->n; i > 0; i-- )
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
 80ac9e8:	3f01      	subs	r7, #1
 80ac9ea:	e7f8      	b.n	80ac9de <mbedtls_mpi_mul_mpi+0x6e>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 80ac9ec:	eb0a 0107 	add.w	r1, sl, r7
 80ac9f0:	4648      	mov	r0, r9
 80ac9f2:	f7ff fb8a 	bl	80ac10a <mbedtls_mpi_grow>
 80ac9f6:	4604      	mov	r4, r0
 80ac9f8:	b9f8      	cbnz	r0, 80aca3a <mbedtls_mpi_mul_mpi+0xca>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 80ac9fa:	4601      	mov	r1, r0
 80ac9fc:	4648      	mov	r0, r9
 80ac9fe:	f7ff fc4d 	bl	80ac29c <mbedtls_mpi_lset>
 80aca02:	4604      	mov	r4, r0
 80aca04:	b9c8      	cbnz	r0, 80aca3a <mbedtls_mpi_mul_mpi+0xca>
 80aca06:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 80aca0a:	f108 38ff 	add.w	r8, r8, #4294967295
 80aca0e:	ea4f 0888 	mov.w	r8, r8, lsl #2

    for( ; j > 0; j-- )
 80aca12:	b16f      	cbz	r7, 80aca30 <mbedtls_mpi_mul_mpi+0xc0>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
 80aca14:	68ab      	ldr	r3, [r5, #8]
 80aca16:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80aca1a:	f853 3008 	ldr.w	r3, [r3, r8]
 80aca1e:	4442      	add	r2, r8
 80aca20:	68b1      	ldr	r1, [r6, #8]
 80aca22:	4650      	mov	r0, sl
 80aca24:	f7ff f9d8 	bl	80abdd8 <_ZL11mpi_mul_hlpjPmS_m>
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( ; j > 0; j-- )
 80aca28:	3f01      	subs	r7, #1
 80aca2a:	f1a8 0804 	sub.w	r8, r8, #4
 80aca2e:	e7f0      	b.n	80aca12 <mbedtls_mpi_mul_mpi+0xa2>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );

    X->s = A->s * B->s;
 80aca30:	6832      	ldr	r2, [r6, #0]
 80aca32:	682b      	ldr	r3, [r5, #0]
 80aca34:	4353      	muls	r3, r2
 80aca36:	f8c9 3000 	str.w	r3, [r9]

cleanup:

    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 80aca3a:	a803      	add	r0, sp, #12
 80aca3c:	f7ff fb53 	bl	80ac0e6 <mbedtls_mpi_free>
 80aca40:	4668      	mov	r0, sp
 80aca42:	f7ff fb50 	bl	80ac0e6 <mbedtls_mpi_free>

    return( ret );
}
 80aca46:	4620      	mov	r0, r4
 80aca48:	b006      	add	sp, #24
 80aca4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080aca4e <mbedtls_mpi_mul_int>:

/*
 * Baseline multiplication: X = A * b
 */
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
 80aca4e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    _B.s = 1;
 80aca50:	2301      	movs	r3, #1
    _B.n = 1;
    _B.p = p;
    p[0] = b;
 80aca52:	9200      	str	r2, [sp, #0]

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 80aca54:	aa01      	add	r2, sp, #4
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    _B.s = 1;
 80aca56:	9301      	str	r3, [sp, #4]
    _B.n = 1;
 80aca58:	9302      	str	r3, [sp, #8]
    _B.p = p;
 80aca5a:	f8cd d00c 	str.w	sp, [sp, #12]
    p[0] = b;

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 80aca5e:	f7ff ff87 	bl	80ac970 <mbedtls_mpi_mul_mpi>
}
 80aca62:	b005      	add	sp, #20
 80aca64:	f85d fb04 	ldr.w	pc, [sp], #4

080aca68 <mbedtls_mpi_div_mpi>:
/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A,
                         const mbedtls_mpi *B )
{
 80aca68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80aca6c:	b09b      	sub	sp, #108	; 0x6c
 80aca6e:	9001      	str	r0, [sp, #4]
 80aca70:	460f      	mov	r7, r1
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 80aca72:	4618      	mov	r0, r3
 80aca74:	2100      	movs	r1, #0
/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A,
                         const mbedtls_mpi *B )
{
 80aca76:	4690      	mov	r8, r2
 80aca78:	9304      	str	r3, [sp, #16]
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 80aca7a:	f7ff fe5a 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80aca7e:	2800      	cmp	r0, #0
 80aca80:	f000 81ad 	beq.w	80acdde <mbedtls_mpi_div_mpi+0x376>
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
 80aca84:	2400      	movs	r4, #0
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80aca86:	2501      	movs	r5, #1
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 80aca88:	9904      	ldr	r1, [sp, #16]
 80aca8a:	4640      	mov	r0, r8
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80aca8c:	950b      	str	r5, [sp, #44]	; 0x2c
    X->n = 0;
 80aca8e:	940c      	str	r4, [sp, #48]	; 0x30
    X->p = NULL;
 80aca90:	940d      	str	r4, [sp, #52]	; 0x34
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80aca92:	950e      	str	r5, [sp, #56]	; 0x38
    X->n = 0;
 80aca94:	940f      	str	r4, [sp, #60]	; 0x3c
    X->p = NULL;
 80aca96:	9410      	str	r4, [sp, #64]	; 0x40
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80aca98:	9511      	str	r5, [sp, #68]	; 0x44
    X->n = 0;
 80aca9a:	9412      	str	r4, [sp, #72]	; 0x48
    X->p = NULL;
 80aca9c:	9413      	str	r4, [sp, #76]	; 0x4c
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80aca9e:	9514      	str	r5, [sp, #80]	; 0x50
    X->n = 0;
 80acaa0:	9415      	str	r4, [sp, #84]	; 0x54
    X->p = NULL;
 80acaa2:	9416      	str	r4, [sp, #88]	; 0x58
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80acaa4:	9517      	str	r5, [sp, #92]	; 0x5c
    X->n = 0;
 80acaa6:	9418      	str	r4, [sp, #96]	; 0x60
    X->p = NULL;
 80acaa8:	9419      	str	r4, [sp, #100]	; 0x64
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 80acaaa:	f7ff fd62 	bl	80ac572 <mbedtls_mpi_cmp_abs>
 80acaae:	42a0      	cmp	r0, r4
 80acab0:	da16      	bge.n	80acae0 <mbedtls_mpi_div_mpi+0x78>
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 80acab2:	9b01      	ldr	r3, [sp, #4]
 80acab4:	b90b      	cbnz	r3, 80acaba <mbedtls_mpi_div_mpi+0x52>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 80acab6:	b94f      	cbnz	r7, 80acacc <mbedtls_mpi_div_mpi+0x64>
 80acab8:	e010      	b.n	80acadc <mbedtls_mpi_div_mpi+0x74>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 80acaba:	4621      	mov	r1, r4
 80acabc:	9801      	ldr	r0, [sp, #4]
 80acabe:	f7ff fbed 	bl	80ac29c <mbedtls_mpi_lset>
 80acac2:	4604      	mov	r4, r0
 80acac4:	2800      	cmp	r0, #0
 80acac6:	f040 8179 	bne.w	80acdbc <mbedtls_mpi_div_mpi+0x354>
 80acaca:	e7f4      	b.n	80acab6 <mbedtls_mpi_div_mpi+0x4e>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 80acacc:	4641      	mov	r1, r8
 80acace:	4638      	mov	r0, r7
 80acad0:	f7ff fb83 	bl	80ac1da <mbedtls_mpi_copy>
 80acad4:	4604      	mov	r4, r0
 80acad6:	2800      	cmp	r0, #0
 80acad8:	f040 8170 	bne.w	80acdbc <mbedtls_mpi_div_mpi+0x354>
        return( 0 );
 80acadc:	2000      	movs	r0, #0
 80acade:	e180      	b.n	80acde2 <mbedtls_mpi_div_mpi+0x37a>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 80acae0:	4641      	mov	r1, r8
 80acae2:	a80b      	add	r0, sp, #44	; 0x2c
 80acae4:	f7ff fb79 	bl	80ac1da <mbedtls_mpi_copy>
 80acae8:	4604      	mov	r4, r0
 80acaea:	2800      	cmp	r0, #0
 80acaec:	f040 8166 	bne.w	80acdbc <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 80acaf0:	ae0e      	add	r6, sp, #56	; 0x38
 80acaf2:	9904      	ldr	r1, [sp, #16]
 80acaf4:	4630      	mov	r0, r6
 80acaf6:	f7ff fb70 	bl	80ac1da <mbedtls_mpi_copy>
 80acafa:	4604      	mov	r4, r0
 80acafc:	2800      	cmp	r0, #0
 80acafe:	f040 815d 	bne.w	80acdbc <mbedtls_mpi_div_mpi+0x354>
    X.s = Y.s = 1;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 80acb02:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80acb06:	a811      	add	r0, sp, #68	; 0x44
 80acb08:	3102      	adds	r1, #2
        return( 0 );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    X.s = Y.s = 1;
 80acb0a:	950e      	str	r5, [sp, #56]	; 0x38
 80acb0c:	950b      	str	r5, [sp, #44]	; 0x2c

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 80acb0e:	f7ff fafc 	bl	80ac10a <mbedtls_mpi_grow>
 80acb12:	4604      	mov	r4, r0
 80acb14:	2800      	cmp	r0, #0
 80acb16:	f040 8151 	bne.w	80acdbc <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 80acb1a:	4601      	mov	r1, r0
 80acb1c:	a811      	add	r0, sp, #68	; 0x44
 80acb1e:	f7ff fbbd 	bl	80ac29c <mbedtls_mpi_lset>
 80acb22:	4604      	mov	r4, r0
 80acb24:	2800      	cmp	r0, #0
 80acb26:	f040 8149 	bne.w	80acdbc <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 80acb2a:	2102      	movs	r1, #2
 80acb2c:	a814      	add	r0, sp, #80	; 0x50
 80acb2e:	f7ff faec 	bl	80ac10a <mbedtls_mpi_grow>
 80acb32:	4604      	mov	r4, r0
 80acb34:	2800      	cmp	r0, #0
 80acb36:	f040 8141 	bne.w	80acdbc <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 80acb3a:	2103      	movs	r1, #3
 80acb3c:	a817      	add	r0, sp, #92	; 0x5c
 80acb3e:	f7ff fae4 	bl	80ac10a <mbedtls_mpi_grow>
 80acb42:	4604      	mov	r4, r0
 80acb44:	2800      	cmp	r0, #0
 80acb46:	f040 8139 	bne.w	80acdbc <mbedtls_mpi_div_mpi+0x354>

    k = mbedtls_mpi_bitlen( &Y ) % biL;
 80acb4a:	4630      	mov	r0, r6
 80acb4c:	f7ff fbec 	bl	80ac328 <mbedtls_mpi_bitlen>
 80acb50:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
 80acb54:	281f      	cmp	r0, #31
 80acb56:	d013      	beq.n	80acb80 <mbedtls_mpi_div_mpi+0x118>
    {
        k = biL - 1 - k;
 80acb58:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 80acb5c:	4619      	mov	r1, r3
 80acb5e:	a80b      	add	r0, sp, #44	; 0x2c
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );

    k = mbedtls_mpi_bitlen( &Y ) % biL;
    if( k < biL - 1 )
    {
        k = biL - 1 - k;
 80acb60:	9302      	str	r3, [sp, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 80acb62:	f7ff fc73 	bl	80ac44c <mbedtls_mpi_shift_l>
 80acb66:	4604      	mov	r4, r0
 80acb68:	2800      	cmp	r0, #0
 80acb6a:	f040 8127 	bne.w	80acdbc <mbedtls_mpi_div_mpi+0x354>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 80acb6e:	9902      	ldr	r1, [sp, #8]
 80acb70:	4630      	mov	r0, r6
 80acb72:	f7ff fc6b 	bl	80ac44c <mbedtls_mpi_shift_l>
 80acb76:	4604      	mov	r4, r0
 80acb78:	2800      	cmp	r0, #0
 80acb7a:	f040 811f 	bne.w	80acdbc <mbedtls_mpi_div_mpi+0x354>
 80acb7e:	e000      	b.n	80acb82 <mbedtls_mpi_div_mpi+0x11a>
    }
    else k = 0;
 80acb80:	9402      	str	r4, [sp, #8]

    n = X.n - 1;
 80acb82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    t = Y.n - 1;
 80acb84:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    }
    else k = 0;

    n = X.n - 1;
 80acb88:	f105 39ff 	add.w	r9, r5, #4294967295
    t = Y.n - 1;
 80acb8c:	f10a 33ff 	add.w	r3, sl, #4294967295
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 80acb90:	ebc3 0b09 	rsb	fp, r3, r9
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    }
    else k = 0;

    n = X.n - 1;
    t = Y.n - 1;
 80acb94:	9300      	str	r3, [sp, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 80acb96:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80acb9a:	4619      	mov	r1, r3
 80acb9c:	4630      	mov	r0, r6
 80acb9e:	9303      	str	r3, [sp, #12]
 80acba0:	f7ff fc54 	bl	80ac44c <mbedtls_mpi_shift_l>
 80acba4:	4604      	mov	r4, r0
 80acba6:	2800      	cmp	r0, #0
 80acba8:	f040 8108 	bne.w	80acdbc <mbedtls_mpi_div_mpi+0x354>

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    {
        Z.p[n - t]++;
 80acbac:	ea4f 0b8b 	mov.w	fp, fp, lsl #2

    n = X.n - 1;
    t = Y.n - 1;
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 80acbb0:	4631      	mov	r1, r6
 80acbb2:	a80b      	add	r0, sp, #44	; 0x2c
 80acbb4:	f7ff fd78 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80acbb8:	2800      	cmp	r0, #0
 80acbba:	db0e      	blt.n	80acbda <mbedtls_mpi_div_mpi+0x172>
    {
        Z.p[n - t]++;
 80acbbc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80acbbe:	f851 200b 	ldr.w	r2, [r1, fp]
 80acbc2:	3201      	adds	r2, #1
 80acbc4:	f841 200b 	str.w	r2, [r1, fp]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 80acbc8:	a90b      	add	r1, sp, #44	; 0x2c
 80acbca:	4632      	mov	r2, r6
 80acbcc:	4608      	mov	r0, r1
 80acbce:	f7ff fe81 	bl	80ac8d4 <mbedtls_mpi_sub_mpi>
 80acbd2:	4604      	mov	r4, r0
 80acbd4:	2800      	cmp	r0, #0
 80acbd6:	d0eb      	beq.n	80acbb0 <mbedtls_mpi_div_mpi+0x148>
 80acbd8:	e0f0      	b.n	80acdbc <mbedtls_mpi_div_mpi+0x354>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 80acbda:	9903      	ldr	r1, [sp, #12]
 80acbdc:	4630      	mov	r0, r6
 80acbde:	f7ff fc84 	bl	80ac4ea <mbedtls_mpi_shift_r>
 80acbe2:	4604      	mov	r4, r0
 80acbe4:	2800      	cmp	r0, #0
 80acbe6:	f040 80e9 	bne.w	80acdbc <mbedtls_mpi_div_mpi+0x354>

    for( i = n; i > t ; i-- )
    {
        if( X.p[i] >= Y.p[t] )
 80acbea:	9b00      	ldr	r3, [sp, #0]
 80acbec:	f105 4680 	add.w	r6, r5, #1073741824	; 0x40000000
 80acbf0:	009b      	lsls	r3, r3, #2
 80acbf2:	9305      	str	r3, [sp, #20]
        do
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 80acbf4:	3b04      	subs	r3, #4
 80acbf6:	9308      	str	r3, [sp, #32]
 80acbf8:	f105 6300 	add.w	r3, r5, #134217728	; 0x8000000
 80acbfc:	3b01      	subs	r3, #1
 80acbfe:	3e01      	subs	r6, #1
 80acc00:	ebca 0606 	rsb	r6, sl, r6
 80acc04:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80acc08:	ebca 0a03 	rsb	sl, sl, r3
 80acc0c:	ea4f 134a 	mov.w	r3, sl, lsl #5
 80acc10:	3d02      	subs	r5, #2
 80acc12:	00b6      	lsls	r6, r6, #2
 80acc14:	9303      	str	r3, [sp, #12]
 80acc16:	00ad      	lsls	r5, r5, #2
        Z.p[n - t]++;
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );

    for( i = n; i > t ; i-- )
 80acc18:	9b00      	ldr	r3, [sp, #0]
 80acc1a:	4599      	cmp	r9, r3
 80acc1c:	f240 80a8 	bls.w	80acd70 <mbedtls_mpi_div_mpi+0x308>
    {
        if( X.p[i] >= Y.p[t] )
 80acc20:	9805      	ldr	r0, [sp, #20]
 80acc22:	990d      	ldr	r1, [sp, #52]	; 0x34
 80acc24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80acc26:	1d2b      	adds	r3, r5, #4
 80acc28:	5812      	ldr	r2, [r2, r0]
 80acc2a:	9309      	str	r3, [sp, #36]	; 0x24
 80acc2c:	58cb      	ldr	r3, [r1, r3]
 80acc2e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80acc30:	4293      	cmp	r3, r2
 80acc32:	d303      	bcc.n	80acc3c <mbedtls_mpi_div_mpi+0x1d4>
            Z.p[i - t - 1] = ~0;
 80acc34:	f04f 33ff 	mov.w	r3, #4294967295
 80acc38:	5183      	str	r3, [r0, r6]
 80acc3a:	e01b      	b.n	80acc74 <mbedtls_mpi_div_mpi+0x20c>
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 80acc3c:	eb00 0a06 	add.w	sl, r0, r6
 80acc40:	5948      	ldr	r0, [r1, r5]
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
 80acc42:	b19a      	cbz	r2, 80acc6c <mbedtls_mpi_div_mpi+0x204>

        return ( ~0 );
    }

#if defined(MBEDTLS_HAVE_UDBL)
    dividend  = (mbedtls_t_udbl) u1 << biL;
 80acc44:	9307      	str	r3, [sp, #28]
 80acc46:	2300      	movs	r3, #0
 80acc48:	9306      	str	r3, [sp, #24]
    dividend |= (mbedtls_t_udbl) u0;
    quotient = dividend / d;
 80acc4a:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 80acc4e:	ea4b 0b00 	orr.w	fp, fp, r0
 80acc52:	4658      	mov	r0, fp
 80acc54:	4661      	mov	r1, ip
 80acc56:	f005 fae5 	bl	80b2224 <__aeabi_uldivmod>
        quotient = ( (mbedtls_t_udbl) 1 << biL ) - 1;

    if( r != NULL )
        *r = (mbedtls_mpi_uint)( dividend - (quotient * d ) );

    return (mbedtls_mpi_uint) quotient;
 80acc5a:	2300      	movs	r3, #0
 80acc5c:	f04f 32ff 	mov.w	r2, #4294967295
 80acc60:	428b      	cmp	r3, r1
 80acc62:	bf08      	it	eq
 80acc64:	4282      	cmpeq	r2, r0
 80acc66:	d203      	bcs.n	80acc70 <mbedtls_mpi_div_mpi+0x208>
 80acc68:	4610      	mov	r0, r2
 80acc6a:	e001      	b.n	80acc70 <mbedtls_mpi_div_mpi+0x208>
     */
    if( 0 == d || u1 >= d )
    {
        if (r != NULL) *r = ~0;

        return ( ~0 );
 80acc6c:	f04f 30ff 	mov.w	r0, #4294967295
        if( X.p[i] >= Y.p[t] )
            Z.p[i - t - 1] = ~0;
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
 80acc70:	f8ca 0000 	str.w	r0, [sl]
        }

        Z.p[i - t - 1]++;
 80acc74:	9a13      	ldr	r2, [sp, #76]	; 0x4c
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 80acc76:	f1a5 0a04 	sub.w	sl, r5, #4
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
        }

        Z.p[i - t - 1]++;
 80acc7a:	5993      	ldr	r3, [r2, r6]
 80acc7c:	3301      	adds	r3, #1
 80acc7e:	5193      	str	r3, [r2, r6]
        do
        {
            Z.p[i - t - 1]--;
 80acc80:	9a13      	ldr	r2, [sp, #76]	; 0x4c

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 80acc82:	2100      	movs	r1, #0
        }

        Z.p[i - t - 1]++;
        do
        {
            Z.p[i - t - 1]--;
 80acc84:	5993      	ldr	r3, [r2, r6]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 80acc86:	a814      	add	r0, sp, #80	; 0x50
        }

        Z.p[i - t - 1]++;
        do
        {
            Z.p[i - t - 1]--;
 80acc88:	3b01      	subs	r3, #1
 80acc8a:	5193      	str	r3, [r2, r6]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 80acc8c:	f7ff fb06 	bl	80ac29c <mbedtls_mpi_lset>
 80acc90:	2800      	cmp	r0, #0
 80acc92:	f040 8090 	bne.w	80acdb6 <mbedtls_mpi_div_mpi+0x34e>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 80acc96:	9b00      	ldr	r3, [sp, #0]
 80acc98:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80acc9a:	b11b      	cbz	r3, 80acca4 <mbedtls_mpi_div_mpi+0x23c>
 80acc9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80acc9e:	9908      	ldr	r1, [sp, #32]
 80acca0:	585b      	ldr	r3, [r3, r1]
 80acca2:	e000      	b.n	80acca6 <mbedtls_mpi_div_mpi+0x23e>
 80acca4:	9b00      	ldr	r3, [sp, #0]
 80acca6:	6013      	str	r3, [r2, #0]
            T1.p[1] = Y.p[t];
 80acca8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80accaa:	9a05      	ldr	r2, [sp, #20]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 80accac:	a914      	add	r1, sp, #80	; 0x50
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
 80accae:	589a      	ldr	r2, [r3, r2]
 80accb0:	9b16      	ldr	r3, [sp, #88]	; 0x58
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 80accb2:	4608      	mov	r0, r1
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
 80accb4:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 80accb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80accb8:	599a      	ldr	r2, [r3, r6]
 80accba:	f7ff fec8 	bl	80aca4e <mbedtls_mpi_mul_int>
 80accbe:	4601      	mov	r1, r0
 80accc0:	2800      	cmp	r0, #0
 80accc2:	d17a      	bne.n	80acdba <mbedtls_mpi_div_mpi+0x352>

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 80accc4:	a817      	add	r0, sp, #92	; 0x5c
 80accc6:	f7ff fae9 	bl	80ac29c <mbedtls_mpi_lset>
 80accca:	2800      	cmp	r0, #0
 80acccc:	d173      	bne.n	80acdb6 <mbedtls_mpi_div_mpi+0x34e>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 80accce:	f1b9 0f01 	cmp.w	r9, #1
 80accd2:	bf18      	it	ne
 80accd4:	9a0d      	ldrne	r2, [sp, #52]	; 0x34
 80accd6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80accd8:	bf18      	it	ne
 80accda:	f852 000a 	ldrne.w	r0, [r2, sl]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 80accde:	a917      	add	r1, sp, #92	; 0x5c
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 80acce0:	6018      	str	r0, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 80acce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 80acce4:	a814      	add	r0, sp, #80	; 0x50
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 80acce6:	595a      	ldr	r2, [r3, r5]
 80acce8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80accea:	605a      	str	r2, [r3, #4]
            T2.p[2] = X.p[i];
 80accec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80accee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80accf0:	589a      	ldr	r2, [r3, r2]
 80accf2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80accf4:	609a      	str	r2, [r3, #8]
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 80accf6:	f7ff fcd7 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
        }

        Z.p[i - t - 1]++;
        do
 80accfa:	2800      	cmp	r0, #0
 80accfc:	dcc0      	bgt.n	80acc80 <mbedtls_mpi_div_mpi+0x218>
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 80accfe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80acd00:	a90e      	add	r1, sp, #56	; 0x38
 80acd02:	599a      	ldr	r2, [r3, r6]
 80acd04:	a814      	add	r0, sp, #80	; 0x50
 80acd06:	f7ff fea2 	bl	80aca4e <mbedtls_mpi_mul_int>
 80acd0a:	2800      	cmp	r0, #0
 80acd0c:	d153      	bne.n	80acdb6 <mbedtls_mpi_div_mpi+0x34e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 80acd0e:	9903      	ldr	r1, [sp, #12]
 80acd10:	a814      	add	r0, sp, #80	; 0x50
 80acd12:	f7ff fb9b 	bl	80ac44c <mbedtls_mpi_shift_l>
 80acd16:	2800      	cmp	r0, #0
 80acd18:	d14d      	bne.n	80acdb6 <mbedtls_mpi_div_mpi+0x34e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 80acd1a:	a90b      	add	r1, sp, #44	; 0x2c
 80acd1c:	4608      	mov	r0, r1
 80acd1e:	aa14      	add	r2, sp, #80	; 0x50
 80acd20:	f7ff fdd8 	bl	80ac8d4 <mbedtls_mpi_sub_mpi>
 80acd24:	4601      	mov	r1, r0
 80acd26:	2800      	cmp	r0, #0
 80acd28:	d147      	bne.n	80acdba <mbedtls_mpi_div_mpi+0x352>

        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 80acd2a:	a80b      	add	r0, sp, #44	; 0x2c
 80acd2c:	f7ff fd01 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80acd30:	2800      	cmp	r0, #0
 80acd32:	da15      	bge.n	80acd60 <mbedtls_mpi_div_mpi+0x2f8>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 80acd34:	a90e      	add	r1, sp, #56	; 0x38
 80acd36:	a814      	add	r0, sp, #80	; 0x50
 80acd38:	f7ff fa4f 	bl	80ac1da <mbedtls_mpi_copy>
 80acd3c:	2800      	cmp	r0, #0
 80acd3e:	d13a      	bne.n	80acdb6 <mbedtls_mpi_div_mpi+0x34e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 80acd40:	9903      	ldr	r1, [sp, #12]
 80acd42:	a814      	add	r0, sp, #80	; 0x50
 80acd44:	f7ff fb82 	bl	80ac44c <mbedtls_mpi_shift_l>
 80acd48:	2800      	cmp	r0, #0
 80acd4a:	d134      	bne.n	80acdb6 <mbedtls_mpi_div_mpi+0x34e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 80acd4c:	a90b      	add	r1, sp, #44	; 0x2c
 80acd4e:	aa14      	add	r2, sp, #80	; 0x50
 80acd50:	4608      	mov	r0, r1
 80acd52:	f7ff fd9e 	bl	80ac892 <mbedtls_mpi_add_mpi>
 80acd56:	bb70      	cbnz	r0, 80acdb6 <mbedtls_mpi_div_mpi+0x34e>
            Z.p[i - t - 1]--;
 80acd58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80acd5a:	5993      	ldr	r3, [r2, r6]
 80acd5c:	3b01      	subs	r3, #1
 80acd5e:	5193      	str	r3, [r2, r6]
 80acd60:	9b03      	ldr	r3, [sp, #12]
        Z.p[n - t]++;
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );

    for( i = n; i > t ; i-- )
 80acd62:	f109 39ff 	add.w	r9, r9, #4294967295
 80acd66:	3b20      	subs	r3, #32
 80acd68:	3e04      	subs	r6, #4
 80acd6a:	9303      	str	r3, [sp, #12]
 80acd6c:	3d04      	subs	r5, #4
 80acd6e:	e753      	b.n	80acc18 <mbedtls_mpi_div_mpi+0x1b0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
            Z.p[i - t - 1]--;
        }
    }

    if( Q != NULL )
 80acd70:	9b01      	ldr	r3, [sp, #4]
 80acd72:	b15b      	cbz	r3, 80acd8c <mbedtls_mpi_div_mpi+0x324>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 80acd74:	a911      	add	r1, sp, #68	; 0x44
 80acd76:	4618      	mov	r0, r3
 80acd78:	f7ff fa2f 	bl	80ac1da <mbedtls_mpi_copy>
 80acd7c:	b9d8      	cbnz	r0, 80acdb6 <mbedtls_mpi_div_mpi+0x34e>
        Q->s = A->s * B->s;
 80acd7e:	9b04      	ldr	r3, [sp, #16]
 80acd80:	f8d8 2000 	ldr.w	r2, [r8]
 80acd84:	681b      	ldr	r3, [r3, #0]
 80acd86:	4353      	muls	r3, r2
 80acd88:	9a01      	ldr	r2, [sp, #4]
 80acd8a:	6013      	str	r3, [r2, #0]
    }

    if( R != NULL )
 80acd8c:	b1b7      	cbz	r7, 80acdbc <mbedtls_mpi_div_mpi+0x354>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 80acd8e:	9902      	ldr	r1, [sp, #8]
 80acd90:	a80b      	add	r0, sp, #44	; 0x2c
 80acd92:	f7ff fbaa 	bl	80ac4ea <mbedtls_mpi_shift_r>
 80acd96:	b970      	cbnz	r0, 80acdb6 <mbedtls_mpi_div_mpi+0x34e>
        X.s = A->s;
 80acd98:	f8d8 3000 	ldr.w	r3, [r8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 80acd9c:	a90b      	add	r1, sp, #44	; 0x2c
 80acd9e:	4638      	mov	r0, r7
    }

    if( R != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
        X.s = A->s;
 80acda0:	930b      	str	r3, [sp, #44]	; 0x2c
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 80acda2:	f7ff fa1a 	bl	80ac1da <mbedtls_mpi_copy>
 80acda6:	4601      	mov	r1, r0
 80acda8:	b938      	cbnz	r0, 80acdba <mbedtls_mpi_div_mpi+0x352>

        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 80acdaa:	4638      	mov	r0, r7
 80acdac:	f7ff fcc1 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80acdb0:	b920      	cbnz	r0, 80acdbc <mbedtls_mpi_div_mpi+0x354>
            R->s = 1;
 80acdb2:	2301      	movs	r3, #1
 80acdb4:	603b      	str	r3, [r7, #0]
 80acdb6:	4604      	mov	r4, r0
 80acdb8:	e000      	b.n	80acdbc <mbedtls_mpi_div_mpi+0x354>
 80acdba:	460c      	mov	r4, r1
    }

cleanup:

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 80acdbc:	a80b      	add	r0, sp, #44	; 0x2c
 80acdbe:	f7ff f992 	bl	80ac0e6 <mbedtls_mpi_free>
 80acdc2:	a80e      	add	r0, sp, #56	; 0x38
 80acdc4:	f7ff f98f 	bl	80ac0e6 <mbedtls_mpi_free>
 80acdc8:	a811      	add	r0, sp, #68	; 0x44
 80acdca:	f7ff f98c 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 80acdce:	a814      	add	r0, sp, #80	; 0x50
 80acdd0:	f7ff f989 	bl	80ac0e6 <mbedtls_mpi_free>
 80acdd4:	a817      	add	r0, sp, #92	; 0x5c
 80acdd6:	f7ff f986 	bl	80ac0e6 <mbedtls_mpi_free>

    return( ret );
 80acdda:	4620      	mov	r0, r4
 80acddc:	e001      	b.n	80acde2 <mbedtls_mpi_div_mpi+0x37a>
    mbedtls_mpi X, Y, Z, T1, T2;
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 80acdde:	f06f 000b 	mvn.w	r0, #11

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );

    return( ret );
}
 80acde2:	b01b      	add	sp, #108	; 0x6c
 80acde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080acde8 <mbedtls_mpi_mod_mpi>:

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80acde8:	b570      	push	{r4, r5, r6, lr}
 80acdea:	4604      	mov	r4, r0
 80acdec:	460e      	mov	r6, r1
    int ret;
    MPI_VALIDATE_RET( R != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 80acdee:	4610      	mov	r0, r2
 80acdf0:	2100      	movs	r1, #0

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80acdf2:	4615      	mov	r5, r2
    int ret;
    MPI_VALIDATE_RET( R != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 80acdf4:	f7ff fc9d 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80acdf8:	2800      	cmp	r0, #0
 80acdfa:	db22      	blt.n	80ace42 <mbedtls_mpi_mod_mpi+0x5a>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 80acdfc:	462b      	mov	r3, r5
 80acdfe:	4632      	mov	r2, r6
 80ace00:	4621      	mov	r1, r4
 80ace02:	2000      	movs	r0, #0
 80ace04:	f7ff fe30 	bl	80aca68 <mbedtls_mpi_div_mpi>
 80ace08:	b9f8      	cbnz	r0, 80ace4a <mbedtls_mpi_mod_mpi+0x62>

    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 80ace0a:	2100      	movs	r1, #0
 80ace0c:	4620      	mov	r0, r4
 80ace0e:	f7ff fc90 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80ace12:	2800      	cmp	r0, #0
 80ace14:	da07      	bge.n	80ace26 <mbedtls_mpi_mod_mpi+0x3e>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 80ace16:	462a      	mov	r2, r5
 80ace18:	4621      	mov	r1, r4
 80ace1a:	4620      	mov	r0, r4
 80ace1c:	f7ff fd39 	bl	80ac892 <mbedtls_mpi_add_mpi>
 80ace20:	2800      	cmp	r0, #0
 80ace22:	d0f2      	beq.n	80ace0a <mbedtls_mpi_mod_mpi+0x22>
 80ace24:	bd70      	pop	{r4, r5, r6, pc}

    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 80ace26:	4629      	mov	r1, r5
 80ace28:	4620      	mov	r0, r4
 80ace2a:	f7ff fc3d 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80ace2e:	2800      	cmp	r0, #0
 80ace30:	db0a      	blt.n	80ace48 <mbedtls_mpi_mod_mpi+0x60>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 80ace32:	462a      	mov	r2, r5
 80ace34:	4621      	mov	r1, r4
 80ace36:	4620      	mov	r0, r4
 80ace38:	f7ff fd4c 	bl	80ac8d4 <mbedtls_mpi_sub_mpi>
 80ace3c:	2800      	cmp	r0, #0
 80ace3e:	d0f2      	beq.n	80ace26 <mbedtls_mpi_mod_mpi+0x3e>
 80ace40:	bd70      	pop	{r4, r5, r6, pc}
    MPI_VALIDATE_RET( R != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 80ace42:	f06f 0009 	mvn.w	r0, #9
 80ace46:	bd70      	pop	{r4, r5, r6, pc}
 80ace48:	2000      	movs	r0, #0
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );

cleanup:

    return( ret );
}
 80ace4a:	bd70      	pop	{r4, r5, r6, pc}

080ace4c <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *_RR )
{
 80ace4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80ace50:	4606      	mov	r6, r0
 80ace52:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
 80ace56:	460f      	mov	r7, r1
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 80ace58:	4618      	mov	r0, r3
 80ace5a:	2100      	movs	r1, #0
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *_RR )
{
 80ace5c:	9202      	str	r2, [sp, #8]
 80ace5e:	461d      	mov	r5, r3
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 80ace60:	f7ff fc67 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80ace64:	2800      	cmp	r0, #0
 80ace66:	dd05      	ble.n	80ace74 <mbedtls_mpi_exp_mod+0x28>
 80ace68:	68ab      	ldr	r3, [r5, #8]
 80ace6a:	f8d3 8000 	ldr.w	r8, [r3]
 80ace6e:	f018 0f01 	tst.w	r8, #1
 80ace72:	d102      	bne.n	80ace7a <mbedtls_mpi_exp_mod+0x2e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80ace74:	f06f 0003 	mvn.w	r0, #3
 80ace78:	e203      	b.n	80ad282 <mbedtls_mpi_exp_mod+0x436>

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
 80ace7a:	2100      	movs	r1, #0
 80ace7c:	9802      	ldr	r0, [sp, #8]
 80ace7e:	f7ff fc58 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80ace82:	2800      	cmp	r0, #0
 80ace84:	dbf6      	blt.n	80ace74 <mbedtls_mpi_exp_mod+0x28>
{
    mbedtls_mpi_uint x, m0 = N->p[0];
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;
 80ace86:	f108 0402 	add.w	r4, r8, #2
 80ace8a:	0064      	lsls	r4, r4, #1
 80ace8c:	f004 0408 	and.w	r4, r4, #8
 80ace90:	4444      	add	r4, r8
 80ace92:	2103      	movs	r1, #3

    for( i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( m0 * x ) );
 80ace94:	fb04 f308 	mul.w	r3, r4, r8
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
 80ace98:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
 80ace9a:	f1c3 0302 	rsb	r3, r3, #2
 80ace9e:	fb03 f404 	mul.w	r4, r3, r4
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
 80acea2:	d1f7      	bne.n	80ace94 <mbedtls_mpi_exp_mod+0x48>
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80acea4:	2301      	movs	r3, #1
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
 80acea6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80aceaa:	a814      	add	r0, sp, #80	; 0x50
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80aceac:	9308      	str	r3, [sp, #32]
    X->n = 0;
 80aceae:	9109      	str	r1, [sp, #36]	; 0x24
    X->p = NULL;
 80aceb0:	910a      	str	r1, [sp, #40]	; 0x28
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80aceb2:	930b      	str	r3, [sp, #44]	; 0x2c
    X->n = 0;
 80aceb4:	910c      	str	r1, [sp, #48]	; 0x30
    X->p = NULL;
 80aceb6:	910d      	str	r1, [sp, #52]	; 0x34
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80aceb8:	930e      	str	r3, [sp, #56]	; 0x38
    X->n = 0;
 80aceba:	910f      	str	r1, [sp, #60]	; 0x3c
    X->p = NULL;
 80acebc:	9110      	str	r1, [sp, #64]	; 0x40
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
 80acebe:	f005 fcc0 	bl	80b2842 <memset>

    i = mbedtls_mpi_bitlen( E );
 80acec2:	9802      	ldr	r0, [sp, #8]
 80acec4:	f7ff fa30 	bl	80ac328 <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;
 80acec8:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
 80acecc:	d20a      	bcs.n	80acee4 <mbedtls_mpi_exp_mod+0x98>
 80acece:	28ef      	cmp	r0, #239	; 0xef
 80aced0:	d80b      	bhi.n	80aceea <mbedtls_mpi_exp_mod+0x9e>
 80aced2:	284f      	cmp	r0, #79	; 0x4f
 80aced4:	d80c      	bhi.n	80acef0 <mbedtls_mpi_exp_mod+0xa4>
 80aced6:	2818      	cmp	r0, #24
 80aced8:	bf34      	ite	cc
 80aceda:	f04f 0b01 	movcc.w	fp, #1
 80acede:	f04f 0b03 	movcs.w	fp, #3
 80acee2:	e007      	b.n	80acef4 <mbedtls_mpi_exp_mod+0xa8>
 80acee4:	f04f 0b06 	mov.w	fp, #6
 80acee8:	e004      	b.n	80acef4 <mbedtls_mpi_exp_mod+0xa8>
 80aceea:	f04f 0b05 	mov.w	fp, #5
 80aceee:	e001      	b.n	80acef4 <mbedtls_mpi_exp_mod+0xa8>
 80acef0:	f04f 0b04 	mov.w	fp, #4
#if( MBEDTLS_MPI_WINDOW_SIZE < 6 )
    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
#endif

    j = N->n + 1;
 80acef4:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 80acef6:	4630      	mov	r0, r6
#if( MBEDTLS_MPI_WINDOW_SIZE < 6 )
    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
#endif

    j = N->n + 1;
 80acef8:	f103 0801 	add.w	r8, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 80acefc:	4641      	mov	r1, r8
 80acefe:	f7ff f904 	bl	80ac10a <mbedtls_mpi_grow>
 80acf02:	4603      	mov	r3, r0
 80acf04:	2800      	cmp	r0, #0
 80acf06:	f040 8194 	bne.w	80ad232 <mbedtls_mpi_exp_mod+0x3e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
 80acf0a:	4641      	mov	r1, r8
 80acf0c:	a817      	add	r0, sp, #92	; 0x5c
 80acf0e:	f7ff f8fc 	bl	80ac10a <mbedtls_mpi_grow>
 80acf12:	4603      	mov	r3, r0
 80acf14:	2800      	cmp	r0, #0
 80acf16:	f040 818c 	bne.w	80ad232 <mbedtls_mpi_exp_mod+0x3e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
 80acf1a:	ea4f 0148 	mov.w	r1, r8, lsl #1
 80acf1e:	a80b      	add	r0, sp, #44	; 0x2c
 80acf20:	f7ff f8f3 	bl	80ac10a <mbedtls_mpi_grow>
 80acf24:	4603      	mov	r3, r0
 80acf26:	2800      	cmp	r0, #0
 80acf28:	f040 8183 	bne.w	80ad232 <mbedtls_mpi_exp_mod+0x3e6>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
 80acf2c:	683b      	ldr	r3, [r7, #0]
 80acf2e:	9304      	str	r3, [sp, #16]
    if( neg )
 80acf30:	3301      	adds	r3, #1
 80acf32:	d10a      	bne.n	80acf4a <mbedtls_mpi_exp_mod+0xfe>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
 80acf34:	4639      	mov	r1, r7
 80acf36:	a80e      	add	r0, sp, #56	; 0x38
 80acf38:	f7ff f94f 	bl	80ac1da <mbedtls_mpi_copy>
 80acf3c:	4603      	mov	r3, r0
 80acf3e:	2800      	cmp	r0, #0
 80acf40:	f040 8177 	bne.w	80ad232 <mbedtls_mpi_exp_mod+0x3e6>
        Apos.s = 1;
 80acf44:	2301      	movs	r3, #1
 80acf46:	930e      	str	r3, [sp, #56]	; 0x38
        A = &Apos;
 80acf48:	af0e      	add	r7, sp, #56	; 0x38
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
 80acf4a:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 80acf4e:	b10b      	cbz	r3, 80acf54 <mbedtls_mpi_exp_mod+0x108>
 80acf50:	689b      	ldr	r3, [r3, #8]
 80acf52:	bb2b      	cbnz	r3, 80acfa0 <mbedtls_mpi_exp_mod+0x154>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
 80acf54:	2101      	movs	r1, #1
 80acf56:	a808      	add	r0, sp, #32
 80acf58:	f7ff f9a0 	bl	80ac29c <mbedtls_mpi_lset>
 80acf5c:	4603      	mov	r3, r0
 80acf5e:	2800      	cmp	r0, #0
 80acf60:	f040 8167 	bne.w	80ad232 <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 80acf64:	6869      	ldr	r1, [r5, #4]
 80acf66:	a808      	add	r0, sp, #32
 80acf68:	0189      	lsls	r1, r1, #6
 80acf6a:	f7ff fa6f 	bl	80ac44c <mbedtls_mpi_shift_l>
 80acf6e:	4603      	mov	r3, r0
 80acf70:	2800      	cmp	r0, #0
 80acf72:	f040 815e 	bne.w	80ad232 <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
 80acf76:	a908      	add	r1, sp, #32
 80acf78:	462a      	mov	r2, r5
 80acf7a:	4608      	mov	r0, r1
 80acf7c:	f7ff ff34 	bl	80acde8 <mbedtls_mpi_mod_mpi>
 80acf80:	4603      	mov	r3, r0
 80acf82:	2800      	cmp	r0, #0
 80acf84:	f040 8155 	bne.w	80ad232 <mbedtls_mpi_exp_mod+0x3e6>

        if( _RR != NULL )
 80acf88:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 80acf8c:	b183      	cbz	r3, 80acfb0 <mbedtls_mpi_exp_mod+0x164>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
 80acf8e:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 80acf92:	ab08      	add	r3, sp, #32
 80acf94:	cb03      	ldmia	r3!, {r0, r1}
 80acf96:	6010      	str	r0, [r2, #0]
 80acf98:	6818      	ldr	r0, [r3, #0]
 80acf9a:	6051      	str	r1, [r2, #4]
 80acf9c:	6090      	str	r0, [r2, #8]
 80acf9e:	e007      	b.n	80acfb0 <mbedtls_mpi_exp_mod+0x164>
    }
    else
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
 80acfa0:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 80acfa4:	ab08      	add	r3, sp, #32
 80acfa6:	6810      	ldr	r0, [r2, #0]
 80acfa8:	6851      	ldr	r1, [r2, #4]
 80acfaa:	c303      	stmia	r3!, {r0, r1}
 80acfac:	6890      	ldr	r0, [r2, #8]
 80acfae:	6018      	str	r0, [r3, #0]

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
 80acfb0:	4629      	mov	r1, r5
 80acfb2:	4638      	mov	r0, r7
 80acfb4:	f7ff fb78 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80acfb8:	2800      	cmp	r0, #0
 80acfba:	db18      	blt.n	80acfee <mbedtls_mpi_exp_mod+0x1a2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
 80acfbc:	462a      	mov	r2, r5
 80acfbe:	4639      	mov	r1, r7
 80acfc0:	a817      	add	r0, sp, #92	; 0x5c
 80acfc2:	f7ff ff11 	bl	80acde8 <mbedtls_mpi_mod_mpi>
 80acfc6:	4603      	mov	r3, r0
 80acfc8:	2800      	cmp	r0, #0
 80acfca:	f040 8132 	bne.w	80ad232 <mbedtls_mpi_exp_mod+0x3e6>
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( m0 * x ) );

    *mm = ~x + 1;
 80acfce:	4264      	negs	r4, r4
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 80acfd0:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 80acfd4:	4623      	mov	r3, r4
 80acfd6:	f8cd 9000 	str.w	r9, [sp]
 80acfda:	462a      	mov	r2, r5
 80acfdc:	a908      	add	r1, sp, #32
 80acfde:	a817      	add	r0, sp, #92	; 0x5c
 80acfe0:	f7ff fafe 	bl	80ac5e0 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 80acfe4:	4603      	mov	r3, r0
 80acfe6:	2800      	cmp	r0, #0
 80acfe8:	f040 8123 	bne.w	80ad232 <mbedtls_mpi_exp_mod+0x3e6>
 80acfec:	e004      	b.n	80acff8 <mbedtls_mpi_exp_mod+0x1ac>
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
 80acfee:	4639      	mov	r1, r7
 80acff0:	a817      	add	r0, sp, #92	; 0x5c
 80acff2:	f7ff f8f2 	bl	80ac1da <mbedtls_mpi_copy>
 80acff6:	e7e6      	b.n	80acfc6 <mbedtls_mpi_exp_mod+0x17a>
    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
 80acff8:	a908      	add	r1, sp, #32
 80acffa:	4630      	mov	r0, r6
 80acffc:	f7ff f8ed 	bl	80ac1da <mbedtls_mpi_copy>
 80ad000:	4603      	mov	r3, r0
 80ad002:	2800      	cmp	r0, #0
 80ad004:	f040 8115 	bne.w	80ad232 <mbedtls_mpi_exp_mod+0x3e6>
{
    mbedtls_mpi_uint z = 1;
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    U.p = &z;
 80ad008:	ab07      	add	r3, sp, #28
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N,
                        mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
 80ad00a:	2701      	movs	r7, #1
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    U.p = &z;
 80ad00c:	9313      	str	r3, [sp, #76]	; 0x4c

    return( mpi_montmul( A, &U, N, mm, T ) );
 80ad00e:	f8cd 9000 	str.w	r9, [sp]
 80ad012:	4623      	mov	r3, r4
 80ad014:	462a      	mov	r2, r5
 80ad016:	a911      	add	r1, sp, #68	; 0x44
 80ad018:	4630      	mov	r0, r6
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N,
                        mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
 80ad01a:	9707      	str	r7, [sp, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
 80ad01c:	9711      	str	r7, [sp, #68]	; 0x44
 80ad01e:	9712      	str	r7, [sp, #72]	; 0x48
    U.p = &z;

    return( mpi_montmul( A, &U, N, mm, T ) );
 80ad020:	f7ff fade 	bl	80ac5e0 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 80ad024:	4603      	mov	r3, r0
 80ad026:	2800      	cmp	r0, #0
 80ad028:	f040 8103 	bne.w	80ad232 <mbedtls_mpi_exp_mod+0x3e6>

    if( wsize > 1 )
 80ad02c:	45bb      	cmp	fp, r7
 80ad02e:	d05b      	beq.n	80ad0e8 <mbedtls_mpi_exp_mod+0x29c>
    {
        /*
         * W[1 << (wsize - 1)] = W[1] ^ (wsize - 1)
         */
        j =  one << ( wsize - 1 );
 80ad030:	f10b 33ff 	add.w	r3, fp, #4294967295
 80ad034:	9303      	str	r3, [sp, #12]
 80ad036:	409f      	lsls	r7, r3

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 80ad038:	f04f 080c 	mov.w	r8, #12
 80ad03c:	ab14      	add	r3, sp, #80	; 0x50
 80ad03e:	fb08 3807 	mla	r8, r8, r7, r3
 80ad042:	6869      	ldr	r1, [r5, #4]
 80ad044:	4640      	mov	r0, r8
 80ad046:	3101      	adds	r1, #1
 80ad048:	f7ff f85f 	bl	80ac10a <mbedtls_mpi_grow>
 80ad04c:	4603      	mov	r3, r0
 80ad04e:	2800      	cmp	r0, #0
 80ad050:	f040 80ef 	bne.w	80ad232 <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
 80ad054:	a917      	add	r1, sp, #92	; 0x5c
 80ad056:	4640      	mov	r0, r8
 80ad058:	f7ff f8bf 	bl	80ac1da <mbedtls_mpi_copy>
 80ad05c:	4603      	mov	r3, r0
 80ad05e:	2800      	cmp	r0, #0
 80ad060:	f040 80e7 	bne.w	80ad232 <mbedtls_mpi_exp_mod+0x3e6>
 80ad064:	4682      	mov	sl, r0

        for( i = 0; i < wsize - 1; i++ )
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 80ad066:	4623      	mov	r3, r4
 80ad068:	f8cd 9000 	str.w	r9, [sp]
 80ad06c:	462a      	mov	r2, r5
 80ad06e:	4641      	mov	r1, r8
 80ad070:	4640      	mov	r0, r8
 80ad072:	f7ff fab5 	bl	80ac5e0 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 80ad076:	4603      	mov	r3, r0
 80ad078:	2800      	cmp	r0, #0
 80ad07a:	f040 80da 	bne.w	80ad232 <mbedtls_mpi_exp_mod+0x3e6>
        j =  one << ( wsize - 1 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );

        for( i = 0; i < wsize - 1; i++ )
 80ad07e:	9b03      	ldr	r3, [sp, #12]
 80ad080:	f10a 0a01 	add.w	sl, sl, #1
 80ad084:	4553      	cmp	r3, sl
 80ad086:	d8ee      	bhi.n	80ad066 <mbedtls_mpi_exp_mod+0x21a>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 80ad088:	3701      	adds	r7, #1
 80ad08a:	f04f 080c 	mov.w	r8, #12
 80ad08e:	ab14      	add	r3, sp, #80	; 0x50
 80ad090:	fb08 3807 	mla	r8, r8, r7, r3
 80ad094:	f04f 0901 	mov.w	r9, #1
 80ad098:	fa09 f90b 	lsl.w	r9, r9, fp
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 80ad09c:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 80ad0a0:	454f      	cmp	r7, r9
 80ad0a2:	d221      	bcs.n	80ad0e8 <mbedtls_mpi_exp_mod+0x29c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 80ad0a4:	6869      	ldr	r1, [r5, #4]
 80ad0a6:	4640      	mov	r0, r8
 80ad0a8:	3101      	adds	r1, #1
 80ad0aa:	f7ff f82e 	bl	80ac10a <mbedtls_mpi_grow>
 80ad0ae:	4603      	mov	r3, r0
 80ad0b0:	2800      	cmp	r0, #0
 80ad0b2:	f040 80be 	bne.w	80ad232 <mbedtls_mpi_exp_mod+0x3e6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 80ad0b6:	f1a8 010c 	sub.w	r1, r8, #12
 80ad0ba:	4640      	mov	r0, r8
 80ad0bc:	f7ff f88d 	bl	80ac1da <mbedtls_mpi_copy>
 80ad0c0:	4603      	mov	r3, r0
 80ad0c2:	2800      	cmp	r0, #0
 80ad0c4:	f040 80b5 	bne.w	80ad232 <mbedtls_mpi_exp_mod+0x3e6>

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 80ad0c8:	4623      	mov	r3, r4
 80ad0ca:	4640      	mov	r0, r8
 80ad0cc:	f8cd a000 	str.w	sl, [sp]
 80ad0d0:	462a      	mov	r2, r5
 80ad0d2:	a917      	add	r1, sp, #92	; 0x5c
 80ad0d4:	f7ff fa84 	bl	80ac5e0 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 80ad0d8:	f108 080c 	add.w	r8, r8, #12
 80ad0dc:	4603      	mov	r3, r0
 80ad0de:	2800      	cmp	r0, #0
 80ad0e0:	f040 80a7 	bne.w	80ad232 <mbedtls_mpi_exp_mod+0x3e6>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 80ad0e4:	3701      	adds	r7, #1
 80ad0e6:	e7db      	b.n	80ad0a0 <mbedtls_mpi_exp_mod+0x254>

    nblimbs = E->n;
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
 80ad0e8:	2700      	movs	r7, #0
        }
    }

    nblimbs = E->n;
    bufsize = 0;
    nbits   = 0;
 80ad0ea:	46b9      	mov	r9, r7
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
    bufsize = 0;
 80ad0ec:	46ba      	mov	sl, r7
    nbits   = 0;
    wbits   = 0;
 80ad0ee:	46b8      	mov	r8, r7

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
 80ad0f0:	9b02      	ldr	r3, [sp, #8]
 80ad0f2:	685b      	ldr	r3, [r3, #4]
 80ad0f4:	9303      	str	r3, [sp, #12]
    wbits   = 0;
    state   = 0;

    while( 1 )
    {
        if( bufsize == 0 )
 80ad0f6:	f1ba 0f00 	cmp.w	sl, #0
 80ad0fa:	d10e      	bne.n	80ad11a <mbedtls_mpi_exp_mod+0x2ce>
        {
            if( nblimbs == 0 )
 80ad0fc:	9b03      	ldr	r3, [sp, #12]
 80ad0fe:	b93b      	cbnz	r3, 80ad110 <mbedtls_mpi_exp_mod+0x2c4>
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
 80ad100:	2301      	movs	r3, #1
 80ad102:	fa03 f30b 	lsl.w	r3, r3, fp
 80ad106:	9305      	str	r3, [sp, #20]
 80ad108:	9f03      	ldr	r7, [sp, #12]
 80ad10a:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
 80ad10e:	e05e      	b.n	80ad1ce <mbedtls_mpi_exp_mod+0x382>
        if( bufsize == 0 )
        {
            if( nblimbs == 0 )
                break;

            nblimbs--;
 80ad110:	9b03      	ldr	r3, [sp, #12]

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
 80ad112:	f04f 0a20 	mov.w	sl, #32
        if( bufsize == 0 )
        {
            if( nblimbs == 0 )
                break;

            nblimbs--;
 80ad116:	3b01      	subs	r3, #1
 80ad118:	9303      	str	r3, [sp, #12]
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
        }

        bufsize--;

        ei = (E->p[nblimbs] >> bufsize) & 1;
 80ad11a:	9b02      	ldr	r3, [sp, #8]
 80ad11c:	9a03      	ldr	r2, [sp, #12]
 80ad11e:	689b      	ldr	r3, [r3, #8]
            nblimbs--;

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
        }

        bufsize--;
 80ad120:	f10a 3aff 	add.w	sl, sl, #4294967295

        ei = (E->p[nblimbs] >> bufsize) & 1;
 80ad124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80ad128:	fa23 f30a 	lsr.w	r3, r3, sl

        /*
         * skip leading 0s
         */
        if( ei == 0 && state == 0 )
 80ad12c:	f013 0301 	ands.w	r3, r3, #1
 80ad130:	d10f      	bne.n	80ad152 <mbedtls_mpi_exp_mod+0x306>
 80ad132:	2f00      	cmp	r7, #0
 80ad134:	d0df      	beq.n	80ad0f6 <mbedtls_mpi_exp_mod+0x2aa>
            continue;

        if( ei == 0 && state == 1 )
 80ad136:	2f01      	cmp	r7, #1
 80ad138:	d10b      	bne.n	80ad152 <mbedtls_mpi_exp_mod+0x306>
        {
            /*
             * out of window, square X
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 80ad13a:	ab0b      	add	r3, sp, #44	; 0x2c
 80ad13c:	9300      	str	r3, [sp, #0]
 80ad13e:	462a      	mov	r2, r5
 80ad140:	4623      	mov	r3, r4
 80ad142:	4631      	mov	r1, r6
 80ad144:	4630      	mov	r0, r6
 80ad146:	f7ff fa4b 	bl	80ac5e0 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 80ad14a:	4603      	mov	r3, r0
 80ad14c:	2800      	cmp	r0, #0
 80ad14e:	d0d2      	beq.n	80ad0f6 <mbedtls_mpi_exp_mod+0x2aa>
 80ad150:	e06f      	b.n	80ad232 <mbedtls_mpi_exp_mod+0x3e6>
        /*
         * add ei to current window
         */
        state = 2;

        nbits++;
 80ad152:	f109 0901 	add.w	r9, r9, #1
        wbits |= ( ei << ( wsize - nbits ) );
 80ad156:	ebc9 020b 	rsb	r2, r9, fp
 80ad15a:	4093      	lsls	r3, r2

        if( nbits == wsize )
 80ad15c:	45cb      	cmp	fp, r9
         * add ei to current window
         */
        state = 2;

        nbits++;
        wbits |= ( ei << ( wsize - nbits ) );
 80ad15e:	ea48 0803 	orr.w	r8, r8, r3

        if( nbits == wsize )
 80ad162:	d001      	beq.n	80ad168 <mbedtls_mpi_exp_mod+0x31c>
        }

        /*
         * add ei to current window
         */
        state = 2;
 80ad164:	2702      	movs	r7, #2
 80ad166:	e7c6      	b.n	80ad0f6 <mbedtls_mpi_exp_mod+0x2aa>
 80ad168:	2700      	movs	r7, #0
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 80ad16a:	ab0b      	add	r3, sp, #44	; 0x2c
 80ad16c:	9300      	str	r3, [sp, #0]
 80ad16e:	462a      	mov	r2, r5
 80ad170:	4623      	mov	r3, r4
 80ad172:	4631      	mov	r1, r6
 80ad174:	4630      	mov	r0, r6
 80ad176:	f7ff fa33 	bl	80ac5e0 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 80ad17a:	4603      	mov	r3, r0
 80ad17c:	2800      	cmp	r0, #0
 80ad17e:	d158      	bne.n	80ad232 <mbedtls_mpi_exp_mod+0x3e6>
        if( nbits == wsize )
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
 80ad180:	3701      	adds	r7, #1
 80ad182:	45bb      	cmp	fp, r7
 80ad184:	d1f1      	bne.n	80ad16a <mbedtls_mpi_exp_mod+0x31e>
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

            /*
             * X = X * W[wbits] R^-1 mod N
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
 80ad186:	ab0b      	add	r3, sp, #44	; 0x2c
 80ad188:	a814      	add	r0, sp, #80	; 0x50
 80ad18a:	210c      	movs	r1, #12
 80ad18c:	9300      	str	r3, [sp, #0]
 80ad18e:	fb01 0108 	mla	r1, r1, r8, r0
 80ad192:	4623      	mov	r3, r4
 80ad194:	462a      	mov	r2, r5
 80ad196:	4630      	mov	r0, r6
 80ad198:	f7ff fa22 	bl	80ac5e0 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 80ad19c:	4603      	mov	r3, r0
 80ad19e:	2800      	cmp	r0, #0
 80ad1a0:	d147      	bne.n	80ad232 <mbedtls_mpi_exp_mod+0x3e6>

            state--;
 80ad1a2:	2701      	movs	r7, #1
            nbits = 0;
 80ad1a4:	4680      	mov	r8, r0
            wbits = 0;
 80ad1a6:	4681      	mov	r9, r0
 80ad1a8:	e7a5      	b.n	80ad0f6 <mbedtls_mpi_exp_mod+0x2aa>
    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 80ad1aa:	4623      	mov	r3, r4
 80ad1ac:	f8cd a000 	str.w	sl, [sp]
 80ad1b0:	462a      	mov	r2, r5
 80ad1b2:	4631      	mov	r1, r6
 80ad1b4:	4630      	mov	r0, r6
 80ad1b6:	f7ff fa13 	bl	80ac5e0 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 80ad1ba:	4603      	mov	r3, r0
 80ad1bc:	2800      	cmp	r0, #0
 80ad1be:	d138      	bne.n	80ad232 <mbedtls_mpi_exp_mod+0x3e6>

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
 80ad1c0:	9b05      	ldr	r3, [sp, #20]
     */
    for( i = 0; i < nbits; i++ )
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;
 80ad1c2:	ea4f 0848 	mov.w	r8, r8, lsl #1

        if( ( wbits & ( one << wsize ) ) != 0 )
 80ad1c6:	ea18 0f03 	tst.w	r8, r3
 80ad1ca:	d103      	bne.n	80ad1d4 <mbedtls_mpi_exp_mod+0x388>
    }

    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
 80ad1cc:	3701      	adds	r7, #1
 80ad1ce:	454f      	cmp	r7, r9
 80ad1d0:	d1eb      	bne.n	80ad1aa <mbedtls_mpi_exp_mod+0x35e>
 80ad1d2:	e00b      	b.n	80ad1ec <mbedtls_mpi_exp_mod+0x3a0>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
 80ad1d4:	4623      	mov	r3, r4
 80ad1d6:	f8cd a000 	str.w	sl, [sp]
 80ad1da:	462a      	mov	r2, r5
 80ad1dc:	a917      	add	r1, sp, #92	; 0x5c
 80ad1de:	4630      	mov	r0, r6
 80ad1e0:	f7ff f9fe 	bl	80ac5e0 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 80ad1e4:	4603      	mov	r3, r0
 80ad1e6:	2800      	cmp	r0, #0
 80ad1e8:	d0f0      	beq.n	80ad1cc <mbedtls_mpi_exp_mod+0x380>
 80ad1ea:	e022      	b.n	80ad232 <mbedtls_mpi_exp_mod+0x3e6>
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N,
                        mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
 80ad1ec:	2301      	movs	r3, #1
 80ad1ee:	9307      	str	r3, [sp, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
 80ad1f0:	9311      	str	r3, [sp, #68]	; 0x44
 80ad1f2:	9312      	str	r3, [sp, #72]	; 0x48
    U.p = &z;
 80ad1f4:	ab07      	add	r3, sp, #28
 80ad1f6:	9313      	str	r3, [sp, #76]	; 0x4c

    return( mpi_montmul( A, &U, N, mm, T ) );
 80ad1f8:	f8cd a000 	str.w	sl, [sp]
 80ad1fc:	4623      	mov	r3, r4
 80ad1fe:	462a      	mov	r2, r5
 80ad200:	a911      	add	r1, sp, #68	; 0x44
 80ad202:	4630      	mov	r0, r6
 80ad204:	f7ff f9ec 	bl	80ac5e0 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
    }

    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 80ad208:	4603      	mov	r3, r0
 80ad20a:	b990      	cbnz	r0, 80ad232 <mbedtls_mpi_exp_mod+0x3e6>

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
 80ad20c:	9a04      	ldr	r2, [sp, #16]
 80ad20e:	3201      	adds	r2, #1
 80ad210:	d10f      	bne.n	80ad232 <mbedtls_mpi_exp_mod+0x3e6>
 80ad212:	9a02      	ldr	r2, [sp, #8]
 80ad214:	6852      	ldr	r2, [r2, #4]
 80ad216:	b162      	cbz	r2, 80ad232 <mbedtls_mpi_exp_mod+0x3e6>
 80ad218:	9a02      	ldr	r2, [sp, #8]
 80ad21a:	6892      	ldr	r2, [r2, #8]
 80ad21c:	6812      	ldr	r2, [r2, #0]
 80ad21e:	07d2      	lsls	r2, r2, #31
 80ad220:	d507      	bpl.n	80ad232 <mbedtls_mpi_exp_mod+0x3e6>
    {
        X->s = -1;
 80ad222:	9b04      	ldr	r3, [sp, #16]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 80ad224:	4632      	mov	r2, r6
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    {
        X->s = -1;
 80ad226:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 80ad228:	4629      	mov	r1, r5
 80ad22a:	4630      	mov	r0, r6
 80ad22c:	f7ff fb31 	bl	80ac892 <mbedtls_mpi_add_mpi>
 80ad230:	4603      	mov	r3, r0
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 80ad232:	2201      	movs	r2, #1
 80ad234:	f10b 34ff 	add.w	r4, fp, #4294967295
 80ad238:	fa02 f404 	lsl.w	r4, r2, r4
 80ad23c:	fa02 f50b 	lsl.w	r5, r2, fp
        mbedtls_mpi_free( &W[i] );
 80ad240:	260c      	movs	r6, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 80ad242:	42ac      	cmp	r4, r5
 80ad244:	9302      	str	r3, [sp, #8]
 80ad246:	d207      	bcs.n	80ad258 <mbedtls_mpi_exp_mod+0x40c>
        mbedtls_mpi_free( &W[i] );
 80ad248:	ab14      	add	r3, sp, #80	; 0x50
 80ad24a:	fb06 3004 	mla	r0, r6, r4, r3
 80ad24e:	f7fe ff4a 	bl	80ac0e6 <mbedtls_mpi_free>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 80ad252:	3401      	adds	r4, #1
 80ad254:	9b02      	ldr	r3, [sp, #8]
 80ad256:	e7f4      	b.n	80ad242 <mbedtls_mpi_exp_mod+0x3f6>
        mbedtls_mpi_free( &W[i] );

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
 80ad258:	a817      	add	r0, sp, #92	; 0x5c
 80ad25a:	f7fe ff44 	bl	80ac0e6 <mbedtls_mpi_free>
 80ad25e:	a80b      	add	r0, sp, #44	; 0x2c
 80ad260:	f7fe ff41 	bl	80ac0e6 <mbedtls_mpi_free>
 80ad264:	a80e      	add	r0, sp, #56	; 0x38
 80ad266:	f7fe ff3e 	bl	80ac0e6 <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
 80ad26a:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 80ad26e:	9b02      	ldr	r3, [sp, #8]
 80ad270:	b10a      	cbz	r2, 80ad276 <mbedtls_mpi_exp_mod+0x42a>
 80ad272:	6892      	ldr	r2, [r2, #8]
 80ad274:	b922      	cbnz	r2, 80ad280 <mbedtls_mpi_exp_mod+0x434>
        mbedtls_mpi_free( &RR );
 80ad276:	a808      	add	r0, sp, #32
 80ad278:	9302      	str	r3, [sp, #8]
 80ad27a:	f7fe ff34 	bl	80ac0e6 <mbedtls_mpi_free>

    return( ret );
 80ad27e:	9b02      	ldr	r3, [sp, #8]
 80ad280:	4618      	mov	r0, r3
}
 80ad282:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
 80ad286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080ad28a <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80ad28a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80ad28c:	b08b      	sub	sp, #44	; 0x2c
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
 80ad28e:	2300      	movs	r3, #0
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80ad290:	2601      	movs	r6, #1

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80ad292:	4607      	mov	r7, r0
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 80ad294:	a804      	add	r0, sp, #16

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80ad296:	4615      	mov	r5, r2
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80ad298:	9601      	str	r6, [sp, #4]
    X->n = 0;
 80ad29a:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 80ad29c:	9303      	str	r3, [sp, #12]
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80ad29e:	9604      	str	r6, [sp, #16]
    X->n = 0;
 80ad2a0:	9305      	str	r3, [sp, #20]
    X->p = NULL;
 80ad2a2:	9306      	str	r3, [sp, #24]
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80ad2a4:	9607      	str	r6, [sp, #28]
    X->n = 0;
 80ad2a6:	9308      	str	r3, [sp, #32]
    X->p = NULL;
 80ad2a8:	9309      	str	r3, [sp, #36]	; 0x24
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 80ad2aa:	f7fe ff96 	bl	80ac1da <mbedtls_mpi_copy>
 80ad2ae:	4604      	mov	r4, r0
 80ad2b0:	2800      	cmp	r0, #0
 80ad2b2:	d163      	bne.n	80ad37c <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 80ad2b4:	4629      	mov	r1, r5
 80ad2b6:	a807      	add	r0, sp, #28
 80ad2b8:	f7fe ff8f 	bl	80ac1da <mbedtls_mpi_copy>
 80ad2bc:	4604      	mov	r4, r0
 80ad2be:	2800      	cmp	r0, #0
 80ad2c0:	d15c      	bne.n	80ad37c <mbedtls_mpi_gcd+0xf2>

    lz = mbedtls_mpi_lsb( &TA );
 80ad2c2:	a804      	add	r0, sp, #16
 80ad2c4:	f7ff f817 	bl	80ac2f6 <mbedtls_mpi_lsb>
 80ad2c8:	4605      	mov	r5, r0
    lzt = mbedtls_mpi_lsb( &TB );
 80ad2ca:	a807      	add	r0, sp, #28
 80ad2cc:	f7ff f813 	bl	80ac2f6 <mbedtls_mpi_lsb>
 80ad2d0:	4285      	cmp	r5, r0
 80ad2d2:	bf28      	it	cs
 80ad2d4:	4605      	movcs	r5, r0

    if( lzt < lz )
        lz = lzt;

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 80ad2d6:	a804      	add	r0, sp, #16
 80ad2d8:	4629      	mov	r1, r5
 80ad2da:	f7ff f906 	bl	80ac4ea <mbedtls_mpi_shift_r>
 80ad2de:	4604      	mov	r4, r0
 80ad2e0:	2800      	cmp	r0, #0
 80ad2e2:	d14b      	bne.n	80ad37c <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 80ad2e4:	4629      	mov	r1, r5
 80ad2e6:	a807      	add	r0, sp, #28
 80ad2e8:	f7ff f8ff 	bl	80ac4ea <mbedtls_mpi_shift_r>
 80ad2ec:	4604      	mov	r4, r0
 80ad2ee:	2800      	cmp	r0, #0
 80ad2f0:	d144      	bne.n	80ad37c <mbedtls_mpi_gcd+0xf2>

    TA.s = TB.s = 1;
 80ad2f2:	9607      	str	r6, [sp, #28]
 80ad2f4:	9604      	str	r6, [sp, #16]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 80ad2f6:	2100      	movs	r1, #0
 80ad2f8:	a804      	add	r0, sp, #16
 80ad2fa:	f7ff fa1a 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80ad2fe:	2800      	cmp	r0, #0
 80ad300:	d031      	beq.n	80ad366 <mbedtls_mpi_gcd+0xdc>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 80ad302:	a804      	add	r0, sp, #16
 80ad304:	f7fe fff7 	bl	80ac2f6 <mbedtls_mpi_lsb>
 80ad308:	4601      	mov	r1, r0
 80ad30a:	a804      	add	r0, sp, #16
 80ad30c:	f7ff f8ed 	bl	80ac4ea <mbedtls_mpi_shift_r>
 80ad310:	4604      	mov	r4, r0
 80ad312:	2800      	cmp	r0, #0
 80ad314:	d132      	bne.n	80ad37c <mbedtls_mpi_gcd+0xf2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 80ad316:	a807      	add	r0, sp, #28
 80ad318:	f7fe ffed 	bl	80ac2f6 <mbedtls_mpi_lsb>
 80ad31c:	4601      	mov	r1, r0
 80ad31e:	a807      	add	r0, sp, #28
 80ad320:	f7ff f8e3 	bl	80ac4ea <mbedtls_mpi_shift_r>
 80ad324:	4604      	mov	r4, r0
 80ad326:	bb48      	cbnz	r0, 80ad37c <mbedtls_mpi_gcd+0xf2>

        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 80ad328:	a907      	add	r1, sp, #28
 80ad32a:	a804      	add	r0, sp, #16
 80ad32c:	f7ff f9bc 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80ad330:	2800      	cmp	r0, #0
 80ad332:	db09      	blt.n	80ad348 <mbedtls_mpi_gcd+0xbe>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 80ad334:	a904      	add	r1, sp, #16
 80ad336:	aa07      	add	r2, sp, #28
 80ad338:	4608      	mov	r0, r1
 80ad33a:	f7ff fa6a 	bl	80ac812 <mbedtls_mpi_sub_abs>
 80ad33e:	4604      	mov	r4, r0
 80ad340:	b9e0      	cbnz	r0, 80ad37c <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 80ad342:	2101      	movs	r1, #1
 80ad344:	a804      	add	r0, sp, #16
 80ad346:	e008      	b.n	80ad35a <mbedtls_mpi_gcd+0xd0>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 80ad348:	a907      	add	r1, sp, #28
 80ad34a:	aa04      	add	r2, sp, #16
 80ad34c:	4608      	mov	r0, r1
 80ad34e:	f7ff fa60 	bl	80ac812 <mbedtls_mpi_sub_abs>
 80ad352:	4604      	mov	r4, r0
 80ad354:	b990      	cbnz	r0, 80ad37c <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 80ad356:	2101      	movs	r1, #1
 80ad358:	a807      	add	r0, sp, #28
 80ad35a:	f7ff f8c6 	bl	80ac4ea <mbedtls_mpi_shift_r>
 80ad35e:	4604      	mov	r4, r0
 80ad360:	2800      	cmp	r0, #0
 80ad362:	d0c8      	beq.n	80ad2f6 <mbedtls_mpi_gcd+0x6c>
 80ad364:	e00a      	b.n	80ad37c <mbedtls_mpi_gcd+0xf2>
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 80ad366:	4629      	mov	r1, r5
 80ad368:	a807      	add	r0, sp, #28
 80ad36a:	f7ff f86f 	bl	80ac44c <mbedtls_mpi_shift_l>
 80ad36e:	4604      	mov	r4, r0
 80ad370:	b920      	cbnz	r0, 80ad37c <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 80ad372:	a907      	add	r1, sp, #28
 80ad374:	4638      	mov	r0, r7
 80ad376:	f7fe ff30 	bl	80ac1da <mbedtls_mpi_copy>
 80ad37a:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 80ad37c:	a801      	add	r0, sp, #4
 80ad37e:	f7fe feb2 	bl	80ac0e6 <mbedtls_mpi_free>
 80ad382:	a804      	add	r0, sp, #16
 80ad384:	f7fe feaf 	bl	80ac0e6 <mbedtls_mpi_free>
 80ad388:	a807      	add	r0, sp, #28
 80ad38a:	f7fe feac 	bl	80ac0e6 <mbedtls_mpi_free>

    return( ret );
}
 80ad38e:	4620      	mov	r0, r4
 80ad390:	b00b      	add	sp, #44	; 0x2c
 80ad392:	bdf0      	pop	{r4, r5, r6, r7, pc}

080ad394 <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 80ad394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int ret;
    size_t const limbs = CHARS_TO_LIMBS( size );
 80ad398:	f011 0403 	ands.w	r4, r1, #3
 80ad39c:	bf18      	it	ne
 80ad39e:	2401      	movne	r4, #1
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 80ad3a0:	4699      	mov	r9, r3

    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 80ad3a2:	6843      	ldr	r3, [r0, #4]
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
    int ret;
    size_t const limbs = CHARS_TO_LIMBS( size );
 80ad3a4:	eb04 0491 	add.w	r4, r4, r1, lsr #2

    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 80ad3a8:	429c      	cmp	r4, r3
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 80ad3aa:	4606      	mov	r6, r0
 80ad3ac:	460f      	mov	r7, r1
 80ad3ae:	4690      	mov	r8, r2

    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 80ad3b0:	d106      	bne.n	80ad3c0 <mbedtls_mpi_fill_random+0x2c>
    {
        mbedtls_mpi_free( X );
        mbedtls_mpi_init( X );
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 80ad3b2:	2100      	movs	r1, #0
 80ad3b4:	4630      	mov	r0, r6
 80ad3b6:	f7fe ff71 	bl	80ac29c <mbedtls_mpi_lset>
 80ad3ba:	4605      	mov	r5, r0
 80ad3bc:	b9d8      	cbnz	r0, 80ad3f6 <mbedtls_mpi_fill_random+0x62>
 80ad3be:	e00e      	b.n	80ad3de <mbedtls_mpi_fill_random+0x4a>
    MPI_VALIDATE_RET( f_rng != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
    {
        mbedtls_mpi_free( X );
 80ad3c0:	f7fe fe91 	bl	80ac0e6 <mbedtls_mpi_free>
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80ad3c4:	2301      	movs	r3, #1
 80ad3c6:	6033      	str	r3, [r6, #0]
    X->n = 0;
 80ad3c8:	2300      	movs	r3, #0
 80ad3ca:	6073      	str	r3, [r6, #4]
    X->p = NULL;
 80ad3cc:	60b3      	str	r3, [r6, #8]
    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
    {
        mbedtls_mpi_free( X );
        mbedtls_mpi_init( X );
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 80ad3ce:	4621      	mov	r1, r4
 80ad3d0:	4630      	mov	r0, r6
 80ad3d2:	f7fe fe9a 	bl	80ac10a <mbedtls_mpi_grow>
 80ad3d6:	4605      	mov	r5, r0
 80ad3d8:	2800      	cmp	r0, #0
 80ad3da:	d0ea      	beq.n	80ad3b2 <mbedtls_mpi_fill_random+0x1e>
 80ad3dc:	e00b      	b.n	80ad3f6 <mbedtls_mpi_fill_random+0x62>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    Xp = (unsigned char*) X->p;
    f_rng( p_rng, Xp + overhead, size );
 80ad3de:	68b1      	ldr	r1, [r6, #8]
 80ad3e0:	ebc7 0384 	rsb	r3, r7, r4, lsl #2
 80ad3e4:	463a      	mov	r2, r7
 80ad3e6:	4419      	add	r1, r3
 80ad3e8:	4648      	mov	r0, r9
 80ad3ea:	47c0      	blx	r8

static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
{
    mbedtls_mpi_uint *cur_limb_left;
    mbedtls_mpi_uint *cur_limb_right;
    if( limbs == 0 )
 80ad3ec:	b11c      	cbz	r4, 80ad3f6 <mbedtls_mpi_fill_random+0x62>
 80ad3ee:	4621      	mov	r1, r4
 80ad3f0:	68b0      	ldr	r0, [r6, #8]
 80ad3f2:	f7fe fe61 	bl	80ac0b8 <_ZL21mpi_bigendian_to_hostPmj.part.1>

    mpi_bigendian_to_host( X->p, limbs );

cleanup:
    return( ret );
}
 80ad3f6:	4628      	mov	r0, r5
 80ad3f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080ad3fc <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 80ad3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80ad400:	4680      	mov	r8, r0
 80ad402:	b09c      	sub	sp, #112	; 0x70
 80ad404:	460f      	mov	r7, r1
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 80ad406:	4610      	mov	r0, r2
 80ad408:	2101      	movs	r1, #1

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 80ad40a:	4616      	mov	r6, r2
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 80ad40c:	f7ff f991 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80ad410:	2800      	cmp	r0, #0
 80ad412:	f340 814c 	ble.w	80ad6ae <mbedtls_mpi_inv_mod+0x2b2>
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
    X->n = 0;
 80ad416:	2300      	movs	r3, #0
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80ad418:	2501      	movs	r5, #1

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 80ad41a:	4632      	mov	r2, r6
 80ad41c:	4639      	mov	r1, r7
 80ad41e:	a801      	add	r0, sp, #4
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80ad420:	9504      	str	r5, [sp, #16]
    X->n = 0;
 80ad422:	9305      	str	r3, [sp, #20]
    X->p = NULL;
 80ad424:	9306      	str	r3, [sp, #24]
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80ad426:	9507      	str	r5, [sp, #28]
    X->n = 0;
 80ad428:	9308      	str	r3, [sp, #32]
    X->p = NULL;
 80ad42a:	9309      	str	r3, [sp, #36]	; 0x24
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80ad42c:	950a      	str	r5, [sp, #40]	; 0x28
    X->n = 0;
 80ad42e:	930b      	str	r3, [sp, #44]	; 0x2c
    X->p = NULL;
 80ad430:	930c      	str	r3, [sp, #48]	; 0x30
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80ad432:	950d      	str	r5, [sp, #52]	; 0x34
    X->n = 0;
 80ad434:	930e      	str	r3, [sp, #56]	; 0x38
    X->p = NULL;
 80ad436:	930f      	str	r3, [sp, #60]	; 0x3c
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80ad438:	9501      	str	r5, [sp, #4]
    X->n = 0;
 80ad43a:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 80ad43c:	9303      	str	r3, [sp, #12]
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80ad43e:	9510      	str	r5, [sp, #64]	; 0x40
    X->n = 0;
 80ad440:	9311      	str	r3, [sp, #68]	; 0x44
    X->p = NULL;
 80ad442:	9312      	str	r3, [sp, #72]	; 0x48
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80ad444:	9513      	str	r5, [sp, #76]	; 0x4c
    X->n = 0;
 80ad446:	9314      	str	r3, [sp, #80]	; 0x50
    X->p = NULL;
 80ad448:	9315      	str	r3, [sp, #84]	; 0x54
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80ad44a:	9516      	str	r5, [sp, #88]	; 0x58
    X->n = 0;
 80ad44c:	9317      	str	r3, [sp, #92]	; 0x5c
    X->p = NULL;
 80ad44e:	9318      	str	r3, [sp, #96]	; 0x60
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 80ad450:	9519      	str	r5, [sp, #100]	; 0x64
    X->n = 0;
 80ad452:	931a      	str	r3, [sp, #104]	; 0x68
    X->p = NULL;
 80ad454:	931b      	str	r3, [sp, #108]	; 0x6c

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 80ad456:	f7ff ff18 	bl	80ad28a <mbedtls_mpi_gcd>
 80ad45a:	4604      	mov	r4, r0
 80ad45c:	2800      	cmp	r0, #0
 80ad45e:	f040 8109 	bne.w	80ad674 <mbedtls_mpi_inv_mod+0x278>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 80ad462:	4629      	mov	r1, r5
 80ad464:	a801      	add	r0, sp, #4
 80ad466:	f7ff f964 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80ad46a:	2800      	cmp	r0, #0
 80ad46c:	f040 8100 	bne.w	80ad670 <mbedtls_mpi_inv_mod+0x274>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 80ad470:	4632      	mov	r2, r6
 80ad472:	4639      	mov	r1, r7
 80ad474:	a804      	add	r0, sp, #16
 80ad476:	f7ff fcb7 	bl	80acde8 <mbedtls_mpi_mod_mpi>
 80ad47a:	4604      	mov	r4, r0
 80ad47c:	2800      	cmp	r0, #0
 80ad47e:	f040 80f9 	bne.w	80ad674 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 80ad482:	a904      	add	r1, sp, #16
 80ad484:	a807      	add	r0, sp, #28
 80ad486:	f7fe fea8 	bl	80ac1da <mbedtls_mpi_copy>
 80ad48a:	4604      	mov	r4, r0
 80ad48c:	2800      	cmp	r0, #0
 80ad48e:	f040 80f1 	bne.w	80ad674 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 80ad492:	4631      	mov	r1, r6
 80ad494:	a810      	add	r0, sp, #64	; 0x40
 80ad496:	f7fe fea0 	bl	80ac1da <mbedtls_mpi_copy>
 80ad49a:	4604      	mov	r4, r0
 80ad49c:	2800      	cmp	r0, #0
 80ad49e:	f040 80e9 	bne.w	80ad674 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 80ad4a2:	4631      	mov	r1, r6
 80ad4a4:	a813      	add	r0, sp, #76	; 0x4c
 80ad4a6:	f7fe fe98 	bl	80ac1da <mbedtls_mpi_copy>
 80ad4aa:	4604      	mov	r4, r0
 80ad4ac:	2800      	cmp	r0, #0
 80ad4ae:	f040 80e1 	bne.w	80ad674 <mbedtls_mpi_inv_mod+0x278>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 80ad4b2:	4629      	mov	r1, r5
 80ad4b4:	a80a      	add	r0, sp, #40	; 0x28
 80ad4b6:	f7fe fef1 	bl	80ac29c <mbedtls_mpi_lset>
 80ad4ba:	4604      	mov	r4, r0
 80ad4bc:	2800      	cmp	r0, #0
 80ad4be:	f040 80d9 	bne.w	80ad674 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 80ad4c2:	4601      	mov	r1, r0
 80ad4c4:	a80d      	add	r0, sp, #52	; 0x34
 80ad4c6:	f7fe fee9 	bl	80ac29c <mbedtls_mpi_lset>
 80ad4ca:	4604      	mov	r4, r0
 80ad4cc:	2800      	cmp	r0, #0
 80ad4ce:	f040 80d1 	bne.w	80ad674 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 80ad4d2:	4601      	mov	r1, r0
 80ad4d4:	a816      	add	r0, sp, #88	; 0x58
 80ad4d6:	f7fe fee1 	bl	80ac29c <mbedtls_mpi_lset>
 80ad4da:	4604      	mov	r4, r0
 80ad4dc:	2800      	cmp	r0, #0
 80ad4de:	f040 80c9 	bne.w	80ad674 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 80ad4e2:	4629      	mov	r1, r5
 80ad4e4:	a819      	add	r0, sp, #100	; 0x64
 80ad4e6:	f7fe fed9 	bl	80ac29c <mbedtls_mpi_lset>
 80ad4ea:	4604      	mov	r4, r0
 80ad4ec:	2800      	cmp	r0, #0
 80ad4ee:	f040 80c1 	bne.w	80ad674 <mbedtls_mpi_inv_mod+0x278>

    do
    {
        while( ( TU.p[0] & 1 ) == 0 )
 80ad4f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80ad4f4:	681b      	ldr	r3, [r3, #0]
 80ad4f6:	07dd      	lsls	r5, r3, #31
 80ad4f8:	d44c      	bmi.n	80ad594 <mbedtls_mpi_inv_mod+0x198>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 80ad4fa:	2101      	movs	r1, #1
 80ad4fc:	a807      	add	r0, sp, #28
 80ad4fe:	f7fe fff4 	bl	80ac4ea <mbedtls_mpi_shift_r>
 80ad502:	4604      	mov	r4, r0
 80ad504:	2800      	cmp	r0, #0
 80ad506:	f040 80b5 	bne.w	80ad674 <mbedtls_mpi_inv_mod+0x278>

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 80ad50a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80ad50c:	681b      	ldr	r3, [r3, #0]
 80ad50e:	07dc      	lsls	r4, r3, #31
 80ad510:	d410      	bmi.n	80ad534 <mbedtls_mpi_inv_mod+0x138>
 80ad512:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80ad514:	681b      	ldr	r3, [r3, #0]
 80ad516:	07d8      	lsls	r0, r3, #31
 80ad518:	d40c      	bmi.n	80ad534 <mbedtls_mpi_inv_mod+0x138>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 80ad51a:	2101      	movs	r1, #1
 80ad51c:	a80a      	add	r0, sp, #40	; 0x28
 80ad51e:	f7fe ffe4 	bl	80ac4ea <mbedtls_mpi_shift_r>
 80ad522:	4604      	mov	r4, r0
 80ad524:	2800      	cmp	r0, #0
 80ad526:	f040 80a5 	bne.w	80ad674 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 80ad52a:	2101      	movs	r1, #1
 80ad52c:	a80d      	add	r0, sp, #52	; 0x34
 80ad52e:	f7fe ffdc 	bl	80ac4ea <mbedtls_mpi_shift_r>
 80ad532:	e7da      	b.n	80ad4ea <mbedtls_mpi_inv_mod+0xee>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 80ad534:	a90a      	add	r1, sp, #40	; 0x28
 80ad536:	aa10      	add	r2, sp, #64	; 0x40
 80ad538:	4608      	mov	r0, r1
 80ad53a:	f7ff f9aa 	bl	80ac892 <mbedtls_mpi_add_mpi>
 80ad53e:	4604      	mov	r4, r0
 80ad540:	2800      	cmp	r0, #0
 80ad542:	f040 8097 	bne.w	80ad674 <mbedtls_mpi_inv_mod+0x278>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 80ad546:	a90d      	add	r1, sp, #52	; 0x34
 80ad548:	aa04      	add	r2, sp, #16
 80ad54a:	4608      	mov	r0, r1
 80ad54c:	f7ff f9c2 	bl	80ac8d4 <mbedtls_mpi_sub_mpi>
 80ad550:	4604      	mov	r4, r0
 80ad552:	2800      	cmp	r0, #0
 80ad554:	d0e1      	beq.n	80ad51a <mbedtls_mpi_inv_mod+0x11e>
 80ad556:	e08d      	b.n	80ad674 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
        }

        while( ( TV.p[0] & 1 ) == 0 )
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 80ad558:	2101      	movs	r1, #1
 80ad55a:	a813      	add	r0, sp, #76	; 0x4c
 80ad55c:	f7fe ffc5 	bl	80ac4ea <mbedtls_mpi_shift_r>
 80ad560:	4604      	mov	r4, r0
 80ad562:	2800      	cmp	r0, #0
 80ad564:	f040 8086 	bne.w	80ad674 <mbedtls_mpi_inv_mod+0x278>

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 80ad568:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80ad56a:	681b      	ldr	r3, [r3, #0]
 80ad56c:	07da      	lsls	r2, r3, #31
 80ad56e:	d416      	bmi.n	80ad59e <mbedtls_mpi_inv_mod+0x1a2>
 80ad570:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80ad572:	681b      	ldr	r3, [r3, #0]
 80ad574:	07db      	lsls	r3, r3, #31
 80ad576:	d412      	bmi.n	80ad59e <mbedtls_mpi_inv_mod+0x1a2>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 80ad578:	2101      	movs	r1, #1
 80ad57a:	a816      	add	r0, sp, #88	; 0x58
 80ad57c:	f7fe ffb5 	bl	80ac4ea <mbedtls_mpi_shift_r>
 80ad580:	4604      	mov	r4, r0
 80ad582:	2800      	cmp	r0, #0
 80ad584:	d176      	bne.n	80ad674 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 80ad586:	2101      	movs	r1, #1
 80ad588:	a819      	add	r0, sp, #100	; 0x64
 80ad58a:	f7fe ffae 	bl	80ac4ea <mbedtls_mpi_shift_r>
 80ad58e:	4604      	mov	r4, r0
 80ad590:	2800      	cmp	r0, #0
 80ad592:	d16f      	bne.n	80ad674 <mbedtls_mpi_inv_mod+0x278>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
        }

        while( ( TV.p[0] & 1 ) == 0 )
 80ad594:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80ad596:	681b      	ldr	r3, [r3, #0]
 80ad598:	07d9      	lsls	r1, r3, #31
 80ad59a:	d411      	bmi.n	80ad5c0 <mbedtls_mpi_inv_mod+0x1c4>
 80ad59c:	e7dc      	b.n	80ad558 <mbedtls_mpi_inv_mod+0x15c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 80ad59e:	a916      	add	r1, sp, #88	; 0x58
 80ad5a0:	aa10      	add	r2, sp, #64	; 0x40
 80ad5a2:	4608      	mov	r0, r1
 80ad5a4:	f7ff f975 	bl	80ac892 <mbedtls_mpi_add_mpi>
 80ad5a8:	4604      	mov	r4, r0
 80ad5aa:	2800      	cmp	r0, #0
 80ad5ac:	d162      	bne.n	80ad674 <mbedtls_mpi_inv_mod+0x278>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 80ad5ae:	a919      	add	r1, sp, #100	; 0x64
 80ad5b0:	aa04      	add	r2, sp, #16
 80ad5b2:	4608      	mov	r0, r1
 80ad5b4:	f7ff f98e 	bl	80ac8d4 <mbedtls_mpi_sub_mpi>
 80ad5b8:	4604      	mov	r4, r0
 80ad5ba:	2800      	cmp	r0, #0
 80ad5bc:	d0dc      	beq.n	80ad578 <mbedtls_mpi_inv_mod+0x17c>
 80ad5be:	e059      	b.n	80ad674 <mbedtls_mpi_inv_mod+0x278>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
        }

        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 80ad5c0:	a913      	add	r1, sp, #76	; 0x4c
 80ad5c2:	a807      	add	r0, sp, #28
 80ad5c4:	f7ff f870 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80ad5c8:	2800      	cmp	r0, #0
 80ad5ca:	db1f      	blt.n	80ad60c <mbedtls_mpi_inv_mod+0x210>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 80ad5cc:	a907      	add	r1, sp, #28
 80ad5ce:	aa13      	add	r2, sp, #76	; 0x4c
 80ad5d0:	4608      	mov	r0, r1
 80ad5d2:	f7ff f97f 	bl	80ac8d4 <mbedtls_mpi_sub_mpi>
 80ad5d6:	4604      	mov	r4, r0
 80ad5d8:	2800      	cmp	r0, #0
 80ad5da:	d14b      	bne.n	80ad674 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 80ad5dc:	a90a      	add	r1, sp, #40	; 0x28
 80ad5de:	aa16      	add	r2, sp, #88	; 0x58
 80ad5e0:	4608      	mov	r0, r1
 80ad5e2:	f7ff f977 	bl	80ac8d4 <mbedtls_mpi_sub_mpi>
 80ad5e6:	4604      	mov	r4, r0
 80ad5e8:	2800      	cmp	r0, #0
 80ad5ea:	d143      	bne.n	80ad674 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 80ad5ec:	aa19      	add	r2, sp, #100	; 0x64
 80ad5ee:	a90d      	add	r1, sp, #52	; 0x34
 80ad5f0:	4608      	mov	r0, r1
 80ad5f2:	f7ff f96f 	bl	80ac8d4 <mbedtls_mpi_sub_mpi>
 80ad5f6:	4604      	mov	r4, r0
 80ad5f8:	2800      	cmp	r0, #0
 80ad5fa:	d13b      	bne.n	80ad674 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 80ad5fc:	2100      	movs	r1, #0
 80ad5fe:	a807      	add	r0, sp, #28
 80ad600:	f7ff f897 	bl	80ac732 <mbedtls_mpi_cmp_int>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );

    do
 80ad604:	2800      	cmp	r0, #0
 80ad606:	f47f af74 	bne.w	80ad4f2 <mbedtls_mpi_inv_mod+0xf6>
 80ad60a:	e017      	b.n	80ad63c <mbedtls_mpi_inv_mod+0x240>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 80ad60c:	a913      	add	r1, sp, #76	; 0x4c
 80ad60e:	aa07      	add	r2, sp, #28
 80ad610:	4608      	mov	r0, r1
 80ad612:	f7ff f95f 	bl	80ac8d4 <mbedtls_mpi_sub_mpi>
 80ad616:	4604      	mov	r4, r0
 80ad618:	bb60      	cbnz	r0, 80ad674 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 80ad61a:	a916      	add	r1, sp, #88	; 0x58
 80ad61c:	aa0a      	add	r2, sp, #40	; 0x28
 80ad61e:	4608      	mov	r0, r1
 80ad620:	f7ff f958 	bl	80ac8d4 <mbedtls_mpi_sub_mpi>
 80ad624:	4604      	mov	r4, r0
 80ad626:	bb28      	cbnz	r0, 80ad674 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 80ad628:	aa0d      	add	r2, sp, #52	; 0x34
 80ad62a:	a919      	add	r1, sp, #100	; 0x64
 80ad62c:	e7e0      	b.n	80ad5f0 <mbedtls_mpi_inv_mod+0x1f4>
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 80ad62e:	a916      	add	r1, sp, #88	; 0x58
 80ad630:	4632      	mov	r2, r6
 80ad632:	4608      	mov	r0, r1
 80ad634:	f7ff f92d 	bl	80ac892 <mbedtls_mpi_add_mpi>
 80ad638:	4604      	mov	r4, r0
 80ad63a:	b9d8      	cbnz	r0, 80ad674 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 80ad63c:	2100      	movs	r1, #0
 80ad63e:	a816      	add	r0, sp, #88	; 0x58
 80ad640:	f7ff f877 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80ad644:	2800      	cmp	r0, #0
 80ad646:	dbf2      	blt.n	80ad62e <mbedtls_mpi_inv_mod+0x232>
 80ad648:	e006      	b.n	80ad658 <mbedtls_mpi_inv_mod+0x25c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 80ad64a:	a916      	add	r1, sp, #88	; 0x58
 80ad64c:	4632      	mov	r2, r6
 80ad64e:	4608      	mov	r0, r1
 80ad650:	f7ff f940 	bl	80ac8d4 <mbedtls_mpi_sub_mpi>
 80ad654:	4604      	mov	r4, r0
 80ad656:	b968      	cbnz	r0, 80ad674 <mbedtls_mpi_inv_mod+0x278>
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 80ad658:	4631      	mov	r1, r6
 80ad65a:	a816      	add	r0, sp, #88	; 0x58
 80ad65c:	f7ff f824 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
 80ad660:	2800      	cmp	r0, #0
 80ad662:	daf2      	bge.n	80ad64a <mbedtls_mpi_inv_mod+0x24e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 80ad664:	a916      	add	r1, sp, #88	; 0x58
 80ad666:	4640      	mov	r0, r8
 80ad668:	f7fe fdb7 	bl	80ac1da <mbedtls_mpi_copy>
 80ad66c:	4604      	mov	r4, r0
 80ad66e:	e001      	b.n	80ad674 <mbedtls_mpi_inv_mod+0x278>

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 80ad670:	f06f 040d 	mvn.w	r4, #13

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );

cleanup:

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 80ad674:	a804      	add	r0, sp, #16
 80ad676:	f7fe fd36 	bl	80ac0e6 <mbedtls_mpi_free>
 80ad67a:	a807      	add	r0, sp, #28
 80ad67c:	f7fe fd33 	bl	80ac0e6 <mbedtls_mpi_free>
 80ad680:	a80a      	add	r0, sp, #40	; 0x28
 80ad682:	f7fe fd30 	bl	80ac0e6 <mbedtls_mpi_free>
 80ad686:	a80d      	add	r0, sp, #52	; 0x34
 80ad688:	f7fe fd2d 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 80ad68c:	a801      	add	r0, sp, #4
 80ad68e:	f7fe fd2a 	bl	80ac0e6 <mbedtls_mpi_free>
 80ad692:	a810      	add	r0, sp, #64	; 0x40
 80ad694:	f7fe fd27 	bl	80ac0e6 <mbedtls_mpi_free>
 80ad698:	a813      	add	r0, sp, #76	; 0x4c
 80ad69a:	f7fe fd24 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 80ad69e:	a816      	add	r0, sp, #88	; 0x58
 80ad6a0:	f7fe fd21 	bl	80ac0e6 <mbedtls_mpi_free>
 80ad6a4:	a819      	add	r0, sp, #100	; 0x64
 80ad6a6:	f7fe fd1e 	bl	80ac0e6 <mbedtls_mpi_free>

    return( ret );
 80ad6aa:	4620      	mov	r0, r4
 80ad6ac:	e001      	b.n	80ad6b2 <mbedtls_mpi_inv_mod+0x2b6>
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80ad6ae:	f06f 0003 	mvn.w	r0, #3
    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );

    return( ret );
}
 80ad6b2:	b01c      	add	sp, #112	; 0x70
 80ad6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080ad6b8 <_ZL14aes_gen_tablesv>:
#define MUL(x,y) ( ( (x) && (y) ) ? pow[(log[(x)]+log[(y)]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 80ad6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80ad6bc:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 80ad6c0:	2301      	movs	r3, #1
 80ad6c2:	2200      	movs	r2, #0
    {
        pow[i] = x;
        log[x] = i;
 80ad6c4:	f50d 6082 	add.w	r0, sp, #1040	; 0x410
    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
 80ad6c8:	a904      	add	r1, sp, #16
 80ad6ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 80ad6ce:	f013 0180 	ands.w	r1, r3, #128	; 0x80
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
        log[x] = i;
 80ad6d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 80ad6d6:	bf18      	it	ne
 80ad6d8:	211b      	movne	r1, #27
 80ad6da:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 80ad6de:	3201      	adds	r2, #1
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 80ad6e0:	404b      	eors	r3, r1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 80ad6e2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 80ad6e6:	b2db      	uxtb	r3, r3
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 80ad6e8:	d1ee      	bne.n	80ad6c8 <_ZL14aes_gen_tablesv+0x10>
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 80ad6ea:	4c66      	ldr	r4, [pc, #408]	; (80ad884 <_ZL14aes_gen_tablesv+0x1cc>)
 80ad6ec:	2301      	movs	r3, #1
 80ad6ee:	2200      	movs	r2, #0
        x = XTIME( x ) & 0xFF;
 80ad6f0:	f013 0180 	ands.w	r1, r3, #128	; 0x80
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 80ad6f4:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        x = XTIME( x ) & 0xFF;
 80ad6f8:	bf18      	it	ne
 80ad6fa:	211b      	movne	r1, #27
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 80ad6fc:	3201      	adds	r2, #1
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
 80ad6fe:	ea81 0343 	eor.w	r3, r1, r3, lsl #1
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 80ad702:	2a0a      	cmp	r2, #10
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
 80ad704:	b2db      	uxtb	r3, r3
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 80ad706:	d1f3      	bne.n	80ad6f0 <_ZL14aes_gen_tablesv+0x38>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 80ad708:	4e5f      	ldr	r6, [pc, #380]	; (80ad888 <_ZL14aes_gen_tablesv+0x1d0>)
 80ad70a:	2363      	movs	r3, #99	; 0x63
    RSb[0x63] = 0x00;
 80ad70c:	4d5f      	ldr	r5, [pc, #380]	; (80ad88c <_ZL14aes_gen_tablesv+0x1d4>)
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 80ad70e:	7033      	strb	r3, [r6, #0]
    RSb[0x63] = 0x00;
 80ad710:	2300      	movs	r3, #0
 80ad712:	f885 3063 	strb.w	r3, [r5, #99]	; 0x63

    for( i = 1; i < 256; i++ )
 80ad716:	2401      	movs	r4, #1
    {
        x = pow[255 - log[i]];
 80ad718:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 80ad71c:	aa04      	add	r2, sp, #16
 80ad71e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80ad722:	f852 e023 	ldr.w	lr, [r2, r3, lsl #2]

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80ad726:	ea4f 11ee 	mov.w	r1, lr, asr #7
 80ad72a:	ea41 014e 	orr.w	r1, r1, lr, lsl #1
 80ad72e:	b2c9      	uxtb	r1, r1
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80ad730:	11ca      	asrs	r2, r1, #7
 80ad732:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80ad736:	b2d2      	uxtb	r2, r2
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80ad738:	11d3      	asrs	r3, r2, #7
 80ad73a:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80ad73e:	b2db      	uxtb	r3, r3
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y ^ 0x63;
 80ad740:	f08e 0e63 	eor.w	lr, lr, #99	; 0x63
        x = pow[255 - log[i]];

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80ad744:	11df      	asrs	r7, r3, #7
        x ^= y ^ 0x63;
 80ad746:	ea8e 0101 	eor.w	r1, lr, r1
        x = pow[255 - log[i]];

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80ad74a:	ea47 0743 	orr.w	r7, r7, r3, lsl #1
        x ^= y ^ 0x63;
 80ad74e:	404a      	eors	r2, r1
 80ad750:	4053      	eors	r3, r2
 80ad752:	b2fa      	uxtb	r2, r7
 80ad754:	4053      	eors	r3, r2

        FSb[i] = (unsigned char) x;
 80ad756:	5533      	strb	r3, [r6, r4]
        RSb[x] = (unsigned char) i;
 80ad758:	54ec      	strb	r4, [r5, r3]
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
    RSb[0x63] = 0x00;

    for( i = 1; i < 256; i++ )
 80ad75a:	3401      	adds	r4, #1
 80ad75c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80ad760:	d1da      	bne.n	80ad718 <_ZL14aes_gen_tablesv+0x60>
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80ad762:	6b83      	ldr	r3, [r0, #56]	; 0x38
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80ad764:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80ad766:	9301      	str	r3, [sp, #4]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80ad768:	6a43      	ldr	r3, [r0, #36]	; 0x24
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
 80ad76a:	f8df e11c 	ldr.w	lr, [pc, #284]	; 80ad888 <_ZL14aes_gen_tablesv+0x1d0>
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80ad76e:	9302      	str	r3, [sp, #8]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80ad770:	6b43      	ldr	r3, [r0, #52]	; 0x34
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
                 ( (uint32_t) z << 24 );
 80ad772:	f8df c12c 	ldr.w	ip, [pc, #300]	; 80ad8a0 <_ZL14aes_gen_tablesv+0x1e8>

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8( FT0[i] );
 80ad776:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80ad8a4 <_ZL14aes_gen_tablesv+0x1ec>
        FT2[i] = ROTL8( FT1[i] );
 80ad77a:	f8df 912c 	ldr.w	r9, [pc, #300]	; 80ad8a8 <_ZL14aes_gen_tablesv+0x1f0>
        FT3[i] = ROTL8( FT2[i] );
 80ad77e:	f8df a12c 	ldr.w	sl, [pc, #300]	; 80ad8ac <_ZL14aes_gen_tablesv+0x1f4>
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];
 80ad782:	f8df b108 	ldr.w	fp, [pc, #264]	; 80ad88c <_ZL14aes_gen_tablesv+0x1d4>

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80ad786:	9303      	str	r3, [sp, #12]
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80ad788:	2200      	movs	r2, #0
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
 80ad78a:	f812 000e 	ldrb.w	r0, [r2, lr]
 80ad78e:	0094      	lsls	r4, r2, #2
        y = XTIME( x ) & 0xFF;
 80ad790:	f010 0f80 	tst.w	r0, #128	; 0x80
 80ad794:	bf14      	ite	ne
 80ad796:	211b      	movne	r1, #27
 80ad798:	2100      	moveq	r1, #0
 80ad79a:	ea81 0140 	eor.w	r1, r1, r0, lsl #1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
 80ad79e:	0403      	lsls	r3, r0, #16
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
        y = XTIME( x ) & 0xFF;
 80ad7a0:	b2c9      	uxtb	r1, r1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
 80ad7a2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80ad7a6:	404b      	eors	r3, r1
 80ad7a8:	4041      	eors	r1, r0
 80ad7aa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                 ( (uint32_t) z << 24 );
 80ad7ae:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8( FT0[i] );
 80ad7b2:	ea4f 6333 	mov.w	r3, r3, ror #24
 80ad7b6:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 80ad7ba:	ea4f 6333 	mov.w	r3, r3, ror #24
 80ad7be:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
 80ad7c2:	ea4f 6333 	mov.w	r3, r3, ror #24
 80ad7c6:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];
 80ad7ca:	f81b 3002 	ldrb.w	r3, [fp, r2]

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80ad7ce:	b1d3      	cbz	r3, 80ad806 <_ZL14aes_gen_tablesv+0x14e>
 80ad7d0:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 80ad7d4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80ad7d8:	9801      	ldr	r0, [sp, #4]
 80ad7da:	1845      	adds	r5, r0, r1
 80ad7dc:	20ff      	movs	r0, #255	; 0xff
 80ad7de:	fb95 f6f0 	sdiv	r6, r5, r0
 80ad7e2:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 80ad7e6:	1bae      	subs	r6, r5, r6
 80ad7e8:	ad04      	add	r5, sp, #16
 80ad7ea:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80ad7ee:	9e02      	ldr	r6, [sp, #8]
 80ad7f0:	4431      	add	r1, r6
 80ad7f2:	fb91 f0f0 	sdiv	r0, r1, r0
 80ad7f6:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 80ad7fa:	1a09      	subs	r1, r1, r0
 80ad7fc:	a804      	add	r0, sp, #16
 80ad7fe:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80ad802:	0209      	lsls	r1, r1, #8
 80ad804:	e001      	b.n	80ad80a <_ZL14aes_gen_tablesv+0x152>
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80ad806:	461d      	mov	r5, r3
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80ad808:	4619      	mov	r1, r3
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80ad80a:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80ad80c:	b183      	cbz	r3, 80ad830 <_ZL14aes_gen_tablesv+0x178>
 80ad80e:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 80ad812:	9803      	ldr	r0, [sp, #12]
 80ad814:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80ad818:	4401      	add	r1, r0
 80ad81a:	20ff      	movs	r0, #255	; 0xff
 80ad81c:	fb91 f0f0 	sdiv	r0, r1, r0
 80ad820:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 80ad824:	1a08      	subs	r0, r1, r0
 80ad826:	a904      	add	r1, sp, #16
 80ad828:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80ad82c:	0409      	lsls	r1, r1, #16
 80ad82e:	e000      	b.n	80ad832 <_ZL14aes_gen_tablesv+0x17a>
 80ad830:	4619      	mov	r1, r3
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80ad832:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80ad834:	b173      	cbz	r3, 80ad854 <_ZL14aes_gen_tablesv+0x19c>
 80ad836:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 80ad83a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80ad83e:	21ff      	movs	r1, #255	; 0xff
 80ad840:	443b      	add	r3, r7
 80ad842:	fb93 f1f1 	sdiv	r1, r3, r1
 80ad846:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 80ad84a:	1a59      	subs	r1, r3, r1
 80ad84c:	ab04      	add	r3, sp, #16
 80ad84e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80ad852:	061b      	lsls	r3, r3, #24

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80ad854:	405d      	eors	r5, r3
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80ad856:	4b0e      	ldr	r3, [pc, #56]	; (80ad890 <_ZL14aes_gen_tablesv+0x1d8>)
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 80ad858:	3201      	adds	r2, #1
        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80ad85a:	50e5      	str	r5, [r4, r3]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
 80ad85c:	4b0d      	ldr	r3, [pc, #52]	; (80ad894 <_ZL14aes_gen_tablesv+0x1dc>)
 80ad85e:	ea4f 6535 	mov.w	r5, r5, ror #24
 80ad862:	50e5      	str	r5, [r4, r3]
        RT2[i] = ROTL8( RT1[i] );
 80ad864:	4b0c      	ldr	r3, [pc, #48]	; (80ad898 <_ZL14aes_gen_tablesv+0x1e0>)
 80ad866:	ea4f 6535 	mov.w	r5, r5, ror #24
 80ad86a:	50e5      	str	r5, [r4, r3]
        RT3[i] = ROTL8( RT2[i] );
 80ad86c:	4b0b      	ldr	r3, [pc, #44]	; (80ad89c <_ZL14aes_gen_tablesv+0x1e4>)
 80ad86e:	ea4f 6535 	mov.w	r5, r5, ror #24
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 80ad872:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
 80ad876:	50e5      	str	r5, [r4, r3]
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 80ad878:	d187      	bne.n	80ad78a <_ZL14aes_gen_tablesv+0xd2>
        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */
    }
}
 80ad87a:	f60d 0d14 	addw	sp, sp, #2068	; 0x814
 80ad87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80ad882:	bf00      	nop
 80ad884:	200033a4 	.word	0x200033a4
 80ad888:	200022a4 	.word	0x200022a4
 80ad88c:	200021a4 	.word	0x200021a4
 80ad890:	200027a4 	.word	0x200027a4
 80ad894:	20002ba4 	.word	0x20002ba4
 80ad898:	20002fa4 	.word	0x20002fa4
 80ad89c:	200023a4 	.word	0x200023a4
 80ad8a0:	200011a4 	.word	0x200011a4
 80ad8a4:	200015a4 	.word	0x200015a4
 80ad8a8:	200019a4 	.word	0x200019a4
 80ad8ac:	20001da4 	.word	0x20001da4

080ad8b0 <mbedtls_aes_init>:

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 80ad8b0:	f44f 728c 	mov.w	r2, #280	; 0x118
 80ad8b4:	2100      	movs	r1, #0
 80ad8b6:	f004 bfc4 	b.w	80b2842 <memset>

080ad8ba <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
 80ad8ba:	b118      	cbz	r0, 80ad8c4 <mbedtls_aes_free+0xa>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 80ad8bc:	f44f 718c 	mov.w	r1, #280	; 0x118
 80ad8c0:	f7f8 bda6 	b.w	80a6410 <mbedtls_platform_zeroize>
 80ad8c4:	4770      	bx	lr
	...

080ad8c8 <mbedtls_aes_setkey_enc>:
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 80ad8c8:	2ac0      	cmp	r2, #192	; 0xc0
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 80ad8ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80ad8cc:	4604      	mov	r4, r0
 80ad8ce:	460f      	mov	r7, r1
 80ad8d0:	4615      	mov	r5, r2
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 80ad8d2:	d007      	beq.n	80ad8e4 <mbedtls_aes_setkey_enc+0x1c>
 80ad8d4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80ad8d8:	d006      	beq.n	80ad8e8 <mbedtls_aes_setkey_enc+0x20>
 80ad8da:	2a80      	cmp	r2, #128	; 0x80
 80ad8dc:	f040 80e4 	bne.w	80adaa8 <mbedtls_aes_setkey_enc+0x1e0>
    {
        case 128: ctx->nr = 10; break;
 80ad8e0:	230a      	movs	r3, #10
 80ad8e2:	e002      	b.n	80ad8ea <mbedtls_aes_setkey_enc+0x22>
        case 192: ctx->nr = 12; break;
 80ad8e4:	230c      	movs	r3, #12
 80ad8e6:	e000      	b.n	80ad8ea <mbedtls_aes_setkey_enc+0x22>
        case 256: ctx->nr = 14; break;
 80ad8e8:	230e      	movs	r3, #14
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 80ad8ea:	4e72      	ldr	r6, [pc, #456]	; (80adab4 <mbedtls_aes_setkey_enc+0x1ec>)

    switch( keybits )
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
 80ad8ec:	6023      	str	r3, [r4, #0]
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 80ad8ee:	6833      	ldr	r3, [r6, #0]
 80ad8f0:	b91b      	cbnz	r3, 80ad8fa <mbedtls_aes_setkey_enc+0x32>
    {
        aes_gen_tables();
 80ad8f2:	f7ff fee1 	bl	80ad6b8 <_ZL14aes_gen_tablesv>
        aes_init_done = 1;
 80ad8f6:	2301      	movs	r3, #1
 80ad8f8:	6033      	str	r3, [r6, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 80ad8fa:	f104 0308 	add.w	r3, r4, #8
 80ad8fe:	6063      	str	r3, [r4, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 80ad900:	096d      	lsrs	r5, r5, #5
 80ad902:	2000      	movs	r0, #0
 80ad904:	42a8      	cmp	r0, r5
 80ad906:	d010      	beq.n	80ad92a <mbedtls_aes_setkey_enc+0x62>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 80ad908:	eb07 0180 	add.w	r1, r7, r0, lsl #2
 80ad90c:	788a      	ldrb	r2, [r1, #2]
 80ad90e:	784e      	ldrb	r6, [r1, #1]
 80ad910:	0412      	lsls	r2, r2, #16
 80ad912:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 80ad916:	f817 6020 	ldrb.w	r6, [r7, r0, lsl #2]
 80ad91a:	78c9      	ldrb	r1, [r1, #3]
 80ad91c:	4332      	orrs	r2, r6
 80ad91e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80ad922:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 80ad926:	3001      	adds	r0, #1
 80ad928:	e7ec      	b.n	80ad904 <mbedtls_aes_setkey_enc+0x3c>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 80ad92a:	6822      	ldr	r2, [r4, #0]
 80ad92c:	2a0c      	cmp	r2, #12
 80ad92e:	d031      	beq.n	80ad994 <mbedtls_aes_setkey_enc+0xcc>
 80ad930:	2a0e      	cmp	r2, #14
 80ad932:	d068      	beq.n	80ada06 <mbedtls_aes_setkey_enc+0x13e>
 80ad934:	2a0a      	cmp	r2, #10
 80ad936:	f040 80ba 	bne.w	80adaae <mbedtls_aes_setkey_enc+0x1e6>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 80ad93a:	4f5f      	ldr	r7, [pc, #380]	; (80adab8 <mbedtls_aes_setkey_enc+0x1f0>)
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 80ad93c:	4e5f      	ldr	r6, [pc, #380]	; (80adabc <mbedtls_aes_setkey_enc+0x1f4>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 80ad93e:	2500      	movs	r5, #0
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 80ad940:	68dc      	ldr	r4, [r3, #12]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80ad942:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 80ad946:	681a      	ldr	r2, [r3, #0]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 80ad948:	3501      	adds	r5, #1
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80ad94a:	4051      	eors	r1, r2
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 80ad94c:	f3c4 2207 	ubfx	r2, r4, #8, #8
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80ad950:	5cb0      	ldrb	r0, [r6, r2]
 80ad952:	0e22      	lsrs	r2, r4, #24
 80ad954:	5cb2      	ldrb	r2, [r6, r2]
 80ad956:	4041      	eors	r1, r0
 80ad958:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 80ad95c:	b2e2      	uxtb	r2, r4
            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80ad95e:	5cb2      	ldrb	r2, [r6, r2]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 80ad960:	2d0a      	cmp	r5, #10
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80ad962:	ea81 6102 	eor.w	r1, r1, r2, lsl #24

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 80ad966:	f3c4 4207 	ubfx	r2, r4, #16, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80ad96a:	5cb2      	ldrb	r2, [r6, r2]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 80ad96c:	f103 0310 	add.w	r3, r3, #16
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80ad970:	ea81 2202 	eor.w	r2, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
 80ad974:	f853 1c0c 	ldr.w	r1, [r3, #-12]
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 80ad978:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 80ad97a:	ea82 0201 	eor.w	r2, r2, r1
                RK[6]  = RK[2] ^ RK[5];
 80ad97e:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
 80ad982:	605a      	str	r2, [r3, #4]
                RK[6]  = RK[2] ^ RK[5];
 80ad984:	ea82 0201 	eor.w	r2, r2, r1
 80ad988:	609a      	str	r2, [r3, #8]
                RK[7]  = RK[3] ^ RK[6];
 80ad98a:	ea82 0204 	eor.w	r2, r2, r4
 80ad98e:	60da      	str	r2, [r3, #12]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 80ad990:	d1d6      	bne.n	80ad940 <mbedtls_aes_setkey_enc+0x78>
 80ad992:	e08c      	b.n	80adaae <mbedtls_aes_setkey_enc+0x1e6>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 80ad994:	4e48      	ldr	r6, [pc, #288]	; (80adab8 <mbedtls_aes_setkey_enc+0x1f0>)
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 80ad996:	4d49      	ldr	r5, [pc, #292]	; (80adabc <mbedtls_aes_setkey_enc+0x1f4>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 80ad998:	2400      	movs	r4, #0
            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80ad99a:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 80ad99e:	6958      	ldr	r0, [r3, #20]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80ad9a0:	681a      	ldr	r2, [r3, #0]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 80ad9a2:	3401      	adds	r4, #1
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80ad9a4:	404a      	eors	r2, r1
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 80ad9a6:	f3c0 2107 	ubfx	r1, r0, #8, #8
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80ad9aa:	5c69      	ldrb	r1, [r5, r1]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 80ad9ac:	2c08      	cmp	r4, #8
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80ad9ae:	ea82 0201 	eor.w	r2, r2, r1
 80ad9b2:	ea4f 6110 	mov.w	r1, r0, lsr #24
 80ad9b6:	5c69      	ldrb	r1, [r5, r1]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 80ad9b8:	f103 0318 	add.w	r3, r3, #24
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80ad9bc:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 80ad9c0:	b2c1      	uxtb	r1, r0
            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80ad9c2:	5c69      	ldrb	r1, [r5, r1]
 80ad9c4:	ea82 6201 	eor.w	r2, r2, r1, lsl #24

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 80ad9c8:	f3c0 4107 	ubfx	r1, r0, #16, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80ad9cc:	5c69      	ldrb	r1, [r5, r1]
 80ad9ce:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
 80ad9d2:	f853 1c14 	ldr.w	r1, [r3, #-20]
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 80ad9d6:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 80ad9d8:	ea82 0201 	eor.w	r2, r2, r1
                RK[8]  = RK[2] ^ RK[7];
 80ad9dc:	f853 1c10 	ldr.w	r1, [r3, #-16]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
 80ad9e0:	605a      	str	r2, [r3, #4]
                RK[8]  = RK[2] ^ RK[7];
 80ad9e2:	ea82 0201 	eor.w	r2, r2, r1
                RK[9]  = RK[3] ^ RK[8];
 80ad9e6:	f853 1c0c 	ldr.w	r1, [r3, #-12]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
 80ad9ea:	609a      	str	r2, [r3, #8]
                RK[9]  = RK[3] ^ RK[8];
 80ad9ec:	ea82 0201 	eor.w	r2, r2, r1
                RK[10] = RK[4] ^ RK[9];
 80ad9f0:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
                RK[9]  = RK[3] ^ RK[8];
 80ad9f4:	60da      	str	r2, [r3, #12]
                RK[10] = RK[4] ^ RK[9];
 80ad9f6:	ea82 0201 	eor.w	r2, r2, r1
 80ad9fa:	611a      	str	r2, [r3, #16]
                RK[11] = RK[5] ^ RK[10];
 80ad9fc:	ea82 0200 	eor.w	r2, r2, r0
 80ada00:	615a      	str	r2, [r3, #20]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 80ada02:	d1ca      	bne.n	80ad99a <mbedtls_aes_setkey_enc+0xd2>
 80ada04:	e053      	b.n	80adaae <mbedtls_aes_setkey_enc+0x1e6>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 80ada06:	4e2c      	ldr	r6, [pc, #176]	; (80adab8 <mbedtls_aes_setkey_enc+0x1f0>)
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 80ada08:	482c      	ldr	r0, [pc, #176]	; (80adabc <mbedtls_aes_setkey_enc+0x1f4>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 80ada0a:	2500      	movs	r5, #0
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80ada0c:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 80ada10:	69dc      	ldr	r4, [r3, #28]
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80ada12:	681a      	ldr	r2, [r3, #0]
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
 80ada14:	685f      	ldr	r7, [r3, #4]
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80ada16:	4051      	eors	r1, r2
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 80ada18:	f3c4 2207 	ubfx	r2, r4, #8, #8
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80ada1c:	5c82      	ldrb	r2, [r0, r2]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 80ada1e:	3501      	adds	r5, #1
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80ada20:	4051      	eors	r1, r2
 80ada22:	0e22      	lsrs	r2, r4, #24
 80ada24:	5c82      	ldrb	r2, [r0, r2]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 80ada26:	2d07      	cmp	r5, #7
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80ada28:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 80ada2c:	b2e2      	uxtb	r2, r4
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80ada2e:	5c82      	ldrb	r2, [r0, r2]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 80ada30:	f103 0320 	add.w	r3, r3, #32
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80ada34:	ea81 6102 	eor.w	r1, r1, r2, lsl #24

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 80ada38:	f3c4 4207 	ubfx	r2, r4, #16, #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80ada3c:	5c82      	ldrb	r2, [r0, r2]
 80ada3e:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
 80ada42:	f853 2c18 	ldr.w	r2, [r3, #-24]
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 80ada46:	6019      	str	r1, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 80ada48:	ea81 0107 	eor.w	r1, r1, r7
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];
 80ada4c:	f853 7c14 	ldr.w	r7, [r3, #-20]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
 80ada50:	6059      	str	r1, [r3, #4]
                RK[10] = RK[2] ^ RK[9];
 80ada52:	ea81 0102 	eor.w	r1, r1, r2
                RK[11] = RK[3] ^ RK[10];
 80ada56:	ea87 0701 	eor.w	r7, r7, r1
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
 80ada5a:	6099      	str	r1, [r3, #8]
                RK[11] = RK[3] ^ RK[10];
 80ada5c:	60df      	str	r7, [r3, #12]

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 80ada5e:	b2fa      	uxtb	r2, r7
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 80ada60:	5c82      	ldrb	r2, [r0, r2]
 80ada62:	f853 1c10 	ldr.w	r1, [r3, #-16]
 80ada66:	ea81 0102 	eor.w	r1, r1, r2
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 80ada6a:	ea4f 6217 	mov.w	r2, r7, lsr #24
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 80ada6e:	5c82      	ldrb	r2, [r0, r2]
 80ada70:	ea81 6102 	eor.w	r1, r1, r2, lsl #24
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 80ada74:	f3c7 2207 	ubfx	r2, r7, #8, #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 80ada78:	5c82      	ldrb	r2, [r0, r2]
 80ada7a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80ada7e:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
 80ada82:	5dc2      	ldrb	r2, [r0, r7]
 80ada84:	ea81 4202 	eor.w	r2, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 80ada88:	f853 1c0c 	ldr.w	r1, [r3, #-12]

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 80ada8c:	611a      	str	r2, [r3, #16]

                RK[13] = RK[5] ^ RK[12];
 80ada8e:	ea82 0201 	eor.w	r2, r2, r1
                RK[14] = RK[6] ^ RK[13];
 80ada92:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 80ada96:	615a      	str	r2, [r3, #20]
                RK[14] = RK[6] ^ RK[13];
 80ada98:	ea82 0201 	eor.w	r2, r2, r1
 80ada9c:	619a      	str	r2, [r3, #24]
                RK[15] = RK[7] ^ RK[14];
 80ada9e:	ea82 0204 	eor.w	r2, r2, r4
 80adaa2:	61da      	str	r2, [r3, #28]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 80adaa4:	d1b2      	bne.n	80ada0c <mbedtls_aes_setkey_enc+0x144>
 80adaa6:	e002      	b.n	80adaae <mbedtls_aes_setkey_enc+0x1e6>
    switch( keybits )
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 80adaa8:	f06f 001f 	mvn.w	r0, #31
 80adaac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
 80adaae:	2000      	movs	r0, #0
}
 80adab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80adab2:	bf00      	nop
 80adab4:	200011a0 	.word	0x200011a0
 80adab8:	200033a4 	.word	0x200033a4
 80adabc:	200022a4 	.word	0x200022a4

080adac0 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 80adac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80adac4:	4604      	mov	r4, r0
 80adac6:	460d      	mov	r5, r1
 80adac8:	4616      	mov	r6, r2
 80adaca:	b0c9      	sub	sp, #292	; 0x124
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
 80adacc:	a802      	add	r0, sp, #8
 80adace:	f7ff feef 	bl	80ad8b0 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 80adad2:	f104 0308 	add.w	r3, r4, #8
 80adad6:	6063      	str	r3, [r4, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 80adad8:	4632      	mov	r2, r6
 80adada:	4629      	mov	r1, r5
 80adadc:	a802      	add	r0, sp, #8
 80adade:	f7ff fef3 	bl	80ad8c8 <mbedtls_aes_setkey_enc>
 80adae2:	4680      	mov	r8, r0
 80adae4:	2800      	cmp	r0, #0
 80adae6:	d14b      	bne.n	80adb80 <mbedtls_aes_setkey_dec+0xc0>
        goto exit;

    ctx->nr = cty.nr;
 80adae8:	9902      	ldr	r1, [sp, #8]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 80adaea:	9803      	ldr	r0, [sp, #12]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
        goto exit;

    ctx->nr = cty.nr;
 80adaec:	6021      	str	r1, [r4, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 80adaee:	010a      	lsls	r2, r1, #4
 80adaf0:	1883      	adds	r3, r0, r2

    *RK++ = *SK++;
 80adaf2:	5882      	ldr	r2, [r0, r2]
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 80adaf4:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80adb98 <mbedtls_aes_setkey_dec+0xd8>
    }
#endif

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
 80adaf8:	60a2      	str	r2, [r4, #8]
    *RK++ = *SK++;
 80adafa:	685a      	ldr	r2, [r3, #4]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 80adafc:	f8df 909c 	ldr.w	r9, [pc, #156]	; 80adb9c <mbedtls_aes_setkey_dec+0xdc>
#endif

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
    *RK++ = *SK++;
 80adb00:	60e2      	str	r2, [r4, #12]
    *RK++ = *SK++;
 80adb02:	689a      	ldr	r2, [r3, #8]
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 80adb04:	f8df a098 	ldr.w	sl, [pc, #152]	; 80adba0 <mbedtls_aes_setkey_dec+0xe0>

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
 80adb08:	6122      	str	r2, [r4, #16]
    *RK++ = *SK++;
 80adb0a:	68d8      	ldr	r0, [r3, #12]
 80adb0c:	f104 0218 	add.w	r2, r4, #24
 80adb10:	6160      	str	r0, [r4, #20]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 80adb12:	4c1f      	ldr	r4, [pc, #124]	; (80adb90 <mbedtls_aes_setkey_dec+0xd0>)
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 80adb14:	3901      	subs	r1, #1
 80adb16:	3b10      	subs	r3, #16
 80adb18:	2900      	cmp	r1, #0
 80adb1a:	dd29      	ble.n	80adb70 <mbedtls_aes_setkey_dec+0xb0>
 80adb1c:	1f1d      	subs	r5, r3, #4
 80adb1e:	f1a2 0e04 	sub.w	lr, r2, #4
 80adb22:	f103 0b0c 	add.w	fp, r3, #12
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 80adb26:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80adb2a:	b2c6      	uxtb	r6, r0
 80adb2c:	5da7      	ldrb	r7, [r4, r6]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 80adb2e:	0e06      	lsrs	r6, r0, #24
 80adb30:	5da6      	ldrb	r6, [r4, r6]
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
 80adb32:	45ab      	cmp	fp, r5
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 80adb34:	9601      	str	r6, [sp, #4]
 80adb36:	4e17      	ldr	r6, [pc, #92]	; (80adb94 <mbedtls_aes_setkey_dec+0xd4>)
 80adb38:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 80adb3c:	9e01      	ldr	r6, [sp, #4]
 80adb3e:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 80adb42:	ea87 0706 	eor.w	r7, r7, r6
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 80adb46:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80adb4a:	5da6      	ldrb	r6, [r4, r6]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 80adb4c:	f3c0 4007 	ubfx	r0, r0, #16, #8
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 80adb50:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 80adb54:	5c20      	ldrb	r0, [r4, r0]
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 80adb56:	ea86 0607 	eor.w	r6, r6, r7
 80adb5a:	f85a 7020 	ldr.w	r7, [sl, r0, lsl #2]
 80adb5e:	ea86 0607 	eor.w	r6, r6, r7
 80adb62:	f84e 6f04 	str.w	r6, [lr, #4]!
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
 80adb66:	d1de      	bne.n	80adb26 <mbedtls_aes_setkey_dec+0x66>
 80adb68:	3210      	adds	r2, #16
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 80adb6a:	3901      	subs	r1, #1
 80adb6c:	3b10      	subs	r3, #16
 80adb6e:	e7d3      	b.n	80adb18 <mbedtls_aes_setkey_dec+0x58>
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
        }
    }

    *RK++ = *SK++;
 80adb70:	6819      	ldr	r1, [r3, #0]
 80adb72:	6011      	str	r1, [r2, #0]
    *RK++ = *SK++;
 80adb74:	6859      	ldr	r1, [r3, #4]
 80adb76:	6051      	str	r1, [r2, #4]
    *RK++ = *SK++;
 80adb78:	6899      	ldr	r1, [r3, #8]
 80adb7a:	6091      	str	r1, [r2, #8]
    *RK++ = *SK++;
 80adb7c:	68db      	ldr	r3, [r3, #12]
 80adb7e:	60d3      	str	r3, [r2, #12]

exit:
    mbedtls_aes_free( &cty );
 80adb80:	a802      	add	r0, sp, #8
 80adb82:	f7ff fe9a 	bl	80ad8ba <mbedtls_aes_free>

    return( ret );
}
 80adb86:	4640      	mov	r0, r8
 80adb88:	b049      	add	sp, #292	; 0x124
 80adb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80adb8e:	bf00      	nop
 80adb90:	200022a4 	.word	0x200022a4
 80adb94:	200027a4 	.word	0x200027a4
 80adb98:	200023a4 	.word	0x200023a4
 80adb9c:	20002ba4 	.word	0x20002ba4
 80adba0:	20002fa4 	.word	0x20002fa4

080adba4 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 80adba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 80adba8:	6846      	ldr	r6, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 80adbaa:	680c      	ldr	r4, [r1, #0]
 80adbac:	6833      	ldr	r3, [r6, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 80adbae:	688d      	ldr	r5, [r1, #8]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 80adbb0:	ea84 0b03 	eor.w	fp, r4, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 80adbb4:	684c      	ldr	r4, [r1, #4]
 80adbb6:	6873      	ldr	r3, [r6, #4]
 80adbb8:	f8df c36c 	ldr.w	ip, [pc, #876]	; 80adf28 <mbedtls_internal_aes_encrypt+0x384>
 80adbbc:	4063      	eors	r3, r4
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 80adbbe:	68b4      	ldr	r4, [r6, #8]
 80adbc0:	f8df e368 	ldr.w	lr, [pc, #872]	; 80adf2c <mbedtls_internal_aes_encrypt+0x388>
 80adbc4:	406c      	eors	r4, r5
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80adbc6:	68cd      	ldr	r5, [r1, #12]
 80adbc8:	68f1      	ldr	r1, [r6, #12]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80adbca:	4fd4      	ldr	r7, [pc, #848]	; (80adf1c <mbedtls_internal_aes_encrypt+0x378>)
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80adbcc:	404d      	eors	r5, r1

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80adbce:	6801      	ldr	r1, [r0, #0]
 80adbd0:	1049      	asrs	r1, r1, #1
 80adbd2:	3901      	subs	r1, #1
 80adbd4:	9101      	str	r1, [sp, #4]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80adbd6:	f106 0110 	add.w	r1, r6, #16

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80adbda:	9e01      	ldr	r6, [sp, #4]
 80adbdc:	4608      	mov	r0, r1
 80adbde:	2e00      	cmp	r6, #0
 80adbe0:	f101 0120 	add.w	r1, r1, #32
 80adbe4:	f8df 9340 	ldr.w	r9, [pc, #832]	; 80adf28 <mbedtls_internal_aes_encrypt+0x384>
 80adbe8:	fa5f f68b 	uxtb.w	r6, fp
 80adbec:	f8df 833c 	ldr.w	r8, [pc, #828]	; 80adf2c <mbedtls_internal_aes_encrypt+0x388>
 80adbf0:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 80adbf4:	f340 80be 	ble.w	80add74 <mbedtls_internal_aes_encrypt+0x1d0>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80adbf8:	f85e 002a 	ldr.w	r0, [lr, sl, lsl #2]
 80adbfc:	f85c 8026 	ldr.w	r8, [ip, r6, lsl #2]
 80adc00:	4ec7      	ldr	r6, [pc, #796]	; (80adf20 <mbedtls_internal_aes_encrypt+0x37c>)
 80adc02:	ea88 0800 	eor.w	r8, r8, r0
 80adc06:	f851 0c20 	ldr.w	r0, [r1, #-32]
 80adc0a:	fa5f f983 	uxtb.w	r9, r3
 80adc0e:	ea88 0800 	eor.w	r8, r8, r0
 80adc12:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80adc16:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80adc1a:	f85c 9029 	ldr.w	r9, [ip, r9, lsl #2]
 80adc1e:	ea88 0000 	eor.w	r0, r8, r0
 80adc22:	f3c4 4807 	ubfx	r8, r4, #16, #8
 80adc26:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 80adc2a:	fa5f fa84 	uxtb.w	sl, r4
 80adc2e:	ea80 0808 	eor.w	r8, r0, r8
 80adc32:	ea4f 601b 	mov.w	r0, fp, lsr #24
 80adc36:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 80adc3a:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 80adc3e:	ea89 0900 	eor.w	r9, r9, r0
 80adc42:	f851 0c1c 	ldr.w	r0, [r1, #-28]
 80adc46:	ea89 0000 	eor.w	r0, r9, r0
 80adc4a:	f3c4 2907 	ubfx	r9, r4, #8, #8
 80adc4e:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 80adc52:	ea80 0009 	eor.w	r0, r0, r9
 80adc56:	f3c5 4907 	ubfx	r9, r5, #16, #8
 80adc5a:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 80adc5e:	ea80 0909 	eor.w	r9, r0, r9
 80adc62:	0e18      	lsrs	r0, r3, #24
 80adc64:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 80adc68:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80adc6c:	ea8a 0a00 	eor.w	sl, sl, r0
 80adc70:	f851 0c18 	ldr.w	r0, [r1, #-24]
 80adc74:	ea8a 0000 	eor.w	r0, sl, r0
 80adc78:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80adc7c:	f857 a02a 	ldr.w	sl, [r7, sl, lsl #2]
 80adc80:	b2ed      	uxtb	r5, r5
 80adc82:	ea80 000a 	eor.w	r0, r0, sl
 80adc86:	f3cb 4a07 	ubfx	sl, fp, #16, #8
 80adc8a:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 80adc8e:	ea80 000a 	eor.w	r0, r0, sl
 80adc92:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 80adc96:	f85c 4025 	ldr.w	r4, [ip, r5, lsl #2]
 80adc9a:	f85e 502a 	ldr.w	r5, [lr, sl, lsl #2]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80adc9e:	fa5f fa80 	uxtb.w	sl, r0
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80adca2:	4065      	eors	r5, r4
 80adca4:	f851 4c14 	ldr.w	r4, [r1, #-20]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80adca8:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80adcac:	406c      	eors	r4, r5
 80adcae:	f3cb 2507 	ubfx	r5, fp, #8, #8
 80adcb2:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80adcb6:	406c      	eors	r4, r5
 80adcb8:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
 80adcbc:	4065      	eors	r5, r4
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80adcbe:	0e2b      	lsrs	r3, r5, #24
 80adcc0:	fa5f f488 	uxtb.w	r4, r8
 80adcc4:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 80adcc8:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 80adccc:	405c      	eors	r4, r3
 80adcce:	f851 3c10 	ldr.w	r3, [r1, #-16]
 80adcd2:	4063      	eors	r3, r4
 80adcd4:	f3c9 2407 	ubfx	r4, r9, #8, #8
 80adcd8:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 80adcdc:	4063      	eors	r3, r4
 80adcde:	f3c0 4407 	ubfx	r4, r0, #16, #8
 80adce2:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 80adce6:	ea83 0b04 	eor.w	fp, r3, r4
 80adcea:	fa5f f489 	uxtb.w	r4, r9
 80adcee:	ea4f 6318 	mov.w	r3, r8, lsr #24
 80adcf2:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 80adcf6:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 80adcfa:	405c      	eors	r4, r3
 80adcfc:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 80add00:	4063      	eors	r3, r4
 80add02:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80add06:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 80add0a:	4063      	eors	r3, r4
 80add0c:	f3c5 4407 	ubfx	r4, r5, #16, #8
 80add10:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 80add14:	4063      	eors	r3, r4
 80add16:	ea4f 6419 	mov.w	r4, r9, lsr #24
 80add1a:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 80add1e:	f3c9 4907 	ubfx	r9, r9, #16, #8
 80add22:	ea8a 0a04 	eor.w	sl, sl, r4
 80add26:	f851 4c08 	ldr.w	r4, [r1, #-8]
 80add2a:	ea8a 0404 	eor.w	r4, sl, r4
 80add2e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80add32:	f857 a02a 	ldr.w	sl, [r7, sl, lsl #2]
 80add36:	b2ed      	uxtb	r5, r5
 80add38:	ea84 040a 	eor.w	r4, r4, sl
 80add3c:	f3c8 4a07 	ubfx	sl, r8, #16, #8
 80add40:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 80add44:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80add48:	ea84 040a 	eor.w	r4, r4, sl
 80add4c:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 80add50:	f85c 0025 	ldr.w	r0, [ip, r5, lsl #2]
 80add54:	f85e 502a 	ldr.w	r5, [lr, sl, lsl #2]
 80add58:	4045      	eors	r5, r0
 80add5a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80add5e:	4068      	eors	r0, r5
 80add60:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 80add64:	4068      	eors	r0, r5
 80add66:	f856 5029 	ldr.w	r5, [r6, r9, lsl #2]
 80add6a:	4045      	eors	r5, r0
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80add6c:	9801      	ldr	r0, [sp, #4]
 80add6e:	3801      	subs	r0, #1
 80add70:	9001      	str	r0, [sp, #4]
 80add72:	e732      	b.n	80adbda <mbedtls_internal_aes_encrypt+0x36>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80add74:	f858 102a 	ldr.w	r1, [r8, sl, lsl #2]
 80add78:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 80add7c:	f8df c19c 	ldr.w	ip, [pc, #412]	; 80adf1c <mbedtls_internal_aes_encrypt+0x378>
 80add80:	404f      	eors	r7, r1
 80add82:	f3c3 2607 	ubfx	r6, r3, #8, #8
 80add86:	6801      	ldr	r1, [r0, #0]
 80add88:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 80add8c:	f8df e190 	ldr.w	lr, [pc, #400]	; 80adf20 <mbedtls_internal_aes_encrypt+0x37c>
 80add90:	4079      	eors	r1, r7
 80add92:	4071      	eors	r1, r6
 80add94:	f3c4 4607 	ubfx	r6, r4, #16, #8
 80add98:	f85e 7026 	ldr.w	r7, [lr, r6, lsl #2]
 80add9c:	b2de      	uxtb	r6, r3
 80add9e:	404f      	eors	r7, r1
 80adda0:	ea4f 611b 	mov.w	r1, fp, lsr #24
 80adda4:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 80adda8:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 80addac:	ea86 0a01 	eor.w	sl, r6, r1
 80addb0:	6841      	ldr	r1, [r0, #4]
 80addb2:	f3c4 2607 	ubfx	r6, r4, #8, #8
 80addb6:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 80addba:	ea8a 0101 	eor.w	r1, sl, r1
 80addbe:	4071      	eors	r1, r6
 80addc0:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80addc4:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 80addc8:	ea81 0a06 	eor.w	sl, r1, r6
 80addcc:	b2e6      	uxtb	r6, r4
 80addce:	0e19      	lsrs	r1, r3, #24
 80addd0:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 80addd4:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 80addd8:	0e24      	lsrs	r4, r4, #24
 80addda:	4071      	eors	r1, r6
 80adddc:	6886      	ldr	r6, [r0, #8]
 80addde:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80adde2:	404e      	eors	r6, r1
 80adde4:	f3c5 2107 	ubfx	r1, r5, #8, #8
 80adde8:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 80addec:	b2ed      	uxtb	r5, r5
 80addee:	404e      	eors	r6, r1
 80addf0:	f3cb 4107 	ubfx	r1, fp, #16, #8
 80addf4:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 80addf8:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 80addfc:	404e      	eors	r6, r1
 80addfe:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
 80ade02:	68c4      	ldr	r4, [r0, #12]
 80ade04:	4069      	eors	r1, r5
 80ade06:	404c      	eors	r4, r1
 80ade08:	f3cb 2107 	ubfx	r1, fp, #8, #8
 80ade0c:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 80ade10:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 80ade14:	404c      	eors	r4, r1
 80ade16:	405c      	eors	r4, r3

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 80ade18:	4b42      	ldr	r3, [pc, #264]	; (80adf24 <mbedtls_internal_aes_encrypt+0x380>)
 80ade1a:	b2f9      	uxtb	r1, r7
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 80ade1c:	f813 e001 	ldrb.w	lr, [r3, r1]
 80ade20:	6901      	ldr	r1, [r0, #16]
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80ade22:	0e25      	lsrs	r5, r4, #24
    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 80ade24:	ea8e 0101 	eor.w	r1, lr, r1
 80ade28:	f813 e005 	ldrb.w	lr, [r3, r5]

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 80ade2c:	f3ca 2507 	ubfx	r5, sl, #8, #8
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 80ade30:	ea81 610e 	eor.w	r1, r1, lr, lsl #24
 80ade34:	f813 e005 	ldrb.w	lr, [r3, r5]
 80ade38:	f3c6 4507 	ubfx	r5, r6, #16, #8
 80ade3c:	ea81 210e 	eor.w	r1, r1, lr, lsl #8
 80ade40:	f813 e005 	ldrb.w	lr, [r3, r5]
 80ade44:	ea81 4e0e 	eor.w	lr, r1, lr, lsl #16
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 80ade48:	fa5f f18a 	uxtb.w	r1, sl
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 80ade4c:	5c5d      	ldrb	r5, [r3, r1]
 80ade4e:	6941      	ldr	r1, [r0, #20]
 80ade50:	4069      	eors	r1, r5
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 80ade52:	0e3d      	lsrs	r5, r7, #24
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 80ade54:	5d5d      	ldrb	r5, [r3, r5]
 80ade56:	ea81 6105 	eor.w	r1, r1, r5, lsl #24
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 80ade5a:	f3c6 2507 	ubfx	r5, r6, #8, #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 80ade5e:	5d5d      	ldrb	r5, [r3, r5]
 80ade60:	ea81 2105 	eor.w	r1, r1, r5, lsl #8
 80ade64:	f3c4 4507 	ubfx	r5, r4, #16, #8
 80ade68:	5d5d      	ldrb	r5, [r3, r5]
 80ade6a:	ea81 4505 	eor.w	r5, r1, r5, lsl #16
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 80ade6e:	b2f1      	uxtb	r1, r6
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 80ade70:	f813 c001 	ldrb.w	ip, [r3, r1]
 80ade74:	6981      	ldr	r1, [r0, #24]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 80ade76:	0e36      	lsrs	r6, r6, #24
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 80ade78:	ea8c 0101 	eor.w	r1, ip, r1
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80ade7c:	ea4f 6c1a 	mov.w	ip, sl, lsr #24
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 80ade80:	f813 c00c 	ldrb.w	ip, [r3, ip]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 80ade84:	f3ca 4a07 	ubfx	sl, sl, #16, #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 80ade88:	ea81 610c 	eor.w	r1, r1, ip, lsl #24
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 80ade8c:	f3c4 2c07 	ubfx	ip, r4, #8, #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 80ade90:	f813 c00c 	ldrb.w	ip, [r3, ip]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 80ade94:	b2e4      	uxtb	r4, r4
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 80ade96:	ea81 210c 	eor.w	r1, r1, ip, lsl #8
 80ade9a:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 80ade9e:	f813 c00c 	ldrb.w	ip, [r3, ip]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 80adea2:	5d1c      	ldrb	r4, [r3, r4]
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 80adea4:	ea81 4c0c 	eor.w	ip, r1, ip, lsl #16
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 80adea8:	69c1      	ldr	r1, [r0, #28]
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 80adeaa:	f3c7 2707 	ubfx	r7, r7, #8, #8
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 80adeae:	ea84 0001 	eor.w	r0, r4, r1
 80adeb2:	5d99      	ldrb	r1, [r3, r6]
 80adeb4:	ea80 6001 	eor.w	r0, r0, r1, lsl #24
 80adeb8:	5dd9      	ldrb	r1, [r3, r7]
 80adeba:	f813 300a 	ldrb.w	r3, [r3, sl]
 80adebe:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 80adec2:	ea4f 211e 	mov.w	r1, lr, lsr #8
 80adec6:	7051      	strb	r1, [r2, #1]
 80adec8:	ea4f 411e 	mov.w	r1, lr, lsr #16
 80adecc:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
 80adece:	0a29      	lsrs	r1, r5, #8
 80aded0:	7151      	strb	r1, [r2, #5]
 80aded2:	0c29      	lsrs	r1, r5, #16
 80aded4:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 80aded6:	ea4f 211c 	mov.w	r1, ip, lsr #8
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 80adeda:	ea80 4303 	eor.w	r3, r0, r3, lsl #16
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
 80adede:	7251      	strb	r1, [r2, #9]
 80adee0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80adee4:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 80adee6:	0a19      	lsrs	r1, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 80adee8:	f882 e000 	strb.w	lr, [r2]
    PUT_UINT32_LE( X1, output,  4 );
 80adeec:	7115      	strb	r5, [r2, #4]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 80adeee:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    PUT_UINT32_LE( X1, output,  4 );
 80adef2:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X2, output,  8 );
 80adef4:	f882 c008 	strb.w	ip, [r2, #8]
    PUT_UINT32_LE( X3, output, 12 );
 80adef8:	7313      	strb	r3, [r2, #12]
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
 80adefa:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
    PUT_UINT32_LE( X3, output, 12 );
 80adefe:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 80adf00:	2000      	movs	r0, #0
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 80adf02:	0c19      	lsrs	r1, r3, #16
 80adf04:	0e1b      	lsrs	r3, r3, #24
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 80adf06:	f882 e003 	strb.w	lr, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 80adf0a:	71d5      	strb	r5, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 80adf0c:	f882 c00b 	strb.w	ip, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 80adf10:	7391      	strb	r1, [r2, #14]
 80adf12:	73d3      	strb	r3, [r2, #15]

    return( 0 );
}
 80adf14:	b003      	add	sp, #12
 80adf16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80adf1a:	bf00      	nop
 80adf1c:	200015a4 	.word	0x200015a4
 80adf20:	200019a4 	.word	0x200019a4
 80adf24:	200022a4 	.word	0x200022a4
 80adf28:	200011a4 	.word	0x200011a4
 80adf2c:	20001da4 	.word	0x20001da4

080adf30 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 80adf30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 80adf34:	6845      	ldr	r5, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 80adf36:	680c      	ldr	r4, [r1, #0]
 80adf38:	682b      	ldr	r3, [r5, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 80adf3a:	684e      	ldr	r6, [r1, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 80adf3c:	405c      	eors	r4, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 80adf3e:	686b      	ldr	r3, [r5, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80adf40:	6800      	ldr	r0, [r0, #0]
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 80adf42:	ea86 0b03 	eor.w	fp, r6, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 80adf46:	688e      	ldr	r6, [r1, #8]
 80adf48:	68ab      	ldr	r3, [r5, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80adf4a:	1040      	asrs	r0, r0, #1

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 80adf4c:	4073      	eors	r3, r6
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80adf4e:	68ce      	ldr	r6, [r1, #12]
 80adf50:	68e9      	ldr	r1, [r5, #12]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80adf52:	3801      	subs	r0, #1
 80adf54:	f8df c35c 	ldr.w	ip, [pc, #860]	; 80ae2b4 <mbedtls_internal_aes_decrypt+0x384>
 80adf58:	f8df e35c 	ldr.w	lr, [pc, #860]	; 80ae2b8 <mbedtls_internal_aes_decrypt+0x388>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80adf5c:	4fd2      	ldr	r7, [pc, #840]	; (80ae2a8 <mbedtls_internal_aes_decrypt+0x378>)
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80adf5e:	9001      	str	r0, [sp, #4]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80adf60:	4071      	eors	r1, r6
 80adf62:	f105 0010 	add.w	r0, r5, #16

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80adf66:	9e01      	ldr	r6, [sp, #4]
 80adf68:	4605      	mov	r5, r0
 80adf6a:	2e00      	cmp	r6, #0
 80adf6c:	f100 0020 	add.w	r0, r0, #32
 80adf70:	f8df 9340 	ldr.w	r9, [pc, #832]	; 80ae2b4 <mbedtls_internal_aes_decrypt+0x384>
 80adf74:	b2e6      	uxtb	r6, r4
 80adf76:	f8df 8340 	ldr.w	r8, [pc, #832]	; 80ae2b8 <mbedtls_internal_aes_decrypt+0x388>
 80adf7a:	ea4f 6a1b 	mov.w	sl, fp, lsr #24
 80adf7e:	f340 80c0 	ble.w	80ae102 <mbedtls_internal_aes_decrypt+0x1d2>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80adf82:	f85e 502a 	ldr.w	r5, [lr, sl, lsl #2]
 80adf86:	f85c 8026 	ldr.w	r8, [ip, r6, lsl #2]
 80adf8a:	4ec8      	ldr	r6, [pc, #800]	; (80ae2ac <mbedtls_internal_aes_decrypt+0x37c>)
 80adf8c:	ea88 0805 	eor.w	r8, r8, r5
 80adf90:	f850 5c20 	ldr.w	r5, [r0, #-32]
 80adf94:	fa5f f98b 	uxtb.w	r9, fp
 80adf98:	ea88 0805 	eor.w	r8, r8, r5
 80adf9c:	f3c1 2507 	ubfx	r5, r1, #8, #8
 80adfa0:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80adfa4:	f85c 9029 	ldr.w	r9, [ip, r9, lsl #2]
 80adfa8:	ea88 0505 	eor.w	r5, r8, r5
 80adfac:	f3c3 4807 	ubfx	r8, r3, #16, #8
 80adfb0:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 80adfb4:	fa5f fa83 	uxtb.w	sl, r3
 80adfb8:	ea85 0808 	eor.w	r8, r5, r8
 80adfbc:	0e1d      	lsrs	r5, r3, #24
 80adfbe:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 80adfc2:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 80adfc6:	ea89 0905 	eor.w	r9, r9, r5
 80adfca:	f850 5c1c 	ldr.w	r5, [r0, #-28]
 80adfce:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80adfd2:	ea89 0505 	eor.w	r5, r9, r5
 80adfd6:	f3c4 2907 	ubfx	r9, r4, #8, #8
 80adfda:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 80adfde:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80adfe2:	ea85 0509 	eor.w	r5, r5, r9
 80adfe6:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80adfea:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 80adfee:	ea85 0909 	eor.w	r9, r5, r9
 80adff2:	0e0d      	lsrs	r5, r1, #24
 80adff4:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 80adff8:	b2c9      	uxtb	r1, r1
 80adffa:	ea8a 0a05 	eor.w	sl, sl, r5
 80adffe:	f850 5c18 	ldr.w	r5, [r0, #-24]
 80ae002:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 80ae006:	ea8a 0505 	eor.w	r5, sl, r5
 80ae00a:	f3cb 2a07 	ubfx	sl, fp, #8, #8
 80ae00e:	f857 a02a 	ldr.w	sl, [r7, sl, lsl #2]
 80ae012:	ea85 050a 	eor.w	r5, r5, sl
 80ae016:	f3c4 4a07 	ubfx	sl, r4, #16, #8
 80ae01a:	0e24      	lsrs	r4, r4, #24
 80ae01c:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 80ae020:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 80ae024:	404c      	eors	r4, r1
 80ae026:	f850 1c14 	ldr.w	r1, [r0, #-20]
 80ae02a:	ea85 050a 	eor.w	r5, r5, sl
 80ae02e:	4061      	eors	r1, r4
 80ae030:	4059      	eors	r1, r3
 80ae032:	f3cb 4307 	ubfx	r3, fp, #16, #8
 80ae036:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80ae03a:	fa5f f488 	uxtb.w	r4, r8
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80ae03e:	4059      	eors	r1, r3
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80ae040:	ea4f 6319 	mov.w	r3, r9, lsr #24
 80ae044:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 80ae048:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 80ae04c:	fa5f fa89 	uxtb.w	sl, r9
 80ae050:	405c      	eors	r4, r3
 80ae052:	f850 3c10 	ldr.w	r3, [r0, #-16]
 80ae056:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 80ae05a:	4063      	eors	r3, r4
 80ae05c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80ae060:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 80ae064:	4063      	eors	r3, r4
 80ae066:	f3c5 4407 	ubfx	r4, r5, #16, #8
 80ae06a:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 80ae06e:	405c      	eors	r4, r3
 80ae070:	0e2b      	lsrs	r3, r5, #24
 80ae072:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 80ae076:	ea8a 0a03 	eor.w	sl, sl, r3
 80ae07a:	f850 3c0c 	ldr.w	r3, [r0, #-12]
 80ae07e:	ea8a 0303 	eor.w	r3, sl, r3
 80ae082:	f3c8 2a07 	ubfx	sl, r8, #8, #8
 80ae086:	f857 a02a 	ldr.w	sl, [r7, sl, lsl #2]
 80ae08a:	ea83 030a 	eor.w	r3, r3, sl
 80ae08e:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 80ae092:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 80ae096:	ea83 0b0a 	eor.w	fp, r3, sl
 80ae09a:	fa5f fa85 	uxtb.w	sl, r5
 80ae09e:	0e0b      	lsrs	r3, r1, #24
 80ae0a0:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 80ae0a4:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 80ae0a8:	b2c9      	uxtb	r1, r1
 80ae0aa:	ea8a 0a03 	eor.w	sl, sl, r3
 80ae0ae:	f850 3c08 	ldr.w	r3, [r0, #-8]
 80ae0b2:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 80ae0b6:	ea8a 0303 	eor.w	r3, sl, r3
 80ae0ba:	f3c9 2a07 	ubfx	sl, r9, #8, #8
 80ae0be:	f857 a02a 	ldr.w	sl, [r7, sl, lsl #2]
 80ae0c2:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80ae0c6:	ea83 030a 	eor.w	r3, r3, sl
 80ae0ca:	f3c8 4a07 	ubfx	sl, r8, #16, #8
 80ae0ce:	ea4f 6818 	mov.w	r8, r8, lsr #24
 80ae0d2:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
 80ae0d6:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80ae0da:	ea81 0808 	eor.w	r8, r1, r8
 80ae0de:	f850 1c04 	ldr.w	r1, [r0, #-4]
 80ae0e2:	f3c9 4907 	ubfx	r9, r9, #16, #8
 80ae0e6:	ea88 0101 	eor.w	r1, r8, r1
 80ae0ea:	4069      	eors	r1, r5
 80ae0ec:	f856 5029 	ldr.w	r5, [r6, r9, lsl #2]
 80ae0f0:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 80ae0f4:	4069      	eors	r1, r5
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80ae0f6:	9d01      	ldr	r5, [sp, #4]
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80ae0f8:	ea83 030a 	eor.w	r3, r3, sl
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80ae0fc:	3d01      	subs	r5, #1
 80ae0fe:	9501      	str	r5, [sp, #4]
 80ae100:	e731      	b.n	80adf66 <mbedtls_internal_aes_decrypt+0x36>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80ae102:	f858 002a 	ldr.w	r0, [r8, sl, lsl #2]
 80ae106:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 80ae10a:	f8df c19c 	ldr.w	ip, [pc, #412]	; 80ae2a8 <mbedtls_internal_aes_decrypt+0x378>
 80ae10e:	4047      	eors	r7, r0
 80ae110:	f3c1 2607 	ubfx	r6, r1, #8, #8
 80ae114:	6828      	ldr	r0, [r5, #0]
 80ae116:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 80ae11a:	f8df e190 	ldr.w	lr, [pc, #400]	; 80ae2ac <mbedtls_internal_aes_decrypt+0x37c>
 80ae11e:	4078      	eors	r0, r7
 80ae120:	4070      	eors	r0, r6
 80ae122:	f3c3 4607 	ubfx	r6, r3, #16, #8
 80ae126:	f85e 7026 	ldr.w	r7, [lr, r6, lsl #2]
 80ae12a:	fa5f f68b 	uxtb.w	r6, fp
 80ae12e:	4047      	eors	r7, r0
 80ae130:	0e18      	lsrs	r0, r3, #24
 80ae132:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 80ae136:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80ae13a:	ea86 0a00 	eor.w	sl, r6, r0
 80ae13e:	6868      	ldr	r0, [r5, #4]
 80ae140:	f3c4 2607 	ubfx	r6, r4, #8, #8
 80ae144:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 80ae148:	ea8a 0000 	eor.w	r0, sl, r0
 80ae14c:	4070      	eors	r0, r6
 80ae14e:	f3c1 4607 	ubfx	r6, r1, #16, #8
 80ae152:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 80ae156:	ea80 0a06 	eor.w	sl, r0, r6
 80ae15a:	b2de      	uxtb	r6, r3
 80ae15c:	0e08      	lsrs	r0, r1, #24
 80ae15e:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 80ae162:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80ae166:	b2c9      	uxtb	r1, r1
 80ae168:	4070      	eors	r0, r6
 80ae16a:	68ae      	ldr	r6, [r5, #8]
 80ae16c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80ae170:	4046      	eors	r6, r0
 80ae172:	f3cb 2007 	ubfx	r0, fp, #8, #8
 80ae176:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 80ae17a:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80ae17e:	4046      	eors	r6, r0
 80ae180:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80ae184:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 80ae188:	0e24      	lsrs	r4, r4, #24
 80ae18a:	4046      	eors	r6, r0
 80ae18c:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 80ae190:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80ae194:	ea4f 641a 	mov.w	r4, sl, lsr #24
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80ae198:	4048      	eors	r0, r1
 80ae19a:	68e9      	ldr	r1, [r5, #12]
 80ae19c:	4041      	eors	r1, r0
 80ae19e:	4059      	eors	r1, r3
 80ae1a0:	f3cb 4307 	ubfx	r3, fp, #16, #8
 80ae1a4:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 80ae1a8:	b2f8      	uxtb	r0, r7
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80ae1aa:	4059      	eors	r1, r3

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 80ae1ac:	4b40      	ldr	r3, [pc, #256]	; (80ae2b0 <mbedtls_internal_aes_decrypt+0x380>)
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 80ae1ae:	f813 e000 	ldrb.w	lr, [r3, r0]
 80ae1b2:	6928      	ldr	r0, [r5, #16]
 80ae1b4:	ea8e 0000 	eor.w	r0, lr, r0
 80ae1b8:	f813 e004 	ldrb.w	lr, [r3, r4]

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 80ae1bc:	f3c1 2407 	ubfx	r4, r1, #8, #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 80ae1c0:	ea80 600e 	eor.w	r0, r0, lr, lsl #24
 80ae1c4:	f813 e004 	ldrb.w	lr, [r3, r4]
 80ae1c8:	f3c6 4407 	ubfx	r4, r6, #16, #8
 80ae1cc:	ea80 200e 	eor.w	r0, r0, lr, lsl #8
 80ae1d0:	f813 e004 	ldrb.w	lr, [r3, r4]
 80ae1d4:	ea80 4e0e 	eor.w	lr, r0, lr, lsl #16
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 80ae1d8:	fa5f f08a 	uxtb.w	r0, sl
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 80ae1dc:	5c1c      	ldrb	r4, [r3, r0]
 80ae1de:	6968      	ldr	r0, [r5, #20]
 80ae1e0:	4060      	eors	r0, r4
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 80ae1e2:	0e34      	lsrs	r4, r6, #24
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 80ae1e4:	5d1c      	ldrb	r4, [r3, r4]
 80ae1e6:	ea80 6004 	eor.w	r0, r0, r4, lsl #24
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 80ae1ea:	f3c7 2407 	ubfx	r4, r7, #8, #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 80ae1ee:	5d1c      	ldrb	r4, [r3, r4]
 80ae1f0:	ea80 2004 	eor.w	r0, r0, r4, lsl #8
 80ae1f4:	f3c1 4407 	ubfx	r4, r1, #16, #8
 80ae1f8:	5d1c      	ldrb	r4, [r3, r4]
 80ae1fa:	ea80 4404 	eor.w	r4, r0, r4, lsl #16
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 80ae1fe:	b2f0      	uxtb	r0, r6
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 80ae200:	f813 c000 	ldrb.w	ip, [r3, r0]
 80ae204:	69a8      	ldr	r0, [r5, #24]
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 80ae206:	f3c6 2607 	ubfx	r6, r6, #8, #8
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 80ae20a:	ea8c 0000 	eor.w	r0, ip, r0
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80ae20e:	ea4f 6c11 	mov.w	ip, r1, lsr #24
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 80ae212:	f813 c00c 	ldrb.w	ip, [r3, ip]
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 80ae216:	b2c9      	uxtb	r1, r1
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 80ae218:	ea80 600c 	eor.w	r0, r0, ip, lsl #24
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 80ae21c:	f3ca 2c07 	ubfx	ip, sl, #8, #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 80ae220:	f813 c00c 	ldrb.w	ip, [r3, ip]
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 80ae224:	f3ca 4a07 	ubfx	sl, sl, #16, #8
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 80ae228:	ea80 200c 	eor.w	r0, r0, ip, lsl #8
 80ae22c:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 80ae230:	f813 c00c 	ldrb.w	ip, [r3, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 80ae234:	0e3f      	lsrs	r7, r7, #24
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 80ae236:	ea80 4c0c 	eor.w	ip, r0, ip, lsl #16
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 80ae23a:	5c58      	ldrb	r0, [r3, r1]
 80ae23c:	69e9      	ldr	r1, [r5, #28]
 80ae23e:	4041      	eors	r1, r0
 80ae240:	5dd8      	ldrb	r0, [r3, r7]
 80ae242:	ea81 6100 	eor.w	r1, r1, r0, lsl #24
 80ae246:	5d98      	ldrb	r0, [r3, r6]
 80ae248:	f813 300a 	ldrb.w	r3, [r3, sl]
 80ae24c:	ea81 2100 	eor.w	r1, r1, r0, lsl #8
 80ae250:	ea81 4303 	eor.w	r3, r1, r3, lsl #16
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 80ae254:	ea4f 211e 	mov.w	r1, lr, lsr #8
 80ae258:	7051      	strb	r1, [r2, #1]
 80ae25a:	ea4f 411e 	mov.w	r1, lr, lsr #16
 80ae25e:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
 80ae260:	0a21      	lsrs	r1, r4, #8
 80ae262:	7151      	strb	r1, [r2, #5]
 80ae264:	0c21      	lsrs	r1, r4, #16
 80ae266:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 80ae268:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80ae26c:	7251      	strb	r1, [r2, #9]
 80ae26e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80ae272:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 80ae274:	0a19      	lsrs	r1, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 80ae276:	f882 e000 	strb.w	lr, [r2]
    PUT_UINT32_LE( X1, output,  4 );
 80ae27a:	7114      	strb	r4, [r2, #4]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 80ae27c:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    PUT_UINT32_LE( X1, output,  4 );
 80ae280:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X2, output,  8 );
 80ae282:	f882 c008 	strb.w	ip, [r2, #8]
    PUT_UINT32_LE( X3, output, 12 );
 80ae286:	7313      	strb	r3, [r2, #12]
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
 80ae288:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
    PUT_UINT32_LE( X3, output, 12 );
 80ae28c:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 80ae28e:	2000      	movs	r0, #0
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 80ae290:	0c19      	lsrs	r1, r3, #16
 80ae292:	0e1b      	lsrs	r3, r3, #24
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 80ae294:	f882 e003 	strb.w	lr, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 80ae298:	71d4      	strb	r4, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 80ae29a:	f882 c00b 	strb.w	ip, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 80ae29e:	7391      	strb	r1, [r2, #14]
 80ae2a0:	73d3      	strb	r3, [r2, #15]

    return( 0 );
}
 80ae2a2:	b003      	add	sp, #12
 80ae2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80ae2a8:	20002ba4 	.word	0x20002ba4
 80ae2ac:	20002fa4 	.word	0x20002fa4
 80ae2b0:	200021a4 	.word	0x200021a4
 80ae2b4:	200027a4 	.word	0x200027a4
 80ae2b8:	200023a4 	.word	0x200023a4

080ae2bc <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 80ae2bc:	b410      	push	{r4}
 80ae2be:	4614      	mov	r4, r2
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 80ae2c0:	2901      	cmp	r1, #1
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 80ae2c2:	461a      	mov	r2, r3
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 80ae2c4:	4621      	mov	r1, r4
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 80ae2c6:	d102      	bne.n	80ae2ce <mbedtls_aes_crypt_ecb+0x12>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
 80ae2c8:	bc10      	pop	{r4}
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 80ae2ca:	f7ff bc6b 	b.w	80adba4 <mbedtls_internal_aes_encrypt>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
 80ae2ce:	bc10      	pop	{r4}
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 80ae2d0:	f7ff be2e 	b.w	80adf30 <mbedtls_internal_aes_decrypt>

080ae2d4 <_ZL18pkcs12_fill_bufferPhjPKhj>:

#endif /* MBEDTLS_ASN1_PARSE_C */

static void pkcs12_fill_buffer( unsigned char *data, size_t data_len,
                                const unsigned char *filler, size_t fill_len )
{
 80ae2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80ae2d8:	4606      	mov	r6, r0
 80ae2da:	460c      	mov	r4, r1
 80ae2dc:	4617      	mov	r7, r2
 80ae2de:	4698      	mov	r8, r3
    unsigned char *p = data;
    size_t use_len;

    while( data_len > 0 )
 80ae2e0:	b15c      	cbz	r4, 80ae2fa <_ZL18pkcs12_fill_bufferPhjPKhj+0x26>
 80ae2e2:	4544      	cmp	r4, r8
 80ae2e4:	4625      	mov	r5, r4
 80ae2e6:	bf28      	it	cs
 80ae2e8:	4645      	movcs	r5, r8
    {
        use_len = ( data_len > fill_len ) ? fill_len : data_len;
        memcpy( p, filler, use_len );
 80ae2ea:	4630      	mov	r0, r6
 80ae2ec:	462a      	mov	r2, r5
 80ae2ee:	4639      	mov	r1, r7
 80ae2f0:	f004 fa81 	bl	80b27f6 <memcpy>
        p += use_len;
 80ae2f4:	442e      	add	r6, r5
        data_len -= use_len;
 80ae2f6:	1b64      	subs	r4, r4, r5
                                const unsigned char *filler, size_t fill_len )
{
    unsigned char *p = data;
    size_t use_len;

    while( data_len > 0 )
 80ae2f8:	e7f2      	b.n	80ae2e0 <_ZL18pkcs12_fill_bufferPhjPKhj+0xc>
 80ae2fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080ae300 <mbedtls_pkcs12_pbe_sha1_rc4_128>:
    mbedtls_platform_zeroize( key, sizeof( key ) );
    mbedtls_arc4_free( &ctx );

    return( ret );
#endif /* MBEDTLS_ARC4_C */
}
 80ae300:	4800      	ldr	r0, [pc, #0]	; (80ae304 <mbedtls_pkcs12_pbe_sha1_rc4_128+0x4>)
 80ae302:	4770      	bx	lr
 80ae304:	ffffe100 	.word	0xffffe100

080ae308 <mbedtls_pkcs12_derivation>:

int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
                       const unsigned char *pwd, size_t pwdlen,
                       const unsigned char *salt, size_t saltlen,
                       mbedtls_md_type_t md_type, int id, int iterations )
{
 80ae308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
 80ae30c:	2980      	cmp	r1, #128	; 0x80

int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
                       const unsigned char *pwd, size_t pwdlen,
                       const unsigned char *salt, size_t saltlen,
                       mbedtls_md_type_t md_type, int id, int iterations )
{
 80ae30e:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 80ae312:	9001      	str	r0, [sp, #4]
 80ae314:	460f      	mov	r7, r1
 80ae316:	4693      	mov	fp, r2
 80ae318:	4699      	mov	r9, r3
 80ae31a:	9da1      	ldr	r5, [sp, #644]	; 0x284

    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
 80ae31c:	f200 80c3 	bhi.w	80ae4a6 <mbedtls_pkcs12_derivation+0x19e>
 80ae320:	2b40      	cmp	r3, #64	; 0x40
 80ae322:	f200 80c0 	bhi.w	80ae4a6 <mbedtls_pkcs12_derivation+0x19e>
 80ae326:	2d40      	cmp	r5, #64	; 0x40
 80ae328:	f200 80bd 	bhi.w	80ae4a6 <mbedtls_pkcs12_derivation+0x19e>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( md_type );
 80ae32c:	f89d 0288 	ldrb.w	r0, [sp, #648]	; 0x288
 80ae330:	f7f9 ff0e 	bl	80a8150 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80ae334:	9000      	str	r0, [sp, #0]
 80ae336:	2800      	cmp	r0, #0
 80ae338:	f000 80b7 	beq.w	80ae4aa <mbedtls_pkcs12_derivation+0x1a2>
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    mbedtls_md_init( &md_ctx );
 80ae33c:	a803      	add	r0, sp, #12
 80ae33e:	f7f9 ff13 	bl	80a8168 <mbedtls_md_init>

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 80ae342:	2200      	movs	r2, #0
 80ae344:	9900      	ldr	r1, [sp, #0]
 80ae346:	a803      	add	r0, sp, #12
 80ae348:	f7f9 ff2e 	bl	80a81a8 <mbedtls_md_setup>
 80ae34c:	2800      	cmp	r0, #0
 80ae34e:	f040 80ad 	bne.w	80ae4ac <mbedtls_pkcs12_derivation+0x1a4>
        return( ret );
    hlen = mbedtls_md_get_size( md_info );
 80ae352:	9800      	ldr	r0, [sp, #0]
 80ae354:	f7fa f832 	bl	80a83bc <mbedtls_md_get_size>

    if( hlen <= 32 )
        v = 64;
 80ae358:	2820      	cmp	r0, #32
 80ae35a:	bf8c      	ite	hi
 80ae35c:	2480      	movhi	r4, #128	; 0x80
 80ae35e:	2440      	movls	r4, #64	; 0x40
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );
 80ae360:	4622      	mov	r2, r4
 80ae362:	f89d 128c 	ldrb.w	r1, [sp, #652]	; 0x28c

    mbedtls_md_init( &md_ctx );

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
        return( ret );
    hlen = mbedtls_md_get_size( md_info );
 80ae366:	4682      	mov	sl, r0
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
 80ae368:	f10d 08d8 	add.w	r8, sp, #216	; 0xd8
    if( hlen <= 32 )
        v = 64;
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );
 80ae36c:	a816      	add	r0, sp, #88	; 0x58
 80ae36e:	f004 fa68 	bl	80b2842 <memset>

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
 80ae372:	462b      	mov	r3, r5
 80ae374:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 80ae376:	4621      	mov	r1, r4
 80ae378:	4640      	mov	r0, r8
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );
 80ae37a:	ad56      	add	r5, sp, #344	; 0x158
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
 80ae37c:	f7ff ffaa 	bl	80ae2d4 <_ZL18pkcs12_fill_bufferPhjPKhj>
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );
 80ae380:	464b      	mov	r3, r9
 80ae382:	465a      	mov	r2, fp
 80ae384:	4621      	mov	r1, r4
 80ae386:	4628      	mov	r0, r5
 80ae388:	f7ff ffa4 	bl	80ae2d4 <_ZL18pkcs12_fill_bufferPhjPKhj>

        if( datalen == 0 )
            break;

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );
 80ae38c:	f50d 79ec 	add.w	r9, sp, #472	; 0x1d8

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );

    p = data;
    while( datalen > 0 )
 80ae390:	2f00      	cmp	r7, #0
 80ae392:	d072      	beq.n	80ae47a <mbedtls_pkcs12_derivation+0x172>
    {
        // Calculate hash( diversifier || salt_block || pwd_block )
        if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
 80ae394:	a803      	add	r0, sp, #12
 80ae396:	f7f9 ff29 	bl	80a81ec <mbedtls_md_starts>
 80ae39a:	4606      	mov	r6, r0
 80ae39c:	2800      	cmp	r0, #0
 80ae39e:	d16d      	bne.n	80ae47c <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, diversifier, v ) ) != 0 )
 80ae3a0:	4622      	mov	r2, r4
 80ae3a2:	a916      	add	r1, sp, #88	; 0x58
 80ae3a4:	a803      	add	r0, sp, #12
 80ae3a6:	f7f9 ff2b 	bl	80a8200 <mbedtls_md_update>
 80ae3aa:	4606      	mov	r6, r0
 80ae3ac:	2800      	cmp	r0, #0
 80ae3ae:	d165      	bne.n	80ae47c <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, salt_block, v ) ) != 0 )
 80ae3b0:	4622      	mov	r2, r4
 80ae3b2:	4641      	mov	r1, r8
 80ae3b4:	a803      	add	r0, sp, #12
 80ae3b6:	f7f9 ff23 	bl	80a8200 <mbedtls_md_update>
 80ae3ba:	4606      	mov	r6, r0
 80ae3bc:	2800      	cmp	r0, #0
 80ae3be:	d15d      	bne.n	80ae47c <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, pwd_block, v ) ) != 0 )
 80ae3c0:	4622      	mov	r2, r4
 80ae3c2:	4629      	mov	r1, r5
 80ae3c4:	a803      	add	r0, sp, #12
 80ae3c6:	f7f9 ff1b 	bl	80a8200 <mbedtls_md_update>
 80ae3ca:	4606      	mov	r6, r0
 80ae3cc:	2800      	cmp	r0, #0
 80ae3ce:	d155      	bne.n	80ae47c <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
 80ae3d0:	a906      	add	r1, sp, #24
 80ae3d2:	a803      	add	r0, sp, #12
 80ae3d4:	f7f9 ff1e 	bl	80a8214 <mbedtls_md_finish>
 80ae3d8:	4606      	mov	r6, r0
 80ae3da:	2800      	cmp	r0, #0
 80ae3dc:	d14e      	bne.n	80ae47c <mbedtls_pkcs12_derivation+0x174>
 80ae3de:	f04f 0b01 	mov.w	fp, #1
            goto exit;

        // Perform remaining ( iterations - 1 ) recursive hash calculations
        for( i = 1; i < (size_t) iterations; i++ )
 80ae3e2:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80ae3e4:	459b      	cmp	fp, r3
 80ae3e6:	d20b      	bcs.n	80ae400 <mbedtls_pkcs12_derivation+0xf8>
        {
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
 80ae3e8:	ab06      	add	r3, sp, #24
 80ae3ea:	4652      	mov	r2, sl
 80ae3ec:	4619      	mov	r1, r3
 80ae3ee:	9800      	ldr	r0, [sp, #0]
 80ae3f0:	f7f9 ff1a 	bl	80a8228 <mbedtls_md>
 80ae3f4:	4606      	mov	r6, r0
 80ae3f6:	2800      	cmp	r0, #0
 80ae3f8:	d140      	bne.n	80ae47c <mbedtls_pkcs12_derivation+0x174>

        if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
            goto exit;

        // Perform remaining ( iterations - 1 ) recursive hash calculations
        for( i = 1; i < (size_t) iterations; i++ )
 80ae3fa:	f10b 0b01 	add.w	fp, fp, #1
 80ae3fe:	e7f0      	b.n	80ae3e2 <mbedtls_pkcs12_derivation+0xda>
 80ae400:	4557      	cmp	r7, sl
 80ae402:	46bb      	mov	fp, r7
 80ae404:	bf28      	it	cs
 80ae406:	46d3      	movcs	fp, sl
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
                goto exit;
        }

        use_len = ( datalen > hlen ) ? hlen : datalen;
        memcpy( p, hash_output, use_len );
 80ae408:	a906      	add	r1, sp, #24
 80ae40a:	465a      	mov	r2, fp
 80ae40c:	9801      	ldr	r0, [sp, #4]
 80ae40e:	f004 f9f2 	bl	80b27f6 <memcpy>
        datalen -= use_len;
        p += use_len;
 80ae412:	9b01      	ldr	r3, [sp, #4]

        if( datalen == 0 )
 80ae414:	ebb7 070b 	subs.w	r7, r7, fp
        }

        use_len = ( datalen > hlen ) ? hlen : datalen;
        memcpy( p, hash_output, use_len );
        datalen -= use_len;
        p += use_len;
 80ae418:	445b      	add	r3, fp
 80ae41a:	9301      	str	r3, [sp, #4]

        if( datalen == 0 )
 80ae41c:	d02d      	beq.n	80ae47a <mbedtls_pkcs12_derivation+0x172>
            break;

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );
 80ae41e:	4653      	mov	r3, sl
 80ae420:	aa06      	add	r2, sp, #24
 80ae422:	4621      	mov	r1, r4
 80ae424:	4648      	mov	r0, r9
 80ae426:	f7ff ff55 	bl	80ae2d4 <_ZL18pkcs12_fill_bufferPhjPKhj>
 80ae42a:	eb09 0304 	add.w	r3, r9, r4

        // B += 1
        for( i = v; i > 0; i-- )
            if( ++hash_block[i - 1] != 0 )
 80ae42e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80ae432:	3201      	adds	r2, #1
 80ae434:	b2d2      	uxtb	r2, r2
 80ae436:	701a      	strb	r2, [r3, #0]
 80ae438:	b91a      	cbnz	r2, 80ae442 <mbedtls_pkcs12_derivation+0x13a>

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );

        // B += 1
        for( i = v; i > 0; i-- )
 80ae43a:	454b      	cmp	r3, r9
 80ae43c:	d1f7      	bne.n	80ae42e <mbedtls_pkcs12_derivation+0x126>
 80ae43e:	4623      	mov	r3, r4
 80ae440:	e001      	b.n	80ae446 <mbedtls_pkcs12_derivation+0x13e>
 80ae442:	4623      	mov	r3, r4
 80ae444:	2200      	movs	r2, #0

        // salt_block += B
        c = 0;
        for( i = v; i > 0; i-- )
        {
            j = salt_block[i - 1] + hash_block[i - 1] + c;
 80ae446:	3b01      	subs	r3, #1
 80ae448:	f818 0003 	ldrb.w	r0, [r8, r3]
 80ae44c:	f813 1009 	ldrb.w	r1, [r3, r9]
 80ae450:	4401      	add	r1, r0
 80ae452:	4411      	add	r1, r2
            c = (unsigned char) (j >> 8);
 80ae454:	f3c1 2207 	ubfx	r2, r1, #8, #8
            salt_block[i - 1] = j & 0xFF;
 80ae458:	f808 1003 	strb.w	r1, [r8, r3]
            if( ++hash_block[i - 1] != 0 )
                break;

        // salt_block += B
        c = 0;
        for( i = v; i > 0; i-- )
 80ae45c:	2b00      	cmp	r3, #0
 80ae45e:	d1f2      	bne.n	80ae446 <mbedtls_pkcs12_derivation+0x13e>
 80ae460:	4622      	mov	r2, r4

        // pwd_block  += B
        c = 0;
        for( i = v; i > 0; i-- )
        {
            j = pwd_block[i - 1] + hash_block[i - 1] + c;
 80ae462:	3a01      	subs	r2, #1
 80ae464:	5d50      	ldrb	r0, [r2, r5]
 80ae466:	f812 1009 	ldrb.w	r1, [r2, r9]
 80ae46a:	4401      	add	r1, r0
 80ae46c:	4419      	add	r1, r3
            c = (unsigned char) (j >> 8);
 80ae46e:	f3c1 2307 	ubfx	r3, r1, #8, #8
            pwd_block[i - 1] = j & 0xFF;
 80ae472:	5551      	strb	r1, [r2, r5]
            salt_block[i - 1] = j & 0xFF;
        }

        // pwd_block  += B
        c = 0;
        for( i = v; i > 0; i-- )
 80ae474:	2a00      	cmp	r2, #0
 80ae476:	d1f4      	bne.n	80ae462 <mbedtls_pkcs12_derivation+0x15a>
 80ae478:	e78a      	b.n	80ae390 <mbedtls_pkcs12_derivation+0x88>
            c = (unsigned char) (j >> 8);
            pwd_block[i - 1] = j & 0xFF;
        }
    }

    ret = 0;
 80ae47a:	2600      	movs	r6, #0

exit:
    mbedtls_platform_zeroize( salt_block, sizeof( salt_block ) );
 80ae47c:	2180      	movs	r1, #128	; 0x80
 80ae47e:	4640      	mov	r0, r8
 80ae480:	f7f7 ffc6 	bl	80a6410 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( pwd_block, sizeof( pwd_block ) );
 80ae484:	2180      	movs	r1, #128	; 0x80
 80ae486:	4628      	mov	r0, r5
 80ae488:	f7f7 ffc2 	bl	80a6410 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( hash_block, sizeof( hash_block ) );
 80ae48c:	2180      	movs	r1, #128	; 0x80
 80ae48e:	a876      	add	r0, sp, #472	; 0x1d8
 80ae490:	f7f7 ffbe 	bl	80a6410 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( hash_output, sizeof( hash_output ) );
 80ae494:	2140      	movs	r1, #64	; 0x40
 80ae496:	a806      	add	r0, sp, #24
 80ae498:	f7f7 ffba 	bl	80a6410 <mbedtls_platform_zeroize>

    mbedtls_md_free( &md_ctx );
 80ae49c:	a803      	add	r0, sp, #12
 80ae49e:	f7f9 fe68 	bl	80a8172 <mbedtls_md_free>

    return( ret );
 80ae4a2:	4630      	mov	r0, r6
 80ae4a4:	e002      	b.n	80ae4ac <mbedtls_pkcs12_derivation+0x1a4>
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
 80ae4a6:	4803      	ldr	r0, [pc, #12]	; (80ae4b4 <mbedtls_pkcs12_derivation+0x1ac>)
 80ae4a8:	e000      	b.n	80ae4ac <mbedtls_pkcs12_derivation+0x1a4>

    md_info = mbedtls_md_info_from_type( md_type );
    if( md_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
 80ae4aa:	4803      	ldr	r0, [pc, #12]	; (80ae4b8 <mbedtls_pkcs12_derivation+0x1b0>)
    mbedtls_platform_zeroize( hash_output, sizeof( hash_output ) );

    mbedtls_md_free( &md_ctx );

    return( ret );
}
 80ae4ac:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 80ae4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80ae4b4:	ffffe080 	.word	0xffffe080
 80ae4b8:	ffffe100 	.word	0xffffe100

080ae4bc <mbedtls_pkcs12_pbe>:
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
 80ae4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80ae4c0:	4604      	mov	r4, r0
 80ae4c2:	b0d9      	sub	sp, #356	; 0x164
    int ret, keylen = 0;
    unsigned char key[32];
    unsigned char iv[16];
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;
 80ae4c4:	2600      	movs	r6, #0

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
 80ae4c6:	4610      	mov	r0, r2
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
 80ae4c8:	468b      	mov	fp, r1
 80ae4ca:	4699      	mov	r9, r3
    int ret, keylen = 0;
    unsigned char key[32];
    unsigned char iv[16];
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;
 80ae4cc:	9606      	str	r6, [sp, #24]

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
 80ae4ce:	f7f2 ff05 	bl	80a12dc <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 80ae4d2:	4605      	mov	r5, r0
 80ae4d4:	2800      	cmp	r0, #0
 80ae4d6:	f000 80ac 	beq.w	80ae632 <mbedtls_pkcs12_pbe+0x176>
    int ret, iterations = 0;
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
 80ae4da:	9b63      	ldr	r3, [sp, #396]	; 0x18c

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;
 80ae4dc:	6847      	ldr	r7, [r0, #4]
    int ret, iterations = 0;
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
 80ae4de:	2b80      	cmp	r3, #128	; 0x80

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;
 80ae4e0:	ea4f 07d7 	mov.w	r7, r7, lsr #3

    if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, md_type, pwd, pwdlen,
                                          key, keylen,
                                          iv, cipher_info->iv_size ) ) != 0 )
 80ae4e4:	f8d0 800c 	ldr.w	r8, [r0, #12]
static int pkcs12_pbe_derive_key_iv( mbedtls_asn1_buf *pbe_params, mbedtls_md_type_t md_type,
                                     const unsigned char *pwd,  size_t pwdlen,
                                     unsigned char *key, size_t keylen,
                                     unsigned char *iv,  size_t ivlen )
{
    int ret, iterations = 0;
 80ae4e8:	9607      	str	r6, [sp, #28]
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
 80ae4ea:	d860      	bhi.n	80ae5ae <mbedtls_pkcs12_pbe+0xf2>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
    memset( &unipwd, 0, sizeof(unipwd) );
 80ae4ec:	4631      	mov	r1, r6
 80ae4ee:	f44f 7281 	mov.w	r2, #258	; 0x102
 80ae4f2:	a817      	add	r0, sp, #92	; 0x5c
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
 80ae4f4:	9608      	str	r6, [sp, #32]
 80ae4f6:	9609      	str	r6, [sp, #36]	; 0x24
 80ae4f8:	960a      	str	r6, [sp, #40]	; 0x28
    memset( &unipwd, 0, sizeof(unipwd) );
 80ae4fa:	f004 f9a2 	bl	80b2842 <memset>
static int pkcs12_parse_pbe_params( mbedtls_asn1_buf *params,
                                    mbedtls_asn1_buf *salt, int *iterations )
{
    int ret;
    unsigned char **p = &params->p;
    const unsigned char *end = params->p + params->len;
 80ae4fe:	6863      	ldr	r3, [r4, #4]
 80ae500:	68a6      	ldr	r6, [r4, #8]

static int pkcs12_parse_pbe_params( mbedtls_asn1_buf *params,
                                    mbedtls_asn1_buf *salt, int *iterations )
{
    int ret;
    unsigned char **p = &params->p;
 80ae502:	f104 0a08 	add.w	sl, r4, #8
    const unsigned char *end = params->p + params->len;
 80ae506:	441e      	add	r6, r3
     *    salt          OCTET STRING,
     *    iterations    INTEGER
     *  }
     *
     */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80ae508:	6823      	ldr	r3, [r4, #0]
 80ae50a:	2b30      	cmp	r3, #48	; 0x30
 80ae50c:	f040 8093 	bne.w	80ae636 <mbedtls_pkcs12_pbe+0x17a>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 80ae510:	2304      	movs	r3, #4
 80ae512:	aa09      	add	r2, sp, #36	; 0x24
 80ae514:	4631      	mov	r1, r6
 80ae516:	4650      	mov	r0, sl
 80ae518:	f7f3 f8a8 	bl	80a166c <mbedtls_asn1_get_tag>
 80ae51c:	b950      	cbnz	r0, 80ae534 <mbedtls_pkcs12_pbe+0x78>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    salt->p = *p;
 80ae51e:	68a2      	ldr	r2, [r4, #8]
    *p += salt->len;
 80ae520:	9b09      	ldr	r3, [sp, #36]	; 0x24
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    salt->p = *p;
 80ae522:	920a      	str	r2, [sp, #40]	; 0x28
    *p += salt->len;
 80ae524:	4413      	add	r3, r2
 80ae526:	60a3      	str	r3, [r4, #8]

    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
 80ae528:	aa07      	add	r2, sp, #28
 80ae52a:	4631      	mov	r1, r6
 80ae52c:	4650      	mov	r0, sl
 80ae52e:	f7f3 f8ca 	bl	80a16c6 <mbedtls_asn1_get_int>
 80ae532:	b118      	cbz	r0, 80ae53c <mbedtls_pkcs12_pbe+0x80>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );
 80ae534:	f5a0 50f4 	sub.w	r0, r0, #7808	; 0x1e80
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
    memset( &unipwd, 0, sizeof(unipwd) );

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
 80ae538:	b118      	cbz	r0, 80ae542 <mbedtls_pkcs12_pbe+0x86>
 80ae53a:	e07f      	b.n	80ae63c <mbedtls_pkcs12_pbe+0x180>
    *p += salt->len;

    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    if( *p != end )
 80ae53c:	68a3      	ldr	r3, [r4, #8]
 80ae53e:	429e      	cmp	r6, r3
 80ae540:	d17b      	bne.n	80ae63a <mbedtls_pkcs12_pbe+0x17e>
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
 80ae542:	2300      	movs	r3, #0

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
                                         &iterations ) ) != 0 )
        return( ret );

    for( i = 0; i < pwdlen; i++ )
 80ae544:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 80ae546:	429a      	cmp	r2, r3
 80ae548:	d007      	beq.n	80ae55a <mbedtls_pkcs12_pbe+0x9e>
        unipwd[i * 2 + 1] = pwd[i];
 80ae54a:	9962      	ldr	r1, [sp, #392]	; 0x188
 80ae54c:	aa17      	add	r2, sp, #92	; 0x5c
 80ae54e:	5cc9      	ldrb	r1, [r1, r3]
 80ae550:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80ae554:	7051      	strb	r1, [r2, #1]

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
                                         &iterations ) ) != 0 )
        return( ret );

    for( i = 0; i < pwdlen; i++ )
 80ae556:	3301      	adds	r3, #1
 80ae558:	e7f4      	b.n	80ae544 <mbedtls_pkcs12_pbe+0x88>
        unipwd[i * 2 + 1] = pwd[i];

    if( ( ret = mbedtls_pkcs12_derivation( key, keylen, unipwd, pwdlen * 2 + 2,
 80ae55a:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 80ae55c:	f8cd 9008 	str.w	r9, [sp, #8]
 80ae560:	1c5c      	adds	r4, r3, #1
 80ae562:	9b07      	ldr	r3, [sp, #28]
 80ae564:	0064      	lsls	r4, r4, #1
 80ae566:	9304      	str	r3, [sp, #16]
 80ae568:	2301      	movs	r3, #1
 80ae56a:	9303      	str	r3, [sp, #12]
 80ae56c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80ae56e:	aa17      	add	r2, sp, #92	; 0x5c
 80ae570:	9301      	str	r3, [sp, #4]
 80ae572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80ae574:	4639      	mov	r1, r7
 80ae576:	9300      	str	r3, [sp, #0]
 80ae578:	a80f      	add	r0, sp, #60	; 0x3c
 80ae57a:	4623      	mov	r3, r4
 80ae57c:	f7ff fec4 	bl	80ae308 <mbedtls_pkcs12_derivation>
 80ae580:	2800      	cmp	r0, #0
 80ae582:	d15b      	bne.n	80ae63c <mbedtls_pkcs12_pbe+0x180>
                                   MBEDTLS_PKCS12_DERIVE_KEY, iterations ) ) != 0 )
    {
        return( ret );
    }

    if( iv == NULL || ivlen == 0 )
 80ae584:	f1b8 0f00 	cmp.w	r8, #0
 80ae588:	d013      	beq.n	80ae5b2 <mbedtls_pkcs12_pbe+0xf6>
        return( 0 );

    if( ( ret = mbedtls_pkcs12_derivation( iv, ivlen, unipwd, pwdlen * 2 + 2,
 80ae58a:	9b07      	ldr	r3, [sp, #28]
 80ae58c:	f8cd 9008 	str.w	r9, [sp, #8]
 80ae590:	9304      	str	r3, [sp, #16]
 80ae592:	2302      	movs	r3, #2
 80ae594:	9303      	str	r3, [sp, #12]
 80ae596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80ae598:	aa17      	add	r2, sp, #92	; 0x5c
 80ae59a:	9301      	str	r3, [sp, #4]
 80ae59c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80ae59e:	4641      	mov	r1, r8
 80ae5a0:	9300      	str	r3, [sp, #0]
 80ae5a2:	a80b      	add	r0, sp, #44	; 0x2c
 80ae5a4:	4623      	mov	r3, r4
 80ae5a6:	f7ff feaf 	bl	80ae308 <mbedtls_pkcs12_derivation>
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;

    if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, md_type, pwd, pwdlen,
 80ae5aa:	b110      	cbz	r0, 80ae5b2 <mbedtls_pkcs12_pbe+0xf6>
 80ae5ac:	e046      	b.n	80ae63c <mbedtls_pkcs12_pbe+0x180>
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
 80ae5ae:	4825      	ldr	r0, [pc, #148]	; (80ae644 <mbedtls_pkcs12_pbe+0x188>)
 80ae5b0:	e044      	b.n	80ae63c <mbedtls_pkcs12_pbe+0x180>
                                          iv, cipher_info->iv_size ) ) != 0 )
    {
        return( ret );
    }

    mbedtls_cipher_init( &cipher_ctx );
 80ae5b2:	a817      	add	r0, sp, #92	; 0x5c
 80ae5b4:	f7f2 feb4 	bl	80a1320 <mbedtls_cipher_init>

    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
 80ae5b8:	4629      	mov	r1, r5
 80ae5ba:	a817      	add	r0, sp, #92	; 0x5c
 80ae5bc:	f7f2 fec4 	bl	80a1348 <mbedtls_cipher_setup>
 80ae5c0:	4604      	mov	r4, r0
 80ae5c2:	bb48      	cbnz	r0, 80ae618 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
 80ae5c4:	fa4f f38b 	sxtb.w	r3, fp
 80ae5c8:	00fa      	lsls	r2, r7, #3
 80ae5ca:	a90f      	add	r1, sp, #60	; 0x3c
 80ae5cc:	a817      	add	r0, sp, #92	; 0x5c
 80ae5ce:	f7f2 fed3 	bl	80a1378 <mbedtls_cipher_setkey>
 80ae5d2:	4604      	mov	r4, r0
 80ae5d4:	bb00      	cbnz	r0, 80ae618 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_set_iv( &cipher_ctx, iv, cipher_info->iv_size ) ) != 0 )
 80ae5d6:	68ea      	ldr	r2, [r5, #12]
 80ae5d8:	a90b      	add	r1, sp, #44	; 0x2c
 80ae5da:	a817      	add	r0, sp, #92	; 0x5c
 80ae5dc:	f7f2 feec 	bl	80a13b8 <mbedtls_cipher_set_iv>
 80ae5e0:	4604      	mov	r4, r0
 80ae5e2:	b9c8      	cbnz	r0, 80ae618 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_reset( &cipher_ctx ) ) != 0 )
 80ae5e4:	a817      	add	r0, sp, #92	; 0x5c
 80ae5e6:	f7f2 ff07 	bl	80a13f8 <mbedtls_cipher_reset>
 80ae5ea:	4604      	mov	r4, r0
 80ae5ec:	b9a0      	cbnz	r0, 80ae618 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_update( &cipher_ctx, data, len,
 80ae5ee:	ad06      	add	r5, sp, #24
 80ae5f0:	9500      	str	r5, [sp, #0]
 80ae5f2:	a964      	add	r1, sp, #400	; 0x190
 80ae5f4:	c90e      	ldmia	r1, {r1, r2, r3}
 80ae5f6:	a817      	add	r0, sp, #92	; 0x5c
 80ae5f8:	f7f2 ff08 	bl	80a140c <mbedtls_cipher_update>
 80ae5fc:	4604      	mov	r4, r0
 80ae5fe:	b958      	cbnz	r0, 80ae618 <mbedtls_pkcs12_pbe+0x15c>
                                output, &olen ) ) != 0 )
    {
        goto exit;
    }

    if( ( ret = mbedtls_cipher_finish( &cipher_ctx, output + olen, &olen ) ) != 0 )
 80ae600:	6829      	ldr	r1, [r5, #0]
 80ae602:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80ae604:	462a      	mov	r2, r5
 80ae606:	4419      	add	r1, r3
 80ae608:	a817      	add	r0, sp, #92	; 0x5c
 80ae60a:	f7f2 ff43 	bl	80a1494 <mbedtls_cipher_finish>
        ret = MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH;
 80ae60e:	f5a4 54f0 	sub.w	r4, r4, #7680	; 0x1e00
 80ae612:	2800      	cmp	r0, #0
 80ae614:	bf08      	it	eq
 80ae616:	2400      	moveq	r4, #0

exit:
    mbedtls_platform_zeroize( key, sizeof( key ) );
 80ae618:	2120      	movs	r1, #32
 80ae61a:	a80f      	add	r0, sp, #60	; 0x3c
 80ae61c:	f7f7 fef8 	bl	80a6410 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( iv,  sizeof( iv  ) );
 80ae620:	2110      	movs	r1, #16
 80ae622:	a80b      	add	r0, sp, #44	; 0x2c
 80ae624:	f7f7 fef4 	bl	80a6410 <mbedtls_platform_zeroize>
    mbedtls_cipher_free( &cipher_ctx );
 80ae628:	a817      	add	r0, sp, #92	; 0x5c
 80ae62a:	f7f2 fe7d 	bl	80a1328 <mbedtls_cipher_free>

    return( ret );
 80ae62e:	4620      	mov	r0, r4
 80ae630:	e004      	b.n	80ae63c <mbedtls_pkcs12_pbe+0x180>
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
 80ae632:	4805      	ldr	r0, [pc, #20]	; (80ae648 <mbedtls_pkcs12_pbe+0x18c>)
 80ae634:	e002      	b.n	80ae63c <mbedtls_pkcs12_pbe+0x180>
     *  }
     *
     */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80ae636:	4805      	ldr	r0, [pc, #20]	; (80ae64c <mbedtls_pkcs12_pbe+0x190>)
 80ae638:	e000      	b.n	80ae63c <mbedtls_pkcs12_pbe+0x180>
    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    if( *p != end )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80ae63a:	4805      	ldr	r0, [pc, #20]	; (80ae650 <mbedtls_pkcs12_pbe+0x194>)
    mbedtls_platform_zeroize( key, sizeof( key ) );
    mbedtls_platform_zeroize( iv,  sizeof( iv  ) );
    mbedtls_cipher_free( &cipher_ctx );

    return( ret );
}
 80ae63c:	b059      	add	sp, #356	; 0x164
 80ae63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80ae642:	bf00      	nop
 80ae644:	ffffe080 	.word	0xffffe080
 80ae648:	ffffe100 	.word	0xffffe100
 80ae64c:	ffffe11e 	.word	0xffffe11e
 80ae650:	ffffe11a 	.word	0xffffe11a

080ae654 <mbedtls_sha512_init>:

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
    SHA512_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
 80ae654:	22d8      	movs	r2, #216	; 0xd8
 80ae656:	2100      	movs	r1, #0
 80ae658:	f004 b8f3 	b.w	80b2842 <memset>

080ae65c <mbedtls_sha512_free>:
}

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
    if( ctx == NULL )
 80ae65c:	b110      	cbz	r0, 80ae664 <mbedtls_sha512_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
 80ae65e:	21d8      	movs	r1, #216	; 0xd8
 80ae660:	f7f7 bed6 	b.w	80a6410 <mbedtls_platform_zeroize>
 80ae664:	4770      	bx	lr

080ae666 <mbedtls_sha512_clone>:
}

void mbedtls_sha512_clone( mbedtls_sha512_context *dst,
                           const mbedtls_sha512_context *src )
{
 80ae666:	b508      	push	{r3, lr}
    SHA512_VALIDATE( dst != NULL );
    SHA512_VALIDATE( src != NULL );

    *dst = *src;
 80ae668:	22d8      	movs	r2, #216	; 0xd8
 80ae66a:	f004 f8c4 	bl	80b27f6 <memcpy>
 80ae66e:	bd08      	pop	{r3, pc}

080ae670 <mbedtls_sha512_starts_ret>:
int mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )
{
    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );

    ctx->total[0] = 0;
 80ae670:	2200      	movs	r2, #0
 80ae672:	2300      	movs	r3, #0
 80ae674:	e9c0 2300 	strd	r2, r3, [r0]
    ctx->total[1] = 0;
 80ae678:	e9c0 2302 	strd	r2, r3, [r0, #8]

    if( is384 == 0 )
 80ae67c:	bb31      	cbnz	r1, 80ae6cc <mbedtls_sha512_starts_ret+0x5c>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
 80ae67e:	a32a      	add	r3, pc, #168	; (adr r3, 80ae728 <mbedtls_sha512_starts_ret+0xb8>)
 80ae680:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ae684:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
 80ae688:	a329      	add	r3, pc, #164	; (adr r3, 80ae730 <mbedtls_sha512_starts_ret+0xc0>)
 80ae68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ae68e:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
 80ae692:	a329      	add	r3, pc, #164	; (adr r3, 80ae738 <mbedtls_sha512_starts_ret+0xc8>)
 80ae694:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ae698:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
 80ae69c:	a328      	add	r3, pc, #160	; (adr r3, 80ae740 <mbedtls_sha512_starts_ret+0xd0>)
 80ae69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ae6a2:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
 80ae6a6:	a328      	add	r3, pc, #160	; (adr r3, 80ae748 <mbedtls_sha512_starts_ret+0xd8>)
 80ae6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ae6ac:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
 80ae6b0:	a327      	add	r3, pc, #156	; (adr r3, 80ae750 <mbedtls_sha512_starts_ret+0xe0>)
 80ae6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ae6b6:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
 80ae6ba:	a327      	add	r3, pc, #156	; (adr r3, 80ae758 <mbedtls_sha512_starts_ret+0xe8>)
 80ae6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ae6c0:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
 80ae6c4:	a326      	add	r3, pc, #152	; (adr r3, 80ae760 <mbedtls_sha512_starts_ret+0xf0>)
 80ae6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ae6ca:	e025      	b.n	80ae718 <mbedtls_sha512_starts_ret+0xa8>
    }
    else
    {
        /* SHA-384 */
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
 80ae6cc:	a326      	add	r3, pc, #152	; (adr r3, 80ae768 <mbedtls_sha512_starts_ret+0xf8>)
 80ae6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ae6d2:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
 80ae6d6:	a326      	add	r3, pc, #152	; (adr r3, 80ae770 <mbedtls_sha512_starts_ret+0x100>)
 80ae6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ae6dc:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
 80ae6e0:	a325      	add	r3, pc, #148	; (adr r3, 80ae778 <mbedtls_sha512_starts_ret+0x108>)
 80ae6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ae6e6:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
 80ae6ea:	a325      	add	r3, pc, #148	; (adr r3, 80ae780 <mbedtls_sha512_starts_ret+0x110>)
 80ae6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ae6f0:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
 80ae6f4:	a324      	add	r3, pc, #144	; (adr r3, 80ae788 <mbedtls_sha512_starts_ret+0x118>)
 80ae6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ae6fa:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
 80ae6fe:	a324      	add	r3, pc, #144	; (adr r3, 80ae790 <mbedtls_sha512_starts_ret+0x120>)
 80ae700:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ae704:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
 80ae708:	a323      	add	r3, pc, #140	; (adr r3, 80ae798 <mbedtls_sha512_starts_ret+0x128>)
 80ae70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ae70e:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 80ae712:	a323      	add	r3, pc, #140	; (adr r3, 80ae7a0 <mbedtls_sha512_starts_ret+0x130>)
 80ae714:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ae718:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    }

    ctx->is384 = is384;
 80ae71c:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0

    return( 0 );
}
 80ae720:	2000      	movs	r0, #0
 80ae722:	4770      	bx	lr
 80ae724:	f3af 8000 	nop.w
 80ae728:	f3bcc908 	.word	0xf3bcc908
 80ae72c:	6a09e667 	.word	0x6a09e667
 80ae730:	84caa73b 	.word	0x84caa73b
 80ae734:	bb67ae85 	.word	0xbb67ae85
 80ae738:	fe94f82b 	.word	0xfe94f82b
 80ae73c:	3c6ef372 	.word	0x3c6ef372
 80ae740:	5f1d36f1 	.word	0x5f1d36f1
 80ae744:	a54ff53a 	.word	0xa54ff53a
 80ae748:	ade682d1 	.word	0xade682d1
 80ae74c:	510e527f 	.word	0x510e527f
 80ae750:	2b3e6c1f 	.word	0x2b3e6c1f
 80ae754:	9b05688c 	.word	0x9b05688c
 80ae758:	fb41bd6b 	.word	0xfb41bd6b
 80ae75c:	1f83d9ab 	.word	0x1f83d9ab
 80ae760:	137e2179 	.word	0x137e2179
 80ae764:	5be0cd19 	.word	0x5be0cd19
 80ae768:	c1059ed8 	.word	0xc1059ed8
 80ae76c:	cbbb9d5d 	.word	0xcbbb9d5d
 80ae770:	367cd507 	.word	0x367cd507
 80ae774:	629a292a 	.word	0x629a292a
 80ae778:	3070dd17 	.word	0x3070dd17
 80ae77c:	9159015a 	.word	0x9159015a
 80ae780:	f70e5939 	.word	0xf70e5939
 80ae784:	152fecd8 	.word	0x152fecd8
 80ae788:	ffc00b31 	.word	0xffc00b31
 80ae78c:	67332667 	.word	0x67332667
 80ae790:	68581511 	.word	0x68581511
 80ae794:	8eb44a87 	.word	0x8eb44a87
 80ae798:	64f98fa7 	.word	0x64f98fa7
 80ae79c:	db0c2e0d 	.word	0xdb0c2e0d
 80ae7a0:	befa4fa4 	.word	0xbefa4fa4
 80ae7a4:	47b5481d 	.word	0x47b5481d

080ae7a8 <mbedtls_internal_sha512_process>:
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

int mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,
                                     const unsigned char data[128] )
{
 80ae7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80ae7ac:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
 80ae7b0:	4686      	mov	lr, r0
 80ae7b2:	f50d 7cf8 	add.w	ip, sp, #496	; 0x1f0
        temp1 = (h) + S3(e) + F1((e),(f),(g)) + (K) + (x);      \
        temp2 = S2(a) + F0((a),(b),(c));                        \
        (d) += temp1; (h) = temp1 + temp2;                      \
    } while( 0 )

    for( i = 0; i < 16; i++ )
 80ae7b6:	2000      	movs	r0, #0
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 80ae7b8:	eb01 04c0 	add.w	r4, r1, r0, lsl #3
 80ae7bc:	f811 2030 	ldrb.w	r2, [r1, r0, lsl #3]
 80ae7c0:	7866      	ldrb	r6, [r4, #1]
 80ae7c2:	f04f 0a00 	mov.w	sl, #0
 80ae7c6:	ea4f 6b02 	mov.w	fp, r2, lsl #24
 80ae7ca:	0436      	lsls	r6, r6, #16
 80ae7cc:	2300      	movs	r3, #0
 80ae7ce:	ea43 030b 	orr.w	r3, r3, fp
 80ae7d2:	9609      	str	r6, [sp, #36]	; 0x24
 80ae7d4:	f8cd a020 	str.w	sl, [sp, #32]
 80ae7d8:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
 80ae7dc:	431e      	orrs	r6, r3
 80ae7de:	4633      	mov	r3, r6
 80ae7e0:	79e2      	ldrb	r2, [r4, #7]
 80ae7e2:	78a6      	ldrb	r6, [r4, #2]
 80ae7e4:	ea42 020a 	orr.w	r2, r2, sl
 80ae7e8:	4315      	orrs	r5, r2
 80ae7ea:	462a      	mov	r2, r5
 80ae7ec:	0236      	lsls	r6, r6, #8
 80ae7ee:	960b      	str	r6, [sp, #44]	; 0x2c
 80ae7f0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80ae7f4:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 80ae7f8:	431e      	orrs	r6, r3
 80ae7fa:	4633      	mov	r3, r6
 80ae7fc:	4315      	orrs	r5, r2
 80ae7fe:	78e6      	ldrb	r6, [r4, #3]
 80ae800:	462a      	mov	r2, r5
 80ae802:	960d      	str	r6, [sp, #52]	; 0x34
 80ae804:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80ae808:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 80ae80c:	431e      	orrs	r6, r3
 80ae80e:	4633      	mov	r3, r6
 80ae810:	7926      	ldrb	r6, [r4, #4]
 80ae812:	4315      	orrs	r5, r2
 80ae814:	462a      	mov	r2, r5
 80ae816:	0635      	lsls	r5, r6, #24
 80ae818:	f8cd a014 	str.w	sl, [sp, #20]
 80ae81c:	9504      	str	r5, [sp, #16]
 80ae81e:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
 80ae822:	431e      	orrs	r6, r3
 80ae824:	4633      	mov	r3, r6
 80ae826:	7966      	ldrb	r6, [r4, #5]
 80ae828:	4315      	orrs	r5, r2
 80ae82a:	462a      	mov	r2, r5
 80ae82c:	0435      	lsls	r5, r6, #16
 80ae82e:	f8cd a01c 	str.w	sl, [sp, #28]
 80ae832:	9506      	str	r5, [sp, #24]
 80ae834:	e9dd 5606 	ldrd	r5, r6, [sp, #24]
 80ae838:	431e      	orrs	r6, r3
 80ae83a:	4633      	mov	r3, r6
 80ae83c:	79a6      	ldrb	r6, [r4, #6]
 80ae83e:	4315      	orrs	r5, r2
 80ae840:	ea4f 2806 	mov.w	r8, r6, lsl #8
        temp1 = (h) + S3(e) + F1((e),(f),(g)) + (K) + (x);      \
        temp2 = S2(a) + F0((a),(b),(c));                        \
        (d) += temp1; (h) = temp1 + temp2;                      \
    } while( 0 )

    for( i = 0; i < 16; i++ )
 80ae844:	3001      	adds	r0, #1
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 80ae846:	ea45 0208 	orr.w	r2, r5, r8
 80ae84a:	ea43 030a 	orr.w	r3, r3, sl
        temp1 = (h) + S3(e) + F1((e),(f),(g)) + (K) + (x);      \
        temp2 = S2(a) + F0((a),(b),(c));                        \
        (d) += temp1; (h) = temp1 + temp2;                      \
    } while( 0 )

    for( i = 0; i < 16; i++ )
 80ae84e:	2810      	cmp	r0, #16
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 80ae850:	e9ec 2302 	strd	r2, r3, [ip, #8]!
        temp1 = (h) + S3(e) + F1((e),(f),(g)) + (K) + (x);      \
        temp2 = S2(a) + F0((a),(b),(c));                        \
        (d) += temp1; (h) = temp1 + temp2;                      \
    } while( 0 )

    for( i = 0; i < 16; i++ )
 80ae854:	d1b0      	bne.n	80ae7b8 <mbedtls_internal_sha512_process+0x10>
 80ae856:	a97e      	add	r1, sp, #504	; 0x1f8
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
 80ae858:	6f0a      	ldr	r2, [r1, #112]	; 0x70
 80ae85a:	6f4b      	ldr	r3, [r1, #116]	; 0x74
               S0(W[i - 15]) + W[i - 16];
 80ae85c:	0cd4      	lsrs	r4, r2, #19
 80ae85e:	ea44 3443 	orr.w	r4, r4, r3, lsl #13
 80ae862:	940e      	str	r4, [sp, #56]	; 0x38
 80ae864:	0cdc      	lsrs	r4, r3, #19
 80ae866:	ea44 3442 	orr.w	r4, r4, r2, lsl #13
 80ae86a:	940f      	str	r4, [sp, #60]	; 0x3c
 80ae86c:	00dc      	lsls	r4, r3, #3
 80ae86e:	ea44 7452 	orr.w	r4, r4, r2, lsr #29
 80ae872:	9411      	str	r4, [sp, #68]	; 0x44
 80ae874:	00d4      	lsls	r4, r2, #3
 80ae876:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 80ae87a:	0992      	lsrs	r2, r2, #6
 80ae87c:	ea42 6283 	orr.w	r2, r2, r3, lsl #26
 80ae880:	9410      	str	r4, [sp, #64]	; 0x40
 80ae882:	099b      	lsrs	r3, r3, #6
 80ae884:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 80ae888:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 80ae88c:	9200      	str	r2, [sp, #0]
 80ae88e:	4066      	eors	r6, r4
 80ae890:	9301      	str	r3, [sp, #4]
 80ae892:	406f      	eors	r7, r5
 80ae894:	e9dd 3400 	ldrd	r3, r4, [sp]
 80ae898:	4073      	eors	r3, r6
 80ae89a:	461e      	mov	r6, r3
 80ae89c:	e9d1 2300 	ldrd	r2, r3, [r1]
 80ae8a0:	407c      	eors	r4, r7
 80ae8a2:	4627      	mov	r7, r4
 80ae8a4:	e9d1 4512 	ldrd	r4, r5, [r1, #72]	; 0x48
 80ae8a8:	f8d1 8008 	ldr.w	r8, [r1, #8]
 80ae8ac:	1912      	adds	r2, r2, r4
 80ae8ae:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80ae8b2:	416b      	adcs	r3, r5
 80ae8b4:	18b4      	adds	r4, r6, r2
 80ae8b6:	eb47 0503 	adc.w	r5, r7, r3
 80ae8ba:	ea4f 0358 	mov.w	r3, r8, lsr #1
 80ae8be:	ea43 73cc 	orr.w	r3, r3, ip, lsl #31
 80ae8c2:	9312      	str	r3, [sp, #72]	; 0x48
 80ae8c4:	ea4f 035c 	mov.w	r3, ip, lsr #1
 80ae8c8:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
 80ae8cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80ae8ce:	ea4f 2318 	mov.w	r3, r8, lsr #8
 80ae8d2:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 80ae8d6:	9314      	str	r3, [sp, #80]	; 0x50
 80ae8d8:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80ae8dc:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 80ae8e0:	9315      	str	r3, [sp, #84]	; 0x54
 80ae8e2:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 80ae8e6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80ae8ea:	4072      	eors	r2, r6
 80ae8ec:	ea4f 16d8 	mov.w	r6, r8, lsr #7
 80ae8f0:	ea46 664c 	orr.w	r6, r6, ip, lsl #25
 80ae8f4:	9602      	str	r6, [sp, #8]
 80ae8f6:	ea4f 16dc 	mov.w	r6, ip, lsr #7
 80ae8fa:	9603      	str	r6, [sp, #12]
 80ae8fc:	407b      	eors	r3, r7
 80ae8fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80ae902:	4056      	eors	r6, r2
 80ae904:	1932      	adds	r2, r6, r4
 80ae906:	ea87 0703 	eor.w	r7, r7, r3
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
 80ae90a:	f100 0001 	add.w	r0, r0, #1
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
 80ae90e:	eb47 0305 	adc.w	r3, r7, r5
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
 80ae912:	2850      	cmp	r0, #80	; 0x50
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
 80ae914:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 80ae918:	f101 0108 	add.w	r1, r1, #8
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
 80ae91c:	d19c      	bne.n	80ae858 <mbedtls_internal_sha512_process+0xb0>
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
 80ae91e:	e9de 3404 	ldrd	r3, r4, [lr, #16]
 80ae922:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
    B = ctx->state[1];
 80ae926:	e9de 3406 	ldrd	r3, r4, [lr, #24]
 80ae92a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    C = ctx->state[2];
 80ae92e:	e9de 3408 	ldrd	r3, r4, [lr, #32]
 80ae932:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
    D = ctx->state[3];
 80ae936:	e9de 340a 	ldrd	r3, r4, [lr, #40]	; 0x28
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
 80ae93a:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
    D = ctx->state[3];
 80ae93e:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
    E = ctx->state[4];
 80ae942:	e9de 340c 	ldrd	r3, r4, [lr, #48]	; 0x30
 80ae946:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
    F = ctx->state[5];
 80ae94a:	e9de 340e 	ldrd	r3, r4, [lr, #56]	; 0x38
 80ae94e:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60
    G = ctx->state[6];
 80ae952:	e9de 3410 	ldrd	r3, r4, [lr, #64]	; 0x40
 80ae956:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
 80ae95a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
    H = ctx->state[7];
 80ae95e:	e9de 3412 	ldrd	r3, r4, [lr, #72]	; 0x48
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
 80ae962:	e9cd 0106 	strd	r0, r1, [sp, #24]
    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
 80ae966:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
    G = ctx->state[6];
    H = ctx->state[7];
 80ae96a:	e9cd 341c 	strd	r3, r4, [sp, #112]	; 0x70
 80ae96e:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80ae972:	4b0b      	ldr	r3, [pc, #44]	; (80ae9a0 <mbedtls_internal_sha512_process+0x1f8>)
    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
 80ae974:	e9cd 0108 	strd	r0, r1, [sp, #32]

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
 80ae978:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 80ae97c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    }

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
 80ae980:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80ae984:	e9cd 0100 	strd	r0, r1, [sp]
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
 80ae988:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80ae98c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
 80ae990:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80ae994:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80ae998:	aa80      	add	r2, sp, #512	; 0x200
 80ae99a:	f503 7c20 	add.w	ip, r3, #640	; 0x280
 80ae99e:	e001      	b.n	80ae9a4 <mbedtls_internal_sha512_process+0x1fc>
 80ae9a0:	080b5828 	.word	0x080b5828
    H = ctx->state[7];
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 80ae9a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80ae9a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80ae9a8:	0b89      	lsrs	r1, r1, #14
 80ae9aa:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 80ae9ae:	911e      	str	r1, [sp, #120]	; 0x78
 80ae9b0:	0b81      	lsrs	r1, r0, #14
 80ae9b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80ae9b4:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 80ae9b8:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 80ae9bc:	911f      	str	r1, [sp, #124]	; 0x7c
 80ae9be:	0c81      	lsrs	r1, r0, #18
 80ae9c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80ae9c2:	e9dd 671e 	ldrd	r6, r7, [sp, #120]	; 0x78
 80ae9c6:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 80ae9ca:	9120      	str	r1, [sp, #128]	; 0x80
 80ae9cc:	0c81      	lsrs	r1, r0, #18
 80ae9ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80ae9d0:	3340      	adds	r3, #64	; 0x40
 80ae9d2:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 80ae9d6:	9121      	str	r1, [sp, #132]	; 0x84
 80ae9d8:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 80ae9dc:	404f      	eors	r7, r1
 80ae9de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80ae9e0:	4046      	eors	r6, r0
 80ae9e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80ae9e4:	05c9      	lsls	r1, r1, #23
 80ae9e6:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 80ae9ea:	9123      	str	r1, [sp, #140]	; 0x8c
 80ae9ec:	05c1      	lsls	r1, r0, #23
 80ae9ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80ae9f0:	3240      	adds	r2, #64	; 0x40
 80ae9f2:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 80ae9f6:	9122      	str	r1, [sp, #136]	; 0x88
 80ae9f8:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 80ae9fc:	4070      	eors	r0, r6
 80ae9fe:	4079      	eors	r1, r7
 80aea00:	4606      	mov	r6, r0
 80aea02:	460f      	mov	r7, r1
 80aea04:	e952 0112 	ldrd	r0, r1, [r2, #-72]	; 0x48
 80aea08:	1900      	adds	r0, r0, r4
 80aea0a:	4169      	adcs	r1, r5
 80aea0c:	1836      	adds	r6, r6, r0
 80aea0e:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 80aea12:	414f      	adcs	r7, r1
 80aea14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80aea18:	4060      	eors	r0, r4
 80aea1a:	4069      	eors	r1, r5
 80aea1c:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 80aea20:	4004      	ands	r4, r0
 80aea22:	4620      	mov	r0, r4
 80aea24:	400d      	ands	r5, r1
 80aea26:	4629      	mov	r1, r5
 80aea28:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80aea2c:	4044      	eors	r4, r0
 80aea2e:	1936      	adds	r6, r6, r4
 80aea30:	ea85 0501 	eor.w	r5, r5, r1
 80aea34:	416f      	adcs	r7, r5
 80aea36:	eb18 0806 	adds.w	r8, r8, r6
 80aea3a:	eb49 0907 	adc.w	r9, r9, r7
 80aea3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80aea42:	eb10 0008 	adds.w	r0, r0, r8
 80aea46:	eb41 0109 	adc.w	r1, r1, r9
 80aea4a:	e9cd 0100 	strd	r0, r1, [sp]
 80aea4e:	9904      	ldr	r1, [sp, #16]
 80aea50:	9805      	ldr	r0, [sp, #20]
 80aea52:	0f09      	lsrs	r1, r1, #28
 80aea54:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80aea58:	9124      	str	r1, [sp, #144]	; 0x90
 80aea5a:	0f01      	lsrs	r1, r0, #28
 80aea5c:	9804      	ldr	r0, [sp, #16]
 80aea5e:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80aea62:	9125      	str	r1, [sp, #148]	; 0x94
 80aea64:	9905      	ldr	r1, [sp, #20]
 80aea66:	0789      	lsls	r1, r1, #30
 80aea68:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80aea6c:	9127      	str	r1, [sp, #156]	; 0x9c
 80aea6e:	0781      	lsls	r1, r0, #30
 80aea70:	9805      	ldr	r0, [sp, #20]
 80aea72:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 80aea76:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80aea7a:	9126      	str	r1, [sp, #152]	; 0x98
 80aea7c:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 80aea80:	404d      	eors	r5, r1
 80aea82:	9905      	ldr	r1, [sp, #20]
 80aea84:	4044      	eors	r4, r0
 80aea86:	9804      	ldr	r0, [sp, #16]
 80aea88:	0649      	lsls	r1, r1, #25
 80aea8a:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80aea8e:	9129      	str	r1, [sp, #164]	; 0xa4
 80aea90:	0641      	lsls	r1, r0, #25
 80aea92:	9805      	ldr	r0, [sp, #20]
 80aea94:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80aea98:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80aea9c:	9128      	str	r1, [sp, #160]	; 0xa0
 80aea9e:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 80aeaa2:	4060      	eors	r0, r4
 80aeaa4:	4604      	mov	r4, r0
 80aeaa6:	4069      	eors	r1, r5
 80aeaa8:	460d      	mov	r5, r1
 80aeaaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80aeaae:	4330      	orrs	r0, r6
 80aeab0:	4339      	orrs	r1, r7
 80aeab2:	ea00 060a 	and.w	r6, r0, sl
 80aeab6:	ea01 070b 	and.w	r7, r1, fp
 80aeaba:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
 80aeabe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80aeac2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80aeac6:	4006      	ands	r6, r0
 80aeac8:	400f      	ands	r7, r1
 80aeaca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80aeace:	4330      	orrs	r0, r6
 80aead0:	1900      	adds	r0, r0, r4
 80aead2:	ea41 0107 	orr.w	r1, r1, r7
 80aead6:	4169      	adcs	r1, r5
 80aead8:	eb18 0800 	adds.w	r8, r8, r0
 80aeadc:	eb49 0901 	adc.w	r9, r9, r1
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 80aeae0:	e953 4510 	ldrd	r4, r5, [r3, #-64]	; 0x40
 80aeae4:	e952 0110 	ldrd	r0, r1, [r2, #-64]	; 0x40
 80aeae8:	1900      	adds	r0, r0, r4
 80aeaea:	4169      	adcs	r1, r5
 80aeaec:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80aeaf0:	1824      	adds	r4, r4, r0
 80aeaf2:	414d      	adcs	r5, r1
 80aeaf4:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 80aeaf8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80aeafc:	4070      	eors	r0, r6
 80aeafe:	4079      	eors	r1, r7
 80aeb00:	e9dd 6700 	ldrd	r6, r7, [sp]
 80aeb04:	4006      	ands	r6, r0
 80aeb06:	4630      	mov	r0, r6
 80aeb08:	400f      	ands	r7, r1
 80aeb0a:	4639      	mov	r1, r7
 80aeb0c:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 80aeb10:	4046      	eors	r6, r0
 80aeb12:	19a0      	adds	r0, r4, r6
 80aeb14:	ea87 0701 	eor.w	r7, r7, r1
 80aeb18:	9c00      	ldr	r4, [sp, #0]
 80aeb1a:	eb45 0107 	adc.w	r1, r5, r7
 80aeb1e:	9d01      	ldr	r5, [sp, #4]
 80aeb20:	0ba4      	lsrs	r4, r4, #14
 80aeb22:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80aeb26:	942a      	str	r4, [sp, #168]	; 0xa8
 80aeb28:	0bac      	lsrs	r4, r5, #14
 80aeb2a:	9d00      	ldr	r5, [sp, #0]
 80aeb2c:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80aeb30:	942b      	str	r4, [sp, #172]	; 0xac
 80aeb32:	0cac      	lsrs	r4, r5, #18
 80aeb34:	9d01      	ldr	r5, [sp, #4]
 80aeb36:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80aeb3a:	942c      	str	r4, [sp, #176]	; 0xb0
 80aeb3c:	0cac      	lsrs	r4, r5, #18
 80aeb3e:	9d00      	ldr	r5, [sp, #0]
 80aeb40:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80aeb44:	942d      	str	r4, [sp, #180]	; 0xb4
 80aeb46:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 80aeb4a:	e9dd 672c 	ldrd	r6, r7, [sp, #176]	; 0xb0
 80aeb4e:	4074      	eors	r4, r6
 80aeb50:	9e01      	ldr	r6, [sp, #4]
 80aeb52:	407d      	eors	r5, r7
 80aeb54:	9f00      	ldr	r7, [sp, #0]
 80aeb56:	05f6      	lsls	r6, r6, #23
 80aeb58:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80aeb5c:	962f      	str	r6, [sp, #188]	; 0xbc
 80aeb5e:	05fe      	lsls	r6, r7, #23
 80aeb60:	9f01      	ldr	r7, [sp, #4]
 80aeb62:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80aeb66:	962e      	str	r6, [sp, #184]	; 0xb8
 80aeb68:	e9dd 672e 	ldrd	r6, r7, [sp, #184]	; 0xb8
 80aeb6c:	4066      	eors	r6, r4
 80aeb6e:	1986      	adds	r6, r0, r6
 80aeb70:	ea87 0705 	eor.w	r7, r7, r5
 80aeb74:	eb41 0707 	adc.w	r7, r1, r7
 80aeb78:	eb1a 0006 	adds.w	r0, sl, r6
 80aeb7c:	eb4b 0107 	adc.w	r1, fp, r7
 80aeb80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80aeb84:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 80aeb88:	ea4f 7118 	mov.w	r1, r8, lsr #28
 80aeb8c:	ea41 1109 	orr.w	r1, r1, r9, lsl #4
 80aeb90:	9130      	str	r1, [sp, #192]	; 0xc0
 80aeb92:	ea4f 7119 	mov.w	r1, r9, lsr #28
 80aeb96:	ea41 1108 	orr.w	r1, r1, r8, lsl #4
 80aeb9a:	9131      	str	r1, [sp, #196]	; 0xc4
 80aeb9c:	ea4f 7189 	mov.w	r1, r9, lsl #30
 80aeba0:	ea41 0198 	orr.w	r1, r1, r8, lsr #2
 80aeba4:	9133      	str	r1, [sp, #204]	; 0xcc
 80aeba6:	ea4f 7188 	mov.w	r1, r8, lsl #30
 80aebaa:	ea41 0199 	orr.w	r1, r1, r9, lsr #2
 80aebae:	9132      	str	r1, [sp, #200]	; 0xc8
 80aebb0:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
 80aebb4:	e9dd 4530 	ldrd	r4, r5, [sp, #192]	; 0xc0
 80aebb8:	404d      	eors	r5, r1
 80aebba:	ea4f 6149 	mov.w	r1, r9, lsl #25
 80aebbe:	ea41 11d8 	orr.w	r1, r1, r8, lsr #7
 80aebc2:	9135      	str	r1, [sp, #212]	; 0xd4
 80aebc4:	ea4f 6148 	mov.w	r1, r8, lsl #25
 80aebc8:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
 80aebcc:	4044      	eors	r4, r0
 80aebce:	9134      	str	r1, [sp, #208]	; 0xd0
 80aebd0:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 80aebd4:	4060      	eors	r0, r4
 80aebd6:	4069      	eors	r1, r5
 80aebd8:	4604      	mov	r4, r0
 80aebda:	460d      	mov	r5, r1
 80aebdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80aebe0:	ea40 0008 	orr.w	r0, r0, r8
 80aebe4:	ea41 0109 	orr.w	r1, r1, r9
 80aebe8:	ea0a 0a00 	and.w	sl, sl, r0
 80aebec:	4650      	mov	r0, sl
 80aebee:	ea0b 0b01 	and.w	fp, fp, r1
 80aebf2:	4659      	mov	r1, fp
 80aebf4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80aebf8:	ea0a 0a08 	and.w	sl, sl, r8
 80aebfc:	ea0b 0b09 	and.w	fp, fp, r9
 80aec00:	ea4a 0a00 	orr.w	sl, sl, r0
 80aec04:	eb1a 0004 	adds.w	r0, sl, r4
 80aec08:	ea4b 0b01 	orr.w	fp, fp, r1
 80aec0c:	eb4b 0105 	adc.w	r1, fp, r5
 80aec10:	1984      	adds	r4, r0, r6
 80aec12:	eb41 0507 	adc.w	r5, r1, r7
 80aec16:	e9cd 4506 	strd	r4, r5, [sp, #24]
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 80aec1a:	e952 010e 	ldrd	r0, r1, [r2, #-56]	; 0x38
 80aec1e:	e953 450e 	ldrd	r4, r5, [r3, #-56]	; 0x38
 80aec22:	1900      	adds	r0, r0, r4
 80aec24:	4169      	adcs	r1, r5
 80aec26:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 80aec2a:	1824      	adds	r4, r4, r0
 80aec2c:	414d      	adcs	r5, r1
 80aec2e:	e9dd 6700 	ldrd	r6, r7, [sp]
 80aec32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80aec36:	4070      	eors	r0, r6
 80aec38:	4079      	eors	r1, r7
 80aec3a:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 80aec3e:	4006      	ands	r6, r0
 80aec40:	4630      	mov	r0, r6
 80aec42:	400f      	ands	r7, r1
 80aec44:	4639      	mov	r1, r7
 80aec46:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80aec4a:	4046      	eors	r6, r0
 80aec4c:	1930      	adds	r0, r6, r4
 80aec4e:	ea87 0701 	eor.w	r7, r7, r1
 80aec52:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80aec54:	eb47 0105 	adc.w	r1, r7, r5
 80aec58:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80aec5a:	0ba4      	lsrs	r4, r4, #14
 80aec5c:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80aec60:	9436      	str	r4, [sp, #216]	; 0xd8
 80aec62:	0bac      	lsrs	r4, r5, #14
 80aec64:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80aec66:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80aec6a:	9437      	str	r4, [sp, #220]	; 0xdc
 80aec6c:	0cac      	lsrs	r4, r5, #18
 80aec6e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80aec70:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80aec74:	9438      	str	r4, [sp, #224]	; 0xe0
 80aec76:	0cac      	lsrs	r4, r5, #18
 80aec78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80aec7a:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80aec7e:	9439      	str	r4, [sp, #228]	; 0xe4
 80aec80:	e9dd 6738 	ldrd	r6, r7, [sp, #224]	; 0xe0
 80aec84:	e9dd 4536 	ldrd	r4, r5, [sp, #216]	; 0xd8
 80aec88:	4074      	eors	r4, r6
 80aec8a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80aec8c:	407d      	eors	r5, r7
 80aec8e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80aec90:	05f6      	lsls	r6, r6, #23
 80aec92:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80aec96:	963b      	str	r6, [sp, #236]	; 0xec
 80aec98:	05fe      	lsls	r6, r7, #23
 80aec9a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80aec9c:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80aeca0:	963a      	str	r6, [sp, #232]	; 0xe8
 80aeca2:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 80aeca6:	4066      	eors	r6, r4
 80aeca8:	1986      	adds	r6, r0, r6
 80aecaa:	ea87 0705 	eor.w	r7, r7, r5
 80aecae:	eb41 0707 	adc.w	r7, r1, r7
 80aecb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80aecb6:	1980      	adds	r0, r0, r6
 80aecb8:	4179      	adcs	r1, r7
 80aecba:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80aecbe:	9906      	ldr	r1, [sp, #24]
 80aecc0:	9807      	ldr	r0, [sp, #28]
 80aecc2:	0f09      	lsrs	r1, r1, #28
 80aecc4:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80aecc8:	913c      	str	r1, [sp, #240]	; 0xf0
 80aecca:	0f01      	lsrs	r1, r0, #28
 80aeccc:	9806      	ldr	r0, [sp, #24]
 80aecce:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80aecd2:	913d      	str	r1, [sp, #244]	; 0xf4
 80aecd4:	9907      	ldr	r1, [sp, #28]
 80aecd6:	e9dd 453c 	ldrd	r4, r5, [sp, #240]	; 0xf0
 80aecda:	0789      	lsls	r1, r1, #30
 80aecdc:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80aece0:	913f      	str	r1, [sp, #252]	; 0xfc
 80aece2:	0781      	lsls	r1, r0, #30
 80aece4:	9807      	ldr	r0, [sp, #28]
 80aece6:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80aecea:	913e      	str	r1, [sp, #248]	; 0xf8
 80aecec:	e9dd 013e 	ldrd	r0, r1, [sp, #248]	; 0xf8
 80aecf0:	404d      	eors	r5, r1
 80aecf2:	9907      	ldr	r1, [sp, #28]
 80aecf4:	4044      	eors	r4, r0
 80aecf6:	9806      	ldr	r0, [sp, #24]
 80aecf8:	0649      	lsls	r1, r1, #25
 80aecfa:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80aecfe:	9141      	str	r1, [sp, #260]	; 0x104
 80aed00:	0641      	lsls	r1, r0, #25
 80aed02:	9807      	ldr	r0, [sp, #28]
 80aed04:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80aed08:	9140      	str	r1, [sp, #256]	; 0x100
 80aed0a:	a940      	add	r1, sp, #256	; 0x100
 80aed0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80aed10:	4060      	eors	r0, r4
 80aed12:	4069      	eors	r1, r5
 80aed14:	4604      	mov	r4, r0
 80aed16:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80aed1a:	460d      	mov	r5, r1
 80aed1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80aed20:	ea40 0008 	orr.w	r0, r0, r8
 80aed24:	ea41 0109 	orr.w	r1, r1, r9
 80aed28:	ea0a 0a00 	and.w	sl, sl, r0
 80aed2c:	4650      	mov	r0, sl
 80aed2e:	ea0b 0b01 	and.w	fp, fp, r1
 80aed32:	4659      	mov	r1, fp
 80aed34:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80aed38:	ea0a 0a08 	and.w	sl, sl, r8
 80aed3c:	ea0b 0b09 	and.w	fp, fp, r9
 80aed40:	ea4a 0a00 	orr.w	sl, sl, r0
 80aed44:	eb1a 0004 	adds.w	r0, sl, r4
 80aed48:	ea4b 0b01 	orr.w	fp, fp, r1
 80aed4c:	eb4b 0105 	adc.w	r1, fp, r5
 80aed50:	1984      	adds	r4, r0, r6
 80aed52:	eb41 0507 	adc.w	r5, r1, r7
 80aed56:	e9cd 4502 	strd	r4, r5, [sp, #8]
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 80aed5a:	e952 010c 	ldrd	r0, r1, [r2, #-48]	; 0x30
 80aed5e:	e953 450c 	ldrd	r4, r5, [r3, #-48]	; 0x30
 80aed62:	1900      	adds	r0, r0, r4
 80aed64:	4169      	adcs	r1, r5
 80aed66:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 80aed6a:	1824      	adds	r4, r4, r0
 80aed6c:	414d      	adcs	r5, r1
 80aed6e:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 80aed72:	e9dd 0100 	ldrd	r0, r1, [sp]
 80aed76:	4046      	eors	r6, r0
 80aed78:	4630      	mov	r0, r6
 80aed7a:	404f      	eors	r7, r1
 80aed7c:	4639      	mov	r1, r7
 80aed7e:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 80aed82:	4006      	ands	r6, r0
 80aed84:	4630      	mov	r0, r6
 80aed86:	400f      	ands	r7, r1
 80aed88:	4639      	mov	r1, r7
 80aed8a:	e9dd 6700 	ldrd	r6, r7, [sp]
 80aed8e:	4046      	eors	r6, r0
 80aed90:	1930      	adds	r0, r6, r4
 80aed92:	ea87 0701 	eor.w	r7, r7, r1
 80aed96:	9c08      	ldr	r4, [sp, #32]
 80aed98:	eb47 0105 	adc.w	r1, r7, r5
 80aed9c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80aed9e:	0ba4      	lsrs	r4, r4, #14
 80aeda0:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80aeda4:	9442      	str	r4, [sp, #264]	; 0x108
 80aeda6:	0bac      	lsrs	r4, r5, #14
 80aeda8:	9d08      	ldr	r5, [sp, #32]
 80aedaa:	ae44      	add	r6, sp, #272	; 0x110
 80aedac:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80aedb0:	9443      	str	r4, [sp, #268]	; 0x10c
 80aedb2:	0cac      	lsrs	r4, r5, #18
 80aedb4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80aedb6:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80aedba:	9444      	str	r4, [sp, #272]	; 0x110
 80aedbc:	0cac      	lsrs	r4, r5, #18
 80aedbe:	9d08      	ldr	r5, [sp, #32]
 80aedc0:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80aedc4:	9445      	str	r4, [sp, #276]	; 0x114
 80aedc6:	ac42      	add	r4, sp, #264	; 0x108
 80aedc8:	cec0      	ldmia	r6, {r6, r7}
 80aedca:	cc30      	ldmia	r4, {r4, r5}
 80aedcc:	4074      	eors	r4, r6
 80aedce:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80aedd0:	407d      	eors	r5, r7
 80aedd2:	9f08      	ldr	r7, [sp, #32]
 80aedd4:	05f6      	lsls	r6, r6, #23
 80aedd6:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80aedda:	9647      	str	r6, [sp, #284]	; 0x11c
 80aeddc:	05fe      	lsls	r6, r7, #23
 80aedde:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80aede0:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80aede4:	9646      	str	r6, [sp, #280]	; 0x118
 80aede6:	ae46      	add	r6, sp, #280	; 0x118
 80aede8:	cec0      	ldmia	r6, {r6, r7}
 80aedea:	4066      	eors	r6, r4
 80aedec:	1986      	adds	r6, r0, r6
 80aedee:	ea87 0705 	eor.w	r7, r7, r5
 80aedf2:	eb41 0707 	adc.w	r7, r1, r7
 80aedf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80aedfa:	1980      	adds	r0, r0, r6
 80aedfc:	4179      	adcs	r1, r7
 80aedfe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80aee02:	9902      	ldr	r1, [sp, #8]
 80aee04:	9803      	ldr	r0, [sp, #12]
 80aee06:	0f09      	lsrs	r1, r1, #28
 80aee08:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80aee0c:	9148      	str	r1, [sp, #288]	; 0x120
 80aee0e:	0f01      	lsrs	r1, r0, #28
 80aee10:	9802      	ldr	r0, [sp, #8]
 80aee12:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 80aee16:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80aee1a:	9149      	str	r1, [sp, #292]	; 0x124
 80aee1c:	9903      	ldr	r1, [sp, #12]
 80aee1e:	0789      	lsls	r1, r1, #30
 80aee20:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80aee24:	914b      	str	r1, [sp, #300]	; 0x12c
 80aee26:	0781      	lsls	r1, r0, #30
 80aee28:	9803      	ldr	r0, [sp, #12]
 80aee2a:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80aee2e:	914a      	str	r1, [sp, #296]	; 0x128
 80aee30:	a948      	add	r1, sp, #288	; 0x120
 80aee32:	e9d1 4500 	ldrd	r4, r5, [r1]
 80aee36:	a94a      	add	r1, sp, #296	; 0x128
 80aee38:	e9d1 0100 	ldrd	r0, r1, [r1]
 80aee3c:	404d      	eors	r5, r1
 80aee3e:	9903      	ldr	r1, [sp, #12]
 80aee40:	4044      	eors	r4, r0
 80aee42:	9802      	ldr	r0, [sp, #8]
 80aee44:	0649      	lsls	r1, r1, #25
 80aee46:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80aee4a:	914d      	str	r1, [sp, #308]	; 0x134
 80aee4c:	0641      	lsls	r1, r0, #25
 80aee4e:	9803      	ldr	r0, [sp, #12]
 80aee50:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80aee54:	914c      	str	r1, [sp, #304]	; 0x130
 80aee56:	a94c      	add	r1, sp, #304	; 0x130
 80aee58:	e9d1 0100 	ldrd	r0, r1, [r1]
 80aee5c:	4060      	eors	r0, r4
 80aee5e:	4604      	mov	r4, r0
 80aee60:	4069      	eors	r1, r5
 80aee62:	460d      	mov	r5, r1
 80aee64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80aee68:	ea40 000a 	orr.w	r0, r0, sl
 80aee6c:	ea41 010b 	orr.w	r1, r1, fp
 80aee70:	ea00 0a08 	and.w	sl, r0, r8
 80aee74:	ea01 0b09 	and.w	fp, r1, r9
 80aee78:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80aee7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80aee80:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80aee84:	ea0a 0a00 	and.w	sl, sl, r0
 80aee88:	ea0b 0b01 	and.w	fp, fp, r1
 80aee8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80aee90:	ea40 000a 	orr.w	r0, r0, sl
 80aee94:	1900      	adds	r0, r0, r4
 80aee96:	ea41 010b 	orr.w	r1, r1, fp
 80aee9a:	4169      	adcs	r1, r5
 80aee9c:	1984      	adds	r4, r0, r6
 80aee9e:	eb41 0507 	adc.w	r5, r1, r7
 80aeea2:	e9cd 4504 	strd	r4, r5, [sp, #16]
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
 80aeea6:	e952 010a 	ldrd	r0, r1, [r2, #-40]	; 0x28
 80aeeaa:	e953 450a 	ldrd	r4, r5, [r3, #-40]	; 0x28
 80aeeae:	1900      	adds	r0, r0, r4
 80aeeb0:	4169      	adcs	r1, r5
 80aeeb2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80aeeb6:	1824      	adds	r4, r4, r0
 80aeeb8:	414d      	adcs	r5, r1
 80aeeba:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 80aeebe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80aeec2:	4046      	eors	r6, r0
 80aeec4:	4630      	mov	r0, r6
 80aeec6:	404f      	eors	r7, r1
 80aeec8:	4639      	mov	r1, r7
 80aeeca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80aeece:	4006      	ands	r6, r0
 80aeed0:	4630      	mov	r0, r6
 80aeed2:	400f      	ands	r7, r1
 80aeed4:	4639      	mov	r1, r7
 80aeed6:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 80aeeda:	4046      	eors	r6, r0
 80aeedc:	19a0      	adds	r0, r4, r6
 80aeede:	ea87 0701 	eor.w	r7, r7, r1
 80aeee2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80aeee4:	eb45 0107 	adc.w	r1, r5, r7
 80aeee8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80aeeea:	0ba4      	lsrs	r4, r4, #14
 80aeeec:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80aeef0:	944e      	str	r4, [sp, #312]	; 0x138
 80aeef2:	0bac      	lsrs	r4, r5, #14
 80aeef4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80aeef6:	ae50      	add	r6, sp, #320	; 0x140
 80aeef8:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80aeefc:	944f      	str	r4, [sp, #316]	; 0x13c
 80aeefe:	0cac      	lsrs	r4, r5, #18
 80aef00:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80aef02:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80aef06:	9450      	str	r4, [sp, #320]	; 0x140
 80aef08:	0cac      	lsrs	r4, r5, #18
 80aef0a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80aef0c:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80aef10:	9451      	str	r4, [sp, #324]	; 0x144
 80aef12:	ac4e      	add	r4, sp, #312	; 0x138
 80aef14:	cec0      	ldmia	r6, {r6, r7}
 80aef16:	cc30      	ldmia	r4, {r4, r5}
 80aef18:	4074      	eors	r4, r6
 80aef1a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80aef1c:	407d      	eors	r5, r7
 80aef1e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80aef20:	05f6      	lsls	r6, r6, #23
 80aef22:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80aef26:	9653      	str	r6, [sp, #332]	; 0x14c
 80aef28:	05fe      	lsls	r6, r7, #23
 80aef2a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80aef2c:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80aef30:	9652      	str	r6, [sp, #328]	; 0x148
 80aef32:	ae52      	add	r6, sp, #328	; 0x148
 80aef34:	cec0      	ldmia	r6, {r6, r7}
 80aef36:	4066      	eors	r6, r4
 80aef38:	1986      	adds	r6, r0, r6
 80aef3a:	ea87 0705 	eor.w	r7, r7, r5
 80aef3e:	eb41 0707 	adc.w	r7, r1, r7
 80aef42:	9904      	ldr	r1, [sp, #16]
 80aef44:	9805      	ldr	r0, [sp, #20]
 80aef46:	0f09      	lsrs	r1, r1, #28
 80aef48:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80aef4c:	9154      	str	r1, [sp, #336]	; 0x150
 80aef4e:	0f01      	lsrs	r1, r0, #28
 80aef50:	9804      	ldr	r0, [sp, #16]
 80aef52:	eb18 0806 	adds.w	r8, r8, r6
 80aef56:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80aef5a:	9155      	str	r1, [sp, #340]	; 0x154
 80aef5c:	9905      	ldr	r1, [sp, #20]
 80aef5e:	eb49 0907 	adc.w	r9, r9, r7
 80aef62:	0789      	lsls	r1, r1, #30
 80aef64:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80aef68:	9157      	str	r1, [sp, #348]	; 0x15c
 80aef6a:	0781      	lsls	r1, r0, #30
 80aef6c:	9805      	ldr	r0, [sp, #20]
 80aef6e:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80aef72:	9156      	str	r1, [sp, #344]	; 0x158
 80aef74:	a954      	add	r1, sp, #336	; 0x150
 80aef76:	e9d1 4500 	ldrd	r4, r5, [r1]
 80aef7a:	a956      	add	r1, sp, #344	; 0x158
 80aef7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80aef80:	404d      	eors	r5, r1
 80aef82:	9905      	ldr	r1, [sp, #20]
 80aef84:	4044      	eors	r4, r0
 80aef86:	9804      	ldr	r0, [sp, #16]
 80aef88:	0649      	lsls	r1, r1, #25
 80aef8a:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80aef8e:	9159      	str	r1, [sp, #356]	; 0x164
 80aef90:	0641      	lsls	r1, r0, #25
 80aef92:	9805      	ldr	r0, [sp, #20]
 80aef94:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80aef98:	9158      	str	r1, [sp, #352]	; 0x160
 80aef9a:	a958      	add	r1, sp, #352	; 0x160
 80aef9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80aefa0:	4060      	eors	r0, r4
 80aefa2:	4069      	eors	r1, r5
 80aefa4:	4604      	mov	r4, r0
 80aefa6:	460d      	mov	r5, r1
 80aefa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80aefac:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80aefb0:	ea40 000a 	orr.w	r0, r0, sl
 80aefb4:	ea41 010b 	orr.w	r1, r1, fp
 80aefb8:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80aefbc:	ea0a 0a00 	and.w	sl, sl, r0
 80aefc0:	ea0b 0b01 	and.w	fp, fp, r1
 80aefc4:	e9cd ab00 	strd	sl, fp, [sp]
 80aefc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80aefcc:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 80aefd0:	ea0a 0a00 	and.w	sl, sl, r0
 80aefd4:	ea0b 0b01 	and.w	fp, fp, r1
 80aefd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80aefdc:	ea40 000a 	orr.w	r0, r0, sl
 80aefe0:	ea41 010b 	orr.w	r1, r1, fp
 80aefe4:	1824      	adds	r4, r4, r0
 80aefe6:	414d      	adcs	r5, r1
 80aefe8:	19a0      	adds	r0, r4, r6
 80aefea:	eb45 0107 	adc.w	r1, r5, r7
 80aefee:	e9cd 0100 	strd	r0, r1, [sp]
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
 80aeff2:	e953 4508 	ldrd	r4, r5, [r3, #-32]
 80aeff6:	e952 0108 	ldrd	r0, r1, [r2, #-32]
 80aeffa:	1900      	adds	r0, r0, r4
 80aeffc:	4169      	adcs	r1, r5
 80aeffe:	e9dd ab0c 	ldrd	sl, fp, [sp, #48]	; 0x30
 80af002:	eb1a 0a00 	adds.w	sl, sl, r0
 80af006:	eb4b 0b01 	adc.w	fp, fp, r1
 80af00a:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 80af00e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80af012:	4060      	eors	r0, r4
 80af014:	ea00 0008 	and.w	r0, r0, r8
 80af018:	4069      	eors	r1, r5
 80af01a:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 80af01e:	4044      	eors	r4, r0
 80af020:	eb14 000a 	adds.w	r0, r4, sl
 80af024:	ea4f 3498 	mov.w	r4, r8, lsr #14
 80af028:	ea44 4489 	orr.w	r4, r4, r9, lsl #18
 80af02c:	945a      	str	r4, [sp, #360]	; 0x168
 80af02e:	ea4f 3499 	mov.w	r4, r9, lsr #14
 80af032:	ea44 4488 	orr.w	r4, r4, r8, lsl #18
 80af036:	945b      	str	r4, [sp, #364]	; 0x16c
 80af038:	ea4f 4498 	mov.w	r4, r8, lsr #18
 80af03c:	ea44 3489 	orr.w	r4, r4, r9, lsl #14
 80af040:	945c      	str	r4, [sp, #368]	; 0x170
 80af042:	ea4f 4499 	mov.w	r4, r9, lsr #18
 80af046:	ea01 0109 	and.w	r1, r1, r9
 80af04a:	ea44 3488 	orr.w	r4, r4, r8, lsl #14
 80af04e:	945d      	str	r4, [sp, #372]	; 0x174
 80af050:	ea85 0501 	eor.w	r5, r5, r1
 80af054:	ac5a      	add	r4, sp, #360	; 0x168
 80af056:	eb45 010b 	adc.w	r1, r5, fp
 80af05a:	e9d4 ab00 	ldrd	sl, fp, [r4]
 80af05e:	ac5c      	add	r4, sp, #368	; 0x170
 80af060:	cc30      	ldmia	r4, {r4, r5}
 80af062:	ea8a 0a04 	eor.w	sl, sl, r4
 80af066:	ea4f 54c9 	mov.w	r4, r9, lsl #23
 80af06a:	ea44 2458 	orr.w	r4, r4, r8, lsr #9
 80af06e:	945f      	str	r4, [sp, #380]	; 0x17c
 80af070:	ea4f 54c8 	mov.w	r4, r8, lsl #23
 80af074:	ea44 2459 	orr.w	r4, r4, r9, lsr #9
 80af078:	945e      	str	r4, [sp, #376]	; 0x178
 80af07a:	ac5e      	add	r4, sp, #376	; 0x178
 80af07c:	ea8b 0b05 	eor.w	fp, fp, r5
 80af080:	cc30      	ldmia	r4, {r4, r5}
 80af082:	ea84 040a 	eor.w	r4, r4, sl
 80af086:	eb14 0a00 	adds.w	sl, r4, r0
 80af08a:	ea85 050b 	eor.w	r5, r5, fp
 80af08e:	eb45 0b01 	adc.w	fp, r5, r1
 80af092:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80af096:	eb10 000a 	adds.w	r0, r0, sl
 80af09a:	eb41 010b 	adc.w	r1, r1, fp
 80af09e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80af0a2:	9900      	ldr	r1, [sp, #0]
 80af0a4:	9801      	ldr	r0, [sp, #4]
 80af0a6:	0f09      	lsrs	r1, r1, #28
 80af0a8:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80af0ac:	9160      	str	r1, [sp, #384]	; 0x180
 80af0ae:	0f01      	lsrs	r1, r0, #28
 80af0b0:	9800      	ldr	r0, [sp, #0]
 80af0b2:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80af0b6:	9161      	str	r1, [sp, #388]	; 0x184
 80af0b8:	9901      	ldr	r1, [sp, #4]
 80af0ba:	0789      	lsls	r1, r1, #30
 80af0bc:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80af0c0:	9163      	str	r1, [sp, #396]	; 0x18c
 80af0c2:	0781      	lsls	r1, r0, #30
 80af0c4:	9801      	ldr	r0, [sp, #4]
 80af0c6:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80af0ca:	9162      	str	r1, [sp, #392]	; 0x188
 80af0cc:	a960      	add	r1, sp, #384	; 0x180
 80af0ce:	e9d1 4500 	ldrd	r4, r5, [r1]
 80af0d2:	a962      	add	r1, sp, #392	; 0x188
 80af0d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80af0d8:	404d      	eors	r5, r1
 80af0da:	9901      	ldr	r1, [sp, #4]
 80af0dc:	4044      	eors	r4, r0
 80af0de:	9800      	ldr	r0, [sp, #0]
 80af0e0:	0649      	lsls	r1, r1, #25
 80af0e2:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80af0e6:	9165      	str	r1, [sp, #404]	; 0x194
 80af0e8:	0641      	lsls	r1, r0, #25
 80af0ea:	9801      	ldr	r0, [sp, #4]
 80af0ec:	e9dd 6700 	ldrd	r6, r7, [sp]
 80af0f0:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80af0f4:	9164      	str	r1, [sp, #400]	; 0x190
 80af0f6:	a964      	add	r1, sp, #400	; 0x190
 80af0f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80af0fc:	4060      	eors	r0, r4
 80af0fe:	4604      	mov	r4, r0
 80af100:	4069      	eors	r1, r5
 80af102:	460d      	mov	r5, r1
 80af104:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80af108:	4330      	orrs	r0, r6
 80af10a:	4339      	orrs	r1, r7
 80af10c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80af110:	4006      	ands	r6, r0
 80af112:	400f      	ands	r7, r1
 80af114:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
 80af118:	e9dd 0100 	ldrd	r0, r1, [sp]
 80af11c:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80af120:	4006      	ands	r6, r0
 80af122:	400f      	ands	r7, r1
 80af124:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80af128:	4330      	orrs	r0, r6
 80af12a:	1900      	adds	r0, r0, r4
 80af12c:	ea41 0107 	orr.w	r1, r1, r7
 80af130:	4169      	adcs	r1, r5
 80af132:	eb1a 0a00 	adds.w	sl, sl, r0
 80af136:	eb4b 0b01 	adc.w	fp, fp, r1
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
 80af13a:	e953 4506 	ldrd	r4, r5, [r3, #-24]
 80af13e:	e952 0106 	ldrd	r0, r1, [r2, #-24]
 80af142:	1900      	adds	r0, r0, r4
 80af144:	4169      	adcs	r1, r5
 80af146:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 80af14a:	1824      	adds	r4, r4, r0
 80af14c:	414d      	adcs	r5, r1
 80af14e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80af152:	ea80 0008 	eor.w	r0, r0, r8
 80af156:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 80af15a:	ea81 0109 	eor.w	r1, r1, r9
 80af15e:	4006      	ands	r6, r0
 80af160:	4630      	mov	r0, r6
 80af162:	400f      	ands	r7, r1
 80af164:	4639      	mov	r1, r7
 80af166:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80af16a:	4046      	eors	r6, r0
 80af16c:	19a0      	adds	r0, r4, r6
 80af16e:	ea87 0701 	eor.w	r7, r7, r1
 80af172:	9c06      	ldr	r4, [sp, #24]
 80af174:	eb45 0107 	adc.w	r1, r5, r7
 80af178:	9d07      	ldr	r5, [sp, #28]
 80af17a:	0ba4      	lsrs	r4, r4, #14
 80af17c:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80af180:	9466      	str	r4, [sp, #408]	; 0x198
 80af182:	0bac      	lsrs	r4, r5, #14
 80af184:	9d06      	ldr	r5, [sp, #24]
 80af186:	ae68      	add	r6, sp, #416	; 0x1a0
 80af188:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80af18c:	9467      	str	r4, [sp, #412]	; 0x19c
 80af18e:	0cac      	lsrs	r4, r5, #18
 80af190:	9d07      	ldr	r5, [sp, #28]
 80af192:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80af196:	9468      	str	r4, [sp, #416]	; 0x1a0
 80af198:	0cac      	lsrs	r4, r5, #18
 80af19a:	9d06      	ldr	r5, [sp, #24]
 80af19c:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80af1a0:	9469      	str	r4, [sp, #420]	; 0x1a4
 80af1a2:	ac66      	add	r4, sp, #408	; 0x198
 80af1a4:	cec0      	ldmia	r6, {r6, r7}
 80af1a6:	cc30      	ldmia	r4, {r4, r5}
 80af1a8:	4074      	eors	r4, r6
 80af1aa:	9e07      	ldr	r6, [sp, #28]
 80af1ac:	407d      	eors	r5, r7
 80af1ae:	9f06      	ldr	r7, [sp, #24]
 80af1b0:	05f6      	lsls	r6, r6, #23
 80af1b2:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80af1b6:	966b      	str	r6, [sp, #428]	; 0x1ac
 80af1b8:	05fe      	lsls	r6, r7, #23
 80af1ba:	9f07      	ldr	r7, [sp, #28]
 80af1bc:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80af1c0:	966a      	str	r6, [sp, #424]	; 0x1a8
 80af1c2:	ae6a      	add	r6, sp, #424	; 0x1a8
 80af1c4:	cec0      	ldmia	r6, {r6, r7}
 80af1c6:	4066      	eors	r6, r4
 80af1c8:	1986      	adds	r6, r0, r6
 80af1ca:	ea87 0705 	eor.w	r7, r7, r5
 80af1ce:	eb41 0707 	adc.w	r7, r1, r7
 80af1d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80af1d6:	1980      	adds	r0, r0, r6
 80af1d8:	4179      	adcs	r1, r7
 80af1da:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80af1de:	ea4f 711a 	mov.w	r1, sl, lsr #28
 80af1e2:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
 80af1e6:	916c      	str	r1, [sp, #432]	; 0x1b0
 80af1e8:	ea4f 711b 	mov.w	r1, fp, lsr #28
 80af1ec:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
 80af1f0:	916d      	str	r1, [sp, #436]	; 0x1b4
 80af1f2:	ea4f 718b 	mov.w	r1, fp, lsl #30
 80af1f6:	ea41 019a 	orr.w	r1, r1, sl, lsr #2
 80af1fa:	916f      	str	r1, [sp, #444]	; 0x1bc
 80af1fc:	ea4f 718a 	mov.w	r1, sl, lsl #30
 80af200:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
 80af204:	916e      	str	r1, [sp, #440]	; 0x1b8
 80af206:	a96c      	add	r1, sp, #432	; 0x1b0
 80af208:	e9d1 4500 	ldrd	r4, r5, [r1]
 80af20c:	a96e      	add	r1, sp, #440	; 0x1b8
 80af20e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80af212:	404d      	eors	r5, r1
 80af214:	ea4f 614b 	mov.w	r1, fp, lsl #25
 80af218:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
 80af21c:	9171      	str	r1, [sp, #452]	; 0x1c4
 80af21e:	ea4f 614a 	mov.w	r1, sl, lsl #25
 80af222:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
 80af226:	4044      	eors	r4, r0
 80af228:	9170      	str	r1, [sp, #448]	; 0x1c0
 80af22a:	a970      	add	r1, sp, #448	; 0x1c0
 80af22c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80af230:	4060      	eors	r0, r4
 80af232:	4069      	eors	r1, r5
 80af234:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80af238:	e9dd 0100 	ldrd	r0, r1, [sp]
 80af23c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80af240:	ea40 000a 	orr.w	r0, r0, sl
 80af244:	ea41 010b 	orr.w	r1, r1, fp
 80af248:	4004      	ands	r4, r0
 80af24a:	4620      	mov	r0, r4
 80af24c:	400d      	ands	r5, r1
 80af24e:	4629      	mov	r1, r5
 80af250:	e9dd 4500 	ldrd	r4, r5, [sp]
 80af254:	ea04 040a 	and.w	r4, r4, sl
 80af258:	4304      	orrs	r4, r0
 80af25a:	ea05 050b 	and.w	r5, r5, fp
 80af25e:	4620      	mov	r0, r4
 80af260:	430d      	orrs	r5, r1
 80af262:	4629      	mov	r1, r5
 80af264:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80af268:	1824      	adds	r4, r4, r0
 80af26a:	414d      	adcs	r5, r1
 80af26c:	19a4      	adds	r4, r4, r6
 80af26e:	417d      	adcs	r5, r7
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 80af270:	e952 0104 	ldrd	r0, r1, [r2, #-16]
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
 80af274:	e9cd 4502 	strd	r4, r5, [sp, #8]
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 80af278:	e953 4504 	ldrd	r4, r5, [r3, #-16]
 80af27c:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 80af280:	1900      	adds	r0, r0, r4
 80af282:	4169      	adcs	r1, r5
 80af284:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 80af288:	1824      	adds	r4, r4, r0
 80af28a:	414d      	adcs	r5, r1
 80af28c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80af290:	ea80 0008 	eor.w	r0, r0, r8
 80af294:	ea81 0109 	eor.w	r1, r1, r9
 80af298:	4006      	ands	r6, r0
 80af29a:	400f      	ands	r7, r1
 80af29c:	ea86 0608 	eor.w	r6, r6, r8
 80af2a0:	19a0      	adds	r0, r4, r6
 80af2a2:	ea87 0709 	eor.w	r7, r7, r9
 80af2a6:	9c08      	ldr	r4, [sp, #32]
 80af2a8:	eb45 0107 	adc.w	r1, r5, r7
 80af2ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80af2ae:	0ba4      	lsrs	r4, r4, #14
 80af2b0:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80af2b4:	9472      	str	r4, [sp, #456]	; 0x1c8
 80af2b6:	0bac      	lsrs	r4, r5, #14
 80af2b8:	9d08      	ldr	r5, [sp, #32]
 80af2ba:	ae74      	add	r6, sp, #464	; 0x1d0
 80af2bc:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80af2c0:	9473      	str	r4, [sp, #460]	; 0x1cc
 80af2c2:	0cac      	lsrs	r4, r5, #18
 80af2c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80af2c6:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80af2ca:	9474      	str	r4, [sp, #464]	; 0x1d0
 80af2cc:	0cac      	lsrs	r4, r5, #18
 80af2ce:	9d08      	ldr	r5, [sp, #32]
 80af2d0:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80af2d4:	9475      	str	r4, [sp, #468]	; 0x1d4
 80af2d6:	ac72      	add	r4, sp, #456	; 0x1c8
 80af2d8:	cec0      	ldmia	r6, {r6, r7}
 80af2da:	cc30      	ldmia	r4, {r4, r5}
 80af2dc:	4074      	eors	r4, r6
 80af2de:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80af2e0:	407d      	eors	r5, r7
 80af2e2:	9f08      	ldr	r7, [sp, #32]
 80af2e4:	05f6      	lsls	r6, r6, #23
 80af2e6:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80af2ea:	9677      	str	r6, [sp, #476]	; 0x1dc
 80af2ec:	05fe      	lsls	r6, r7, #23
 80af2ee:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80af2f0:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80af2f4:	9676      	str	r6, [sp, #472]	; 0x1d8
 80af2f6:	ae76      	add	r6, sp, #472	; 0x1d8
 80af2f8:	cec0      	ldmia	r6, {r6, r7}
 80af2fa:	4066      	eors	r6, r4
 80af2fc:	1986      	adds	r6, r0, r6
 80af2fe:	ea87 0705 	eor.w	r7, r7, r5
 80af302:	eb41 0707 	adc.w	r7, r1, r7
 80af306:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80af30a:	1980      	adds	r0, r0, r6
 80af30c:	4179      	adcs	r1, r7
 80af30e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80af312:	9902      	ldr	r1, [sp, #8]
 80af314:	9803      	ldr	r0, [sp, #12]
 80af316:	0f09      	lsrs	r1, r1, #28
 80af318:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80af31c:	9178      	str	r1, [sp, #480]	; 0x1e0
 80af31e:	0f01      	lsrs	r1, r0, #28
 80af320:	9802      	ldr	r0, [sp, #8]
 80af322:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80af326:	9179      	str	r1, [sp, #484]	; 0x1e4
 80af328:	9903      	ldr	r1, [sp, #12]
 80af32a:	0789      	lsls	r1, r1, #30
 80af32c:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80af330:	917b      	str	r1, [sp, #492]	; 0x1ec
 80af332:	0781      	lsls	r1, r0, #30
 80af334:	9803      	ldr	r0, [sp, #12]
 80af336:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80af33a:	917a      	str	r1, [sp, #488]	; 0x1e8
 80af33c:	a978      	add	r1, sp, #480	; 0x1e0
 80af33e:	e9d1 4500 	ldrd	r4, r5, [r1]
 80af342:	a97a      	add	r1, sp, #488	; 0x1e8
 80af344:	e9d1 0100 	ldrd	r0, r1, [r1]
 80af348:	404d      	eors	r5, r1
 80af34a:	9903      	ldr	r1, [sp, #12]
 80af34c:	4044      	eors	r4, r0
 80af34e:	9802      	ldr	r0, [sp, #8]
 80af350:	0649      	lsls	r1, r1, #25
 80af352:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80af356:	917d      	str	r1, [sp, #500]	; 0x1f4
 80af358:	0641      	lsls	r1, r0, #25
 80af35a:	9803      	ldr	r0, [sp, #12]
 80af35c:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80af360:	917c      	str	r1, [sp, #496]	; 0x1f0
 80af362:	a97c      	add	r1, sp, #496	; 0x1f0
 80af364:	e9d1 0100 	ldrd	r0, r1, [r1]
 80af368:	4060      	eors	r0, r4
 80af36a:	4069      	eors	r1, r5
 80af36c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80af370:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80af374:	e9dd 4500 	ldrd	r4, r5, [sp]
 80af378:	ea40 000a 	orr.w	r0, r0, sl
 80af37c:	ea41 010b 	orr.w	r1, r1, fp
 80af380:	4004      	ands	r4, r0
 80af382:	4620      	mov	r0, r4
 80af384:	400d      	ands	r5, r1
 80af386:	4629      	mov	r1, r5
 80af388:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80af38c:	ea04 040a 	and.w	r4, r4, sl
 80af390:	4304      	orrs	r4, r0
 80af392:	ea05 050b 	and.w	r5, r5, fp
 80af396:	430d      	orrs	r5, r1
 80af398:	4620      	mov	r0, r4
 80af39a:	4629      	mov	r1, r5
 80af39c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80af3a0:	1824      	adds	r4, r4, r0
 80af3a2:	414d      	adcs	r5, r1
 80af3a4:	19a4      	adds	r4, r4, r6
 80af3a6:	417d      	adcs	r5, r7
    }
    while( i < 80 );
 80af3a8:	459c      	cmp	ip, r3
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 80af3aa:	e9cd 4504 	strd	r4, r5, [sp, #16]
    }
    while( i < 80 );
 80af3ae:	f47f aaf9 	bne.w	80ae9a4 <mbedtls_internal_sha512_process+0x1fc>

    ctx->state[0] += A;
 80af3b2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80af3b6:	4623      	mov	r3, r4
 80af3b8:	18c0      	adds	r0, r0, r3
 80af3ba:	4169      	adcs	r1, r5
    ctx->state[1] += B;
 80af3bc:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
    }
    while( i < 80 );

    ctx->state[0] += A;
 80af3c0:	e9ce 0104 	strd	r0, r1, [lr, #16]
    ctx->state[1] += B;
 80af3c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80af3c8:	18c0      	adds	r0, r0, r3
 80af3ca:	4161      	adcs	r1, r4
    ctx->state[2] += C;
 80af3cc:	e9dd 3412 	ldrd	r3, r4, [sp, #72]	; 0x48
 80af3d0:	eb13 030a 	adds.w	r3, r3, sl
 80af3d4:	eb44 040b 	adc.w	r4, r4, fp
 80af3d8:	469a      	mov	sl, r3
    ctx->state[3] += D;
 80af3da:	e9dd 2300 	ldrd	r2, r3, [sp]
    }
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 80af3de:	46a3      	mov	fp, r4
    ctx->state[3] += D;
 80af3e0:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 80af3e4:	18a4      	adds	r4, r4, r2
 80af3e6:	415d      	adcs	r5, r3
 80af3e8:	e9ce 450a 	strd	r4, r5, [lr, #40]	; 0x28
    ctx->state[4] += E;
 80af3ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80af3f0:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 80af3f4:	18a4      	adds	r4, r4, r2
 80af3f6:	415d      	adcs	r5, r3
 80af3f8:	e9ce 450c 	strd	r4, r5, [lr, #48]	; 0x30
    ctx->state[5] += F;
 80af3fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80af400:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
 80af404:	18a4      	adds	r4, r4, r2
 80af406:	415d      	adcs	r5, r3
 80af408:	e9ce 450e 	strd	r4, r5, [lr, #56]	; 0x38
    ctx->state[6] += G;
 80af40c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80af410:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 80af414:	18a4      	adds	r4, r4, r2
 80af416:	415d      	adcs	r5, r3
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
    }
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
 80af418:	e9ce 0106 	strd	r0, r1, [lr, #24]
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;
 80af41c:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80af420:	eb10 0008 	adds.w	r0, r0, r8
 80af424:	eb41 0109 	adc.w	r1, r1, r9
 80af428:	e9ce 0112 	strd	r0, r1, [lr, #72]	; 0x48

    return( 0 );
}
 80af42c:	2000      	movs	r0, #0
    }
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 80af42e:	e9ce ab08 	strd	sl, fp, [lr, #32]
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
 80af432:	e9ce 4510 	strd	r4, r5, [lr, #64]	; 0x40
    ctx->state[7] += H;

    return( 0 );
}
 80af436:	f20d 4d7c 	addw	sp, sp, #1148	; 0x47c
 80af43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80af43e:	bf00      	nop

080af440 <mbedtls_sha512_update_ret>:
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 80af440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80af444:	4604      	mov	r4, r0
 80af446:	460e      	mov	r6, r1
    unsigned int left;

    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 80af448:	4615      	mov	r5, r2
 80af44a:	2a00      	cmp	r2, #0
 80af44c:	d03d      	beq.n	80af4ca <mbedtls_sha512_update_ret+0x8a>
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
 80af44e:	e9d0 2300 	ldrd	r2, r3, [r0]
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 80af452:	f04f 0900 	mov.w	r9, #0
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
 80af456:	f002 007f 	and.w	r0, r2, #127	; 0x7f
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 80af45a:	1952      	adds	r2, r2, r5
 80af45c:	eb43 0309 	adc.w	r3, r3, r9

    if( ctx->total[0] < (uint64_t) ilen )
 80af460:	454b      	cmp	r3, r9
 80af462:	bf08      	it	eq
 80af464:	42aa      	cmpeq	r2, r5
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 80af466:	e9c4 2300 	strd	r2, r3, [r4]

    if( ctx->total[0] < (uint64_t) ilen )
 80af46a:	d206      	bcs.n	80af47a <mbedtls_sha512_update_ret+0x3a>
        ctx->total[1]++;
 80af46c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80af470:	3201      	adds	r2, #1
 80af472:	f143 0300 	adc.w	r3, r3, #0
 80af476:	e9c4 2302 	strd	r2, r3, [r4, #8]

    if( left && ilen >= fill )
 80af47a:	b188      	cbz	r0, 80af4a0 <mbedtls_sha512_update_ret+0x60>

    if( ilen == 0 )
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
    fill = 128 - left;
 80af47c:	f1c0 0780 	rsb	r7, r0, #128	; 0x80
    ctx->total[0] += (uint64_t) ilen;

    if( ctx->total[0] < (uint64_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 80af480:	42bd      	cmp	r5, r7
 80af482:	d31c      	bcc.n	80af4be <mbedtls_sha512_update_ret+0x7e>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 80af484:	f104 0850 	add.w	r8, r4, #80	; 0x50
 80af488:	4631      	mov	r1, r6
 80af48a:	463a      	mov	r2, r7
 80af48c:	4440      	add	r0, r8
 80af48e:	f003 f9b2 	bl	80b27f6 <memcpy>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 80af492:	4641      	mov	r1, r8
 80af494:	4620      	mov	r0, r4
 80af496:	f7ff f987 	bl	80ae7a8 <mbedtls_internal_sha512_process>
 80af49a:	b9b8      	cbnz	r0, 80af4cc <mbedtls_sha512_update_ret+0x8c>
            return( ret );

        input += fill;
 80af49c:	443e      	add	r6, r7
        ilen  -= fill;
 80af49e:	1bed      	subs	r5, r5, r7
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 80af4a0:	462f      	mov	r7, r5
 80af4a2:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 128 )
 80af4a4:	2f7f      	cmp	r7, #127	; 0x7f
 80af4a6:	4431      	add	r1, r6
 80af4a8:	d905      	bls.n	80af4b6 <mbedtls_sha512_update_ret+0x76>
    {
        if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )
 80af4aa:	4620      	mov	r0, r4
 80af4ac:	f7ff f97c 	bl	80ae7a8 <mbedtls_internal_sha512_process>
 80af4b0:	b960      	cbnz	r0, 80af4cc <mbedtls_sha512_update_ret+0x8c>
            return( ret );

        input += 128;
        ilen  -= 128;
 80af4b2:	3f80      	subs	r7, #128	; 0x80
 80af4b4:	e7f5      	b.n	80af4a2 <mbedtls_sha512_update_ret+0x62>
    }

    if( ilen > 0 )
 80af4b6:	b147      	cbz	r7, 80af4ca <mbedtls_sha512_update_ret+0x8a>
 80af4b8:	463d      	mov	r5, r7
 80af4ba:	460e      	mov	r6, r1
 80af4bc:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 80af4be:	3450      	adds	r4, #80	; 0x50
 80af4c0:	462a      	mov	r2, r5
 80af4c2:	4631      	mov	r1, r6
 80af4c4:	4420      	add	r0, r4
 80af4c6:	f003 f996 	bl	80b27f6 <memcpy>

    return( 0 );
 80af4ca:	2000      	movs	r0, #0
}
 80af4cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080af4d0 <mbedtls_sha512_finish_ret>:
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 80af4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80af4d2:	4604      	mov	r4, r0
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
 80af4d4:	6803      	ldr	r3, [r0, #0]

    ctx->buffer[used++] = 0x80;
 80af4d6:	2280      	movs	r2, #128	; 0x80
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
 80af4d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f

    ctx->buffer[used++] = 0x80;
 80af4dc:	1c58      	adds	r0, r3, #1

    if( used <= 112 )
 80af4de:	2870      	cmp	r0, #112	; 0x70
    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;

    ctx->buffer[used++] = 0x80;
 80af4e0:	4423      	add	r3, r4
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 80af4e2:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;

    ctx->buffer[used++] = 0x80;
 80af4e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80af4e8:	f104 0650 	add.w	r6, r4, #80	; 0x50

    if( used <= 112 )
 80af4ec:	d804      	bhi.n	80af4f8 <mbedtls_sha512_finish_ret+0x28>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 112 - used );
 80af4ee:	f1c0 0270 	rsb	r2, r0, #112	; 0x70
 80af4f2:	2100      	movs	r1, #0
 80af4f4:	4430      	add	r0, r6
 80af4f6:	e00f      	b.n	80af518 <mbedtls_sha512_finish_ret+0x48>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 128 - used );
 80af4f8:	f1c0 0280 	rsb	r2, r0, #128	; 0x80
 80af4fc:	2100      	movs	r1, #0
 80af4fe:	4430      	add	r0, r6
 80af500:	f003 f99f 	bl	80b2842 <memset>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 80af504:	4631      	mov	r1, r6
 80af506:	4620      	mov	r0, r4
 80af508:	f7ff f94e 	bl	80ae7a8 <mbedtls_internal_sha512_process>
 80af50c:	2800      	cmp	r0, #0
 80af50e:	f040 810e 	bne.w	80af72e <mbedtls_sha512_finish_ret+0x25e>
            return( ret );

        memset( ctx->buffer, 0, 112 );
 80af512:	4601      	mov	r1, r0
 80af514:	4630      	mov	r0, r6
 80af516:	2270      	movs	r2, #112	; 0x70
 80af518:	f003 f993 	bl	80b2842 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
 80af51c:	e894 4080 	ldmia.w	r4, {r7, lr}
         | ( ctx->total[1] <<  3 );
 80af520:	68e3      	ldr	r3, [r4, #12]
 80af522:	68a2      	ldr	r2, [r4, #8]
 80af524:	00d9      	lsls	r1, r3, #3
 80af526:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80af52a:	2300      	movs	r3, #0
 80af52c:	4319      	orrs	r1, r3
 80af52e:	00d0      	lsls	r0, r2, #3
 80af530:	ea4f 725e 	mov.w	r2, lr, lsr #29
 80af534:	4310      	orrs	r0, r2
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 80af536:	0e0a      	lsrs	r2, r1, #24
 80af538:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
 80af53c:	0c0a      	lsrs	r2, r1, #16
 80af53e:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
 80af542:	0a0a      	lsrs	r2, r1, #8
 80af544:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
 80af548:	0e02      	lsrs	r2, r0, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 80af54a:	ea4f 03ce 	mov.w	r3, lr, lsl #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 80af54e:	f884 20c4 	strb.w	r2, [r4, #196]	; 0xc4
 80af552:	0c02      	lsrs	r2, r0, #16
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 80af554:	ea43 7357 	orr.w	r3, r3, r7, lsr #29

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 80af558:	f884 20c5 	strb.w	r2, [r4, #197]	; 0xc5
 80af55c:	0a02      	lsrs	r2, r0, #8
 80af55e:	f884 20c6 	strb.w	r2, [r4, #198]	; 0xc6
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 80af562:	0e1a      	lsrs	r2, r3, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 80af564:	00ff      	lsls	r7, r7, #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 80af566:	f884 20c8 	strb.w	r2, [r4, #200]	; 0xc8
 80af56a:	0c1a      	lsrs	r2, r3, #16
 80af56c:	f884 20c9 	strb.w	r2, [r4, #201]	; 0xc9
 80af570:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
 80af574:	0a1a      	lsrs	r2, r3, #8
 80af576:	0e3b      	lsrs	r3, r7, #24
 80af578:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
 80af57c:	0c3b      	lsrs	r3, r7, #16
 80af57e:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
 80af582:	0a3b      	lsrs	r3, r7, #8
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 80af584:	f884 10c3 	strb.w	r1, [r4, #195]	; 0xc3
 80af588:	f884 00c7 	strb.w	r0, [r4, #199]	; 0xc7
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 80af58c:	f884 20ca 	strb.w	r2, [r4, #202]	; 0xca
 80af590:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
 80af594:	f884 70cf 	strb.w	r7, [r4, #207]	; 0xcf

    if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 80af598:	4631      	mov	r1, r6
 80af59a:	4620      	mov	r0, r4
 80af59c:	f7ff f904 	bl	80ae7a8 <mbedtls_internal_sha512_process>
 80af5a0:	2800      	cmp	r0, #0
 80af5a2:	f040 80c4 	bne.w	80af72e <mbedtls_sha512_finish_ret+0x25e>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT64_BE( ctx->state[0], output,  0 );
 80af5a6:	7de3      	ldrb	r3, [r4, #23]
 80af5a8:	702b      	strb	r3, [r5, #0]
 80af5aa:	8ae3      	ldrh	r3, [r4, #22]
 80af5ac:	706b      	strb	r3, [r5, #1]
 80af5ae:	6963      	ldr	r3, [r4, #20]
 80af5b0:	0a1b      	lsrs	r3, r3, #8
 80af5b2:	70ab      	strb	r3, [r5, #2]
 80af5b4:	6963      	ldr	r3, [r4, #20]
 80af5b6:	70eb      	strb	r3, [r5, #3]
 80af5b8:	7ce3      	ldrb	r3, [r4, #19]
 80af5ba:	712b      	strb	r3, [r5, #4]
 80af5bc:	8a63      	ldrh	r3, [r4, #18]
 80af5be:	716b      	strb	r3, [r5, #5]
 80af5c0:	6923      	ldr	r3, [r4, #16]
 80af5c2:	0a1b      	lsrs	r3, r3, #8
 80af5c4:	71ab      	strb	r3, [r5, #6]
 80af5c6:	6923      	ldr	r3, [r4, #16]
 80af5c8:	71eb      	strb	r3, [r5, #7]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
 80af5ca:	7fe3      	ldrb	r3, [r4, #31]
 80af5cc:	722b      	strb	r3, [r5, #8]
 80af5ce:	8be3      	ldrh	r3, [r4, #30]
 80af5d0:	726b      	strb	r3, [r5, #9]
 80af5d2:	69e3      	ldr	r3, [r4, #28]
 80af5d4:	0a1b      	lsrs	r3, r3, #8
 80af5d6:	72ab      	strb	r3, [r5, #10]
 80af5d8:	69e3      	ldr	r3, [r4, #28]
 80af5da:	72eb      	strb	r3, [r5, #11]
 80af5dc:	7ee3      	ldrb	r3, [r4, #27]
 80af5de:	732b      	strb	r3, [r5, #12]
 80af5e0:	8b63      	ldrh	r3, [r4, #26]
 80af5e2:	736b      	strb	r3, [r5, #13]
 80af5e4:	69a3      	ldr	r3, [r4, #24]
 80af5e6:	0a1b      	lsrs	r3, r3, #8
 80af5e8:	73ab      	strb	r3, [r5, #14]
 80af5ea:	69a3      	ldr	r3, [r4, #24]
 80af5ec:	73eb      	strb	r3, [r5, #15]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
 80af5ee:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80af5f2:	742b      	strb	r3, [r5, #16]
 80af5f4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80af5f6:	746b      	strb	r3, [r5, #17]
 80af5f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80af5fa:	0a1b      	lsrs	r3, r3, #8
 80af5fc:	74ab      	strb	r3, [r5, #18]
 80af5fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80af600:	74eb      	strb	r3, [r5, #19]
 80af602:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80af606:	752b      	strb	r3, [r5, #20]
 80af608:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80af60a:	756b      	strb	r3, [r5, #21]
 80af60c:	6a23      	ldr	r3, [r4, #32]
 80af60e:	0a1b      	lsrs	r3, r3, #8
 80af610:	75ab      	strb	r3, [r5, #22]
 80af612:	6a23      	ldr	r3, [r4, #32]
 80af614:	75eb      	strb	r3, [r5, #23]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
 80af616:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80af61a:	762b      	strb	r3, [r5, #24]
 80af61c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80af61e:	766b      	strb	r3, [r5, #25]
 80af620:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80af622:	0a1b      	lsrs	r3, r3, #8
 80af624:	76ab      	strb	r3, [r5, #26]
 80af626:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80af628:	76eb      	strb	r3, [r5, #27]
 80af62a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 80af62e:	772b      	strb	r3, [r5, #28]
 80af630:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80af632:	776b      	strb	r3, [r5, #29]
 80af634:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80af636:	0a1b      	lsrs	r3, r3, #8
 80af638:	77ab      	strb	r3, [r5, #30]
 80af63a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80af63c:	77eb      	strb	r3, [r5, #31]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
 80af63e:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80af642:	f885 3020 	strb.w	r3, [r5, #32]
 80af646:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80af648:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
 80af64c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80af64e:	0a1b      	lsrs	r3, r3, #8
 80af650:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 80af654:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80af656:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
 80af65a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 80af65e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 80af662:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80af664:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80af668:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80af66a:	0a1b      	lsrs	r3, r3, #8
 80af66c:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
 80af670:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80af672:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
    PUT_UINT64_BE( ctx->state[5], output, 40 );
 80af676:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80af67a:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 80af67e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80af680:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
 80af684:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80af686:	0a1b      	lsrs	r3, r3, #8
 80af688:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
 80af68c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80af68e:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
 80af692:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 80af696:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 80af69a:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80af69c:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
 80af6a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80af6a2:	0a1b      	lsrs	r3, r3, #8
 80af6a4:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
 80af6a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80af6aa:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f

    if( ctx->is384 == 0 )
 80af6ae:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 80af6b2:	2b00      	cmp	r3, #0
 80af6b4:	d13b      	bne.n	80af72e <mbedtls_sha512_finish_ret+0x25e>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
 80af6b6:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 80af6ba:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80af6be:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80af6c2:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
 80af6c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80af6c8:	0a1b      	lsrs	r3, r3, #8
 80af6ca:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
 80af6ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80af6d0:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
 80af6d4:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80af6d8:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 80af6dc:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 80af6e0:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 80af6e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80af6e6:	0a1b      	lsrs	r3, r3, #8
 80af6e8:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 80af6ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80af6ee:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
        PUT_UINT64_BE( ctx->state[7], output, 56 );
 80af6f2:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 80af6f6:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 80af6fa:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 80af6fe:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
 80af702:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80af704:	0a1b      	lsrs	r3, r3, #8
 80af706:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
 80af70a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80af70c:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
 80af710:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 80af714:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
 80af718:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 80af71c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
 80af720:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80af722:	0a1b      	lsrs	r3, r3, #8
 80af724:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 80af728:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80af72a:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
    }

    return( 0 );
}
 80af72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080af730 <mbedtls_sha512_ret>:
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 80af730:	b5f0      	push	{r4, r5, r6, r7, lr}
 80af732:	461c      	mov	r4, r3
 80af734:	b0b7      	sub	sp, #220	; 0xdc
 80af736:	4606      	mov	r6, r0

    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha512_init( &ctx );
 80af738:	4668      	mov	r0, sp
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 80af73a:	460f      	mov	r7, r1
 80af73c:	4615      	mov	r5, r2

    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha512_init( &ctx );
 80af73e:	f7fe ff89 	bl	80ae654 <mbedtls_sha512_init>

    if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )
 80af742:	4621      	mov	r1, r4
 80af744:	4668      	mov	r0, sp
 80af746:	f7fe ff93 	bl	80ae670 <mbedtls_sha512_starts_ret>
 80af74a:	4604      	mov	r4, r0
 80af74c:	b958      	cbnz	r0, 80af766 <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )
 80af74e:	463a      	mov	r2, r7
 80af750:	4631      	mov	r1, r6
 80af752:	4668      	mov	r0, sp
 80af754:	f7ff fe74 	bl	80af440 <mbedtls_sha512_update_ret>
 80af758:	4604      	mov	r4, r0
 80af75a:	b920      	cbnz	r0, 80af766 <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )
 80af75c:	4629      	mov	r1, r5
 80af75e:	4668      	mov	r0, sp
 80af760:	f7ff feb6 	bl	80af4d0 <mbedtls_sha512_finish_ret>
 80af764:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha512_free( &ctx );
 80af766:	4668      	mov	r0, sp
 80af768:	f7fe ff78 	bl	80ae65c <mbedtls_sha512_free>

    return( ret );
}
 80af76c:	4620      	mov	r0, r4
 80af76e:	b037      	add	sp, #220	; 0xdc
 80af770:	bdf0      	pop	{r4, r5, r6, r7, pc}

080af772 <mbedtls_pem_init>:
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
void mbedtls_pem_init( mbedtls_pem_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
 80af772:	2300      	movs	r3, #0
 80af774:	6003      	str	r3, [r0, #0]
 80af776:	6043      	str	r3, [r0, #4]
 80af778:	6083      	str	r3, [r0, #8]
 80af77a:	4770      	bx	lr

080af77c <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
 80af77c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80af780:	4689      	mov	r9, r1
 80af782:	b085      	sub	sp, #20
 80af784:	4690      	mov	r8, r2
 80af786:	461f      	mov	r7, r3
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
 80af788:	4606      	mov	r6, r0
 80af78a:	2800      	cmp	r0, #0
 80af78c:	d063      	beq.n	80af856 <mbedtls_pem_read_buffer+0xda>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );

    s1 = (unsigned char *) strstr( (const char *) data, header );
 80af78e:	4618      	mov	r0, r3
 80af790:	f003 f8c5 	bl	80b291e <strstr>

    if( s1 == NULL )
 80af794:	4604      	mov	r4, r0
 80af796:	2800      	cmp	r0, #0
 80af798:	d05f      	beq.n	80af85a <mbedtls_pem_read_buffer+0xde>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s2 = (unsigned char *) strstr( (const char *) data, footer );
 80af79a:	4641      	mov	r1, r8
 80af79c:	4638      	mov	r0, r7
 80af79e:	f003 f8be 	bl	80b291e <strstr>

    if( s2 == NULL || s2 <= s1 )
 80af7a2:	4605      	mov	r5, r0
 80af7a4:	2800      	cmp	r0, #0
 80af7a6:	d058      	beq.n	80af85a <mbedtls_pem_read_buffer+0xde>
 80af7a8:	4284      	cmp	r4, r0
 80af7aa:	d256      	bcs.n	80af85a <mbedtls_pem_read_buffer+0xde>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
 80af7ac:	4648      	mov	r0, r9
 80af7ae:	f003 f899 	bl	80b28e4 <strlen>
    if( *s1 == ' '  ) s1++;
 80af7b2:	5c22      	ldrb	r2, [r4, r0]
    s2 = (unsigned char *) strstr( (const char *) data, footer );

    if( s2 == NULL || s2 <= s1 )
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
 80af7b4:	1823      	adds	r3, r4, r0
    if( *s1 == ' '  ) s1++;
 80af7b6:	2a20      	cmp	r2, #32
 80af7b8:	bf08      	it	eq
 80af7ba:	3301      	addeq	r3, #1
    if( *s1 == '\r' ) s1++;
 80af7bc:	781a      	ldrb	r2, [r3, #0]
 80af7be:	2a0d      	cmp	r2, #13
 80af7c0:	bf08      	it	eq
 80af7c2:	3301      	addeq	r3, #1
    if( *s1 == '\n' ) s1++;
 80af7c4:	781a      	ldrb	r2, [r3, #0]
 80af7c6:	2a0a      	cmp	r2, #10
 80af7c8:	d147      	bne.n	80af85a <mbedtls_pem_read_buffer+0xde>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 80af7ca:	4640      	mov	r0, r8
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
    if( *s1 == ' '  ) s1++;
    if( *s1 == '\r' ) s1++;
    if( *s1 == '\n' ) s1++;
 80af7cc:	1c5c      	adds	r4, r3, #1
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 80af7ce:	f003 f889 	bl	80b28e4 <strlen>
    if( *end == ' '  ) end++;
 80af7d2:	5c2a      	ldrb	r2, [r5, r0]
    if( *s1 == '\r' ) s1++;
    if( *s1 == '\n' ) s1++;
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 80af7d4:	182b      	adds	r3, r5, r0
    if( *end == ' '  ) end++;
 80af7d6:	2a20      	cmp	r2, #32
 80af7d8:	bf08      	it	eq
 80af7da:	3301      	addeq	r3, #1
    if( *end == '\r' ) end++;
 80af7dc:	781a      	ldrb	r2, [r3, #0]
 80af7de:	2a0d      	cmp	r2, #13
 80af7e0:	bf08      	it	eq
 80af7e2:	3301      	addeq	r3, #1
    if( *end == '\n' ) end++;
 80af7e4:	781a      	ldrb	r2, [r3, #0]
 80af7e6:	2a0a      	cmp	r2, #10
 80af7e8:	bf08      	it	eq
 80af7ea:	3301      	addeq	r3, #1
    *use_len = end - data;
 80af7ec:	1bdb      	subs	r3, r3, r7
 80af7ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 80af7f0:	1b2f      	subs	r7, r5, r4
 80af7f2:	2f15      	cmp	r7, #21
    end = s2;
    end += strlen( footer );
    if( *end == ' '  ) end++;
    if( *end == '\r' ) end++;
    if( *end == '\n' ) end++;
    *use_len = end - data;
 80af7f4:	6013      	str	r3, [r2, #0]

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 80af7f6:	dd05      	ble.n	80af804 <mbedtls_pem_read_buffer+0x88>
 80af7f8:	2216      	movs	r2, #22
 80af7fa:	491e      	ldr	r1, [pc, #120]	; (80af874 <mbedtls_pem_read_buffer+0xf8>)
 80af7fc:	4620      	mov	r0, r4
 80af7fe:	f002 ffeb 	bl	80b27d8 <memcmp>
 80af802:	b360      	cbz	r0, 80af85e <mbedtls_pem_read_buffer+0xe2>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
 80af804:	42a5      	cmp	r5, r4
 80af806:	d92c      	bls.n	80af862 <mbedtls_pem_read_buffer+0xe6>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
 80af808:	2100      	movs	r1, #0
 80af80a:	9700      	str	r7, [sp, #0]
 80af80c:	4623      	mov	r3, r4
 80af80e:	aa03      	add	r2, sp, #12
 80af810:	4608      	mov	r0, r1
 80af812:	f7f8 fc05 	bl	80a8020 <mbedtls_base64_decode>

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
 80af816:	302c      	adds	r0, #44	; 0x2c
 80af818:	d025      	beq.n	80af866 <mbedtls_pem_read_buffer+0xea>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );

    if( ( buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
 80af81a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80af81e:	2001      	movs	r0, #1
 80af820:	4641      	mov	r1, r8
 80af822:	f002 fecb 	bl	80b25bc <calloc>
 80af826:	4605      	mov	r5, r0
 80af828:	b1f8      	cbz	r0, 80af86a <mbedtls_pem_read_buffer+0xee>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
 80af82a:	4623      	mov	r3, r4
 80af82c:	9700      	str	r7, [sp, #0]
 80af82e:	aa03      	add	r2, sp, #12
 80af830:	4641      	mov	r1, r8
 80af832:	f7f8 fbf5 	bl	80a8020 <mbedtls_base64_decode>
 80af836:	4604      	mov	r4, r0
 80af838:	b148      	cbz	r0, 80af84e <mbedtls_pem_read_buffer+0xd2>
    {
        mbedtls_platform_zeroize( buf, len );
 80af83a:	9903      	ldr	r1, [sp, #12]
 80af83c:	4628      	mov	r0, r5
 80af83e:	f7f6 fde7 	bl	80a6410 <mbedtls_platform_zeroize>
        mbedtls_free( buf );
 80af842:	4628      	mov	r0, r5
 80af844:	f001 fc50 	bl	80b10e8 <free>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 80af848:	f5a4 5088 	sub.w	r0, r4, #4352	; 0x1100
 80af84c:	e00e      	b.n	80af86c <mbedtls_pem_read_buffer+0xf0>
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    ctx->buf = buf;
    ctx->buflen = len;
 80af84e:	9b03      	ldr	r3, [sp, #12]
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    ctx->buf = buf;
 80af850:	6035      	str	r5, [r6, #0]
    ctx->buflen = len;
 80af852:	6073      	str	r3, [r6, #4]

    return( 0 );
 80af854:	e00a      	b.n	80af86c <mbedtls_pem_read_buffer+0xf0>
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
 80af856:	4808      	ldr	r0, [pc, #32]	; (80af878 <mbedtls_pem_read_buffer+0xfc>)
 80af858:	e008      	b.n	80af86c <mbedtls_pem_read_buffer+0xf0>

    s1 = (unsigned char *) strstr( (const char *) data, header );

    if( s1 == NULL )
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 80af85a:	4808      	ldr	r0, [pc, #32]	; (80af87c <mbedtls_pem_read_buffer+0x100>)
 80af85c:	e006      	b.n	80af86c <mbedtls_pem_read_buffer+0xf0>

        if( *s1 == '\r' ) s1++;
        if( *s1 == '\n' ) s1++;
        else return( MBEDTLS_ERR_PEM_INVALID_DATA );
#else
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
 80af85e:	4808      	ldr	r0, [pc, #32]	; (80af880 <mbedtls_pem_read_buffer+0x104>)
 80af860:	e004      	b.n	80af86c <mbedtls_pem_read_buffer+0xf0>
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
        return( MBEDTLS_ERR_PEM_INVALID_DATA );
 80af862:	4808      	ldr	r0, [pc, #32]	; (80af884 <mbedtls_pem_read_buffer+0x108>)
 80af864:	e002      	b.n	80af86c <mbedtls_pem_read_buffer+0xf0>

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 80af866:	4808      	ldr	r0, [pc, #32]	; (80af888 <mbedtls_pem_read_buffer+0x10c>)
 80af868:	e000      	b.n	80af86c <mbedtls_pem_read_buffer+0xf0>

    if( ( buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
 80af86a:	4808      	ldr	r0, [pc, #32]	; (80af88c <mbedtls_pem_read_buffer+0x110>)

    ctx->buf = buf;
    ctx->buflen = len;

    return( 0 );
}
 80af86c:	b005      	add	sp, #20
 80af86e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80af872:	bf00      	nop
 80af874:	080b5aa0 	.word	0x080b5aa0
 80af878:	ffffeb80 	.word	0xffffeb80
 80af87c:	ffffef80 	.word	0xffffef80
 80af880:	ffffec00 	.word	0xffffec00
 80af884:	ffffef00 	.word	0xffffef00
 80af888:	ffffeed4 	.word	0xffffeed4
 80af88c:	ffffee80 	.word	0xffffee80

080af890 <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
 80af890:	b510      	push	{r4, lr}
 80af892:	4604      	mov	r4, r0
    if ( ctx->buf != NULL )
 80af894:	6800      	ldr	r0, [r0, #0]
 80af896:	b128      	cbz	r0, 80af8a4 <mbedtls_pem_free+0x14>
    {
        mbedtls_platform_zeroize( ctx->buf, ctx->buflen );
 80af898:	6861      	ldr	r1, [r4, #4]
 80af89a:	f7f6 fdb9 	bl	80a6410 <mbedtls_platform_zeroize>
        mbedtls_free( ctx->buf );
 80af89e:	6820      	ldr	r0, [r4, #0]
 80af8a0:	f001 fc22 	bl	80b10e8 <free>
    }
    mbedtls_free( ctx->info );
 80af8a4:	68a0      	ldr	r0, [r4, #8]
 80af8a6:	f001 fc1f 	bl	80b10e8 <free>

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pem_context ) );
 80af8aa:	4620      	mov	r0, r4
}
 80af8ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mbedtls_platform_zeroize( ctx->buf, ctx->buflen );
        mbedtls_free( ctx->buf );
    }
    mbedtls_free( ctx->info );

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pem_context ) );
 80af8b0:	210c      	movs	r1, #12
 80af8b2:	f7f6 bdad 	b.w	80a6410 <mbedtls_platform_zeroize>
	...

080af8b8 <mbedtls_ssl_ciphersuite_from_id>:
    return( NULL );
}

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;
 80af8b8:	4b05      	ldr	r3, [pc, #20]	; (80af8d0 <mbedtls_ssl_ciphersuite_from_id+0x18>)

    while( cur->id != 0 )
 80af8ba:	681a      	ldr	r2, [r3, #0]
 80af8bc:	b11a      	cbz	r2, 80af8c6 <mbedtls_ssl_ciphersuite_from_id+0xe>
    {
        if( cur->id == ciphersuite )
 80af8be:	4282      	cmp	r2, r0
 80af8c0:	d003      	beq.n	80af8ca <mbedtls_ssl_ciphersuite_from_id+0x12>
            return( cur );

        cur++;
 80af8c2:	3320      	adds	r3, #32

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;

    while( cur->id != 0 )
 80af8c4:	e7f9      	b.n	80af8ba <mbedtls_ssl_ciphersuite_from_id+0x2>
            return( cur );

        cur++;
    }

    return( NULL );
 80af8c6:	4610      	mov	r0, r2
 80af8c8:	4770      	bx	lr
 80af8ca:	4618      	mov	r0, r3
}
 80af8cc:	4770      	bx	lr
 80af8ce:	bf00      	nop
 80af8d0:	080b5bd0 	.word	0x080b5bd0

080af8d4 <mbedtls_ssl_list_ciphersuites>:

    return( 0 );
}

const int *mbedtls_ssl_list_ciphersuites( void )
{
 80af8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /*
     * On initial call filter out all ciphersuites not supported by current
     * build based on presence in the ciphersuite_definitions.
     */
    if( supported_init == 0 )
 80af8d6:	4b0f      	ldr	r3, [pc, #60]	; (80af914 <mbedtls_ssl_list_ciphersuites+0x40>)
 80af8d8:	681a      	ldr	r2, [r3, #0]
 80af8da:	461c      	mov	r4, r3
 80af8dc:	b9ba      	cbnz	r2, 80af90e <mbedtls_ssl_list_ciphersuites+0x3a>
 80af8de:	490e      	ldr	r1, [pc, #56]	; (80af918 <mbedtls_ssl_list_ciphersuites+0x44>)
 80af8e0:	4e0e      	ldr	r6, [pc, #56]	; (80af91c <mbedtls_ssl_list_ciphersuites+0x48>)
    {
        const int *p;
        int *q;

        for( p = ciphersuite_preference, q = supported_ciphersuites;
             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
 80af8e2:	f101 0720 	add.w	r7, r1, #32
 80af8e6:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80af8ea:	b165      	cbz	r5, 80af906 <mbedtls_ssl_list_ciphersuites+0x32>
 80af8ec:	42b9      	cmp	r1, r7
 80af8ee:	d20a      	bcs.n	80af906 <mbedtls_ssl_list_ciphersuites+0x32>
             p++ )
        {
            const mbedtls_ssl_ciphersuite_t *cs_info;
            if( ( cs_info = mbedtls_ssl_ciphersuite_from_id( *p ) ) != NULL &&
 80af8f0:	4628      	mov	r0, r5
 80af8f2:	f7ff ffe1 	bl	80af8b8 <mbedtls_ssl_ciphersuite_from_id>
 80af8f6:	2800      	cmp	r0, #0
 80af8f8:	d0f5      	beq.n	80af8e6 <mbedtls_ssl_list_ciphersuites+0x12>
 80af8fa:	7a03      	ldrb	r3, [r0, #8]
 80af8fc:	2b2a      	cmp	r3, #42	; 0x2a
 80af8fe:	d0f2      	beq.n	80af8e6 <mbedtls_ssl_list_ciphersuites+0x12>
                !ciphersuite_is_removed( cs_info ) )
            {
                *(q++) = *p;
 80af900:	600d      	str	r5, [r1, #0]
 80af902:	3104      	adds	r1, #4
    if( supported_init == 0 )
    {
        const int *p;
        int *q;

        for( p = ciphersuite_preference, q = supported_ciphersuites;
 80af904:	e7ef      	b.n	80af8e6 <mbedtls_ssl_list_ciphersuites+0x12>
                !ciphersuite_is_removed( cs_info ) )
            {
                *(q++) = *p;
            }
        }
        *q = 0;
 80af906:	2300      	movs	r3, #0
 80af908:	600b      	str	r3, [r1, #0]

        supported_init = 1;
 80af90a:	2301      	movs	r3, #1
 80af90c:	6023      	str	r3, [r4, #0]
    }

    return( supported_ciphersuites );
}
 80af90e:	4802      	ldr	r0, [pc, #8]	; (80af918 <mbedtls_ssl_list_ciphersuites+0x44>)
 80af910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80af912:	bf00      	nop
 80af914:	200033cc 	.word	0x200033cc
 80af918:	200033d0 	.word	0x200033d0
 80af91c:	080b5cec 	.word	0x080b5cec

080af920 <mbedtls_ssl_get_ciphersuite_sig_pk_alg>:
}

#if defined(MBEDTLS_PK_C)
mbedtls_pk_type_t mbedtls_ssl_get_ciphersuite_sig_pk_alg( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
 80af920:	7a83      	ldrb	r3, [r0, #10]
 80af922:	2b0a      	cmp	r3, #10
 80af924:	d80e      	bhi.n	80af944 <mbedtls_ssl_get_ciphersuite_sig_pk_alg+0x24>
 80af926:	2001      	movs	r0, #1
 80af928:	fa00 f303 	lsl.w	r3, r0, r3
 80af92c:	f013 0f8e 	tst.w	r3, #142	; 0x8e
 80af930:	d10b      	bne.n	80af94a <mbedtls_ssl_get_ciphersuite_sig_pk_alg+0x2a>
 80af932:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 80af936:	d107      	bne.n	80af948 <mbedtls_ssl_get_ciphersuite_sig_pk_alg+0x28>
 80af938:	f013 0f10 	tst.w	r3, #16
        case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:
        case MBEDTLS_KEY_EXCHANGE_RSA_PSK:
            return( MBEDTLS_PK_RSA );

        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
            return( MBEDTLS_PK_ECDSA );
 80af93c:	bf0c      	ite	eq
 80af93e:	2000      	moveq	r0, #0
 80af940:	2004      	movne	r0, #4
 80af942:	4770      	bx	lr
        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
            return( MBEDTLS_PK_ECKEY );

        default:
            return( MBEDTLS_PK_NONE );
 80af944:	2000      	movs	r0, #0
 80af946:	4770      	bx	lr
        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
            return( MBEDTLS_PK_ECDSA );

        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
            return( MBEDTLS_PK_ECKEY );
 80af948:	2002      	movs	r0, #2

        default:
            return( MBEDTLS_PK_NONE );
    }
}
 80af94a:	4770      	bx	lr

080af94c <mbedtls_ssl_ciphersuite_uses_ec>:

#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
int mbedtls_ssl_ciphersuite_uses_ec( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
 80af94c:	7a82      	ldrb	r2, [r0, #10]
 80af94e:	2a0b      	cmp	r2, #11
 80af950:	d808      	bhi.n	80af964 <mbedtls_ssl_ciphersuite_uses_ec+0x18>
        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
        case MBEDTLS_KEY_EXCHANGE_ECDHE_PSK:
        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
        case MBEDTLS_KEY_EXCHANGE_ECJPAKE:
            return( 1 );
 80af952:	f640 7018 	movw	r0, #3864	; 0xf18
 80af956:	2301      	movs	r3, #1
 80af958:	4093      	lsls	r3, r2
 80af95a:	4018      	ands	r0, r3
 80af95c:	3000      	adds	r0, #0
 80af95e:	bf18      	it	ne
 80af960:	2001      	movne	r0, #1
 80af962:	4770      	bx	lr

        default:
            return( 0 );
 80af964:	2000      	movs	r0, #0
    }
}
 80af966:	4770      	bx	lr

080af968 <mbedtls_ssl_ciphersuite_uses_psk>:
#endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C || MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED*/

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
int mbedtls_ssl_ciphersuite_uses_psk( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
 80af968:	7a80      	ldrb	r0, [r0, #10]
 80af96a:	3805      	subs	r0, #5
            return( 1 );

        default:
            return( 0 );
    }
}
 80af96c:	2803      	cmp	r0, #3
 80af96e:	bf8c      	ite	hi
 80af970:	2000      	movhi	r0, #0
 80af972:	2001      	movls	r0, #1
 80af974:	4770      	bx	lr
	...

080af978 <mbedtls_rsa_deduce_primes>:
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 80af978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80af97c:	4606      	mov	r6, r0
 80af97e:	4688      	mov	r8, r1
 80af980:	b096      	sub	sp, #88	; 0x58
 80af982:	461f      	mov	r7, r3
          61,   67,   71,   73,   79,   83,   89,   97,
         101,  103,  107,  109,  113,  127,  131,  137,
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };
 80af984:	4b79      	ldr	r3, [pc, #484]	; (80afb6c <mbedtls_rsa_deduce_primes+0x1f4>)
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 80af986:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80af98a:	4615      	mov	r5, r2
          61,   67,   71,   73,   79,   83,   89,   97,
         101,  103,  107,  109,  113,  127,  131,  137,
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };
 80af98c:	f103 0e30 	add.w	lr, r3, #48	; 0x30
 80af990:	aa08      	add	r2, sp, #32
 80af992:	4614      	mov	r4, r2
 80af994:	6818      	ldr	r0, [r3, #0]
 80af996:	6859      	ldr	r1, [r3, #4]
 80af998:	3308      	adds	r3, #8
 80af99a:	c403      	stmia	r4!, {r0, r1}
 80af99c:	4573      	cmp	r3, lr
 80af99e:	4622      	mov	r2, r4
 80af9a0:	d1f7      	bne.n	80af992 <mbedtls_rsa_deduce_primes+0x1a>
 80af9a2:	6818      	ldr	r0, [r3, #0]
 80af9a4:	889b      	ldrh	r3, [r3, #4]
 80af9a6:	6020      	str	r0, [r4, #0]
 80af9a8:	80a3      	strh	r3, [r4, #4]

    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
 80af9aa:	2f00      	cmp	r7, #0
 80af9ac:	f000 80b8 	beq.w	80afb20 <mbedtls_rsa_deduce_primes+0x1a8>
 80af9b0:	f1b9 0f00 	cmp.w	r9, #0
 80af9b4:	f000 80b4 	beq.w	80afb20 <mbedtls_rsa_deduce_primes+0x1a8>
 80af9b8:	68bb      	ldr	r3, [r7, #8]
 80af9ba:	2b00      	cmp	r3, #0
 80af9bc:	f040 80b0 	bne.w	80afb20 <mbedtls_rsa_deduce_primes+0x1a8>
 80af9c0:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80af9c4:	2900      	cmp	r1, #0
 80af9c6:	f040 80ab 	bne.w	80afb20 <mbedtls_rsa_deduce_primes+0x1a8>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 80af9ca:	4630      	mov	r0, r6
 80af9cc:	f7fc feb1 	bl	80ac732 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 80af9d0:	2800      	cmp	r0, #0
 80af9d2:	f340 80a5 	ble.w	80afb20 <mbedtls_rsa_deduce_primes+0x1a8>

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 80af9d6:	2101      	movs	r1, #1
 80af9d8:	4628      	mov	r0, r5
 80af9da:	f7fc feaa 	bl	80ac732 <mbedtls_mpi_cmp_int>
    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 80af9de:	2800      	cmp	r0, #0
 80af9e0:	f340 809e 	ble.w	80afb20 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 80af9e4:	4631      	mov	r1, r6
 80af9e6:	4628      	mov	r0, r5
 80af9e8:	f7fc fe5e 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 80af9ec:	2800      	cmp	r0, #0
 80af9ee:	f280 8097 	bge.w	80afb20 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 80af9f2:	2101      	movs	r1, #1
 80af9f4:	4640      	mov	r0, r8
 80af9f6:	f7fc fe9c 	bl	80ac732 <mbedtls_mpi_cmp_int>
    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 80af9fa:	2800      	cmp	r0, #0
 80af9fc:	f340 8090 	ble.w	80afb20 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 80afa00:	4631      	mov	r1, r6
 80afa02:	4640      	mov	r0, r8
 80afa04:	f7fc fe50 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 80afa08:	2800      	cmp	r0, #0
 80afa0a:	f280 8089 	bge.w	80afb20 <mbedtls_rsa_deduce_primes+0x1a8>

    /*
     * Initializations and temporary changes
     */

    mbedtls_mpi_init( &K );
 80afa0e:	a805      	add	r0, sp, #20
 80afa10:	f7fc fb63 	bl	80ac0da <mbedtls_mpi_init>
    mbedtls_mpi_init( &T );
 80afa14:	a802      	add	r0, sp, #8
 80afa16:	f7fc fb60 	bl	80ac0da <mbedtls_mpi_init>

    /* T := DE - 1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
 80afa1a:	4642      	mov	r2, r8
 80afa1c:	4629      	mov	r1, r5
 80afa1e:	a802      	add	r0, sp, #8
 80afa20:	f7fc ffa6 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80afa24:	4604      	mov	r4, r0
 80afa26:	2800      	cmp	r0, #0
 80afa28:	d172      	bne.n	80afb10 <mbedtls_rsa_deduce_primes+0x198>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
 80afa2a:	a902      	add	r1, sp, #8
 80afa2c:	2201      	movs	r2, #1
 80afa2e:	4608      	mov	r0, r1
 80afa30:	f7fc ff88 	bl	80ac944 <mbedtls_mpi_sub_int>
 80afa34:	4604      	mov	r4, r0
 80afa36:	2800      	cmp	r0, #0
 80afa38:	d16a      	bne.n	80afb10 <mbedtls_rsa_deduce_primes+0x198>

    if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )
 80afa3a:	a802      	add	r0, sp, #8
 80afa3c:	f7fc fc5b 	bl	80ac2f6 <mbedtls_mpi_lsb>
 80afa40:	fa1f fa80 	uxth.w	sl, r0
 80afa44:	f1ba 0f00 	cmp.w	sl, #0
 80afa48:	d102      	bne.n	80afa50 <mbedtls_rsa_deduce_primes+0xd8>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 80afa4a:	f06f 0403 	mvn.w	r4, #3
 80afa4e:	e05f      	b.n	80afb10 <mbedtls_rsa_deduce_primes+0x198>
        goto cleanup;
    }

    /* After this operation, T holds the largest odd divisor of DE - 1. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
 80afa50:	4651      	mov	r1, sl
 80afa52:	a802      	add	r0, sp, #8
 80afa54:	f7fc fd49 	bl	80ac4ea <mbedtls_mpi_shift_r>
 80afa58:	4604      	mov	r4, r0
 80afa5a:	2800      	cmp	r0, #0
 80afa5c:	d158      	bne.n	80afb10 <mbedtls_rsa_deduce_primes+0x198>
     * Actual work
     */

    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
    if( N->p[0] % 8 == 1 )
 80afa5e:	68b3      	ldr	r3, [r6, #8]
        attempt = 1;
 80afa60:	681d      	ldr	r5, [r3, #0]
 80afa62:	f005 0507 	and.w	r5, r5, #7
 80afa66:	1e6b      	subs	r3, r5, #1
 80afa68:	425d      	negs	r5, r3
 80afa6a:	415d      	adcs	r5, r3

    for( ; attempt < num_primes; ++attempt )
    {
        mbedtls_mpi_lset( &K, primes[attempt] );
 80afa6c:	ab16      	add	r3, sp, #88	; 0x58
 80afa6e:	442b      	add	r3, r5
 80afa70:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 80afa74:	a805      	add	r0, sp, #20
 80afa76:	f7fc fc11 	bl	80ac29c <mbedtls_mpi_lset>

        /* Check if gcd(K,N) = 1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 80afa7a:	4632      	mov	r2, r6
 80afa7c:	a905      	add	r1, sp, #20
 80afa7e:	4638      	mov	r0, r7
 80afa80:	f7fd fc03 	bl	80ad28a <mbedtls_mpi_gcd>
 80afa84:	4604      	mov	r4, r0
 80afa86:	2800      	cmp	r0, #0
 80afa88:	d142      	bne.n	80afb10 <mbedtls_rsa_deduce_primes+0x198>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
 80afa8a:	2101      	movs	r1, #1
 80afa8c:	4638      	mov	r0, r7
 80afa8e:	f7fc fe50 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80afa92:	b120      	cbz	r0, 80afa9e <mbedtls_rsa_deduce_primes+0x126>
    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
    if( N->p[0] % 8 == 1 )
        attempt = 1;

    for( ; attempt < num_primes; ++attempt )
 80afa94:	3501      	adds	r5, #1
 80afa96:	b2ad      	uxth	r5, r5
 80afa98:	2d36      	cmp	r5, #54	; 0x36
 80afa9a:	d1e7      	bne.n	80afa6c <mbedtls_rsa_deduce_primes+0xf4>
 80afa9c:	e7d5      	b.n	80afa4a <mbedtls_rsa_deduce_primes+0xd2>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
            continue;

        /* Go through K^T + 1, K^(2T) + 1, K^(4T) + 1, ...
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
 80afa9e:	a905      	add	r1, sp, #20
 80afaa0:	f8cd 9000 	str.w	r9, [sp]
 80afaa4:	4633      	mov	r3, r6
 80afaa6:	aa02      	add	r2, sp, #8
 80afaa8:	4608      	mov	r0, r1
 80afaaa:	f7fd f9cf 	bl	80ace4c <mbedtls_mpi_exp_mod>
 80afaae:	4604      	mov	r4, r0
 80afab0:	bb70      	cbnz	r0, 80afb10 <mbedtls_rsa_deduce_primes+0x198>
 80afab2:	f04f 0801 	mov.w	r8, #1

        for( iter = 1; iter <= order; ++iter )
        {
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
 80afab6:	2101      	movs	r1, #1
 80afab8:	a805      	add	r0, sp, #20
 80afaba:	f7fc fe3a 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80afabe:	b930      	cbnz	r0, 80aface <mbedtls_rsa_deduce_primes+0x156>
         * we reached 1, or K holds primes[attempt]^(DE - 1) mod N, which must
         * be 1 if D,E,N were consistent.
         * Check if that's the case and abort if not, to avoid very long,
         * yet eventually failing, computations if N,D,E were not sane.
         */
        if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )
 80afac0:	2101      	movs	r1, #1
 80afac2:	a805      	add	r0, sp, #20
 80afac4:	f7fc fe35 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80afac8:	2800      	cmp	r0, #0
 80afaca:	d0e3      	beq.n	80afa94 <mbedtls_rsa_deduce_primes+0x11c>
 80afacc:	e7bd      	b.n	80afa4a <mbedtls_rsa_deduce_primes+0xd2>
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
 80aface:	a905      	add	r1, sp, #20
 80afad0:	2201      	movs	r2, #1
 80afad2:	4608      	mov	r0, r1
 80afad4:	f7fc ff20 	bl	80ac918 <mbedtls_mpi_add_int>
 80afad8:	4604      	mov	r4, r0
 80afada:	b9c8      	cbnz	r0, 80afb10 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 80afadc:	4632      	mov	r2, r6
 80afade:	a905      	add	r1, sp, #20
 80afae0:	4638      	mov	r0, r7
 80afae2:	f7fd fbd2 	bl	80ad28a <mbedtls_mpi_gcd>
 80afae6:	4604      	mov	r4, r0
 80afae8:	b990      	cbnz	r0, 80afb10 <mbedtls_rsa_deduce_primes+0x198>

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 80afaea:	2101      	movs	r1, #1
 80afaec:	4638      	mov	r0, r7
 80afaee:	f7fc fe20 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80afaf2:	2801      	cmp	r0, #1
 80afaf4:	d117      	bne.n	80afb26 <mbedtls_rsa_deduce_primes+0x1ae>
                mbedtls_mpi_cmp_mpi( P, N ) == -1 )
 80afaf6:	4631      	mov	r1, r6
 80afaf8:	4638      	mov	r0, r7
 80afafa:	f7fc fdd5 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 80afafe:	3001      	adds	r0, #1
 80afb00:	d111      	bne.n	80afb26 <mbedtls_rsa_deduce_primes+0x1ae>
                /*
                 * Have found a nontrivial divisor P of N.
                 * Set Q := N / P.
                 */

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
 80afb02:	4621      	mov	r1, r4
 80afb04:	463b      	mov	r3, r7
 80afb06:	4632      	mov	r2, r6
 80afb08:	4648      	mov	r0, r9
 80afb0a:	f7fc ffad 	bl	80aca68 <mbedtls_mpi_div_mpi>
 80afb0e:	4604      	mov	r4, r0

    ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;

cleanup:

    mbedtls_mpi_free( &K );
 80afb10:	a805      	add	r0, sp, #20
 80afb12:	f7fc fae8 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
 80afb16:	a802      	add	r0, sp, #8
 80afb18:	f7fc fae5 	bl	80ac0e6 <mbedtls_mpi_free>
    return( ret );
 80afb1c:	4620      	mov	r0, r4
 80afb1e:	e021      	b.n	80afb64 <mbedtls_rsa_deduce_primes+0x1ec>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80afb20:	f06f 0003 	mvn.w	r0, #3
 80afb24:	e01e      	b.n	80afb64 <mbedtls_rsa_deduce_primes+0x1ec>

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
                goto cleanup;
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 80afb26:	a905      	add	r1, sp, #20
 80afb28:	2201      	movs	r2, #1
 80afb2a:	4608      	mov	r0, r1
 80afb2c:	f7fc ff0a 	bl	80ac944 <mbedtls_mpi_sub_int>
 80afb30:	4604      	mov	r4, r0
 80afb32:	2800      	cmp	r0, #0
 80afb34:	d1ec      	bne.n	80afb10 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
 80afb36:	aa05      	add	r2, sp, #20
 80afb38:	4611      	mov	r1, r2
 80afb3a:	4610      	mov	r0, r2
 80afb3c:	f7fc ff18 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80afb40:	4604      	mov	r4, r0
 80afb42:	2800      	cmp	r0, #0
 80afb44:	d1e4      	bne.n	80afb10 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
 80afb46:	a905      	add	r1, sp, #20
 80afb48:	4632      	mov	r2, r6
 80afb4a:	4608      	mov	r0, r1
 80afb4c:	f7fd f94c 	bl	80acde8 <mbedtls_mpi_mod_mpi>
 80afb50:	4604      	mov	r4, r0
 80afb52:	2800      	cmp	r0, #0
 80afb54:	d1dc      	bne.n	80afb10 <mbedtls_rsa_deduce_primes+0x198>
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
                             Q /* temporarily use Q for storing Montgomery
                                * multiplication helper values */ ) );

        for( iter = 1; iter <= order; ++iter )
 80afb56:	f108 0801 	add.w	r8, r8, #1
 80afb5a:	fa1f f888 	uxth.w	r8, r8
 80afb5e:	45c2      	cmp	sl, r8
 80afb60:	d2a9      	bcs.n	80afab6 <mbedtls_rsa_deduce_primes+0x13e>
 80afb62:	e7ad      	b.n	80afac0 <mbedtls_rsa_deduce_primes+0x148>
cleanup:

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &T );
    return( ret );
}
 80afb64:	b016      	add	sp, #88	; 0x58
 80afb66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80afb6a:	bf00      	nop
 80afb6c:	080b6030 	.word	0x080b6030

080afb70 <mbedtls_rsa_deduce_private_exponent>:
 */
int mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,
                                         mbedtls_mpi const *Q,
                                         mbedtls_mpi const *E,
                                         mbedtls_mpi *D )
{
 80afb70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80afb74:	4604      	mov	r4, r0
 80afb76:	b086      	sub	sp, #24
 80afb78:	460e      	mov	r6, r1
 80afb7a:	4617      	mov	r7, r2
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
 80afb7c:	461d      	mov	r5, r3
 80afb7e:	b18b      	cbz	r3, 80afba4 <mbedtls_rsa_deduce_private_exponent+0x34>
 80afb80:	2100      	movs	r1, #0
 80afb82:	4618      	mov	r0, r3
 80afb84:	f7fc fdd5 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80afb88:	4680      	mov	r8, r0
 80afb8a:	b958      	cbnz	r0, 80afba4 <mbedtls_rsa_deduce_private_exponent+0x34>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 80afb8c:	2101      	movs	r1, #1
 80afb8e:	4620      	mov	r0, r4
 80afb90:	f7fc fdcf 	bl	80ac732 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 80afb94:	2800      	cmp	r0, #0
 80afb96:	dd05      	ble.n	80afba4 <mbedtls_rsa_deduce_private_exponent+0x34>
 80afb98:	2101      	movs	r1, #1
 80afb9a:	4630      	mov	r0, r6
 80afb9c:	f7fc fdc9 	bl	80ac732 <mbedtls_mpi_cmp_int>
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 80afba0:	2800      	cmp	r0, #0
 80afba2:	dc02      	bgt.n	80afbaa <mbedtls_rsa_deduce_private_exponent+0x3a>
{
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80afba4:	f06f 0003 	mvn.w	r0, #3
 80afba8:	e03c      	b.n	80afc24 <mbedtls_rsa_deduce_private_exponent+0xb4>

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
 80afbaa:	4641      	mov	r1, r8
 80afbac:	4638      	mov	r0, r7
 80afbae:	f7fc fdc0 	bl	80ac732 <mbedtls_mpi_cmp_int>

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 80afbb2:	2800      	cmp	r0, #0
 80afbb4:	d0f6      	beq.n	80afba4 <mbedtls_rsa_deduce_private_exponent+0x34>
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    }

    mbedtls_mpi_init( &K );
 80afbb6:	4668      	mov	r0, sp
 80afbb8:	f7fc fa8f 	bl	80ac0da <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 80afbbc:	a803      	add	r0, sp, #12
 80afbbe:	f7fc fa8c 	bl	80ac0da <mbedtls_mpi_init>

    /* Temporarily put K := P-1 and L := Q-1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 80afbc2:	4621      	mov	r1, r4
 80afbc4:	2201      	movs	r2, #1
 80afbc6:	4668      	mov	r0, sp
 80afbc8:	f7fc febc 	bl	80ac944 <mbedtls_mpi_sub_int>
 80afbcc:	4604      	mov	r4, r0
 80afbce:	bb10      	cbnz	r0, 80afc16 <mbedtls_rsa_deduce_private_exponent+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 80afbd0:	2201      	movs	r2, #1
 80afbd2:	4631      	mov	r1, r6
 80afbd4:	a803      	add	r0, sp, #12
 80afbd6:	f7fc feb5 	bl	80ac944 <mbedtls_mpi_sub_int>
 80afbda:	4604      	mov	r4, r0
 80afbdc:	b9d8      	cbnz	r0, 80afc16 <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* Temporarily put D := gcd(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
 80afbde:	aa03      	add	r2, sp, #12
 80afbe0:	4669      	mov	r1, sp
 80afbe2:	4628      	mov	r0, r5
 80afbe4:	f7fd fb51 	bl	80ad28a <mbedtls_mpi_gcd>
 80afbe8:	4604      	mov	r4, r0
 80afbea:	b9a0      	cbnz	r0, 80afc16 <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* K := LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
 80afbec:	aa03      	add	r2, sp, #12
 80afbee:	4669      	mov	r1, sp
 80afbf0:	4668      	mov	r0, sp
 80afbf2:	f7fc febd 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80afbf6:	4604      	mov	r4, r0
 80afbf8:	b968      	cbnz	r0, 80afc16 <mbedtls_rsa_deduce_private_exponent+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
 80afbfa:	4601      	mov	r1, r0
 80afbfc:	462b      	mov	r3, r5
 80afbfe:	466a      	mov	r2, sp
 80afc00:	4668      	mov	r0, sp
 80afc02:	f7fc ff31 	bl	80aca68 <mbedtls_mpi_div_mpi>
 80afc06:	4604      	mov	r4, r0
 80afc08:	b928      	cbnz	r0, 80afc16 <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* Compute modular inverse of E in LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );
 80afc0a:	466a      	mov	r2, sp
 80afc0c:	4639      	mov	r1, r7
 80afc0e:	4628      	mov	r0, r5
 80afc10:	f7fd fbf4 	bl	80ad3fc <mbedtls_mpi_inv_mod>
 80afc14:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &K );
 80afc16:	4668      	mov	r0, sp
 80afc18:	f7fc fa65 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 80afc1c:	a803      	add	r0, sp, #12
 80afc1e:	f7fc fa62 	bl	80ac0e6 <mbedtls_mpi_free>

    return( ret );
 80afc22:	4620      	mov	r0, r4
}
 80afc24:	b006      	add	sp, #24
 80afc26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080afc2c <mbedtls_rsa_validate_crt>:
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 80afc2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80afc30:	4699      	mov	r9, r3
 80afc32:	b087      	sub	sp, #28
 80afc34:	4604      	mov	r4, r0
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 80afc36:	4668      	mov	r0, sp
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 80afc38:	460d      	mov	r5, r1
 80afc3a:	4690      	mov	r8, r2
 80afc3c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80afc3e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 80afc40:	f7fc fa4b 	bl	80ac0da <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 80afc44:	a803      	add	r0, sp, #12
 80afc46:	f7fc fa48 	bl	80ac0da <mbedtls_mpi_init>

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
 80afc4a:	f1b9 0f00 	cmp.w	r9, #0
 80afc4e:	d101      	bne.n	80afc54 <mbedtls_rsa_validate_crt+0x28>
            goto cleanup;
        }
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
 80afc50:	b9f7      	cbnz	r7, 80afc90 <mbedtls_rsa_validate_crt+0x64>
 80afc52:	e035      	b.n	80afcc0 <mbedtls_rsa_validate_crt+0x94>
    mbedtls_mpi_init( &L );

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
    {
        if( P == NULL )
 80afc54:	2c00      	cmp	r4, #0
 80afc56:	d058      	beq.n	80afd0a <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 80afc58:	2201      	movs	r2, #1
 80afc5a:	4621      	mov	r1, r4
 80afc5c:	4668      	mov	r0, sp
 80afc5e:	f7fc fe71 	bl	80ac944 <mbedtls_mpi_sub_int>
 80afc62:	2800      	cmp	r0, #0
 80afc64:	d148      	bne.n	80afcf8 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
 80afc66:	4642      	mov	r2, r8
 80afc68:	4649      	mov	r1, r9
 80afc6a:	a803      	add	r0, sp, #12
 80afc6c:	f7fc fe32 	bl	80ac8d4 <mbedtls_mpi_sub_mpi>
 80afc70:	2800      	cmp	r0, #0
 80afc72:	d141      	bne.n	80afcf8 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 80afc74:	a903      	add	r1, sp, #12
 80afc76:	466a      	mov	r2, sp
 80afc78:	4608      	mov	r0, r1
 80afc7a:	f7fd f8b5 	bl	80acde8 <mbedtls_mpi_mod_mpi>
 80afc7e:	2800      	cmp	r0, #0
 80afc80:	d13a      	bne.n	80afcf8 <mbedtls_rsa_validate_crt+0xcc>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 80afc82:	4601      	mov	r1, r0
 80afc84:	a803      	add	r0, sp, #12
 80afc86:	f7fc fd54 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80afc8a:	2800      	cmp	r0, #0
 80afc8c:	d13f      	bne.n	80afd0e <mbedtls_rsa_validate_crt+0xe2>
 80afc8e:	e7df      	b.n	80afc50 <mbedtls_rsa_validate_crt+0x24>
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
    {
        if( Q == NULL )
 80afc90:	b3dd      	cbz	r5, 80afd0a <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
 80afc92:	2201      	movs	r2, #1
 80afc94:	4629      	mov	r1, r5
 80afc96:	4668      	mov	r0, sp
 80afc98:	f7fc fe54 	bl	80ac944 <mbedtls_mpi_sub_int>
 80afc9c:	bb60      	cbnz	r0, 80afcf8 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
 80afc9e:	4642      	mov	r2, r8
 80afca0:	4639      	mov	r1, r7
 80afca2:	a803      	add	r0, sp, #12
 80afca4:	f7fc fe16 	bl	80ac8d4 <mbedtls_mpi_sub_mpi>
 80afca8:	bb30      	cbnz	r0, 80afcf8 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 80afcaa:	a903      	add	r1, sp, #12
 80afcac:	466a      	mov	r2, sp
 80afcae:	4608      	mov	r0, r1
 80afcb0:	f7fd f89a 	bl	80acde8 <mbedtls_mpi_mod_mpi>
 80afcb4:	bb00      	cbnz	r0, 80afcf8 <mbedtls_rsa_validate_crt+0xcc>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 80afcb6:	4601      	mov	r1, r0
 80afcb8:	a803      	add	r0, sp, #12
 80afcba:	f7fc fd3a 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80afcbe:	bb30      	cbnz	r0, 80afd0e <mbedtls_rsa_validate_crt+0xe2>
            goto cleanup;
        }
    }

    /* Check that QP * Q - 1 == 0 mod P */
    if( QP != NULL )
 80afcc0:	b1c6      	cbz	r6, 80afcf4 <mbedtls_rsa_validate_crt+0xc8>
    {
        if( P == NULL || Q == NULL )
 80afcc2:	b314      	cbz	r4, 80afd0a <mbedtls_rsa_validate_crt+0xde>
 80afcc4:	b30d      	cbz	r5, 80afd0a <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
 80afcc6:	462a      	mov	r2, r5
 80afcc8:	4631      	mov	r1, r6
 80afcca:	4668      	mov	r0, sp
 80afccc:	f7fc fe50 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80afcd0:	b990      	cbnz	r0, 80afcf8 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 80afcd2:	2201      	movs	r2, #1
 80afcd4:	4669      	mov	r1, sp
 80afcd6:	4668      	mov	r0, sp
 80afcd8:	f7fc fe34 	bl	80ac944 <mbedtls_mpi_sub_int>
 80afcdc:	b960      	cbnz	r0, 80afcf8 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
 80afcde:	4622      	mov	r2, r4
 80afce0:	4669      	mov	r1, sp
 80afce2:	4668      	mov	r0, sp
 80afce4:	f7fd f880 	bl	80acde8 <mbedtls_mpi_mod_mpi>
 80afce8:	b930      	cbnz	r0, 80afcf8 <mbedtls_rsa_validate_crt+0xcc>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 80afcea:	4601      	mov	r1, r0
 80afcec:	4668      	mov	r0, sp
 80afcee:	f7fc fd20 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80afcf2:	b960      	cbnz	r0, 80afd0e <mbedtls_rsa_validate_crt+0xe2>
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 80afcf4:	2400      	movs	r4, #0
 80afcf6:	e00b      	b.n	80afd10 <mbedtls_rsa_validate_crt+0xe4>
    }

cleanup:

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 &&
 80afcf8:	f510 4f84 	cmn.w	r0, #16896	; 0x4200
 80afcfc:	d007      	beq.n	80afd0e <mbedtls_rsa_validate_crt+0xe2>
        ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&
 80afcfe:	f510 4f81 	cmn.w	r0, #16512	; 0x4080
 80afd02:	d002      	beq.n	80afd0a <mbedtls_rsa_validate_crt+0xde>
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 80afd04:	f5a0 4484 	sub.w	r4, r0, #16896	; 0x4200
 80afd08:	e002      	b.n	80afd10 <mbedtls_rsa_validate_crt+0xe4>
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 80afd0a:	4c06      	ldr	r4, [pc, #24]	; (80afd24 <mbedtls_rsa_validate_crt+0xf8>)
 80afd0c:	e000      	b.n	80afd10 <mbedtls_rsa_validate_crt+0xe4>
 80afd0e:	4c06      	ldr	r4, [pc, #24]	; (80afd28 <mbedtls_rsa_validate_crt+0xfc>)
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    mbedtls_mpi_free( &K );
 80afd10:	4668      	mov	r0, sp
 80afd12:	f7fc f9e8 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 80afd16:	a803      	add	r0, sp, #12
 80afd18:	f7fc f9e5 	bl	80ac0e6 <mbedtls_mpi_free>

    return( ret );
}
 80afd1c:	4620      	mov	r0, r4
 80afd1e:	b007      	add	sp, #28
 80afd20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80afd24:	ffffbf80 	.word	0xffffbf80
 80afd28:	ffffbe00 	.word	0xffffbe00

080afd2c <mbedtls_rsa_validate_params>:
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 80afd2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80afd30:	4688      	mov	r8, r1
 80afd32:	b087      	sub	sp, #28
 80afd34:	4605      	mov	r5, r0
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 80afd36:	4668      	mov	r0, sp
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 80afd38:	4691      	mov	r9, r2
 80afd3a:	461e      	mov	r6, r3
 80afd3c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 80afd3e:	f7fc f9cc 	bl	80ac0da <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 80afd42:	a803      	add	r0, sp, #12
 80afd44:	f7fc f9c9 	bl	80ac0da <mbedtls_mpi_init>

    /*
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
 80afd48:	f1b8 0f00 	cmp.w	r8, #0
 80afd4c:	d018      	beq.n	80afd80 <mbedtls_rsa_validate_params+0x54>
 80afd4e:	f1b9 0f00 	cmp.w	r9, #0
 80afd52:	d015      	beq.n	80afd80 <mbedtls_rsa_validate_params+0x54>
 80afd54:	b90d      	cbnz	r5, 80afd5a <mbedtls_rsa_validate_params+0x2e>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 80afd56:	b9de      	cbnz	r6, 80afd90 <mbedtls_rsa_validate_params+0x64>
 80afd58:	e018      	b.n	80afd8c <mbedtls_rsa_validate_params+0x60>
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
 80afd5a:	464a      	mov	r2, r9
 80afd5c:	4641      	mov	r1, r8
 80afd5e:	4668      	mov	r0, sp
 80afd60:	f7fc fe06 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80afd64:	4604      	mov	r4, r0
 80afd66:	bb68      	cbnz	r0, 80afdc4 <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 80afd68:	2101      	movs	r1, #1
 80afd6a:	4628      	mov	r0, r5
 80afd6c:	f7fc fce1 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80afd70:	2800      	cmp	r0, #0
 80afd72:	dd26      	ble.n	80afdc2 <mbedtls_rsa_validate_params+0x96>
            mbedtls_mpi_cmp_mpi( &K, N ) != 0 )
 80afd74:	4629      	mov	r1, r5
 80afd76:	4668      	mov	r0, sp
 80afd78:	f7fc fc96 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
     */

    if( P != NULL && Q != NULL && N != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 80afd7c:	bb08      	cbnz	r0, 80afdc2 <mbedtls_rsa_validate_params+0x96>
 80afd7e:	e016      	b.n	80afdae <mbedtls_rsa_validate_params+0x82>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
 80afd80:	b125      	cbz	r5, 80afd8c <mbedtls_rsa_validate_params+0x60>
 80afd82:	b9b6      	cbnz	r6, 80afdb2 <mbedtls_rsa_validate_params+0x86>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 80afd84:	f1b8 0f00 	cmp.w	r8, #0
 80afd88:	f040 808a 	bne.w	80afea0 <mbedtls_rsa_validate_params+0x174>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 80afd8c:	2400      	movs	r4, #0
 80afd8e:	e019      	b.n	80afdc4 <mbedtls_rsa_validate_params+0x98>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 80afd90:	2f00      	cmp	r7, #0
 80afd92:	d0fb      	beq.n	80afd8c <mbedtls_rsa_validate_params+0x60>
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 80afd94:	2101      	movs	r1, #1
 80afd96:	4640      	mov	r0, r8
 80afd98:	f7fc fccb 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80afd9c:	2800      	cmp	r0, #0
 80afd9e:	dd10      	ble.n	80afdc2 <mbedtls_rsa_validate_params+0x96>
            mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )
 80afda0:	2101      	movs	r1, #1
 80afda2:	4648      	mov	r0, r9
 80afda4:	f7fc fcc5 	bl	80ac732 <mbedtls_mpi_cmp_int>
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 80afda8:	2800      	cmp	r0, #0
 80afdaa:	dc19      	bgt.n	80afde0 <mbedtls_rsa_validate_params+0xb4>
 80afdac:	e009      	b.n	80afdc2 <mbedtls_rsa_validate_params+0x96>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
 80afdae:	2e00      	cmp	r6, #0
 80afdb0:	d0ec      	beq.n	80afd8c <mbedtls_rsa_validate_params+0x60>
 80afdb2:	2f00      	cmp	r7, #0
 80afdb4:	d0e6      	beq.n	80afd84 <mbedtls_rsa_validate_params+0x58>
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 80afdb6:	2101      	movs	r1, #1
 80afdb8:	4630      	mov	r0, r6
 80afdba:	f7fc fcba 	bl	80ac732 <mbedtls_mpi_cmp_int>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 80afdbe:	2800      	cmp	r0, #0
 80afdc0:	dc5b      	bgt.n	80afe7a <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 80afdc2:	4c3c      	ldr	r4, [pc, #240]	; (80afeb4 <mbedtls_rsa_validate_params+0x188>)
        }
    }

cleanup:

    mbedtls_mpi_free( &K );
 80afdc4:	4668      	mov	r0, sp
 80afdc6:	f7fc f98e 	bl	80ac0e6 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 80afdca:	a803      	add	r0, sp, #12
 80afdcc:	f7fc f98b 	bl	80ac0e6 <mbedtls_mpi_free>

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
 80afdd0:	2c00      	cmp	r4, #0
 80afdd2:	d06a      	beq.n	80afeaa <mbedtls_rsa_validate_params+0x17e>
 80afdd4:	f514 4f84 	cmn.w	r4, #16896	; 0x4200
 80afdd8:	d067      	beq.n	80afeaa <mbedtls_rsa_validate_params+0x17e>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 80afdda:	f5a4 4484 	sub.w	r4, r4, #16896	; 0x4200
    }

    return( ret );
 80afdde:	e064      	b.n	80afeaa <mbedtls_rsa_validate_params+0x17e>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod P-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 80afde0:	463a      	mov	r2, r7
 80afde2:	4631      	mov	r1, r6
 80afde4:	4668      	mov	r0, sp
 80afde6:	f7fc fdc3 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80afdea:	4604      	mov	r4, r0
 80afdec:	2800      	cmp	r0, #0
 80afdee:	d1e9      	bne.n	80afdc4 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 80afdf0:	2201      	movs	r2, #1
 80afdf2:	4669      	mov	r1, sp
 80afdf4:	4668      	mov	r0, sp
 80afdf6:	f7fc fda5 	bl	80ac944 <mbedtls_mpi_sub_int>
 80afdfa:	4604      	mov	r4, r0
 80afdfc:	2800      	cmp	r0, #0
 80afdfe:	d1e1      	bne.n	80afdc4 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
 80afe00:	2201      	movs	r2, #1
 80afe02:	4641      	mov	r1, r8
 80afe04:	a803      	add	r0, sp, #12
 80afe06:	f7fc fd9d 	bl	80ac944 <mbedtls_mpi_sub_int>
 80afe0a:	4604      	mov	r4, r0
 80afe0c:	2800      	cmp	r0, #0
 80afe0e:	d1d9      	bne.n	80afdc4 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 80afe10:	aa03      	add	r2, sp, #12
 80afe12:	4669      	mov	r1, sp
 80afe14:	4668      	mov	r0, sp
 80afe16:	f7fc ffe7 	bl	80acde8 <mbedtls_mpi_mod_mpi>
 80afe1a:	4604      	mov	r4, r0
 80afe1c:	2800      	cmp	r0, #0
 80afe1e:	d1d1      	bne.n	80afdc4 <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 80afe20:	4601      	mov	r1, r0
 80afe22:	4668      	mov	r0, sp
 80afe24:	f7fc fc85 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80afe28:	2800      	cmp	r0, #0
 80afe2a:	d1ca      	bne.n	80afdc2 <mbedtls_rsa_validate_params+0x96>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod Q-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 80afe2c:	463a      	mov	r2, r7
 80afe2e:	4631      	mov	r1, r6
 80afe30:	4668      	mov	r0, sp
 80afe32:	f7fc fd9d 	bl	80ac970 <mbedtls_mpi_mul_mpi>
 80afe36:	4604      	mov	r4, r0
 80afe38:	2800      	cmp	r0, #0
 80afe3a:	d1c3      	bne.n	80afdc4 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 80afe3c:	2201      	movs	r2, #1
 80afe3e:	4669      	mov	r1, sp
 80afe40:	4668      	mov	r0, sp
 80afe42:	f7fc fd7f 	bl	80ac944 <mbedtls_mpi_sub_int>
 80afe46:	4604      	mov	r4, r0
 80afe48:	2800      	cmp	r0, #0
 80afe4a:	d1bb      	bne.n	80afdc4 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 80afe4c:	2201      	movs	r2, #1
 80afe4e:	4649      	mov	r1, r9
 80afe50:	a803      	add	r0, sp, #12
 80afe52:	f7fc fd77 	bl	80ac944 <mbedtls_mpi_sub_int>
 80afe56:	4604      	mov	r4, r0
 80afe58:	2800      	cmp	r0, #0
 80afe5a:	d1b3      	bne.n	80afdc4 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 80afe5c:	aa03      	add	r2, sp, #12
 80afe5e:	4669      	mov	r1, sp
 80afe60:	4668      	mov	r0, sp
 80afe62:	f7fc ffc1 	bl	80acde8 <mbedtls_mpi_mod_mpi>
 80afe66:	4604      	mov	r4, r0
 80afe68:	2800      	cmp	r0, #0
 80afe6a:	d1ab      	bne.n	80afdc4 <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 80afe6c:	4601      	mov	r1, r0
 80afe6e:	4668      	mov	r0, sp
 80afe70:	f7fc fc5f 	bl	80ac732 <mbedtls_mpi_cmp_int>
 80afe74:	2800      	cmp	r0, #0
 80afe76:	d089      	beq.n	80afd8c <mbedtls_rsa_validate_params+0x60>
 80afe78:	e7a3      	b.n	80afdc2 <mbedtls_rsa_validate_params+0x96>
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 80afe7a:	2101      	movs	r1, #1
 80afe7c:	4638      	mov	r0, r7
 80afe7e:	f7fc fc58 	bl	80ac732 <mbedtls_mpi_cmp_int>
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 80afe82:	2800      	cmp	r0, #0
 80afe84:	dd9d      	ble.n	80afdc2 <mbedtls_rsa_validate_params+0x96>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 80afe86:	4629      	mov	r1, r5
 80afe88:	4630      	mov	r0, r6
 80afe8a:	f7fc fc0d 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 80afe8e:	2800      	cmp	r0, #0
 80afe90:	da97      	bge.n	80afdc2 <mbedtls_rsa_validate_params+0x96>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
             mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 80afe92:	4629      	mov	r1, r5
 80afe94:	4638      	mov	r0, r7
 80afe96:	f7fc fc07 	bl	80ac6a8 <mbedtls_mpi_cmp_mpi>

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 80afe9a:	2800      	cmp	r0, #0
 80afe9c:	da91      	bge.n	80afdc2 <mbedtls_rsa_validate_params+0x96>
 80afe9e:	e771      	b.n	80afd84 <mbedtls_rsa_validate_params+0x58>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 80afea0:	f1b9 0f00 	cmp.w	r9, #0
 80afea4:	f47f af57 	bne.w	80afd56 <mbedtls_rsa_validate_params+0x2a>
 80afea8:	e770      	b.n	80afd8c <mbedtls_rsa_validate_params+0x60>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    return( ret );
}
 80afeaa:	4620      	mov	r0, r4
 80afeac:	b007      	add	sp, #28
 80afeae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80afeb2:	bf00      	nop
 80afeb4:	ffffbe00 	.word	0xffffbe00

080afeb8 <mbedtls_rsa_deduce_crt>:

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 80afeb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80afebc:	469a      	mov	sl, r3
 80afebe:	4607      	mov	r7, r0
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 80afec0:	a801      	add	r0, sp, #4
}

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 80afec2:	460e      	mov	r6, r1
 80afec4:	4691      	mov	r9, r2
 80afec6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80afeca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 80afecc:	f7fc f905 	bl	80ac0da <mbedtls_mpi_init>

    /* DP = D mod P-1 */
    if( DP != NULL )
 80afed0:	f1ba 0f00 	cmp.w	sl, #0
 80afed4:	d103      	bne.n	80afede <mbedtls_rsa_deduce_crt+0x26>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
 80afed6:	f1b8 0f00 	cmp.w	r8, #0
 80afeda:	d110      	bne.n	80afefe <mbedtls_rsa_deduce_crt+0x46>
 80afedc:	e01d      	b.n	80aff1a <mbedtls_rsa_deduce_crt+0x62>
    mbedtls_mpi_init( &K );

    /* DP = D mod P-1 */
    if( DP != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
 80afede:	2201      	movs	r2, #1
 80afee0:	4639      	mov	r1, r7
 80afee2:	a801      	add	r0, sp, #4
 80afee4:	f7fc fd2e 	bl	80ac944 <mbedtls_mpi_sub_int>
 80afee8:	4604      	mov	r4, r0
 80afeea:	b9f8      	cbnz	r0, 80aff2c <mbedtls_rsa_deduce_crt+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
 80afeec:	aa01      	add	r2, sp, #4
 80afeee:	4649      	mov	r1, r9
 80afef0:	4650      	mov	r0, sl
 80afef2:	f7fc ff79 	bl	80acde8 <mbedtls_mpi_mod_mpi>
 80afef6:	4604      	mov	r4, r0
 80afef8:	2800      	cmp	r0, #0
 80afefa:	d0ec      	beq.n	80afed6 <mbedtls_rsa_deduce_crt+0x1e>
 80afefc:	e016      	b.n	80aff2c <mbedtls_rsa_deduce_crt+0x74>
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
 80afefe:	2201      	movs	r2, #1
 80aff00:	4631      	mov	r1, r6
 80aff02:	a801      	add	r0, sp, #4
 80aff04:	f7fc fd1e 	bl	80ac944 <mbedtls_mpi_sub_int>
 80aff08:	4604      	mov	r4, r0
 80aff0a:	b978      	cbnz	r0, 80aff2c <mbedtls_rsa_deduce_crt+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
 80aff0c:	aa01      	add	r2, sp, #4
 80aff0e:	4649      	mov	r1, r9
 80aff10:	4640      	mov	r0, r8
 80aff12:	f7fc ff69 	bl	80acde8 <mbedtls_mpi_mod_mpi>
 80aff16:	4604      	mov	r4, r0
 80aff18:	b940      	cbnz	r0, 80aff2c <mbedtls_rsa_deduce_crt+0x74>
    }

    /* QP = Q^{-1} mod P */
    if( QP != NULL )
 80aff1a:	b90d      	cbnz	r5, 80aff20 <mbedtls_rsa_deduce_crt+0x68>
 80aff1c:	462c      	mov	r4, r5
 80aff1e:	e005      	b.n	80aff2c <mbedtls_rsa_deduce_crt+0x74>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
 80aff20:	463a      	mov	r2, r7
 80aff22:	4631      	mov	r1, r6
 80aff24:	4628      	mov	r0, r5
 80aff26:	f7fd fa69 	bl	80ad3fc <mbedtls_mpi_inv_mod>
 80aff2a:	4604      	mov	r4, r0
    }

cleanup:
    mbedtls_mpi_free( &K );
 80aff2c:	a801      	add	r0, sp, #4
 80aff2e:	f7fc f8da 	bl	80ac0e6 <mbedtls_mpi_free>

    return( ret );
}
 80aff32:	4620      	mov	r0, r4
 80aff34:	b004      	add	sp, #16
 80aff36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080aff3a <mbedtls_ssl_own_key>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static inline mbedtls_pk_context *mbedtls_ssl_own_key( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 80aff3a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80aff3c:	b113      	cbz	r3, 80aff44 <mbedtls_ssl_own_key+0xa>
 80aff3e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80aff42:	b913      	cbnz	r3, 80aff4a <mbedtls_ssl_own_key+0x10>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 80aff44:	6803      	ldr	r3, [r0, #0]
 80aff46:	6d1b      	ldr	r3, [r3, #80]	; 0x50

    return( key_cert == NULL ? NULL : key_cert->key );
 80aff48:	b10b      	cbz	r3, 80aff4e <mbedtls_ssl_own_key+0x14>
 80aff4a:	6858      	ldr	r0, [r3, #4]
 80aff4c:	4770      	bx	lr
 80aff4e:	4618      	mov	r0, r3
}
 80aff50:	4770      	bx	lr
	...

080aff54 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj>:
 * Generate a pre-master secret and encrypt it with the server's RSA key
 */
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
 80aff54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80aff58:	4617      	mov	r7, r2
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 80aff5a:	68c2      	ldr	r2, [r0, #12]
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 80aff5c:	6b05      	ldr	r5, [r0, #48]	; 0x30
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 80aff5e:	2a00      	cmp	r2, #0
 80aff60:	bf0c      	ite	eq
 80aff62:	f04f 0800 	moveq.w	r8, #0
 80aff66:	f04f 0802 	movne.w	r8, #2
    unsigned char *p = ssl->handshake->premaster + pms_offset;

    if( offset + len_bytes > MBEDTLS_SSL_OUT_CONTENT_LEN )
 80aff6a:	eb08 0901 	add.w	r9, r8, r1
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 80aff6e:	f505 753d 	add.w	r5, r5, #756	; 0x2f4

    if( offset + len_bytes > MBEDTLS_SSL_OUT_CONTENT_LEN )
 80aff72:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
 * Generate a pre-master secret and encrypt it with the server's RSA key
 */
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
 80aff76:	b086      	sub	sp, #24
 80aff78:	4604      	mov	r4, r0
 80aff7a:	460e      	mov	r6, r1
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 80aff7c:	441d      	add	r5, r3

    if( offset + len_bytes > MBEDTLS_SSL_OUT_CONTENT_LEN )
 80aff7e:	d84d      	bhi.n	80b001c <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xc8>
     *  struct {
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 80aff80:	6800      	ldr	r0, [r0, #0]
                       ssl->conf->transport, p );
 80aff82:	462b      	mov	r3, r5
 80aff84:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 80aff88:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
 80aff8c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80aff90:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
 80aff94:	f7fb feae 	bl	80abcf4 <mbedtls_ssl_write_version>

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
 80aff98:	6823      	ldr	r3, [r4, #0]
 80aff9a:	222e      	movs	r2, #46	; 0x2e
 80aff9c:	f8d3 a018 	ldr.w	sl, [r3, #24]
 80affa0:	1ca9      	adds	r1, r5, #2
 80affa2:	69d8      	ldr	r0, [r3, #28]
 80affa4:	47d0      	blx	sl
 80affa6:	2800      	cmp	r0, #0
 80affa8:	d13d      	bne.n	80b0026 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd2>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "f_rng", ret );
        return( ret );
    }

    ssl->handshake->pmslen = 48;
 80affaa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80affac:	2230      	movs	r2, #48	; 0x30
 80affae:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0

    if( ssl->session_negotiate->peer_cert == NULL )
 80affb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80affb4:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80affb6:	2800      	cmp	r0, #0
 80affb8:	d032      	beq.n	80b0020 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xcc>
    }

    /*
     * Now write it out, encrypted
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
 80affba:	2101      	movs	r1, #1
 80affbc:	30bc      	adds	r0, #188	; 0xbc
 80affbe:	f7fa f80f 	bl	80a9fe0 <mbedtls_pk_can_do>
 80affc2:	2800      	cmp	r0, #0
 80affc4:	d02e      	beq.n	80b0024 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd0>

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
                            p, ssl->handshake->pmslen,
                            ssl->out_msg + offset + len_bytes, olen,
                            MBEDTLS_SSL_OUT_CONTENT_LEN - offset - len_bytes,
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 80affc6:	6822      	ldr	r2, [r4, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
    }

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 80affc8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80affcc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80affce:	9305      	str	r3, [sp, #20]
 80affd0:	69d3      	ldr	r3, [r2, #28]
 80affd2:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80affd4:	9303      	str	r3, [sp, #12]
 80affd6:	6992      	ldr	r2, [r2, #24]
 80affd8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80affda:	9202      	str	r2, [sp, #8]
 80affdc:	f5c6 5200 	rsb	r2, r6, #8192	; 0x2000
 80affe0:	ebc8 0202 	rsb	r2, r8, r2
 80affe4:	9b05      	ldr	r3, [sp, #20]
 80affe6:	9201      	str	r2, [sp, #4]
 80affe8:	9700      	str	r7, [sp, #0]
 80affea:	f8d1 22b0 	ldr.w	r2, [r1, #688]	; 0x2b0
 80affee:	444b      	add	r3, r9
 80afff0:	4629      	mov	r1, r5
 80afff2:	30bc      	adds	r0, #188	; 0xbc
 80afff4:	f7fa f866 	bl	80aa0c4 <mbedtls_pk_encrypt>
 80afff8:	b9a8      	cbnz	r0, 80b0026 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd2>
        return( ret );
    }

#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( len_bytes == 2 )
 80afffa:	f1b8 0f00 	cmp.w	r8, #0
 80afffe:	d012      	beq.n	80b0026 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd2>
    {
        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );
 80b0000:	683b      	ldr	r3, [r7, #0]
 80b0002:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80b0006:	0a1b      	lsrs	r3, r3, #8
 80b0008:	5593      	strb	r3, [r2, r6]
        ssl->out_msg[offset+1] = (unsigned char)( *olen      );
 80b000a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80b000e:	441e      	add	r6, r3
 80b0010:	683b      	ldr	r3, [r7, #0]
 80b0012:	7073      	strb	r3, [r6, #1]
        *olen += 2;
 80b0014:	683b      	ldr	r3, [r7, #0]
 80b0016:	3302      	adds	r3, #2
 80b0018:	603b      	str	r3, [r7, #0]
 80b001a:	e004      	b.n	80b0026 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd2>
    unsigned char *p = ssl->handshake->premaster + pms_offset;

    if( offset + len_bytes > MBEDTLS_SSL_OUT_CONTENT_LEN )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small for encrypted pms" ) );
        return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
 80b001c:	4803      	ldr	r0, [pc, #12]	; (80b002c <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd8>)
 80b001e:	e002      	b.n	80b0026 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd2>
    ssl->handshake->pmslen = 48;

    if( ssl->session_negotiate->peer_cert == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80b0020:	4803      	ldr	r0, [pc, #12]	; (80b0030 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xdc>)
 80b0022:	e000      	b.n	80b0026 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd2>
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
                MBEDTLS_PK_RSA ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 80b0024:	4803      	ldr	r0, [pc, #12]	; (80b0034 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xe0>)
        *olen += 2;
    }
#endif

    return( 0 );
}
 80b0026:	b006      	add	sp, #24
 80b0028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80b002c:	ffff9600 	.word	0xffff9600
 80b0030:	ffff8900 	.word	0xffff8900
 80b0034:	ffff9300 	.word	0xffff9300

080b0038 <mbedtls_ssl_handshake_client_step>:

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 80b0038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 80b003c:	6843      	ldr	r3, [r0, #4]

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 80b003e:	b09f      	sub	sp, #124	; 0x7c
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 80b0040:	2b10      	cmp	r3, #16

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 80b0042:	4604      	mov	r4, r0
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 80b0044:	f000 808e 	beq.w	80b0164 <mbedtls_ssl_handshake_client_step+0x12c>
 80b0048:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80b004a:	2b00      	cmp	r3, #0
 80b004c:	f000 808a 	beq.w	80b0164 <mbedtls_ssl_handshake_client_step+0x12c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "client state: %d", ssl->state ) );

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 80b0050:	f7fa fc84 	bl	80aa95c <mbedtls_ssl_flush_output>
 80b0054:	4605      	mov	r5, r0
 80b0056:	2800      	cmp	r0, #0
 80b0058:	f040 869c 	bne.w	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
 80b005c:	6863      	ldr	r3, [r4, #4]
 80b005e:	2b0c      	cmp	r3, #12
 80b0060:	d105      	bne.n	80b006e <mbedtls_ssl_handshake_client_step+0x36>
        ssl->handshake->new_session_ticket != 0 )
 80b0062:	6b23      	ldr	r3, [r4, #48]	; 0x30
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
 80b0064:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 80b0068:	b10b      	cbz	r3, 80b006e <mbedtls_ssl_handshake_client_step+0x36>
        ssl->handshake->new_session_ticket != 0 )
    {
        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;
 80b006a:	2311      	movs	r3, #17
 80b006c:	6063      	str	r3, [r4, #4]
    }
#endif

    switch( ssl->state )
 80b006e:	6863      	ldr	r3, [r4, #4]
 80b0070:	2b11      	cmp	r3, #17
 80b0072:	d877      	bhi.n	80b0164 <mbedtls_ssl_handshake_client_step+0x12c>
 80b0074:	e8df f013 	tbh	[pc, r3, lsl #1]
 80b0078:	00170012 	.word	0x00170012
 80b007c:	00e20051 	.word	0x00e20051
 80b0080:	01bb00e8 	.word	0x01bb00e8
 80b0084:	01ce01a2 	.word	0x01ce01a2
 80b0088:	026001d2 	.word	0x026001d2
 80b008c:	02e002dc 	.word	0x02e002dc
 80b0090:	030102fd 	.word	0x030102fd
 80b0094:	03070305 	.word	0x03070305
 80b0098:	02e40076 	.word	0x02e40076
    {
        case MBEDTLS_SSL_HELLO_REQUEST:
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
 80b009c:	2201      	movs	r2, #1
 80b009e:	6062      	str	r2, [r4, #4]
            break;
 80b00a0:	461d      	mov	r5, r3
 80b00a2:	f000 be77 	b.w	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
    int uses_ec = 0;
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );

    if( ssl->conf->f_rng == NULL )
 80b00a6:	6821      	ldr	r1, [r4, #0]
 80b00a8:	698b      	ldr	r3, [r1, #24]
 80b00aa:	2b00      	cmp	r3, #0
 80b00ac:	f000 82ef 	beq.w	80b068e <mbedtls_ssl_handshake_client_step+0x656>

#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        ssl->major_ver = ssl->conf->min_major_ver;
 80b00b0:	f891 307a 	ldrb.w	r3, [r1, #122]	; 0x7a
 80b00b4:	60a3      	str	r3, [r4, #8]
        ssl->minor_ver = ssl->conf->min_minor_ver;
 80b00b6:	f891 307b 	ldrb.w	r3, [r1, #123]	; 0x7b
 80b00ba:	60e3      	str	r3, [r4, #12]
    }

    if( ssl->conf->max_major_ver == 0 )
 80b00bc:	f891 0078 	ldrb.w	r0, [r1, #120]	; 0x78
 80b00c0:	2800      	cmp	r0, #0
 80b00c2:	d04f      	beq.n	80b0164 <mbedtls_ssl_handshake_client_step+0x12c>
     */
    buf = ssl->out_msg;
    p = buf + 4;

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 80b00c4:	f891 207c 	ldrb.w	r2, [r1, #124]	; 0x7c
     *     1  .   3   handshake length
     *     4  .   5   highest version supported
     *     6  .   9   current UNIX time
     *    10  .  37   random bytes
     */
    buf = ssl->out_msg;
 80b00c8:	f8d4 9098 	ldr.w	r9, [r4, #152]	; 0x98
    p = buf + 4;

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 80b00cc:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80b00d0:	f109 0304 	add.w	r3, r9, #4
 80b00d4:	f891 1079 	ldrb.w	r1, [r1, #121]	; 0x79
 80b00d8:	f7fb fe0c 	bl	80abcf4 <mbedtls_ssl_write_version>
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
 80b00dc:	6823      	ldr	r3, [r4, #0]
 * Generate random bytes for ClientHello
 */
static int ssl_generate_random( mbedtls_ssl_context *ssl )
{
    int ret;
    unsigned char *p = ssl->handshake->randbytes;
 80b00de:	6b26      	ldr	r6, [r4, #48]	; 0x30
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
 80b00e0:	699d      	ldr	r5, [r3, #24]
 80b00e2:	2204      	movs	r2, #4
 80b00e4:	f506 712d 	add.w	r1, r6, #692	; 0x2b4
 80b00e8:	69d8      	ldr	r0, [r3, #28]
 80b00ea:	47a8      	blx	r5
 80b00ec:	4605      	mov	r5, r0
 80b00ee:	2800      	cmp	r0, #0
 80b00f0:	f040 8650 	bne.w	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
        return( ret );

    p += 4;
#endif /* MBEDTLS_HAVE_TIME */

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
 80b00f4:	6823      	ldr	r3, [r4, #0]
 80b00f6:	221c      	movs	r2, #28
 80b00f8:	699d      	ldr	r5, [r3, #24]
 80b00fa:	f506 712e 	add.w	r1, r6, #696	; 0x2b8
 80b00fe:	69d8      	ldr	r0, [r3, #28]
 80b0100:	47a8      	blx	r5
 80b0102:	4605      	mov	r5, r0
 80b0104:	2800      	cmp	r0, #0
 80b0106:	f040 8645 	bne.w	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
        return( ret );
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
 80b010a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80b010c:	f109 0106 	add.w	r1, r9, #6
 80b0110:	f503 722d 	add.w	r2, r3, #692	; 0x2b4
 80b0114:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
 80b0118:	e2bf      	b.n	80b069a <mbedtls_ssl_handshake_client_step+0x662>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );

    buf = ssl->in_msg;

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 80b011a:	2101      	movs	r1, #1
 80b011c:	4620      	mov	r0, r4
    int handshake_failure = 0;
    const mbedtls_ssl_ciphersuite_t *suite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );

    buf = ssl->in_msg;
 80b011e:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 80b0122:	f7fa fde5 	bl	80aacf0 <mbedtls_ssl_read_record>
 80b0126:	2800      	cmp	r0, #0
 80b0128:	f040 808b 	bne.w	80b0242 <mbedtls_ssl_handshake_client_step+0x20a>
        /* No alert on a read error. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80b012c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80b012e:	2b16      	cmp	r3, #22
 80b0130:	f040 809e 	bne.w	80b0270 <mbedtls_ssl_handshake_client_step+0x238>
            ssl->handshake->verify_cookie_len = 0;
        }
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
 80b0134:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80b0136:	2b29      	cmp	r3, #41	; 0x29
 80b0138:	d94e      	bls.n	80b01d8 <mbedtls_ssl_handshake_client_step+0x1a0>
 80b013a:	f898 3000 	ldrb.w	r3, [r8]
 80b013e:	2b02      	cmp	r3, #2
 80b0140:	d14a      	bne.n	80b01d8 <mbedtls_ssl_handshake_client_step+0x1a0>
 80b0142:	e012      	b.n	80b016a <mbedtls_ssl_handshake_client_step+0x132>
    }

    /*
     * Initialize update checksum functions
     */
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 80b0144:	4648      	mov	r0, r9
 80b0146:	f8d4 b040 	ldr.w	fp, [r4, #64]	; 0x40
 80b014a:	f7ff fbb5 	bl	80af8b8 <mbedtls_ssl_ciphersuite_from_id>
 80b014e:	f8cb 0000 	str.w	r0, [fp]

    if( ssl->transform_negotiate->ciphersuite_info == NULL )
 80b0152:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80b0154:	6819      	ldr	r1, [r3, #0]
 80b0156:	2900      	cmp	r1, #0
 80b0158:	d140      	bne.n	80b01dc <mbedtls_ssl_handshake_client_step+0x1a4>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ciphersuite info for %04x not found", i ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 80b015a:	2250      	movs	r2, #80	; 0x50
 80b015c:	2102      	movs	r1, #2
 80b015e:	4620      	mov	r0, r4
 80b0160:	f7fa fdac 	bl	80aacbc <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80b0164:	4dc6      	ldr	r5, [pc, #792]	; (80b0480 <mbedtls_ssl_handshake_client_step+0x448>)
 80b0166:	f000 be15 	b.w	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );
 80b016a:	4621      	mov	r1, r4
 80b016c:	f851 3b0c 	ldr.w	r3, [r1], #12
     * 37+n . 37+n  compression_method
     *
     * 38+n . 39+n  extensions length (optional)
     * 40+n .  ..   extensions
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );
 80b0170:	f108 0a04 	add.w	sl, r8, #4

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );
 80b0174:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 80b0178:	f104 0008 	add.w	r0, r4, #8
 80b017c:	4653      	mov	r3, sl
 80b017e:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80b0182:	f7fb fdba 	bl	80abcfa <mbedtls_ssl_read_version>

    if( ssl->major_ver < ssl->conf->min_major_ver ||
 80b0186:	6823      	ldr	r3, [r4, #0]
 80b0188:	68a2      	ldr	r2, [r4, #8]
 80b018a:	f893 107a 	ldrb.w	r1, [r3, #122]	; 0x7a
 80b018e:	428a      	cmp	r2, r1
 80b0190:	f2c0 8442 	blt.w	80b0a18 <mbedtls_ssl_handshake_client_step+0x9e0>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 80b0194:	68e1      	ldr	r1, [r4, #12]

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );

    if( ssl->major_ver < ssl->conf->min_major_ver ||
 80b0196:	f893 007b 	ldrb.w	r0, [r3, #123]	; 0x7b
 80b019a:	4281      	cmp	r1, r0
 80b019c:	f2c0 843c 	blt.w	80b0a18 <mbedtls_ssl_handshake_client_step+0x9e0>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 80b01a0:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
 80b01a4:	4282      	cmp	r2, r0
 80b01a6:	f300 8437 	bgt.w	80b0a18 <mbedtls_ssl_handshake_client_step+0x9e0>
        ssl->major_ver > ssl->conf->max_major_ver ||
 80b01aa:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80b01ae:	4299      	cmp	r1, r3
 80b01b0:	f300 8432 	bgt.w	80b0a18 <mbedtls_ssl_handshake_client_step+0x9e0>
                           ( (uint32_t) buf[2] << 24 ) |
                           ( (uint32_t) buf[3] << 16 ) |
                           ( (uint32_t) buf[4] <<  8 ) |
                           ( (uint32_t) buf[5]       ) ) );

    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );
 80b01b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80b01b6:	f108 0206 	add.w	r2, r8, #6
 80b01ba:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
 80b01be:	f108 0126 	add.w	r1, r8, #38	; 0x26
 80b01c2:	f852 0b04 	ldr.w	r0, [r2], #4
 80b01c6:	428a      	cmp	r2, r1
 80b01c8:	f843 0b04 	str.w	r0, [r3], #4
 80b01cc:	d1f9      	bne.n	80b01c2 <mbedtls_ssl_handshake_client_step+0x18a>

    n = buf[34];
 80b01ce:	f898 6026 	ldrb.w	r6, [r8, #38]	; 0x26

    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );

    if( n > 32 )
 80b01d2:	2e20      	cmp	r6, #32
 80b01d4:	f240 8427 	bls.w	80b0a26 <mbedtls_ssl_handshake_client_step+0x9ee>

    if( len == 0 || (size_t)( buf[0] + 1 ) != len )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 80b01d8:	2232      	movs	r2, #50	; 0x32
 80b01da:	e029      	b.n	80b0230 <mbedtls_ssl_handshake_client_step+0x1f8>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    mbedtls_ssl_optimize_checksum( ssl, ssl->transform_negotiate->ciphersuite_info );
 80b01dc:	4620      	mov	r0, r4
 80b01de:	f7fa ff81 	bl	80ab0e4 <mbedtls_ssl_optimize_checksum>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 80b01e2:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
 80b01e6:	f108 0827 	add.w	r8, r8, #39	; 0x27
 80b01ea:	f8db 3348 	ldr.w	r3, [fp, #840]	; 0x348
 80b01ee:	2b00      	cmp	r3, #0
 80b01f0:	f040 844b 	bne.w	80b0a8a <mbedtls_ssl_handshake_client_step+0xa52>
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
    {
        ssl->state++;
 80b01f4:	6863      	ldr	r3, [r4, #4]
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
        ssl->session_negotiate->compression = comp;
        ssl->session_negotiate->id_len = n;
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 80b01f6:	4641      	mov	r1, r8
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
    {
        ssl->state++;
 80b01f8:	3301      	adds	r3, #1
 80b01fa:	6063      	str	r3, [r4, #4]
        ssl->handshake->resume = 0;
 80b01fc:	2300      	movs	r3, #0
 80b01fe:	f8cb 3348 	str.w	r3, [fp, #840]	; 0x348
#if defined(MBEDTLS_HAVE_TIME)
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
 80b0202:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80b0204:	f8c2 9000 	str.w	r9, [r2]
        ssl->session_negotiate->compression = comp;
 80b0208:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80b020a:	6053      	str	r3, [r2, #4]
        ssl->session_negotiate->id_len = n;
 80b020c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 80b020e:	4632      	mov	r2, r6
#if defined(MBEDTLS_HAVE_TIME)
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
        ssl->session_negotiate->compression = comp;
        ssl->session_negotiate->id_len = n;
 80b0210:	609e      	str	r6, [r3, #8]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 80b0212:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80b0214:	300c      	adds	r0, #12
 80b0216:	f002 faee 	bl	80b27f6 <memcpy>
     * Perform cipher suite validation in same way as in ssl_write_client_hello.
     */
    i = 0;
    while( 1 )
    {
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
 80b021a:	6823      	ldr	r3, [r4, #0]
 80b021c:	68e2      	ldr	r2, [r4, #12]
 80b021e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80b0222:	3b04      	subs	r3, #4
 80b0224:	f853 0f04 	ldr.w	r0, [r3, #4]!
 80b0228:	2800      	cmp	r0, #0
 80b022a:	f040 8456 	bne.w	80b0ada <mbedtls_ssl_handshake_client_step+0xaa2>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
 80b022e:	222f      	movs	r2, #47	; 0x2f
        p++;
    }

    MBEDTLS_SSL_DEBUG_MSG( 1, ( "no point format in common" ) );
    mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                    MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
 80b0230:	2102      	movs	r1, #2
 80b0232:	4620      	mov	r0, r4
 80b0234:	f7fa fd42 	bl	80aacbc <mbedtls_ssl_send_alert_message>
 80b0238:	f000 bcd5 	b.w	80b0be6 <mbedtls_ssl_handshake_client_step+0xbae>
       case MBEDTLS_SSL_SERVER_HELLO:
           ret = ssl_parse_server_hello( ssl );
           break;

       case MBEDTLS_SSL_SERVER_CERTIFICATE:
           ret = mbedtls_ssl_parse_certificate( ssl );
 80b023c:	4620      	mov	r0, r4
 80b023e:	f7fb fc1d 	bl	80aba7c <mbedtls_ssl_parse_certificate>
 80b0242:	4605      	mov	r5, r0
           break;
 80b0244:	f000 bda6 	b.w	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>

static int ssl_parse_server_key_exchange( mbedtls_ssl_context *ssl )
{
    int ret;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 80b0248:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80b024a:	f8d3 8000 	ldr.w	r8, [r3]
    unsigned char *p = NULL, *end = NULL;
 80b024e:	2300      	movs	r3, #0
 80b0250:	930c      	str	r3, [sp, #48]	; 0x30

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );

#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 80b0252:	f898 300a 	ldrb.w	r3, [r8, #10]
 80b0256:	2b01      	cmp	r3, #1
 80b0258:	d101      	bne.n	80b025e <mbedtls_ssl_handshake_client_step+0x226>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse server key exchange" ) );
        ssl->state++;
 80b025a:	2305      	movs	r3, #5
 80b025c:	e0c4      	b.n	80b03e8 <mbedtls_ssl_handshake_client_step+0x3b0>
    {
        goto start_processing;
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 80b025e:	2101      	movs	r1, #1
 80b0260:	4620      	mov	r0, r4
 80b0262:	f7fa fd45 	bl	80aacf0 <mbedtls_ssl_read_record>
 80b0266:	2800      	cmp	r0, #0
 80b0268:	d1eb      	bne.n	80b0242 <mbedtls_ssl_handshake_client_step+0x20a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80b026a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80b026c:	2b16      	cmp	r3, #22
 80b026e:	d001      	beq.n	80b0274 <mbedtls_ssl_handshake_client_step+0x23c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 80b0270:	220a      	movs	r2, #10
 80b0272:	e09e      	b.n	80b03b2 <mbedtls_ssl_handshake_client_step+0x37a>

    /*
     * ServerKeyExchange may be skipped with PSK and RSA-PSK when the server
     * doesn't use a psk_identity_hint
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )
 80b0274:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80b0276:	781a      	ldrb	r2, [r3, #0]
 80b0278:	2a0c      	cmp	r2, #12
 80b027a:	f898 200a 	ldrb.w	r2, [r8, #10]
 80b027e:	d007      	beq.n	80b0290 <mbedtls_ssl_handshake_client_step+0x258>
    {
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 80b0280:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 80b0284:	2a05      	cmp	r2, #5
 80b0286:	d1f3      	bne.n	80b0270 <mbedtls_ssl_handshake_client_step+0x238>
            ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
        {
            /* Current message is probably either
             * CertificateRequest or ServerHelloDone */
            ssl->keep_current_message = 1;
 80b0288:	2301      	movs	r3, #1
 80b028a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80b028e:	e0a9      	b.n	80b03e4 <mbedtls_ssl_handshake_client_step+0x3ac>
        ssl->handshake->ecrs_state = ssl_ecrs_ske_start_processing;

start_processing:
#endif
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
    end = ssl->in_msg + ssl->in_hslen;
 80b0290:	6fa6      	ldr	r6, [r4, #120]	; 0x78
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 80b0292:	1f50      	subs	r0, r2, #5
    if( ssl->handshake->ecrs_enabled )
        ssl->handshake->ecrs_state = ssl_ecrs_ske_start_processing;

start_processing:
#endif
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 80b0294:	1d19      	adds	r1, r3, #4
    end = ssl->in_msg + ssl->in_hslen;
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 80b0296:	2803      	cmp	r0, #3
    if( ssl->handshake->ecrs_enabled )
        ssl->handshake->ecrs_state = ssl_ecrs_ske_start_processing;

start_processing:
#endif
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 80b0298:	910c      	str	r1, [sp, #48]	; 0x30
    end = ssl->in_msg + ssl->in_hslen;
 80b029a:	441e      	add	r6, r3
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 80b029c:	d903      	bls.n	80b02a6 <mbedtls_ssl_handshake_client_step+0x26e>
#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                     \
    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED) ||                     \
    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
 80b029e:	1ed3      	subs	r3, r2, #3
 80b02a0:	2b01      	cmp	r3, #1
 80b02a2:	d816      	bhi.n	80b02d2 <mbedtls_ssl_handshake_client_step+0x29a>
 80b02a4:	e018      	b.n	80b02d8 <mbedtls_ssl_handshake_client_step+0x2a0>
    /*
     * PSK parameters:
     *
     * opaque psk_identity_hint<0..2^16-1>;
     */
    if( end - (*p) < 2 )
 80b02a6:	1a71      	subs	r1, r6, r1
 80b02a8:	2901      	cmp	r1, #1
 80b02aa:	f340 849e 	ble.w	80b0bea <mbedtls_ssl_handshake_client_step+0xbb2>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message "
                                    "(psk_identity_hint length)" ) );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
    }
    len = (*p)[0] << 8 | (*p)[1];
 80b02ae:	7918      	ldrb	r0, [r3, #4]
 80b02b0:	7959      	ldrb	r1, [r3, #5]
    *p += 2;
 80b02b2:	3306      	adds	r3, #6
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message "
                                    "(psk_identity_hint length)" ) );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
    }
    len = (*p)[0] << 8 | (*p)[1];
 80b02b4:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    *p += 2;

    if( end - (*p) < (int) len )
 80b02b8:	1af0      	subs	r0, r6, r3
 80b02ba:	4281      	cmp	r1, r0
 80b02bc:	dd02      	ble.n	80b02c4 <mbedtls_ssl_handshake_client_step+0x28c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message "
                                    "(psk_identity_hint length)" ) );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
    }
    len = (*p)[0] << 8 | (*p)[1];
    *p += 2;
 80b02be:	930c      	str	r3, [sp, #48]	; 0x30
 80b02c0:	f000 bc93 	b.w	80b0bea <mbedtls_ssl_handshake_client_step+0xbb2>
    /*
     * Note: we currently ignore the PKS identity hint, as we only allow one
     * PSK to be provisionned on the client. This could be changed later if
     * someone needs that feature.
     */
    *p += len;
 80b02c4:	440b      	add	r3, r1
 80b02c6:	930c      	str	r3, [sp, #48]	; 0x30
    } /* FALLTROUGH */
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */

#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED) ||                       \
    defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 80b02c8:	f002 03fd 	and.w	r3, r2, #253	; 0xfd
 80b02cc:	2b05      	cmp	r3, #5
 80b02ce:	d1e6      	bne.n	80b029e <mbedtls_ssl_handshake_client_step+0x266>
 80b02d0:	e01a      	b.n	80b0308 <mbedtls_ssl_handshake_client_step+0x2d0>
#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                     \
    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED) ||                     \
    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
 80b02d2:	2a08      	cmp	r2, #8
 80b02d4:	f040 84b7 	bne.w	80b0c46 <mbedtls_ssl_handshake_client_step+0xc0e>
     * struct {
     *     ECParameters curve_params;
     *     ECPoint      public;
     * } ServerECDHParams;
     */
    if( ( ret = mbedtls_ecdh_read_params( &ssl->handshake->ecdh_ctx,
 80b02d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80b02da:	4632      	mov	r2, r6
 80b02dc:	a90c      	add	r1, sp, #48	; 0x30
 80b02de:	3004      	adds	r0, #4
 80b02e0:	f7f0 ff80 	bl	80a11e4 <mbedtls_ecdh_read_params>
 80b02e4:	2800      	cmp	r0, #0
 80b02e6:	f040 8480 	bne.w	80b0bea <mbedtls_ssl_handshake_client_step+0xbb2>
static int ssl_check_server_ecdh_params( const mbedtls_ssl_context *ssl )
{
    const mbedtls_ecp_curve_info *curve_info;
    mbedtls_ecp_group_id grp_id;
#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    grp_id = ssl->handshake->ecdh_ctx.grp.id;
 80b02ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80b02ec:	791f      	ldrb	r7, [r3, #4]
#else
    grp_id = ssl->handshake->ecdh_ctx.grp_id;
#endif

    curve_info = mbedtls_ecp_curve_info_from_grp_id( grp_id );
 80b02ee:	4638      	mov	r0, r7
 80b02f0:	f7f3 fe8a 	bl	80a4008 <mbedtls_ecp_curve_info_from_grp_id>
    if( curve_info == NULL )
 80b02f4:	2800      	cmp	r0, #0
 80b02f6:	f000 8478 	beq.w	80b0bea <mbedtls_ssl_handshake_client_step+0xbb2>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "ECDH curve: %s", curve_info->name ) );

#if defined(MBEDTLS_ECP_C)
    if( mbedtls_ssl_check_curve( ssl, grp_id ) != 0 )
 80b02fa:	4639      	mov	r1, r7
 80b02fc:	4620      	mov	r0, r4
 80b02fe:	f7fb fb61 	bl	80ab9c4 <mbedtls_ssl_check_curve>
 80b0302:	2800      	cmp	r0, #0
 80b0304:	f040 8471 	bne.w	80b0bea <mbedtls_ssl_handshake_client_step+0xbb2>
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED) */

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)
static inline int mbedtls_ssl_ciphersuite_uses_server_signature( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
 80b0308:	f898 300a 	ldrb.w	r3, [r8, #10]
 80b030c:	3b02      	subs	r3, #2
 80b030e:	2b02      	cmp	r3, #2
 80b0310:	d868      	bhi.n	80b03e4 <mbedtls_ssl_handshake_client_step+0x3ac>

        /*
         * Handle the digitally-signed structure
         */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 80b0312:	68e3      	ldr	r3, [r4, #12]
 80b0314:	2b03      	cmp	r3, #3
 80b0316:	f040 8496 	bne.w	80b0c46 <mbedtls_ssl_handshake_client_step+0xc0e>
        size_t sig_len, hashlen;
        unsigned char hash[64];
        mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
        mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
        size_t params_len = p - params;
 80b031a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    if( ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
    {
        return( 0 );
    }

    if( (*p) + 2 > end )
 80b031c:	1cbb      	adds	r3, r7, #2
 80b031e:	429e      	cmp	r6, r3
 80b0320:	f0c0 8463 	bcc.w	80b0bea <mbedtls_ssl_handshake_client_step+0xbb2>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );

    /*
     * Get hash algorithm
     */
    if( ( *md_alg = mbedtls_ssl_md_alg_from_hash( (*p)[0] ) ) == MBEDTLS_MD_NONE )
 80b0324:	7838      	ldrb	r0, [r7, #0]
    {
        size_t sig_len, hashlen;
        unsigned char hash[64];
        mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
        mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 80b0326:	f8d4 a064 	ldr.w	sl, [r4, #100]	; 0x64
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );

    /*
     * Get hash algorithm
     */
    if( ( *md_alg = mbedtls_ssl_md_alg_from_hash( (*p)[0] ) ) == MBEDTLS_MD_NONE )
 80b032a:	f7fb fb37 	bl	80ab99c <mbedtls_ssl_md_alg_from_hash>
 80b032e:	4681      	mov	r9, r0
 80b0330:	2800      	cmp	r0, #0
 80b0332:	f000 845a 	beq.w	80b0bea <mbedtls_ssl_handshake_client_step+0xbb2>
    }

    /*
     * Get signature algorithm
     */
    if( ( *pk_alg = mbedtls_ssl_pk_alg_from_sig( (*p)[1] ) ) == MBEDTLS_PK_NONE )
 80b0336:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80b0338:	7858      	ldrb	r0, [r3, #1]
 80b033a:	f7fb fb27 	bl	80ab98c <mbedtls_ssl_pk_alg_from_sig>
 80b033e:	4683      	mov	fp, r0
 80b0340:	2800      	cmp	r0, #0
 80b0342:	f000 8452 	beq.w	80b0bea <mbedtls_ssl_handshake_client_step+0xbb2>
    }

    /*
     * Check if the hash is acceptable
     */
    if( mbedtls_ssl_check_sig_hash( ssl, *md_alg ) != 0 )
 80b0346:	4649      	mov	r1, r9
 80b0348:	4620      	mov	r0, r4
 80b034a:	f7fb fb49 	bl	80ab9e0 <mbedtls_ssl_check_sig_hash>
 80b034e:	2800      	cmp	r0, #0
 80b0350:	f040 844b 	bne.w	80b0bea <mbedtls_ssl_handshake_client_step+0xbb2>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "Server used SignatureAlgorithm %d", (*p)[1] ) );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "Server used HashAlgorithm %d", (*p)[0] ) );
    *p += 2;
 80b0354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                                MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
                return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
            }

            if( pk_alg != mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info ) )
 80b0356:	4640      	mov	r0, r8
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "Server used SignatureAlgorithm %d", (*p)[1] ) );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "Server used HashAlgorithm %d", (*p)[0] ) );
    *p += 2;
 80b0358:	3302      	adds	r3, #2
 80b035a:	930c      	str	r3, [sp, #48]	; 0x30
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                                MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
                return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
            }

            if( pk_alg != mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info ) )
 80b035c:	f7ff fae0 	bl	80af920 <mbedtls_ssl_get_ciphersuite_sig_pk_alg>
 80b0360:	4558      	cmp	r0, fp
 80b0362:	4680      	mov	r8, r0
 80b0364:	f040 8441 	bne.w	80b0bea <mbedtls_ssl_handshake_client_step+0xbb2>

        /*
         * Read signature
         */

        if( p > end - 2 )
 80b0368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80b036a:	1eb2      	subs	r2, r6, #2
 80b036c:	4293      	cmp	r3, r2
 80b036e:	f200 8443 	bhi.w	80b0bf8 <mbedtls_ssl_handshake_client_step+0xbc0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
        }
        sig_len = ( p[0] << 8 ) | p[1];
 80b0372:	f893 b000 	ldrb.w	fp, [r3]
 80b0376:	785a      	ldrb	r2, [r3, #1]
        p += 2;
 80b0378:	3302      	adds	r3, #2
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
        }
        sig_len = ( p[0] << 8 ) | p[1];
 80b037a:	ea42 2b0b 	orr.w	fp, r2, fp, lsl #8
        p += 2;

        if( p != end - sig_len )
 80b037e:	ebcb 0606 	rsb	r6, fp, r6
 80b0382:	42b3      	cmp	r3, r6
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
        }
        sig_len = ( p[0] << 8 ) | p[1];
        p += 2;
 80b0384:	930c      	str	r3, [sp, #48]	; 0x30

        if( p != end - sig_len )
 80b0386:	f040 8437 	bne.w	80b0bf8 <mbedtls_ssl_handshake_client_step+0xbc0>
    {
        size_t sig_len, hashlen;
        unsigned char hash[64];
        mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
        mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 80b038a:	f10a 0304 	add.w	r3, sl, #4
          MBEDTLS_SSL_PROTO_TLS1_1 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( md_alg != MBEDTLS_MD_NONE )
        {
            ret = mbedtls_ssl_get_key_exchange_md_tls1_2( ssl, hash, &hashlen,
 80b038e:	1aff      	subs	r7, r7, r3
 80b0390:	f8cd 9004 	str.w	r9, [sp, #4]
 80b0394:	9700      	str	r7, [sp, #0]
 80b0396:	aa0d      	add	r2, sp, #52	; 0x34
 80b0398:	a90e      	add	r1, sp, #56	; 0x38
 80b039a:	4620      	mov	r0, r4
 80b039c:	f7fb fcb2 	bl	80abd04 <mbedtls_ssl_get_key_exchange_md_tls1_2>
                                                          params, params_len,
                                                          md_alg );
            if( ret != 0 )
 80b03a0:	2800      	cmp	r0, #0
 80b03a2:	f47f af4e 	bne.w	80b0242 <mbedtls_ssl_handshake_client_step+0x20a>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        MBEDTLS_SSL_DEBUG_BUF( 3, "parameters hash", hash, hashlen );

        if( ssl->session_negotiate->peer_cert == NULL )
 80b03a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80b03a8:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80b03aa:	2800      	cmp	r0, #0
 80b03ac:	f040 8426 	bne.w	80b0bfc <mbedtls_ssl_handshake_client_step+0xbc4>
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
 80b03b0:	2228      	movs	r2, #40	; 0x28
 80b03b2:	2102      	movs	r1, #2
 80b03b4:	4620      	mov	r0, r4
 80b03b6:	f7fa fc81 	bl	80aacbc <mbedtls_ssl_send_alert_message>
 80b03ba:	e16a      	b.n	80b0692 <mbedtls_ssl_handshake_client_step+0x65a>
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello done" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 80b03bc:	2101      	movs	r1, #1
 80b03be:	4620      	mov	r0, r4
 80b03c0:	f7fa fc96 	bl	80aacf0 <mbedtls_ssl_read_record>
 80b03c4:	2800      	cmp	r0, #0
 80b03c6:	f47f af3c 	bne.w	80b0242 <mbedtls_ssl_handshake_client_step+0x20a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80b03ca:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80b03cc:	2b16      	cmp	r3, #22
 80b03ce:	f040 8160 	bne.w	80b0692 <mbedtls_ssl_handshake_client_step+0x65a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 80b03d2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80b03d4:	2b04      	cmp	r3, #4
 80b03d6:	f040 847b 	bne.w	80b0cd0 <mbedtls_ssl_handshake_client_step+0xc98>
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
 80b03da:	6e63      	ldr	r3, [r4, #100]	; 0x64
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 80b03dc:	781b      	ldrb	r3, [r3, #0]
 80b03de:	2b0e      	cmp	r3, #14
 80b03e0:	f040 8476 	bne.w	80b0cd0 <mbedtls_ssl_handshake_client_step+0xc98>
        }
    }
#endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */

exit:
    ssl->state++;
 80b03e4:	6863      	ldr	r3, [r4, #4]
 80b03e6:	3301      	adds	r3, #1
 80b03e8:	6063      	str	r3, [r4, #4]
 80b03ea:	f000 bcd3 	b.w	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
    int ret;
    unsigned char *buf;
    size_t n = 0;
    size_t cert_type_len = 0, dn_len = 0;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 80b03ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80b03f0:	681b      	ldr	r3, [r3, #0]
 80b03f2:	7a9b      	ldrb	r3, [r3, #10]
 80b03f4:	3b01      	subs	r3, #1
 80b03f6:	b2db      	uxtb	r3, r3
 80b03f8:	2b09      	cmp	r3, #9
 80b03fa:	f200 8426 	bhi.w	80b0c4a <mbedtls_ssl_handshake_client_step+0xc12>
 80b03fe:	f240 320f 	movw	r2, #783	; 0x30f
 80b0402:	2601      	movs	r6, #1
 80b0404:	fa06 f303 	lsl.w	r3, r6, r3
 80b0408:	401a      	ands	r2, r3
 80b040a:	2a00      	cmp	r2, #0
 80b040c:	f000 841d 	beq.w	80b0c4a <mbedtls_ssl_handshake_client_step+0xc12>
 80b0410:	f000 bc1e 	b.w	80b0c50 <mbedtls_ssl_handshake_client_step+0xc18>
        *      ( CertificateVerify  )
        *        ChangeCipherSpec
        *        Finished
        */
       case MBEDTLS_SSL_CLIENT_CERTIFICATE:
           ret = mbedtls_ssl_write_certificate( ssl );
 80b0414:	4620      	mov	r0, r4
 80b0416:	f7fa fdc1 	bl	80aaf9c <mbedtls_ssl_write_certificate>
 80b041a:	e712      	b.n	80b0242 <mbedtls_ssl_handshake_client_step+0x20a>
static int ssl_write_client_key_exchange( mbedtls_ssl_context *ssl )
{
    int ret;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 80b041c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80b041e:	681f      	ldr	r7, [r3, #0]
#endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                     \
    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED) ||                   \
    defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) ||                      \
    defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
 80b0420:	7abb      	ldrb	r3, [r7, #10]
 80b0422:	1eda      	subs	r2, r3, #3
 80b0424:	2a01      	cmp	r2, #1
 80b0426:	d902      	bls.n	80b042e <mbedtls_ssl_handshake_client_step+0x3f6>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA ||
 80b0428:	3b09      	subs	r3, #9
 80b042a:	2b01      	cmp	r3, #1
 80b042c:	d82a      	bhi.n	80b0484 <mbedtls_ssl_handshake_client_step+0x44c>
#endif

        ret = mbedtls_ecdh_make_public( &ssl->handshake->ecdh_ctx,
                                &n,
                                &ssl->out_msg[i], 1000,
                                ssl->conf->f_rng, ssl->conf->p_rng );
 80b042e:	6823      	ldr	r3, [r4, #0]

            mbedtls_ecdh_enable_restart( &ssl->handshake->ecdh_ctx );
        }
#endif

        ret = mbedtls_ecdh_make_public( &ssl->handshake->ecdh_ctx,
 80b0430:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80b0434:	69d9      	ldr	r1, [r3, #28]
 80b0436:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80b0438:	9101      	str	r1, [sp, #4]
 80b043a:	699b      	ldr	r3, [r3, #24]
 80b043c:	3204      	adds	r2, #4
 80b043e:	9300      	str	r3, [sp, #0]
 80b0440:	a90e      	add	r1, sp, #56	; 0x38
 80b0442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80b0446:	3004      	adds	r0, #4
 80b0448:	f7f0 feec 	bl	80a1224 <mbedtls_ecdh_make_public>
                                &n,
                                &ssl->out_msg[i], 1000,
                                ssl->conf->f_rng, ssl->conf->p_rng );
        if( ret != 0 )
 80b044c:	4605      	mov	r5, r0
 80b044e:	2800      	cmp	r0, #0
 80b0450:	f040 84a0 	bne.w	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
#endif
        if( ( ret = mbedtls_ecdh_calc_secret( &ssl->handshake->ecdh_ctx,
                                      &ssl->handshake->pmslen,
                                       ssl->handshake->premaster,
                                       MBEDTLS_MPI_MAX_SIZE,
                                       ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 80b0454:	6823      	ldr	r3, [r4, #0]

ecdh_calc_secret:
        if( ssl->handshake->ecrs_enabled )
            n = ssl->handshake->ecrs_n;
#endif
        if( ( ret = mbedtls_ecdh_calc_secret( &ssl->handshake->ecdh_ctx,
 80b0456:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80b0458:	69da      	ldr	r2, [r3, #28]
 80b045a:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 80b045e:	9201      	str	r2, [sp, #4]
 80b0460:	699b      	ldr	r3, [r3, #24]
 80b0462:	f500 723d 	add.w	r2, r0, #756	; 0x2f4
 80b0466:	9300      	str	r3, [sp, #0]
 80b0468:	3004      	adds	r0, #4
 80b046a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80b046e:	f7f0 ff01 	bl	80a1274 <mbedtls_ecdh_calc_secret>
 80b0472:	4605      	mov	r5, r0
 80b0474:	2800      	cmp	r0, #0
 80b0476:	f040 848d 	bne.w	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA )
    {
        /*
         * ECDH key exchange -- send client public value
         */
        i = 4;
 80b047a:	2604      	movs	r6, #4
 80b047c:	e04e      	b.n	80b051c <mbedtls_ssl_handshake_client_step+0x4e4>
 80b047e:	bf00      	nop
 80b0480:	ffff8f00 	.word	0xffff8f00
#endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    if( mbedtls_ssl_ciphersuite_uses_psk( ciphersuite_info ) )
 80b0484:	4638      	mov	r0, r7
 80b0486:	f7ff fa6f 	bl	80af968 <mbedtls_ssl_ciphersuite_uses_psk>
 80b048a:	4603      	mov	r3, r0
 80b048c:	2800      	cmp	r0, #0
 80b048e:	d03b      	beq.n	80b0508 <mbedtls_ssl_handshake_client_step+0x4d0>
    {
        /*
         * opaque psk_identity<0..2^16-1>;
         */
        if( ssl->conf->psk == NULL || ssl->conf->psk_identity == NULL )
 80b0490:	6823      	ldr	r3, [r4, #0]
 80b0492:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80b0494:	2a00      	cmp	r2, #0
 80b0496:	f000 80c9 	beq.w	80b062c <mbedtls_ssl_handshake_client_step+0x5f4>
 80b049a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80b049c:	2a00      	cmp	r2, #0
 80b049e:	f000 80c5 	beq.w	80b062c <mbedtls_ssl_handshake_client_step+0x5f4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for PSK" ) );
            return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
        }

        i = 4;
        n = ssl->conf->psk_identity_len;
 80b04a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70

        if( i + 2 + n > MBEDTLS_SSL_OUT_CONTENT_LEN )
 80b04a4:	1d9a      	adds	r2, r3, #6
 80b04a6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for PSK" ) );
            return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
        }

        i = 4;
        n = ssl->conf->psk_identity_len;
 80b04aa:	930e      	str	r3, [sp, #56]	; 0x38

        if( i + 2 + n > MBEDTLS_SSL_OUT_CONTENT_LEN )
 80b04ac:	d841      	bhi.n	80b0532 <mbedtls_ssl_handshake_client_step+0x4fa>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "psk identity too long or "
                                        "SSL buffer too short" ) );
            return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
        }

        ssl->out_msg[i++] = (unsigned char)( n >> 8 );
 80b04ae:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80b04b2:	0a19      	lsrs	r1, r3, #8
 80b04b4:	7111      	strb	r1, [r2, #4]
        ssl->out_msg[i++] = (unsigned char)( n      );
 80b04b6:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80b04ba:	7153      	strb	r3, [r2, #5]

        memcpy( ssl->out_msg + i, ssl->conf->psk_identity, ssl->conf->psk_identity_len );
 80b04bc:	6823      	ldr	r3, [r4, #0]
 80b04be:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 80b04c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80b04c4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80b04c6:	3006      	adds	r0, #6
 80b04c8:	f002 f995 	bl	80b27f6 <memcpy>
        i += ssl->conf->psk_identity_len;
 80b04cc:	6823      	ldr	r3, [r4, #0]
 80b04ce:	6f1e      	ldr	r6, [r3, #112]	; 0x70

#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK )
 80b04d0:	7abb      	ldrb	r3, [r7, #10]

        ssl->out_msg[i++] = (unsigned char)( n >> 8 );
        ssl->out_msg[i++] = (unsigned char)( n      );

        memcpy( ssl->out_msg + i, ssl->conf->psk_identity, ssl->conf->psk_identity_len );
        i += ssl->conf->psk_identity_len;
 80b04d2:	3606      	adds	r6, #6

#if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK )
 80b04d4:	2b05      	cmp	r3, #5
 80b04d6:	d102      	bne.n	80b04de <mbedtls_ssl_handshake_client_step+0x4a6>
        {
            n = 0;
 80b04d8:	2300      	movs	r3, #0
 80b04da:	930e      	str	r3, [sp, #56]	; 0x38
 80b04dc:	e00c      	b.n	80b04f8 <mbedtls_ssl_handshake_client_step+0x4c0>
        }
        else
#endif
#if defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
 80b04de:	2b07      	cmp	r3, #7
 80b04e0:	f040 83b1 	bne.w	80b0c46 <mbedtls_ssl_handshake_client_step+0xc0e>
        {
            if( ( ret = ssl_write_encrypted_pms( ssl, i, &n, 2 ) ) != 0 )
 80b04e4:	2302      	movs	r3, #2
 80b04e6:	aa0e      	add	r2, sp, #56	; 0x38
 80b04e8:	4631      	mov	r1, r6
 80b04ea:	4620      	mov	r0, r4
 80b04ec:	f7ff fd32 	bl	80aff54 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj>
 80b04f0:	4605      	mov	r5, r0
 80b04f2:	2800      	cmp	r0, #0
 80b04f4:	f040 844e 	bne.w	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        if( ( ret = mbedtls_ssl_psk_derive_premaster( ssl,
 80b04f8:	7ab9      	ldrb	r1, [r7, #10]
 80b04fa:	4620      	mov	r0, r4
 80b04fc:	f7fa f98a 	bl	80aa814 <mbedtls_ssl_psk_derive_premaster>
 80b0500:	4605      	mov	r5, r0
 80b0502:	b158      	cbz	r0, 80b051c <mbedtls_ssl_handshake_client_step+0x4e4>
 80b0504:	f000 bc46 	b.w	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
        }
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 80b0508:	7aba      	ldrb	r2, [r7, #10]
 80b050a:	2a01      	cmp	r2, #1
 80b050c:	f040 839b 	bne.w	80b0c46 <mbedtls_ssl_handshake_client_step+0xc0e>
    {
        i = 4;
        if( ( ret = ssl_write_encrypted_pms( ssl, i, &n, 0 ) ) != 0 )
 80b0510:	aa0e      	add	r2, sp, #56	; 0x38
 80b0512:	2104      	movs	r1, #4
 80b0514:	4620      	mov	r0, r4
 80b0516:	f7ff fd1d 	bl	80aff54 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj>
 80b051a:	e7aa      	b.n	80b0472 <mbedtls_ssl_handshake_client_step+0x43a>
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    ssl->out_msglen  = i + n;
 80b051c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 80b051e:	2210      	movs	r2, #16
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    ssl->out_msglen  = i + n;
 80b0520:	441e      	add	r6, r3
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 80b0522:	2316      	movs	r3, #22
 80b0524:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    ssl->out_msglen  = i + n;
 80b0528:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 80b052c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80b0530:	e074      	b.n	80b061c <mbedtls_ssl_handshake_client_step+0x5e4>

        if( i + 2 + n > MBEDTLS_SSL_OUT_CONTENT_LEN )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "psk identity too long or "
                                        "SSL buffer too short" ) );
            return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
 80b0532:	4da8      	ldr	r5, [pc, #672]	; (80b07d4 <mbedtls_ssl_handshake_client_step+0x79c>)
           ret = mbedtls_ssl_write_certificate( ssl );
           break;

       case MBEDTLS_SSL_CLIENT_KEY_EXCHANGE:
           ret = ssl_write_client_key_exchange( ssl );
           break;
 80b0534:	f000 bc2e 	b.w	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 80b0538:	6c23      	ldr	r3, [r4, #64]	; 0x40
    {
        goto sign;
    }
#endif

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 80b053a:	4620      	mov	r0, r4
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 80b053c:	681e      	ldr	r6, [r3, #0]
    size_t n = 0, offset = 0;
 80b053e:	2300      	movs	r3, #0
 80b0540:	930d      	str	r3, [sp, #52]	; 0x34
    {
        goto sign;
    }
#endif

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 80b0542:	f7f9 fffd 	bl	80aa540 <mbedtls_ssl_derive_keys>
 80b0546:	4605      	mov	r5, r0
 80b0548:	2800      	cmp	r0, #0
 80b054a:	f040 8423 	bne.w	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
        return( ret );
    }

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 80b054e:	7ab3      	ldrb	r3, [r6, #10]
 80b0550:	1f5a      	subs	r2, r3, #5
 80b0552:	2a03      	cmp	r2, #3
 80b0554:	f67f af46 	bls.w	80b03e4 <mbedtls_ssl_handshake_client_step+0x3ac>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 80b0558:	2b0b      	cmp	r3, #11
 80b055a:	f43f af43 	beq.w	80b03e4 <mbedtls_ssl_handshake_client_step+0x3ac>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
        ssl->state++;
        return( 0 );
    }

    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
 80b055e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80b0562:	2b00      	cmp	r3, #0
 80b0564:	f43f af3e 	beq.w	80b03e4 <mbedtls_ssl_handshake_client_step+0x3ac>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 80b0568:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80b056a:	b112      	cbz	r2, 80b0572 <mbedtls_ssl_handshake_client_step+0x53a>
 80b056c:	f8d2 3144 	ldr.w	r3, [r2, #324]	; 0x144
 80b0570:	b923      	cbnz	r3, 80b057c <mbedtls_ssl_handshake_client_step+0x544>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 80b0572:	6823      	ldr	r3, [r4, #0]
 80b0574:	6d1b      	ldr	r3, [r3, #80]	; 0x50

    return( key_cert == NULL ? NULL : key_cert->cert );
 80b0576:	2b00      	cmp	r3, #0
 80b0578:	f43f af34 	beq.w	80b03e4 <mbedtls_ssl_handshake_client_step+0x3ac>
 80b057c:	681b      	ldr	r3, [r3, #0]
 80b057e:	2b00      	cmp	r3, #0
 80b0580:	f43f af30 	beq.w	80b03e4 <mbedtls_ssl_handshake_client_step+0x3ac>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
        ssl->state++;
        return( 0 );
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
 80b0584:	4620      	mov	r0, r4
 80b0586:	f7ff fcd8 	bl	80aff3a <mbedtls_ssl_own_key>
 80b058a:	2800      	cmp	r0, #0
 80b058c:	d04e      	beq.n	80b062c <mbedtls_ssl_handshake_client_step+0x5f4>
        ssl->handshake->ecrs_state = ssl_ecrs_crt_vrfy_sign;

sign:
#endif

    ssl->handshake->calc_verify( ssl, hash );
 80b058e:	f8d2 32a4 	ldr.w	r3, [r2, #676]	; 0x2a4
 80b0592:	a90e      	add	r1, sp, #56	; 0x38
 80b0594:	4620      	mov	r0, r4
 80b0596:	4798      	blx	r3
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \
          MBEDTLS_SSL_PROTO_TLS1_1 */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 80b0598:	68e3      	ldr	r3, [r4, #12]
 80b059a:	2b03      	cmp	r3, #3
 80b059c:	f040 8353 	bne.w	80b0c46 <mbedtls_ssl_handshake_client_step+0xc0e>
         * shortcut.
         *
         * Reason: Otherwise we should have running hashes for SHA512 and SHA224
         *         in order to satisfy 'weird' needs from the server side.
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 80b05a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 80b05a2:	4620      	mov	r0, r4
         * shortcut.
         *
         * Reason: Otherwise we should have running hashes for SHA512 and SHA224
         *         in order to satisfy 'weird' needs from the server side.
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 80b05a4:	681b      	ldr	r3, [r3, #0]
 80b05a6:	7a5d      	ldrb	r5, [r3, #9]
 80b05a8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80b05ac:	2d07      	cmp	r5, #7
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 80b05ae:	bf0b      	itete	eq
 80b05b0:	2205      	moveq	r2, #5
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 80b05b2:	2204      	movne	r2, #4
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 80b05b4:	711a      	strbeq	r2, [r3, #4]
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 80b05b6:	711a      	strbne	r2, [r3, #4]
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
 80b05b8:	bf18      	it	ne
 80b05ba:	2506      	movne	r5, #6
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 80b05bc:	f7ff fcbd 	bl	80aff3a <mbedtls_ssl_own_key>
 80b05c0:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
 80b05c4:	f7fb f9d1 	bl	80ab96a <mbedtls_ssl_sig_from_pk>
 80b05c8:	7170      	strb	r0, [r6, #5]
#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
    if( ssl->handshake->ecrs_enabled )
        rs_ctx = &ssl->handshake->ecrs_ctx.pk;
#endif

    if( ( ret = mbedtls_pk_sign_restartable( mbedtls_ssl_own_key( ssl ),
 80b05ca:	4620      	mov	r0, r4
 80b05cc:	f7ff fcb5 	bl	80aff3a <mbedtls_ssl_own_key>
                         md_alg, hash_start, hashlen,
                         ssl->out_msg + 6 + offset, &n,
                         ssl->conf->f_rng, ssl->conf->p_rng, rs_ctx ) ) != 0 )
 80b05d0:	6822      	ldr	r2, [r4, #0]
#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
    if( ssl->handshake->ecrs_enabled )
        rs_ctx = &ssl->handshake->ecrs_ctx.pk;
#endif

    if( ( ret = mbedtls_pk_sign_restartable( mbedtls_ssl_own_key( ssl ),
 80b05d2:	2300      	movs	r3, #0
 80b05d4:	9304      	str	r3, [sp, #16]
 80b05d6:	69d1      	ldr	r1, [r2, #28]
 80b05d8:	9103      	str	r1, [sp, #12]
 80b05da:	6992      	ldr	r2, [r2, #24]
 80b05dc:	4629      	mov	r1, r5
 80b05de:	9202      	str	r2, [sp, #8]
 80b05e0:	aa0d      	add	r2, sp, #52	; 0x34
 80b05e2:	9201      	str	r2, [sp, #4]
 80b05e4:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80b05e8:	3208      	adds	r2, #8
 80b05ea:	9200      	str	r2, [sp, #0]
 80b05ec:	aa0e      	add	r2, sp, #56	; 0x38
 80b05ee:	f7f9 fd37 	bl	80aa060 <mbedtls_pk_sign_restartable>
 80b05f2:	4605      	mov	r5, r0
 80b05f4:	2800      	cmp	r0, #0
 80b05f6:	f040 83cd 	bne.w	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
            ret = MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS;
#endif
        return( ret );
    }

    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );
 80b05fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80b05fc:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80b0600:	0a19      	lsrs	r1, r3, #8
 80b0602:	7191      	strb	r1, [r2, #6]
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
 80b0604:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80b0608:	71d3      	strb	r3, [r2, #7]

    ssl->out_msglen  = 6 + n + offset;
 80b060a:	3308      	adds	r3, #8
 80b060c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 80b0610:	2316      	movs	r3, #22
 80b0612:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
 80b0616:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80b061a:	220f      	movs	r2, #15
 80b061c:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 80b061e:	6863      	ldr	r3, [r4, #4]
 80b0620:	3301      	adds	r3, #1
 80b0622:	6063      	str	r3, [r4, #4]

    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 80b0624:	4620      	mov	r0, r4
 80b0626:	f7fa faad 	bl	80aab84 <mbedtls_ssl_write_handshake_msg>
 80b062a:	e60a      	b.n	80b0242 <mbedtls_ssl_handshake_client_step+0x20a>
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
 80b062c:	4d6a      	ldr	r5, [pc, #424]	; (80b07d8 <mbedtls_ssl_handshake_client_step+0x7a0>)
 80b062e:	e3b1      	b.n	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
       case MBEDTLS_SSL_CERTIFICATE_VERIFY:
           ret = ssl_write_certificate_verify( ssl );
           break;

       case MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_write_change_cipher_spec( ssl );
 80b0630:	4620      	mov	r0, r4
 80b0632:	f7fa fd19 	bl	80ab068 <mbedtls_ssl_write_change_cipher_spec>
 80b0636:	e604      	b.n	80b0242 <mbedtls_ssl_handshake_client_step+0x20a>
           break;

       case MBEDTLS_SSL_CLIENT_FINISHED:
           ret = mbedtls_ssl_write_finished( ssl );
 80b0638:	4620      	mov	r0, r4
 80b063a:	f7fa fd61 	bl	80ab100 <mbedtls_ssl_write_finished>
 80b063e:	e600      	b.n	80b0242 <mbedtls_ssl_handshake_client_step+0x20a>
    unsigned char *ticket;
    const unsigned char *msg;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse new session ticket" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 80b0640:	2101      	movs	r1, #1
 80b0642:	4620      	mov	r0, r4
 80b0644:	f7fa fb54 	bl	80aacf0 <mbedtls_ssl_read_record>
 80b0648:	4681      	mov	r9, r0
 80b064a:	bb20      	cbnz	r0, 80b0696 <mbedtls_ssl_handshake_client_step+0x65e>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80b064c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80b064e:	2b16      	cmp	r3, #22
 80b0650:	f47f ae0e 	bne.w	80b0270 <mbedtls_ssl_handshake_client_step+0x238>
     *
     * 0  .  3   ticket_lifetime_hint
     * 4  .  5   ticket_len (n)
     * 6  .  5+n ticket content
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
 80b0654:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80b0656:	7833      	ldrb	r3, [r6, #0]
 80b0658:	2b04      	cmp	r3, #4
 80b065a:	d103      	bne.n	80b0664 <mbedtls_ssl_handshake_client_step+0x62c>
        ssl->in_hslen < 6 + mbedtls_ssl_hs_hdr_len( ssl ) )
 80b065c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
     *
     * 0  .  3   ticket_lifetime_hint
     * 4  .  5   ticket_len (n)
     * 6  .  5+n ticket content
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
 80b065e:	2b09      	cmp	r3, #9
 80b0660:	f200 834e 	bhi.w	80b0d00 <mbedtls_ssl_handshake_client_step+0xcc8>

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 80b0664:	2232      	movs	r2, #50	; 0x32
 80b0666:	2102      	movs	r1, #2
 80b0668:	4620      	mov	r0, r4
 80b066a:	f7fa fb27 	bl	80aacbc <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
 80b066e:	4d5b      	ldr	r5, [pc, #364]	; (80b07dc <mbedtls_ssl_handshake_client_step+0x7a4>)
 80b0670:	e390      	b.n	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
           ret = ssl_parse_new_session_ticket( ssl );
           break;
#endif

       case MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
 80b0672:	4620      	mov	r0, r4
 80b0674:	f7fa fd06 	bl	80ab084 <mbedtls_ssl_parse_change_cipher_spec>
 80b0678:	e5e3      	b.n	80b0242 <mbedtls_ssl_handshake_client_step+0x20a>
           break;

       case MBEDTLS_SSL_SERVER_FINISHED:
           ret = mbedtls_ssl_parse_finished( ssl );
 80b067a:	4620      	mov	r0, r4
 80b067c:	f7fa fd7c 	bl	80ab178 <mbedtls_ssl_parse_finished>
 80b0680:	e5df      	b.n	80b0242 <mbedtls_ssl_handshake_client_step+0x20a>
           break;

       case MBEDTLS_SSL_FLUSH_BUFFERS:
           MBEDTLS_SSL_DEBUG_MSG( 2, ( "handshake: done" ) );
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 80b0682:	230f      	movs	r3, #15
 80b0684:	e6b0      	b.n	80b03e8 <mbedtls_ssl_handshake_client_step+0x3b0>
           break;

       case MBEDTLS_SSL_HANDSHAKE_WRAPUP:
           mbedtls_ssl_handshake_wrapup( ssl );
 80b0686:	4620      	mov	r0, r4
 80b0688:	f7fa ffbe 	bl	80ab608 <mbedtls_ssl_handshake_wrapup>
           break;
 80b068c:	e382      	b.n	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );

    if( ssl->conf->f_rng == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
        return( MBEDTLS_ERR_SSL_NO_RNG );
 80b068e:	4d54      	ldr	r5, [pc, #336]	; (80b07e0 <mbedtls_ssl_handshake_client_step+0x7a8>)
 80b0690:	e380      	b.n	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80b0692:	4d54      	ldr	r5, [pc, #336]	; (80b07e4 <mbedtls_ssl_handshake_client_step+0x7ac>)
 80b0694:	e37e      	b.n	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
    unsigned char *ticket;
    const unsigned char *msg;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse new session ticket" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 80b0696:	4605      	mov	r5, r0
 80b0698:	e37c      	b.n	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
        return( ret );
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
 80b069a:	f852 0b04 	ldr.w	r0, [r2], #4
 80b069e:	429a      	cmp	r2, r3
 80b06a0:	f841 0b04 	str.w	r0, [r1], #4
 80b06a4:	d1f9      	bne.n	80b069a <mbedtls_ssl_handshake_client_step+0x662>
     *   ..   . ..    compression methods length (1 byte)
     *   ..   . ..    compression methods
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;
 80b06a6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80b06a8:	688b      	ldr	r3, [r1, #8]

    if( n < 16 || n > 32 ||
 80b06aa:	f1a3 0210 	sub.w	r2, r3, #16
 80b06ae:	2a10      	cmp	r2, #16
 80b06b0:	d806      	bhi.n	80b06c0 <mbedtls_ssl_handshake_client_step+0x688>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
 80b06b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;

    if( n < 16 || n > 32 ||
 80b06b4:	f8d2 2348 	ldr.w	r2, [r2, #840]	; 0x348
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
    {
        n = 0;
 80b06b8:	2a00      	cmp	r2, #0
 80b06ba:	bf08      	it	eq
 80b06bc:	2300      	moveq	r3, #0
 80b06be:	e000      	b.n	80b06c2 <mbedtls_ssl_handshake_client_step+0x68a>
 80b06c0:	2300      	movs	r3, #0
     */
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        if( ssl->session_negotiate->ticket != NULL &&
 80b06c2:	6e4a      	ldr	r2, [r1, #100]	; 0x64
 80b06c4:	b172      	cbz	r2, 80b06e4 <mbedtls_ssl_handshake_client_step+0x6ac>
 80b06c6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
 80b06c8:	b162      	cbz	r2, 80b06e4 <mbedtls_ssl_handshake_client_step+0x6ac>
                ssl->session_negotiate->ticket_len != 0 )
        {
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->session_negotiate->id, 32 );
 80b06ca:	6823      	ldr	r3, [r4, #0]
 80b06cc:	2220      	movs	r2, #32
 80b06ce:	699d      	ldr	r5, [r3, #24]
 80b06d0:	310c      	adds	r1, #12
 80b06d2:	69d8      	ldr	r0, [r3, #28]
 80b06d4:	47a8      	blx	r5

            if( ret != 0 )
 80b06d6:	4605      	mov	r5, r0
 80b06d8:	2800      	cmp	r0, #0
 80b06da:	f040 835b 	bne.w	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
                return( ret );

            ssl->session_negotiate->id_len = n = 32;
 80b06de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80b06e0:	2320      	movs	r3, #32
 80b06e2:	6093      	str	r3, [r2, #8]
        }
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;
 80b06e4:	f109 0627 	add.w	r6, r9, #39	; 0x27
 80b06e8:	f889 3026 	strb.w	r3, [r9, #38]	; 0x26

    for( i = 0; i < n; i++ )
 80b06ec:	2200      	movs	r2, #0
 80b06ee:	4293      	cmp	r3, r2
 80b06f0:	d005      	beq.n	80b06fe <mbedtls_ssl_handshake_client_step+0x6c6>
        *p++ = ssl->session_negotiate->id[i];
 80b06f2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80b06f4:	4411      	add	r1, r2
 80b06f6:	7b09      	ldrb	r1, [r1, #12]
 80b06f8:	54b1      	strb	r1, [r6, r2]
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;

    for( i = 0; i < n; i++ )
 80b06fa:	3201      	adds	r2, #1
 80b06fc:	e7f7      	b.n	80b06ee <mbedtls_ssl_handshake_client_step+0x6b6>
    unsigned char offer_compress;
    const int *ciphersuites;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;
#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
    int uses_ec = 0;
 80b06fe:	f04f 0a00 	mov.w	sl, #0
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];

    /* Skip writing ciphersuite length for now */
    n = 0;
 80b0702:	4657      	mov	r7, sl
 80b0704:	441e      	add	r6, r3
#endif

    /*
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
 80b0706:	68e2      	ldr	r2, [r4, #12]
 80b0708:	6823      	ldr	r3, [r4, #0]

    /* Skip writing ciphersuite length for now */
    n = 0;
    q = p;
    p += 2;
 80b070a:	1cb5      	adds	r5, r6, #2
 80b070c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80b0710:	f1a3 0804 	sub.w	r8, r3, #4

    for( i = 0; ciphersuites[i] != 0; i++ )
 80b0714:	f858 3f04 	ldr.w	r3, [r8, #4]!
 80b0718:	b1fb      	cbz	r3, 80b075a <mbedtls_ssl_handshake_client_step+0x722>
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );
 80b071a:	4618      	mov	r0, r3
 80b071c:	f7ff f8cc 	bl	80af8b8 <mbedtls_ssl_ciphersuite_from_id>

        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
                                      ssl->conf->min_minor_ver,
 80b0720:	6821      	ldr	r1, [r4, #0]

    for( i = 0; ciphersuites[i] != 0; i++ )
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );

        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
 80b0722:	f891 e079 	ldrb.w	lr, [r1, #121]	; 0x79
static int ssl_validate_ciphersuite( const mbedtls_ssl_ciphersuite_t * suite_info,
                                     const mbedtls_ssl_context * ssl,
                                     int min_minor_ver, int max_minor_ver )
{
    (void) ssl;
    if( suite_info == NULL )
 80b0726:	2800      	cmp	r0, #0
 80b0728:	d0f4      	beq.n	80b0714 <mbedtls_ssl_handshake_client_step+0x6dc>
        return( 1 );

    if( suite_info->min_minor_ver > max_minor_ver ||
 80b072a:	6903      	ldr	r3, [r0, #16]
 80b072c:	459e      	cmp	lr, r3
 80b072e:	dbf1      	blt.n	80b0714 <mbedtls_ssl_handshake_client_step+0x6dc>
 80b0730:	f891 107b 	ldrb.w	r1, [r1, #123]	; 0x7b
 80b0734:	6983      	ldr	r3, [r0, #24]
 80b0736:	4299      	cmp	r1, r3
 80b0738:	dcec      	bgt.n	80b0714 <mbedtls_ssl_handshake_client_step+0x6dc>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
                                    ciphersuites[i] ) );

#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
        uses_ec |= mbedtls_ssl_ciphersuite_uses_ec( ciphersuite_info );
 80b073a:	f7ff f907 	bl	80af94c <mbedtls_ssl_ciphersuite_uses_ec>
#endif

        n++;
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 80b073e:	462a      	mov	r2, r5
 80b0740:	f8d8 3000 	ldr.w	r3, [r8]
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
                                    ciphersuites[i] ) );

#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
        uses_ec |= mbedtls_ssl_ciphersuite_uses_ec( ciphersuite_info );
 80b0744:	ea4a 0a00 	orr.w	sl, sl, r0
#endif

        n++;
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 80b0748:	121b      	asrs	r3, r3, #8
 80b074a:	f802 3b02 	strb.w	r3, [r2], #2
        *p++ = (unsigned char)( ciphersuites[i]      );
 80b074e:	f8d8 3000 	ldr.w	r3, [r8]
#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
        uses_ec |= mbedtls_ssl_ciphersuite_uses_ec( ciphersuite_info );
#endif

        n++;
 80b0752:	3701      	adds	r7, #1
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
        *p++ = (unsigned char)( ciphersuites[i]      );
 80b0754:	706b      	strb	r3, [r5, #1]
 80b0756:	4615      	mov	r5, r2
 80b0758:	e7dc      	b.n	80b0714 <mbedtls_ssl_handshake_client_step+0x6dc>
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 80b075a:	22ff      	movs	r2, #255	; 0xff
        n++;
 80b075c:	3701      	adds	r7, #1
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 80b075e:	706a      	strb	r2, [r5, #1]
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
 80b0760:	09fa      	lsrs	r2, r7, #7
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
 80b0762:	702b      	strb	r3, [r5, #0]
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
    *q++ = (unsigned char)( n << 1 );
 80b0764:	007f      	lsls	r7, r7, #1
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
 80b0766:	7032      	strb	r2, [r6, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
 80b0768:	2201      	movs	r2, #1
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
    *q++ = (unsigned char)( n << 1 );
 80b076a:	7077      	strb	r7, [r6, #1]
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
 80b076c:	70aa      	strb	r2, [r5, #2]
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 80b076e:	70eb      	strb	r3, [r5, #3]
static void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,
                                    unsigned char *buf,
                                    size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
 80b0770:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
    size_t hostname_len;

    *olen = 0;

    if( ssl->hostname == NULL )
 80b0774:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 80b0778:	f105 0804 	add.w	r8, r5, #4
 80b077c:	9307      	str	r3, [sp, #28]
    }

    // First write extensions, then the total length
    //
#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    ssl_write_hostname_ext( ssl, p + 2 + ext_len, &olen );
 80b077e:	f105 0b06 	add.w	fp, r5, #6
static void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,
                                    unsigned char *buf,
                                    size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
 80b0782:	f506 5600 	add.w	r6, r6, #8192	; 0x2000
    size_t hostname_len;

    *olen = 0;

    if( ssl->hostname == NULL )
 80b0786:	b318      	cbz	r0, 80b07d0 <mbedtls_ssl_handshake_client_step+0x798>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
                   ssl->hostname ) );

    hostname_len = strlen( ssl->hostname );
 80b0788:	f002 f8ac 	bl	80b28e4 <strlen>

    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
 80b078c:	45b3      	cmp	fp, r6
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
                   ssl->hostname ) );

    hostname_len = strlen( ssl->hostname );
 80b078e:	4602      	mov	r2, r0

    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
 80b0790:	9b07      	ldr	r3, [sp, #28]
 80b0792:	d829      	bhi.n	80b07e8 <mbedtls_ssl_handshake_client_step+0x7b0>
 80b0794:	f100 0709 	add.w	r7, r0, #9
 80b0798:	ebcb 0606 	rsb	r6, fp, r6
 80b079c:	42be      	cmp	r6, r7
 80b079e:	d323      	bcc.n	80b07e8 <mbedtls_ssl_handshake_client_step+0x7b0>
     *
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
 80b07a0:	1d41      	adds	r1, r0, #5
 80b07a2:	0a09      	lsrs	r1, r1, #8
 80b07a4:	7229      	strb	r1, [r5, #8]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );
 80b07a6:	b2c1      	uxtb	r1, r0
 80b07a8:	1d48      	adds	r0, r1, #5
 80b07aa:	7268      	strb	r0, [r5, #9]

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
 80b07ac:	1cd0      	adds	r0, r2, #3
 80b07ae:	0a00      	lsrs	r0, r0, #8
     * struct {
     *     ServerName server_name_list<1..2^16-1>
     * } ServerNameList;
     *
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
 80b07b0:	71ab      	strb	r3, [r5, #6]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );
 80b07b2:	71eb      	strb	r3, [r5, #7]

    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
 80b07b4:	72a8      	strb	r0, [r5, #10]
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
 80b07b6:	732b      	strb	r3, [r5, #12]

    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );
 80b07b8:	1cc8      	adds	r0, r1, #3

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
 80b07ba:	0a13      	lsrs	r3, r2, #8

    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );
 80b07bc:	72e8      	strb	r0, [r5, #11]

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
 80b07be:	736b      	strb	r3, [r5, #13]
    *p++ = (unsigned char)( ( hostname_len      ) & 0xFF );
 80b07c0:	73a9      	strb	r1, [r5, #14]

    memcpy( p, ssl->hostname, hostname_len );
 80b07c2:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 80b07c6:	f105 000f 	add.w	r0, r5, #15
 80b07ca:	f002 f814 	bl	80b27f6 <memcpy>
 80b07ce:	e00c      	b.n	80b07ea <mbedtls_ssl_handshake_client_step+0x7b2>
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
    size_t hostname_len;

    *olen = 0;
 80b07d0:	4607      	mov	r7, r0
 80b07d2:	e00a      	b.n	80b07ea <mbedtls_ssl_handshake_client_step+0x7b2>
 80b07d4:	ffff9600 	.word	0xffff9600
 80b07d8:	ffff8a00 	.word	0xffff8a00
 80b07dc:	ffff9200 	.word	0xffff9200
 80b07e0:	ffff8c00 	.word	0xffff8c00
 80b07e4:	ffff8900 	.word	0xffff8900
 80b07e8:	461f      	mov	r7, r3
    unsigned char *sig_alg_list = buf + 6;
#endif

    *olen = 0;

    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 80b07ea:	6823      	ldr	r3, [r4, #0]
 80b07ec:	f893 2079 	ldrb.w	r2, [r3, #121]	; 0x79
 80b07f0:	2a03      	cmp	r2, #3
 80b07f2:	d14c      	bne.n	80b088e <mbedtls_ssl_handshake_client_step+0x856>
 80b07f4:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 80b07f6:	460b      	mov	r3, r1
 80b07f8:	1a5a      	subs	r2, r3, r1
 80b07fa:	f853 0b04 	ldr.w	r0, [r3], #4
 80b07fe:	2800      	cmp	r0, #0
 80b0800:	d1fa      	bne.n	80b07f8 <mbedtls_ssl_handshake_client_step+0x7c0>
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
 80b0802:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
 80b0806:	1cbe      	adds	r6, r7, #2
 80b0808:	4446      	add	r6, r8
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
 80b080a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
#if defined(MBEDTLS_RSA_C)
        sig_alg_len += 2;
#endif
    }

    if( end < p || (size_t)( end - p ) < sig_alg_len + 6 )
 80b080e:	429e      	cmp	r6, r3
 80b0810:	d83e      	bhi.n	80b0890 <mbedtls_ssl_handshake_client_step+0x858>
 80b0812:	1b9b      	subs	r3, r3, r6
 80b0814:	3206      	adds	r2, #6
 80b0816:	4293      	cmp	r3, r2
 80b0818:	d33a      	bcc.n	80b0890 <mbedtls_ssl_handshake_client_step+0x858>
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
    size_t sig_alg_len = 0;
    const int *md;
#if defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C)
    unsigned char *sig_alg_list = buf + 6;
 80b081a:	460a      	mov	r2, r1
 80b081c:	1db3      	adds	r3, r6, #6
    /*
     * Prepare signature_algorithms extension (TLS 1.2)
     */
    sig_alg_len = 0;

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 80b081e:	6810      	ldr	r0, [r2, #0]
 80b0820:	3304      	adds	r3, #4
 80b0822:	ebc1 0e02 	rsb	lr, r1, r2
 80b0826:	910b      	str	r1, [sp, #44]	; 0x2c
 80b0828:	9207      	str	r2, [sp, #28]
 80b082a:	920a      	str	r2, [sp, #40]	; 0x28
 80b082c:	9308      	str	r3, [sp, #32]
 80b082e:	9309      	str	r3, [sp, #36]	; 0x24
 80b0830:	b1d8      	cbz	r0, 80b086a <mbedtls_ssl_handshake_client_step+0x832>
    {
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 80b0832:	f7fb f8bd 	bl	80ab9b0 <mbedtls_ssl_hash_from_md_alg>
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
 80b0836:	f04f 0203 	mov.w	r2, #3
    sig_alg_len = 0;

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
    {
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 80b083a:	9b08      	ldr	r3, [sp, #32]
 80b083c:	f803 0c04 	strb.w	r0, [r3, #-4]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
 80b0840:	f803 2c03 	strb.w	r2, [r3, #-3]
 80b0844:	9309      	str	r3, [sp, #36]	; 0x24
 80b0846:	9a0a      	ldr	r2, [sp, #40]	; 0x28
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 80b0848:	9b07      	ldr	r3, [sp, #28]
 80b084a:	3204      	adds	r2, #4
 80b084c:	6818      	ldr	r0, [r3, #0]
 80b084e:	9208      	str	r2, [sp, #32]
 80b0850:	920a      	str	r2, [sp, #40]	; 0x28
 80b0852:	f7fb f8ad 	bl	80ab9b0 <mbedtls_ssl_hash_from_md_alg>
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 80b0856:	f04f 0201 	mov.w	r2, #1
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 80b085a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80b085c:	990b      	ldr	r1, [sp, #44]	; 0x2c
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 80b085e:	f803 2c01 	strb.w	r2, [r3, #-1]
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 80b0862:	f803 0c02 	strb.w	r0, [r3, #-2]
 80b0866:	9a08      	ldr	r2, [sp, #32]
 80b0868:	e7d9      	b.n	80b081e <mbedtls_ssl_handshake_client_step+0x7e6>
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
 80b086a:	230d      	movs	r3, #13
 80b086c:	7073      	strb	r3, [r6, #1]

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
 80b086e:	f10e 0302 	add.w	r3, lr, #2
 80b0872:	0a1b      	lsrs	r3, r3, #8
 80b0874:	70b3      	strb	r3, [r6, #2]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
 80b0876:	fa5f f38e 	uxtb.w	r3, lr
 80b087a:	1c9a      	adds	r2, r3, #2
 80b087c:	70f2      	strb	r2, [r6, #3]

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 80b087e:	ea4f 221e 	mov.w	r2, lr, lsr #8
     * } SignatureAndHashAlgorithm;
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
 80b0882:	7030      	strb	r0, [r6, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 80b0884:	7132      	strb	r2, [r6, #4]
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );
 80b0886:	7173      	strb	r3, [r6, #5]

    *olen = 6 + sig_alg_len;
 80b0888:	f10e 0006 	add.w	r0, lr, #6
 80b088c:	e000      	b.n	80b0890 <mbedtls_ssl_handshake_client_step+0x858>
    const int *md;
#if defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C)
    unsigned char *sig_alg_list = buf + 6;
#endif

    *olen = 0;
 80b088e:	2000      	movs	r0, #0
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
 80b0890:	4407      	add	r7, r0
#endif

#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
    if( uses_ec )
 80b0892:	f1ba 0f00 	cmp.w	sl, #0
 80b0896:	d05e      	beq.n	80b0956 <mbedtls_ssl_handshake_client_step+0x91e>
    *olen = 0;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_elliptic_curves extension" ) );

#if defined(MBEDTLS_ECP_C)
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 80b0898:	6823      	ldr	r3, [r4, #0]
static void ssl_write_supported_elliptic_curves_ext( mbedtls_ssl_context *ssl,
                                                     unsigned char *buf,
                                                     size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
 80b089a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80b089e:	6e1e      	ldr	r6, [r3, #96]	; 0x60
    unsigned char *elliptic_curve_list = p + 6;
    size_t elliptic_curve_len = 0;
 80b08a0:	f04f 0a00 	mov.w	sl, #0
 80b08a4:	3e01      	subs	r6, #1
    *olen = 0;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_elliptic_curves extension" ) );

#if defined(MBEDTLS_ECP_C)
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 80b08a6:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 80b08aa:	b148      	cbz	r0, 80b08c0 <mbedtls_ssl_handshake_client_step+0x888>
 80b08ac:	9207      	str	r2, [sp, #28]
#else
    for( info = mbedtls_ecp_curve_list(); info->grp_id != MBEDTLS_ECP_DP_NONE; info++ )
#endif
    {
#if defined(MBEDTLS_ECP_C)
        info = mbedtls_ecp_curve_info_from_grp_id( *grp_id );
 80b08ae:	f7f3 fbab 	bl	80a4008 <mbedtls_ecp_curve_info_from_grp_id>
#endif
        if( info == NULL )
 80b08b2:	9a07      	ldr	r2, [sp, #28]
 80b08b4:	b908      	cbnz	r0, 80b08ba <mbedtls_ssl_handshake_client_step+0x882>
    const mbedtls_ecp_group_id *grp_id;
#else
    ((void) ssl);
#endif

    *olen = 0;
 80b08b6:	2300      	movs	r3, #0
 80b08b8:	e034      	b.n	80b0924 <mbedtls_ssl_handshake_client_step+0x8ec>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid curve in ssl configuration" ) );
            return;
        }

        elliptic_curve_len += 2;
 80b08ba:	f10a 0a02 	add.w	sl, sl, #2
 80b08be:	e7f2      	b.n	80b08a6 <mbedtls_ssl_handshake_client_step+0x86e>

#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
    if( uses_ec )
    {
        ssl_write_supported_elliptic_curves_ext( ssl, p + 2 + ext_len, &olen );
 80b08c0:	1cbe      	adds	r6, r7, #2
 80b08c2:	4446      	add	r6, r8
static void ssl_write_supported_elliptic_curves_ext( mbedtls_ssl_context *ssl,
                                                     unsigned char *buf,
                                                     size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
 80b08c4:	f502 5300 	add.w	r3, r2, #8192	; 0x2000
        }

        elliptic_curve_len += 2;
    }

    if( end < p || (size_t)( end - p ) < 6 + elliptic_curve_len )
 80b08c8:	429e      	cmp	r6, r3
 80b08ca:	d8f4      	bhi.n	80b08b6 <mbedtls_ssl_handshake_client_step+0x87e>
 80b08cc:	1b9b      	subs	r3, r3, r6
 80b08ce:	f10a 0206 	add.w	r2, sl, #6
 80b08d2:	4293      	cmp	r3, r2
 80b08d4:	d3ef      	bcc.n	80b08b6 <mbedtls_ssl_handshake_client_step+0x87e>
    }

    elliptic_curve_len = 0;

#if defined(MBEDTLS_ECP_C)
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 80b08d6:	46b2      	mov	sl, r6
 80b08d8:	6823      	ldr	r3, [r4, #0]
 80b08da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80b08dc:	3a01      	subs	r2, #1
 80b08de:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80b08e2:	ebc6 030a 	rsb	r3, r6, sl
 80b08e6:	9207      	str	r2, [sp, #28]
 80b08e8:	9208      	str	r2, [sp, #32]
 80b08ea:	f10a 0a02 	add.w	sl, sl, #2
 80b08ee:	b150      	cbz	r0, 80b0906 <mbedtls_ssl_handshake_client_step+0x8ce>
#else
    for( info = mbedtls_ecp_curve_list(); info->grp_id != MBEDTLS_ECP_DP_NONE; info++ )
#endif
    {
#if defined(MBEDTLS_ECP_C)
        info = mbedtls_ecp_curve_info_from_grp_id( *grp_id );
 80b08f0:	f7f3 fb8a 	bl	80a4008 <mbedtls_ecp_curve_info_from_grp_id>
#endif
        elliptic_curve_list[elliptic_curve_len++] = info->tls_id >> 8;
 80b08f4:	8843      	ldrh	r3, [r0, #2]
 80b08f6:	9a07      	ldr	r2, [sp, #28]
 80b08f8:	121b      	asrs	r3, r3, #8
 80b08fa:	f88a 3004 	strb.w	r3, [sl, #4]
        elliptic_curve_list[elliptic_curve_len++] = info->tls_id & 0xFF;
 80b08fe:	8843      	ldrh	r3, [r0, #2]
 80b0900:	f88a 3005 	strb.w	r3, [sl, #5]
 80b0904:	e7eb      	b.n	80b08de <mbedtls_ssl_handshake_client_step+0x8a6>
    }

    if( elliptic_curve_len == 0 )
 80b0906:	2b00      	cmp	r3, #0
 80b0908:	d0d5      	beq.n	80b08b6 <mbedtls_ssl_handshake_client_step+0x87e>
        return;

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES      ) & 0xFF );
 80b090a:	220a      	movs	r2, #10
 80b090c:	7072      	strb	r2, [r6, #1]

    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 ) >> 8 ) & 0xFF );
 80b090e:	1c9a      	adds	r2, r3, #2
 80b0910:	0a12      	lsrs	r2, r2, #8
 80b0912:	70b2      	strb	r2, [r6, #2]
    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 )      ) & 0xFF );
 80b0914:	b2da      	uxtb	r2, r3
 80b0916:	1c91      	adds	r1, r2, #2
 80b0918:	70f1      	strb	r1, [r6, #3]

    *p++ = (unsigned char)( ( ( elliptic_curve_len     ) >> 8 ) & 0xFF );
 80b091a:	0a19      	lsrs	r1, r3, #8
    }

    if( elliptic_curve_len == 0 )
        return;

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES >> 8 ) & 0xFF );
 80b091c:	7030      	strb	r0, [r6, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES      ) & 0xFF );

    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 ) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 )      ) & 0xFF );

    *p++ = (unsigned char)( ( ( elliptic_curve_len     ) >> 8 ) & 0xFF );
 80b091e:	7131      	strb	r1, [r6, #4]
    *p++ = (unsigned char)( ( ( elliptic_curve_len     )      ) & 0xFF );
 80b0920:	7172      	strb	r2, [r6, #5]

    *olen = 6 + elliptic_curve_len;
 80b0922:	3306      	adds	r3, #6
#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
    if( uses_ec )
    {
        ssl_write_supported_elliptic_curves_ext( ssl, p + 2 + ext_len, &olen );
        ext_len += olen;
 80b0924:	18f8      	adds	r0, r7, r3
static void ssl_write_supported_point_formats_ext( mbedtls_ssl_context *ssl,
                                                   unsigned char *buf,
                                                   size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
 80b0926:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    if( uses_ec )
    {
        ssl_write_supported_elliptic_curves_ext( ssl, p + 2 + ext_len, &olen );
        ext_len += olen;

        ssl_write_supported_point_formats_ext( ssl, p + 2 + ext_len, &olen );
 80b092a:	1c83      	adds	r3, r0, #2
 80b092c:	4443      	add	r3, r8
static void ssl_write_supported_point_formats_ext( mbedtls_ssl_context *ssl,
                                                   unsigned char *buf,
                                                   size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
 80b092e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000

    *olen = 0;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_point_formats extension" ) );

    if( end < p || (size_t)( end - p ) < 6 )
 80b0932:	4293      	cmp	r3, r2
 80b0934:	f04f 0700 	mov.w	r7, #0
 80b0938:	d80c      	bhi.n	80b0954 <mbedtls_ssl_handshake_client_step+0x91c>
 80b093a:	1ad2      	subs	r2, r2, r3
 80b093c:	2a05      	cmp	r2, #5
 80b093e:	d909      	bls.n	80b0954 <mbedtls_ssl_handshake_client_step+0x91c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS      ) & 0xFF );
 80b0940:	220b      	movs	r2, #11
 80b0942:	705a      	strb	r2, [r3, #1]

    *p++ = 0x00;
    *p++ = 2;
 80b0944:	2202      	movs	r2, #2
 80b0946:	70da      	strb	r2, [r3, #3]

    *p++ = 1;
 80b0948:	2201      	movs	r2, #1
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS >> 8 ) & 0xFF );
 80b094a:	701f      	strb	r7, [r3, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS      ) & 0xFF );

    *p++ = 0x00;
 80b094c:	709f      	strb	r7, [r3, #2]
    *p++ = 2;

    *p++ = 1;
    *p++ = MBEDTLS_ECP_PF_UNCOMPRESSED;
 80b094e:	715f      	strb	r7, [r3, #5]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS      ) & 0xFF );

    *p++ = 0x00;
    *p++ = 2;

    *p++ = 1;
 80b0950:	711a      	strb	r2, [r3, #4]
    *p++ = MBEDTLS_ECP_PF_UNCOMPRESSED;

    *olen = 6;
 80b0952:	2706      	movs	r7, #6
    {
        ssl_write_supported_elliptic_curves_ext( ssl, p + 2 + ext_len, &olen );
        ext_len += olen;

        ssl_write_supported_point_formats_ext( ssl, p + 2 + ext_len, &olen );
        ext_len += olen;
 80b0954:	4407      	add	r7, r0
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;

    *olen = 0;

    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
 80b0956:	6823      	ldr	r3, [r4, #0]
 80b0958:	f8b3 007c 	ldrh.w	r0, [r3, #124]	; 0x7c
 80b095c:	f410 70e0 	ands.w	r0, r0, #448	; 0x1c0
 80b0960:	d018      	beq.n	80b0994 <mbedtls_ssl_handshake_client_step+0x95c>
static void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                               unsigned char *buf,
                                               size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
 80b0962:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    ssl_write_ecjpake_kkpp_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
 80b0966:	1cbb      	adds	r3, r7, #2
 80b0968:	4443      	add	r3, r8
static void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                               unsigned char *buf,
                                               size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
 80b096a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding max_fragment_length extension" ) );

    if( end < p || (size_t)( end - p ) < 5 )
 80b096e:	4293      	cmp	r3, r2
 80b0970:	f04f 0000 	mov.w	r0, #0
 80b0974:	d80e      	bhi.n	80b0994 <mbedtls_ssl_handshake_client_step+0x95c>
 80b0976:	1ad2      	subs	r2, r2, r3
 80b0978:	2a04      	cmp	r2, #4
 80b097a:	d90b      	bls.n	80b0994 <mbedtls_ssl_handshake_client_step+0x95c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
 80b097c:	2201      	movs	r2, #1
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
 80b097e:	7018      	strb	r0, [r3, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );

    *p++ = 0x00;
 80b0980:	7098      	strb	r0, [r3, #2]
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
 80b0982:	705a      	strb	r2, [r3, #1]

    *p++ = 0x00;
    *p++ = 1;
 80b0984:	70da      	strb	r2, [r3, #3]

    *p++ = ssl->conf->mfl_code;
 80b0986:	6822      	ldr	r2, [r4, #0]

    *olen = 5;
 80b0988:	2005      	movs	r0, #5
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );

    *p++ = 0x00;
    *p++ = 1;

    *p++ = ssl->conf->mfl_code;
 80b098a:	f8b2 207c 	ldrh.w	r2, [r2, #124]	; 0x7c
 80b098e:	f3c2 1282 	ubfx	r2, r2, #6, #3
 80b0992:	711a      	strb	r2, [r3, #4]
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;

    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )
 80b0994:	6823      	ldr	r3, [r4, #0]
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
 80b0996:	4407      	add	r7, r0
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;

    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )
 80b0998:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80b099c:	f003 0302 	and.w	r3, r3, #2
 80b09a0:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 80b09a4:	b313      	cbz	r3, 80b09ec <mbedtls_ssl_handshake_client_step+0x9b4>
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
 80b09a6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ssl_write_alpn_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );
 80b09aa:	1cb8      	adds	r0, r7, #2
 80b09ac:	4440      	add	r0, r8
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
 80b09ae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
 80b09b2:	4298      	cmp	r0, r3
 80b09b4:	d815      	bhi.n	80b09e2 <mbedtls_ssl_handshake_client_step+0x9aa>
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;
 80b09b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
 80b09b8:	1a1b      	subs	r3, r3, r0
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;
 80b09ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
 80b09bc:	1d16      	adds	r6, r2, #4
 80b09be:	42b3      	cmp	r3, r6
 80b09c0:	f04f 0300 	mov.w	r3, #0
 80b09c4:	d30f      	bcc.n	80b09e6 <mbedtls_ssl_handshake_client_step+0x9ae>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET >> 8 ) & 0xFF );
 80b09c6:	7003      	strb	r3, [r0, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );
 80b09c8:	2323      	movs	r3, #35	; 0x23
 80b09ca:	7043      	strb	r3, [r0, #1]

    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
 80b09cc:	0a13      	lsrs	r3, r2, #8
 80b09ce:	7083      	strb	r3, [r0, #2]
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );
 80b09d0:	70c2      	strb	r2, [r0, #3]

    *olen = 4;

    if( ssl->session_negotiate->ticket == NULL || tlen == 0 )
 80b09d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80b09d4:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80b09d6:	b141      	cbz	r1, 80b09ea <mbedtls_ssl_handshake_client_step+0x9b2>
 80b09d8:	b13a      	cbz	r2, 80b09ea <mbedtls_ssl_handshake_client_step+0x9b2>
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "sending session ticket of length %d", tlen ) );

    memcpy( p, ssl->session_negotiate->ticket, tlen );
 80b09da:	3004      	adds	r0, #4
 80b09dc:	f001 ff0b 	bl	80b27f6 <memcpy>
 80b09e0:	e004      	b.n	80b09ec <mbedtls_ssl_handshake_client_step+0x9b4>
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;
 80b09e2:	2600      	movs	r6, #0
 80b09e4:	e002      	b.n	80b09ec <mbedtls_ssl_handshake_client_step+0x9b4>
 80b09e6:	461e      	mov	r6, r3
 80b09e8:	e000      	b.n	80b09ec <mbedtls_ssl_handshake_client_step+0x9b4>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );

    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );

    *olen = 4;
 80b09ea:	2604      	movs	r6, #4
    ((void) olen);

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
                   ext_len ) );

    if( ext_len > 0 )
 80b09ec:	19bf      	adds	r7, r7, r6
    {
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
 80b09ee:	bf1e      	ittt	ne
 80b09f0:	0a3b      	lsrne	r3, r7, #8
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
        p += ext_len;
 80b09f2:	eb0b 0807 	addne.w	r8, fp, r7
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
                   ext_len ) );

    if( ext_len > 0 )
    {
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
 80b09f6:	712b      	strbne	r3, [r5, #4]
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
        p += ext_len;
    }

    ssl->out_msglen  = p - buf;
 80b09f8:	ebc9 0308 	rsb	r3, r9, r8
                   ext_len ) );

    if( ext_len > 0 )
    {
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
 80b09fc:	bf18      	it	ne
 80b09fe:	716f      	strbne	r7, [r5, #5]
        p += ext_len;
    }

    ssl->out_msglen  = p - buf;
 80b0a00:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 80b0a04:	2316      	movs	r3, #22
 80b0a06:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 80b0a0a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80b0a0e:	2201      	movs	r2, #1
 80b0a10:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 80b0a12:	6863      	ldr	r3, [r4, #4]
 80b0a14:	4413      	add	r3, r2
 80b0a16:	e604      	b.n	80b0622 <mbedtls_ssl_handshake_client_step+0x5ea>
                            ssl->conf->min_major_ver, ssl->conf->min_minor_ver,
                            ssl->major_ver, ssl->minor_ver,
                            ssl->conf->max_major_ver, ssl->conf->max_minor_ver ) );

        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                     MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );
 80b0a18:	2246      	movs	r2, #70	; 0x46
 80b0a1a:	2102      	movs	r1, #2
 80b0a1c:	4620      	mov	r0, r4
 80b0a1e:	f7fa f94d 	bl	80aacbc <mbedtls_ssl_send_alert_message>

        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
 80b0a22:	4daf      	ldr	r5, [pc, #700]	; (80b0ce0 <mbedtls_ssl_handshake_client_step+0xca8>)
 80b0a24:	e1b6      	b.n	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )
 80b0a26:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80b0a28:	f106 022b 	add.w	r2, r6, #43	; 0x2b
 80b0a2c:	4293      	cmp	r3, r2
 80b0a2e:	d912      	bls.n	80b0a56 <mbedtls_ssl_handshake_client_step+0xa1e>
    {
        ext_len = ( ( buf[38 + n] <<  8 )
 80b0a30:	eb0a 0206 	add.w	r2, sl, r6
                  | ( buf[39 + n]       ) );
 80b0a34:	f892 7026 	ldrb.w	r7, [r2, #38]	; 0x26
 80b0a38:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 80b0a3c:	ea42 2707 	orr.w	r7, r2, r7, lsl #8

        if( ( ext_len > 0 && ext_len < 4 ) ||
 80b0a40:	1e7a      	subs	r2, r7, #1
 80b0a42:	2a02      	cmp	r2, #2
 80b0a44:	f67f abc8 	bls.w	80b01d8 <mbedtls_ssl_handshake_client_step+0x1a0>
 80b0a48:	f106 022c 	add.w	r2, r6, #44	; 0x2c
 80b0a4c:	443a      	add	r2, r7
 80b0a4e:	4293      	cmp	r3, r2
 80b0a50:	f47f abc2 	bne.w	80b01d8 <mbedtls_ssl_handshake_client_step+0x1a0>
 80b0a54:	e005      	b.n	80b0a62 <mbedtls_ssl_handshake_client_step+0xa2a>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }
    }
    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )
 80b0a56:	f106 022a 	add.w	r2, r6, #42	; 0x2a
 80b0a5a:	4293      	cmp	r3, r2
 80b0a5c:	f47f abbc 	bne.w	80b01d8 <mbedtls_ssl_handshake_client_step+0x1a0>
    {
        ext_len = 0;
 80b0a60:	2700      	movs	r7, #0
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 80b0a62:	eb0a 0306 	add.w	r3, sl, r6
 80b0a66:	f893 9023 	ldrb.w	r9, [r3, #35]	; 0x23
 80b0a6a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 80b0a6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 80b0a72:	ea42 2909 	orr.w	r9, r2, r9, lsl #8
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 80b0a76:	2b00      	cmp	r3, #0
 80b0a78:	f43f ab64 	beq.w	80b0144 <mbedtls_ssl_handshake_client_step+0x10c>
#endif/* MBEDTLS_ZLIB_SUPPORT */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server hello, bad compression: %d", comp ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
 80b0a7c:	222f      	movs	r2, #47	; 0x2f
 80b0a7e:	2102      	movs	r1, #2
 80b0a80:	4620      	mov	r0, r4
 80b0a82:	f7fa f91b 	bl	80aacbc <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
 80b0a86:	4d97      	ldr	r5, [pc, #604]	; (80b0ce4 <mbedtls_ssl_handshake_client_step+0xcac>)
 80b0a88:	e184      	b.n	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 80b0a8a:	2e00      	cmp	r6, #0
 80b0a8c:	f43f abb2 	beq.w	80b01f4 <mbedtls_ssl_handshake_client_step+0x1bc>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
 80b0a90:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 80b0a92:	6803      	ldr	r3, [r0, #0]
 80b0a94:	4599      	cmp	r9, r3
 80b0a96:	f47f abad 	bne.w	80b01f4 <mbedtls_ssl_handshake_client_step+0x1bc>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
 80b0a9a:	6843      	ldr	r3, [r0, #4]
 80b0a9c:	2b00      	cmp	r3, #0
 80b0a9e:	f47f aba9 	bne.w	80b01f4 <mbedtls_ssl_handshake_client_step+0x1bc>
        ssl->session_negotiate->compression != comp ||
 80b0aa2:	6883      	ldr	r3, [r0, #8]
 80b0aa4:	429e      	cmp	r6, r3
 80b0aa6:	f47f aba5 	bne.w	80b01f4 <mbedtls_ssl_handshake_client_step+0x1bc>
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
 80b0aaa:	4632      	mov	r2, r6
 80b0aac:	4641      	mov	r1, r8
 80b0aae:	300c      	adds	r0, #12
 80b0ab0:	f001 fe92 	bl	80b27d8 <memcmp>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
 80b0ab4:	2800      	cmp	r0, #0
 80b0ab6:	f47f ab9d 	bne.w	80b01f4 <mbedtls_ssl_handshake_client_step+0x1bc>
        ssl->session_negotiate->id_len = n;
        memcpy( ssl->session_negotiate->id, buf + 35, n );
    }
    else
    {
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 80b0aba:	230c      	movs	r3, #12
 80b0abc:	6063      	str	r3, [r4, #4]

        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 80b0abe:	4620      	mov	r0, r4
 80b0ac0:	f7f9 fd3e 	bl	80aa540 <mbedtls_ssl_derive_keys>
 80b0ac4:	4680      	mov	r8, r0
 80b0ac6:	2800      	cmp	r0, #0
 80b0ac8:	f43f aba7 	beq.w	80b021a <mbedtls_ssl_handshake_client_step+0x1e2>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 80b0acc:	2250      	movs	r2, #80	; 0x50
 80b0ace:	2102      	movs	r1, #2
 80b0ad0:	4620      	mov	r0, r4
 80b0ad2:	f7fa f8f3 	bl	80aacbc <mbedtls_ssl_send_alert_message>
 80b0ad6:	4645      	mov	r5, r8
 80b0ad8:	e15c      	b.n	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
            ssl->session_negotiate->ciphersuite )
 80b0ada:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80b0adc:	6812      	ldr	r2, [r2, #0]
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
 80b0ade:	4290      	cmp	r0, r2
 80b0ae0:	f47f aba0 	bne.w	80b0224 <mbedtls_ssl_handshake_client_step+0x1ec>
        {
            break;
        }
    }

    suite_info = mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite );
 80b0ae4:	f7fe fee8 	bl	80af8b8 <mbedtls_ssl_ciphersuite_from_id>
    if( ssl_validate_ciphersuite( suite_info, ssl, ssl->minor_ver, ssl->minor_ver ) != 0 )
 80b0ae8:	68e3      	ldr	r3, [r4, #12]
static int ssl_validate_ciphersuite( const mbedtls_ssl_ciphersuite_t * suite_info,
                                     const mbedtls_ssl_context * ssl,
                                     int min_minor_ver, int max_minor_ver )
{
    (void) ssl;
    if( suite_info == NULL )
 80b0aea:	2800      	cmp	r0, #0
 80b0aec:	f43f ab9f 	beq.w	80b022e <mbedtls_ssl_handshake_client_step+0x1f6>
        return( 1 );

    if( suite_info->min_minor_ver > max_minor_ver ||
 80b0af0:	6902      	ldr	r2, [r0, #16]
 80b0af2:	429a      	cmp	r2, r3
 80b0af4:	f73f ab9b 	bgt.w	80b022e <mbedtls_ssl_handshake_client_step+0x1f6>
 80b0af8:	6982      	ldr	r2, [r0, #24]
 80b0afa:	4293      	cmp	r3, r2
 80b0afc:	f73f ab97 	bgt.w	80b022e <mbedtls_ssl_handshake_client_step+0x1f6>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        switch( ext_id )
 80b0b00:	f64f 7001 	movw	r0, #65281	; 0xff01
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }
    ssl->session_negotiate->compression = comp;
 80b0b04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80b0b06:	2200      	movs	r2, #0
 80b0b08:	605a      	str	r2, [r3, #4]

    ext = buf + 40 + n;
 80b0b0a:	f106 0228 	add.w	r2, r6, #40	; 0x28
 80b0b0e:	4452      	add	r2, sl
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    ((void) buf);

    ssl->handshake->new_session_ticket = 1;
 80b0b10:	2601      	movs	r6, #1

    ext = buf + 40 + n;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );

    while( ext_len )
 80b0b12:	2f00      	cmp	r7, #0
 80b0b14:	d051      	beq.n	80b0bba <mbedtls_ssl_handshake_client_step+0xb82>
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
                                | ( ext[1]       ) );
 80b0b16:	7811      	ldrb	r1, [r2, #0]
 80b0b18:	7853      	ldrb	r3, [r2, #1]
        unsigned int ext_size = ( ( ext[2] <<  8 )
                                | ( ext[3]       ) );
 80b0b1a:	f892 e002 	ldrb.w	lr, [r2, #2]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );

    while( ext_len )
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
                                | ( ext[1]       ) );
 80b0b1e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
        unsigned int ext_size = ( ( ext[2] <<  8 )
                                | ( ext[3]       ) );
 80b0b22:	78d1      	ldrb	r1, [r2, #3]
 80b0b24:	ea41 210e 	orr.w	r1, r1, lr, lsl #8

        if( ext_size + 4 > ext_len )
 80b0b28:	f101 0e04 	add.w	lr, r1, #4
 80b0b2c:	4577      	cmp	r7, lr
 80b0b2e:	f4ff ab53 	bcc.w	80b01d8 <mbedtls_ssl_handshake_client_step+0x1a0>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        switch( ext_id )
 80b0b32:	2b0b      	cmp	r3, #11
 80b0b34:	d02a      	beq.n	80b0b8c <mbedtls_ssl_handshake_client_step+0xb54>
 80b0b36:	dc02      	bgt.n	80b0b3e <mbedtls_ssl_handshake_client_step+0xb06>
 80b0b38:	2b01      	cmp	r3, #1
 80b0b3a:	d00c      	beq.n	80b0b56 <mbedtls_ssl_handshake_client_step+0xb1e>
 80b0b3c:	e04d      	b.n	80b0bda <mbedtls_ssl_handshake_client_step+0xba2>
 80b0b3e:	2b23      	cmp	r3, #35	; 0x23
 80b0b40:	d01a      	beq.n	80b0b78 <mbedtls_ssl_handshake_client_step+0xb40>
 80b0b42:	4283      	cmp	r3, r0
 80b0b44:	d149      	bne.n	80b0bda <mbedtls_ssl_handshake_client_step+0xba2>
        }
    }
    else
#endif /* MBEDTLS_SSL_RENEGOTIATION */
    {
        if( len != 1 || buf[0] != 0x00 )
 80b0b46:	2901      	cmp	r1, #1
 80b0b48:	d144      	bne.n	80b0bd4 <mbedtls_ssl_handshake_client_step+0xb9c>
 80b0b4a:	7913      	ldrb	r3, [r2, #4]
 80b0b4c:	2b00      	cmp	r3, #0
 80b0b4e:	d141      	bne.n	80b0bd4 <mbedtls_ssl_handshake_client_step+0xb9c>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
 80b0b50:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
 80b0b54:	e041      	b.n	80b0bda <mbedtls_ssl_handshake_client_step+0xba2>
{
    /*
     * server should use the extension only if we did,
     * and if so the server's value should match ours (and len is always 1)
     */
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ||
 80b0b56:	6823      	ldr	r3, [r4, #0]
 80b0b58:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80b0b5c:	f403 7ce0 	and.w	ip, r3, #448	; 0x1c0
 80b0b60:	f1bc 0f00 	cmp.w	ip, #0
 80b0b64:	d036      	beq.n	80b0bd4 <mbedtls_ssl_handshake_client_step+0xb9c>
 80b0b66:	2901      	cmp	r1, #1
 80b0b68:	d134      	bne.n	80b0bd4 <mbedtls_ssl_handshake_client_step+0xb9c>
        len != 1 ||
 80b0b6a:	f892 c004 	ldrb.w	ip, [r2, #4]
 80b0b6e:	f3c3 1382 	ubfx	r3, r3, #6, #3
 80b0b72:	459c      	cmp	ip, r3
 80b0b74:	d031      	beq.n	80b0bda <mbedtls_ssl_handshake_client_step+0xba2>
 80b0b76:	e02d      	b.n	80b0bd4 <mbedtls_ssl_handshake_client_step+0xb9c>
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static int ssl_parse_session_ticket_ext( mbedtls_ssl_context *ssl,
                                         const unsigned char *buf,
                                         size_t len )
{
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED ||
 80b0b78:	6823      	ldr	r3, [r4, #0]
 80b0b7a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80b0b7e:	079b      	lsls	r3, r3, #30
 80b0b80:	d528      	bpl.n	80b0bd4 <mbedtls_ssl_handshake_client_step+0xb9c>
 80b0b82:	bb39      	cbnz	r1, 80b0bd4 <mbedtls_ssl_handshake_client_step+0xb9c>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    ((void) buf);

    ssl->handshake->new_session_ticket = 1;
 80b0b84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80b0b86:	f8c3 6358 	str.w	r6, [r3, #856]	; 0x358
 80b0b8a:	e026      	b.n	80b0bda <mbedtls_ssl_handshake_client_step+0xba2>
                                                  size_t len )
{
    size_t list_size;
    const unsigned char *p;

    if( len == 0 || (size_t)( buf[0] + 1 ) != len )
 80b0b8c:	2900      	cmp	r1, #0
 80b0b8e:	f43f ab23 	beq.w	80b01d8 <mbedtls_ssl_handshake_client_step+0x1a0>
 80b0b92:	7913      	ldrb	r3, [r2, #4]
 80b0b94:	f103 0c01 	add.w	ip, r3, #1
 80b0b98:	4561      	cmp	r1, ip
 80b0b9a:	f47f ab1d 	bne.w	80b01d8 <mbedtls_ssl_handshake_client_step+0x1a0>
 80b0b9e:	f102 0c04 	add.w	ip, r2, #4
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }
    list_size = buf[0];

    p = buf + 1;
    while( list_size > 0 )
 80b0ba2:	b1bb      	cbz	r3, 80b0bd4 <mbedtls_ssl_handshake_client_step+0xb9c>
    {
        if( p[0] == MBEDTLS_ECP_PF_UNCOMPRESSED ||
 80b0ba4:	f81c 8f01 	ldrb.w	r8, [ip, #1]!
 80b0ba8:	f1b8 0f01 	cmp.w	r8, #1
 80b0bac:	d803      	bhi.n	80b0bb6 <mbedtls_ssl_handshake_client_step+0xb7e>
            p[0] == MBEDTLS_ECP_PF_COMPRESSED )
        {
#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C)
            ssl->handshake->ecdh_ctx.point_format = p[0];
 80b0bae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80b0bb0:	f8c3 80e0 	str.w	r8, [r3, #224]	; 0xe0
 80b0bb4:	e011      	b.n	80b0bda <mbedtls_ssl_handshake_client_step+0xba2>
#endif
            MBEDTLS_SSL_DEBUG_MSG( 4, ( "point format selected: %d", p[0] ) );
            return( 0 );
        }

        list_size--;
 80b0bb6:	3b01      	subs	r3, #1
 80b0bb8:	e7f3      	b.n	80b0ba2 <mbedtls_ssl_handshake_client_step+0xb6a>
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 80b0bba:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 80b0bbe:	2b00      	cmp	r3, #0
 80b0bc0:	f040 80e8 	bne.w	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
 80b0bc4:	6823      	ldr	r3, [r4, #0]
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 80b0bc6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80b0bca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80b0bce:	2b20      	cmp	r3, #32
 80b0bd0:	f040 80e0 	bne.w	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
        p++;
    }

    MBEDTLS_SSL_DEBUG_MSG( 1, ( "no point format in common" ) );
    mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                    MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
 80b0bd4:	2228      	movs	r2, #40	; 0x28
 80b0bd6:	f7ff bb2b 	b.w	80b0230 <mbedtls_ssl_handshake_client_step+0x1f8>
        default:
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
 80b0bda:	1a79      	subs	r1, r7, r1
 80b0bdc:	1f0f      	subs	r7, r1, #4
        ext += 4 + ext_size;

        if( ext_len > 0 && ext_len < 4 )
 80b0bde:	3905      	subs	r1, #5
 80b0be0:	2902      	cmp	r1, #2
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
        ext += 4 + ext_size;
 80b0be2:	4472      	add	r2, lr

        if( ext_len > 0 && ext_len < 4 )
 80b0be4:	d895      	bhi.n	80b0b12 <mbedtls_ssl_handshake_client_step+0xada>
    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ticket alloc failed" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 80b0be6:	4d40      	ldr	r5, [pc, #256]	; (80b0ce8 <mbedtls_ssl_handshake_client_step+0xcb0>)
 80b0be8:	e0d4      	b.n	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
    {
        if( ssl_parse_server_ecdh_params( ssl, &p, end ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
 80b0bea:	222f      	movs	r2, #47	; 0x2f
 80b0bec:	2102      	movs	r1, #2
 80b0bee:	4620      	mov	r0, r4
 80b0bf0:	f7fa f864 	bl	80aacbc <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
 80b0bf4:	4d3d      	ldr	r5, [pc, #244]	; (80b0cec <mbedtls_ssl_handshake_client_step+0xcb4>)
 80b0bf6:	e0cd      	b.n	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>

        if( p > end - 2 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 80b0bf8:	2232      	movs	r2, #50	; 0x32
 80b0bfa:	e7f7      	b.n	80b0bec <mbedtls_ssl_handshake_client_step+0xbb4>
        }

        /*
         * Verify signature
         */
        if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk, pk_alg ) )
 80b0bfc:	4641      	mov	r1, r8
 80b0bfe:	30bc      	adds	r0, #188	; 0xbc
 80b0c00:	f7f9 f9ee 	bl	80a9fe0 <mbedtls_pk_can_do>
 80b0c04:	b930      	cbnz	r0, 80b0c14 <mbedtls_ssl_handshake_client_step+0xbdc>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
 80b0c06:	2228      	movs	r2, #40	; 0x28
 80b0c08:	2102      	movs	r1, #2
 80b0c0a:	4620      	mov	r0, r4
 80b0c0c:	f7fa f856 	bl	80aacbc <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 80b0c10:	4d37      	ldr	r5, [pc, #220]	; (80b0cf0 <mbedtls_ssl_handshake_client_step+0xcb8>)
 80b0c12:	e0bf      	b.n	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
        if( ssl->handshake->ecrs_enabled )
            rs_ctx = &ssl->handshake->ecrs_ctx.pk;
#endif

        if( ( ret = mbedtls_pk_verify_restartable(
                        &ssl->session_negotiate->peer_cert->pk,
 80b0c14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
        if( ssl->handshake->ecrs_enabled )
            rs_ctx = &ssl->handshake->ecrs_ctx.pk;
#endif

        if( ( ret = mbedtls_pk_verify_restartable(
 80b0c16:	aa0e      	add	r2, sp, #56	; 0x38
 80b0c18:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80b0c1a:	2300      	movs	r3, #0
 80b0c1c:	9302      	str	r3, [sp, #8]
 80b0c1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80b0c20:	f8cd b004 	str.w	fp, [sp, #4]
 80b0c24:	9300      	str	r3, [sp, #0]
 80b0c26:	4649      	mov	r1, r9
 80b0c28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80b0c2a:	30bc      	adds	r0, #188	; 0xbc
 80b0c2c:	f7f9 f9e0 	bl	80a9ff0 <mbedtls_pk_verify_restartable>
 80b0c30:	4606      	mov	r6, r0
 80b0c32:	2800      	cmp	r0, #0
 80b0c34:	f43f abd6 	beq.w	80b03e4 <mbedtls_ssl_handshake_client_step+0x3ac>
        {
#if defined(MBEDTLS_SSL__ECP_RESTARTABLE)
            if( ret != MBEDTLS_ERR_ECP_IN_PROGRESS )
#endif
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                                MBEDTLS_SSL_ALERT_MSG_DECRYPT_ERROR );
 80b0c38:	2233      	movs	r2, #51	; 0x33
 80b0c3a:	2102      	movs	r1, #2
 80b0c3c:	4620      	mov	r0, r4
 80b0c3e:	f7fa f83d 	bl	80aacbc <mbedtls_ssl_send_alert_message>
 80b0c42:	4635      	mov	r5, r6
 80b0c44:	e0a6      	b.n	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
        }
        else
#endif
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80b0c46:	4d2b      	ldr	r5, [pc, #172]	; (80b0cf4 <mbedtls_ssl_handshake_client_step+0xcbc>)
 80b0c48:	e0a4      	b.n	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );

    if( ! mbedtls_ssl_ciphersuite_cert_req_allowed( ciphersuite_info ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate request" ) );
        ssl->state++;
 80b0c4a:	2306      	movs	r3, #6
 80b0c4c:	f7ff bbcc 	b.w	80b03e8 <mbedtls_ssl_handshake_client_step+0x3b0>
        return( 0 );
    }

    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 80b0c50:	4631      	mov	r1, r6
 80b0c52:	4620      	mov	r0, r4
 80b0c54:	f7fa f84c 	bl	80aacf0 <mbedtls_ssl_read_record>
 80b0c58:	2800      	cmp	r0, #0
 80b0c5a:	f47f aaf2 	bne.w	80b0242 <mbedtls_ssl_handshake_client_step+0x20a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80b0c5e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80b0c60:	2b16      	cmp	r3, #22
 80b0c62:	f47f ab05 	bne.w	80b0270 <mbedtls_ssl_handshake_client_step+0x238>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    ssl->state++;
 80b0c66:	6863      	ldr	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 80b0c68:	6e62      	ldr	r2, [r4, #100]	; 0x64
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    ssl->state++;
 80b0c6a:	3301      	adds	r3, #1
 80b0c6c:	6063      	str	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 80b0c6e:	7813      	ldrb	r3, [r2, #0]
 80b0c70:	2b0d      	cmp	r3, #13
 80b0c72:	bf0c      	ite	eq
 80b0c74:	2301      	moveq	r3, #1
 80b0c76:	2300      	movne	r3, #0
 80b0c78:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
                        ssl->client_auth ? "a" : "no" ) );

    if( ssl->client_auth == 0 )
 80b0c7c:	d002      	beq.n	80b0c84 <mbedtls_ssl_handshake_client_step+0xc4c>
    {
        /* Current message is probably the ServerHelloDone */
        ssl->keep_current_message = 1;
 80b0c7e:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 80b0c82:	e087      	b.n	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
     *  superficially sane.
     */
    buf = ssl->in_msg;

    /* certificate_types */
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) )
 80b0c84:	6fa6      	ldr	r6, [r4, #120]	; 0x78
 80b0c86:	2e04      	cmp	r6, #4
 80b0c88:	d806      	bhi.n	80b0c98 <mbedtls_ssl_handshake_client_step+0xc60>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 80b0c8a:	2232      	movs	r2, #50	; 0x32
 80b0c8c:	2102      	movs	r1, #2
 80b0c8e:	4620      	mov	r0, r4
 80b0c90:	f7fa f814 	bl	80aacbc <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 80b0c94:	4d18      	ldr	r5, [pc, #96]	; (80b0cf8 <mbedtls_ssl_handshake_client_step+0xcc0>)
 80b0c96:	e07d      	b.n	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
    }
    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];
 80b0c98:	7913      	ldrb	r3, [r2, #4]
     * Both reach at most the index:
     *    ...hdr_len + 2 + n,
     * therefore the buffer length at this point must be greater than that
     * regardless of the actual code path.
     */
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 80b0c9a:	1d98      	adds	r0, r3, #6
 80b0c9c:	4286      	cmp	r6, r0
 80b0c9e:	d9f4      	bls.n	80b0c8a <mbedtls_ssl_handshake_client_step+0xc52>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
    }

    /* supported_signature_algorithms */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 80b0ca0:	68e1      	ldr	r1, [r4, #12]
 80b0ca2:	2903      	cmp	r1, #3
 80b0ca4:	d10a      	bne.n	80b0cbc <mbedtls_ssl_handshake_client_step+0xc84>
    {
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 80b0ca6:	18d1      	adds	r1, r2, r3
                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 80b0ca8:	794f      	ldrb	r7, [r1, #5]
 80b0caa:	5c11      	ldrb	r1, [r2, r0]
         *     buf[...hdr_len + 3 + n + sig_alg_len - 1 + 1],
         * which reduces to:
         *     buf[...hdr_len + 3 + n + sig_alg_len],
         * which is one less than we need the buf to be.
         */
        if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n + sig_alg_len )
 80b0cac:	1dd8      	adds	r0, r3, #7
    /* supported_signature_algorithms */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
    {
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 80b0cae:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
         *     buf[...hdr_len + 3 + n + sig_alg_len - 1 + 1],
         * which reduces to:
         *     buf[...hdr_len + 3 + n + sig_alg_len],
         * which is one less than we need the buf to be.
         */
        if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n + sig_alg_len )
 80b0cb2:	4408      	add	r0, r1
 80b0cb4:	4286      	cmp	r6, r0
 80b0cb6:	d9e8      	bls.n	80b0c8a <mbedtls_ssl_handshake_client_step+0xc52>
 80b0cb8:	3302      	adds	r3, #2
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
                                        ",%d", sig_alg[i], sig_alg[i + 1]  ) );
        }
#endif

        n += 2 + sig_alg_len;
 80b0cba:	440b      	add	r3, r1
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    /* certificate_authorities */
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 80b0cbc:	441a      	add	r2, r3
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );

    n += dn_len;
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 80b0cbe:	7951      	ldrb	r1, [r2, #5]
 80b0cc0:	7992      	ldrb	r2, [r2, #6]
 80b0cc2:	3307      	adds	r3, #7
 80b0cc4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80b0cc8:	4413      	add	r3, r2
 80b0cca:	429e      	cmp	r6, r3
 80b0ccc:	d062      	beq.n	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
 80b0cce:	e7dc      	b.n	80b0c8a <mbedtls_ssl_handshake_client_step+0xc52>
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 80b0cd0:	2232      	movs	r2, #50	; 0x32
 80b0cd2:	2102      	movs	r1, #2
 80b0cd4:	4620      	mov	r0, r4
 80b0cd6:	f7f9 fff1 	bl	80aacbc <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );
 80b0cda:	4d08      	ldr	r5, [pc, #32]	; (80b0cfc <mbedtls_ssl_handshake_client_step+0xcc4>)
 80b0cdc:	e05a      	b.n	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
 80b0cde:	bf00      	nop
 80b0ce0:	ffff9180 	.word	0xffff9180
 80b0ce4:	ffff8f80 	.word	0xffff8f80
 80b0ce8:	ffff8680 	.word	0xffff8680
 80b0cec:	ffff8500 	.word	0xffff8500
 80b0cf0:	ffff9300 	.word	0xffff9300
 80b0cf4:	ffff9400 	.word	0xffff9400
 80b0cf8:	ffff8580 	.word	0xffff8580
 80b0cfc:	ffff8480 	.word	0xffff8480
    }

    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( ((uint32_t) msg[0]) << 24 ) | ( msg[1] << 16 ) |
               ( msg[2] << 8 ) | ( msg[3] );
 80b0d00:	79f2      	ldrb	r2, [r6, #7]

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
 80b0d02:	7a37      	ldrb	r7, [r6, #8]
    }

    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( ((uint32_t) msg[0]) << 24 ) | ( msg[1] << 16 ) |
               ( msg[2] << 8 ) | ( msg[3] );
 80b0d04:	9207      	str	r2, [sp, #28]

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
 80b0d06:	7a72      	ldrb	r2, [r6, #9]
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
    }

    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( ((uint32_t) msg[0]) << 24 ) | ( msg[1] << 16 ) |
 80b0d08:	f896 8004 	ldrb.w	r8, [r6, #4]
               ( msg[2] << 8 ) | ( msg[3] );

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
 80b0d0c:	ea42 2707 	orr.w	r7, r2, r7, lsl #8

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
 80b0d10:	f107 020a 	add.w	r2, r7, #10
 80b0d14:	4293      	cmp	r3, r2
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
    }

    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( ((uint32_t) msg[0]) << 24 ) | ( msg[1] << 16 ) |
 80b0d16:	f896 b005 	ldrb.w	fp, [r6, #5]
               ( msg[2] << 8 ) | ( msg[3] );
 80b0d1a:	f896 a006 	ldrb.w	sl, [r6, #6]

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
 80b0d1e:	f47f aca1 	bne.w	80b0664 <mbedtls_ssl_handshake_client_step+0x62c>
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket length: %d", ticket_len ) );

    /* We're not waiting for a NewSessionTicket message any more */
    ssl->handshake->new_session_ticket = 0;
 80b0d22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80b0d24:	f8c3 9358 	str.w	r9, [r3, #856]	; 0x358
    ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 80b0d28:	230c      	movs	r3, #12
 80b0d2a:	6063      	str	r3, [r4, #4]

    /*
     * Zero-length ticket means the server changed his mind and doesn't want
     * to send a ticket after all, so just forget it
     */
    if( ticket_len == 0 )
 80b0d2c:	2f00      	cmp	r7, #0
 80b0d2e:	d031      	beq.n	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
        return( 0 );

    mbedtls_platform_zeroize( ssl->session_negotiate->ticket,
 80b0d30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
                              ssl->session_negotiate->ticket_len );
 80b0d32:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80b0d34:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80b0d36:	f7f5 fb6b 	bl	80a6410 <mbedtls_platform_zeroize>
    mbedtls_free( ssl->session_negotiate->ticket );
 80b0d3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80b0d3c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80b0d3e:	f000 f9d3 	bl	80b10e8 <free>
    ssl->session_negotiate->ticket = NULL;
 80b0d42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ssl->session_negotiate->ticket_len = 0;

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
 80b0d44:	4639      	mov	r1, r7
        return( 0 );

    mbedtls_platform_zeroize( ssl->session_negotiate->ticket,
                              ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
    ssl->session_negotiate->ticket = NULL;
 80b0d46:	f8c3 9064 	str.w	r9, [r3, #100]	; 0x64
    ssl->session_negotiate->ticket_len = 0;
 80b0d4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
 80b0d4c:	2001      	movs	r0, #1

    mbedtls_platform_zeroize( ssl->session_negotiate->ticket,
                              ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
    ssl->session_negotiate->ticket = NULL;
    ssl->session_negotiate->ticket_len = 0;
 80b0d4e:	f8c3 9068 	str.w	r9, [r3, #104]	; 0x68

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
 80b0d52:	f001 fc33 	bl	80b25bc <calloc>
 80b0d56:	b930      	cbnz	r0, 80b0d66 <mbedtls_ssl_handshake_client_step+0xd2e>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ticket alloc failed" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 80b0d58:	2250      	movs	r2, #80	; 0x50
 80b0d5a:	2102      	movs	r1, #2
 80b0d5c:	4620      	mov	r0, r4
 80b0d5e:	f7f9 ffad 	bl	80aacbc <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 80b0d62:	4d0e      	ldr	r5, [pc, #56]	; (80b0d9c <mbedtls_ssl_handshake_client_step+0xd64>)
 80b0d64:	e016      	b.n	80b0d94 <mbedtls_ssl_handshake_client_step+0xd5c>
    }

    memcpy( ticket, msg + 6, ticket_len );
 80b0d66:	463a      	mov	r2, r7
 80b0d68:	f106 010a 	add.w	r1, r6, #10
 80b0d6c:	9008      	str	r0, [sp, #32]
 80b0d6e:	f001 fd42 	bl	80b27f6 <memcpy>

    ssl->session_negotiate->ticket = ticket;
 80b0d72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80b0d74:	9b08      	ldr	r3, [sp, #32]
 80b0d76:	6653      	str	r3, [r2, #100]	; 0x64
    ssl->session_negotiate->ticket_len = ticket_len;
 80b0d78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80b0d7a:	669f      	str	r7, [r3, #104]	; 0x68
    ssl->session_negotiate->ticket_lifetime = lifetime;
 80b0d7c:	9b07      	ldr	r3, [sp, #28]
 80b0d7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80b0d80:	ea43 6808 	orr.w	r8, r3, r8, lsl #24
 80b0d84:	ea48 4b0b 	orr.w	fp, r8, fp, lsl #16
 80b0d88:	ea4b 230a 	orr.w	r3, fp, sl, lsl #8
 80b0d8c:	66d3      	str	r3, [r2, #108]	; 0x6c
     * RFC 5077 section 3.4:
     * "If the client receives a session ticket from the server, then it
     * discards any Session ID that was sent in the ServerHello."
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket in use, discarding session id" ) );
    ssl->session_negotiate->id_len = 0;
 80b0d8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80b0d90:	f8c3 9008 	str.w	r9, [r3, #8]
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   }

    return( ret );
}
 80b0d94:	4628      	mov	r0, r5
 80b0d96:	b01f      	add	sp, #124	; 0x7c
 80b0d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80b0d9c:	ffff8100 	.word	0xffff8100

080b0da0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80b0da0:	b508      	push	{r3, lr}
 80b0da2:	4b02      	ldr	r3, [pc, #8]	; (80b0dac <HAL_Pin_Map+0xc>)
 80b0da4:	681b      	ldr	r3, [r3, #0]
 80b0da6:	681b      	ldr	r3, [r3, #0]
 80b0da8:	9301      	str	r3, [sp, #4]
 80b0daa:	bd08      	pop	{r3, pc}
 80b0dac:	080601b0 	.word	0x080601b0

080b0db0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80b0db0:	b508      	push	{r3, lr}
 80b0db2:	4b02      	ldr	r3, [pc, #8]	; (80b0dbc <HAL_RNG_GetRandomNumber+0xc>)
 80b0db4:	681b      	ldr	r3, [r3, #0]
 80b0db6:	685b      	ldr	r3, [r3, #4]
 80b0db8:	9301      	str	r3, [sp, #4]
 80b0dba:	bd08      	pop	{r3, pc}
 80b0dbc:	0806019c 	.word	0x0806019c

080b0dc0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80b0dc0:	b508      	push	{r3, lr}
 80b0dc2:	4b02      	ldr	r3, [pc, #8]	; (80b0dcc <HAL_Timer_Get_Milli_Seconds+0xc>)
 80b0dc4:	681b      	ldr	r3, [r3, #0]
 80b0dc6:	695b      	ldr	r3, [r3, #20]
 80b0dc8:	9301      	str	r3, [sp, #4]
 80b0dca:	bd08      	pop	{r3, pc}
 80b0dcc:	0806019c 	.word	0x0806019c

080b0dd0 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80b0dd0:	b508      	push	{r3, lr}
 80b0dd2:	4b02      	ldr	r3, [pc, #8]	; (80b0ddc <HAL_RTC_Get_UnixTime+0xc>)
 80b0dd4:	681b      	ldr	r3, [r3, #0]
 80b0dd6:	69db      	ldr	r3, [r3, #28]
 80b0dd8:	9301      	str	r3, [sp, #4]
 80b0dda:	bd08      	pop	{r3, pc}
 80b0ddc:	0806019c 	.word	0x0806019c

080b0de0 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80b0de0:	b508      	push	{r3, lr}
 80b0de2:	4b02      	ldr	r3, [pc, #8]	; (80b0dec <HAL_RTC_Time_Is_Valid+0xc>)
 80b0de4:	681b      	ldr	r3, [r3, #0]
 80b0de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80b0de8:	9301      	str	r3, [sp, #4]
 80b0dea:	bd08      	pop	{r3, pc}
 80b0dec:	0806019c 	.word	0x0806019c

080b0df0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80b0df0:	b508      	push	{r3, lr}
 80b0df2:	4b02      	ldr	r3, [pc, #8]	; (80b0dfc <HAL_USART_Init+0xc>)
 80b0df4:	681b      	ldr	r3, [r3, #0]
 80b0df6:	699b      	ldr	r3, [r3, #24]
 80b0df8:	9301      	str	r3, [sp, #4]
 80b0dfa:	bd08      	pop	{r3, pc}
 80b0dfc:	080601c4 	.word	0x080601c4

080b0e00 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80b0e00:	b508      	push	{r3, lr}
 80b0e02:	4b02      	ldr	r3, [pc, #8]	; (80b0e0c <HAL_USART_Write_Data+0xc>)
 80b0e04:	681b      	ldr	r3, [r3, #0]
 80b0e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80b0e08:	9301      	str	r3, [sp, #4]
 80b0e0a:	bd08      	pop	{r3, pc}
 80b0e0c:	080601c4 	.word	0x080601c4

080b0e10 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80b0e10:	b508      	push	{r3, lr}
 80b0e12:	4b02      	ldr	r3, [pc, #8]	; (80b0e1c <HAL_USART_Available_Data+0xc>)
 80b0e14:	681b      	ldr	r3, [r3, #0]
 80b0e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80b0e18:	9301      	str	r3, [sp, #4]
 80b0e1a:	bd08      	pop	{r3, pc}
 80b0e1c:	080601c4 	.word	0x080601c4

080b0e20 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80b0e20:	b508      	push	{r3, lr}
 80b0e22:	4b02      	ldr	r3, [pc, #8]	; (80b0e2c <HAL_USART_Read_Data+0xc>)
 80b0e24:	681b      	ldr	r3, [r3, #0]
 80b0e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80b0e28:	9301      	str	r3, [sp, #4]
 80b0e2a:	bd08      	pop	{r3, pc}
 80b0e2c:	080601c4 	.word	0x080601c4

080b0e30 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80b0e30:	b508      	push	{r3, lr}
 80b0e32:	4b02      	ldr	r3, [pc, #8]	; (80b0e3c <HAL_USART_Peek_Data+0xc>)
 80b0e34:	681b      	ldr	r3, [r3, #0]
 80b0e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80b0e38:	9301      	str	r3, [sp, #4]
 80b0e3a:	bd08      	pop	{r3, pc}
 80b0e3c:	080601c4 	.word	0x080601c4

080b0e40 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80b0e40:	b508      	push	{r3, lr}
 80b0e42:	4b02      	ldr	r3, [pc, #8]	; (80b0e4c <HAL_USART_Flush_Data+0xc>)
 80b0e44:	681b      	ldr	r3, [r3, #0]
 80b0e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80b0e48:	9301      	str	r3, [sp, #4]
 80b0e4a:	bd08      	pop	{r3, pc}
 80b0e4c:	080601c4 	.word	0x080601c4

080b0e50 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80b0e50:	b508      	push	{r3, lr}
 80b0e52:	4b02      	ldr	r3, [pc, #8]	; (80b0e5c <HAL_USART_Available_Data_For_Write+0xc>)
 80b0e54:	681b      	ldr	r3, [r3, #0]
 80b0e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80b0e58:	9301      	str	r3, [sp, #4]
 80b0e5a:	bd08      	pop	{r3, pc}
 80b0e5c:	080601c4 	.word	0x080601c4

080b0e60 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80b0e60:	b508      	push	{r3, lr}
 80b0e62:	4b02      	ldr	r3, [pc, #8]	; (80b0e6c <socket_active_status+0xc>)
 80b0e64:	681b      	ldr	r3, [r3, #0]
 80b0e66:	681b      	ldr	r3, [r3, #0]
 80b0e68:	9301      	str	r3, [sp, #4]
 80b0e6a:	bd08      	pop	{r3, pc}
 80b0e6c:	080601bc 	.word	0x080601bc

080b0e70 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80b0e70:	b508      	push	{r3, lr}
 80b0e72:	4b02      	ldr	r3, [pc, #8]	; (80b0e7c <socket_handle_valid+0xc>)
 80b0e74:	681b      	ldr	r3, [r3, #0]
 80b0e76:	685b      	ldr	r3, [r3, #4]
 80b0e78:	9301      	str	r3, [sp, #4]
 80b0e7a:	bd08      	pop	{r3, pc}
 80b0e7c:	080601bc 	.word	0x080601bc

080b0e80 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80b0e80:	b508      	push	{r3, lr}
 80b0e82:	4b02      	ldr	r3, [pc, #8]	; (80b0e8c <socket_create+0xc>)
 80b0e84:	681b      	ldr	r3, [r3, #0]
 80b0e86:	689b      	ldr	r3, [r3, #8]
 80b0e88:	9301      	str	r3, [sp, #4]
 80b0e8a:	bd08      	pop	{r3, pc}
 80b0e8c:	080601bc 	.word	0x080601bc

080b0e90 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80b0e90:	b508      	push	{r3, lr}
 80b0e92:	4b02      	ldr	r3, [pc, #8]	; (80b0e9c <socket_connect+0xc>)
 80b0e94:	681b      	ldr	r3, [r3, #0]
 80b0e96:	68db      	ldr	r3, [r3, #12]
 80b0e98:	9301      	str	r3, [sp, #4]
 80b0e9a:	bd08      	pop	{r3, pc}
 80b0e9c:	080601bc 	.word	0x080601bc

080b0ea0 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80b0ea0:	b508      	push	{r3, lr}
 80b0ea2:	4b02      	ldr	r3, [pc, #8]	; (80b0eac <socket_receive+0xc>)
 80b0ea4:	681b      	ldr	r3, [r3, #0]
 80b0ea6:	691b      	ldr	r3, [r3, #16]
 80b0ea8:	9301      	str	r3, [sp, #4]
 80b0eaa:	bd08      	pop	{r3, pc}
 80b0eac:	080601bc 	.word	0x080601bc

080b0eb0 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80b0eb0:	b508      	push	{r3, lr}
 80b0eb2:	4b02      	ldr	r3, [pc, #8]	; (80b0ebc <socket_close+0xc>)
 80b0eb4:	681b      	ldr	r3, [r3, #0]
 80b0eb6:	6a1b      	ldr	r3, [r3, #32]
 80b0eb8:	9301      	str	r3, [sp, #4]
 80b0eba:	bd08      	pop	{r3, pc}
 80b0ebc:	080601bc 	.word	0x080601bc

080b0ec0 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80b0ec0:	b508      	push	{r3, lr}
 80b0ec2:	4b02      	ldr	r3, [pc, #8]	; (80b0ecc <socket_handle_invalid+0xc>)
 80b0ec4:	681b      	ldr	r3, [r3, #0]
 80b0ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80b0ec8:	9301      	str	r3, [sp, #4]
 80b0eca:	bd08      	pop	{r3, pc}
 80b0ecc:	080601bc 	.word	0x080601bc

080b0ed0 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80b0ed0:	b508      	push	{r3, lr}
 80b0ed2:	4b02      	ldr	r3, [pc, #8]	; (80b0edc <socket_send_ex+0xc>)
 80b0ed4:	681b      	ldr	r3, [r3, #0]
 80b0ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80b0ed8:	9301      	str	r3, [sp, #4]
 80b0eda:	bd08      	pop	{r3, pc}
 80b0edc:	080601bc 	.word	0x080601bc

080b0ee0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80b0ee0:	b508      	push	{r3, lr}
 80b0ee2:	4b02      	ldr	r3, [pc, #8]	; (80b0eec <HAL_USB_USART_Init+0xc>)
 80b0ee4:	681b      	ldr	r3, [r3, #0]
 80b0ee6:	681b      	ldr	r3, [r3, #0]
 80b0ee8:	9301      	str	r3, [sp, #4]
 80b0eea:	bd08      	pop	{r3, pc}
 80b0eec:	080601d8 	.word	0x080601d8

080b0ef0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80b0ef0:	b508      	push	{r3, lr}
 80b0ef2:	4b02      	ldr	r3, [pc, #8]	; (80b0efc <HAL_USB_USART_Begin+0xc>)
 80b0ef4:	681b      	ldr	r3, [r3, #0]
 80b0ef6:	685b      	ldr	r3, [r3, #4]
 80b0ef8:	9301      	str	r3, [sp, #4]
 80b0efa:	bd08      	pop	{r3, pc}
 80b0efc:	080601d8 	.word	0x080601d8

080b0f00 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80b0f00:	b508      	push	{r3, lr}
 80b0f02:	4b02      	ldr	r3, [pc, #8]	; (80b0f0c <HAL_USB_USART_Available_Data+0xc>)
 80b0f04:	681b      	ldr	r3, [r3, #0]
 80b0f06:	691b      	ldr	r3, [r3, #16]
 80b0f08:	9301      	str	r3, [sp, #4]
 80b0f0a:	bd08      	pop	{r3, pc}
 80b0f0c:	080601d8 	.word	0x080601d8

080b0f10 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80b0f10:	b508      	push	{r3, lr}
 80b0f12:	4b02      	ldr	r3, [pc, #8]	; (80b0f1c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80b0f14:	681b      	ldr	r3, [r3, #0]
 80b0f16:	695b      	ldr	r3, [r3, #20]
 80b0f18:	9301      	str	r3, [sp, #4]
 80b0f1a:	bd08      	pop	{r3, pc}
 80b0f1c:	080601d8 	.word	0x080601d8

080b0f20 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80b0f20:	b508      	push	{r3, lr}
 80b0f22:	4b02      	ldr	r3, [pc, #8]	; (80b0f2c <HAL_USB_USART_Receive_Data+0xc>)
 80b0f24:	681b      	ldr	r3, [r3, #0]
 80b0f26:	699b      	ldr	r3, [r3, #24]
 80b0f28:	9301      	str	r3, [sp, #4]
 80b0f2a:	bd08      	pop	{r3, pc}
 80b0f2c:	080601d8 	.word	0x080601d8

080b0f30 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80b0f30:	b508      	push	{r3, lr}
 80b0f32:	4b02      	ldr	r3, [pc, #8]	; (80b0f3c <HAL_USB_USART_Send_Data+0xc>)
 80b0f34:	681b      	ldr	r3, [r3, #0]
 80b0f36:	69db      	ldr	r3, [r3, #28]
 80b0f38:	9301      	str	r3, [sp, #4]
 80b0f3a:	bd08      	pop	{r3, pc}
 80b0f3c:	080601d8 	.word	0x080601d8

080b0f40 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80b0f40:	b508      	push	{r3, lr}
 80b0f42:	4b02      	ldr	r3, [pc, #8]	; (80b0f4c <HAL_USB_USART_Flush_Data+0xc>)
 80b0f44:	681b      	ldr	r3, [r3, #0]
 80b0f46:	6a1b      	ldr	r3, [r3, #32]
 80b0f48:	9301      	str	r3, [sp, #4]
 80b0f4a:	bd08      	pop	{r3, pc}
 80b0f4c:	080601d8 	.word	0x080601d8

080b0f50 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80b0f50:	b508      	push	{r3, lr}
 80b0f52:	4b02      	ldr	r3, [pc, #8]	; (80b0f5c <HAL_NET_SetNetWatchDog+0xc>)
 80b0f54:	681b      	ldr	r3, [r3, #0]
 80b0f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80b0f58:	9301      	str	r3, [sp, #4]
 80b0f5a:	bd08      	pop	{r3, pc}
 80b0f5c:	080601c0 	.word	0x080601c0

080b0f60 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80b0f60:	b508      	push	{r3, lr}
 80b0f62:	4b02      	ldr	r3, [pc, #8]	; (80b0f6c <inet_gethostbyname+0xc>)
 80b0f64:	681b      	ldr	r3, [r3, #0]
 80b0f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80b0f68:	9301      	str	r3, [sp, #4]
 80b0f6a:	bd08      	pop	{r3, pc}
 80b0f6c:	080601c0 	.word	0x080601c0

080b0f70 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80b0f70:	b508      	push	{r3, lr}
 80b0f72:	4b02      	ldr	r3, [pc, #8]	; (80b0f7c <log_message+0xc>)
 80b0f74:	681b      	ldr	r3, [r3, #0]
 80b0f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80b0f78:	9301      	str	r3, [sp, #4]
 80b0f7a:	bd08      	pop	{r3, pc}
 80b0f7c:	080201a8 	.word	0x080201a8

080b0f80 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80b0f80:	b508      	push	{r3, lr}
 80b0f82:	4b02      	ldr	r3, [pc, #8]	; (80b0f8c <system_mode+0xc>)
 80b0f84:	681b      	ldr	r3, [r3, #0]
 80b0f86:	681b      	ldr	r3, [r3, #0]
 80b0f88:	9301      	str	r3, [sp, #4]
 80b0f8a:	bd08      	pop	{r3, pc}
 80b0f8c:	080601a4 	.word	0x080601a4

080b0f90 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80b0f90:	b508      	push	{r3, lr}
 80b0f92:	4b02      	ldr	r3, [pc, #8]	; (80b0f9c <set_system_mode+0xc>)
 80b0f94:	681b      	ldr	r3, [r3, #0]
 80b0f96:	685b      	ldr	r3, [r3, #4]
 80b0f98:	9301      	str	r3, [sp, #4]
 80b0f9a:	bd08      	pop	{r3, pc}
 80b0f9c:	080601a4 	.word	0x080601a4

080b0fa0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80b0fa0:	b508      	push	{r3, lr}
 80b0fa2:	4b02      	ldr	r3, [pc, #8]	; (80b0fac <system_delay_ms+0xc>)
 80b0fa4:	681b      	ldr	r3, [r3, #0]
 80b0fa6:	695b      	ldr	r3, [r3, #20]
 80b0fa8:	9301      	str	r3, [sp, #4]
 80b0faa:	bd08      	pop	{r3, pc}
 80b0fac:	080601a4 	.word	0x080601a4

080b0fb0 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80b0fb0:	b508      	push	{r3, lr}
 80b0fb2:	4b02      	ldr	r3, [pc, #8]	; (80b0fbc <system_thread_get_state+0xc>)
 80b0fb4:	681b      	ldr	r3, [r3, #0]
 80b0fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80b0fb8:	9301      	str	r3, [sp, #4]
 80b0fba:	bd08      	pop	{r3, pc}
 80b0fbc:	080601a4 	.word	0x080601a4

080b0fc0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80b0fc0:	b508      	push	{r3, lr}
 80b0fc2:	4b03      	ldr	r3, [pc, #12]	; (80b0fd0 <system_ctrl_set_app_request_handler+0x10>)
 80b0fc4:	681b      	ldr	r3, [r3, #0]
 80b0fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80b0fca:	9301      	str	r3, [sp, #4]
 80b0fcc:	bd08      	pop	{r3, pc}
 80b0fce:	0000      	.short	0x0000
 80b0fd0:	080601a4 	.word	0x080601a4

080b0fd4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80b0fd4:	b508      	push	{r3, lr}
 80b0fd6:	4b03      	ldr	r3, [pc, #12]	; (80b0fe4 <system_ctrl_set_result+0x10>)
 80b0fd8:	681b      	ldr	r3, [r3, #0]
 80b0fda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80b0fde:	9301      	str	r3, [sp, #4]
 80b0fe0:	bd08      	pop	{r3, pc}
 80b0fe2:	0000      	.short	0x0000
 80b0fe4:	080601a4 	.word	0x080601a4

080b0fe8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80b0fe8:	b508      	push	{r3, lr}
 80b0fea:	4b02      	ldr	r3, [pc, #8]	; (80b0ff4 <network_connect+0xc>)
 80b0fec:	681b      	ldr	r3, [r3, #0]
 80b0fee:	685b      	ldr	r3, [r3, #4]
 80b0ff0:	9301      	str	r3, [sp, #4]
 80b0ff2:	bd08      	pop	{r3, pc}
 80b0ff4:	080601c8 	.word	0x080601c8

080b0ff8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80b0ff8:	b508      	push	{r3, lr}
 80b0ffa:	4b02      	ldr	r3, [pc, #8]	; (80b1004 <network_connecting+0xc>)
 80b0ffc:	681b      	ldr	r3, [r3, #0]
 80b0ffe:	689b      	ldr	r3, [r3, #8]
 80b1000:	9301      	str	r3, [sp, #4]
 80b1002:	bd08      	pop	{r3, pc}
 80b1004:	080601c8 	.word	0x080601c8

080b1008 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80b1008:	b508      	push	{r3, lr}
 80b100a:	4b02      	ldr	r3, [pc, #8]	; (80b1014 <network_disconnect+0xc>)
 80b100c:	681b      	ldr	r3, [r3, #0]
 80b100e:	68db      	ldr	r3, [r3, #12]
 80b1010:	9301      	str	r3, [sp, #4]
 80b1012:	bd08      	pop	{r3, pc}
 80b1014:	080601c8 	.word	0x080601c8

080b1018 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80b1018:	b508      	push	{r3, lr}
 80b101a:	4b02      	ldr	r3, [pc, #8]	; (80b1024 <network_ready+0xc>)
 80b101c:	681b      	ldr	r3, [r3, #0]
 80b101e:	691b      	ldr	r3, [r3, #16]
 80b1020:	9301      	str	r3, [sp, #4]
 80b1022:	bd08      	pop	{r3, pc}
 80b1024:	080601c8 	.word	0x080601c8

080b1028 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80b1028:	b508      	push	{r3, lr}
 80b102a:	4b02      	ldr	r3, [pc, #8]	; (80b1034 <network_on+0xc>)
 80b102c:	681b      	ldr	r3, [r3, #0]
 80b102e:	695b      	ldr	r3, [r3, #20]
 80b1030:	9301      	str	r3, [sp, #4]
 80b1032:	bd08      	pop	{r3, pc}
 80b1034:	080601c8 	.word	0x080601c8

080b1038 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80b1038:	b508      	push	{r3, lr}
 80b103a:	4b02      	ldr	r3, [pc, #8]	; (80b1044 <network_off+0xc>)
 80b103c:	681b      	ldr	r3, [r3, #0]
 80b103e:	699b      	ldr	r3, [r3, #24]
 80b1040:	9301      	str	r3, [sp, #4]
 80b1042:	bd08      	pop	{r3, pc}
 80b1044:	080601c8 	.word	0x080601c8

080b1048 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80b1048:	b508      	push	{r3, lr}
 80b104a:	4b02      	ldr	r3, [pc, #8]	; (80b1054 <network_listen+0xc>)
 80b104c:	681b      	ldr	r3, [r3, #0]
 80b104e:	69db      	ldr	r3, [r3, #28]
 80b1050:	9301      	str	r3, [sp, #4]
 80b1052:	bd08      	pop	{r3, pc}
 80b1054:	080601c8 	.word	0x080601c8

080b1058 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80b1058:	b508      	push	{r3, lr}
 80b105a:	4b02      	ldr	r3, [pc, #8]	; (80b1064 <network_listening+0xc>)
 80b105c:	681b      	ldr	r3, [r3, #0]
 80b105e:	6a1b      	ldr	r3, [r3, #32]
 80b1060:	9301      	str	r3, [sp, #4]
 80b1062:	bd08      	pop	{r3, pc}
 80b1064:	080601c8 	.word	0x080601c8

080b1068 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80b1068:	b508      	push	{r3, lr}
 80b106a:	4b02      	ldr	r3, [pc, #8]	; (80b1074 <network_set_listen_timeout+0xc>)
 80b106c:	681b      	ldr	r3, [r3, #0]
 80b106e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80b1070:	9301      	str	r3, [sp, #4]
 80b1072:	bd08      	pop	{r3, pc}
 80b1074:	080601c8 	.word	0x080601c8

080b1078 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80b1078:	b508      	push	{r3, lr}
 80b107a:	4b02      	ldr	r3, [pc, #8]	; (80b1084 <network_get_listen_timeout+0xc>)
 80b107c:	681b      	ldr	r3, [r3, #0]
 80b107e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80b1080:	9301      	str	r3, [sp, #4]
 80b1082:	bd08      	pop	{r3, pc}
 80b1084:	080601c8 	.word	0x080601c8

080b1088 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80b1088:	b508      	push	{r3, lr}
 80b108a:	4b02      	ldr	r3, [pc, #8]	; (80b1094 <spark_process+0xc>)
 80b108c:	681b      	ldr	r3, [r3, #0]
 80b108e:	689b      	ldr	r3, [r3, #8]
 80b1090:	9301      	str	r3, [sp, #4]
 80b1092:	bd08      	pop	{r3, pc}
 80b1094:	080601cc 	.word	0x080601cc

080b1098 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80b1098:	b508      	push	{r3, lr}
 80b109a:	4b02      	ldr	r3, [pc, #8]	; (80b10a4 <spark_cloud_flag_connected+0xc>)
 80b109c:	681b      	ldr	r3, [r3, #0]
 80b109e:	695b      	ldr	r3, [r3, #20]
 80b10a0:	9301      	str	r3, [sp, #4]
 80b10a2:	bd08      	pop	{r3, pc}
 80b10a4:	080601cc 	.word	0x080601cc

080b10a8 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 80b10a8:	b508      	push	{r3, lr}
 80b10aa:	4b02      	ldr	r3, [pc, #8]	; (80b10b4 <spark_sync_time+0xc>)
 80b10ac:	681b      	ldr	r3, [r3, #0]
 80b10ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80b10b0:	9301      	str	r3, [sp, #4]
 80b10b2:	bd08      	pop	{r3, pc}
 80b10b4:	080601cc 	.word	0x080601cc

080b10b8 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80b10b8:	b508      	push	{r3, lr}
 80b10ba:	4b02      	ldr	r3, [pc, #8]	; (80b10c4 <spark_sync_time_pending+0xc>)
 80b10bc:	681b      	ldr	r3, [r3, #0]
 80b10be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80b10c0:	9301      	str	r3, [sp, #4]
 80b10c2:	bd08      	pop	{r3, pc}
 80b10c4:	080601cc 	.word	0x080601cc

080b10c8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80b10c8:	b508      	push	{r3, lr}
 80b10ca:	4b02      	ldr	r3, [pc, #8]	; (80b10d4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80b10cc:	681b      	ldr	r3, [r3, #0]
 80b10ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80b10d0:	9301      	str	r3, [sp, #4]
 80b10d2:	bd08      	pop	{r3, pc}
 80b10d4:	080601cc 	.word	0x080601cc

080b10d8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80b10d8:	b508      	push	{r3, lr}
 80b10da:	4b02      	ldr	r3, [pc, #8]	; (80b10e4 <malloc+0xc>)
 80b10dc:	681b      	ldr	r3, [r3, #0]
 80b10de:	681b      	ldr	r3, [r3, #0]
 80b10e0:	9301      	str	r3, [sp, #4]
 80b10e2:	bd08      	pop	{r3, pc}
 80b10e4:	080601a0 	.word	0x080601a0

080b10e8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80b10e8:	b508      	push	{r3, lr}
 80b10ea:	4b02      	ldr	r3, [pc, #8]	; (80b10f4 <free+0xc>)
 80b10ec:	681b      	ldr	r3, [r3, #0]
 80b10ee:	685b      	ldr	r3, [r3, #4]
 80b10f0:	9301      	str	r3, [sp, #4]
 80b10f2:	bd08      	pop	{r3, pc}
 80b10f4:	080601a0 	.word	0x080601a0

080b10f8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80b10f8:	b508      	push	{r3, lr}
 80b10fa:	4b02      	ldr	r3, [pc, #8]	; (80b1104 <realloc+0xc>)
 80b10fc:	681b      	ldr	r3, [r3, #0]
 80b10fe:	689b      	ldr	r3, [r3, #8]
 80b1100:	9301      	str	r3, [sp, #4]
 80b1102:	bd08      	pop	{r3, pc}
 80b1104:	080601a0 	.word	0x080601a0

080b1108 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80b1108:	b508      	push	{r3, lr}
 80b110a:	4b02      	ldr	r3, [pc, #8]	; (80b1114 <siprintf+0xc>)
 80b110c:	681b      	ldr	r3, [r3, #0]
 80b110e:	691b      	ldr	r3, [r3, #16]
 80b1110:	9301      	str	r3, [sp, #4]
 80b1112:	bd08      	pop	{r3, pc}
 80b1114:	080601a0 	.word	0x080601a0

080b1118 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80b1118:	b508      	push	{r3, lr}
 80b111a:	4b02      	ldr	r3, [pc, #8]	; (80b1124 <siscanf+0xc>)
 80b111c:	681b      	ldr	r3, [r3, #0]
 80b111e:	699b      	ldr	r3, [r3, #24]
 80b1120:	9301      	str	r3, [sp, #4]
 80b1122:	bd08      	pop	{r3, pc}
 80b1124:	080601a0 	.word	0x080601a0

080b1128 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80b1128:	b508      	push	{r3, lr}
 80b112a:	4b02      	ldr	r3, [pc, #8]	; (80b1134 <snprintf+0xc>)
 80b112c:	681b      	ldr	r3, [r3, #0]
 80b112e:	69db      	ldr	r3, [r3, #28]
 80b1130:	9301      	str	r3, [sp, #4]
 80b1132:	bd08      	pop	{r3, pc}
 80b1134:	080601a0 	.word	0x080601a0

080b1138 <_malloc_r>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80b1138:	b508      	push	{r3, lr}
 80b113a:	4b02      	ldr	r3, [pc, #8]	; (80b1144 <_malloc_r+0xc>)
 80b113c:	681b      	ldr	r3, [r3, #0]
 80b113e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80b1140:	9301      	str	r3, [sp, #4]
 80b1142:	bd08      	pop	{r3, pc}
 80b1144:	080601a0 	.word	0x080601a0

080b1148 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80b1148:	b510      	push	{r4, lr}
 80b114a:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80b114c:	6800      	ldr	r0, [r0, #0]
 80b114e:	b118      	cbz	r0, 80b1158 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80b1150:	f7ff ffca 	bl	80b10e8 <free>
            wakeupSource_ = nullptr;
 80b1154:	2300      	movs	r3, #0
 80b1156:	6023      	str	r3, [r4, #0]
 80b1158:	bd10      	pop	{r4, pc}

080b115a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80b115a:	b510      	push	{r4, lr}
 80b115c:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80b115e:	f7ff fff3 	bl	80b1148 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80b1162:	4620      	mov	r0, r4
 80b1164:	bd10      	pop	{r4, pc}
	...

080b1168 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80b1168:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80b116c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80b116e:	4c08      	ldr	r4, [pc, #32]	; (80b1190 <_GLOBAL__sub_I_System+0x28>)
 80b1170:	2000      	movs	r0, #0
 80b1172:	6020      	str	r0, [r4, #0]
 80b1174:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80b1176:	71a0      	strb	r0, [r4, #6]
 80b1178:	8120      	strh	r0, [r4, #8]
 80b117a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80b117c:	f7ff ff08 	bl	80b0f90 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80b1180:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80b1182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80b1186:	4a03      	ldr	r2, [pc, #12]	; (80b1194 <_GLOBAL__sub_I_System+0x2c>)
 80b1188:	4903      	ldr	r1, [pc, #12]	; (80b1198 <_GLOBAL__sub_I_System+0x30>)
 80b118a:	f000 befb 	b.w	80b1f84 <__aeabi_atexit>
 80b118e:	bf00      	nop
 80b1190:	200033f4 	.word	0x200033f4
 80b1194:	200000f8 	.word	0x200000f8
 80b1198:	080b115b 	.word	0x080b115b

080b119c <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80b119c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80b119e:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80b11a0:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80b11a2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80b11a6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80b11a8:	2201      	movs	r2, #1
 80b11aa:	f247 5330 	movw	r3, #30000	; 0x7530
 80b11ae:	4621      	mov	r1, r4
 80b11b0:	47a8      	blx	r5
}
 80b11b2:	b003      	add	sp, #12
 80b11b4:	bd30      	pop	{r4, r5, pc}

080b11b6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80b11b6:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80b11b8:	6803      	ldr	r3, [r0, #0]
 80b11ba:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80b11bc:	f247 5330 	movw	r3, #30000	; 0x7530
 80b11c0:	46a4      	mov	ip, r4
}
 80b11c2:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80b11c4:	4760      	bx	ip

080b11c6 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80b11c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80b11c8:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80b11ca:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80b11cc:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80b11d0:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80b11d2:	4621      	mov	r1, r4
 80b11d4:	4613      	mov	r3, r2
 80b11d6:	2201      	movs	r2, #1
 80b11d8:	47a8      	blx	r5
}
 80b11da:	b003      	add	sp, #12
 80b11dc:	bd30      	pop	{r4, r5, pc}

080b11de <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80b11de:	4770      	bx	lr

080b11e0 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80b11e0:	4770      	bx	lr

080b11e2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80b11e2:	2000      	movs	r0, #0
 80b11e4:	4770      	bx	lr

080b11e6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80b11e6:	b510      	push	{r4, lr}
 80b11e8:	4604      	mov	r4, r0
 80b11ea:	2114      	movs	r1, #20
 80b11ec:	f000 fecf 	bl	80b1f8e <_ZdlPvj>
 80b11f0:	4620      	mov	r0, r4
 80b11f2:	bd10      	pop	{r4, pc}

080b11f4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80b11f4:	f7ee bf55 	b.w	80a00a2 <_ZdlPv>

080b11f8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80b11f8:	b510      	push	{r4, lr}
 80b11fa:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80b11fc:	6803      	ldr	r3, [r0, #0]
 80b11fe:	689b      	ldr	r3, [r3, #8]
 80b1200:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80b1202:	68a3      	ldr	r3, [r4, #8]
 80b1204:	3b01      	subs	r3, #1
 80b1206:	60a3      	str	r3, [r4, #8]
 80b1208:	b92b      	cbnz	r3, 80b1216 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28+0x1e>
            _M_destroy();
 80b120a:	6823      	ldr	r3, [r4, #0]
 80b120c:	4620      	mov	r0, r4
        }
    }
 80b120e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80b1212:	68db      	ldr	r3, [r3, #12]
 80b1214:	4718      	bx	r3
 80b1216:	bd10      	pop	{r4, pc}

080b1218 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80b1218:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80b121a:	4604      	mov	r4, r0
 80b121c:	4606      	mov	r6, r0
 80b121e:	694d      	ldr	r5, [r1, #20]
 80b1220:	4b04      	ldr	r3, [pc, #16]	; (80b1234 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80b1222:	358c      	adds	r5, #140	; 0x8c
 80b1224:	f844 3b04 	str.w	r3, [r4], #4
 80b1228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80b122a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80b122c:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80b122e:	4630      	mov	r0, r6
 80b1230:	7023      	strb	r3, [r4, #0]
 80b1232:	bd70      	pop	{r4, r5, r6, pc}
 80b1234:	080b61ec 	.word	0x080b61ec

080b1238 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80b1238:	b510      	push	{r4, lr}
 80b123a:	6943      	ldr	r3, [r0, #20]
 80b123c:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80b123e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80b1242:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80b1246:	429a      	cmp	r2, r3
 80b1248:	d005      	beq.n	80b1256 <_ZN9TCPClient4peekEv+0x1e>
 80b124a:	6962      	ldr	r2, [r4, #20]
 80b124c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80b1250:	4413      	add	r3, r2
 80b1252:	7918      	ldrb	r0, [r3, #4]
 80b1254:	bd10      	pop	{r4, pc}
 80b1256:	6803      	ldr	r3, [r0, #0]
 80b1258:	691b      	ldr	r3, [r3, #16]
 80b125a:	4798      	blx	r3
 80b125c:	2800      	cmp	r0, #0
 80b125e:	d1f4      	bne.n	80b124a <_ZN9TCPClient4peekEv+0x12>
 80b1260:	f04f 30ff 	mov.w	r0, #4294967295
}
 80b1264:	bd10      	pop	{r4, pc}

080b1266 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80b1266:	b510      	push	{r4, lr}
 80b1268:	6943      	ldr	r3, [r0, #20]
 80b126a:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80b126c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80b1270:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80b1274:	429a      	cmp	r2, r3
 80b1276:	d008      	beq.n	80b128a <_ZN9TCPClient4readEv+0x24>
 80b1278:	6962      	ldr	r2, [r4, #20]
 80b127a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80b127e:	1c59      	adds	r1, r3, #1
 80b1280:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80b1284:	4413      	add	r3, r2
 80b1286:	7918      	ldrb	r0, [r3, #4]
 80b1288:	bd10      	pop	{r4, pc}
 80b128a:	6803      	ldr	r3, [r0, #0]
 80b128c:	691b      	ldr	r3, [r3, #16]
 80b128e:	4798      	blx	r3
 80b1290:	2800      	cmp	r0, #0
 80b1292:	d1f1      	bne.n	80b1278 <_ZN9TCPClient4readEv+0x12>
 80b1294:	f04f 30ff 	mov.w	r0, #4294967295
}
 80b1298:	bd10      	pop	{r4, pc}

080b129a <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80b129a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80b129c:	6943      	ldr	r3, [r0, #20]
 80b129e:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80b12a0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80b12a4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80b12a8:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80b12aa:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80b12ac:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80b12ae:	d106      	bne.n	80b12be <_ZN9TCPClient4readEPhj+0x24>
 80b12b0:	6803      	ldr	r3, [r0, #0]
 80b12b2:	691b      	ldr	r3, [r3, #16]
 80b12b4:	4798      	blx	r3
 80b12b6:	b910      	cbnz	r0, 80b12be <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80b12b8:	f04f 34ff 	mov.w	r4, #4294967295
 80b12bc:	e014      	b.n	80b12e8 <_ZN9TCPClient4readEPhj+0x4e>
 80b12be:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80b12c0:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80b12c2:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80b12c6:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80b12ca:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80b12cc:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80b12ce:	42bc      	cmp	r4, r7
 80b12d0:	bf28      	it	cs
 80b12d2:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80b12d4:	3104      	adds	r1, #4
 80b12d6:	4622      	mov	r2, r4
 80b12d8:	f001 fa8d 	bl	80b27f6 <memcpy>
 80b12dc:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80b12de:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80b12e2:	4423      	add	r3, r4
 80b12e4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80b12e8:	4620      	mov	r0, r4
 80b12ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080b12ec <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80b12ec:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80b12ee:	2300      	movs	r3, #0
 80b12f0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80b12f4:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80b12f6:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80b12fa:	4770      	bx	lr

080b12fc <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80b12fc:	b538      	push	{r3, r4, r5, lr}
 80b12fe:	6942      	ldr	r2, [r0, #20]
 80b1300:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80b1302:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80b1306:	b11b      	cbz	r3, 80b1310 <_ZN9TCPClient9availableEv+0x14>
 80b1308:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80b130c:	429a      	cmp	r2, r3
 80b130e:	d00c      	beq.n	80b132a <_ZN9TCPClient9availableEv+0x2e>
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80b1310:	6920      	ldr	r0, [r4, #16]
 80b1312:	f000 fe09 	bl	80b1f28 <_ZN5spark12NetworkClass4fromEm>
 80b1316:	6803      	ldr	r3, [r0, #0]
 80b1318:	68db      	ldr	r3, [r3, #12]
 80b131a:	4798      	blx	r3
 80b131c:	b318      	cbz	r0, 80b1366 <_ZN9TCPClient9availableEv+0x6a>
 80b131e:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80b1320:	6818      	ldr	r0, [r3, #0]
 80b1322:	f7ff fda5 	bl	80b0e70 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80b1326:	b918      	cbnz	r0, 80b1330 <_ZN9TCPClient9availableEv+0x34>
 80b1328:	e01d      	b.n	80b1366 <_ZN9TCPClient9availableEv+0x6a>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80b132a:	f7ff ffdf 	bl	80b12ec <_ZN9TCPClient12flush_bufferEv>
 80b132e:	e7ef      	b.n	80b1310 <_ZN9TCPClient9availableEv+0x14>
 80b1330:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80b1332:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80b1336:	297f      	cmp	r1, #127	; 0x7f
 80b1338:	d815      	bhi.n	80b1366 <_ZN9TCPClient9availableEv+0x6a>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80b133a:	1d05      	adds	r5, r0, #4
 80b133c:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80b1340:	2300      	movs	r3, #0
 80b1342:	4429      	add	r1, r5
 80b1344:	6800      	ldr	r0, [r0, #0]
 80b1346:	f7ff fdab 	bl	80b0ea0 <socket_receive>
            if (ret > 0)
 80b134a:	2800      	cmp	r0, #0
 80b134c:	dd0b      	ble.n	80b1366 <_ZN9TCPClient9availableEv+0x6a>
 80b134e:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80b1350:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80b1354:	b90a      	cbnz	r2, 80b135a <_ZN9TCPClient9availableEv+0x5e>
 80b1356:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80b135a:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80b135c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80b1360:	4418      	add	r0, r3
 80b1362:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80b1366:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80b1368:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80b136c:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80b1370:	1a18      	subs	r0, r3, r0
}
 80b1372:	bd38      	pop	{r3, r4, r5, pc}

080b1374 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80b1374:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80b1376:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80b1378:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80b137a:	6818      	ldr	r0, [r3, #0]
 80b137c:	f7ff fd78 	bl	80b0e70 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80b1380:	b118      	cbz	r0, 80b138a <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80b1382:	6963      	ldr	r3, [r4, #20]
 80b1384:	6818      	ldr	r0, [r3, #0]
 80b1386:	f7ff fd93 	bl	80b0eb0 <socket_close>
 80b138a:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80b138c:	f7ff fd98 	bl	80b0ec0 <socket_handle_invalid>
 80b1390:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80b1392:	6960      	ldr	r0, [r4, #20]
 80b1394:	2211      	movs	r2, #17
 80b1396:	2100      	movs	r1, #0
 80b1398:	308c      	adds	r0, #140	; 0x8c
 80b139a:	f001 fa52 	bl	80b2842 <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80b139e:	4620      	mov	r0, r4
}
 80b13a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80b13a4:	f7ff bfa2 	b.w	80b12ec <_ZN9TCPClient12flush_bufferEv>

080b13a8 <_ZN9TCPClient7connectE9IPAddresstm>:
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80b13a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80b13ac:	461f      	mov	r7, r3
    stop();
 80b13ae:	6803      	ldr	r3, [r0, #0]
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80b13b0:	b08a      	sub	sp, #40	; 0x28
    stop();
 80b13b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80b13b4:	4606      	mov	r6, r0
 80b13b6:	460c      	mov	r4, r1
 80b13b8:	4615      	mov	r5, r2
    stop();
 80b13ba:	4798      	blx	r3
        int connected = 0;
        if(Network.from(nif).ready())
 80b13bc:	4638      	mov	r0, r7
 80b13be:	f000 fdb3 	bl	80b1f28 <_ZN5spark12NetworkClass4fromEm>
 80b13c2:	6803      	ldr	r3, [r0, #0]
 80b13c4:	68db      	ldr	r3, [r3, #12]
 80b13c6:	4798      	blx	r3
 80b13c8:	2800      	cmp	r0, #0
 80b13ca:	d056      	beq.n	80b147a <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80b13cc:	9700      	str	r7, [sp, #0]
 80b13ce:	462b      	mov	r3, r5
 80b13d0:	2206      	movs	r2, #6
 80b13d2:	2101      	movs	r1, #1
 80b13d4:	2002      	movs	r0, #2
 80b13d6:	f8d6 8014 	ldr.w	r8, [r6, #20]
 80b13da:	f7ff fd51 	bl	80b0e80 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80b13de:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80b13e0:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80b13e4:	2700      	movs	r7, #0
 80b13e6:	9302      	str	r3, [sp, #8]
 80b13e8:	6973      	ldr	r3, [r6, #20]
 80b13ea:	9703      	str	r7, [sp, #12]
 80b13ec:	681b      	ldr	r3, [r3, #0]
 80b13ee:	2001      	movs	r0, #1
 80b13f0:	9301      	str	r3, [sp, #4]
 80b13f2:	4b23      	ldr	r3, [pc, #140]	; (80b1480 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80b13f4:	aa02      	add	r2, sp, #8
 80b13f6:	9300      	str	r3, [sp, #0]
 80b13f8:	4922      	ldr	r1, [pc, #136]	; (80b1484 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80b13fa:	463b      	mov	r3, r7
 80b13fc:	f7ff fdb8 	bl	80b0f70 <log_message>

          if (socket_handle_valid(d_->sock))
 80b1400:	6973      	ldr	r3, [r6, #20]
 80b1402:	6818      	ldr	r0, [r3, #0]
 80b1404:	f7ff fd34 	bl	80b0e70 <socket_handle_valid>
 80b1408:	2800      	cmp	r0, #0
 80b140a:	d036      	beq.n	80b147a <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
          {
            flush_buffer();
 80b140c:	4630      	mov	r0, r6
 80b140e:	f7ff ff6d 	bl	80b12ec <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80b1412:	2302      	movs	r3, #2
 80b1414:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80b1418:	0a2b      	lsrs	r3, r5, #8
 80b141a:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80b141e:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80b1420:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80b1424:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80b1428:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80b142a:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80b142e:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80b1432:	7963      	ldrb	r3, [r4, #5]
 80b1434:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80b1438:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80b143c:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80b1440:	f7ff fd86 	bl	80b0f50 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80b1444:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80b1446:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80b1448:	2210      	movs	r2, #16
 80b144a:	a902      	add	r1, sp, #8
 80b144c:	6818      	ldr	r0, [r3, #0]
 80b144e:	f7ff fd1f 	bl	80b0e90 <socket_connect>
 80b1452:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80b1454:	4628      	mov	r0, r5
 80b1456:	f7ff fd7b 	bl	80b0f50 <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80b145a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80b145c:	6975      	ldr	r5, [r6, #20]
 80b145e:	358c      	adds	r5, #140	; 0x8c
 80b1460:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80b1462:	6823      	ldr	r3, [r4, #0]
 80b1464:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80b1466:	f1b8 0f00 	cmp.w	r8, #0
 80b146a:	d005      	beq.n	80b1478 <_ZN9TCPClient7connectE9IPAddresstm+0xd0>
            {
                stop();
 80b146c:	6833      	ldr	r3, [r6, #0]
 80b146e:	4630      	mov	r0, r6
 80b1470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80b1472:	4798      	blx	r3
 80b1474:	4638      	mov	r0, r7
 80b1476:	e000      	b.n	80b147a <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80b1478:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80b147a:	b00a      	add	sp, #40	; 0x28
 80b147c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80b1480:	080b60d7 	.word	0x080b60d7
 80b1484:	080b60d0 	.word	0x080b60d0

080b1488 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80b1488:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80b148a:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80b148c:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80b148e:	6818      	ldr	r0, [r3, #0]
 80b1490:	f7ff fcee 	bl	80b0e70 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80b1494:	b908      	cbnz	r0, 80b149a <_ZN9TCPClient6statusEv+0x12>
 80b1496:	2000      	movs	r0, #0
 80b1498:	bd10      	pop	{r4, pc}
 80b149a:	6920      	ldr	r0, [r4, #16]
 80b149c:	f000 fd44 	bl	80b1f28 <_ZN5spark12NetworkClass4fromEm>
 80b14a0:	6803      	ldr	r3, [r0, #0]
 80b14a2:	68db      	ldr	r3, [r3, #12]
 80b14a4:	4798      	blx	r3
 80b14a6:	2800      	cmp	r0, #0
 80b14a8:	d0f5      	beq.n	80b1496 <_ZN9TCPClient6statusEv+0xe>
 80b14aa:	6963      	ldr	r3, [r4, #20]
 80b14ac:	6818      	ldr	r0, [r3, #0]
 80b14ae:	f7ff fcd7 	bl	80b0e60 <socket_active_status>
 80b14b2:	fab0 f080 	clz	r0, r0
 80b14b6:	0940      	lsrs	r0, r0, #5
}
 80b14b8:	bd10      	pop	{r4, pc}

080b14ba <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80b14ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80b14be:	2500      	movs	r5, #0
 80b14c0:	6045      	str	r5, [r0, #4]
 80b14c2:	4604      	mov	r4, r0
 80b14c4:	460e      	mov	r6, r1
 80b14c6:	4617      	mov	r7, r2
 80b14c8:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80b14ca:	f7ff ffdd 	bl	80b1488 <_ZN9TCPClient6statusEv>
 80b14ce:	b160      	cbz	r0, 80b14ea <_ZN9TCPClient5writeEPKhjm+0x30>
 80b14d0:	6960      	ldr	r0, [r4, #20]
 80b14d2:	9501      	str	r5, [sp, #4]
 80b14d4:	f8cd 8000 	str.w	r8, [sp]
 80b14d8:	462b      	mov	r3, r5
 80b14da:	463a      	mov	r2, r7
 80b14dc:	4631      	mov	r1, r6
 80b14de:	6800      	ldr	r0, [r0, #0]
 80b14e0:	f7ff fcf6 	bl	80b0ed0 <socket_send_ex>
    if (ret < 0) {
 80b14e4:	2800      	cmp	r0, #0
 80b14e6:	da03      	bge.n	80b14f0 <_ZN9TCPClient5writeEPKhjm+0x36>
 80b14e8:	e001      	b.n	80b14ee <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80b14ea:	f04f 30ff 	mov.w	r0, #4294967295
 80b14ee:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80b14f0:	b002      	add	sp, #8
 80b14f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080b14f6 <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80b14f6:	b538      	push	{r3, r4, r5, lr}
 80b14f8:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80b14fa:	f7ff ffc5 	bl	80b1488 <_ZN9TCPClient6statusEv>
 80b14fe:	bb00      	cbnz	r0, 80b1542 <_ZN9TCPClient9connectedEv+0x4c>
 80b1500:	6963      	ldr	r3, [r4, #20]
 80b1502:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80b1506:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80b150a:	4291      	cmp	r1, r2
 80b150c:	d119      	bne.n	80b1542 <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80b150e:	6818      	ldr	r0, [r3, #0]
 80b1510:	f7ff fcae 	bl	80b0e70 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80b1514:	b128      	cbz	r0, 80b1522 <_ZN9TCPClient9connectedEv+0x2c>
 80b1516:	6963      	ldr	r3, [r4, #20]
 80b1518:	6818      	ldr	r0, [r3, #0]
 80b151a:	f7ff fca1 	bl	80b0e60 <socket_active_status>
 80b151e:	2801      	cmp	r0, #1
 80b1520:	d001      	beq.n	80b1526 <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80b1522:	2500      	movs	r5, #0
 80b1524:	e00e      	b.n	80b1544 <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80b1526:	6823      	ldr	r3, [r4, #0]
 80b1528:	4620      	mov	r0, r4
 80b152a:	691b      	ldr	r3, [r3, #16]
 80b152c:	4798      	blx	r3
 80b152e:	2800      	cmp	r0, #0
 80b1530:	bf14      	ite	ne
 80b1532:	2501      	movne	r5, #1
 80b1534:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80b1536:	d105      	bne.n	80b1544 <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("calling .stop(), no more data, in CLOSE_WAIT");
          stop();       // Close our side
 80b1538:	6823      	ldr	r3, [r4, #0]
 80b153a:	4620      	mov	r0, r4
 80b153c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80b153e:	4798      	blx	r3
 80b1540:	e000      	b.n	80b1544 <_ZN9TCPClient9connectedEv+0x4e>
 80b1542:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80b1544:	4628      	mov	r0, r5
 80b1546:	bd38      	pop	{r3, r4, r5, pc}

080b1548 <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80b1548:	b508      	push	{r3, lr}
   return (status()!=0);
 80b154a:	f7ff ff9d 	bl	80b1488 <_ZN9TCPClient6statusEv>
}
 80b154e:	3000      	adds	r0, #0
 80b1550:	bf18      	it	ne
 80b1552:	2001      	movne	r0, #1
 80b1554:	bd08      	pop	{r3, pc}

080b1556 <_ZN9TCPClient4DataC1Em>:
IPAddress TCPClient::remoteIP()
{
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
 80b1556:	b510      	push	{r4, lr}
 80b1558:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
 80b155a:	2300      	movs	r3, #0
 80b155c:	6001      	str	r1, [r0, #0]
 80b155e:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80b1562:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
 80b1566:	3088      	adds	r0, #136	; 0x88
 80b1568:	f000 fa96 	bl	80b1a98 <_ZN9IPAddressC1Ev>
}
 80b156c:	4620      	mov	r0, r4
 80b156e:	bd10      	pop	{r4, pc}

080b1570 <_ZN9TCPClientC1Em>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80b1570:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80b1574:	b570      	push	{r4, r5, r6, lr}
 80b1576:	6082      	str	r2, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80b1578:	4a14      	ldr	r2, [pc, #80]	; (80b15cc <_ZN9TCPClientC1Em+0x5c>)
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80b157a:	2300      	movs	r3, #0
 80b157c:	6043      	str	r3, [r0, #4]
 80b157e:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80b1580:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80b1582:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80b1584:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80b1586:	20a0      	movs	r0, #160	; 0xa0
 80b1588:	460e      	mov	r6, r1
 80b158a:	f7ee fd88 	bl	80a009e <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80b158e:	4605      	mov	r5, r0
 80b1590:	b110      	cbz	r0, 80b1598 <_ZN9TCPClientC1Em+0x28>
 80b1592:	4631      	mov	r1, r6
 80b1594:	f7ff ffdf 	bl	80b1556 <_ZN9TCPClient4DataC1Em>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80b1598:	2014      	movs	r0, #20
 80b159a:	f7ee fd80 	bl	80a009e <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80b159e:	4603      	mov	r3, r0
 80b15a0:	b128      	cbz	r0, 80b15ae <_ZN9TCPClientC1Em+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80b15a2:	2201      	movs	r2, #1
 80b15a4:	6042      	str	r2, [r0, #4]
 80b15a6:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80b15a8:	4a09      	ldr	r2, [pc, #36]	; (80b15d0 <_ZN9TCPClientC1Em+0x60>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80b15aa:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80b15ac:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80b15ae:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80b15b0:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80b15b2:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80b15b4:	b128      	cbz	r0, 80b15c2 <_ZN9TCPClientC1Em+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80b15b6:	6843      	ldr	r3, [r0, #4]
 80b15b8:	3b01      	subs	r3, #1
 80b15ba:	6043      	str	r3, [r0, #4]
 80b15bc:	b90b      	cbnz	r3, 80b15c2 <_ZN9TCPClientC1Em+0x52>
 80b15be:	f7ff fe1b 	bl	80b11f8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80b15c2:	4620      	mov	r0, r4
 80b15c4:	f7ff fe92 	bl	80b12ec <_ZN9TCPClient12flush_bufferEv>
}
 80b15c8:	4620      	mov	r0, r4
 80b15ca:	bd70      	pop	{r4, r5, r6, pc}
 80b15cc:	080b608c 	.word	0x080b608c
 80b15d0:	080b6070 	.word	0x080b6070

080b15d4 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80b15d4:	b510      	push	{r4, lr}
 80b15d6:	4604      	mov	r4, r0
 80b15d8:	f7ff fc72 	bl	80b0ec0 <socket_handle_invalid>
 80b15dc:	4601      	mov	r1, r0
 80b15de:	4620      	mov	r0, r4
 80b15e0:	f7ff ffc6 	bl	80b1570 <_ZN9TCPClientC1Em>
{
}
 80b15e4:	4620      	mov	r0, r4
 80b15e6:	bd10      	pop	{r4, pc}

080b15e8 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
 80b15e8:	b510      	push	{r4, lr}
 80b15ea:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80b15ec:	6800      	ldr	r0, [r0, #0]
 80b15ee:	f7ff fc3f 	bl	80b0e70 <socket_handle_valid>
 80b15f2:	b110      	cbz	r0, 80b15fa <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80b15f4:	6820      	ldr	r0, [r4, #0]
 80b15f6:	f7ff fc5b 	bl	80b0eb0 <socket_close>
    }
}
 80b15fa:	4620      	mov	r0, r4
 80b15fc:	bd10      	pop	{r4, pc}

080b15fe <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80b15fe:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80b1600:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
 80b1602:	4620      	mov	r0, r4
 80b1604:	f7ff fff0 	bl	80b15e8 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
 80b1608:	b124      	cbz	r4, 80b1614 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80b160a:	4620      	mov	r0, r4
 80b160c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80b1610:	f7ee bd47 	b.w	80a00a2 <_ZdlPv>
 80b1614:	bd10      	pop	{r4, pc}
	...

080b1618 <_ZN9TCPClient7connectEPKctm>:
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80b1618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80b161c:	461f      	mov	r7, r3
    stop();
 80b161e:	6803      	ldr	r3, [r0, #0]
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80b1620:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80b1622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80b1624:	4606      	mov	r6, r0
 80b1626:	460d      	mov	r5, r1
 80b1628:	4690      	mov	r8, r2
    stop();
 80b162a:	4798      	blx	r3
    if (Network.ready())
 80b162c:	4813      	ldr	r0, [pc, #76]	; (80b167c <_ZN9TCPClient7connectEPKctm+0x64>)
 80b162e:	f000 fc2e 	bl	80b1e8e <_ZN5spark12NetworkClass5readyEv>
 80b1632:	b300      	cbz	r0, 80b1676 <_ZN9TCPClient7connectEPKctm+0x5e>
    {
        IPAddress ip_addr;
 80b1634:	a802      	add	r0, sp, #8
 80b1636:	f000 fa2f 	bl	80b1a98 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80b163a:	4628      	mov	r0, r5
 80b163c:	f001 f952 	bl	80b28e4 <strlen>
 80b1640:	2400      	movs	r4, #0
 80b1642:	b281      	uxth	r1, r0
 80b1644:	9400      	str	r4, [sp, #0]
 80b1646:	463b      	mov	r3, r7
 80b1648:	aa03      	add	r2, sp, #12
 80b164a:	4628      	mov	r0, r5
 80b164c:	f7ff fc88 	bl	80b0f60 <inet_gethostbyname>
 80b1650:	b980      	cbnz	r0, 80b1674 <_ZN9TCPClient7connectEPKctm+0x5c>
            return connect(ip_addr, port, nif);
 80b1652:	6833      	ldr	r3, [r6, #0]
 80b1654:	ad09      	add	r5, sp, #36	; 0x24
 80b1656:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80b165a:	4b09      	ldr	r3, [pc, #36]	; (80b1680 <_ZN9TCPClient7connectEPKctm+0x68>)
 80b165c:	ac03      	add	r4, sp, #12
 80b165e:	9308      	str	r3, [sp, #32]
 80b1660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80b1662:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80b1664:	6823      	ldr	r3, [r4, #0]
 80b1666:	4642      	mov	r2, r8
 80b1668:	702b      	strb	r3, [r5, #0]
 80b166a:	a908      	add	r1, sp, #32
 80b166c:	463b      	mov	r3, r7
 80b166e:	4630      	mov	r0, r6
 80b1670:	47c8      	blx	r9
 80b1672:	e000      	b.n	80b1676 <_ZN9TCPClient7connectEPKctm+0x5e>
        } else {
            DEBUG("unable to get IP for hostname");
        }
    }

    return 0; // error, could not connect
 80b1674:	4620      	mov	r0, r4
}
 80b1676:	b00f      	add	sp, #60	; 0x3c
 80b1678:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80b167c:	2000388c 	.word	0x2000388c
 80b1680:	080b61ec 	.word	0x080b61ec

080b1684 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80b1684:	b510      	push	{r4, lr}
 80b1686:	4604      	mov	r4, r0
{
	free(buffer);
 80b1688:	6800      	ldr	r0, [r0, #0]
 80b168a:	f7ff fd2d 	bl	80b10e8 <free>
}
 80b168e:	4620      	mov	r0, r4
 80b1690:	bd10      	pop	{r4, pc}

080b1692 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80b1692:	b510      	push	{r4, lr}
 80b1694:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80b1696:	6800      	ldr	r0, [r0, #0]
 80b1698:	b108      	cbz	r0, 80b169e <_ZN6String10invalidateEv+0xc>
 80b169a:	f7ff fd25 	bl	80b10e8 <free>
	buffer = NULL;
 80b169e:	2300      	movs	r3, #0
 80b16a0:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80b16a2:	60a3      	str	r3, [r4, #8]
 80b16a4:	6063      	str	r3, [r4, #4]
 80b16a6:	bd10      	pop	{r4, pc}

080b16a8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80b16a8:	b538      	push	{r3, r4, r5, lr}
 80b16aa:	4604      	mov	r4, r0
 80b16ac:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80b16ae:	6800      	ldr	r0, [r0, #0]
 80b16b0:	3101      	adds	r1, #1
 80b16b2:	f7ff fd21 	bl	80b10f8 <realloc>
	if (newbuffer) {
 80b16b6:	b110      	cbz	r0, 80b16be <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80b16b8:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80b16bc:	2001      	movs	r0, #1
	}
	return 0;
}
 80b16be:	bd38      	pop	{r3, r4, r5, pc}

080b16c0 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80b16c0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80b16c2:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80b16c4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80b16c6:	b113      	cbz	r3, 80b16ce <_ZN6String7reserveEj+0xe>
 80b16c8:	6843      	ldr	r3, [r0, #4]
 80b16ca:	428b      	cmp	r3, r1
 80b16cc:	d207      	bcs.n	80b16de <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80b16ce:	4620      	mov	r0, r4
 80b16d0:	f7ff ffea 	bl	80b16a8 <_ZN6String12changeBufferEj>
 80b16d4:	b120      	cbz	r0, 80b16e0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80b16d6:	68a3      	ldr	r3, [r4, #8]
 80b16d8:	b90b      	cbnz	r3, 80b16de <_ZN6String7reserveEj+0x1e>
 80b16da:	6822      	ldr	r2, [r4, #0]
 80b16dc:	7013      	strb	r3, [r2, #0]
 80b16de:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80b16e0:	bd10      	pop	{r4, pc}

080b16e2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80b16e2:	b570      	push	{r4, r5, r6, lr}
 80b16e4:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80b16e6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80b16e8:	4604      	mov	r4, r0
 80b16ea:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80b16ec:	f7ff ffe8 	bl	80b16c0 <_ZN6String7reserveEj>
 80b16f0:	b918      	cbnz	r0, 80b16fa <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80b16f2:	4620      	mov	r0, r4
 80b16f4:	f7ff ffcd 	bl	80b1692 <_ZN6String10invalidateEv>
		return *this;
 80b16f8:	e009      	b.n	80b170e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80b16fa:	462a      	mov	r2, r5
 80b16fc:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80b16fe:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80b1700:	6820      	ldr	r0, [r4, #0]
 80b1702:	f001 f878 	bl	80b27f6 <memcpy>
	buffer[len] = 0;
 80b1706:	6822      	ldr	r2, [r4, #0]
 80b1708:	68a3      	ldr	r3, [r4, #8]
 80b170a:	2100      	movs	r1, #0
 80b170c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80b170e:	4620      	mov	r0, r4
 80b1710:	bd70      	pop	{r4, r5, r6, pc}

080b1712 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80b1712:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80b1714:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80b1716:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80b1718:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80b171a:	6043      	str	r3, [r0, #4]
	len = 0;
 80b171c:	6083      	str	r3, [r0, #8]
	flags = 0;
 80b171e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80b1720:	460d      	mov	r5, r1
 80b1722:	b139      	cbz	r1, 80b1734 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80b1724:	4608      	mov	r0, r1
 80b1726:	f001 f8dd 	bl	80b28e4 <strlen>
 80b172a:	4629      	mov	r1, r5
 80b172c:	4602      	mov	r2, r0
 80b172e:	4620      	mov	r0, r4
 80b1730:	f7ff ffd7 	bl	80b16e2 <_ZN6String4copyEPKcj>
}
 80b1734:	4620      	mov	r0, r4
 80b1736:	bd38      	pop	{r3, r4, r5, pc}

080b1738 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80b1738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80b173a:	4606      	mov	r6, r0
 80b173c:	460d      	mov	r5, r1
 80b173e:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80b1740:	2400      	movs	r4, #0
  while (size--) {
 80b1742:	42bd      	cmp	r5, r7
 80b1744:	d00c      	beq.n	80b1760 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80b1746:	6833      	ldr	r3, [r6, #0]
 80b1748:	f815 1b01 	ldrb.w	r1, [r5], #1
 80b174c:	689b      	ldr	r3, [r3, #8]
 80b174e:	4630      	mov	r0, r6
 80b1750:	4798      	blx	r3
     if (chunk>=0)
 80b1752:	2800      	cmp	r0, #0
 80b1754:	db01      	blt.n	80b175a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80b1756:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80b1758:	e7f3      	b.n	80b1742 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80b175a:	2c00      	cmp	r4, #0
 80b175c:	bf08      	it	eq
 80b175e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80b1760:	4620      	mov	r0, r4
 80b1762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080b1764 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80b1764:	b570      	push	{r4, r5, r6, lr}
 80b1766:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80b1768:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80b176a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80b176c:	b149      	cbz	r1, 80b1782 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80b176e:	f001 f8b9 	bl	80b28e4 <strlen>
 80b1772:	682b      	ldr	r3, [r5, #0]
 80b1774:	4602      	mov	r2, r0
 80b1776:	4621      	mov	r1, r4
 80b1778:	4628      	mov	r0, r5
    }
 80b177a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80b177e:	68db      	ldr	r3, [r3, #12]
 80b1780:	4718      	bx	r3
    }
 80b1782:	bd70      	pop	{r4, r5, r6, pc}

080b1784 <_ZN5Print5printEPKc>:
 80b1784:	b508      	push	{r3, lr}
 80b1786:	f7ff ffed 	bl	80b1764 <_ZN5Print5writeEPKc>
 80b178a:	bd08      	pop	{r3, pc}

080b178c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80b178c:	6803      	ldr	r3, [r0, #0]
 80b178e:	689b      	ldr	r3, [r3, #8]
 80b1790:	4718      	bx	r3

080b1792 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80b1792:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80b1794:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80b1796:	4605      	mov	r5, r0
  size_t n = print('\r');
 80b1798:	f7ff fff8 	bl	80b178c <_ZN5Print5printEc>
  n += print('\n');
 80b179c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80b179e:	4604      	mov	r4, r0
  n += print('\n');
 80b17a0:	4628      	mov	r0, r5
 80b17a2:	f7ff fff3 	bl	80b178c <_ZN5Print5printEc>
  return n;
}
 80b17a6:	4420      	add	r0, r4
 80b17a8:	bd38      	pop	{r3, r4, r5, pc}

080b17aa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80b17aa:	b538      	push	{r3, r4, r5, lr}
 80b17ac:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80b17ae:	f7ff ffd9 	bl	80b1764 <_ZN5Print5writeEPKc>
 80b17b2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80b17b4:	4628      	mov	r0, r5
 80b17b6:	f7ff ffec 	bl	80b1792 <_ZN5Print7printlnEv>
  return n;
}
 80b17ba:	4420      	add	r0, r4
 80b17bc:	bd38      	pop	{r3, r4, r5, pc}

080b17be <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80b17be:	2a01      	cmp	r2, #1
 80b17c0:	bf98      	it	ls
 80b17c2:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80b17c4:	b530      	push	{r4, r5, lr}
 80b17c6:	460b      	mov	r3, r1
 80b17c8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80b17ca:	2100      	movs	r1, #0
 80b17cc:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80b17d0:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80b17d4:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80b17d8:	fb05 3312 	mls	r3, r5, r2, r3
 80b17dc:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80b17de:	2b09      	cmp	r3, #9
 80b17e0:	bf94      	ite	ls
 80b17e2:	3330      	addls	r3, #48	; 0x30
 80b17e4:	3337      	addhi	r3, #55	; 0x37
 80b17e6:	b2db      	uxtb	r3, r3
 80b17e8:	4621      	mov	r1, r4
 80b17ea:	f804 3901 	strb.w	r3, [r4], #-1
 80b17ee:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80b17f0:	2d00      	cmp	r5, #0
 80b17f2:	d1ef      	bne.n	80b17d4 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80b17f4:	f7ff ffb6 	bl	80b1764 <_ZN5Print5writeEPKc>
}
 80b17f8:	b00b      	add	sp, #44	; 0x2c
 80b17fa:	bd30      	pop	{r4, r5, pc}

080b17fc <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80b17fc:	2300      	movs	r3, #0
 80b17fe:	461a      	mov	r2, r3
 80b1800:	4619      	mov	r1, r3
 80b1802:	6840      	ldr	r0, [r0, #4]
 80b1804:	f7ff bc10 	b.w	80b1028 <network_on>

080b1808 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80b1808:	4a01      	ldr	r2, [pc, #4]	; (80b1810 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80b180a:	4b02      	ldr	r3, [pc, #8]	; (80b1814 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80b180c:	601a      	str	r2, [r3, #0]
 80b180e:	4770      	bx	lr
 80b1810:	080b615c 	.word	0x080b615c
 80b1814:	20003400 	.word	0x20003400

080b1818 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80b1818:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80b181a:	2000      	movs	r0, #0
 80b181c:	f7ff fc4c 	bl	80b10b8 <spark_sync_time_pending>
 80b1820:	b128      	cbz	r0, 80b182e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80b1822:	f7ff fc39 	bl	80b1098 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80b1826:	f080 0001 	eor.w	r0, r0, #1
 80b182a:	b2c0      	uxtb	r0, r0
 80b182c:	bd08      	pop	{r3, pc}
 80b182e:	2001      	movs	r0, #1
    }
 80b1830:	bd08      	pop	{r3, pc}
	...

080b1834 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80b1834:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 80b1836:	4b0e      	ldr	r3, [pc, #56]	; (80b1870 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80b1838:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 80b183a:	681b      	ldr	r3, [r3, #0]
 80b183c:	a802      	add	r0, sp, #8
 80b183e:	4419      	add	r1, r3
 80b1840:	4b0c      	ldr	r3, [pc, #48]	; (80b1874 <_ZN9TimeClass7timeStrEl+0x40>)
 80b1842:	681b      	ldr	r3, [r3, #0]
 80b1844:	4419      	add	r1, r3
 80b1846:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 80b184a:	f000 fecd 	bl	80b25e8 <localtime>
        char* ascstr = asctime(calendar_time);
 80b184e:	f000 fe79 	bl	80b2544 <asctime>
 80b1852:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 80b1854:	f001 f846 	bl	80b28e4 <strlen>
        ascstr[len-1] = 0; // remove final newline
 80b1858:	2300      	movs	r3, #0
 80b185a:	4428      	add	r0, r5
 80b185c:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 80b1860:	4629      	mov	r1, r5
 80b1862:	4620      	mov	r0, r4
 80b1864:	f7ff ff55 	bl	80b1712 <_ZN6StringC1EPK19__FlashStringHelper>
}
 80b1868:	4620      	mov	r0, r4
 80b186a:	b003      	add	sp, #12
 80b186c:	bd30      	pop	{r4, r5, pc}
 80b186e:	bf00      	nop
 80b1870:	2000340c 	.word	0x2000340c
 80b1874:	20003408 	.word	0x20003408

080b1878 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80b1878:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80b187a:	2000      	movs	r0, #0
 80b187c:	f7ff fab0 	bl	80b0de0 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80b1880:	4604      	mov	r4, r0
 80b1882:	b968      	cbnz	r0, 80b18a0 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80b1884:	f7ff fb7c 	bl	80b0f80 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80b1888:	2801      	cmp	r0, #1
 80b188a:	d10b      	bne.n	80b18a4 <_ZN9TimeClass7isValidEv+0x2c>
 80b188c:	4620      	mov	r0, r4
 80b188e:	f7ff fb8f 	bl	80b0fb0 <system_thread_get_state>
 80b1892:	b938      	cbnz	r0, 80b18a4 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80b1894:	f7ff ffc0 	bl	80b1818 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80b1898:	b930      	cbnz	r0, 80b18a8 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80b189a:	f7ff fbf5 	bl	80b1088 <spark_process>
 80b189e:	e7f9      	b.n	80b1894 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80b18a0:	2001      	movs	r0, #1
 80b18a2:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80b18a4:	2000      	movs	r0, #0
 80b18a6:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80b18a8:	f7ff ffb6 	bl	80b1818 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80b18ac:	2000      	movs	r0, #0
 80b18ae:	f7ff fa97 	bl	80b0de0 <HAL_RTC_Time_Is_Valid>
 80b18b2:	3000      	adds	r0, #0
 80b18b4:	bf18      	it	ne
 80b18b6:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80b18b8:	bd10      	pop	{r4, pc}

080b18ba <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80b18ba:	b508      	push	{r3, lr}
    (void)isValid();
 80b18bc:	f7ff ffdc 	bl	80b1878 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80b18c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80b18c4:	f7ff ba84 	b.w	80b0dd0 <HAL_RTC_Get_UnixTime>

080b18c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80b18c8:	4b02      	ldr	r3, [pc, #8]	; (80b18d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80b18ca:	681a      	ldr	r2, [r3, #0]
 80b18cc:	4b02      	ldr	r3, [pc, #8]	; (80b18d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80b18ce:	601a      	str	r2, [r3, #0]
 80b18d0:	4770      	bx	lr
 80b18d2:	bf00      	nop
 80b18d4:	2000003c 	.word	0x2000003c
 80b18d8:	20003404 	.word	0x20003404

080b18dc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80b18dc:	2100      	movs	r1, #0
 80b18de:	f7ff bb5f 	b.w	80b0fa0 <system_delay_ms>

080b18e2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80b18e2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80b18e4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80b18e6:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80b18e8:	b113      	cbz	r3, 80b18f0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80b18ea:	2203      	movs	r2, #3
 80b18ec:	4601      	mov	r1, r0
 80b18ee:	4798      	blx	r3
    }
 80b18f0:	4620      	mov	r0, r4
 80b18f2:	bd10      	pop	{r4, pc}

080b18f4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80b18f4:	b510      	push	{r4, lr}
 80b18f6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80b18f8:	f7ff fff3 	bl	80b18e2 <_ZNSt14_Function_baseD1Ev>
 80b18fc:	4620      	mov	r0, r4
 80b18fe:	bd10      	pop	{r4, pc}

080b1900 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80b1900:	4803      	ldr	r0, [pc, #12]	; (80b1910 <_GLOBAL__sub_I_RGB+0x10>)
 80b1902:	2300      	movs	r3, #0
 80b1904:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80b1906:	4a03      	ldr	r2, [pc, #12]	; (80b1914 <_GLOBAL__sub_I_RGB+0x14>)
 80b1908:	4903      	ldr	r1, [pc, #12]	; (80b1918 <_GLOBAL__sub_I_RGB+0x18>)
 80b190a:	f000 bb3b 	b.w	80b1f84 <__aeabi_atexit>
 80b190e:	bf00      	nop
 80b1910:	20003410 	.word	0x20003410
 80b1914:	200000f8 	.word	0x200000f8
 80b1918:	080b18f5 	.word	0x080b18f5

080b191c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80b191c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80b191e:	4b14      	ldr	r3, [pc, #80]	; (80b1970 <serialEventRun+0x54>)
 80b1920:	b133      	cbz	r3, 80b1930 <serialEventRun+0x14>
 80b1922:	f000 f96b 	bl	80b1bfc <_Z16_fetch_usbserialv>
 80b1926:	6803      	ldr	r3, [r0, #0]
 80b1928:	691b      	ldr	r3, [r3, #16]
 80b192a:	4798      	blx	r3
 80b192c:	2800      	cmp	r0, #0
 80b192e:	dc16      	bgt.n	80b195e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80b1930:	4b10      	ldr	r3, [pc, #64]	; (80b1974 <serialEventRun+0x58>)
 80b1932:	b133      	cbz	r3, 80b1942 <serialEventRun+0x26>
 80b1934:	f000 fa1c 	bl	80b1d70 <_Z22__fetch_global_Serial1v>
 80b1938:	6803      	ldr	r3, [r0, #0]
 80b193a:	691b      	ldr	r3, [r3, #16]
 80b193c:	4798      	blx	r3
 80b193e:	2800      	cmp	r0, #0
 80b1940:	dc10      	bgt.n	80b1964 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80b1942:	4b0d      	ldr	r3, [pc, #52]	; (80b1978 <serialEventRun+0x5c>)
 80b1944:	b10b      	cbz	r3, 80b194a <serialEventRun+0x2e>
 80b1946:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80b194a:	4b0c      	ldr	r3, [pc, #48]	; (80b197c <serialEventRun+0x60>)
 80b194c:	b17b      	cbz	r3, 80b196e <serialEventRun+0x52>
 80b194e:	f000 f991 	bl	80b1c74 <_Z17_fetch_usbserial1v>
 80b1952:	6803      	ldr	r3, [r0, #0]
 80b1954:	691b      	ldr	r3, [r3, #16]
 80b1956:	4798      	blx	r3
 80b1958:	2800      	cmp	r0, #0
 80b195a:	dc06      	bgt.n	80b196a <serialEventRun+0x4e>
 80b195c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80b195e:	f3af 8000 	nop.w
 80b1962:	e7e5      	b.n	80b1930 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80b1964:	f3af 8000 	nop.w
 80b1968:	e7eb      	b.n	80b1942 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80b196a:	f3af 8000 	nop.w
 80b196e:	bd08      	pop	{r3, pc}
	...

080b1980 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80b1980:	b508      	push	{r3, lr}
	serialEventRun();
 80b1982:	f7ff ffcb 	bl	80b191c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80b1986:	f7ff fa1b 	bl	80b0dc0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80b198a:	4b01      	ldr	r3, [pc, #4]	; (80b1990 <_post_loop+0x10>)
 80b198c:	6018      	str	r0, [r3, #0]
 80b198e:	bd08      	pop	{r3, pc}
 80b1990:	20003894 	.word	0x20003894

080b1994 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80b1994:	4802      	ldr	r0, [pc, #8]	; (80b19a0 <_Z33system_initialize_user_backup_ramv+0xc>)
 80b1996:	4a03      	ldr	r2, [pc, #12]	; (80b19a4 <_Z33system_initialize_user_backup_ramv+0x10>)
 80b1998:	4903      	ldr	r1, [pc, #12]	; (80b19a8 <_Z33system_initialize_user_backup_ramv+0x14>)
 80b199a:	1a12      	subs	r2, r2, r0
 80b199c:	f000 bf2b 	b.w	80b27f6 <memcpy>
 80b19a0:	40024000 	.word	0x40024000
 80b19a4:	40024004 	.word	0x40024004
 80b19a8:	080b6558 	.word	0x080b6558

080b19ac <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80b19ac:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80b19ae:	2300      	movs	r3, #0
 80b19b0:	9300      	str	r3, [sp, #0]
 80b19b2:	461a      	mov	r2, r3
 80b19b4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80b19b8:	f7ff fb0c 	bl	80b0fd4 <system_ctrl_set_result>
}
 80b19bc:	b003      	add	sp, #12
 80b19be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080b19c4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80b19c4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80b19c6:	8843      	ldrh	r3, [r0, #2]
 80b19c8:	2b0a      	cmp	r3, #10
 80b19ca:	d008      	beq.n	80b19de <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80b19cc:	2b50      	cmp	r3, #80	; 0x50
 80b19ce:	d109      	bne.n	80b19e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80b19d0:	4b09      	ldr	r3, [pc, #36]	; (80b19f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80b19d2:	681b      	ldr	r3, [r3, #0]
 80b19d4:	b13b      	cbz	r3, 80b19e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80b19d6:	b003      	add	sp, #12
 80b19d8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80b19dc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80b19de:	f7ff ffe5 	bl	80b19ac <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80b19e2:	e006      	b.n	80b19f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80b19e4:	2300      	movs	r3, #0
 80b19e6:	9300      	str	r3, [sp, #0]
 80b19e8:	461a      	mov	r2, r3
 80b19ea:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80b19ee:	f7ff faf1 	bl	80b0fd4 <system_ctrl_set_result>
        break;
    }
}
 80b19f2:	b003      	add	sp, #12
 80b19f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80b19f8:	20003420 	.word	0x20003420

080b19fc <module_user_init_hook>:

void module_user_init_hook()
{
 80b19fc:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80b19fe:	4c10      	ldr	r4, [pc, #64]	; (80b1a40 <module_user_init_hook+0x44>)
 80b1a00:	4d10      	ldr	r5, [pc, #64]	; (80b1a44 <module_user_init_hook+0x48>)
 80b1a02:	6823      	ldr	r3, [r4, #0]
 80b1a04:	42ab      	cmp	r3, r5
 80b1a06:	4b10      	ldr	r3, [pc, #64]	; (80b1a48 <module_user_init_hook+0x4c>)
 80b1a08:	bf0c      	ite	eq
 80b1a0a:	2201      	moveq	r2, #1
 80b1a0c:	2200      	movne	r2, #0
 80b1a0e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80b1a10:	d002      	beq.n	80b1a18 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80b1a12:	f7ff ffbf 	bl	80b1994 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80b1a16:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80b1a18:	f7ff f9ca 	bl	80b0db0 <HAL_RNG_GetRandomNumber>
 80b1a1c:	4604      	mov	r4, r0
    srand(seed);
 80b1a1e:	f000 ff27 	bl	80b2870 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80b1a22:	4b0a      	ldr	r3, [pc, #40]	; (80b1a4c <module_user_init_hook+0x50>)
 80b1a24:	b113      	cbz	r3, 80b1a2c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80b1a26:	4620      	mov	r0, r4
 80b1a28:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80b1a2c:	2100      	movs	r1, #0
 80b1a2e:	4807      	ldr	r0, [pc, #28]	; (80b1a4c <module_user_init_hook+0x50>)
 80b1a30:	f7ff fb4a 	bl	80b10c8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80b1a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80b1a38:	2100      	movs	r1, #0
 80b1a3a:	4805      	ldr	r0, [pc, #20]	; (80b1a50 <module_user_init_hook+0x54>)
 80b1a3c:	f7ff bac0 	b.w	80b0fc0 <system_ctrl_set_app_request_handler>
 80b1a40:	40024000 	.word	0x40024000
 80b1a44:	9a271c1e 	.word	0x9a271c1e
 80b1a48:	20003424 	.word	0x20003424
 80b1a4c:	00000000 	.word	0x00000000
 80b1a50:	080b19c5 	.word	0x080b19c5

080b1a54 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80b1a54:	4770      	bx	lr

080b1a56 <_ZN9IPAddressD0Ev>:
 80b1a56:	b510      	push	{r4, lr}
 80b1a58:	4604      	mov	r4, r0
 80b1a5a:	2118      	movs	r1, #24
 80b1a5c:	f000 fa97 	bl	80b1f8e <_ZdlPvj>
 80b1a60:	4620      	mov	r0, r4
 80b1a62:	bd10      	pop	{r4, pc}

080b1a64 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80b1a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80b1a66:	460f      	mov	r7, r1
 80b1a68:	f100 0608 	add.w	r6, r0, #8
 80b1a6c:	1d05      	adds	r5, r0, #4
 80b1a6e:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80b1a70:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80b1a74:	220a      	movs	r2, #10
 80b1a76:	4638      	mov	r0, r7
 80b1a78:	f7ff fea1 	bl	80b17be <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80b1a7c:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80b1a7e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80b1a80:	d007      	beq.n	80b1a92 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80b1a82:	2c00      	cmp	r4, #0
 80b1a84:	d0f4      	beq.n	80b1a70 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80b1a86:	212e      	movs	r1, #46	; 0x2e
 80b1a88:	4638      	mov	r0, r7
 80b1a8a:	f7ff fe7f 	bl	80b178c <_ZN5Print5printEc>
 80b1a8e:	4404      	add	r4, r0
 80b1a90:	e7ee      	b.n	80b1a70 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80b1a92:	4620      	mov	r0, r4
 80b1a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080b1a98 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80b1a98:	b510      	push	{r4, lr}
 80b1a9a:	4604      	mov	r4, r0
 80b1a9c:	4b04      	ldr	r3, [pc, #16]	; (80b1ab0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80b1a9e:	2211      	movs	r2, #17
 80b1aa0:	f840 3b04 	str.w	r3, [r0], #4
 80b1aa4:	2100      	movs	r1, #0
 80b1aa6:	f000 fecc 	bl	80b2842 <memset>
{
    clear();
}
 80b1aaa:	4620      	mov	r0, r4
 80b1aac:	bd10      	pop	{r4, pc}
 80b1aae:	bf00      	nop
 80b1ab0:	080b61ec 	.word	0x080b61ec

080b1ab4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80b1ab4:	4603      	mov	r3, r0
 80b1ab6:	4a07      	ldr	r2, [pc, #28]	; (80b1ad4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80b1ab8:	b510      	push	{r4, lr}
 80b1aba:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80b1abe:	f101 0210 	add.w	r2, r1, #16
 80b1ac2:	f851 4b04 	ldr.w	r4, [r1], #4
 80b1ac6:	4291      	cmp	r1, r2
 80b1ac8:	f843 4b04 	str.w	r4, [r3], #4
 80b1acc:	d1f9      	bne.n	80b1ac2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80b1ace:	780a      	ldrb	r2, [r1, #0]
 80b1ad0:	701a      	strb	r2, [r3, #0]
}
 80b1ad2:	bd10      	pop	{r4, pc}
 80b1ad4:	080b61ec 	.word	0x080b61ec

080b1ad8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80b1ad8:	4a02      	ldr	r2, [pc, #8]	; (80b1ae4 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80b1ada:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80b1adc:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80b1ade:	2204      	movs	r2, #4
 80b1ae0:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80b1ae2:	4770      	bx	lr
 80b1ae4:	080b61ec 	.word	0x080b61ec

080b1ae8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80b1ae8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80b1aea:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80b1aee:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80b1af2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80b1af6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80b1afa:	2304      	movs	r3, #4
 80b1afc:	6041      	str	r1, [r0, #4]
 80b1afe:	7503      	strb	r3, [r0, #20]
 80b1b00:	bd10      	pop	{r4, pc}
	...

080b1b04 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80b1b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80b1b06:	4d04      	ldr	r5, [pc, #16]	; (80b1b18 <_ZN9IPAddressC1Ehhhh+0x14>)
 80b1b08:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80b1b0a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80b1b0e:	9500      	str	r5, [sp, #0]
 80b1b10:	f7ff ffea 	bl	80b1ae8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80b1b14:	b003      	add	sp, #12
 80b1b16:	bd30      	pop	{r4, r5, pc}
 80b1b18:	080b61ec 	.word	0x080b61ec

080b1b1c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80b1b1c:	7441      	strb	r1, [r0, #17]
 80b1b1e:	4770      	bx	lr

080b1b20 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80b1b20:	4770      	bx	lr

080b1b22 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80b1b22:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80b1b24:	2100      	movs	r1, #0
 80b1b26:	7c00      	ldrb	r0, [r0, #16]
 80b1b28:	f7ff f9fa 	bl	80b0f20 <HAL_USB_USART_Receive_Data>
}
 80b1b2c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80b1b30:	bf28      	it	cs
 80b1b32:	f04f 30ff 	movcs.w	r0, #4294967295
 80b1b36:	bd08      	pop	{r3, pc}

080b1b38 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80b1b38:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80b1b3a:	2101      	movs	r1, #1
 80b1b3c:	7c00      	ldrb	r0, [r0, #16]
 80b1b3e:	f7ff f9ef 	bl	80b0f20 <HAL_USB_USART_Receive_Data>
}
 80b1b42:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80b1b46:	bf28      	it	cs
 80b1b48:	f04f 30ff 	movcs.w	r0, #4294967295
 80b1b4c:	bd08      	pop	{r3, pc}

080b1b4e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80b1b4e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80b1b50:	7c00      	ldrb	r0, [r0, #16]
 80b1b52:	f7ff f9dd 	bl	80b0f10 <HAL_USB_USART_Available_Data_For_Write>
}
 80b1b56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80b1b5a:	bd08      	pop	{r3, pc}

080b1b5c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80b1b5c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80b1b5e:	7c00      	ldrb	r0, [r0, #16]
 80b1b60:	f7ff f9ce 	bl	80b0f00 <HAL_USB_USART_Available_Data>
}
 80b1b64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80b1b68:	bd08      	pop	{r3, pc}

080b1b6a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80b1b6a:	7c00      	ldrb	r0, [r0, #16]
 80b1b6c:	f7ff b9e8 	b.w	80b0f40 <HAL_USB_USART_Flush_Data>

080b1b70 <_ZN9USBSerialD0Ev>:
 80b1b70:	b510      	push	{r4, lr}
 80b1b72:	4604      	mov	r4, r0
 80b1b74:	2114      	movs	r1, #20
 80b1b76:	f000 fa0a 	bl	80b1f8e <_ZdlPvj>
 80b1b7a:	4620      	mov	r0, r4
 80b1b7c:	bd10      	pop	{r4, pc}

080b1b7e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80b1b7e:	b538      	push	{r3, r4, r5, lr}
 80b1b80:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80b1b82:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80b1b84:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80b1b86:	f7ff f9c3 	bl	80b0f10 <HAL_USB_USART_Available_Data_For_Write>
 80b1b8a:	2800      	cmp	r0, #0
 80b1b8c:	dc01      	bgt.n	80b1b92 <_ZN9USBSerial5writeEh+0x14>
 80b1b8e:	7c60      	ldrb	r0, [r4, #17]
 80b1b90:	b128      	cbz	r0, 80b1b9e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80b1b92:	4629      	mov	r1, r5
 80b1b94:	7c20      	ldrb	r0, [r4, #16]
 80b1b96:	f7ff f9cb 	bl	80b0f30 <HAL_USB_USART_Send_Data>
 80b1b9a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80b1b9e:	bd38      	pop	{r3, r4, r5, pc}

080b1ba0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80b1ba0:	b510      	push	{r4, lr}
 80b1ba2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80b1ba4:	2300      	movs	r3, #0
 80b1ba6:	6063      	str	r3, [r4, #4]
 80b1ba8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80b1bac:	60a3      	str	r3, [r4, #8]
 80b1bae:	4b05      	ldr	r3, [pc, #20]	; (80b1bc4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80b1bb0:	4608      	mov	r0, r1
 80b1bb2:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80b1bb4:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80b1bb6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80b1bb8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80b1bba:	4611      	mov	r1, r2
 80b1bbc:	f7ff f990 	bl	80b0ee0 <HAL_USB_USART_Init>
}
 80b1bc0:	4620      	mov	r0, r4
 80b1bc2:	bd10      	pop	{r4, pc}
 80b1bc4:	080b6200 	.word	0x080b6200

080b1bc8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80b1bc8:	2200      	movs	r2, #0
 80b1bca:	7c00      	ldrb	r0, [r0, #16]
 80b1bcc:	f7ff b990 	b.w	80b0ef0 <HAL_USB_USART_Begin>

080b1bd0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80b1bd0:	b510      	push	{r4, lr}
 80b1bd2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80b1bd4:	2214      	movs	r2, #20
 80b1bd6:	2100      	movs	r1, #0
 80b1bd8:	f000 fe33 	bl	80b2842 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80b1bdc:	4b05      	ldr	r3, [pc, #20]	; (80b1bf4 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80b1bde:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80b1be0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80b1be2:	4b05      	ldr	r3, [pc, #20]	; (80b1bf8 <_Z19acquireSerialBufferv+0x28>)
 80b1be4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80b1be6:	f240 1301 	movw	r3, #257	; 0x101
 80b1bea:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80b1bec:	2381      	movs	r3, #129	; 0x81
 80b1bee:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80b1bf0:	bd10      	pop	{r4, pc}
 80b1bf2:	bf00      	nop
 80b1bf4:	200034ad 	.word	0x200034ad
 80b1bf8:	2000342c 	.word	0x2000342c

080b1bfc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80b1bfc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80b1bfe:	4d0e      	ldr	r5, [pc, #56]	; (80b1c38 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80b1c00:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80b1c02:	a801      	add	r0, sp, #4
 80b1c04:	f7ff ffe4 	bl	80b1bd0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80b1c08:	6829      	ldr	r1, [r5, #0]
 80b1c0a:	f011 0401 	ands.w	r4, r1, #1
 80b1c0e:	d110      	bne.n	80b1c32 <_Z16_fetch_usbserialv+0x36>
 80b1c10:	4628      	mov	r0, r5
 80b1c12:	f7ee fa48 	bl	80a00a6 <__cxa_guard_acquire>
 80b1c16:	b160      	cbz	r0, 80b1c32 <_Z16_fetch_usbserialv+0x36>
 80b1c18:	aa01      	add	r2, sp, #4
 80b1c1a:	4621      	mov	r1, r4
 80b1c1c:	4807      	ldr	r0, [pc, #28]	; (80b1c3c <_Z16_fetch_usbserialv+0x40>)
 80b1c1e:	f7ff ffbf 	bl	80b1ba0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80b1c22:	4628      	mov	r0, r5
 80b1c24:	f7ee fa44 	bl	80a00b0 <__cxa_guard_release>
 80b1c28:	4a05      	ldr	r2, [pc, #20]	; (80b1c40 <_Z16_fetch_usbserialv+0x44>)
 80b1c2a:	4906      	ldr	r1, [pc, #24]	; (80b1c44 <_Z16_fetch_usbserialv+0x48>)
 80b1c2c:	4803      	ldr	r0, [pc, #12]	; (80b1c3c <_Z16_fetch_usbserialv+0x40>)
 80b1c2e:	f000 f9a9 	bl	80b1f84 <__aeabi_atexit>
	return _usbserial;
}
 80b1c32:	4802      	ldr	r0, [pc, #8]	; (80b1c3c <_Z16_fetch_usbserialv+0x40>)
 80b1c34:	b007      	add	sp, #28
 80b1c36:	bd30      	pop	{r4, r5, pc}
 80b1c38:	20003428 	.word	0x20003428
 80b1c3c:	200035b0 	.word	0x200035b0
 80b1c40:	200000f8 	.word	0x200000f8
 80b1c44:	080b1b21 	.word	0x080b1b21

080b1c48 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80b1c48:	b510      	push	{r4, lr}
 80b1c4a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80b1c4c:	2214      	movs	r2, #20
 80b1c4e:	2100      	movs	r1, #0
 80b1c50:	f000 fdf7 	bl	80b2842 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80b1c54:	4b05      	ldr	r3, [pc, #20]	; (80b1c6c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80b1c56:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80b1c58:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80b1c5a:	4b05      	ldr	r3, [pc, #20]	; (80b1c70 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80b1c5c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80b1c5e:	f240 1301 	movw	r3, #257	; 0x101
 80b1c62:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80b1c64:	2381      	movs	r3, #129	; 0x81
 80b1c66:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80b1c68:	bd10      	pop	{r4, pc}
 80b1c6a:	bf00      	nop
 80b1c6c:	20003660 	.word	0x20003660
 80b1c70:	200035c8 	.word	0x200035c8

080b1c74 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80b1c74:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80b1c76:	4c0e      	ldr	r4, [pc, #56]	; (80b1cb0 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80b1c78:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80b1c7a:	a801      	add	r0, sp, #4
 80b1c7c:	f7ff ffe4 	bl	80b1c48 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80b1c80:	6823      	ldr	r3, [r4, #0]
 80b1c82:	07db      	lsls	r3, r3, #31
 80b1c84:	d410      	bmi.n	80b1ca8 <_Z17_fetch_usbserial1v+0x34>
 80b1c86:	4620      	mov	r0, r4
 80b1c88:	f7ee fa0d 	bl	80a00a6 <__cxa_guard_acquire>
 80b1c8c:	b160      	cbz	r0, 80b1ca8 <_Z17_fetch_usbserial1v+0x34>
 80b1c8e:	aa01      	add	r2, sp, #4
 80b1c90:	2101      	movs	r1, #1
 80b1c92:	4808      	ldr	r0, [pc, #32]	; (80b1cb4 <_Z17_fetch_usbserial1v+0x40>)
 80b1c94:	f7ff ff84 	bl	80b1ba0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80b1c98:	4620      	mov	r0, r4
 80b1c9a:	f7ee fa09 	bl	80a00b0 <__cxa_guard_release>
 80b1c9e:	4a06      	ldr	r2, [pc, #24]	; (80b1cb8 <_Z17_fetch_usbserial1v+0x44>)
 80b1ca0:	4906      	ldr	r1, [pc, #24]	; (80b1cbc <_Z17_fetch_usbserial1v+0x48>)
 80b1ca2:	4804      	ldr	r0, [pc, #16]	; (80b1cb4 <_Z17_fetch_usbserial1v+0x40>)
 80b1ca4:	f000 f96e 	bl	80b1f84 <__aeabi_atexit>
  return _usbserial1;
}
 80b1ca8:	4802      	ldr	r0, [pc, #8]	; (80b1cb4 <_Z17_fetch_usbserial1v+0x40>)
 80b1caa:	b006      	add	sp, #24
 80b1cac:	bd10      	pop	{r4, pc}
 80b1cae:	bf00      	nop
 80b1cb0:	200035c4 	.word	0x200035c4
 80b1cb4:	2000364c 	.word	0x2000364c
 80b1cb8:	200000f8 	.word	0x200000f8
 80b1cbc:	080b1b21 	.word	0x080b1b21

080b1cc0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80b1cc0:	4770      	bx	lr

080b1cc2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80b1cc2:	7441      	strb	r1, [r0, #17]
 80b1cc4:	4770      	bx	lr

080b1cc6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80b1cc6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80b1cc8:	7c00      	ldrb	r0, [r0, #16]
 80b1cca:	f7ff f8c1 	bl	80b0e50 <HAL_USART_Available_Data_For_Write>
}
 80b1cce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80b1cd2:	bd08      	pop	{r3, pc}

080b1cd4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80b1cd4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80b1cd6:	7c00      	ldrb	r0, [r0, #16]
 80b1cd8:	f7ff f89a 	bl	80b0e10 <HAL_USART_Available_Data>
}
 80b1cdc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80b1ce0:	bd08      	pop	{r3, pc}

080b1ce2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80b1ce2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80b1ce4:	7c00      	ldrb	r0, [r0, #16]
 80b1ce6:	f7ff f8a3 	bl	80b0e30 <HAL_USART_Peek_Data>
}
 80b1cea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80b1cee:	bf28      	it	cs
 80b1cf0:	f04f 30ff 	movcs.w	r0, #4294967295
 80b1cf4:	bd08      	pop	{r3, pc}

080b1cf6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80b1cf6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80b1cf8:	7c00      	ldrb	r0, [r0, #16]
 80b1cfa:	f7ff f891 	bl	80b0e20 <HAL_USART_Read_Data>
}
 80b1cfe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80b1d02:	bf28      	it	cs
 80b1d04:	f04f 30ff 	movcs.w	r0, #4294967295
 80b1d08:	bd08      	pop	{r3, pc}

080b1d0a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80b1d0a:	7c00      	ldrb	r0, [r0, #16]
 80b1d0c:	f7ff b898 	b.w	80b0e40 <HAL_USART_Flush_Data>

080b1d10 <_ZN11USARTSerialD0Ev>:
 80b1d10:	b510      	push	{r4, lr}
 80b1d12:	4604      	mov	r4, r0
 80b1d14:	2114      	movs	r1, #20
 80b1d16:	f000 f93a 	bl	80b1f8e <_ZdlPvj>
 80b1d1a:	4620      	mov	r0, r4
 80b1d1c:	bd10      	pop	{r4, pc}

080b1d1e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80b1d1e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80b1d20:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80b1d22:	4604      	mov	r4, r0
 80b1d24:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80b1d26:	b925      	cbnz	r5, 80b1d32 <_ZN11USARTSerial5writeEh+0x14>
 80b1d28:	7c00      	ldrb	r0, [r0, #16]
 80b1d2a:	f7ff f891 	bl	80b0e50 <HAL_USART_Available_Data_For_Write>
 80b1d2e:	2800      	cmp	r0, #0
 80b1d30:	dd05      	ble.n	80b1d3e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80b1d32:	4631      	mov	r1, r6
 80b1d34:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80b1d36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80b1d3a:	f7ff b861 	b.w	80b0e00 <HAL_USART_Write_Data>
  }
  return 0;
}
 80b1d3e:	4628      	mov	r0, r5
 80b1d40:	bd70      	pop	{r4, r5, r6, pc}
	...

080b1d44 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80b1d44:	b510      	push	{r4, lr}
 80b1d46:	4604      	mov	r4, r0
 80b1d48:	4608      	mov	r0, r1
 80b1d4a:	4611      	mov	r1, r2
 80b1d4c:	2200      	movs	r2, #0
 80b1d4e:	6062      	str	r2, [r4, #4]
 80b1d50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80b1d54:	60a2      	str	r2, [r4, #8]
 80b1d56:	4a05      	ldr	r2, [pc, #20]	; (80b1d6c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80b1d58:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80b1d5a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80b1d5c:	2201      	movs	r2, #1
 80b1d5e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80b1d60:	461a      	mov	r2, r3
 80b1d62:	f7ff f845 	bl	80b0df0 <HAL_USART_Init>
}
 80b1d66:	4620      	mov	r0, r4
 80b1d68:	bd10      	pop	{r4, pc}
 80b1d6a:	bf00      	nop
 80b1d6c:	080b6230 	.word	0x080b6230

080b1d70 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80b1d70:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80b1d72:	4d0c      	ldr	r5, [pc, #48]	; (80b1da4 <_Z22__fetch_global_Serial1v+0x34>)
 80b1d74:	6829      	ldr	r1, [r5, #0]
 80b1d76:	f011 0401 	ands.w	r4, r1, #1
 80b1d7a:	d111      	bne.n	80b1da0 <_Z22__fetch_global_Serial1v+0x30>
 80b1d7c:	4628      	mov	r0, r5
 80b1d7e:	f7ee f992 	bl	80a00a6 <__cxa_guard_acquire>
 80b1d82:	b168      	cbz	r0, 80b1da0 <_Z22__fetch_global_Serial1v+0x30>
 80b1d84:	4a08      	ldr	r2, [pc, #32]	; (80b1da8 <_Z22__fetch_global_Serial1v+0x38>)
 80b1d86:	4621      	mov	r1, r4
 80b1d88:	4b08      	ldr	r3, [pc, #32]	; (80b1dac <_Z22__fetch_global_Serial1v+0x3c>)
 80b1d8a:	4809      	ldr	r0, [pc, #36]	; (80b1db0 <_Z22__fetch_global_Serial1v+0x40>)
 80b1d8c:	f7ff ffda 	bl	80b1d44 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80b1d90:	4628      	mov	r0, r5
 80b1d92:	f7ee f98d 	bl	80a00b0 <__cxa_guard_release>
 80b1d96:	4a07      	ldr	r2, [pc, #28]	; (80b1db4 <_Z22__fetch_global_Serial1v+0x44>)
 80b1d98:	4907      	ldr	r1, [pc, #28]	; (80b1db8 <_Z22__fetch_global_Serial1v+0x48>)
 80b1d9a:	4805      	ldr	r0, [pc, #20]	; (80b1db0 <_Z22__fetch_global_Serial1v+0x40>)
 80b1d9c:	f000 f8f2 	bl	80b1f84 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80b1da0:	4803      	ldr	r0, [pc, #12]	; (80b1db0 <_Z22__fetch_global_Serial1v+0x40>)
 80b1da2:	bd38      	pop	{r3, r4, r5, pc}
 80b1da4:	200037fc 	.word	0x200037fc
 80b1da8:	20003800 	.word	0x20003800
 80b1dac:	20003778 	.word	0x20003778
 80b1db0:	20003764 	.word	0x20003764
 80b1db4:	200000f8 	.word	0x200000f8
 80b1db8:	080b1cc1 	.word	0x080b1cc1

080b1dbc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80b1dbc:	2200      	movs	r2, #0
 80b1dbe:	4611      	mov	r1, r2
 80b1dc0:	6840      	ldr	r0, [r0, #4]
 80b1dc2:	f7ff b929 	b.w	80b1018 <network_ready>

080b1dc6 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80b1dc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80b1dc8:	4616      	mov	r6, r2
 80b1dca:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80b1dcc:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80b1dce:	460f      	mov	r7, r1
 80b1dd0:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80b1dd2:	2100      	movs	r1, #0
 80b1dd4:	a803      	add	r0, sp, #12
 80b1dd6:	f000 fd34 	bl	80b2842 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80b1dda:	4630      	mov	r0, r6
 80b1ddc:	f000 fd82 	bl	80b28e4 <strlen>
 80b1de0:	2500      	movs	r5, #0
 80b1de2:	9500      	str	r5, [sp, #0]
 80b1de4:	b281      	uxth	r1, r0
 80b1de6:	687b      	ldr	r3, [r7, #4]
 80b1de8:	aa03      	add	r2, sp, #12
 80b1dea:	4630      	mov	r0, r6
 80b1dec:	f7ff f8b8 	bl	80b0f60 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80b1df0:	b120      	cbz	r0, 80b1dfc <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80b1df2:	4629      	mov	r1, r5
 80b1df4:	4620      	mov	r0, r4
 80b1df6:	f7ff fe6f 	bl	80b1ad8 <_ZN9IPAddressC1Em>
 80b1dfa:	e003      	b.n	80b1e04 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80b1dfc:	a903      	add	r1, sp, #12
 80b1dfe:	4620      	mov	r0, r4
 80b1e00:	f7ff fe58 	bl	80b1ab4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80b1e04:	4620      	mov	r0, r4
 80b1e06:	b009      	add	sp, #36	; 0x24
 80b1e08:	bdf0      	pop	{r4, r5, r6, r7, pc}

080b1e0a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80b1e0a:	2200      	movs	r2, #0
 80b1e0c:	4611      	mov	r1, r2
 80b1e0e:	6840      	ldr	r0, [r0, #4]
 80b1e10:	f7ff b922 	b.w	80b1058 <network_listening>

080b1e14 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80b1e14:	2200      	movs	r2, #0
 80b1e16:	4611      	mov	r1, r2
 80b1e18:	6840      	ldr	r0, [r0, #4]
 80b1e1a:	f7ff b92d 	b.w	80b1078 <network_get_listen_timeout>

080b1e1e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80b1e1e:	2200      	movs	r2, #0
 80b1e20:	6840      	ldr	r0, [r0, #4]
 80b1e22:	f7ff b921 	b.w	80b1068 <network_set_listen_timeout>

080b1e26 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80b1e26:	2200      	movs	r2, #0
 80b1e28:	f081 0101 	eor.w	r1, r1, #1
 80b1e2c:	6840      	ldr	r0, [r0, #4]
 80b1e2e:	f7ff b90b 	b.w	80b1048 <network_listen>

080b1e32 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80b1e32:	2300      	movs	r3, #0
 80b1e34:	461a      	mov	r2, r3
 80b1e36:	4619      	mov	r1, r3
 80b1e38:	6840      	ldr	r0, [r0, #4]
 80b1e3a:	f7ff b8fd 	b.w	80b1038 <network_off>

080b1e3e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80b1e3e:	2200      	movs	r2, #0
 80b1e40:	4611      	mov	r1, r2
 80b1e42:	6840      	ldr	r0, [r0, #4]
 80b1e44:	f7ff b8d8 	b.w	80b0ff8 <network_connecting>

080b1e48 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80b1e48:	2200      	movs	r2, #0
 80b1e4a:	2102      	movs	r1, #2
 80b1e4c:	6840      	ldr	r0, [r0, #4]
 80b1e4e:	f7ff b8db 	b.w	80b1008 <network_disconnect>

080b1e52 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80b1e52:	2300      	movs	r3, #0
 80b1e54:	461a      	mov	r2, r3
 80b1e56:	6840      	ldr	r0, [r0, #4]
 80b1e58:	f7ff b8c6 	b.w	80b0fe8 <network_connect>

080b1e5c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80b1e5c:	4b02      	ldr	r3, [pc, #8]	; (80b1e68 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80b1e5e:	2204      	movs	r2, #4
 80b1e60:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80b1e62:	4a02      	ldr	r2, [pc, #8]	; (80b1e6c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80b1e64:	601a      	str	r2, [r3, #0]
 80b1e66:	4770      	bx	lr
 80b1e68:	20003884 	.word	0x20003884
 80b1e6c:	080b6260 	.word	0x080b6260

080b1e70 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80b1e70:	2300      	movs	r3, #0
 80b1e72:	461a      	mov	r2, r3
 80b1e74:	6840      	ldr	r0, [r0, #4]
 80b1e76:	f7ff b8b7 	b.w	80b0fe8 <network_connect>

080b1e7a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80b1e7a:	2200      	movs	r2, #0
 80b1e7c:	2102      	movs	r1, #2
 80b1e7e:	6840      	ldr	r0, [r0, #4]
 80b1e80:	f7ff b8c2 	b.w	80b1008 <network_disconnect>

080b1e84 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80b1e84:	2200      	movs	r2, #0
 80b1e86:	4611      	mov	r1, r2
 80b1e88:	6840      	ldr	r0, [r0, #4]
 80b1e8a:	f7ff b8b5 	b.w	80b0ff8 <network_connecting>

080b1e8e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80b1e8e:	2200      	movs	r2, #0
 80b1e90:	4611      	mov	r1, r2
 80b1e92:	6840      	ldr	r0, [r0, #4]
 80b1e94:	f7ff b8c0 	b.w	80b1018 <network_ready>

080b1e98 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80b1e98:	2300      	movs	r3, #0
 80b1e9a:	461a      	mov	r2, r3
 80b1e9c:	4619      	mov	r1, r3
 80b1e9e:	6840      	ldr	r0, [r0, #4]
 80b1ea0:	f7ff b8c2 	b.w	80b1028 <network_on>

080b1ea4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80b1ea4:	2300      	movs	r3, #0
 80b1ea6:	461a      	mov	r2, r3
 80b1ea8:	4619      	mov	r1, r3
 80b1eaa:	6840      	ldr	r0, [r0, #4]
 80b1eac:	f7ff b8c4 	b.w	80b1038 <network_off>

080b1eb0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80b1eb0:	2200      	movs	r2, #0
 80b1eb2:	f081 0101 	eor.w	r1, r1, #1
 80b1eb6:	6840      	ldr	r0, [r0, #4]
 80b1eb8:	f7ff b8c6 	b.w	80b1048 <network_listen>

080b1ebc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80b1ebc:	2200      	movs	r2, #0
 80b1ebe:	6840      	ldr	r0, [r0, #4]
 80b1ec0:	f7ff b8d2 	b.w	80b1068 <network_set_listen_timeout>

080b1ec4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80b1ec4:	2200      	movs	r2, #0
 80b1ec6:	4611      	mov	r1, r2
 80b1ec8:	6840      	ldr	r0, [r0, #4]
 80b1eca:	f7ff b8d5 	b.w	80b1078 <network_get_listen_timeout>

080b1ece <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80b1ece:	2200      	movs	r2, #0
 80b1ed0:	4611      	mov	r1, r2
 80b1ed2:	6840      	ldr	r0, [r0, #4]
 80b1ed4:	f7ff b8c0 	b.w	80b1058 <network_listening>

080b1ed8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80b1ed8:	b570      	push	{r4, r5, r6, lr}
 80b1eda:	4616      	mov	r6, r2
 80b1edc:	b08e      	sub	sp, #56	; 0x38
 80b1ede:	4604      	mov	r4, r0
    IPAddress addr;
 80b1ee0:	a808      	add	r0, sp, #32
 80b1ee2:	f7ff fdd9 	bl	80b1a98 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80b1ee6:	2211      	movs	r2, #17
 80b1ee8:	2100      	movs	r1, #0
 80b1eea:	a803      	add	r0, sp, #12
 80b1eec:	f000 fca9 	bl	80b2842 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80b1ef0:	4630      	mov	r0, r6
 80b1ef2:	f000 fcf7 	bl	80b28e4 <strlen>
 80b1ef6:	2500      	movs	r5, #0
 80b1ef8:	4b0a      	ldr	r3, [pc, #40]	; (80b1f24 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80b1efa:	9500      	str	r5, [sp, #0]
 80b1efc:	b281      	uxth	r1, r0
 80b1efe:	685b      	ldr	r3, [r3, #4]
 80b1f00:	aa03      	add	r2, sp, #12
 80b1f02:	4630      	mov	r0, r6
 80b1f04:	f7ff f82c 	bl	80b0f60 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80b1f08:	b120      	cbz	r0, 80b1f14 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80b1f0a:	4629      	mov	r1, r5
 80b1f0c:	4620      	mov	r0, r4
 80b1f0e:	f7ff fde3 	bl	80b1ad8 <_ZN9IPAddressC1Em>
 80b1f12:	e003      	b.n	80b1f1c <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80b1f14:	a903      	add	r1, sp, #12
 80b1f16:	4620      	mov	r0, r4
 80b1f18:	f7ff fdcc 	bl	80b1ab4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80b1f1c:	4620      	mov	r0, r4
 80b1f1e:	b00e      	add	sp, #56	; 0x38
 80b1f20:	bd70      	pop	{r4, r5, r6, pc}
 80b1f22:	bf00      	nop
 80b1f24:	20003884 	.word	0x20003884

080b1f28 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80b1f28:	4b03      	ldr	r3, [pc, #12]	; (80b1f38 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80b1f2a:	4a04      	ldr	r2, [pc, #16]	; (80b1f3c <_ZN5spark12NetworkClass4fromEm+0x14>)
 80b1f2c:	2804      	cmp	r0, #4
 80b1f2e:	bf0c      	ite	eq
 80b1f30:	4610      	moveq	r0, r2
 80b1f32:	4618      	movne	r0, r3
 80b1f34:	4770      	bx	lr
 80b1f36:	bf00      	nop
 80b1f38:	2000388c 	.word	0x2000388c
 80b1f3c:	20003884 	.word	0x20003884

080b1f40 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80b1f40:	4b02      	ldr	r3, [pc, #8]	; (80b1f4c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80b1f42:	4a03      	ldr	r2, [pc, #12]	; (80b1f50 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80b1f44:	601a      	str	r2, [r3, #0]
 80b1f46:	2200      	movs	r2, #0
 80b1f48:	605a      	str	r2, [r3, #4]
 80b1f4a:	4770      	bx	lr
 80b1f4c:	2000388c 	.word	0x2000388c
 80b1f50:	080b6294 	.word	0x080b6294

080b1f54 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80b1f54:	b513      	push	{r0, r1, r4, lr}
 80b1f56:	4c08      	ldr	r4, [pc, #32]	; (80b1f78 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80b1f58:	2300      	movs	r3, #0
 80b1f5a:	461a      	mov	r2, r3
 80b1f5c:	4619      	mov	r1, r3
 80b1f5e:	9300      	str	r3, [sp, #0]
 80b1f60:	4620      	mov	r0, r4
 80b1f62:	f7ff fdcf 	bl	80b1b04 <_ZN9IPAddressC1Ehhhh>
 80b1f66:	4620      	mov	r0, r4
 80b1f68:	4a04      	ldr	r2, [pc, #16]	; (80b1f7c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80b1f6a:	4905      	ldr	r1, [pc, #20]	; (80b1f80 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80b1f6c:	b002      	add	sp, #8
 80b1f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80b1f72:	f000 b807 	b.w	80b1f84 <__aeabi_atexit>
 80b1f76:	bf00      	nop
 80b1f78:	20003898 	.word	0x20003898
 80b1f7c:	200000f8 	.word	0x200000f8
 80b1f80:	080b1a55 	.word	0x080b1a55

080b1f84 <__aeabi_atexit>:
 80b1f84:	460b      	mov	r3, r1
 80b1f86:	4601      	mov	r1, r0
 80b1f88:	4618      	mov	r0, r3
 80b1f8a:	f000 bb1f 	b.w	80b25cc <__cxa_atexit>

080b1f8e <_ZdlPvj>:
 80b1f8e:	f7ee b888 	b.w	80a00a2 <_ZdlPv>
	...

080b1f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80b1f94:	4b18      	ldr	r3, [pc, #96]	; (80b1ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80b1f96:	681a      	ldr	r2, [r3, #0]
 80b1f98:	07d1      	lsls	r1, r2, #31
 80b1f9a:	bf5c      	itt	pl
 80b1f9c:	2201      	movpl	r2, #1
 80b1f9e:	601a      	strpl	r2, [r3, #0]
 80b1fa0:	4b16      	ldr	r3, [pc, #88]	; (80b1ffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80b1fa2:	681a      	ldr	r2, [r3, #0]
 80b1fa4:	07d2      	lsls	r2, r2, #31
 80b1fa6:	bf5c      	itt	pl
 80b1fa8:	2201      	movpl	r2, #1
 80b1faa:	601a      	strpl	r2, [r3, #0]
 80b1fac:	4b14      	ldr	r3, [pc, #80]	; (80b2000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80b1fae:	681a      	ldr	r2, [r3, #0]
 80b1fb0:	07d0      	lsls	r0, r2, #31
 80b1fb2:	bf5c      	itt	pl
 80b1fb4:	2201      	movpl	r2, #1
 80b1fb6:	601a      	strpl	r2, [r3, #0]
 80b1fb8:	4b12      	ldr	r3, [pc, #72]	; (80b2004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80b1fba:	681a      	ldr	r2, [r3, #0]
 80b1fbc:	07d1      	lsls	r1, r2, #31
 80b1fbe:	bf5c      	itt	pl
 80b1fc0:	2201      	movpl	r2, #1
 80b1fc2:	601a      	strpl	r2, [r3, #0]
 80b1fc4:	4b10      	ldr	r3, [pc, #64]	; (80b2008 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80b1fc6:	681a      	ldr	r2, [r3, #0]
 80b1fc8:	07d2      	lsls	r2, r2, #31
 80b1fca:	bf5c      	itt	pl
 80b1fcc:	2201      	movpl	r2, #1
 80b1fce:	601a      	strpl	r2, [r3, #0]
 80b1fd0:	4b0e      	ldr	r3, [pc, #56]	; (80b200c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80b1fd2:	681a      	ldr	r2, [r3, #0]
 80b1fd4:	07d0      	lsls	r0, r2, #31
 80b1fd6:	bf5c      	itt	pl
 80b1fd8:	2201      	movpl	r2, #1
 80b1fda:	601a      	strpl	r2, [r3, #0]
 80b1fdc:	4b0c      	ldr	r3, [pc, #48]	; (80b2010 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80b1fde:	681a      	ldr	r2, [r3, #0]
 80b1fe0:	07d1      	lsls	r1, r2, #31
 80b1fe2:	bf5c      	itt	pl
 80b1fe4:	2201      	movpl	r2, #1
 80b1fe6:	601a      	strpl	r2, [r3, #0]
 80b1fe8:	4b0a      	ldr	r3, [pc, #40]	; (80b2014 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80b1fea:	681a      	ldr	r2, [r3, #0]
 80b1fec:	07d2      	lsls	r2, r2, #31
 80b1fee:	bf5c      	itt	pl
 80b1ff0:	2201      	movpl	r2, #1
 80b1ff2:	601a      	strpl	r2, [r3, #0]
 80b1ff4:	4770      	bx	lr
 80b1ff6:	bf00      	nop
 80b1ff8:	200038cc 	.word	0x200038cc
 80b1ffc:	200038c8 	.word	0x200038c8
 80b2000:	200038c4 	.word	0x200038c4
 80b2004:	200038c0 	.word	0x200038c0
 80b2008:	200038bc 	.word	0x200038bc
 80b200c:	200038b8 	.word	0x200038b8
 80b2010:	200038b4 	.word	0x200038b4
 80b2014:	200038b0 	.word	0x200038b0

080b2018 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80b2018:	4b24      	ldr	r3, [pc, #144]	; (80b20ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80b201a:	681a      	ldr	r2, [r3, #0]
 80b201c:	07d0      	lsls	r0, r2, #31
 80b201e:	bf5c      	itt	pl
 80b2020:	2201      	movpl	r2, #1
 80b2022:	601a      	strpl	r2, [r3, #0]
 80b2024:	4b22      	ldr	r3, [pc, #136]	; (80b20b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80b2026:	681a      	ldr	r2, [r3, #0]
 80b2028:	07d1      	lsls	r1, r2, #31
 80b202a:	bf5c      	itt	pl
 80b202c:	2201      	movpl	r2, #1
 80b202e:	601a      	strpl	r2, [r3, #0]
 80b2030:	4b20      	ldr	r3, [pc, #128]	; (80b20b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80b2032:	681a      	ldr	r2, [r3, #0]
 80b2034:	07d2      	lsls	r2, r2, #31
 80b2036:	bf5c      	itt	pl
 80b2038:	2201      	movpl	r2, #1
 80b203a:	601a      	strpl	r2, [r3, #0]
 80b203c:	4b1e      	ldr	r3, [pc, #120]	; (80b20b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80b203e:	681a      	ldr	r2, [r3, #0]
 80b2040:	07d0      	lsls	r0, r2, #31
 80b2042:	bf5c      	itt	pl
 80b2044:	2201      	movpl	r2, #1
 80b2046:	601a      	strpl	r2, [r3, #0]
 80b2048:	4b1c      	ldr	r3, [pc, #112]	; (80b20bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80b204a:	681a      	ldr	r2, [r3, #0]
 80b204c:	07d1      	lsls	r1, r2, #31
 80b204e:	bf5c      	itt	pl
 80b2050:	2201      	movpl	r2, #1
 80b2052:	601a      	strpl	r2, [r3, #0]
 80b2054:	4b1a      	ldr	r3, [pc, #104]	; (80b20c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80b2056:	681a      	ldr	r2, [r3, #0]
 80b2058:	07d2      	lsls	r2, r2, #31
 80b205a:	bf5c      	itt	pl
 80b205c:	2201      	movpl	r2, #1
 80b205e:	601a      	strpl	r2, [r3, #0]
 80b2060:	4b18      	ldr	r3, [pc, #96]	; (80b20c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80b2062:	681a      	ldr	r2, [r3, #0]
 80b2064:	07d0      	lsls	r0, r2, #31
 80b2066:	bf5c      	itt	pl
 80b2068:	2201      	movpl	r2, #1
 80b206a:	601a      	strpl	r2, [r3, #0]
 80b206c:	4b16      	ldr	r3, [pc, #88]	; (80b20c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80b206e:	681a      	ldr	r2, [r3, #0]
 80b2070:	07d1      	lsls	r1, r2, #31
 80b2072:	bf5c      	itt	pl
 80b2074:	2201      	movpl	r2, #1
 80b2076:	601a      	strpl	r2, [r3, #0]
 80b2078:	4b14      	ldr	r3, [pc, #80]	; (80b20cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80b207a:	681a      	ldr	r2, [r3, #0]
 80b207c:	07d2      	lsls	r2, r2, #31
 80b207e:	bf5c      	itt	pl
 80b2080:	2201      	movpl	r2, #1
 80b2082:	601a      	strpl	r2, [r3, #0]
 80b2084:	4b12      	ldr	r3, [pc, #72]	; (80b20d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80b2086:	681a      	ldr	r2, [r3, #0]
 80b2088:	07d0      	lsls	r0, r2, #31
 80b208a:	bf5c      	itt	pl
 80b208c:	2201      	movpl	r2, #1
 80b208e:	601a      	strpl	r2, [r3, #0]
 80b2090:	4b10      	ldr	r3, [pc, #64]	; (80b20d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80b2092:	681a      	ldr	r2, [r3, #0]
 80b2094:	07d1      	lsls	r1, r2, #31
 80b2096:	bf5c      	itt	pl
 80b2098:	2201      	movpl	r2, #1
 80b209a:	601a      	strpl	r2, [r3, #0]
 80b209c:	4b0e      	ldr	r3, [pc, #56]	; (80b20d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80b209e:	681a      	ldr	r2, [r3, #0]
 80b20a0:	07d2      	lsls	r2, r2, #31
 80b20a2:	bf5c      	itt	pl
 80b20a4:	2201      	movpl	r2, #1
 80b20a6:	601a      	strpl	r2, [r3, #0]
 80b20a8:	4770      	bx	lr
 80b20aa:	bf00      	nop
 80b20ac:	200038fc 	.word	0x200038fc
 80b20b0:	200038f8 	.word	0x200038f8
 80b20b4:	200038f4 	.word	0x200038f4
 80b20b8:	200038f0 	.word	0x200038f0
 80b20bc:	200038ec 	.word	0x200038ec
 80b20c0:	200038e8 	.word	0x200038e8
 80b20c4:	200038e4 	.word	0x200038e4
 80b20c8:	200038e0 	.word	0x200038e0
 80b20cc:	200038dc 	.word	0x200038dc
 80b20d0:	200038d8 	.word	0x200038d8
 80b20d4:	200038d4 	.word	0x200038d4
 80b20d8:	200038d0 	.word	0x200038d0

080b20dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80b20dc:	4b24      	ldr	r3, [pc, #144]	; (80b2170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80b20de:	681a      	ldr	r2, [r3, #0]
 80b20e0:	07d0      	lsls	r0, r2, #31
 80b20e2:	bf5c      	itt	pl
 80b20e4:	2201      	movpl	r2, #1
 80b20e6:	601a      	strpl	r2, [r3, #0]
 80b20e8:	4b22      	ldr	r3, [pc, #136]	; (80b2174 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80b20ea:	681a      	ldr	r2, [r3, #0]
 80b20ec:	07d1      	lsls	r1, r2, #31
 80b20ee:	bf5c      	itt	pl
 80b20f0:	2201      	movpl	r2, #1
 80b20f2:	601a      	strpl	r2, [r3, #0]
 80b20f4:	4b20      	ldr	r3, [pc, #128]	; (80b2178 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80b20f6:	681a      	ldr	r2, [r3, #0]
 80b20f8:	07d2      	lsls	r2, r2, #31
 80b20fa:	bf5c      	itt	pl
 80b20fc:	2201      	movpl	r2, #1
 80b20fe:	601a      	strpl	r2, [r3, #0]
 80b2100:	4b1e      	ldr	r3, [pc, #120]	; (80b217c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80b2102:	681a      	ldr	r2, [r3, #0]
 80b2104:	07d0      	lsls	r0, r2, #31
 80b2106:	bf5c      	itt	pl
 80b2108:	2201      	movpl	r2, #1
 80b210a:	601a      	strpl	r2, [r3, #0]
 80b210c:	4b1c      	ldr	r3, [pc, #112]	; (80b2180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80b210e:	681a      	ldr	r2, [r3, #0]
 80b2110:	07d1      	lsls	r1, r2, #31
 80b2112:	bf5c      	itt	pl
 80b2114:	2201      	movpl	r2, #1
 80b2116:	601a      	strpl	r2, [r3, #0]
 80b2118:	4b1a      	ldr	r3, [pc, #104]	; (80b2184 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80b211a:	681a      	ldr	r2, [r3, #0]
 80b211c:	07d2      	lsls	r2, r2, #31
 80b211e:	bf5c      	itt	pl
 80b2120:	2201      	movpl	r2, #1
 80b2122:	601a      	strpl	r2, [r3, #0]
 80b2124:	4b18      	ldr	r3, [pc, #96]	; (80b2188 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80b2126:	681a      	ldr	r2, [r3, #0]
 80b2128:	07d0      	lsls	r0, r2, #31
 80b212a:	bf5c      	itt	pl
 80b212c:	2201      	movpl	r2, #1
 80b212e:	601a      	strpl	r2, [r3, #0]
 80b2130:	4b16      	ldr	r3, [pc, #88]	; (80b218c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80b2132:	681a      	ldr	r2, [r3, #0]
 80b2134:	07d1      	lsls	r1, r2, #31
 80b2136:	bf5c      	itt	pl
 80b2138:	2201      	movpl	r2, #1
 80b213a:	601a      	strpl	r2, [r3, #0]
 80b213c:	4b14      	ldr	r3, [pc, #80]	; (80b2190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80b213e:	681a      	ldr	r2, [r3, #0]
 80b2140:	07d2      	lsls	r2, r2, #31
 80b2142:	bf5c      	itt	pl
 80b2144:	2201      	movpl	r2, #1
 80b2146:	601a      	strpl	r2, [r3, #0]
 80b2148:	4b12      	ldr	r3, [pc, #72]	; (80b2194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80b214a:	681a      	ldr	r2, [r3, #0]
 80b214c:	07d0      	lsls	r0, r2, #31
 80b214e:	bf5c      	itt	pl
 80b2150:	2201      	movpl	r2, #1
 80b2152:	601a      	strpl	r2, [r3, #0]
 80b2154:	4b10      	ldr	r3, [pc, #64]	; (80b2198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80b2156:	681a      	ldr	r2, [r3, #0]
 80b2158:	07d1      	lsls	r1, r2, #31
 80b215a:	bf5c      	itt	pl
 80b215c:	2201      	movpl	r2, #1
 80b215e:	601a      	strpl	r2, [r3, #0]
 80b2160:	4b0e      	ldr	r3, [pc, #56]	; (80b219c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80b2162:	681a      	ldr	r2, [r3, #0]
 80b2164:	07d2      	lsls	r2, r2, #31
 80b2166:	bf5c      	itt	pl
 80b2168:	2201      	movpl	r2, #1
 80b216a:	601a      	strpl	r2, [r3, #0]
 80b216c:	4770      	bx	lr
 80b216e:	bf00      	nop
 80b2170:	2000392c 	.word	0x2000392c
 80b2174:	20003928 	.word	0x20003928
 80b2178:	20003924 	.word	0x20003924
 80b217c:	20003920 	.word	0x20003920
 80b2180:	2000391c 	.word	0x2000391c
 80b2184:	20003918 	.word	0x20003918
 80b2188:	20003914 	.word	0x20003914
 80b218c:	20003910 	.word	0x20003910
 80b2190:	2000390c 	.word	0x2000390c
 80b2194:	20003908 	.word	0x20003908
 80b2198:	20003904 	.word	0x20003904
 80b219c:	20003900 	.word	0x20003900

080b21a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80b21a0:	4b18      	ldr	r3, [pc, #96]	; (80b2204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80b21a2:	681a      	ldr	r2, [r3, #0]
 80b21a4:	07d1      	lsls	r1, r2, #31
 80b21a6:	bf5c      	itt	pl
 80b21a8:	2201      	movpl	r2, #1
 80b21aa:	601a      	strpl	r2, [r3, #0]
 80b21ac:	4b16      	ldr	r3, [pc, #88]	; (80b2208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80b21ae:	681a      	ldr	r2, [r3, #0]
 80b21b0:	07d2      	lsls	r2, r2, #31
 80b21b2:	bf5c      	itt	pl
 80b21b4:	2201      	movpl	r2, #1
 80b21b6:	601a      	strpl	r2, [r3, #0]
 80b21b8:	4b14      	ldr	r3, [pc, #80]	; (80b220c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80b21ba:	681a      	ldr	r2, [r3, #0]
 80b21bc:	07d0      	lsls	r0, r2, #31
 80b21be:	bf5c      	itt	pl
 80b21c0:	2201      	movpl	r2, #1
 80b21c2:	601a      	strpl	r2, [r3, #0]
 80b21c4:	4b12      	ldr	r3, [pc, #72]	; (80b2210 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80b21c6:	681a      	ldr	r2, [r3, #0]
 80b21c8:	07d1      	lsls	r1, r2, #31
 80b21ca:	bf5c      	itt	pl
 80b21cc:	2201      	movpl	r2, #1
 80b21ce:	601a      	strpl	r2, [r3, #0]
 80b21d0:	4b10      	ldr	r3, [pc, #64]	; (80b2214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80b21d2:	681a      	ldr	r2, [r3, #0]
 80b21d4:	07d2      	lsls	r2, r2, #31
 80b21d6:	bf5c      	itt	pl
 80b21d8:	2201      	movpl	r2, #1
 80b21da:	601a      	strpl	r2, [r3, #0]
 80b21dc:	4b0e      	ldr	r3, [pc, #56]	; (80b2218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80b21de:	681a      	ldr	r2, [r3, #0]
 80b21e0:	07d0      	lsls	r0, r2, #31
 80b21e2:	bf5c      	itt	pl
 80b21e4:	2201      	movpl	r2, #1
 80b21e6:	601a      	strpl	r2, [r3, #0]
 80b21e8:	4b0c      	ldr	r3, [pc, #48]	; (80b221c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80b21ea:	681a      	ldr	r2, [r3, #0]
 80b21ec:	07d1      	lsls	r1, r2, #31
 80b21ee:	bf5c      	itt	pl
 80b21f0:	2201      	movpl	r2, #1
 80b21f2:	601a      	strpl	r2, [r3, #0]
 80b21f4:	4b0a      	ldr	r3, [pc, #40]	; (80b2220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80b21f6:	681a      	ldr	r2, [r3, #0]
 80b21f8:	07d2      	lsls	r2, r2, #31
 80b21fa:	bf5c      	itt	pl
 80b21fc:	2201      	movpl	r2, #1
 80b21fe:	601a      	strpl	r2, [r3, #0]
 80b2200:	4770      	bx	lr
 80b2202:	bf00      	nop
 80b2204:	2000394c 	.word	0x2000394c
 80b2208:	20003948 	.word	0x20003948
 80b220c:	20003944 	.word	0x20003944
 80b2210:	20003940 	.word	0x20003940
 80b2214:	2000393c 	.word	0x2000393c
 80b2218:	20003938 	.word	0x20003938
 80b221c:	20003934 	.word	0x20003934
 80b2220:	20003930 	.word	0x20003930

080b2224 <__aeabi_uldivmod>:
 80b2224:	b953      	cbnz	r3, 80b223c <__aeabi_uldivmod+0x18>
 80b2226:	b94a      	cbnz	r2, 80b223c <__aeabi_uldivmod+0x18>
 80b2228:	2900      	cmp	r1, #0
 80b222a:	bf08      	it	eq
 80b222c:	2800      	cmpeq	r0, #0
 80b222e:	bf1c      	itt	ne
 80b2230:	f04f 31ff 	movne.w	r1, #4294967295
 80b2234:	f04f 30ff 	movne.w	r0, #4294967295
 80b2238:	f000 b982 	b.w	80b2540 <__aeabi_idiv0>
 80b223c:	f1ad 0c08 	sub.w	ip, sp, #8
 80b2240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80b2244:	f000 f806 	bl	80b2254 <__udivmoddi4>
 80b2248:	f8dd e004 	ldr.w	lr, [sp, #4]
 80b224c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80b2250:	b004      	add	sp, #16
 80b2252:	4770      	bx	lr

080b2254 <__udivmoddi4>:
 80b2254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80b2258:	468c      	mov	ip, r1
 80b225a:	460c      	mov	r4, r1
 80b225c:	4605      	mov	r5, r0
 80b225e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80b2260:	2b00      	cmp	r3, #0
 80b2262:	d14f      	bne.n	80b2304 <__udivmoddi4+0xb0>
 80b2264:	428a      	cmp	r2, r1
 80b2266:	4617      	mov	r7, r2
 80b2268:	d96b      	bls.n	80b2342 <__udivmoddi4+0xee>
 80b226a:	fab2 fe82 	clz	lr, r2
 80b226e:	f1be 0f00 	cmp.w	lr, #0
 80b2272:	d00b      	beq.n	80b228c <__udivmoddi4+0x38>
 80b2274:	f1ce 0520 	rsb	r5, lr, #32
 80b2278:	fa20 f505 	lsr.w	r5, r0, r5
 80b227c:	fa01 f30e 	lsl.w	r3, r1, lr
 80b2280:	ea45 0c03 	orr.w	ip, r5, r3
 80b2284:	fa02 f70e 	lsl.w	r7, r2, lr
 80b2288:	fa00 f50e 	lsl.w	r5, r0, lr
 80b228c:	0c39      	lsrs	r1, r7, #16
 80b228e:	fbbc f0f1 	udiv	r0, ip, r1
 80b2292:	b2ba      	uxth	r2, r7
 80b2294:	fb01 c310 	mls	r3, r1, r0, ip
 80b2298:	fb00 f802 	mul.w	r8, r0, r2
 80b229c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80b22a0:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80b22a4:	45a0      	cmp	r8, r4
 80b22a6:	d909      	bls.n	80b22bc <__udivmoddi4+0x68>
 80b22a8:	19e4      	adds	r4, r4, r7
 80b22aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80b22ae:	f080 8128 	bcs.w	80b2502 <__udivmoddi4+0x2ae>
 80b22b2:	45a0      	cmp	r8, r4
 80b22b4:	f240 8125 	bls.w	80b2502 <__udivmoddi4+0x2ae>
 80b22b8:	3802      	subs	r0, #2
 80b22ba:	443c      	add	r4, r7
 80b22bc:	ebc8 0404 	rsb	r4, r8, r4
 80b22c0:	fbb4 f3f1 	udiv	r3, r4, r1
 80b22c4:	fb01 4c13 	mls	ip, r1, r3, r4
 80b22c8:	fb03 f202 	mul.w	r2, r3, r2
 80b22cc:	b2ac      	uxth	r4, r5
 80b22ce:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80b22d2:	428a      	cmp	r2, r1
 80b22d4:	d909      	bls.n	80b22ea <__udivmoddi4+0x96>
 80b22d6:	19c9      	adds	r1, r1, r7
 80b22d8:	f103 34ff 	add.w	r4, r3, #4294967295
 80b22dc:	f080 810f 	bcs.w	80b24fe <__udivmoddi4+0x2aa>
 80b22e0:	428a      	cmp	r2, r1
 80b22e2:	f240 810c 	bls.w	80b24fe <__udivmoddi4+0x2aa>
 80b22e6:	3b02      	subs	r3, #2
 80b22e8:	4439      	add	r1, r7
 80b22ea:	1a8a      	subs	r2, r1, r2
 80b22ec:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80b22f0:	2100      	movs	r1, #0
 80b22f2:	2e00      	cmp	r6, #0
 80b22f4:	d063      	beq.n	80b23be <__udivmoddi4+0x16a>
 80b22f6:	fa22 f20e 	lsr.w	r2, r2, lr
 80b22fa:	2300      	movs	r3, #0
 80b22fc:	e886 000c 	stmia.w	r6, {r2, r3}
 80b2300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80b2304:	428b      	cmp	r3, r1
 80b2306:	d907      	bls.n	80b2318 <__udivmoddi4+0xc4>
 80b2308:	2e00      	cmp	r6, #0
 80b230a:	d056      	beq.n	80b23ba <__udivmoddi4+0x166>
 80b230c:	2100      	movs	r1, #0
 80b230e:	e886 0011 	stmia.w	r6, {r0, r4}
 80b2312:	4608      	mov	r0, r1
 80b2314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80b2318:	fab3 f183 	clz	r1, r3
 80b231c:	2900      	cmp	r1, #0
 80b231e:	f040 8093 	bne.w	80b2448 <__udivmoddi4+0x1f4>
 80b2322:	42a3      	cmp	r3, r4
 80b2324:	d302      	bcc.n	80b232c <__udivmoddi4+0xd8>
 80b2326:	4282      	cmp	r2, r0
 80b2328:	f200 80fe 	bhi.w	80b2528 <__udivmoddi4+0x2d4>
 80b232c:	1a85      	subs	r5, r0, r2
 80b232e:	eb64 0303 	sbc.w	r3, r4, r3
 80b2332:	469c      	mov	ip, r3
 80b2334:	2001      	movs	r0, #1
 80b2336:	2e00      	cmp	r6, #0
 80b2338:	d041      	beq.n	80b23be <__udivmoddi4+0x16a>
 80b233a:	e886 1020 	stmia.w	r6, {r5, ip}
 80b233e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80b2342:	b912      	cbnz	r2, 80b234a <__udivmoddi4+0xf6>
 80b2344:	2701      	movs	r7, #1
 80b2346:	fbb7 f7f2 	udiv	r7, r7, r2
 80b234a:	fab7 fe87 	clz	lr, r7
 80b234e:	f1be 0f00 	cmp.w	lr, #0
 80b2352:	d136      	bne.n	80b23c2 <__udivmoddi4+0x16e>
 80b2354:	1be4      	subs	r4, r4, r7
 80b2356:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80b235a:	fa1f f987 	uxth.w	r9, r7
 80b235e:	2101      	movs	r1, #1
 80b2360:	fbb4 f3f8 	udiv	r3, r4, r8
 80b2364:	fb08 4413 	mls	r4, r8, r3, r4
 80b2368:	fb09 f203 	mul.w	r2, r9, r3
 80b236c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80b2370:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80b2374:	42a2      	cmp	r2, r4
 80b2376:	d907      	bls.n	80b2388 <__udivmoddi4+0x134>
 80b2378:	19e4      	adds	r4, r4, r7
 80b237a:	f103 30ff 	add.w	r0, r3, #4294967295
 80b237e:	d202      	bcs.n	80b2386 <__udivmoddi4+0x132>
 80b2380:	42a2      	cmp	r2, r4
 80b2382:	f200 80d3 	bhi.w	80b252c <__udivmoddi4+0x2d8>
 80b2386:	4603      	mov	r3, r0
 80b2388:	1aa4      	subs	r4, r4, r2
 80b238a:	fbb4 f0f8 	udiv	r0, r4, r8
 80b238e:	fb08 4810 	mls	r8, r8, r0, r4
 80b2392:	fb09 f900 	mul.w	r9, r9, r0
 80b2396:	b2ac      	uxth	r4, r5
 80b2398:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80b239c:	4591      	cmp	r9, r2
 80b239e:	d907      	bls.n	80b23b0 <__udivmoddi4+0x15c>
 80b23a0:	19d2      	adds	r2, r2, r7
 80b23a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80b23a6:	d202      	bcs.n	80b23ae <__udivmoddi4+0x15a>
 80b23a8:	4591      	cmp	r9, r2
 80b23aa:	f200 80ba 	bhi.w	80b2522 <__udivmoddi4+0x2ce>
 80b23ae:	4620      	mov	r0, r4
 80b23b0:	ebc9 0202 	rsb	r2, r9, r2
 80b23b4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80b23b8:	e79b      	b.n	80b22f2 <__udivmoddi4+0x9e>
 80b23ba:	4631      	mov	r1, r6
 80b23bc:	4630      	mov	r0, r6
 80b23be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80b23c2:	fa07 f70e 	lsl.w	r7, r7, lr
 80b23c6:	f1ce 0c20 	rsb	ip, lr, #32
 80b23ca:	fa24 f30c 	lsr.w	r3, r4, ip
 80b23ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80b23d2:	fbb3 faf8 	udiv	sl, r3, r8
 80b23d6:	fa1f f987 	uxth.w	r9, r7
 80b23da:	fb08 351a 	mls	r5, r8, sl, r3
 80b23de:	fa20 fc0c 	lsr.w	ip, r0, ip
 80b23e2:	fa04 f40e 	lsl.w	r4, r4, lr
 80b23e6:	fb0a fb09 	mul.w	fp, sl, r9
 80b23ea:	ea4c 0c04 	orr.w	ip, ip, r4
 80b23ee:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80b23f2:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80b23f6:	459b      	cmp	fp, r3
 80b23f8:	fa00 f50e 	lsl.w	r5, r0, lr
 80b23fc:	d90a      	bls.n	80b2414 <__udivmoddi4+0x1c0>
 80b23fe:	19db      	adds	r3, r3, r7
 80b2400:	f10a 32ff 	add.w	r2, sl, #4294967295
 80b2404:	f080 808b 	bcs.w	80b251e <__udivmoddi4+0x2ca>
 80b2408:	459b      	cmp	fp, r3
 80b240a:	f240 8088 	bls.w	80b251e <__udivmoddi4+0x2ca>
 80b240e:	f1aa 0a02 	sub.w	sl, sl, #2
 80b2412:	443b      	add	r3, r7
 80b2414:	ebcb 0303 	rsb	r3, fp, r3
 80b2418:	fbb3 f0f8 	udiv	r0, r3, r8
 80b241c:	fb08 3310 	mls	r3, r8, r0, r3
 80b2420:	fb00 f409 	mul.w	r4, r0, r9
 80b2424:	fa1f fc8c 	uxth.w	ip, ip
 80b2428:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80b242c:	429c      	cmp	r4, r3
 80b242e:	d907      	bls.n	80b2440 <__udivmoddi4+0x1ec>
 80b2430:	19db      	adds	r3, r3, r7
 80b2432:	f100 32ff 	add.w	r2, r0, #4294967295
 80b2436:	d26e      	bcs.n	80b2516 <__udivmoddi4+0x2c2>
 80b2438:	429c      	cmp	r4, r3
 80b243a:	d96c      	bls.n	80b2516 <__udivmoddi4+0x2c2>
 80b243c:	3802      	subs	r0, #2
 80b243e:	443b      	add	r3, r7
 80b2440:	1b1c      	subs	r4, r3, r4
 80b2442:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80b2446:	e78b      	b.n	80b2360 <__udivmoddi4+0x10c>
 80b2448:	f1c1 0e20 	rsb	lr, r1, #32
 80b244c:	408b      	lsls	r3, r1
 80b244e:	fa22 fc0e 	lsr.w	ip, r2, lr
 80b2452:	ea4c 0c03 	orr.w	ip, ip, r3
 80b2456:	fa24 f70e 	lsr.w	r7, r4, lr
 80b245a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80b245e:	fbb7 faf9 	udiv	sl, r7, r9
 80b2462:	fa1f f38c 	uxth.w	r3, ip
 80b2466:	fb09 771a 	mls	r7, r9, sl, r7
 80b246a:	fa20 f80e 	lsr.w	r8, r0, lr
 80b246e:	408c      	lsls	r4, r1
 80b2470:	fb0a f503 	mul.w	r5, sl, r3
 80b2474:	ea48 0404 	orr.w	r4, r8, r4
 80b2478:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80b247c:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80b2480:	42bd      	cmp	r5, r7
 80b2482:	fa02 f201 	lsl.w	r2, r2, r1
 80b2486:	fa00 fb01 	lsl.w	fp, r0, r1
 80b248a:	d909      	bls.n	80b24a0 <__udivmoddi4+0x24c>
 80b248c:	eb17 070c 	adds.w	r7, r7, ip
 80b2490:	f10a 30ff 	add.w	r0, sl, #4294967295
 80b2494:	d241      	bcs.n	80b251a <__udivmoddi4+0x2c6>
 80b2496:	42bd      	cmp	r5, r7
 80b2498:	d93f      	bls.n	80b251a <__udivmoddi4+0x2c6>
 80b249a:	f1aa 0a02 	sub.w	sl, sl, #2
 80b249e:	4467      	add	r7, ip
 80b24a0:	1b7f      	subs	r7, r7, r5
 80b24a2:	fbb7 f5f9 	udiv	r5, r7, r9
 80b24a6:	fb09 7715 	mls	r7, r9, r5, r7
 80b24aa:	fb05 f303 	mul.w	r3, r5, r3
 80b24ae:	b2a4      	uxth	r4, r4
 80b24b0:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80b24b4:	42bb      	cmp	r3, r7
 80b24b6:	d908      	bls.n	80b24ca <__udivmoddi4+0x276>
 80b24b8:	eb17 070c 	adds.w	r7, r7, ip
 80b24bc:	f105 30ff 	add.w	r0, r5, #4294967295
 80b24c0:	d227      	bcs.n	80b2512 <__udivmoddi4+0x2be>
 80b24c2:	42bb      	cmp	r3, r7
 80b24c4:	d925      	bls.n	80b2512 <__udivmoddi4+0x2be>
 80b24c6:	3d02      	subs	r5, #2
 80b24c8:	4467      	add	r7, ip
 80b24ca:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80b24ce:	fba0 8902 	umull	r8, r9, r0, r2
 80b24d2:	1aff      	subs	r7, r7, r3
 80b24d4:	454f      	cmp	r7, r9
 80b24d6:	4645      	mov	r5, r8
 80b24d8:	464c      	mov	r4, r9
 80b24da:	d314      	bcc.n	80b2506 <__udivmoddi4+0x2b2>
 80b24dc:	d029      	beq.n	80b2532 <__udivmoddi4+0x2de>
 80b24de:	b366      	cbz	r6, 80b253a <__udivmoddi4+0x2e6>
 80b24e0:	ebbb 0305 	subs.w	r3, fp, r5
 80b24e4:	eb67 0704 	sbc.w	r7, r7, r4
 80b24e8:	fa07 fe0e 	lsl.w	lr, r7, lr
 80b24ec:	40cb      	lsrs	r3, r1
 80b24ee:	40cf      	lsrs	r7, r1
 80b24f0:	ea4e 0303 	orr.w	r3, lr, r3
 80b24f4:	e886 0088 	stmia.w	r6, {r3, r7}
 80b24f8:	2100      	movs	r1, #0
 80b24fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80b24fe:	4623      	mov	r3, r4
 80b2500:	e6f3      	b.n	80b22ea <__udivmoddi4+0x96>
 80b2502:	4618      	mov	r0, r3
 80b2504:	e6da      	b.n	80b22bc <__udivmoddi4+0x68>
 80b2506:	ebb8 0502 	subs.w	r5, r8, r2
 80b250a:	eb69 040c 	sbc.w	r4, r9, ip
 80b250e:	3801      	subs	r0, #1
 80b2510:	e7e5      	b.n	80b24de <__udivmoddi4+0x28a>
 80b2512:	4605      	mov	r5, r0
 80b2514:	e7d9      	b.n	80b24ca <__udivmoddi4+0x276>
 80b2516:	4610      	mov	r0, r2
 80b2518:	e792      	b.n	80b2440 <__udivmoddi4+0x1ec>
 80b251a:	4682      	mov	sl, r0
 80b251c:	e7c0      	b.n	80b24a0 <__udivmoddi4+0x24c>
 80b251e:	4692      	mov	sl, r2
 80b2520:	e778      	b.n	80b2414 <__udivmoddi4+0x1c0>
 80b2522:	3802      	subs	r0, #2
 80b2524:	443a      	add	r2, r7
 80b2526:	e743      	b.n	80b23b0 <__udivmoddi4+0x15c>
 80b2528:	4608      	mov	r0, r1
 80b252a:	e704      	b.n	80b2336 <__udivmoddi4+0xe2>
 80b252c:	3b02      	subs	r3, #2
 80b252e:	443c      	add	r4, r7
 80b2530:	e72a      	b.n	80b2388 <__udivmoddi4+0x134>
 80b2532:	45c3      	cmp	fp, r8
 80b2534:	d3e7      	bcc.n	80b2506 <__udivmoddi4+0x2b2>
 80b2536:	463c      	mov	r4, r7
 80b2538:	e7d1      	b.n	80b24de <__udivmoddi4+0x28a>
 80b253a:	4631      	mov	r1, r6
 80b253c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080b2540 <__aeabi_idiv0>:
 80b2540:	4770      	bx	lr
 80b2542:	bf00      	nop

080b2544 <asctime>:
 80b2544:	4b09      	ldr	r3, [pc, #36]	; (80b256c <asctime+0x28>)
 80b2546:	b570      	push	{r4, r5, r6, lr}
 80b2548:	681c      	ldr	r4, [r3, #0]
 80b254a:	4606      	mov	r6, r0
 80b254c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80b254e:	b93d      	cbnz	r5, 80b2560 <asctime+0x1c>
 80b2550:	201a      	movs	r0, #26
 80b2552:	f7fe fdc1 	bl	80b10d8 <malloc>
 80b2556:	221a      	movs	r2, #26
 80b2558:	6420      	str	r0, [r4, #64]	; 0x40
 80b255a:	4629      	mov	r1, r5
 80b255c:	f000 f971 	bl	80b2842 <memset>
 80b2560:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80b2562:	4630      	mov	r0, r6
 80b2564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80b2568:	f000 b802 	b.w	80b2570 <asctime_r>
 80b256c:	200000a4 	.word	0x200000a4

080b2570 <asctime_r>:
 80b2570:	b510      	push	{r4, lr}
 80b2572:	460c      	mov	r4, r1
 80b2574:	6941      	ldr	r1, [r0, #20]
 80b2576:	b086      	sub	sp, #24
 80b2578:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80b257c:	6903      	ldr	r3, [r0, #16]
 80b257e:	6982      	ldr	r2, [r0, #24]
 80b2580:	9104      	str	r1, [sp, #16]
 80b2582:	6801      	ldr	r1, [r0, #0]
 80b2584:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80b2588:	9103      	str	r1, [sp, #12]
 80b258a:	6841      	ldr	r1, [r0, #4]
 80b258c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80b2590:	9102      	str	r1, [sp, #8]
 80b2592:	6881      	ldr	r1, [r0, #8]
 80b2594:	9101      	str	r1, [sp, #4]
 80b2596:	68c1      	ldr	r1, [r0, #12]
 80b2598:	4620      	mov	r0, r4
 80b259a:	9100      	str	r1, [sp, #0]
 80b259c:	4904      	ldr	r1, [pc, #16]	; (80b25b0 <asctime_r+0x40>)
 80b259e:	440b      	add	r3, r1
 80b25a0:	4904      	ldr	r1, [pc, #16]	; (80b25b4 <asctime_r+0x44>)
 80b25a2:	440a      	add	r2, r1
 80b25a4:	4904      	ldr	r1, [pc, #16]	; (80b25b8 <asctime_r+0x48>)
 80b25a6:	f7fe fdaf 	bl	80b1108 <siprintf>
 80b25aa:	4620      	mov	r0, r4
 80b25ac:	b006      	add	sp, #24
 80b25ae:	bd10      	pop	{r4, pc}
 80b25b0:	080b62d5 	.word	0x080b62d5
 80b25b4:	080b62c0 	.word	0x080b62c0
 80b25b8:	080b62f9 	.word	0x080b62f9

080b25bc <calloc>:
 80b25bc:	4b02      	ldr	r3, [pc, #8]	; (80b25c8 <calloc+0xc>)
 80b25be:	460a      	mov	r2, r1
 80b25c0:	4601      	mov	r1, r0
 80b25c2:	6818      	ldr	r0, [r3, #0]
 80b25c4:	f000 b945 	b.w	80b2852 <_calloc_r>
 80b25c8:	200000a4 	.word	0x200000a4

080b25cc <__cxa_atexit>:
 80b25cc:	b510      	push	{r4, lr}
 80b25ce:	4c05      	ldr	r4, [pc, #20]	; (80b25e4 <__cxa_atexit+0x18>)
 80b25d0:	4613      	mov	r3, r2
 80b25d2:	b12c      	cbz	r4, 80b25e0 <__cxa_atexit+0x14>
 80b25d4:	460a      	mov	r2, r1
 80b25d6:	4601      	mov	r1, r0
 80b25d8:	2002      	movs	r0, #2
 80b25da:	f3af 8000 	nop.w
 80b25de:	bd10      	pop	{r4, pc}
 80b25e0:	4620      	mov	r0, r4
 80b25e2:	bd10      	pop	{r4, pc}
 80b25e4:	00000000 	.word	0x00000000

080b25e8 <localtime>:
 80b25e8:	b538      	push	{r3, r4, r5, lr}
 80b25ea:	4b07      	ldr	r3, [pc, #28]	; (80b2608 <localtime+0x20>)
 80b25ec:	4605      	mov	r5, r0
 80b25ee:	681c      	ldr	r4, [r3, #0]
 80b25f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80b25f2:	b91b      	cbnz	r3, 80b25fc <localtime+0x14>
 80b25f4:	2024      	movs	r0, #36	; 0x24
 80b25f6:	f7fe fd6f 	bl	80b10d8 <malloc>
 80b25fa:	63e0      	str	r0, [r4, #60]	; 0x3c
 80b25fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80b25fe:	4628      	mov	r0, r5
 80b2600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80b2604:	f000 b802 	b.w	80b260c <localtime_r>
 80b2608:	200000a4 	.word	0x200000a4

080b260c <localtime_r>:
 80b260c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80b2610:	460c      	mov	r4, r1
 80b2612:	4680      	mov	r8, r0
 80b2614:	f000 fcb4 	bl	80b2f80 <__gettzinfo>
 80b2618:	4621      	mov	r1, r4
 80b261a:	4607      	mov	r7, r0
 80b261c:	4640      	mov	r0, r8
 80b261e:	f000 fcb3 	bl	80b2f88 <gmtime_r>
 80b2622:	6946      	ldr	r6, [r0, #20]
 80b2624:	4604      	mov	r4, r0
 80b2626:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80b262a:	07b3      	lsls	r3, r6, #30
 80b262c:	d105      	bne.n	80b263a <localtime_r+0x2e>
 80b262e:	2264      	movs	r2, #100	; 0x64
 80b2630:	fb96 f3f2 	sdiv	r3, r6, r2
 80b2634:	fb02 6313 	mls	r3, r2, r3, r6
 80b2638:	b94b      	cbnz	r3, 80b264e <localtime_r+0x42>
 80b263a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80b263e:	fb96 f3f5 	sdiv	r3, r6, r5
 80b2642:	fb05 6513 	mls	r5, r5, r3, r6
 80b2646:	fab5 f385 	clz	r3, r5
 80b264a:	095b      	lsrs	r3, r3, #5
 80b264c:	e000      	b.n	80b2650 <localtime_r+0x44>
 80b264e:	2301      	movs	r3, #1
 80b2650:	4a5f      	ldr	r2, [pc, #380]	; (80b27d0 <localtime_r+0x1c4>)
 80b2652:	2530      	movs	r5, #48	; 0x30
 80b2654:	fb05 2503 	mla	r5, r5, r3, r2
 80b2658:	f000 fab4 	bl	80b2bc4 <__tz_lock>
 80b265c:	f000 fab4 	bl	80b2bc8 <_tzset_unlocked>
 80b2660:	4b5c      	ldr	r3, [pc, #368]	; (80b27d4 <localtime_r+0x1c8>)
 80b2662:	681b      	ldr	r3, [r3, #0]
 80b2664:	b1f3      	cbz	r3, 80b26a4 <localtime_r+0x98>
 80b2666:	687b      	ldr	r3, [r7, #4]
 80b2668:	429e      	cmp	r6, r3
 80b266a:	d105      	bne.n	80b2678 <localtime_r+0x6c>
 80b266c:	6839      	ldr	r1, [r7, #0]
 80b266e:	f8d8 3000 	ldr.w	r3, [r8]
 80b2672:	69fa      	ldr	r2, [r7, #28]
 80b2674:	b941      	cbnz	r1, 80b2688 <localtime_r+0x7c>
 80b2676:	e00a      	b.n	80b268e <localtime_r+0x82>
 80b2678:	4630      	mov	r0, r6
 80b267a:	f000 f9fb 	bl	80b2a74 <__tzcalc_limits>
 80b267e:	2800      	cmp	r0, #0
 80b2680:	d1f4      	bne.n	80b266c <localtime_r+0x60>
 80b2682:	f04f 33ff 	mov.w	r3, #4294967295
 80b2686:	e00d      	b.n	80b26a4 <localtime_r+0x98>
 80b2688:	4293      	cmp	r3, r2
 80b268a:	db08      	blt.n	80b269e <localtime_r+0x92>
 80b268c:	e001      	b.n	80b2692 <localtime_r+0x86>
 80b268e:	4293      	cmp	r3, r2
 80b2690:	da07      	bge.n	80b26a2 <localtime_r+0x96>
 80b2692:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80b2694:	4293      	cmp	r3, r2
 80b2696:	bfac      	ite	ge
 80b2698:	2300      	movge	r3, #0
 80b269a:	2301      	movlt	r3, #1
 80b269c:	e002      	b.n	80b26a4 <localtime_r+0x98>
 80b269e:	2300      	movs	r3, #0
 80b26a0:	e000      	b.n	80b26a4 <localtime_r+0x98>
 80b26a2:	2301      	movs	r3, #1
 80b26a4:	6223      	str	r3, [r4, #32]
 80b26a6:	6a23      	ldr	r3, [r4, #32]
 80b26a8:	203c      	movs	r0, #60	; 0x3c
 80b26aa:	2b01      	cmp	r3, #1
 80b26ac:	bf0c      	ite	eq
 80b26ae:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80b26b0:	6a39      	ldrne	r1, [r7, #32]
 80b26b2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80b26b6:	fb91 f6f3 	sdiv	r6, r1, r3
 80b26ba:	fb03 1316 	mls	r3, r3, r6, r1
 80b26be:	fb93 f2f0 	sdiv	r2, r3, r0
 80b26c2:	fb00 3012 	mls	r0, r0, r2, r3
 80b26c6:	6861      	ldr	r1, [r4, #4]
 80b26c8:	6823      	ldr	r3, [r4, #0]
 80b26ca:	1a89      	subs	r1, r1, r2
 80b26cc:	68a2      	ldr	r2, [r4, #8]
 80b26ce:	1a1b      	subs	r3, r3, r0
 80b26d0:	1b92      	subs	r2, r2, r6
 80b26d2:	2b3b      	cmp	r3, #59	; 0x3b
 80b26d4:	6023      	str	r3, [r4, #0]
 80b26d6:	6061      	str	r1, [r4, #4]
 80b26d8:	60a2      	str	r2, [r4, #8]
 80b26da:	dd03      	ble.n	80b26e4 <localtime_r+0xd8>
 80b26dc:	3101      	adds	r1, #1
 80b26de:	6061      	str	r1, [r4, #4]
 80b26e0:	3b3c      	subs	r3, #60	; 0x3c
 80b26e2:	e004      	b.n	80b26ee <localtime_r+0xe2>
 80b26e4:	2b00      	cmp	r3, #0
 80b26e6:	da03      	bge.n	80b26f0 <localtime_r+0xe4>
 80b26e8:	3901      	subs	r1, #1
 80b26ea:	6061      	str	r1, [r4, #4]
 80b26ec:	333c      	adds	r3, #60	; 0x3c
 80b26ee:	6023      	str	r3, [r4, #0]
 80b26f0:	6863      	ldr	r3, [r4, #4]
 80b26f2:	2b3b      	cmp	r3, #59	; 0x3b
 80b26f4:	dd03      	ble.n	80b26fe <localtime_r+0xf2>
 80b26f6:	3201      	adds	r2, #1
 80b26f8:	60a2      	str	r2, [r4, #8]
 80b26fa:	3b3c      	subs	r3, #60	; 0x3c
 80b26fc:	e004      	b.n	80b2708 <localtime_r+0xfc>
 80b26fe:	2b00      	cmp	r3, #0
 80b2700:	da03      	bge.n	80b270a <localtime_r+0xfe>
 80b2702:	3a01      	subs	r2, #1
 80b2704:	60a2      	str	r2, [r4, #8]
 80b2706:	333c      	adds	r3, #60	; 0x3c
 80b2708:	6063      	str	r3, [r4, #4]
 80b270a:	68a3      	ldr	r3, [r4, #8]
 80b270c:	2b17      	cmp	r3, #23
 80b270e:	dd22      	ble.n	80b2756 <localtime_r+0x14a>
 80b2710:	69e2      	ldr	r2, [r4, #28]
 80b2712:	3b18      	subs	r3, #24
 80b2714:	3201      	adds	r2, #1
 80b2716:	61e2      	str	r2, [r4, #28]
 80b2718:	69a2      	ldr	r2, [r4, #24]
 80b271a:	60a3      	str	r3, [r4, #8]
 80b271c:	3201      	adds	r2, #1
 80b271e:	2a06      	cmp	r2, #6
 80b2720:	bfc8      	it	gt
 80b2722:	2200      	movgt	r2, #0
 80b2724:	61a2      	str	r2, [r4, #24]
 80b2726:	68e2      	ldr	r2, [r4, #12]
 80b2728:	6923      	ldr	r3, [r4, #16]
 80b272a:	3201      	adds	r2, #1
 80b272c:	60e2      	str	r2, [r4, #12]
 80b272e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80b2732:	428a      	cmp	r2, r1
 80b2734:	dd46      	ble.n	80b27c4 <localtime_r+0x1b8>
 80b2736:	3301      	adds	r3, #1
 80b2738:	2b0c      	cmp	r3, #12
 80b273a:	bf08      	it	eq
 80b273c:	6963      	ldreq	r3, [r4, #20]
 80b273e:	eba2 0201 	sub.w	r2, r2, r1
 80b2742:	60e2      	str	r2, [r4, #12]
 80b2744:	bf05      	ittet	eq
 80b2746:	3301      	addeq	r3, #1
 80b2748:	2200      	moveq	r2, #0
 80b274a:	6123      	strne	r3, [r4, #16]
 80b274c:	6122      	streq	r2, [r4, #16]
 80b274e:	bf04      	itt	eq
 80b2750:	6163      	streq	r3, [r4, #20]
 80b2752:	61e2      	streq	r2, [r4, #28]
 80b2754:	e036      	b.n	80b27c4 <localtime_r+0x1b8>
 80b2756:	2b00      	cmp	r3, #0
 80b2758:	da34      	bge.n	80b27c4 <localtime_r+0x1b8>
 80b275a:	69e2      	ldr	r2, [r4, #28]
 80b275c:	3318      	adds	r3, #24
 80b275e:	3a01      	subs	r2, #1
 80b2760:	61e2      	str	r2, [r4, #28]
 80b2762:	69a2      	ldr	r2, [r4, #24]
 80b2764:	60a3      	str	r3, [r4, #8]
 80b2766:	3a01      	subs	r2, #1
 80b2768:	bf48      	it	mi
 80b276a:	2206      	movmi	r2, #6
 80b276c:	61a2      	str	r2, [r4, #24]
 80b276e:	68e2      	ldr	r2, [r4, #12]
 80b2770:	3a01      	subs	r2, #1
 80b2772:	60e2      	str	r2, [r4, #12]
 80b2774:	bb32      	cbnz	r2, 80b27c4 <localtime_r+0x1b8>
 80b2776:	6923      	ldr	r3, [r4, #16]
 80b2778:	3b01      	subs	r3, #1
 80b277a:	d401      	bmi.n	80b2780 <localtime_r+0x174>
 80b277c:	6123      	str	r3, [r4, #16]
 80b277e:	e01d      	b.n	80b27bc <localtime_r+0x1b0>
 80b2780:	230b      	movs	r3, #11
 80b2782:	6123      	str	r3, [r4, #16]
 80b2784:	6963      	ldr	r3, [r4, #20]
 80b2786:	1e5a      	subs	r2, r3, #1
 80b2788:	f012 0f03 	tst.w	r2, #3
 80b278c:	6162      	str	r2, [r4, #20]
 80b278e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80b2792:	d105      	bne.n	80b27a0 <localtime_r+0x194>
 80b2794:	2164      	movs	r1, #100	; 0x64
 80b2796:	fb93 f2f1 	sdiv	r2, r3, r1
 80b279a:	fb01 3212 	mls	r2, r1, r2, r3
 80b279e:	b94a      	cbnz	r2, 80b27b4 <localtime_r+0x1a8>
 80b27a0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80b27a4:	fb93 f2f1 	sdiv	r2, r3, r1
 80b27a8:	fb01 3312 	mls	r3, r1, r2, r3
 80b27ac:	fab3 f383 	clz	r3, r3
 80b27b0:	095b      	lsrs	r3, r3, #5
 80b27b2:	e000      	b.n	80b27b6 <localtime_r+0x1aa>
 80b27b4:	2301      	movs	r3, #1
 80b27b6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80b27ba:	61e3      	str	r3, [r4, #28]
 80b27bc:	6923      	ldr	r3, [r4, #16]
 80b27be:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80b27c2:	60e3      	str	r3, [r4, #12]
 80b27c4:	f000 f9ff 	bl	80b2bc6 <__tz_unlock>
 80b27c8:	4620      	mov	r0, r4
 80b27ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80b27ce:	bf00      	nop
 80b27d0:	080b647c 	.word	0x080b647c
 80b27d4:	2000396c 	.word	0x2000396c

080b27d8 <memcmp>:
 80b27d8:	b510      	push	{r4, lr}
 80b27da:	3901      	subs	r1, #1
 80b27dc:	4402      	add	r2, r0
 80b27de:	4290      	cmp	r0, r2
 80b27e0:	d007      	beq.n	80b27f2 <memcmp+0x1a>
 80b27e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80b27e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80b27ea:	42a3      	cmp	r3, r4
 80b27ec:	d0f7      	beq.n	80b27de <memcmp+0x6>
 80b27ee:	1b18      	subs	r0, r3, r4
 80b27f0:	bd10      	pop	{r4, pc}
 80b27f2:	2000      	movs	r0, #0
 80b27f4:	bd10      	pop	{r4, pc}

080b27f6 <memcpy>:
 80b27f6:	b510      	push	{r4, lr}
 80b27f8:	1e43      	subs	r3, r0, #1
 80b27fa:	440a      	add	r2, r1
 80b27fc:	4291      	cmp	r1, r2
 80b27fe:	d004      	beq.n	80b280a <memcpy+0x14>
 80b2800:	f811 4b01 	ldrb.w	r4, [r1], #1
 80b2804:	f803 4f01 	strb.w	r4, [r3, #1]!
 80b2808:	e7f8      	b.n	80b27fc <memcpy+0x6>
 80b280a:	bd10      	pop	{r4, pc}

080b280c <memmove>:
 80b280c:	4288      	cmp	r0, r1
 80b280e:	b510      	push	{r4, lr}
 80b2810:	eb01 0302 	add.w	r3, r1, r2
 80b2814:	d801      	bhi.n	80b281a <memmove+0xe>
 80b2816:	1e42      	subs	r2, r0, #1
 80b2818:	e00b      	b.n	80b2832 <memmove+0x26>
 80b281a:	4298      	cmp	r0, r3
 80b281c:	d2fb      	bcs.n	80b2816 <memmove+0xa>
 80b281e:	1881      	adds	r1, r0, r2
 80b2820:	1ad2      	subs	r2, r2, r3
 80b2822:	42d3      	cmn	r3, r2
 80b2824:	d004      	beq.n	80b2830 <memmove+0x24>
 80b2826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80b282a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80b282e:	e7f8      	b.n	80b2822 <memmove+0x16>
 80b2830:	bd10      	pop	{r4, pc}
 80b2832:	4299      	cmp	r1, r3
 80b2834:	d004      	beq.n	80b2840 <memmove+0x34>
 80b2836:	f811 4b01 	ldrb.w	r4, [r1], #1
 80b283a:	f802 4f01 	strb.w	r4, [r2, #1]!
 80b283e:	e7f8      	b.n	80b2832 <memmove+0x26>
 80b2840:	bd10      	pop	{r4, pc}

080b2842 <memset>:
 80b2842:	4603      	mov	r3, r0
 80b2844:	4402      	add	r2, r0
 80b2846:	4293      	cmp	r3, r2
 80b2848:	d002      	beq.n	80b2850 <memset+0xe>
 80b284a:	f803 1b01 	strb.w	r1, [r3], #1
 80b284e:	e7fa      	b.n	80b2846 <memset+0x4>
 80b2850:	4770      	bx	lr

080b2852 <_calloc_r>:
 80b2852:	b538      	push	{r3, r4, r5, lr}
 80b2854:	fb02 f401 	mul.w	r4, r2, r1
 80b2858:	4621      	mov	r1, r4
 80b285a:	f7fe fc6d 	bl	80b1138 <_malloc_r>
 80b285e:	4605      	mov	r5, r0
 80b2860:	b118      	cbz	r0, 80b286a <_calloc_r+0x18>
 80b2862:	4622      	mov	r2, r4
 80b2864:	2100      	movs	r1, #0
 80b2866:	f7ff ffec 	bl	80b2842 <memset>
 80b286a:	4628      	mov	r0, r5
 80b286c:	bd38      	pop	{r3, r4, r5, pc}
	...

080b2870 <srand>:
 80b2870:	b538      	push	{r3, r4, r5, lr}
 80b2872:	4b12      	ldr	r3, [pc, #72]	; (80b28bc <srand+0x4c>)
 80b2874:	4605      	mov	r5, r0
 80b2876:	681c      	ldr	r4, [r3, #0]
 80b2878:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80b287a:	b9d3      	cbnz	r3, 80b28b2 <srand+0x42>
 80b287c:	2018      	movs	r0, #24
 80b287e:	f7fe fc2b 	bl	80b10d8 <malloc>
 80b2882:	f243 330e 	movw	r3, #13070	; 0x330e
 80b2886:	63a0      	str	r0, [r4, #56]	; 0x38
 80b2888:	8003      	strh	r3, [r0, #0]
 80b288a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80b288e:	8043      	strh	r3, [r0, #2]
 80b2890:	f241 2334 	movw	r3, #4660	; 0x1234
 80b2894:	8083      	strh	r3, [r0, #4]
 80b2896:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80b289a:	80c3      	strh	r3, [r0, #6]
 80b289c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80b28a0:	8103      	strh	r3, [r0, #8]
 80b28a2:	2305      	movs	r3, #5
 80b28a4:	8143      	strh	r3, [r0, #10]
 80b28a6:	230b      	movs	r3, #11
 80b28a8:	8183      	strh	r3, [r0, #12]
 80b28aa:	2201      	movs	r2, #1
 80b28ac:	2300      	movs	r3, #0
 80b28ae:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80b28b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80b28b4:	2200      	movs	r2, #0
 80b28b6:	611d      	str	r5, [r3, #16]
 80b28b8:	615a      	str	r2, [r3, #20]
 80b28ba:	bd38      	pop	{r3, r4, r5, pc}
 80b28bc:	200000a4 	.word	0x200000a4

080b28c0 <strcmp>:
 80b28c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80b28c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80b28c8:	2a01      	cmp	r2, #1
 80b28ca:	bf28      	it	cs
 80b28cc:	429a      	cmpcs	r2, r3
 80b28ce:	d0f7      	beq.n	80b28c0 <strcmp>
 80b28d0:	1ad0      	subs	r0, r2, r3
 80b28d2:	4770      	bx	lr

080b28d4 <strcpy>:
 80b28d4:	4603      	mov	r3, r0
 80b28d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80b28da:	f803 2b01 	strb.w	r2, [r3], #1
 80b28de:	2a00      	cmp	r2, #0
 80b28e0:	d1f9      	bne.n	80b28d6 <strcpy+0x2>
 80b28e2:	4770      	bx	lr

080b28e4 <strlen>:
 80b28e4:	4603      	mov	r3, r0
 80b28e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80b28ea:	2a00      	cmp	r2, #0
 80b28ec:	d1fb      	bne.n	80b28e6 <strlen+0x2>
 80b28ee:	1a18      	subs	r0, r3, r0
 80b28f0:	3801      	subs	r0, #1
 80b28f2:	4770      	bx	lr

080b28f4 <strncmp>:
 80b28f4:	b530      	push	{r4, r5, lr}
 80b28f6:	b182      	cbz	r2, 80b291a <strncmp+0x26>
 80b28f8:	1e45      	subs	r5, r0, #1
 80b28fa:	3901      	subs	r1, #1
 80b28fc:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80b2900:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80b2904:	42a3      	cmp	r3, r4
 80b2906:	d106      	bne.n	80b2916 <strncmp+0x22>
 80b2908:	43ec      	mvns	r4, r5
 80b290a:	4414      	add	r4, r2
 80b290c:	42e0      	cmn	r0, r4
 80b290e:	d001      	beq.n	80b2914 <strncmp+0x20>
 80b2910:	2b00      	cmp	r3, #0
 80b2912:	d1f3      	bne.n	80b28fc <strncmp+0x8>
 80b2914:	461c      	mov	r4, r3
 80b2916:	1b18      	subs	r0, r3, r4
 80b2918:	bd30      	pop	{r4, r5, pc}
 80b291a:	4610      	mov	r0, r2
 80b291c:	bd30      	pop	{r4, r5, pc}

080b291e <strstr>:
 80b291e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80b2920:	7803      	ldrb	r3, [r0, #0]
 80b2922:	b963      	cbnz	r3, 80b293e <strstr+0x20>
 80b2924:	780b      	ldrb	r3, [r1, #0]
 80b2926:	2b00      	cmp	r3, #0
 80b2928:	bf18      	it	ne
 80b292a:	2000      	movne	r0, #0
 80b292c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80b292e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80b2932:	b162      	cbz	r2, 80b294e <strstr+0x30>
 80b2934:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 80b2938:	4630      	mov	r0, r6
 80b293a:	4297      	cmp	r7, r2
 80b293c:	d0f7      	beq.n	80b292e <strstr+0x10>
 80b293e:	4603      	mov	r3, r0
 80b2940:	1c46      	adds	r6, r0, #1
 80b2942:	7800      	ldrb	r0, [r0, #0]
 80b2944:	b110      	cbz	r0, 80b294c <strstr+0x2e>
 80b2946:	1e4d      	subs	r5, r1, #1
 80b2948:	1e5c      	subs	r4, r3, #1
 80b294a:	e7f0      	b.n	80b292e <strstr+0x10>
 80b294c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80b294e:	4618      	mov	r0, r3
 80b2950:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080b2954 <_strtoul_r>:
 80b2954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80b2958:	460e      	mov	r6, r1
 80b295a:	4680      	mov	r8, r0
 80b295c:	483b      	ldr	r0, [pc, #236]	; (80b2a4c <_strtoul_r+0xf8>)
 80b295e:	f8d0 9000 	ldr.w	r9, [r0]
 80b2962:	4635      	mov	r5, r6
 80b2964:	f815 4b01 	ldrb.w	r4, [r5], #1
 80b2968:	eb09 0004 	add.w	r0, r9, r4
 80b296c:	7840      	ldrb	r0, [r0, #1]
 80b296e:	f000 0008 	and.w	r0, r0, #8
 80b2972:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80b2976:	b108      	cbz	r0, 80b297c <_strtoul_r+0x28>
 80b2978:	462e      	mov	r6, r5
 80b297a:	e7f2      	b.n	80b2962 <_strtoul_r+0xe>
 80b297c:	2c2d      	cmp	r4, #45	; 0x2d
 80b297e:	d103      	bne.n	80b2988 <_strtoul_r+0x34>
 80b2980:	1cb5      	adds	r5, r6, #2
 80b2982:	7874      	ldrb	r4, [r6, #1]
 80b2984:	2701      	movs	r7, #1
 80b2986:	e003      	b.n	80b2990 <_strtoul_r+0x3c>
 80b2988:	2c2b      	cmp	r4, #43	; 0x2b
 80b298a:	bf04      	itt	eq
 80b298c:	7874      	ldrbeq	r4, [r6, #1]
 80b298e:	1cb5      	addeq	r5, r6, #2
 80b2990:	b113      	cbz	r3, 80b2998 <_strtoul_r+0x44>
 80b2992:	2b10      	cmp	r3, #16
 80b2994:	d10a      	bne.n	80b29ac <_strtoul_r+0x58>
 80b2996:	e053      	b.n	80b2a40 <_strtoul_r+0xec>
 80b2998:	2c30      	cmp	r4, #48	; 0x30
 80b299a:	d14f      	bne.n	80b2a3c <_strtoul_r+0xe8>
 80b299c:	7828      	ldrb	r0, [r5, #0]
 80b299e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80b29a2:	2858      	cmp	r0, #88	; 0x58
 80b29a4:	d145      	bne.n	80b2a32 <_strtoul_r+0xde>
 80b29a6:	786c      	ldrb	r4, [r5, #1]
 80b29a8:	2310      	movs	r3, #16
 80b29aa:	3502      	adds	r5, #2
 80b29ac:	f04f 3cff 	mov.w	ip, #4294967295
 80b29b0:	fbbc fcf3 	udiv	ip, ip, r3
 80b29b4:	fb03 fa0c 	mul.w	sl, r3, ip
 80b29b8:	2600      	movs	r6, #0
 80b29ba:	ea6f 0a0a 	mvn.w	sl, sl
 80b29be:	4630      	mov	r0, r6
 80b29c0:	eb09 0e04 	add.w	lr, r9, r4
 80b29c4:	f89e e001 	ldrb.w	lr, [lr, #1]
 80b29c8:	f01e 0f04 	tst.w	lr, #4
 80b29cc:	d001      	beq.n	80b29d2 <_strtoul_r+0x7e>
 80b29ce:	3c30      	subs	r4, #48	; 0x30
 80b29d0:	e00b      	b.n	80b29ea <_strtoul_r+0x96>
 80b29d2:	f01e 0e03 	ands.w	lr, lr, #3
 80b29d6:	d01a      	beq.n	80b2a0e <_strtoul_r+0xba>
 80b29d8:	f1be 0f01 	cmp.w	lr, #1
 80b29dc:	bf0c      	ite	eq
 80b29de:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80b29e2:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80b29e6:	ebce 0404 	rsb	r4, lr, r4
 80b29ea:	42a3      	cmp	r3, r4
 80b29ec:	dd0f      	ble.n	80b2a0e <_strtoul_r+0xba>
 80b29ee:	2e00      	cmp	r6, #0
 80b29f0:	db08      	blt.n	80b2a04 <_strtoul_r+0xb0>
 80b29f2:	4560      	cmp	r0, ip
 80b29f4:	d806      	bhi.n	80b2a04 <_strtoul_r+0xb0>
 80b29f6:	d101      	bne.n	80b29fc <_strtoul_r+0xa8>
 80b29f8:	4554      	cmp	r4, sl
 80b29fa:	dc03      	bgt.n	80b2a04 <_strtoul_r+0xb0>
 80b29fc:	fb03 4000 	mla	r0, r3, r0, r4
 80b2a00:	2601      	movs	r6, #1
 80b2a02:	e001      	b.n	80b2a08 <_strtoul_r+0xb4>
 80b2a04:	f04f 36ff 	mov.w	r6, #4294967295
 80b2a08:	f815 4b01 	ldrb.w	r4, [r5], #1
 80b2a0c:	e7d8      	b.n	80b29c0 <_strtoul_r+0x6c>
 80b2a0e:	2e00      	cmp	r6, #0
 80b2a10:	da07      	bge.n	80b2a22 <_strtoul_r+0xce>
 80b2a12:	2322      	movs	r3, #34	; 0x22
 80b2a14:	f8c8 3000 	str.w	r3, [r8]
 80b2a18:	f04f 30ff 	mov.w	r0, #4294967295
 80b2a1c:	b92a      	cbnz	r2, 80b2a2a <_strtoul_r+0xd6>
 80b2a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80b2a22:	b107      	cbz	r7, 80b2a26 <_strtoul_r+0xd2>
 80b2a24:	4240      	negs	r0, r0
 80b2a26:	b172      	cbz	r2, 80b2a46 <_strtoul_r+0xf2>
 80b2a28:	b106      	cbz	r6, 80b2a2c <_strtoul_r+0xd8>
 80b2a2a:	1e69      	subs	r1, r5, #1
 80b2a2c:	6011      	str	r1, [r2, #0]
 80b2a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80b2a32:	2430      	movs	r4, #48	; 0x30
 80b2a34:	2b00      	cmp	r3, #0
 80b2a36:	d1b9      	bne.n	80b29ac <_strtoul_r+0x58>
 80b2a38:	2308      	movs	r3, #8
 80b2a3a:	e7b7      	b.n	80b29ac <_strtoul_r+0x58>
 80b2a3c:	230a      	movs	r3, #10
 80b2a3e:	e7b5      	b.n	80b29ac <_strtoul_r+0x58>
 80b2a40:	2c30      	cmp	r4, #48	; 0x30
 80b2a42:	d0ab      	beq.n	80b299c <_strtoul_r+0x48>
 80b2a44:	e7b2      	b.n	80b29ac <_strtoul_r+0x58>
 80b2a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80b2a4a:	bf00      	nop
 80b2a4c:	20000040 	.word	0x20000040

080b2a50 <strtoul>:
 80b2a50:	4613      	mov	r3, r2
 80b2a52:	460a      	mov	r2, r1
 80b2a54:	4601      	mov	r1, r0
 80b2a56:	4802      	ldr	r0, [pc, #8]	; (80b2a60 <strtoul+0x10>)
 80b2a58:	6800      	ldr	r0, [r0, #0]
 80b2a5a:	f7ff bf7b 	b.w	80b2954 <_strtoul_r>
 80b2a5e:	bf00      	nop
 80b2a60:	200000a4 	.word	0x200000a4

080b2a64 <gettimeofday>:
 80b2a64:	4b02      	ldr	r3, [pc, #8]	; (80b2a70 <gettimeofday+0xc>)
 80b2a66:	460a      	mov	r2, r1
 80b2a68:	4601      	mov	r1, r0
 80b2a6a:	6818      	ldr	r0, [r3, #0]
 80b2a6c:	f000 ba76 	b.w	80b2f5c <_gettimeofday_r>
 80b2a70:	200000a4 	.word	0x200000a4

080b2a74 <__tzcalc_limits>:
 80b2a74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80b2a78:	4604      	mov	r4, r0
 80b2a7a:	f000 fa81 	bl	80b2f80 <__gettzinfo>
 80b2a7e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80b2a82:	429c      	cmp	r4, r3
 80b2a84:	f340 8096 	ble.w	80b2bb4 <__tzcalc_limits+0x140>
 80b2a88:	f240 156d 	movw	r5, #365	; 0x16d
 80b2a8c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80b2a90:	18e3      	adds	r3, r4, r3
 80b2a92:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80b2a96:	109b      	asrs	r3, r3, #2
 80b2a98:	fb05 3502 	mla	r5, r5, r2, r3
 80b2a9c:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80b2aa0:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80b2aa4:	fb92 f3f3 	sdiv	r3, r2, r3
 80b2aa8:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80b2aac:	442b      	add	r3, r5
 80b2aae:	18a5      	adds	r5, r4, r2
 80b2ab0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80b2ab4:	fb94 f7f2 	sdiv	r7, r4, r2
 80b2ab8:	fb95 f5f2 	sdiv	r5, r5, r2
 80b2abc:	fb02 4717 	mls	r7, r2, r7, r4
 80b2ac0:	441d      	add	r5, r3
 80b2ac2:	2364      	movs	r3, #100	; 0x64
 80b2ac4:	fb94 f6f3 	sdiv	r6, r4, r3
 80b2ac8:	fab7 fe87 	clz	lr, r7
 80b2acc:	4601      	mov	r1, r0
 80b2ace:	fb03 4616 	mls	r6, r3, r6, r4
 80b2ad2:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80b2ad6:	9301      	str	r3, [sp, #4]
 80b2ad8:	f004 0303 	and.w	r3, r4, #3
 80b2adc:	6044      	str	r4, [r0, #4]
 80b2ade:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80b2ae2:	9300      	str	r3, [sp, #0]
 80b2ae4:	f04f 0c07 	mov.w	ip, #7
 80b2ae8:	7a0b      	ldrb	r3, [r1, #8]
 80b2aea:	2b4a      	cmp	r3, #74	; 0x4a
 80b2aec:	d10e      	bne.n	80b2b0c <__tzcalc_limits+0x98>
 80b2aee:	694b      	ldr	r3, [r1, #20]
 80b2af0:	9a00      	ldr	r2, [sp, #0]
 80b2af2:	18ec      	adds	r4, r5, r3
 80b2af4:	b902      	cbnz	r2, 80b2af8 <__tzcalc_limits+0x84>
 80b2af6:	b906      	cbnz	r6, 80b2afa <__tzcalc_limits+0x86>
 80b2af8:	b927      	cbnz	r7, 80b2b04 <__tzcalc_limits+0x90>
 80b2afa:	2b3b      	cmp	r3, #59	; 0x3b
 80b2afc:	bfd4      	ite	le
 80b2afe:	2300      	movle	r3, #0
 80b2b00:	2301      	movgt	r3, #1
 80b2b02:	e000      	b.n	80b2b06 <__tzcalc_limits+0x92>
 80b2b04:	2300      	movs	r3, #0
 80b2b06:	4423      	add	r3, r4
 80b2b08:	3b01      	subs	r3, #1
 80b2b0a:	e03f      	b.n	80b2b8c <__tzcalc_limits+0x118>
 80b2b0c:	2b44      	cmp	r3, #68	; 0x44
 80b2b0e:	d102      	bne.n	80b2b16 <__tzcalc_limits+0xa2>
 80b2b10:	694b      	ldr	r3, [r1, #20]
 80b2b12:	442b      	add	r3, r5
 80b2b14:	e03a      	b.n	80b2b8c <__tzcalc_limits+0x118>
 80b2b16:	9b00      	ldr	r3, [sp, #0]
 80b2b18:	b92b      	cbnz	r3, 80b2b26 <__tzcalc_limits+0xb2>
 80b2b1a:	2e00      	cmp	r6, #0
 80b2b1c:	bf0c      	ite	eq
 80b2b1e:	46f0      	moveq	r8, lr
 80b2b20:	f04f 0801 	movne.w	r8, #1
 80b2b24:	e000      	b.n	80b2b28 <__tzcalc_limits+0xb4>
 80b2b26:	46f0      	mov	r8, lr
 80b2b28:	46a9      	mov	r9, r5
 80b2b2a:	4b24      	ldr	r3, [pc, #144]	; (80b2bbc <__tzcalc_limits+0x148>)
 80b2b2c:	2230      	movs	r2, #48	; 0x30
 80b2b2e:	fb02 3808 	mla	r8, r2, r8, r3
 80b2b32:	68cc      	ldr	r4, [r1, #12]
 80b2b34:	f1a8 0a04 	sub.w	sl, r8, #4
 80b2b38:	2301      	movs	r3, #1
 80b2b3a:	42a3      	cmp	r3, r4
 80b2b3c:	da04      	bge.n	80b2b48 <__tzcalc_limits+0xd4>
 80b2b3e:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80b2b42:	3301      	adds	r3, #1
 80b2b44:	44d9      	add	r9, fp
 80b2b46:	e7f8      	b.n	80b2b3a <__tzcalc_limits+0xc6>
 80b2b48:	f109 0304 	add.w	r3, r9, #4
 80b2b4c:	fb93 fbfc 	sdiv	fp, r3, ip
 80b2b50:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80b2b54:	ebca 0a03 	rsb	sl, sl, r3
 80b2b58:	694b      	ldr	r3, [r1, #20]
 80b2b5a:	2c01      	cmp	r4, #1
 80b2b5c:	bfb8      	it	lt
 80b2b5e:	2401      	movlt	r4, #1
 80b2b60:	ebb3 0a0a 	subs.w	sl, r3, sl
 80b2b64:	690b      	ldr	r3, [r1, #16]
 80b2b66:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80b2b6a:	f103 33ff 	add.w	r3, r3, #4294967295
 80b2b6e:	f104 34ff 	add.w	r4, r4, #4294967295
 80b2b72:	bf48      	it	mi
 80b2b74:	f10a 0a07 	addmi.w	sl, sl, #7
 80b2b78:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80b2b7c:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80b2b80:	4453      	add	r3, sl
 80b2b82:	42a3      	cmp	r3, r4
 80b2b84:	db01      	blt.n	80b2b8a <__tzcalc_limits+0x116>
 80b2b86:	3b07      	subs	r3, #7
 80b2b88:	e7fb      	b.n	80b2b82 <__tzcalc_limits+0x10e>
 80b2b8a:	444b      	add	r3, r9
 80b2b8c:	698c      	ldr	r4, [r1, #24]
 80b2b8e:	4a0c      	ldr	r2, [pc, #48]	; (80b2bc0 <__tzcalc_limits+0x14c>)
 80b2b90:	fb02 4303 	mla	r3, r2, r3, r4
 80b2b94:	6a0c      	ldr	r4, [r1, #32]
 80b2b96:	4423      	add	r3, r4
 80b2b98:	f841 3f1c 	str.w	r3, [r1, #28]!
 80b2b9c:	9b01      	ldr	r3, [sp, #4]
 80b2b9e:	4299      	cmp	r1, r3
 80b2ba0:	d1a2      	bne.n	80b2ae8 <__tzcalc_limits+0x74>
 80b2ba2:	69c3      	ldr	r3, [r0, #28]
 80b2ba4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80b2ba6:	4293      	cmp	r3, r2
 80b2ba8:	bfac      	ite	ge
 80b2baa:	2300      	movge	r3, #0
 80b2bac:	2301      	movlt	r3, #1
 80b2bae:	6003      	str	r3, [r0, #0]
 80b2bb0:	2001      	movs	r0, #1
 80b2bb2:	e000      	b.n	80b2bb6 <__tzcalc_limits+0x142>
 80b2bb4:	2000      	movs	r0, #0
 80b2bb6:	b003      	add	sp, #12
 80b2bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80b2bbc:	080b647c 	.word	0x080b647c
 80b2bc0:	00015180 	.word	0x00015180

080b2bc4 <__tz_lock>:
 80b2bc4:	4770      	bx	lr

080b2bc6 <__tz_unlock>:
 80b2bc6:	4770      	bx	lr

080b2bc8 <_tzset_unlocked>:
 80b2bc8:	4b01      	ldr	r3, [pc, #4]	; (80b2bd0 <_tzset_unlocked+0x8>)
 80b2bca:	6818      	ldr	r0, [r3, #0]
 80b2bcc:	f000 b802 	b.w	80b2bd4 <_tzset_unlocked_r>
 80b2bd0:	200000a4 	.word	0x200000a4

080b2bd4 <_tzset_unlocked_r>:
 80b2bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80b2bd8:	b08d      	sub	sp, #52	; 0x34
 80b2bda:	4607      	mov	r7, r0
 80b2bdc:	f000 f9d0 	bl	80b2f80 <__gettzinfo>
 80b2be0:	49b0      	ldr	r1, [pc, #704]	; (80b2ea4 <_tzset_unlocked_r+0x2d0>)
 80b2be2:	4604      	mov	r4, r0
 80b2be4:	4638      	mov	r0, r7
 80b2be6:	f000 f9b1 	bl	80b2f4c <_getenv_r>
 80b2bea:	4eaf      	ldr	r6, [pc, #700]	; (80b2ea8 <_tzset_unlocked_r+0x2d4>)
 80b2bec:	4605      	mov	r5, r0
 80b2bee:	b960      	cbnz	r0, 80b2c0a <_tzset_unlocked_r+0x36>
 80b2bf0:	4bae      	ldr	r3, [pc, #696]	; (80b2eac <_tzset_unlocked_r+0x2d8>)
 80b2bf2:	4aaf      	ldr	r2, [pc, #700]	; (80b2eb0 <_tzset_unlocked_r+0x2dc>)
 80b2bf4:	6018      	str	r0, [r3, #0]
 80b2bf6:	4baf      	ldr	r3, [pc, #700]	; (80b2eb4 <_tzset_unlocked_r+0x2e0>)
 80b2bf8:	6018      	str	r0, [r3, #0]
 80b2bfa:	4baf      	ldr	r3, [pc, #700]	; (80b2eb8 <_tzset_unlocked_r+0x2e4>)
 80b2bfc:	6830      	ldr	r0, [r6, #0]
 80b2bfe:	601a      	str	r2, [r3, #0]
 80b2c00:	605a      	str	r2, [r3, #4]
 80b2c02:	f7fe fa71 	bl	80b10e8 <free>
 80b2c06:	6035      	str	r5, [r6, #0]
 80b2c08:	e148      	b.n	80b2e9c <_tzset_unlocked_r+0x2c8>
 80b2c0a:	6831      	ldr	r1, [r6, #0]
 80b2c0c:	b979      	cbnz	r1, 80b2c2e <_tzset_unlocked_r+0x5a>
 80b2c0e:	6830      	ldr	r0, [r6, #0]
 80b2c10:	f7fe fa6a 	bl	80b10e8 <free>
 80b2c14:	4628      	mov	r0, r5
 80b2c16:	f7ff fe65 	bl	80b28e4 <strlen>
 80b2c1a:	1c41      	adds	r1, r0, #1
 80b2c1c:	4638      	mov	r0, r7
 80b2c1e:	f7fe fa8b 	bl	80b1138 <_malloc_r>
 80b2c22:	6030      	str	r0, [r6, #0]
 80b2c24:	b148      	cbz	r0, 80b2c3a <_tzset_unlocked_r+0x66>
 80b2c26:	4629      	mov	r1, r5
 80b2c28:	f7ff fe54 	bl	80b28d4 <strcpy>
 80b2c2c:	e005      	b.n	80b2c3a <_tzset_unlocked_r+0x66>
 80b2c2e:	f7ff fe47 	bl	80b28c0 <strcmp>
 80b2c32:	2800      	cmp	r0, #0
 80b2c34:	f000 8132 	beq.w	80b2e9c <_tzset_unlocked_r+0x2c8>
 80b2c38:	e7e9      	b.n	80b2c0e <_tzset_unlocked_r+0x3a>
 80b2c3a:	782b      	ldrb	r3, [r5, #0]
 80b2c3c:	ae0a      	add	r6, sp, #40	; 0x28
 80b2c3e:	2b3a      	cmp	r3, #58	; 0x3a
 80b2c40:	bf08      	it	eq
 80b2c42:	3501      	addeq	r5, #1
 80b2c44:	4633      	mov	r3, r6
 80b2c46:	4a9d      	ldr	r2, [pc, #628]	; (80b2ebc <_tzset_unlocked_r+0x2e8>)
 80b2c48:	499d      	ldr	r1, [pc, #628]	; (80b2ec0 <_tzset_unlocked_r+0x2ec>)
 80b2c4a:	4628      	mov	r0, r5
 80b2c4c:	f7fe fa64 	bl	80b1118 <siscanf>
 80b2c50:	2800      	cmp	r0, #0
 80b2c52:	f340 8123 	ble.w	80b2e9c <_tzset_unlocked_r+0x2c8>
 80b2c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80b2c58:	18ef      	adds	r7, r5, r3
 80b2c5a:	5ceb      	ldrb	r3, [r5, r3]
 80b2c5c:	2b2d      	cmp	r3, #45	; 0x2d
 80b2c5e:	d103      	bne.n	80b2c68 <_tzset_unlocked_r+0x94>
 80b2c60:	3701      	adds	r7, #1
 80b2c62:	f04f 35ff 	mov.w	r5, #4294967295
 80b2c66:	e003      	b.n	80b2c70 <_tzset_unlocked_r+0x9c>
 80b2c68:	2b2b      	cmp	r3, #43	; 0x2b
 80b2c6a:	bf08      	it	eq
 80b2c6c:	3701      	addeq	r7, #1
 80b2c6e:	2501      	movs	r5, #1
 80b2c70:	f10d 0a20 	add.w	sl, sp, #32
 80b2c74:	f10d 0b1e 	add.w	fp, sp, #30
 80b2c78:	f04f 0800 	mov.w	r8, #0
 80b2c7c:	9603      	str	r6, [sp, #12]
 80b2c7e:	f8cd a008 	str.w	sl, [sp, #8]
 80b2c82:	9601      	str	r6, [sp, #4]
 80b2c84:	f8cd b000 	str.w	fp, [sp]
 80b2c88:	4633      	mov	r3, r6
 80b2c8a:	aa07      	add	r2, sp, #28
 80b2c8c:	498d      	ldr	r1, [pc, #564]	; (80b2ec4 <_tzset_unlocked_r+0x2f0>)
 80b2c8e:	4638      	mov	r0, r7
 80b2c90:	f8ad 801e 	strh.w	r8, [sp, #30]
 80b2c94:	f8ad 8020 	strh.w	r8, [sp, #32]
 80b2c98:	f7fe fa3e 	bl	80b1118 <siscanf>
 80b2c9c:	4540      	cmp	r0, r8
 80b2c9e:	f340 80fd 	ble.w	80b2e9c <_tzset_unlocked_r+0x2c8>
 80b2ca2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80b2ca6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80b2caa:	213c      	movs	r1, #60	; 0x3c
 80b2cac:	fb01 3302 	mla	r3, r1, r2, r3
 80b2cb0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80b2cb4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80b2cb8:	fb01 3302 	mla	r3, r1, r2, r3
 80b2cbc:	435d      	muls	r5, r3
 80b2cbe:	4b7f      	ldr	r3, [pc, #508]	; (80b2ebc <_tzset_unlocked_r+0x2e8>)
 80b2cc0:	6225      	str	r5, [r4, #32]
 80b2cc2:	4d7d      	ldr	r5, [pc, #500]	; (80b2eb8 <_tzset_unlocked_r+0x2e4>)
 80b2cc4:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80b2ed0 <_tzset_unlocked_r+0x2fc>
 80b2cc8:	602b      	str	r3, [r5, #0]
 80b2cca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80b2ccc:	464a      	mov	r2, r9
 80b2cce:	441f      	add	r7, r3
 80b2cd0:	497b      	ldr	r1, [pc, #492]	; (80b2ec0 <_tzset_unlocked_r+0x2ec>)
 80b2cd2:	4633      	mov	r3, r6
 80b2cd4:	4638      	mov	r0, r7
 80b2cd6:	f7fe fa1f 	bl	80b1118 <siscanf>
 80b2cda:	4540      	cmp	r0, r8
 80b2cdc:	dc08      	bgt.n	80b2cf0 <_tzset_unlocked_r+0x11c>
 80b2cde:	682b      	ldr	r3, [r5, #0]
 80b2ce0:	6a22      	ldr	r2, [r4, #32]
 80b2ce2:	606b      	str	r3, [r5, #4]
 80b2ce4:	4b71      	ldr	r3, [pc, #452]	; (80b2eac <_tzset_unlocked_r+0x2d8>)
 80b2ce6:	601a      	str	r2, [r3, #0]
 80b2ce8:	4b72      	ldr	r3, [pc, #456]	; (80b2eb4 <_tzset_unlocked_r+0x2e0>)
 80b2cea:	f8c3 8000 	str.w	r8, [r3]
 80b2cee:	e0d5      	b.n	80b2e9c <_tzset_unlocked_r+0x2c8>
 80b2cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80b2cf2:	f8c5 9004 	str.w	r9, [r5, #4]
 80b2cf6:	18fd      	adds	r5, r7, r3
 80b2cf8:	5cfb      	ldrb	r3, [r7, r3]
 80b2cfa:	2b2d      	cmp	r3, #45	; 0x2d
 80b2cfc:	d103      	bne.n	80b2d06 <_tzset_unlocked_r+0x132>
 80b2cfe:	3501      	adds	r5, #1
 80b2d00:	f04f 37ff 	mov.w	r7, #4294967295
 80b2d04:	e003      	b.n	80b2d0e <_tzset_unlocked_r+0x13a>
 80b2d06:	2b2b      	cmp	r3, #43	; 0x2b
 80b2d08:	bf08      	it	eq
 80b2d0a:	3501      	addeq	r5, #1
 80b2d0c:	2701      	movs	r7, #1
 80b2d0e:	2300      	movs	r3, #0
 80b2d10:	f8ad 301c 	strh.w	r3, [sp, #28]
 80b2d14:	f8ad 301e 	strh.w	r3, [sp, #30]
 80b2d18:	f8ad 3020 	strh.w	r3, [sp, #32]
 80b2d1c:	930a      	str	r3, [sp, #40]	; 0x28
 80b2d1e:	9603      	str	r6, [sp, #12]
 80b2d20:	f8cd a008 	str.w	sl, [sp, #8]
 80b2d24:	9601      	str	r6, [sp, #4]
 80b2d26:	f8cd b000 	str.w	fp, [sp]
 80b2d2a:	4633      	mov	r3, r6
 80b2d2c:	aa07      	add	r2, sp, #28
 80b2d2e:	4965      	ldr	r1, [pc, #404]	; (80b2ec4 <_tzset_unlocked_r+0x2f0>)
 80b2d30:	4628      	mov	r0, r5
 80b2d32:	f7fe f9f1 	bl	80b1118 <siscanf>
 80b2d36:	2800      	cmp	r0, #0
 80b2d38:	dc04      	bgt.n	80b2d44 <_tzset_unlocked_r+0x170>
 80b2d3a:	6a23      	ldr	r3, [r4, #32]
 80b2d3c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80b2d40:	63e3      	str	r3, [r4, #60]	; 0x3c
 80b2d42:	e00e      	b.n	80b2d62 <_tzset_unlocked_r+0x18e>
 80b2d44:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80b2d48:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80b2d4c:	213c      	movs	r1, #60	; 0x3c
 80b2d4e:	fb01 3302 	mla	r3, r1, r2, r3
 80b2d52:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80b2d56:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80b2d5a:	fb01 3302 	mla	r3, r1, r2, r3
 80b2d5e:	435f      	muls	r7, r3
 80b2d60:	63e7      	str	r7, [r4, #60]	; 0x3c
 80b2d62:	4627      	mov	r7, r4
 80b2d64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80b2d66:	f04f 0900 	mov.w	r9, #0
 80b2d6a:	441d      	add	r5, r3
 80b2d6c:	782b      	ldrb	r3, [r5, #0]
 80b2d6e:	2b2c      	cmp	r3, #44	; 0x2c
 80b2d70:	bf08      	it	eq
 80b2d72:	3501      	addeq	r5, #1
 80b2d74:	f895 8000 	ldrb.w	r8, [r5]
 80b2d78:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80b2d7c:	d126      	bne.n	80b2dcc <_tzset_unlocked_r+0x1f8>
 80b2d7e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80b2d82:	9302      	str	r3, [sp, #8]
 80b2d84:	ab09      	add	r3, sp, #36	; 0x24
 80b2d86:	9300      	str	r3, [sp, #0]
 80b2d88:	9603      	str	r6, [sp, #12]
 80b2d8a:	9601      	str	r6, [sp, #4]
 80b2d8c:	4633      	mov	r3, r6
 80b2d8e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80b2d92:	494d      	ldr	r1, [pc, #308]	; (80b2ec8 <_tzset_unlocked_r+0x2f4>)
 80b2d94:	4628      	mov	r0, r5
 80b2d96:	f7fe f9bf 	bl	80b1118 <siscanf>
 80b2d9a:	2803      	cmp	r0, #3
 80b2d9c:	d17e      	bne.n	80b2e9c <_tzset_unlocked_r+0x2c8>
 80b2d9e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80b2da2:	1e4b      	subs	r3, r1, #1
 80b2da4:	2b0b      	cmp	r3, #11
 80b2da6:	d879      	bhi.n	80b2e9c <_tzset_unlocked_r+0x2c8>
 80b2da8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80b2dac:	1e53      	subs	r3, r2, #1
 80b2dae:	2b04      	cmp	r3, #4
 80b2db0:	d874      	bhi.n	80b2e9c <_tzset_unlocked_r+0x2c8>
 80b2db2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80b2db6:	2b06      	cmp	r3, #6
 80b2db8:	d870      	bhi.n	80b2e9c <_tzset_unlocked_r+0x2c8>
 80b2dba:	f887 8008 	strb.w	r8, [r7, #8]
 80b2dbe:	60f9      	str	r1, [r7, #12]
 80b2dc0:	613a      	str	r2, [r7, #16]
 80b2dc2:	617b      	str	r3, [r7, #20]
 80b2dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80b2dc6:	eb05 0803 	add.w	r8, r5, r3
 80b2dca:	e02a      	b.n	80b2e22 <_tzset_unlocked_r+0x24e>
 80b2dcc:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80b2dd0:	bf06      	itte	eq
 80b2dd2:	4643      	moveq	r3, r8
 80b2dd4:	3501      	addeq	r5, #1
 80b2dd6:	2344      	movne	r3, #68	; 0x44
 80b2dd8:	220a      	movs	r2, #10
 80b2dda:	a90b      	add	r1, sp, #44	; 0x2c
 80b2ddc:	4628      	mov	r0, r5
 80b2dde:	9305      	str	r3, [sp, #20]
 80b2de0:	f7ff fe36 	bl	80b2a50 <strtoul>
 80b2de4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80b2de8:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80b2dec:	4545      	cmp	r5, r8
 80b2dee:	9b05      	ldr	r3, [sp, #20]
 80b2df0:	d114      	bne.n	80b2e1c <_tzset_unlocked_r+0x248>
 80b2df2:	234d      	movs	r3, #77	; 0x4d
 80b2df4:	f1b9 0f00 	cmp.w	r9, #0
 80b2df8:	d107      	bne.n	80b2e0a <_tzset_unlocked_r+0x236>
 80b2dfa:	7223      	strb	r3, [r4, #8]
 80b2dfc:	2303      	movs	r3, #3
 80b2dfe:	60e3      	str	r3, [r4, #12]
 80b2e00:	2302      	movs	r3, #2
 80b2e02:	6123      	str	r3, [r4, #16]
 80b2e04:	f8c4 9014 	str.w	r9, [r4, #20]
 80b2e08:	e00b      	b.n	80b2e22 <_tzset_unlocked_r+0x24e>
 80b2e0a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80b2e0e:	230b      	movs	r3, #11
 80b2e10:	62a3      	str	r3, [r4, #40]	; 0x28
 80b2e12:	2301      	movs	r3, #1
 80b2e14:	62e3      	str	r3, [r4, #44]	; 0x2c
 80b2e16:	2300      	movs	r3, #0
 80b2e18:	6323      	str	r3, [r4, #48]	; 0x30
 80b2e1a:	e002      	b.n	80b2e22 <_tzset_unlocked_r+0x24e>
 80b2e1c:	b280      	uxth	r0, r0
 80b2e1e:	723b      	strb	r3, [r7, #8]
 80b2e20:	6178      	str	r0, [r7, #20]
 80b2e22:	2302      	movs	r3, #2
 80b2e24:	f8ad 301c 	strh.w	r3, [sp, #28]
 80b2e28:	2300      	movs	r3, #0
 80b2e2a:	f8ad 301e 	strh.w	r3, [sp, #30]
 80b2e2e:	f8ad 3020 	strh.w	r3, [sp, #32]
 80b2e32:	930a      	str	r3, [sp, #40]	; 0x28
 80b2e34:	f898 3000 	ldrb.w	r3, [r8]
 80b2e38:	2b2f      	cmp	r3, #47	; 0x2f
 80b2e3a:	d10b      	bne.n	80b2e54 <_tzset_unlocked_r+0x280>
 80b2e3c:	9603      	str	r6, [sp, #12]
 80b2e3e:	f8cd a008 	str.w	sl, [sp, #8]
 80b2e42:	9601      	str	r6, [sp, #4]
 80b2e44:	f8cd b000 	str.w	fp, [sp]
 80b2e48:	4633      	mov	r3, r6
 80b2e4a:	aa07      	add	r2, sp, #28
 80b2e4c:	491f      	ldr	r1, [pc, #124]	; (80b2ecc <_tzset_unlocked_r+0x2f8>)
 80b2e4e:	4640      	mov	r0, r8
 80b2e50:	f7fe f962 	bl	80b1118 <siscanf>
 80b2e54:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80b2e58:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80b2e5c:	213c      	movs	r1, #60	; 0x3c
 80b2e5e:	fb01 3302 	mla	r3, r1, r2, r3
 80b2e62:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80b2e66:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80b2e6a:	fb01 3302 	mla	r3, r1, r2, r3
 80b2e6e:	61bb      	str	r3, [r7, #24]
 80b2e70:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80b2e72:	f109 0901 	add.w	r9, r9, #1
 80b2e76:	f1b9 0f02 	cmp.w	r9, #2
 80b2e7a:	4445      	add	r5, r8
 80b2e7c:	f107 071c 	add.w	r7, r7, #28
 80b2e80:	f47f af74 	bne.w	80b2d6c <_tzset_unlocked_r+0x198>
 80b2e84:	6860      	ldr	r0, [r4, #4]
 80b2e86:	f7ff fdf5 	bl	80b2a74 <__tzcalc_limits>
 80b2e8a:	6a22      	ldr	r2, [r4, #32]
 80b2e8c:	4b07      	ldr	r3, [pc, #28]	; (80b2eac <_tzset_unlocked_r+0x2d8>)
 80b2e8e:	601a      	str	r2, [r3, #0]
 80b2e90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80b2e92:	1a9b      	subs	r3, r3, r2
 80b2e94:	4a07      	ldr	r2, [pc, #28]	; (80b2eb4 <_tzset_unlocked_r+0x2e0>)
 80b2e96:	bf18      	it	ne
 80b2e98:	2301      	movne	r3, #1
 80b2e9a:	6013      	str	r3, [r2, #0]
 80b2e9c:	b00d      	add	sp, #52	; 0x34
 80b2e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80b2ea2:	bf00      	nop
 80b2ea4:	080b64dc 	.word	0x080b64dc
 80b2ea8:	20003968 	.word	0x20003968
 80b2eac:	20003970 	.word	0x20003970
 80b2eb0:	080b64df 	.word	0x080b64df
 80b2eb4:	2000396c 	.word	0x2000396c
 80b2eb8:	200000a8 	.word	0x200000a8
 80b2ebc:	2000395b 	.word	0x2000395b
 80b2ec0:	080b64e3 	.word	0x080b64e3
 80b2ec4:	080b6506 	.word	0x080b6506
 80b2ec8:	080b64f2 	.word	0x080b64f2
 80b2ecc:	080b6505 	.word	0x080b6505
 80b2ed0:	20003950 	.word	0x20003950

080b2ed4 <_findenv_r>:
 80b2ed4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80b2ed8:	4607      	mov	r7, r0
 80b2eda:	468b      	mov	fp, r1
 80b2edc:	4690      	mov	r8, r2
 80b2ede:	f000 f8e9 	bl	80b30b4 <__env_lock>
 80b2ee2:	4b19      	ldr	r3, [pc, #100]	; (80b2f48 <_findenv_r+0x74>)
 80b2ee4:	681d      	ldr	r5, [r3, #0]
 80b2ee6:	469a      	mov	sl, r3
 80b2ee8:	b13d      	cbz	r5, 80b2efa <_findenv_r+0x26>
 80b2eea:	465c      	mov	r4, fp
 80b2eec:	4623      	mov	r3, r4
 80b2eee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80b2ef2:	b142      	cbz	r2, 80b2f06 <_findenv_r+0x32>
 80b2ef4:	2a3d      	cmp	r2, #61	; 0x3d
 80b2ef6:	461c      	mov	r4, r3
 80b2ef8:	d1f8      	bne.n	80b2eec <_findenv_r+0x18>
 80b2efa:	4638      	mov	r0, r7
 80b2efc:	f000 f8db 	bl	80b30b6 <__env_unlock>
 80b2f00:	2000      	movs	r0, #0
 80b2f02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80b2f06:	ebcb 0404 	rsb	r4, fp, r4
 80b2f0a:	46a9      	mov	r9, r5
 80b2f0c:	f859 0b04 	ldr.w	r0, [r9], #4
 80b2f10:	2800      	cmp	r0, #0
 80b2f12:	d0f2      	beq.n	80b2efa <_findenv_r+0x26>
 80b2f14:	4622      	mov	r2, r4
 80b2f16:	4659      	mov	r1, fp
 80b2f18:	f7ff fcec 	bl	80b28f4 <strncmp>
 80b2f1c:	b988      	cbnz	r0, 80b2f42 <_findenv_r+0x6e>
 80b2f1e:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80b2f22:	191e      	adds	r6, r3, r4
 80b2f24:	5d1b      	ldrb	r3, [r3, r4]
 80b2f26:	2b3d      	cmp	r3, #61	; 0x3d
 80b2f28:	d10b      	bne.n	80b2f42 <_findenv_r+0x6e>
 80b2f2a:	f8da 3000 	ldr.w	r3, [sl]
 80b2f2e:	4638      	mov	r0, r7
 80b2f30:	1aed      	subs	r5, r5, r3
 80b2f32:	10ad      	asrs	r5, r5, #2
 80b2f34:	f8c8 5000 	str.w	r5, [r8]
 80b2f38:	f000 f8bd 	bl	80b30b6 <__env_unlock>
 80b2f3c:	1c70      	adds	r0, r6, #1
 80b2f3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80b2f42:	464d      	mov	r5, r9
 80b2f44:	e7e1      	b.n	80b2f0a <_findenv_r+0x36>
 80b2f46:	bf00      	nop
 80b2f48:	200000f0 	.word	0x200000f0

080b2f4c <_getenv_r>:
 80b2f4c:	b507      	push	{r0, r1, r2, lr}
 80b2f4e:	aa01      	add	r2, sp, #4
 80b2f50:	f7ff ffc0 	bl	80b2ed4 <_findenv_r>
 80b2f54:	b003      	add	sp, #12
 80b2f56:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080b2f5c <_gettimeofday_r>:
 80b2f5c:	b538      	push	{r3, r4, r5, lr}
 80b2f5e:	4c07      	ldr	r4, [pc, #28]	; (80b2f7c <_gettimeofday_r+0x20>)
 80b2f60:	2300      	movs	r3, #0
 80b2f62:	4605      	mov	r5, r0
 80b2f64:	4608      	mov	r0, r1
 80b2f66:	4611      	mov	r1, r2
 80b2f68:	6023      	str	r3, [r4, #0]
 80b2f6a:	f7f3 fa6f 	bl	80a644c <_gettimeofday>
 80b2f6e:	1c43      	adds	r3, r0, #1
 80b2f70:	d102      	bne.n	80b2f78 <_gettimeofday_r+0x1c>
 80b2f72:	6823      	ldr	r3, [r4, #0]
 80b2f74:	b103      	cbz	r3, 80b2f78 <_gettimeofday_r+0x1c>
 80b2f76:	602b      	str	r3, [r5, #0]
 80b2f78:	bd38      	pop	{r3, r4, r5, pc}
 80b2f7a:	bf00      	nop
 80b2f7c:	20003978 	.word	0x20003978

080b2f80 <__gettzinfo>:
 80b2f80:	4800      	ldr	r0, [pc, #0]	; (80b2f84 <__gettzinfo+0x4>)
 80b2f82:	4770      	bx	lr
 80b2f84:	200000b0 	.word	0x200000b0

080b2f88 <gmtime_r>:
 80b2f88:	6802      	ldr	r2, [r0, #0]
 80b2f8a:	4b46      	ldr	r3, [pc, #280]	; (80b30a4 <gmtime_r+0x11c>)
 80b2f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80b2f8e:	fb92 f4f3 	sdiv	r4, r2, r3
 80b2f92:	fb03 2214 	mls	r2, r3, r4, r2
 80b2f96:	2a00      	cmp	r2, #0
 80b2f98:	bfbc      	itt	lt
 80b2f9a:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80b2f9e:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80b2fa2:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80b2fa6:	fb92 f3f0 	sdiv	r3, r2, r0
 80b2faa:	fb00 2213 	mls	r2, r0, r3, r2
 80b2fae:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80b2fb2:	608b      	str	r3, [r1, #8]
 80b2fb4:	fb92 f3f0 	sdiv	r3, r2, r0
 80b2fb8:	fb00 2213 	mls	r2, r0, r3, r2
 80b2fbc:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80b2fc0:	bfac      	ite	ge
 80b2fc2:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80b2fc6:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80b2fca:	604b      	str	r3, [r1, #4]
 80b2fcc:	600a      	str	r2, [r1, #0]
 80b2fce:	2307      	movs	r3, #7
 80b2fd0:	1ce2      	adds	r2, r4, #3
 80b2fd2:	fb92 f3f3 	sdiv	r3, r2, r3
 80b2fd6:	4d34      	ldr	r5, [pc, #208]	; (80b30a8 <gmtime_r+0x120>)
 80b2fd8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80b2fdc:	fb94 f5f5 	sdiv	r5, r4, r5
 80b2fe0:	1ad3      	subs	r3, r2, r3
 80b2fe2:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80b2fe6:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80b2fea:	618b      	str	r3, [r1, #24]
 80b2fec:	4b2f      	ldr	r3, [pc, #188]	; (80b30ac <gmtime_r+0x124>)
 80b2fee:	4830      	ldr	r0, [pc, #192]	; (80b30b0 <gmtime_r+0x128>)
 80b2ff0:	fb03 4405 	mla	r4, r3, r5, r4
 80b2ff4:	fbb4 f2f2 	udiv	r2, r4, r2
 80b2ff8:	fbb4 f3f7 	udiv	r3, r4, r7
 80b2ffc:	fbb4 f0f0 	udiv	r0, r4, r0
 80b3000:	4422      	add	r2, r4
 80b3002:	1ad2      	subs	r2, r2, r3
 80b3004:	f648 6694 	movw	r6, #36500	; 0x8e94
 80b3008:	1a13      	subs	r3, r2, r0
 80b300a:	f240 126d 	movw	r2, #365	; 0x16d
 80b300e:	fbb3 f6f6 	udiv	r6, r3, r6
 80b3012:	fbb3 f0f2 	udiv	r0, r3, r2
 80b3016:	fbb3 f3f7 	udiv	r3, r3, r7
 80b301a:	4434      	add	r4, r6
 80b301c:	1ae3      	subs	r3, r4, r3
 80b301e:	fb02 3310 	mls	r3, r2, r0, r3
 80b3022:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80b3026:	2499      	movs	r4, #153	; 0x99
 80b3028:	3202      	adds	r2, #2
 80b302a:	fbb2 f2f4 	udiv	r2, r2, r4
 80b302e:	4354      	muls	r4, r2
 80b3030:	1ca6      	adds	r6, r4, #2
 80b3032:	2405      	movs	r4, #5
 80b3034:	fbb6 f4f4 	udiv	r4, r6, r4
 80b3038:	2a0a      	cmp	r2, #10
 80b303a:	bf34      	ite	cc
 80b303c:	2602      	movcc	r6, #2
 80b303e:	f06f 0609 	mvncs.w	r6, #9
 80b3042:	4416      	add	r6, r2
 80b3044:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80b3048:	fb02 0505 	mla	r5, r2, r5, r0
 80b304c:	1c5f      	adds	r7, r3, #1
 80b304e:	2e01      	cmp	r6, #1
 80b3050:	bf98      	it	ls
 80b3052:	3501      	addls	r5, #1
 80b3054:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80b3058:	eba7 0704 	sub.w	r7, r7, r4
 80b305c:	d302      	bcc.n	80b3064 <gmtime_r+0xdc>
 80b305e:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80b3062:	e014      	b.n	80b308e <gmtime_r+0x106>
 80b3064:	0782      	lsls	r2, r0, #30
 80b3066:	d105      	bne.n	80b3074 <gmtime_r+0xec>
 80b3068:	2464      	movs	r4, #100	; 0x64
 80b306a:	fbb0 f2f4 	udiv	r2, r0, r4
 80b306e:	fb04 0212 	mls	r2, r4, r2, r0
 80b3072:	b94a      	cbnz	r2, 80b3088 <gmtime_r+0x100>
 80b3074:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80b3078:	fbb0 f4f2 	udiv	r4, r0, r2
 80b307c:	fb02 0014 	mls	r0, r2, r4, r0
 80b3080:	fab0 f280 	clz	r2, r0
 80b3084:	0952      	lsrs	r2, r2, #5
 80b3086:	e000      	b.n	80b308a <gmtime_r+0x102>
 80b3088:	2201      	movs	r2, #1
 80b308a:	333b      	adds	r3, #59	; 0x3b
 80b308c:	441a      	add	r2, r3
 80b308e:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80b3092:	2300      	movs	r3, #0
 80b3094:	61ca      	str	r2, [r1, #28]
 80b3096:	614d      	str	r5, [r1, #20]
 80b3098:	610e      	str	r6, [r1, #16]
 80b309a:	60cf      	str	r7, [r1, #12]
 80b309c:	620b      	str	r3, [r1, #32]
 80b309e:	4608      	mov	r0, r1
 80b30a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80b30a2:	bf00      	nop
 80b30a4:	00015180 	.word	0x00015180
 80b30a8:	00023ab1 	.word	0x00023ab1
 80b30ac:	fffdc54f 	.word	0xfffdc54f
 80b30b0:	00023ab0 	.word	0x00023ab0

080b30b4 <__env_lock>:
 80b30b4:	4770      	bx	lr

080b30b6 <__env_unlock>:
 80b30b6:	4770      	bx	lr

080b30b8 <dynalib_user>:
 80b30b8:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80b30c8:	0000 0000 2d2d 2d2d 422d 4745 4e49 4320     ....-----BEGIN C
 80b30d8:	5245 4954 4946 4143 4554 2d2d 2d2d 202d     ERTIFICATE----- 
 80b30e8:	0a0d 494d 4649 546a 4343 3341 6757 7741     ..MIIFjTCCA3WgAw
 80b30f8:	4249 6741 5249 4e41 784f 6963 3059 7a49     IBAgIRANOxciY0Iz
 80b3108:	634c 4139 6f55 5355 7372 476e 776f 5144     Lc9AUoUSrsnGowDQ
 80b3118:	4a59 6f4b 495a 7668 4e63 5141 4c45 5142     YJKoZIhvcNAQELBQ
 80b3128:	7741 0a0d 7a54 4c45 414d 476b 3141 4555     Aw..TzELMAkGA1UE
 80b3138:	6842 434d 5656 784d 544b 6e41 6742 564e     BhMCVVMxKTAnBgNV
 80b3148:	4142 546f 4549 756c 4764 7956 6d62 3056     BAoTIEludGVybmV0
 80b3158:	4649 6c4e 3359 7956 5861 3552 4649 6c4a     IFNlY3VyaXR5IFJl
 80b3168:	3263 6856 0a0d 6d63 6f4e 4549 7964 3362     c2Vh..cmNoIEdyb3
 80b3178:	7756 524d 7755 7745 4459 5156 4451 7745     VwMRUwEwYDVQQDEw
 80b3188:	4a78 3155 484a 4649 764a 3362 6751 4457     xJU1JHIFJvb3QgWD
 80b3198:	7745 6848 4e63 544d 7859 444d 3241 544d     EwHhcNMTYxMDA2MT
 80b31a8:	3055 7a4d 3155 0a0d 6857 4e63 6a4d 7845     U0MzU1..WhcNMjEx
 80b31b8:	444d 3241 544d 3055 7a4d 3155 6a57 4b42     MDA2MTU0MzU1WjBK
 80b31c8:	514d 7773 5143 4459 5156 4751 7745 564a     MQswCQYDVQQGEwJV
 80b31d8:	7a55 5745 424d 4751 3141 4555 6843 4e4d     UzEWMBQGA1UEChMN
 80b31e8:	4754 3056 334a 674d 0a0d 5752 6a35 6e63     TGV0J3Mg..RW5jcn
 80b31f8:	776c 4464 6a45 434d 4745 3141 4555 7841     lwdDEjMCEGA1UEAx
 80b3208:	614d 4754 3056 334a 674d 5752 6a35 6e63     MaTGV0J3MgRW5jcn
 80b3218:	776c 4364 4242 5864 6f52 3362 704a 4864     lwdCBBdXRob3JpdH
 80b3228:	676b 4457 774d 6767 6945 0a0d 414d 4730     kgWDMwggEi..MA0G
 80b3238:	5343 4771 4953 3362 5144 4245 5141 4155     CSqGSIb3DQEBAQUA
 80b3248:	3441 4249 7744 7741 6767 4b45 6f41 4249     A4IBDwAwggEKAoIB
 80b3258:	5141 6343 7730 777a 7557 7555 3752 7964     AQCc0wzwWuUuR7dy
 80b3268:	5458 4465 3273 6a68 4f4d 5872 0a0d 534e     XTeDs2hjMOrX..NS
 80b3278:	5a59 654a 3947 6a76 7858 4a63 7649 3774     YZJeG9vjXxcJIvt7
 80b3288:	4c68 5151 7257 5a71 3134 4643 736a 5373     hLQQWrqZ41CFjssS
 80b3298:	4572 4961 4c63 2b6f 314e 4f35 7a62 3270     rEaIcLo+N15Obzp2
 80b32a8:	784a 6e75 426d 4259 582f 5a6b 6671 0a0d     JxunmBYB/XkZqf..
 80b32b8:	3938 3442 335a 4948 5161 5636 636b 2b2f     89B4Z3HIaQ6Vkc/+
 80b32c8:	7035 706e 4459 4978 487a 4b37 5854 5363     5pnpYDxIzH7KTXcS
 80b32d8:	4a4a 4831 3147 7272 6575 6577 774e 6341     JJ1HG1rrueweNwAc
 80b32e8:	4b6e 3778 7770 7158 6b7a 7272 5576 6c48     nKx7pwXqzkrrvUHl
 80b32f8:	0a0d 704e 3569 2f79 7431 4a50 6f5a 7933     ..Npi5y/1tPJZo3y
 80b3308:	714d 7051 4d41 6e68 6e52 4879 6c2b 726d     MqQpAMhnRnyH+lmr
 80b3318:	5368 5259 5451 3250 7058 6f67 4c66 2f32     hSYRQTP2XpgofL2/
 80b3328:	4f6f 7656 4761 6669 464f 3550 4765 3772     oOVvaGifOFP5eGr7
 80b3338:	6344 0a0d 7547 7239 5a44 5755 6366 7251     Dc..Gu9rDZUWfcQr
 80b3348:	476f 7957 516d 3251 5964 7242 4572 7a72     oGWymQQ2dYBrrErz
 80b3358:	3547 4a42 4365 692b 6b6c 7138 4349 7055     G5BJeC+ilk8qICUp
 80b3368:	4d42 305a 4e77 7841 597a 7838 4a4f 5755     BMZ0wNAxzY8xOJUW
 80b3378:	7175 7a67 0a0d 4575 7850 5273 442f 484d     uqgz..uEPxsR/DMH
 80b3388:	692b 5465 5445 5350 3230 4f2b 3850 6a38     +ieTETPS02+OP88j
 80b3398:	714e 5475 786b 6178 452f 516a 6430 425a     NquTkxxa/EjQ0dZB
 80b33a8:	7a59 7671 4571 624b 5562 3843 5944 6366     YzqvqEKbbUC8DYfc
 80b33b8:	544f 6741 424d 0a0d 4141 6a47 6767 6e46     OTAgMB..AAGjggFn
 80b33c8:	494d 4249 7a59 4f41 6742 564e 5148 4238     MIIBYzAOBgNVHQ8B
 80b33d8:	6641 4538 4142 434d 5941 7759 6745 4459     Af8EBAMCAYYwEgYD
 80b33e8:	5256 5430 5141 2f48 4142 7767 6742 4245     VR0TAQH/BAgwBgEB
 80b33f8:	772f 4249 4441 5542 0a0d 6742 564e 5348     /wIBADBU..BgNVHS
 80b3408:	4541 5454 4c42 414d 4767 6d42 4265 4144     AETTBLMAgGBmeBDA
 80b3418:	4345 5441 2f41 6742 7273 6742 4545 5941     ECATA/BgsrBgEEAY
 80b3428:	664c 7745 4245 5441 7741 434d 4734 4343     LfEwEBATAwMC4GCC
 80b3438:	4773 5141 4655 7742 4249 0a0d 6946 6f4a     sGAQUFBwIB..FiJo
 80b3448:	4864 7752 694f 7638 3359 7a42 6e4c 764a     dHRwOi8vY3BzLnJv
 80b3458:	3362 7451 4465 7545 4762 3056 3263 7556     b3QteDEubGV0c2Vu
 80b3468:	3359 354a 4863 7551 3362 6e4a 424d 4730     Y3J5cHQub3JnMB0G
 80b3478:	3141 6455 6744 5751 4242 6f53 0a0d 6d53     A1UdDgQWBBSo..Sm
 80b3488:	6a70 4842 6433 7575 5262 624f 6d65 5752     pjBH3duubRObemRW
 80b3498:	7658 3638 736a 546f 7a41 6742 564e 5248     Xv86jsoTAzBgNVHR
 80b34a8:	4538 444c 7141 434d 6769 714a 6b41 6968     8ELDAqMCigJqAkhi
 80b34b8:	6f4a 4864 7752 694f 7638 3359 734a 0a0d     JodHRwOi8vY3Js..
 80b34c8:	6e4c 764a 3362 7451 4465 7545 4762 3056     LnJvb3QteDEubGV0
 80b34d8:	3263 7556 3359 354a 4863 7551 3362 6e4a     c2VuY3J5cHQub3Jn
 80b34e8:	484d 4749 4343 4773 5141 4655 7742 4245     MHIGCCsGAQUFBwEB
 80b34f8:	4742 7759 445a 7741 6742 7267 6742 4645     BGYwZDAwBggrBgEF
 80b3508:	0a0d 5142 7763 5941 6b59 4861 3052 4463     ..BQcwAYYkaHR0cD
 80b3518:	766f 324c 6a39 3363 7541 6d63 7639 4364     ovL29jc3Aucm9vdC
 80b3528:	3431 534d 7335 585a 7a52 575a 6a35 6e63     14MS5sZXRzZW5jcn
 80b3538:	776c 4364 7635 6d63 7663 444d 4741 4343     lwdC5vcmcvMDAGCC
 80b3548:	4773 0a0d 5141 4655 7a42 4341 6968 6f52     sG..AQUFBzAChiRo
 80b3558:	4864 7752 694f 7638 3259 7956 4364 7935     dHRwOi8vY2VydC5y
 80b3568:	3262 3039 584c 7867 6d4c 6c78 4864 6c4e     b290LXgxLmxldHNl
 80b3578:	6d62 794e 5865 3042 6d4c 7939 795a 7738     bmNyeXB0Lm9yZy8w
 80b3588:	7748 4459 0a0d 5256 6a30 4242 7767 6f46     HwYD..VR0jBBgwFo
 80b3598:	5541 6265 5a52 6e35 3275 6535 4251 3463     AUebRZ5nu25eQBc4
 80b35a8:	4941 4d69 6167 5057 7062 326d 7734 5144     AIiMgaWPbpm24wDQ
 80b35b8:	4a59 6f4b 495a 7668 4e63 5141 4c45 5142     YJKoZIhvcNAQELBQ
 80b35c8:	4441 6767 4249 0a0d 4241 506e 5364 3041     ADggIB..ABnPdSA0
 80b35d8:	544c 6d71 6652 512f 6531 4d61 6a32 6f4c     LTqmRf/Q1eaM2jLo
 80b35e8:	476e 6234 6451 6e45 4f71 514a 6e38 7143     nG4bQdEnqOJQ8nCq
 80b35f8:	4f78 5465 7252 6f54 4b45 7774 2b54 332b     xOeTRrToEKtwT++3
 80b3608:	6736 5354 426c 7847 0a0d 2f41 6435 7475     6gTSlBGx..A/5dut
 80b3618:	3238 4a6a 3251 786a 384e 4952 4c38 5139     82jJQ2jxN8RI8L9Q
 80b3628:	5846 5772 3469 5878 416e 4532 4171 3031     FXrWi4xXnA2EqA10
 80b3638:	6a79 6948 3652 3948 6a63 4d36 6946 6e4f     yjHiR6H9cj6MFiOn
 80b3648:	3562 6e49 6531 7357 4d52 0a0d 4d55 7632     b5In1eWsRM..UM2v
 80b3658:	6533 7439 734e 4143 4267 6b75 4850 6741     3e9tNsCAgBukPHAg
 80b3668:	6c31 6851 3730 7672 4b46 2f6d 7a42 4239     1lQh07rvFKm/Bz9B
 80b3678:	6a43 7861 726f 4c41 4e49 6655 395a 4444     CjaxorALINUfZ9DD
 80b3688:	3436 326a 6769 494c 6c78 3265 0a0d 5044     64j2igLIxle2..DP
 80b3698:	5778 6438 2f49 3246 6f6c 4d48 586a 6a5a     xW8dI/F2loHMjXZj
 80b36a8:	4771 5238 716b 555a 6f64 7478 4449 2b35     qG8RkqZUdoxtID5+
 80b36b8:	3039 6746 4773 6649 4d6b 7170 5267 3053     90FgsGIfkMpqgRS0
 80b36c8:	6635 7a34 6250 4543 7148 5843 316c 0a0d     5f4zPbCEHqCXl1..
 80b36d8:	4f65 4835 4579 544c 6367 6c56 584c 5158     eO5HyELTgcVlLXXQ
 80b36e8:	6744 5741 526e 757a 3174 4668 654a 7a63     DgAWnRzut1hFJecz
 80b36f8:	3159 6a74 5151 6f6e 6636 7336 6e2b 794d     Y1tjQQno6f6s+nMy
 80b3708:	4c64 324e 5736 5575 7334 5533 7659 754f     dLN26WuU4s3UYvOu
 80b3718:	0a0d 734f 7855 6c52 754a 5437 5253 7148     ..OsUxRlJu7TSRHq
 80b3728:	4344 6c33 4553 5835 6767 6b56 647a 5061     DC3lSE5XggVkzdaP
 80b3738:	756b 474b 6251 7047 796e 302b 2f31 3734     kuKGQbGpny+01/47
 80b3748:	6668 5858 424e 4837 746e 4e57 365a 324e     hfXXNB7HntWNZ6N2
 80b3758:	7756 0a0d 3770 3647 664f 2b59 5159 5a72     Vw..p7G6OfY+YQrZ
 80b3768:	4977 5161 686d 4972 4a71 755a 6769 7273     wIaQmhrIqJZuigsr
 80b3778:	6562 5733 672b 6e64 7935 456b 2b39 794b     be3W+gdn5ykE9+Ky
 80b3788:	5630 5667 7355 7866 356f 6d32 4677 7359     0VgVUsfxo52mwFYs
 80b3798:	4a31 594b 0a0d 5032 4447 5775 3878 364d     1JKY..2PGDuWx8M6
 80b37a8:	6c44 3653 5171 766b 6148 5552 306f 4d46     DlS6qQkvHaRUo0FM
 80b37b8:	3864 7354 6c53 4662 2f30 3976 3536 4771     d8TsSlbF0/v965qG
 80b37c8:	4b46 5368 6544 6f51 704d 6e59 6377 516d     FKhSDeQoMpYnwcmQ
 80b37d8:	6c69 6852 302f 0a0d 7961 544c 6c68 4c48     ilRh/0..ayLThlHL
 80b37e8:	384e 6731 6b53 6a4a 7256 4950 5930 7838     N81gSkJjVrPI0Y8x
 80b37f8:	5643 4250 7434 6277 5031 5546 3264 5066     CVPB4twb1PFUd2fP
 80b3808:	334d 4173 7431 384a 7333 355a 3876 6776     M3sA1tJ83sZ5v8vg
 80b3818:	7646 7932 666f 524b 0a0d 4250 7430 4a36     Fv2yofKR..PB0t6J
 80b3828:	557a 3841 6d31 7153 334d 786b 356c 2b65     zUA81mSqM3kxl5e+
 80b3838:	5a49 6877 4159 4f79 4f30 6754 2f33 7366     IZwhYAyO0OTg3/fs
 80b3848:	4838 4771 4e54 644b 4239 6f71 7755 5253     8HqGTNKd9BqoUwSR
 80b3858:	7a42 3070 4a36 674d 6235 0a0d 5572 4743     Bzp06JMg5b..rUCG
 80b3868:	6277 5543 4944 6d30 6178 4a64 4233 347a     wbCUDI0mxadJ3Bz4
 80b3878:	7857 3652 7966 704e 4b42 7932 6941 576e     WxR6fyNpBK2yAinW
 80b3888:	7345 6b69 7178 7445 0a0d 2d2d 2d2d 452d     EsikxqEt..-----E
 80b3898:	444e 4320 5245 4954 4946 4143 4554 2d2d     ND CERTIFICATE--
 80b38a8:	2d2d 202d 6e00 726f 6874 7565 6f72 6570     --- .northeurope
 80b38b8:	612e 6970 632e 676f 696e 6974 6576 6d2e     .api.cognitive.m
 80b38c8:	6369 6f72 6f73 7466 632e 6d6f 5300 7265     icrosoft.com.Ser
 80b38d8:	6576 2072 6543 7472 6669 6369 7461 7365     ver Certificates
 80b38e8:	6920 2073 6e69 762d 6c61 6469 002e 4547      is in-valid..GE
 80b38f8:	2054 662f 6361 2f65 3176 302e 662f 6361     T /face/v1.0/fac
 80b3908:	6c65 7369 7374 723f 7465 7275 526e 6365     elists?returnRec
 80b3918:	676f 696e 6974 6e6f 6f4d 6564 3d6c 6166     ognitionModel=fa
 80b3928:	736c 2065 5448 5054 312f 302e 0a0d 6f48     lse HTTP/1.0..Ho
 80b3938:	7473 203a 6f6e 7472 6568 7275 706f 2e65     st: northeurope.
 80b3948:	7061 2e69 6f63 6e67 7469 7669 2e65 696d     api.cognitive.mi
 80b3958:	7263 736f 666f 2e74 6f63 0d6d 430a 6e6f     crosoft.com..Con
 80b3968:	6574 746e 4c2d 6e65 7467 3a68 3020 0a0d     tent-Length: 0..
 80b3978:	634f 2d70 7041 6d69 532d 6275 6373 6972     Ocp-Apim-Subscri
 80b3988:	7470 6f69 2d6e 654b 3a79 3362 3132 3434     ption-Key:b32144
 80b3998:	6261 6661 3766 3034 6363 3061 6331 3266     abaff740cca01cf2
 80b39a8:	3530 3438 6265 3038 6430 0a0d 0a0d 2000     0584eb800d..... 
 80b39b8:	2120 0020 6425 252e 2e64 6425 252e 0064      ! .%d.%d.%d.%d.

080b39c8 <_ZL1K>:
 80b39c8:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
 80b39d8:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
 80b39e8:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
 80b39f8:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
 80b3a08:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
 80b3a18:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
 80b3a28:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
 80b3a38:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
 80b3a48:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
 80b3a58:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
 80b3a68:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
 80b3a78:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
 80b3a88:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
 80b3a98:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
 80b3aa8:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
 80b3ab8:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.
 80b3ac8:	862a 8648 0df7 0101 0008 2b20 0020 202c     *.H....... + ., 
 80b3ad8:	2500 3d73 3f00 3d3f 3a00 2500 3230 2558     .%s=.??=.:.%02X%
 80b3ae8:	0073 2e2e 2e2e 3f00 3f3f 2000 2528 2c73     s......???. (%s,
 80b3af8:	4d20 4647 2d31 7325 202c 7830 3025 5832      MGF1-%s, 0x%02X
 80b3b08:	0029 7325 6b20 7965 7320 7a69 0065 0000     ).%s key size...

080b3b18 <mbedtls_sha1_info>:
 80b3b18:	0004 0000 422c 080b 0014 0000 0040 0000     ....,B......@...
 80b3b28:	21ad 080a 21a9 080a 21a5 080a 63d1 080a     .!...!...!...c..
 80b3b38:	218f 080a 217d 080a 2179 080a 2175 080a     .!..}!..y!..u!..

080b3b48 <mbedtls_sha224_info>:
 80b3b48:	0005 0000 4257 080b 001c 0000 0040 0000     ....WB......@...
 80b3b58:	21f5 080a 21f1 080a 21ed 080a 21e1 080a     .!...!...!...!..
 80b3b68:	21cb 080a 21b9 080a 21b5 080a 21b1 080a     .!...!...!...!..

080b3b78 <mbedtls_sha384_info>:
 80b3b78:	0007 0000 42b1 080b 0030 0000 0080 0000     .....B..0.......
 80b3b88:	2245 080a 2241 080a 223d 080a 2231 080a     E"..A"..="..1"..
 80b3b98:	221b 080a 2209 080a 2205 080a 2201 080a     ."..."..."..."..

080b3ba8 <mbedtls_sha512_info>:
 80b3ba8:	0008 0000 42de 080b 0040 0000 0080 0000     .....B..@.......
 80b3bb8:	224b 080a 2241 080a 223d 080a 2237 080a     K"..A"..="..7"..
 80b3bc8:	221b 080a 2209 080a 2205 080a 2201 080a     ."..."..."..."..

080b3bd8 <mbedtls_sha256_info>:
 80b3bd8:	0006 0000 4284 080b 0020 0000 0040 0000     .....B.. ...@...
 80b3be8:	21fb 080a 21f1 080a 21ed 080a 21e7 080a     .!...!...!...!..
 80b3bf8:	21cb 080a 21b9 080a 21b5 080a 21b1 080a     .!...!...!...!..
 80b3c08:	6573 7063 3532 7236 0031 0000               secp256r1...

080b3c14 <_ZL20ecp_supported_curves>:
 80b3c14:	0003 0017 0100 0000 3c08 080b 0000 0000     .........<......
	...

080b3c2c <_ZL18oid_x520_attr_type>:
 80b3c2c:	44e1 080b 0003 0000 44e5 080b 44f6 080b     .D.......D...D..
 80b3c3c:	542a 080b 4502 080b 0003 0000 4506 080b     *T...E.......E..
 80b3c4c:	4518 080b 409d 080b 4520 080b 0003 0000     .E...@.. E......
 80b3c5c:	4524 080b 4533 080b 453c 080b 453e 080b     $E..3E..<E..>E..
 80b3c6c:	0003 0000 4542 080b 454e 080b 4554 080b     ....BE..NE..TE..
 80b3c7c:	4557 080b 0003 0000 455b 080b 4572 080b     WE......[E..rE..
 80b3c8c:	457f 080b 4581 080b 0003 0000 4585 080b     .E...E.......E..
 80b3c9c:	45a2 080b 45ab 080b 45ae 080b 0009 0000     .E...E...E......
 80b3cac:	45b8 080b 45c5 080b 45b8 080b 45d4 080b     .E...E...E...E..
 80b3cbc:	0003 0000 45d8 080b 45eb 080b 45de 080b     .....E...E...E..
 80b3ccc:	45f9 080b 0003 0000 45fd 080b 4611 080b     .E.......E...F..
 80b3cdc:	4603 080b 4620 080b 0003 0000 4624 080b     .F.. F......$F..
 80b3cec:	4635 080b 462a 080b 4641 080b 0003 0000     5F..*F..AF......
 80b3cfc:	4645 080b 4653 080b 465b 080b 465e 080b     EF..SF..[F..^F..
 80b3d0c:	0003 0000 4662 080b 4672 080b 467d 080b     ....bF..rF..}F..
 80b3d1c:	4680 080b 0003 0000 4684 080b 4693 080b     .F.......F...F..
 80b3d2c:	468a 080b 469c 080b 0003 0000 46a0 080b     .F...F.......F..
 80b3d3c:	46ba 080b 46a6 080b 46cf 080b 0003 0000     .F...F...F......
 80b3d4c:	46d3 080b 46df 080b 46d9 080b 46e5 080b     .F...F...F...F..
 80b3d5c:	0003 0000 46e9 080b 46fb 080b 46ef 080b     .....F...F...F..
 80b3d6c:	4718 080b 0003 0000 471c 080b 472c 080b     .G.......G..,G..
 80b3d7c:	4722 080b 4736 080b 000a 0000 4741 080b     "G..6G......AG..
 80b3d8c:	4754 080b 4765 080b 4768 080b 0003 0000     TG..eG..hG......
 80b3d9c:	476c 080b 4783 080b 4772 080b 0000 0000     lG...G..rG......
	...

080b3dbc <_ZL17oid_ext_key_usage>:
 80b3dbc:	42fa 080b 0008 0000 4303 080b 4314 080b     .B.......C...C..
 80b3dcc:	4332 080b 0008 0000 433b 080b 434c 080b     2C......;C..LC..
 80b3ddc:	436a 080b 0008 0000 4373 080b 4385 080b     jC......sC...C..
 80b3dec:	4392 080b 0008 0000 439b 080b 43b1 080b     .C.......C...C..
 80b3dfc:	43c3 080b 0008 0000 43cc 080b 43df 080b     .C.......C...C..
 80b3e0c:	43ed 080b 0008 0000 43f6 080b 4408 080b     .C.......C...D..
	...

080b3e2c <_ZL10oid_pk_alg>:
 80b3e2c:	40a8 080b 0009 0000 40b2 080b 40c0 080b     .@.......@...@..
 80b3e3c:	0001 0000 40c4 080b 0007 0000 40cc 080b     .....@.......@..
 80b3e4c:	40db 080b 0002 0000 40ea 080b 0005 0000     .@.......@......
 80b3e5c:	40f0 080b 40f8 080b 0003 0000 0000 0000     .@...@..........
	...

080b3e7c <_ZL14oid_cipher_alg>:
 80b3e7c:	406f 080b 0005 0000 4075 080b 3f4b 080b     o@......u@..K?..
 80b3e8c:	0021 0000 407c 080b 0008 0000 4085 080b     !...|@.......@..
 80b3e9c:	4092 080b 0025 0000 0000 0000 0000 0000     .@..%...........
	...

080b3eb8 <_ZL11oid_ecp_grp>:
 80b3eb8:	409f 080b 0008 0000 3c08 080b 3c08 080b     .@.......<...<..
 80b3ec8:	0003 0000 0000 0000 0000 0000 0000 0000     ................
	...
 80b3ee0:	862a 8648 0df7 0c01 0301 7000 6562 6957     *.H........pbeWi
 80b3ef0:	6874 4853 4141 646e 2d33 654b 5479 6972     thSHAAnd3-KeyTri
 80b3f00:	6c70 4465 5345 432d 4342 5000 4542 7720     pleDES-CBC.PBE w
 80b3f10:	7469 2068 4853 3141 6120 646e 3320 4b2d     ith SHA1 and 3-K
 80b3f20:	7965 3320 4544 0053 862a 8648 0df7 0c01     ey 3DES.*.H.....
 80b3f30:	0401 7000 6562 6957 6874 4853 4141 646e     ...pbeWithSHAAnd
 80b3f40:	2d32 654b 5479 6972 6c70 4465 5345 432d     2-KeyTripleDES-C
 80b3f50:	4342 5000 4542 7720 7469 2068 4853 3141     BC.PBE with SHA1
 80b3f60:	6120 646e 3220 4b2d 7965 3320 4544 0053      and 2-Key 3DES.
 80b3f70:	862a 8648 0df7 0702 6800 616d 5363 4148     *.H......hmacSHA
 80b3f80:	0031 4d48 4341 532d 4148 312d 2a00 4886     1.HMAC-SHA-1.*.H
 80b3f90:	f786 020d 0008 6d68 6361 4853 3241 3432     ......hmacSHA224
 80b3fa0:	4800 414d 2d43 4853 2d41 3232 0034 862a     .HMAC-SHA-224.*.
 80b3fb0:	8648 0df7 0902 6800 616d 5363 4148 3532     H......hmacSHA25
 80b3fc0:	0036 4d48 4341 532d 4148 322d 3635 2a00     6.HMAC-SHA-256.*
 80b3fd0:	4886 f786 020d 000a 6d68 6361 4853 3341     .H......hmacSHA3
 80b3fe0:	3438 4800 414d 2d43 4853 2d41 3833 0034     84.HMAC-SHA-384.
 80b3ff0:	862a 8648 0df7 0b02 6800 616d 5363 4148     *.H......hmacSHA
 80b4000:	3135 0032 4d48 4341 532d 4148 352d 3231     512.HMAC-SHA-512
 80b4010:	2b00 030e 1a02 6900 2d64 6873 3161 6000     .+.....id-sha1.`
 80b4020:	4886 6501 0403 0402 6900 2d64 6873 3261     .H.e.....id-sha2
 80b4030:	3432 6000 4886 6501 0403 0102 6900 2d64     24.`.H.e.....id-
 80b4040:	6873 3261 3635 6000 4886 6501 0403 0202     sha256.`.H.e....
 80b4050:	6900 2d64 6873 3361 3438 6000 4886 6501     .id-sha384.`.H.e
 80b4060:	0403 0302 6900 2d64 6873 3561 3231 2b00     .....id-sha512.+
 80b4070:	030e 0702 6400 7365 4243 0043 862a 8648     .....desCBC.*.H.
 80b4080:	0df7 0703 6400 7365 652d 6564 2d33 6263     .....des-ede3-cb
 80b4090:	0063 4544 2d53 4445 3345 432d 4342 2a00     c.DES-EDE3-CBC.*
 80b40a0:	4886 3dce 0103 0007 862a 8648 0df7 0101     .H.=....*.H.....
 80b40b0:	0001 7372 4561 636e 7972 7470 6f69 006e     ..rsaEncryption.
 80b40c0:	5352 0041 862a ce48 023d 0001 6469 652d     RSA.*.H.=...id-e
 80b40d0:	5063 6275 696c 4b63 7965 4700 6e65 7265     cPublicKey.Gener
 80b40e0:	6369 4520 2043 656b 0079 812b 0104 000c     ic EC key.+.....
 80b40f0:	6469 652d 4463 0048 4345 6b20 7965 6620     id-ecDH.EC key f
 80b4100:	726f 4520 4443 0048 862a 8648 0df7 0101     or ECDH.*.H.....
 80b4110:	0005 6873 2d61 5731 7469 5268 4153 6e45     ..sha-1WithRSAEn
 80b4120:	7263 7079 6974 6e6f 5200 4153 7720 7469     cryption.RSA wit
 80b4130:	2068 4853 3141 2a00 4886 f786 010d 0e01     h SHA1.*.H......
 80b4140:	7300 6168 3232 5734 7469 5268 4153 6e45     .sha224WithRSAEn
 80b4150:	7263 7079 6974 6e6f 5200 4153 7720 7469     cryption.RSA wit
 80b4160:	2068 4853 2d41 3232 0034 862a 8648 0df7     h SHA-224.*.H...
 80b4170:	0101 000b 6873 3261 3635 6957 6874 5352     ....sha256WithRS
 80b4180:	4541 636e 7972 7470 6f69 006e 5352 2041     AEncryption.RSA 
 80b4190:	6977 6874 5320 4148 322d 3635 2a00 4886     with SHA-256.*.H
 80b41a0:	f786 010d 0c01 7300 6168 3833 5734 7469     .......sha384Wit
 80b41b0:	5268 4153 6e45 7263 7079 6974 6e6f 5200     hRSAEncryption.R
 80b41c0:	4153 7720 7469 2068 4853 2d41 3833 0034     SA with SHA-384.
 80b41d0:	862a 8648 0df7 0101 000d 6873 3561 3231     *.H.......sha512
 80b41e0:	6957 6874 5352 4541 636e 7972 7470 6f69     WithRSAEncryptio
 80b41f0:	006e 5352 2041 6977 6874 5320 4148 352d     n.RSA with SHA-5
 80b4200:	3231 2b00 030e 1d02 2a00 4886 3dce 0104     12.+.....*.H.=..
 80b4210:	6500 6463 6173 772d 7469 2d68 4853 3141     .ecdsa-with-SHA1
 80b4220:	4500 4443 4153 7720 7469 2068 4853 3141     .ECDSA with SHA1
 80b4230:	2a00 4886 3dce 0304 0001 6365 7364 2d61     .*.H.=....ecdsa-
 80b4240:	6977 6874 532d 4148 3232 0034 4345 5344     with-SHA224.ECDS
 80b4250:	2041 6977 6874 5320 4148 3232 0034 862a     A with SHA224.*.
 80b4260:	ce48 043d 0203 6500 6463 6173 772d 7469     H.=....ecdsa-wit
 80b4270:	2d68 4853 3241 3635 4500 4443 4153 7720     h-SHA256.ECDSA w
 80b4280:	7469 2068 4853 3241 3635 2a00 4886 3dce     ith SHA256.*.H.=
 80b4290:	0304 0003 6365 7364 2d61 6977 6874 532d     ....ecdsa-with-S
 80b42a0:	4148 3833 0034 4345 5344 2041 6977 6874     HA384.ECDSA with
 80b42b0:	5320 4148 3833 0034 862a ce48 043d 0403      SHA384.*.H.=...
 80b42c0:	6500 6463 6173 772d 7469 2d68 4853 3541     .ecdsa-with-SHA5
 80b42d0:	3231 4500 4443 4153 7720 7469 2068 4853     12.ECDSA with SH
 80b42e0:	3541 3231 2a00 4886 f786 010d 0a01 5200     A512.*.H.......R
 80b42f0:	4153 5353 2d41 5350 0053 062b 0501 0705     SASSA-PSS.+.....
 80b4300:	0103 6900 2d64 706b 732d 7265 6576 4172     ...id-kp-serverA
 80b4310:	7475 0068 4c54 2053 6557 2062 6553 7672     uth.TLS Web Serv
 80b4320:	7265 4120 7475 6568 746e 6369 7461 6f69     er Authenticatio
 80b4330:	006e 062b 0501 0705 0203 6900 2d64 706b     n.+........id-kp
 80b4340:	632d 696c 6e65 4174 7475 0068 4c54 2053     -clientAuth.TLS 
 80b4350:	6557 2062 6c43 6569 746e 4120 7475 6568     Web Client Authe
 80b4360:	746e 6369 7461 6f69 006e 062b 0501 0705     ntication.+.....
 80b4370:	0303 6900 2d64 706b 632d 646f 5365 6769     ...id-kp-codeSig
 80b4380:	696e 676e 4300 646f 2065 6953 6e67 6e69     ning.Code Signin
 80b4390:	0067 062b 0501 0705 0403 6900 2d64 706b     g.+........id-kp
 80b43a0:	652d 616d 6c69 7250 746f 6365 6974 6e6f     -emailProtection
 80b43b0:	4500 6d2d 6961 206c 7250 746f 6365 6974     .E-mail Protecti
 80b43c0:	6e6f 2b00 0106 0505 0307 0008 6469 6b2d     on.+........id-k
 80b43d0:	2d70 6974 656d 7453 6d61 6970 676e 5400     p-timeStamping.T
 80b43e0:	6d69 2065 7453 6d61 6970 676e 2b00 0106     ime Stamping.+..
 80b43f0:	0505 0307 0009 6469 6b2d 2d70 434f 5053     ......id-kp-OCSP
 80b4400:	6953 6e67 6e69 0067 434f 5053 5320 6769     Signing.OCSP Sig
 80b4410:	696e 676e 5500 131d 6900 2d64 6563 622d     ning.U...id-ce-b
 80b4420:	7361 6369 6f43 736e 7274 6961 746e 0073     asicConstraints.
 80b4430:	6142 6973 2063 6f43 736e 7274 6961 746e     Basic Constraint
 80b4440:	0073 1d55 000f 6469 632d 2d65 656b 5579     s.U...id-ce-keyU
 80b4450:	6173 6567 5500 251d 6900 2d64 6563 652d     sage.U.%.id-ce-e
 80b4460:	7478 654b 5579 6173 6567 4500 7478 6e65     xtKeyUsage.Exten
 80b4470:	6564 2064 654b 2079 7355 6761 0065 1d55     ded Key Usage.U.
 80b4480:	0011 6469 632d 2d65 7573 6a62 6365 4174     ..id-ce-subjectA
 80b4490:	746c 614e 656d 5300 6275 656a 7463 4120     ltName.Subject A
 80b44a0:	746c 4e20 6d61 0065 8660 0148 f886 0142     lt Name.`.H...B.
 80b44b0:	0001 6469 6e2d 7465 6373 7061 2d65 6563     ..id-netscape-ce
 80b44c0:	7472 7974 6570 4e00 7465 6373 7061 2065     rttype.Netscape 
 80b44d0:	6543 7472 6669 6369 7461 2065 7954 6570     Certificate Type
 80b44e0:	5500 0304 6900 2d64 7461 632d 6d6f 6f6d     .U...id-at-commo
 80b44f0:	4e6e 6d61 0065 6f43 6d6d 6e6f 4e20 6d61     nName.Common Nam
 80b4500:	0065 0455 0006 6469 612d 2d74 6f63 6e75     e.U...id-at-coun
 80b4510:	7274 4e79 6d61 0065 6f43 6e75 7274 0079     tryName.Country.
 80b4520:	0455 0007 6469 612d 2d74 6f6c 6163 696c     U...id-at-locali
 80b4530:	7974 4c00 636f 6c61 7469 0079 004c 0455     ty.Locality.L.U.
 80b4540:	0008 6469 612d 2d74 7473 7461 0065 7453     ..id-at-state.St
 80b4550:	7461 0065 5453 5500 0a04 6900 2d64 7461     ate.ST.U...id-at
 80b4560:	6f2d 6772 6e61 7a69 7461 6f69 4e6e 6d61     -organizationNam
 80b4570:	0065 724f 6167 696e 617a 6974 6e6f 4f00     e.Organization.O
 80b4580:	5500 0b04 6900 2d64 7461 6f2d 6772 6e61     .U...id-at-organ
 80b4590:	7a69 7461 6f69 616e 556c 696e 4e74 6d61     izationalUnitNam
 80b45a0:	0065 724f 2067 6e55 7469 4f00 0055 862a     e.Org Unit.OU.*.
 80b45b0:	8648 0df7 0901 0001 6d65 6961 416c 6464     H.......emailAdd
 80b45c0:	6572 7373 4500 6d2d 6961 206c 6461 7264     ress.E-mail addr
 80b45d0:	7365 0073 0455 0005 6469 612d 2d74 6573     ess.U...id-at-se
 80b45e0:	6972 6c61 754e 626d 7265 5300 7265 6169     rialNumber.Seria
 80b45f0:	206c 756e 626d 7265 5500 1004 6900 2d64     l number.U...id-
 80b4600:	7461 702d 736f 6174 416c 6464 6572 7373     at-postalAddress
 80b4610:	5000 736f 6174 206c 6461 7264 7365 0073     .Postal address.
 80b4620:	0455 0011 6469 612d 2d74 6f70 7473 6c61     U...id-at-postal
 80b4630:	6f43 6564 5000 736f 6174 206c 6f63 6564     Code.Postal code
 80b4640:	5500 0404 6900 2d64 7461 732d 7275 614e     .U...id-at-surNa
 80b4650:	656d 5300 7275 616e 656d 5300 004e 0455     me.Surname.SN.U.
 80b4660:	002a 6469 612d 2d74 6967 6576 4e6e 6d61     *.id-at-givenNam
 80b4670:	0065 6947 6576 206e 616e 656d 4700 004e     e.Given name.GN.
 80b4680:	0455 002b 6469 612d 2d74 6e69 7469 6169     U.+.id-at-initia
 80b4690:	736c 4900 696e 6974 6c61 0073 0455 002c     ls.Initials.U.,.
 80b46a0:	6469 612d 2d74 6567 656e 6172 6974 6e6f     id-at-generation
 80b46b0:	7551 6c61 6669 6569 0072 6547 656e 6172     Qualifier.Genera
 80b46c0:	6974 6e6f 7120 6175 696c 6966 7265 5500     tion qualifier.U
 80b46d0:	0c04 6900 2d64 7461 742d 7469 656c 5400     ...id-at-title.T
 80b46e0:	7469 656c 5500 2e04 6900 2d64 7461 642d     itle.U...id-at-d
 80b46f0:	516e 6175 696c 6966 7265 4400 7369 6974     nQualifier.Disti
 80b4700:	676e 6975 6873 6465 4e20 6d61 2065 7571     nguished Name qu
 80b4710:	6c61 6669 6569 0072 0455 0041 6469 612d     alifier.U.A.id-a
 80b4720:	2d74 7370 7565 6f64 796e 006d 7350 7565     t-pseudonym.Pseu
 80b4730:	6f64 796e 006d 9209 8926 f293 642c 1901     donym...&...,d..
 80b4740:	6900 2d64 6f64 616d 6e69 6f43 706d 6e6f     .id-domainCompon
 80b4750:	6e65 0074 6f44 616d 6e69 6320 6d6f 6f70     ent.Domain compo
 80b4760:	656e 746e 4400 0043 0455 002d 6469 612d     nent.DC.U.-.id-a
 80b4770:	2d74 6e75 7169 6575 6449 6e65 6974 6966     t-uniqueIdentifi
 80b4780:	7265 5500 696e 7571 2065 6449 6e65 6974     er.Unique Identi
 80b4790:	6966 7265 0000 0000                         fier....

080b4798 <_ZL18oid_pkcs12_pbe_alg>:
 80b4798:	3ee0 080b 000a 0000 3eeb 080b 3f0b 080b     .>.......>...?..
 80b47a8:	2504 0000 3f28 080b 000a 0000 3f33 080b     .%..(?......3?..
 80b47b8:	3f53 080b 2304 0000 0000 0000 0000 0000     S?...#..........
	...

080b47d4 <_ZL10oid_md_alg>:
 80b47d4:	4011 080b 0005 0000 4017 080b 3f87 080b     .@.......@...?..
 80b47e4:	0004 0000 401f 080b 0009 0000 4029 080b     .....@......)@..
 80b47f4:	4162 080b 0005 0000 4033 080b 0009 0000     bA......3@......
 80b4804:	403d 080b 4195 080b 0006 0000 4047 080b     =@...A......G@..
 80b4814:	0009 0000 4051 080b 41c8 080b 0007 0000     ....Q@...A......
 80b4824:	405b 080b 0009 0000 4065 080b 41fb 080b     [@......e@...A..
 80b4834:	0008 0000 0000 0000 0000 0000 0000 0000     ................
	...

080b484c <_ZL11oid_sig_alg>:
 80b484c:	4108 080b 0009 0000 4112 080b 4129 080b     .A.......A..)A..
 80b485c:	0104 0000 4137 080b 0009 0000 4141 080b     ....7A......AA..
 80b486c:	4159 080b 0105 0000 416a 080b 0009 0000     YA......jA......
 80b487c:	4174 080b 418c 080b 0106 0000 419d 080b     tA...A.......A..
 80b488c:	0009 0000 41a7 080b 41bf 080b 0107 0000     .....A...A......
 80b489c:	41d0 080b 0009 0000 41da 080b 41f2 080b     .A.......A...A..
 80b48ac:	0108 0000 4203 080b 0005 0000 4112 080b     .....B.......A..
 80b48bc:	4129 080b 0104 0000 4209 080b 0007 0000     )A.......B......
 80b48cc:	4211 080b 4221 080b 0404 0000 4231 080b     .B..!B......1B..
 80b48dc:	0008 0000 423a 080b 424c 080b 0405 0000     ....:B..LB......
 80b48ec:	425e 080b 0008 0000 4267 080b 4279 080b     ^B......gB..yB..
 80b48fc:	0406 0000 428b 080b 0008 0000 4294 080b     .....B.......B..
 80b490c:	42a6 080b 0407 0000 42b8 080b 0008 0000     .B.......B......
 80b491c:	42c1 080b 42d3 080b 0408 0000 42e5 080b     .B...B.......B..
 80b492c:	0009 0000 42ef 080b 42ef 080b 0600 0000     .....B...B......
	...

080b4950 <_ZL11oid_md_hmac>:
 80b4950:	3f70 080b 0008 0000 3f79 080b 3f82 080b     p?......y?...?..
 80b4960:	0004 0000 3f8d 080b 0008 0000 3f96 080b     .....?.......?..
 80b4970:	3fa1 080b 0005 0000 3fae 080b 0008 0000     .?.......?......
 80b4980:	3fb7 080b 3fc2 080b 0006 0000 3fcf 080b     .?...?.......?..
 80b4990:	0008 0000 3fd8 080b 3fe3 080b 0007 0000     .....?...?......
 80b49a0:	3ff0 080b 0008 0000 3ff9 080b 4004 080b     .?.......?...@..
 80b49b0:	0008 0000 0000 0000 0000 0000 0000 0000     ................
	...

080b49c8 <_ZL12oid_x509_ext>:
 80b49c8:	4415 080b 0003 0000 4419 080b 4430 080b     .D.......D..0D..
 80b49d8:	0100 0000 4442 080b 0003 0000 4446 080b     ....BD......FD..
 80b49e8:	4474 080b 0004 0000 4455 080b 0003 0000     tD......UD......
 80b49f8:	4459 080b 446b 080b 0800 0000 447e 080b     YD..kD......~D..
 80b4a08:	0003 0000 4482 080b 4497 080b 0020 0000     .....D...D.. ...
 80b4a18:	44a8 080b 0009 0000 44b2 080b 44c7 080b     .D.......D...D..
 80b4a28:	0000 0001 0000 0000 0000 0000 0000 0000     ................
	...
 80b4a40:	862a 8648 0df7 0501 000c 0000               *.H.........

080b4a4c <_ZL16aes_256_ecb_info>:
 80b4a4c:	0104 0000 0100 0000 4b2c 080b 0000 0000     ........,K......
 80b4a5c:	0000 0000 0010 0000 4af0 080b               .........J..

080b4a68 <_ZL16aes_128_ecb_info>:
 80b4a68:	0102 0000 0080 0000 4b44 080b 0000 0000     ........DK......
 80b4a78:	0000 0000 0010 0000 4af0 080b               .........J..

080b4a84 <_ZL12gcm_aes_info>:
 80b4a84:	0002 0000 0000 0000 679f 080a 679f 080a     .........g...g..
 80b4a94:	6787 080a 6775 080a                         .g..ug..

080b4a9c <mbedtls_cipher_definitions>:
 80b4a9c:	0002 0000 4a68 080b 0003 0000 4b50 080b     ....hJ......PK..
 80b4aac:	0004 0000 4a4c 080b 000e 0000 4b6c 080b     ....LJ......lK..
 80b4abc:	000f 0000 4ad4 080b 0010 0000 4b88 080b     .....J.......K..
	...

080b4ad4 <_ZL16aes_192_gcm_info>:
 80b4ad4:	060f 0000 00c0 0000 4b14 080b 000c 0000     .........K......
 80b4ae4:	0001 0000 0010 0000 4a84 080b               .........J..

080b4af0 <_ZL8aes_info>:
 80b4af0:	0002 0000 67db 080a 67d7 080a 67d3 080a     .....g...g...g..
 80b4b00:	67bb 080a 67a9 080a 4541 2d53 3532 2d36     .g...g..AES-256-
 80b4b10:	4347 004d 4541 2d53 3931 2d32 4347 004d     GCM.AES-192-GCM.
 80b4b20:	4541 2d53 3231 2d38 4347 004d 4541 2d53     AES-128-GCM.AES-
 80b4b30:	3532 2d36 4345 0042 4541 2d53 3931 2d32     256-ECB.AES-192-
 80b4b40:	4345 0042 4541 2d53 3231 2d38 4345 0042     ECB.AES-128-ECB.

080b4b50 <_ZL16aes_192_ecb_info>:
 80b4b50:	0103 0000 00c0 0000 4b38 080b 0000 0000     ........8K......
 80b4b60:	0000 0000 0010 0000 4af0 080b               .........J..

080b4b6c <_ZL16aes_128_gcm_info>:
 80b4b6c:	060e 0000 0080 0000 4b20 080b 000c 0000     ........ K......
 80b4b7c:	0001 0000 0010 0000 4a84 080b               .........J..

080b4b88 <_ZL16aes_256_gcm_info>:
 80b4b88:	0610 0000 0100 0000 4b08 080b 000c 0000     .........K......
 80b4b98:	0001 0000 0010 0000 4a84 080b 7372 2e61     .........J..rsa.
 80b4ba8:	004e 7372 2e61 0045 6365 656b 2e79 0051     N.rsa.E.eckey.Q.
 80b4bb8:	4345 5344 0041 4345 445f 0048 4345 0000     ECDSA.EC_DH.EC..

080b4bc8 <mbedtls_ecdsa_info>:
 80b4bc8:	0004 0000 4bb8 080b 681d 080a 6841 080a     .....K...h..Ah..
 80b4bd8:	6a4d 080a 69fd 080a 0000 0000 0000 0000     Mj...i..........
 80b4be8:	69d1 080a 69d5 080a 69eb 080a 6821 080a     .i...i...i..!h..

080b4bf8 <mbedtls_eckeydh_info>:
 80b4bf8:	0003 0000 4bbe 080b 681d 080a 6835 080a     .....K...h..5h..
	...
 80b4c18:	69d1 080a 69bb 080a 69a9 080a 6821 080a     .i...i...i..!h..

080b4c28 <mbedtls_rsa_info>:
 80b4c28:	0001 0000 40c0 080b 6879 080a 67df 080a     .....@..yh...g..
 80b4c38:	695d 080a 691d 080a 68d1 080a 6885 080a     ]i...i...h...h..
 80b4c48:	6875 080a 685b 080a 6849 080a 67ed 080a     uh..[h..Ih...g..

080b4c58 <mbedtls_eckey_info>:
 80b4c58:	0002 0000 4bc4 080b 681d 080a 6811 080a     .....K...h...h..
 80b4c68:	6a71 080a 6a05 080a 0000 0000 0000 0000     qj...j..........
 80b4c78:	69d1 080a 69bb 080a 69a9 080a 6821 080a     .i...i...i..!h..
 80b4c88:	862a 8648 0df7 0c01 0101 2a00 4886 f786     *.H........*.H..
 80b4c98:	010d 0d05 2d00 2d2d 2d2d 4e45 2044 5352     .....-----END RS
 80b4ca8:	2041 5250 5649 5441 2045 454b 2d59 2d2d     A PRIVATE KEY---
 80b4cb8:	2d2d 2d00 2d2d 2d2d 4542 4947 204e 5352     --.-----BEGIN RS
 80b4cc8:	2041 5250 5649 5441 2045 454b 2d59 2d2d     A PRIVATE KEY---
 80b4cd8:	2d2d 2d00 2d2d 2d2d 4e45 2044 4345 5020     --.-----END EC P
 80b4ce8:	4952 4156 4554 4b20 5945 2d2d 2d2d 002d     RIVATE KEY-----.
 80b4cf8:	2d2d 2d2d 422d 4745 4e49 4520 2043 5250     -----BEGIN EC PR
 80b4d08:	5649 5441 2045 454b 2d59 2d2d 2d2d 2d00     IVATE KEY-----.-
 80b4d18:	2d2d 2d2d 4e45 2044 5250 5649 5441 2045     ----END PRIVATE 
 80b4d28:	454b 2d59 2d2d 2d2d 2d00 2d2d 2d2d 4542     KEY-----.-----BE
 80b4d38:	4947 204e 5250 5649 5441 2045 454b 2d59     GIN PRIVATE KEY-
 80b4d48:	2d2d 2d2d 2d00 2d2d 2d2d 4e45 2044 4e45     ----.-----END EN
 80b4d58:	5243 5059 4554 2044 5250 5649 5441 2045     CRYPTED PRIVATE 
 80b4d68:	454b 2d59 2d2d 2d2d 2d00 2d2d 2d2d 4542     KEY-----.-----BE
 80b4d78:	4947 204e 4e45 5243 5059 4554 2044 5250     GIN ENCRYPTED PR
 80b4d88:	5649 5441 2045 454b 2d59 2d2d 2d2d 2d00     IVATE KEY-----.-
 80b4d98:	2d2d 2d2d 4e45 2044 5352 2041 5550 4c42     ----END RSA PUBL
 80b4da8:	4349 4b20 5945 2d2d 2d2d 002d 2d2d 2d2d     IC KEY-----.----
 80b4db8:	422d 4745 4e49 5220 4153 5020 4255 494c     -BEGIN RSA PUBLI
 80b4dc8:	2043 454b 2d59 2d2d 2d2d 2d00 2d2d 2d2d     C KEY-----.-----
 80b4dd8:	4e45 2044 5550 4c42 4349 4b20 5945 2d2d     END PUBLIC KEY--
 80b4de8:	2d2d 002d 2d2d 2d2d 422d 4745 4e49 5020     ---.-----BEGIN P
 80b4df8:	4255 494c 2043 454b 2d59 2d2d 2d2d 0000     UBLIC KEY-----..

080b4e08 <_ZL5last4>:
	...
 80b4e10:	1c20 0000 0000 0000 3840 0000 0000 0000      .......@8......
 80b4e20:	2460 0000 0000 0000 7080 0000 0000 0000     `$.......p......
 80b4e30:	6ca0 0000 0000 0000 48c0 0000 0000 0000     .l.......H......
 80b4e40:	54e0 0000 0000 0000 e100 0000 0000 0000     .T..............
 80b4e50:	fd20 0000 0000 0000 d940 0000 0000 0000      .......@.......
 80b4e60:	c560 0000 0000 0000 9180 0000 0000 0000     `...............
 80b4e70:	8da0 0000 0000 0000 a9c0 0000 0000 0000     ................
 80b4e80:	b5e0 0000 0000 0000                         ........

080b4e88 <_ZL14base64_dec_map>:
 80b4e88:	7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f     ................
 80b4e98:	7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f     ................
 80b4ea8:	7f7f 7f7f 7f7f 7f7f 7f7f 3e7f 7f7f 3f7f     ...........>...?
 80b4eb8:	3534 3736 3938 3b3a 3d3c 7f7f 407f 7f7f     456789:;<=...@..
 80b4ec8:	007f 0201 0403 0605 0807 0a09 0c0b 0e0d     ................
 80b4ed8:	100f 1211 1413 1615 1817 7f19 7f7f 7f7f     ................
 80b4ee8:	1a7f 1c1b 1e1d 201f 2221 2423 2625 2827     ....... !"#$%&'(
 80b4ef8:	2a29 2c2b 2e2d 302f 3231 7f33 7f7f 7f7f     )*+,-./0123.....

080b4f08 <CSWTCH.35>:
 80b4f08:	3b18 080b 3b48 080b 3bd8 080b 3b78 080b     .;..H;...;..x;..
 80b4f18:	3ba8 080b                                   .;..

080b4f1c <_ZL11secp256r1_b>:
 80b4f1c:	604b 27d2 3c3e 3bce b0f6 cc53 06b0 651d     K`.'><.;..S....e
 80b4f2c:	86bc 7698 bd55 b3eb 93e7 aa3a 35d8 5ac6     ...vU.....:..5.Z

080b4f3c <_ZL11secp256r1_n>:
 80b4f3c:	2551 fc63 cac2 f3b9 9e84 a717 faad bce6     Q%c.............
 80b4f4c:	ffff ffff ffff ffff 0000 0000 ffff ffff     ................

080b4f5c <_ZL11secp256r1_p>:
 80b4f5c:	ffff ffff ffff ffff ffff ffff 0000 0000     ................
	...
 80b4f74:	0001 0000 ffff ffff                         ........

080b4f7c <_ZL12secp256r1_gx>:
 80b4f7c:	c296 d898 3945 f4a1 33a0 2deb 7d81 7703     ....E9...3.-.}.w
 80b4f8c:	40f2 63a4 e6e5 f8bc 4247 e12c d1f2 6b17     .@.c....GB,....k

080b4f9c <_ZL12secp256r1_gy>:
 80b4f9c:	51f5 37bf 4068 cbb6 5ece 6b31 3357 2bce     .Q.7h@...^1kW3.+
 80b4fac:	9e16 7c0f eb4a 8ee7 7f9b fe1a 42e2 4fe3     ...|J........B.O
 80b4fbc:	1d55 0025 0000 0000                         U.%.....

080b4fc4 <_ZL23x509_crt_verify_strings>:
 80b4fc4:	0001 0000 5394 080b 0002 0000 53b9 080b     .....S.......S..
 80b4fd4:	0004 0000 53e8 080b 0008 0000 542d 080b     .....S......-T..
 80b4fe4:	0010 0000 5467 080b 0020 0000 5499 080b     ....gT.. ....T..
 80b4ff4:	0040 0000 54ac 080b 0080 0000 54c4 080b     @....T.......T..
 80b5004:	0100 0000 54e9 080b 0200 0000 5517 080b     .....T.......U..
 80b5014:	0400 0000 5545 080b 0800 0000 5560 080b     ....EU......`U..
 80b5024:	1000 0000 558c 080b 2000 0000 55c0 080b     .....U... ...U..
 80b5034:	4000 0000 55ee 080b 8000 0000 5623 080b     .@...U......#V..
 80b5044:	0000 0001 566c 080b 0000 0002 56be 080b     ....lV.......V..
 80b5054:	0000 0004 56eb 080b 0000 0008 572c 080b     .....V......,W..
	...

080b506c <mbedtls_x509_crt_profile_default>:
 80b506c:	00f0 0000 ffff 0fff ffff 0fff 0800 0000     ................
 80b507c:	7274 6575 6600 6c61 6573 0a00 6543 7472     true.false..Cert
 80b508c:	6669 6369 7461 2065 7369 7520 696e 696e     ificate is unini
 80b509c:	6974 6c61 7369 6465 0a21 2500 6373 7265     tialised!..%scer
 80b50ac:	2e74 7620 7265 6973 6e6f 2020 2020 3a20     t. version     :
 80b50bc:	2520 0a64 2500 7373 7265 6169 206c 756e      %d..%sserial nu
 80b50cc:	626d 7265 2020 2020 3a20 0020 250a 6973     mber     : ..%si
 80b50dc:	7373 6575 2072 616e 656d 2020 2020 2020     ssuer name      
 80b50ec:	3a20 0020 250a 7373 6275 656a 7463 6e20      : ..%ssubject n
 80b50fc:	6d61 2065 2020 2020 3a20 0020 250a 6973     ame      : ..%si
 80b510c:	7373 6575 2064 6f20 206e 2020 2020 2020     ssued  on       
 80b511c:	3a20 2520 3430 2d64 3025 6432 252d 3230      : %04d-%02d-%02
 80b512c:	2064 3025 6432 253a 3230 3a64 3025 6432     d %02d:%02d:%02d
 80b513c:	0a00 7325 7865 6970 6572 2073 6e6f 2020     ..%sexpires on  
 80b514c:	2020 2020 2020 203a 3025 6434 252d 3230           : %04d-%02
 80b515c:	2d64 3025 6432 2520 3230 3a64 3025 6432     d-%02d %02d:%02d
 80b516c:	253a 3230 0064 250a 7373 6769 656e 2064     :%02d..%ssigned 
 80b517c:	7375 6e69 2067 2020 2020 3a20 0020 250a     using      : ..%
 80b518c:	2573 312d 7338 203a 6425 6220 7469 0073     s%-18s: %d bits.
 80b519c:	250a 6273 7361 6369 6320 6e6f 7473 6172     .%sbasic constra
 80b51ac:	6e69 7374 3a20 4320 3d41 7325 2c00 6d20     ints : CA=%s., m
 80b51bc:	7861 705f 7461 6c68 6e65 253d 0064 250a     ax_pathlen=%d..%
 80b51cc:	7373 6275 656a 7463 6120 746c 6e20 6d61     ssubject alt nam
 80b51dc:	2065 3a20 0020 250a 6373 7265 2e74 7420     e  : ..%scert. t
 80b51ec:	7079 2065 2020 2020 2020 3a20 0020 7325     ype        : .%s
 80b51fc:	5353 204c 6c43 6569 746e 2500 5373 4c53     SSL Client.%sSSL
 80b520c:	5320 7265 6576 0072 7325 6d45 6961 006c      Server.%sEmail.
 80b521c:	7325 624f 656a 7463 5320 6769 696e 676e     %sObject Signing
 80b522c:	2500 5273 7365 7265 6576 0064 7325 5353     .%sReserved.%sSS
 80b523c:	204c 4143 2500 4573 616d 6c69 4320 0041     L CA.%sEmail CA.
 80b524c:	7325 624f 656a 7463 5320 6769 696e 676e     %sObject Signing
 80b525c:	4320 0041 250a 6b73 7965 7520 6173 6567      CA..%skey usage
 80b526c:	2020 2020 2020 2020 3a20 0020 7325 6944              : .%sDi
 80b527c:	6967 6174 206c 6953 6e67 7461 7275 0065     gital Signature.
 80b528c:	7325 6f4e 206e 6552 7570 6964 7461 6f69     %sNon Repudiatio
 80b529c:	006e 7325 654b 2079 6e45 6963 6870 7265     n.%sKey Encipher
 80b52ac:	656d 746e 2500 4473 7461 2061 6e45 6963     ment.%sData Enci
 80b52bc:	6870 7265 656d 746e 2500 4b73 7965 4120     pherment.%sKey A
 80b52cc:	7267 6565 656d 746e 2500 4b73 7965 4320     greement.%sKey C
 80b52dc:	7265 2074 6953 6e67 2500 4373 4c52 5320     ert Sign.%sCRL S
 80b52ec:	6769 006e 7325 6e45 6963 6870 7265 4f20     ign.%sEncipher O
 80b52fc:	6c6e 0079 7325 6544 6963 6870 7265 4f20     nly.%sDecipher O
 80b530c:	6c6e 0079 250a 6573 7478 6b20 7965 7520     nly..%sext key u
 80b531c:	6173 6567 2020 2020 3a20 0020 7325 7325     sage     : .%s%s
 80b532c:	2500 2573 0a73 2500 5573 6b6e 6f6e 6e77     .%s%s..%sUnknown
 80b533c:	7220 6165 6f73 206e 7428 6968 2073 6873      reason (this sh
 80b534c:	756f 646c 6e20 746f 6820 7061 6570 296e     ould not happen)
 80b535c:	000a 2d2d 2d2d 422d 4745 4e49 4320 5245     ..-----BEGIN CER
 80b536c:	4954 4946 4143 4554 2d2d 2d2d 002d 2d2d     TIFICATE-----.--
 80b537c:	2d2d 452d 444e 4320 5245 4954 4946 4143     ---END CERTIFICA
 80b538c:	4554 2d2d 2d2d 002d 6854 2065 6563 7472     TE-----.The cert
 80b539c:	6669 6369 7461 2065 6176 696c 6964 7974     ificate validity
 80b53ac:	6820 7361 6520 7078 7269 6465 5400 6568      has expired.The
 80b53bc:	6320 7265 6974 6966 6163 6574 6820 7361      certificate has
 80b53cc:	6220 6565 206e 6572 6f76 656b 2064 6928      been revoked (i
 80b53dc:	2073 6e6f 6120 4320 4c52 0029 6854 2065     s on a CRL).The 
 80b53ec:	6563 7472 6669 6369 7461 2065 6f43 6d6d     certificate Comm
 80b53fc:	6e6f 4e20 6d61 2065 4328 294e 6420 656f     on Name (CN) doe
 80b540c:	2073 6f6e 2074 616d 6374 2068 6977 6874     s not match with
 80b541c:	7420 6568 6520 7078 6365 6574 2064 4e43      the expected CN
 80b542c:	5400 6568 6320 7265 6974 6966 6163 6574     .The certificate
 80b543c:	6920 2073 6f6e 2074 6f63 7272 6365 6c74      is not correctl
 80b544c:	2079 6973 6e67 6465 6220 2079 6874 2065     y signed by the 
 80b545c:	7274 7375 6574 2064 4143 5400 6568 4320     trusted CA.The C
 80b546c:	4c52 6920 2073 6f6e 2074 6f63 7272 6365     RL is not correc
 80b547c:	6c74 2079 6973 6e67 6465 6220 2079 6874     tly signed by th
 80b548c:	2065 7274 7375 6574 2064 4143 5400 6568     e trusted CA.The
 80b549c:	4320 4c52 6920 2073 7865 6970 6572 0064      CRL is expired.
 80b54ac:	6543 7472 6669 6369 7461 2065 6177 2073     Certificate was 
 80b54bc:	696d 7373 6e69 0067 6543 7472 6669 6369     missing.Certific
 80b54cc:	7461 2065 6576 6972 6966 6163 6974 6e6f     ate verification
 80b54dc:	7720 7361 7320 696b 7070 6465 4f00 6874      was skipped.Oth
 80b54ec:	7265 7220 6165 6f73 206e 6328 6e61 6220     er reason (can b
 80b54fc:	2065 7375 6465 6220 2079 6576 6972 7966     e used by verify
 80b550c:	6320 6c61 626c 6361 296b 5400 6568 6320      callback).The c
 80b551c:	7265 6974 6966 6163 6574 7620 6c61 6469     ertificate valid
 80b552c:	7469 2079 7473 7261 7374 6920 206e 6874     ity starts in th
 80b553c:	2065 7566 7574 6572 5400 6568 4320 4c52     e future.The CRL
 80b554c:	6920 2073 7266 6d6f 7420 6568 6620 7475      is from the fut
 80b555c:	7275 0065 7355 6761 2065 6f64 7365 6e20     ure.Usage does n
 80b556c:	746f 6d20 7461 6863 7420 6568 6b20 7965     ot match the key
 80b557c:	7355 6761 2065 7865 6574 736e 6f69 006e     Usage extension.
 80b558c:	7355 6761 2065 6f64 7365 6e20 746f 6d20     Usage does not m
 80b559c:	7461 6863 7420 6568 6520 7478 6e65 6564     atch the extende
 80b55ac:	4b64 7965 7355 6761 2065 7865 6574 736e     dKeyUsage extens
 80b55bc:	6f69 006e 7355 6761 2065 6f64 7365 6e20     ion.Usage does n
 80b55cc:	746f 6d20 7461 6863 7420 6568 6e20 4373     ot match the nsC
 80b55dc:	7265 5474 7079 2065 7865 6574 736e 6f69     ertType extensio
 80b55ec:	006e 6854 2065 6563 7472 6669 6369 7461     n.The certificat
 80b55fc:	2065 7369 7320 6769 656e 2064 6977 6874     e is signed with
 80b560c:	6120 206e 6e75 6361 6563 7470 6261 656c      an unacceptable
 80b561c:	6820 7361 2e68 5400 6568 6320 7265 6974      hash..The certi
 80b562c:	6966 6163 6574 6920 2073 6973 6e67 6465     ficate is signed
 80b563c:	7720 7469 2068 6e61 7520 616e 6363 7065      with an unaccep
 80b564c:	6174 6c62 2065 4b50 6120 676c 2820 6765     table PK alg (eg
 80b565c:	5220 4153 7620 2073 4345 5344 2941 002e      RSA vs ECDSA)..
 80b566c:	6854 2065 6563 7472 6669 6369 7461 2065     The certificate 
 80b567c:	7369 7320 6769 656e 2064 6977 6874 6120     is signed with a
 80b568c:	206e 6e75 6361 6563 7470 6261 656c 6b20     n unacceptable k
 80b569c:	7965 2820 6765 6220 6461 6320 7275 6576     ey (eg bad curve
 80b56ac:	202c 5352 2041 6f74 206f 6873 726f 2974     , RSA too short)
 80b56bc:	002e 6854 2065 5243 204c 7369 7320 6769     ..The CRL is sig
 80b56cc:	656e 2064 6977 6874 6120 206e 6e75 6361     ned with an unac
 80b56dc:	6563 7470 6261 656c 6820 7361 2e68 5400     ceptable hash..T
 80b56ec:	6568 4320 4c52 6920 2073 6973 6e67 6465     he CRL is signed
 80b56fc:	7720 7469 2068 6e61 7520 616e 6363 7065      with an unaccep
 80b570c:	6174 6c62 2065 4b50 6120 676c 2820 6765     table PK alg (eg
 80b571c:	5220 4153 7620 2073 4345 5344 2941 002e      RSA vs ECDSA)..
 80b572c:	6854 2065 5243 204c 7369 7320 6769 656e     The CRL is signe
 80b573c:	2064 6977 6874 6120 206e 6e75 6361 6563     d with an unacce
 80b574c:	7470 6261 656c 6b20 7965 2820 6765 6220     ptable key (eg b
 80b575c:	6461 6320 7275 6576 202c 5352 2041 6f74     ad curve, RSA to
 80b576c:	206f 6873 726f 2974 002e 0000               o short)....

080b5778 <mbedtls_x509_crt_profile_suiteb>:
 80b5778:	0060 0000 000a 0000 000c 0000 0000 0000     `...............
 80b5788:	6e69 6176 696c 2064 4b50 0000               invalid PK..

080b5794 <CSWTCH.19>:
 80b5794:	4c28 080b 4c58 080b 4bf8 080b 4bc8 080b     (L..XL...K...K..

080b57a4 <CSWTCH.336>:
 80b57a4:	0504 0706 6308 696c 6e65 2074 6966 696e     .....client fini
 80b57b4:	6873 6465 7300 7265 6576 2072 6966 696e     shed.server fini
 80b57c4:	6873 6465 6d00 7361 6574 2072 6573 7263     shed.master secr
 80b57d4:	7465 6b00 7965 6520 7078 6e61 6973 6e6f     et.key expansion
 80b57e4:	7500 6b6e 6f6e 6e77 5300 4c53 3376 302e     .unknown.SSLv3.0
 80b57f4:	5400 534c 3176 302e 5400 534c 3176 312e     .TLSv1.0.TLSv1.1
 80b5804:	5400 534c 3176 322e 0000                    .TLSv1.2..

080b580e <CSWTCH.236>:
 80b580e:	0200 0400 0800 1000                         ........

080b5816 <CSWTCH.338>:
 80b5816:	0302 0504 0006 0000 0000                    ..........

080b5820 <_ZL1K>:
 80b5820:	ae22 d728 2f98 428a 65cd 23ef 4491 7137     ".(../.B.e.#.D7q
 80b5830:	3b2f ec4d fbcf b5c0 dbbc 8189 dba5 e9b5     /;M.............
 80b5840:	b538 f348 c25b 3956 d019 b605 11f1 59f1     8.H.[.V9.......Y
 80b5850:	4f9b af19 82a4 923f 8118 da6d 5ed5 ab1c     .O....?...m..^..
 80b5860:	0242 a303 aa98 d807 6fbe 4570 5b01 1283     B........opE.[..
 80b5870:	b28c 4ee4 85be 2431 b4e2 d5ff 7dc3 550c     ...N..1$.....}.U
 80b5880:	896f f27b 5d74 72be 96b1 3b16 b1fe 80de     o.{.t].r...;....
 80b5890:	1235 25c7 06a7 9bdc 2694 cf69 f174 c19b     5..%.....&i.t...
 80b58a0:	4ad2 9ef1 69c1 e49b 25e3 384f 4786 efbe     .J...i...%O8.G..
 80b58b0:	d5b5 8b8c 9dc6 0fc1 9c65 77ac a1cc 240c     ........e..w...$
 80b58c0:	0275 592b 2c6f 2de9 e483 6ea6 84aa 4a74     u.+Yo,.-...n..tJ
 80b58d0:	fbd4 bd41 a9dc 5cb0 53b5 8311 88da 76f9     ..A....\.S.....v
 80b58e0:	dfab ee66 5152 983e 3210 2db4 c66d a831     ..f.RQ>..2.-m.1.
 80b58f0:	213f 98fb 27c8 b003 0ee4 beef 7fc7 bf59     ?!...'........Y.
 80b5900:	8fc2 3da8 0bf3 c6e0 a725 930a 9147 d5a7     ...=....%...G...
 80b5910:	826f e003 6351 06ca 6e70 0a0e 2967 1429     o...Qc..pn..g)).
 80b5920:	2ffc 46d2 0a85 27b7 c926 5c26 2138 2e1b     ./.F...'&.&\8!..
 80b5930:	2aed 5ac4 6dfc 4d2c b3df 9d95 0d13 5338     .*.Z.m,M......8S
 80b5940:	63de 8baf 7354 650a b2a8 3c77 0abb 766a     .c..Ts.e..w<..jv
 80b5950:	aee6 47ed c92e 81c2 353b 1482 2c85 9272     ...G....;5...,r.
 80b5960:	0364 4cf1 e8a1 a2bf 3001 bc42 664b a81a     d..L.....0B.Kf..
 80b5970:	9791 d0f8 8b70 c24b be30 0654 51a3 c76c     ....p.K.0.T..Ql.
 80b5980:	5218 d6ef e819 d192 a910 5565 0624 d699     .R........eU$...
 80b5990:	202a 5771 3585 f40e d1b8 32bb a070 106a     * qW.5.....2p.j.
 80b59a0:	d0c8 b8d2 c116 19a4 ab53 5141 6c08 1e37     ........S.AQ.l7.
 80b59b0:	eb99 df8e 774c 2748 48a8 e19b bcb5 34b0     ....LwH'.H.....4
 80b59c0:	5a63 c5c9 0cb3 391c 8acb e341 aa4a 4ed8     cZ.....9..A.J..N
 80b59d0:	e373 7763 ca4f 5b9c b8a3 d6b2 6ff3 682e     s.cwO..[.....o.h
 80b59e0:	b2fc 5def 82ee 748f 2f60 4317 636f 78a5     ...]...t`/.Coc.x
 80b59f0:	ab72 a1f0 7814 84c8 39ec 1a64 0208 8cc7     r....x...9d.....
 80b5a00:	1e28 2363 fffa 90be bde9 de82 6ceb a450     (.c#.........lP.
 80b5a10:	7915 b2c6 a3f7 bef9 532b e372 78f2 c671     .y......+Sr..xq.
 80b5a20:	619c ea26 3ece ca27 c207 21c0 b8c7 d186     .a&..>'....!....
 80b5a30:	eb1e cde0 7dd6 eada d178 ee6e 4f7f f57d     .....}..x.n..O}.
 80b5a40:	6fba 7217 67aa 06f0 98a6 a2c8 7dc5 0a63     .o.r.g.......}c.
 80b5a50:	0dae bef9 9804 113f 471b 131c 0b35 1b71     ......?..G..5.q.
 80b5a60:	7d84 2304 77f5 28db 2493 40c7 ab7b 32ca     .}.#.w.(.$.@{..2
 80b5a70:	bebc 15c9 be0a 3c9e 0d4c 9c10 67c4 431d     .......<L....g.C
 80b5a80:	42b6 cb3e d4be 4cc5 7e2a fc65 299c 597f     .B>....L*~e..).Y
 80b5a90:	faec 3ad6 6fab 5fcb 5817 4a47 198c 6c44     ...:.o._.XGJ..Dl
 80b5aa0:	7250 636f 542d 7079 3a65 3420 452c 434e     Proc-Type: 4,ENC
 80b5ab0:	5952 5450 4445 5400 534c 452d 4443 4548     RYPTED.TLS-ECDHE
 80b5ac0:	452d 4443 4153 572d 5449 2d48 4541 2d53     -ECDSA-WITH-AES-
 80b5ad0:	3231 2d38 4347 2d4d 4853 3241 3635 5400     128-GCM-SHA256.T
 80b5ae0:	534c 452d 4443 4548 452d 4443 4153 572d     LS-ECDHE-ECDSA-W
 80b5af0:	5449 2d48 4541 2d53 3532 2d36 4347 2d4d     ITH-AES-256-GCM-
 80b5b00:	4853 3341 3438 5400 534c 522d 4153 572d     SHA384.TLS-RSA-W
 80b5b10:	5449 2d48 4541 2d53 3532 2d36 4347 2d4d     ITH-AES-256-GCM-
 80b5b20:	4853 3341 3438 5400 534c 522d 4153 572d     SHA384.TLS-RSA-W
 80b5b30:	5449 2d48 4541 2d53 3231 2d38 4347 2d4d     ITH-AES-128-GCM-
 80b5b40:	4853 3241 3635 5400 534c 502d 4b53 572d     SHA256.TLS-PSK-W
 80b5b50:	5449 2d48 4541 2d53 3231 2d38 4347 2d4d     ITH-AES-128-GCM-
 80b5b60:	4853 3241 3635 5400 534c 502d 4b53 572d     SHA256.TLS-PSK-W
 80b5b70:	5449 2d48 4541 2d53 3532 2d36 4347 2d4d     ITH-AES-256-GCM-
 80b5b80:	4853 3341 3438 5400 534c 522d 4153 502d     SHA384.TLS-RSA-P
 80b5b90:	4b53 572d 5449 2d48 4541 2d53 3231 2d38     SK-WITH-AES-128-
 80b5ba0:	4347 2d4d 4853 3241 3635 5400 534c 522d     GCM-SHA256.TLS-R
 80b5bb0:	4153 502d 4b53 572d 5449 2d48 4541 2d53     SA-PSK-WITH-AES-
 80b5bc0:	3532 2d36 4347 2d4d 4853 3341 3438 0000     256-GCM-SHA384..

080b5bd0 <_ZL23ciphersuite_definitions>:
 80b5bd0:	c02b 0000 5ab7 080b 060e 0004 0003 0000     +....Z..........
 80b5be0:	0003 0000 0003 0000 0003 0000 0000 0000     ................
 80b5bf0:	c02c 0000 5adf 080b 0710 0004 0003 0000     ,....Z..........
 80b5c00:	0003 0000 0003 0000 0003 0000 0000 0000     ................
 80b5c10:	009d 0000 5b07 080b 0710 0001 0003 0000     .....[..........
 80b5c20:	0003 0000 0003 0000 0003 0000 0000 0000     ................
 80b5c30:	009c 0000 5b27 080b 060e 0001 0003 0000     ....'[..........
 80b5c40:	0003 0000 0003 0000 0003 0000 0000 0000     ................
 80b5c50:	00a8 0000 5b47 080b 060e 0005 0003 0000     ....G[..........
 80b5c60:	0003 0000 0003 0000 0003 0000 0000 0000     ................
 80b5c70:	00a9 0000 5b67 080b 0710 0005 0003 0000     ....g[..........
 80b5c80:	0003 0000 0003 0000 0003 0000 0000 0000     ................
 80b5c90:	00ac 0000 5b87 080b 060e 0007 0003 0000     .....[..........
 80b5ca0:	0003 0000 0003 0000 0003 0000 0000 0000     ................
 80b5cb0:	00ad 0000 5bab 080b 0710 0007 0003 0000     .....[..........
 80b5cc0:	0003 0000 0003 0000 0003 0000 0000 0000     ................
 80b5cd0:	0000 0000 40b1 080b 0000 0000 0000 0000     .....@..........
	...

080b5cf0 <_ZL22ciphersuite_preference>:
 80b5cf0:	cca8 0000 cca9 0000 ccaa 0000 c02c 0000     ............,...
 80b5d00:	c030 0000 009f 0000 c0ad 0000 c09f 0000     0...............
 80b5d10:	c024 0000 c028 0000 006b 0000 c00a 0000     $...(...k.......
 80b5d20:	c014 0000 0039 0000 c0af 0000 c0a3 0000     ....9...........
 80b5d30:	c087 0000 c08b 0000 c07d 0000 c073 0000     ........}...s...
 80b5d40:	c077 0000 00c4 0000 0088 0000 c05d 0000     w...........]...
 80b5d50:	c061 0000 c053 0000 c049 0000 c04d 0000     a...S...I...M...
 80b5d60:	c045 0000 c02b 0000 c02f 0000 009e 0000     E...+.../.......
 80b5d70:	c0ac 0000 c09e 0000 c023 0000 c027 0000     ........#...'...
 80b5d80:	0067 0000 c009 0000 c013 0000 0033 0000     g...........3...
 80b5d90:	c0ae 0000 c0a2 0000 c086 0000 c08a 0000     ................
 80b5da0:	c07c 0000 c072 0000 c076 0000 00be 0000     |...r...v.......
 80b5db0:	0045 0000 c05c 0000 c060 0000 c052 0000     E...\...`...R...
 80b5dc0:	c048 0000 c04c 0000 c044 0000 ccac 0000     H...L...D.......
 80b5dd0:	ccad 0000 00ab 0000 c0a7 0000 c038 0000     ............8...
 80b5de0:	00b3 0000 c036 0000 0091 0000 c091 0000     ....6...........
 80b5df0:	c09b 0000 c097 0000 c0ab 0000 c06d 0000     ............m...
 80b5e00:	c071 0000 c067 0000 00aa 0000 c0a6 0000     q...g...........
 80b5e10:	c037 0000 00b2 0000 c035 0000 0090 0000     7.......5.......
 80b5e20:	c090 0000 c096 0000 c09a 0000 c0aa 0000     ................
 80b5e30:	c06c 0000 c070 0000 c066 0000 c0ff 0000     l...p...f.......
 80b5e40:	009d 0000 c09d 0000 003d 0000 0035 0000     ........=...5...
 80b5e50:	c032 0000 c02a 0000 c00f 0000 c02e 0000     2...*...........
 80b5e60:	c026 0000 c005 0000 c0a1 0000 c07b 0000     &...........{...
 80b5e70:	00c0 0000 0084 0000 c08d 0000 c079 0000     ............y...
 80b5e80:	c089 0000 c075 0000 c05f 0000 c063 0000     ....u..._...c...
 80b5e90:	c051 0000 c04b 0000 c04f 0000 c03d 0000     Q...K...O...=...
 80b5ea0:	009c 0000 c09c 0000 003c 0000 002f 0000     ........<.../...
 80b5eb0:	c031 0000 c029 0000 c00e 0000 c02d 0000     1...).......-...
 80b5ec0:	c025 0000 c004 0000 c0a0 0000 c07a 0000     %...........z...
 80b5ed0:	00ba 0000 0041 0000 c08c 0000 c078 0000     ....A.......x...
 80b5ee0:	c088 0000 c074 0000 c05e 0000 c062 0000     ....t...^...b...
 80b5ef0:	c050 0000 c04a 0000 c04e 0000 c03c 0000     P...J...N...<...
 80b5f00:	ccae 0000 00ad 0000 00b7 0000 0095 0000     ................
 80b5f10:	c093 0000 c099 0000 c06f 0000 c069 0000     ........o...i...
 80b5f20:	00ac 0000 00b6 0000 0094 0000 c092 0000     ................
 80b5f30:	c098 0000 c06e 0000 c068 0000 ccab 0000     ....n...h.......
 80b5f40:	00a9 0000 c0a5 0000 00af 0000 008d 0000     ................
 80b5f50:	c08f 0000 c095 0000 c0a9 0000 c06b 0000     ............k...
 80b5f60:	c065 0000 00a8 0000 c0a4 0000 00ae 0000     e...............
 80b5f70:	008c 0000 c08e 0000 c094 0000 c0a8 0000     ................
 80b5f80:	c06a 0000 c064 0000 c008 0000 c012 0000     j...d...........
 80b5f90:	0016 0000 c034 0000 008f 0000 000a 0000     ....4...........
 80b5fa0:	c00d 0000 c003 0000 0093 0000 008b 0000     ................
 80b5fb0:	c007 0000 c011 0000 c033 0000 008e 0000     ........3.......
 80b5fc0:	0005 0000 0004 0000 c00c 0000 c002 0000     ................
 80b5fd0:	0092 0000 008a 0000 0015 0000 0009 0000     ................
 80b5fe0:	c006 0000 c010 0000 c03b 0000 c03a 0000     ........;...:...
 80b5ff0:	c039 0000 00b5 0000 00b4 0000 002d 0000     9...........-...
 80b6000:	003b 0000 0002 0000 0001 0000 c00b 0000     ;...............
 80b6010:	c001 0000 00b9 0000 00b8 0000 002e 0000     ................
 80b6020:	00b1 0000 00b0 0000 002c 0000 0000 0000     ........,.......
 80b6030:	0302 0705 0d0b 1311 1d17 251f 2b29 352f     ...........%)+/5
 80b6040:	3d3b 4743 4f49 5953 6561 6b67 716d 837f     ;=CGIOSYaegkmq..
 80b6050:	8b89 9795 a39d ada7 b5b3 c1bf c7c5 dfd3     ................
 80b6060:	e5e3 efe9 fbf1 0000                         ........

080b6068 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80b6070:	11e1 080b 11e7 080b 15ff 080b 11f5 080b     ................
 80b6080:	11e3 080b                                   ....

080b6084 <_ZTV9TCPClient>:
	...
 80b608c:	0129 080a 015d 080a 119d 080b 11b7 080b     )...]...........
 80b609c:	12fd 080b 1267 080b 1239 080b 11df 080b     ....g...9.......
 80b60ac:	13a9 080b 1619 080b 129b 080b 1375 080b     ............u...
 80b60bc:	14f7 080b 1549 080b 11c7 080b 14bb 080b     ....I...........
 80b60cc:	1219 080b 6977 6972 676e 5400 5043 6c43     ....wiring.TCPCl
 80b60dc:	6569 746e 7320 636f 656b 3d74 7825 6200     ient socket=%x.b
 80b60ec:	7561 0064 6553 6972 6c61 5500 4253 6553     aud.Serial.USBSe
 80b60fc:	6972 6c61 0031 6170 6172 006d 6d63 0064     rial1.param.cmd.
 80b610c:	6469 6800 646e 7300 7274 006d 6966 746c     id.hnd.strm.filt
 80b611c:	6c00 6c76 6100 6464 6148 646e 656c 0072     .lvl.addHandler.
 80b612c:	6572 6f6d 6576 6148 646e 656c 0072 6e65     removeHandler.en
 80b613c:	6d75 6148 646e 656c 7372 4a00 4f53 534e     umHandlers.JSONS
 80b614c:	7274 6165 4c6d 676f 6148 646e 656c 0072     treamLogHandler.
 80b615c:	7061 0070 3025 3031 2075 5d00 0020 2928     app.%010u .] .()
 80b616c:	203a 2000 005b 6f63 6564 3d20 0020 6925     : . [.code = .%i
 80b617c:	6400 7465 6961 736c 3d20 0020 0066 6e6c     .details = .f.ln
 80b618c:	6600 006e 6564 6174 6c69 6e00 6e6f 0065     .fn.detail.none.
 80b619c:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80b61ac:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.
 80b61bc:	2b25 3330 3a64 3025 7532 2500 2d59 6d25     %+03d:%02u.%Y-%m
 80b61cc:	252d 5464 4825 253a 3a4d 5325 7a25 6100     -%dT%H:%M:%S%z.a
 80b61dc:	6373 6974 656d 0000                         sctime..

080b61e4 <_ZTV9IPAddress>:
	...
 80b61ec:	1a65 080b 1a55 080b 1a57 080b               e...U...W...

080b61f8 <_ZTV9USBSerial>:
	...
 80b6200:	1b21 080b 1b71 080b 1b7f 080b 1739 080b     !...q.......9...
 80b6210:	1b5d 080b 1b23 080b 1b39 080b 1b6b 080b     ]...#...9...k...
 80b6220:	1b4f 080b 1b1d 080b                         O.......

080b6228 <_ZTV11USARTSerial>:
	...
 80b6230:	1cc1 080b 1d11 080b 1d1f 080b 1739 080b     ............9...
 80b6240:	1cd5 080b 1cf7 080b 1ce3 080b 1d0b 080b     ................
 80b6250:	1cc3 080b 1cc7 080b                         ........

080b6258 <_ZTVN5spark9WiFiClassE>:
	...
 80b6260:	1e53 080b 1e49 080b 1e3f 080b 1dbd 080b     S...I...?.......
 80b6270:	17fd 080b 1e33 080b 1e27 080b 1e1f 080b     ....3...'.......
 80b6280:	1e15 080b 1e0b 080b 1dc7 080b               ............

080b628c <_ZTVN5spark12NetworkClassE>:
	...
 80b6294:	1e71 080b 1e7b 080b 1e85 080b 1e8f 080b     q...{...........
 80b62a4:	1e99 080b 1ea5 080b 1eb1 080b 1ebd 080b     ................
 80b62b4:	1ec5 080b 1ecf 080b 1ed9 080b               ............

080b62c0 <day_name.4723>:
 80b62c0:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80b62d0:	6972 6153 4a74                                   riSat

080b62d5 <mon_name.4724>:
 80b62d5:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80b62e5:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80b62f5:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 80b6305:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 80b6315:	6425 000a                                   %d..

080b6319 <_ctype_>:
 80b6319:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80b6329:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80b6339:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80b6349:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80b6359:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80b6369:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80b6379:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80b6389:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80b6399:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080b641c <__sf_fake_stdin>:
	...

080b643c <__sf_fake_stdout>:
	...

080b645c <__sf_fake_stderr>:
	...

080b647c <__month_lengths>:
 80b647c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80b648c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80b649c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80b64ac:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80b64bc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80b64cc:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80b64dc:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 80b64ec:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 80b64fc:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 80b650c:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

080b6518 <link_const_variable_data_end>:
 80b6518:	080a0101 	.word	0x080a0101
 80b651c:	080a026d 	.word	0x080a026d
 80b6520:	080a04d1 	.word	0x080a04d1
 80b6524:	080b1169 	.word	0x080b1169
 80b6528:	080b1809 	.word	0x080b1809
 80b652c:	080b18c9 	.word	0x080b18c9
 80b6530:	080b1901 	.word	0x080b1901
 80b6534:	080b1e5d 	.word	0x080b1e5d
 80b6538:	080b1f41 	.word	0x080b1f41
 80b653c:	080b1f55 	.word	0x080b1f55
 80b6540:	080b1f95 	.word	0x080b1f95
 80b6544:	080b2019 	.word	0x080b2019
 80b6548:	080b20dd 	.word	0x080b20dd
 80b654c:	080b21a1 	.word	0x080b21a1
