
e:/IOT_workspace/mainModule/target/2.0.0/argon/mainModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0001a040  000d4020  000d4020  00004020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000ee060  000ee060  0001e060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000ee068  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000214  2003ac14  000ee06c  0002ac14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000039c8  2003ae28  2003ae28  0003ae28  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000ee280  000ee280  0002e280  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000ee2a8  000ee2a8  0002e2a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00219684  00000000  00000000  0002e2ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00025dcb  00000000  00000000  00247930  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00065e02  00000000  00000000  0026d6fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000042d0  00000000  00000000  002d34fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 0000acf8  00000000  00000000  002d77cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000476f3  00000000  00000000  002e24c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0006754a  00000000  00000000  00329bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00128009  00000000  00000000  00391102  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000dfb4  00000000  00000000  004b910c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f014 fedb 	bl	e8dec <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f014 fefd 	bl	e8e3c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003ac14 	.word	0x2003ac14
   d404c:	000ee06c 	.word	0x000ee06c
   d4050:	2003ae28 	.word	0x2003ae28
   d4054:	2003ae28 	.word	0x2003ae28
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f012 fbf7 	bl	e6854 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000ee03c 	.word	0x000ee03c
   d4080:	000ee060 	.word	0x000ee060

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bfea 	b.w	d505c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f001 f981 	bl	d5390 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f012 bba1 	b.w	e67d8 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f011 bc7f 	b.w	e5998 <malloc>

000d409a <_Znaj>:
   d409a:	f011 bc7d 	b.w	e5998 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f011 bc83 	b.w	e59a8 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f011 bc81 	b.w	e59a8 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f011 fbbc 	bl	e582c <panic_>
  while (1);
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000e554d 	.word	0x000e554d

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN16TlsClientHandlerC1Ev>:
#include "TlsClientHandler.h"


TlsClientHandler::TlsClientHandler(/* args */)
   d40cc:	b510      	push	{r4, lr}
   d40ce:	491c      	ldr	r1, [pc, #112]	; (d4140 <_ZN16TlsClientHandlerC1Ev+0x74>)
   d40d0:	f240 72e1 	movw	r2, #2017	; 0x7e1
   d40d4:	4604      	mov	r4, r0
   d40d6:	f014 fe89 	bl	e8dec <memcpy>
   d40da:	4b1a      	ldr	r3, [pc, #104]	; (d4144 <_ZN16TlsClientHandlerC1Ev+0x78>)
   d40dc:	f204 72e1 	addw	r2, r4, #2017	; 0x7e1
   d40e0:	f103 0134 	add.w	r1, r3, #52	; 0x34
   d40e4:	f853 0b04 	ldr.w	r0, [r3], #4
   d40e8:	f842 0b04 	str.w	r0, [r2], #4
   d40ec:	428b      	cmp	r3, r1
   d40ee:	d1f9      	bne.n	d40e4 <_ZN16TlsClientHandlerC1Ev+0x18>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d40f0:	f011 fa34 	bl	e555c <HAL_Timer_Get_Milli_Seconds>
   d40f4:	4914      	ldr	r1, [pc, #80]	; (d4148 <_ZN16TlsClientHandlerC1Ev+0x7c>)
   d40f6:	f8c4 0818 	str.w	r0, [r4, #2072]	; 0x818
   d40fa:	f604 401c 	addw	r0, r4, #3100	; 0xc1c
   d40fe:	f011 fea5 	bl	e5e4c <_ZN6StringC1EPKc>
   d4102:	4912      	ldr	r1, [pc, #72]	; (d414c <_ZN16TlsClientHandlerC1Ev+0x80>)
   d4104:	f604 402c 	addw	r0, r4, #3116	; 0xc2c
   d4108:	f011 fea0 	bl	e5e4c <_ZN6StringC1EPKc>
   d410c:	4910      	ldr	r1, [pc, #64]	; (d4150 <_ZN16TlsClientHandlerC1Ev+0x84>)
   d410e:	f604 403c 	addw	r0, r4, #3132	; 0xc3c
   d4112:	f011 fe9b 	bl	e5e4c <_ZN6StringC1EPKc>
   d4116:	490f      	ldr	r1, [pc, #60]	; (d4154 <_ZN16TlsClientHandlerC1Ev+0x88>)
   d4118:	f604 404c 	addw	r0, r4, #3148	; 0xc4c
   d411c:	f011 fe96 	bl	e5e4c <_ZN6StringC1EPKc>
   d4120:	490d      	ldr	r1, [pc, #52]	; (d4158 <_ZN16TlsClientHandlerC1Ev+0x8c>)
   d4122:	f604 405c 	addw	r0, r4, #3164	; 0xc5c
   d4126:	f011 fe91 	bl	e5e4c <_ZN6StringC1EPKc>
   d412a:	f504 6047 	add.w	r0, r4, #3184	; 0xc70
   d412e:	f000 fa5f 	bl	d45f0 <_ZN12TlsTcpClientC1Ev>
   d4132:	f504 50a1 	add.w	r0, r4, #5152	; 0x1420
   d4136:	f000 fbdd 	bl	d48f4 <_ZN10HttpHelperC1Ev>
{
}
   d413a:	4620      	mov	r0, r4
   d413c:	bd10      	pop	{r4, pc}
   d413e:	bf00      	nop
   d4140:	000ead44 	.word	0x000ead44
   d4144:	000eb525 	.word	0x000eb525
   d4148:	000eacb0 	.word	0x000eacb0
   d414c:	000eacd5 	.word	0x000eacd5
   d4150:	000eacfa 	.word	0x000eacfa
   d4154:	000ead1f 	.word	0x000ead1f
   d4158:	000eba77 	.word	0x000eba77

000d415c <_ZN16TlsClientHandlerD1Ev>:

TlsClientHandler::~TlsClientHandler()
   d415c:	b538      	push	{r3, r4, r5, lr}
   d415e:	4604      	mov	r4, r0
   d4160:	f500 50a1 	add.w	r0, r0, #5152	; 0x1420
   d4164:	f000 fc1a 	bl	d499c <_ZN10HttpHelperD1Ev>
    static int veryfyCert_Tls(void *data, mbedtls_x509_crt *crt, int depth, uint32_t *flags);
    int handShake();

public:
    TlsTcpClient();
    ~TlsTcpClient(){ close(); };
   d4168:	f504 6047 	add.w	r0, r4, #3184	; 0xc70
   d416c:	f000 fb72 	bl	d4854 <_ZN12TlsTcpClient5closeEv>
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4170:	f241 33fc 	movw	r3, #5116	; 0x13fc
   d4174:	4a15      	ldr	r2, [pc, #84]	; (d41cc <_ZN16TlsClientHandlerD1Ev+0x70>)
   d4176:	50e2      	str	r2, [r4, r3]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4178:	f241 4314 	movw	r3, #5140	; 0x1414
   d417c:	58e5      	ldr	r5, [r4, r3]
   d417e:	b17d      	cbz	r5, d41a0 <_ZN16TlsClientHandlerD1Ev+0x44>
      if (--_M_use_count == 0)
   d4180:	686b      	ldr	r3, [r5, #4]
   d4182:	3b01      	subs	r3, #1
   d4184:	606b      	str	r3, [r5, #4]
   d4186:	b95b      	cbnz	r3, d41a0 <_ZN16TlsClientHandlerD1Ev+0x44>
          _M_dispose();
   d4188:	682b      	ldr	r3, [r5, #0]
   d418a:	4628      	mov	r0, r5
   d418c:	689b      	ldr	r3, [r3, #8]
   d418e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4190:	68ab      	ldr	r3, [r5, #8]
   d4192:	3b01      	subs	r3, #1
   d4194:	60ab      	str	r3, [r5, #8]
   d4196:	b91b      	cbnz	r3, d41a0 <_ZN16TlsClientHandlerD1Ev+0x44>
            _M_destroy();
   d4198:	682b      	ldr	r3, [r5, #0]
   d419a:	4628      	mov	r0, r5
   d419c:	68db      	ldr	r3, [r3, #12]
   d419e:	4798      	blx	r3
   d41a0:	f604 405c 	addw	r0, r4, #3164	; 0xc5c
   d41a4:	f011 fe07 	bl	e5db6 <_ZN6StringD1Ev>
   d41a8:	f604 404c 	addw	r0, r4, #3148	; 0xc4c
   d41ac:	f011 fe03 	bl	e5db6 <_ZN6StringD1Ev>
   d41b0:	f604 403c 	addw	r0, r4, #3132	; 0xc3c
   d41b4:	f011 fdff 	bl	e5db6 <_ZN6StringD1Ev>
   d41b8:	f604 402c 	addw	r0, r4, #3116	; 0xc2c
   d41bc:	f011 fdfb 	bl	e5db6 <_ZN6StringD1Ev>
   d41c0:	f604 401c 	addw	r0, r4, #3100	; 0xc1c
   d41c4:	f011 fdf7 	bl	e5db6 <_ZN6StringD1Ev>
{
}
   d41c8:	4620      	mov	r0, r4
   d41ca:	bd38      	pop	{r3, r4, r5, pc}
   d41cc:	000edab8 	.word	0x000edab8

000d41d0 <_ZN16TlsClientHandler5setupEv>:
void TlsClientHandler::setup() {
   d41d0:	b510      	push	{r4, lr}
   d41d2:	4604      	mov	r4, r0
   d41d4:	f011 f9c2 	bl	e555c <HAL_Timer_Get_Milli_Seconds>
        // need a Particle time sync for X509 certificates verify.
    if (millis() - lastSync > ONE_DAY_MILLIS) {
   d41d8:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
   d41dc:	1ac0      	subs	r0, r0, r3
   d41de:	4b07      	ldr	r3, [pc, #28]	; (d41fc <_ZN16TlsClientHandler5setupEv+0x2c>)
   d41e0:	4298      	cmp	r0, r3
   d41e2:	d909      	bls.n	d41f8 <_ZN16TlsClientHandler5setupEv+0x28>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d41e4:	f011 fbc0 	bl	e5968 <spark_cloud_flag_connected>
        if (!connected()) {
   d41e8:	b110      	cbz	r0, d41f0 <_ZN16TlsClientHandler5setupEv+0x20>
        return spark_sync_time(NULL);
   d41ea:	2000      	movs	r0, #0
   d41ec:	f011 fbc4 	bl	e5978 <spark_sync_time>
   d41f0:	f011 f9b4 	bl	e555c <HAL_Timer_Get_Milli_Seconds>
        Particle.syncTime();
        lastSync = millis();
   d41f4:	f8c4 0818 	str.w	r0, [r4, #2072]	; 0x818
    }
}
   d41f8:	bd10      	pop	{r4, pc}
   d41fa:	bf00      	nop
   d41fc:	05265c00 	.word	0x05265c00

000d4200 <_ZN16TlsClientHandler6VerifyE6String>:
        return status;
    }
    return this->Verify(http.getFaceId());
}

int TlsClientHandler::Verify(String id) {
   d4200:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4202:	460e      	mov	r6, r1
   d4204:	b08d      	sub	sp, #52	; 0x34
    if(id.equals("")) {
   d4206:	494a      	ldr	r1, [pc, #296]	; (d4330 <_ZN16TlsClientHandler6VerifyE6String+0x130>)
int TlsClientHandler::Verify(String id) {
   d4208:	4604      	mov	r4, r0
    if(id.equals("")) {
   d420a:	4630      	mov	r0, r6
   d420c:	f011 ff14 	bl	e6038 <_ZNK6String6equalsEPKc>
   d4210:	4607      	mov	r7, r0
   d4212:	2800      	cmp	r0, #0
   d4214:	f040 8089 	bne.w	d432a <_ZN16TlsClientHandler6VerifyE6String+0x12a>
        return false;
    }
    http.setPath(VERIFY_PATH);
   d4218:	f504 55a1 	add.w	r5, r4, #5152	; 0x1420
   d421c:	4945      	ldr	r1, [pc, #276]	; (d4334 <_ZN16TlsClientHandler6VerifyE6String+0x134>)
   d421e:	a808      	add	r0, sp, #32
   d4220:	f011 fe14 	bl	e5e4c <_ZN6StringC1EPKc>
   d4224:	a908      	add	r1, sp, #32
   d4226:	4628      	mov	r0, r5
   d4228:	f000 fbe4 	bl	d49f4 <_ZN10HttpHelper7setPathE6String>
   d422c:	a808      	add	r0, sp, #32
   d422e:	f011 fdc2 	bl	e5db6 <_ZN6StringD1Ev>
    http.setHost(HOST);
   d4232:	4941      	ldr	r1, [pc, #260]	; (d4338 <_ZN16TlsClientHandler6VerifyE6String+0x138>)
   d4234:	a808      	add	r0, sp, #32
   d4236:	f011 fe09 	bl	e5e4c <_ZN6StringC1EPKc>
   d423a:	a908      	add	r1, sp, #32
   d423c:	4628      	mov	r0, r5
   d423e:	f000 fbdc 	bl	d49fa <_ZN10HttpHelper7setHostE6String>
   d4242:	a808      	add	r0, sp, #32
   d4244:	f011 fdb7 	bl	e5db6 <_ZN6StringD1Ev>
    http.setKey(KEY);
   d4248:	493c      	ldr	r1, [pc, #240]	; (d433c <_ZN16TlsClientHandler6VerifyE6String+0x13c>)
   d424a:	a808      	add	r0, sp, #32
   d424c:	f011 fdfe 	bl	e5e4c <_ZN6StringC1EPKc>
   d4250:	a908      	add	r1, sp, #32
   d4252:	4628      	mov	r0, r5
   d4254:	f000 fc23 	bl	d4a9e <_ZN10HttpHelper6setKeyE6String>
   d4258:	a808      	add	r0, sp, #32
   d425a:	f011 fdac 	bl	e5db6 <_ZN6StringD1Ev>
    http.setContent(http.HTTP_JSON);
   d425e:	f504 51a6 	add.w	r1, r4, #5312	; 0x14c0
   d4262:	3118      	adds	r1, #24
   d4264:	a808      	add	r0, sp, #32
   d4266:	f011 fe31 	bl	e5ecc <_ZN6StringC1ERKS_>
   d426a:	a908      	add	r1, sp, #32
   d426c:	4628      	mov	r0, r5
   d426e:	f000 fc13 	bl	d4a98 <_ZN10HttpHelper10setContentE6String>
   d4272:	a808      	add	r0, sp, #32
   d4274:	f011 fd9f 	bl	e5db6 <_ZN6StringD1Ev>
    //http.setBody(id,this->NIKOLAJ,this->PERSONGROUP);
    http.setBody(id,this->DANI,this->PERSONGROUP);
   d4278:	4631      	mov	r1, r6
   d427a:	4668      	mov	r0, sp
   d427c:	f011 fe26 	bl	e5ecc <_ZN6StringC1ERKS_>
   d4280:	f604 413c 	addw	r1, r4, #3132	; 0xc3c
   d4284:	a804      	add	r0, sp, #16
   d4286:	f011 fe21 	bl	e5ecc <_ZN6StringC1ERKS_>
   d428a:	f604 415c 	addw	r1, r4, #3164	; 0xc5c
   d428e:	a808      	add	r0, sp, #32
   d4290:	f011 fe1c 	bl	e5ecc <_ZN6StringC1ERKS_>
   d4294:	ab08      	add	r3, sp, #32
   d4296:	aa04      	add	r2, sp, #16
   d4298:	4669      	mov	r1, sp
   d429a:	4628      	mov	r0, r5
   d429c:	f000 fbb0 	bl	d4a00 <_ZN10HttpHelper7setBodyE6StringS0_S0_>
   d42a0:	a808      	add	r0, sp, #32
   d42a2:	f011 fd88 	bl	e5db6 <_ZN6StringD1Ev>
   d42a6:	a804      	add	r0, sp, #16
   d42a8:	f011 fd85 	bl	e5db6 <_ZN6StringD1Ev>
            // setup Root CA pem. have to be done before every connect! 
    client.init(letencryptCaPem, sizeof(letencryptCaPem));
   d42ac:	f504 6647 	add.w	r6, r4, #3184	; 0xc70
    http.setBody(id,this->DANI,this->PERSONGROUP);
   d42b0:	4668      	mov	r0, sp
   d42b2:	f011 fd80 	bl	e5db6 <_ZN6StringD1Ev>
    client.init(letencryptCaPem, sizeof(letencryptCaPem));
   d42b6:	4621      	mov	r1, r4
   d42b8:	f240 72e1 	movw	r2, #2017	; 0x7e1
   d42bc:	4630      	mov	r0, r6
   d42be:	f000 fa4b 	bl	d4758 <_ZN12TlsTcpClient4initEPKcj>
    //connect to client on dis, port
#if DEBUG_AZURE == 1
    Serial.println(http.getHost());
    Serial.println(http.makeVerify());
#endif
    client.connect(this->URL, 443);
   d42c2:	f240 12bb 	movw	r2, #443	; 0x1bb
   d42c6:	f204 71e1 	addw	r1, r4, #2017	; 0x7e1
   d42ca:	4630      	mov	r0, r6
   d42cc:	f000 fafa 	bl	d48c4 <_ZN12TlsTcpClient7connectEPct>

    // Send header to azure.
    int len = sprintf((char *)buff, http.makeVerify());
   d42d0:	4628      	mov	r0, r5
   d42d2:	f000 fc75 	bl	d4bc0 <_ZN10HttpHelper10makeVerifyEv>
   d42d6:	f604 041c 	addw	r4, r4, #2076	; 0x81c
   d42da:	4601      	mov	r1, r0
   d42dc:	4620      	mov	r0, r4
   d42de:	f011 fb73 	bl	e59c8 <sprintf>
    client.write(buff, len );
   d42e2:	4621      	mov	r1, r4
    int len = sprintf((char *)buff, http.makeVerify());
   d42e4:	4602      	mov	r2, r0
    client.write(buff, len );
   d42e6:	4630      	mov	r0, r6
   d42e8:	f000 fa6b 	bl	d47c2 <_ZN12TlsTcpClient5writeEPhi>
    //make loop that 

    // GET HTTPS response.
    memset(buff, 0, sizeof(buff));
   d42ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d42f0:	4639      	mov	r1, r7
   d42f2:	4620      	mov	r0, r4
   d42f4:	f014 fda2 	bl	e8e3c <memset>
    while(1) {
        // mabye check length and set buffer after this.
        int ret = client.read(buff, sizeof(buff) - 1);
   d42f8:	f240 32ff 	movw	r2, #1023	; 0x3ff
   d42fc:	4621      	mov	r1, r4
   d42fe:	4630      	mov	r0, r6
   d4300:	f000 fac7 	bl	d4892 <_ZN12TlsTcpClient4readEPhi>
        if (ret == MBEDTLS_ERR_SSL_WANT_READ) {
   d4304:	f510 4fd2 	cmn.w	r0, #26880	; 0x6900
   d4308:	d103      	bne.n	d4312 <_ZN16TlsClientHandler6VerifyE6String+0x112>
            delay(100);
   d430a:	2064      	movs	r0, #100	; 0x64
   d430c:	f012 f854 	bl	e63b8 <delay>
   d4310:	e7f2      	b.n	d42f8 <_ZN16TlsClientHandler6VerifyE6String+0xf8>
        } else if (ret <= 0) {
   d4312:	2800      	cmp	r0, #0
   d4314:	dcf0      	bgt.n	d42f8 <_ZN16TlsClientHandler6VerifyE6String+0xf8>
#if DEBUG_AZURE == 1
            Serial.println((char *)buff);
#endif
        }
    }
    http.setResponse((char*) buff,false);
   d4316:	4628      	mov	r0, r5
   d4318:	2200      	movs	r2, #0
   d431a:	4621      	mov	r1, r4
   d431c:	f000 fcd6 	bl	d4ccc <_ZN10HttpHelper11setResponseEPcb>

   if(http.getIsIdentical()) {
   d4320:	4628      	mov	r0, r5
   d4322:	f000 fbc9 	bl	d4ab8 <_ZN10HttpHelper14getIsIdenticalEv>
       return true;
   }
   return false;
   d4326:	b00d      	add	sp, #52	; 0x34
   d4328:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return false;
   d432a:	2000      	movs	r0, #0
   d432c:	e7fb      	b.n	d4326 <_ZN16TlsClientHandler6VerifyE6String+0x126>
   d432e:	bf00      	nop
   d4330:	000ebb9d 	.word	0x000ebb9d
   d4334:	000eb559 	.word	0x000eb559
   d4338:	000eb525 	.word	0x000eb525
   d433c:	000eb56b 	.word	0x000eb56b

000d4340 <_ZN16TlsClientHandler6DetectEPhm>:
int TlsClientHandler::Detect(uint8_t * img, uint32_t length) {
   d4340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    memset(buff, 0, sizeof(buff));
   d4344:	f600 061c 	addw	r6, r0, #2076	; 0x81c
int TlsClientHandler::Detect(uint8_t * img, uint32_t length) {
   d4348:	b085      	sub	sp, #20
   d434a:	4605      	mov	r5, r0
   d434c:	4688      	mov	r8, r1
   d434e:	4691      	mov	r9, r2
    memset(buff, 0, sizeof(buff));
   d4350:	2100      	movs	r1, #0
   d4352:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4356:	4630      	mov	r0, r6
   d4358:	f014 fd70 	bl	e8e3c <memset>
    http.setPath(DETECT_PATH);
   d435c:	f505 54a1 	add.w	r4, r5, #5152	; 0x1420
   d4360:	4942      	ldr	r1, [pc, #264]	; (d446c <_ZN16TlsClientHandler6DetectEPhm+0x12c>)
   d4362:	4668      	mov	r0, sp
   d4364:	f011 fd72 	bl	e5e4c <_ZN6StringC1EPKc>
   d4368:	4669      	mov	r1, sp
   d436a:	4620      	mov	r0, r4
   d436c:	f000 fb42 	bl	d49f4 <_ZN10HttpHelper7setPathE6String>
   d4370:	4668      	mov	r0, sp
   d4372:	f011 fd20 	bl	e5db6 <_ZN6StringD1Ev>
    http.setHost(HOST);
   d4376:	493e      	ldr	r1, [pc, #248]	; (d4470 <_ZN16TlsClientHandler6DetectEPhm+0x130>)
   d4378:	4668      	mov	r0, sp
   d437a:	f011 fd67 	bl	e5e4c <_ZN6StringC1EPKc>
   d437e:	4669      	mov	r1, sp
   d4380:	4620      	mov	r0, r4
   d4382:	f000 fb3a 	bl	d49fa <_ZN10HttpHelper7setHostE6String>
   d4386:	4668      	mov	r0, sp
   d4388:	f011 fd15 	bl	e5db6 <_ZN6StringD1Ev>
    http.setKey(KEY);
   d438c:	4939      	ldr	r1, [pc, #228]	; (d4474 <_ZN16TlsClientHandler6DetectEPhm+0x134>)
   d438e:	4668      	mov	r0, sp
   d4390:	f011 fd5c 	bl	e5e4c <_ZN6StringC1EPKc>
   d4394:	4669      	mov	r1, sp
   d4396:	4620      	mov	r0, r4
   d4398:	f000 fb81 	bl	d4a9e <_ZN10HttpHelper6setKeyE6String>
   d439c:	4668      	mov	r0, sp
   d439e:	f011 fd0a 	bl	e5db6 <_ZN6StringD1Ev>
    http.setContent(http.HTTP_OCTET);
   d43a2:	f505 51a7 	add.w	r1, r5, #5344	; 0x14e0
   d43a6:	3108      	adds	r1, #8
   d43a8:	4668      	mov	r0, sp
   d43aa:	f011 fd8f 	bl	e5ecc <_ZN6StringC1ERKS_>
   d43ae:	4669      	mov	r1, sp
   d43b0:	4620      	mov	r0, r4
   d43b2:	f000 fb71 	bl	d4a98 <_ZN10HttpHelper10setContentE6String>
   d43b6:	4668      	mov	r0, sp
   d43b8:	f011 fcfd 	bl	e5db6 <_ZN6StringD1Ev>
    http.setBody(img);
   d43bc:	4641      	mov	r1, r8
   d43be:	4620      	mov	r0, r4
   d43c0:	f000 fb58 	bl	d4a74 <_ZN10HttpHelper7setBodyEPh>
    client.init(letencryptCaPem, sizeof(letencryptCaPem));
   d43c4:	f505 6747 	add.w	r7, r5, #3184	; 0xc70
    http.setContentLength(length); //set to the right size
   d43c8:	4649      	mov	r1, r9
   d43ca:	4620      	mov	r0, r4
   d43cc:	f000 fb54 	bl	d4a78 <_ZN10HttpHelper16setContentLengthEm>
    client.init(letencryptCaPem, sizeof(letencryptCaPem));
   d43d0:	f240 72e1 	movw	r2, #2017	; 0x7e1
   d43d4:	4629      	mov	r1, r5
   d43d6:	4638      	mov	r0, r7
   d43d8:	f000 f9be 	bl	d4758 <_ZN12TlsTcpClient4initEPKcj>
    client.connect(this->URL, 443);
   d43dc:	f240 12bb 	movw	r2, #443	; 0x1bb
   d43e0:	f205 71e1 	addw	r1, r5, #2017	; 0x7e1
   d43e4:	4638      	mov	r0, r7
   d43e6:	f000 fa6d 	bl	d48c4 <_ZN12TlsTcpClient7connectEPct>
    int len = sprintf((char *)buff, http.makeDetect());
   d43ea:	4620      	mov	r0, r4
   d43ec:	f000 fbdc 	bl	d4ba8 <_ZN10HttpHelper10makeDetectEv>
   d43f0:	4601      	mov	r1, r0
   d43f2:	4630      	mov	r0, r6
   d43f4:	f011 fae8 	bl	e59c8 <sprintf>
    client.write(buff, len );
   d43f8:	4631      	mov	r1, r6
    int len = sprintf((char *)buff, http.makeDetect());
   d43fa:	4602      	mov	r2, r0
    client.write(buff, len );
   d43fc:	4638      	mov	r0, r7
   d43fe:	f000 f9e0 	bl	d47c2 <_ZN12TlsTcpClient5writeEPhi>
    client.write(img,length);;
   d4402:	464a      	mov	r2, r9
   d4404:	4641      	mov	r1, r8
   d4406:	4638      	mov	r0, r7
   d4408:	f000 f9db 	bl	d47c2 <_ZN12TlsTcpClient5writeEPhi>
    memset(buff, 0, sizeof(buff));
   d440c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4410:	2100      	movs	r1, #0
   d4412:	4630      	mov	r0, r6
   d4414:	f014 fd12 	bl	e8e3c <memset>
        int ret = client.read(buff, sizeof(buff) - 1);
   d4418:	f240 32ff 	movw	r2, #1023	; 0x3ff
   d441c:	4631      	mov	r1, r6
   d441e:	4638      	mov	r0, r7
   d4420:	f000 fa37 	bl	d4892 <_ZN12TlsTcpClient4readEPhi>
        if (ret == MBEDTLS_ERR_SSL_WANT_READ) {
   d4424:	f510 4fd2 	cmn.w	r0, #26880	; 0x6900
   d4428:	d103      	bne.n	d4432 <_ZN16TlsClientHandler6DetectEPhm+0xf2>
            delay(100);
   d442a:	2064      	movs	r0, #100	; 0x64
   d442c:	f011 ffc4 	bl	e63b8 <delay>
   d4430:	e7f2      	b.n	d4418 <_ZN16TlsClientHandler6DetectEPhm+0xd8>
        } else if (ret <= 0) {
   d4432:	2800      	cmp	r0, #0
   d4434:	dcf0      	bgt.n	d4418 <_ZN16TlsClientHandler6DetectEPhm+0xd8>
    http.setResponse((char*) buff,true);
   d4436:	4631      	mov	r1, r6
   d4438:	2201      	movs	r2, #1
   d443a:	4620      	mov	r0, r4
   d443c:	f000 fc46 	bl	d4ccc <_ZN10HttpHelper11setResponseEPcb>
    if((status = http.getStatus()) != 200) {
   d4440:	4620      	mov	r0, r4
   d4442:	f000 fb2f 	bl	d4aa4 <_ZN10HttpHelper9getStatusEv>
   d4446:	28c8      	cmp	r0, #200	; 0xc8
   d4448:	4606      	mov	r6, r0
   d444a:	d10b      	bne.n	d4464 <_ZN16TlsClientHandler6DetectEPhm+0x124>
    return this->Verify(http.getFaceId());
   d444c:	4621      	mov	r1, r4
   d444e:	4668      	mov	r0, sp
   d4450:	f000 fb2b 	bl	d4aaa <_ZN10HttpHelper9getFaceIdEv>
   d4454:	4669      	mov	r1, sp
   d4456:	4628      	mov	r0, r5
   d4458:	f7ff fed2 	bl	d4200 <_ZN16TlsClientHandler6VerifyE6String>
   d445c:	4606      	mov	r6, r0
   d445e:	4668      	mov	r0, sp
   d4460:	f011 fca9 	bl	e5db6 <_ZN6StringD1Ev>
}
   d4464:	4630      	mov	r0, r6
   d4466:	b005      	add	sp, #20
   d4468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d446c:	000eb58c 	.word	0x000eb58c
   d4470:	000eb525 	.word	0x000eb525
   d4474:	000eb56b 	.word	0x000eb56b

000d4478 <_ZN17HardwareInterfaceC1Ev>:
#include "HardwareInterface.h"

HardwareInterface::HardwareInterface(/* args */)
   d4478:	b510      	push	{r4, lr}
   d447a:	4604      	mov	r4, r0
   d447c:	f011 fb56 	bl	e5b2c <_ZN5ServoC1Ev>
   d4480:	2202      	movs	r2, #2
   d4482:	2303      	movs	r3, #3
   d4484:	e9c4 2304 	strd	r2, r3, [r4, #16]
   d4488:	2104      	movs	r1, #4
   d448a:	2305      	movs	r3, #5
   d448c:	e9c4 1306 	strd	r1, r3, [r4, #24]
{
}
   d4490:	4620      	mov	r0, r4
   d4492:	bd10      	pop	{r4, pc}

000d4494 <_ZN17HardwareInterfaceD1Ev>:

HardwareInterface::~HardwareInterface()
   d4494:	b510      	push	{r4, lr}
   d4496:	4604      	mov	r4, r0
   d4498:	f011 fb5c 	bl	e5b54 <_ZN5ServoD1Ev>
{
}
   d449c:	4620      	mov	r0, r4
   d449e:	bd10      	pop	{r4, pc}

000d44a0 <_ZN17HardwareInterface5setupEv>:

void HardwareInterface::setup() {
   d44a0:	b513      	push	{r0, r1, r4, lr}
  myServo.attach(servopin);
   d44a2:	2300      	movs	r3, #0
   d44a4:	22b4      	movs	r2, #180	; 0xb4
   d44a6:	e9cd 3200 	strd	r3, r2, [sp]
void HardwareInterface::setup() {
   d44aa:	4604      	mov	r4, r0
  myServo.attach(servopin);
   d44ac:	f44f 6316 	mov.w	r3, #2400	; 0x960
   d44b0:	f44f 7208 	mov.w	r2, #544	; 0x220
   d44b4:	8a01      	ldrh	r1, [r0, #16]
   d44b6:	f011 fb53 	bl	e5b60 <_ZN5Servo6attachEtttss>
  pinMode(redPin, OUTPUT);
   d44ba:	8aa0      	ldrh	r0, [r4, #20]
   d44bc:	2101      	movs	r1, #1
   d44be:	f013 fa65 	bl	e798c <pinMode>
  pinMode(greenPin, OUTPUT);
   d44c2:	8b20      	ldrh	r0, [r4, #24]
   d44c4:	2101      	movs	r1, #1
   d44c6:	f013 fa61 	bl	e798c <pinMode>
  pinMode(bluePin, OUTPUT);
   d44ca:	8ba0      	ldrh	r0, [r4, #28]
   d44cc:	2101      	movs	r1, #1
}
   d44ce:	b002      	add	sp, #8
   d44d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pinMode(bluePin, OUTPUT);
   d44d4:	f013 ba5a 	b.w	e798c <pinMode>

000d44d8 <_ZN17HardwareInterface8openLockEi>:

// Consider adding an argument that specifies which motor to run
void HardwareInterface::openLock(int command) {
   d44d8:	b510      	push	{r4, lr}
   d44da:	4604      	mov	r4, r0
  if (command == 0)
   d44dc:	b931      	cbnz	r1, d44ec <_ZN17HardwareInterface8openLockEi+0x14>
    myServo.write(0);
    //Implement nonblocking wait
  }
  else {
    //close
    Serial.println("Closing the lock");
   d44de:	f012 facb 	bl	e6a78 <_Z16_fetch_usbserialv>
   d44e2:	4909      	ldr	r1, [pc, #36]	; (d4508 <_ZN17HardwareInterface8openLockEi+0x30>)
   d44e4:	f011 fe27 	bl	e6136 <_ZN5Print7printlnEPKc>
    myServo.write(90);
   d44e8:	215a      	movs	r1, #90	; 0x5a
   d44ea:	e007      	b.n	d44fc <_ZN17HardwareInterface8openLockEi+0x24>
  else if (command == 1)
   d44ec:	2901      	cmp	r1, #1
   d44ee:	d1f6      	bne.n	d44de <_ZN17HardwareInterface8openLockEi+0x6>
    Serial.println("Opening the lock");
   d44f0:	f012 fac2 	bl	e6a78 <_Z16_fetch_usbserialv>
   d44f4:	4905      	ldr	r1, [pc, #20]	; (d450c <_ZN17HardwareInterface8openLockEi+0x34>)
   d44f6:	f011 fe1e 	bl	e6136 <_ZN5Print7printlnEPKc>
    myServo.write(0);
   d44fa:	2100      	movs	r1, #0
    myServo.write(90);
   d44fc:	4620      	mov	r0, r4
  }
}
   d44fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    myServo.write(90);
   d4502:	f011 baea 	b.w	e5ada <_ZN5Servo5writeEi>
   d4506:	bf00      	nop
   d4508:	000eb623 	.word	0x000eb623
   d450c:	000eb634 	.word	0x000eb634

000d4510 <_ZN17HardwareInterface10rgbControlEi>:

// 0  = All off
// 1 = Red on 
// 2 = Green on 
// 3 = blue pin on
void HardwareInterface::rgbControl(int color) {
   d4510:	b538      	push	{r3, r4, r5, lr}
   d4512:	4604      	mov	r4, r0
      // Max brightness of LEDs
  int brightness = 128; 

  // All off
  if (color == 0){
   d4514:	460d      	mov	r5, r1
   d4516:	b949      	cbnz	r1, d452c <_ZN17HardwareInterface10rgbControlEi+0x1c>
    analogWrite(redPin, 0);
   d4518:	8a80      	ldrh	r0, [r0, #20]
   d451a:	f013 fa48 	bl	e79ae <_Z11analogWritetm>
    analogWrite(greenPin, 0);
   d451e:	4629      	mov	r1, r5
   d4520:	8b20      	ldrh	r0, [r4, #24]
   d4522:	f013 fa44 	bl	e79ae <_Z11analogWritetm>
    analogWrite(bluePin, 0);
   d4526:	4629      	mov	r1, r5
    //Set green part of RGB to light
    analogWrite(greenPin, brightness);
  }
  // BLue
  else if (color == 3){
    analogWrite(bluePin, brightness);
   d4528:	8ba0      	ldrh	r0, [r4, #28]
   d452a:	e003      	b.n	d4534 <_ZN17HardwareInterface10rgbControlEi+0x24>
  if (color == 1){
   d452c:	2901      	cmp	r1, #1
   d452e:	d105      	bne.n	d453c <_ZN17HardwareInterface10rgbControlEi+0x2c>
    analogWrite(redPin, brightness);
   d4530:	8a80      	ldrh	r0, [r0, #20]
   d4532:	2180      	movs	r1, #128	; 0x80

  }
}
   d4534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    analogWrite(bluePin, brightness);
   d4538:	f013 ba39 	b.w	e79ae <_Z11analogWritetm>
  else if (color == 2){
   d453c:	2902      	cmp	r1, #2
   d453e:	d102      	bne.n	d4546 <_ZN17HardwareInterface10rgbControlEi+0x36>
    analogWrite(greenPin, brightness);
   d4540:	8b00      	ldrh	r0, [r0, #24]
   d4542:	2180      	movs	r1, #128	; 0x80
   d4544:	e7f6      	b.n	d4534 <_ZN17HardwareInterface10rgbControlEi+0x24>
  else if (color == 3){
   d4546:	2903      	cmp	r1, #3
   d4548:	d101      	bne.n	d454e <_ZN17HardwareInterface10rgbControlEi+0x3e>
    analogWrite(bluePin, brightness);
   d454a:	2180      	movs	r1, #128	; 0x80
   d454c:	e7ec      	b.n	d4528 <_ZN17HardwareInterface10rgbControlEi+0x18>
}
   d454e:	bd38      	pop	{r3, r4, r5, pc}

000d4550 <_ZN17HardwareInterface15faceNotRecoggedEv>:

void HardwareInterface::faceNotRecogged(){
   d4550:	b538      	push	{r3, r4, r5, lr}
   d4552:	4604      	mov	r4, r0
   d4554:	2502      	movs	r5, #2
  // Blink red LED a few times
  int blinkytimes = 2;
  for (int i = 0; i < blinkytimes; i++){
    rgbControl(1);
   d4556:	2101      	movs	r1, #1
   d4558:	4620      	mov	r0, r4
   d455a:	f7ff ffd9 	bl	d4510 <_ZN17HardwareInterface10rgbControlEi>
    myServo.write(90);
   d455e:	215a      	movs	r1, #90	; 0x5a
   d4560:	4620      	mov	r0, r4
   d4562:	f011 faba 	bl	e5ada <_ZN5Servo5writeEi>
    delay(500);
   d4566:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d456a:	f011 ff25 	bl	e63b8 <delay>
    rgbControl(0);
   d456e:	2100      	movs	r1, #0
   d4570:	4620      	mov	r0, r4
   d4572:	f7ff ffcd 	bl	d4510 <_ZN17HardwareInterface10rgbControlEi>
    myServo.write(90);
   d4576:	215a      	movs	r1, #90	; 0x5a
   d4578:	4620      	mov	r0, r4
   d457a:	f011 faae 	bl	e5ada <_ZN5Servo5writeEi>
    delay(500);
   d457e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4582:	f011 ff19 	bl	e63b8 <delay>
  for (int i = 0; i < blinkytimes; i++){
   d4586:	2d01      	cmp	r5, #1
   d4588:	d100      	bne.n	d458c <_ZN17HardwareInterface15faceNotRecoggedEv+0x3c>
  }
   d458a:	bd38      	pop	{r3, r4, r5, pc}
   d458c:	2501      	movs	r5, #1
   d458e:	e7e2      	b.n	d4556 <_ZN17HardwareInterface15faceNotRecoggedEv+0x6>

000d4590 <_ZN12TlsTcpClient9debug_TlsEPviPKciS2_>:
void TlsTcpClient::debug_Tls( void *ctx, int level,
                      const char *file, int line,
                      const char *str ) {
    ((void) level);
    debug_tls("%s:%04d: %s", file, line, str);
}
   d4590:	4770      	bx	lr

000d4592 <_ZN12TlsTcpClient7rng_TlsEPvPhj>:
int TlsTcpClient::rng_Tls(void* handle, uint8_t* data, const size_t len_) {
   d4592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4594:	f022 0703 	bic.w	r7, r2, #3
   d4598:	460c      	mov	r4, r1
   d459a:	4615      	mov	r5, r2
   d459c:	0896      	lsrs	r6, r2, #2
   d459e:	440f      	add	r7, r1
  while (len>=4) {
   d45a0:	42bc      	cmp	r4, r7
   d45a2:	d10b      	bne.n	d45bc <_ZN12TlsTcpClient7rng_TlsEPvPhj+0x2a>
   d45a4:	f06f 0203 	mvn.w	r2, #3
   d45a8:	fb02 5506 	mla	r5, r2, r6, r5
   d45ac:	4425      	add	r5, r4
  while (len-->0) {
   d45ae:	42ac      	cmp	r4, r5
   d45b0:	d009      	beq.n	d45c6 <_ZN12TlsTcpClient7rng_TlsEPvPhj+0x34>
    *data++ = HAL_RNG_GetRandomNumber();
   d45b2:	f010 ffc3 	bl	e553c <HAL_RNG_GetRandomNumber>
   d45b6:	f804 0b01 	strb.w	r0, [r4], #1
  while (len-->0) {
   d45ba:	e7f8      	b.n	d45ae <_ZN12TlsTcpClient7rng_TlsEPvPhj+0x1c>
    *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
   d45bc:	f010 ffbe 	bl	e553c <HAL_RNG_GetRandomNumber>
   d45c0:	f844 0b04 	str.w	r0, [r4], #4
  while (len>=4) {
   d45c4:	e7ec      	b.n	d45a0 <_ZN12TlsTcpClient7rng_TlsEPvPhj+0xe>
}
   d45c6:	2000      	movs	r0, #0
   d45c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d45cc <_ZN12TlsTcpClient14veryfyCert_TlsEPvP16mbedtls_x509_crtiPm>:

  *ttime = nowt;
  return nowt;
}

int TlsTcpClient::veryfyCert_Tls(void *data, mbedtls_x509_crt *crt, int depth, uint32_t *flags) {
   d45cc:	b500      	push	{lr}
   d45ce:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
   d45d2:	460b      	mov	r3, r1
  char buf[1024];
  ((void) data);

  debug_tls("Verify requested for (Depth %d):\n", depth);
  mbedtls_x509_crt_info(buf, sizeof(buf) - 1, "", crt);
   d45d4:	4a05      	ldr	r2, [pc, #20]	; (d45ec <_ZN12TlsTcpClient14veryfyCert_TlsEPvP16mbedtls_x509_crtiPm+0x20>)
   d45d6:	f240 31ff 	movw	r1, #1023	; 0x3ff
   d45da:	4668      	mov	r0, sp
   d45dc:	f009 f92a 	bl	dd834 <mbedtls_x509_crt_info>
  } else {
    debug_tls(buf, sizeof(buf), "  ! ", *flags);
    debug_tls("%s\n", buf);
  }
  return 0;
}
   d45e0:	2000      	movs	r0, #0
   d45e2:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
   d45e6:	f85d fb04 	ldr.w	pc, [sp], #4
   d45ea:	bf00      	nop
   d45ec:	000ebb9d 	.word	0x000ebb9d

000d45f0 <_ZN12TlsTcpClientC1Ev>:
TlsTcpClient::TlsTcpClient() {
   d45f0:	b510      	push	{r4, lr}
   d45f2:	4604      	mov	r4, r0
   d45f4:	f200 708c 	addw	r0, r0, #1932	; 0x78c
   d45f8:	f012 fdce 	bl	e7198 <_ZN9TCPClientC1Ev>
  connected = false;
   d45fc:	2300      	movs	r3, #0
   d45fe:	f884 37a8 	strb.w	r3, [r4, #1960]	; 0x7a8
}
   d4602:	4620      	mov	r0, r4
   d4604:	bd10      	pop	{r4, pc}
	...

000d4608 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j>:
  return this->init(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int TlsTcpClient::init(const char *rootCaPem, const size_t rootCaPemSize,
         const char *clientCertPem, const size_t clientCertPemSize,
         const char *clientKeyPem, const size_t clientKeyPemSize) {
   d4608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d460c:	ed2d 8b02 	vpush	{d8}
   d4610:	4604      	mov	r4, r0
   d4612:	ee08 2a10 	vmov	s16, r2

  int ret;
  connected = false;
  mbedtls_ssl_config_init(&conf);
   d4616:	f200 4574 	addw	r5, r0, #1140	; 0x474
  connected = false;
   d461a:	2200      	movs	r2, #0
         const char *clientKeyPem, const size_t clientKeyPemSize) {
   d461c:	b083      	sub	sp, #12
  connected = false;
   d461e:	f880 27a8 	strb.w	r2, [r0, #1960]	; 0x7a8
  mbedtls_ssl_init(&ssl);
   d4622:	f504 766e 	add.w	r6, r4, #952	; 0x3b8
  mbedtls_ssl_config_init(&conf);
   d4626:	4628      	mov	r0, r5
         const char *clientKeyPem, const size_t clientKeyPemSize) {
   d4628:	468a      	mov	sl, r1
   d462a:	469b      	mov	fp, r3
  mbedtls_x509_crt_init(&cacert);
   d462c:	f204 49f4 	addw	r9, r4, #1268	; 0x4f4
  mbedtls_ssl_config_init(&conf);
   d4630:	f00b ff21 	bl	e0476 <mbedtls_ssl_config_init>
  mbedtls_ssl_init(&ssl);
   d4634:	4630      	mov	r0, r6
   d4636:	f00b fc0f 	bl	dfe58 <mbedtls_ssl_init>
  mbedtls_x509_crt_init(&clicert);
   d463a:	f504 67c5 	add.w	r7, r4, #1576	; 0x628
  mbedtls_x509_crt_init(&cacert);
   d463e:	4648      	mov	r0, r9
   d4640:	f009 fece 	bl	de3e0 <mbedtls_x509_crt_init>
  mbedtls_pk_init(&pkey);
   d4644:	f204 785c 	addw	r8, r4, #1884	; 0x75c
  mbedtls_x509_crt_init(&clicert);
   d4648:	4638      	mov	r0, r7
   d464a:	f009 fec9 	bl	de3e0 <mbedtls_x509_crt_init>
  mbedtls_pk_init(&pkey);
   d464e:	4640      	mov	r0, r8
   d4650:	f00a fabe 	bl	debd0 <mbedtls_pk_init>

  mbedtls_ssl_conf_dbg(&conf, &TlsTcpClient::debug_Tls, nullptr);
   d4654:	4939      	ldr	r1, [pc, #228]	; (d473c <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x134>)
   d4656:	2200      	movs	r2, #0
   d4658:	4628      	mov	r0, r5
   d465a:	f00b fc0e 	bl	dfe7a <mbedtls_ssl_conf_dbg>
  #if defined(MBEDTLS_DEBUG_C)
    mbedtls_debug_set_threshold(DEBUG_TLS_CORE_LEVEL);
  #endif

  if ((ret = mbedtls_x509_crt_parse(&cacert, (const unsigned char *)rootCaPem, rootCaPemSize)) < 0) {
   d465e:	4651      	mov	r1, sl
   d4660:	ee18 2a10 	vmov	r2, s16
   d4664:	4648      	mov	r0, r9
   d4666:	f00a fa45 	bl	deaf4 <mbedtls_x509_crt_parse>
   d466a:	f1b0 0a00 	subs.w	sl, r0, #0
   d466e:	db51      	blt.n	d4714 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x10c>
    debug_tls(" enableTls mbedtls_x509_crt_parse error : %d\n", ret);
    return ret;
  }

  if (clientCertPem != NULL && clientCertPemSize > 0) {
   d4670:	f1bb 0f00 	cmp.w	fp, #0
   d4674:	d143      	bne.n	d46fe <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0xf6>
      debug_tls(" tlsClientKey mbedtls_x509_crt_parse error : %d\n", ret);
      return ret;
    }
  }

  if (clientKeyPem != NULL && clientKeyPemSize > 0) {
   d4676:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d4678:	2b00      	cmp	r3, #0
   d467a:	d151      	bne.n	d4720 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x118>
      debug_tls(" tlsClientKey mbedtls_pk_parse_key error : %d\n", ret);
      return ret;
    }
  }

  if ((ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,
   d467c:	2300      	movs	r3, #0
   d467e:	461a      	mov	r2, r3
   d4680:	4619      	mov	r1, r3
   d4682:	4628      	mov	r0, r5
   d4684:	f00b fefc 	bl	e0480 <mbedtls_ssl_config_defaults>
   d4688:	4682      	mov	sl, r0
   d468a:	2800      	cmp	r0, #0
   d468c:	d142      	bne.n	d4714 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x10c>
                 MBEDTLS_SSL_TRANSPORT_STREAM, MBEDTLS_SSL_PRESET_DEFAULT)) != 0) {
    return ret;
  }
  mbedtls_ssl_conf_min_version(&conf, MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3);
   d468e:	2203      	movs	r2, #3
   d4690:	4611      	mov	r1, r2
   d4692:	4628      	mov	r0, r5
   d4694:	f00b fc40 	bl	dff18 <mbedtls_ssl_conf_min_version>
  mbedtls_ssl_conf_verify(&conf, &TlsTcpClient::veryfyCert_Tls, NULL);
   d4698:	4652      	mov	r2, sl
   d469a:	4929      	ldr	r1, [pc, #164]	; (d4740 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x138>)
   d469c:	4628      	mov	r0, r5
   d469e:	f00b fbe6 	bl	dfe6e <mbedtls_ssl_conf_verify>

  // if server certificates is not valid, connection will success. check certificates on verify() function.
  mbedtls_ssl_conf_authmode(&conf, MBEDTLS_SSL_VERIFY_OPTIONAL);
   d46a2:	2101      	movs	r1, #1
   d46a4:	4628      	mov	r0, r5
   d46a6:	f00b fbdb 	bl	dfe60 <mbedtls_ssl_conf_authmode>
  mbedtls_ssl_conf_rng(&conf, &TlsTcpClient::rng_Tls, nullptr);
   d46aa:	4926      	ldr	r1, [pc, #152]	; (d4744 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x13c>)
   d46ac:	4652      	mov	r2, sl
   d46ae:	4628      	mov	r0, r5
   d46b0:	f00b fbe0 	bl	dfe74 <mbedtls_ssl_conf_rng>
  mbedtls_ssl_conf_ca_chain(&conf, &cacert, nullptr);
   d46b4:	4652      	mov	r2, sl
   d46b6:	4649      	mov	r1, r9
   d46b8:	4628      	mov	r0, r5
   d46ba:	f00b fbf3 	bl	dfea4 <mbedtls_ssl_conf_ca_chain>

  if (clientCertPem != NULL && clientKeyPem != NULL) {
   d46be:	f1bb 0f00 	cmp.w	fp, #0
   d46c2:	d006      	beq.n	d46d2 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0xca>
   d46c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d46c6:	b123      	cbz	r3, d46d2 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0xca>
    mbedtls_ssl_conf_own_cert(&conf, &clicert, &pkey);
   d46c8:	4642      	mov	r2, r8
   d46ca:	4639      	mov	r1, r7
   d46cc:	4628      	mov	r0, r5
   d46ce:	f00b fbe6 	bl	dfe9e <mbedtls_ssl_conf_own_cert>
  }

  if((ret = mbedtls_ssl_setup(&ssl, &conf)) != 0) {
   d46d2:	4629      	mov	r1, r5
   d46d4:	4630      	mov	r0, r6
   d46d6:	f00b fe43 	bl	e0360 <mbedtls_ssl_setup>
   d46da:	4682      	mov	sl, r0
   d46dc:	b9d0      	cbnz	r0, d4714 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x10c>
    return ret;
  }

  mbedtls_ssl_set_timer_cb(&ssl, &timer, mbedtls_timing_set_delay, mbedtls_timing_get_delay);
   d46de:	f204 7164 	addw	r1, r4, #1892	; 0x764
   d46e2:	4630      	mov	r0, r6
   d46e4:	4b18      	ldr	r3, [pc, #96]	; (d4748 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x140>)
   d46e6:	4a19      	ldr	r2, [pc, #100]	; (d474c <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x144>)
   d46e8:	f00b fbd0 	bl	dfe8c <mbedtls_ssl_set_timer_cb>
  mbedtls_ssl_set_bio(&ssl, this, &TlsTcpClient::send_Tls,  &TlsTcpClient::recv_Tls, nullptr);
   d46ec:	4b18      	ldr	r3, [pc, #96]	; (d4750 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x148>)
   d46ee:	4a19      	ldr	r2, [pc, #100]	; (d4754 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x14c>)
   d46f0:	f8cd a000 	str.w	sl, [sp]
   d46f4:	4621      	mov	r1, r4
   d46f6:	4630      	mov	r0, r6
   d46f8:	f00b fbc2 	bl	dfe80 <mbedtls_ssl_set_bio>
  return 0;
   d46fc:	e00a      	b.n	d4714 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x10c>
  if (clientCertPem != NULL && clientCertPemSize > 0) {
   d46fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d4700:	2b00      	cmp	r3, #0
   d4702:	d0b8      	beq.n	d4676 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x6e>
    if ((ret = mbedtls_x509_crt_parse(&clicert, (const unsigned char *)clientCertPem, clientCertPemSize)) < 0) {
   d4704:	461a      	mov	r2, r3
   d4706:	4659      	mov	r1, fp
   d4708:	4638      	mov	r0, r7
   d470a:	f00a f9f3 	bl	deaf4 <mbedtls_x509_crt_parse>
   d470e:	f1b0 0a00 	subs.w	sl, r0, #0
   d4712:	dab0      	bge.n	d4676 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x6e>
}
   d4714:	4650      	mov	r0, sl
   d4716:	b003      	add	sp, #12
   d4718:	ecbd 8b02 	vpop	{d8}
   d471c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (clientKeyPem != NULL && clientKeyPemSize > 0) {
   d4720:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d4722:	2b00      	cmp	r3, #0
   d4724:	d0aa      	beq.n	d467c <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x74>
    if ((ret = mbedtls_pk_parse_key(&pkey, (const unsigned char *)clientKeyPem, clientKeyPemSize, NULL, 0)) != 0) {
   d4726:	2300      	movs	r3, #0
   d4728:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   d472c:	9300      	str	r3, [sp, #0]
   d472e:	4640      	mov	r0, r8
   d4730:	f007 fed2 	bl	dc4d8 <mbedtls_pk_parse_key>
   d4734:	4682      	mov	sl, r0
   d4736:	2800      	cmp	r0, #0
   d4738:	d0a0      	beq.n	d467c <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x74>
   d473a:	e7eb      	b.n	d4714 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j+0x10c>
   d473c:	000d4591 	.word	0x000d4591
   d4740:	000d45cd 	.word	0x000d45cd
   d4744:	000d4593 	.word	0x000d4593
   d4748:	000db1e7 	.word	0x000db1e7
   d474c:	000db1d9 	.word	0x000db1d9
   d4750:	000d4815 	.word	0x000d4815
   d4754:	000d47d9 	.word	0x000d47d9

000d4758 <_ZN12TlsTcpClient4initEPKcj>:
int TlsTcpClient::init(const char *rootCaPem, const size_t rootCaPemSize) {
   d4758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return this->init(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
   d475a:	2300      	movs	r3, #0
   d475c:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d4760:	9300      	str	r3, [sp, #0]
   d4762:	f7ff ff51 	bl	d4608 <_ZN12TlsTcpClient4initEPKcjS1_jS1_j>
}
   d4766:	b005      	add	sp, #20
   d4768:	f85d fb04 	ldr.w	pc, [sp], #4

000d476c <_ZN12TlsTcpClient9handShakeEv>:
  }

  return this->handShake();
}

int TlsTcpClient::handShake() {
   d476c:	b570      	push	{r4, r5, r6, lr}
   d476e:	4604      	mov	r4, r0
   d4770:	2500      	movs	r5, #0
  int ret;
  do {
      while (ssl.state != MBEDTLS_SSL_HANDSHAKE_OVER) {
          ret = mbedtls_ssl_handshake_client_step(&ssl);
   d4772:	f500 766e 	add.w	r6, r0, #952	; 0x3b8
      while (ssl.state != MBEDTLS_SSL_HANDSHAKE_OVER) {
   d4776:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
   d477a:	2b10      	cmp	r3, #16
   d477c:	d005      	beq.n	d478a <_ZN12TlsTcpClient9handShakeEv+0x1e>
          ret = mbedtls_ssl_handshake_client_step(&ssl);
   d477e:	4630      	mov	r0, r6
   d4780:	f00f fffe 	bl	e4780 <mbedtls_ssl_handshake_client_step>
          if (ret != 0)
   d4784:	4605      	mov	r5, r0
   d4786:	2800      	cmp	r0, #0
   d4788:	d0f5      	beq.n	d4776 <_ZN12TlsTcpClient9handShakeEv+0xa>
              break;
      }
  } while(ret == MBEDTLS_ERR_SSL_WANT_READ || ret == MBEDTLS_ERR_SSL_WANT_WRITE);
   d478a:	f515 4fd2 	cmn.w	r5, #26880	; 0x6900
   d478e:	d0f2      	beq.n	d4776 <_ZN12TlsTcpClient9handShakeEv+0xa>
   d4790:	f515 4fd1 	cmn.w	r5, #26752	; 0x6880
   d4794:	d0ef      	beq.n	d4776 <_ZN12TlsTcpClient9handShakeEv+0xa>

  // clean ca cert/crt/pkey
  mbedtls_x509_crt_free(&cacert);
   d4796:	f204 40f4 	addw	r0, r4, #1268	; 0x4f4
   d479a:	f009 fe26 	bl	de3ea <mbedtls_x509_crt_free>
  mbedtls_x509_crt_free(&clicert);
   d479e:	f504 60c5 	add.w	r0, r4, #1576	; 0x628
   d47a2:	f009 fe22 	bl	de3ea <mbedtls_x509_crt_free>
  mbedtls_pk_free(&pkey);
   d47a6:	f204 705c 	addw	r0, r4, #1884	; 0x75c
   d47aa:	f00a fa15 	bl	debd8 <mbedtls_pk_free>

  if (ssl.state == MBEDTLS_SSL_HANDSHAKE_OVER) {
   d47ae:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
   d47b2:	2b10      	cmp	r3, #16
    connected = true;
   d47b4:	bf02      	ittt	eq
   d47b6:	2301      	moveq	r3, #1
    return 0;
   d47b8:	2500      	moveq	r5, #0
    connected = true;
   d47ba:	f884 37a8 	strbeq.w	r3, [r4, #1960]	; 0x7a8
  }
  return ret;
}
   d47be:	4628      	mov	r0, r5
   d47c0:	bd70      	pop	{r4, r5, r6, pc}

000d47c2 <_ZN12TlsTcpClient5writeEPhi>:

int TlsTcpClient::write(unsigned char *buff, int length) {
  if (connected) {
   d47c2:	f890 37a8 	ldrb.w	r3, [r0, #1960]	; 0x7a8
   d47c6:	b11b      	cbz	r3, d47d0 <_ZN12TlsTcpClient5writeEPhi+0xe>
      int ret = mbedtls_ssl_write( &ssl, buff, length );
   d47c8:	f500 706e 	add.w	r0, r0, #952	; 0x3b8
   d47cc:	f00b bc8a 	b.w	e00e4 <mbedtls_ssl_write>
      return ret;
  } else
    return -1;
}
   d47d0:	f04f 30ff 	mov.w	r0, #4294967295
   d47d4:	4770      	bx	lr
	...

000d47d8 <_ZN12TlsTcpClient8send_TlsEPvPKhj>:
int TlsTcpClient::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
   d47d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!sock->client.connected()) {
   d47da:	f200 758c 	addw	r5, r0, #1932	; 0x78c
   d47de:	4628      	mov	r0, r5
int TlsTcpClient::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
   d47e0:	e9cd 2100 	strd	r2, r1, [sp]
  if (!sock->client.connected()) {
   d47e4:	f012 fa51 	bl	e6c8a <_ZN9TCPClient9connectedEv>
   d47e8:	b160      	cbz	r0, d4804 <_ZN12TlsTcpClient8send_TlsEPvPKhj+0x2c>
  int ret = sock->client.write(buf, len);
   d47ea:	e9dd 2100 	ldrd	r2, r1, [sp]
   d47ee:	4628      	mov	r0, r5
   d47f0:	f012 fa35 	bl	e6c5e <_ZN9TCPClient5writeEPKhj>
  if (ret == 0) {
   d47f4:	4604      	mov	r4, r0
   d47f6:	b140      	cbz	r0, d480a <_ZN12TlsTcpClient8send_TlsEPvPKhj+0x32>
  sock->client.flush();
   d47f8:	4628      	mov	r0, r5
   d47fa:	f012 fa45 	bl	e6c88 <_ZN9TCPClient5flushEv>
}
   d47fe:	4620      	mov	r0, r4
   d4800:	b003      	add	sp, #12
   d4802:	bd30      	pop	{r4, r5, pc}
    return -1;
   d4804:	f04f 34ff 	mov.w	r4, #4294967295
   d4808:	e7f9      	b.n	d47fe <_ZN12TlsTcpClient8send_TlsEPvPKhj+0x26>
      return MBEDTLS_ERR_SSL_WANT_WRITE;
   d480a:	4c01      	ldr	r4, [pc, #4]	; (d4810 <_ZN12TlsTcpClient8send_TlsEPvPKhj+0x38>)
   d480c:	e7f7      	b.n	d47fe <_ZN12TlsTcpClient8send_TlsEPvPKhj+0x26>
   d480e:	bf00      	nop
   d4810:	ffff9780 	.word	0xffff9780

000d4814 <_ZN12TlsTcpClient8recv_TlsEPvPhj>:
int TlsTcpClient::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
   d4814:	b570      	push	{r4, r5, r6, lr}
   d4816:	4604      	mov	r4, r0
  if (!sock->client.connected()) {
   d4818:	f204 748c 	addw	r4, r4, #1932	; 0x78c
  delay(10);
   d481c:	200a      	movs	r0, #10
int TlsTcpClient::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
   d481e:	460d      	mov	r5, r1
   d4820:	4616      	mov	r6, r2
  delay(10);
   d4822:	f011 fdc9 	bl	e63b8 <delay>
  if (!sock->client.connected()) {
   d4826:	4620      	mov	r0, r4
   d4828:	f012 fa2f 	bl	e6c8a <_ZN9TCPClient9connectedEv>
   d482c:	b168      	cbz	r0, d484a <_ZN12TlsTcpClient8recv_TlsEPvPhj+0x36>
  if (sock->client.available() == 0) {
   d482e:	4620      	mov	r0, r4
   d4830:	f012 fc0e 	bl	e7050 <_ZN9TCPClient9availableEv>
   d4834:	b908      	cbnz	r0, d483a <_ZN12TlsTcpClient8recv_TlsEPvPhj+0x26>
    return MBEDTLS_ERR_SSL_WANT_READ;
   d4836:	4806      	ldr	r0, [pc, #24]	; (d4850 <_ZN12TlsTcpClient8recv_TlsEPvPhj+0x3c>)
}
   d4838:	bd70      	pop	{r4, r5, r6, pc}
  int ret = sock->client.read(buf, len);
   d483a:	4632      	mov	r2, r6
   d483c:	4629      	mov	r1, r5
   d483e:	4620      	mov	r0, r4
   d4840:	f012 fad9 	bl	e6df6 <_ZN9TCPClient4readEPhj>
  if (ret == 0) {
   d4844:	2800      	cmp	r0, #0
   d4846:	d1f7      	bne.n	d4838 <_ZN12TlsTcpClient8recv_TlsEPvPhj+0x24>
   d4848:	e7f5      	b.n	d4836 <_ZN12TlsTcpClient8recv_TlsEPvPhj+0x22>
    return -1;
   d484a:	f04f 30ff 	mov.w	r0, #4294967295
   d484e:	e7f3      	b.n	d4838 <_ZN12TlsTcpClient8recv_TlsEPvPhj+0x24>
   d4850:	ffff9700 	.word	0xffff9700

000d4854 <_ZN12TlsTcpClient5closeEv>:
  connected = false;
   d4854:	2300      	movs	r3, #0
void TlsTcpClient::close() {
   d4856:	b510      	push	{r4, lr}
   d4858:	4604      	mov	r4, r0
  connected = false;
   d485a:	f880 37a8 	strb.w	r3, [r0, #1960]	; 0x7a8
  mbedtls_x509_crt_free(&cacert);
   d485e:	f200 40f4 	addw	r0, r0, #1268	; 0x4f4
   d4862:	f009 fdc2 	bl	de3ea <mbedtls_x509_crt_free>
  mbedtls_x509_crt_free(&clicert);
   d4866:	f504 60c5 	add.w	r0, r4, #1576	; 0x628
   d486a:	f009 fdbe 	bl	de3ea <mbedtls_x509_crt_free>
  mbedtls_pk_free(&pkey);
   d486e:	f204 705c 	addw	r0, r4, #1884	; 0x75c
   d4872:	f00a f9b1 	bl	debd8 <mbedtls_pk_free>
  mbedtls_ssl_config_free (&conf);
   d4876:	f204 4074 	addw	r0, r4, #1140	; 0x474
   d487a:	f00b fe45 	bl	e0508 <mbedtls_ssl_config_free>
  mbedtls_ssl_free (&ssl);
   d487e:	f504 706e 	add.w	r0, r4, #952	; 0x3b8
   d4882:	f00b fda9 	bl	e03d8 <mbedtls_ssl_free>
  client.stop();
   d4886:	f204 708c 	addw	r0, r4, #1932	; 0x78c
};
   d488a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  client.stop();
   d488e:	f012 bc39 	b.w	e7104 <_ZN9TCPClient4stopEv>

000d4892 <_ZN12TlsTcpClient4readEPhi>:
  int ret = read(buff, 1);
  if (ret == 1) return buff[0];
  else    return ret;
}

int TlsTcpClient::read(unsigned char *buff, int length) {
   d4892:	b510      	push	{r4, lr}
  if (connected) {
   d4894:	f890 37a8 	ldrb.w	r3, [r0, #1960]	; 0x7a8
int TlsTcpClient::read(unsigned char *buff, int length) {
   d4898:	4604      	mov	r4, r0
  if (connected) {
   d489a:	b173      	cbz	r3, d48ba <_ZN12TlsTcpClient4readEPhi+0x28>
      int ret = mbedtls_ssl_read(&ssl, buff, length);
   d489c:	f500 706e 	add.w	r0, r0, #952	; 0x3b8
   d48a0:	f00b fba0 	bl	dffe4 <mbedtls_ssl_read>
      if (ret < 0) {
   d48a4:	2800      	cmp	r0, #0
   d48a6:	da0a      	bge.n	d48be <_ZN12TlsTcpClient4readEPhi+0x2c>
            switch (ret) {
   d48a8:	f510 4fee 	cmn.w	r0, #30464	; 0x7700
   d48ac:	d008      	beq.n	d48c0 <_ZN12TlsTcpClient4readEPhi+0x2e>
   d48ae:	f510 4fd2 	cmn.w	r0, #26880	; 0x6900
   d48b2:	d004      	beq.n	d48be <_ZN12TlsTcpClient4readEPhi+0x2c>
            case MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE:
                ret = 0;
                break;
            case MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY:
            default:
                close();
   d48b4:	4620      	mov	r0, r4
   d48b6:	f7ff ffcd 	bl	d4854 <_ZN12TlsTcpClient5closeEv>
                return -1;
          }
      }
      return ret;
  } else
    return -1;
   d48ba:	f04f 30ff 	mov.w	r0, #4294967295
}
   d48be:	bd10      	pop	{r4, pc}
                ret = 0;
   d48c0:	2000      	movs	r0, #0
   d48c2:	e7fc      	b.n	d48be <_ZN12TlsTcpClient4readEPhi+0x2c>

000d48c4 <_ZN12TlsTcpClient7connectEPct>:
int TlsTcpClient::connect(char* domain, uint16_t port) {
   d48c4:	b538      	push	{r3, r4, r5, lr}
   d48c6:	4604      	mov	r4, r0
  if (!client.connect(domain, port)) {
   d48c8:	2300      	movs	r3, #0
   d48ca:	f200 708c 	addw	r0, r0, #1932	; 0x78c
int TlsTcpClient::connect(char* domain, uint16_t port) {
   d48ce:	460d      	mov	r5, r1
  if (!client.connect(domain, port)) {
   d48d0:	f012 fabc 	bl	e6e4c <_ZN9TCPClient7connectEPKctm>
   d48d4:	b150      	cbz	r0, d48ec <_ZN12TlsTcpClient7connectEPct+0x28>
  if((ret = mbedtls_ssl_set_hostname(&ssl, domain)) != 0) {
   d48d6:	4629      	mov	r1, r5
   d48d8:	f504 706e 	add.w	r0, r4, #952	; 0x3b8
   d48dc:	f00b fae6 	bl	dfeac <mbedtls_ssl_set_hostname>
   d48e0:	b930      	cbnz	r0, d48f0 <_ZN12TlsTcpClient7connectEPct+0x2c>
  return this->handShake();
   d48e2:	4620      	mov	r0, r4
}
   d48e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return this->handShake();
   d48e8:	f7ff bf40 	b.w	d476c <_ZN12TlsTcpClient9handShakeEv>
      return -1;
   d48ec:	f04f 30ff 	mov.w	r0, #4294967295
}
   d48f0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d48f4 <_ZN10HttpHelperC1Ev>:
#include "HttpHelper.h"
HttpHelper::HttpHelper(/* args */)
   d48f4:	b538      	push	{r3, r4, r5, lr}
   d48f6:	4b21      	ldr	r3, [pc, #132]	; (d497c <_ZN10HttpHelperC1Ev+0x88>)
   d48f8:	6003      	str	r3, [r0, #0]
   d48fa:	4b21      	ldr	r3, [pc, #132]	; (d4980 <_ZN10HttpHelperC1Ev+0x8c>)
   d48fc:	6043      	str	r3, [r0, #4]
   d48fe:	4b21      	ldr	r3, [pc, #132]	; (d4984 <_ZN10HttpHelperC1Ev+0x90>)
   d4900:	6083      	str	r3, [r0, #8]
   d4902:	4b21      	ldr	r3, [pc, #132]	; (d4988 <_ZN10HttpHelperC1Ev+0x94>)
   d4904:	60c3      	str	r3, [r0, #12]
   d4906:	4b21      	ldr	r3, [pc, #132]	; (d498c <_ZN10HttpHelperC1Ev+0x98>)
   d4908:	6103      	str	r3, [r0, #16]
   d490a:	2500      	movs	r5, #0
   d490c:	2309      	movs	r3, #9
   d490e:	4604      	mov	r4, r0
   d4910:	e9c0 3505 	strd	r3, r5, [r0, #20]
  String body;
  uint8_t * octetBody;
  String content;
  String key;
  String length;
} http_request_t;
   d4914:	491e      	ldr	r1, [pc, #120]	; (d4990 <_ZN10HttpHelperC1Ev+0x9c>)
   d4916:	301c      	adds	r0, #28
   d4918:	f011 fa98 	bl	e5e4c <_ZN6StringC1EPKc>
   d491c:	491c      	ldr	r1, [pc, #112]	; (d4990 <_ZN10HttpHelperC1Ev+0x9c>)
   d491e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4922:	f011 fa93 	bl	e5e4c <_ZN6StringC1EPKc>
   d4926:	491a      	ldr	r1, [pc, #104]	; (d4990 <_ZN10HttpHelperC1Ev+0x9c>)
   d4928:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d492c:	f011 fa8e 	bl	e5e4c <_ZN6StringC1EPKc>
   d4930:	4917      	ldr	r1, [pc, #92]	; (d4990 <_ZN10HttpHelperC1Ev+0x9c>)
   d4932:	f104 0050 	add.w	r0, r4, #80	; 0x50
   d4936:	f011 fa89 	bl	e5e4c <_ZN6StringC1EPKc>
   d493a:	4915      	ldr	r1, [pc, #84]	; (d4990 <_ZN10HttpHelperC1Ev+0x9c>)
   d493c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4940:	f011 fa84 	bl	e5e4c <_ZN6StringC1EPKc>
   d4944:	4912      	ldr	r1, [pc, #72]	; (d4990 <_ZN10HttpHelperC1Ev+0x9c>)
   d4946:	f104 0070 	add.w	r0, r4, #112	; 0x70
   d494a:	f011 fa7f 	bl	e5e4c <_ZN6StringC1EPKc>

      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   d494e:	f104 038c 	add.w	r3, r4, #140	; 0x8c
      { _M_string_length = __length; }
   d4952:	e9c4 3521 	strd	r3, r5, [r4, #132]	; 0x84
  int status;
  std::string body;
  String faceId;
  bool isIdentical;
  double confidence;
} http_response_t;
   d4956:	490e      	ldr	r1, [pc, #56]	; (d4990 <_ZN10HttpHelperC1Ev+0x9c>)
      typedef streamoff         off_type;
      typedef mbstate_t         state_type;

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
      { __c1 = __c2; }
   d4958:	f884 508c 	strb.w	r5, [r4, #140]	; 0x8c
   d495c:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   d4960:	f011 fa74 	bl	e5e4c <_ZN6StringC1EPKc>
   d4964:	490b      	ldr	r1, [pc, #44]	; (d4994 <_ZN10HttpHelperC1Ev+0xa0>)
   d4966:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   d496a:	f011 fa6f 	bl	e5e4c <_ZN6StringC1EPKc>
   d496e:	490a      	ldr	r1, [pc, #40]	; (d4998 <_ZN10HttpHelperC1Ev+0xa4>)
   d4970:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
   d4974:	f011 fa6a 	bl	e5e4c <_ZN6StringC1EPKc>
{
}
   d4978:	4620      	mov	r0, r4
   d497a:	bd38      	pop	{r3, r4, r5, pc}
   d497c:	000eb645 	.word	0x000eb645
   d4980:	000eb649 	.word	0x000eb649
   d4984:	000eb64e 	.word	0x000eb64e
   d4988:	000eb652 	.word	0x000eb652
   d498c:	000eb659 	.word	0x000eb659
   d4990:	000ebb9d 	.word	0x000ebb9d
   d4994:	000eb65f 	.word	0x000eb65f
   d4998:	000eb670 	.word	0x000eb670

000d499c <_ZN10HttpHelperD1Ev>:

HttpHelper::~HttpHelper()
   d499c:	b538      	push	{r3, r4, r5, lr}
   d499e:	4604      	mov	r4, r0
   d49a0:	30c8      	adds	r0, #200	; 0xc8
   d49a2:	f011 fa08 	bl	e5db6 <_ZN6StringD1Ev>
   d49a6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   d49aa:	f011 fa04 	bl	e5db6 <_ZN6StringD1Ev>
   d49ae:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   d49b2:	f011 fa00 	bl	e5db6 <_ZN6StringD1Ev>

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string()
      { _M_dispose(); }
   d49b6:	f104 0084 	add.w	r0, r4, #132	; 0x84
   d49ba:	f013 f95b 	bl	e7c74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
} http_request_t;
   d49be:	f104 0070 	add.w	r0, r4, #112	; 0x70
   d49c2:	f011 f9f8 	bl	e5db6 <_ZN6StringD1Ev>
   d49c6:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d49ca:	f011 f9f4 	bl	e5db6 <_ZN6StringD1Ev>
   d49ce:	f104 0050 	add.w	r0, r4, #80	; 0x50
   d49d2:	f011 f9f0 	bl	e5db6 <_ZN6StringD1Ev>
   d49d6:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d49da:	f011 f9ec 	bl	e5db6 <_ZN6StringD1Ev>
   d49de:	f104 051c 	add.w	r5, r4, #28
   d49e2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d49e6:	f011 f9e6 	bl	e5db6 <_ZN6StringD1Ev>
   d49ea:	4628      	mov	r0, r5
   d49ec:	f011 f9e3 	bl	e5db6 <_ZN6StringD1Ev>
{
}
   d49f0:	4620      	mov	r0, r4
   d49f2:	bd38      	pop	{r3, r4, r5, pc}

000d49f4 <_ZN10HttpHelper7setPathE6String>:

void HttpHelper::setPath(String path) {
    httpRequest.path = path;
   d49f4:	301c      	adds	r0, #28
   d49f6:	f011 ba5a 	b.w	e5eae <_ZN6StringaSERKS_>

000d49fa <_ZN10HttpHelper7setHostE6String>:
}
void HttpHelper::setHost(String host) {
    httpRequest.host = host;
   d49fa:	302c      	adds	r0, #44	; 0x2c
   d49fc:	f011 ba57 	b.w	e5eae <_ZN6StringaSERKS_>

000d4a00 <_ZN10HttpHelper7setBodyE6StringS0_S0_>:
}
void HttpHelper::setBody(String faceId, String personId, String personGroupId) {
   d4a00:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4a02:	b085      	sub	sp, #20
   d4a04:	4604      	mov	r4, r0
   d4a06:	460f      	mov	r7, r1
    String tmp = "{";
   d4a08:	4668      	mov	r0, sp
   d4a0a:	4915      	ldr	r1, [pc, #84]	; (d4a60 <_ZN10HttpHelper7setBodyE6StringS0_S0_+0x60>)
void HttpHelper::setBody(String faceId, String personId, String personGroupId) {
   d4a0c:	4616      	mov	r6, r2
   d4a0e:	461d      	mov	r5, r3
    String tmp = "{";
   d4a10:	f011 fa1c 	bl	e5e4c <_ZN6StringC1EPKc>
    tmp.concat("\"faceId\":\"");
   d4a14:	4913      	ldr	r1, [pc, #76]	; (d4a64 <_ZN10HttpHelper7setBodyE6StringS0_S0_+0x64>)
   d4a16:	4668      	mov	r0, sp
   d4a18:	f011 fac9 	bl	e5fae <_ZN6String6concatEPKc>
    tmp.concat(faceId);
   d4a1c:	4639      	mov	r1, r7
   d4a1e:	4668      	mov	r0, sp
   d4a20:	f011 fab7 	bl	e5f92 <_ZN6String6concatERKS_>
    tmp.concat("\",\"personId\":\"");
   d4a24:	4910      	ldr	r1, [pc, #64]	; (d4a68 <_ZN10HttpHelper7setBodyE6StringS0_S0_+0x68>)
   d4a26:	4668      	mov	r0, sp
   d4a28:	f011 fac1 	bl	e5fae <_ZN6String6concatEPKc>
    tmp.concat(personId);
   d4a2c:	4631      	mov	r1, r6
   d4a2e:	4668      	mov	r0, sp
   d4a30:	f011 faaf 	bl	e5f92 <_ZN6String6concatERKS_>
    tmp.concat("\",\"PersonGroupId\":\"");
   d4a34:	490d      	ldr	r1, [pc, #52]	; (d4a6c <_ZN10HttpHelper7setBodyE6StringS0_S0_+0x6c>)
   d4a36:	4668      	mov	r0, sp
   d4a38:	f011 fab9 	bl	e5fae <_ZN6String6concatEPKc>
    tmp.concat(personGroupId);
   d4a3c:	4629      	mov	r1, r5
   d4a3e:	4668      	mov	r0, sp
   d4a40:	f011 faa7 	bl	e5f92 <_ZN6String6concatERKS_>
    tmp.concat("\"}\r\n\r\n");
   d4a44:	490a      	ldr	r1, [pc, #40]	; (d4a70 <_ZN10HttpHelper7setBodyE6StringS0_S0_+0x70>)
   d4a46:	4668      	mov	r0, sp
   d4a48:	f011 fab1 	bl	e5fae <_ZN6String6concatEPKc>
    httpRequest.body = tmp;
   d4a4c:	4669      	mov	r1, sp
   d4a4e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d4a52:	f011 fa2c 	bl	e5eae <_ZN6StringaSERKS_>
    String tmp = "{";
   d4a56:	4668      	mov	r0, sp
   d4a58:	f011 f9ad 	bl	e5db6 <_ZN6StringD1Ev>

}
   d4a5c:	b005      	add	sp, #20
   d4a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4a60:	000eb689 	.word	0x000eb689
   d4a64:	000eb68b 	.word	0x000eb68b
   d4a68:	000eb696 	.word	0x000eb696
   d4a6c:	000eb6a5 	.word	0x000eb6a5
   d4a70:	000eb6b9 	.word	0x000eb6b9

000d4a74 <_ZN10HttpHelper7setBodyEPh>:

void HttpHelper::setBody(uint8_t * body) {
   httpRequest.octetBody = body;
   d4a74:	64c1      	str	r1, [r0, #76]	; 0x4c
}
   d4a76:	4770      	bx	lr

000d4a78 <_ZN10HttpHelper16setContentLengthEm>:


void HttpHelper::setContentLength(uint32_t length) {
   d4a78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    httpRequest.length = String(length);
   d4a7a:	220a      	movs	r2, #10
void HttpHelper::setContentLength(uint32_t length) {
   d4a7c:	4604      	mov	r4, r0
    httpRequest.length = String(length);
   d4a7e:	4668      	mov	r0, sp
   d4a80:	f011 fa5c 	bl	e5f3c <_ZN6StringC1Emh>
   d4a84:	4669      	mov	r1, sp
   d4a86:	f104 0070 	add.w	r0, r4, #112	; 0x70
   d4a8a:	f011 fa2a 	bl	e5ee2 <_ZN6StringaSEOS_>
   d4a8e:	4668      	mov	r0, sp
   d4a90:	f011 f991 	bl	e5db6 <_ZN6StringD1Ev>
}
   d4a94:	b004      	add	sp, #16
   d4a96:	bd10      	pop	{r4, pc}

000d4a98 <_ZN10HttpHelper10setContentE6String>:


void HttpHelper::setContent(String content) {
    httpRequest.content = content;
   d4a98:	3050      	adds	r0, #80	; 0x50
   d4a9a:	f011 ba08 	b.w	e5eae <_ZN6StringaSERKS_>

000d4a9e <_ZN10HttpHelper6setKeyE6String>:
}

void HttpHelper::setKey(String key) {
    httpRequest.key = key;
   d4a9e:	3060      	adds	r0, #96	; 0x60
   d4aa0:	f011 ba05 	b.w	e5eae <_ZN6StringaSERKS_>

000d4aa4 <_ZN10HttpHelper9getStatusEv>:
   
    return  this->makeHeader().c_str();
}
int HttpHelper::getStatus() {
    return httpResponse.status;
}
   d4aa4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   d4aa8:	4770      	bx	lr

000d4aaa <_ZN10HttpHelper9getFaceIdEv>:

String HttpHelper::getBodyLength() {
    return String(httpRequest.body.length());  
}

String HttpHelper::getFaceId(){
   d4aaa:	b510      	push	{r4, lr}
    return httpResponse.faceId;
   d4aac:	319c      	adds	r1, #156	; 0x9c
String HttpHelper::getFaceId(){
   d4aae:	4604      	mov	r4, r0
    return httpResponse.faceId;
   d4ab0:	f011 fa0c 	bl	e5ecc <_ZN6StringC1ERKS_>
}
   d4ab4:	4620      	mov	r0, r4
   d4ab6:	bd10      	pop	{r4, pc}

000d4ab8 <_ZN10HttpHelper14getIsIdenticalEv>:

bool HttpHelper::getIsIdentical(){
    return httpResponse.isIdentical;
}
   d4ab8:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
   d4abc:	4770      	bx	lr
	...

000d4ac0 <_ZN10HttpHelper10makeHeaderEv>:

double HttpHelper::getConfidence(){
    return httpResponse.confidence;
}

String HttpHelper::makeHeader() {
   d4ac0:	b570      	push	{r4, r5, r6, lr}
   d4ac2:	460d      	mov	r5, r1
   d4ac4:	4604      	mov	r4, r0
    String tmp;
   d4ac6:	492f      	ldr	r1, [pc, #188]	; (d4b84 <_ZN10HttpHelper10makeHeaderEv+0xc4>)
   d4ac8:	f011 f9c0 	bl	e5e4c <_ZN6StringC1EPKc>
    tmp.concat(HTTP_METHOD_POST);
   d4acc:	6869      	ldr	r1, [r5, #4]
   d4ace:	4620      	mov	r0, r4
   d4ad0:	f011 fa6d 	bl	e5fae <_ZN6String6concatEPKc>
    tmp.concat(" ");
   d4ad4:	492c      	ldr	r1, [pc, #176]	; (d4b88 <_ZN10HttpHelper10makeHeaderEv+0xc8>)
   d4ad6:	4620      	mov	r0, r4
   d4ad8:	f011 fa69 	bl	e5fae <_ZN6String6concatEPKc>
    tmp.concat(httpRequest.path);
   d4adc:	f105 011c 	add.w	r1, r5, #28
   d4ae0:	4620      	mov	r0, r4
   d4ae2:	f011 fa56 	bl	e5f92 <_ZN6String6concatERKS_>
    tmp.concat(" HTTP/1.0");
   d4ae6:	4929      	ldr	r1, [pc, #164]	; (d4b8c <_ZN10HttpHelper10makeHeaderEv+0xcc>)
   d4ae8:	4620      	mov	r0, r4
   d4aea:	f011 fa60 	bl	e5fae <_ZN6String6concatEPKc>
    tmp.concat("\r\n");
   d4aee:	4928      	ldr	r1, [pc, #160]	; (d4b90 <_ZN10HttpHelper10makeHeaderEv+0xd0>)
   d4af0:	4620      	mov	r0, r4
   d4af2:	f011 fa5c 	bl	e5fae <_ZN6String6concatEPKc>
    tmp.concat("Ocp-Apim-Subscription-Key:");
   d4af6:	4927      	ldr	r1, [pc, #156]	; (d4b94 <_ZN10HttpHelper10makeHeaderEv+0xd4>)
   d4af8:	4620      	mov	r0, r4
   d4afa:	f011 fa58 	bl	e5fae <_ZN6String6concatEPKc>
    tmp.concat(httpRequest.key);
   d4afe:	f105 0160 	add.w	r1, r5, #96	; 0x60
   d4b02:	4620      	mov	r0, r4
   d4b04:	f011 fa45 	bl	e5f92 <_ZN6String6concatERKS_>
    tmp.concat("\r\n");
   d4b08:	4921      	ldr	r1, [pc, #132]	; (d4b90 <_ZN10HttpHelper10makeHeaderEv+0xd0>)
   d4b0a:	4620      	mov	r0, r4
   d4b0c:	f011 fa4f 	bl	e5fae <_ZN6String6concatEPKc>
    tmp.concat("Content-Type:");
    tmp.concat(httpRequest.content);
   d4b10:	f105 0650 	add.w	r6, r5, #80	; 0x50
    tmp.concat("Content-Type:");
   d4b14:	4920      	ldr	r1, [pc, #128]	; (d4b98 <_ZN10HttpHelper10makeHeaderEv+0xd8>)
   d4b16:	4620      	mov	r0, r4
   d4b18:	f011 fa49 	bl	e5fae <_ZN6String6concatEPKc>
    tmp.concat(httpRequest.content);
   d4b1c:	4631      	mov	r1, r6
   d4b1e:	4620      	mov	r0, r4
   d4b20:	f011 fa37 	bl	e5f92 <_ZN6String6concatERKS_>
    tmp.concat("\r\n");
   d4b24:	491a      	ldr	r1, [pc, #104]	; (d4b90 <_ZN10HttpHelper10makeHeaderEv+0xd0>)
   d4b26:	4620      	mov	r0, r4
   d4b28:	f011 fa41 	bl	e5fae <_ZN6String6concatEPKc>
    tmp.concat("Host:");
   d4b2c:	491b      	ldr	r1, [pc, #108]	; (d4b9c <_ZN10HttpHelper10makeHeaderEv+0xdc>)
   d4b2e:	4620      	mov	r0, r4
   d4b30:	f011 fa3d 	bl	e5fae <_ZN6String6concatEPKc>
    tmp.concat(httpRequest.host);
   d4b34:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   d4b38:	4620      	mov	r0, r4
   d4b3a:	f011 fa2a 	bl	e5f92 <_ZN6String6concatERKS_>
    tmp.concat("\r\n");
   d4b3e:	4914      	ldr	r1, [pc, #80]	; (d4b90 <_ZN10HttpHelper10makeHeaderEv+0xd0>)
   d4b40:	4620      	mov	r0, r4
   d4b42:	f011 fa34 	bl	e5fae <_ZN6String6concatEPKc>
    tmp.concat("Content-Length:");
   d4b46:	4916      	ldr	r1, [pc, #88]	; (d4ba0 <_ZN10HttpHelper10makeHeaderEv+0xe0>)
   d4b48:	4620      	mov	r0, r4
   d4b4a:	f011 fa30 	bl	e5fae <_ZN6String6concatEPKc>
    tmp.concat(httpRequest.length);
   d4b4e:	f105 0170 	add.w	r1, r5, #112	; 0x70
   d4b52:	4620      	mov	r0, r4
   d4b54:	f011 fa1d 	bl	e5f92 <_ZN6String6concatERKS_>
    tmp.concat("\r\n\r\n");
   d4b58:	4912      	ldr	r1, [pc, #72]	; (d4ba4 <_ZN10HttpHelper10makeHeaderEv+0xe4>)
   d4b5a:	4620      	mov	r0, r4
   d4b5c:	f011 fa27 	bl	e5fae <_ZN6String6concatEPKc>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   d4b60:	f105 01b8 	add.w	r1, r5, #184	; 0xb8
   d4b64:	4630      	mov	r0, r6
   d4b66:	f011 fa5a 	bl	e601e <_ZNK6String6equalsERKS_>
    if(httpRequest.content == HTTP_JSON) {
   d4b6a:	b140      	cbz	r0, d4b7e <_ZN10HttpHelper10makeHeaderEv+0xbe>
        tmp.concat(httpRequest.body);
   d4b6c:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   d4b70:	4620      	mov	r0, r4
   d4b72:	f011 fa0e 	bl	e5f92 <_ZN6String6concatERKS_>
        tmp.concat("\r\n\r\n");
   d4b76:	490b      	ldr	r1, [pc, #44]	; (d4ba4 <_ZN10HttpHelper10makeHeaderEv+0xe4>)
   d4b78:	4620      	mov	r0, r4
   d4b7a:	f011 fa18 	bl	e5fae <_ZN6String6concatEPKc>
    }
    return tmp;
}
   d4b7e:	4620      	mov	r0, r4
   d4b80:	bd70      	pop	{r4, r5, r6, pc}
   d4b82:	bf00      	nop
   d4b84:	000ebb9d 	.word	0x000ebb9d
   d4b88:	000edc0f 	.word	0x000edc0f
   d4b8c:	000eb6c0 	.word	0x000eb6c0
   d4b90:	000eb6bd 	.word	0x000eb6bd
   d4b94:	000eb6ca 	.word	0x000eb6ca
   d4b98:	000eb6e5 	.word	0x000eb6e5
   d4b9c:	000eb6f3 	.word	0x000eb6f3
   d4ba0:	000eb6f9 	.word	0x000eb6f9
   d4ba4:	000eb6bb 	.word	0x000eb6bb

000d4ba8 <_ZN10HttpHelper10makeDetectEv>:
const char * HttpHelper::makeDetect() {
   d4ba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4baa:	4601      	mov	r1, r0
    return  this->makeHeader().c_str();
   d4bac:	4668      	mov	r0, sp
   d4bae:	f7ff ff87 	bl	d4ac0 <_ZN10HttpHelper10makeHeaderEv>
   d4bb2:	4668      	mov	r0, sp
   d4bb4:	9c00      	ldr	r4, [sp, #0]
   d4bb6:	f011 f8fe 	bl	e5db6 <_ZN6StringD1Ev>
}
   d4bba:	4620      	mov	r0, r4
   d4bbc:	b004      	add	sp, #16
   d4bbe:	bd10      	pop	{r4, pc}

000d4bc0 <_ZN10HttpHelper10makeVerifyEv>:
const char * HttpHelper::makeVerify() {
   d4bc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return String(httpRequest.body.length());  
   d4bc2:	220a      	movs	r2, #10
const char * HttpHelper::makeVerify() {
   d4bc4:	4604      	mov	r4, r0
    return String(httpRequest.body.length());  
   d4bc6:	6c41      	ldr	r1, [r0, #68]	; 0x44
   d4bc8:	4668      	mov	r0, sp
   d4bca:	f011 f9a4 	bl	e5f16 <_ZN6StringC1Ejh>
    httpRequest.length = this->getBodyLength();
   d4bce:	4669      	mov	r1, sp
   d4bd0:	f104 0070 	add.w	r0, r4, #112	; 0x70
   d4bd4:	f011 f985 	bl	e5ee2 <_ZN6StringaSEOS_>
   d4bd8:	4668      	mov	r0, sp
   d4bda:	f011 f8ec 	bl	e5db6 <_ZN6StringD1Ev>
    return  this->makeHeader().c_str();
   d4bde:	4621      	mov	r1, r4
   d4be0:	4668      	mov	r0, sp
   d4be2:	f7ff ff6d 	bl	d4ac0 <_ZN10HttpHelper10makeHeaderEv>
   d4be6:	4668      	mov	r0, sp
   d4be8:	9c00      	ldr	r4, [sp, #0]
   d4bea:	f011 f8e4 	bl	e5db6 <_ZN6StringD1Ev>
}
   d4bee:	4620      	mov	r0, r4
   d4bf0:	b004      	add	sp, #16
   d4bf2:	bd10      	pop	{r4, pc}

000d4bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d4bf4:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d4bf6:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4bf8:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4bfa:	b17c      	cbz	r4, d4c1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4bfc:	6863      	ldr	r3, [r4, #4]
   d4bfe:	3b01      	subs	r3, #1
   d4c00:	6063      	str	r3, [r4, #4]
   d4c02:	b95b      	cbnz	r3, d4c1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4c04:	6823      	ldr	r3, [r4, #0]
   d4c06:	4620      	mov	r0, r4
   d4c08:	689b      	ldr	r3, [r3, #8]
   d4c0a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4c0c:	68a3      	ldr	r3, [r4, #8]
   d4c0e:	3b01      	subs	r3, #1
   d4c10:	60a3      	str	r3, [r4, #8]
   d4c12:	b91b      	cbnz	r3, d4c1c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4c14:	6823      	ldr	r3, [r4, #0]
   d4c16:	4620      	mov	r0, r4
   d4c18:	68db      	ldr	r3, [r3, #12]
   d4c1a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4c1c:	4628      	mov	r0, r5
   d4c1e:	bd38      	pop	{r3, r4, r5, pc}

000d4c20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4c20:	680b      	ldr	r3, [r1, #0]
   d4c22:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4c24:	b113      	cbz	r3, d4c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4c26:	685a      	ldr	r2, [r3, #4]
   d4c28:	3201      	adds	r2, #1
   d4c2a:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d4c2c:	4770      	bx	lr

000d4c2e <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d4c2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d4c30:	690d      	ldr	r5, [r1, #16]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4c32:	f851 3b04 	ldr.w	r3, [r1], #4
   d4c36:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d4c38:	4604      	mov	r4, r0
   d4c3a:	a801      	add	r0, sp, #4
   d4c3c:	f7ff fff0 	bl	d4c20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d4c40:	466a      	mov	r2, sp
   d4c42:	4629      	mov	r1, r5
   d4c44:	4620      	mov	r0, r4
   d4c46:	f012 fc01 	bl	e744c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4c4a:	a801      	add	r0, sp, #4
   d4c4c:	f7ff ffd2 	bl	d4bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4c50:	4620      	mov	r0, r4
   d4c52:	b003      	add	sp, #12
   d4c54:	bd30      	pop	{r4, r5, pc}

000d4c56 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d4c56:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d4c58:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4c5a:	f851 3b04 	ldr.w	r3, [r1], #4
   d4c5e:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d4c60:	4604      	mov	r4, r0
   d4c62:	a801      	add	r0, sp, #4
   d4c64:	f7ff ffdc 	bl	d4c20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d4c68:	466a      	mov	r2, sp
   d4c6a:	4629      	mov	r1, r5
   d4c6c:	4620      	mov	r0, r4
   d4c6e:	f012 fd93 	bl	e7798 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4c72:	a801      	add	r0, sp, #4
   d4c74:	f7ff ffbe 	bl	d4bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4c78:	4620      	mov	r0, r4
   d4c7a:	b003      	add	sp, #12
   d4c7c:	bd30      	pop	{r4, r5, pc}

000d4c7e <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d4c7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d4c80:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4c82:	f851 3b04 	ldr.w	r3, [r1], #4
   d4c86:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d4c88:	4604      	mov	r4, r0
   d4c8a:	a801      	add	r0, sp, #4
   d4c8c:	f7ff ffc8 	bl	d4c20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d4c90:	466a      	mov	r2, sp
   d4c92:	4629      	mov	r1, r5
   d4c94:	4620      	mov	r0, r4
   d4c96:	f012 fd5b 	bl	e7750 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4c9a:	a801      	add	r0, sp, #4
   d4c9c:	f7ff ffaa 	bl	d4bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4ca0:	4620      	mov	r0, r4
   d4ca2:	b003      	add	sp, #12
   d4ca4:	bd30      	pop	{r4, r5, pc}

000d4ca6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSEOS5_>:
	}
#pragma GCC diagnostic pop
#endif

      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
   d4ca6:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   d4ca8:	2300      	movs	r3, #0
      operator=(__shared_ptr&& __r) noexcept
   d4caa:	4604      	mov	r4, r0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4cac:	e9d1 0200 	ldrd	r0, r2, [r1]
	__r._M_ptr = 0;
   d4cb0:	e9c1 3300 	strd	r3, r3, [r1]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4cb4:	6823      	ldr	r3, [r4, #0]
   d4cb6:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4cb8:	6020      	str	r0, [r4, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4cba:	6863      	ldr	r3, [r4, #4]
	__r._M_pi = _M_pi;
   d4cbc:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
   d4cbe:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   d4cc0:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   d4cc2:	f7ff ff97 	bl	d4bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      {
	__shared_ptr(std::move(__r)).swap(*this);
	return *this;
      }
   d4cc6:	4620      	mov	r0, r4
   d4cc8:	b002      	add	sp, #8
   d4cca:	bd10      	pop	{r4, pc}

000d4ccc <_ZN10HttpHelper11setResponseEPcb>:

void HttpHelper::setResponse(char * respone, bool detect) { 
   d4ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    httpResponse.confidence = 0;
   d4cd0:	2300      	movs	r3, #0
void HttpHelper::setResponse(char * respone, bool detect) { 
   d4cd2:	4617      	mov	r7, r2
    httpResponse.faceId = "";
   d4cd4:	f100 069c 	add.w	r6, r0, #156	; 0x9c
    httpResponse.confidence = 0;
   d4cd8:	2200      	movs	r2, #0
   d4cda:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
void HttpHelper::setResponse(char * respone, bool detect) { 
   d4cde:	b0a3      	sub	sp, #140	; 0x8c
   d4ce0:	4604      	mov	r4, r0
   d4ce2:	460d      	mov	r5, r1
    httpResponse.faceId = "";
   d4ce4:	4630      	mov	r0, r6
   d4ce6:	49a1      	ldr	r1, [pc, #644]	; (d4f6c <_ZN10HttpHelper11setResponseEPcb+0x2a0>)
   d4ce8:	f011 f903 	bl	e5ef2 <_ZN6StringaSEPKc>
    httpResponse.isIdentical = false;
   d4cec:	f04f 0800 	mov.w	r8, #0
	: allocator_type(__a), _M_p(__dat) { }
   d4cf0:	ab12      	add	r3, sp, #72	; 0x48
   d4cf2:	f884 80ac 	strb.w	r8, [r4, #172]	; 0xac
   d4cf6:	9310      	str	r3, [sp, #64]	; 0x40
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   d4cf8:	2d00      	cmp	r5, #0
   d4cfa:	f000 8134 	beq.w	d4f66 <_ZN10HttpHelper11setResponseEPcb+0x29a>
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   d4cfe:	4628      	mov	r0, r5
   d4d00:	f014 f8ea 	bl	e8ed8 <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   d4d04:	280f      	cmp	r0, #15
   d4d06:	eb05 0900 	add.w	r9, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   d4d0a:	901c      	str	r0, [sp, #112]	; 0x70
	if (__dnew > size_type(_S_local_capacity))
   d4d0c:	d907      	bls.n	d4d1e <_ZN10HttpHelper11setResponseEPcb+0x52>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   d4d0e:	4642      	mov	r2, r8
   d4d10:	a91c      	add	r1, sp, #112	; 0x70
   d4d12:	a810      	add	r0, sp, #64	; 0x40
   d4d14:	f012 ff8c 	bl	e7c30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   d4d18:	9b1c      	ldr	r3, [sp, #112]	; 0x70
      { _M_dataplus._M_p = __p; }
   d4d1a:	9010      	str	r0, [sp, #64]	; 0x40
      { _M_allocated_capacity = __capacity; }
   d4d1c:	9312      	str	r3, [sp, #72]	; 0x48
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   d4d1e:	4629      	mov	r1, r5
   d4d20:	9810      	ldr	r0, [sp, #64]	; 0x40
   d4d22:	464a      	mov	r2, r9
   d4d24:	f012 ffc5 	bl	e7cb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   d4d28:	9b1c      	ldr	r3, [sp, #112]	; 0x70
      { __c1 = __c2; }
   d4d2a:	9a10      	ldr	r2, [sp, #64]	; 0x40
      { _M_string_length = __length; }
   d4d2c:	9311      	str	r3, [sp, #68]	; 0x44
   d4d2e:	2500      	movs	r5, #0
   d4d30:	54d5      	strb	r5, [r2, r3]
    
    std::string responeString(respone);

    //get http status as int
    httpResponse.status = atoi(responeString.substr(HTTP_PLACEMENT,HTTP_PLACEMENT+3).c_str()); 
   d4d32:	6962      	ldr	r2, [r4, #20]
   d4d34:	a910      	add	r1, sp, #64	; 0x40
   d4d36:	1cd3      	adds	r3, r2, #3
   d4d38:	a81c      	add	r0, sp, #112	; 0x70
   d4d3a:	f013 f86d 	bl	e7e18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
   d4d3e:	981c      	ldr	r0, [sp, #112]	; 0x70
   d4d40:	f013 ffd8 	bl	e8cf4 <atoi>
   d4d44:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      { _M_dispose(); }
   d4d48:	a81c      	add	r0, sp, #112	; 0x70
   d4d4a:	f012 ff93 	bl	e7c74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
    //get body
    httpResponse.body = responeString.substr((responeString.find("\r\n\r\n")+4));
   d4d4e:	4988      	ldr	r1, [pc, #544]	; (d4f70 <_ZN10HttpHelper11setResponseEPcb+0x2a4>)
   d4d50:	462a      	mov	r2, r5
   d4d52:	a810      	add	r0, sp, #64	; 0x40
   d4d54:	f013 f80b 	bl	e7d6e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
   d4d58:	f04f 33ff 	mov.w	r3, #4294967295
   d4d5c:	1d02      	adds	r2, r0, #4
   d4d5e:	a910      	add	r1, sp, #64	; 0x40
   d4d60:	a81c      	add	r0, sp, #112	; 0x70
   d4d62:	f013 f859 	bl	e7e18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
   d4d66:	a91c      	add	r1, sp, #112	; 0x70
   d4d68:	f104 0084 	add.w	r0, r4, #132	; 0x84
   d4d6c:	f012 ffa6 	bl	e7cbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
   d4d70:	a81c      	add	r0, sp, #112	; 0x70
   d4d72:	f012 ff7f 	bl	e7c74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
       *  This is a handle to internal data.  Do not modify or dire things may
       *  happen.
      */
      const _CharT*
      c_str() const _GLIBCXX_NOEXCEPT
      { return _M_data(); }
   d4d76:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    return parseCopy(json, strlen(json));
   d4d7a:	9101      	str	r1, [sp, #4]
   d4d7c:	4608      	mov	r0, r1
   d4d7e:	f014 f8ab 	bl	e8ed8 <strlen>
   d4d82:	9901      	ldr	r1, [sp, #4]
   d4d84:	4602      	mov	r2, r0
   d4d86:	a805      	add	r0, sp, #20
   d4d88:	f012 fd6c 	bl	e7864 <_ZN5spark9JSONValue9parseCopyEPKcj>
      constexpr __shared_count() noexcept : _M_pi(0)
   d4d8c:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
        n_(0) {
   d4d90:	e9cd 550d 	strd	r5, r5, [sp, #52]	; 0x34
   d4d94:	e9cd 5516 	strd	r5, r5, [sp, #88]	; 0x58
        n_(0) {
   d4d98:	e9cd 5518 	strd	r5, r5, [sp, #96]	; 0x60
   d4d9c:	e9cd 551a 	strd	r5, r5, [sp, #104]	; 0x68
        n_(0) {
   d4da0:	950f      	str	r5, [sp, #60]	; 0x3c

    JSONValue outerObj = JSONValue::parseCopy(httpResponse.body.c_str());
    JSONArrayIterator iter;
    JSONObjectIterator iterObj;
    if(detect) {
   d4da2:	2f00      	cmp	r7, #0
   d4da4:	d079      	beq.n	d4e9a <_ZN10HttpHelper11setResponseEPcb+0x1ce>
        JSONArrayIterator(value.t_, value.d_) {
   d4da6:	9d07      	ldr	r5, [sp, #28]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4da8:	9b05      	ldr	r3, [sp, #20]
   d4daa:	9308      	str	r3, [sp, #32]
   d4dac:	a906      	add	r1, sp, #24
   d4dae:	a809      	add	r0, sp, #36	; 0x24
   d4db0:	f7ff ff36 	bl	d4c20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4db4:	aa08      	add	r2, sp, #32
   d4db6:	4629      	mov	r1, r5
   d4db8:	a81c      	add	r0, sp, #112	; 0x70
   d4dba:	f012 fd18 	bl	e77ee <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4dbe:	a809      	add	r0, sp, #36	; 0x24
   d4dc0:	f7ff ff18 	bl	d4bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   d4dc4:	a91c      	add	r1, sp, #112	; 0x70
   d4dc6:	a80b      	add	r0, sp, #44	; 0x2c
   d4dc8:	f7ff ff6d 	bl	d4ca6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSEOS5_>
class JSONArrayIterator {
   d4dcc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   d4dce:	930d      	str	r3, [sp, #52]	; 0x34
   d4dd0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d4dd2:	930e      	str	r3, [sp, #56]	; 0x38
   d4dd4:	a81d      	add	r0, sp, #116	; 0x74
   d4dd6:	9b20      	ldr	r3, [sp, #128]	; 0x80
   d4dd8:	930f      	str	r3, [sp, #60]	; 0x3c
   d4dda:	f7ff ff0b 	bl	d4bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        iter = JSONArrayIterator(outerObj);
        iter.next();    // unpack array
   d4dde:	a80b      	add	r0, sp, #44	; 0x2c
   d4de0:	f012 fd1c 	bl	e781c <_ZN5spark17JSONArrayIterator4nextEv>
    return JSONValue(v_, d_);
   d4de4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4de6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d4de8:	931c      	str	r3, [sp, #112]	; 0x70
   d4dea:	a90c      	add	r1, sp, #48	; 0x30
   d4dec:	a81d      	add	r0, sp, #116	; 0x74
   d4dee:	f7ff ff17 	bl	d4c20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4df2:	aa1c      	add	r2, sp, #112	; 0x70
   d4df4:	4629      	mov	r1, r5
   d4df6:	a808      	add	r0, sp, #32
   d4df8:	f012 fb28 	bl	e744c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4dfc:	a81d      	add	r0, sp, #116	; 0x74
   d4dfe:	f7ff fef9 	bl	d4bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        iterObj = JSONObjectIterator(iter.value());
   d4e02:	a908      	add	r1, sp, #32
   d4e04:	a81c      	add	r0, sp, #112	; 0x70
   d4e06:	f7ff ff26 	bl	d4c56 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
   d4e0a:	a91c      	add	r1, sp, #112	; 0x70
   d4e0c:	a816      	add	r0, sp, #88	; 0x58
   d4e0e:	f7ff ff4a 	bl	d4ca6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSEOS5_>
class JSONObjectIterator {
   d4e12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   d4e14:	9318      	str	r3, [sp, #96]	; 0x60
   d4e16:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d4e18:	9319      	str	r3, [sp, #100]	; 0x64
   d4e1a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   d4e1c:	931a      	str	r3, [sp, #104]	; 0x68
   d4e1e:	a81d      	add	r0, sp, #116	; 0x74
   d4e20:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d4e22:	931b      	str	r3, [sp, #108]	; 0x6c
   d4e24:	f7ff fee6 	bl	d4bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e28:	a809      	add	r0, sp, #36	; 0x24
   d4e2a:	f7ff fee3 	bl	d4bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return strcmp(s_, str) == 0;
   d4e2e:	4f51      	ldr	r7, [pc, #324]	; (d4f74 <_ZN10HttpHelper11setResponseEPcb+0x2a8>)
   d4e30:	f8df 8148 	ldr.w	r8, [pc, #328]	; d4f7c <_ZN10HttpHelper11setResponseEPcb+0x2b0>
   d4e34:	f8df 9148 	ldr.w	r9, [pc, #328]	; d4f80 <_ZN10HttpHelper11setResponseEPcb+0x2b4>
    } else {
         iterObj  = JSONObjectIterator(outerObj);
    }
    while(iterObj.next()) {   // unpack objects
   d4e38:	a816      	add	r0, sp, #88	; 0x58
   d4e3a:	f012 fcc5 	bl	e77c8 <_ZN5spark18JSONObjectIterator4nextEv>
   d4e3e:	2800      	cmp	r0, #0
   d4e40:	d06a      	beq.n	d4f18 <_ZN10HttpHelper11setResponseEPcb+0x24c>
        if(iterObj.name() == "faceId") {
   d4e42:	a916      	add	r1, sp, #88	; 0x58
   d4e44:	a81c      	add	r0, sp, #112	; 0x70
   d4e46:	f7ff ff1a 	bl	d4c7e <_ZNK5spark18JSONObjectIterator4nameEv>
   d4e4a:	4639      	mov	r1, r7
   d4e4c:	981e      	ldr	r0, [sp, #120]	; 0x78
   d4e4e:	f014 f831 	bl	e8eb4 <strcmp>
   d4e52:	4605      	mov	r5, r0
   d4e54:	a81d      	add	r0, sp, #116	; 0x74
   d4e56:	f7ff fecd 	bl	d4bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            //blabla
            httpResponse.faceId = iterObj.value().toString().data();
   d4e5a:	a916      	add	r1, sp, #88	; 0x58
        if(iterObj.name() == "faceId") {
   d4e5c:	2d00      	cmp	r5, #0
   d4e5e:	d12e      	bne.n	d4ebe <_ZN10HttpHelper11setResponseEPcb+0x1f2>
            httpResponse.faceId = iterObj.value().toString().data();
   d4e60:	a808      	add	r0, sp, #32
   d4e62:	f7ff fee4 	bl	d4c2e <_ZNK5spark18JSONObjectIterator5valueEv>
    return JSONString(t_, d_);
   d4e66:	9d0a      	ldr	r5, [sp, #40]	; 0x28
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4e68:	9b08      	ldr	r3, [sp, #32]
   d4e6a:	9303      	str	r3, [sp, #12]
   d4e6c:	a909      	add	r1, sp, #36	; 0x24
   d4e6e:	a804      	add	r0, sp, #16
   d4e70:	f7ff fed6 	bl	d4c20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4e74:	aa03      	add	r2, sp, #12
   d4e76:	4629      	mov	r1, r5
   d4e78:	a81c      	add	r0, sp, #112	; 0x70
   d4e7a:	f012 fc69 	bl	e7750 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d4e7e:	a804      	add	r0, sp, #16
   d4e80:	f7ff feb8 	bl	d4bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e84:	991e      	ldr	r1, [sp, #120]	; 0x78
   d4e86:	4630      	mov	r0, r6
   d4e88:	f011 f833 	bl	e5ef2 <_ZN6StringaSEPKc>
   d4e8c:	a81d      	add	r0, sp, #116	; 0x74
   d4e8e:	f7ff feb1 	bl	d4bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e92:	a809      	add	r0, sp, #36	; 0x24
   d4e94:	f7ff feae 	bl	d4bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e98:	e7ce      	b.n	d4e38 <_ZN10HttpHelper11setResponseEPcb+0x16c>
         iterObj  = JSONObjectIterator(outerObj);
   d4e9a:	a905      	add	r1, sp, #20
   d4e9c:	a81c      	add	r0, sp, #112	; 0x70
   d4e9e:	f7ff feda 	bl	d4c56 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
   d4ea2:	a91c      	add	r1, sp, #112	; 0x70
   d4ea4:	a816      	add	r0, sp, #88	; 0x58
   d4ea6:	f7ff fefe 	bl	d4ca6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSEOS5_>
class JSONObjectIterator {
   d4eaa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   d4eac:	9318      	str	r3, [sp, #96]	; 0x60
   d4eae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d4eb0:	9319      	str	r3, [sp, #100]	; 0x64
   d4eb2:	9b20      	ldr	r3, [sp, #128]	; 0x80
   d4eb4:	931a      	str	r3, [sp, #104]	; 0x68
   d4eb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d4eb8:	931b      	str	r3, [sp, #108]	; 0x6c
   d4eba:	a81d      	add	r0, sp, #116	; 0x74
   d4ebc:	e7b5      	b.n	d4e2a <_ZN10HttpHelper11setResponseEPcb+0x15e>
            
        } else if (iterObj.name() == "isIdentical") {
   d4ebe:	a81c      	add	r0, sp, #112	; 0x70
   d4ec0:	f7ff fedd 	bl	d4c7e <_ZNK5spark18JSONObjectIterator4nameEv>
    return strcmp(s_, str) == 0;
   d4ec4:	4641      	mov	r1, r8
   d4ec6:	981e      	ldr	r0, [sp, #120]	; 0x78
   d4ec8:	f013 fff4 	bl	e8eb4 <strcmp>
   d4ecc:	4605      	mov	r5, r0
   d4ece:	a81d      	add	r0, sp, #116	; 0x74
   d4ed0:	f7ff fe90 	bl	d4bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            httpResponse.isIdentical = iterObj.value().toBool();
   d4ed4:	a916      	add	r1, sp, #88	; 0x58
   d4ed6:	a81c      	add	r0, sp, #112	; 0x70
        } else if (iterObj.name() == "isIdentical") {
   d4ed8:	b945      	cbnz	r5, d4eec <_ZN10HttpHelper11setResponseEPcb+0x220>
            httpResponse.isIdentical = iterObj.value().toBool();
   d4eda:	f7ff fea8 	bl	d4c2e <_ZNK5spark18JSONObjectIterator5valueEv>
   d4ede:	a81c      	add	r0, sp, #112	; 0x70
   d4ee0:	f012 faea 	bl	e74b8 <_ZNK5spark9JSONValue6toBoolEv>
   d4ee4:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
   d4ee8:	a81d      	add	r0, sp, #116	; 0x74
   d4eea:	e7d3      	b.n	d4e94 <_ZN10HttpHelper11setResponseEPcb+0x1c8>

        } else if (iterObj.name() == "confidence"){
   d4eec:	f7ff fec7 	bl	d4c7e <_ZNK5spark18JSONObjectIterator4nameEv>
   d4ef0:	981e      	ldr	r0, [sp, #120]	; 0x78
   d4ef2:	4649      	mov	r1, r9
   d4ef4:	f013 ffde 	bl	e8eb4 <strcmp>
   d4ef8:	4605      	mov	r5, r0
   d4efa:	a81d      	add	r0, sp, #116	; 0x74
   d4efc:	f7ff fe7a 	bl	d4bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f00:	2d00      	cmp	r5, #0
   d4f02:	d199      	bne.n	d4e38 <_ZN10HttpHelper11setResponseEPcb+0x16c>
            httpResponse.confidence = iterObj.value().toDouble();
   d4f04:	a916      	add	r1, sp, #88	; 0x58
   d4f06:	a81c      	add	r0, sp, #112	; 0x70
   d4f08:	f7ff fe91 	bl	d4c2e <_ZNK5spark18JSONObjectIterator5valueEv>
   d4f0c:	a81c      	add	r0, sp, #112	; 0x70
   d4f0e:	f012 fb13 	bl	e7538 <_ZNK5spark9JSONValue8toDoubleEv>
   d4f12:	ed84 0b2c 	vstr	d0, [r4, #176]	; 0xb0
   d4f16:	e7e7      	b.n	d4ee8 <_ZN10HttpHelper11setResponseEPcb+0x21c>
            //error
        }
        
    }

    Serial.println(httpResponse.faceId);
   d4f18:	f011 fdae 	bl	e6a78 <_Z16_fetch_usbserialv>
   d4f1c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
   d4f20:	f011 f909 	bl	e6136 <_ZN5Print7printlnEPKc>
    Serial.println(httpResponse.isIdentical);
   d4f24:	f011 fda8 	bl	e6a78 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4f28:	220a      	movs	r2, #10
   d4f2a:	f894 10ac 	ldrb.w	r1, [r4, #172]	; 0xac
   d4f2e:	4605      	mov	r5, r0
   d4f30:	f011 f90b 	bl	e614a <_ZN5Print11printNumberEmh>
        n += println();
   d4f34:	4628      	mov	r0, r5
   d4f36:	f011 f8f2 	bl	e611e <_ZN5Print7printlnEv>
    Serial.println(httpResponse.confidence);
   d4f3a:	f011 fd9d 	bl	e6a78 <_Z16_fetch_usbserialv>
   d4f3e:	ed94 0b2c 	vldr	d0, [r4, #176]	; 0xb0
   d4f42:	2102      	movs	r1, #2
   d4f44:	f011 f9e8 	bl	e6318 <_ZN5Print7printlnEdi>
   d4f48:	a817      	add	r0, sp, #92	; 0x5c
   d4f4a:	f7ff fe53 	bl	d4bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f4e:	a80c      	add	r0, sp, #48	; 0x30
   d4f50:	f7ff fe50 	bl	d4bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f54:	a806      	add	r0, sp, #24
   d4f56:	f7ff fe4d 	bl	d4bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      { _M_dispose(); }
   d4f5a:	a810      	add	r0, sp, #64	; 0x40
   d4f5c:	f012 fe8a 	bl	e7c74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
}
   d4f60:	b023      	add	sp, #140	; 0x8c
   d4f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	  std::__throw_logic_error(__N("basic_string::"
   d4f66:	4804      	ldr	r0, [pc, #16]	; (d4f78 <_ZN10HttpHelper11setResponseEPcb+0x2ac>)
   d4f68:	f012 fd96 	bl	e7a98 <_ZSt19__throw_logic_errorPKc>
   d4f6c:	000ebb9d 	.word	0x000ebb9d
   d4f70:	000eb6bb 	.word	0x000eb6bb
   d4f74:	000eb709 	.word	0x000eb709
   d4f78:	000eb727 	.word	0x000eb727
   d4f7c:	000eb710 	.word	0x000eb710
   d4f80:	000eb71c 	.word	0x000eb71c

000d4f84 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d4f84:	b538      	push	{r3, r4, r5, lr}
   d4f86:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d4f88:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d4f8a:	b128      	cbz	r0, d4f98 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d4f8c:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d4f8e:	210c      	movs	r1, #12
   d4f90:	f012 fd79 	bl	e7a86 <_ZdlPvj>
            wakeupSource = next;
   d4f94:	4628      	mov	r0, r5
        while (wakeupSource) {
   d4f96:	e7f8      	b.n	d4f8a <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d4f98:	4620      	mov	r0, r4
   d4f9a:	bd38      	pop	{r3, r4, r5, pc}

000d4f9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4f9c:	b510      	push	{r4, lr}
          _M_dispose();
   d4f9e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4fa0:	4604      	mov	r4, r0
          _M_dispose();
   d4fa2:	689b      	ldr	r3, [r3, #8]
   d4fa4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4fa6:	68a3      	ldr	r3, [r4, #8]
   d4fa8:	3b01      	subs	r3, #1
   d4faa:	60a3      	str	r3, [r4, #8]
   d4fac:	b92b      	cbnz	r3, d4fba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4fae:	6823      	ldr	r3, [r4, #0]
   d4fb0:	4620      	mov	r0, r4
   d4fb2:	68db      	ldr	r3, [r3, #12]
    }
   d4fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d4fb8:	4718      	bx	r3
    }
   d4fba:	bd10      	pop	{r4, pc}

000d4fbc <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
   d4fbc:	b510      	push	{r4, lr}
   d4fbe:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
   d4fc0:	6800      	ldr	r0, [r0, #0]
	if (__p)
   d4fc2:	b108      	cbz	r0, d4fc8 <_ZNSt6vectorIhSaIhEED1Ev+0xc>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d4fc4:	f7ff f86b 	bl	d409e <_ZdlPv>
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
   d4fc8:	4620      	mov	r0, r4
   d4fca:	bd10      	pop	{r4, pc}

000d4fcc <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4fcc:	b510      	push	{r4, lr}
   d4fce:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4fd0:	6800      	ldr	r0, [r0, #0]
   d4fd2:	b108      	cbz	r0, d4fd8 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4fd4:	f010 fce8 	bl	e59a8 <free>
class SystemClass {
   d4fd8:	4620      	mov	r0, r4
   d4fda:	bd10      	pop	{r4, pc}

000d4fdc <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E.isra.0>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
   d4fdc:	b510      	push	{r4, lr}
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d4fde:	1a0c      	subs	r4, r1, r0
   d4fe0:	4613      	mov	r3, r2
   d4fe2:	d005      	beq.n	d4ff0 <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E.isra.0+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d4fe4:	4601      	mov	r1, r0
   d4fe6:	4622      	mov	r2, r4
   d4fe8:	4618      	mov	r0, r3
   d4fea:	f013 ff0d 	bl	e8e08 <memmove>
   d4fee:	4603      	mov	r3, r0
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
   d4ff0:	1918      	adds	r0, r3, r4
   d4ff2:	bd10      	pop	{r4, pc}

000d4ff4 <_ZN9TCPClientD1Ev>:
   d4ff4:	b510      	push	{r4, lr}
   d4ff6:	4b06      	ldr	r3, [pc, #24]	; (d5010 <_ZN9TCPClientD1Ev+0x1c>)
   d4ff8:	6003      	str	r3, [r0, #0]
   d4ffa:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d4ffc:	6980      	ldr	r0, [r0, #24]
   d4ffe:	b128      	cbz	r0, d500c <_ZN9TCPClientD1Ev+0x18>
      if (--_M_use_count == 0)
   d5000:	6843      	ldr	r3, [r0, #4]
   d5002:	3b01      	subs	r3, #1
   d5004:	6043      	str	r3, [r0, #4]
   d5006:	b90b      	cbnz	r3, d500c <_ZN9TCPClientD1Ev+0x18>
   d5008:	f7ff ffc8 	bl	d4f9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
   d500c:	4620      	mov	r0, r4
   d500e:	bd10      	pop	{r4, pc}
   d5010:	000edab8 	.word	0x000edab8

000d5014 <_ZN9TCPServerD1Ev>:
    sock_handle_t _sock;
    TCPClient _client;

public:
    TCPServer(uint16_t, network_interface_t nif=0);
    ~TCPServer() { stop(); }
   d5014:	b538      	push	{r3, r4, r5, lr}
   d5016:	4605      	mov	r5, r0
   d5018:	4b05      	ldr	r3, [pc, #20]	; (d5030 <_ZN9TCPServerD1Ev+0x1c>)
   d501a:	f845 3b14 	str.w	r3, [r5], #20
   d501e:	4604      	mov	r4, r0
   d5020:	f011 fa7a 	bl	e6518 <_ZN9TCPServer4stopEv>
   d5024:	4628      	mov	r0, r5
   d5026:	f7ff ffe5 	bl	d4ff4 <_ZN9TCPClientD1Ev>
   d502a:	4620      	mov	r0, r4
   d502c:	bd38      	pop	{r3, r4, r5, pc}
   d502e:	bf00      	nop
   d5030:	000ed9cc 	.word	0x000ed9cc

000d5034 <_ZN9TCPClientD0Ev>:
   d5034:	b510      	push	{r4, lr}
   d5036:	4604      	mov	r4, r0
   d5038:	f7ff ffdc 	bl	d4ff4 <_ZN9TCPClientD1Ev>
   d503c:	4620      	mov	r0, r4
   d503e:	211c      	movs	r1, #28
   d5040:	f012 fd21 	bl	e7a86 <_ZdlPvj>
   d5044:	4620      	mov	r0, r4
   d5046:	bd10      	pop	{r4, pc}

000d5048 <_ZN9TCPServerD0Ev>:
   d5048:	b510      	push	{r4, lr}
   d504a:	4604      	mov	r4, r0
   d504c:	f7ff ffe2 	bl	d5014 <_ZN9TCPServerD1Ev>
   d5050:	4620      	mov	r0, r4
   d5052:	2130      	movs	r1, #48	; 0x30
   d5054:	f012 fd17 	bl	e7a86 <_ZdlPvj>
   d5058:	4620      	mov	r0, r4
   d505a:	bd10      	pop	{r4, pc}

000d505c <setup>:
SystemSleepConfiguration sleepcfg;
String clientIP;

bool camLoop();

void setup() {
   d505c:	b538      	push	{r3, r4, r5, lr}
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d505e:	4c3b      	ldr	r4, [pc, #236]	; (d514c <setup+0xf0>)
   d5060:	2300      	movs	r3, #0
   d5062:	461a      	mov	r2, r3
   d5064:	4619      	mov	r1, r3
   d5066:	6860      	ldr	r0, [r4, #4]
   d5068:	f010 fc4e 	bl	e5908 <network_on>
        network_connect(*this, flags, 0, NULL);
   d506c:	2300      	movs	r3, #0
   d506e:	6860      	ldr	r0, [r4, #4]
   d5070:	461a      	mov	r2, r3
   d5072:	4619      	mov	r1, r3
   d5074:	f010 fc28 	bl	e58c8 <network_connect>
        return network_connecting(*this, 0, NULL);
   d5078:	2200      	movs	r2, #0
   d507a:	6860      	ldr	r0, [r4, #4]
   d507c:	4611      	mov	r1, r2
   d507e:	f010 fc2b 	bl	e58d8 <network_connecting>
    WiFi.on();
    WiFi.connect();
    while(WiFi.connecting());
   d5082:	2800      	cmp	r0, #0
   d5084:	d1f8      	bne.n	d5078 <setup+0x1c>
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   d5086:	4c32      	ldr	r4, [pc, #200]	; (d5150 <setup+0xf4>)
    delay(2000);    // was here--------------------------------
   d5088:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d508c:	f011 f994 	bl	e63b8 <delay>
   d5090:	7d23      	ldrb	r3, [r4, #20]
   d5092:	b1eb      	cbz	r3, d50d0 <setup+0x74>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d5094:	2302      	movs	r3, #2
   d5096:	7223      	strb	r3, [r4, #8]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d5098:	6823      	ldr	r3, [r4, #0]
   d509a:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d509c:	b123      	cbz	r3, d50a8 <setup+0x4c>
            if (start->type == type) {
   d509e:	889a      	ldrh	r2, [r3, #4]
   d50a0:	2a04      	cmp	r2, #4
   d50a2:	d050      	beq.n	d5146 <setup+0xea>
            start = start->next;
   d50a4:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d50a6:	e7f9      	b.n	d509c <setup+0x40>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d50a8:	492a      	ldr	r1, [pc, #168]	; (d5154 <setup+0xf8>)
   d50aa:	2010      	movs	r0, #16
   d50ac:	f012 fced 	bl	e7a8a <_ZnwjRKSt9nothrow_t>
   d50b0:	4605      	mov	r5, r0
   d50b2:	2800      	cmp	r0, #0
   d50b4:	d045      	beq.n	d5142 <setup+0xe6>
   d50b6:	2210      	movs	r2, #16
   d50b8:	2100      	movs	r1, #0
   d50ba:	f013 febf 	bl	e8e3c <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d50be:	4b26      	ldr	r3, [pc, #152]	; (d5158 <setup+0xfc>)
   d50c0:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d50c2:	2304      	movs	r3, #4
   d50c4:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d50c6:	6923      	ldr	r3, [r4, #16]
   d50c8:	60ab      	str	r3, [r5, #8]
            wakeupSource->ms = ms;
   d50ca:	4b24      	ldr	r3, [pc, #144]	; (d515c <setup+0x100>)
   d50cc:	60eb      	str	r3, [r5, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d50ce:	6125      	str	r5, [r4, #16]
        }
        return *this;
    }

    SystemSleepConfiguration& network(network_interface_t netif, EnumFlags<SystemSleepNetworkFlag> flags = SystemSleepNetworkFlag::NONE) {
        if (valid_) {
   d50d0:	7d23      	ldrb	r3, [r4, #20]
   d50d2:	b32b      	cbz	r3, d5120 <setup+0xc4>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d50d4:	6823      	ldr	r3, [r4, #0]
   d50d6:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d50d8:	b16b      	cbz	r3, d50f6 <setup+0x9a>
            if (start->type == type) {
   d50da:	889a      	ldrh	r2, [r3, #4]
   d50dc:	2a0e      	cmp	r2, #14
   d50de:	d001      	beq.n	d50e4 <setup+0x88>
            start = start->next;
   d50e0:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d50e2:	e7f9      	b.n	d50d8 <setup+0x7c>
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK);
            while (wakeup) {
                auto networkWakeup = reinterpret_cast<hal_wakeup_source_network_t*>(wakeup);
                if (networkWakeup->index == netif) {
   d50e4:	7b1a      	ldrb	r2, [r3, #12]
   d50e6:	2a04      	cmp	r2, #4
   d50e8:	d01a      	beq.n	d5120 <setup+0xc4>
                    if (networkWakeup->flags != flags.value()) {
                        networkWakeup->flags |= flags.value();
                    }
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK, wakeup->next);
   d50ea:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d50ec:	b11b      	cbz	r3, d50f6 <setup+0x9a>
            if (start->type == type) {
   d50ee:	889a      	ldrh	r2, [r3, #4]
   d50f0:	2a0e      	cmp	r2, #14
   d50f2:	d1fa      	bne.n	d50ea <setup+0x8e>
   d50f4:	e7f6      	b.n	d50e4 <setup+0x88>
            }
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_network_t();
   d50f6:	4917      	ldr	r1, [pc, #92]	; (d5154 <setup+0xf8>)
   d50f8:	2014      	movs	r0, #20
   d50fa:	f012 fcc6 	bl	e7a8a <_ZnwjRKSt9nothrow_t>
   d50fe:	4605      	mov	r5, r0
   d5100:	b1e8      	cbz	r0, d513e <setup+0xe2>
   d5102:	2214      	movs	r2, #20
   d5104:	2100      	movs	r1, #0
   d5106:	f013 fe99 	bl	e8e3c <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d510a:	4b13      	ldr	r3, [pc, #76]	; (d5158 <setup+0xfc>)
   d510c:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_NETWORK;
   d510e:	230e      	movs	r3, #14
   d5110:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d5112:	6923      	ldr	r3, [r4, #16]
   d5114:	60ab      	str	r3, [r5, #8]
            wakeupSource->index = static_cast<network_interface_index>(netif);
   d5116:	2304      	movs	r3, #4
   d5118:	732b      	strb	r3, [r5, #12]
            wakeupSource->flags = flags.value();
   d511a:	2300      	movs	r3, #0
   d511c:	81eb      	strh	r3, [r5, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d511e:	6125      	str	r5, [r4, #16]
#if DEBUG_AZURE == 1
    Serial.begin(115200);
    Serial.println(Time.timeStr());
    Serial.println(WiFi.localIP().toString());
#endif
    hw.setup();
   d5120:	480f      	ldr	r0, [pc, #60]	; (d5160 <setup+0x104>)
   d5122:	f7ff f9bd 	bl	d44a0 <_ZN17HardwareInterface5setupEv>
    client.setup();
   d5126:	480f      	ldr	r0, [pc, #60]	; (d5164 <setup+0x108>)
   d5128:	f7ff f852 	bl	d41d0 <_ZN16TlsClientHandler5setupEv>
    server.begin();
   d512c:	480e      	ldr	r0, [pc, #56]	; (d5168 <setup+0x10c>)
   d512e:	f011 f9ff 	bl	e6530 <_ZN9TCPServer5beginEv>
    hw.openLock(0);
}
   d5132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    hw.openLock(0);
   d5136:	480a      	ldr	r0, [pc, #40]	; (d5160 <setup+0x104>)
   d5138:	2100      	movs	r1, #0
   d513a:	f7ff b9cd 	b.w	d44d8 <_ZN17HardwareInterface8openLockEi>
                valid_ = false;
   d513e:	7520      	strb	r0, [r4, #20]
                return *this;
   d5140:	e7ee      	b.n	d5120 <setup+0xc4>
                valid_ = false;
   d5142:	7520      	strb	r0, [r4, #20]
                return *this;
   d5144:	e7c4      	b.n	d50d0 <setup+0x74>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d5146:	4a05      	ldr	r2, [pc, #20]	; (d515c <setup+0x100>)
   d5148:	60da      	str	r2, [r3, #12]
                return *this;
   d514a:	e7c1      	b.n	d50d0 <setup+0x74>
   d514c:	2003e7b4 	.word	0x2003e7b4
   d5150:	2003c3a8 	.word	0x2003c3a8
   d5154:	000edb84 	.word	0x000edb84
   d5158:	00030010 	.word	0x00030010
   d515c:	000927c0 	.word	0x000927c0
   d5160:	2003c348 	.word	0x2003c348
   d5164:	2003ae40 	.word	0x2003ae40
   d5168:	2003c378 	.word	0x2003c378

000d516c <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag>:
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
		      _ForwardIterator __last, std::forward_iterator_tag)
      {
	if (__first != __last)
   d516c:	429a      	cmp	r2, r3
      vector<_Tp, _Alloc>::
   d516e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5172:	460e      	mov	r6, r1
   d5174:	4605      	mov	r5, r0
   d5176:	4690      	mov	r8, r2
   d5178:	4619      	mov	r1, r3
	if (__first != __last)
   d517a:	d073      	beq.n	d5264 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xf8>
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d517c:	1a9f      	subs	r7, r3, r2
	  {
	    const size_type __n = std::distance(__first, __last);
	    if (size_type(this->_M_impl._M_end_of_storage
			  - this->_M_impl._M_finish) >= __n)
   d517e:	e9d0 4201 	ldrd	r4, r2, [r0, #4]
   d5182:	1b12      	subs	r2, r2, r4
	    if (size_type(this->_M_impl._M_end_of_storage
   d5184:	42ba      	cmp	r2, r7
   d5186:	d331      	bcc.n	d51ec <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x80>
  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   d5188:	eba4 0906 	sub.w	r9, r4, r6
	      {
		const size_type __elems_after = end() - __position;
		pointer __old_finish(this->_M_impl._M_finish);
		if (__elems_after > __n)
   d518c:	454f      	cmp	r7, r9
   d518e:	d217      	bcs.n	d51c0 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x54>
		  {
		    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
   d5190:	eba4 0907 	sub.w	r9, r4, r7
   d5194:	4622      	mov	r2, r4
   d5196:	4621      	mov	r1, r4
   d5198:	4648      	mov	r0, r9
   d519a:	f7ff ff1f 	bl	d4fdc <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E.isra.0>
						this->_M_impl._M_finish,
						this->_M_impl._M_finish,
						_M_get_Tp_allocator());
		    this->_M_impl._M_finish += __n;
   d519e:	686b      	ldr	r3, [r5, #4]
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d51a0:	ebb9 0206 	subs.w	r2, r9, r6
   d51a4:	443b      	add	r3, r7
   d51a6:	606b      	str	r3, [r5, #4]
   d51a8:	d003      	beq.n	d51b2 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x46>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d51aa:	4631      	mov	r1, r6
   d51ac:	1aa0      	subs	r0, r4, r2
   d51ae:	f013 fe2b 	bl	e8e08 <memmove>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d51b2:	463a      	mov	r2, r7
   d51b4:	4641      	mov	r1, r8
   d51b6:	4630      	mov	r0, r6
		this->_M_impl._M_start = __new_start;
		this->_M_impl._M_finish = __new_finish;
		this->_M_impl._M_end_of_storage = __new_start + __len;
	      }
	  }
      }
   d51b8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d51bc:	f013 be24 	b.w	e8e08 <memmove>
		    std::__uninitialized_copy_a(__mid, __last,
   d51c0:	4622      	mov	r2, r4
   d51c2:	eb08 0009 	add.w	r0, r8, r9
   d51c6:	f7ff ff09 	bl	d4fdc <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E.isra.0>
		    this->_M_impl._M_finish += __n - __elems_after;
   d51ca:	686a      	ldr	r2, [r5, #4]
   d51cc:	eba7 0709 	sub.w	r7, r7, r9
   d51d0:	443a      	add	r2, r7
   d51d2:	606a      	str	r2, [r5, #4]
		    std::__uninitialized_move_a(__position.base(),
   d51d4:	4621      	mov	r1, r4
   d51d6:	4630      	mov	r0, r6
   d51d8:	f7ff ff00 	bl	d4fdc <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E.isra.0>
		    this->_M_impl._M_finish += __elems_after;
   d51dc:	686b      	ldr	r3, [r5, #4]
   d51de:	444b      	add	r3, r9
   d51e0:	606b      	str	r3, [r5, #4]
	  if (_Num)
   d51e2:	f1b9 0f00 	cmp.w	r9, #0
   d51e6:	d03d      	beq.n	d5264 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xf8>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d51e8:	464a      	mov	r2, r9
   d51ea:	e7e3      	b.n	d51b4 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x48>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d51ec:	6803      	ldr	r3, [r0, #0]
   d51ee:	1ae4      	subs	r4, r4, r3

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   d51f0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d51f4:	1b1a      	subs	r2, r3, r4
   d51f6:	4297      	cmp	r7, r2
   d51f8:	d902      	bls.n	d5200 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x94>
	  __throw_length_error(__N(__s));
   d51fa:	481d      	ldr	r0, [pc, #116]	; (d5270 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x104>)
   d51fc:	f012 fc4f 	bl	e7a9e <_ZSt20__throw_length_errorPKc>
   d5200:	42a7      	cmp	r7, r4
   d5202:	463a      	mov	r2, r7
   d5204:	bf38      	it	cc
   d5206:	4622      	movcc	r2, r4
   d5208:	18a4      	adds	r4, r4, r2

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d520a:	d22d      	bcs.n	d5268 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xfc>
   d520c:	2c00      	cmp	r4, #0
   d520e:	db2b      	blt.n	d5268 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xfc>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d5210:	d02c      	beq.n	d526c <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x100>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5212:	4620      	mov	r0, r4
   d5214:	f7fe ff3f 	bl	d4096 <_Znwj>
   d5218:	4681      	mov	r9, r0
		      (this->_M_impl._M_start, __position.base(),
   d521a:	f8d5 a000 	ldr.w	sl, [r5]
	  if (_Num)
   d521e:	ebb6 0b0a 	subs.w	fp, r6, sl
   d5222:	d004      	beq.n	d522e <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xc2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d5224:	465a      	mov	r2, fp
   d5226:	4651      	mov	r1, sl
   d5228:	4648      	mov	r0, r9
   d522a:	f013 fded 	bl	e8e08 <memmove>
	  return __result + _Num;
   d522e:	44cb      	add	fp, r9
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d5230:	463a      	mov	r2, r7
   d5232:	4641      	mov	r1, r8
   d5234:	4658      	mov	r0, fp
   d5236:	f013 fdd9 	bl	e8dec <memcpy>
	  const ptrdiff_t _Num = __last - __first;
   d523a:	686a      	ldr	r2, [r5, #4]
	  if (_Num)
   d523c:	ebb2 0806 	subs.w	r8, r2, r6
	  return __result + _Num;
   d5240:	445f      	add	r7, fp
	  if (_Num)
   d5242:	d004      	beq.n	d524e <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xe2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d5244:	4642      	mov	r2, r8
   d5246:	4631      	mov	r1, r6
   d5248:	4638      	mov	r0, r7
   d524a:	f013 fdcf 	bl	e8dec <memcpy>
	  return __result + _Num;
   d524e:	4447      	add	r7, r8
	if (__p)
   d5250:	f1ba 0f00 	cmp.w	sl, #0
   d5254:	d002      	beq.n	d525c <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xf0>
	::operator delete(__p);
   d5256:	4650      	mov	r0, sl
   d5258:	f7fe ff21 	bl	d409e <_ZdlPv>
		this->_M_impl._M_finish = __new_finish;
   d525c:	e9c5 9700 	strd	r9, r7, [r5]
		this->_M_impl._M_end_of_storage = __new_start + __len;
   d5260:	444c      	add	r4, r9
   d5262:	60ac      	str	r4, [r5, #8]
      }
   d5264:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d5268:	461c      	mov	r4, r3
   d526a:	e7d2      	b.n	d5212 <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xa6>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d526c:	46a1      	mov	r9, r4
   d526e:	e7d4      	b.n	d521a <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xae>
   d5270:	000eb751 	.word	0x000eb751

000d5274 <_Z7camLoopv>:
#if DEBUG_AZURE == 0
  System.sleep(sleepcfg);
#endif
}

bool camLoop() {
   d5274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	  _M_start = __x._M_start;
   d5278:	4f3e      	ldr	r7, [pc, #248]	; (d5374 <_Z7camLoopv+0x100>)
    buffersize = 0; 
    totalSize = 0;
   d527a:	493f      	ldr	r1, [pc, #252]	; (d5378 <_Z7camLoopv+0x104>)
    buffersize = 0; 
   d527c:	4d3f      	ldr	r5, [pc, #252]	; (d537c <_Z7camLoopv+0x108>)
   d527e:	6838      	ldr	r0, [r7, #0]
   d5280:	2200      	movs	r2, #0
	  _M_finish = __x._M_finish;
   d5282:	e9c7 2200 	strd	r2, r2, [r7]
bool camLoop() {
   d5286:	b08e      	sub	sp, #56	; 0x38
    buffersize = 0; 
   d5288:	602a      	str	r2, [r5, #0]
    totalSize = 0;
   d528a:	600a      	str	r2, [r1, #0]
	  _M_end_of_storage = __x._M_end_of_storage;
   d528c:	60ba      	str	r2, [r7, #8]
      _M_deallocate(pointer __p, size_t __n)
   d528e:	4688      	mov	r8, r1
	if (__p)
   d5290:	b108      	cbz	r0, d5296 <_Z7camLoopv+0x22>
   d5292:	f7fe ff04 	bl	d409e <_ZdlPv>
class Print
   d5296:	4c3a      	ldr	r4, [pc, #232]	; (d5380 <_Z7camLoopv+0x10c>)
    std::vector<uint8_t>().swap(imgVector);
    tcpClient = server.available();
   d5298:	493a      	ldr	r1, [pc, #232]	; (d5384 <_Z7camLoopv+0x110>)
   d529a:	a807      	add	r0, sp, #28
   d529c:	f011 f9fe 	bl	e669c <_ZN9TCPServer9availableEv>
   d52a0:	9a08      	ldr	r2, [sp, #32]
   d52a2:	6062      	str	r2, [r4, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d52a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d52a6:	60a2      	str	r2, [r4, #8]
   d52a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d52aa:	60e2      	str	r2, [r4, #12]
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d52ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d52ae:	6122      	str	r2, [r4, #16]
    class __shared_ptr
   d52b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   d52b2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   d52b4:	6162      	str	r2, [r4, #20]
	if (__tmp != _M_pi)
   d52b6:	69a2      	ldr	r2, [r4, #24]
   d52b8:	4296      	cmp	r6, r2
   d52ba:	d00c      	beq.n	d52d6 <_Z7camLoopv+0x62>
	    if (__tmp != 0)
   d52bc:	b116      	cbz	r6, d52c4 <_Z7camLoopv+0x50>
    { ++_M_use_count; }
   d52be:	6873      	ldr	r3, [r6, #4]
   d52c0:	3301      	adds	r3, #1
   d52c2:	6073      	str	r3, [r6, #4]
	    if (_M_pi != 0)
   d52c4:	69a0      	ldr	r0, [r4, #24]
   d52c6:	b128      	cbz	r0, d52d4 <_Z7camLoopv+0x60>
      if (--_M_use_count == 0)
   d52c8:	6843      	ldr	r3, [r0, #4]
   d52ca:	3b01      	subs	r3, #1
   d52cc:	6043      	str	r3, [r0, #4]
   d52ce:	b90b      	cbnz	r3, d52d4 <_Z7camLoopv+0x60>
   d52d0:	f7ff fe64 	bl	d4f9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d52d4:	61a6      	str	r6, [r4, #24]
   d52d6:	a807      	add	r0, sp, #28
   d52d8:	f7ff fe8c 	bl	d4ff4 <_ZN9TCPClientD1Ev>
    if(tcpClient) {
   d52dc:	4828      	ldr	r0, [pc, #160]	; (d5380 <_Z7camLoopv+0x10c>)
   d52de:	f011 fced 	bl	e6cbc <_ZN9TCPClientcvbEv>
   d52e2:	4604      	mov	r4, r0
   d52e4:	2800      	cmp	r0, #0
   d52e6:	d040      	beq.n	d536a <_Z7camLoopv+0xf6>
      clientIP = tcpClient.remoteIP().toString();
   d52e8:	4925      	ldr	r1, [pc, #148]	; (d5380 <_Z7camLoopv+0x10c>)
#if DEBUG_AZURE == 1
       Serial.println("client connected!");
       Serial.printf("client ip:%s\n",clientIP.c_str());
#endif
       while(tcpClient.connected()) {
   d52ea:	4e25      	ldr	r6, [pc, #148]	; (d5380 <_Z7camLoopv+0x10c>)
           if((buffersize = tcpClient.available())) {
                img = new uint8_t[buffersize];
   d52ec:	f8df 909c 	ldr.w	r9, [pc, #156]	; d538c <_Z7camLoopv+0x118>
      clientIP = tcpClient.remoteIP().toString();
   d52f0:	a807      	add	r0, sp, #28
   d52f2:	f011 fd3f 	bl	e6d74 <_ZN9TCPClient8remoteIPEv>

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
   d52f6:	a907      	add	r1, sp, #28
   d52f8:	a803      	add	r0, sp, #12
   d52fa:	f010 feaf 	bl	e605c <_ZN6StringC1ERK9Printable>
   d52fe:	a903      	add	r1, sp, #12
   d5300:	4821      	ldr	r0, [pc, #132]	; (d5388 <_Z7camLoopv+0x114>)
   d5302:	f010 fdee 	bl	e5ee2 <_ZN6StringaSEOS_>
   d5306:	a803      	add	r0, sp, #12
   d5308:	f010 fd55 	bl	e5db6 <_ZN6StringD1Ev>
	  _M_range_insert(__pos, __first, __last,
   d530c:	f8df a064 	ldr.w	sl, [pc, #100]	; d5374 <_Z7camLoopv+0x100>
       while(tcpClient.connected()) {
   d5310:	4630      	mov	r0, r6
   d5312:	f011 fcba 	bl	e6c8a <_ZN9TCPClient9connectedEv>
   d5316:	b340      	cbz	r0, d536a <_Z7camLoopv+0xf6>
           if((buffersize = tcpClient.available())) {
   d5318:	4630      	mov	r0, r6
   d531a:	f011 fe99 	bl	e7050 <_ZN9TCPClient9availableEv>
   d531e:	6028      	str	r0, [r5, #0]
   d5320:	2800      	cmp	r0, #0
   d5322:	d0f5      	beq.n	d5310 <_Z7camLoopv+0x9c>
                img = new uint8_t[buffersize];
   d5324:	f7fe feb9 	bl	d409a <_Znaj>
                tcpClient.readBytes((char*)img,buffersize);
   d5328:	682a      	ldr	r2, [r5, #0]
                img = new uint8_t[buffersize];
   d532a:	f8c9 0000 	str.w	r0, [r9]
   d532e:	4601      	mov	r1, r0
                tcpClient.readBytes((char*)img,buffersize);
   d5330:	4630      	mov	r0, r6
   d5332:	f011 f811 	bl	e6358 <_ZN6Stream9readBytesEPcj>
                imgVector.insert(imgVector.end(), img, img + buffersize);    
   d5336:	f8d9 2000 	ldr.w	r2, [r9]
   d533a:	682b      	ldr	r3, [r5, #0]
   d533c:	f04f 0100 	mov.w	r1, #0
   d5340:	4413      	add	r3, r2
   d5342:	f88d 1000 	strb.w	r1, [sp]
   d5346:	4650      	mov	r0, sl
   d5348:	6879      	ldr	r1, [r7, #4]
   d534a:	f7ff ff0f 	bl	d516c <_ZNSt6vectorIhSaIhEE15_M_range_insertIPhEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag>
                totalSize += buffersize;
   d534e:	f8d8 3000 	ldr.w	r3, [r8]
   d5352:	682a      	ldr	r2, [r5, #0]
                delete(img); 
   d5354:	f8d9 0000 	ldr.w	r0, [r9]
                totalSize += buffersize;
   d5358:	4413      	add	r3, r2
   d535a:	f8c8 3000 	str.w	r3, [r8]
                delete(img); 
   d535e:	2800      	cmp	r0, #0
   d5360:	d0d6      	beq.n	d5310 <_Z7camLoopv+0x9c>
   d5362:	2101      	movs	r1, #1
   d5364:	f012 fb8f 	bl	e7a86 <_ZdlPvj>
   d5368:	e7d0      	b.n	d530c <_Z7camLoopv+0x98>
           }
       }
        return true;
   }
   return false;
   d536a:	4620      	mov	r0, r4
   d536c:	b00e      	add	sp, #56	; 0x38
   d536e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5372:	bf00      	nop
   d5374:	2003c36c 	.word	0x2003c36c
   d5378:	2003c3dc 	.word	0x2003c3dc
   d537c:	2003ae38 	.word	0x2003ae38
   d5380:	2003c3c0 	.word	0x2003c3c0
   d5384:	2003c378 	.word	0x2003c378
   d5388:	2003c338 	.word	0x2003c338
   d538c:	2003c368 	.word	0x2003c368

000d5390 <loop>:
{
   d5390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (camLoop())
   d5392:	f7ff ff6f 	bl	d5274 <_Z7camLoopv>
   d5396:	b380      	cbz	r0, d53fa <loop+0x6a>
    bool facialRecog = client.Detect(&imgVector[0], imgVector.size());    
   d5398:	4b1f      	ldr	r3, [pc, #124]	; (d5418 <loop+0x88>)
   d539a:	4820      	ldr	r0, [pc, #128]	; (d541c <loop+0x8c>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d539c:	e9d3 1200 	ldrd	r1, r2, [r3]
   d53a0:	1a52      	subs	r2, r2, r1
   d53a2:	f7fe ffcd 	bl	d4340 <_ZN16TlsClientHandler6DetectEPhm>
    if(!tcpClient.connect(clientIP, 2555))
   d53a6:	491e      	ldr	r1, [pc, #120]	; (d5420 <loop+0x90>)
    bool facialRecog = client.Detect(&imgVector[0], imgVector.size());    
   d53a8:	4604      	mov	r4, r0
    if(!tcpClient.connect(clientIP, 2555))
   d53aa:	6809      	ldr	r1, [r1, #0]
   d53ac:	481d      	ldr	r0, [pc, #116]	; (d5424 <loop+0x94>)
   d53ae:	2300      	movs	r3, #0
   d53b0:	f640 12fb 	movw	r2, #2555	; 0x9fb
   d53b4:	f011 fd4a 	bl	e6e4c <_ZN9TCPClient7connectEPKctm>
   d53b8:	b130      	cbz	r0, d53c8 <loop+0x38>
      tcpClient.write(facialRecog ? 'a' : 'b');
   d53ba:	2c00      	cmp	r4, #0
   d53bc:	4819      	ldr	r0, [pc, #100]	; (d5424 <loop+0x94>)
   d53be:	bf14      	ite	ne
   d53c0:	2161      	movne	r1, #97	; 0x61
   d53c2:	2162      	moveq	r1, #98	; 0x62
   d53c4:	f011 fc3e 	bl	e6c44 <_ZN9TCPClient5writeEh>
    if (facialRecog)
   d53c8:	b30c      	cbz	r4, d540e <loop+0x7e>
      hw.openLock(true);
   d53ca:	4817      	ldr	r0, [pc, #92]	; (d5428 <loop+0x98>)
   d53cc:	2101      	movs	r1, #1
   d53ce:	f7ff f883 	bl	d44d8 <_ZN17HardwareInterface8openLockEi>
      hw.rgbControl(2);
   d53d2:	2102      	movs	r1, #2
   d53d4:	4814      	ldr	r0, [pc, #80]	; (d5428 <loop+0x98>)
   d53d6:	f7ff f89b 	bl	d4510 <_ZN17HardwareInterface10rgbControlEi>
      delay(5000);
   d53da:	f241 3088 	movw	r0, #5000	; 0x1388
   d53de:	f010 ffeb 	bl	e63b8 <delay>
      hw.rgbControl(0);
   d53e2:	4811      	ldr	r0, [pc, #68]	; (d5428 <loop+0x98>)
   d53e4:	2100      	movs	r1, #0
   d53e6:	f7ff f893 	bl	d4510 <_ZN17HardwareInterface10rgbControlEi>
      hw.openLock(false);
   d53ea:	480f      	ldr	r0, [pc, #60]	; (d5428 <loop+0x98>)
   d53ec:	2100      	movs	r1, #0
   d53ee:	f7ff f873 	bl	d44d8 <_ZN17HardwareInterface8openLockEi>
      delay(2000);
   d53f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d53f6:	f010 ffdf 	bl	e63b8 <delay>
  System.sleep(sleepcfg);
   d53fa:	a801      	add	r0, sp, #4
   d53fc:	490b      	ldr	r1, [pc, #44]	; (d542c <loop+0x9c>)
   d53fe:	f010 fc0f 	bl	e5c20 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
   d5402:	9801      	ldr	r0, [sp, #4]
   d5404:	b108      	cbz	r0, d540a <loop+0x7a>
            free(wakeupSource_);
   d5406:	f010 facf 	bl	e59a8 <free>
}
   d540a:	b004      	add	sp, #16
   d540c:	bd10      	pop	{r4, pc}
      hw.faceNotRecogged();
   d540e:	4806      	ldr	r0, [pc, #24]	; (d5428 <loop+0x98>)
   d5410:	f7ff f89e 	bl	d4550 <_ZN17HardwareInterface15faceNotRecoggedEv>
   d5414:	e7ed      	b.n	d53f2 <loop+0x62>
   d5416:	bf00      	nop
   d5418:	2003c36c 	.word	0x2003c36c
   d541c:	2003ae40 	.word	0x2003ae40
   d5420:	2003c338 	.word	0x2003c338
   d5424:	2003c3c0 	.word	0x2003c3c0
   d5428:	2003c348 	.word	0x2003c348
   d542c:	2003c3a8 	.word	0x2003c3a8

000d5430 <_GLOBAL__sub_I_SystemMode>:
   d5430:	b570      	push	{r4, r5, r6, lr}
              error_(SYSTEM_ERROR_NONE) {
   d5432:	4e2f      	ldr	r6, [pc, #188]	; (d54f0 <_GLOBAL__sub_I_SystemMode+0xc0>)
    SleepResult() {}
   d5434:	4b2f      	ldr	r3, [pc, #188]	; (d54f4 <_GLOBAL__sub_I_SystemMode+0xc4>)
   d5436:	60b3      	str	r3, [r6, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5438:	2400      	movs	r4, #0
SYSTEM_MODE(MANUAL);
   d543a:	4d2f      	ldr	r5, [pc, #188]	; (d54f8 <_GLOBAL__sub_I_SystemMode+0xc8>)
   d543c:	6034      	str	r4, [r6, #0]
   d543e:	80b4      	strh	r4, [r6, #4]
    SleepResult() {}
   d5440:	71b4      	strb	r4, [r6, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5442:	2003      	movs	r0, #3
   d5444:	f010 fa12 	bl	e586c <set_system_mode>
   d5448:	4630      	mov	r0, r6
TlsClientHandler client;
   d544a:	4e2c      	ldr	r6, [pc, #176]	; (d54fc <_GLOBAL__sub_I_SystemMode+0xcc>)
SYSTEM_MODE(MANUAL);
   d544c:	492c      	ldr	r1, [pc, #176]	; (d5500 <_GLOBAL__sub_I_SystemMode+0xd0>)
   d544e:	462a      	mov	r2, r5
   d5450:	f012 fb14 	bl	e7a7c <__aeabi_atexit>
TlsClientHandler client;
   d5454:	4630      	mov	r0, r6
   d5456:	f7fe fe39 	bl	d40cc <_ZN16TlsClientHandlerC1Ev>
   d545a:	4630      	mov	r0, r6
TCPServer server = TCPServer(2555);
   d545c:	4e29      	ldr	r6, [pc, #164]	; (d5504 <_GLOBAL__sub_I_SystemMode+0xd4>)
TlsClientHandler client;
   d545e:	492a      	ldr	r1, [pc, #168]	; (d5508 <_GLOBAL__sub_I_SystemMode+0xd8>)
   d5460:	462a      	mov	r2, r5
   d5462:	f012 fb0b 	bl	e7a7c <__aeabi_atexit>
TCPServer server = TCPServer(2555);
   d5466:	4622      	mov	r2, r4
   d5468:	f640 11fb 	movw	r1, #2555	; 0x9fb
   d546c:	4630      	mov	r0, r6
   d546e:	f011 f829 	bl	e64c4 <_ZN9TCPServerC1Etm>
   d5472:	4630      	mov	r0, r6
TCPClient tcpClient;
   d5474:	4e25      	ldr	r6, [pc, #148]	; (d550c <_GLOBAL__sub_I_SystemMode+0xdc>)
TCPServer server = TCPServer(2555);
   d5476:	4926      	ldr	r1, [pc, #152]	; (d5510 <_GLOBAL__sub_I_SystemMode+0xe0>)
   d5478:	462a      	mov	r2, r5
   d547a:	f012 faff 	bl	e7a7c <__aeabi_atexit>
TCPClient tcpClient;
   d547e:	4630      	mov	r0, r6
   d5480:	f011 fe8a 	bl	e7198 <_ZN9TCPClientC1Ev>
   d5484:	4630      	mov	r0, r6
HardwareInterface hw;
   d5486:	4e23      	ldr	r6, [pc, #140]	; (d5514 <_GLOBAL__sub_I_SystemMode+0xe4>)
TCPClient tcpClient;
   d5488:	4923      	ldr	r1, [pc, #140]	; (d5518 <_GLOBAL__sub_I_SystemMode+0xe8>)
   d548a:	462a      	mov	r2, r5
   d548c:	f012 faf6 	bl	e7a7c <__aeabi_atexit>
HardwareInterface hw;
   d5490:	4630      	mov	r0, r6
   d5492:	f7fe fff1 	bl	d4478 <_ZN17HardwareInterfaceC1Ev>
   d5496:	462a      	mov	r2, r5
   d5498:	4920      	ldr	r1, [pc, #128]	; (d551c <_GLOBAL__sub_I_SystemMode+0xec>)
   d549a:	4630      	mov	r0, r6
   d549c:	f012 faee 	bl	e7a7c <__aeabi_atexit>
	: _M_start(), _M_finish(), _M_end_of_storage()
   d54a0:	481f      	ldr	r0, [pc, #124]	; (d5520 <_GLOBAL__sub_I_SystemMode+0xf0>)
std::vector<uint8_t> imgVector;
   d54a2:	4920      	ldr	r1, [pc, #128]	; (d5524 <_GLOBAL__sub_I_SystemMode+0xf4>)
   d54a4:	6084      	str	r4, [r0, #8]
   d54a6:	462a      	mov	r2, r5
   d54a8:	e9c0 4400 	strd	r4, r4, [r0]
   d54ac:	f012 fae6 	bl	e7a7c <__aeabi_atexit>
        : config_(config) {
   d54b0:	481d      	ldr	r0, [pc, #116]	; (d5528 <_GLOBAL__sub_I_SystemMode+0xf8>)
SystemSleepConfiguration sleepcfg;
   d54b2:	491e      	ldr	r1, [pc, #120]	; (d552c <_GLOBAL__sub_I_SystemMode+0xfc>)
              valid_(true) {
   d54b4:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d54b8:	4603      	mov	r3, r0
   d54ba:	1d02      	adds	r2, r0, #4
   d54bc:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d54c0:	709c      	strb	r4, [r3, #2]
   d54c2:	2301      	movs	r3, #1
        config_.wakeup_sources = nullptr;
   d54c4:	e9c0 4403 	strd	r4, r4, [r0, #12]
              valid_(true) {
   d54c8:	7503      	strb	r3, [r0, #20]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d54ca:	7204      	strb	r4, [r0, #8]
        config_.size = sizeof(hal_sleep_config_t);
   d54cc:	4b18      	ldr	r3, [pc, #96]	; (d5530 <_GLOBAL__sub_I_SystemMode+0x100>)
String clientIP;
   d54ce:	4c19      	ldr	r4, [pc, #100]	; (d5534 <_GLOBAL__sub_I_SystemMode+0x104>)
   d54d0:	6043      	str	r3, [r0, #4]
SystemSleepConfiguration sleepcfg;
   d54d2:	462a      	mov	r2, r5
   d54d4:	f012 fad2 	bl	e7a7c <__aeabi_atexit>
String clientIP;
   d54d8:	4917      	ldr	r1, [pc, #92]	; (d5538 <_GLOBAL__sub_I_SystemMode+0x108>)
   d54da:	4620      	mov	r0, r4
   d54dc:	f010 fcb6 	bl	e5e4c <_ZN6StringC1EPKc>
   d54e0:	462a      	mov	r2, r5
   d54e2:	4620      	mov	r0, r4
   d54e4:	4915      	ldr	r1, [pc, #84]	; (d553c <_GLOBAL__sub_I_SystemMode+0x10c>)
   d54e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
String clientIP;
   d54ea:	f012 bac7 	b.w	e7a7c <__aeabi_atexit>
   d54ee:	bf00      	nop
   d54f0:	2003ae2c 	.word	0x2003ae2c
   d54f4:	ffff0000 	.word	0xffff0000
   d54f8:	2003ae28 	.word	0x2003ae28
   d54fc:	2003ae40 	.word	0x2003ae40
   d5500:	000d4fcd 	.word	0x000d4fcd
   d5504:	2003c378 	.word	0x2003c378
   d5508:	000d415d 	.word	0x000d415d
   d550c:	2003c3c0 	.word	0x2003c3c0
   d5510:	000d5015 	.word	0x000d5015
   d5514:	2003c348 	.word	0x2003c348
   d5518:	000d4ff5 	.word	0x000d4ff5
   d551c:	000d4495 	.word	0x000d4495
   d5520:	2003c36c 	.word	0x2003c36c
   d5524:	000d4fbd 	.word	0x000d4fbd
   d5528:	2003c3a8 	.word	0x2003c3a8
   d552c:	000d4f85 	.word	0x000d4f85
   d5530:	00030010 	.word	0x00030010
   d5534:	2003c338 	.word	0x2003c338
   d5538:	000ebb9d 	.word	0x000ebb9d
   d553c:	000e5db7 	.word	0x000e5db7

000d5540 <mbedtls_sha256_init>:

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
   d5540:	226c      	movs	r2, #108	; 0x6c
   d5542:	2100      	movs	r1, #0
   d5544:	f013 bc7a 	b.w	e8e3c <memset>

000d5548 <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
   d5548:	b110      	cbz	r0, d5550 <mbedtls_sha256_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
   d554a:	216c      	movs	r1, #108	; 0x6c
   d554c:	f00d bb3a 	b.w	e2bc4 <mbedtls_platform_zeroize>
}
   d5550:	4770      	bx	lr

000d5552 <mbedtls_sha256_clone>:

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
   d5552:	b508      	push	{r3, lr}
    SHA256_VALIDATE( dst != NULL );
    SHA256_VALIDATE( src != NULL );

    *dst = *src;
   d5554:	226c      	movs	r2, #108	; 0x6c
   d5556:	f013 fc49 	bl	e8dec <memcpy>
}
   d555a:	bd08      	pop	{r3, pc}

000d555c <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
   d555c:	2300      	movs	r3, #0
    ctx->total[1] = 0;
   d555e:	e9c0 3300 	strd	r3, r3, [r0]

    if( is224 == 0 )
   d5562:	b9c1      	cbnz	r1, d5596 <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
   d5564:	4a19      	ldr	r2, [pc, #100]	; (d55cc <mbedtls_sha256_starts_ret+0x70>)
   d5566:	4b1a      	ldr	r3, [pc, #104]	; (d55d0 <mbedtls_sha256_starts_ret+0x74>)
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
   d5568:	f8df c08c 	ldr.w	ip, [pc, #140]	; d55f8 <mbedtls_sha256_starts_ret+0x9c>
        ctx->state[1] = 0xBB67AE85;
   d556c:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[3] = 0xA54FF53A;
   d5570:	4b18      	ldr	r3, [pc, #96]	; (d55d4 <mbedtls_sha256_starts_ret+0x78>)
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
   d5572:	4a19      	ldr	r2, [pc, #100]	; (d55d8 <mbedtls_sha256_starts_ret+0x7c>)
        ctx->state[3] = 0xA54FF53A;
   d5574:	e9c0 c304 	strd	ip, r3, [r0, #16]
        ctx->state[5] = 0x9B05688C;
   d5578:	4b18      	ldr	r3, [pc, #96]	; (d55dc <mbedtls_sha256_starts_ret+0x80>)
   d557a:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[6] = 0x1F83D9AB;
   d557e:	4b18      	ldr	r3, [pc, #96]	; (d55e0 <mbedtls_sha256_starts_ret+0x84>)
   d5580:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
   d5582:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   d5586:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   d558a:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
        ctx->state[2] = 0x3070DD17;
        ctx->state[3] = 0xF70E5939;
        ctx->state[4] = 0xFFC00B31;
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
   d558e:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
   d5590:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
   d5592:	2000      	movs	r0, #0
   d5594:	4770      	bx	lr
        ctx->state[1] = 0x367CD507;
   d5596:	4b13      	ldr	r3, [pc, #76]	; (d55e4 <mbedtls_sha256_starts_ret+0x88>)
   d5598:	4a13      	ldr	r2, [pc, #76]	; (d55e8 <mbedtls_sha256_starts_ret+0x8c>)
        ctx->state[4] = 0xFFC00B31;
   d559a:	f8df c060 	ldr.w	ip, [pc, #96]	; d55fc <mbedtls_sha256_starts_ret+0xa0>
        ctx->state[1] = 0x367CD507;
   d559e:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[2] = 0x3070DD17;
   d55a2:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
   d55a6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
   d55aa:	f503 6301 	add.w	r3, r3, #2064	; 0x810
   d55ae:	6103      	str	r3, [r0, #16]
        ctx->state[4] = 0xFFC00B31;
   d55b0:	4b0e      	ldr	r3, [pc, #56]	; (d55ec <mbedtls_sha256_starts_ret+0x90>)
   d55b2:	e9c0 c305 	strd	ip, r3, [r0, #20]
        ctx->state[5] = 0x68581511;
   d55b6:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
   d55ba:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
   d55be:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
   d55c2:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
   d55c4:	4b0a      	ldr	r3, [pc, #40]	; (d55f0 <mbedtls_sha256_starts_ret+0x94>)
   d55c6:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
   d55c8:	4b0a      	ldr	r3, [pc, #40]	; (d55f4 <mbedtls_sha256_starts_ret+0x98>)
   d55ca:	e7e0      	b.n	d558e <mbedtls_sha256_starts_ret+0x32>
   d55cc:	6a09e667 	.word	0x6a09e667
   d55d0:	bb67ae85 	.word	0xbb67ae85
   d55d4:	a54ff53a 	.word	0xa54ff53a
   d55d8:	510e527f 	.word	0x510e527f
   d55dc:	9b05688c 	.word	0x9b05688c
   d55e0:	1f83d9ab 	.word	0x1f83d9ab
   d55e4:	367cd507 	.word	0x367cd507
   d55e8:	c1059ed8 	.word	0xc1059ed8
   d55ec:	ffc00b31 	.word	0xffc00b31
   d55f0:	64f98fa7 	.word	0x64f98fa7
   d55f4:	befa4fa4 	.word	0xbefa4fa4
   d55f8:	3c6ef372 	.word	0x3c6ef372
   d55fc:	f70e5939 	.word	0xf70e5939

000d5600 <mbedtls_internal_sha256_process>:
        (d) += temp1; (h) = temp1 + temp2;              \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
   d5600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5604:	b0d1      	sub	sp, #324	; 0x144
   d5606:	f100 0308 	add.w	r3, r0, #8
   d560a:	9305      	str	r3, [sp, #20]
   d560c:	ab08      	add	r3, sp, #32
   d560e:	9300      	str	r3, [sp, #0]
   d5610:	f100 0328 	add.w	r3, r0, #40	; 0x28
   d5614:	9306      	str	r3, [sp, #24]
   d5616:	9a00      	ldr	r2, [sp, #0]
   d5618:	9b05      	ldr	r3, [sp, #20]

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
        A[i] = ctx->state[i];
   d561a:	f853 0b04 	ldr.w	r0, [r3], #4
   d561e:	f842 0b04 	str.w	r0, [r2], #4
    for( i = 0; i < 8; i++ )
   d5622:	9806      	ldr	r0, [sp, #24]
   d5624:	4298      	cmp	r0, r3
   d5626:	d1f8      	bne.n	d561a <mbedtls_internal_sha256_process+0x1a>
   d5628:	f10d 0940 	add.w	r9, sp, #64	; 0x40
   d562c:	f101 0040 	add.w	r0, r1, #64	; 0x40
   d5630:	464a      	mov	r2, r9
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
   d5632:	784b      	ldrb	r3, [r1, #1]
   d5634:	780c      	ldrb	r4, [r1, #0]
   d5636:	041b      	lsls	r3, r3, #16
   d5638:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   d563c:	78cc      	ldrb	r4, [r1, #3]
   d563e:	4323      	orrs	r3, r4
   d5640:	788c      	ldrb	r4, [r1, #2]
   d5642:	3104      	adds	r1, #4
   d5644:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    for( i = 0; i < 16; i++ )
   d5648:	4288      	cmp	r0, r1
        GET_UINT32_BE( W[i], data, 4 * i );
   d564a:	f842 3b04 	str.w	r3, [r2], #4
    for( i = 0; i < 16; i++ )
   d564e:	d1f0      	bne.n	d5632 <mbedtls_internal_sha256_process+0x32>
   d5650:	9b00      	ldr	r3, [sp, #0]
   d5652:	9900      	ldr	r1, [sp, #0]
   d5654:	489b      	ldr	r0, [pc, #620]	; (d58c4 <mbedtls_internal_sha256_process+0x2c4>)
   d5656:	f8d3 c01c 	ldr.w	ip, [r3, #28]
   d565a:	f8d3 8010 	ldr.w	r8, [r3, #16]
   d565e:	68c9      	ldr	r1, [r1, #12]
   d5660:	9001      	str	r0, [sp, #4]
   d5662:	e9d3 6b05 	ldrd	r6, fp, [r3, #20]
   d5666:	e9d3 7200 	ldrd	r7, r2, [r3]
   d566a:	689b      	ldr	r3, [r3, #8]
   d566c:	46ca      	mov	sl, r9
   d566e:	4686      	mov	lr, r0

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
   d5670:	f8de 0000 	ldr.w	r0, [lr]
   d5674:	f8da 4000 	ldr.w	r4, [sl]
   d5678:	ea4f 25f8 	mov.w	r5, r8, ror #11
   d567c:	ea85 15b8 	eor.w	r5, r5, r8, ror #6
   d5680:	4420      	add	r0, r4
   d5682:	ea85 6578 	eor.w	r5, r5, r8, ror #25
   d5686:	4405      	add	r5, r0
   d5688:	ea8b 0006 	eor.w	r0, fp, r6
   d568c:	ea00 0008 	and.w	r0, r0, r8
   d5690:	ea80 000b 	eor.w	r0, r0, fp
   d5694:	4405      	add	r5, r0
   d5696:	ea47 0402 	orr.w	r4, r7, r2
   d569a:	ea4f 3077 	mov.w	r0, r7, ror #13
   d569e:	44ac      	add	ip, r5
   d56a0:	ea80 00b7 	eor.w	r0, r0, r7, ror #2
   d56a4:	ea07 0502 	and.w	r5, r7, r2
   d56a8:	401c      	ands	r4, r3
   d56aa:	ea80 50b7 	eor.w	r0, r0, r7, ror #22
   d56ae:	432c      	orrs	r4, r5
   d56b0:	4404      	add	r4, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
   d56b2:	f8de 5004 	ldr.w	r5, [lr, #4]
   d56b6:	f8da 0004 	ldr.w	r0, [sl, #4]
   d56ba:	4405      	add	r5, r0
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
   d56bc:	4461      	add	r1, ip
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
   d56be:	44ab      	add	fp, r5
   d56c0:	ea88 0506 	eor.w	r5, r8, r6
   d56c4:	400d      	ands	r5, r1
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
   d56c6:	44a4      	add	ip, r4
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
   d56c8:	ea85 0406 	eor.w	r4, r5, r6
   d56cc:	eb0b 0504 	add.w	r5, fp, r4
   d56d0:	ea4f 2bf1 	mov.w	fp, r1, ror #11
   d56d4:	ea8b 1bb1 	eor.w	fp, fp, r1, ror #6
   d56d8:	ea8b 6b71 	eor.w	fp, fp, r1, ror #25
   d56dc:	44ab      	add	fp, r5
   d56de:	ea4c 0007 	orr.w	r0, ip, r7
   d56e2:	ea4f 357c 	mov.w	r5, ip, ror #13
   d56e6:	ea0c 0407 	and.w	r4, ip, r7
   d56ea:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
   d56ee:	4010      	ands	r0, r2
   d56f0:	4320      	orrs	r0, r4
   d56f2:	ea85 55bc 	eor.w	r5, r5, ip, ror #22
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
   d56f6:	f8de 4008 	ldr.w	r4, [lr, #8]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
   d56fa:	4405      	add	r5, r0
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
   d56fc:	f8da 0008 	ldr.w	r0, [sl, #8]
   d5700:	4404      	add	r4, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
   d5702:	445b      	add	r3, fp
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
   d5704:	4426      	add	r6, r4
   d5706:	ea81 0408 	eor.w	r4, r1, r8
   d570a:	401c      	ands	r4, r3
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
   d570c:	445d      	add	r5, fp
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
   d570e:	ea84 0b08 	eor.w	fp, r4, r8
   d5712:	eb06 040b 	add.w	r4, r6, fp
   d5716:	ea4f 26f3 	mov.w	r6, r3, ror #11
   d571a:	ea86 16b3 	eor.w	r6, r6, r3, ror #6
   d571e:	ea86 6673 	eor.w	r6, r6, r3, ror #25
   d5722:	4426      	add	r6, r4
   d5724:	ea4c 0005 	orr.w	r0, ip, r5
   d5728:	ea4f 3475 	mov.w	r4, r5, ror #13
   d572c:	ea0c 0b05 	and.w	fp, ip, r5
   d5730:	ea84 04b5 	eor.w	r4, r4, r5, ror #2
   d5734:	4038      	ands	r0, r7
   d5736:	ea40 000b 	orr.w	r0, r0, fp
   d573a:	ea84 54b5 	eor.w	r4, r4, r5, ror #22
   d573e:	4404      	add	r4, r0
   d5740:	4434      	add	r4, r6
   d5742:	4432      	add	r2, r6
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
   d5744:	f8de 000c 	ldr.w	r0, [lr, #12]
   d5748:	f8da 600c 	ldr.w	r6, [sl, #12]
   d574c:	ea81 0b03 	eor.w	fp, r1, r3
   d5750:	4430      	add	r0, r6
   d5752:	ea0b 0b02 	and.w	fp, fp, r2
   d5756:	ea4f 26f2 	mov.w	r6, r2, ror #11
   d575a:	ea8b 0b01 	eor.w	fp, fp, r1
   d575e:	4440      	add	r0, r8
   d5760:	ea86 16b2 	eor.w	r6, r6, r2, ror #6
   d5764:	4458      	add	r0, fp
   d5766:	ea86 6672 	eor.w	r6, r6, r2, ror #25
   d576a:	4406      	add	r6, r0
   d576c:	eb07 0806 	add.w	r8, r7, r6
   d5770:	ea4f 3074 	mov.w	r0, r4, ror #13
   d5774:	ea45 0704 	orr.w	r7, r5, r4
   d5778:	ea05 0b04 	and.w	fp, r5, r4
   d577c:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
   d5780:	ea07 070c 	and.w	r7, r7, ip
   d5784:	ea47 070b 	orr.w	r7, r7, fp
   d5788:	ea80 50b4 	eor.w	r0, r0, r4, ror #22
   d578c:	4438      	add	r0, r7
   d578e:	4430      	add	r0, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
   d5790:	f8da 7010 	ldr.w	r7, [sl, #16]
   d5794:	f8de 6010 	ldr.w	r6, [lr, #16]
   d5798:	ea83 0b02 	eor.w	fp, r3, r2
   d579c:	443e      	add	r6, r7
   d579e:	4431      	add	r1, r6
   d57a0:	ea0b 0b08 	and.w	fp, fp, r8
   d57a4:	ea4f 26f8 	mov.w	r6, r8, ror #11
   d57a8:	ea8b 0b03 	eor.w	fp, fp, r3
   d57ac:	ea86 16b8 	eor.w	r6, r6, r8, ror #6
   d57b0:	4459      	add	r1, fp
   d57b2:	ea86 6678 	eor.w	r6, r6, r8, ror #25
   d57b6:	440e      	add	r6, r1
   d57b8:	ea44 0700 	orr.w	r7, r4, r0
   d57bc:	ea4f 3170 	mov.w	r1, r0, ror #13
   d57c0:	ea04 0b00 	and.w	fp, r4, r0
   d57c4:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
   d57c8:	402f      	ands	r7, r5
   d57ca:	ea47 070b 	orr.w	r7, r7, fp
   d57ce:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
   d57d2:	4439      	add	r1, r7
   d57d4:	4431      	add	r1, r6
   d57d6:	44b4      	add	ip, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
   d57d8:	f8da 7014 	ldr.w	r7, [sl, #20]
   d57dc:	f8de 6014 	ldr.w	r6, [lr, #20]
   d57e0:	ea82 0b08 	eor.w	fp, r2, r8
   d57e4:	443e      	add	r6, r7
   d57e6:	4433      	add	r3, r6
   d57e8:	ea0b 0b0c 	and.w	fp, fp, ip
   d57ec:	ea4f 26fc 	mov.w	r6, ip, ror #11
   d57f0:	ea8b 0b02 	eor.w	fp, fp, r2
   d57f4:	ea86 16bc 	eor.w	r6, r6, ip, ror #6
   d57f8:	445b      	add	r3, fp
   d57fa:	ea86 667c 	eor.w	r6, r6, ip, ror #25
   d57fe:	441e      	add	r6, r3
   d5800:	eb05 0b06 	add.w	fp, r5, r6
   d5804:	ea4f 3371 	mov.w	r3, r1, ror #13
   d5808:	ea40 0501 	orr.w	r5, r0, r1
   d580c:	ea00 0701 	and.w	r7, r0, r1
   d5810:	4025      	ands	r5, r4
   d5812:	ea83 03b1 	eor.w	r3, r3, r1, ror #2
   d5816:	433d      	orrs	r5, r7
   d5818:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
   d581c:	442b      	add	r3, r5
   d581e:	4433      	add	r3, r6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
   d5820:	f8de 5018 	ldr.w	r5, [lr, #24]
   d5824:	f8da 6018 	ldr.w	r6, [sl, #24]
   d5828:	4435      	add	r5, r6
   d582a:	4415      	add	r5, r2
   d582c:	ea88 020c 	eor.w	r2, r8, ip
   d5830:	ea02 020b 	and.w	r2, r2, fp
   d5834:	ea82 0708 	eor.w	r7, r2, r8
   d5838:	19ea      	adds	r2, r5, r7
   d583a:	ea4f 25fb 	mov.w	r5, fp, ror #11
   d583e:	ea85 15bb 	eor.w	r5, r5, fp, ror #6
   d5842:	ea85 657b 	eor.w	r5, r5, fp, ror #25
   d5846:	4415      	add	r5, r2
   d5848:	1966      	adds	r6, r4, r5
   d584a:	ea4f 3273 	mov.w	r2, r3, ror #13
   d584e:	ea41 0403 	orr.w	r4, r1, r3
   d5852:	4004      	ands	r4, r0
   d5854:	ea01 0703 	and.w	r7, r1, r3
   d5858:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
   d585c:	433c      	orrs	r4, r7
   d585e:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
   d5862:	4422      	add	r2, r4
   d5864:	442a      	add	r2, r5
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
   d5866:	f8de 401c 	ldr.w	r4, [lr, #28]
   d586a:	f8da 501c 	ldr.w	r5, [sl, #28]
   d586e:	1967      	adds	r7, r4, r5
   d5870:	44b8      	add	r8, r7
   d5872:	ea8c 070b 	eor.w	r7, ip, fp
   d5876:	4037      	ands	r7, r6
   d5878:	ea87 070c 	eor.w	r7, r7, ip
   d587c:	4447      	add	r7, r8
   d587e:	ea4f 28f6 	mov.w	r8, r6, ror #11
   d5882:	ea88 18b6 	eor.w	r8, r8, r6, ror #6
   d5886:	ea88 6876 	eor.w	r8, r8, r6, ror #25
   d588a:	4447      	add	r7, r8
   d588c:	eb00 0807 	add.w	r8, r0, r7
   d5890:	ea43 0402 	orr.w	r4, r3, r2
   d5894:	ea4f 3072 	mov.w	r0, r2, ror #13
   d5898:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
   d589c:	400c      	ands	r4, r1
   d589e:	ea03 0502 	and.w	r5, r3, r2
   d58a2:	ea80 50b2 	eor.w	r0, r0, r2, ror #22
   d58a6:	432c      	orrs	r4, r5
   d58a8:	4404      	add	r4, r0
    for( i = 0; i < 16; i += 8 )
   d58aa:	4807      	ldr	r0, [pc, #28]	; (d58c8 <mbedtls_internal_sha256_process+0x2c8>)
   d58ac:	f10e 0e20 	add.w	lr, lr, #32
   d58b0:	4570      	cmp	r0, lr
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
   d58b2:	4427      	add	r7, r4
    for( i = 0; i < 16; i += 8 )
   d58b4:	f10a 0a20 	add.w	sl, sl, #32
   d58b8:	f47f aeda 	bne.w	d5670 <mbedtls_internal_sha256_process+0x70>
   d58bc:	f109 00c0 	add.w	r0, r9, #192	; 0xc0
   d58c0:	9007      	str	r0, [sp, #28]
   d58c2:	e003      	b.n	d58cc <mbedtls_internal_sha256_process+0x2cc>
   d58c4:	000eb76c 	.word	0x000eb76c
   d58c8:	000eb7ac 	.word	0x000eb7ac
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
   d58cc:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
   d58d0:	f8d9 5004 	ldr.w	r5, [r9, #4]
   d58d4:	f8d9 4000 	ldr.w	r4, [r9]
   d58d8:	ea4f 4ef0 	mov.w	lr, r0, ror #19
   d58dc:	ea8e 4e70 	eor.w	lr, lr, r0, ror #17
   d58e0:	ea8e 2e90 	eor.w	lr, lr, r0, lsr #10
   d58e4:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
   d58e8:	ea4f 4ab5 	mov.w	sl, r5, ror #18
   d58ec:	4420      	add	r0, r4
   d58ee:	ea8a 1af5 	eor.w	sl, sl, r5, ror #7
   d58f2:	ea8a 0ad5 	eor.w	sl, sl, r5, lsr #3
   d58f6:	4486      	add	lr, r0
   d58f8:	ea4f 24f8 	mov.w	r4, r8, ror #11
   d58fc:	eb0e 000a 	add.w	r0, lr, sl
   d5900:	ea84 14b8 	eor.w	r4, r4, r8, ror #6
   d5904:	9004      	str	r0, [sp, #16]
   d5906:	ea84 6078 	eor.w	r0, r4, r8, ror #25
   d590a:	ea8b 0406 	eor.w	r4, fp, r6
   d590e:	ea04 0408 	and.w	r4, r4, r8
   d5912:	ea84 040b 	eor.w	r4, r4, fp
   d5916:	4404      	add	r4, r0
   d5918:	9801      	ldr	r0, [sp, #4]
   d591a:	6c00      	ldr	r0, [r0, #64]	; 0x40
   d591c:	4420      	add	r0, r4
   d591e:	9c04      	ldr	r4, [sp, #16]
   d5920:	f8c9 4040 	str.w	r4, [r9, #64]	; 0x40
   d5924:	4420      	add	r0, r4
   d5926:	4484      	add	ip, r0
   d5928:	4461      	add	r1, ip
   d592a:	9102      	str	r1, [sp, #8]
   d592c:	ea47 0002 	orr.w	r0, r7, r2
   d5930:	ea4f 3177 	mov.w	r1, r7, ror #13
   d5934:	ea07 0402 	and.w	r4, r7, r2
   d5938:	ea81 01b7 	eor.w	r1, r1, r7, ror #2
   d593c:	4018      	ands	r0, r3
   d593e:	ea81 51b7 	eor.w	r1, r1, r7, ror #22
   d5942:	4320      	orrs	r0, r4
   d5944:	4408      	add	r0, r1
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
   d5946:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
   d594a:	f8d9 4008 	ldr.w	r4, [r9, #8]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
   d594e:	4484      	add	ip, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
   d5950:	ea4f 40f1 	mov.w	r0, r1, ror #19
   d5954:	ea80 4071 	eor.w	r0, r0, r1, ror #17
   d5958:	ea80 2091 	eor.w	r0, r0, r1, lsr #10
   d595c:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
   d5960:	4429      	add	r1, r5
   d5962:	4401      	add	r1, r0
   d5964:	9802      	ldr	r0, [sp, #8]
   d5966:	ea88 0e06 	eor.w	lr, r8, r6
   d596a:	ea0e 0e00 	and.w	lr, lr, r0
   d596e:	9801      	ldr	r0, [sp, #4]
   d5970:	ea4f 45b4 	mov.w	r5, r4, ror #18
   d5974:	6c40      	ldr	r0, [r0, #68]	; 0x44
   d5976:	ea85 15f4 	eor.w	r5, r5, r4, ror #7
   d597a:	ea85 05d4 	eor.w	r5, r5, r4, lsr #3
   d597e:	4429      	add	r1, r5
   d5980:	4458      	add	r0, fp
   d5982:	4408      	add	r0, r1
   d5984:	ea8e 0e06 	eor.w	lr, lr, r6
   d5988:	4486      	add	lr, r0
   d598a:	9802      	ldr	r0, [sp, #8]
   d598c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
   d5990:	ea4f 25f0 	mov.w	r5, r0, ror #11
   d5994:	ea85 15b0 	eor.w	r5, r5, r0, ror #6
   d5998:	ea85 6570 	eor.w	r5, r5, r0, ror #25
   d599c:	eb05 000e 	add.w	r0, r5, lr
   d59a0:	eb03 0b00 	add.w	fp, r3, r0
   d59a4:	ea4f 357c 	mov.w	r5, ip, ror #13
   d59a8:	ea47 030c 	orr.w	r3, r7, ip
   d59ac:	ea07 0e0c 	and.w	lr, r7, ip
   d59b0:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
   d59b4:	4013      	ands	r3, r2
   d59b6:	ea43 030e 	orr.w	r3, r3, lr
   d59ba:	ea85 55bc 	eor.w	r5, r5, ip, ror #22
   d59be:	441d      	add	r5, r3
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
   d59c0:	9b04      	ldr	r3, [sp, #16]
   d59c2:	f8d9 e00c 	ldr.w	lr, [r9, #12]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
   d59c6:	4405      	add	r5, r0
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
   d59c8:	ea4f 40f3 	mov.w	r0, r3, ror #19
   d59cc:	ea80 4073 	eor.w	r0, r0, r3, ror #17
   d59d0:	ea80 2093 	eor.w	r0, r0, r3, lsr #10
   d59d4:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
   d59d8:	4423      	add	r3, r4
   d59da:	4403      	add	r3, r0
   d59dc:	9802      	ldr	r0, [sp, #8]
   d59de:	ea88 0a00 	eor.w	sl, r8, r0
   d59e2:	9801      	ldr	r0, [sp, #4]
   d59e4:	ea4f 44be 	mov.w	r4, lr, ror #18
   d59e8:	6c80      	ldr	r0, [r0, #72]	; 0x48
   d59ea:	ea84 14fe 	eor.w	r4, r4, lr, ror #7
   d59ee:	ea84 04de 	eor.w	r4, r4, lr, lsr #3
   d59f2:	4423      	add	r3, r4
   d59f4:	ea0a 0a0b 	and.w	sl, sl, fp
   d59f8:	4430      	add	r0, r6
   d59fa:	ea4f 24fb 	mov.w	r4, fp, ror #11
   d59fe:	4418      	add	r0, r3
   d5a00:	ea8a 0a08 	eor.w	sl, sl, r8
   d5a04:	ea84 14bb 	eor.w	r4, r4, fp, ror #6
   d5a08:	ea84 647b 	eor.w	r4, r4, fp, ror #25
   d5a0c:	4482      	add	sl, r0
   d5a0e:	eb04 000a 	add.w	r0, r4, sl
   d5a12:	4402      	add	r2, r0
   d5a14:	ea4c 0405 	orr.w	r4, ip, r5
   d5a18:	ea4f 3675 	mov.w	r6, r5, ror #13
   d5a1c:	9203      	str	r2, [sp, #12]
   d5a1e:	ea86 06b5 	eor.w	r6, r6, r5, ror #2
   d5a22:	ea0c 0205 	and.w	r2, ip, r5
   d5a26:	403c      	ands	r4, r7
   d5a28:	ea86 56b5 	eor.w	r6, r6, r5, ror #22
   d5a2c:	4314      	orrs	r4, r2
   d5a2e:	4434      	add	r4, r6
   d5a30:	4404      	add	r4, r0
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
   d5a32:	ea4f 40f1 	mov.w	r0, r1, ror #19
   d5a36:	ea80 4071 	eor.w	r0, r0, r1, ror #17
   d5a3a:	ea80 2191 	eor.w	r1, r0, r1, lsr #10
   d5a3e:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
   d5a42:	f8d9 2010 	ldr.w	r2, [r9, #16]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
   d5a46:	f8c9 3048 	str.w	r3, [r9, #72]	; 0x48
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
   d5a4a:	4486      	add	lr, r0
   d5a4c:	4471      	add	r1, lr
   d5a4e:	ea4f 4eb2 	mov.w	lr, r2, ror #18
   d5a52:	ea8e 1ef2 	eor.w	lr, lr, r2, ror #7
   d5a56:	ea8e 0ed2 	eor.w	lr, lr, r2, lsr #3
   d5a5a:	448e      	add	lr, r1
   d5a5c:	9902      	ldr	r1, [sp, #8]
   d5a5e:	9803      	ldr	r0, [sp, #12]
   d5a60:	ea81 010b 	eor.w	r1, r1, fp
   d5a64:	4001      	ands	r1, r0
   d5a66:	9802      	ldr	r0, [sp, #8]
   d5a68:	4041      	eors	r1, r0
   d5a6a:	9801      	ldr	r0, [sp, #4]
   d5a6c:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
   d5a6e:	9803      	ldr	r0, [sp, #12]
   d5a70:	f8c9 e04c 	str.w	lr, [r9, #76]	; 0x4c
   d5a74:	4446      	add	r6, r8
   d5a76:	4476      	add	r6, lr
   d5a78:	4431      	add	r1, r6
   d5a7a:	9e03      	ldr	r6, [sp, #12]
   d5a7c:	ea4f 20f0 	mov.w	r0, r0, ror #11
   d5a80:	ea80 10b6 	eor.w	r0, r0, r6, ror #6
   d5a84:	ea80 6076 	eor.w	r0, r0, r6, ror #25
   d5a88:	1846      	adds	r6, r0, r1
   d5a8a:	ea45 0004 	orr.w	r0, r5, r4
   d5a8e:	ea05 0104 	and.w	r1, r5, r4
   d5a92:	ea4f 3874 	mov.w	r8, r4, ror #13
   d5a96:	ea00 000c 	and.w	r0, r0, ip
   d5a9a:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
   d5a9e:	4308      	orrs	r0, r1
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   d5aa0:	ea4f 41f3 	mov.w	r1, r3, ror #19
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
   d5aa4:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   d5aa8:	ea81 4173 	eor.w	r1, r1, r3, ror #17
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
   d5aac:	4440      	add	r0, r8
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   d5aae:	ea81 2393 	eor.w	r3, r1, r3, lsr #10
   d5ab2:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
   d5ab6:	4430      	add	r0, r6
   d5ab8:	eb07 0a06 	add.w	sl, r7, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   d5abc:	f8d9 6014 	ldr.w	r6, [r9, #20]
   d5ac0:	440a      	add	r2, r1
   d5ac2:	4413      	add	r3, r2
   d5ac4:	ea4f 42b6 	mov.w	r2, r6, ror #18
   d5ac8:	ea82 12f6 	eor.w	r2, r2, r6, ror #7
   d5acc:	ea82 02d6 	eor.w	r2, r2, r6, lsr #3
   d5ad0:	441a      	add	r2, r3
   d5ad2:	9b03      	ldr	r3, [sp, #12]
   d5ad4:	9902      	ldr	r1, [sp, #8]
   d5ad6:	f8c9 2050 	str.w	r2, [r9, #80]	; 0x50
   d5ada:	ea8b 0703 	eor.w	r7, fp, r3
   d5ade:	9b01      	ldr	r3, [sp, #4]
   d5ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5ae2:	4413      	add	r3, r2
   d5ae4:	440b      	add	r3, r1
   d5ae6:	ea07 070a 	and.w	r7, r7, sl
   d5aea:	ea4f 21fa 	mov.w	r1, sl, ror #11
   d5aee:	ea87 070b 	eor.w	r7, r7, fp
   d5af2:	ea81 11ba 	eor.w	r1, r1, sl, ror #6
   d5af6:	441f      	add	r7, r3
   d5af8:	ea81 617a 	eor.w	r1, r1, sl, ror #25
   d5afc:	19cb      	adds	r3, r1, r7
   d5afe:	ea44 0700 	orr.w	r7, r4, r0
   d5b02:	ea4f 3170 	mov.w	r1, r0, ror #13
   d5b06:	ea04 0800 	and.w	r8, r4, r0
   d5b0a:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
   d5b0e:	402f      	ands	r7, r5
   d5b10:	ea47 0708 	orr.w	r7, r7, r8
   d5b14:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
   d5b18:	4439      	add	r1, r7
   d5b1a:	4419      	add	r1, r3
   d5b1c:	449c      	add	ip, r3
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
   d5b1e:	f8d9 8018 	ldr.w	r8, [r9, #24]
   d5b22:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
   d5b26:	ea4f 47fe 	mov.w	r7, lr, ror #19
   d5b2a:	ea87 477e 	eor.w	r7, r7, lr, ror #17
   d5b2e:	ea87 2e9e 	eor.w	lr, r7, lr, lsr #10
   d5b32:	199f      	adds	r7, r3, r6
   d5b34:	ea4f 43b8 	mov.w	r3, r8, ror #18
   d5b38:	ea83 13f8 	eor.w	r3, r3, r8, ror #7
   d5b3c:	ea83 03d8 	eor.w	r3, r3, r8, lsr #3
   d5b40:	4477      	add	r7, lr
   d5b42:	441f      	add	r7, r3
   d5b44:	9b03      	ldr	r3, [sp, #12]
   d5b46:	f8c9 7054 	str.w	r7, [r9, #84]	; 0x54
   d5b4a:	ea83 0e0a 	eor.w	lr, r3, sl
   d5b4e:	ea0e 0e0c 	and.w	lr, lr, ip
   d5b52:	ea8e 0e03 	eor.w	lr, lr, r3
   d5b56:	9b01      	ldr	r3, [sp, #4]
   d5b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5b5a:	443b      	add	r3, r7
   d5b5c:	445b      	add	r3, fp
   d5b5e:	449e      	add	lr, r3
   d5b60:	ea4f 23fc 	mov.w	r3, ip, ror #11
   d5b64:	ea83 13bc 	eor.w	r3, r3, ip, ror #6
   d5b68:	ea83 637c 	eor.w	r3, r3, ip, ror #25
   d5b6c:	eb03 060e 	add.w	r6, r3, lr
   d5b70:	eb05 0b06 	add.w	fp, r5, r6
   d5b74:	ea4f 3371 	mov.w	r3, r1, ror #13
   d5b78:	ea40 0501 	orr.w	r5, r0, r1
   d5b7c:	ea00 0e01 	and.w	lr, r0, r1
   d5b80:	4025      	ands	r5, r4
   d5b82:	ea83 03b1 	eor.w	r3, r3, r1, ror #2
   d5b86:	ea45 050e 	orr.w	r5, r5, lr
   d5b8a:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
   d5b8e:	442b      	add	r3, r5
   d5b90:	4433      	add	r3, r6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
   d5b92:	f8d9 503c 	ldr.w	r5, [r9, #60]	; 0x3c
   d5b96:	f8d9 e01c 	ldr.w	lr, [r9, #28]
   d5b9a:	ea4f 46f2 	mov.w	r6, r2, ror #19
   d5b9e:	ea86 4672 	eor.w	r6, r6, r2, ror #17
   d5ba2:	ea86 2292 	eor.w	r2, r6, r2, lsr #10
   d5ba6:	eb05 0608 	add.w	r6, r5, r8
   d5baa:	4416      	add	r6, r2
   d5bac:	ea4f 42be 	mov.w	r2, lr, ror #18
   d5bb0:	ea82 12fe 	eor.w	r2, r2, lr, ror #7
   d5bb4:	ea82 02de 	eor.w	r2, r2, lr, lsr #3
   d5bb8:	4416      	add	r6, r2
   d5bba:	9a01      	ldr	r2, [sp, #4]
   d5bbc:	f8c9 6058 	str.w	r6, [r9, #88]	; 0x58
   d5bc0:	6d95      	ldr	r5, [r2, #88]	; 0x58
   d5bc2:	9a03      	ldr	r2, [sp, #12]
   d5bc4:	4435      	add	r5, r6
   d5bc6:	ea8a 080c 	eor.w	r8, sl, ip
   d5bca:	4415      	add	r5, r2
   d5bcc:	ea08 080b 	and.w	r8, r8, fp
   d5bd0:	ea4f 22fb 	mov.w	r2, fp, ror #11
   d5bd4:	ea88 080a 	eor.w	r8, r8, sl
   d5bd8:	ea82 12bb 	eor.w	r2, r2, fp, ror #6
   d5bdc:	4445      	add	r5, r8
   d5bde:	ea82 627b 	eor.w	r2, r2, fp, ror #25
   d5be2:	4415      	add	r5, r2
   d5be4:	1966      	adds	r6, r4, r5
   d5be6:	ea4f 3273 	mov.w	r2, r3, ror #13
   d5bea:	ea41 0403 	orr.w	r4, r1, r3
   d5bee:	4004      	ands	r4, r0
   d5bf0:	ea01 0803 	and.w	r8, r1, r3
   d5bf4:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
   d5bf8:	ea44 0408 	orr.w	r4, r4, r8
   d5bfc:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
   d5c00:	4422      	add	r2, r4
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
   d5c02:	ea4f 44f7 	mov.w	r4, r7, ror #19
   d5c06:	ea84 4477 	eor.w	r4, r4, r7, ror #17
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
   d5c0a:	442a      	add	r2, r5
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
   d5c0c:	ea84 2797 	eor.w	r7, r4, r7, lsr #10
   d5c10:	f8d9 5020 	ldr.w	r5, [r9, #32]
   d5c14:	9c04      	ldr	r4, [sp, #16]
   d5c16:	44a6      	add	lr, r4
   d5c18:	ea4f 44b5 	mov.w	r4, r5, ror #18
   d5c1c:	ea84 14f5 	eor.w	r4, r4, r5, ror #7
   d5c20:	ea84 05d5 	eor.w	r5, r4, r5, lsr #3
   d5c24:	9c01      	ldr	r4, [sp, #4]
   d5c26:	4477      	add	r7, lr
   d5c28:	6de4      	ldr	r4, [r4, #92]	; 0x5c
   d5c2a:	443d      	add	r5, r7
   d5c2c:	ea8c 0e0b 	eor.w	lr, ip, fp
   d5c30:	442c      	add	r4, r5
   d5c32:	ea0e 0e06 	and.w	lr, lr, r6
   d5c36:	ea4f 27f6 	mov.w	r7, r6, ror #11
   d5c3a:	ea8e 0e0c 	eor.w	lr, lr, ip
   d5c3e:	4454      	add	r4, sl
   d5c40:	ea87 17b6 	eor.w	r7, r7, r6, ror #6
   d5c44:	4474      	add	r4, lr
   d5c46:	ea87 6776 	eor.w	r7, r7, r6, ror #25
   d5c4a:	4427      	add	r7, r4
   d5c4c:	eb00 0807 	add.w	r8, r0, r7
   d5c50:	ea43 0402 	orr.w	r4, r3, r2
   d5c54:	ea4f 3072 	mov.w	r0, r2, ror #13
   d5c58:	f8c9 505c 	str.w	r5, [r9, #92]	; 0x5c
   d5c5c:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
   d5c60:	400c      	ands	r4, r1
   d5c62:	ea03 0502 	and.w	r5, r3, r2
   d5c66:	ea80 50b2 	eor.w	r0, r0, r2, ror #22
   d5c6a:	432c      	orrs	r4, r5
   d5c6c:	4404      	add	r4, r0
   d5c6e:	9801      	ldr	r0, [sp, #4]
   d5c70:	3020      	adds	r0, #32
   d5c72:	9001      	str	r0, [sp, #4]
    for( i = 16; i < 64; i += 8 )
   d5c74:	9807      	ldr	r0, [sp, #28]
   d5c76:	f109 0920 	add.w	r9, r9, #32
   d5c7a:	4548      	cmp	r0, r9
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
   d5c7c:	4427      	add	r7, r4
    for( i = 16; i < 64; i += 8 )
   d5c7e:	f47f ae25 	bne.w	d58cc <mbedtls_internal_sha256_process+0x2cc>
   d5c82:	e9cd 6b0d 	strd	r6, fp, [sp, #52]	; 0x34
   d5c86:	e9cd 7208 	strd	r7, r2, [sp, #32]
   d5c8a:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
   d5c8e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   d5c92:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
   d5c96:	9b05      	ldr	r3, [sp, #20]
   d5c98:	9900      	ldr	r1, [sp, #0]
   d5c9a:	681b      	ldr	r3, [r3, #0]
   d5c9c:	f851 2b04 	ldr.w	r2, [r1], #4
   d5ca0:	9100      	str	r1, [sp, #0]
   d5ca2:	4413      	add	r3, r2
   d5ca4:	9a05      	ldr	r2, [sp, #20]
   d5ca6:	f842 3b04 	str.w	r3, [r2], #4
    for( i = 0; i < 8; i++ )
   d5caa:	9b06      	ldr	r3, [sp, #24]
        ctx->state[i] += A[i];
   d5cac:	9205      	str	r2, [sp, #20]
    for( i = 0; i < 8; i++ )
   d5cae:	4293      	cmp	r3, r2
   d5cb0:	d1f1      	bne.n	d5c96 <mbedtls_internal_sha256_process+0x696>

    return( 0 );
}
   d5cb2:	2000      	movs	r0, #0
   d5cb4:	b051      	add	sp, #324	; 0x144
   d5cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5cba:	bf00      	nop

000d5cbc <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
   d5cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5cc0:	4605      	mov	r5, r0
   d5cc2:	460e      	mov	r6, r1
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
   d5cc4:	4614      	mov	r4, r2
   d5cc6:	b912      	cbnz	r2, d5cce <mbedtls_sha256_update_ret+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
   d5cc8:	2000      	movs	r0, #0
}
   d5cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    left = ctx->total[0] & 0x3F;
   d5cce:	6803      	ldr	r3, [r0, #0]
   d5cd0:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    ctx->total[0] += (uint32_t) ilen;
   d5cd4:	18d3      	adds	r3, r2, r3
   d5cd6:	6003      	str	r3, [r0, #0]
        ctx->total[1]++;
   d5cd8:	bf22      	ittt	cs
   d5cda:	6843      	ldrcs	r3, [r0, #4]
   d5cdc:	3301      	addcs	r3, #1
   d5cde:	6043      	strcs	r3, [r0, #4]
    if( left && ilen >= fill )
   d5ce0:	b1a7      	cbz	r7, d5d0c <mbedtls_sha256_update_ret+0x50>
    fill = 64 - left;
   d5ce2:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
   d5ce6:	454a      	cmp	r2, r9
   d5ce8:	d310      	bcc.n	d5d0c <mbedtls_sha256_update_ret+0x50>
        memcpy( (void *) (ctx->buffer + left), input, fill );
   d5cea:	f100 0828 	add.w	r8, r0, #40	; 0x28
   d5cee:	464a      	mov	r2, r9
   d5cf0:	eb08 0007 	add.w	r0, r8, r7
   d5cf4:	f013 f87a 	bl	e8dec <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   d5cf8:	4641      	mov	r1, r8
   d5cfa:	4628      	mov	r0, r5
   d5cfc:	f7ff fc80 	bl	d5600 <mbedtls_internal_sha256_process>
   d5d00:	2800      	cmp	r0, #0
   d5d02:	d1e2      	bne.n	d5cca <mbedtls_sha256_update_ret+0xe>
        ilen  -= fill;
   d5d04:	443c      	add	r4, r7
        input += fill;
   d5d06:	444e      	add	r6, r9
        ilen  -= fill;
   d5d08:	3c40      	subs	r4, #64	; 0x40
        left = 0;
   d5d0a:	4607      	mov	r7, r0
   d5d0c:	4426      	add	r6, r4
    while( ilen >= 64 )
   d5d0e:	2c3f      	cmp	r4, #63	; 0x3f
   d5d10:	eba6 0104 	sub.w	r1, r6, r4
   d5d14:	d906      	bls.n	d5d24 <mbedtls_sha256_update_ret+0x68>
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
   d5d16:	4628      	mov	r0, r5
   d5d18:	f7ff fc72 	bl	d5600 <mbedtls_internal_sha256_process>
   d5d1c:	2800      	cmp	r0, #0
   d5d1e:	d1d4      	bne.n	d5cca <mbedtls_sha256_update_ret+0xe>
        ilen  -= 64;
   d5d20:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
   d5d22:	e7f4      	b.n	d5d0e <mbedtls_sha256_update_ret+0x52>
    if( ilen > 0 )
   d5d24:	2c00      	cmp	r4, #0
   d5d26:	d0cf      	beq.n	d5cc8 <mbedtls_sha256_update_ret+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
   d5d28:	f105 0028 	add.w	r0, r5, #40	; 0x28
   d5d2c:	4622      	mov	r2, r4
   d5d2e:	4438      	add	r0, r7
   d5d30:	f013 f85c 	bl	e8dec <memcpy>
   d5d34:	e7c8      	b.n	d5cc8 <mbedtls_sha256_update_ret+0xc>

000d5d36 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
   d5d36:	b570      	push	{r4, r5, r6, lr}
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   d5d38:	6803      	ldr	r3, [r0, #0]
   d5d3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
   d5d3e:	1c5a      	adds	r2, r3, #1
   d5d40:	4403      	add	r3, r0
{
   d5d42:	460d      	mov	r5, r1
   d5d44:	f100 0628 	add.w	r6, r0, #40	; 0x28
    ctx->buffer[used++] = 0x80;
   d5d48:	2180      	movs	r1, #128	; 0x80

    if( used <= 56 )
   d5d4a:	2a38      	cmp	r2, #56	; 0x38
{
   d5d4c:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
   d5d4e:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    if( used <= 56 )
   d5d52:	eb06 0002 	add.w	r0, r6, r2
   d5d56:	d861      	bhi.n	d5e1c <mbedtls_sha256_finish_ret+0xe6>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
   d5d58:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
   d5d5c:	2100      	movs	r1, #0
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
   d5d5e:	f013 f86d 	bl	e8e3c <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
   d5d62:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
   d5d66:	0f5a      	lsrs	r2, r3, #29
   d5d68:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
   d5d6c:	00db      	lsls	r3, r3, #3
   d5d6e:	ba12      	rev	r2, r2
   d5d70:	ba1b      	rev	r3, r3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   d5d72:	6622      	str	r2, [r4, #96]	; 0x60
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
   d5d74:	6663      	str	r3, [r4, #100]	; 0x64

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   d5d76:	4631      	mov	r1, r6
   d5d78:	4620      	mov	r0, r4
   d5d7a:	f7ff fc41 	bl	d5600 <mbedtls_internal_sha256_process>
   d5d7e:	2800      	cmp	r0, #0
   d5d80:	d14b      	bne.n	d5e1a <mbedtls_sha256_finish_ret+0xe4>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
   d5d82:	7ae3      	ldrb	r3, [r4, #11]
   d5d84:	702b      	strb	r3, [r5, #0]
   d5d86:	8963      	ldrh	r3, [r4, #10]
   d5d88:	706b      	strb	r3, [r5, #1]
   d5d8a:	68a3      	ldr	r3, [r4, #8]
   d5d8c:	0a1b      	lsrs	r3, r3, #8
   d5d8e:	70ab      	strb	r3, [r5, #2]
   d5d90:	68a3      	ldr	r3, [r4, #8]
   d5d92:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
   d5d94:	7be3      	ldrb	r3, [r4, #15]
   d5d96:	712b      	strb	r3, [r5, #4]
   d5d98:	89e3      	ldrh	r3, [r4, #14]
   d5d9a:	716b      	strb	r3, [r5, #5]
   d5d9c:	68e3      	ldr	r3, [r4, #12]
   d5d9e:	0a1b      	lsrs	r3, r3, #8
   d5da0:	71ab      	strb	r3, [r5, #6]
   d5da2:	68e3      	ldr	r3, [r4, #12]
   d5da4:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
   d5da6:	7ce3      	ldrb	r3, [r4, #19]
   d5da8:	722b      	strb	r3, [r5, #8]
   d5daa:	8a63      	ldrh	r3, [r4, #18]
   d5dac:	726b      	strb	r3, [r5, #9]
   d5dae:	6923      	ldr	r3, [r4, #16]
   d5db0:	0a1b      	lsrs	r3, r3, #8
   d5db2:	72ab      	strb	r3, [r5, #10]
   d5db4:	6923      	ldr	r3, [r4, #16]
   d5db6:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
   d5db8:	7de3      	ldrb	r3, [r4, #23]
   d5dba:	732b      	strb	r3, [r5, #12]
   d5dbc:	8ae3      	ldrh	r3, [r4, #22]
   d5dbe:	736b      	strb	r3, [r5, #13]
   d5dc0:	6963      	ldr	r3, [r4, #20]
   d5dc2:	0a1b      	lsrs	r3, r3, #8
   d5dc4:	73ab      	strb	r3, [r5, #14]
   d5dc6:	6963      	ldr	r3, [r4, #20]
   d5dc8:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
   d5dca:	7ee3      	ldrb	r3, [r4, #27]
   d5dcc:	742b      	strb	r3, [r5, #16]
   d5dce:	8b63      	ldrh	r3, [r4, #26]
   d5dd0:	746b      	strb	r3, [r5, #17]
   d5dd2:	69a3      	ldr	r3, [r4, #24]
   d5dd4:	0a1b      	lsrs	r3, r3, #8
   d5dd6:	74ab      	strb	r3, [r5, #18]
   d5dd8:	69a3      	ldr	r3, [r4, #24]
   d5dda:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
   d5ddc:	7fe3      	ldrb	r3, [r4, #31]
   d5dde:	752b      	strb	r3, [r5, #20]
   d5de0:	8be3      	ldrh	r3, [r4, #30]
   d5de2:	756b      	strb	r3, [r5, #21]
   d5de4:	69e3      	ldr	r3, [r4, #28]
   d5de6:	0a1b      	lsrs	r3, r3, #8
   d5de8:	75ab      	strb	r3, [r5, #22]
   d5dea:	69e3      	ldr	r3, [r4, #28]
   d5dec:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
   d5dee:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   d5df2:	762b      	strb	r3, [r5, #24]
   d5df4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5df6:	766b      	strb	r3, [r5, #25]
   d5df8:	6a23      	ldr	r3, [r4, #32]
   d5dfa:	0a1b      	lsrs	r3, r3, #8
   d5dfc:	76ab      	strb	r3, [r5, #26]
   d5dfe:	6a23      	ldr	r3, [r4, #32]
   d5e00:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
   d5e02:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   d5e04:	b94b      	cbnz	r3, d5e1a <mbedtls_sha256_finish_ret+0xe4>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
   d5e06:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   d5e0a:	772b      	strb	r3, [r5, #28]
   d5e0c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   d5e0e:	776b      	strb	r3, [r5, #29]
   d5e10:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5e12:	0a1b      	lsrs	r3, r3, #8
   d5e14:	77ab      	strb	r3, [r5, #30]
   d5e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5e18:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
   d5e1a:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
   d5e1c:	2100      	movs	r1, #0
   d5e1e:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   d5e22:	f013 f80b 	bl	e8e3c <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   d5e26:	4631      	mov	r1, r6
   d5e28:	4620      	mov	r0, r4
   d5e2a:	f7ff fbe9 	bl	d5600 <mbedtls_internal_sha256_process>
   d5e2e:	2800      	cmp	r0, #0
   d5e30:	d1f3      	bne.n	d5e1a <mbedtls_sha256_finish_ret+0xe4>
        memset( ctx->buffer, 0, 56 );
   d5e32:	4601      	mov	r1, r0
   d5e34:	2238      	movs	r2, #56	; 0x38
   d5e36:	4630      	mov	r0, r6
   d5e38:	e791      	b.n	d5d5e <mbedtls_sha256_finish_ret+0x28>

000d5e3a <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
   d5e3a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5e3c:	b09f      	sub	sp, #124	; 0x7c
   d5e3e:	4606      	mov	r6, r0

    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha256_init( &ctx );
   d5e40:	a803      	add	r0, sp, #12
{
   d5e42:	460f      	mov	r7, r1
   d5e44:	4615      	mov	r5, r2
   d5e46:	9301      	str	r3, [sp, #4]
    mbedtls_sha256_init( &ctx );
   d5e48:	f7ff fb7a 	bl	d5540 <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
   d5e4c:	9901      	ldr	r1, [sp, #4]
   d5e4e:	a803      	add	r0, sp, #12
   d5e50:	f7ff fb84 	bl	d555c <mbedtls_sha256_starts_ret>
   d5e54:	4604      	mov	r4, r0
   d5e56:	b958      	cbnz	r0, d5e70 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
   d5e58:	463a      	mov	r2, r7
   d5e5a:	4631      	mov	r1, r6
   d5e5c:	a803      	add	r0, sp, #12
   d5e5e:	f7ff ff2d 	bl	d5cbc <mbedtls_sha256_update_ret>
   d5e62:	4604      	mov	r4, r0
   d5e64:	b920      	cbnz	r0, d5e70 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
   d5e66:	4629      	mov	r1, r5
   d5e68:	a803      	add	r0, sp, #12
   d5e6a:	f7ff ff64 	bl	d5d36 <mbedtls_sha256_finish_ret>
   d5e6e:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha256_free( &ctx );
   d5e70:	a803      	add	r0, sp, #12
   d5e72:	f7ff fb69 	bl	d5548 <mbedtls_sha256_free>

    return( ret );
}
   d5e76:	4620      	mov	r0, r4
   d5e78:	b01f      	add	sp, #124	; 0x7c
   d5e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5e7c <mbedtls_asn1_write_len>:
#define mbedtls_free       free
#endif

int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
{
    if( len < 0x80 )
   d5e7c:	6803      	ldr	r3, [r0, #0]
   d5e7e:	2a7f      	cmp	r2, #127	; 0x7f
   d5e80:	eba3 0101 	sub.w	r1, r3, r1
   d5e84:	d807      	bhi.n	d5e96 <mbedtls_asn1_write_len+0x1a>
    {
        if( *p - start < 1 )
   d5e86:	2900      	cmp	r1, #0
   d5e88:	dd69      	ble.n	d5f5e <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
   d5e8a:	1e59      	subs	r1, r3, #1
   d5e8c:	6001      	str	r1, [r0, #0]
   d5e8e:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 1 );
   d5e92:	2001      	movs	r0, #1
   d5e94:	4770      	bx	lr
    }

    if( len <= 0xFF )
   d5e96:	2aff      	cmp	r2, #255	; 0xff
   d5e98:	d80d      	bhi.n	d5eb6 <mbedtls_asn1_write_len+0x3a>
    {
        if( *p - start < 2 )
   d5e9a:	2901      	cmp	r1, #1
   d5e9c:	dd5f      	ble.n	d5f5e <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
   d5e9e:	1e59      	subs	r1, r3, #1
   d5ea0:	6001      	str	r1, [r0, #0]
   d5ea2:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x81;
   d5ea6:	6803      	ldr	r3, [r0, #0]
   d5ea8:	1e5a      	subs	r2, r3, #1
   d5eaa:	6002      	str	r2, [r0, #0]
   d5eac:	2281      	movs	r2, #129	; 0x81
   d5eae:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 2 );
   d5eb2:	2002      	movs	r0, #2
   d5eb4:	4770      	bx	lr
    }

    if( len <= 0xFFFF )
   d5eb6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   d5eba:	d213      	bcs.n	d5ee4 <mbedtls_asn1_write_len+0x68>
    {
        if( *p - start < 3 )
   d5ebc:	2902      	cmp	r1, #2
   d5ebe:	dd4e      	ble.n	d5f5e <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
   d5ec0:	1e59      	subs	r1, r3, #1
   d5ec2:	6001      	str	r1, [r0, #0]
   d5ec4:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
   d5ec8:	6803      	ldr	r3, [r0, #0]
   d5eca:	0a12      	lsrs	r2, r2, #8
   d5ecc:	1e59      	subs	r1, r3, #1
   d5ece:	6001      	str	r1, [r0, #0]
   d5ed0:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x82;
   d5ed4:	6803      	ldr	r3, [r0, #0]
   d5ed6:	1e5a      	subs	r2, r3, #1
   d5ed8:	6002      	str	r2, [r0, #0]
   d5eda:	2282      	movs	r2, #130	; 0x82
   d5edc:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 3 );
   d5ee0:	2003      	movs	r0, #3
   d5ee2:	4770      	bx	lr
    }

    if( len <= 0xFFFFFF )
   d5ee4:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   d5ee8:	d219      	bcs.n	d5f1e <mbedtls_asn1_write_len+0xa2>
    {
        if( *p - start < 4 )
   d5eea:	2903      	cmp	r1, #3
   d5eec:	dd37      	ble.n	d5f5e <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
   d5eee:	1e59      	subs	r1, r3, #1
   d5ef0:	6001      	str	r1, [r0, #0]
   d5ef2:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
   d5ef6:	6803      	ldr	r3, [r0, #0]
   d5ef8:	1e59      	subs	r1, r3, #1
   d5efa:	6001      	str	r1, [r0, #0]
   d5efc:	0a11      	lsrs	r1, r2, #8
   d5efe:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
   d5f02:	6803      	ldr	r3, [r0, #0]
   d5f04:	0c12      	lsrs	r2, r2, #16
   d5f06:	1e59      	subs	r1, r3, #1
   d5f08:	6001      	str	r1, [r0, #0]
   d5f0a:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x83;
   d5f0e:	6803      	ldr	r3, [r0, #0]
   d5f10:	1e5a      	subs	r2, r3, #1
   d5f12:	6002      	str	r2, [r0, #0]
   d5f14:	2283      	movs	r2, #131	; 0x83
   d5f16:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 4 );
   d5f1a:	2004      	movs	r0, #4
   d5f1c:	4770      	bx	lr

#if SIZE_MAX > 0xFFFFFFFF
    if( len <= 0xFFFFFFFF )
#endif
    {
        if( *p - start < 5 )
   d5f1e:	2904      	cmp	r1, #4
   d5f20:	dd1d      	ble.n	d5f5e <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
   d5f22:	1e59      	subs	r1, r3, #1
   d5f24:	6001      	str	r1, [r0, #0]
   d5f26:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
   d5f2a:	6803      	ldr	r3, [r0, #0]
   d5f2c:	1e59      	subs	r1, r3, #1
   d5f2e:	6001      	str	r1, [r0, #0]
   d5f30:	0a11      	lsrs	r1, r2, #8
   d5f32:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
   d5f36:	6803      	ldr	r3, [r0, #0]
   d5f38:	1e59      	subs	r1, r3, #1
   d5f3a:	6001      	str	r1, [r0, #0]
   d5f3c:	0c11      	lsrs	r1, r2, #16
   d5f3e:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 24 ) & 0xFF;
   d5f42:	6803      	ldr	r3, [r0, #0]
   d5f44:	0e12      	lsrs	r2, r2, #24
   d5f46:	1e59      	subs	r1, r3, #1
   d5f48:	6001      	str	r1, [r0, #0]
   d5f4a:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x84;
   d5f4e:	6803      	ldr	r3, [r0, #0]
   d5f50:	1e5a      	subs	r2, r3, #1
   d5f52:	6002      	str	r2, [r0, #0]
   d5f54:	2284      	movs	r2, #132	; 0x84
   d5f56:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 5 );
   d5f5a:	2005      	movs	r0, #5
   d5f5c:	4770      	bx	lr
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   d5f5e:	f06f 006b 	mvn.w	r0, #107	; 0x6b
    }

#if SIZE_MAX > 0xFFFFFFFF
    return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
#endif
}
   d5f62:	4770      	bx	lr

000d5f64 <mbedtls_asn1_write_tag>:

int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
{
    if( *p - start < 1 )
   d5f64:	6803      	ldr	r3, [r0, #0]
   d5f66:	1a59      	subs	r1, r3, r1
   d5f68:	2900      	cmp	r1, #0
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    *--(*p) = tag;
   d5f6a:	bfc1      	itttt	gt
   d5f6c:	f103 31ff 	addgt.w	r1, r3, #4294967295
   d5f70:	6001      	strgt	r1, [r0, #0]

    return( 1 );
   d5f72:	2001      	movgt	r0, #1
    *--(*p) = tag;
   d5f74:	f803 2c01 	strbgt.w	r2, [r3, #-1]
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   d5f78:	bfd8      	it	le
   d5f7a:	f06f 006b 	mvnle.w	r0, #107	; 0x6b
}
   d5f7e:	4770      	bx	lr

000d5f80 <mbedtls_asn1_write_mpi>:
    return( (int) len );
}

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_write_mpi( unsigned char **p, unsigned char *start, const mbedtls_mpi *X )
{
   d5f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5f84:	4607      	mov	r7, r0
    int ret;
    size_t len = 0;

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );
   d5f86:	4610      	mov	r0, r2
{
   d5f88:	4688      	mov	r8, r1
   d5f8a:	4615      	mov	r5, r2
    len = mbedtls_mpi_size( X );
   d5f8c:	f00a ff23 	bl	e0dd6 <mbedtls_mpi_size>

    if( *p < start || (size_t)( *p - start ) < len )
   d5f90:	6839      	ldr	r1, [r7, #0]
   d5f92:	4541      	cmp	r1, r8
    len = mbedtls_mpi_size( X );
   d5f94:	4606      	mov	r6, r0
    if( *p < start || (size_t)( *p - start ) < len )
   d5f96:	d204      	bcs.n	d5fa2 <mbedtls_asn1_write_mpi+0x22>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   d5f98:	f06f 046b 	mvn.w	r4, #107	; 0x6b

    ret = (int) len;

cleanup:
    return( ret );
}
   d5f9c:	4620      	mov	r0, r4
   d5f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( *p < start || (size_t)( *p - start ) < len )
   d5fa2:	eba1 0208 	sub.w	r2, r1, r8
   d5fa6:	4290      	cmp	r0, r2
   d5fa8:	d8f6      	bhi.n	d5f98 <mbedtls_asn1_write_mpi+0x18>
    (*p) -= len;
   d5faa:	1a09      	subs	r1, r1, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
   d5fac:	4602      	mov	r2, r0
    (*p) -= len;
   d5fae:	6039      	str	r1, [r7, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
   d5fb0:	4628      	mov	r0, r5
   d5fb2:	f00a ff4e 	bl	e0e52 <mbedtls_mpi_write_binary>
   d5fb6:	4604      	mov	r4, r0
   d5fb8:	2800      	cmp	r0, #0
   d5fba:	d1ef      	bne.n	d5f9c <mbedtls_asn1_write_mpi+0x1c>
    if( X->s ==1 && **p & 0x80 )
   d5fbc:	682b      	ldr	r3, [r5, #0]
   d5fbe:	2b01      	cmp	r3, #1
   d5fc0:	d10d      	bne.n	d5fde <mbedtls_asn1_write_mpi+0x5e>
   d5fc2:	683b      	ldr	r3, [r7, #0]
   d5fc4:	f993 2000 	ldrsb.w	r2, [r3]
   d5fc8:	2a00      	cmp	r2, #0
   d5fca:	da08      	bge.n	d5fde <mbedtls_asn1_write_mpi+0x5e>
        if( *p - start < 1 )
   d5fcc:	eba3 0208 	sub.w	r2, r3, r8
   d5fd0:	2a00      	cmp	r2, #0
   d5fd2:	dde1      	ble.n	d5f98 <mbedtls_asn1_write_mpi+0x18>
        *--(*p) = 0x00;
   d5fd4:	1e5a      	subs	r2, r3, #1
   d5fd6:	603a      	str	r2, [r7, #0]
        len += 1;
   d5fd8:	3601      	adds	r6, #1
        *--(*p) = 0x00;
   d5fda:	f803 0c01 	strb.w	r0, [r3, #-1]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
   d5fde:	4632      	mov	r2, r6
   d5fe0:	4641      	mov	r1, r8
   d5fe2:	4638      	mov	r0, r7
   d5fe4:	f7ff ff4a 	bl	d5e7c <mbedtls_asn1_write_len>
   d5fe8:	1e04      	subs	r4, r0, #0
   d5fea:	dbd7      	blt.n	d5f9c <mbedtls_asn1_write_mpi+0x1c>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
   d5fec:	2202      	movs	r2, #2
   d5fee:	4641      	mov	r1, r8
   d5ff0:	4638      	mov	r0, r7
   d5ff2:	f7ff ffb7 	bl	d5f64 <mbedtls_asn1_write_tag>
   d5ff6:	1e03      	subs	r3, r0, #0
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
   d5ff8:	bfa6      	itte	ge
   d5ffa:	19a0      	addge	r0, r4, r6
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
   d5ffc:	18c4      	addge	r4, r0, r3
    ret = (int) len;
   d5ffe:	461c      	movlt	r4, r3
   d6000:	e7cc      	b.n	d5f9c <mbedtls_asn1_write_mpi+0x1c>

000d6002 <mbedtls_ecdh_gen_public>:
 * Generate public key
 */
int mbedtls_ecdh_gen_public( mbedtls_ecp_group *grp, mbedtls_mpi *d, mbedtls_ecp_point *Q,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   d6002:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d6006:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   d600a:	461d      	mov	r5, r3
   d600c:	4616      	mov	r6, r2
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, d, f_rng, p_rng ) );
   d600e:	4643      	mov	r3, r8
   d6010:	462a      	mov	r2, r5
{
   d6012:	4604      	mov	r4, r0
   d6014:	460f      	mov	r7, r1
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, d, f_rng, p_rng ) );
   d6016:	f003 ff09 	bl	d9e2c <mbedtls_ecp_gen_privkey>
   d601a:	b948      	cbnz	r0, d6030 <mbedtls_ecdh_gen_public+0x2e>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, Q, d, &grp->G,
   d601c:	e9cd 8001 	strd	r8, r0, [sp, #4]
   d6020:	9500      	str	r5, [sp, #0]
   d6022:	f104 0328 	add.w	r3, r4, #40	; 0x28
   d6026:	463a      	mov	r2, r7
   d6028:	4631      	mov	r1, r6
   d602a:	4620      	mov	r0, r4
   d602c:	f003 fd3e 	bl	d9aac <mbedtls_ecp_mul_restartable>
    ECDH_VALIDATE_RET( grp != NULL );
    ECDH_VALIDATE_RET( d != NULL );
    ECDH_VALIDATE_RET( Q != NULL );
    ECDH_VALIDATE_RET( f_rng != NULL );
    return( ecdh_gen_public_restartable( grp, d, Q, f_rng, p_rng, NULL ) );
}
   d6030:	b004      	add	sp, #16
   d6032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d6038 <mbedtls_ecdh_compute_shared>:
 */
int mbedtls_ecdh_compute_shared( mbedtls_ecp_group *grp, mbedtls_mpi *z,
                         const mbedtls_ecp_point *Q, const mbedtls_mpi *d,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng )
{
   d6038:	b570      	push	{r4, r5, r6, lr}
   d603a:	b090      	sub	sp, #64	; 0x40
   d603c:	4604      	mov	r4, r0
    mbedtls_ecp_point_init( &P );
   d603e:	a807      	add	r0, sp, #28
{
   d6040:	4616      	mov	r6, r2
   d6042:	460d      	mov	r5, r1
   d6044:	9305      	str	r3, [sp, #20]
    mbedtls_ecp_point_init( &P );
   d6046:	f002 ff63 	bl	d8f10 <mbedtls_ecp_point_init>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &P, d, Q,
   d604a:	2300      	movs	r3, #0
   d604c:	9302      	str	r3, [sp, #8]
   d604e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d6050:	9301      	str	r3, [sp, #4]
   d6052:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d6054:	9300      	str	r3, [sp, #0]
   d6056:	4620      	mov	r0, r4
   d6058:	9a05      	ldr	r2, [sp, #20]
   d605a:	4633      	mov	r3, r6
   d605c:	a907      	add	r1, sp, #28
   d605e:	f003 fd25 	bl	d9aac <mbedtls_ecp_mul_restartable>
   d6062:	4604      	mov	r4, r0
   d6064:	b940      	cbnz	r0, d6078 <mbedtls_ecdh_compute_shared+0x40>
    if( mbedtls_ecp_is_zero( &P ) )
   d6066:	a807      	add	r0, sp, #28
   d6068:	f003 fb6a 	bl	d9740 <mbedtls_ecp_is_zero>
   d606c:	b950      	cbnz	r0, d6084 <mbedtls_ecdh_compute_shared+0x4c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( z, &P.X ) );
   d606e:	a907      	add	r1, sp, #28
   d6070:	4628      	mov	r0, r5
   d6072:	f00a fdef 	bl	e0c54 <mbedtls_mpi_copy>
   d6076:	4604      	mov	r4, r0
    mbedtls_ecp_point_free( &P );
   d6078:	a807      	add	r0, sp, #28
   d607a:	f002 ff86 	bl	d8f8a <mbedtls_ecp_point_free>
    ECDH_VALIDATE_RET( Q != NULL );
    ECDH_VALIDATE_RET( d != NULL );
    ECDH_VALIDATE_RET( z != NULL );
    return( ecdh_compute_shared_restartable( grp, z, Q, d,
                                             f_rng, p_rng, NULL ) );
}
   d607e:	4620      	mov	r0, r4
   d6080:	b010      	add	sp, #64	; 0x40
   d6082:	bd70      	pop	{r4, r5, r6, pc}
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   d6084:	4c00      	ldr	r4, [pc, #0]	; (d6088 <mbedtls_ecdh_compute_shared+0x50>)
   d6086:	e7f7      	b.n	d6078 <mbedtls_ecdh_compute_shared+0x40>
   d6088:	ffffb080 	.word	0xffffb080

000d608c <mbedtls_ecdh_init>:

/*
 * Initialize context
 */
void mbedtls_ecdh_init( mbedtls_ecdh_context *ctx )
{
   d608c:	b510      	push	{r4, lr}
   d608e:	4604      	mov	r4, r0
    mbedtls_ecp_group_init( &ctx->grp );
   d6090:	f002 ff4c 	bl	d8f2c <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &ctx->d  );
   d6094:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   d6098:	f00a fd5f 	bl	e0b5a <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &ctx->Q   );
   d609c:	f104 0088 	add.w	r0, r4, #136	; 0x88
   d60a0:	f002 ff36 	bl	d8f10 <mbedtls_ecp_point_init>
    mbedtls_ecp_point_init( &ctx->Qp  );
   d60a4:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   d60a8:	f002 ff32 	bl	d8f10 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &ctx->z  );
   d60ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   d60b0:	f00a fd53 	bl	e0b5a <mbedtls_mpi_init>
    ECDH_VALIDATE( ctx != NULL );

#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    ecdh_init_internal( ctx );
    mbedtls_ecp_point_init( &ctx->Vi  );
   d60b4:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   d60b8:	f002 ff2a 	bl	d8f10 <mbedtls_ecp_point_init>
    mbedtls_ecp_point_init( &ctx->Vf  );
   d60bc:	f504 7082 	add.w	r0, r4, #260	; 0x104
   d60c0:	f002 ff26 	bl	d8f10 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &ctx->_d );
   d60c4:	f504 7094 	add.w	r0, r4, #296	; 0x128
   d60c8:	f00a fd47 	bl	e0b5a <mbedtls_mpi_init>
#else
    memset( ctx, 0, sizeof( mbedtls_ecdh_context ) );

    ctx->var = MBEDTLS_ECDH_VARIANT_NONE;
#endif
    ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
   d60cc:	2300      	movs	r3, #0
   d60ce:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
#if defined(MBEDTLS_ECP_RESTARTABLE)
    ctx->restart_enabled = 0;
#endif
}
   d60d2:	bd10      	pop	{r4, pc}

000d60d4 <mbedtls_ecdh_free>:

/*
 * Free context
 */
void mbedtls_ecdh_free( mbedtls_ecdh_context *ctx )
{
   d60d4:	b510      	push	{r4, lr}
    if( ctx == NULL )
   d60d6:	4604      	mov	r4, r0
   d60d8:	b1f8      	cbz	r0, d611a <mbedtls_ecdh_free+0x46>
        return;

#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    mbedtls_ecp_point_free( &ctx->Vi );
   d60da:	30e0      	adds	r0, #224	; 0xe0
   d60dc:	f002 ff55 	bl	d8f8a <mbedtls_ecp_point_free>
    mbedtls_ecp_point_free( &ctx->Vf );
   d60e0:	f504 7082 	add.w	r0, r4, #260	; 0x104
   d60e4:	f002 ff51 	bl	d8f8a <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &ctx->_d );
   d60e8:	f504 7094 	add.w	r0, r4, #296	; 0x128
   d60ec:	f00a fd3b 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_ecp_group_free( &ctx->grp );
   d60f0:	4620      	mov	r0, r4
   d60f2:	f002 ff4e 	bl	d8f92 <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &ctx->d  );
   d60f6:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   d60fa:	f00a fd34 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &ctx->Q   );
   d60fe:	f104 0088 	add.w	r0, r4, #136	; 0x88
   d6102:	f002 ff42 	bl	d8f8a <mbedtls_ecp_point_free>
    mbedtls_ecp_point_free( &ctx->Qp  );
   d6106:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   d610a:	f002 ff3e 	bl	d8f8a <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &ctx->z  );
   d610e:	f104 00d0 	add.w	r0, r4, #208	; 0xd0

    ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
    ctx->var = MBEDTLS_ECDH_VARIANT_NONE;
    ctx->grp_id = MBEDTLS_ECP_DP_NONE;
#endif
}
   d6112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->z  );
   d6116:	f00a bd26 	b.w	e0b66 <mbedtls_mpi_free>
}
   d611a:	bd10      	pop	{r4, pc}

000d611c <mbedtls_ecdh_read_params>:
 *      } ServerECDHParams;
 */
int mbedtls_ecdh_read_params( mbedtls_ecdh_context *ctx,
                              const unsigned char **buf,
                              const unsigned char *end )
{
   d611c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d611e:	4616      	mov	r6, r2
    ECDH_VALIDATE_RET( ctx != NULL );
    ECDH_VALIDATE_RET( buf != NULL );
    ECDH_VALIDATE_RET( *buf != NULL );
    ECDH_VALIDATE_RET( end != NULL );

    if( ( ret = mbedtls_ecp_tls_read_group_id( &grp_id, buf, end - *buf ) )
   d6120:	680a      	ldr	r2, [r1, #0]
{
   d6122:	4604      	mov	r4, r0
    if( ( ret = mbedtls_ecp_tls_read_group_id( &grp_id, buf, end - *buf ) )
   d6124:	1ab2      	subs	r2, r6, r2
   d6126:	f10d 0007 	add.w	r0, sp, #7
{
   d612a:	460d      	mov	r5, r1
    if( ( ret = mbedtls_ecp_tls_read_group_id( &grp_id, buf, end - *buf ) )
   d612c:	f003 fbc8 	bl	d98c0 <mbedtls_ecp_tls_read_group_id>
   d6130:	b968      	cbnz	r0, d614e <mbedtls_ecdh_read_params+0x32>
    ret = mbedtls_ecp_group_load( &ctx->grp, grp_id );
   d6132:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d6136:	4620      	mov	r0, r4
   d6138:	f007 fa56 	bl	dd5e8 <mbedtls_ecp_group_load>
    if( ret != 0 )
   d613c:	b948      	cbnz	r0, d6152 <mbedtls_ecdh_read_params+0x36>
                                        end - *buf ) );
   d613e:	682b      	ldr	r3, [r5, #0]
    return( mbedtls_ecp_tls_read_point( &ctx->grp, &ctx->Qp, buf,
   d6140:	462a      	mov	r2, r5
   d6142:	1af3      	subs	r3, r6, r3
   d6144:	f104 01ac 	add.w	r1, r4, #172	; 0xac
   d6148:	4620      	mov	r0, r4
   d614a:	f003 fb89 	bl	d9860 <mbedtls_ecp_tls_read_point>
                                               buf, end ) );
        default:
            return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
    }
#endif
}
   d614e:	b002      	add	sp, #8
   d6150:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   d6152:	4801      	ldr	r0, [pc, #4]	; (d6158 <mbedtls_ecdh_read_params+0x3c>)
   d6154:	e7fb      	b.n	d614e <mbedtls_ecdh_read_params+0x32>
   d6156:	bf00      	nop
   d6158:	ffffb180 	.word	0xffffb180

000d615c <mbedtls_ecdh_make_public>:
 */
int mbedtls_ecdh_make_public( mbedtls_ecdh_context *ctx, size_t *olen,
                              unsigned char *buf, size_t blen,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng )
{
   d615c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d6160:	460d      	mov	r5, r1
    if( ctx->grp.pbits == 0 )
   d6162:	6d81      	ldr	r1, [r0, #88]	; 0x58
#if defined(MBEDTLS_ECP_RESTARTABLE)
    restart_enabled = ctx->restart_enabled;
#endif

#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    return( ecdh_make_public_internal( ctx, olen, ctx->point_format, buf, blen,
   d6164:	f8d0 90dc 	ldr.w	r9, [r0, #220]	; 0xdc
{
   d6168:	4616      	mov	r6, r2
   d616a:	461f      	mov	r7, r3
   d616c:	4604      	mov	r4, r0
   d616e:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
    if( ctx->grp.pbits == 0 )
   d6172:	b199      	cbz	r1, d619c <mbedtls_ecdh_make_public+0x40>
    if( ( ret = mbedtls_ecdh_gen_public( &ctx->grp, &ctx->d, &ctx->Q,
   d6174:	f100 0888 	add.w	r8, r0, #136	; 0x88
   d6178:	9200      	str	r2, [sp, #0]
   d617a:	f100 017c 	add.w	r1, r0, #124	; 0x7c
   d617e:	4642      	mov	r2, r8
   d6180:	f7ff ff3f 	bl	d6002 <mbedtls_ecdh_gen_public>
   d6184:	b958      	cbnz	r0, d619e <mbedtls_ecdh_make_public+0x42>
    return mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, point_format, olen,
   d6186:	462b      	mov	r3, r5
   d6188:	464a      	mov	r2, r9
   d618a:	4641      	mov	r1, r8
   d618c:	4620      	mov	r0, r4
   d618e:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
                                               restart_enabled ) );
        default:
            return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
    }
#endif
}
   d6192:	b003      	add	sp, #12
   d6194:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, point_format, olen,
   d6198:	f003 bb7a 	b.w	d9890 <mbedtls_ecp_tls_write_point>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d619c:	4801      	ldr	r0, [pc, #4]	; (d61a4 <mbedtls_ecdh_make_public+0x48>)
}
   d619e:	b003      	add	sp, #12
   d61a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d61a4:	ffffb080 	.word	0xffffb080

000d61a8 <mbedtls_ecdh_calc_secret>:
 */
int mbedtls_ecdh_calc_secret( mbedtls_ecdh_context *ctx, size_t *olen,
                              unsigned char *buf, size_t blen,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng )
{
   d61a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d61ac:	4616      	mov	r6, r2
   d61ae:	4698      	mov	r8, r3
   d61b0:	460f      	mov	r7, r1
   d61b2:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
    if( ctx == NULL || ctx->grp.pbits == 0 )
   d61b6:	4604      	mov	r4, r0
   d61b8:	b918      	cbnz	r0, d61c2 <mbedtls_ecdh_calc_secret+0x1a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d61ba:	4814      	ldr	r0, [pc, #80]	; (d620c <mbedtls_ecdh_calc_secret+0x64>)
                                               restart_enabled ) );
        default:
            return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }
#endif
}
   d61bc:	b002      	add	sp, #8
   d61be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ctx == NULL || ctx->grp.pbits == 0 )
   d61c2:	6d81      	ldr	r1, [r0, #88]	; 0x58
   d61c4:	2900      	cmp	r1, #0
   d61c6:	d0f8      	beq.n	d61ba <mbedtls_ecdh_calc_secret+0x12>
    if( ( ret = mbedtls_ecdh_compute_shared( &ctx->grp, &ctx->z, &ctx->Qp,
   d61c8:	f100 05d0 	add.w	r5, r0, #208	; 0xd0
   d61cc:	e9cd 3200 	strd	r3, r2, [sp]
   d61d0:	4629      	mov	r1, r5
   d61d2:	f100 037c 	add.w	r3, r0, #124	; 0x7c
   d61d6:	f100 02ac 	add.w	r2, r0, #172	; 0xac
   d61da:	f7ff ff2d 	bl	d6038 <mbedtls_ecdh_compute_shared>
   d61de:	2800      	cmp	r0, #0
   d61e0:	d1ec      	bne.n	d61bc <mbedtls_ecdh_calc_secret+0x14>
    if( mbedtls_mpi_size( &ctx->z ) > blen )
   d61e2:	4628      	mov	r0, r5
   d61e4:	f00a fdf7 	bl	e0dd6 <mbedtls_mpi_size>
   d61e8:	4580      	cmp	r8, r0
   d61ea:	d3e6      	bcc.n	d61ba <mbedtls_ecdh_calc_secret+0x12>
    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
   d61ec:	6da2      	ldr	r2, [r4, #88]	; 0x58
   d61ee:	f012 0307 	ands.w	r3, r2, #7
   d61f2:	bf18      	it	ne
   d61f4:	2301      	movne	r3, #1
   d61f6:	eb03 02d2 	add.w	r2, r3, r2, lsr #3
    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );
   d61fa:	4631      	mov	r1, r6
   d61fc:	4628      	mov	r0, r5
    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
   d61fe:	603a      	str	r2, [r7, #0]
}
   d6200:	b002      	add	sp, #8
   d6202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );
   d6206:	f00a be24 	b.w	e0e52 <mbedtls_mpi_write_binary>
   d620a:	bf00      	nop
   d620c:	ffffb080 	.word	0xffffb080

000d6210 <mbedtls_cipher_info_from_type>:

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_type( const mbedtls_cipher_type_t cipher_type )
{
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
   d6210:	4b04      	ldr	r3, [pc, #16]	; (d6224 <mbedtls_cipher_info_from_type+0x14>)
   d6212:	685a      	ldr	r2, [r3, #4]
   d6214:	b122      	cbz	r2, d6220 <mbedtls_cipher_info_from_type+0x10>
        if( def->type == cipher_type )
   d6216:	7819      	ldrb	r1, [r3, #0]
   d6218:	4281      	cmp	r1, r0
   d621a:	d001      	beq.n	d6220 <mbedtls_cipher_info_from_type+0x10>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
   d621c:	3308      	adds	r3, #8
   d621e:	e7f8      	b.n	d6212 <mbedtls_cipher_info_from_type+0x2>
            return( def->info );

    return( NULL );
}
   d6220:	4610      	mov	r0, r2
   d6222:	4770      	bx	lr
   d6224:	000ec90c 	.word	0x000ec90c

000d6228 <mbedtls_cipher_info_from_values>:
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
   d6228:	4b08      	ldr	r3, [pc, #32]	; (d624c <mbedtls_cipher_info_from_values+0x24>)
{
   d622a:	b530      	push	{r4, r5, lr}
   d622c:	4604      	mov	r4, r0
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
   d622e:	6858      	ldr	r0, [r3, #4]
   d6230:	b158      	cbz	r0, d624a <mbedtls_cipher_info_from_values+0x22>
        if( def->info->base->cipher == cipher_id &&
   d6232:	6985      	ldr	r5, [r0, #24]
   d6234:	782d      	ldrb	r5, [r5, #0]
   d6236:	42a5      	cmp	r5, r4
   d6238:	d105      	bne.n	d6246 <mbedtls_cipher_info_from_values+0x1e>
   d623a:	6845      	ldr	r5, [r0, #4]
   d623c:	428d      	cmp	r5, r1
   d623e:	d102      	bne.n	d6246 <mbedtls_cipher_info_from_values+0x1e>
            def->info->key_bitlen == (unsigned) key_bitlen &&
   d6240:	7845      	ldrb	r5, [r0, #1]
   d6242:	4295      	cmp	r5, r2
   d6244:	d001      	beq.n	d624a <mbedtls_cipher_info_from_values+0x22>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
   d6246:	3308      	adds	r3, #8
   d6248:	e7f1      	b.n	d622e <mbedtls_cipher_info_from_values+0x6>
            def->info->mode == mode )
            return( def->info );

    return( NULL );
}
   d624a:	bd30      	pop	{r4, r5, pc}
   d624c:	000ec90c 	.word	0x000ec90c

000d6250 <mbedtls_cipher_init>:

void mbedtls_cipher_init( mbedtls_cipher_context_t *ctx )
{
    CIPHER_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
   d6250:	2238      	movs	r2, #56	; 0x38
   d6252:	2100      	movs	r1, #0
   d6254:	f012 bdf2 	b.w	e8e3c <memset>

000d6258 <mbedtls_cipher_free>:
}

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
   d6258:	b510      	push	{r4, lr}
    if( ctx == NULL )
   d625a:	4604      	mov	r4, r0
   d625c:	b158      	cbz	r0, d6276 <mbedtls_cipher_free+0x1e>
                                 sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
    }
#endif

    if( ctx->cipher_ctx )
   d625e:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d6260:	b118      	cbz	r0, d626a <mbedtls_cipher_free+0x12>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
   d6262:	6823      	ldr	r3, [r4, #0]
   d6264:	699b      	ldr	r3, [r3, #24]
   d6266:	695b      	ldr	r3, [r3, #20]
   d6268:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
   d626a:	4620      	mov	r0, r4
   d626c:	2138      	movs	r1, #56	; 0x38
}
   d626e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
   d6272:	f00c bca7 	b.w	e2bc4 <mbedtls_platform_zeroize>
}
   d6276:	bd10      	pop	{r4, pc}

000d6278 <mbedtls_cipher_setup>:

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
   d6278:	b538      	push	{r3, r4, r5, lr}
   d627a:	4605      	mov	r5, r0
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( cipher_info == NULL )
   d627c:	460c      	mov	r4, r1
   d627e:	b159      	cbz	r1, d6298 <mbedtls_cipher_setup+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
   d6280:	2238      	movs	r2, #56	; 0x38
   d6282:	2100      	movs	r1, #0
   d6284:	f012 fdda 	bl	e8e3c <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
   d6288:	69a3      	ldr	r3, [r4, #24]
   d628a:	691b      	ldr	r3, [r3, #16]
   d628c:	4798      	blx	r3
   d628e:	6368      	str	r0, [r5, #52]	; 0x34
   d6290:	b120      	cbz	r0, d629c <mbedtls_cipher_setup+0x24>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );

    ctx->cipher_info = cipher_info;
   d6292:	602c      	str	r4, [r5, #0]
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
   d6294:	2000      	movs	r0, #0
}
   d6296:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d6298:	4801      	ldr	r0, [pc, #4]	; (d62a0 <mbedtls_cipher_setup+0x28>)
   d629a:	e7fc      	b.n	d6296 <mbedtls_cipher_setup+0x1e>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
   d629c:	4801      	ldr	r0, [pc, #4]	; (d62a4 <mbedtls_cipher_setup+0x2c>)
   d629e:	e7fa      	b.n	d6296 <mbedtls_cipher_setup+0x1e>
   d62a0:	ffff9f00 	.word	0xffff9f00
   d62a4:	ffff9e80 	.word	0xffff9e80

000d62a8 <mbedtls_cipher_setkey>:

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx,
                           const unsigned char *key,
                           int key_bitlen,
                           const mbedtls_operation_t operation )
{
   d62a8:	b430      	push	{r4, r5}
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( key != NULL );
    CIPHER_VALIDATE_RET( operation == MBEDTLS_ENCRYPT ||
                         operation == MBEDTLS_DECRYPT );
    if( ctx->cipher_info == NULL )
   d62aa:	6804      	ldr	r4, [r0, #0]
   d62ac:	b1b4      	cbz	r4, d62dc <mbedtls_cipher_setkey+0x34>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
   d62ae:	6925      	ldr	r5, [r4, #16]
   d62b0:	07ad      	lsls	r5, r5, #30
   d62b2:	d402      	bmi.n	d62ba <mbedtls_cipher_setkey+0x12>
   d62b4:	6865      	ldr	r5, [r4, #4]
   d62b6:	4295      	cmp	r5, r2
   d62b8:	d110      	bne.n	d62dc <mbedtls_cipher_setkey+0x34>
    ctx->operation = operation;

    /*
     * For OFB, CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
   d62ba:	2b01      	cmp	r3, #1
    ctx->key_bitlen = key_bitlen;
   d62bc:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
   d62be:	7203      	strb	r3, [r0, #8]
    if( MBEDTLS_ENCRYPT == operation ||
   d62c0:	d003      	beq.n	d62ca <mbedtls_cipher_setkey+0x22>
   d62c2:	7865      	ldrb	r5, [r4, #1]
   d62c4:	3d03      	subs	r5, #3
   d62c6:	2d02      	cmp	r5, #2
   d62c8:	d804      	bhi.n	d62d4 <mbedtls_cipher_setkey+0x2c>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
    {
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
   d62ca:	69a3      	ldr	r3, [r4, #24]
   d62cc:	689b      	ldr	r3, [r3, #8]
                                                         ctx->key_bitlen ) );
    }

    if( MBEDTLS_DECRYPT == operation )
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
   d62ce:	6b40      	ldr	r0, [r0, #52]	; 0x34
                                                         ctx->key_bitlen ) );

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
   d62d0:	bc30      	pop	{r4, r5}
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
   d62d2:	4718      	bx	r3
    if( MBEDTLS_DECRYPT == operation )
   d62d4:	b913      	cbnz	r3, d62dc <mbedtls_cipher_setkey+0x34>
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
   d62d6:	69a3      	ldr	r3, [r4, #24]
   d62d8:	68db      	ldr	r3, [r3, #12]
   d62da:	e7f8      	b.n	d62ce <mbedtls_cipher_setkey+0x26>
}
   d62dc:	4801      	ldr	r0, [pc, #4]	; (d62e4 <mbedtls_cipher_setkey+0x3c>)
   d62de:	bc30      	pop	{r4, r5}
   d62e0:	4770      	bx	lr
   d62e2:	bf00      	nop
   d62e4:	ffff9f00 	.word	0xffff9f00

000d62e8 <mbedtls_cipher_set_iv>:

int mbedtls_cipher_set_iv( mbedtls_cipher_context_t *ctx,
                           const unsigned char *iv,
                           size_t iv_len )
{
   d62e8:	b538      	push	{r3, r4, r5, lr}
    size_t actual_iv_size;

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( iv_len == 0 || iv != NULL );
    if( ctx->cipher_info == NULL )
   d62ea:	6803      	ldr	r3, [r0, #0]
{
   d62ec:	4605      	mov	r5, r0
   d62ee:	4614      	mov	r4, r2
    if( ctx->cipher_info == NULL )
   d62f0:	b19b      	cbz	r3, d631a <mbedtls_cipher_set_iv+0x32>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
   d62f2:	2a10      	cmp	r2, #16
   d62f4:	d80f      	bhi.n	d6316 <mbedtls_cipher_set_iv+0x2e>
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
   d62f6:	691a      	ldr	r2, [r3, #16]
   d62f8:	07d2      	lsls	r2, r2, #31
   d62fa:	d403      	bmi.n	d6304 <mbedtls_cipher_set_iv+0x1c>
        actual_iv_size = iv_len;
    else
    {
        actual_iv_size = ctx->cipher_info->iv_size;
   d62fc:	68db      	ldr	r3, [r3, #12]

        /* avoid reading past the end of input buffer */
        if( actual_iv_size > iv_len )
   d62fe:	429c      	cmp	r4, r3
   d6300:	d30b      	bcc.n	d631a <mbedtls_cipher_set_iv+0x32>
   d6302:	461c      	mov	r4, r3
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
        }
    }
#endif

    if ( actual_iv_size != 0 )
   d6304:	b15c      	cbz	r4, d631e <mbedtls_cipher_set_iv+0x36>
    {
        memcpy( ctx->iv, iv, actual_iv_size );
   d6306:	4622      	mov	r2, r4
   d6308:	f105 0020 	add.w	r0, r5, #32
   d630c:	f012 fd6e 	bl	e8dec <memcpy>
        ctx->iv_size = actual_iv_size;
   d6310:	632c      	str	r4, [r5, #48]	; 0x30
    }

    return( 0 );
   d6312:	2000      	movs	r0, #0
}
   d6314:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
   d6316:	4803      	ldr	r0, [pc, #12]	; (d6324 <mbedtls_cipher_set_iv+0x3c>)
   d6318:	e7fc      	b.n	d6314 <mbedtls_cipher_set_iv+0x2c>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d631a:	4803      	ldr	r0, [pc, #12]	; (d6328 <mbedtls_cipher_set_iv+0x40>)
   d631c:	e7fa      	b.n	d6314 <mbedtls_cipher_set_iv+0x2c>
    return( 0 );
   d631e:	4620      	mov	r0, r4
   d6320:	e7f8      	b.n	d6314 <mbedtls_cipher_set_iv+0x2c>
   d6322:	bf00      	nop
   d6324:	ffff9f80 	.word	0xffff9f80
   d6328:	ffff9f00 	.word	0xffff9f00

000d632c <mbedtls_cipher_reset>:

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( ctx->cipher_info == NULL )
   d632c:	6803      	ldr	r3, [r0, #0]
   d632e:	b11b      	cbz	r3, d6338 <mbedtls_cipher_reset+0xc>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    ctx->unprocessed_len = 0;
   d6330:	2300      	movs	r3, #0
   d6332:	61c3      	str	r3, [r0, #28]

    return( 0 );
   d6334:	4618      	mov	r0, r3
   d6336:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d6338:	4800      	ldr	r0, [pc, #0]	; (d633c <mbedtls_cipher_reset+0x10>)
}
   d633a:	4770      	bx	lr
   d633c:	ffff9f00 	.word	0xffff9f00

000d6340 <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
   d6340:	b470      	push	{r4, r5, r6}
   d6342:	4614      	mov	r4, r2

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
   d6344:	6802      	ldr	r2, [r0, #0]
{
   d6346:	9e03      	ldr	r6, [sp, #12]
    if( ctx->cipher_info == NULL )
   d6348:	b34a      	cbz	r2, d639e <mbedtls_cipher_update+0x5e>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
   d634a:	2200      	movs	r2, #0
   d634c:	6032      	str	r2, [r6, #0]
    block_size = mbedtls_cipher_get_block_size( ctx );
   d634e:	6805      	ldr	r5, [r0, #0]
 */
static inline unsigned int mbedtls_cipher_get_block_size(
    const mbedtls_cipher_context_t *ctx )
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
   d6350:	b185      	cbz	r5, d6374 <mbedtls_cipher_update+0x34>
        return 0;

    return ctx->cipher_info->block_size;
   d6352:	696a      	ldr	r2, [r5, #20]

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
   d6354:	786d      	ldrb	r5, [r5, #1]
   d6356:	2d01      	cmp	r5, #1
   d6358:	d10e      	bne.n	d6378 <mbedtls_cipher_update+0x38>
    {
        if( ilen != block_size )
   d635a:	4294      	cmp	r4, r2
   d635c:	d122      	bne.n	d63a4 <mbedtls_cipher_update+0x64>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;
   d635e:	6034      	str	r4, [r6, #0]

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
   d6360:	6802      	ldr	r2, [r0, #0]
   d6362:	6992      	ldr	r2, [r2, #24]
   d6364:	6854      	ldr	r4, [r2, #4]
   d6366:	460a      	mov	r2, r1
   d6368:	46a4      	mov	ip, r4
   d636a:	f990 1008 	ldrsb.w	r1, [r0, #8]
   d636e:	6b40      	ldr	r0, [r0, #52]	; 0x34
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
   d6370:	bc70      	pop	{r4, r5, r6}
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
   d6372:	4760      	bx	ip
        return 0;
   d6374:	462a      	mov	r2, r5
   d6376:	e7ed      	b.n	d6354 <mbedtls_cipher_update+0x14>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
   d6378:	2d06      	cmp	r5, #6
   d637a:	d106      	bne.n	d638a <mbedtls_cipher_update+0x4a>
        *olen = ilen;
   d637c:	6034      	str	r4, [r6, #0]
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
   d637e:	460a      	mov	r2, r1
   d6380:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d6382:	4621      	mov	r1, r4
}
   d6384:	bc70      	pop	{r4, r5, r6}
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
   d6386:	f006 bb99 	b.w	dcabc <mbedtls_gcm_update>
    if ( 0 == block_size )
   d638a:	b16a      	cbz	r2, d63a8 <mbedtls_cipher_update+0x68>
    if( input == output &&
   d638c:	4299      	cmp	r1, r3
   d638e:	d10d      	bne.n	d63ac <mbedtls_cipher_update+0x6c>
   d6390:	69c3      	ldr	r3, [r0, #28]
   d6392:	b923      	cbnz	r3, d639e <mbedtls_cipher_update+0x5e>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
   d6394:	fbb4 f1f2 	udiv	r1, r4, r2
   d6398:	fb02 4211 	mls	r2, r2, r1, r4
   d639c:	b132      	cbz	r2, d63ac <mbedtls_cipher_update+0x6c>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d639e:	4804      	ldr	r0, [pc, #16]	; (d63b0 <mbedtls_cipher_update+0x70>)
}
   d63a0:	bc70      	pop	{r4, r5, r6}
   d63a2:	4770      	bx	lr
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
   d63a4:	4803      	ldr	r0, [pc, #12]	; (d63b4 <mbedtls_cipher_update+0x74>)
   d63a6:	e7fb      	b.n	d63a0 <mbedtls_cipher_update+0x60>
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
   d63a8:	4803      	ldr	r0, [pc, #12]	; (d63b8 <mbedtls_cipher_update+0x78>)
   d63aa:	e7f9      	b.n	d63a0 <mbedtls_cipher_update+0x60>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
   d63ac:	4803      	ldr	r0, [pc, #12]	; (d63bc <mbedtls_cipher_update+0x7c>)
   d63ae:	e7f7      	b.n	d63a0 <mbedtls_cipher_update+0x60>
   d63b0:	ffff9f00 	.word	0xffff9f00
   d63b4:	ffff9d80 	.word	0xffff9d80
   d63b8:	ffff9c80 	.word	0xffff9c80
   d63bc:	ffff9f80 	.word	0xffff9f80

000d63c0 <mbedtls_cipher_finish>:
}
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
   d63c0:	b510      	push	{r4, lr}
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
   d63c2:	6801      	ldr	r1, [r0, #0]
{
   d63c4:	4603      	mov	r3, r0
    if( ctx->cipher_info == NULL )
   d63c6:	b1a9      	cbz	r1, d63f4 <mbedtls_cipher_finish+0x34>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
   d63c8:	2000      	movs	r0, #0
   d63ca:	6010      	str	r0, [r2, #0]

    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
   d63cc:	6819      	ldr	r1, [r3, #0]
   d63ce:	784a      	ldrb	r2, [r1, #1]
   d63d0:	1ed4      	subs	r4, r2, #3
   d63d2:	2c04      	cmp	r4, #4
   d63d4:	d90d      	bls.n	d63f2 <mbedtls_cipher_finish+0x32>
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode ||
        MBEDTLS_MODE_GCM == ctx->cipher_info->mode ||
   d63d6:	2a09      	cmp	r2, #9
   d63d8:	d00b      	beq.n	d63f2 <mbedtls_cipher_finish+0x32>
        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )
    {
        return( 0 );
    }

    if ( ( MBEDTLS_CIPHER_CHACHA20          == ctx->cipher_info->type ) ||
   d63da:	7809      	ldrb	r1, [r1, #0]
   d63dc:	3948      	subs	r1, #72	; 0x48
   d63de:	2901      	cmp	r1, #1
   d63e0:	d907      	bls.n	d63f2 <mbedtls_cipher_finish+0x32>
         ( MBEDTLS_CIPHER_CHACHA20_POLY1305 == ctx->cipher_info->type ) )
    {
        return( 0 );
    }

    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
   d63e2:	2a01      	cmp	r2, #1
   d63e4:	d108      	bne.n	d63f8 <mbedtls_cipher_finish+0x38>
    {
        if( ctx->unprocessed_len != 0 )
   d63e6:	69db      	ldr	r3, [r3, #28]
   d63e8:	4283      	cmp	r3, r0
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
   d63ea:	f5a0 40c5 	sub.w	r0, r0, #25216	; 0x6280
   d63ee:	bf08      	it	eq
   d63f0:	2000      	moveq	r0, #0
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
   d63f2:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d63f4:	4801      	ldr	r0, [pc, #4]	; (d63fc <mbedtls_cipher_finish+0x3c>)
   d63f6:	e7fc      	b.n	d63f2 <mbedtls_cipher_finish+0x32>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
   d63f8:	4801      	ldr	r0, [pc, #4]	; (d6400 <mbedtls_cipher_finish+0x40>)
   d63fa:	e7fa      	b.n	d63f2 <mbedtls_cipher_finish+0x32>
   d63fc:	ffff9f00 	.word	0xffff9f00
   d6400:	ffff9f80 	.word	0xffff9f80

000d6404 <mbedtls_cipher_crypt>:
 */
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen )
{
   d6404:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6406:	b085      	sub	sp, #20
   d6408:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
   d640c:	4604      	mov	r4, r0
   d640e:	461e      	mov	r6, r3
    CIPHER_VALIDATE_RET( iv_len == 0 || iv != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );

    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )
   d6410:	f7ff ff6a 	bl	d62e8 <mbedtls_cipher_set_iv>
   d6414:	b9a8      	cbnz	r0, d6442 <mbedtls_cipher_crypt+0x3e>
    if( ctx->cipher_info == NULL )
   d6416:	6823      	ldr	r3, [r4, #0]
   d6418:	b1ab      	cbz	r3, d6446 <mbedtls_cipher_crypt+0x42>
    ctx->unprocessed_len = 0;
   d641a:	61e0      	str	r0, [r4, #28]
        return( ret );

    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_cipher_update( ctx, input, ilen, output, olen ) ) != 0 )
   d641c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d641e:	9500      	str	r5, [sp, #0]
   d6420:	463b      	mov	r3, r7
   d6422:	4631      	mov	r1, r6
   d6424:	4620      	mov	r0, r4
   d6426:	f7ff ff8b 	bl	d6340 <mbedtls_cipher_update>
   d642a:	b950      	cbnz	r0, d6442 <mbedtls_cipher_crypt+0x3e>
        return( ret );

    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen, &finish_olen ) ) != 0 )
   d642c:	6829      	ldr	r1, [r5, #0]
   d642e:	aa03      	add	r2, sp, #12
   d6430:	4439      	add	r1, r7
   d6432:	4620      	mov	r0, r4
   d6434:	f7ff ffc4 	bl	d63c0 <mbedtls_cipher_finish>
   d6438:	b918      	cbnz	r0, d6442 <mbedtls_cipher_crypt+0x3e>
        return( ret );

    *olen += finish_olen;
   d643a:	682b      	ldr	r3, [r5, #0]
   d643c:	9a03      	ldr	r2, [sp, #12]
   d643e:	4413      	add	r3, r2
   d6440:	602b      	str	r3, [r5, #0]

    return( 0 );
}
   d6442:	b005      	add	sp, #20
   d6444:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
   d6446:	4801      	ldr	r0, [pc, #4]	; (d644c <mbedtls_cipher_crypt+0x48>)
   d6448:	e7fb      	b.n	d6442 <mbedtls_cipher_crypt+0x3e>
   d644a:	bf00      	nop
   d644c:	ffff9f00 	.word	0xffff9f00

000d6450 <mbedtls_cipher_auth_encrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
   d6450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d6454:	6807      	ldr	r7, [r0, #0]
{
   d6456:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d645a:	787f      	ldrb	r7, [r7, #1]
   d645c:	2f06      	cmp	r7, #6
{
   d645e:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
   d6462:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
   d6466:	e9dd 980b 	ldrd	r9, r8, [sp, #44]	; 0x2c
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d646a:	d110      	bne.n	d648e <mbedtls_cipher_auth_encrypt+0x3e>
    {
        *olen = ilen;
   d646c:	f8c9 4000 	str.w	r4, [r9]
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
   d6470:	e9cd 3508 	strd	r3, r5, [sp, #32]
   d6474:	e9cd e80c 	strd	lr, r8, [sp, #48]	; 0x30
   d6478:	e9cd 6c0a 	strd	r6, ip, [sp, #40]	; 0x28
   d647c:	9207      	str	r2, [sp, #28]
   d647e:	460b      	mov	r3, r1
   d6480:	4622      	mov	r2, r4
   d6482:	6b40      	ldr	r0, [r0, #52]	; 0x34
                                ilen, iv, ad, ad_len, input, output, tag ) );
    }
#endif /* MBEDTLS_CHACHAPOLY_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
   d6484:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
   d6488:	2101      	movs	r1, #1
   d648a:	f006 bbf4 	b.w	dcc76 <mbedtls_gcm_crypt_and_tag>
}
   d648e:	4801      	ldr	r0, [pc, #4]	; (d6494 <mbedtls_cipher_auth_encrypt+0x44>)
   d6490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6494:	ffff9f80 	.word	0xffff9f80

000d6498 <mbedtls_cipher_auth_decrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
   d6498:	b530      	push	{r4, r5, lr}
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d649a:	6805      	ldr	r5, [r0, #0]
   d649c:	786d      	ldrb	r5, [r5, #1]
{
   d649e:	b087      	sub	sp, #28
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d64a0:	2d06      	cmp	r5, #6
{
   d64a2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
   d64a4:	d119      	bne.n	d64da <mbedtls_cipher_auth_decrypt+0x42>
    {
        int ret;

        *olen = ilen;
   d64a6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   d64a8:	602c      	str	r4, [r5, #0]
        ret = mbedtls_gcm_auth_decrypt( (mbedtls_gcm_context *)ctx->cipher_ctx, ilen,
   d64aa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   d64ac:	9505      	str	r5, [sp, #20]
   d64ae:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   d64b0:	9504      	str	r5, [sp, #16]
   d64b2:	9d10      	ldr	r5, [sp, #64]	; 0x40
   d64b4:	9503      	str	r5, [sp, #12]
   d64b6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   d64b8:	9502      	str	r5, [sp, #8]
   d64ba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d64bc:	e9cd 3500 	strd	r3, r5, [sp]
   d64c0:	4613      	mov	r3, r2
   d64c2:	6b40      	ldr	r0, [r0, #52]	; 0x34
   d64c4:	460a      	mov	r2, r1
   d64c6:	4621      	mov	r1, r4
   d64c8:	f006 fbf8 	bl	dccbc <mbedtls_gcm_auth_decrypt>
                                iv, iv_len, ad, ad_len,
                                tag, tag_len, input, output );

        if( ret == MBEDTLS_ERR_GCM_AUTH_FAILED )
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
   d64cc:	4b04      	ldr	r3, [pc, #16]	; (d64e0 <mbedtls_cipher_auth_decrypt+0x48>)
   d64ce:	f110 0f12 	cmn.w	r0, #18
   d64d2:	bf08      	it	eq
   d64d4:	4618      	moveq	r0, r3
        return( ret );
    }
#endif /* MBEDTLS_CHACHAPOLY_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
   d64d6:	b007      	add	sp, #28
   d64d8:	bd30      	pop	{r4, r5, pc}
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
   d64da:	4802      	ldr	r0, [pc, #8]	; (d64e4 <mbedtls_cipher_auth_decrypt+0x4c>)
   d64dc:	e7fb      	b.n	d64d6 <mbedtls_cipher_auth_decrypt+0x3e>
   d64de:	bf00      	nop
   d64e0:	ffff9d00 	.word	0xffff9d00
   d64e4:	ffff9f80 	.word	0xffff9f80

000d64e8 <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
   d64e8:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
   d64ea:	6803      	ldr	r3, [r0, #0]
   d64ec:	1acd      	subs	r5, r1, r3
   d64ee:	2d00      	cmp	r5, #0
   d64f0:	dd0d      	ble.n	d650e <mbedtls_asn1_get_len+0x26>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( **p & 0x80 ) == 0 )
   d64f2:	f993 6000 	ldrsb.w	r6, [r3]
   d64f6:	781c      	ldrb	r4, [r3, #0]
   d64f8:	2e00      	cmp	r6, #0
   d64fa:	db0b      	blt.n	d6514 <mbedtls_asn1_get_len+0x2c>
        *len = *(*p)++;
   d64fc:	1c5c      	adds	r4, r3, #1
   d64fe:	6004      	str	r4, [r0, #0]
   d6500:	781b      	ldrb	r3, [r3, #0]
   d6502:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
   d6504:	6803      	ldr	r3, [r0, #0]
   d6506:	1ac9      	subs	r1, r1, r3
   d6508:	6813      	ldr	r3, [r2, #0]
   d650a:	428b      	cmp	r3, r1
   d650c:	d936      	bls.n	d657c <mbedtls_asn1_get_len+0x94>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d650e:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    return( 0 );
}
   d6512:	bd70      	pop	{r4, r5, r6, pc}
        switch( **p & 0x7F )
   d6514:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d6518:	3c01      	subs	r4, #1
   d651a:	2c03      	cmp	r4, #3
   d651c:	d82b      	bhi.n	d6576 <mbedtls_asn1_get_len+0x8e>
   d651e:	e8df f004 	tbb	[pc, r4]
   d6522:	0a02      	.short	0x0a02
   d6524:	2114      	.short	0x2114
            if( ( end - *p ) < 2 )
   d6526:	2d01      	cmp	r5, #1
   d6528:	d0f1      	beq.n	d650e <mbedtls_asn1_get_len+0x26>
            *len = (*p)[1];
   d652a:	785b      	ldrb	r3, [r3, #1]
   d652c:	6013      	str	r3, [r2, #0]
            (*p) += 2;
   d652e:	6803      	ldr	r3, [r0, #0]
   d6530:	3302      	adds	r3, #2
            (*p) += 5;
   d6532:	6003      	str	r3, [r0, #0]
            break;
   d6534:	e7e6      	b.n	d6504 <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 3 )
   d6536:	2d02      	cmp	r5, #2
   d6538:	dde9      	ble.n	d650e <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
   d653a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   d653e:	ba5b      	rev16	r3, r3
   d6540:	b29b      	uxth	r3, r3
   d6542:	6013      	str	r3, [r2, #0]
            (*p) += 3;
   d6544:	6803      	ldr	r3, [r0, #0]
   d6546:	3303      	adds	r3, #3
   d6548:	e7f3      	b.n	d6532 <mbedtls_asn1_get_len+0x4a>
            if( ( end - *p ) < 4 )
   d654a:	2d03      	cmp	r5, #3
   d654c:	dddf      	ble.n	d650e <mbedtls_asn1_get_len+0x26>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
   d654e:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
   d6550:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
   d6552:	78db      	ldrb	r3, [r3, #3]
   d6554:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
   d6556:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
   d655a:	4323      	orrs	r3, r4
            *len = ( (size_t)(*p)[1] << 16 ) |
   d655c:	6013      	str	r3, [r2, #0]
            (*p) += 4;
   d655e:	6803      	ldr	r3, [r0, #0]
   d6560:	3304      	adds	r3, #4
   d6562:	e7e6      	b.n	d6532 <mbedtls_asn1_get_len+0x4a>
            if( ( end - *p ) < 5 )
   d6564:	2d04      	cmp	r5, #4
   d6566:	ddd2      	ble.n	d650e <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
   d6568:	f8d3 3001 	ldr.w	r3, [r3, #1]
   d656c:	ba1b      	rev	r3, r3
   d656e:	6013      	str	r3, [r2, #0]
            (*p) += 5;
   d6570:	6803      	ldr	r3, [r0, #0]
   d6572:	3305      	adds	r3, #5
   d6574:	e7dd      	b.n	d6532 <mbedtls_asn1_get_len+0x4a>
    if( ( **p & 0x80 ) == 0 )
   d6576:	f06f 0063 	mvn.w	r0, #99	; 0x63
   d657a:	e7ca      	b.n	d6512 <mbedtls_asn1_get_len+0x2a>
    return( 0 );
   d657c:	2000      	movs	r0, #0
   d657e:	e7c8      	b.n	d6512 <mbedtls_asn1_get_len+0x2a>

000d6580 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
   d6580:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
   d6582:	6804      	ldr	r4, [r0, #0]
   d6584:	1b0e      	subs	r6, r1, r4
   d6586:	2e00      	cmp	r6, #0
   d6588:	dd07      	ble.n	d659a <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
   d658a:	7826      	ldrb	r6, [r4, #0]
   d658c:	429e      	cmp	r6, r3
   d658e:	d108      	bne.n	d65a2 <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
   d6590:	3401      	adds	r4, #1
   d6592:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
   d6594:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
   d6596:	f7ff bfa7 	b.w	d64e8 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d659a:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
   d659e:	bc70      	pop	{r4, r5, r6}
   d65a0:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   d65a2:	f06f 0061 	mvn.w	r0, #97	; 0x61
   d65a6:	e7fa      	b.n	d659e <mbedtls_asn1_get_tag+0x1e>

000d65a8 <mbedtls_asn1_get_bool>:

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
   d65a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
   d65aa:	2301      	movs	r3, #1
{
   d65ac:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
   d65ae:	aa01      	add	r2, sp, #4
{
   d65b0:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
   d65b2:	f7ff ffe5 	bl	d6580 <mbedtls_asn1_get_tag>
   d65b6:	b958      	cbnz	r0, d65d0 <mbedtls_asn1_get_bool+0x28>
        return( ret );

    if( len != 1 )
   d65b8:	9b01      	ldr	r3, [sp, #4]
   d65ba:	2b01      	cmp	r3, #1
   d65bc:	d10a      	bne.n	d65d4 <mbedtls_asn1_get_bool+0x2c>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = ( **p != 0 ) ? 1 : 0;
   d65be:	6823      	ldr	r3, [r4, #0]
   d65c0:	781b      	ldrb	r3, [r3, #0]
   d65c2:	3b00      	subs	r3, #0
   d65c4:	bf18      	it	ne
   d65c6:	2301      	movne	r3, #1
   d65c8:	602b      	str	r3, [r5, #0]
    (*p)++;
   d65ca:	6823      	ldr	r3, [r4, #0]
   d65cc:	3301      	adds	r3, #1
   d65ce:	6023      	str	r3, [r4, #0]

    return( 0 );
}
   d65d0:	b003      	add	sp, #12
   d65d2:	bd30      	pop	{r4, r5, pc}
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   d65d4:	f06f 0063 	mvn.w	r0, #99	; 0x63
   d65d8:	e7fa      	b.n	d65d0 <mbedtls_asn1_get_bool+0x28>

000d65da <mbedtls_asn1_get_int>:

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
   d65da:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d65dc:	2302      	movs	r3, #2
{
   d65de:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d65e0:	aa01      	add	r2, sp, #4
{
   d65e2:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d65e4:	f7ff ffcc 	bl	d6580 <mbedtls_asn1_get_tag>
   d65e8:	b9c8      	cbnz	r0, d661e <mbedtls_asn1_get_int+0x44>
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
   d65ea:	9b01      	ldr	r3, [sp, #4]
   d65ec:	3b01      	subs	r3, #1
   d65ee:	2b03      	cmp	r3, #3
   d65f0:	d813      	bhi.n	d661a <mbedtls_asn1_get_int+0x40>
   d65f2:	6823      	ldr	r3, [r4, #0]
   d65f4:	f993 3000 	ldrsb.w	r3, [r3]
   d65f8:	2b00      	cmp	r3, #0
   d65fa:	db0e      	blt.n	d661a <mbedtls_asn1_get_int+0x40>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;
   d65fc:	6028      	str	r0, [r5, #0]

    while( len-- > 0 )
   d65fe:	9b01      	ldr	r3, [sp, #4]
   d6600:	1e5a      	subs	r2, r3, #1
   d6602:	9201      	str	r2, [sp, #4]
   d6604:	b15b      	cbz	r3, d661e <mbedtls_asn1_get_int+0x44>
    {
        *val = ( *val << 8 ) | **p;
   d6606:	6823      	ldr	r3, [r4, #0]
   d6608:	682a      	ldr	r2, [r5, #0]
   d660a:	781b      	ldrb	r3, [r3, #0]
   d660c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d6610:	602b      	str	r3, [r5, #0]
        (*p)++;
   d6612:	6823      	ldr	r3, [r4, #0]
   d6614:	3301      	adds	r3, #1
   d6616:	6023      	str	r3, [r4, #0]
    while( len-- > 0 )
   d6618:	e7f1      	b.n	d65fe <mbedtls_asn1_get_int+0x24>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   d661a:	f06f 0063 	mvn.w	r0, #99	; 0x63
    }

    return( 0 );
}
   d661e:	b003      	add	sp, #12
   d6620:	bd30      	pop	{r4, r5, pc}

000d6622 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
   d6622:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d6624:	2302      	movs	r3, #2
{
   d6626:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d6628:	aa01      	add	r2, sp, #4
{
   d662a:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   d662c:	f7ff ffa8 	bl	d6580 <mbedtls_asn1_get_tag>
   d6630:	b940      	cbnz	r0, d6644 <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
   d6632:	9a01      	ldr	r2, [sp, #4]
   d6634:	6821      	ldr	r1, [r4, #0]
   d6636:	4628      	mov	r0, r5
   d6638:	f00a fbd3 	bl	e0de2 <mbedtls_mpi_read_binary>

    *p += len;
   d663c:	6823      	ldr	r3, [r4, #0]
   d663e:	9a01      	ldr	r2, [sp, #4]
   d6640:	4413      	add	r3, r2
   d6642:	6023      	str	r3, [r4, #0]

    return( ret );
}
   d6644:	b003      	add	sp, #12
   d6646:	bd30      	pop	{r4, r5, pc}

000d6648 <mbedtls_asn1_get_bitstring>:
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
   d6648:	b570      	push	{r4, r5, r6, lr}
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
   d664a:	2303      	movs	r3, #3
{
   d664c:	4605      	mov	r5, r0
   d664e:	460e      	mov	r6, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
   d6650:	f7ff ff96 	bl	d6580 <mbedtls_asn1_get_tag>
   d6654:	b998      	cbnz	r0, d667e <mbedtls_asn1_get_bitstring+0x36>
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
   d6656:	6813      	ldr	r3, [r2, #0]
   d6658:	b193      	cbz	r3, d6680 <mbedtls_asn1_get_bitstring+0x38>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;
   d665a:	3b01      	subs	r3, #1
   d665c:	6013      	str	r3, [r2, #0]

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
   d665e:	682b      	ldr	r3, [r5, #0]
   d6660:	781b      	ldrb	r3, [r3, #0]
   d6662:	7113      	strb	r3, [r2, #4]
    if( bs->unused_bits > 7 )
   d6664:	2b07      	cmp	r3, #7
   d6666:	d80e      	bhi.n	d6686 <mbedtls_asn1_get_bitstring+0x3e>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;
   d6668:	682b      	ldr	r3, [r5, #0]
   d666a:	3301      	adds	r3, #1
   d666c:	602b      	str	r3, [r5, #0]

    /* Get actual bitstring */
    bs->p = *p;
   d666e:	6093      	str	r3, [r2, #8]
    *p += bs->len;
   d6670:	6812      	ldr	r2, [r2, #0]
   d6672:	4413      	add	r3, r2

    if( *p != end )
   d6674:	42b3      	cmp	r3, r6
    *p += bs->len;
   d6676:	602b      	str	r3, [r5, #0]
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d6678:	bf18      	it	ne
   d667a:	f06f 0065 	mvnne.w	r0, #101	; 0x65

    return( 0 );
}
   d667e:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d6680:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   d6684:	e7fb      	b.n	d667e <mbedtls_asn1_get_bitstring+0x36>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   d6686:	f06f 0063 	mvn.w	r0, #99	; 0x63
   d668a:	e7f8      	b.n	d667e <mbedtls_asn1_get_bitstring+0x36>

000d668c <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
   d668c:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
   d668e:	2303      	movs	r3, #3
{
   d6690:	4604      	mov	r4, r0
   d6692:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
   d6694:	f7ff ff74 	bl	d6580 <mbedtls_asn1_get_tag>
   d6698:	b958      	cbnz	r0, d66b2 <mbedtls_asn1_get_bitstring_null+0x26>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
   d669a:	6813      	ldr	r3, [r2, #0]
   d669c:	1e5a      	subs	r2, r3, #1
   d669e:	2b01      	cmp	r3, #1
   d66a0:	602a      	str	r2, [r5, #0]
   d66a2:	d904      	bls.n	d66ae <mbedtls_asn1_get_bitstring_null+0x22>
   d66a4:	6823      	ldr	r3, [r4, #0]
   d66a6:	1c5a      	adds	r2, r3, #1
   d66a8:	6022      	str	r2, [r4, #0]
   d66aa:	781b      	ldrb	r3, [r3, #0]
   d66ac:	b10b      	cbz	r3, d66b2 <mbedtls_asn1_get_bitstring_null+0x26>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
   d66ae:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
   d66b2:	bd38      	pop	{r3, r4, r5, pc}

000d66b4 <mbedtls_asn1_get_sequence_of>:
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
   d66b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d66b8:	4614      	mov	r4, r2
   d66ba:	4698      	mov	r8, r3
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d66bc:	aa01      	add	r2, sp, #4
   d66be:	2330      	movs	r3, #48	; 0x30
{
   d66c0:	4605      	mov	r5, r0
   d66c2:	460f      	mov	r7, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d66c4:	f7ff ff5c 	bl	d6580 <mbedtls_asn1_get_tag>
   d66c8:	4606      	mov	r6, r0
   d66ca:	bb30      	cbnz	r0, d671a <mbedtls_asn1_get_sequence_of+0x66>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( *p + len != end )
   d66cc:	682b      	ldr	r3, [r5, #0]
   d66ce:	9a01      	ldr	r2, [sp, #4]
   d66d0:	4413      	add	r3, r2
   d66d2:	429f      	cmp	r7, r3
   d66d4:	d11f      	bne.n	d6716 <mbedtls_asn1_get_sequence_of+0x62>
    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
   d66d6:	1d22      	adds	r2, r4, #4
    while( *p < end )
   d66d8:	682b      	ldr	r3, [r5, #0]
   d66da:	42bb      	cmp	r3, r7
   d66dc:	d216      	bcs.n	d670c <mbedtls_asn1_get_sequence_of+0x58>
        buf->tag = **p;
   d66de:	781b      	ldrb	r3, [r3, #0]
   d66e0:	6023      	str	r3, [r4, #0]
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
   d66e2:	4639      	mov	r1, r7
   d66e4:	4643      	mov	r3, r8
   d66e6:	4628      	mov	r0, r5
   d66e8:	f7ff ff4a 	bl	d6580 <mbedtls_asn1_get_tag>
   d66ec:	b9c8      	cbnz	r0, d6722 <mbedtls_asn1_get_sequence_of+0x6e>
            return( ret );

        buf->p = *p;
   d66ee:	6829      	ldr	r1, [r5, #0]
        *p += buf->len;
   d66f0:	6863      	ldr	r3, [r4, #4]
        buf->p = *p;
   d66f2:	60a1      	str	r1, [r4, #8]
        *p += buf->len;
   d66f4:	4419      	add	r1, r3

        /* Allocate and assign next pointer */
        if( *p < end )
   d66f6:	42b9      	cmp	r1, r7
        *p += buf->len;
   d66f8:	6029      	str	r1, [r5, #0]
        if( *p < end )
   d66fa:	d2ed      	bcs.n	d66d8 <mbedtls_asn1_get_sequence_of+0x24>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
   d66fc:	2110      	movs	r1, #16
   d66fe:	2001      	movs	r0, #1
   d6700:	f012 fafc 	bl	e8cfc <calloc>
   d6704:	60e0      	str	r0, [r4, #12]
                                            sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
   d6706:	b170      	cbz	r0, d6726 <mbedtls_asn1_get_sequence_of+0x72>
   d6708:	4604      	mov	r4, r0
   d670a:	e7e4      	b.n	d66d6 <mbedtls_asn1_get_sequence_of+0x22>
            cur = cur->next;
        }
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
   d670c:	2300      	movs	r3, #0
   d670e:	60e3      	str	r3, [r4, #12]

    if( *p != end )
   d6710:	682b      	ldr	r3, [r5, #0]
   d6712:	42bb      	cmp	r3, r7
   d6714:	d001      	beq.n	d671a <mbedtls_asn1_get_sequence_of+0x66>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d6716:	f06f 0665 	mvn.w	r6, #101	; 0x65

    return( 0 );
}
   d671a:	4630      	mov	r0, r6
   d671c:	b002      	add	sp, #8
   d671e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
   d6722:	4606      	mov	r6, r0
   d6724:	e7f9      	b.n	d671a <mbedtls_asn1_get_sequence_of+0x66>
                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
   d6726:	f06f 0669 	mvn.w	r6, #105	; 0x69
   d672a:	e7f6      	b.n	d671a <mbedtls_asn1_get_sequence_of+0x66>

000d672c <mbedtls_asn1_get_alg>:

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
   d672c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6730:	4690      	mov	r8, r2
   d6732:	461f      	mov	r7, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d6734:	aa01      	add	r2, sp, #4
   d6736:	2330      	movs	r3, #48	; 0x30
{
   d6738:	4605      	mov	r5, r0
   d673a:	460e      	mov	r6, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d673c:	f7ff ff20 	bl	d6580 <mbedtls_asn1_get_tag>
   d6740:	4604      	mov	r4, r0
   d6742:	b9f0      	cbnz	r0, d6782 <mbedtls_asn1_get_alg+0x56>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
   d6744:	682b      	ldr	r3, [r5, #0]
   d6746:	1af6      	subs	r6, r6, r3
   d6748:	2e00      	cmp	r6, #0
   d674a:	dd37      	ble.n	d67bc <mbedtls_asn1_get_alg+0x90>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
   d674c:	4642      	mov	r2, r8
   d674e:	781b      	ldrb	r3, [r3, #0]
   d6750:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
   d6754:	9901      	ldr	r1, [sp, #4]
   d6756:	682e      	ldr	r6, [r5, #0]
   d6758:	440e      	add	r6, r1

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
   d675a:	2306      	movs	r3, #6
   d675c:	4631      	mov	r1, r6
   d675e:	4628      	mov	r0, r5
   d6760:	f7ff ff0e 	bl	d6580 <mbedtls_asn1_get_tag>
   d6764:	4604      	mov	r4, r0
   d6766:	b960      	cbnz	r0, d6782 <mbedtls_asn1_get_alg+0x56>
        return( ret );

    alg->p = *p;
   d6768:	682b      	ldr	r3, [r5, #0]
    *p += alg->len;
   d676a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    alg->p = *p;
   d676e:	f8c8 3008 	str.w	r3, [r8, #8]
    *p += alg->len;
   d6772:	1899      	adds	r1, r3, r2

    if( *p == end )
   d6774:	42b1      	cmp	r1, r6
    *p += alg->len;
   d6776:	6029      	str	r1, [r5, #0]
    if( *p == end )
   d6778:	d107      	bne.n	d678a <mbedtls_asn1_get_alg+0x5e>
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
   d677a:	210c      	movs	r1, #12
   d677c:	4638      	mov	r0, r7
   d677e:	f00c fa21 	bl	e2bc4 <mbedtls_platform_zeroize>

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
   d6782:	4620      	mov	r0, r4
   d6784:	b002      	add	sp, #8
   d6786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    params->tag = **p;
   d678a:	5c9b      	ldrb	r3, [r3, r2]
   d678c:	463a      	mov	r2, r7
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
   d678e:	4631      	mov	r1, r6
    params->tag = **p;
   d6790:	f842 3b04 	str.w	r3, [r2], #4
    (*p)++;
   d6794:	682b      	ldr	r3, [r5, #0]
   d6796:	3301      	adds	r3, #1
   d6798:	602b      	str	r3, [r5, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
   d679a:	4628      	mov	r0, r5
   d679c:	f7ff fea4 	bl	d64e8 <mbedtls_asn1_get_len>
   d67a0:	4604      	mov	r4, r0
   d67a2:	2800      	cmp	r0, #0
   d67a4:	d1ed      	bne.n	d6782 <mbedtls_asn1_get_alg+0x56>
    params->p = *p;
   d67a6:	682b      	ldr	r3, [r5, #0]
    *p += params->len;
   d67a8:	687a      	ldr	r2, [r7, #4]
    params->p = *p;
   d67aa:	60bb      	str	r3, [r7, #8]
    *p += params->len;
   d67ac:	4413      	add	r3, r2
    if( *p != end )
   d67ae:	42b3      	cmp	r3, r6
    *p += params->len;
   d67b0:	602b      	str	r3, [r5, #0]
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d67b2:	bf0c      	ite	eq
   d67b4:	4604      	moveq	r4, r0
   d67b6:	f06f 0465 	mvnne.w	r4, #101	; 0x65
   d67ba:	e7e2      	b.n	d6782 <mbedtls_asn1_get_alg+0x56>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d67bc:	f06f 045f 	mvn.w	r4, #95	; 0x5f
   d67c0:	e7df      	b.n	d6782 <mbedtls_asn1_get_alg+0x56>

000d67c2 <mbedtls_asn1_get_alg_null>:

int mbedtls_asn1_get_alg_null( unsigned char **p,
                       const unsigned char *end,
                       mbedtls_asn1_buf *alg )
{
   d67c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int ret;
    mbedtls_asn1_buf params;

    memset( &params, 0, sizeof(mbedtls_asn1_buf) );
   d67c4:	2300      	movs	r3, #0
   d67c6:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d67ca:	9303      	str	r3, [sp, #12]

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
   d67cc:	ab01      	add	r3, sp, #4
   d67ce:	f7ff ffad 	bl	d672c <mbedtls_asn1_get_alg>
   d67d2:	b940      	cbnz	r0, d67e6 <mbedtls_asn1_get_alg_null+0x24>
        return( ret );

    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
   d67d4:	9b01      	ldr	r3, [sp, #4]
   d67d6:	2b05      	cmp	r3, #5
   d67d8:	d000      	beq.n	d67dc <mbedtls_asn1_get_alg_null+0x1a>
   d67da:	b93b      	cbnz	r3, d67ec <mbedtls_asn1_get_alg_null+0x2a>
   d67dc:	9b02      	ldr	r3, [sp, #8]
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
   d67de:	2b00      	cmp	r3, #0
   d67e0:	bf18      	it	ne
   d67e2:	f06f 0067 	mvnne.w	r0, #103	; 0x67

    return( 0 );
}
   d67e6:	b005      	add	sp, #20
   d67e8:	f85d fb04 	ldr.w	pc, [sp], #4
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
   d67ec:	f06f 0067 	mvn.w	r0, #103	; 0x67
   d67f0:	e7f9      	b.n	d67e6 <mbedtls_asn1_get_alg_null+0x24>
	...

000d67f4 <_ZL14x509_parse_intPPhjPi>:
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;
   d67f4:	2300      	movs	r3, #0
{
   d67f6:	b530      	push	{r4, r5, lr}
    *res = 0;
   d67f8:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
   d67fa:	250a      	movs	r5, #10
        if( ( **p < '0') || ( **p > '9' ) )
   d67fc:	6803      	ldr	r3, [r0, #0]
   d67fe:	781b      	ldrb	r3, [r3, #0]
   d6800:	3b30      	subs	r3, #48	; 0x30
   d6802:	2b09      	cmp	r3, #9
   d6804:	d80f      	bhi.n	d6826 <_ZL14x509_parse_intPPhjPi+0x32>
        *res *= 10;
   d6806:	6813      	ldr	r3, [r2, #0]
   d6808:	436b      	muls	r3, r5
   d680a:	6013      	str	r3, [r2, #0]
        *res += ( *(*p)++ - '0' );
   d680c:	6803      	ldr	r3, [r0, #0]
   d680e:	1c5c      	adds	r4, r3, #1
   d6810:	6004      	str	r4, [r0, #0]
   d6812:	781b      	ldrb	r3, [r3, #0]
   d6814:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   d6818:	6813      	ldr	r3, [r2, #0]
    for( ; n > 0; --n )
   d681a:	3901      	subs	r1, #1
        *res += ( *(*p)++ - '0' );
   d681c:	4423      	add	r3, r4
   d681e:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
   d6820:	d1ec      	bne.n	d67fc <_ZL14x509_parse_intPPhjPi+0x8>
    }

    return( 0 );
   d6822:	4608      	mov	r0, r1
}
   d6824:	bd30      	pop	{r4, r5, pc}
            return ( MBEDTLS_ERR_X509_INVALID_DATE );
   d6826:	4801      	ldr	r0, [pc, #4]	; (d682c <_ZL14x509_parse_intPPhjPi+0x38>)
   d6828:	e7fc      	b.n	d6824 <_ZL14x509_parse_intPPhjPi+0x30>
   d682a:	bf00      	nop
   d682c:	ffffdc00 	.word	0xffffdc00

000d6830 <mbedtls_x509_get_serial>:
{
   d6830:	b538      	push	{r3, r4, r5, lr}
    if( ( end - *p ) < 1 )
   d6832:	6803      	ldr	r3, [r0, #0]
{
   d6834:	4615      	mov	r5, r2
    if( ( end - *p ) < 1 )
   d6836:	1aca      	subs	r2, r1, r3
   d6838:	2a00      	cmp	r2, #0
{
   d683a:	4604      	mov	r4, r0
    if( ( end - *p ) < 1 )
   d683c:	dd16      	ble.n	d686c <mbedtls_x509_get_serial+0x3c>
    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
   d683e:	781a      	ldrb	r2, [r3, #0]
   d6840:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   d6844:	2a02      	cmp	r2, #2
   d6846:	d113      	bne.n	d6870 <mbedtls_x509_get_serial+0x40>
    serial->tag = *(*p)++;
   d6848:	1c5a      	adds	r2, r3, #1
   d684a:	6002      	str	r2, [r0, #0]
   d684c:	462a      	mov	r2, r5
   d684e:	781b      	ldrb	r3, [r3, #0]
   d6850:	f842 3b04 	str.w	r3, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
   d6854:	f7ff fe48 	bl	d64e8 <mbedtls_asn1_get_len>
   d6858:	b110      	cbz	r0, d6860 <mbedtls_x509_get_serial+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
   d685a:	f5a0 500a 	sub.w	r0, r0, #8832	; 0x2280
}
   d685e:	bd38      	pop	{r3, r4, r5, pc}
    serial->p = *p;
   d6860:	6823      	ldr	r3, [r4, #0]
    *p += serial->len;
   d6862:	686a      	ldr	r2, [r5, #4]
    serial->p = *p;
   d6864:	60ab      	str	r3, [r5, #8]
    *p += serial->len;
   d6866:	4413      	add	r3, r2
   d6868:	6023      	str	r3, [r4, #0]
    return( 0 );
   d686a:	e7f8      	b.n	d685e <mbedtls_x509_get_serial+0x2e>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d686c:	4801      	ldr	r0, [pc, #4]	; (d6874 <mbedtls_x509_get_serial+0x44>)
   d686e:	e7f6      	b.n	d685e <mbedtls_x509_get_serial+0x2e>
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   d6870:	4801      	ldr	r0, [pc, #4]	; (d6878 <mbedtls_x509_get_serial+0x48>)
   d6872:	e7f4      	b.n	d685e <mbedtls_x509_get_serial+0x2e>
   d6874:	ffffdd20 	.word	0xffffdd20
   d6878:	ffffdd1e 	.word	0xffffdd1e

000d687c <mbedtls_x509_get_alg_null>:
{
   d687c:	b508      	push	{r3, lr}
    if( ( ret = mbedtls_asn1_get_alg_null( p, end, alg ) ) != 0 )
   d687e:	f7ff ffa0 	bl	d67c2 <mbedtls_asn1_get_alg_null>
   d6882:	b108      	cbz	r0, d6888 <mbedtls_x509_get_alg_null+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
   d6884:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
}
   d6888:	bd08      	pop	{r3, pc}

000d688a <mbedtls_x509_get_alg>:
{
   d688a:	b508      	push	{r3, lr}
    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
   d688c:	f7ff ff4e 	bl	d672c <mbedtls_asn1_get_alg>
   d6890:	b108      	cbz	r0, d6896 <mbedtls_x509_get_alg+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
   d6892:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
}
   d6896:	bd08      	pop	{r3, pc}

000d6898 <mbedtls_x509_get_rsassa_pss_params>:
{
   d6898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d689c:	461d      	mov	r5, r3
    *md_alg = MBEDTLS_MD_SHA1;
   d689e:	2304      	movs	r3, #4
   d68a0:	700b      	strb	r3, [r1, #0]
    *mgf_md = MBEDTLS_MD_SHA1;
   d68a2:	7013      	strb	r3, [r2, #0]
    *salt_len = 20;
   d68a4:	2314      	movs	r3, #20
   d68a6:	602b      	str	r3, [r5, #0]
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   d68a8:	6803      	ldr	r3, [r0, #0]
   d68aa:	2b30      	cmp	r3, #48	; 0x30
{
   d68ac:	b08e      	sub	sp, #56	; 0x38
   d68ae:	4688      	mov	r8, r1
   d68b0:	4616      	mov	r6, r2
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   d68b2:	d14e      	bne.n	d6952 <mbedtls_x509_get_rsassa_pss_params+0xba>
    p = (unsigned char *) params->p;
   d68b4:	6883      	ldr	r3, [r0, #8]
    end = p + params->len;
   d68b6:	6844      	ldr	r4, [r0, #4]
    p = (unsigned char *) params->p;
   d68b8:	9301      	str	r3, [sp, #4]
    end = p + params->len;
   d68ba:	441c      	add	r4, r3
    if( p == end )
   d68bc:	42a3      	cmp	r3, r4
   d68be:	d103      	bne.n	d68c8 <mbedtls_x509_get_rsassa_pss_params+0x30>
        return( 0 );
   d68c0:	2000      	movs	r0, #0
}
   d68c2:	b00e      	add	sp, #56	; 0x38
   d68c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   d68c8:	23a0      	movs	r3, #160	; 0xa0
   d68ca:	aa02      	add	r2, sp, #8
   d68cc:	4621      	mov	r1, r4
   d68ce:	a801      	add	r0, sp, #4
   d68d0:	f7ff fe56 	bl	d6580 <mbedtls_asn1_get_tag>
   d68d4:	b9b0      	cbnz	r0, d6904 <mbedtls_x509_get_rsassa_pss_params+0x6c>
        end2 = p + len;
   d68d6:	e9dd 7301 	ldrd	r7, r3, [sp, #4]
   d68da:	441f      	add	r7, r3
        if( ( ret = mbedtls_x509_get_alg_null( &p, end2, &alg_id ) ) != 0 )
   d68dc:	aa05      	add	r2, sp, #20
   d68de:	4639      	mov	r1, r7
   d68e0:	a801      	add	r0, sp, #4
   d68e2:	f7ff ffcb 	bl	d687c <mbedtls_x509_get_alg_null>
   d68e6:	2800      	cmp	r0, #0
   d68e8:	d1eb      	bne.n	d68c2 <mbedtls_x509_get_rsassa_pss_params+0x2a>
        if( ( ret = mbedtls_oid_get_md_alg( &alg_id, md_alg ) ) != 0 )
   d68ea:	4641      	mov	r1, r8
   d68ec:	a805      	add	r0, sp, #20
   d68ee:	f003 fc05 	bl	da0fc <mbedtls_oid_get_md_alg>
   d68f2:	b110      	cbz	r0, d68fa <mbedtls_x509_get_rsassa_pss_params+0x62>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
   d68f4:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
   d68f8:	e7e3      	b.n	d68c2 <mbedtls_x509_get_rsassa_pss_params+0x2a>
        if( p != end2 )
   d68fa:	9b01      	ldr	r3, [sp, #4]
   d68fc:	42bb      	cmp	r3, r7
   d68fe:	d004      	beq.n	d690a <mbedtls_x509_get_rsassa_pss_params+0x72>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d6900:	4853      	ldr	r0, [pc, #332]	; (d6a50 <mbedtls_x509_get_rsassa_pss_params+0x1b8>)
   d6902:	e7de      	b.n	d68c2 <mbedtls_x509_get_rsassa_pss_params+0x2a>
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   d6904:	f110 0f62 	cmn.w	r0, #98	; 0x62
   d6908:	d1f4      	bne.n	d68f4 <mbedtls_x509_get_rsassa_pss_params+0x5c>
    if( p == end )
   d690a:	9b01      	ldr	r3, [sp, #4]
   d690c:	42a3      	cmp	r3, r4
   d690e:	d0d7      	beq.n	d68c0 <mbedtls_x509_get_rsassa_pss_params+0x28>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   d6910:	23a1      	movs	r3, #161	; 0xa1
   d6912:	aa02      	add	r2, sp, #8
   d6914:	4621      	mov	r1, r4
   d6916:	a801      	add	r0, sp, #4
   d6918:	f7ff fe32 	bl	d6580 <mbedtls_asn1_get_tag>
   d691c:	2800      	cmp	r0, #0
   d691e:	f040 8087 	bne.w	d6a30 <mbedtls_x509_get_rsassa_pss_params+0x198>
        end2 = p + len;
   d6922:	e9dd 7301 	ldrd	r7, r3, [sp, #4]
   d6926:	441f      	add	r7, r3
        if( ( ret = mbedtls_x509_get_alg( &p, end2, &alg_id, &alg_params ) ) != 0 )
   d6928:	aa05      	add	r2, sp, #20
   d692a:	ab08      	add	r3, sp, #32
   d692c:	4639      	mov	r1, r7
   d692e:	a801      	add	r0, sp, #4
   d6930:	f7ff ffab 	bl	d688a <mbedtls_x509_get_alg>
   d6934:	2800      	cmp	r0, #0
   d6936:	d1c4      	bne.n	d68c2 <mbedtls_x509_get_rsassa_pss_params+0x2a>
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_MGF1, &alg_id ) != 0 )
   d6938:	9a06      	ldr	r2, [sp, #24]
   d693a:	2a09      	cmp	r2, #9
   d693c:	f040 8086 	bne.w	d6a4c <mbedtls_x509_get_rsassa_pss_params+0x1b4>
   d6940:	9907      	ldr	r1, [sp, #28]
   d6942:	4844      	ldr	r0, [pc, #272]	; (d6a54 <mbedtls_x509_get_rsassa_pss_params+0x1bc>)
   d6944:	f012 fa44 	bl	e8dd0 <memcmp>
   d6948:	2800      	cmp	r0, #0
   d694a:	d17f      	bne.n	d6a4c <mbedtls_x509_get_rsassa_pss_params+0x1b4>
    if( alg->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   d694c:	9b08      	ldr	r3, [sp, #32]
   d694e:	2b30      	cmp	r3, #48	; 0x30
   d6950:	d001      	beq.n	d6956 <mbedtls_x509_get_rsassa_pss_params+0xbe>
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   d6952:	4841      	ldr	r0, [pc, #260]	; (d6a58 <mbedtls_x509_get_rsassa_pss_params+0x1c0>)
   d6954:	e7b5      	b.n	d68c2 <mbedtls_x509_get_rsassa_pss_params+0x2a>
    p = (unsigned char *) alg->p;
   d6956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    end = p + alg->len;
   d6958:	9a09      	ldr	r2, [sp, #36]	; 0x24
    p = (unsigned char *) alg->p;
   d695a:	9303      	str	r3, [sp, #12]
    end = p + alg->len;
   d695c:	eb03 0802 	add.w	r8, r3, r2
    if( p >= end )
   d6960:	4543      	cmp	r3, r8
   d6962:	d263      	bcs.n	d6a2c <mbedtls_x509_get_rsassa_pss_params+0x194>
    md_oid.tag = *p;
   d6964:	781b      	ldrb	r3, [r3, #0]
   d6966:	930b      	str	r3, [sp, #44]	; 0x2c
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &md_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
   d6968:	aa0c      	add	r2, sp, #48	; 0x30
   d696a:	2306      	movs	r3, #6
   d696c:	4641      	mov	r1, r8
   d696e:	a803      	add	r0, sp, #12
   d6970:	f7ff fe06 	bl	d6580 <mbedtls_asn1_get_tag>
   d6974:	b118      	cbz	r0, d697e <mbedtls_x509_get_rsassa_pss_params+0xe6>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
   d6976:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
        if( ( ret = x509_get_hash_alg( &alg_params, mgf_md ) ) != 0 )
   d697a:	b1d0      	cbz	r0, d69b2 <mbedtls_x509_get_rsassa_pss_params+0x11a>
   d697c:	e7a1      	b.n	d68c2 <mbedtls_x509_get_rsassa_pss_params+0x2a>
    md_oid.p = p;
   d697e:	9b03      	ldr	r3, [sp, #12]
    p += md_oid.len;
   d6980:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    md_oid.p = p;
   d6982:	930d      	str	r3, [sp, #52]	; 0x34
    if( ( ret = mbedtls_oid_get_md_alg( &md_oid, md_alg ) ) != 0 )
   d6984:	4631      	mov	r1, r6
    p += md_oid.len;
   d6986:	4413      	add	r3, r2
    if( ( ret = mbedtls_oid_get_md_alg( &md_oid, md_alg ) ) != 0 )
   d6988:	a80b      	add	r0, sp, #44	; 0x2c
    p += md_oid.len;
   d698a:	9303      	str	r3, [sp, #12]
    if( ( ret = mbedtls_oid_get_md_alg( &md_oid, md_alg ) ) != 0 )
   d698c:	f003 fbb6 	bl	da0fc <mbedtls_oid_get_md_alg>
   d6990:	2800      	cmp	r0, #0
   d6992:	d1f0      	bne.n	d6976 <mbedtls_x509_get_rsassa_pss_params+0xde>
    if( p == end )
   d6994:	9b03      	ldr	r3, [sp, #12]
   d6996:	4598      	cmp	r8, r3
   d6998:	d00b      	beq.n	d69b2 <mbedtls_x509_get_rsassa_pss_params+0x11a>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_NULL ) ) != 0 || len != 0 )
   d699a:	2305      	movs	r3, #5
   d699c:	aa04      	add	r2, sp, #16
   d699e:	4641      	mov	r1, r8
   d69a0:	a803      	add	r0, sp, #12
   d69a2:	f7ff fded 	bl	d6580 <mbedtls_asn1_get_tag>
   d69a6:	9b04      	ldr	r3, [sp, #16]
   d69a8:	4303      	orrs	r3, r0
   d69aa:	d1e4      	bne.n	d6976 <mbedtls_x509_get_rsassa_pss_params+0xde>
    if( p != end )
   d69ac:	9b03      	ldr	r3, [sp, #12]
   d69ae:	4598      	cmp	r8, r3
   d69b0:	d1a6      	bne.n	d6900 <mbedtls_x509_get_rsassa_pss_params+0x68>
        if( p != end2 )
   d69b2:	9b01      	ldr	r3, [sp, #4]
   d69b4:	42bb      	cmp	r3, r7
   d69b6:	d1a3      	bne.n	d6900 <mbedtls_x509_get_rsassa_pss_params+0x68>
    if( p == end )
   d69b8:	9b01      	ldr	r3, [sp, #4]
   d69ba:	42a3      	cmp	r3, r4
   d69bc:	d080      	beq.n	d68c0 <mbedtls_x509_get_rsassa_pss_params+0x28>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   d69be:	23a2      	movs	r3, #162	; 0xa2
   d69c0:	aa02      	add	r2, sp, #8
   d69c2:	4621      	mov	r1, r4
   d69c4:	a801      	add	r0, sp, #4
   d69c6:	f7ff fddb 	bl	d6580 <mbedtls_asn1_get_tag>
   d69ca:	2800      	cmp	r0, #0
   d69cc:	d134      	bne.n	d6a38 <mbedtls_x509_get_rsassa_pss_params+0x1a0>
        end2 = p + len;
   d69ce:	e9dd 6101 	ldrd	r6, r1, [sp, #4]
   d69d2:	440e      	add	r6, r1
        if( ( ret = mbedtls_asn1_get_int( &p, end2, salt_len ) ) != 0 )
   d69d4:	462a      	mov	r2, r5
   d69d6:	4631      	mov	r1, r6
   d69d8:	a801      	add	r0, sp, #4
   d69da:	f7ff fdfe 	bl	d65da <mbedtls_asn1_get_int>
   d69de:	2800      	cmp	r0, #0
   d69e0:	d188      	bne.n	d68f4 <mbedtls_x509_get_rsassa_pss_params+0x5c>
        if( p != end2 )
   d69e2:	9b01      	ldr	r3, [sp, #4]
   d69e4:	42b3      	cmp	r3, r6
   d69e6:	d18b      	bne.n	d6900 <mbedtls_x509_get_rsassa_pss_params+0x68>
    if( p == end )
   d69e8:	9b01      	ldr	r3, [sp, #4]
   d69ea:	42a3      	cmp	r3, r4
   d69ec:	f43f af68 	beq.w	d68c0 <mbedtls_x509_get_rsassa_pss_params+0x28>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   d69f0:	23a3      	movs	r3, #163	; 0xa3
   d69f2:	aa02      	add	r2, sp, #8
   d69f4:	4621      	mov	r1, r4
   d69f6:	a801      	add	r0, sp, #4
   d69f8:	f7ff fdc2 	bl	d6580 <mbedtls_asn1_get_tag>
   d69fc:	bb10      	cbnz	r0, d6a44 <mbedtls_x509_get_rsassa_pss_params+0x1ac>
        end2 = p + len;
   d69fe:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
   d6a02:	440d      	add	r5, r1
        if( ( ret = mbedtls_asn1_get_int( &p, end2, &trailer_field ) ) != 0 )
   d6a04:	aa0b      	add	r2, sp, #44	; 0x2c
   d6a06:	4629      	mov	r1, r5
   d6a08:	a801      	add	r0, sp, #4
   d6a0a:	f7ff fde6 	bl	d65da <mbedtls_asn1_get_int>
   d6a0e:	2800      	cmp	r0, #0
   d6a10:	f47f af70 	bne.w	d68f4 <mbedtls_x509_get_rsassa_pss_params+0x5c>
        if( p != end2 )
   d6a14:	9b01      	ldr	r3, [sp, #4]
   d6a16:	42ab      	cmp	r3, r5
   d6a18:	f47f af72 	bne.w	d6900 <mbedtls_x509_get_rsassa_pss_params+0x68>
        if( trailer_field != 1 )
   d6a1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d6a1e:	2b01      	cmp	r3, #1
   d6a20:	d10e      	bne.n	d6a40 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
    if( p != end )
   d6a22:	9b01      	ldr	r3, [sp, #4]
   d6a24:	42a3      	cmp	r3, r4
   d6a26:	f43f af4b 	beq.w	d68c0 <mbedtls_x509_get_rsassa_pss_params+0x28>
   d6a2a:	e769      	b.n	d6900 <mbedtls_x509_get_rsassa_pss_params+0x68>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d6a2c:	480b      	ldr	r0, [pc, #44]	; (d6a5c <mbedtls_x509_get_rsassa_pss_params+0x1c4>)
   d6a2e:	e748      	b.n	d68c2 <mbedtls_x509_get_rsassa_pss_params+0x2a>
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   d6a30:	f110 0f62 	cmn.w	r0, #98	; 0x62
   d6a34:	d0c0      	beq.n	d69b8 <mbedtls_x509_get_rsassa_pss_params+0x120>
   d6a36:	e75d      	b.n	d68f4 <mbedtls_x509_get_rsassa_pss_params+0x5c>
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   d6a38:	f110 0f62 	cmn.w	r0, #98	; 0x62
   d6a3c:	d0d4      	beq.n	d69e8 <mbedtls_x509_get_rsassa_pss_params+0x150>
   d6a3e:	e759      	b.n	d68f4 <mbedtls_x509_get_rsassa_pss_params+0x5c>
            return( MBEDTLS_ERR_X509_INVALID_ALG );
   d6a40:	4807      	ldr	r0, [pc, #28]	; (d6a60 <mbedtls_x509_get_rsassa_pss_params+0x1c8>)
   d6a42:	e73e      	b.n	d68c2 <mbedtls_x509_get_rsassa_pss_params+0x2a>
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   d6a44:	f110 0f62 	cmn.w	r0, #98	; 0x62
   d6a48:	d0eb      	beq.n	d6a22 <mbedtls_x509_get_rsassa_pss_params+0x18a>
   d6a4a:	e753      	b.n	d68f4 <mbedtls_x509_get_rsassa_pss_params+0x5c>
                    MBEDTLS_ERR_OID_NOT_FOUND );
   d6a4c:	4805      	ldr	r0, [pc, #20]	; (d6a64 <mbedtls_x509_get_rsassa_pss_params+0x1cc>)
   d6a4e:	e738      	b.n	d68c2 <mbedtls_x509_get_rsassa_pss_params+0x2a>
   d6a50:	ffffdc9a 	.word	0xffffdc9a
   d6a54:	000eb86c 	.word	0x000eb86c
   d6a58:	ffffdc9e 	.word	0xffffdc9e
   d6a5c:	ffffdca0 	.word	0xffffdca0
   d6a60:	ffffdd00 	.word	0xffffdd00
   d6a64:	ffffdf52 	.word	0xffffdf52

000d6a68 <mbedtls_x509_get_name>:
{
   d6a68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
   d6a6c:	f8df 80fc 	ldr.w	r8, [pc, #252]	; d6b6c <mbedtls_x509_get_name+0x104>
{
   d6a70:	4604      	mov	r4, r0
   d6a72:	460f      	mov	r7, r1
   d6a74:	4691      	mov	r9, r2
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
   d6a76:	2331      	movs	r3, #49	; 0x31
   d6a78:	466a      	mov	r2, sp
   d6a7a:	4639      	mov	r1, r7
   d6a7c:	4620      	mov	r0, r4
   d6a7e:	f7ff fd7f 	bl	d6580 <mbedtls_asn1_get_tag>
   d6a82:	b120      	cbz	r0, d6a8e <mbedtls_x509_get_name+0x26>
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
   d6a84:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
}
   d6a88:	b003      	add	sp, #12
   d6a8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        end_set  = *p + set_len;
   d6a8e:	6826      	ldr	r6, [r4, #0]
   d6a90:	9b00      	ldr	r3, [sp, #0]
   d6a92:	464d      	mov	r5, r9
   d6a94:	441e      	add	r6, r3
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d6a96:	2330      	movs	r3, #48	; 0x30
   d6a98:	aa01      	add	r2, sp, #4
   d6a9a:	4631      	mov	r1, r6
   d6a9c:	4620      	mov	r0, r4
   d6a9e:	f7ff fd6f 	bl	d6580 <mbedtls_asn1_get_tag>
   d6aa2:	b188      	cbz	r0, d6ac8 <mbedtls_x509_get_name+0x60>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
   d6aa4:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
   d6aa8:	2800      	cmp	r0, #0
   d6aaa:	d1ed      	bne.n	d6a88 <mbedtls_x509_get_name+0x20>
            if( *p == end_set )
   d6aac:	6823      	ldr	r3, [r4, #0]
   d6aae:	42b3      	cmp	r3, r6
   d6ab0:	d046      	beq.n	d6b40 <mbedtls_x509_get_name+0xd8>
            cur->next_merged = 1;
   d6ab2:	2001      	movs	r0, #1
   d6ab4:	7728      	strb	r0, [r5, #28]
            cur->next = (mbedtls_asn1_named_data *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
   d6ab6:	2120      	movs	r1, #32
   d6ab8:	f012 f920 	bl	e8cfc <calloc>
   d6abc:	61a8      	str	r0, [r5, #24]
            if( cur->next == NULL )
   d6abe:	b908      	cbnz	r0, d6ac4 <mbedtls_x509_get_name+0x5c>
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   d6ac0:	4826      	ldr	r0, [pc, #152]	; (d6b5c <mbedtls_x509_get_name+0xf4>)
   d6ac2:	e7e1      	b.n	d6a88 <mbedtls_x509_get_name+0x20>
   d6ac4:	4605      	mov	r5, r0
   d6ac6:	e7e6      	b.n	d6a96 <mbedtls_x509_get_name+0x2e>
    end = *p + len;
   d6ac8:	9a01      	ldr	r2, [sp, #4]
   d6aca:	6823      	ldr	r3, [r4, #0]
    if( ( end - *p ) < 1 )
   d6acc:	2a00      	cmp	r2, #0
    end = *p + len;
   d6ace:	eb03 0902 	add.w	r9, r3, r2
    if( ( end - *p ) < 1 )
   d6ad2:	dc01      	bgt.n	d6ad8 <mbedtls_x509_get_name+0x70>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d6ad4:	4822      	ldr	r0, [pc, #136]	; (d6b60 <mbedtls_x509_get_name+0xf8>)
   d6ad6:	e7d7      	b.n	d6a88 <mbedtls_x509_get_name+0x20>
    oid->tag = **p;
   d6ad8:	462a      	mov	r2, r5
   d6ada:	781b      	ldrb	r3, [r3, #0]
   d6adc:	f842 3b04 	str.w	r3, [r2], #4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
   d6ae0:	4649      	mov	r1, r9
   d6ae2:	2306      	movs	r3, #6
   d6ae4:	4620      	mov	r0, r4
   d6ae6:	f7ff fd4b 	bl	d6580 <mbedtls_asn1_get_tag>
   d6aea:	2800      	cmp	r0, #0
   d6aec:	d1da      	bne.n	d6aa4 <mbedtls_x509_get_name+0x3c>
    oid->p = *p;
   d6aee:	6822      	ldr	r2, [r4, #0]
    *p += oid->len;
   d6af0:	6868      	ldr	r0, [r5, #4]
    oid->p = *p;
   d6af2:	60aa      	str	r2, [r5, #8]
    *p += oid->len;
   d6af4:	1813      	adds	r3, r2, r0
    if( ( end - *p ) < 1 )
   d6af6:	eba9 0103 	sub.w	r1, r9, r3
   d6afa:	2900      	cmp	r1, #0
    *p += oid->len;
   d6afc:	6023      	str	r3, [r4, #0]
    if( ( end - *p ) < 1 )
   d6afe:	dde9      	ble.n	d6ad4 <mbedtls_x509_get_name+0x6c>
    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
   d6b00:	5c11      	ldrb	r1, [r2, r0]
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
   d6b02:	291e      	cmp	r1, #30
   d6b04:	d81a      	bhi.n	d6b3c <mbedtls_x509_get_name+0xd4>
   d6b06:	fa28 f101 	lsr.w	r1, r8, r1
   d6b0a:	07c9      	lsls	r1, r1, #31
   d6b0c:	d516      	bpl.n	d6b3c <mbedtls_x509_get_name+0xd4>
    val->tag = *(*p)++;
   d6b0e:	3301      	adds	r3, #1
   d6b10:	6023      	str	r3, [r4, #0]
   d6b12:	5c13      	ldrb	r3, [r2, r0]
   d6b14:	60eb      	str	r3, [r5, #12]
    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
   d6b16:	f105 0210 	add.w	r2, r5, #16
   d6b1a:	4649      	mov	r1, r9
   d6b1c:	4620      	mov	r0, r4
   d6b1e:	f7ff fce3 	bl	d64e8 <mbedtls_asn1_get_len>
   d6b22:	2800      	cmp	r0, #0
   d6b24:	d1be      	bne.n	d6aa4 <mbedtls_x509_get_name+0x3c>
    val->p = *p;
   d6b26:	6823      	ldr	r3, [r4, #0]
    *p += val->len;
   d6b28:	692a      	ldr	r2, [r5, #16]
    val->p = *p;
   d6b2a:	616b      	str	r3, [r5, #20]
    *p += val->len;
   d6b2c:	4413      	add	r3, r2
    if( *p != end )
   d6b2e:	4599      	cmp	r9, r3
    *p += val->len;
   d6b30:	6023      	str	r3, [r4, #0]
    if( *p != end )
   d6b32:	d101      	bne.n	d6b38 <mbedtls_x509_get_name+0xd0>
    cur->next = NULL;
   d6b34:	61a8      	str	r0, [r5, #24]
    return( 0 );
   d6b36:	e7b9      	b.n	d6aac <mbedtls_x509_get_name+0x44>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d6b38:	480a      	ldr	r0, [pc, #40]	; (d6b64 <mbedtls_x509_get_name+0xfc>)
   d6b3a:	e7a5      	b.n	d6a88 <mbedtls_x509_get_name+0x20>
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   d6b3c:	480a      	ldr	r0, [pc, #40]	; (d6b68 <mbedtls_x509_get_name+0x100>)
   d6b3e:	e7a3      	b.n	d6a88 <mbedtls_x509_get_name+0x20>
        if( *p == end )
   d6b40:	42b7      	cmp	r7, r6
   d6b42:	d008      	beq.n	d6b56 <mbedtls_x509_get_name+0xee>
        cur->next = (mbedtls_asn1_named_data *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
   d6b44:	2120      	movs	r1, #32
   d6b46:	2001      	movs	r0, #1
   d6b48:	f012 f8d8 	bl	e8cfc <calloc>
   d6b4c:	4681      	mov	r9, r0
   d6b4e:	61a8      	str	r0, [r5, #24]
        if( cur->next == NULL )
   d6b50:	2800      	cmp	r0, #0
   d6b52:	d190      	bne.n	d6a76 <mbedtls_x509_get_name+0xe>
   d6b54:	e7b4      	b.n	d6ac0 <mbedtls_x509_get_name+0x58>
            return( 0 );
   d6b56:	2000      	movs	r0, #0
   d6b58:	e796      	b.n	d6a88 <mbedtls_x509_get_name+0x20>
   d6b5a:	bf00      	nop
   d6b5c:	ffffd780 	.word	0xffffd780
   d6b60:	ffffdc20 	.word	0xffffdc20
   d6b64:	ffffdc1a 	.word	0xffffdc1a
   d6b68:	ffffdc1e 	.word	0xffffdc1e
   d6b6c:	50581008 	.word	0x50581008

000d6b70 <mbedtls_x509_get_time>:
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
   d6b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
   d6b72:	6803      	ldr	r3, [r0, #0]
{
   d6b74:	4614      	mov	r4, r2
    if( ( end - *p ) < 1 )
   d6b76:	1aca      	subs	r2, r1, r3
   d6b78:	2a00      	cmp	r2, #0
{
   d6b7a:	4605      	mov	r5, r0
    if( ( end - *p ) < 1 )
   d6b7c:	f340 80a0 	ble.w	d6cc0 <mbedtls_x509_get_time+0x150>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;
   d6b80:	781a      	ldrb	r2, [r3, #0]

    if( tag == MBEDTLS_ASN1_UTC_TIME )
   d6b82:	2a17      	cmp	r2, #23
   d6b84:	d00e      	beq.n	d6ba4 <mbedtls_x509_get_time+0x34>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
   d6b86:	2a18      	cmp	r2, #24
   d6b88:	f040 809c 	bne.w	d6cc4 <mbedtls_x509_get_time+0x154>
        year_len = 4;
   d6b8c:	2704      	movs	r7, #4
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
   d6b8e:	3301      	adds	r3, #1
   d6b90:	602b      	str	r3, [r5, #0]
    ret = mbedtls_asn1_get_len( p, end, &len );
   d6b92:	aa01      	add	r2, sp, #4
   d6b94:	4628      	mov	r0, r5
   d6b96:	f7ff fca7 	bl	d64e8 <mbedtls_asn1_get_len>

    if( ret != 0 )
   d6b9a:	b128      	cbz	r0, d6ba8 <mbedtls_x509_get_time+0x38>
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
   d6b9c:	f5a0 5010 	sub.w	r0, r0, #9216	; 0x2400

    return x509_parse_time( p, len, year_len, tm );
}
   d6ba0:	b003      	add	sp, #12
   d6ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        year_len = 2;
   d6ba4:	2702      	movs	r7, #2
   d6ba6:	e7f2      	b.n	d6b8e <mbedtls_x509_get_time+0x1e>
    return x509_parse_time( p, len, year_len, tm );
   d6ba8:	9e01      	ldr	r6, [sp, #4]
    if ( len < yearlen + 8 )
   d6baa:	f107 0308 	add.w	r3, r7, #8
   d6bae:	429e      	cmp	r6, r3
   d6bb0:	d201      	bcs.n	d6bb6 <mbedtls_x509_get_time+0x46>
   d6bb2:	4845      	ldr	r0, [pc, #276]	; (d6cc8 <mbedtls_x509_get_time+0x158>)
   d6bb4:	e7f4      	b.n	d6ba0 <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, yearlen, &tm->year ) );
   d6bb6:	4622      	mov	r2, r4
   d6bb8:	4639      	mov	r1, r7
   d6bba:	4628      	mov	r0, r5
   d6bbc:	f7ff fe1a 	bl	d67f4 <_ZL14x509_parse_intPPhjPi>
   d6bc0:	2800      	cmp	r0, #0
   d6bc2:	d1ed      	bne.n	d6ba0 <mbedtls_x509_get_time+0x30>
    if ( 2 == yearlen )
   d6bc4:	2f02      	cmp	r7, #2
   d6bc6:	d108      	bne.n	d6bda <mbedtls_x509_get_time+0x6a>
        if ( tm->year < 50 )
   d6bc8:	6823      	ldr	r3, [r4, #0]
   d6bca:	2b31      	cmp	r3, #49	; 0x31
            tm->year += 100;
   d6bcc:	bfdc      	itt	le
   d6bce:	3364      	addle	r3, #100	; 0x64
   d6bd0:	6023      	strle	r3, [r4, #0]
        tm->year += 1900;
   d6bd2:	6823      	ldr	r3, [r4, #0]
   d6bd4:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d6bd8:	6023      	str	r3, [r4, #0]
    CHECK( x509_parse_int( p, 2, &tm->mon ) );
   d6bda:	1d22      	adds	r2, r4, #4
   d6bdc:	2102      	movs	r1, #2
   d6bde:	4628      	mov	r0, r5
   d6be0:	f7ff fe08 	bl	d67f4 <_ZL14x509_parse_intPPhjPi>
   d6be4:	2800      	cmp	r0, #0
   d6be6:	d1db      	bne.n	d6ba0 <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->day ) );
   d6be8:	f104 0208 	add.w	r2, r4, #8
   d6bec:	2102      	movs	r1, #2
   d6bee:	4628      	mov	r0, r5
   d6bf0:	f7ff fe00 	bl	d67f4 <_ZL14x509_parse_intPPhjPi>
   d6bf4:	2800      	cmp	r0, #0
   d6bf6:	d1d3      	bne.n	d6ba0 <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->hour ) );
   d6bf8:	f104 020c 	add.w	r2, r4, #12
   d6bfc:	2102      	movs	r1, #2
   d6bfe:	4628      	mov	r0, r5
   d6c00:	f7ff fdf8 	bl	d67f4 <_ZL14x509_parse_intPPhjPi>
   d6c04:	2800      	cmp	r0, #0
   d6c06:	d1cb      	bne.n	d6ba0 <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->min ) );
   d6c08:	f104 0210 	add.w	r2, r4, #16
   d6c0c:	2102      	movs	r1, #2
   d6c0e:	4628      	mov	r0, r5
   d6c10:	f7ff fdf0 	bl	d67f4 <_ZL14x509_parse_intPPhjPi>
   d6c14:	2800      	cmp	r0, #0
   d6c16:	d1c3      	bne.n	d6ba0 <mbedtls_x509_get_time+0x30>
    len -= yearlen + 8;
   d6c18:	1bf6      	subs	r6, r6, r7
   d6c1a:	f1a6 0308 	sub.w	r3, r6, #8
    if ( len >= 2 )
   d6c1e:	2b01      	cmp	r3, #1
   d6c20:	d9c7      	bls.n	d6bb2 <mbedtls_x509_get_time+0x42>
        CHECK( x509_parse_int( p, 2, &tm->sec ) );
   d6c22:	f104 0214 	add.w	r2, r4, #20
   d6c26:	2102      	movs	r1, #2
   d6c28:	4628      	mov	r0, r5
   d6c2a:	f7ff fde3 	bl	d67f4 <_ZL14x509_parse_intPPhjPi>
   d6c2e:	2800      	cmp	r0, #0
   d6c30:	d1b6      	bne.n	d6ba0 <mbedtls_x509_get_time+0x30>
    if ( 1 == len && 'Z' == **p )
   d6c32:	2e0b      	cmp	r6, #11
        len -= 2;
   d6c34:	f1a6 030a 	sub.w	r3, r6, #10
    if ( 1 == len && 'Z' == **p )
   d6c38:	d11f      	bne.n	d6c7a <mbedtls_x509_get_time+0x10a>
   d6c3a:	682b      	ldr	r3, [r5, #0]
   d6c3c:	781a      	ldrb	r2, [r3, #0]
   d6c3e:	2a5a      	cmp	r2, #90	; 0x5a
   d6c40:	d1b7      	bne.n	d6bb2 <mbedtls_x509_get_time+0x42>
        (*p)++;
   d6c42:	3301      	adds	r3, #1
   d6c44:	602b      	str	r3, [r5, #0]
    CHECK_RANGE( 0, 9999, t->year );
   d6c46:	6823      	ldr	r3, [r4, #0]
   d6c48:	f242 720f 	movw	r2, #9999	; 0x270f
   d6c4c:	4293      	cmp	r3, r2
   d6c4e:	d8b0      	bhi.n	d6bb2 <mbedtls_x509_get_time+0x42>
    CHECK_RANGE( 0, 23,   t->hour );
   d6c50:	68e2      	ldr	r2, [r4, #12]
   d6c52:	2a17      	cmp	r2, #23
   d6c54:	d8ad      	bhi.n	d6bb2 <mbedtls_x509_get_time+0x42>
    CHECK_RANGE( 0, 59,   t->min  );
   d6c56:	6922      	ldr	r2, [r4, #16]
   d6c58:	2a3b      	cmp	r2, #59	; 0x3b
   d6c5a:	d8aa      	bhi.n	d6bb2 <mbedtls_x509_get_time+0x42>
    CHECK_RANGE( 0, 59,   t->sec  );
   d6c5c:	6962      	ldr	r2, [r4, #20]
   d6c5e:	2a3b      	cmp	r2, #59	; 0x3b
   d6c60:	d8a7      	bhi.n	d6bb2 <mbedtls_x509_get_time+0x42>
    switch( t->mon )
   d6c62:	6862      	ldr	r2, [r4, #4]
   d6c64:	3a01      	subs	r2, #1
   d6c66:	2a0b      	cmp	r2, #11
   d6c68:	d8a3      	bhi.n	d6bb2 <mbedtls_x509_get_time+0x42>
   d6c6a:	e8df f002 	tbb	[pc, r2]
   d6c6e:	1225      	.short	0x1225
   d6c70:	09250925 	.word	0x09250925
   d6c74:	25092525 	.word	0x25092525
   d6c78:	2509      	.short	0x2509
    if ( 0 != len )
   d6c7a:	2b00      	cmp	r3, #0
   d6c7c:	d0e3      	beq.n	d6c46 <mbedtls_x509_get_time+0xd6>
   d6c7e:	e798      	b.n	d6bb2 <mbedtls_x509_get_time+0x42>
    switch( t->mon )
   d6c80:	231e      	movs	r3, #30
    CHECK_RANGE( 1, month_len, t->day );
   d6c82:	68a2      	ldr	r2, [r4, #8]
   d6c84:	2a00      	cmp	r2, #0
   d6c86:	dd94      	ble.n	d6bb2 <mbedtls_x509_get_time+0x42>
   d6c88:	490f      	ldr	r1, [pc, #60]	; (d6cc8 <mbedtls_x509_get_time+0x158>)
   d6c8a:	429a      	cmp	r2, r3
   d6c8c:	bfc8      	it	gt
   d6c8e:	4608      	movgt	r0, r1
   d6c90:	e786      	b.n	d6ba0 <mbedtls_x509_get_time+0x30>
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
   d6c92:	079a      	lsls	r2, r3, #30
   d6c94:	d105      	bne.n	d6ca2 <mbedtls_x509_get_time+0x132>
   d6c96:	2164      	movs	r1, #100	; 0x64
   d6c98:	fb93 f2f1 	sdiv	r2, r3, r1
   d6c9c:	fb01 3212 	mls	r2, r1, r2, r3
   d6ca0:	b962      	cbnz	r2, d6cbc <mbedtls_x509_get_time+0x14c>
   d6ca2:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d6ca6:	fb93 f2f1 	sdiv	r2, r3, r1
   d6caa:	fb01 3312 	mls	r3, r1, r2, r3
                month_len = 28;
   d6cae:	2b00      	cmp	r3, #0
   d6cb0:	bf0c      	ite	eq
   d6cb2:	231d      	moveq	r3, #29
   d6cb4:	231c      	movne	r3, #28
   d6cb6:	e7e4      	b.n	d6c82 <mbedtls_x509_get_time+0x112>
            month_len = 31;
   d6cb8:	231f      	movs	r3, #31
   d6cba:	e7e2      	b.n	d6c82 <mbedtls_x509_get_time+0x112>
                month_len = 29;
   d6cbc:	231d      	movs	r3, #29
   d6cbe:	e7e0      	b.n	d6c82 <mbedtls_x509_get_time+0x112>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d6cc0:	4802      	ldr	r0, [pc, #8]	; (d6ccc <mbedtls_x509_get_time+0x15c>)
   d6cc2:	e76d      	b.n	d6ba0 <mbedtls_x509_get_time+0x30>
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   d6cc4:	4802      	ldr	r0, [pc, #8]	; (d6cd0 <mbedtls_x509_get_time+0x160>)
   d6cc6:	e76b      	b.n	d6ba0 <mbedtls_x509_get_time+0x30>
   d6cc8:	ffffdc00 	.word	0xffffdc00
   d6ccc:	ffffdba0 	.word	0xffffdba0
   d6cd0:	ffffdb9e 	.word	0xffffdb9e

000d6cd4 <mbedtls_x509_get_sig>:

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
   d6cd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6cd6:	4615      	mov	r5, r2
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
   d6cd8:	6802      	ldr	r2, [r0, #0]
   d6cda:	1a8b      	subs	r3, r1, r2
   d6cdc:	2b00      	cmp	r3, #0
{
   d6cde:	4604      	mov	r4, r0
    if( ( end - *p ) < 1 )
   d6ce0:	dd10      	ble.n	d6d04 <mbedtls_x509_get_sig+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;
   d6ce2:	7816      	ldrb	r6, [r2, #0]

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
   d6ce4:	aa01      	add	r2, sp, #4
   d6ce6:	f7ff fcd1 	bl	d668c <mbedtls_asn1_get_bitstring_null>
   d6cea:	b118      	cbz	r0, d6cf4 <mbedtls_x509_get_sig+0x20>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
   d6cec:	f5a0 5012 	sub.w	r0, r0, #9344	; 0x2480
    sig->p = *p;

    *p += len;

    return( 0 );
}
   d6cf0:	b002      	add	sp, #8
   d6cf2:	bd70      	pop	{r4, r5, r6, pc}
    sig->len = len;
   d6cf4:	9a01      	ldr	r2, [sp, #4]
    tag_type = **p;
   d6cf6:	602e      	str	r6, [r5, #0]
    sig->len = len;
   d6cf8:	606a      	str	r2, [r5, #4]
    sig->p = *p;
   d6cfa:	6823      	ldr	r3, [r4, #0]
   d6cfc:	60ab      	str	r3, [r5, #8]
    *p += len;
   d6cfe:	4413      	add	r3, r2
   d6d00:	6023      	str	r3, [r4, #0]
    return( 0 );
   d6d02:	e7f5      	b.n	d6cf0 <mbedtls_x509_get_sig+0x1c>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   d6d04:	4800      	ldr	r0, [pc, #0]	; (d6d08 <mbedtls_x509_get_sig+0x34>)
   d6d06:	e7f3      	b.n	d6cf0 <mbedtls_x509_get_sig+0x1c>
   d6d08:	ffffdb20 	.word	0xffffdb20

000d6d0c <mbedtls_x509_get_sig_alg>:
 * Get signature algorithm from alg OID and optional parameters
 */
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts )
{
   d6d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6d10:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d6d14:	461d      	mov	r5, r3
    int ret;

    if( *sig_opts != NULL )
   d6d16:	f8d8 3000 	ldr.w	r3, [r8]
{
   d6d1a:	460e      	mov	r6, r1
   d6d1c:	4617      	mov	r7, r2
    if( *sig_opts != NULL )
   d6d1e:	bb63      	cbnz	r3, d6d7a <mbedtls_x509_get_sig_alg+0x6e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
   d6d20:	462a      	mov	r2, r5
   d6d22:	4639      	mov	r1, r7
   d6d24:	f003 f98b 	bl	da03e <mbedtls_oid_get_sig_alg>
   d6d28:	4604      	mov	r4, r0
   d6d2a:	b120      	cbz	r0, d6d36 <mbedtls_x509_get_sig_alg+0x2a>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
   d6d2c:	f5a0 5418 	sub.w	r4, r0, #9728	; 0x2600
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
    }

    return( 0 );
}
   d6d30:	4620      	mov	r0, r4
   d6d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( *pk_alg == MBEDTLS_PK_RSASSA_PSS )
   d6d36:	782b      	ldrb	r3, [r5, #0]
   d6d38:	2b06      	cmp	r3, #6
   d6d3a:	d114      	bne.n	d6d66 <mbedtls_x509_get_sig_alg+0x5a>
        pss_opts = (mbedtls_pk_rsassa_pss_options *)mbedtls_calloc( 1, sizeof( mbedtls_pk_rsassa_pss_options ) );
   d6d3c:	2108      	movs	r1, #8
   d6d3e:	2001      	movs	r0, #1
   d6d40:	f011 ffdc 	bl	e8cfc <calloc>
        if( pss_opts == NULL )
   d6d44:	4605      	mov	r5, r0
   d6d46:	b1d0      	cbz	r0, d6d7e <mbedtls_x509_get_sig_alg+0x72>
        ret = mbedtls_x509_get_rsassa_pss_params( sig_params,
   d6d48:	1d03      	adds	r3, r0, #4
   d6d4a:	4602      	mov	r2, r0
   d6d4c:	4639      	mov	r1, r7
   d6d4e:	4630      	mov	r0, r6
   d6d50:	f7ff fda2 	bl	d6898 <mbedtls_x509_get_rsassa_pss_params>
        if( ret != 0 )
   d6d54:	4604      	mov	r4, r0
   d6d56:	b118      	cbz	r0, d6d60 <mbedtls_x509_get_sig_alg+0x54>
            mbedtls_free( pss_opts );
   d6d58:	4628      	mov	r0, r5
   d6d5a:	f00e fe25 	bl	e59a8 <free>
            return( ret );
   d6d5e:	e7e7      	b.n	d6d30 <mbedtls_x509_get_sig_alg+0x24>
        *sig_opts = (void *) pss_opts;
   d6d60:	f8c8 5000 	str.w	r5, [r8]
   d6d64:	e7e4      	b.n	d6d30 <mbedtls_x509_get_sig_alg+0x24>
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
   d6d66:	6833      	ldr	r3, [r6, #0]
   d6d68:	2b05      	cmp	r3, #5
   d6d6a:	d000      	beq.n	d6d6e <mbedtls_x509_get_sig_alg+0x62>
   d6d6c:	b94b      	cbnz	r3, d6d82 <mbedtls_x509_get_sig_alg+0x76>
   d6d6e:	6872      	ldr	r2, [r6, #4]
        return( MBEDTLS_ERR_X509_INVALID_ALG );
   d6d70:	4b05      	ldr	r3, [pc, #20]	; (d6d88 <mbedtls_x509_get_sig_alg+0x7c>)
   d6d72:	2a00      	cmp	r2, #0
   d6d74:	bf18      	it	ne
   d6d76:	461c      	movne	r4, r3
   d6d78:	e7da      	b.n	d6d30 <mbedtls_x509_get_sig_alg+0x24>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   d6d7a:	4c04      	ldr	r4, [pc, #16]	; (d6d8c <mbedtls_x509_get_sig_alg+0x80>)
   d6d7c:	e7d8      	b.n	d6d30 <mbedtls_x509_get_sig_alg+0x24>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   d6d7e:	4c04      	ldr	r4, [pc, #16]	; (d6d90 <mbedtls_x509_get_sig_alg+0x84>)
   d6d80:	e7d6      	b.n	d6d30 <mbedtls_x509_get_sig_alg+0x24>
        return( MBEDTLS_ERR_X509_INVALID_ALG );
   d6d82:	4c01      	ldr	r4, [pc, #4]	; (d6d88 <mbedtls_x509_get_sig_alg+0x7c>)
   d6d84:	e7d4      	b.n	d6d30 <mbedtls_x509_get_sig_alg+0x24>
   d6d86:	bf00      	nop
   d6d88:	ffffdd00 	.word	0xffffdd00
   d6d8c:	ffffd800 	.word	0xffffd800
   d6d90:	ffffd780 	.word	0xffffd780

000d6d94 <mbedtls_x509_get_ext>:
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                          mbedtls_x509_buf *ext, int tag )
{
   d6d94:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t len;

    /* Extension structure use EXPLICIT tagging. That is, the actual
     * `Extensions` structure is wrapped by a tag-length pair using
     * the respective context-specific tag. */
    ret = mbedtls_asn1_get_tag( p, end, &ext->len,
   d6d96:	f043 06a0 	orr.w	r6, r3, #160	; 0xa0
{
   d6d9a:	4614      	mov	r4, r2
    ret = mbedtls_asn1_get_tag( p, end, &ext->len,
   d6d9c:	4633      	mov	r3, r6
   d6d9e:	3204      	adds	r2, #4
{
   d6da0:	4605      	mov	r5, r0
    ret = mbedtls_asn1_get_tag( p, end, &ext->len,
   d6da2:	f7ff fbed 	bl	d6580 <mbedtls_asn1_get_tag>
              MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag );
    if( ret != 0 )
   d6da6:	b118      	cbz	r0, d6db0 <mbedtls_x509_get_ext+0x1c>
    /*
     * Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
   d6da8:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
    if( end != *p + len )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
   d6dac:	b002      	add	sp, #8
   d6dae:	bd70      	pop	{r4, r5, r6, pc}
    ext->tag = MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag;
   d6db0:	6026      	str	r6, [r4, #0]
    ext->p   = *p;
   d6db2:	6829      	ldr	r1, [r5, #0]
   d6db4:	60a1      	str	r1, [r4, #8]
    end      = *p + ext->len;
   d6db6:	6864      	ldr	r4, [r4, #4]
   d6db8:	440c      	add	r4, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   d6dba:	2330      	movs	r3, #48	; 0x30
   d6dbc:	aa01      	add	r2, sp, #4
   d6dbe:	4621      	mov	r1, r4
   d6dc0:	4628      	mov	r0, r5
   d6dc2:	f7ff fbdd 	bl	d6580 <mbedtls_asn1_get_tag>
   d6dc6:	2800      	cmp	r0, #0
   d6dc8:	d1ee      	bne.n	d6da8 <mbedtls_x509_get_ext+0x14>
    if( end != *p + len )
   d6dca:	9a01      	ldr	r2, [sp, #4]
   d6dcc:	682b      	ldr	r3, [r5, #0]
   d6dce:	4413      	add	r3, r2
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   d6dd0:	4a02      	ldr	r2, [pc, #8]	; (d6ddc <mbedtls_x509_get_ext+0x48>)
   d6dd2:	429c      	cmp	r4, r3
   d6dd4:	bf18      	it	ne
   d6dd6:	4610      	movne	r0, r2
   d6dd8:	e7e8      	b.n	d6dac <mbedtls_x509_get_ext+0x18>
   d6dda:	bf00      	nop
   d6ddc:	ffffda9a 	.word	0xffffda9a

000d6de0 <mbedtls_x509_dn_gets>:
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
   d6de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6de4:	b0c3      	sub	sp, #268	; 0x10c
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
   d6de6:	f04f 0a00 	mov.w	sl, #0
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
   d6dea:	f10d 0908 	add.w	r9, sp, #8
{
   d6dee:	460f      	mov	r7, r1
   d6df0:	4690      	mov	r8, r2
    memset( s, 0, sizeof( s ) );
   d6df2:	4651      	mov	r1, sl
{
   d6df4:	4604      	mov	r4, r0
    memset( s, 0, sizeof( s ) );
   d6df6:	f44f 7280 	mov.w	r2, #256	; 0x100
   d6dfa:	4648      	mov	r0, r9
    const char *short_name = NULL;
   d6dfc:	f8cd a004 	str.w	sl, [sp, #4]
        }

        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );

        if( ret == 0 )
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
   d6e00:	f8df b0dc 	ldr.w	fp, [pc, #220]	; d6ee0 <mbedtls_x509_dn_gets+0x100>
    memset( s, 0, sizeof( s ) );
   d6e04:	f012 f81a 	bl	e8e3c <memset>
    unsigned char c, merge = 0;
   d6e08:	4651      	mov	r1, sl
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
   d6e0a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; d6ee4 <mbedtls_x509_dn_gets+0x104>
    name = dn;
   d6e0e:	4646      	mov	r6, r8
    n = size;
   d6e10:	463d      	mov	r5, r7
    while( name != NULL )
   d6e12:	2e00      	cmp	r6, #0
   d6e14:	d059      	beq.n	d6eca <mbedtls_x509_dn_gets+0xea>
        if( !name->oid.p )
   d6e16:	68b3      	ldr	r3, [r6, #8]
   d6e18:	b90b      	cbnz	r3, d6e1e <mbedtls_x509_dn_gets+0x3e>
        s[i] = '\0';
        ret = mbedtls_snprintf( p, n, "%s", s );
        MBEDTLS_X509_SAFE_SNPRINTF;

        merge = name->next_merged;
        name = name->next;
   d6e1a:	69b6      	ldr	r6, [r6, #24]
   d6e1c:	e7f9      	b.n	d6e12 <mbedtls_x509_dn_gets+0x32>
        if( name != dn )
   d6e1e:	4546      	cmp	r6, r8
   d6e20:	d012      	beq.n	d6e48 <mbedtls_x509_dn_gets+0x68>
            ret = mbedtls_snprintf( p, n, merge ? " + " : ", " );
   d6e22:	4b2b      	ldr	r3, [pc, #172]	; (d6ed0 <mbedtls_x509_dn_gets+0xf0>)
   d6e24:	4a2b      	ldr	r2, [pc, #172]	; (d6ed4 <mbedtls_x509_dn_gets+0xf4>)
   d6e26:	4620      	mov	r0, r4
   d6e28:	2900      	cmp	r1, #0
   d6e2a:	bf08      	it	eq
   d6e2c:	461a      	moveq	r2, r3
   d6e2e:	4629      	mov	r1, r5
   d6e30:	f00e fdd2 	bl	e59d8 <snprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
   d6e34:	2800      	cmp	r0, #0
   d6e36:	da03      	bge.n	d6e40 <mbedtls_x509_dn_gets+0x60>
   d6e38:	4827      	ldr	r0, [pc, #156]	; (d6ed8 <mbedtls_x509_dn_gets+0xf8>)
    }

    return( (int) ( size - n ) );
}
   d6e3a:	b043      	add	sp, #268	; 0x10c
   d6e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MBEDTLS_X509_SAFE_SNPRINTF;
   d6e40:	42a8      	cmp	r0, r5
   d6e42:	d2f9      	bcs.n	d6e38 <mbedtls_x509_dn_gets+0x58>
   d6e44:	1a2d      	subs	r5, r5, r0
   d6e46:	4404      	add	r4, r0
        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );
   d6e48:	a901      	add	r1, sp, #4
   d6e4a:	4630      	mov	r0, r6
   d6e4c:	f003 f89c 	bl	d9f88 <mbedtls_oid_get_attr_short_name>
        if( ret == 0 )
   d6e50:	bb10      	cbnz	r0, d6e98 <mbedtls_x509_dn_gets+0xb8>
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
   d6e52:	9b01      	ldr	r3, [sp, #4]
   d6e54:	465a      	mov	r2, fp
   d6e56:	4629      	mov	r1, r5
   d6e58:	4620      	mov	r0, r4
   d6e5a:	f00e fdbd 	bl	e59d8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   d6e5e:	2800      	cmp	r0, #0
   d6e60:	dbea      	blt.n	d6e38 <mbedtls_x509_dn_gets+0x58>
   d6e62:	42a8      	cmp	r0, r5
   d6e64:	d2e8      	bcs.n	d6e38 <mbedtls_x509_dn_gets+0x58>
   d6e66:	1a2d      	subs	r5, r5, r0
   d6e68:	4404      	add	r4, r0
        for( i = 0; i < name->val.len; i++ )
   d6e6a:	2200      	movs	r2, #0
   d6e6c:	4648      	mov	r0, r9
   d6e6e:	6933      	ldr	r3, [r6, #16]
   d6e70:	4293      	cmp	r3, r2
   d6e72:	d919      	bls.n	d6ea8 <mbedtls_x509_dn_gets+0xc8>
            if( i >= sizeof( s ) - 1 )
   d6e74:	2aff      	cmp	r2, #255	; 0xff
   d6e76:	d017      	beq.n	d6ea8 <mbedtls_x509_dn_gets+0xc8>
            c = name->val.p[i];
   d6e78:	6973      	ldr	r3, [r6, #20]
   d6e7a:	5c9b      	ldrb	r3, [r3, r2]
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
   d6e7c:	2b1f      	cmp	r3, #31
   d6e7e:	d911      	bls.n	d6ea4 <mbedtls_x509_dn_gets+0xc4>
   d6e80:	2b7f      	cmp	r3, #127	; 0x7f
   d6e82:	d00f      	beq.n	d6ea4 <mbedtls_x509_dn_gets+0xc4>
   d6e84:	f103 017f 	add.w	r1, r3, #127	; 0x7f
   d6e88:	b2c9      	uxtb	r1, r1
                 s[i] = '?';
   d6e8a:	291e      	cmp	r1, #30
   d6e8c:	bf98      	it	ls
   d6e8e:	233f      	movls	r3, #63	; 0x3f
   d6e90:	f800 3b01 	strb.w	r3, [r0], #1
        for( i = 0; i < name->val.len; i++ )
   d6e94:	3201      	adds	r2, #1
   d6e96:	e7ea      	b.n	d6e6e <mbedtls_x509_dn_gets+0x8e>
            ret = mbedtls_snprintf( p, n, "\?\?=" );
   d6e98:	4652      	mov	r2, sl
   d6e9a:	4629      	mov	r1, r5
   d6e9c:	4620      	mov	r0, r4
   d6e9e:	f00e fd9b 	bl	e59d8 <snprintf>
   d6ea2:	e7dc      	b.n	d6e5e <mbedtls_x509_dn_gets+0x7e>
                 s[i] = '?';
   d6ea4:	233f      	movs	r3, #63	; 0x3f
   d6ea6:	e7f3      	b.n	d6e90 <mbedtls_x509_dn_gets+0xb0>
        s[i] = '\0';
   d6ea8:	2300      	movs	r3, #0
   d6eaa:	f809 3002 	strb.w	r3, [r9, r2]
        ret = mbedtls_snprintf( p, n, "%s", s );
   d6eae:	4629      	mov	r1, r5
   d6eb0:	4a0a      	ldr	r2, [pc, #40]	; (d6edc <mbedtls_x509_dn_gets+0xfc>)
   d6eb2:	464b      	mov	r3, r9
   d6eb4:	4620      	mov	r0, r4
   d6eb6:	f00e fd8f 	bl	e59d8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   d6eba:	2800      	cmp	r0, #0
   d6ebc:	dbbc      	blt.n	d6e38 <mbedtls_x509_dn_gets+0x58>
   d6ebe:	42a8      	cmp	r0, r5
   d6ec0:	d2ba      	bcs.n	d6e38 <mbedtls_x509_dn_gets+0x58>
        merge = name->next_merged;
   d6ec2:	7f31      	ldrb	r1, [r6, #28]
        MBEDTLS_X509_SAFE_SNPRINTF;
   d6ec4:	1a2d      	subs	r5, r5, r0
   d6ec6:	4404      	add	r4, r0
        merge = name->next_merged;
   d6ec8:	e7a7      	b.n	d6e1a <mbedtls_x509_dn_gets+0x3a>
    return( (int) ( size - n ) );
   d6eca:	1b78      	subs	r0, r7, r5
   d6ecc:	e7b5      	b.n	d6e3a <mbedtls_x509_dn_gets+0x5a>
   d6ece:	bf00      	nop
   d6ed0:	000eb87a 	.word	0x000eb87a
   d6ed4:	000eb876 	.word	0x000eb876
   d6ed8:	ffffd680 	.word	0xffffd680
   d6edc:	000ece26 	.word	0x000ece26
   d6ee0:	000eb87d 	.word	0x000eb87d
   d6ee4:	000eb881 	.word	0x000eb881

000d6ee8 <mbedtls_x509_serial_gets>:
/*
 * Store the serial in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )
{
   d6ee8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *p;

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
   d6eec:	f8d2 8004 	ldr.w	r8, [r2, #4]
    for( i = 0; i < nr; i++ )
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
   d6ef0:	f8df a088 	ldr.w	sl, [pc, #136]	; d6f7c <mbedtls_x509_serial_gets+0x94>
   d6ef4:	f8df b088 	ldr.w	fp, [pc, #136]	; d6f80 <mbedtls_x509_serial_gets+0x98>
{
   d6ef8:	4691      	mov	r9, r2
        ? serial->len  : 28;
   d6efa:	f1b8 0f21 	cmp.w	r8, #33	; 0x21
        ret = mbedtls_snprintf( p, n, "%02X%s",
   d6efe:	4a1c      	ldr	r2, [pc, #112]	; (d6f70 <mbedtls_x509_serial_gets+0x88>)
{
   d6f00:	4607      	mov	r7, r0
   d6f02:	460d      	mov	r5, r1
        ? serial->len  : 28;
   d6f04:	bf28      	it	cs
   d6f06:	f04f 081c 	movcs.w	r8, #28
    n = size;
   d6f0a:	460c      	mov	r4, r1
    for( i = 0; i < nr; i++ )
   d6f0c:	2600      	movs	r6, #0
   d6f0e:	4546      	cmp	r6, r8
   d6f10:	d020      	beq.n	d6f54 <mbedtls_x509_serial_gets+0x6c>
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
   d6f12:	f8d9 3008 	ldr.w	r3, [r9, #8]
   d6f16:	b926      	cbnz	r6, d6f22 <mbedtls_x509_serial_gets+0x3a>
   d6f18:	f1b8 0f01 	cmp.w	r8, #1
   d6f1c:	d001      	beq.n	d6f22 <mbedtls_x509_serial_gets+0x3a>
   d6f1e:	7819      	ldrb	r1, [r3, #0]
   d6f20:	b1b1      	cbz	r1, d6f50 <mbedtls_x509_serial_gets+0x68>
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
   d6f22:	f108 31ff 	add.w	r1, r8, #4294967295
        ret = mbedtls_snprintf( p, n, "%02X%s",
   d6f26:	42b1      	cmp	r1, r6
   d6f28:	bf8c      	ite	hi
   d6f2a:	4651      	movhi	r1, sl
   d6f2c:	4659      	movls	r1, fp
   d6f2e:	5d9b      	ldrb	r3, [r3, r6]
   d6f30:	9100      	str	r1, [sp, #0]
   d6f32:	4638      	mov	r0, r7
   d6f34:	4621      	mov	r1, r4
   d6f36:	f00e fd4f 	bl	e59d8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   d6f3a:	2800      	cmp	r0, #0
   d6f3c:	4a0c      	ldr	r2, [pc, #48]	; (d6f70 <mbedtls_x509_serial_gets+0x88>)
   d6f3e:	da03      	bge.n	d6f48 <mbedtls_x509_serial_gets+0x60>
   d6f40:	480c      	ldr	r0, [pc, #48]	; (d6f74 <mbedtls_x509_serial_gets+0x8c>)
        ret = mbedtls_snprintf( p, n, "...." );
        MBEDTLS_X509_SAFE_SNPRINTF;
    }

    return( (int) ( size - n ) );
}
   d6f42:	b003      	add	sp, #12
   d6f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MBEDTLS_X509_SAFE_SNPRINTF;
   d6f48:	42a0      	cmp	r0, r4
   d6f4a:	d2f9      	bcs.n	d6f40 <mbedtls_x509_serial_gets+0x58>
   d6f4c:	1a24      	subs	r4, r4, r0
   d6f4e:	4407      	add	r7, r0
    for( i = 0; i < nr; i++ )
   d6f50:	3601      	adds	r6, #1
   d6f52:	e7dc      	b.n	d6f0e <mbedtls_x509_serial_gets+0x26>
    if( nr != serial->len )
   d6f54:	f8d9 3004 	ldr.w	r3, [r9, #4]
   d6f58:	42b3      	cmp	r3, r6
   d6f5a:	d007      	beq.n	d6f6c <mbedtls_x509_serial_gets+0x84>
        ret = mbedtls_snprintf( p, n, "...." );
   d6f5c:	4a06      	ldr	r2, [pc, #24]	; (d6f78 <mbedtls_x509_serial_gets+0x90>)
   d6f5e:	4621      	mov	r1, r4
   d6f60:	4638      	mov	r0, r7
   d6f62:	f00e fd39 	bl	e59d8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   d6f66:	2c04      	cmp	r4, #4
   d6f68:	d9ea      	bls.n	d6f40 <mbedtls_x509_serial_gets+0x58>
   d6f6a:	3c04      	subs	r4, #4
    return( (int) ( size - n ) );
   d6f6c:	1b28      	subs	r0, r5, r4
   d6f6e:	e7e8      	b.n	d6f42 <mbedtls_x509_serial_gets+0x5a>
   d6f70:	000eb885 	.word	0x000eb885
   d6f74:	ffffd680 	.word	0xffffd680
   d6f78:	000eb88c 	.word	0x000eb88c
   d6f7c:	000eb6f1 	.word	0x000eb6f1
   d6f80:	000ebb9d 	.word	0x000ebb9d

000d6f84 <mbedtls_x509_sig_alg_gets>:
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
   d6f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   d6f88:	4607      	mov	r7, r0
   d6f8a:	460c      	mov	r4, r1
   d6f8c:	4698      	mov	r8, r3
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
   d6f8e:	a903      	add	r1, sp, #12
    const char *desc = NULL;
   d6f90:	2300      	movs	r3, #0
    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
   d6f92:	4610      	mov	r0, r2
{
   d6f94:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    const char *desc = NULL;
   d6f98:	9303      	str	r3, [sp, #12]
    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
   d6f9a:	f003 f843 	bl	da024 <mbedtls_oid_get_sig_alg_desc>
    if( ret != 0 )
   d6f9e:	b158      	cbz	r0, d6fb8 <mbedtls_x509_sig_alg_gets+0x34>
        ret = mbedtls_snprintf( p, n, "???"  );
   d6fa0:	4a23      	ldr	r2, [pc, #140]	; (d7030 <mbedtls_x509_sig_alg_gets+0xac>)
   d6fa2:	4621      	mov	r1, r4
   d6fa4:	4638      	mov	r0, r7
   d6fa6:	f00e fd17 	bl	e59d8 <snprintf>
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
    MBEDTLS_X509_SAFE_SNPRINTF;
   d6faa:	2800      	cmp	r0, #0
        ret = mbedtls_snprintf( p, n, "%s", desc );
   d6fac:	4605      	mov	r5, r0
    MBEDTLS_X509_SAFE_SNPRINTF;
   d6fae:	da0a      	bge.n	d6fc6 <mbedtls_x509_sig_alg_gets+0x42>
   d6fb0:	4820      	ldr	r0, [pc, #128]	; (d7034 <mbedtls_x509_sig_alg_gets+0xb0>)
    ((void) md_alg);
    ((void) sig_opts);
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */

    return( (int)( size - n ) );
}
   d6fb2:	b004      	add	sp, #16
   d6fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ret = mbedtls_snprintf( p, n, "%s", desc );
   d6fb8:	9b03      	ldr	r3, [sp, #12]
   d6fba:	4a1f      	ldr	r2, [pc, #124]	; (d7038 <mbedtls_x509_sig_alg_gets+0xb4>)
   d6fbc:	4621      	mov	r1, r4
   d6fbe:	4638      	mov	r0, r7
   d6fc0:	f00e fd0a 	bl	e59d8 <snprintf>
   d6fc4:	e7f1      	b.n	d6faa <mbedtls_x509_sig_alg_gets+0x26>
    MBEDTLS_X509_SAFE_SNPRINTF;
   d6fc6:	42a0      	cmp	r0, r4
   d6fc8:	d2f2      	bcs.n	d6fb0 <mbedtls_x509_sig_alg_gets+0x2c>
    if( pk_alg == MBEDTLS_PK_RSASSA_PSS )
   d6fca:	f1b8 0f06 	cmp.w	r8, #6
    MBEDTLS_X509_SAFE_SNPRINTF;
   d6fce:	eba4 0600 	sub.w	r6, r4, r0
    if( pk_alg == MBEDTLS_PK_RSASSA_PSS )
   d6fd2:	d125      	bne.n	d7020 <mbedtls_x509_sig_alg_gets+0x9c>
        md_info = mbedtls_md_info_from_type( md_alg );
   d6fd4:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   d6fd8:	f005 ff44 	bl	dce64 <mbedtls_md_info_from_type>
   d6fdc:	4680      	mov	r8, r0
        mgf_md_info = mbedtls_md_info_from_type( pss_opts->mgf1_hash_id );
   d6fde:	f899 0000 	ldrb.w	r0, [r9]
   d6fe2:	f005 ff3f 	bl	dce64 <mbedtls_md_info_from_type>
   d6fe6:	4682      	mov	sl, r0
        ret = mbedtls_snprintf( p, n, " (%s, MGF1-%s, 0x%02X)",
   d6fe8:	f1b8 0f00 	cmp.w	r8, #0
   d6fec:	d01a      	beq.n	d7024 <mbedtls_x509_sig_alg_gets+0xa0>
                              md_info ? mbedtls_md_get_name( md_info ) : "???",
   d6fee:	4640      	mov	r0, r8
   d6ff0:	f006 f875 	bl	dd0de <mbedtls_md_get_name>
   d6ff4:	4680      	mov	r8, r0
        ret = mbedtls_snprintf( p, n, " (%s, MGF1-%s, 0x%02X)",
   d6ff6:	f1ba 0f00 	cmp.w	sl, #0
   d6ffa:	d016      	beq.n	d702a <mbedtls_x509_sig_alg_gets+0xa6>
                              mgf_md_info ? mbedtls_md_get_name( mgf_md_info ) : "???",
   d6ffc:	4650      	mov	r0, sl
   d6ffe:	f006 f86e 	bl	dd0de <mbedtls_md_get_name>
        ret = mbedtls_snprintf( p, n, " (%s, MGF1-%s, 0x%02X)",
   d7002:	f8d9 3004 	ldr.w	r3, [r9, #4]
   d7006:	4a0d      	ldr	r2, [pc, #52]	; (d703c <mbedtls_x509_sig_alg_gets+0xb8>)
   d7008:	e9cd 0300 	strd	r0, r3, [sp]
   d700c:	4631      	mov	r1, r6
   d700e:	4643      	mov	r3, r8
   d7010:	1978      	adds	r0, r7, r5
   d7012:	f00e fce1 	bl	e59d8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   d7016:	2800      	cmp	r0, #0
   d7018:	dbca      	blt.n	d6fb0 <mbedtls_x509_sig_alg_gets+0x2c>
   d701a:	42b0      	cmp	r0, r6
   d701c:	d2c8      	bcs.n	d6fb0 <mbedtls_x509_sig_alg_gets+0x2c>
   d701e:	1a36      	subs	r6, r6, r0
    return( (int)( size - n ) );
   d7020:	1ba0      	subs	r0, r4, r6
   d7022:	e7c6      	b.n	d6fb2 <mbedtls_x509_sig_alg_gets+0x2e>
        ret = mbedtls_snprintf( p, n, " (%s, MGF1-%s, 0x%02X)",
   d7024:	f8df 8008 	ldr.w	r8, [pc, #8]	; d7030 <mbedtls_x509_sig_alg_gets+0xac>
   d7028:	e7e5      	b.n	d6ff6 <mbedtls_x509_sig_alg_gets+0x72>
   d702a:	4801      	ldr	r0, [pc, #4]	; (d7030 <mbedtls_x509_sig_alg_gets+0xac>)
   d702c:	e7e9      	b.n	d7002 <mbedtls_x509_sig_alg_gets+0x7e>
   d702e:	bf00      	nop
   d7030:	000eb891 	.word	0x000eb891
   d7034:	ffffd680 	.word	0xffffd680
   d7038:	000ece26 	.word	0x000ece26
   d703c:	000eb895 	.word	0x000eb895

000d7040 <mbedtls_x509_key_size_helper>:

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
   d7040:	b510      	push	{r4, lr}
   d7042:	4613      	mov	r3, r2
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
   d7044:	4a06      	ldr	r2, [pc, #24]	; (d7060 <mbedtls_x509_key_size_helper+0x20>)
{
   d7046:	460c      	mov	r4, r1
    ret = mbedtls_snprintf( p, n, "%s key size", name );
   d7048:	f00e fcc6 	bl	e59d8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   d704c:	2800      	cmp	r0, #0
   d704e:	db05      	blt.n	d705c <mbedtls_x509_key_size_helper+0x1c>

    return( 0 );
   d7050:	4b04      	ldr	r3, [pc, #16]	; (d7064 <mbedtls_x509_key_size_helper+0x24>)
   d7052:	42a0      	cmp	r0, r4
   d7054:	bf2c      	ite	cs
   d7056:	4618      	movcs	r0, r3
   d7058:	2000      	movcc	r0, #0
}
   d705a:	bd10      	pop	{r4, pc}
    MBEDTLS_X509_SAFE_SNPRINTF;
   d705c:	4801      	ldr	r0, [pc, #4]	; (d7064 <mbedtls_x509_key_size_helper+0x24>)
   d705e:	e7fc      	b.n	d705a <mbedtls_x509_key_size_helper+0x1a>
   d7060:	000eb8ac 	.word	0x000eb8ac
   d7064:	ffffd680 	.word	0xffffd680

000d7068 <mbedtls_x509_time_is_past>:

int mbedtls_x509_time_is_past( const mbedtls_x509_time *to )
{
    ((void) to);
    return( 0 );
}
   d7068:	2000      	movs	r0, #0
   d706a:	4770      	bx	lr

000d706c <mbedtls_x509_time_is_future>:
   d706c:	2000      	movs	r0, #0
   d706e:	4770      	bx	lr

000d7070 <_ZL17sha1_process_wrapPvPKh>:
    mbedtls_free( ctx );
}

static int sha1_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha1_process( (mbedtls_sha1_context *) ctx,
   d7070:	f003 b8d0 	b.w	da214 <mbedtls_internal_sha1_process>

000d7074 <_ZL15sha1_clone_wrapPvPKv>:
    mbedtls_sha1_clone( (mbedtls_sha1_context *) dst,
   d7074:	f003 b8af 	b.w	da1d6 <mbedtls_sha1_clone>

000d7078 <_ZL13sha1_ctx_freePv>:
{
   d7078:	b510      	push	{r4, lr}
   d707a:	4604      	mov	r4, r0
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
   d707c:	f003 f8a6 	bl	da1cc <mbedtls_sha1_free>
    mbedtls_free( ctx );
   d7080:	4620      	mov	r0, r4
}
   d7082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
   d7086:	f00e bc8f 	b.w	e59a8 <free>

000d708a <_ZL14sha1_ctx_allocv>:
{
   d708a:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );
   d708c:	215c      	movs	r1, #92	; 0x5c
   d708e:	2001      	movs	r0, #1
   d7090:	f011 fe34 	bl	e8cfc <calloc>
    if( ctx != NULL )
   d7094:	4604      	mov	r4, r0
   d7096:	b108      	cbz	r0, d709c <_ZL14sha1_ctx_allocv+0x12>
        mbedtls_sha1_init( (mbedtls_sha1_context *) ctx );
   d7098:	f003 f894 	bl	da1c4 <mbedtls_sha1_init>
}
   d709c:	4620      	mov	r0, r4
   d709e:	bd10      	pop	{r4, pc}

000d70a0 <_ZL16sha1_finish_wrapPvPh>:
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
   d70a0:	f003 bff1 	b.w	db086 <mbedtls_sha1_finish_ret>

000d70a4 <_ZL16sha1_update_wrapPvPKhj>:
    return( mbedtls_sha1_update_ret( (mbedtls_sha1_context *) ctx,
   d70a4:	f003 bfb2 	b.w	db00c <mbedtls_sha1_update_ret>

000d70a8 <_ZL16sha1_starts_wrapPv>:
    return( mbedtls_sha1_starts_ret( (mbedtls_sha1_context *) ctx ) );
   d70a8:	f003 b89a 	b.w	da1e0 <mbedtls_sha1_starts_ret>

000d70ac <_ZL19sha224_process_wrapPvPKh>:
                    (const mbedtls_sha256_context *) src );
}

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
   d70ac:	f7fe baa8 	b.w	d5600 <mbedtls_internal_sha256_process>

000d70b0 <_ZL17sha224_clone_wrapPvPKv>:
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
   d70b0:	f7fe ba4f 	b.w	d5552 <mbedtls_sha256_clone>

000d70b4 <_ZL15sha224_ctx_freePv>:
{
   d70b4:	b510      	push	{r4, lr}
   d70b6:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
   d70b8:	f7fe fa46 	bl	d5548 <mbedtls_sha256_free>
    mbedtls_free( ctx );
   d70bc:	4620      	mov	r0, r4
}
   d70be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
   d70c2:	f00e bc71 	b.w	e59a8 <free>

000d70c6 <_ZL16sha224_ctx_allocv>:
{
   d70c6:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
   d70c8:	216c      	movs	r1, #108	; 0x6c
   d70ca:	2001      	movs	r0, #1
   d70cc:	f011 fe16 	bl	e8cfc <calloc>
    if( ctx != NULL )
   d70d0:	4604      	mov	r4, r0
   d70d2:	b108      	cbz	r0, d70d8 <_ZL16sha224_ctx_allocv+0x12>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
   d70d4:	f7fe fa34 	bl	d5540 <mbedtls_sha256_init>
}
   d70d8:	4620      	mov	r0, r4
   d70da:	bd10      	pop	{r4, pc}

000d70dc <_ZL11sha224_wrapPKhjPh>:
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
   d70dc:	2301      	movs	r3, #1
   d70de:	f7fe beac 	b.w	d5e3a <mbedtls_sha256_ret>

000d70e2 <_ZL11sha256_wrapPKhjPh>:
}

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
   d70e2:	2300      	movs	r3, #0
   d70e4:	f7fe bea9 	b.w	d5e3a <mbedtls_sha256_ret>

000d70e8 <_ZL18sha224_finish_wrapPvPh>:
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
   d70e8:	f7fe be25 	b.w	d5d36 <mbedtls_sha256_finish_ret>

000d70ec <_ZL18sha224_update_wrapPvPKhj>:
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
   d70ec:	f7fe bde6 	b.w	d5cbc <mbedtls_sha256_update_ret>

000d70f0 <_ZL18sha224_starts_wrapPv>:
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
   d70f0:	2101      	movs	r1, #1
   d70f2:	f7fe ba33 	b.w	d555c <mbedtls_sha256_starts_ret>

000d70f6 <_ZL18sha256_starts_wrapPv>:
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
   d70f6:	2100      	movs	r1, #0
   d70f8:	f7fe ba30 	b.w	d555c <mbedtls_sha256_starts_ret>

000d70fc <_ZL19sha384_process_wrapPvPKh>:
                    (const mbedtls_sha512_context *) src );
}

static int sha384_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha512_process( (mbedtls_sha512_context *) ctx,
   d70fc:	f00b bff4 	b.w	e30e8 <mbedtls_internal_sha512_process>

000d7100 <_ZL17sha384_clone_wrapPvPKv>:
    mbedtls_sha512_clone( (mbedtls_sha512_context *) dst,
   d7100:	f00b bf51 	b.w	e2fa6 <mbedtls_sha512_clone>

000d7104 <_ZL15sha384_ctx_freePv>:
{
   d7104:	b510      	push	{r4, lr}
   d7106:	4604      	mov	r4, r0
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
   d7108:	f00b ff48 	bl	e2f9c <mbedtls_sha512_free>
    mbedtls_free( ctx );
   d710c:	4620      	mov	r0, r4
}
   d710e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
   d7112:	f00e bc49 	b.w	e59a8 <free>

000d7116 <_ZL16sha384_ctx_allocv>:
{
   d7116:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
   d7118:	21d8      	movs	r1, #216	; 0xd8
   d711a:	2001      	movs	r0, #1
   d711c:	f011 fdee 	bl	e8cfc <calloc>
    if( ctx != NULL )
   d7120:	4604      	mov	r4, r0
   d7122:	b108      	cbz	r0, d7128 <_ZL16sha384_ctx_allocv+0x12>
        mbedtls_sha512_init( (mbedtls_sha512_context *) ctx );
   d7124:	f00b ff36 	bl	e2f94 <mbedtls_sha512_init>
}
   d7128:	4620      	mov	r0, r4
   d712a:	bd10      	pop	{r4, pc}

000d712c <_ZL11sha384_wrapPKhjPh>:
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
   d712c:	2301      	movs	r3, #1
   d712e:	f00c beb0 	b.w	e3e92 <mbedtls_sha512_ret>

000d7132 <_ZL11sha512_wrapPKhjPh>:
}

static int sha512_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 0 ) );
   d7132:	2300      	movs	r3, #0
   d7134:	f00c bead 	b.w	e3e92 <mbedtls_sha512_ret>

000d7138 <_ZL18sha384_finish_wrapPvPh>:
    return( mbedtls_sha512_finish_ret( (mbedtls_sha512_context *) ctx,
   d7138:	f00c bd8f 	b.w	e3c5a <mbedtls_sha512_finish_ret>

000d713c <_ZL18sha384_update_wrapPvPKhj>:
    return( mbedtls_sha512_update_ret( (mbedtls_sha512_context *) ctx,
   d713c:	f00c bd3a 	b.w	e3bb4 <mbedtls_sha512_update_ret>

000d7140 <_ZL18sha384_starts_wrapPv>:
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 1 ) );
   d7140:	2101      	movs	r1, #1
   d7142:	f00b bf35 	b.w	e2fb0 <mbedtls_sha512_starts_ret>

000d7146 <_ZL18sha512_starts_wrapPv>:
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 0 ) );
   d7146:	2100      	movs	r1, #0
   d7148:	f00b bf32 	b.w	e2fb0 <mbedtls_sha512_starts_ret>

000d714c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>:
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
   d714c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7150:	b093      	sub	sp, #76	; 0x4c
   d7152:	4606      	mov	r6, r0
   d7154:	9f1c      	ldr	r7, [sp, #112]	; 0x70
   d7156:	460d      	mov	r5, r1
   d7158:	4690      	mov	r8, r2
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
   d715a:	2100      	movs	r1, #0
   d715c:	2240      	movs	r2, #64	; 0x40
   d715e:	a802      	add	r0, sp, #8
{
   d7160:	4699      	mov	r9, r3
    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
   d7162:	f011 fe6b 	bl	e8e3c <memset>
    memset( counter, 0, 4 );
   d7166:	2300      	movs	r3, #0

    hlen = mbedtls_md_get_size( md_ctx->md_info );
   d7168:	6838      	ldr	r0, [r7, #0]
    memset( counter, 0, 4 );
   d716a:	9301      	str	r3, [sp, #4]
    hlen = mbedtls_md_get_size( md_ctx->md_info );
   d716c:	f005 ffb4 	bl	dd0d8 <mbedtls_md_get_size>
   d7170:	4682      	mov	sl, r0

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
   d7172:	b395      	cbz	r5, d71da <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x8e>
    {
        use_len = hlen;
        if( dlen < hlen )
   d7174:	4555      	cmp	r5, sl
            use_len = dlen;

        if( ( ret = mbedtls_md_starts( md_ctx ) ) != 0 )
   d7176:	4638      	mov	r0, r7
   d7178:	46ab      	mov	fp, r5
   d717a:	bf28      	it	cs
   d717c:	46d3      	movcs	fp, sl
   d717e:	f005 febd 	bl	dcefc <mbedtls_md_starts>
   d7182:	4604      	mov	r4, r0
   d7184:	bb50      	cbnz	r0, d71dc <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x90>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, src, slen ) ) != 0 )
   d7186:	464a      	mov	r2, r9
   d7188:	4641      	mov	r1, r8
   d718a:	4638      	mov	r0, r7
   d718c:	f005 fec0 	bl	dcf10 <mbedtls_md_update>
   d7190:	4604      	mov	r4, r0
   d7192:	bb18      	cbnz	r0, d71dc <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x90>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
   d7194:	2204      	movs	r2, #4
   d7196:	eb0d 0102 	add.w	r1, sp, r2
   d719a:	4638      	mov	r0, r7
   d719c:	f005 feb8 	bl	dcf10 <mbedtls_md_update>
   d71a0:	4604      	mov	r4, r0
   d71a2:	b9d8      	cbnz	r0, d71dc <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x90>
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
   d71a4:	a902      	add	r1, sp, #8
   d71a6:	4638      	mov	r0, r7
   d71a8:	f005 febc 	bl	dcf24 <mbedtls_md_finish>
   d71ac:	4604      	mov	r4, r0
   d71ae:	b9a8      	cbnz	r0, d71dc <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x90>
   d71b0:	aa02      	add	r2, sp, #8
   d71b2:	eb06 000b 	add.w	r0, r6, fp
            goto exit;

        for( i = 0; i < use_len; ++i )
   d71b6:	4286      	cmp	r6, r0
   d71b8:	d007      	beq.n	d71ca <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x7e>
            *p++ ^= mask[i];
   d71ba:	f816 1b01 	ldrb.w	r1, [r6], #1
   d71be:	f812 3b01 	ldrb.w	r3, [r2], #1
   d71c2:	404b      	eors	r3, r1
   d71c4:	f806 3c01 	strb.w	r3, [r6, #-1]
        for( i = 0; i < use_len; ++i )
   d71c8:	e7f5      	b.n	d71b6 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x6a>

        counter[3]++;
   d71ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d71ce:	3301      	adds	r3, #1
   d71d0:	f88d 3007 	strb.w	r3, [sp, #7]

        dlen -= use_len;
   d71d4:	eba5 050b 	sub.w	r5, r5, fp
    while( dlen > 0 )
   d71d8:	e7cb      	b.n	d7172 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x26>
    }

exit:
   d71da:	462c      	mov	r4, r5
    mbedtls_platform_zeroize( mask, sizeof( mask ) );
   d71dc:	a802      	add	r0, sp, #8
   d71de:	2140      	movs	r1, #64	; 0x40
   d71e0:	f00b fcf0 	bl	e2bc4 <mbedtls_platform_zeroize>

    return( ret );
}
   d71e4:	4620      	mov	r0, r4
   d71e6:	b013      	add	sp, #76	; 0x4c
   d71e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d71ec <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>:
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
   d71ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d71f0:	461f      	mov	r7, r3
    size_t oid_size  = 0;
   d71f2:	2300      	movs	r3, #0
    size_t nb_pad    = dst_len;
    unsigned char *p = dst;
    const char *oid  = NULL;
   d71f4:	e9cd 3300 	strd	r3, r3, [sp]
{
   d71f8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   d71fc:	460c      	mov	r4, r1
   d71fe:	4692      	mov	sl, r2

    /* Are we signing hashed or raw data? */
    if( md_alg != MBEDTLS_MD_NONE )
   d7200:	4680      	mov	r8, r0
   d7202:	2800      	cmp	r0, #0
   d7204:	d03f      	beq.n	d7286 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x9a>
    {
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
   d7206:	f005 fe2d 	bl	dce64 <mbedtls_md_info_from_type>
        if( md_info == NULL )
   d720a:	4604      	mov	r4, r0
   d720c:	b908      	cbnz	r0, d7212 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x26>
    /* Just a sanity-check, should be automatic
     * after the initial bounds check. */
    if( p != dst + dst_len )
    {
        mbedtls_platform_zeroize( dst, dst_len );
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d720e:	4838      	ldr	r0, [pc, #224]	; (d72f0 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x104>)
   d7210:	e036      	b.n	d7280 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x94>
        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
   d7212:	466a      	mov	r2, sp
   d7214:	a901      	add	r1, sp, #4
   d7216:	4640      	mov	r0, r8
   d7218:	f002 ff8a 	bl	da130 <mbedtls_oid_get_oid_by_md>
   d721c:	2800      	cmp	r0, #0
   d721e:	d1f6      	bne.n	d720e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x22>
        hashlen = mbedtls_md_get_size( md_info );
   d7220:	4620      	mov	r0, r4
   d7222:	f005 ff59 	bl	dd0d8 <mbedtls_md_get_size>
        if( 8 + hashlen + oid_size  >= 0x80         ||
   d7226:	9e00      	ldr	r6, [sp, #0]
   d7228:	1982      	adds	r2, r0, r6
   d722a:	f102 0308 	add.w	r3, r2, #8
   d722e:	2b7f      	cmp	r3, #127	; 0x7f
        hashlen = mbedtls_md_get_size( md_info );
   d7230:	4604      	mov	r4, r0
        if( 8 + hashlen + oid_size  >= 0x80         ||
   d7232:	d8ec      	bhi.n	d720e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x22>
            10 + hashlen + oid_size <  10 + hashlen )
   d7234:	f102 030a 	add.w	r3, r2, #10
   d7238:	f100 010a 	add.w	r1, r0, #10
            10 + hashlen            <  hashlen      ||
   d723c:	428b      	cmp	r3, r1
   d723e:	d3e6      	bcc.n	d720e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x22>
        if( nb_pad < 10 + hashlen + oid_size )
   d7240:	42bb      	cmp	r3, r7
   d7242:	d8e4      	bhi.n	d720e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x22>
        nb_pad -= 10 + hashlen + oid_size;
   d7244:	f1a7 060a 	sub.w	r6, r7, #10
   d7248:	1ab6      	subs	r6, r6, r2
    if( nb_pad < 3 + 8 )
   d724a:	2e0a      	cmp	r6, #10
   d724c:	d9df      	bls.n	d720e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x22>
    *p++ = 0;
   d724e:	464b      	mov	r3, r9
   d7250:	2500      	movs	r5, #0
   d7252:	f803 5b02 	strb.w	r5, [r3], #2
    nb_pad -= 3;
   d7256:	3e03      	subs	r6, #3
    *p++ = MBEDTLS_RSA_SIGN;
   d7258:	2201      	movs	r2, #1
   d725a:	f889 2001 	strb.w	r2, [r9, #1]
    memset( p, 0xFF, nb_pad );
   d725e:	4618      	mov	r0, r3
   d7260:	4632      	mov	r2, r6
   d7262:	21ff      	movs	r1, #255	; 0xff
   d7264:	f011 fdea 	bl	e8e3c <memset>
   d7268:	4603      	mov	r3, r0
    p += nb_pad;
   d726a:	4430      	add	r0, r6
    *p++ = 0;
   d726c:	559d      	strb	r5, [r3, r6]
    if( md_alg == MBEDTLS_MD_NONE )
   d726e:	f1b8 0f00 	cmp.w	r8, #0
   d7272:	d10c      	bne.n	d728e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xa2>
        memcpy( p, hash, hashlen );
   d7274:	4622      	mov	r2, r4
   d7276:	4651      	mov	r1, sl
   d7278:	3001      	adds	r0, #1
   d727a:	f011 fdb7 	bl	e8dec <memcpy>
        return( 0 );
   d727e:	4640      	mov	r0, r8
    }

    return( 0 );
}
   d7280:	b002      	add	sp, #8
   d7282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( nb_pad < hashlen )
   d7286:	428f      	cmp	r7, r1
   d7288:	d3c1      	bcc.n	d720e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x22>
        nb_pad -= hashlen;
   d728a:	1a7e      	subs	r6, r7, r1
   d728c:	e7dd      	b.n	d724a <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x5e>
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
   d728e:	2230      	movs	r2, #48	; 0x30
   d7290:	7042      	strb	r2, [r0, #1]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
   d7292:	9e00      	ldr	r6, [sp, #0]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
   d7294:	70c2      	strb	r2, [r0, #3]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
   d7296:	f106 0308 	add.w	r3, r6, #8
   d729a:	fa53 f384 	uxtab	r3, r3, r4
    *p++ = (unsigned char)( 0x04 + oid_size );
   d729e:	b2f2      	uxtb	r2, r6
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
   d72a0:	7083      	strb	r3, [r0, #2]
    *p++ = (unsigned char)( 0x04 + oid_size );
   d72a2:	1d13      	adds	r3, r2, #4
   d72a4:	7103      	strb	r3, [r0, #4]
    *p++ = MBEDTLS_ASN1_OID;
   d72a6:	2306      	movs	r3, #6
   d72a8:	7143      	strb	r3, [r0, #5]
    *p++ = (unsigned char) oid_size;
   d72aa:	1dc3      	adds	r3, r0, #7
   d72ac:	7182      	strb	r2, [r0, #6]
    memcpy( p, oid, oid_size );
   d72ae:	9901      	ldr	r1, [sp, #4]
   d72b0:	4632      	mov	r2, r6
   d72b2:	4618      	mov	r0, r3
   d72b4:	f011 fd9a 	bl	e8dec <memcpy>
    p += oid_size;
   d72b8:	1982      	adds	r2, r0, r6
    *p++ = MBEDTLS_ASN1_NULL;
   d72ba:	2105      	movs	r1, #5
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
   d72bc:	2304      	movs	r3, #4
    *p++ = MBEDTLS_ASN1_NULL;
   d72be:	5581      	strb	r1, [r0, r6]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
   d72c0:	fa5f f884 	uxtb.w	r8, r4
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
   d72c4:	7093      	strb	r3, [r2, #2]
    *p++ = (unsigned char) hashlen;
   d72c6:	18d3      	adds	r3, r2, r3
    *p++ = 0x00;
   d72c8:	7055      	strb	r5, [r2, #1]
    *p++ = (unsigned char) hashlen;
   d72ca:	f882 8003 	strb.w	r8, [r2, #3]
    memcpy( p, hash, hashlen );
   d72ce:	4651      	mov	r1, sl
   d72d0:	4622      	mov	r2, r4
   d72d2:	4618      	mov	r0, r3
   d72d4:	f011 fd8a 	bl	e8dec <memcpy>
    if( p != dst + dst_len )
   d72d8:	eb09 0207 	add.w	r2, r9, r7
    p += hashlen;
   d72dc:	4404      	add	r4, r0
    if( p != dst + dst_len )
   d72de:	42a2      	cmp	r2, r4
   d72e0:	d004      	beq.n	d72ec <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x100>
        mbedtls_platform_zeroize( dst, dst_len );
   d72e2:	4639      	mov	r1, r7
   d72e4:	4648      	mov	r0, r9
   d72e6:	f00b fc6d 	bl	e2bc4 <mbedtls_platform_zeroize>
   d72ea:	e790      	b.n	d720e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x22>
    return( 0 );
   d72ec:	4628      	mov	r0, r5
   d72ee:	e7c7      	b.n	d7280 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x94>
   d72f0:	ffffbf80 	.word	0xffffbf80

000d72f4 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>:
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
   d72f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
   d72f6:	f100 0608 	add.w	r6, r0, #8
   d72fa:	6847      	ldr	r7, [r0, #4]
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
   d72fc:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
   d72fe:	4630      	mov	r0, r6
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
   d7300:	460d      	mov	r5, r1
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
   d7302:	f009 fd68 	bl	e0dd6 <mbedtls_mpi_size>
   d7306:	4287      	cmp	r7, r0
   d7308:	d116      	bne.n	d7338 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x44>
   d730a:	6863      	ldr	r3, [r4, #4]
   d730c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   d7310:	d812      	bhi.n	d7338 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x44>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
   d7312:	2100      	movs	r1, #0
   d7314:	4630      	mov	r0, r6
   d7316:	f009 ff40 	bl	e119a <mbedtls_mpi_cmp_int>
   d731a:	2800      	cmp	r0, #0
   d731c:	dd0c      	ble.n	d7338 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x44>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
   d731e:	2100      	movs	r1, #0
   d7320:	4630      	mov	r0, r6
   d7322:	f009 fd11 	bl	e0d48 <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
   d7326:	b138      	cbz	r0, d7338 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x44>
    if( is_priv &&
   d7328:	b945      	cbnz	r5, d733c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x48>
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
   d732a:	2100      	movs	r1, #0
   d732c:	f104 0014 	add.w	r0, r4, #20
   d7330:	f009 ff33 	bl	e119a <mbedtls_mpi_cmp_int>
   d7334:	2800      	cmp	r0, #0
   d7336:	dc1e      	bgt.n	d7376 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x82>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d7338:	481b      	ldr	r0, [pc, #108]	; (d73a8 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0xb4>)
   d733a:	e01e      	b.n	d737a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x86>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
   d733c:	f104 062c 	add.w	r6, r4, #44	; 0x2c
   d7340:	2100      	movs	r1, #0
   d7342:	4630      	mov	r0, r6
   d7344:	f009 ff29 	bl	e119a <mbedtls_mpi_cmp_int>
    if( is_priv &&
   d7348:	2800      	cmp	r0, #0
   d734a:	ddf5      	ble.n	d7338 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x44>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
   d734c:	2100      	movs	r1, #0
   d734e:	4630      	mov	r0, r6
   d7350:	f009 fcfa 	bl	e0d48 <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
   d7354:	2800      	cmp	r0, #0
   d7356:	d0ef      	beq.n	d7338 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x44>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
   d7358:	f104 0638 	add.w	r6, r4, #56	; 0x38
   d735c:	2100      	movs	r1, #0
   d735e:	4630      	mov	r0, r6
   d7360:	f009 ff1b 	bl	e119a <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
   d7364:	2800      	cmp	r0, #0
   d7366:	dde7      	ble.n	d7338 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x44>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
   d7368:	2100      	movs	r1, #0
   d736a:	4630      	mov	r0, r6
   d736c:	f009 fcec 	bl	e0d48 <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
   d7370:	2800      	cmp	r0, #0
   d7372:	d1da      	bne.n	d732a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x36>
   d7374:	e7e0      	b.n	d7338 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x44>
    if( is_priv &&
   d7376:	b90d      	cbnz	r5, d737c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x88>
    return( 0 );
   d7378:	2000      	movs	r0, #0
}
   d737a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
   d737c:	2100      	movs	r1, #0
   d737e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d7382:	f009 ff0a 	bl	e119a <mbedtls_mpi_cmp_int>
    if( is_priv &&
   d7386:	2800      	cmp	r0, #0
   d7388:	ddd6      	ble.n	d7338 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x44>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
   d738a:	2100      	movs	r1, #0
   d738c:	f104 0050 	add.w	r0, r4, #80	; 0x50
   d7390:	f009 ff03 	bl	e119a <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
   d7394:	2800      	cmp	r0, #0
   d7396:	ddcf      	ble.n	d7338 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x44>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
   d7398:	2100      	movs	r1, #0
   d739a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   d739e:	f009 fefc 	bl	e119a <mbedtls_mpi_cmp_int>
    if( is_priv &&
   d73a2:	2800      	cmp	r0, #0
   d73a4:	dce8      	bgt.n	d7378 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x84>
   d73a6:	e7c7      	b.n	d7338 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x44>
   d73a8:	ffffbf80 	.word	0xffffbf80

000d73ac <mbedtls_rsa_import_raw>:
{
   d73ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d73b0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   d73b4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   d73b6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   d73b8:	4604      	mov	r4, r0
   d73ba:	461d      	mov	r5, r3
    if( N != NULL )
   d73bc:	b149      	cbz	r1, d73d2 <mbedtls_rsa_import_raw+0x26>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
   d73be:	f100 0908 	add.w	r9, r0, #8
   d73c2:	4648      	mov	r0, r9
   d73c4:	f009 fd0d 	bl	e0de2 <mbedtls_mpi_read_binary>
   d73c8:	b9a0      	cbnz	r0, d73f4 <mbedtls_rsa_import_raw+0x48>
        ctx->len = mbedtls_mpi_size( &ctx->N );
   d73ca:	4648      	mov	r0, r9
   d73cc:	f009 fd03 	bl	e0dd6 <mbedtls_mpi_size>
   d73d0:	6060      	str	r0, [r4, #4]
    if( P != NULL )
   d73d2:	b93d      	cbnz	r5, d73e4 <mbedtls_rsa_import_raw+0x38>
    if( Q != NULL )
   d73d4:	f1b8 0f00 	cmp.w	r8, #0
   d73d8:	d10f      	bne.n	d73fa <mbedtls_rsa_import_raw+0x4e>
    if( D != NULL )
   d73da:	b9bf      	cbnz	r7, d740c <mbedtls_rsa_import_raw+0x60>
    if( E != NULL )
   d73dc:	b9fe      	cbnz	r6, d741e <mbedtls_rsa_import_raw+0x72>
    return( 0 );
   d73de:	2000      	movs	r0, #0
}
   d73e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
   d73e4:	9a08      	ldr	r2, [sp, #32]
   d73e6:	4629      	mov	r1, r5
   d73e8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d73ec:	f009 fcf9 	bl	e0de2 <mbedtls_mpi_read_binary>
   d73f0:	2800      	cmp	r0, #0
   d73f2:	d0ef      	beq.n	d73d4 <mbedtls_rsa_import_raw+0x28>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
   d73f4:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
   d73f8:	e7f2      	b.n	d73e0 <mbedtls_rsa_import_raw+0x34>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
   d73fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d73fc:	4641      	mov	r1, r8
   d73fe:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d7402:	f009 fcee 	bl	e0de2 <mbedtls_mpi_read_binary>
   d7406:	2800      	cmp	r0, #0
   d7408:	d0e7      	beq.n	d73da <mbedtls_rsa_import_raw+0x2e>
   d740a:	e7f3      	b.n	d73f4 <mbedtls_rsa_import_raw+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
   d740c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   d740e:	4639      	mov	r1, r7
   d7410:	f104 0020 	add.w	r0, r4, #32
   d7414:	f009 fce5 	bl	e0de2 <mbedtls_mpi_read_binary>
   d7418:	2800      	cmp	r0, #0
   d741a:	d0df      	beq.n	d73dc <mbedtls_rsa_import_raw+0x30>
   d741c:	e7ea      	b.n	d73f4 <mbedtls_rsa_import_raw+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );
   d741e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d7420:	4631      	mov	r1, r6
   d7422:	f104 0014 	add.w	r0, r4, #20
   d7426:	f009 fcdc 	bl	e0de2 <mbedtls_mpi_read_binary>
    if( ret != 0 )
   d742a:	2800      	cmp	r0, #0
   d742c:	d0d7      	beq.n	d73de <mbedtls_rsa_import_raw+0x32>
   d742e:	e7e1      	b.n	d73f4 <mbedtls_rsa_import_raw+0x48>

000d7430 <mbedtls_rsa_complete>:
{
   d7430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
   d7434:	f100 0908 	add.w	r9, r0, #8
{
   d7438:	b085      	sub	sp, #20
   d743a:	4604      	mov	r4, r0
    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
   d743c:	2100      	movs	r1, #0
   d743e:	4648      	mov	r0, r9
   d7440:	f009 feab 	bl	e119a <mbedtls_mpi_cmp_int>
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
   d7444:	f104 052c 	add.w	r5, r4, #44	; 0x2c
   d7448:	2100      	movs	r1, #0
    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
   d744a:	4680      	mov	r8, r0
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
   d744c:	4628      	mov	r0, r5
   d744e:	f009 fea4 	bl	e119a <mbedtls_mpi_cmp_int>
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
   d7452:	f104 0638 	add.w	r6, r4, #56	; 0x38
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
   d7456:	9003      	str	r0, [sp, #12]
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
   d7458:	2100      	movs	r1, #0
   d745a:	4630      	mov	r0, r6
   d745c:	f009 fe9d 	bl	e119a <mbedtls_mpi_cmp_int>
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
   d7460:	f104 0720 	add.w	r7, r4, #32
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
   d7464:	9002      	str	r0, [sp, #8]
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
   d7466:	2100      	movs	r1, #0
   d7468:	4638      	mov	r0, r7
   d746a:	f009 fe96 	bl	e119a <mbedtls_mpi_cmp_int>
    have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
   d746e:	f104 0a14 	add.w	sl, r4, #20
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
   d7472:	4683      	mov	fp, r0
    have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
   d7474:	2100      	movs	r1, #0
   d7476:	4650      	mov	r0, sl
   d7478:	f009 fe8f 	bl	e119a <mbedtls_mpi_cmp_int>
    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
   d747c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   d7480:	2a00      	cmp	r2, #0
   d7482:	d04d      	beq.n	d7520 <mbedtls_rsa_complete+0xf0>
   d7484:	b11b      	cbz	r3, d748e <mbedtls_rsa_complete+0x5e>
   d7486:	f1bb 0f00 	cmp.w	fp, #0
   d748a:	d000      	beq.n	d748e <mbedtls_rsa_complete+0x5e>
   d748c:	b958      	cbnz	r0, d74a6 <mbedtls_rsa_complete+0x76>
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
   d748e:	f1b8 0f00 	cmp.w	r8, #0
   d7492:	d100      	bne.n	d7496 <mbedtls_rsa_complete+0x66>
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
   d7494:	b12a      	cbz	r2, d74a2 <mbedtls_rsa_complete+0x72>
   d7496:	b123      	cbz	r3, d74a2 <mbedtls_rsa_complete+0x72>
   d7498:	f1bb 0f00 	cmp.w	fp, #0
   d749c:	d101      	bne.n	d74a2 <mbedtls_rsa_complete+0x72>
   d749e:	2800      	cmp	r0, #0
   d74a0:	d138      	bne.n	d7514 <mbedtls_rsa_complete+0xe4>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d74a2:	482a      	ldr	r0, [pc, #168]	; (d754c <mbedtls_rsa_complete+0x11c>)
   d74a4:	e00a      	b.n	d74bc <mbedtls_rsa_complete+0x8c>
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
   d74a6:	f1b8 0f00 	cmp.w	r8, #0
   d74aa:	d111      	bne.n	d74d0 <mbedtls_rsa_complete+0xa0>
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
   d74ac:	4632      	mov	r2, r6
   d74ae:	4629      	mov	r1, r5
   d74b0:	4648      	mov	r0, r9
   d74b2:	f009 ff8e 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d74b6:	b120      	cbz	r0, d74c2 <mbedtls_rsa_complete+0x92>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
   d74b8:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
   d74bc:	b005      	add	sp, #20
   d74be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ctx->len = mbedtls_mpi_size( &ctx->N );
   d74c2:	4648      	mov	r0, r9
   d74c4:	f009 fc87 	bl	e0dd6 <mbedtls_mpi_size>
   d74c8:	6060      	str	r0, [r4, #4]
    else if( d_missing )
   d74ca:	f1b8 0f00 	cmp.w	r8, #0
   d74ce:	d11a      	bne.n	d7506 <mbedtls_rsa_complete+0xd6>
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
   d74d0:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   d74d4:	9301      	str	r3, [sp, #4]
   d74d6:	f104 0350 	add.w	r3, r4, #80	; 0x50
   d74da:	9300      	str	r3, [sp, #0]
   d74dc:	463a      	mov	r2, r7
   d74de:	f104 0344 	add.w	r3, r4, #68	; 0x44
   d74e2:	4631      	mov	r1, r6
   d74e4:	4628      	mov	r0, r5
   d74e6:	f04f 0801 	mov.w	r8, #1
   d74ea:	f00d f889 	bl	e4600 <mbedtls_rsa_deduce_crt>
        if( ret != 0 )
   d74ee:	b328      	cbz	r0, d753c <mbedtls_rsa_complete+0x10c>
   d74f0:	e7e2      	b.n	d74b8 <mbedtls_rsa_complete+0x88>
        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,
   d74f2:	9600      	str	r6, [sp, #0]
   d74f4:	462b      	mov	r3, r5
   d74f6:	463a      	mov	r2, r7
   d74f8:	4651      	mov	r1, sl
   d74fa:	4648      	mov	r0, r9
   d74fc:	f00c fde4 	bl	e40c8 <mbedtls_rsa_deduce_primes>
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
   d7500:	2800      	cmp	r0, #0
   d7502:	d0e5      	beq.n	d74d0 <mbedtls_rsa_complete+0xa0>
   d7504:	e7d8      	b.n	d74b8 <mbedtls_rsa_complete+0x88>
   d7506:	463b      	mov	r3, r7
   d7508:	4652      	mov	r2, sl
   d750a:	4631      	mov	r1, r6
   d750c:	4628      	mov	r0, r5
   d750e:	f00c fecb 	bl	e42a8 <mbedtls_rsa_deduce_private_exponent>
   d7512:	e7f5      	b.n	d7500 <mbedtls_rsa_complete+0xd0>
    if( !have_N && have_P && have_Q )
   d7514:	f1b8 0f00 	cmp.w	r8, #0
   d7518:	d1f5      	bne.n	d7506 <mbedtls_rsa_complete+0xd6>
   d751a:	f04f 0801 	mov.w	r8, #1
   d751e:	e7c5      	b.n	d74ac <mbedtls_rsa_complete+0x7c>
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
   d7520:	f1b8 0f00 	cmp.w	r8, #0
   d7524:	d0bd      	beq.n	d74a2 <mbedtls_rsa_complete+0x72>
   d7526:	b923      	cbnz	r3, d7532 <mbedtls_rsa_complete+0x102>
   d7528:	f1bb 0f00 	cmp.w	fp, #0
   d752c:	d001      	beq.n	d7532 <mbedtls_rsa_complete+0x102>
   d752e:	2800      	cmp	r0, #0
   d7530:	d1df      	bne.n	d74f2 <mbedtls_rsa_complete+0xc2>
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
   d7532:	ea53 080b 	orrs.w	r8, r3, fp
   d7536:	d1b4      	bne.n	d74a2 <mbedtls_rsa_complete+0x72>
   d7538:	2800      	cmp	r0, #0
   d753a:	d0b2      	beq.n	d74a2 <mbedtls_rsa_complete+0x72>
    return( rsa_check_context( ctx, is_priv, 1 ) );
   d753c:	4641      	mov	r1, r8
   d753e:	4620      	mov	r0, r4
}
   d7540:	b005      	add	sp, #20
   d7542:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( rsa_check_context( ctx, is_priv, 1 ) );
   d7546:	f7ff bed5 	b.w	d72f4 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
   d754a:	bf00      	nop
   d754c:	ffffbf80 	.word	0xffffbf80

000d7550 <mbedtls_rsa_init>:
{
   d7550:	b570      	push	{r4, r5, r6, lr}
   d7552:	4604      	mov	r4, r0
   d7554:	460e      	mov	r6, r1
   d7556:	4615      	mov	r5, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
   d7558:	2100      	movs	r1, #0
   d755a:	22ac      	movs	r2, #172	; 0xac
   d755c:	f011 fc6e 	bl	e8e3c <memset>
    ctx->hash_id = hash_id;
   d7560:	e9c4 6529 	strd	r6, r5, [r4, #164]	; 0xa4
}
   d7564:	bd70      	pop	{r4, r5, r6, pc}

000d7566 <mbedtls_rsa_get_len>:
}
   d7566:	6840      	ldr	r0, [r0, #4]
   d7568:	4770      	bx	lr
	...

000d756c <mbedtls_rsa_check_pubkey>:
{
   d756c:	b570      	push	{r4, r5, r6, lr}
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
   d756e:	2100      	movs	r1, #0
{
   d7570:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
   d7572:	f7ff febf 	bl	d72f4 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
   d7576:	4605      	mov	r5, r0
   d7578:	b9b8      	cbnz	r0, d75aa <mbedtls_rsa_check_pubkey+0x3e>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
   d757a:	f104 0608 	add.w	r6, r4, #8
   d757e:	4630      	mov	r0, r6
   d7580:	f009 fc0e 	bl	e0da0 <mbedtls_mpi_bitlen>
   d7584:	287f      	cmp	r0, #127	; 0x7f
   d7586:	d910      	bls.n	d75aa <mbedtls_rsa_check_pubkey+0x3e>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
   d7588:	3414      	adds	r4, #20
   d758a:	4629      	mov	r1, r5
   d758c:	4620      	mov	r0, r4
   d758e:	f009 fbdb 	bl	e0d48 <mbedtls_mpi_get_bit>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
   d7592:	b150      	cbz	r0, d75aa <mbedtls_rsa_check_pubkey+0x3e>
   d7594:	4620      	mov	r0, r4
   d7596:	f009 fc03 	bl	e0da0 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
   d759a:	2801      	cmp	r0, #1
   d759c:	d905      	bls.n	d75aa <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
   d759e:	4631      	mov	r1, r6
   d75a0:	4620      	mov	r0, r4
   d75a2:	f009 fdb9 	bl	e1118 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
   d75a6:	2800      	cmp	r0, #0
   d75a8:	db00      	blt.n	d75ac <mbedtls_rsa_check_pubkey+0x40>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
   d75aa:	4d01      	ldr	r5, [pc, #4]	; (d75b0 <mbedtls_rsa_check_pubkey+0x44>)
}
   d75ac:	4628      	mov	r0, r5
   d75ae:	bd70      	pop	{r4, r5, r6, pc}
   d75b0:	ffffbe00 	.word	0xffffbe00

000d75b4 <mbedtls_rsa_check_privkey>:
{
   d75b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d75b6:	b085      	sub	sp, #20
   d75b8:	4604      	mov	r4, r0
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
   d75ba:	f7ff ffd7 	bl	d756c <mbedtls_rsa_check_pubkey>
   d75be:	bb28      	cbnz	r0, d760c <mbedtls_rsa_check_privkey+0x58>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
   d75c0:	2101      	movs	r1, #1
   d75c2:	4620      	mov	r0, r4
   d75c4:	f7ff fe96 	bl	d72f4 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
   d75c8:	bb00      	cbnz	r0, d760c <mbedtls_rsa_check_privkey+0x58>
    if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,
   d75ca:	f104 0314 	add.w	r3, r4, #20
   d75ce:	f104 052c 	add.w	r5, r4, #44	; 0x2c
   d75d2:	f104 0638 	add.w	r6, r4, #56	; 0x38
   d75d6:	f104 0720 	add.w	r7, r4, #32
   d75da:	e9cd 0001 	strd	r0, r0, [sp, #4]
   d75de:	9300      	str	r3, [sp, #0]
   d75e0:	4632      	mov	r2, r6
   d75e2:	463b      	mov	r3, r7
   d75e4:	4629      	mov	r1, r5
   d75e6:	f104 0008 	add.w	r0, r4, #8
   d75ea:	f00c ff43 	bl	e4474 <mbedtls_rsa_validate_params>
   d75ee:	b968      	cbnz	r0, d760c <mbedtls_rsa_check_privkey+0x58>
    else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,
   d75f0:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   d75f4:	9301      	str	r3, [sp, #4]
   d75f6:	f104 0350 	add.w	r3, r4, #80	; 0x50
   d75fa:	9300      	str	r3, [sp, #0]
   d75fc:	463a      	mov	r2, r7
   d75fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
   d7602:	4631      	mov	r1, r6
   d7604:	4628      	mov	r0, r5
   d7606:	f00c fead 	bl	e4364 <mbedtls_rsa_validate_crt>
   d760a:	b100      	cbz	r0, d760e <mbedtls_rsa_check_privkey+0x5a>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
   d760c:	4801      	ldr	r0, [pc, #4]	; (d7614 <mbedtls_rsa_check_privkey+0x60>)
}
   d760e:	b005      	add	sp, #20
   d7610:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7612:	bf00      	nop
   d7614:	ffffbe00 	.word	0xffffbe00

000d7618 <mbedtls_rsa_check_pub_priv>:
{
   d7618:	b538      	push	{r3, r4, r5, lr}
   d761a:	4605      	mov	r5, r0
   d761c:	460c      	mov	r4, r1
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
   d761e:	f7ff ffa5 	bl	d756c <mbedtls_rsa_check_pubkey>
   d7622:	b988      	cbnz	r0, d7648 <mbedtls_rsa_check_pub_priv+0x30>
        mbedtls_rsa_check_privkey( prv ) != 0 )
   d7624:	4620      	mov	r0, r4
   d7626:	f7ff ffc5 	bl	d75b4 <mbedtls_rsa_check_privkey>
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
   d762a:	b968      	cbnz	r0, d7648 <mbedtls_rsa_check_pub_priv+0x30>
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
   d762c:	f104 0108 	add.w	r1, r4, #8
   d7630:	f105 0008 	add.w	r0, r5, #8
   d7634:	f009 fd70 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   d7638:	b930      	cbnz	r0, d7648 <mbedtls_rsa_check_pub_priv+0x30>
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
   d763a:	f104 0114 	add.w	r1, r4, #20
   d763e:	f105 0014 	add.w	r0, r5, #20
   d7642:	f009 fd69 	bl	e1118 <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
   d7646:	b100      	cbz	r0, d764a <mbedtls_rsa_check_pub_priv+0x32>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
   d7648:	4800      	ldr	r0, [pc, #0]	; (d764c <mbedtls_rsa_check_pub_priv+0x34>)
}
   d764a:	bd38      	pop	{r3, r4, r5, pc}
   d764c:	ffffbe00 	.word	0xffffbe00

000d7650 <mbedtls_rsa_public>:
{
   d7650:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7652:	460c      	mov	r4, r1
   d7654:	b089      	sub	sp, #36	; 0x24
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
   d7656:	2100      	movs	r1, #0
{
   d7658:	4605      	mov	r5, r0
   d765a:	4616      	mov	r6, r2
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
   d765c:	f7ff fe4a 	bl	d72f4 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
   d7660:	bb88      	cbnz	r0, d76c6 <mbedtls_rsa_public+0x76>
    mbedtls_mpi_init( &T );
   d7662:	a805      	add	r0, sp, #20
   d7664:	f009 fa79 	bl	e0b5a <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
   d7668:	4621      	mov	r1, r4
   d766a:	686a      	ldr	r2, [r5, #4]
   d766c:	a805      	add	r0, sp, #20
   d766e:	f009 fbb8 	bl	e0de2 <mbedtls_mpi_read_binary>
   d7672:	4604      	mov	r4, r0
   d7674:	b9d8      	cbnz	r0, d76ae <mbedtls_rsa_public+0x5e>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
   d7676:	f105 0308 	add.w	r3, r5, #8
   d767a:	4619      	mov	r1, r3
   d767c:	a805      	add	r0, sp, #20
   d767e:	9303      	str	r3, [sp, #12]
   d7680:	f009 fd4a 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   d7684:	2800      	cmp	r0, #0
   d7686:	9b03      	ldr	r3, [sp, #12]
   d7688:	da1a      	bge.n	d76c0 <mbedtls_rsa_public+0x70>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
   d768a:	f105 0268 	add.w	r2, r5, #104	; 0x68
   d768e:	a905      	add	r1, sp, #20
   d7690:	9200      	str	r2, [sp, #0]
   d7692:	4608      	mov	r0, r1
   d7694:	f105 0214 	add.w	r2, r5, #20
    olen = ctx->len;
   d7698:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
   d769a:	f00a f905 	bl	e18a8 <mbedtls_mpi_exp_mod>
   d769e:	4604      	mov	r4, r0
   d76a0:	b928      	cbnz	r0, d76ae <mbedtls_rsa_public+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
   d76a2:	463a      	mov	r2, r7
   d76a4:	4631      	mov	r1, r6
   d76a6:	a805      	add	r0, sp, #20
   d76a8:	f009 fbd3 	bl	e0e52 <mbedtls_mpi_write_binary>
   d76ac:	4604      	mov	r4, r0
    mbedtls_mpi_free( &T );
   d76ae:	a805      	add	r0, sp, #20
   d76b0:	f009 fa59 	bl	e0b66 <mbedtls_mpi_free>
    if( ret != 0 )
   d76b4:	b10c      	cbz	r4, d76ba <mbedtls_rsa_public+0x6a>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
   d76b6:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
}
   d76ba:	4620      	mov	r0, r4
   d76bc:	b009      	add	sp, #36	; 0x24
   d76be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
   d76c0:	f06f 0403 	mvn.w	r4, #3
   d76c4:	e7f3      	b.n	d76ae <mbedtls_rsa_public+0x5e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d76c6:	4c01      	ldr	r4, [pc, #4]	; (d76cc <mbedtls_rsa_public+0x7c>)
   d76c8:	e7f7      	b.n	d76ba <mbedtls_rsa_public+0x6a>
   d76ca:	bf00      	nop
   d76cc:	ffffbf80 	.word	0xffffbf80

000d76d0 <mbedtls_rsa_private>:
{
   d76d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d76d4:	460d      	mov	r5, r1
   d76d6:	b0a3      	sub	sp, #140	; 0x8c
    if( rsa_check_context( ctx, 1             /* private key checks */,
   d76d8:	2101      	movs	r1, #1
{
   d76da:	4604      	mov	r4, r0
   d76dc:	4617      	mov	r7, r2
   d76de:	461e      	mov	r6, r3
    if( rsa_check_context( ctx, 1             /* private key checks */,
   d76e0:	f7ff fe08 	bl	d72f4 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
   d76e4:	2800      	cmp	r0, #0
   d76e6:	f040 81a7 	bne.w	d7a38 <mbedtls_rsa_private+0x368>
    mbedtls_mpi_init( &T );
   d76ea:	a804      	add	r0, sp, #16
   d76ec:	f009 fa35 	bl	e0b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &P1 );
   d76f0:	a807      	add	r0, sp, #28
   d76f2:	f009 fa32 	bl	e0b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &Q1 );
   d76f6:	a80a      	add	r0, sp, #40	; 0x28
   d76f8:	f009 fa2f 	bl	e0b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &R );
   d76fc:	a80d      	add	r0, sp, #52	; 0x34
   d76fe:	f009 fa2c 	bl	e0b5a <mbedtls_mpi_init>
    if( f_rng != NULL )
   d7702:	b12d      	cbz	r5, d7710 <mbedtls_rsa_private+0x40>
        mbedtls_mpi_init( &DP_blind );
   d7704:	a816      	add	r0, sp, #88	; 0x58
   d7706:	f009 fa28 	bl	e0b5a <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
   d770a:	a819      	add	r0, sp, #100	; 0x64
   d770c:	f009 fa25 	bl	e0b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
   d7710:	a810      	add	r0, sp, #64	; 0x40
   d7712:	f009 fa22 	bl	e0b5a <mbedtls_mpi_init>
   d7716:	a813      	add	r0, sp, #76	; 0x4c
   d7718:	f009 fa1f 	bl	e0b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &I );
   d771c:	a81c      	add	r0, sp, #112	; 0x70
   d771e:	f009 fa1c 	bl	e0b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
   d7722:	a81f      	add	r0, sp, #124	; 0x7c
   d7724:	f009 fa19 	bl	e0b5a <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
   d7728:	6862      	ldr	r2, [r4, #4]
   d772a:	4631      	mov	r1, r6
   d772c:	a804      	add	r0, sp, #16
   d772e:	f009 fb58 	bl	e0de2 <mbedtls_mpi_read_binary>
   d7732:	4603      	mov	r3, r0
   d7734:	2800      	cmp	r0, #0
   d7736:	f040 814d 	bne.w	d79d4 <mbedtls_rsa_private+0x304>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
   d773a:	f104 0608 	add.w	r6, r4, #8
   d773e:	4631      	mov	r1, r6
   d7740:	a804      	add	r0, sp, #16
   d7742:	f009 fce9 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   d7746:	2800      	cmp	r0, #0
   d7748:	f280 816f 	bge.w	d7a2a <mbedtls_rsa_private+0x35a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
   d774c:	a904      	add	r1, sp, #16
   d774e:	a81c      	add	r0, sp, #112	; 0x70
   d7750:	f009 fa80 	bl	e0c54 <mbedtls_mpi_copy>
   d7754:	4603      	mov	r3, r0
   d7756:	2800      	cmp	r0, #0
   d7758:	f040 813c 	bne.w	d79d4 <mbedtls_rsa_private+0x304>
    mbedtls_mpi *DP = &ctx->DP;
   d775c:	f104 0a44 	add.w	sl, r4, #68	; 0x44
    mbedtls_mpi *DQ = &ctx->DQ;
   d7760:	f104 0950 	add.w	r9, r4, #80	; 0x50
    if( f_rng != NULL )
   d7764:	2d00      	cmp	r5, #0
   d7766:	f000 8090 	beq.w	d788a <mbedtls_rsa_private+0x1ba>
    if( ctx->Vf.p != NULL )
   d776a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   d776e:	2b00      	cmp	r3, #0
   d7770:	f000 80ee 	beq.w	d7950 <mbedtls_rsa_private+0x280>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
   d7774:	f104 018c 	add.w	r1, r4, #140	; 0x8c
   d7778:	460a      	mov	r2, r1
   d777a:	4608      	mov	r0, r1
   d777c:	9103      	str	r1, [sp, #12]
   d777e:	f009 fe28 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d7782:	4603      	mov	r3, r0
   d7784:	2800      	cmp	r0, #0
   d7786:	f040 8125 	bne.w	d79d4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
   d778a:	9903      	ldr	r1, [sp, #12]
   d778c:	4632      	mov	r2, r6
   d778e:	4608      	mov	r0, r1
   d7790:	f00a f857 	bl	e1842 <mbedtls_mpi_mod_mpi>
   d7794:	4603      	mov	r3, r0
   d7796:	2800      	cmp	r0, #0
   d7798:	f040 811c 	bne.w	d79d4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
   d779c:	f104 0198 	add.w	r1, r4, #152	; 0x98
   d77a0:	460a      	mov	r2, r1
   d77a2:	4608      	mov	r0, r1
   d77a4:	9103      	str	r1, [sp, #12]
   d77a6:	f009 fe14 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d77aa:	4603      	mov	r3, r0
   d77ac:	2800      	cmp	r0, #0
   d77ae:	f040 8111 	bne.w	d79d4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
   d77b2:	9903      	ldr	r1, [sp, #12]
   d77b4:	4632      	mov	r2, r6
   d77b6:	4608      	mov	r0, r1
   d77b8:	f00a f843 	bl	e1842 <mbedtls_mpi_mod_mpi>
   d77bc:	4603      	mov	r3, r0
   d77be:	2800      	cmp	r0, #0
   d77c0:	f040 8108 	bne.w	d79d4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
   d77c4:	a904      	add	r1, sp, #16
   d77c6:	f104 028c 	add.w	r2, r4, #140	; 0x8c
   d77ca:	4608      	mov	r0, r1
   d77cc:	f009 fe01 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d77d0:	4603      	mov	r3, r0
   d77d2:	2800      	cmp	r0, #0
   d77d4:	f040 80fe 	bne.w	d79d4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
   d77d8:	a904      	add	r1, sp, #16
   d77da:	4632      	mov	r2, r6
   d77dc:	4608      	mov	r0, r1
   d77de:	f00a f830 	bl	e1842 <mbedtls_mpi_mod_mpi>
   d77e2:	4603      	mov	r3, r0
   d77e4:	2800      	cmp	r0, #0
   d77e6:	f040 80f5 	bne.w	d79d4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
   d77ea:	2201      	movs	r2, #1
   d77ec:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   d77f0:	a807      	add	r0, sp, #28
   d77f2:	f009 fdd8 	bl	e13a6 <mbedtls_mpi_sub_int>
   d77f6:	4603      	mov	r3, r0
   d77f8:	2800      	cmp	r0, #0
   d77fa:	f040 80eb 	bne.w	d79d4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
   d77fe:	2201      	movs	r2, #1
   d7800:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d7804:	a80a      	add	r0, sp, #40	; 0x28
   d7806:	f009 fdce 	bl	e13a6 <mbedtls_mpi_sub_int>
   d780a:	4603      	mov	r3, r0
   d780c:	2800      	cmp	r0, #0
   d780e:	f040 80e1 	bne.w	d79d4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
   d7812:	463b      	mov	r3, r7
   d7814:	462a      	mov	r2, r5
   d7816:	211c      	movs	r1, #28
   d7818:	a80d      	add	r0, sp, #52	; 0x34
   d781a:	f00a faf1 	bl	e1e00 <mbedtls_mpi_fill_random>
   d781e:	4603      	mov	r3, r0
   d7820:	2800      	cmp	r0, #0
   d7822:	f040 80d7 	bne.w	d79d4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
   d7826:	aa0d      	add	r2, sp, #52	; 0x34
   d7828:	a907      	add	r1, sp, #28
   d782a:	a816      	add	r0, sp, #88	; 0x58
   d782c:	f009 fdd1 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d7830:	4603      	mov	r3, r0
   d7832:	2800      	cmp	r0, #0
   d7834:	f040 80ce 	bne.w	d79d4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
   d7838:	a916      	add	r1, sp, #88	; 0x58
   d783a:	4652      	mov	r2, sl
   d783c:	4608      	mov	r0, r1
   d783e:	f009 fd57 	bl	e12f0 <mbedtls_mpi_add_mpi>
   d7842:	4603      	mov	r3, r0
   d7844:	2800      	cmp	r0, #0
   d7846:	f040 80c5 	bne.w	d79d4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
   d784a:	463b      	mov	r3, r7
   d784c:	462a      	mov	r2, r5
   d784e:	211c      	movs	r1, #28
   d7850:	a80d      	add	r0, sp, #52	; 0x34
   d7852:	f00a fad5 	bl	e1e00 <mbedtls_mpi_fill_random>
   d7856:	4603      	mov	r3, r0
   d7858:	2800      	cmp	r0, #0
   d785a:	f040 80bb 	bne.w	d79d4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
   d785e:	aa0d      	add	r2, sp, #52	; 0x34
   d7860:	a90a      	add	r1, sp, #40	; 0x28
   d7862:	a819      	add	r0, sp, #100	; 0x64
   d7864:	f009 fdb5 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d7868:	4603      	mov	r3, r0
   d786a:	2800      	cmp	r0, #0
   d786c:	f040 80b2 	bne.w	d79d4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
   d7870:	a919      	add	r1, sp, #100	; 0x64
   d7872:	464a      	mov	r2, r9
   d7874:	4608      	mov	r0, r1
   d7876:	f009 fd3b 	bl	e12f0 <mbedtls_mpi_add_mpi>
   d787a:	4603      	mov	r3, r0
   d787c:	2800      	cmp	r0, #0
   d787e:	f040 80a9 	bne.w	d79d4 <mbedtls_rsa_private+0x304>
        DQ = &DQ_blind;
   d7882:	f10d 0964 	add.w	r9, sp, #100	; 0x64
        DP = &DP_blind;
   d7886:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
   d788a:	f104 0374 	add.w	r3, r4, #116	; 0x74
   d788e:	f104 082c 	add.w	r8, r4, #44	; 0x2c
   d7892:	9300      	str	r3, [sp, #0]
   d7894:	4652      	mov	r2, sl
   d7896:	4643      	mov	r3, r8
   d7898:	a904      	add	r1, sp, #16
   d789a:	a810      	add	r0, sp, #64	; 0x40
   d789c:	f00a f804 	bl	e18a8 <mbedtls_mpi_exp_mod>
   d78a0:	4603      	mov	r3, r0
   d78a2:	2800      	cmp	r0, #0
   d78a4:	f040 8096 	bne.w	d79d4 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
   d78a8:	f104 0380 	add.w	r3, r4, #128	; 0x80
   d78ac:	f104 0738 	add.w	r7, r4, #56	; 0x38
   d78b0:	9300      	str	r3, [sp, #0]
   d78b2:	464a      	mov	r2, r9
   d78b4:	463b      	mov	r3, r7
   d78b6:	a904      	add	r1, sp, #16
   d78b8:	a813      	add	r0, sp, #76	; 0x4c
   d78ba:	f009 fff5 	bl	e18a8 <mbedtls_mpi_exp_mod>
   d78be:	4603      	mov	r3, r0
   d78c0:	2800      	cmp	r0, #0
   d78c2:	f040 8087 	bne.w	d79d4 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
   d78c6:	aa13      	add	r2, sp, #76	; 0x4c
   d78c8:	a910      	add	r1, sp, #64	; 0x40
   d78ca:	a804      	add	r0, sp, #16
   d78cc:	f009 fd32 	bl	e1334 <mbedtls_mpi_sub_mpi>
   d78d0:	4603      	mov	r3, r0
   d78d2:	2800      	cmp	r0, #0
   d78d4:	d17e      	bne.n	d79d4 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
   d78d6:	f104 025c 	add.w	r2, r4, #92	; 0x5c
   d78da:	a904      	add	r1, sp, #16
   d78dc:	a810      	add	r0, sp, #64	; 0x40
   d78de:	f009 fd78 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d78e2:	4603      	mov	r3, r0
   d78e4:	2800      	cmp	r0, #0
   d78e6:	d175      	bne.n	d79d4 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
   d78e8:	4642      	mov	r2, r8
   d78ea:	a910      	add	r1, sp, #64	; 0x40
   d78ec:	a804      	add	r0, sp, #16
   d78ee:	f009 ffa8 	bl	e1842 <mbedtls_mpi_mod_mpi>
   d78f2:	4603      	mov	r3, r0
   d78f4:	2800      	cmp	r0, #0
   d78f6:	d16d      	bne.n	d79d4 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
   d78f8:	463a      	mov	r2, r7
   d78fa:	a904      	add	r1, sp, #16
   d78fc:	a810      	add	r0, sp, #64	; 0x40
   d78fe:	f009 fd68 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d7902:	4603      	mov	r3, r0
   d7904:	2800      	cmp	r0, #0
   d7906:	d165      	bne.n	d79d4 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
   d7908:	aa10      	add	r2, sp, #64	; 0x40
   d790a:	a913      	add	r1, sp, #76	; 0x4c
   d790c:	a804      	add	r0, sp, #16
   d790e:	f009 fcef 	bl	e12f0 <mbedtls_mpi_add_mpi>
   d7912:	4603      	mov	r3, r0
   d7914:	2800      	cmp	r0, #0
   d7916:	d15d      	bne.n	d79d4 <mbedtls_rsa_private+0x304>
    if( f_rng != NULL )
   d7918:	2d00      	cmp	r5, #0
   d791a:	d14b      	bne.n	d79b4 <mbedtls_rsa_private+0x2e4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
   d791c:	f104 0368 	add.w	r3, r4, #104	; 0x68
   d7920:	9300      	str	r3, [sp, #0]
   d7922:	f104 0214 	add.w	r2, r4, #20
   d7926:	4633      	mov	r3, r6
   d7928:	a904      	add	r1, sp, #16
   d792a:	a81f      	add	r0, sp, #124	; 0x7c
   d792c:	f009 ffbc 	bl	e18a8 <mbedtls_mpi_exp_mod>
   d7930:	4603      	mov	r3, r0
   d7932:	2800      	cmp	r0, #0
   d7934:	d14e      	bne.n	d79d4 <mbedtls_rsa_private+0x304>
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
   d7936:	a91c      	add	r1, sp, #112	; 0x70
   d7938:	a81f      	add	r0, sp, #124	; 0x7c
   d793a:	f009 fbed 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   d793e:	2800      	cmp	r0, #0
   d7940:	d178      	bne.n	d7a34 <mbedtls_rsa_private+0x364>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
   d7942:	6862      	ldr	r2, [r4, #4]
   d7944:	992c      	ldr	r1, [sp, #176]	; 0xb0
   d7946:	a804      	add	r0, sp, #16
   d7948:	f009 fa83 	bl	e0e52 <mbedtls_mpi_write_binary>
   d794c:	4603      	mov	r3, r0
cleanup:
   d794e:	e041      	b.n	d79d4 <mbedtls_rsa_private+0x304>
   d7950:	230c      	movs	r3, #12
   d7952:	9303      	str	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
   d7954:	f104 0b98 	add.w	fp, r4, #152	; 0x98
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
   d7958:	f104 088c 	add.w	r8, r4, #140	; 0x8c
        if( count++ > 10 )
   d795c:	9b03      	ldr	r3, [sp, #12]
   d795e:	3b01      	subs	r3, #1
   d7960:	9303      	str	r3, [sp, #12]
   d7962:	d065      	beq.n	d7a30 <mbedtls_rsa_private+0x360>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
   d7964:	6861      	ldr	r1, [r4, #4]
   d7966:	463b      	mov	r3, r7
   d7968:	462a      	mov	r2, r5
   d796a:	3901      	subs	r1, #1
   d796c:	4658      	mov	r0, fp
   d796e:	f00a fa47 	bl	e1e00 <mbedtls_mpi_fill_random>
   d7972:	4603      	mov	r3, r0
   d7974:	bb70      	cbnz	r0, d79d4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
   d7976:	4632      	mov	r2, r6
   d7978:	4659      	mov	r1, fp
   d797a:	4640      	mov	r0, r8
   d797c:	f00a f9bb 	bl	e1cf6 <mbedtls_mpi_gcd>
   d7980:	4603      	mov	r3, r0
   d7982:	bb38      	cbnz	r0, d79d4 <mbedtls_rsa_private+0x304>
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
   d7984:	2101      	movs	r1, #1
   d7986:	4640      	mov	r0, r8
   d7988:	f009 fc07 	bl	e119a <mbedtls_mpi_cmp_int>
   d798c:	2800      	cmp	r0, #0
   d798e:	d1e5      	bne.n	d795c <mbedtls_rsa_private+0x28c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
   d7990:	4632      	mov	r2, r6
   d7992:	4659      	mov	r1, fp
   d7994:	4640      	mov	r0, r8
   d7996:	f00a fa68 	bl	e1e6a <mbedtls_mpi_inv_mod>
   d799a:	4603      	mov	r3, r0
   d799c:	b9d0      	cbnz	r0, d79d4 <mbedtls_rsa_private+0x304>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
   d799e:	f104 0368 	add.w	r3, r4, #104	; 0x68
   d79a2:	9300      	str	r3, [sp, #0]
   d79a4:	f104 0214 	add.w	r2, r4, #20
   d79a8:	4633      	mov	r3, r6
   d79aa:	4641      	mov	r1, r8
   d79ac:	4640      	mov	r0, r8
   d79ae:	f009 ff7b 	bl	e18a8 <mbedtls_mpi_exp_mod>
   d79b2:	e703      	b.n	d77bc <mbedtls_rsa_private+0xec>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
   d79b4:	a904      	add	r1, sp, #16
   d79b6:	f104 0298 	add.w	r2, r4, #152	; 0x98
   d79ba:	4608      	mov	r0, r1
   d79bc:	f009 fd09 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d79c0:	4603      	mov	r3, r0
   d79c2:	b938      	cbnz	r0, d79d4 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
   d79c4:	a904      	add	r1, sp, #16
   d79c6:	4632      	mov	r2, r6
   d79c8:	4608      	mov	r0, r1
   d79ca:	f009 ff3a 	bl	e1842 <mbedtls_mpi_mod_mpi>
   d79ce:	4603      	mov	r3, r0
   d79d0:	2800      	cmp	r0, #0
   d79d2:	d0a3      	beq.n	d791c <mbedtls_rsa_private+0x24c>
    mbedtls_mpi_free( &P1 );
   d79d4:	a807      	add	r0, sp, #28
   d79d6:	9303      	str	r3, [sp, #12]
   d79d8:	f009 f8c5 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
   d79dc:	a80a      	add	r0, sp, #40	; 0x28
   d79de:	f009 f8c2 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
   d79e2:	a80d      	add	r0, sp, #52	; 0x34
   d79e4:	f009 f8bf 	bl	e0b66 <mbedtls_mpi_free>
    if( f_rng != NULL )
   d79e8:	9b03      	ldr	r3, [sp, #12]
   d79ea:	b135      	cbz	r5, d79fa <mbedtls_rsa_private+0x32a>
        mbedtls_mpi_free( &DP_blind );
   d79ec:	a816      	add	r0, sp, #88	; 0x58
   d79ee:	f009 f8ba 	bl	e0b66 <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
   d79f2:	a819      	add	r0, sp, #100	; 0x64
   d79f4:	f009 f8b7 	bl	e0b66 <mbedtls_mpi_free>
   d79f8:	9b03      	ldr	r3, [sp, #12]
   d79fa:	9303      	str	r3, [sp, #12]
    mbedtls_mpi_free( &T );
   d79fc:	a804      	add	r0, sp, #16
   d79fe:	f009 f8b2 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
   d7a02:	a810      	add	r0, sp, #64	; 0x40
   d7a04:	f009 f8af 	bl	e0b66 <mbedtls_mpi_free>
   d7a08:	a813      	add	r0, sp, #76	; 0x4c
   d7a0a:	f009 f8ac 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &C );
   d7a0e:	a81f      	add	r0, sp, #124	; 0x7c
   d7a10:	f009 f8a9 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &I );
   d7a14:	a81c      	add	r0, sp, #112	; 0x70
   d7a16:	f009 f8a6 	bl	e0b66 <mbedtls_mpi_free>
    if( ret != 0 )
   d7a1a:	9b03      	ldr	r3, [sp, #12]
   d7a1c:	b10b      	cbz	r3, d7a22 <mbedtls_rsa_private+0x352>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
   d7a1e:	f5a3 4386 	sub.w	r3, r3, #17152	; 0x4300
}
   d7a22:	4618      	mov	r0, r3
   d7a24:	b023      	add	sp, #140	; 0x8c
   d7a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
   d7a2a:	f06f 0303 	mvn.w	r3, #3
   d7a2e:	e7d1      	b.n	d79d4 <mbedtls_rsa_private+0x304>
            return( MBEDTLS_ERR_RSA_RNG_FAILED );
   d7a30:	4b02      	ldr	r3, [pc, #8]	; (d7a3c <mbedtls_rsa_private+0x36c>)
   d7a32:	e7cf      	b.n	d79d4 <mbedtls_rsa_private+0x304>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
   d7a34:	4b02      	ldr	r3, [pc, #8]	; (d7a40 <mbedtls_rsa_private+0x370>)
   d7a36:	e7cd      	b.n	d79d4 <mbedtls_rsa_private+0x304>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d7a38:	4b02      	ldr	r3, [pc, #8]	; (d7a44 <mbedtls_rsa_private+0x374>)
   d7a3a:	e7f2      	b.n	d7a22 <mbedtls_rsa_private+0x352>
   d7a3c:	ffffbb80 	.word	0xffffbb80
   d7a40:	ffffbc80 	.word	0xffffbc80
   d7a44:	ffffbf80 	.word	0xffffbf80

000d7a48 <mbedtls_rsa_rsaes_oaep_encrypt>:
{
   d7a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7a4c:	b08b      	sub	sp, #44	; 0x2c
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d7a4e:	2b01      	cmp	r3, #1
{
   d7a50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   d7a54:	9102      	str	r1, [sp, #8]
   d7a56:	4607      	mov	r7, r0
   d7a58:	4693      	mov	fp, r2
   d7a5a:	9303      	str	r3, [sp, #12]
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d7a5c:	d108      	bne.n	d7a70 <mbedtls_rsa_rsaes_oaep_encrypt+0x28>
   d7a5e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   d7a62:	2b01      	cmp	r3, #1
   d7a64:	d004      	beq.n	d7a70 <mbedtls_rsa_rsaes_oaep_encrypt+0x28>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d7a66:	4c42      	ldr	r4, [pc, #264]	; (d7b70 <mbedtls_rsa_rsaes_oaep_encrypt+0x128>)
}
   d7a68:	4620      	mov	r0, r4
   d7a6a:	b00b      	add	sp, #44	; 0x2c
   d7a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( f_rng == NULL )
   d7a70:	9b02      	ldr	r3, [sp, #8]
   d7a72:	2b00      	cmp	r3, #0
   d7a74:	d0f7      	beq.n	d7a66 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
   d7a76:	f897 00a8 	ldrb.w	r0, [r7, #168]	; 0xa8
   d7a7a:	f005 f9f3 	bl	dce64 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   d7a7e:	4682      	mov	sl, r0
   d7a80:	2800      	cmp	r0, #0
   d7a82:	d0f0      	beq.n	d7a66 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
    olen = ctx->len;
   d7a84:	687e      	ldr	r6, [r7, #4]
    hlen = mbedtls_md_get_size( md_info );
   d7a86:	f005 fb27 	bl	dd0d8 <mbedtls_md_get_size>
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
   d7a8a:	b202      	sxth	r2, r0
   d7a8c:	0053      	lsls	r3, r2, #1
   d7a8e:	9304      	str	r3, [sp, #16]
   d7a90:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d7a92:	3302      	adds	r3, #2
   d7a94:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   d7a98:	9a16      	ldr	r2, [sp, #88]	; 0x58
   d7a9a:	4293      	cmp	r3, r2
    hlen = mbedtls_md_get_size( md_info );
   d7a9c:	4605      	mov	r5, r0
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
   d7a9e:	d3e2      	bcc.n	d7a66 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
   d7aa0:	42b3      	cmp	r3, r6
   d7aa2:	d8e0      	bhi.n	d7a66 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
    memset( output, 0, olen );
   d7aa4:	4632      	mov	r2, r6
   d7aa6:	2100      	movs	r1, #0
    *p++ = 0;
   d7aa8:	46c1      	mov	r9, r8
    memset( output, 0, olen );
   d7aaa:	4640      	mov	r0, r8
   d7aac:	f011 f9c6 	bl	e8e3c <memset>
    *p++ = 0;
   d7ab0:	2300      	movs	r3, #0
   d7ab2:	f809 3b01 	strb.w	r3, [r9], #1
    if( ( ret = f_rng( p_rng, p, hlen ) ) != 0 )
   d7ab6:	462a      	mov	r2, r5
   d7ab8:	9b02      	ldr	r3, [sp, #8]
   d7aba:	4649      	mov	r1, r9
   d7abc:	4658      	mov	r0, fp
   d7abe:	4798      	blx	r3
   d7ac0:	b110      	cbz	r0, d7ac8 <mbedtls_rsa_rsaes_oaep_encrypt+0x80>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
   d7ac2:	f5a0 4489 	sub.w	r4, r0, #17536	; 0x4480
   d7ac6:	e7cf      	b.n	d7a68 <mbedtls_rsa_rsaes_oaep_encrypt+0x20>
    p += hlen;
   d7ac8:	eb09 0305 	add.w	r3, r9, r5
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
   d7acc:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   d7ad0:	4650      	mov	r0, sl
   d7ad2:	9305      	str	r3, [sp, #20]
   d7ad4:	f005 fa30 	bl	dcf38 <mbedtls_md>
   d7ad8:	4604      	mov	r4, r0
   d7ada:	2800      	cmp	r0, #0
   d7adc:	d1c4      	bne.n	d7a68 <mbedtls_rsa_rsaes_oaep_encrypt+0x20>
    p += olen - 2 * hlen - 2 - ilen;
   d7ade:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d7ae0:	1af2      	subs	r2, r6, r3
   d7ae2:	3a02      	subs	r2, #2
   d7ae4:	9b04      	ldr	r3, [sp, #16]
   d7ae6:	442a      	add	r2, r5
   d7ae8:	1ad2      	subs	r2, r2, r3
   d7aea:	9b05      	ldr	r3, [sp, #20]
    *p++ = 1;
   d7aec:	2101      	movs	r1, #1
    p += olen - 2 * hlen - 2 - ilen;
   d7aee:	1898      	adds	r0, r3, r2
    *p++ = 1;
   d7af0:	5499      	strb	r1, [r3, r2]
    memcpy( p, input, ilen );
   d7af2:	3001      	adds	r0, #1
   d7af4:	e9dd 2116 	ldrd	r2, r1, [sp, #88]	; 0x58
   d7af8:	f011 f978 	bl	e8dec <memcpy>
    mbedtls_md_init( &md_ctx );
   d7afc:	a807      	add	r0, sp, #28
   d7afe:	f005 f9bd 	bl	dce7c <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   d7b02:	4622      	mov	r2, r4
   d7b04:	4651      	mov	r1, sl
   d7b06:	a807      	add	r0, sp, #28
   d7b08:	f005 f9d8 	bl	dcebc <mbedtls_md_setup>
   d7b0c:	4604      	mov	r4, r0
   d7b0e:	b9b8      	cbnz	r0, d7b40 <mbedtls_rsa_rsaes_oaep_encrypt+0xf8>
    if( ( ret = mgf_mask( output + hlen + 1, olen - hlen - 1, output + 1, hlen,
   d7b10:	f105 0a01 	add.w	sl, r5, #1
   d7b14:	3e01      	subs	r6, #1
   d7b16:	ab07      	add	r3, sp, #28
   d7b18:	44c2      	add	sl, r8
   d7b1a:	1b76      	subs	r6, r6, r5
   d7b1c:	9300      	str	r3, [sp, #0]
   d7b1e:	464a      	mov	r2, r9
   d7b20:	462b      	mov	r3, r5
   d7b22:	4631      	mov	r1, r6
   d7b24:	4650      	mov	r0, sl
   d7b26:	f7ff fb11 	bl	d714c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
   d7b2a:	4604      	mov	r4, r0
   d7b2c:	b940      	cbnz	r0, d7b40 <mbedtls_rsa_rsaes_oaep_encrypt+0xf8>
    if( ( ret = mgf_mask( output + 1, hlen, output + hlen + 1, olen - hlen - 1,
   d7b2e:	ab07      	add	r3, sp, #28
   d7b30:	9300      	str	r3, [sp, #0]
   d7b32:	4652      	mov	r2, sl
   d7b34:	4633      	mov	r3, r6
   d7b36:	4629      	mov	r1, r5
   d7b38:	4648      	mov	r0, r9
   d7b3a:	f7ff fb07 	bl	d714c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
   d7b3e:	4604      	mov	r4, r0
    mbedtls_md_free( &md_ctx );
   d7b40:	a807      	add	r0, sp, #28
   d7b42:	f005 f9a0 	bl	dce86 <mbedtls_md_free>
    if( ret != 0 )
   d7b46:	2c00      	cmp	r4, #0
   d7b48:	d18e      	bne.n	d7a68 <mbedtls_rsa_rsaes_oaep_encrypt+0x20>
            ? mbedtls_rsa_public(  ctx, output, output )
   d7b4a:	9b03      	ldr	r3, [sp, #12]
   d7b4c:	b933      	cbnz	r3, d7b5c <mbedtls_rsa_rsaes_oaep_encrypt+0x114>
   d7b4e:	4642      	mov	r2, r8
   d7b50:	4641      	mov	r1, r8
   d7b52:	4638      	mov	r0, r7
   d7b54:	f7ff fd7c 	bl	d7650 <mbedtls_rsa_public>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
   d7b58:	4604      	mov	r4, r0
   d7b5a:	e785      	b.n	d7a68 <mbedtls_rsa_rsaes_oaep_encrypt+0x20>
   d7b5c:	9902      	ldr	r1, [sp, #8]
   d7b5e:	f8cd 8000 	str.w	r8, [sp]
   d7b62:	4643      	mov	r3, r8
   d7b64:	465a      	mov	r2, fp
   d7b66:	4638      	mov	r0, r7
   d7b68:	f7ff fdb2 	bl	d76d0 <mbedtls_rsa_private>
   d7b6c:	e7f4      	b.n	d7b58 <mbedtls_rsa_rsaes_oaep_encrypt+0x110>
   d7b6e:	bf00      	nop
   d7b70:	ffffbf80 	.word	0xffffbf80

000d7b74 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
{
   d7b74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7b78:	4698      	mov	r8, r3
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d7b7a:	f1b8 0f01 	cmp.w	r8, #1
{
   d7b7e:	e9dd a30c 	ldrd	sl, r3, [sp, #48]	; 0x30
   d7b82:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   d7b84:	4606      	mov	r6, r0
   d7b86:	460f      	mov	r7, r1
   d7b88:	4691      	mov	r9, r2
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d7b8a:	d106      	bne.n	d7b9a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x26>
   d7b8c:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
   d7b90:	b11a      	cbz	r2, d7b9a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x26>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d7b92:	4830      	ldr	r0, [pc, #192]	; (d7c54 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xe0>)
}
   d7b94:	b003      	add	sp, #12
   d7b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ilen + 11 < ilen || olen < ilen + 11 )
   d7b9a:	f11a 0f0c 	cmn.w	sl, #12
    olen = ctx->len;
   d7b9e:	6875      	ldr	r5, [r6, #4]
    if( ilen + 11 < ilen || olen < ilen + 11 )
   d7ba0:	d8f7      	bhi.n	d7b92 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x1e>
   d7ba2:	f10a 020b 	add.w	r2, sl, #11
   d7ba6:	42aa      	cmp	r2, r5
   d7ba8:	d8f3      	bhi.n	d7b92 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x1e>
    nb_pad = olen - 3 - ilen;
   d7baa:	eba5 050a 	sub.w	r5, r5, sl
    *p++ = 0;
   d7bae:	2200      	movs	r2, #0
    nb_pad = olen - 3 - ilen;
   d7bb0:	3d03      	subs	r5, #3
    *p++ = 0;
   d7bb2:	7022      	strb	r2, [r4, #0]
    if( mode == MBEDTLS_RSA_PUBLIC )
   d7bb4:	f1b8 0f00 	cmp.w	r8, #0
   d7bb8:	d11b      	bne.n	d7bf2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x7e>
        if( f_rng == NULL )
   d7bba:	2f00      	cmp	r7, #0
   d7bbc:	d0e9      	beq.n	d7b92 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x1e>
        *p++ = MBEDTLS_RSA_CRYPT;
   d7bbe:	2202      	movs	r2, #2
   d7bc0:	4415      	add	r5, r2
   d7bc2:	1ca1      	adds	r1, r4, #2
   d7bc4:	7062      	strb	r2, [r4, #1]
   d7bc6:	4425      	add	r5, r4
        while( nb_pad-- > 0 )
   d7bc8:	42a9      	cmp	r1, r5
   d7bca:	d01e      	beq.n	d7c0a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x96>
   d7bcc:	f04f 0b64 	mov.w	fp, #100	; 0x64
                ret = f_rng( p_rng, p, 1 );
   d7bd0:	2201      	movs	r2, #1
   d7bd2:	4648      	mov	r0, r9
   d7bd4:	9301      	str	r3, [sp, #4]
   d7bd6:	9100      	str	r1, [sp, #0]
   d7bd8:	47b8      	blx	r7
            } while( *p == 0 && --rng_dl && ret == 0 );
   d7bda:	9900      	ldr	r1, [sp, #0]
   d7bdc:	9b01      	ldr	r3, [sp, #4]
   d7bde:	780a      	ldrb	r2, [r1, #0]
   d7be0:	bb9a      	cbnz	r2, d7c4a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd6>
   d7be2:	f1bb 0b01 	subs.w	fp, fp, #1
   d7be6:	d001      	beq.n	d7bec <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x78>
   d7be8:	2800      	cmp	r0, #0
   d7bea:	d0f1      	beq.n	d7bd0 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x5c>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
   d7bec:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
   d7bf0:	e7d0      	b.n	d7b94 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x20>
        *p++ = MBEDTLS_RSA_SIGN;
   d7bf2:	4622      	mov	r2, r4
   d7bf4:	2101      	movs	r1, #1
   d7bf6:	f802 1f01 	strb.w	r1, [r2, #1]!
   d7bfa:	1869      	adds	r1, r5, r1
   d7bfc:	1ca0      	adds	r0, r4, #2
   d7bfe:	4421      	add	r1, r4
            *p++ = 0xFF;
   d7c00:	f04f 0cff 	mov.w	ip, #255	; 0xff
        while( nb_pad-- > 0 )
   d7c04:	4291      	cmp	r1, r2
   d7c06:	d113      	bne.n	d7c30 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xbc>
   d7c08:	4405      	add	r5, r0
    *p++ = 0;
   d7c0a:	4628      	mov	r0, r5
   d7c0c:	2200      	movs	r2, #0
   d7c0e:	f800 2b01 	strb.w	r2, [r0], #1
    memcpy( p, input, ilen );
   d7c12:	4619      	mov	r1, r3
   d7c14:	4652      	mov	r2, sl
   d7c16:	f011 f8e9 	bl	e8dec <memcpy>
            ? mbedtls_rsa_public(  ctx, output, output )
   d7c1a:	f1b8 0f00 	cmp.w	r8, #0
   d7c1e:	d10a      	bne.n	d7c36 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xc2>
   d7c20:	4622      	mov	r2, r4
   d7c22:	4621      	mov	r1, r4
   d7c24:	4630      	mov	r0, r6
}
   d7c26:	b003      	add	sp, #12
   d7c28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            ? mbedtls_rsa_public(  ctx, output, output )
   d7c2c:	f7ff bd10 	b.w	d7650 <mbedtls_rsa_public>
            *p++ = 0xFF;
   d7c30:	f802 cf01 	strb.w	ip, [r2, #1]!
        while( nb_pad-- > 0 )
   d7c34:	e7e6      	b.n	d7c04 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x90>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
   d7c36:	4623      	mov	r3, r4
   d7c38:	464a      	mov	r2, r9
   d7c3a:	4639      	mov	r1, r7
   d7c3c:	4630      	mov	r0, r6
   d7c3e:	940c      	str	r4, [sp, #48]	; 0x30
}
   d7c40:	b003      	add	sp, #12
   d7c42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
   d7c46:	f7ff bd43 	b.w	d76d0 <mbedtls_rsa_private>
            if( rng_dl == 0 || ret != 0 )
   d7c4a:	2800      	cmp	r0, #0
   d7c4c:	d1ce      	bne.n	d7bec <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x78>
            p++;
   d7c4e:	3101      	adds	r1, #1
        while( nb_pad-- > 0 )
   d7c50:	e7ba      	b.n	d7bc8 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x54>
   d7c52:	bf00      	nop
   d7c54:	ffffbf80 	.word	0xffffbf80

000d7c58 <mbedtls_rsa_pkcs1_encrypt>:
{
   d7c58:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7c5a:	b087      	sub	sp, #28
    switch( ctx->padding )
   d7c5c:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
{
   d7c60:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   d7c62:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
    switch( ctx->padding )
   d7c66:	b124      	cbz	r4, d7c72 <mbedtls_rsa_pkcs1_encrypt+0x1a>
   d7c68:	2c01      	cmp	r4, #1
   d7c6a:	d007      	beq.n	d7c7c <mbedtls_rsa_pkcs1_encrypt+0x24>
   d7c6c:	4808      	ldr	r0, [pc, #32]	; (d7c90 <mbedtls_rsa_pkcs1_encrypt+0x38>)
}
   d7c6e:	b007      	add	sp, #28
   d7c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7c72:	b007      	add	sp, #28
   d7c74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
   d7c78:	f7ff bf7c 	b.w	d7b74 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
   d7c7c:	2400      	movs	r4, #0
   d7c7e:	e9cd 6703 	strd	r6, r7, [sp, #12]
   d7c82:	e9cd 4400 	strd	r4, r4, [sp]
   d7c86:	9502      	str	r5, [sp, #8]
   d7c88:	f7ff fede 	bl	d7a48 <mbedtls_rsa_rsaes_oaep_encrypt>
                                           ilen, input, output );
   d7c8c:	e7ef      	b.n	d7c6e <mbedtls_rsa_pkcs1_encrypt+0x16>
   d7c8e:	bf00      	nop
   d7c90:	ffffbf00 	.word	0xffffbf00

000d7c94 <mbedtls_rsa_rsaes_oaep_decrypt>:
{
   d7c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d7c98:	2b01      	cmp	r3, #1
{
   d7c9a:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
   d7c9e:	4606      	mov	r6, r0
   d7ca0:	468b      	mov	fp, r1
   d7ca2:	469a      	mov	sl, r3
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d7ca4:	d109      	bne.n	d7cba <mbedtls_rsa_rsaes_oaep_decrypt+0x26>
   d7ca6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   d7caa:	2b01      	cmp	r3, #1
   d7cac:	d005      	beq.n	d7cba <mbedtls_rsa_rsaes_oaep_decrypt+0x26>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d7cae:	4e5d      	ldr	r6, [pc, #372]	; (d7e24 <mbedtls_rsa_rsaes_oaep_decrypt+0x190>)
}
   d7cb0:	4630      	mov	r0, r6
   d7cb2:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
   d7cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ilen = ctx->len;
   d7cba:	6874      	ldr	r4, [r6, #4]
   d7cbc:	9203      	str	r2, [sp, #12]
    if( ilen < 16 || ilen > sizeof( buf ) )
   d7cbe:	f1a4 0310 	sub.w	r3, r4, #16
   d7cc2:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
   d7cc6:	d8f2      	bhi.n	d7cae <mbedtls_rsa_rsaes_oaep_decrypt+0x1a>
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
   d7cc8:	f896 00a8 	ldrb.w	r0, [r6, #168]	; 0xa8
   d7ccc:	f005 f8ca 	bl	dce64 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   d7cd0:	4680      	mov	r8, r0
   d7cd2:	2800      	cmp	r0, #0
   d7cd4:	d0eb      	beq.n	d7cae <mbedtls_rsa_rsaes_oaep_decrypt+0x1a>
    hlen = mbedtls_md_get_size( md_info );
   d7cd6:	f005 f9ff 	bl	dd0d8 <mbedtls_md_get_size>
    if( 2 * hlen + 2 > ilen )
   d7cda:	1c47      	adds	r7, r0, #1
   d7cdc:	007b      	lsls	r3, r7, #1
   d7cde:	ebb4 0f47 	cmp.w	r4, r7, lsl #1
    hlen = mbedtls_md_get_size( md_info );
   d7ce2:	4605      	mov	r5, r0
    if( 2 * hlen + 2 > ilen )
   d7ce4:	9302      	str	r3, [sp, #8]
   d7ce6:	d3e2      	bcc.n	d7cae <mbedtls_rsa_rsaes_oaep_decrypt+0x1a>
          ? mbedtls_rsa_public(  ctx, input, buf )
   d7ce8:	9a03      	ldr	r2, [sp, #12]
   d7cea:	f10d 0960 	add.w	r9, sp, #96	; 0x60
   d7cee:	f1ba 0f00 	cmp.w	sl, #0
   d7cf2:	d11e      	bne.n	d7d32 <mbedtls_rsa_rsaes_oaep_decrypt+0x9e>
   d7cf4:	f8dd 1494 	ldr.w	r1, [sp, #1172]	; 0x494
   d7cf8:	464a      	mov	r2, r9
   d7cfa:	4630      	mov	r0, r6
   d7cfc:	f7ff fca8 	bl	d7650 <mbedtls_rsa_public>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
   d7d00:	4606      	mov	r6, r0
    if( ret != 0 )
   d7d02:	b960      	cbnz	r0, d7d1e <mbedtls_rsa_rsaes_oaep_decrypt+0x8a>
    mbedtls_md_init( &md_ctx );
   d7d04:	a805      	add	r0, sp, #20
   d7d06:	f005 f8b9 	bl	dce7c <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   d7d0a:	4632      	mov	r2, r6
   d7d0c:	4641      	mov	r1, r8
   d7d0e:	a805      	add	r0, sp, #20
   d7d10:	f005 f8d4 	bl	dcebc <mbedtls_md_setup>
   d7d14:	4606      	mov	r6, r0
   d7d16:	b1a8      	cbz	r0, d7d44 <mbedtls_rsa_rsaes_oaep_decrypt+0xb0>
        mbedtls_md_free( &md_ctx );
   d7d18:	a805      	add	r0, sp, #20
   d7d1a:	f005 f8b4 	bl	dce86 <mbedtls_md_free>
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
   d7d1e:	a818      	add	r0, sp, #96	; 0x60
   d7d20:	f44f 6180 	mov.w	r1, #1024	; 0x400
   d7d24:	f00a ff4e 	bl	e2bc4 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( lhash, sizeof( lhash ) );
   d7d28:	2140      	movs	r1, #64	; 0x40
   d7d2a:	a808      	add	r0, sp, #32
   d7d2c:	f00a ff4a 	bl	e2bc4 <mbedtls_platform_zeroize>
    return( ret );
   d7d30:	e7be      	b.n	d7cb0 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
   d7d32:	f8dd 3494 	ldr.w	r3, [sp, #1172]	; 0x494
   d7d36:	f8cd 9000 	str.w	r9, [sp]
   d7d3a:	4659      	mov	r1, fp
   d7d3c:	4630      	mov	r0, r6
   d7d3e:	f7ff fcc7 	bl	d76d0 <mbedtls_rsa_private>
   d7d42:	e7dd      	b.n	d7d00 <mbedtls_rsa_rsaes_oaep_decrypt+0x6c>
    if( ( ret = mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
   d7d44:	f104 3aff 	add.w	sl, r4, #4294967295
   d7d48:	ab05      	add	r3, sp, #20
   d7d4a:	444f      	add	r7, r9
   d7d4c:	ebaa 0a05 	sub.w	sl, sl, r5
   d7d50:	9300      	str	r3, [sp, #0]
   d7d52:	463a      	mov	r2, r7
   d7d54:	4653      	mov	r3, sl
   d7d56:	4629      	mov	r1, r5
   d7d58:	f10d 0061 	add.w	r0, sp, #97	; 0x61
   d7d5c:	f7ff f9f6 	bl	d714c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
                          &md_ctx ) ) != 0 ||
   d7d60:	4606      	mov	r6, r0
   d7d62:	2800      	cmp	r0, #0
   d7d64:	d1d8      	bne.n	d7d18 <mbedtls_rsa_rsaes_oaep_decrypt+0x84>
        ( ret = mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,
   d7d66:	ab05      	add	r3, sp, #20
   d7d68:	9300      	str	r3, [sp, #0]
   d7d6a:	f10d 0261 	add.w	r2, sp, #97	; 0x61
   d7d6e:	462b      	mov	r3, r5
   d7d70:	4651      	mov	r1, sl
   d7d72:	4638      	mov	r0, r7
   d7d74:	f7ff f9ea 	bl	d714c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
                          &md_ctx ) ) != 0 ||
   d7d78:	4606      	mov	r6, r0
   d7d7a:	2800      	cmp	r0, #0
   d7d7c:	d1cc      	bne.n	d7d18 <mbedtls_rsa_rsaes_oaep_decrypt+0x84>
    mbedtls_md_free( &md_ctx );
   d7d7e:	a805      	add	r0, sp, #20
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
   d7d80:	af08      	add	r7, sp, #32
    mbedtls_md_free( &md_ctx );
   d7d82:	f005 f880 	bl	dce86 <mbedtls_md_free>
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
   d7d86:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
   d7d8a:	f8dd 1488 	ldr.w	r1, [sp, #1160]	; 0x488
   d7d8e:	463b      	mov	r3, r7
   d7d90:	4640      	mov	r0, r8
   d7d92:	f005 f8d1 	bl	dcf38 <mbedtls_md>
   d7d96:	4606      	mov	r6, r0
   d7d98:	2800      	cmp	r0, #0
   d7d9a:	d1c0      	bne.n	d7d1e <mbedtls_rsa_rsaes_oaep_decrypt+0x8a>
    p += hlen; /* Skip seed */
   d7d9c:	f10d 0361 	add.w	r3, sp, #97	; 0x61
    bad |= *p++; /* First byte must be 0 */
   d7da0:	f899 2000 	ldrb.w	r2, [r9]
    p += hlen; /* Skip seed */
   d7da4:	1959      	adds	r1, r3, r5
    for( i = 0; i < hlen; i++ )
   d7da6:	4603      	mov	r3, r0
   d7da8:	42ab      	cmp	r3, r5
   d7daa:	fa4f fc82 	sxtb.w	ip, r2
   d7dae:	d313      	bcc.n	d7dd8 <mbedtls_rsa_rsaes_oaep_decrypt+0x144>
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
   d7db0:	9b02      	ldr	r3, [sp, #8]
   d7db2:	440d      	add	r5, r1
   d7db4:	1ae7      	subs	r7, r4, r3
    pad_done = 0;
   d7db6:	2200      	movs	r2, #0
   d7db8:	4628      	mov	r0, r5
   d7dba:	442f      	add	r7, r5
    pad_len = 0;
   d7dbc:	4611      	mov	r1, r2
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
   d7dbe:	4287      	cmp	r7, r0
   d7dc0:	d012      	beq.n	d7de8 <mbedtls_rsa_rsaes_oaep_decrypt+0x154>
        pad_done |= p[i];
   d7dc2:	f810 3b01 	ldrb.w	r3, [r0], #1
   d7dc6:	431a      	orrs	r2, r3
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
   d7dc8:	4253      	negs	r3, r2
   d7dca:	4313      	orrs	r3, r2
   d7dcc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   d7dd0:	f083 0301 	eor.w	r3, r3, #1
   d7dd4:	4419      	add	r1, r3
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
   d7dd6:	e7f2      	b.n	d7dbe <mbedtls_rsa_rsaes_oaep_decrypt+0x12a>
        bad |= lhash[i] ^ *p++;
   d7dd8:	5cfa      	ldrb	r2, [r7, r3]
   d7dda:	5cc8      	ldrb	r0, [r1, r3]
   d7ddc:	4042      	eors	r2, r0
   d7dde:	ea4c 0202 	orr.w	r2, ip, r2
   d7de2:	b2d2      	uxtb	r2, r2
    for( i = 0; i < hlen; i++ )
   d7de4:	3301      	adds	r3, #1
   d7de6:	e7df      	b.n	d7da8 <mbedtls_rsa_rsaes_oaep_decrypt+0x114>
    bad |= *p++ ^ 0x01;
   d7de8:	5c6a      	ldrb	r2, [r5, r1]
   d7dea:	f082 0201 	eor.w	r2, r2, #1
   d7dee:	ea4c 0202 	orr.w	r2, ip, r2
    if( bad != 0 )
   d7df2:	f012 0fff 	tst.w	r2, #255	; 0xff
   d7df6:	d110      	bne.n	d7e1a <mbedtls_rsa_rsaes_oaep_decrypt+0x186>
    bad |= *p++ ^ 0x01;
   d7df8:	3101      	adds	r1, #1
   d7dfa:	4429      	add	r1, r5
    if( ilen - ( p - buf ) > output_max_len )
   d7dfc:	aa18      	add	r2, sp, #96	; 0x60
   d7dfe:	f8dd 349c 	ldr.w	r3, [sp, #1180]	; 0x49c
   d7e02:	1a8a      	subs	r2, r1, r2
   d7e04:	1aa2      	subs	r2, r4, r2
   d7e06:	429a      	cmp	r2, r3
   d7e08:	d809      	bhi.n	d7e1e <mbedtls_rsa_rsaes_oaep_decrypt+0x18a>
    *olen = ilen - (p - buf);
   d7e0a:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    memcpy( output, p, *olen );
   d7e0e:	f8dd 0498 	ldr.w	r0, [sp, #1176]	; 0x498
    *olen = ilen - (p - buf);
   d7e12:	601a      	str	r2, [r3, #0]
    memcpy( output, p, *olen );
   d7e14:	f010 ffea 	bl	e8dec <memcpy>
    ret = 0;
   d7e18:	e781      	b.n	d7d1e <mbedtls_rsa_rsaes_oaep_decrypt+0x8a>
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
   d7e1a:	4e03      	ldr	r6, [pc, #12]	; (d7e28 <mbedtls_rsa_rsaes_oaep_decrypt+0x194>)
   d7e1c:	e77f      	b.n	d7d1e <mbedtls_rsa_rsaes_oaep_decrypt+0x8a>
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
   d7e1e:	4e03      	ldr	r6, [pc, #12]	; (d7e2c <mbedtls_rsa_rsaes_oaep_decrypt+0x198>)
   d7e20:	e77d      	b.n	d7d1e <mbedtls_rsa_rsaes_oaep_decrypt+0x8a>
   d7e22:	bf00      	nop
   d7e24:	ffffbf80 	.word	0xffffbf80
   d7e28:	ffffbf00 	.word	0xffffbf00
   d7e2c:	ffffbc00 	.word	0xffffbc00

000d7e30 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
{
   d7e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7e34:	461f      	mov	r7, r3
   d7e36:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d7e3a:	2f01      	cmp	r7, #1
{
   d7e3c:	f8dd 3434 	ldr.w	r3, [sp, #1076]	; 0x434
    ilen = ctx->len;
   d7e40:	6846      	ldr	r6, [r0, #4]
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d7e42:	d104      	bne.n	d7e4e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1e>
   d7e44:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
   d7e48:	2c00      	cmp	r4, #0
   d7e4a:	f040 80bb 	bne.w	d7fc4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x194>
    if( ilen < 16 || ilen > sizeof( buf ) )
   d7e4e:	f1a6 0410 	sub.w	r4, r6, #16
   d7e52:	f5b4 7f7c 	cmp.w	r4, #1008	; 0x3f0
   d7e56:	f200 80b5 	bhi.w	d7fc4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x194>
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
   d7e5a:	ad02      	add	r5, sp, #8
          ? mbedtls_rsa_public(  ctx, input, buf )
   d7e5c:	2f00      	cmp	r7, #0
   d7e5e:	d171      	bne.n	d7f44 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x114>
   d7e60:	462a      	mov	r2, r5
   d7e62:	4619      	mov	r1, r3
   d7e64:	f7ff fbf4 	bl	d7650 <mbedtls_rsa_public>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
   d7e68:	4604      	mov	r4, r0
    if( ret != 0 )
   d7e6a:	2800      	cmp	r0, #0
   d7e6c:	d160      	bne.n	d7f30 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x100>
    if( mode == MBEDTLS_RSA_PRIVATE )
   d7e6e:	2f01      	cmp	r7, #1
    bad |= buf[0];
   d7e70:	782b      	ldrb	r3, [r5, #0]
    if( mode == MBEDTLS_RSA_PRIVATE )
   d7e72:	786a      	ldrb	r2, [r5, #1]
   d7e74:	d16a      	bne.n	d7f4c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x11c>
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;
   d7e76:	f082 0202 	eor.w	r2, r2, #2
   d7e7a:	4313      	orrs	r3, r2
    size_t pad_count = 0;
   d7e7c:	4601      	mov	r1, r0
        for( i = 2; i < ilen; i++ )
   d7e7e:	2402      	movs	r4, #2
            pad_done  |= ((buf[i] | (unsigned char)-buf[i]) >> 7) ^ 1;
   d7e80:	5d2a      	ldrb	r2, [r5, r4]
   d7e82:	4257      	negs	r7, r2
   d7e84:	433a      	orrs	r2, r7
   d7e86:	f3c2 12c0 	ubfx	r2, r2, #7, #1
   d7e8a:	f082 0201 	eor.w	r2, r2, #1
   d7e8e:	4310      	orrs	r0, r2
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
   d7e90:	4242      	negs	r2, r0
   d7e92:	4302      	orrs	r2, r0
   d7e94:	f3c2 12c0 	ubfx	r2, r2, #7, #1
        for( i = 2; i < ilen; i++ )
   d7e98:	3401      	adds	r4, #1
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
   d7e9a:	f082 0201 	eor.w	r2, r2, #1
        for( i = 2; i < ilen; i++ )
   d7e9e:	42a6      	cmp	r6, r4
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
   d7ea0:	4411      	add	r1, r2
        for( i = 2; i < ilen; i++ )
   d7ea2:	d1ed      	bne.n	d7e80 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x50>
    plaintext_max_size = ( output_max_len > ilen - 11 ?
   d7ea4:	f8dd 443c 	ldr.w	r4, [sp, #1084]	; 0x43c
   d7ea8:	f1a6 020b 	sub.w	r2, r6, #11
   d7eac:	42a2      	cmp	r2, r4
   d7eae:	bf28      	it	cs
   d7eb0:	4622      	movcs	r2, r4
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
   d7eb2:	f1a1 0408 	sub.w	r4, r1, #8
   d7eb6:	ea43 73d4 	orr.w	r3, r3, r4, lsr #31
    bad |= size_greater_than( 8, pad_count );
   d7eba:	2800      	cmp	r0, #0
   d7ebc:	bf08      	it	eq
   d7ebe:	f043 0301 	orreq.w	r3, r3, #1
                             (unsigned) ( ilen - pad_count - 3 ) );
   d7ec2:	1ef0      	subs	r0, r6, #3
   d7ec4:	1a41      	subs	r1, r0, r1
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   d7ec6:	4258      	negs	r0, r3
   d7ec8:	ea40 0403 	orr.w	r4, r0, r3
    return( ( mask & if1 ) | (~mask & if0 ) );
   d7ecc:	ea81 0002 	eor.w	r0, r1, r2
   d7ed0:	ea00 70e4 	and.w	r0, r0, r4, asr #31
   d7ed4:	4041      	eors	r1, r0
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
   d7ed6:	eba2 0c01 	sub.w	ip, r2, r1
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   d7eda:	ea4f 77ec 	mov.w	r7, ip, asr #31
    return( ( mask & if1 ) | (~mask & if0 ) );
   d7ede:	f407 4e88 	and.w	lr, r7, #17408	; 0x4400
   d7ee2:	f48e 4082 	eor.w	r0, lr, #16640	; 0x4100
   d7ee6:	ea00 70e4 	and.w	r0, r0, r4, asr #31
   d7eea:	ea80 000e 	eor.w	r0, r0, lr
    ret = - (int) if_int( bad, - MBEDTLS_ERR_RSA_INVALID_PADDING,
   d7eee:	4244      	negs	r4, r0
    bad = all_or_nothing_int( bad | output_too_large );
   d7ef0:	ea43 70dc 	orr.w	r0, r3, ip, lsr #31
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   d7ef4:	4243      	negs	r3, r0
   d7ef6:	4303      	orrs	r3, r0
   d7ef8:	17db      	asrs	r3, r3, #31
    for( i = 11; i < ilen; i++ )
   d7efa:	f10d 0c13 	add.w	ip, sp, #19
   d7efe:	200b      	movs	r0, #11
        buf[i] &= ~bad;
   d7f00:	43db      	mvns	r3, r3
   d7f02:	f89c e000 	ldrb.w	lr, [ip]
    for( i = 11; i < ilen; i++ )
   d7f06:	3001      	adds	r0, #1
        buf[i] &= ~bad;
   d7f08:	ea0e 0e03 	and.w	lr, lr, r3
    for( i = 11; i < ilen; i++ )
   d7f0c:	4286      	cmp	r6, r0
        buf[i] &= ~bad;
   d7f0e:	f80c eb01 	strb.w	lr, [ip], #1
    for( i = 11; i < ilen; i++ )
   d7f12:	d1f6      	bne.n	d7f02 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xd2>
    return( ( mask & if1 ) | (~mask & if0 ) );
   d7f14:	2f00      	cmp	r7, #0
   d7f16:	bf14      	ite	ne
   d7f18:	4617      	movne	r7, r2
   d7f1a:	460f      	moveq	r7, r1
    mem_move_to_left( buf + ilen - plaintext_max_size,
   d7f1c:	1ab1      	subs	r1, r6, r2
   d7f1e:	4429      	add	r1, r5
    if( total == 0 )
   d7f20:	bb6a      	cbnz	r2, d7f7e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x14e>
    memcpy( output, buf + ilen - plaintext_max_size, plaintext_max_size );
   d7f22:	f8dd 0438 	ldr.w	r0, [sp, #1080]	; 0x438
   d7f26:	f010 ff61 	bl	e8dec <memcpy>
    *olen = plaintext_size;
   d7f2a:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
   d7f2e:	601f      	str	r7, [r3, #0]
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
   d7f30:	f44f 6180 	mov.w	r1, #1024	; 0x400
   d7f34:	4628      	mov	r0, r5
   d7f36:	f00a fe45 	bl	e2bc4 <mbedtls_platform_zeroize>
}
   d7f3a:	4620      	mov	r0, r4
   d7f3c:	f20d 4d0c 	addw	sp, sp, #1036	; 0x40c
   d7f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
   d7f44:	9500      	str	r5, [sp, #0]
   d7f46:	f7ff fbc3 	bl	d76d0 <mbedtls_rsa_private>
   d7f4a:	e78d      	b.n	d7e68 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x38>
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;
   d7f4c:	f082 0201 	eor.w	r2, r2, #1
   d7f50:	4313      	orrs	r3, r2
    size_t pad_count = 0;
   d7f52:	4601      	mov	r1, r0
        for( i = 2; i < ilen; i++ )
   d7f54:	2402      	movs	r4, #2
            pad_done |= if_int( buf[i], 0, 1 );
   d7f56:	5d2a      	ldrb	r2, [r5, r4]
   d7f58:	2a00      	cmp	r2, #0
   d7f5a:	bf08      	it	eq
   d7f5c:	f040 0001 	orreq.w	r0, r0, #1
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   d7f60:	4247      	negs	r7, r0
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
   d7f62:	43d2      	mvns	r2, r2
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   d7f64:	4307      	orrs	r7, r0
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
   d7f66:	b2d2      	uxtb	r2, r2
        for( i = 2; i < ilen; i++ )
   d7f68:	3401      	adds	r4, #1
    return( ( mask & if1 ) | (~mask & if0 ) );
   d7f6a:	ea22 72e7 	bic.w	r2, r2, r7, asr #31
            pad_count += if_int( pad_done, 0, 1 );
   d7f6e:	2f00      	cmp	r7, #0
   d7f70:	bfa8      	it	ge
   d7f72:	3101      	addge	r1, #1
        for( i = 2; i < ilen; i++ )
   d7f74:	42a6      	cmp	r6, r4
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
   d7f76:	ea43 0302 	orr.w	r3, r3, r2
        for( i = 2; i < ilen; i++ )
   d7f7a:	d1ec      	bne.n	d7f56 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x126>
   d7f7c:	e792      	b.n	d7ea4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x74>
        for( n = 0; n < total - 1; n++ )
   d7f7e:	f102 3eff 	add.w	lr, r2, #4294967295
   d7f82:	4278      	negs	r0, r7
   d7f84:	eba2 0807 	sub.w	r8, r2, r7
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
   d7f88:	eb01 0c0e 	add.w	ip, r1, lr
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
   d7f8c:	ea4f 79e0 	mov.w	r9, r0, asr #31
        for( n = 0; n < total - 1; n++ )
   d7f90:	2300      	movs	r3, #0
   d7f92:	459e      	cmp	lr, r3
   d7f94:	d90c      	bls.n	d7fb0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x180>
            unsigned char current = buf[n];
   d7f96:	5c5e      	ldrb	r6, [r3, r1]
            unsigned char next = buf[n+1];
   d7f98:	eb03 0a01 	add.w	sl, r3, r1
   d7f9c:	3301      	adds	r3, #1
   d7f9e:	f813 b001 	ldrb.w	fp, [r3, r1]
            buf[n] = if_int( no_op, current, next );
   d7fa2:	f1b9 0f00 	cmp.w	r9, #0
   d7fa6:	bf08      	it	eq
   d7fa8:	465e      	moveq	r6, fp
   d7faa:	f88a 6000 	strb.w	r6, [sl]
        for( n = 0; n < total - 1; n++ )
   d7fae:	e7f0      	b.n	d7f92 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x162>
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
   d7fb0:	f89c 3000 	ldrb.w	r3, [ip]
    return( ( mask & if1 ) | (~mask & if0 ) );
   d7fb4:	3001      	adds	r0, #1
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
   d7fb6:	ea03 0309 	and.w	r3, r3, r9
    for( i = 0; i < total; i++ )
   d7fba:	4580      	cmp	r8, r0
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
   d7fbc:	f88c 3000 	strb.w	r3, [ip]
    for( i = 0; i < total; i++ )
   d7fc0:	d1e4      	bne.n	d7f8c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x15c>
   d7fc2:	e7ae      	b.n	d7f22 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xf2>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d7fc4:	4c00      	ldr	r4, [pc, #0]	; (d7fc8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x198>)
   d7fc6:	e7b8      	b.n	d7f3a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x10a>
   d7fc8:	ffffbf80 	.word	0xffffbf80

000d7fcc <mbedtls_rsa_pkcs1_decrypt>:
{
   d7fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
   d7fce:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
{
   d7fd2:	b087      	sub	sp, #28
   d7fd4:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
   d7fd8:	e9dd 7c0e 	ldrd	r7, ip, [sp, #56]	; 0x38
    switch( ctx->padding )
   d7fdc:	b124      	cbz	r4, d7fe8 <mbedtls_rsa_pkcs1_decrypt+0x1c>
   d7fde:	2c01      	cmp	r4, #1
   d7fe0:	d007      	beq.n	d7ff2 <mbedtls_rsa_pkcs1_decrypt+0x26>
   d7fe2:	4809      	ldr	r0, [pc, #36]	; (d8008 <mbedtls_rsa_pkcs1_decrypt+0x3c>)
}
   d7fe4:	b007      	add	sp, #28
   d7fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7fe8:	b007      	add	sp, #28
   d7fea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
   d7fee:	f7ff bf1f 	b.w	d7e30 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
            return mbedtls_rsa_rsaes_oaep_decrypt( ctx, f_rng, p_rng, mode, NULL, 0,
   d7ff2:	2400      	movs	r4, #0
   d7ff4:	e9cd 7c04 	strd	r7, ip, [sp, #16]
   d7ff8:	e9cd 5602 	strd	r5, r6, [sp, #8]
   d7ffc:	e9cd 4400 	strd	r4, r4, [sp]
   d8000:	f7ff fe48 	bl	d7c94 <mbedtls_rsa_rsaes_oaep_decrypt>
                                           output_max_len );
   d8004:	e7ee      	b.n	d7fe4 <mbedtls_rsa_pkcs1_decrypt+0x18>
   d8006:	bf00      	nop
   d8008:	ffffbf00 	.word	0xffffbf00

000d800c <mbedtls_rsa_rsassa_pss_sign>:
{
   d800c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8010:	ed2d 8b02 	vpush	{d8}
   d8014:	b09d      	sub	sp, #116	; 0x74
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d8016:	2b01      	cmp	r3, #1
{
   d8018:	4606      	mov	r6, r0
   d801a:	ee08 2a90 	vmov	s17, r2
   d801e:	f89d 00a0 	ldrb.w	r0, [sp, #160]	; 0xa0
   d8022:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   d8024:	9103      	str	r1, [sp, #12]
   d8026:	9306      	str	r3, [sp, #24]
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d8028:	d10a      	bne.n	d8040 <mbedtls_rsa_rsassa_pss_sign+0x34>
   d802a:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
   d802e:	2b01      	cmp	r3, #1
   d8030:	d006      	beq.n	d8040 <mbedtls_rsa_rsassa_pss_sign+0x34>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d8032:	4c63      	ldr	r4, [pc, #396]	; (d81c0 <mbedtls_rsa_rsassa_pss_sign+0x1b4>)
}
   d8034:	4620      	mov	r0, r4
   d8036:	b01d      	add	sp, #116	; 0x74
   d8038:	ecbd 8b02 	vpop	{d8}
   d803c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( f_rng == NULL )
   d8040:	9b03      	ldr	r3, [sp, #12]
   d8042:	2b00      	cmp	r3, #0
   d8044:	d0f5      	beq.n	d8032 <mbedtls_rsa_rsassa_pss_sign+0x26>
    olen = ctx->len;
   d8046:	f8d6 9004 	ldr.w	r9, [r6, #4]
    if( md_alg != MBEDTLS_MD_NONE )
   d804a:	b130      	cbz	r0, d805a <mbedtls_rsa_rsassa_pss_sign+0x4e>
        md_info = mbedtls_md_info_from_type( md_alg );
   d804c:	f004 ff0a 	bl	dce64 <mbedtls_md_info_from_type>
        if( md_info == NULL )
   d8050:	2800      	cmp	r0, #0
   d8052:	d0ee      	beq.n	d8032 <mbedtls_rsa_rsassa_pss_sign+0x26>
        hashlen = mbedtls_md_get_size( md_info );
   d8054:	f005 f840 	bl	dd0d8 <mbedtls_md_get_size>
   d8058:	9029      	str	r0, [sp, #164]	; 0xa4
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
   d805a:	f896 00a8 	ldrb.w	r0, [r6, #168]	; 0xa8
   d805e:	f004 ff01 	bl	dce64 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   d8062:	9005      	str	r0, [sp, #20]
   d8064:	2800      	cmp	r0, #0
   d8066:	d0e4      	beq.n	d8032 <mbedtls_rsa_rsassa_pss_sign+0x26>
    hlen = mbedtls_md_get_size( md_info );
   d8068:	f005 f836 	bl	dd0d8 <mbedtls_md_get_size>
   d806c:	b202      	sxth	r2, r0
    if( olen < hlen + min_slen + 2 )
   d806e:	ebb9 0f42 	cmp.w	r9, r2, lsl #1
    hlen = mbedtls_md_get_size( md_info );
   d8072:	4607      	mov	r7, r0
    if( olen < hlen + min_slen + 2 )
   d8074:	ea4f 0342 	mov.w	r3, r2, lsl #1
   d8078:	d3db      	bcc.n	d8032 <mbedtls_rsa_rsassa_pss_sign+0x26>
    else if( olen >= hlen + hlen + 2 )
   d807a:	3302      	adds	r3, #2
   d807c:	454b      	cmp	r3, r9
        slen = olen - hlen - 2;
   d807e:	bf86      	itte	hi
   d8080:	f1a9 0802 	subhi.w	r8, r9, #2
   d8084:	eba8 0800 	subhi.w	r8, r8, r0
        slen = hlen;
   d8088:	4680      	movls	r8, r0
    memset( sig, 0, olen );
   d808a:	464a      	mov	r2, r9
   d808c:	2100      	movs	r1, #0
   d808e:	4628      	mov	r0, r5
   d8090:	f010 fed4 	bl	e8e3c <memset>
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
   d8094:	ee18 0a90 	vmov	r0, s17
   d8098:	9b03      	ldr	r3, [sp, #12]
   d809a:	4642      	mov	r2, r8
   d809c:	a90c      	add	r1, sp, #48	; 0x30
   d809e:	4798      	blx	r3
   d80a0:	4604      	mov	r4, r0
   d80a2:	b110      	cbz	r0, d80aa <mbedtls_rsa_rsassa_pss_sign+0x9e>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
   d80a4:	f5a0 4489 	sub.w	r4, r0, #17536	; 0x4480
   d80a8:	e7c4      	b.n	d8034 <mbedtls_rsa_rsassa_pss_sign+0x28>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   d80aa:	f106 0308 	add.w	r3, r6, #8
   d80ae:	4618      	mov	r0, r3
   d80b0:	ee08 3a10 	vmov	s16, r3
   d80b4:	f008 fe74 	bl	e0da0 <mbedtls_mpi_bitlen>
    p += olen - hlen - slen - 2;
   d80b8:	eba9 0307 	sub.w	r3, r9, r7
   d80bc:	9304      	str	r3, [sp, #16]
   d80be:	3b02      	subs	r3, #2
   d80c0:	eba3 0308 	sub.w	r3, r3, r8
   d80c4:	18ea      	adds	r2, r5, r3
    *p++ = 0x01;
   d80c6:	f102 0a01 	add.w	sl, r2, #1
   d80ca:	2201      	movs	r2, #1
   d80cc:	54ea      	strb	r2, [r5, r3]
    memcpy( p, salt, slen );
   d80ce:	a90c      	add	r1, sp, #48	; 0x30
   d80d0:	4642      	mov	r2, r8
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   d80d2:	9007      	str	r0, [sp, #28]
    mbedtls_md_init( &md_ctx );
   d80d4:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    memcpy( p, salt, slen );
   d80d8:	4650      	mov	r0, sl
   d80da:	f010 fe87 	bl	e8dec <memcpy>
    mbedtls_md_init( &md_ctx );
   d80de:	4658      	mov	r0, fp
   d80e0:	f004 fecc 	bl	dce7c <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   d80e4:	4622      	mov	r2, r4
   d80e6:	9905      	ldr	r1, [sp, #20]
   d80e8:	4658      	mov	r0, fp
   d80ea:	f004 fee7 	bl	dcebc <mbedtls_md_setup>
   d80ee:	4604      	mov	r4, r0
   d80f0:	2800      	cmp	r0, #0
   d80f2:	d14c      	bne.n	d818e <mbedtls_rsa_rsassa_pss_sign+0x182>
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
   d80f4:	4658      	mov	r0, fp
   d80f6:	f004 ff01 	bl	dcefc <mbedtls_md_starts>
   d80fa:	4604      	mov	r4, r0
   d80fc:	2800      	cmp	r0, #0
   d80fe:	d146      	bne.n	d818e <mbedtls_rsa_rsassa_pss_sign+0x182>
    p += slen;
   d8100:	44c2      	add	sl, r8
    if( ( ret = mbedtls_md_update( &md_ctx, p, 8 ) ) != 0 )
   d8102:	2208      	movs	r2, #8
   d8104:	4651      	mov	r1, sl
   d8106:	4658      	mov	r0, fp
   d8108:	f004 ff02 	bl	dcf10 <mbedtls_md_update>
   d810c:	4604      	mov	r4, r0
   d810e:	2800      	cmp	r0, #0
   d8110:	d13d      	bne.n	d818e <mbedtls_rsa_rsassa_pss_sign+0x182>
    if( ( ret = mbedtls_md_update( &md_ctx, hash, hashlen ) ) != 0 )
   d8112:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   d8116:	4658      	mov	r0, fp
   d8118:	f004 fefa 	bl	dcf10 <mbedtls_md_update>
   d811c:	4604      	mov	r4, r0
   d811e:	bbb0      	cbnz	r0, d818e <mbedtls_rsa_rsassa_pss_sign+0x182>
    if( ( ret = mbedtls_md_update( &md_ctx, salt, slen ) ) != 0 )
   d8120:	4642      	mov	r2, r8
   d8122:	a90c      	add	r1, sp, #48	; 0x30
   d8124:	4658      	mov	r0, fp
   d8126:	f004 fef3 	bl	dcf10 <mbedtls_md_update>
   d812a:	4604      	mov	r4, r0
   d812c:	bb78      	cbnz	r0, d818e <mbedtls_rsa_rsassa_pss_sign+0x182>
    if( ( ret = mbedtls_md_finish( &md_ctx, p ) ) != 0 )
   d812e:	4651      	mov	r1, sl
   d8130:	4658      	mov	r0, fp
   d8132:	f004 fef7 	bl	dcf24 <mbedtls_md_finish>
   d8136:	4604      	mov	r4, r0
   d8138:	bb48      	cbnz	r0, d818e <mbedtls_rsa_rsassa_pss_sign+0x182>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   d813a:	9b07      	ldr	r3, [sp, #28]
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
   d813c:	f8cd b000 	str.w	fp, [sp]
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   d8140:	1e58      	subs	r0, r3, #1
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
   d8142:	9b04      	ldr	r3, [sp, #16]
    if( msb % 8 == 0 )
   d8144:	f010 0f07 	tst.w	r0, #7
   d8148:	bf0c      	ite	eq
   d814a:	2001      	moveq	r0, #1
   d814c:	2000      	movne	r0, #0
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
   d814e:	1e59      	subs	r1, r3, #1
   d8150:	1a09      	subs	r1, r1, r0
   d8152:	463b      	mov	r3, r7
   d8154:	4652      	mov	r2, sl
   d8156:	4428      	add	r0, r5
   d8158:	f7fe fff8 	bl	d714c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
   d815c:	4604      	mov	r4, r0
   d815e:	b9b0      	cbnz	r0, d818e <mbedtls_rsa_rsassa_pss_sign+0x182>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   d8160:	ee18 0a10 	vmov	r0, s16
   d8164:	f008 fe1c 	bl	e0da0 <mbedtls_mpi_bitlen>
    sig[0] &= 0xFF >> ( olen * 8 - msb );
   d8168:	ebc0 00c9 	rsb	r0, r0, r9, lsl #3
   d816c:	782b      	ldrb	r3, [r5, #0]
   d816e:	3001      	adds	r0, #1
   d8170:	f04f 09ff 	mov.w	r9, #255	; 0xff
   d8174:	fa49 f900 	asr.w	r9, r9, r0
   d8178:	ea09 0903 	and.w	r9, r9, r3
    *p++ = 0xBC;
   d817c:	23bc      	movs	r3, #188	; 0xbc
    sig[0] &= 0xFF >> ( olen * 8 - msb );
   d817e:	f885 9000 	strb.w	r9, [r5]
    mbedtls_platform_zeroize( salt, sizeof( salt ) );
   d8182:	2140      	movs	r1, #64	; 0x40
    *p++ = 0xBC;
   d8184:	f80a 3007 	strb.w	r3, [sl, r7]
    mbedtls_platform_zeroize( salt, sizeof( salt ) );
   d8188:	a80c      	add	r0, sp, #48	; 0x30
   d818a:	f00a fd1b 	bl	e2bc4 <mbedtls_platform_zeroize>
    mbedtls_md_free( &md_ctx );
   d818e:	a809      	add	r0, sp, #36	; 0x24
   d8190:	f004 fe79 	bl	dce86 <mbedtls_md_free>
    if( ret != 0 )
   d8194:	2c00      	cmp	r4, #0
   d8196:	f47f af4d 	bne.w	d8034 <mbedtls_rsa_rsassa_pss_sign+0x28>
            ? mbedtls_rsa_public(  ctx, sig, sig )
   d819a:	9b06      	ldr	r3, [sp, #24]
   d819c:	b933      	cbnz	r3, d81ac <mbedtls_rsa_rsassa_pss_sign+0x1a0>
   d819e:	462a      	mov	r2, r5
   d81a0:	4629      	mov	r1, r5
   d81a2:	4630      	mov	r0, r6
   d81a4:	f7ff fa54 	bl	d7650 <mbedtls_rsa_public>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
   d81a8:	4604      	mov	r4, r0
   d81aa:	e743      	b.n	d8034 <mbedtls_rsa_rsassa_pss_sign+0x28>
   d81ac:	ee18 2a90 	vmov	r2, s17
   d81b0:	9903      	ldr	r1, [sp, #12]
   d81b2:	9500      	str	r5, [sp, #0]
   d81b4:	462b      	mov	r3, r5
   d81b6:	4630      	mov	r0, r6
   d81b8:	f7ff fa8a 	bl	d76d0 <mbedtls_rsa_private>
   d81bc:	e7f4      	b.n	d81a8 <mbedtls_rsa_rsassa_pss_sign+0x19c>
   d81be:	bf00      	nop
   d81c0:	ffffbf80 	.word	0xffffbf80

000d81c4 <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
   d81c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d81c8:	2b01      	cmp	r3, #1
{
   d81ca:	4605      	mov	r5, r0
   d81cc:	4689      	mov	r9, r1
   d81ce:	4692      	mov	sl, r2
   d81d0:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   d81d4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   d81d8:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
   d81dc:	461e      	mov	r6, r3
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d81de:	d103      	bne.n	d81e8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x24>
   d81e0:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   d81e4:	2b00      	cmp	r3, #0
   d81e6:	d150      	bne.n	d828a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc6>

    /*
     * Prepare PKCS1-v1.5 encoding (padding and hash identifier)
     */

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,
   d81e8:	f8cd 8000 	str.w	r8, [sp]
   d81ec:	686b      	ldr	r3, [r5, #4]
   d81ee:	f7fe fffd 	bl	d71ec <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
   d81f2:	4604      	mov	r4, r0
   d81f4:	2800      	cmp	r0, #0
   d81f6:	d142      	bne.n	d827e <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xba>

    /*
     * Call respective RSA primitive
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
   d81f8:	b93e      	cbnz	r6, d820a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x46>
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
   d81fa:	4642      	mov	r2, r8
   d81fc:	4641      	mov	r1, r8
   d81fe:	4628      	mov	r0, r5
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
   d8200:	b004      	add	sp, #16
   d8202:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return( mbedtls_rsa_public( ctx, sig, sig ) );
   d8206:	f7ff ba23 	b.w	d7650 <mbedtls_rsa_public>
    sig_try = (unsigned char *)mbedtls_calloc( 1, ctx->len );
   d820a:	6869      	ldr	r1, [r5, #4]
   d820c:	9103      	str	r1, [sp, #12]
   d820e:	2001      	movs	r0, #1
   d8210:	f010 fd74 	bl	e8cfc <calloc>
    if( sig_try == NULL )
   d8214:	4606      	mov	r6, r0
   d8216:	b140      	cbz	r0, d822a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x66>
    verif = (unsigned char *)mbedtls_calloc( 1, ctx->len );
   d8218:	9903      	ldr	r1, [sp, #12]
   d821a:	2001      	movs	r0, #1
   d821c:	f010 fd6e 	bl	e8cfc <calloc>
    if( verif == NULL )
   d8220:	4607      	mov	r7, r0
   d8222:	b928      	cbnz	r0, d8230 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x6c>
        mbedtls_free( sig_try );
   d8224:	4630      	mov	r0, r6
   d8226:	f00d fbbf 	bl	e59a8 <free>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
   d822a:	f06f 040f 	mvn.w	r4, #15
   d822e:	e026      	b.n	d827e <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xba>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
   d8230:	9600      	str	r6, [sp, #0]
   d8232:	4643      	mov	r3, r8
   d8234:	4652      	mov	r2, sl
   d8236:	4649      	mov	r1, r9
   d8238:	4628      	mov	r0, r5
   d823a:	f7ff fa49 	bl	d76d0 <mbedtls_rsa_private>
   d823e:	4604      	mov	r4, r0
   d8240:	b9b8      	cbnz	r0, d8272 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xae>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
   d8242:	463a      	mov	r2, r7
   d8244:	4631      	mov	r1, r6
   d8246:	4628      	mov	r0, r5
   d8248:	f7ff fa02 	bl	d7650 <mbedtls_rsa_public>
   d824c:	4604      	mov	r4, r0
   d824e:	b980      	cbnz	r0, d8272 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xae>
    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
   d8250:	686a      	ldr	r2, [r5, #4]
    unsigned char diff = 0;
   d8252:	4601      	mov	r1, r0
    for( i = 0; i < n; i++ )
   d8254:	4603      	mov	r3, r0
   d8256:	429a      	cmp	r2, r3
   d8258:	d006      	beq.n	d8268 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa4>
        diff |= A[i] ^ B[i];
   d825a:	5cf8      	ldrb	r0, [r7, r3]
   d825c:	f818 5003 	ldrb.w	r5, [r8, r3]
   d8260:	4068      	eors	r0, r5
   d8262:	4301      	orrs	r1, r0
    for( i = 0; i < n; i++ )
   d8264:	3301      	adds	r3, #1
   d8266:	e7f6      	b.n	d8256 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x92>
    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
   d8268:	b969      	cbnz	r1, d8286 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc2>
    memcpy( sig, sig_try, ctx->len );
   d826a:	4631      	mov	r1, r6
   d826c:	4640      	mov	r0, r8
   d826e:	f010 fdbd 	bl	e8dec <memcpy>
    mbedtls_free( sig_try );
   d8272:	4630      	mov	r0, r6
   d8274:	f00d fb98 	bl	e59a8 <free>
    mbedtls_free( verif );
   d8278:	4638      	mov	r0, r7
   d827a:	f00d fb95 	bl	e59a8 <free>
}
   d827e:	4620      	mov	r0, r4
   d8280:	b004      	add	sp, #16
   d8282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
   d8286:	4c02      	ldr	r4, [pc, #8]	; (d8290 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xcc>)
   d8288:	e7f3      	b.n	d8272 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xae>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d828a:	4c02      	ldr	r4, [pc, #8]	; (d8294 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xd0>)
   d828c:	e7f7      	b.n	d827e <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xba>
   d828e:	bf00      	nop
   d8290:	ffffbd00 	.word	0xffffbd00
   d8294:	ffffbf80 	.word	0xffffbf80

000d8298 <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
   d8298:	b430      	push	{r4, r5}
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    switch( ctx->padding )
   d829a:	f8d0 50a4 	ldr.w	r5, [r0, #164]	; 0xa4
{
   d829e:	f89d 4008 	ldrb.w	r4, [sp, #8]
    switch( ctx->padding )
   d82a2:	b125      	cbz	r5, d82ae <mbedtls_rsa_pkcs1_sign+0x16>
   d82a4:	2d01      	cmp	r5, #1
   d82a6:	d006      	beq.n	d82b6 <mbedtls_rsa_pkcs1_sign+0x1e>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   d82a8:	4805      	ldr	r0, [pc, #20]	; (d82c0 <mbedtls_rsa_pkcs1_sign+0x28>)
   d82aa:	bc30      	pop	{r4, r5}
   d82ac:	4770      	bx	lr
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
   d82ae:	9402      	str	r4, [sp, #8]
}
   d82b0:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
   d82b2:	f7ff bf87 	b.w	d81c4 <mbedtls_rsa_rsassa_pkcs1_v15_sign>
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
   d82b6:	9402      	str	r4, [sp, #8]
}
   d82b8:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
   d82ba:	f7ff bea7 	b.w	d800c <mbedtls_rsa_rsassa_pss_sign>
   d82be:	bf00      	nop
   d82c0:	ffffbf00 	.word	0xffffbf00

000d82c4 <mbedtls_rsa_rsassa_pss_verify_ext>:
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
   d82c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d82c8:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d82cc:	2b01      	cmp	r3, #1
{
   d82ce:	4604      	mov	r4, r0
   d82d0:	f89d 5490 	ldrb.w	r5, [sp, #1168]	; 0x490
   d82d4:	f8dd 04a4 	ldr.w	r0, [sp, #1188]	; 0x4a4
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   d82d8:	d109      	bne.n	d82ee <mbedtls_rsa_rsassa_pss_verify_ext+0x2a>
   d82da:	f8d4 60a4 	ldr.w	r6, [r4, #164]	; 0xa4
   d82de:	2e01      	cmp	r6, #1
   d82e0:	d005      	beq.n	d82ee <mbedtls_rsa_rsassa_pss_verify_ext+0x2a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d82e2:	4b60      	ldr	r3, [pc, #384]	; (d8464 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a0>)

exit:
    mbedtls_md_free( &md_ctx );

    return( ret );
}
   d82e4:	4618      	mov	r0, r3
   d82e6:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   d82ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    siglen = ctx->len;
   d82ee:	f8d4 8004 	ldr.w	r8, [r4, #4]
    if( siglen < 16 || siglen > sizeof( buf ) )
   d82f2:	f1a8 0610 	sub.w	r6, r8, #16
   d82f6:	f5b6 7f7c 	cmp.w	r6, #1008	; 0x3f0
   d82fa:	d8f2      	bhi.n	d82e2 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
   d82fc:	ae1a      	add	r6, sp, #104	; 0x68
          ? mbedtls_rsa_public(  ctx, sig, buf )
   d82fe:	2b00      	cmp	r3, #0
   d8300:	f040 80a6 	bne.w	d8450 <mbedtls_rsa_rsassa_pss_verify_ext+0x18c>
   d8304:	4601      	mov	r1, r0
   d8306:	4632      	mov	r2, r6
   d8308:	4620      	mov	r0, r4
   d830a:	f7ff f9a1 	bl	d7650 <mbedtls_rsa_public>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
   d830e:	4603      	mov	r3, r0
    if( ret != 0 )
   d8310:	2800      	cmp	r0, #0
   d8312:	d1e7      	bne.n	d82e4 <mbedtls_rsa_rsassa_pss_verify_ext+0x20>
    if( buf[siglen - 1] != 0xBC )
   d8314:	f108 3aff 	add.w	sl, r8, #4294967295
   d8318:	f816 300a 	ldrb.w	r3, [r6, sl]
   d831c:	2bbc      	cmp	r3, #188	; 0xbc
   d831e:	f040 809f 	bne.w	d8460 <mbedtls_rsa_rsassa_pss_verify_ext+0x19c>
    if( md_alg != MBEDTLS_MD_NONE )
   d8322:	b145      	cbz	r5, d8336 <mbedtls_rsa_rsassa_pss_verify_ext+0x72>
        md_info = mbedtls_md_info_from_type( md_alg );
   d8324:	4628      	mov	r0, r5
   d8326:	f004 fd9d 	bl	dce64 <mbedtls_md_info_from_type>
        if( md_info == NULL )
   d832a:	2800      	cmp	r0, #0
   d832c:	d0d9      	beq.n	d82e2 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
        hashlen = mbedtls_md_get_size( md_info );
   d832e:	f004 fed3 	bl	dd0d8 <mbedtls_md_get_size>
   d8332:	f8cd 0494 	str.w	r0, [sp, #1172]	; 0x494
    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
   d8336:	f89d 049c 	ldrb.w	r0, [sp, #1180]	; 0x49c
   d833a:	f004 fd93 	bl	dce64 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   d833e:	4683      	mov	fp, r0
   d8340:	2800      	cmp	r0, #0
   d8342:	d0ce      	beq.n	d82e2 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
    hlen = mbedtls_md_get_size( md_info );
   d8344:	f004 fec8 	bl	dd0d8 <mbedtls_md_get_size>
    memset( zeros, 0, 8 );
   d8348:	2300      	movs	r3, #0
    hlen = mbedtls_md_get_size( md_info );
   d834a:	4681      	mov	r9, r0
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   d834c:	f104 0008 	add.w	r0, r4, #8
    memset( zeros, 0, 8 );
   d8350:	e9cd 3305 	strd	r3, r3, [sp, #20]
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   d8354:	f008 fd24 	bl	e0da0 <mbedtls_mpi_bitlen>
    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
   d8358:	7832      	ldrb	r2, [r6, #0]
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   d835a:	1e47      	subs	r7, r0, #1
    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
   d835c:	f1c8 0301 	rsb	r3, r8, #1
   d8360:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   d8364:	fa52 f303 	asrs.w	r3, r2, r3
   d8368:	d1bb      	bne.n	d82e2 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
    if( msb % 8 == 0 )
   d836a:	0779      	lsls	r1, r7, #29
        siglen -= 1;
   d836c:	bf08      	it	eq
   d836e:	46d0      	moveq	r8, sl
    if( siglen < hlen + 2 )
   d8370:	f109 0302 	add.w	r3, r9, #2
        p++;
   d8374:	bf0c      	ite	eq
   d8376:	f10d 0569 	addeq.w	r5, sp, #105	; 0x69
    p = buf;
   d837a:	4635      	movne	r5, r6
    if( siglen < hlen + 2 )
   d837c:	4543      	cmp	r3, r8
   d837e:	d8b0      	bhi.n	d82e2 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
    mbedtls_md_init( &md_ctx );
   d8380:	ac07      	add	r4, sp, #28
   d8382:	4620      	mov	r0, r4
   d8384:	f004 fd7a 	bl	dce7c <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   d8388:	2200      	movs	r2, #0
   d838a:	4659      	mov	r1, fp
   d838c:	4620      	mov	r0, r4
   d838e:	f004 fd95 	bl	dcebc <mbedtls_md_setup>
   d8392:	4603      	mov	r3, r0
   d8394:	2800      	cmp	r0, #0
   d8396:	d155      	bne.n	d8444 <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
    hash_start = p + siglen - hlen - 1;
   d8398:	ea6f 0109 	mvn.w	r1, r9
   d839c:	4441      	add	r1, r8
   d839e:	eb05 0a01 	add.w	sl, r5, r1
    ret = mgf_mask( p, siglen - hlen - 1, hash_start, hlen, &md_ctx );
   d83a2:	464b      	mov	r3, r9
   d83a4:	9400      	str	r4, [sp, #0]
   d83a6:	4652      	mov	r2, sl
   d83a8:	4628      	mov	r0, r5
   d83aa:	f7fe fecf 	bl	d714c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
    if( ret != 0 )
   d83ae:	4603      	mov	r3, r0
   d83b0:	2800      	cmp	r0, #0
   d83b2:	d147      	bne.n	d8444 <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
    buf[0] &= 0xFF >> ( siglen * 8 - msb );
   d83b4:	ebc7 08c8 	rsb	r8, r7, r8, lsl #3
   d83b8:	27ff      	movs	r7, #255	; 0xff
   d83ba:	fa47 f708 	asr.w	r7, r7, r8
   d83be:	f896 8000 	ldrb.w	r8, [r6]
   d83c2:	ea07 0708 	and.w	r7, r7, r8
   d83c6:	7037      	strb	r7, [r6, #0]
    while( p < hash_start - 1 && *p == 0 )
   d83c8:	f10a 32ff 	add.w	r2, sl, #4294967295
   d83cc:	f815 3b01 	ldrb.w	r3, [r5], #1
   d83d0:	1e69      	subs	r1, r5, #1
   d83d2:	428a      	cmp	r2, r1
   d83d4:	d901      	bls.n	d83da <mbedtls_rsa_rsassa_pss_verify_ext+0x116>
   d83d6:	2b00      	cmp	r3, #0
   d83d8:	d0f8      	beq.n	d83cc <mbedtls_rsa_rsassa_pss_verify_ext+0x108>
    if( *p++ != 0x01 )
   d83da:	2b01      	cmp	r3, #1
   d83dc:	d13e      	bne.n	d845c <mbedtls_rsa_rsassa_pss_verify_ext+0x198>
    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
   d83de:	f8dd 34a0 	ldr.w	r3, [sp, #1184]	; 0x4a0
   d83e2:	1c5a      	adds	r2, r3, #1
    observed_salt_len = hash_start - p;
   d83e4:	ebaa 0605 	sub.w	r6, sl, r5
    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
   d83e8:	d001      	beq.n	d83ee <mbedtls_rsa_rsassa_pss_verify_ext+0x12a>
   d83ea:	429e      	cmp	r6, r3
   d83ec:	d136      	bne.n	d845c <mbedtls_rsa_rsassa_pss_verify_ext+0x198>
    ret = mbedtls_md_starts( &md_ctx );
   d83ee:	4620      	mov	r0, r4
   d83f0:	f004 fd84 	bl	dcefc <mbedtls_md_starts>
    if ( ret != 0 )
   d83f4:	4603      	mov	r3, r0
   d83f6:	bb28      	cbnz	r0, d8444 <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
    ret = mbedtls_md_update( &md_ctx, zeros, 8 );
   d83f8:	2208      	movs	r2, #8
   d83fa:	a905      	add	r1, sp, #20
   d83fc:	4620      	mov	r0, r4
   d83fe:	f004 fd87 	bl	dcf10 <mbedtls_md_update>
    if ( ret != 0 )
   d8402:	4603      	mov	r3, r0
   d8404:	b9f0      	cbnz	r0, d8444 <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
    ret = mbedtls_md_update( &md_ctx, hash, hashlen );
   d8406:	f8dd 2494 	ldr.w	r2, [sp, #1172]	; 0x494
   d840a:	f8dd 1498 	ldr.w	r1, [sp, #1176]	; 0x498
   d840e:	4620      	mov	r0, r4
   d8410:	f004 fd7e 	bl	dcf10 <mbedtls_md_update>
    if ( ret != 0 )
   d8414:	4603      	mov	r3, r0
   d8416:	b9a8      	cbnz	r0, d8444 <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
    ret = mbedtls_md_update( &md_ctx, p, observed_salt_len );
   d8418:	4632      	mov	r2, r6
   d841a:	4629      	mov	r1, r5
   d841c:	4620      	mov	r0, r4
   d841e:	f004 fd77 	bl	dcf10 <mbedtls_md_update>
    if ( ret != 0 )
   d8422:	4603      	mov	r3, r0
   d8424:	b970      	cbnz	r0, d8444 <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
    ret = mbedtls_md_finish( &md_ctx, result );
   d8426:	a90a      	add	r1, sp, #40	; 0x28
   d8428:	4620      	mov	r0, r4
   d842a:	f004 fd7b 	bl	dcf24 <mbedtls_md_finish>
    if ( ret != 0 )
   d842e:	4603      	mov	r3, r0
   d8430:	b940      	cbnz	r0, d8444 <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
    if( memcmp( hash_start, result, hlen ) != 0 )
   d8432:	464a      	mov	r2, r9
   d8434:	a90a      	add	r1, sp, #40	; 0x28
   d8436:	4650      	mov	r0, sl
   d8438:	f010 fcca 	bl	e8dd0 <memcmp>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
   d843c:	4a0a      	ldr	r2, [pc, #40]	; (d8468 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a4>)
   d843e:	1e03      	subs	r3, r0, #0
   d8440:	bf18      	it	ne
   d8442:	4613      	movne	r3, r2
    mbedtls_md_free( &md_ctx );
   d8444:	4620      	mov	r0, r4
   d8446:	9303      	str	r3, [sp, #12]
   d8448:	f004 fd1d 	bl	dce86 <mbedtls_md_free>
    return( ret );
   d844c:	9b03      	ldr	r3, [sp, #12]
   d844e:	e749      	b.n	d82e4 <mbedtls_rsa_rsassa_pss_verify_ext+0x20>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
   d8450:	4603      	mov	r3, r0
   d8452:	9600      	str	r6, [sp, #0]
   d8454:	4620      	mov	r0, r4
   d8456:	f7ff f93b 	bl	d76d0 <mbedtls_rsa_private>
   d845a:	e758      	b.n	d830e <mbedtls_rsa_rsassa_pss_verify_ext+0x4a>
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
   d845c:	4b03      	ldr	r3, [pc, #12]	; (d846c <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>)
   d845e:	e7f1      	b.n	d8444 <mbedtls_rsa_rsassa_pss_verify_ext+0x180>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   d8460:	4b02      	ldr	r3, [pc, #8]	; (d846c <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>)
   d8462:	e73f      	b.n	d82e4 <mbedtls_rsa_rsassa_pss_verify_ext+0x20>
   d8464:	ffffbf80 	.word	0xffffbf80
   d8468:	ffffbc80 	.word	0xffffbc80
   d846c:	ffffbf00 	.word	0xffffbf00

000d8470 <mbedtls_rsa_rsassa_pss_verify>:
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
   d8470:	b570      	push	{r4, r5, r6, lr}
   d8472:	b086      	sub	sp, #24
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
   d8474:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
{
   d8478:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
                             ? (mbedtls_md_type_t) ctx->hash_id
   d847c:	b17c      	cbz	r4, d849e <mbedtls_rsa_rsassa_pss_verify+0x2e>
   d847e:	b2e4      	uxtb	r4, r4
                             : md_alg;

    return( mbedtls_rsa_rsassa_pss_verify_ext( ctx, f_rng, p_rng, mode,
   d8480:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   d8482:	9605      	str	r6, [sp, #20]
   d8484:	f04f 36ff 	mov.w	r6, #4294967295
   d8488:	e9cd 4603 	strd	r4, r6, [sp, #12]
   d848c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d848e:	9402      	str	r4, [sp, #8]
   d8490:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   d8492:	e9cd 5400 	strd	r5, r4, [sp]
   d8496:	f7ff ff15 	bl	d82c4 <mbedtls_rsa_rsassa_pss_verify_ext>
                                       md_alg, hashlen, hash,
                                       mgf1_hash_id, MBEDTLS_RSA_SALT_LEN_ANY,
                                       sig ) );

}
   d849a:	b006      	add	sp, #24
   d849c:	bd70      	pop	{r4, r5, r6, pc}
                             ? (mbedtls_md_type_t) ctx->hash_id
   d849e:	462c      	mov	r4, r5
   d84a0:	e7ee      	b.n	d8480 <mbedtls_rsa_rsassa_pss_verify+0x10>
	...

000d84a4 <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
   d84a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
                        hashlen == 0 ) ||
                      hash != NULL );

    sig_len = ctx->len;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d84a8:	2b01      	cmp	r3, #1
    sig_len = ctx->len;
   d84aa:	6846      	ldr	r6, [r0, #4]
{
   d84ac:	4607      	mov	r7, r0
   d84ae:	4689      	mov	r9, r1
   d84b0:	4692      	mov	sl, r2
   d84b2:	4698      	mov	r8, r3
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   d84b4:	d103      	bne.n	d84be <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x1a>
   d84b6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   d84ba:	2b00      	cmp	r3, #0
   d84bc:	d14a      	bne.n	d8554 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb0>

    /*
     * Prepare expected PKCS1 v1.5 encoding of hash.
     */

    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
   d84be:	4631      	mov	r1, r6
   d84c0:	2001      	movs	r0, #1
   d84c2:	f010 fc1b 	bl	e8cfc <calloc>
   d84c6:	4605      	mov	r5, r0
   d84c8:	2800      	cmp	r0, #0
   d84ca:	d046      	beq.n	d855a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb6>
        ( encoded_expected = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL )
   d84cc:	4631      	mov	r1, r6
   d84ce:	2001      	movs	r0, #1
   d84d0:	f010 fc14 	bl	e8cfc <calloc>
    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
   d84d4:	4604      	mov	r4, r0
   d84d6:	2800      	cmp	r0, #0
   d84d8:	d042      	beq.n	d8560 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
        goto cleanup;
    }

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,
   d84da:	9000      	str	r0, [sp, #0]
   d84dc:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
   d84e0:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   d84e4:	4633      	mov	r3, r6
   d84e6:	f7fe fe81 	bl	d71ec <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
   d84ea:	4683      	mov	fp, r0
   d84ec:	b9f8      	cbnz	r0, d852e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8a>
    /*
     * Apply RSA primitive to get what should be PKCS1 encoded hash.
     */

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, encoded )
   d84ee:	f1b8 0f00 	cmp.w	r8, #0
   d84f2:	d110      	bne.n	d8516 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x72>
   d84f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   d84f6:	462a      	mov	r2, r5
   d84f8:	4638      	mov	r0, r7
   d84fa:	f7ff f8a9 	bl	d7650 <mbedtls_rsa_public>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
   d84fe:	4683      	mov	fp, r0
    if( ret != 0 )
   d8500:	b9a8      	cbnz	r0, d852e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8a>
    unsigned char diff = 0;
   d8502:	4601      	mov	r1, r0
    for( i = 0; i < n; i++ )
   d8504:	4602      	mov	r2, r0
   d8506:	4296      	cmp	r6, r2
   d8508:	d00d      	beq.n	d8526 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x82>
        diff |= A[i] ^ B[i];
   d850a:	5ca8      	ldrb	r0, [r5, r2]
   d850c:	5ca7      	ldrb	r7, [r4, r2]
   d850e:	4078      	eors	r0, r7
   d8510:	4301      	orrs	r1, r0
    for( i = 0; i < n; i++ )
   d8512:	3201      	adds	r2, #1
   d8514:	e7f7      	b.n	d8506 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x62>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
   d8516:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d8518:	9500      	str	r5, [sp, #0]
   d851a:	4652      	mov	r2, sl
   d851c:	4649      	mov	r1, r9
   d851e:	4638      	mov	r0, r7
   d8520:	f7ff f8d6 	bl	d76d0 <mbedtls_rsa_private>
   d8524:	e7eb      	b.n	d84fe <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5a>
     */

    if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,
                                      sig_len ) ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
   d8526:	4a10      	ldr	r2, [pc, #64]	; (d8568 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc4>)
   d8528:	2900      	cmp	r1, #0
   d852a:	bf18      	it	ne
   d852c:	4693      	movne	fp, r2

cleanup:

    if( encoded != NULL )
    {
        mbedtls_platform_zeroize( encoded, sig_len );
   d852e:	4628      	mov	r0, r5
   d8530:	4631      	mov	r1, r6
   d8532:	f00a fb47 	bl	e2bc4 <mbedtls_platform_zeroize>
        mbedtls_free( encoded );
   d8536:	4628      	mov	r0, r5
   d8538:	f00d fa36 	bl	e59a8 <free>
    }

    if( encoded_expected != NULL )
   d853c:	b134      	cbz	r4, d854c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa8>
    {
        mbedtls_platform_zeroize( encoded_expected, sig_len );
   d853e:	4620      	mov	r0, r4
   d8540:	4631      	mov	r1, r6
   d8542:	f00a fb3f 	bl	e2bc4 <mbedtls_platform_zeroize>
        mbedtls_free( encoded_expected );
   d8546:	4620      	mov	r0, r4
   d8548:	f00d fa2e 	bl	e59a8 <free>
    }

    return( ret );
}
   d854c:	4658      	mov	r0, fp
   d854e:	b003      	add	sp, #12
   d8550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   d8554:	f8df b014 	ldr.w	fp, [pc, #20]	; d856c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>
   d8558:	e7f8      	b.n	d854c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa8>
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
   d855a:	f06f 0b0f 	mvn.w	fp, #15
   d855e:	e7f5      	b.n	d854c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa8>
   d8560:	f06f 0b0f 	mvn.w	fp, #15
   d8564:	e7e3      	b.n	d852e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8a>
   d8566:	bf00      	nop
   d8568:	ffffbc80 	.word	0xffffbc80
   d856c:	ffffbf80 	.word	0xffffbf80

000d8570 <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
   d8570:	b430      	push	{r4, r5}
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    switch( ctx->padding )
   d8572:	f8d0 50a4 	ldr.w	r5, [r0, #164]	; 0xa4
{
   d8576:	f89d 4008 	ldrb.w	r4, [sp, #8]
    switch( ctx->padding )
   d857a:	b125      	cbz	r5, d8586 <mbedtls_rsa_pkcs1_verify+0x16>
   d857c:	2d01      	cmp	r5, #1
   d857e:	d006      	beq.n	d858e <mbedtls_rsa_pkcs1_verify+0x1e>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
   d8580:	4805      	ldr	r0, [pc, #20]	; (d8598 <mbedtls_rsa_pkcs1_verify+0x28>)
   d8582:	bc30      	pop	{r4, r5}
   d8584:	4770      	bx	lr
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
   d8586:	9402      	str	r4, [sp, #8]
}
   d8588:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
   d858a:	f7ff bf8b 	b.w	d84a4 <mbedtls_rsa_rsassa_pkcs1_v15_verify>
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
   d858e:	9402      	str	r4, [sp, #8]
}
   d8590:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
   d8592:	f7ff bf6d 	b.w	d8470 <mbedtls_rsa_rsassa_pss_verify>
   d8596:	bf00      	nop
   d8598:	ffffbf00 	.word	0xffffbf00

000d859c <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
   d859c:	b510      	push	{r4, lr}
    if( ctx == NULL )
   d859e:	4604      	mov	r4, r0
   d85a0:	b3a0      	cbz	r0, d860c <mbedtls_rsa_free+0x70>
        return;

    mbedtls_mpi_free( &ctx->Vi );
   d85a2:	308c      	adds	r0, #140	; 0x8c
   d85a4:	f008 fadf 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
   d85a8:	f104 0098 	add.w	r0, r4, #152	; 0x98
   d85ac:	f008 fadb 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
   d85b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d85b4:	f008 fad7 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
   d85b8:	f104 0020 	add.w	r0, r4, #32
   d85bc:	f008 fad3 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
   d85c0:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d85c4:	f008 facf 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
   d85c8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d85cc:	f008 facb 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
   d85d0:	f104 0014 	add.w	r0, r4, #20
   d85d4:	f008 fac7 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
   d85d8:	f104 0008 	add.w	r0, r4, #8
   d85dc:	f008 fac3 	bl	e0b66 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
   d85e0:	f104 0080 	add.w	r0, r4, #128	; 0x80
   d85e4:	f008 fabf 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
   d85e8:	f104 0074 	add.w	r0, r4, #116	; 0x74
   d85ec:	f008 fabb 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
   d85f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   d85f4:	f008 fab7 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
   d85f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
   d85fc:	f008 fab3 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
   d8600:	f104 0044 	add.w	r0, r4, #68	; 0x44
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
   d8604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->DP );
   d8608:	f008 baad 	b.w	e0b66 <mbedtls_mpi_free>
}
   d860c:	bd10      	pop	{r4, pc}

000d860e <_ZL12ecp_get_typePK17mbedtls_ecp_group>:
/*
 * Get the type of a curve
 */
static inline ecp_curve_type ecp_get_type( const mbedtls_ecp_group *grp )
{
    if( grp->G.X.p == NULL )
   d860e:	6b03      	ldr	r3, [r0, #48]	; 0x30
   d8610:	b12b      	cbz	r3, d861e <_ZL12ecp_get_typePK17mbedtls_ecp_group+0x10>
        return( ECP_TYPE_NONE );

    if( grp->G.Y.p == NULL )
   d8612:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   d8614:	2b00      	cmp	r3, #0
        return( ECP_TYPE_MONTGOMERY );
    else
        return( ECP_TYPE_SHORT_WEIERSTRASS );
   d8616:	bf0c      	ite	eq
   d8618:	2002      	moveq	r0, #2
   d861a:	2001      	movne	r0, #1
   d861c:	4770      	bx	lr
        return( ECP_TYPE_NONE );
   d861e:	4618      	mov	r0, r3
}
   d8620:	4770      	bx	lr

000d8622 <_ZL19ecp_safe_invert_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointh>:
 * "inv" must be 0 (don't invert) or 1 (invert) or the result will be invalid
 */
static int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,
                            mbedtls_ecp_point *Q,
                            unsigned char inv )
{
   d8622:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d8624:	460d      	mov	r5, r1
   d8626:	4604      	mov	r4, r0
    mbedtls_mpi mQY;

    mbedtls_mpi_init( &mQY );

    /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
   d8628:	350c      	adds	r5, #12
    mbedtls_mpi_init( &mQY );
   d862a:	a801      	add	r0, sp, #4
{
   d862c:	4616      	mov	r6, r2
    mbedtls_mpi_init( &mQY );
   d862e:	f008 fa94 	bl	e0b5a <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
   d8632:	1d21      	adds	r1, r4, #4
   d8634:	462a      	mov	r2, r5
   d8636:	a801      	add	r0, sp, #4
   d8638:	f008 fe7c 	bl	e1334 <mbedtls_mpi_sub_mpi>
   d863c:	4604      	mov	r4, r0
   d863e:	b968      	cbnz	r0, d865c <_ZL19ecp_safe_invert_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointh+0x3a>
    nonzero = mbedtls_mpi_cmp_int( &Q->Y, 0 ) != 0;
   d8640:	4601      	mov	r1, r0
   d8642:	4628      	mov	r0, r5
   d8644:	f008 fda9 	bl	e119a <mbedtls_mpi_cmp_int>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &Q->Y, &mQY, inv & nonzero ) );
   d8648:	a901      	add	r1, sp, #4
   d864a:	2800      	cmp	r0, #0
   d864c:	bf0c      	ite	eq
   d864e:	2200      	moveq	r2, #0
   d8650:	f006 0201 	andne.w	r2, r6, #1
   d8654:	4628      	mov	r0, r5
   d8656:	f008 fb29 	bl	e0cac <mbedtls_mpi_safe_cond_assign>
   d865a:	4604      	mov	r4, r0

cleanup:
    mbedtls_mpi_free( &mQY );
   d865c:	a801      	add	r0, sp, #4
   d865e:	f008 fa82 	bl	e0b66 <mbedtls_mpi_free>

    return( ret );
}
   d8662:	4620      	mov	r0, r4
   d8664:	b004      	add	sp, #16
   d8666:	bd70      	pop	{r4, r5, r6, pc}

000d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>:
{
   d8668:	b570      	push	{r4, r5, r6, lr}
    if( grp->modp == NULL )
   d866a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
{
   d866c:	4604      	mov	r4, r0
   d866e:	460d      	mov	r5, r1
    if( grp->modp == NULL )
   d8670:	b92b      	cbnz	r3, d867e <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x16>
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
   d8672:	1d0a      	adds	r2, r1, #4
}
   d8674:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
   d8678:	4601      	mov	r1, r0
   d867a:	f009 b8e2 	b.w	e1842 <mbedtls_mpi_mod_mpi>
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
   d867e:	6803      	ldr	r3, [r0, #0]
   d8680:	2b00      	cmp	r3, #0
   d8682:	db09      	blt.n	d8698 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x30>
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
   d8684:	4620      	mov	r0, r4
   d8686:	f008 fb8b 	bl	e0da0 <mbedtls_mpi_bitlen>
   d868a:	6dab      	ldr	r3, [r5, #88]	; 0x58
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
   d868c:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
   d8690:	d908      	bls.n	d86a4 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x3c>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d8692:	4e17      	ldr	r6, [pc, #92]	; (d86f0 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x88>)
}
   d8694:	4630      	mov	r0, r6
   d8696:	bd70      	pop	{r4, r5, r6, pc}
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
   d8698:	2100      	movs	r1, #0
   d869a:	f008 fd7e 	bl	e119a <mbedtls_mpi_cmp_int>
   d869e:	2800      	cmp	r0, #0
   d86a0:	d0f0      	beq.n	d8684 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x1c>
   d86a2:	e7f6      	b.n	d8692 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x2a>
    MBEDTLS_MPI_CHK( grp->modp( N ) );
   d86a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   d86a6:	4620      	mov	r0, r4
   d86a8:	4798      	blx	r3
   d86aa:	4606      	mov	r6, r0
   d86ac:	2800      	cmp	r0, #0
   d86ae:	d1f1      	bne.n	d8694 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x2c>
   d86b0:	3504      	adds	r5, #4
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
   d86b2:	6823      	ldr	r3, [r4, #0]
   d86b4:	2b00      	cmp	r3, #0
   d86b6:	da0d      	bge.n	d86d4 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x6c>
   d86b8:	2100      	movs	r1, #0
   d86ba:	4620      	mov	r0, r4
   d86bc:	f008 fd6d 	bl	e119a <mbedtls_mpi_cmp_int>
   d86c0:	b140      	cbz	r0, d86d4 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x6c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );
   d86c2:	462a      	mov	r2, r5
   d86c4:	4621      	mov	r1, r4
   d86c6:	4620      	mov	r0, r4
   d86c8:	f008 fe12 	bl	e12f0 <mbedtls_mpi_add_mpi>
   d86cc:	2800      	cmp	r0, #0
   d86ce:	d0f0      	beq.n	d86b2 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x4a>
   d86d0:	4606      	mov	r6, r0
   d86d2:	e7df      	b.n	d8694 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x2c>
    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
   d86d4:	4629      	mov	r1, r5
   d86d6:	4620      	mov	r0, r4
   d86d8:	f008 fd1e 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   d86dc:	2800      	cmp	r0, #0
   d86de:	dbd9      	blt.n	d8694 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x2c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
   d86e0:	462a      	mov	r2, r5
   d86e2:	4621      	mov	r1, r4
   d86e4:	4620      	mov	r0, r4
   d86e6:	f008 fdc7 	bl	e1278 <mbedtls_mpi_sub_abs>
   d86ea:	2800      	cmp	r0, #0
   d86ec:	d0f2      	beq.n	d86d4 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x6c>
   d86ee:	e7ef      	b.n	d86d0 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group+0x68>
   d86f0:	ffffb080 	.word	0xffffb080

000d86f4 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_>:
 *             4M + 4S          (A == -3)
 *             3M + 6S + 1a     otherwise
 */
static int ecp_double_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                           const mbedtls_ecp_point *P )
{
   d86f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d86f8:	b08d      	sub	sp, #52	; 0x34
   d86fa:	4680      	mov	r8, r0
#if defined(MBEDTLS_ECP_DOUBLE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_double_jac( grp, R, P ) );
#endif /* MBEDTLS_ECP_DOUBLE_JAC_ALT */

    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
   d86fc:	ad03      	add	r5, sp, #12
   d86fe:	4668      	mov	r0, sp
{
   d8700:	460e      	mov	r6, r1
   d8702:	4691      	mov	r9, r2
    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
   d8704:	f008 fa29 	bl	e0b5a <mbedtls_mpi_init>
   d8708:	4628      	mov	r0, r5
   d870a:	f008 fa26 	bl	e0b5a <mbedtls_mpi_init>
   d870e:	a806      	add	r0, sp, #24
   d8710:	f008 fa23 	bl	e0b5a <mbedtls_mpi_init>
   d8714:	a809      	add	r0, sp, #36	; 0x24
   d8716:	f008 fa20 	bl	e0b5a <mbedtls_mpi_init>

    /* Special case for A = -3 */
    if( grp->A.p == NULL )
   d871a:	f8d8 3018 	ldr.w	r3, [r8, #24]
   d871e:	2b00      	cmp	r3, #0
   d8720:	d16d      	bne.n	d87fe <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x10a>
    {
        /* M = 3(X + Z^2)(X - Z^2) */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
   d8722:	f109 0218 	add.w	r2, r9, #24
   d8726:	4611      	mov	r1, r2
   d8728:	4628      	mov	r0, r5
   d872a:	f008 fe52 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d872e:	4604      	mov	r4, r0
   d8730:	b9e0      	cbnz	r0, d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d8732:	4641      	mov	r1, r8
   d8734:	4628      	mov	r0, r5
   d8736:	f7ff ff97 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d873a:	4604      	mov	r4, r0
   d873c:	b9b0      	cbnz	r0, d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
   d873e:	462a      	mov	r2, r5
   d8740:	4649      	mov	r1, r9
   d8742:	a806      	add	r0, sp, #24
   d8744:	f008 fdd4 	bl	e12f0 <mbedtls_mpi_add_mpi>
   d8748:	4604      	mov	r4, r0
   d874a:	b978      	cbnz	r0, d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d874c:	f108 0704 	add.w	r7, r8, #4
   d8750:	4639      	mov	r1, r7
   d8752:	a806      	add	r0, sp, #24
   d8754:	f008 fce0 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   d8758:	2800      	cmp	r0, #0
   d875a:	db17      	blt.n	d878c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x98>
   d875c:	a906      	add	r1, sp, #24
   d875e:	463a      	mov	r2, r7
   d8760:	4608      	mov	r0, r1
   d8762:	f008 fd89 	bl	e1278 <mbedtls_mpi_sub_abs>
   d8766:	4604      	mov	r4, r0
   d8768:	2800      	cmp	r0, #0
   d876a:	d0f1      	beq.n	d8750 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x5c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );

cleanup:
    mbedtls_mpi_free( &M ); mbedtls_mpi_free( &S ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &U );
   d876c:	4668      	mov	r0, sp
   d876e:	f008 f9fa 	bl	e0b66 <mbedtls_mpi_free>
   d8772:	4628      	mov	r0, r5
   d8774:	f008 f9f7 	bl	e0b66 <mbedtls_mpi_free>
   d8778:	a806      	add	r0, sp, #24
   d877a:	f008 f9f4 	bl	e0b66 <mbedtls_mpi_free>
   d877e:	a809      	add	r0, sp, #36	; 0x24
   d8780:	f008 f9f1 	bl	e0b66 <mbedtls_mpi_free>

    return( ret );
}
   d8784:	4620      	mov	r0, r4
   d8786:	b00d      	add	sp, #52	; 0x34
   d8788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
   d878c:	462a      	mov	r2, r5
   d878e:	4649      	mov	r1, r9
   d8790:	a809      	add	r0, sp, #36	; 0x24
   d8792:	f008 fdcf 	bl	e1334 <mbedtls_mpi_sub_mpi>
   d8796:	4604      	mov	r4, r0
   d8798:	2800      	cmp	r0, #0
   d879a:	d1e7      	bne.n	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d879c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d879e:	2b00      	cmp	r3, #0
   d87a0:	da0a      	bge.n	d87b8 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0xc4>
   d87a2:	2100      	movs	r1, #0
   d87a4:	a809      	add	r0, sp, #36	; 0x24
   d87a6:	f008 fcf8 	bl	e119a <mbedtls_mpi_cmp_int>
   d87aa:	b128      	cbz	r0, d87b8 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0xc4>
   d87ac:	a909      	add	r1, sp, #36	; 0x24
   d87ae:	463a      	mov	r2, r7
   d87b0:	4608      	mov	r0, r1
   d87b2:	f008 fd9d 	bl	e12f0 <mbedtls_mpi_add_mpi>
   d87b6:	e7ee      	b.n	d8796 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0xa2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
   d87b8:	aa09      	add	r2, sp, #36	; 0x24
   d87ba:	a906      	add	r1, sp, #24
   d87bc:	4628      	mov	r0, r5
   d87be:	f008 fe08 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d87c2:	4604      	mov	r4, r0
   d87c4:	2800      	cmp	r0, #0
   d87c6:	d1d1      	bne.n	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d87c8:	4641      	mov	r1, r8
   d87ca:	4628      	mov	r0, r5
   d87cc:	f7ff ff4c 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d87d0:	4604      	mov	r4, r0
   d87d2:	2800      	cmp	r0, #0
   d87d4:	d1ca      	bne.n	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
   d87d6:	2203      	movs	r2, #3
   d87d8:	4629      	mov	r1, r5
   d87da:	4668      	mov	r0, sp
   d87dc:	f008 fe5d 	bl	e149a <mbedtls_mpi_mul_int>
   d87e0:	4604      	mov	r4, r0
   d87e2:	2800      	cmp	r0, #0
   d87e4:	d1c2      	bne.n	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d87e6:	4639      	mov	r1, r7
   d87e8:	4668      	mov	r0, sp
   d87ea:	f008 fc95 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   d87ee:	2800      	cmp	r0, #0
   d87f0:	db7e      	blt.n	d88f0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x1fc>
   d87f2:	463a      	mov	r2, r7
   d87f4:	4669      	mov	r1, sp
   d87f6:	4668      	mov	r0, sp
   d87f8:	f008 fd3e 	bl	e1278 <mbedtls_mpi_sub_abs>
   d87fc:	e7f0      	b.n	d87e0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0xec>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
   d87fe:	464a      	mov	r2, r9
   d8800:	4649      	mov	r1, r9
   d8802:	4628      	mov	r0, r5
   d8804:	f008 fde5 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d8808:	4604      	mov	r4, r0
   d880a:	2800      	cmp	r0, #0
   d880c:	d1ae      	bne.n	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d880e:	4641      	mov	r1, r8
   d8810:	4628      	mov	r0, r5
   d8812:	f7ff ff29 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8816:	4604      	mov	r4, r0
   d8818:	2800      	cmp	r0, #0
   d881a:	d1a7      	bne.n	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
   d881c:	2203      	movs	r2, #3
   d881e:	4629      	mov	r1, r5
   d8820:	4668      	mov	r0, sp
   d8822:	f008 fe3a 	bl	e149a <mbedtls_mpi_mul_int>
   d8826:	4604      	mov	r4, r0
   d8828:	2800      	cmp	r0, #0
   d882a:	d19f      	bne.n	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d882c:	f108 0704 	add.w	r7, r8, #4
   d8830:	4639      	mov	r1, r7
   d8832:	4668      	mov	r0, sp
   d8834:	f008 fc70 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   d8838:	2800      	cmp	r0, #0
   d883a:	db08      	blt.n	d884e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x15a>
   d883c:	463a      	mov	r2, r7
   d883e:	4669      	mov	r1, sp
   d8840:	4668      	mov	r0, sp
   d8842:	f008 fd19 	bl	e1278 <mbedtls_mpi_sub_abs>
   d8846:	4604      	mov	r4, r0
   d8848:	2800      	cmp	r0, #0
   d884a:	d0f1      	beq.n	d8830 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x13c>
   d884c:	e78e      	b.n	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
        if( mbedtls_mpi_cmp_int( &grp->A, 0 ) != 0 )
   d884e:	f108 0a10 	add.w	sl, r8, #16
   d8852:	2100      	movs	r1, #0
   d8854:	4650      	mov	r0, sl
   d8856:	f008 fca0 	bl	e119a <mbedtls_mpi_cmp_int>
   d885a:	2800      	cmp	r0, #0
   d885c:	d048      	beq.n	d88f0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x1fc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
   d885e:	f109 0218 	add.w	r2, r9, #24
   d8862:	4611      	mov	r1, r2
   d8864:	4628      	mov	r0, r5
   d8866:	f008 fdb4 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d886a:	4604      	mov	r4, r0
   d886c:	2800      	cmp	r0, #0
   d886e:	f47f af7d 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d8872:	4641      	mov	r1, r8
   d8874:	4628      	mov	r0, r5
   d8876:	f7ff fef7 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d887a:	4604      	mov	r4, r0
   d887c:	2800      	cmp	r0, #0
   d887e:	f47f af75 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
   d8882:	462a      	mov	r2, r5
   d8884:	4629      	mov	r1, r5
   d8886:	a806      	add	r0, sp, #24
   d8888:	f008 fda3 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d888c:	4604      	mov	r4, r0
   d888e:	2800      	cmp	r0, #0
   d8890:	f47f af6c 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d8894:	4641      	mov	r1, r8
   d8896:	a806      	add	r0, sp, #24
   d8898:	f7ff fee6 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d889c:	4604      	mov	r4, r0
   d889e:	2800      	cmp	r0, #0
   d88a0:	f47f af64 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
   d88a4:	4652      	mov	r2, sl
   d88a6:	a906      	add	r1, sp, #24
   d88a8:	4628      	mov	r0, r5
   d88aa:	f008 fd92 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d88ae:	4604      	mov	r4, r0
   d88b0:	2800      	cmp	r0, #0
   d88b2:	f47f af5b 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d88b6:	4641      	mov	r1, r8
   d88b8:	4628      	mov	r0, r5
   d88ba:	f7ff fed5 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d88be:	4604      	mov	r4, r0
   d88c0:	2800      	cmp	r0, #0
   d88c2:	f47f af53 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
   d88c6:	462a      	mov	r2, r5
   d88c8:	4669      	mov	r1, sp
   d88ca:	4668      	mov	r0, sp
   d88cc:	f008 fd10 	bl	e12f0 <mbedtls_mpi_add_mpi>
   d88d0:	4604      	mov	r4, r0
   d88d2:	2800      	cmp	r0, #0
   d88d4:	f47f af4a 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d88d8:	4639      	mov	r1, r7
   d88da:	4668      	mov	r0, sp
   d88dc:	f008 fc1c 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   d88e0:	2800      	cmp	r0, #0
   d88e2:	db05      	blt.n	d88f0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x1fc>
   d88e4:	463a      	mov	r2, r7
   d88e6:	4669      	mov	r1, sp
   d88e8:	4668      	mov	r0, sp
   d88ea:	f008 fcc5 	bl	e1278 <mbedtls_mpi_sub_abs>
   d88ee:	e7ef      	b.n	d88d0 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x1dc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
   d88f0:	f109 0a0c 	add.w	sl, r9, #12
   d88f4:	4652      	mov	r2, sl
   d88f6:	4651      	mov	r1, sl
   d88f8:	a806      	add	r0, sp, #24
   d88fa:	f008 fd6a 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d88fe:	4604      	mov	r4, r0
   d8900:	2800      	cmp	r0, #0
   d8902:	f47f af33 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d8906:	4641      	mov	r1, r8
   d8908:	a806      	add	r0, sp, #24
   d890a:	f7ff fead 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d890e:	4604      	mov	r4, r0
   d8910:	2800      	cmp	r0, #0
   d8912:	f47f af2b 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
   d8916:	2101      	movs	r1, #1
   d8918:	a806      	add	r0, sp, #24
   d891a:	f008 fad0 	bl	e0ebe <mbedtls_mpi_shift_l>
   d891e:	4604      	mov	r4, r0
   d8920:	2800      	cmp	r0, #0
   d8922:	f47f af23 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d8926:	f108 0704 	add.w	r7, r8, #4
   d892a:	4639      	mov	r1, r7
   d892c:	a806      	add	r0, sp, #24
   d892e:	f008 fbf3 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   d8932:	2800      	cmp	r0, #0
   d8934:	db08      	blt.n	d8948 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x254>
   d8936:	a906      	add	r1, sp, #24
   d8938:	463a      	mov	r2, r7
   d893a:	4608      	mov	r0, r1
   d893c:	f008 fc9c 	bl	e1278 <mbedtls_mpi_sub_abs>
   d8940:	4604      	mov	r4, r0
   d8942:	2800      	cmp	r0, #0
   d8944:	d0f1      	beq.n	d892a <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x236>
   d8946:	e711      	b.n	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
   d8948:	aa06      	add	r2, sp, #24
   d894a:	4649      	mov	r1, r9
   d894c:	4628      	mov	r0, r5
   d894e:	f008 fd40 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d8952:	4604      	mov	r4, r0
   d8954:	2800      	cmp	r0, #0
   d8956:	f47f af09 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d895a:	4641      	mov	r1, r8
   d895c:	4628      	mov	r0, r5
   d895e:	f7ff fe83 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8962:	4604      	mov	r4, r0
   d8964:	2800      	cmp	r0, #0
   d8966:	f47f af01 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
   d896a:	2101      	movs	r1, #1
   d896c:	4628      	mov	r0, r5
   d896e:	f008 faa6 	bl	e0ebe <mbedtls_mpi_shift_l>
   d8972:	4604      	mov	r4, r0
   d8974:	2800      	cmp	r0, #0
   d8976:	f47f aef9 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d897a:	4639      	mov	r1, r7
   d897c:	4628      	mov	r0, r5
   d897e:	f008 fbcb 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   d8982:	2800      	cmp	r0, #0
   d8984:	db05      	blt.n	d8992 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x29e>
   d8986:	463a      	mov	r2, r7
   d8988:	4629      	mov	r1, r5
   d898a:	4628      	mov	r0, r5
   d898c:	f008 fc74 	bl	e1278 <mbedtls_mpi_sub_abs>
   d8990:	e7ef      	b.n	d8972 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x27e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
   d8992:	aa06      	add	r2, sp, #24
   d8994:	4611      	mov	r1, r2
   d8996:	a809      	add	r0, sp, #36	; 0x24
   d8998:	f008 fd1b 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d899c:	4604      	mov	r4, r0
   d899e:	2800      	cmp	r0, #0
   d89a0:	f47f aee4 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d89a4:	4641      	mov	r1, r8
   d89a6:	a809      	add	r0, sp, #36	; 0x24
   d89a8:	f7ff fe5e 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d89ac:	4604      	mov	r4, r0
   d89ae:	2800      	cmp	r0, #0
   d89b0:	f47f aedc 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
   d89b4:	2101      	movs	r1, #1
   d89b6:	a809      	add	r0, sp, #36	; 0x24
   d89b8:	f008 fa81 	bl	e0ebe <mbedtls_mpi_shift_l>
   d89bc:	4604      	mov	r4, r0
   d89be:	2800      	cmp	r0, #0
   d89c0:	f47f aed4 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d89c4:	4639      	mov	r1, r7
   d89c6:	a809      	add	r0, sp, #36	; 0x24
   d89c8:	f008 fba6 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   d89cc:	2800      	cmp	r0, #0
   d89ce:	db05      	blt.n	d89dc <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x2e8>
   d89d0:	a909      	add	r1, sp, #36	; 0x24
   d89d2:	463a      	mov	r2, r7
   d89d4:	4608      	mov	r0, r1
   d89d6:	f008 fc4f 	bl	e1278 <mbedtls_mpi_sub_abs>
   d89da:	e7ef      	b.n	d89bc <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x2c8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
   d89dc:	466a      	mov	r2, sp
   d89de:	4669      	mov	r1, sp
   d89e0:	a806      	add	r0, sp, #24
   d89e2:	f008 fcf6 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d89e6:	4604      	mov	r4, r0
   d89e8:	2800      	cmp	r0, #0
   d89ea:	f47f aebf 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d89ee:	4641      	mov	r1, r8
   d89f0:	a806      	add	r0, sp, #24
   d89f2:	f7ff fe39 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d89f6:	4604      	mov	r4, r0
   d89f8:	2800      	cmp	r0, #0
   d89fa:	f47f aeb7 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
   d89fe:	a906      	add	r1, sp, #24
   d8a00:	462a      	mov	r2, r5
   d8a02:	4608      	mov	r0, r1
   d8a04:	f008 fc96 	bl	e1334 <mbedtls_mpi_sub_mpi>
   d8a08:	4604      	mov	r4, r0
   d8a0a:	2800      	cmp	r0, #0
   d8a0c:	f47f aeae 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d8a10:	9b06      	ldr	r3, [sp, #24]
   d8a12:	2b00      	cmp	r3, #0
   d8a14:	db5b      	blt.n	d8ace <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x3da>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
   d8a16:	a906      	add	r1, sp, #24
   d8a18:	462a      	mov	r2, r5
   d8a1a:	4608      	mov	r0, r1
   d8a1c:	f008 fc8a 	bl	e1334 <mbedtls_mpi_sub_mpi>
   d8a20:	4604      	mov	r4, r0
   d8a22:	2800      	cmp	r0, #0
   d8a24:	f47f aea2 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d8a28:	9b06      	ldr	r3, [sp, #24]
   d8a2a:	2b00      	cmp	r3, #0
   d8a2c:	db5b      	blt.n	d8ae6 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x3f2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
   d8a2e:	aa06      	add	r2, sp, #24
   d8a30:	4629      	mov	r1, r5
   d8a32:	4628      	mov	r0, r5
   d8a34:	f008 fc7e 	bl	e1334 <mbedtls_mpi_sub_mpi>
   d8a38:	4604      	mov	r4, r0
   d8a3a:	2800      	cmp	r0, #0
   d8a3c:	f47f ae96 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d8a40:	9b03      	ldr	r3, [sp, #12]
   d8a42:	2b00      	cmp	r3, #0
   d8a44:	db5b      	blt.n	d8afe <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x40a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
   d8a46:	466a      	mov	r2, sp
   d8a48:	4629      	mov	r1, r5
   d8a4a:	4628      	mov	r0, r5
   d8a4c:	f008 fcc1 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d8a50:	4604      	mov	r4, r0
   d8a52:	2800      	cmp	r0, #0
   d8a54:	f47f ae8a 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d8a58:	4641      	mov	r1, r8
   d8a5a:	4628      	mov	r0, r5
   d8a5c:	f7ff fe04 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8a60:	4604      	mov	r4, r0
   d8a62:	2800      	cmp	r0, #0
   d8a64:	f47f ae82 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
   d8a68:	aa09      	add	r2, sp, #36	; 0x24
   d8a6a:	4629      	mov	r1, r5
   d8a6c:	4628      	mov	r0, r5
   d8a6e:	f008 fc61 	bl	e1334 <mbedtls_mpi_sub_mpi>
   d8a72:	4604      	mov	r4, r0
   d8a74:	2800      	cmp	r0, #0
   d8a76:	f47f ae79 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d8a7a:	46ab      	mov	fp, r5
   d8a7c:	9b03      	ldr	r3, [sp, #12]
   d8a7e:	2b00      	cmp	r3, #0
   d8a80:	db49      	blt.n	d8b16 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x422>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
   d8a82:	f109 0218 	add.w	r2, r9, #24
   d8a86:	4651      	mov	r1, sl
   d8a88:	a809      	add	r0, sp, #36	; 0x24
   d8a8a:	f008 fca2 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d8a8e:	4604      	mov	r4, r0
   d8a90:	2800      	cmp	r0, #0
   d8a92:	f47f ae6b 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d8a96:	4641      	mov	r1, r8
   d8a98:	a809      	add	r0, sp, #36	; 0x24
   d8a9a:	f7ff fde5 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8a9e:	4604      	mov	r4, r0
   d8aa0:	2800      	cmp	r0, #0
   d8aa2:	f47f ae63 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
   d8aa6:	2101      	movs	r1, #1
   d8aa8:	a809      	add	r0, sp, #36	; 0x24
   d8aaa:	f008 fa08 	bl	e0ebe <mbedtls_mpi_shift_l>
   d8aae:	4604      	mov	r4, r0
   d8ab0:	2800      	cmp	r0, #0
   d8ab2:	f47f ae5b 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
   d8ab6:	4639      	mov	r1, r7
   d8ab8:	a809      	add	r0, sp, #36	; 0x24
   d8aba:	f008 fb2d 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   d8abe:	2800      	cmp	r0, #0
   d8ac0:	db38      	blt.n	d8b34 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x440>
   d8ac2:	a909      	add	r1, sp, #36	; 0x24
   d8ac4:	463a      	mov	r2, r7
   d8ac6:	4608      	mov	r0, r1
   d8ac8:	f008 fbd6 	bl	e1278 <mbedtls_mpi_sub_abs>
   d8acc:	e7ef      	b.n	d8aae <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x3ba>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
   d8ace:	2100      	movs	r1, #0
   d8ad0:	a806      	add	r0, sp, #24
   d8ad2:	f008 fb62 	bl	e119a <mbedtls_mpi_cmp_int>
   d8ad6:	2800      	cmp	r0, #0
   d8ad8:	d09d      	beq.n	d8a16 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x322>
   d8ada:	a906      	add	r1, sp, #24
   d8adc:	463a      	mov	r2, r7
   d8ade:	4608      	mov	r0, r1
   d8ae0:	f008 fc06 	bl	e12f0 <mbedtls_mpi_add_mpi>
   d8ae4:	e790      	b.n	d8a08 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x314>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
   d8ae6:	2100      	movs	r1, #0
   d8ae8:	a806      	add	r0, sp, #24
   d8aea:	f008 fb56 	bl	e119a <mbedtls_mpi_cmp_int>
   d8aee:	2800      	cmp	r0, #0
   d8af0:	d09d      	beq.n	d8a2e <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x33a>
   d8af2:	a906      	add	r1, sp, #24
   d8af4:	463a      	mov	r2, r7
   d8af6:	4608      	mov	r0, r1
   d8af8:	f008 fbfa 	bl	e12f0 <mbedtls_mpi_add_mpi>
   d8afc:	e790      	b.n	d8a20 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x32c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
   d8afe:	2100      	movs	r1, #0
   d8b00:	4628      	mov	r0, r5
   d8b02:	f008 fb4a 	bl	e119a <mbedtls_mpi_cmp_int>
   d8b06:	2800      	cmp	r0, #0
   d8b08:	d09d      	beq.n	d8a46 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x352>
   d8b0a:	463a      	mov	r2, r7
   d8b0c:	4629      	mov	r1, r5
   d8b0e:	4628      	mov	r0, r5
   d8b10:	f008 fbee 	bl	e12f0 <mbedtls_mpi_add_mpi>
   d8b14:	e790      	b.n	d8a38 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x344>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
   d8b16:	2100      	movs	r1, #0
   d8b18:	4658      	mov	r0, fp
   d8b1a:	f008 fb3e 	bl	e119a <mbedtls_mpi_cmp_int>
   d8b1e:	2800      	cmp	r0, #0
   d8b20:	d0af      	beq.n	d8a82 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x38e>
   d8b22:	463a      	mov	r2, r7
   d8b24:	4659      	mov	r1, fp
   d8b26:	4658      	mov	r0, fp
   d8b28:	f008 fbe2 	bl	e12f0 <mbedtls_mpi_add_mpi>
   d8b2c:	4604      	mov	r4, r0
   d8b2e:	2800      	cmp	r0, #0
   d8b30:	d0a4      	beq.n	d8a7c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x388>
   d8b32:	e61b      	b.n	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
   d8b34:	a906      	add	r1, sp, #24
   d8b36:	4630      	mov	r0, r6
   d8b38:	f008 f88c 	bl	e0c54 <mbedtls_mpi_copy>
   d8b3c:	4604      	mov	r4, r0
   d8b3e:	2800      	cmp	r0, #0
   d8b40:	f47f ae14 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
   d8b44:	a903      	add	r1, sp, #12
   d8b46:	f106 000c 	add.w	r0, r6, #12
   d8b4a:	f008 f883 	bl	e0c54 <mbedtls_mpi_copy>
   d8b4e:	4604      	mov	r4, r0
   d8b50:	2800      	cmp	r0, #0
   d8b52:	f47f ae0b 	bne.w	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );
   d8b56:	a909      	add	r1, sp, #36	; 0x24
   d8b58:	f106 0018 	add.w	r0, r6, #24
   d8b5c:	f008 f87a 	bl	e0c54 <mbedtls_mpi_copy>
   d8b60:	4604      	mov	r4, r0
cleanup:
   d8b62:	e603      	b.n	d876c <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_+0x78>

000d8b64 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point>:
{
   d8b64:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
   d8b66:	f101 0518 	add.w	r5, r1, #24
{
   d8b6a:	b087      	sub	sp, #28
   d8b6c:	4606      	mov	r6, r0
   d8b6e:	460f      	mov	r7, r1
    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
   d8b70:	4628      	mov	r0, r5
   d8b72:	2100      	movs	r1, #0
   d8b74:	f008 fb11 	bl	e119a <mbedtls_mpi_cmp_int>
   d8b78:	4604      	mov	r4, r0
   d8b7a:	2800      	cmp	r0, #0
   d8b7c:	d04c      	beq.n	d8c18 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xb4>
    mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
   d8b7e:	4668      	mov	r0, sp
   d8b80:	f007 ffeb 	bl	e0b5a <mbedtls_mpi_init>
   d8b84:	a803      	add	r0, sp, #12
   d8b86:	f007 ffe8 	bl	e0b5a <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );
   d8b8a:	1d32      	adds	r2, r6, #4
   d8b8c:	4629      	mov	r1, r5
   d8b8e:	4668      	mov	r0, sp
   d8b90:	f009 f96b 	bl	e1e6a <mbedtls_mpi_inv_mod>
   d8b94:	4604      	mov	r4, r0
   d8b96:	bbc8      	cbnz	r0, d8c0c <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
   d8b98:	466a      	mov	r2, sp
   d8b9a:	4669      	mov	r1, sp
   d8b9c:	a803      	add	r0, sp, #12
   d8b9e:	f008 fc18 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d8ba2:	4604      	mov	r4, r0
   d8ba4:	bb90      	cbnz	r0, d8c0c <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa8>
   d8ba6:	4631      	mov	r1, r6
   d8ba8:	a803      	add	r0, sp, #12
   d8baa:	f7ff fd5d 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8bae:	4604      	mov	r4, r0
   d8bb0:	bb60      	cbnz	r0, d8c0c <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
   d8bb2:	aa03      	add	r2, sp, #12
   d8bb4:	4639      	mov	r1, r7
   d8bb6:	4638      	mov	r0, r7
   d8bb8:	f008 fc0b 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d8bbc:	4604      	mov	r4, r0
   d8bbe:	bb28      	cbnz	r0, d8c0c <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa8>
   d8bc0:	4631      	mov	r1, r6
   d8bc2:	4638      	mov	r0, r7
   d8bc4:	f7ff fd50 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8bc8:	4604      	mov	r4, r0
   d8bca:	b9f8      	cbnz	r0, d8c0c <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
   d8bcc:	370c      	adds	r7, #12
   d8bce:	aa03      	add	r2, sp, #12
   d8bd0:	4639      	mov	r1, r7
   d8bd2:	4638      	mov	r0, r7
   d8bd4:	f008 fbfd 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d8bd8:	4604      	mov	r4, r0
   d8bda:	b9b8      	cbnz	r0, d8c0c <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa8>
   d8bdc:	4631      	mov	r1, r6
   d8bde:	4638      	mov	r0, r7
   d8be0:	f7ff fd42 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8be4:	4604      	mov	r4, r0
   d8be6:	b988      	cbnz	r0, d8c0c <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
   d8be8:	466a      	mov	r2, sp
   d8bea:	4639      	mov	r1, r7
   d8bec:	4638      	mov	r0, r7
   d8bee:	f008 fbf0 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d8bf2:	4604      	mov	r4, r0
   d8bf4:	b950      	cbnz	r0, d8c0c <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa8>
   d8bf6:	4631      	mov	r1, r6
   d8bf8:	4638      	mov	r0, r7
   d8bfa:	f7ff fd35 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8bfe:	4604      	mov	r4, r0
   d8c00:	b920      	cbnz	r0, d8c0c <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
   d8c02:	2101      	movs	r1, #1
   d8c04:	4628      	mov	r0, r5
   d8c06:	f008 f883 	bl	e0d10 <mbedtls_mpi_lset>
   d8c0a:	4604      	mov	r4, r0
    mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
   d8c0c:	4668      	mov	r0, sp
   d8c0e:	f007 ffaa 	bl	e0b66 <mbedtls_mpi_free>
   d8c12:	a803      	add	r0, sp, #12
   d8c14:	f007 ffa7 	bl	e0b66 <mbedtls_mpi_free>
}
   d8c18:	4620      	mov	r0, r4
   d8c1a:	b007      	add	sp, #28
   d8c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d8c20 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0>:
static int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,
   d8c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8c24:	4605      	mov	r5, r0
   d8c26:	b08d      	sub	sp, #52	; 0x34
   d8c28:	468a      	mov	sl, r1
    if( ( c = (mbedtls_mpi *)mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
   d8c2a:	4610      	mov	r0, r2
   d8c2c:	210c      	movs	r1, #12
static int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,
   d8c2e:	4614      	mov	r4, r2
    if( ( c = (mbedtls_mpi *)mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
   d8c30:	f010 f864 	bl	e8cfc <calloc>
   d8c34:	4606      	mov	r6, r0
   d8c36:	2800      	cmp	r0, #0
   d8c38:	f000 80f3 	beq.w	d8e22 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0x202>
   d8c3c:	270c      	movs	r7, #12
   d8c3e:	fb07 f304 	mul.w	r3, r7, r4
   d8c42:	4681      	mov	r9, r0
   d8c44:	9301      	str	r3, [sp, #4]
   d8c46:	eb03 0b00 	add.w	fp, r3, r0
   d8c4a:	4680      	mov	r8, r0
    for( i = 0; i < T_size; i++ )
   d8c4c:	45c3      	cmp	fp, r8
   d8c4e:	d005      	beq.n	d8c5c <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0x3c>
        mbedtls_mpi_init( &c[i] );
   d8c50:	4640      	mov	r0, r8
   d8c52:	f007 ff82 	bl	e0b5a <mbedtls_mpi_init>
    for( i = 0; i < T_size; i++ )
   d8c56:	f108 080c 	add.w	r8, r8, #12
   d8c5a:	e7f7      	b.n	d8c4c <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0x2c>
    mbedtls_mpi_init( &u ); mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
   d8c5c:	a803      	add	r0, sp, #12
   d8c5e:	f007 ff7c 	bl	e0b5a <mbedtls_mpi_init>
   d8c62:	a806      	add	r0, sp, #24
   d8c64:	f007 ff79 	bl	e0b5a <mbedtls_mpi_init>
   d8c68:	a809      	add	r0, sp, #36	; 0x24
   d8c6a:	f007 ff76 	bl	e0b5a <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
   d8c6e:	f8da 1000 	ldr.w	r1, [sl]
   d8c72:	4630      	mov	r0, r6
   d8c74:	3118      	adds	r1, #24
   d8c76:	f007 ffed 	bl	e0c54 <mbedtls_mpi_copy>
   d8c7a:	4602      	mov	r2, r0
   d8c7c:	2800      	cmp	r0, #0
   d8c7e:	d138      	bne.n	d8cf2 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
   d8c80:	f106 0b0c 	add.w	fp, r6, #12
    for( i = 1; i < T_size; i++ )
   d8c84:	2701      	movs	r7, #1
   d8c86:	42bc      	cmp	r4, r7
   d8c88:	d913      	bls.n	d8cb2 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0x92>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &c[i], &c[i-1], &T[i]->Z ) );
   d8c8a:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   d8c8e:	f1ab 010c 	sub.w	r1, fp, #12
   d8c92:	3218      	adds	r2, #24
   d8c94:	4658      	mov	r0, fp
   d8c96:	f008 fb9c 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d8c9a:	4602      	mov	r2, r0
   d8c9c:	bb48      	cbnz	r0, d8cf2 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
        MOD_MUL( c[i] );
   d8c9e:	4658      	mov	r0, fp
   d8ca0:	4629      	mov	r1, r5
   d8ca2:	f7ff fce1 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8ca6:	f10b 0b0c 	add.w	fp, fp, #12
   d8caa:	4602      	mov	r2, r0
   d8cac:	bb08      	cbnz	r0, d8cf2 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
    for( i = 1; i < T_size; i++ )
   d8cae:	3701      	adds	r7, #1
   d8cb0:	e7e9      	b.n	d8c86 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0x66>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[T_size-1], &grp->P ) );
   d8cb2:	9b01      	ldr	r3, [sp, #4]
   d8cb4:	f1a3 010c 	sub.w	r1, r3, #12
   d8cb8:	1d2a      	adds	r2, r5, #4
   d8cba:	4431      	add	r1, r6
   d8cbc:	a803      	add	r0, sp, #12
   d8cbe:	f009 f8d4 	bl	e1e6a <mbedtls_mpi_inv_mod>
   d8cc2:	4602      	mov	r2, r0
   d8cc4:	b9a8      	cbnz	r0, d8cf2 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
    for( i = T_size - 1; ; i-- )
   d8cc6:	1e67      	subs	r7, r4, #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
   d8cc8:	f04f 0b0c 	mov.w	fp, #12
   d8ccc:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
   d8cd0:	f1a6 0a0c 	sub.w	sl, r6, #12
        if( i == 0 ) {
   d8cd4:	bb17      	cbnz	r7, d8d1c <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xfc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );
   d8cd6:	a903      	add	r1, sp, #12
   d8cd8:	a806      	add	r0, sp, #24
   d8cda:	f007 ffbb 	bl	e0c54 <mbedtls_mpi_copy>
   d8cde:	4602      	mov	r2, r0
   d8ce0:	b938      	cbnz	r0, d8cf2 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
   d8ce2:	aa06      	add	r2, sp, #24
   d8ce4:	4611      	mov	r1, r2
   d8ce6:	a809      	add	r0, sp, #36	; 0x24
   d8ce8:	f008 fb73 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d8cec:	4602      	mov	r2, r0
   d8cee:	2800      	cmp	r0, #0
   d8cf0:	d033      	beq.n	d8d5a <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0x13a>
    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
   d8cf2:	a803      	add	r0, sp, #12
   d8cf4:	9201      	str	r2, [sp, #4]
   d8cf6:	f007 ff36 	bl	e0b66 <mbedtls_mpi_free>
   d8cfa:	a806      	add	r0, sp, #24
   d8cfc:	f007 ff33 	bl	e0b66 <mbedtls_mpi_free>
   d8d00:	a809      	add	r0, sp, #36	; 0x24
   d8d02:	f007 ff30 	bl	e0b66 <mbedtls_mpi_free>
   d8d06:	9a01      	ldr	r2, [sp, #4]
    for( i = 0; i < T_size; i++ )
   d8d08:	9201      	str	r2, [sp, #4]
   d8d0a:	45c1      	cmp	r9, r8
   d8d0c:	f000 8081 	beq.w	d8e12 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0x1f2>
        mbedtls_mpi_free( &c[i] );
   d8d10:	4648      	mov	r0, r9
   d8d12:	f007 ff28 	bl	e0b66 <mbedtls_mpi_free>
    for( i = 0; i < T_size; i++ )
   d8d16:	f109 090c 	add.w	r9, r9, #12
   d8d1a:	e7f4      	b.n	d8d06 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xe6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
   d8d1c:	fb0b a207 	mla	r2, fp, r7, sl
   d8d20:	a903      	add	r1, sp, #12
   d8d22:	a806      	add	r0, sp, #24
   d8d24:	f008 fb55 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d8d28:	4602      	mov	r2, r0
   d8d2a:	2800      	cmp	r0, #0
   d8d2c:	d1e1      	bne.n	d8cf2 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
   d8d2e:	4629      	mov	r1, r5
   d8d30:	a806      	add	r0, sp, #24
   d8d32:	f7ff fc99 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8d36:	4602      	mov	r2, r0
   d8d38:	2800      	cmp	r0, #0
   d8d3a:	d1da      	bne.n	d8cf2 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
   d8d3c:	f854 2c04 	ldr.w	r2, [r4, #-4]
   d8d40:	a903      	add	r1, sp, #12
   d8d42:	3218      	adds	r2, #24
   d8d44:	4608      	mov	r0, r1
   d8d46:	f008 fb44 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d8d4a:	4602      	mov	r2, r0
   d8d4c:	2800      	cmp	r0, #0
   d8d4e:	d1d0      	bne.n	d8cf2 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
   d8d50:	4629      	mov	r1, r5
   d8d52:	a803      	add	r0, sp, #12
   d8d54:	f7ff fc88 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8d58:	e7c1      	b.n	d8cde <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xbe>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
   d8d5a:	4629      	mov	r1, r5
   d8d5c:	a809      	add	r0, sp, #36	; 0x24
   d8d5e:	f7ff fc83 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8d62:	4602      	mov	r2, r0
   d8d64:	2800      	cmp	r0, #0
   d8d66:	d1c4      	bne.n	d8cf2 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
   d8d68:	f854 1c04 	ldr.w	r1, [r4, #-4]
   d8d6c:	aa09      	add	r2, sp, #36	; 0x24
   d8d6e:	4608      	mov	r0, r1
   d8d70:	f008 fb2f 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d8d74:	4602      	mov	r2, r0
   d8d76:	2800      	cmp	r0, #0
   d8d78:	d1bb      	bne.n	d8cf2 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
   d8d7a:	f854 0c04 	ldr.w	r0, [r4, #-4]
   d8d7e:	4629      	mov	r1, r5
   d8d80:	f7ff fc72 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8d84:	4602      	mov	r2, r0
   d8d86:	2800      	cmp	r0, #0
   d8d88:	d1b3      	bne.n	d8cf2 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
   d8d8a:	f854 1c04 	ldr.w	r1, [r4, #-4]
   d8d8e:	310c      	adds	r1, #12
   d8d90:	aa09      	add	r2, sp, #36	; 0x24
   d8d92:	4608      	mov	r0, r1
   d8d94:	f008 fb1d 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d8d98:	4602      	mov	r2, r0
   d8d9a:	2800      	cmp	r0, #0
   d8d9c:	d1a9      	bne.n	d8cf2 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
   d8d9e:	f854 0c04 	ldr.w	r0, [r4, #-4]
   d8da2:	4629      	mov	r1, r5
   d8da4:	300c      	adds	r0, #12
   d8da6:	f7ff fc5f 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8daa:	4602      	mov	r2, r0
   d8dac:	2800      	cmp	r0, #0
   d8dae:	d1a0      	bne.n	d8cf2 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
   d8db0:	f854 1c04 	ldr.w	r1, [r4, #-4]
   d8db4:	310c      	adds	r1, #12
   d8db6:	aa06      	add	r2, sp, #24
   d8db8:	4608      	mov	r0, r1
   d8dba:	f008 fb0a 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d8dbe:	4602      	mov	r2, r0
   d8dc0:	2800      	cmp	r0, #0
   d8dc2:	d196      	bne.n	d8cf2 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
   d8dc4:	f854 0c04 	ldr.w	r0, [r4, #-4]
   d8dc8:	4629      	mov	r1, r5
   d8dca:	300c      	adds	r0, #12
   d8dcc:	f7ff fc4c 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d8dd0:	4602      	mov	r2, r0
   d8dd2:	2800      	cmp	r0, #0
   d8dd4:	d18d      	bne.n	d8cf2 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
   d8dd6:	68a9      	ldr	r1, [r5, #8]
   d8dd8:	f854 0c04 	ldr.w	r0, [r4, #-4]
   d8ddc:	f007 ff00 	bl	e0be0 <mbedtls_mpi_shrink>
   d8de0:	4602      	mov	r2, r0
   d8de2:	2800      	cmp	r0, #0
   d8de4:	d185      	bne.n	d8cf2 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );
   d8de6:	f854 0c04 	ldr.w	r0, [r4, #-4]
   d8dea:	68a9      	ldr	r1, [r5, #8]
   d8dec:	300c      	adds	r0, #12
   d8dee:	f007 fef7 	bl	e0be0 <mbedtls_mpi_shrink>
   d8df2:	4602      	mov	r2, r0
   d8df4:	2800      	cmp	r0, #0
   d8df6:	f47f af7c 	bne.w	d8cf2 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
   d8dfa:	9001      	str	r0, [sp, #4]
        mbedtls_mpi_free( &T[i]->Z );
   d8dfc:	f854 0d04 	ldr.w	r0, [r4, #-4]!
   d8e00:	3018      	adds	r0, #24
   d8e02:	f007 feb0 	bl	e0b66 <mbedtls_mpi_free>
        if( i == 0 )
   d8e06:	9a01      	ldr	r2, [sp, #4]
   d8e08:	2f00      	cmp	r7, #0
   d8e0a:	f43f af72 	beq.w	d8cf2 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xd2>
    for( i = T_size - 1; ; i-- )
   d8e0e:	3f01      	subs	r7, #1
        if( i == 0 ) {
   d8e10:	e760      	b.n	d8cd4 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0xb4>
    mbedtls_free( c );
   d8e12:	4630      	mov	r0, r6
   d8e14:	f00c fdc8 	bl	e59a8 <free>
    return( ret );
   d8e18:	9a01      	ldr	r2, [sp, #4]
}
   d8e1a:	4610      	mov	r0, r2
   d8e1c:	b00d      	add	sp, #52	; 0x34
   d8e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );
   d8e22:	4a01      	ldr	r2, [pc, #4]	; (d8e28 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0x208>)
   d8e24:	e7f9      	b.n	d8e1a <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0+0x1fa>
   d8e26:	bf00      	nop
   d8e28:	ffffb280 	.word	0xffffb280

000d8e2c <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh>:
 * See ecp_comb_recode_core() for background
 */
static int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                            const mbedtls_ecp_point T[], unsigned char T_size,
                            unsigned char i )
{
   d8e2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8e30:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
   d8e34:	4606      	mov	r6, r0
   d8e36:	460d      	mov	r5, r1
   d8e38:	461f      	mov	r7, r3
    int ret;
    unsigned char ii, j;

    /* Ignore the "sign" bit and scale down */
    ii =  ( i & 0x7Fu ) >> 1;
   d8e3a:	f3c8 0a45 	ubfx	sl, r8, #1, #6

    /* Read the whole table to thwart cache-based timing attacks */
    for( j = 0; j < T_size; j++ )
   d8e3e:	f102 040c 	add.w	r4, r2, #12
    ii =  ( i & 0x7Fu ) >> 1;
   d8e42:	f04f 0b00 	mov.w	fp, #0
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
   d8e46:	f101 090c 	add.w	r9, r1, #12
    for( j = 0; j < T_size; j++ )
   d8e4a:	45bb      	cmp	fp, r7
   d8e4c:	d019      	beq.n	d8e82 <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh+0x56>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
   d8e4e:	fa5f f28b 	uxtb.w	r2, fp
   d8e52:	eba2 030a 	sub.w	r3, r2, sl
   d8e56:	425a      	negs	r2, r3
   d8e58:	415a      	adcs	r2, r3
   d8e5a:	f1a4 010c 	sub.w	r1, r4, #12
   d8e5e:	4628      	mov	r0, r5
   d8e60:	9201      	str	r2, [sp, #4]
   d8e62:	f007 ff23 	bl	e0cac <mbedtls_mpi_safe_cond_assign>
   d8e66:	b948      	cbnz	r0, d8e7c <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh+0x50>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
   d8e68:	4621      	mov	r1, r4
   d8e6a:	9a01      	ldr	r2, [sp, #4]
   d8e6c:	4648      	mov	r0, r9
   d8e6e:	f007 ff1d 	bl	e0cac <mbedtls_mpi_safe_cond_assign>
   d8e72:	f10b 0b01 	add.w	fp, fp, #1
   d8e76:	3424      	adds	r4, #36	; 0x24
   d8e78:	2800      	cmp	r0, #0
   d8e7a:	d0e6      	beq.n	d8e4a <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh+0x1e>
    /* Safely invert result if i is "negative" */
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );

cleanup:
    return( ret );
}
   d8e7c:	b003      	add	sp, #12
   d8e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
   d8e82:	ea4f 12d8 	mov.w	r2, r8, lsr #7
   d8e86:	4629      	mov	r1, r5
   d8e88:	4630      	mov	r0, r6
}
   d8e8a:	b003      	add	sp, #12
   d8e8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
   d8e90:	f7ff bbc7 	b.w	d8622 <_ZL19ecp_safe_invert_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointh>

000d8e94 <mbedtls_ecp_point_free.part.0>:
void mbedtls_ecp_point_free( mbedtls_ecp_point *pt )
   d8e94:	b510      	push	{r4, lr}
   d8e96:	4604      	mov	r4, r0
    mbedtls_mpi_free( &( pt->X ) );
   d8e98:	f007 fe65 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Y ) );
   d8e9c:	f104 000c 	add.w	r0, r4, #12
   d8ea0:	f007 fe61 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Z ) );
   d8ea4:	f104 0018 	add.w	r0, r4, #24
}
   d8ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &( pt->Z ) );
   d8eac:	f007 be5b 	b.w	e0b66 <mbedtls_mpi_free>

000d8eb0 <mbedtls_ecp_grp_id_list>:
{
   d8eb0:	b570      	push	{r4, r5, r6, lr}
    if( ! init_done )
   d8eb2:	4a0a      	ldr	r2, [pc, #40]	; (d8edc <mbedtls_ecp_grp_id_list+0x2c>)
   d8eb4:	6813      	ldr	r3, [r2, #0]
   d8eb6:	b973      	cbnz	r3, d8ed6 <mbedtls_ecp_grp_id_list+0x26>
   d8eb8:	4809      	ldr	r0, [pc, #36]	; (d8ee0 <mbedtls_ecp_grp_id_list+0x30>)
             curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
   d8eba:	4d0a      	ldr	r5, [pc, #40]	; (d8ee4 <mbedtls_ecp_grp_id_list+0x34>)
   d8ebc:	4604      	mov	r4, r0
   d8ebe:	260c      	movs	r6, #12
   d8ec0:	fb06 f103 	mul.w	r1, r6, r3
   d8ec4:	5d49      	ldrb	r1, [r1, r5]
   d8ec6:	b119      	cbz	r1, d8ed0 <mbedtls_ecp_grp_id_list+0x20>
            ecp_supported_grp_id[i++] = curve_info->grp_id;
   d8ec8:	f800 1b01 	strb.w	r1, [r0], #1
   d8ecc:	3301      	adds	r3, #1
        for( curve_info = mbedtls_ecp_curve_list();
   d8ece:	e7f7      	b.n	d8ec0 <mbedtls_ecp_grp_id_list+0x10>
        ecp_supported_grp_id[i] = MBEDTLS_ECP_DP_NONE;
   d8ed0:	54e1      	strb	r1, [r4, r3]
        init_done = 1;
   d8ed2:	2301      	movs	r3, #1
   d8ed4:	6013      	str	r3, [r2, #0]
}
   d8ed6:	4802      	ldr	r0, [pc, #8]	; (d8ee0 <mbedtls_ecp_grp_id_list+0x30>)
   d8ed8:	bd70      	pop	{r4, r5, r6, pc}
   d8eda:	bf00      	nop
   d8edc:	2003c3e4 	.word	0x2003c3e4
   d8ee0:	2003c3e0 	.word	0x2003c3e0
   d8ee4:	000eb9b4 	.word	0x000eb9b4

000d8ee8 <mbedtls_ecp_curve_info_from_grp_id>:
{
   d8ee8:	4602      	mov	r2, r0
    for( curve_info = mbedtls_ecp_curve_list();
   d8eea:	4804      	ldr	r0, [pc, #16]	; (d8efc <mbedtls_ecp_curve_info_from_grp_id+0x14>)
         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
   d8eec:	7803      	ldrb	r3, [r0, #0]
   d8eee:	b11b      	cbz	r3, d8ef8 <mbedtls_ecp_curve_info_from_grp_id+0x10>
        if( curve_info->grp_id == grp_id )
   d8ef0:	4293      	cmp	r3, r2
   d8ef2:	d002      	beq.n	d8efa <mbedtls_ecp_curve_info_from_grp_id+0x12>
    for( curve_info = mbedtls_ecp_curve_list();
   d8ef4:	300c      	adds	r0, #12
   d8ef6:	e7f9      	b.n	d8eec <mbedtls_ecp_curve_info_from_grp_id+0x4>
    return( NULL );
   d8ef8:	4618      	mov	r0, r3
}
   d8efa:	4770      	bx	lr
   d8efc:	000eb9b4 	.word	0x000eb9b4

000d8f00 <mbedtls_ecp_curve_info_from_tls_id>:
        if( curve_info->tls_id == tls_id )
   d8f00:	2817      	cmp	r0, #23
}
   d8f02:	4802      	ldr	r0, [pc, #8]	; (d8f0c <mbedtls_ecp_curve_info_from_tls_id+0xc>)
   d8f04:	bf18      	it	ne
   d8f06:	2000      	movne	r0, #0
   d8f08:	4770      	bx	lr
   d8f0a:	bf00      	nop
   d8f0c:	000eb9b4 	.word	0x000eb9b4

000d8f10 <mbedtls_ecp_point_init>:
{
   d8f10:	b510      	push	{r4, lr}
   d8f12:	4604      	mov	r4, r0
    mbedtls_mpi_init( &pt->X );
   d8f14:	f007 fe21 	bl	e0b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Y );
   d8f18:	f104 000c 	add.w	r0, r4, #12
   d8f1c:	f007 fe1d 	bl	e0b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Z );
   d8f20:	f104 0018 	add.w	r0, r4, #24
}
   d8f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_init( &pt->Z );
   d8f28:	f007 be17 	b.w	e0b5a <mbedtls_mpi_init>

000d8f2c <mbedtls_ecp_group_init>:
{
   d8f2c:	b538      	push	{r3, r4, r5, lr}
    grp->id = MBEDTLS_ECP_DP_NONE;
   d8f2e:	2500      	movs	r5, #0
{
   d8f30:	4604      	mov	r4, r0
    grp->id = MBEDTLS_ECP_DP_NONE;
   d8f32:	f800 5b04 	strb.w	r5, [r0], #4
    mbedtls_mpi_init( &grp->P );
   d8f36:	f007 fe10 	bl	e0b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->A );
   d8f3a:	f104 0010 	add.w	r0, r4, #16
   d8f3e:	f007 fe0c 	bl	e0b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->B );
   d8f42:	f104 001c 	add.w	r0, r4, #28
   d8f46:	f007 fe08 	bl	e0b5a <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &grp->G );
   d8f4a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d8f4e:	f7ff ffdf 	bl	d8f10 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &grp->N );
   d8f52:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d8f56:	f007 fe00 	bl	e0b5a <mbedtls_mpi_init>
    grp->nbits = 0;
   d8f5a:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
    grp->modp = NULL;
   d8f5e:	e9c4 5518 	strd	r5, r5, [r4, #96]	; 0x60
    grp->t_post = NULL;
   d8f62:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    grp->T = NULL;
   d8f66:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
    grp->T_size = 0;
   d8f6a:	67a5      	str	r5, [r4, #120]	; 0x78
}
   d8f6c:	bd38      	pop	{r3, r4, r5, pc}

000d8f6e <mbedtls_ecp_keypair_init>:
{
   d8f6e:	b510      	push	{r4, lr}
   d8f70:	4604      	mov	r4, r0
    mbedtls_ecp_group_init( &key->grp );
   d8f72:	f7ff ffdb 	bl	d8f2c <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &key->d );
   d8f76:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   d8f7a:	f007 fdee 	bl	e0b5a <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &key->Q );
   d8f7e:	f104 0088 	add.w	r0, r4, #136	; 0x88
}
   d8f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_ecp_point_init( &key->Q );
   d8f86:	f7ff bfc3 	b.w	d8f10 <mbedtls_ecp_point_init>

000d8f8a <mbedtls_ecp_point_free>:
    if( pt == NULL )
   d8f8a:	b108      	cbz	r0, d8f90 <mbedtls_ecp_point_free+0x6>
   d8f8c:	f7ff bf82 	b.w	d8e94 <mbedtls_ecp_point_free.part.0>
}
   d8f90:	4770      	bx	lr

000d8f92 <mbedtls_ecp_group_free>:
{
   d8f92:	b570      	push	{r4, r5, r6, lr}
    if( grp == NULL )
   d8f94:	4604      	mov	r4, r0
   d8f96:	b358      	cbz	r0, d8ff0 <mbedtls_ecp_group_free+0x5e>
    if( grp->h != 1 )
   d8f98:	6e03      	ldr	r3, [r0, #96]	; 0x60
   d8f9a:	2b01      	cmp	r3, #1
   d8f9c:	d012      	beq.n	d8fc4 <mbedtls_ecp_group_free+0x32>
        mbedtls_mpi_free( &grp->P );
   d8f9e:	3004      	adds	r0, #4
   d8fa0:	f007 fde1 	bl	e0b66 <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->A );
   d8fa4:	f104 0010 	add.w	r0, r4, #16
   d8fa8:	f007 fddd 	bl	e0b66 <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->B );
   d8fac:	f104 001c 	add.w	r0, r4, #28
   d8fb0:	f007 fdd9 	bl	e0b66 <mbedtls_mpi_free>
        mbedtls_ecp_point_free( &grp->G );
   d8fb4:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d8fb8:	f7ff ffe7 	bl	d8f8a <mbedtls_ecp_point_free>
        mbedtls_mpi_free( &grp->N );
   d8fbc:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d8fc0:	f007 fdd1 	bl	e0b66 <mbedtls_mpi_free>
    if( grp->T != NULL )
   d8fc4:	6f63      	ldr	r3, [r4, #116]	; 0x74
   d8fc6:	b16b      	cbz	r3, d8fe4 <mbedtls_ecp_group_free+0x52>
        for( i = 0; i < grp->T_size; i++ )
   d8fc8:	2500      	movs	r5, #0
            mbedtls_ecp_point_free( &grp->T[i] );
   d8fca:	2624      	movs	r6, #36	; 0x24
        for( i = 0; i < grp->T_size; i++ )
   d8fcc:	e9d4 031d 	ldrd	r0, r3, [r4, #116]	; 0x74
   d8fd0:	42ab      	cmp	r3, r5
   d8fd2:	d905      	bls.n	d8fe0 <mbedtls_ecp_group_free+0x4e>
            mbedtls_ecp_point_free( &grp->T[i] );
   d8fd4:	fb06 0005 	mla	r0, r6, r5, r0
   d8fd8:	f7ff ffd7 	bl	d8f8a <mbedtls_ecp_point_free>
        for( i = 0; i < grp->T_size; i++ )
   d8fdc:	3501      	adds	r5, #1
   d8fde:	e7f5      	b.n	d8fcc <mbedtls_ecp_group_free+0x3a>
        mbedtls_free( grp->T );
   d8fe0:	f00c fce2 	bl	e59a8 <free>
    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
   d8fe4:	4620      	mov	r0, r4
   d8fe6:	217c      	movs	r1, #124	; 0x7c
}
   d8fe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
   d8fec:	f009 bdea 	b.w	e2bc4 <mbedtls_platform_zeroize>
}
   d8ff0:	bd70      	pop	{r4, r5, r6, pc}

000d8ff2 <mbedtls_ecp_keypair_free>:
{
   d8ff2:	b510      	push	{r4, lr}
    if( key == NULL )
   d8ff4:	4604      	mov	r4, r0
   d8ff6:	b158      	cbz	r0, d9010 <mbedtls_ecp_keypair_free+0x1e>
    mbedtls_ecp_group_free( &key->grp );
   d8ff8:	f7ff ffcb 	bl	d8f92 <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &key->d );
   d8ffc:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   d9000:	f007 fdb1 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &key->Q );
   d9004:	f104 0088 	add.w	r0, r4, #136	; 0x88
}
   d9008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_ecp_point_free( &key->Q );
   d900c:	f7ff bfbd 	b.w	d8f8a <mbedtls_ecp_point_free>
}
   d9010:	bd10      	pop	{r4, pc}

000d9012 <mbedtls_ecp_copy>:
{
   d9012:	b538      	push	{r3, r4, r5, lr}
   d9014:	4604      	mov	r4, r0
   d9016:	460d      	mov	r5, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
   d9018:	f007 fe1c 	bl	e0c54 <mbedtls_mpi_copy>
   d901c:	b970      	cbnz	r0, d903c <mbedtls_ecp_copy+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
   d901e:	f105 010c 	add.w	r1, r5, #12
   d9022:	f104 000c 	add.w	r0, r4, #12
   d9026:	f007 fe15 	bl	e0c54 <mbedtls_mpi_copy>
   d902a:	b938      	cbnz	r0, d903c <mbedtls_ecp_copy+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
   d902c:	f105 0118 	add.w	r1, r5, #24
   d9030:	f104 0018 	add.w	r0, r4, #24
}
   d9034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
   d9038:	f007 be0c 	b.w	e0c54 <mbedtls_mpi_copy>
}
   d903c:	bd38      	pop	{r3, r4, r5, pc}

000d903e <mbedtls_ecp_group_copy>:
    return( mbedtls_ecp_group_load( dst, src->id ) );
   d903e:	7809      	ldrb	r1, [r1, #0]
   d9040:	f004 bad2 	b.w	dd5e8 <mbedtls_ecp_group_load>

000d9044 <mbedtls_ecp_set_zero>:
{
   d9044:	b510      	push	{r4, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
   d9046:	2101      	movs	r1, #1
{
   d9048:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
   d904a:	f007 fe61 	bl	e0d10 <mbedtls_mpi_lset>
   d904e:	b960      	cbnz	r0, d906a <mbedtls_ecp_set_zero+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
   d9050:	2101      	movs	r1, #1
   d9052:	f104 000c 	add.w	r0, r4, #12
   d9056:	f007 fe5b 	bl	e0d10 <mbedtls_mpi_lset>
   d905a:	b930      	cbnz	r0, d906a <mbedtls_ecp_set_zero+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
   d905c:	4601      	mov	r1, r0
   d905e:	f104 0018 	add.w	r0, r4, #24
}
   d9062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
   d9066:	f007 be53 	b.w	e0d10 <mbedtls_mpi_lset>
}
   d906a:	bd10      	pop	{r4, pc}

000d906c <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_>:
{
   d906c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   d9070:	f102 0918 	add.w	r9, r2, #24
{
   d9074:	b096      	sub	sp, #88	; 0x58
   d9076:	4607      	mov	r7, r0
   d9078:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   d907a:	4648      	mov	r0, r9
   d907c:	2100      	movs	r1, #0
{
   d907e:	4616      	mov	r6, r2
   d9080:	4698      	mov	r8, r3
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   d9082:	f008 f88a 	bl	e119a <mbedtls_mpi_cmp_int>
   d9086:	b940      	cbnz	r0, d909a <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2e>
        return( mbedtls_ecp_copy( R, Q ) );
   d9088:	4641      	mov	r1, r8
        return( mbedtls_ecp_copy( R, P ) );
   d908a:	4628      	mov	r0, r5
   d908c:	f7ff ffc1 	bl	d9012 <mbedtls_ecp_copy>
   d9090:	4604      	mov	r4, r0
}
   d9092:	4620      	mov	r0, r4
   d9094:	b016      	add	sp, #88	; 0x58
   d9096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )
   d909a:	f8d8 3020 	ldr.w	r3, [r8, #32]
   d909e:	2b00      	cmp	r3, #0
   d90a0:	f040 80d6 	bne.w	d9250 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x1e4>
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 ); mbedtls_mpi_init( &T3 ); mbedtls_mpi_init( &T4 );
   d90a4:	a801      	add	r0, sp, #4
   d90a6:	f007 fd58 	bl	e0b5a <mbedtls_mpi_init>
   d90aa:	a804      	add	r0, sp, #16
   d90ac:	f007 fd55 	bl	e0b5a <mbedtls_mpi_init>
   d90b0:	a807      	add	r0, sp, #28
   d90b2:	f007 fd52 	bl	e0b5a <mbedtls_mpi_init>
   d90b6:	a80a      	add	r0, sp, #40	; 0x28
   d90b8:	f007 fd4f 	bl	e0b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
   d90bc:	a80d      	add	r0, sp, #52	; 0x34
   d90be:	f007 fd4c 	bl	e0b5a <mbedtls_mpi_init>
   d90c2:	a810      	add	r0, sp, #64	; 0x40
   d90c4:	f007 fd49 	bl	e0b5a <mbedtls_mpi_init>
   d90c8:	a813      	add	r0, sp, #76	; 0x4c
   d90ca:	f007 fd46 	bl	e0b5a <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
   d90ce:	464a      	mov	r2, r9
   d90d0:	4649      	mov	r1, r9
   d90d2:	a801      	add	r0, sp, #4
   d90d4:	f008 f97d 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d90d8:	4604      	mov	r4, r0
   d90da:	2800      	cmp	r0, #0
   d90dc:	f040 80df 	bne.w	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d90e0:	4639      	mov	r1, r7
   d90e2:	a801      	add	r0, sp, #4
   d90e4:	f7ff fac0 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d90e8:	4604      	mov	r4, r0
   d90ea:	2800      	cmp	r0, #0
   d90ec:	f040 80d7 	bne.w	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
   d90f0:	464a      	mov	r2, r9
   d90f2:	a901      	add	r1, sp, #4
   d90f4:	a804      	add	r0, sp, #16
   d90f6:	f008 f96c 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d90fa:	4604      	mov	r4, r0
   d90fc:	2800      	cmp	r0, #0
   d90fe:	f040 80ce 	bne.w	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d9102:	4639      	mov	r1, r7
   d9104:	a804      	add	r0, sp, #16
   d9106:	f7ff faaf 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d910a:	4604      	mov	r4, r0
   d910c:	2800      	cmp	r0, #0
   d910e:	f040 80c6 	bne.w	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
   d9112:	a901      	add	r1, sp, #4
   d9114:	4642      	mov	r2, r8
   d9116:	4608      	mov	r0, r1
   d9118:	f008 f95b 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d911c:	4604      	mov	r4, r0
   d911e:	2800      	cmp	r0, #0
   d9120:	f040 80bd 	bne.w	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d9124:	4639      	mov	r1, r7
   d9126:	a801      	add	r0, sp, #4
   d9128:	f7ff fa9e 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d912c:	4604      	mov	r4, r0
   d912e:	2800      	cmp	r0, #0
   d9130:	f040 80b5 	bne.w	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
   d9134:	a904      	add	r1, sp, #16
   d9136:	f108 020c 	add.w	r2, r8, #12
   d913a:	4608      	mov	r0, r1
   d913c:	f008 f949 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d9140:	4604      	mov	r4, r0
   d9142:	2800      	cmp	r0, #0
   d9144:	f040 80ab 	bne.w	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d9148:	4639      	mov	r1, r7
   d914a:	a804      	add	r0, sp, #16
   d914c:	f7ff fa8c 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9150:	4604      	mov	r4, r0
   d9152:	2800      	cmp	r0, #0
   d9154:	f040 80a3 	bne.w	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
   d9158:	a901      	add	r1, sp, #4
   d915a:	4632      	mov	r2, r6
   d915c:	4608      	mov	r0, r1
   d915e:	f008 f8e9 	bl	e1334 <mbedtls_mpi_sub_mpi>
   d9162:	4604      	mov	r4, r0
   d9164:	2800      	cmp	r0, #0
   d9166:	f040 809a 	bne.w	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d916a:	f107 0804 	add.w	r8, r7, #4
   d916e:	9b01      	ldr	r3, [sp, #4]
   d9170:	2b00      	cmp	r3, #0
   d9172:	f2c0 8084 	blt.w	d927e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x212>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
   d9176:	a904      	add	r1, sp, #16
   d9178:	f106 080c 	add.w	r8, r6, #12
   d917c:	4642      	mov	r2, r8
   d917e:	4608      	mov	r0, r1
   d9180:	f008 f8d8 	bl	e1334 <mbedtls_mpi_sub_mpi>
   d9184:	4604      	mov	r4, r0
   d9186:	2800      	cmp	r0, #0
   d9188:	f040 8089 	bne.w	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d918c:	f107 0a04 	add.w	sl, r7, #4
   d9190:	9b04      	ldr	r3, [sp, #16]
   d9192:	2b00      	cmp	r3, #0
   d9194:	f2c0 8099 	blt.w	d92ca <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x25e>
    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )
   d9198:	2100      	movs	r1, #0
   d919a:	a801      	add	r0, sp, #4
   d919c:	f007 fffd 	bl	e119a <mbedtls_mpi_cmp_int>
   d91a0:	4601      	mov	r1, r0
   d91a2:	2800      	cmp	r0, #0
   d91a4:	f000 80a2 	beq.w	d92ec <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x280>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
   d91a8:	aa01      	add	r2, sp, #4
   d91aa:	4649      	mov	r1, r9
   d91ac:	a813      	add	r0, sp, #76	; 0x4c
   d91ae:	f008 f910 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d91b2:	4604      	mov	r4, r0
   d91b4:	2800      	cmp	r0, #0
   d91b6:	d172      	bne.n	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d91b8:	4639      	mov	r1, r7
   d91ba:	a813      	add	r0, sp, #76	; 0x4c
   d91bc:	f7ff fa54 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d91c0:	4604      	mov	r4, r0
   d91c2:	2800      	cmp	r0, #0
   d91c4:	d16b      	bne.n	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
   d91c6:	aa01      	add	r2, sp, #4
   d91c8:	4611      	mov	r1, r2
   d91ca:	a807      	add	r0, sp, #28
   d91cc:	f008 f901 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d91d0:	4604      	mov	r4, r0
   d91d2:	2800      	cmp	r0, #0
   d91d4:	d163      	bne.n	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d91d6:	4639      	mov	r1, r7
   d91d8:	a807      	add	r0, sp, #28
   d91da:	f7ff fa45 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d91de:	4604      	mov	r4, r0
   d91e0:	2800      	cmp	r0, #0
   d91e2:	d15c      	bne.n	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
   d91e4:	aa01      	add	r2, sp, #4
   d91e6:	a907      	add	r1, sp, #28
   d91e8:	a80a      	add	r0, sp, #40	; 0x28
   d91ea:	f008 f8f2 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d91ee:	4604      	mov	r4, r0
   d91f0:	2800      	cmp	r0, #0
   d91f2:	d154      	bne.n	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d91f4:	4639      	mov	r1, r7
   d91f6:	a80a      	add	r0, sp, #40	; 0x28
   d91f8:	f7ff fa36 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d91fc:	4604      	mov	r4, r0
   d91fe:	2800      	cmp	r0, #0
   d9200:	d14d      	bne.n	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
   d9202:	a907      	add	r1, sp, #28
   d9204:	4632      	mov	r2, r6
   d9206:	4608      	mov	r0, r1
   d9208:	f008 f8e3 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d920c:	4604      	mov	r4, r0
   d920e:	2800      	cmp	r0, #0
   d9210:	d145      	bne.n	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d9212:	4639      	mov	r1, r7
   d9214:	a807      	add	r0, sp, #28
   d9216:	f7ff fa27 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d921a:	4604      	mov	r4, r0
   d921c:	2800      	cmp	r0, #0
   d921e:	d13e      	bne.n	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
   d9220:	2202      	movs	r2, #2
   d9222:	a907      	add	r1, sp, #28
   d9224:	a801      	add	r0, sp, #4
   d9226:	f008 f938 	bl	e149a <mbedtls_mpi_mul_int>
   d922a:	4604      	mov	r4, r0
   d922c:	2800      	cmp	r0, #0
   d922e:	d136      	bne.n	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d9230:	1d3e      	adds	r6, r7, #4
   d9232:	4631      	mov	r1, r6
   d9234:	a801      	add	r0, sp, #4
   d9236:	f007 ff6f 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   d923a:	2800      	cmp	r0, #0
   d923c:	db65      	blt.n	d930a <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x29e>
   d923e:	a901      	add	r1, sp, #4
   d9240:	4632      	mov	r2, r6
   d9242:	4608      	mov	r0, r1
   d9244:	f008 f818 	bl	e1278 <mbedtls_mpi_sub_abs>
   d9248:	4604      	mov	r4, r0
   d924a:	2800      	cmp	r0, #0
   d924c:	d0f1      	beq.n	d9232 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x1c6>
   d924e:	e026      	b.n	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )
   d9250:	f108 0418 	add.w	r4, r8, #24
   d9254:	2100      	movs	r1, #0
   d9256:	4620      	mov	r0, r4
   d9258:	f007 ff9f 	bl	e119a <mbedtls_mpi_cmp_int>
   d925c:	b908      	cbnz	r0, d9262 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x1f6>
        return( mbedtls_ecp_copy( R, P ) );
   d925e:	4631      	mov	r1, r6
   d9260:	e713      	b.n	d908a <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x1e>
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
   d9262:	f8d8 3020 	ldr.w	r3, [r8, #32]
   d9266:	2b00      	cmp	r3, #0
   d9268:	f43f af1c 	beq.w	d90a4 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x38>
   d926c:	2101      	movs	r1, #1
   d926e:	4620      	mov	r0, r4
   d9270:	f007 ff93 	bl	e119a <mbedtls_mpi_cmp_int>
   d9274:	2800      	cmp	r0, #0
   d9276:	f43f af15 	beq.w	d90a4 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x38>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d927a:	4c75      	ldr	r4, [pc, #468]	; (d9450 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3e4>)
   d927c:	e709      	b.n	d9092 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
   d927e:	2100      	movs	r1, #0
   d9280:	a801      	add	r0, sp, #4
   d9282:	f007 ff8a 	bl	e119a <mbedtls_mpi_cmp_int>
   d9286:	2800      	cmp	r0, #0
   d9288:	f43f af75 	beq.w	d9176 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x10a>
   d928c:	a901      	add	r1, sp, #4
   d928e:	4642      	mov	r2, r8
   d9290:	4608      	mov	r0, r1
   d9292:	f008 f82d 	bl	e12f0 <mbedtls_mpi_add_mpi>
   d9296:	4604      	mov	r4, r0
   d9298:	2800      	cmp	r0, #0
   d929a:	f43f af68 	beq.w	d916e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x102>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );
   d929e:	a801      	add	r0, sp, #4
   d92a0:	f007 fc61 	bl	e0b66 <mbedtls_mpi_free>
   d92a4:	a804      	add	r0, sp, #16
   d92a6:	f007 fc5e 	bl	e0b66 <mbedtls_mpi_free>
   d92aa:	a807      	add	r0, sp, #28
   d92ac:	f007 fc5b 	bl	e0b66 <mbedtls_mpi_free>
   d92b0:	a80a      	add	r0, sp, #40	; 0x28
   d92b2:	f007 fc58 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
   d92b6:	a80d      	add	r0, sp, #52	; 0x34
   d92b8:	f007 fc55 	bl	e0b66 <mbedtls_mpi_free>
   d92bc:	a810      	add	r0, sp, #64	; 0x40
   d92be:	f007 fc52 	bl	e0b66 <mbedtls_mpi_free>
   d92c2:	a813      	add	r0, sp, #76	; 0x4c
   d92c4:	f007 fc4f 	bl	e0b66 <mbedtls_mpi_free>
    return( ret );
   d92c8:	e6e3      	b.n	d9092 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
   d92ca:	2100      	movs	r1, #0
   d92cc:	a804      	add	r0, sp, #16
   d92ce:	f007 ff64 	bl	e119a <mbedtls_mpi_cmp_int>
   d92d2:	2800      	cmp	r0, #0
   d92d4:	f43f af60 	beq.w	d9198 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x12c>
   d92d8:	a904      	add	r1, sp, #16
   d92da:	4652      	mov	r2, sl
   d92dc:	4608      	mov	r0, r1
   d92de:	f008 f807 	bl	e12f0 <mbedtls_mpi_add_mpi>
   d92e2:	4604      	mov	r4, r0
   d92e4:	2800      	cmp	r0, #0
   d92e6:	f43f af53 	beq.w	d9190 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x124>
   d92ea:	e7d8      	b.n	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
        if( mbedtls_mpi_cmp_int( &T2, 0 ) == 0 )
   d92ec:	a804      	add	r0, sp, #16
   d92ee:	f007 ff54 	bl	e119a <mbedtls_mpi_cmp_int>
   d92f2:	b930      	cbnz	r0, d9302 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x296>
            ret = ecp_double_jac( grp, R, P );
   d92f4:	4632      	mov	r2, r6
   d92f6:	4629      	mov	r1, r5
   d92f8:	4638      	mov	r0, r7
   d92fa:	f7ff f9fb 	bl	d86f4 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
   d92fe:	4604      	mov	r4, r0
cleanup:
   d9300:	e7cd      	b.n	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
            ret = mbedtls_ecp_set_zero( R );
   d9302:	4628      	mov	r0, r5
   d9304:	f7ff fe9e 	bl	d9044 <mbedtls_ecp_set_zero>
   d9308:	e7f9      	b.n	d92fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x292>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
   d930a:	aa04      	add	r2, sp, #16
   d930c:	4611      	mov	r1, r2
   d930e:	a80d      	add	r0, sp, #52	; 0x34
   d9310:	f008 f85f 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d9314:	4604      	mov	r4, r0
   d9316:	2800      	cmp	r0, #0
   d9318:	d1c1      	bne.n	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d931a:	4639      	mov	r1, r7
   d931c:	a80d      	add	r0, sp, #52	; 0x34
   d931e:	f7ff f9a3 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9322:	4604      	mov	r4, r0
   d9324:	2800      	cmp	r0, #0
   d9326:	d1ba      	bne.n	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
   d9328:	a90d      	add	r1, sp, #52	; 0x34
   d932a:	aa01      	add	r2, sp, #4
   d932c:	4608      	mov	r0, r1
   d932e:	f008 f801 	bl	e1334 <mbedtls_mpi_sub_mpi>
   d9332:	4604      	mov	r4, r0
   d9334:	2800      	cmp	r0, #0
   d9336:	d1b2      	bne.n	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d9338:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d933a:	2b00      	cmp	r3, #0
   d933c:	db57      	blt.n	d93ee <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x382>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
   d933e:	a90d      	add	r1, sp, #52	; 0x34
   d9340:	aa0a      	add	r2, sp, #40	; 0x28
   d9342:	4608      	mov	r0, r1
   d9344:	f007 fff6 	bl	e1334 <mbedtls_mpi_sub_mpi>
   d9348:	4604      	mov	r4, r0
   d934a:	2800      	cmp	r0, #0
   d934c:	d1a7      	bne.n	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d934e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d9350:	2b00      	cmp	r3, #0
   d9352:	db58      	blt.n	d9406 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x39a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
   d9354:	a907      	add	r1, sp, #28
   d9356:	aa0d      	add	r2, sp, #52	; 0x34
   d9358:	4608      	mov	r0, r1
   d935a:	f007 ffeb 	bl	e1334 <mbedtls_mpi_sub_mpi>
   d935e:	4604      	mov	r4, r0
   d9360:	2800      	cmp	r0, #0
   d9362:	d19c      	bne.n	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d9364:	9b07      	ldr	r3, [sp, #28]
   d9366:	2b00      	cmp	r3, #0
   d9368:	db59      	blt.n	d941e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3b2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
   d936a:	a907      	add	r1, sp, #28
   d936c:	aa04      	add	r2, sp, #16
   d936e:	4608      	mov	r0, r1
   d9370:	f008 f82f 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d9374:	4604      	mov	r4, r0
   d9376:	2800      	cmp	r0, #0
   d9378:	d191      	bne.n	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d937a:	4639      	mov	r1, r7
   d937c:	a807      	add	r0, sp, #28
   d937e:	f7ff f973 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9382:	4604      	mov	r4, r0
   d9384:	2800      	cmp	r0, #0
   d9386:	d18a      	bne.n	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
   d9388:	a90a      	add	r1, sp, #40	; 0x28
   d938a:	4642      	mov	r2, r8
   d938c:	4608      	mov	r0, r1
   d938e:	f008 f820 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d9392:	4604      	mov	r4, r0
   d9394:	2800      	cmp	r0, #0
   d9396:	d182      	bne.n	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d9398:	4639      	mov	r1, r7
   d939a:	a80a      	add	r0, sp, #40	; 0x28
   d939c:	f7ff f964 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d93a0:	4604      	mov	r4, r0
   d93a2:	2800      	cmp	r0, #0
   d93a4:	f47f af7b 	bne.w	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
   d93a8:	aa0a      	add	r2, sp, #40	; 0x28
   d93aa:	a907      	add	r1, sp, #28
   d93ac:	a810      	add	r0, sp, #64	; 0x40
   d93ae:	f007 ffc1 	bl	e1334 <mbedtls_mpi_sub_mpi>
   d93b2:	4604      	mov	r4, r0
   d93b4:	2800      	cmp	r0, #0
   d93b6:	f47f af72 	bne.w	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
   d93ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d93bc:	2b00      	cmp	r3, #0
   d93be:	db3a      	blt.n	d9436 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x3ca>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );
   d93c0:	a90d      	add	r1, sp, #52	; 0x34
   d93c2:	4628      	mov	r0, r5
   d93c4:	f007 fc46 	bl	e0c54 <mbedtls_mpi_copy>
   d93c8:	4604      	mov	r4, r0
   d93ca:	2800      	cmp	r0, #0
   d93cc:	f47f af67 	bne.w	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
   d93d0:	a910      	add	r1, sp, #64	; 0x40
   d93d2:	f105 000c 	add.w	r0, r5, #12
   d93d6:	f007 fc3d 	bl	e0c54 <mbedtls_mpi_copy>
   d93da:	4604      	mov	r4, r0
   d93dc:	2800      	cmp	r0, #0
   d93de:	f47f af5e 	bne.w	d929e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x232>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
   d93e2:	a913      	add	r1, sp, #76	; 0x4c
   d93e4:	f105 0018 	add.w	r0, r5, #24
   d93e8:	f007 fc34 	bl	e0c54 <mbedtls_mpi_copy>
   d93ec:	e787      	b.n	d92fe <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x292>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
   d93ee:	2100      	movs	r1, #0
   d93f0:	a80d      	add	r0, sp, #52	; 0x34
   d93f2:	f007 fed2 	bl	e119a <mbedtls_mpi_cmp_int>
   d93f6:	2800      	cmp	r0, #0
   d93f8:	d0a1      	beq.n	d933e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2d2>
   d93fa:	a90d      	add	r1, sp, #52	; 0x34
   d93fc:	4632      	mov	r2, r6
   d93fe:	4608      	mov	r0, r1
   d9400:	f007 ff76 	bl	e12f0 <mbedtls_mpi_add_mpi>
   d9404:	e795      	b.n	d9332 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2c6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
   d9406:	2100      	movs	r1, #0
   d9408:	a80d      	add	r0, sp, #52	; 0x34
   d940a:	f007 fec6 	bl	e119a <mbedtls_mpi_cmp_int>
   d940e:	2800      	cmp	r0, #0
   d9410:	d0a0      	beq.n	d9354 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2e8>
   d9412:	a90d      	add	r1, sp, #52	; 0x34
   d9414:	4632      	mov	r2, r6
   d9416:	4608      	mov	r0, r1
   d9418:	f007 ff6a 	bl	e12f0 <mbedtls_mpi_add_mpi>
   d941c:	e794      	b.n	d9348 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2dc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
   d941e:	2100      	movs	r1, #0
   d9420:	a807      	add	r0, sp, #28
   d9422:	f007 feba 	bl	e119a <mbedtls_mpi_cmp_int>
   d9426:	2800      	cmp	r0, #0
   d9428:	d09f      	beq.n	d936a <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2fe>
   d942a:	a907      	add	r1, sp, #28
   d942c:	4632      	mov	r2, r6
   d942e:	4608      	mov	r0, r1
   d9430:	f007 ff5e 	bl	e12f0 <mbedtls_mpi_add_mpi>
   d9434:	e793      	b.n	d935e <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x2f2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
   d9436:	2100      	movs	r1, #0
   d9438:	a810      	add	r0, sp, #64	; 0x40
   d943a:	f007 feae 	bl	e119a <mbedtls_mpi_cmp_int>
   d943e:	2800      	cmp	r0, #0
   d9440:	d0be      	beq.n	d93c0 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x354>
   d9442:	a910      	add	r1, sp, #64	; 0x40
   d9444:	4632      	mov	r2, r6
   d9446:	4608      	mov	r0, r1
   d9448:	f007 ff52 	bl	e12f0 <mbedtls_mpi_add_mpi>
   d944c:	e7b1      	b.n	d93b2 <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_+0x346>
   d944e:	bf00      	nop
   d9450:	ffffb080 	.word	0xffffb080

000d9454 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0>:
 * once the auxiliary table has been pre-computed.
 *
 * Scalar recoding may use a parity trick that makes us compute -m * P,
 * if that is the case we'll need to recover m * P at the end.
 */
static int ecp_mul_comb_after_precomp( const mbedtls_ecp_group *grp,
   d9454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9458:	ed2d 8b02 	vpush	{d8}
   d945c:	b0d9      	sub	sp, #356	; 0x164
   d945e:	ee08 3a10 	vmov	s16, r3
   d9462:	f89d 3190 	ldrb.w	r3, [sp, #400]	; 0x190
    mbedtls_mpi_init( &M );
   d9466:	f10d 0828 	add.w	r8, sp, #40	; 0x28
static int ecp_mul_comb_after_precomp( const mbedtls_ecp_group *grp,
   d946a:	4605      	mov	r5, r0
   d946c:	ee08 3a90 	vmov	s17, r3
    mbedtls_mpi_init( &M );
   d9470:	4640      	mov	r0, r8
static int ecp_mul_comb_after_precomp( const mbedtls_ecp_group *grp,
   d9472:	f89d 3194 	ldrb.w	r3, [sp, #404]	; 0x194
   d9476:	9304      	str	r3, [sp, #16]
   d9478:	460e      	mov	r6, r1
   d947a:	4691      	mov	r9, r2
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
   d947c:	f105 074c 	add.w	r7, r5, #76	; 0x4c
    mbedtls_mpi_init( &M );
   d9480:	f007 fb6b 	bl	e0b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &mm );
   d9484:	a80d      	add	r0, sp, #52	; 0x34
   d9486:	f007 fb68 	bl	e0b5a <mbedtls_mpi_init>
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
   d948a:	2100      	movs	r1, #0
   d948c:	4638      	mov	r0, r7
   d948e:	f007 fc5b 	bl	e0d48 <mbedtls_mpi_get_bit>
   d9492:	2801      	cmp	r0, #1
   d9494:	d006      	beq.n	d94a4 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x50>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d9496:	4ca8      	ldr	r4, [pc, #672]	; (d9738 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x2e4>)
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, RR ) );
#endif

cleanup:
    return( ret );
}
   d9498:	4620      	mov	r0, r4
   d949a:	b059      	add	sp, #356	; 0x164
   d949c:	ecbd 8b02 	vpop	{d8}
   d94a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
   d94a4:	2100      	movs	r1, #0
   d94a6:	4648      	mov	r0, r9
   d94a8:	f007 fc4e 	bl	e0d48 <mbedtls_mpi_get_bit>
   d94ac:	fab0 f380 	clz	r3, r0
   d94b0:	095b      	lsrs	r3, r3, #5
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
   d94b2:	4649      	mov	r1, r9
   d94b4:	4640      	mov	r0, r8
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
   d94b6:	9303      	str	r3, [sp, #12]
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
   d94b8:	f007 fbcc 	bl	e0c54 <mbedtls_mpi_copy>
   d94bc:	4604      	mov	r4, r0
   d94be:	2800      	cmp	r0, #0
   d94c0:	d15d      	bne.n	d957e <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x12a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );
   d94c2:	464a      	mov	r2, r9
   d94c4:	4639      	mov	r1, r7
   d94c6:	a80d      	add	r0, sp, #52	; 0x34
   d94c8:	f007 ff34 	bl	e1334 <mbedtls_mpi_sub_mpi>
   d94cc:	4604      	mov	r4, r0
   d94ce:	2800      	cmp	r0, #0
   d94d0:	d155      	bne.n	d957e <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x12a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, *parity_trick ) );
   d94d2:	9a03      	ldr	r2, [sp, #12]
   d94d4:	a90d      	add	r1, sp, #52	; 0x34
   d94d6:	4640      	mov	r0, r8
   d94d8:	f007 fbe8 	bl	e0cac <mbedtls_mpi_safe_cond_assign>
   d94dc:	4604      	mov	r4, r0
   d94de:	2800      	cmp	r0, #0
   d94e0:	d14d      	bne.n	d957e <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x12a>
    memset( x, 0, d+1 );
   d94e2:	9b66      	ldr	r3, [sp, #408]	; 0x198
   d94e4:	4601      	mov	r1, r0
   d94e6:	1c5a      	adds	r2, r3, #1
   d94e8:	a816      	add	r0, sp, #88	; 0x58
   d94ea:	f00f fca7 	bl	e8e3c <memset>
    for( i = 0; i < d; i++ )
   d94ee:	af16      	add	r7, sp, #88	; 0x58
    memset( x, 0, d+1 );
   d94f0:	46b9      	mov	r9, r7
    for( i = 0; i < d; i++ )
   d94f2:	46a2      	mov	sl, r4
   d94f4:	9b66      	ldr	r3, [sp, #408]	; 0x198
   d94f6:	4553      	cmp	r3, sl
   d94f8:	d01b      	beq.n	d9532 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0xde>
   d94fa:	4651      	mov	r1, sl
        for( j = 0; j < w; j++ )
   d94fc:	f04f 0b00 	mov.w	fp, #0
   d9500:	9b04      	ldr	r3, [sp, #16]
   d9502:	455b      	cmp	r3, fp
   d9504:	d910      	bls.n	d9528 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0xd4>
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
   d9506:	4640      	mov	r0, r8
   d9508:	9105      	str	r1, [sp, #20]
   d950a:	f007 fc1d 	bl	e0d48 <mbedtls_mpi_get_bit>
   d950e:	f899 3000 	ldrb.w	r3, [r9]
   d9512:	9905      	ldr	r1, [sp, #20]
   d9514:	fa00 f00b 	lsl.w	r0, r0, fp
   d9518:	4318      	orrs	r0, r3
   d951a:	9b66      	ldr	r3, [sp, #408]	; 0x198
   d951c:	f889 0000 	strb.w	r0, [r9]
        for( j = 0; j < w; j++ )
   d9520:	f10b 0b01 	add.w	fp, fp, #1
   d9524:	4419      	add	r1, r3
   d9526:	e7eb      	b.n	d9500 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0xac>
    for( i = 0; i < d; i++ )
   d9528:	f10a 0a01 	add.w	sl, sl, #1
   d952c:	f109 0901 	add.w	r9, r9, #1
   d9530:	e7e0      	b.n	d94f4 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0xa0>
    c = 0;
   d9532:	f04f 0e00 	mov.w	lr, #0
    for( i = 1; i <= d; i++ )
   d9536:	f04f 0c01 	mov.w	ip, #1
   d953a:	9b66      	ldr	r3, [sp, #408]	; 0x198
   d953c:	4563      	cmp	r3, ip
   d953e:	d31e      	bcc.n	d957e <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x12a>
        cc   = x[i] & c;
   d9540:	7878      	ldrb	r0, [r7, #1]
        c   |= x[i] & ( x[i-1] * adjust );
   d9542:	783a      	ldrb	r2, [r7, #0]
        x[i] = x[i] ^ c;
   d9544:	ea80 030e 	eor.w	r3, r0, lr
        adjust = 1 - ( x[i] & 0x01 );
   d9548:	43d9      	mvns	r1, r3
   d954a:	f001 0101 	and.w	r1, r1, #1
        c   |= x[i] & ( x[i-1] * adjust );
   d954e:	fb12 f201 	smulbb	r2, r2, r1
   d9552:	b25b      	sxtb	r3, r3
   d9554:	b252      	sxtb	r2, r2
   d9556:	ea03 0802 	and.w	r8, r3, r2
        x[i] = x[i] ^ ( x[i-1] * adjust );
   d955a:	4053      	eors	r3, r2
   d955c:	f807 3f01 	strb.w	r3, [r7, #1]!
        x[i-1] |= adjust << 7;
   d9560:	f817 3c01 	ldrb.w	r3, [r7, #-1]
        cc   = x[i] & c;
   d9564:	ea00 000e 	and.w	r0, r0, lr
        c   |= x[i] & ( x[i-1] * adjust );
   d9568:	ea48 0e00 	orr.w	lr, r8, r0
        x[i-1] |= adjust << 7;
   d956c:	ea43 11c1 	orr.w	r1, r3, r1, lsl #7
        c   |= x[i] & ( x[i-1] * adjust );
   d9570:	fa5f fe8e 	uxtb.w	lr, lr
        x[i-1] |= adjust << 7;
   d9574:	f807 1c01 	strb.w	r1, [r7, #-1]
    for( i = 1; i <= d; i++ )
   d9578:	f10c 0c01 	add.w	ip, ip, #1
   d957c:	e7dd      	b.n	d953a <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0xe6>
    mbedtls_mpi_free( &mm );
   d957e:	a80d      	add	r0, sp, #52	; 0x34
   d9580:	f007 faf1 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &M );
   d9584:	a80a      	add	r0, sp, #40	; 0x28
   d9586:	f007 faee 	bl	e0b66 <mbedtls_mpi_free>
    MBEDTLS_MPI_CHK( ecp_comb_recode_scalar( grp, m, k, d, w,
   d958a:	2c00      	cmp	r4, #0
   d958c:	d184      	bne.n	d9498 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x44>
    mbedtls_ecp_point_init( &Txi );
   d958e:	a80d      	add	r0, sp, #52	; 0x34
   d9590:	f7ff fcbe 	bl	d8f10 <mbedtls_ecp_point_init>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, T_size, x[i] ) );
   d9594:	9a66      	ldr	r2, [sp, #408]	; 0x198
   d9596:	ab16      	add	r3, sp, #88	; 0x58
   d9598:	4631      	mov	r1, r6
   d959a:	5c9b      	ldrb	r3, [r3, r2]
   d959c:	9300      	str	r3, [sp, #0]
   d959e:	ee18 2a10 	vmov	r2, s16
   d95a2:	ee18 3a90 	vmov	r3, s17
   d95a6:	4628      	mov	r0, r5
   d95a8:	f7ff fc40 	bl	d8e2c <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh>
   d95ac:	4604      	mov	r4, r0
   d95ae:	2800      	cmp	r0, #0
   d95b0:	f040 80aa 	bne.w	d9708 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x2b4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
   d95b4:	f106 0918 	add.w	r9, r6, #24
   d95b8:	2101      	movs	r1, #1
   d95ba:	4648      	mov	r0, r9
   d95bc:	f007 fba8 	bl	e0d10 <mbedtls_mpi_lset>
   d95c0:	4604      	mov	r4, r0
   d95c2:	2800      	cmp	r0, #0
   d95c4:	f040 80a0 	bne.w	d9708 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x2b4>
        if( f_rng != 0 )
   d95c8:	9b67      	ldr	r3, [sp, #412]	; 0x19c
   d95ca:	bb13      	cbnz	r3, d9612 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x1be>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
   d95cc:	af16      	add	r7, sp, #88	; 0x58
    while( i != 0 )
   d95ce:	9b66      	ldr	r3, [sp, #408]	; 0x198
   d95d0:	2b00      	cmp	r3, #0
   d95d2:	f000 8099 	beq.w	d9708 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x2b4>
        --i;
   d95d6:	3b01      	subs	r3, #1
        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
   d95d8:	4632      	mov	r2, r6
   d95da:	4631      	mov	r1, r6
   d95dc:	4628      	mov	r0, r5
        --i;
   d95de:	9366      	str	r3, [sp, #408]	; 0x198
        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
   d95e0:	f7ff f888 	bl	d86f4 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_>
   d95e4:	b998      	cbnz	r0, d960e <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x1ba>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
   d95e6:	9b66      	ldr	r3, [sp, #408]	; 0x198
   d95e8:	5ddb      	ldrb	r3, [r3, r7]
   d95ea:	9300      	str	r3, [sp, #0]
   d95ec:	ee18 2a10 	vmov	r2, s16
   d95f0:	ee18 3a90 	vmov	r3, s17
   d95f4:	a90d      	add	r1, sp, #52	; 0x34
   d95f6:	4628      	mov	r0, r5
   d95f8:	f7ff fc18 	bl	d8e2c <_ZL15ecp_select_combPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_hh>
   d95fc:	b938      	cbnz	r0, d960e <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x1ba>
        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
   d95fe:	ab0d      	add	r3, sp, #52	; 0x34
   d9600:	4632      	mov	r2, r6
   d9602:	4631      	mov	r1, r6
   d9604:	4628      	mov	r0, r5
   d9606:	f7ff fd31 	bl	d906c <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_>
   d960a:	2800      	cmp	r0, #0
   d960c:	d0df      	beq.n	d95ce <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x17a>
   d960e:	4604      	mov	r4, r0
   d9610:	e07a      	b.n	d9708 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x2b4>
    p_size = ( grp->pbits + 7 ) / 8;
   d9612:	6dab      	ldr	r3, [r5, #88]	; 0x58
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
   d9614:	af07      	add	r7, sp, #28
    p_size = ( grp->pbits + 7 ) / 8;
   d9616:	3307      	adds	r3, #7
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
   d9618:	4638      	mov	r0, r7
    p_size = ( grp->pbits + 7 ) / 8;
   d961a:	ea4f 08d3 	mov.w	r8, r3, lsr #3
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
   d961e:	f007 fa9c 	bl	e0b5a <mbedtls_mpi_init>
   d9622:	a80a      	add	r0, sp, #40	; 0x28
   d9624:	f007 fa99 	bl	e0b5a <mbedtls_mpi_init>
   d9628:	f04f 0a0c 	mov.w	sl, #12
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
   d962c:	f105 0b04 	add.w	fp, r5, #4
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
   d9630:	e9dd 2367 	ldrd	r2, r3, [sp, #412]	; 0x19c
   d9634:	4641      	mov	r1, r8
   d9636:	4638      	mov	r0, r7
   d9638:	f008 fbe2 	bl	e1e00 <mbedtls_mpi_fill_random>
   d963c:	4603      	mov	r3, r0
   d963e:	2800      	cmp	r0, #0
   d9640:	d156      	bne.n	d96f0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x29c>
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
   d9642:	4659      	mov	r1, fp
   d9644:	4638      	mov	r0, r7
   d9646:	f007 fd67 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   d964a:	2800      	cmp	r0, #0
   d964c:	db04      	blt.n	d9658 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x204>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
   d964e:	2101      	movs	r1, #1
   d9650:	4638      	mov	r0, r7
   d9652:	f007 fc87 	bl	e0f64 <mbedtls_mpi_shift_r>
   d9656:	e7f1      	b.n	d963c <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x1e8>
        if( count++ > 10 )
   d9658:	f1ba 0a01 	subs.w	sl, sl, #1
   d965c:	d069      	beq.n	d9732 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x2de>
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
   d965e:	2101      	movs	r1, #1
   d9660:	4638      	mov	r0, r7
   d9662:	f007 fd9a 	bl	e119a <mbedtls_mpi_cmp_int>
   d9666:	2800      	cmp	r0, #0
   d9668:	dde2      	ble.n	d9630 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x1dc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
   d966a:	463a      	mov	r2, r7
   d966c:	4649      	mov	r1, r9
   d966e:	4648      	mov	r0, r9
   d9670:	f007 feaf 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d9674:	4603      	mov	r3, r0
   d9676:	2800      	cmp	r0, #0
   d9678:	d13a      	bne.n	d96f0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x29c>
   d967a:	4629      	mov	r1, r5
   d967c:	4648      	mov	r0, r9
   d967e:	f7fe fff3 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9682:	4603      	mov	r3, r0
   d9684:	bba0      	cbnz	r0, d96f0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x29c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
   d9686:	463a      	mov	r2, r7
   d9688:	4639      	mov	r1, r7
   d968a:	a80a      	add	r0, sp, #40	; 0x28
   d968c:	f007 fea1 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d9690:	4603      	mov	r3, r0
   d9692:	bb68      	cbnz	r0, d96f0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x29c>
   d9694:	4629      	mov	r1, r5
   d9696:	a80a      	add	r0, sp, #40	; 0x28
   d9698:	f7fe ffe6 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d969c:	4603      	mov	r3, r0
   d969e:	bb38      	cbnz	r0, d96f0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x29c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
   d96a0:	aa0a      	add	r2, sp, #40	; 0x28
   d96a2:	4631      	mov	r1, r6
   d96a4:	4630      	mov	r0, r6
   d96a6:	f007 fe94 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d96aa:	4603      	mov	r3, r0
   d96ac:	bb00      	cbnz	r0, d96f0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x29c>
   d96ae:	4629      	mov	r1, r5
   d96b0:	4630      	mov	r0, r6
   d96b2:	f7fe ffd9 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d96b6:	4603      	mov	r3, r0
   d96b8:	b9d0      	cbnz	r0, d96f0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x29c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
   d96ba:	a90a      	add	r1, sp, #40	; 0x28
   d96bc:	463a      	mov	r2, r7
   d96be:	4608      	mov	r0, r1
   d96c0:	f007 fe87 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d96c4:	4603      	mov	r3, r0
   d96c6:	b998      	cbnz	r0, d96f0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x29c>
   d96c8:	4629      	mov	r1, r5
   d96ca:	a80a      	add	r0, sp, #40	; 0x28
   d96cc:	f7fe ffcc 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d96d0:	4603      	mov	r3, r0
   d96d2:	b968      	cbnz	r0, d96f0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x29c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ll ) ); MOD_MUL( pt->Y );
   d96d4:	f106 070c 	add.w	r7, r6, #12
   d96d8:	aa0a      	add	r2, sp, #40	; 0x28
   d96da:	4639      	mov	r1, r7
   d96dc:	4638      	mov	r0, r7
   d96de:	f007 fe78 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d96e2:	4603      	mov	r3, r0
   d96e4:	b920      	cbnz	r0, d96f0 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x29c>
   d96e6:	4629      	mov	r1, r5
   d96e8:	4638      	mov	r0, r7
   d96ea:	f7fe ffbd 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d96ee:	4603      	mov	r3, r0
    mbedtls_mpi_free( &l ); mbedtls_mpi_free( &ll );
   d96f0:	a807      	add	r0, sp, #28
   d96f2:	9304      	str	r3, [sp, #16]
   d96f4:	f007 fa37 	bl	e0b66 <mbedtls_mpi_free>
   d96f8:	a80a      	add	r0, sp, #40	; 0x28
   d96fa:	f007 fa34 	bl	e0b66 <mbedtls_mpi_free>
            MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
   d96fe:	9b04      	ldr	r3, [sp, #16]
   d9700:	2b00      	cmp	r3, #0
   d9702:	f43f af63 	beq.w	d95cc <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x178>
   d9706:	461c      	mov	r4, r3
    if( pt == NULL )
   d9708:	a80d      	add	r0, sp, #52	; 0x34
   d970a:	f7ff fbc3 	bl	d8e94 <mbedtls_ecp_point_free.part.0>
    MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, RR, T, T_size, k, d,
   d970e:	2c00      	cmp	r4, #0
   d9710:	f47f aec2 	bne.w	d9498 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x44>
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, RR, parity_trick ) );
   d9714:	9a03      	ldr	r2, [sp, #12]
   d9716:	4631      	mov	r1, r6
   d9718:	4628      	mov	r0, r5
   d971a:	f7fe ff82 	bl	d8622 <_ZL19ecp_safe_invert_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointh>
   d971e:	4604      	mov	r4, r0
   d9720:	2800      	cmp	r0, #0
   d9722:	f47f aeb9 	bne.w	d9498 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x44>
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, RR ) );
   d9726:	4631      	mov	r1, r6
   d9728:	4628      	mov	r0, r5
   d972a:	f7ff fa1b 	bl	d8b64 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point>
   d972e:	4604      	mov	r4, r0
    return( ret );
   d9730:	e6b2      	b.n	d9498 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x44>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
   d9732:	4c02      	ldr	r4, [pc, #8]	; (d973c <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x2e8>)
   d9734:	e7e8      	b.n	d9708 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0+0x2b4>
   d9736:	bf00      	nop
   d9738:	ffffb080 	.word	0xffffb080
   d973c:	ffffb300 	.word	0xffffb300

000d9740 <mbedtls_ecp_is_zero>:
{
   d9740:	b508      	push	{r3, lr}
    return( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 );
   d9742:	2100      	movs	r1, #0
   d9744:	3018      	adds	r0, #24
   d9746:	f007 fd28 	bl	e119a <mbedtls_mpi_cmp_int>
}
   d974a:	fab0 f080 	clz	r0, r0
   d974e:	0940      	lsrs	r0, r0, #5
   d9750:	bd08      	pop	{r3, pc}
	...

000d9754 <mbedtls_ecp_point_write_binary>:
{
   d9754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9758:	460e      	mov	r6, r1
   d975a:	4605      	mov	r5, r0
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   d975c:	2100      	movs	r1, #0
   d975e:	f106 0018 	add.w	r0, r6, #24
{
   d9762:	e9dd 4908 	ldrd	r4, r9, [sp, #32]
   d9766:	4690      	mov	r8, r2
   d9768:	461f      	mov	r7, r3
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   d976a:	f007 fd16 	bl	e119a <mbedtls_mpi_cmp_int>
   d976e:	b948      	cbnz	r0, d9784 <mbedtls_ecp_point_write_binary+0x30>
        if( buflen < 1 )
   d9770:	f1b9 0f00 	cmp.w	r9, #0
   d9774:	d102      	bne.n	d977c <mbedtls_ecp_point_write_binary+0x28>
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
   d9776:	481d      	ldr	r0, [pc, #116]	; (d97ec <mbedtls_ecp_point_write_binary+0x98>)
}
   d9778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        *olen = 1;
   d977c:	2301      	movs	r3, #1
        buf[0] = 0x00;
   d977e:	7020      	strb	r0, [r4, #0]
        *olen = 1;
   d9780:	603b      	str	r3, [r7, #0]
        return( 0 );
   d9782:	e7f9      	b.n	d9778 <mbedtls_ecp_point_write_binary+0x24>
    plen = mbedtls_mpi_size( &grp->P );
   d9784:	1d28      	adds	r0, r5, #4
   d9786:	f007 fb26 	bl	e0dd6 <mbedtls_mpi_size>
   d978a:	4605      	mov	r5, r0
    if( format == MBEDTLS_ECP_PF_UNCOMPRESSED )
   d978c:	f1b8 0f00 	cmp.w	r8, #0
   d9790:	d117      	bne.n	d97c2 <mbedtls_ecp_point_write_binary+0x6e>
        *olen = 2 * plen + 1;
   d9792:	0043      	lsls	r3, r0, #1
   d9794:	3301      	adds	r3, #1
        if( buflen < *olen )
   d9796:	4599      	cmp	r9, r3
        *olen = 2 * plen + 1;
   d9798:	603b      	str	r3, [r7, #0]
        if( buflen < *olen )
   d979a:	d3ec      	bcc.n	d9776 <mbedtls_ecp_point_write_binary+0x22>
        buf[0] = 0x04;
   d979c:	4621      	mov	r1, r4
   d979e:	2304      	movs	r3, #4
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
   d97a0:	4602      	mov	r2, r0
        buf[0] = 0x04;
   d97a2:	f801 3b01 	strb.w	r3, [r1], #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
   d97a6:	4630      	mov	r0, r6
   d97a8:	f007 fb53 	bl	e0e52 <mbedtls_mpi_write_binary>
   d97ac:	2800      	cmp	r0, #0
   d97ae:	d1e3      	bne.n	d9778 <mbedtls_ecp_point_write_binary+0x24>
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->Y, buf + 1 + plen, plen ) );
   d97b0:	1c69      	adds	r1, r5, #1
   d97b2:	462a      	mov	r2, r5
   d97b4:	4421      	add	r1, r4
   d97b6:	f106 000c 	add.w	r0, r6, #12
}
   d97ba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
   d97be:	f007 bb48 	b.w	e0e52 <mbedtls_mpi_write_binary>
    else if( format == MBEDTLS_ECP_PF_COMPRESSED )
   d97c2:	f1b8 0f01 	cmp.w	r8, #1
   d97c6:	d10f      	bne.n	d97e8 <mbedtls_ecp_point_write_binary+0x94>
        *olen = plen + 1;
   d97c8:	1c43      	adds	r3, r0, #1
        if( buflen < *olen )
   d97ca:	4599      	cmp	r9, r3
        *olen = plen + 1;
   d97cc:	603b      	str	r3, [r7, #0]
        if( buflen < *olen )
   d97ce:	d3d2      	bcc.n	d9776 <mbedtls_ecp_point_write_binary+0x22>
        buf[0] = 0x02 + mbedtls_mpi_get_bit( &P->Y, 0 );
   d97d0:	2100      	movs	r1, #0
   d97d2:	f106 000c 	add.w	r0, r6, #12
   d97d6:	f007 fab7 	bl	e0d48 <mbedtls_mpi_get_bit>
   d97da:	4621      	mov	r1, r4
   d97dc:	3002      	adds	r0, #2
   d97de:	f801 0b01 	strb.w	r0, [r1], #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
   d97e2:	462a      	mov	r2, r5
   d97e4:	4630      	mov	r0, r6
   d97e6:	e7e8      	b.n	d97ba <mbedtls_ecp_point_write_binary+0x66>
    int ret = 0;
   d97e8:	2000      	movs	r0, #0
   d97ea:	e7c5      	b.n	d9778 <mbedtls_ecp_point_write_binary+0x24>
   d97ec:	ffffb100 	.word	0xffffb100

000d97f0 <mbedtls_ecp_point_read_binary>:
{
   d97f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d97f2:	460c      	mov	r4, r1
   d97f4:	4615      	mov	r5, r2
    if( ilen < 1 )
   d97f6:	461f      	mov	r7, r3
   d97f8:	b90b      	cbnz	r3, d97fe <mbedtls_ecp_point_read_binary+0xe>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d97fa:	4817      	ldr	r0, [pc, #92]	; (d9858 <mbedtls_ecp_point_read_binary+0x68>)
}
   d97fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( buf[0] == 0x00 )
   d97fe:	7813      	ldrb	r3, [r2, #0]
   d9800:	b933      	cbnz	r3, d9810 <mbedtls_ecp_point_read_binary+0x20>
        if( ilen == 1 )
   d9802:	2f01      	cmp	r7, #1
   d9804:	d1f9      	bne.n	d97fa <mbedtls_ecp_point_read_binary+0xa>
}
   d9806:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            return( mbedtls_ecp_set_zero( pt ) );
   d980a:	4608      	mov	r0, r1
   d980c:	f7ff bc1a 	b.w	d9044 <mbedtls_ecp_set_zero>
    plen = mbedtls_mpi_size( &grp->P );
   d9810:	3004      	adds	r0, #4
   d9812:	f007 fae0 	bl	e0dd6 <mbedtls_mpi_size>
    if( buf[0] != 0x04 )
   d9816:	782b      	ldrb	r3, [r5, #0]
   d9818:	2b04      	cmp	r3, #4
    plen = mbedtls_mpi_size( &grp->P );
   d981a:	4606      	mov	r6, r0
    if( buf[0] != 0x04 )
   d981c:	d11a      	bne.n	d9854 <mbedtls_ecp_point_read_binary+0x64>
    if( ilen != 2 * plen + 1 )
   d981e:	0043      	lsls	r3, r0, #1
   d9820:	3301      	adds	r3, #1
   d9822:	429f      	cmp	r7, r3
   d9824:	d1e9      	bne.n	d97fa <mbedtls_ecp_point_read_binary+0xa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->X, buf + 1, plen ) );
   d9826:	4602      	mov	r2, r0
   d9828:	1c69      	adds	r1, r5, #1
   d982a:	4620      	mov	r0, r4
   d982c:	f007 fad9 	bl	e0de2 <mbedtls_mpi_read_binary>
   d9830:	2800      	cmp	r0, #0
   d9832:	d1e3      	bne.n	d97fc <mbedtls_ecp_point_read_binary+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );
   d9834:	1c71      	adds	r1, r6, #1
   d9836:	4632      	mov	r2, r6
   d9838:	4429      	add	r1, r5
   d983a:	f104 000c 	add.w	r0, r4, #12
   d983e:	f007 fad0 	bl	e0de2 <mbedtls_mpi_read_binary>
   d9842:	2800      	cmp	r0, #0
   d9844:	d1da      	bne.n	d97fc <mbedtls_ecp_point_read_binary+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
   d9846:	f104 0018 	add.w	r0, r4, #24
   d984a:	2101      	movs	r1, #1
}
   d984c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
   d9850:	f007 ba5e 	b.w	e0d10 <mbedtls_mpi_lset>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   d9854:	4801      	ldr	r0, [pc, #4]	; (d985c <mbedtls_ecp_point_read_binary+0x6c>)
   d9856:	e7d1      	b.n	d97fc <mbedtls_ecp_point_read_binary+0xc>
   d9858:	ffffb080 	.word	0xffffb080
   d985c:	ffffb180 	.word	0xffffb180

000d9860 <mbedtls_ecp_tls_read_point>:
    if( buf_len < 2 )
   d9860:	2b01      	cmp	r3, #1
{
   d9862:	b470      	push	{r4, r5, r6}
    if( buf_len < 2 )
   d9864:	d90e      	bls.n	d9884 <mbedtls_ecp_tls_read_point+0x24>
    data_len = *(*buf)++;
   d9866:	6814      	ldr	r4, [r2, #0]
   d9868:	1c66      	adds	r6, r4, #1
   d986a:	6016      	str	r6, [r2, #0]
   d986c:	7825      	ldrb	r5, [r4, #0]
    if( data_len < 1 || data_len > buf_len - 1 )
   d986e:	b14d      	cbz	r5, d9884 <mbedtls_ecp_tls_read_point+0x24>
   d9870:	1e5c      	subs	r4, r3, #1
   d9872:	42a5      	cmp	r5, r4
   d9874:	d806      	bhi.n	d9884 <mbedtls_ecp_tls_read_point+0x24>
    *buf += data_len;
   d9876:	1973      	adds	r3, r6, r5
   d9878:	6013      	str	r3, [r2, #0]
    return( mbedtls_ecp_point_read_binary( grp, pt, buf_start, data_len ) );
   d987a:	462b      	mov	r3, r5
   d987c:	4632      	mov	r2, r6
}
   d987e:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_ecp_point_read_binary( grp, pt, buf_start, data_len ) );
   d9880:	f7ff bfb6 	b.w	d97f0 <mbedtls_ecp_point_read_binary>
}
   d9884:	4801      	ldr	r0, [pc, #4]	; (d988c <mbedtls_ecp_tls_read_point+0x2c>)
   d9886:	bc70      	pop	{r4, r5, r6}
   d9888:	4770      	bx	lr
   d988a:	bf00      	nop
   d988c:	ffffb080 	.word	0xffffb080

000d9890 <mbedtls_ecp_tls_write_point>:
{
   d9890:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d9892:	e9dd 6506 	ldrd	r6, r5, [sp, #24]
   d9896:	461c      	mov	r4, r3
    if( blen < 1 )
   d9898:	b16d      	cbz	r5, d98b6 <mbedtls_ecp_tls_write_point+0x26>
    if( ( ret = mbedtls_ecp_point_write_binary( grp, pt, format,
   d989a:	3d01      	subs	r5, #1
   d989c:	9501      	str	r5, [sp, #4]
   d989e:	1c75      	adds	r5, r6, #1
   d98a0:	9500      	str	r5, [sp, #0]
   d98a2:	f7ff ff57 	bl	d9754 <mbedtls_ecp_point_write_binary>
   d98a6:	b920      	cbnz	r0, d98b2 <mbedtls_ecp_tls_write_point+0x22>
    buf[0] = (unsigned char) *olen;
   d98a8:	6823      	ldr	r3, [r4, #0]
   d98aa:	7033      	strb	r3, [r6, #0]
    ++*olen;
   d98ac:	6823      	ldr	r3, [r4, #0]
   d98ae:	3301      	adds	r3, #1
   d98b0:	6023      	str	r3, [r4, #0]
}
   d98b2:	b002      	add	sp, #8
   d98b4:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d98b6:	4801      	ldr	r0, [pc, #4]	; (d98bc <mbedtls_ecp_tls_write_point+0x2c>)
   d98b8:	e7fb      	b.n	d98b2 <mbedtls_ecp_tls_write_point+0x22>
   d98ba:	bf00      	nop
   d98bc:	ffffb080 	.word	0xffffb080

000d98c0 <mbedtls_ecp_tls_read_group_id>:
    if( len < 3 )
   d98c0:	2a02      	cmp	r2, #2
{
   d98c2:	b510      	push	{r4, lr}
   d98c4:	4604      	mov	r4, r0
    if( len < 3 )
   d98c6:	d801      	bhi.n	d98cc <mbedtls_ecp_tls_read_group_id+0xc>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d98c8:	480c      	ldr	r0, [pc, #48]	; (d98fc <mbedtls_ecp_tls_read_group_id+0x3c>)
}
   d98ca:	bd10      	pop	{r4, pc}
    if( *(*buf)++ != MBEDTLS_ECP_TLS_NAMED_CURVE )
   d98cc:	680b      	ldr	r3, [r1, #0]
   d98ce:	1c5a      	adds	r2, r3, #1
   d98d0:	600a      	str	r2, [r1, #0]
   d98d2:	781a      	ldrb	r2, [r3, #0]
   d98d4:	2a03      	cmp	r2, #3
   d98d6:	d1f7      	bne.n	d98c8 <mbedtls_ecp_tls_read_group_id+0x8>
    tls_id = *(*buf)++;
   d98d8:	1c9a      	adds	r2, r3, #2
   d98da:	600a      	str	r2, [r1, #0]
    tls_id |= *(*buf)++;
   d98dc:	1cda      	adds	r2, r3, #3
    tls_id = *(*buf)++;
   d98de:	7858      	ldrb	r0, [r3, #1]
    tls_id |= *(*buf)++;
   d98e0:	600a      	str	r2, [r1, #0]
   d98e2:	789b      	ldrb	r3, [r3, #2]
    if( ( curve_info = mbedtls_ecp_curve_info_from_tls_id( tls_id ) ) == NULL )
   d98e4:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d98e8:	f7ff fb0a 	bl	d8f00 <mbedtls_ecp_curve_info_from_tls_id>
   d98ec:	b118      	cbz	r0, d98f6 <mbedtls_ecp_tls_read_group_id+0x36>
    *grp = curve_info->grp_id;
   d98ee:	7803      	ldrb	r3, [r0, #0]
   d98f0:	7023      	strb	r3, [r4, #0]
    return( 0 );
   d98f2:	2000      	movs	r0, #0
   d98f4:	e7e9      	b.n	d98ca <mbedtls_ecp_tls_read_group_id+0xa>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   d98f6:	4802      	ldr	r0, [pc, #8]	; (d9900 <mbedtls_ecp_tls_read_group_id+0x40>)
   d98f8:	e7e7      	b.n	d98ca <mbedtls_ecp_tls_read_group_id+0xa>
   d98fa:	bf00      	nop
   d98fc:	ffffb080 	.word	0xffffb080
   d9900:	ffffb180 	.word	0xffffb180

000d9904 <mbedtls_ecp_check_pubkey>:
/*
 * Check that a point is valid as a public key
 */
int mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp,
                              const mbedtls_ecp_point *pt )
{
   d9904:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9906:	460f      	mov	r7, r1
   d9908:	b089      	sub	sp, #36	; 0x24
   d990a:	4606      	mov	r6, r0
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( pt  != NULL );

    /* Must use affine coordinates */
    if( mbedtls_mpi_cmp_int( &pt->Z, 1 ) != 0 )
   d990c:	2101      	movs	r1, #1
   d990e:	f107 0018 	add.w	r0, r7, #24
   d9912:	f007 fc42 	bl	e119a <mbedtls_mpi_cmp_int>
   d9916:	9001      	str	r0, [sp, #4]
   d9918:	b960      	cbnz	r0, d9934 <mbedtls_ecp_check_pubkey+0x30>
#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
        return( ecp_check_pubkey_mx( grp, pt ) );
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d991a:	4630      	mov	r0, r6
   d991c:	f7fe fe77 	bl	d860e <_ZL12ecp_get_typePK17mbedtls_ecp_group>
   d9920:	2801      	cmp	r0, #1
   d9922:	f040 809f 	bne.w	d9a64 <mbedtls_ecp_check_pubkey+0x160>
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
   d9926:	9901      	ldr	r1, [sp, #4]
   d9928:	4638      	mov	r0, r7
   d992a:	f007 fc36 	bl	e119a <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
   d992e:	2800      	cmp	r0, #0
   d9930:	9901      	ldr	r1, [sp, #4]
   d9932:	da01      	bge.n	d9938 <mbedtls_ecp_check_pubkey+0x34>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
   d9934:	4c4c      	ldr	r4, [pc, #304]	; (d9a68 <mbedtls_ecp_check_pubkey+0x164>)
   d9936:	e092      	b.n	d9a5e <mbedtls_ecp_check_pubkey+0x15a>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
   d9938:	f107 040c 	add.w	r4, r7, #12
   d993c:	4620      	mov	r0, r4
   d993e:	f007 fc2c 	bl	e119a <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
   d9942:	2800      	cmp	r0, #0
   d9944:	dbf6      	blt.n	d9934 <mbedtls_ecp_check_pubkey+0x30>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
   d9946:	1d35      	adds	r5, r6, #4
   d9948:	4629      	mov	r1, r5
   d994a:	4638      	mov	r0, r7
   d994c:	f007 fbe4 	bl	e1118 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
   d9950:	2800      	cmp	r0, #0
   d9952:	daef      	bge.n	d9934 <mbedtls_ecp_check_pubkey+0x30>
        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )
   d9954:	4629      	mov	r1, r5
   d9956:	4620      	mov	r0, r4
   d9958:	f007 fbde 	bl	e1118 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
   d995c:	2800      	cmp	r0, #0
   d995e:	dae9      	bge.n	d9934 <mbedtls_ecp_check_pubkey+0x30>
    mbedtls_mpi_init( &YY ); mbedtls_mpi_init( &RHS );
   d9960:	a802      	add	r0, sp, #8
   d9962:	f007 f8fa 	bl	e0b5a <mbedtls_mpi_init>
   d9966:	a805      	add	r0, sp, #20
   d9968:	f007 f8f7 	bl	e0b5a <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
   d996c:	4622      	mov	r2, r4
   d996e:	4621      	mov	r1, r4
   d9970:	a802      	add	r0, sp, #8
   d9972:	f007 fd2e 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d9976:	4604      	mov	r4, r0
   d9978:	2800      	cmp	r0, #0
   d997a:	d16a      	bne.n	d9a52 <mbedtls_ecp_check_pubkey+0x14e>
   d997c:	4631      	mov	r1, r6
   d997e:	a802      	add	r0, sp, #8
   d9980:	f7fe fe72 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9984:	4604      	mov	r4, r0
   d9986:	2800      	cmp	r0, #0
   d9988:	d163      	bne.n	d9a52 <mbedtls_ecp_check_pubkey+0x14e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
   d998a:	463a      	mov	r2, r7
   d998c:	4639      	mov	r1, r7
   d998e:	a805      	add	r0, sp, #20
   d9990:	f007 fd1f 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d9994:	4604      	mov	r4, r0
   d9996:	2800      	cmp	r0, #0
   d9998:	d15b      	bne.n	d9a52 <mbedtls_ecp_check_pubkey+0x14e>
   d999a:	4631      	mov	r1, r6
   d999c:	a805      	add	r0, sp, #20
   d999e:	f7fe fe63 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d99a2:	4604      	mov	r4, r0
   d99a4:	2800      	cmp	r0, #0
   d99a6:	d154      	bne.n	d9a52 <mbedtls_ecp_check_pubkey+0x14e>
    if( grp->A.p == NULL )
   d99a8:	69b3      	ldr	r3, [r6, #24]
   d99aa:	b9ab      	cbnz	r3, d99d8 <mbedtls_ecp_check_pubkey+0xd4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
   d99ac:	a905      	add	r1, sp, #20
   d99ae:	2203      	movs	r2, #3
   d99b0:	4608      	mov	r0, r1
   d99b2:	f007 fcf8 	bl	e13a6 <mbedtls_mpi_sub_int>
   d99b6:	4604      	mov	r4, r0
   d99b8:	2800      	cmp	r0, #0
   d99ba:	d14a      	bne.n	d9a52 <mbedtls_ecp_check_pubkey+0x14e>
   d99bc:	9b05      	ldr	r3, [sp, #20]
   d99be:	2b00      	cmp	r3, #0
   d99c0:	da1e      	bge.n	d9a00 <mbedtls_ecp_check_pubkey+0xfc>
   d99c2:	2100      	movs	r1, #0
   d99c4:	a805      	add	r0, sp, #20
   d99c6:	f007 fbe8 	bl	e119a <mbedtls_mpi_cmp_int>
   d99ca:	b1c8      	cbz	r0, d9a00 <mbedtls_ecp_check_pubkey+0xfc>
   d99cc:	a905      	add	r1, sp, #20
   d99ce:	462a      	mov	r2, r5
   d99d0:	4608      	mov	r0, r1
   d99d2:	f007 fc8d 	bl	e12f0 <mbedtls_mpi_add_mpi>
   d99d6:	e7ee      	b.n	d99b6 <mbedtls_ecp_check_pubkey+0xb2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );
   d99d8:	a905      	add	r1, sp, #20
   d99da:	f106 0210 	add.w	r2, r6, #16
   d99de:	4608      	mov	r0, r1
   d99e0:	f007 fc86 	bl	e12f0 <mbedtls_mpi_add_mpi>
   d99e4:	4604      	mov	r4, r0
   d99e6:	bba0      	cbnz	r0, d9a52 <mbedtls_ecp_check_pubkey+0x14e>
   d99e8:	4629      	mov	r1, r5
   d99ea:	a805      	add	r0, sp, #20
   d99ec:	f007 fb94 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   d99f0:	2800      	cmp	r0, #0
   d99f2:	db05      	blt.n	d9a00 <mbedtls_ecp_check_pubkey+0xfc>
   d99f4:	a905      	add	r1, sp, #20
   d99f6:	462a      	mov	r2, r5
   d99f8:	4608      	mov	r0, r1
   d99fa:	f007 fc3d 	bl	e1278 <mbedtls_mpi_sub_abs>
   d99fe:	e7f1      	b.n	d99e4 <mbedtls_ecp_check_pubkey+0xe0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
   d9a00:	a905      	add	r1, sp, #20
   d9a02:	463a      	mov	r2, r7
   d9a04:	4608      	mov	r0, r1
   d9a06:	f007 fce4 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   d9a0a:	4604      	mov	r4, r0
   d9a0c:	bb08      	cbnz	r0, d9a52 <mbedtls_ecp_check_pubkey+0x14e>
   d9a0e:	4631      	mov	r1, r6
   d9a10:	a805      	add	r0, sp, #20
   d9a12:	f7fe fe29 	bl	d8668 <_ZL8ecp_modpP11mbedtls_mpiPK17mbedtls_ecp_group>
   d9a16:	4604      	mov	r4, r0
   d9a18:	b9d8      	cbnz	r0, d9a52 <mbedtls_ecp_check_pubkey+0x14e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
   d9a1a:	a905      	add	r1, sp, #20
   d9a1c:	f106 021c 	add.w	r2, r6, #28
   d9a20:	4608      	mov	r0, r1
   d9a22:	f007 fc65 	bl	e12f0 <mbedtls_mpi_add_mpi>
   d9a26:	4604      	mov	r4, r0
   d9a28:	b998      	cbnz	r0, d9a52 <mbedtls_ecp_check_pubkey+0x14e>
   d9a2a:	4629      	mov	r1, r5
   d9a2c:	a805      	add	r0, sp, #20
   d9a2e:	f007 fb73 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   d9a32:	2800      	cmp	r0, #0
   d9a34:	db05      	blt.n	d9a42 <mbedtls_ecp_check_pubkey+0x13e>
   d9a36:	a905      	add	r1, sp, #20
   d9a38:	462a      	mov	r2, r5
   d9a3a:	4608      	mov	r0, r1
   d9a3c:	f007 fc1c 	bl	e1278 <mbedtls_mpi_sub_abs>
   d9a40:	e7f1      	b.n	d9a26 <mbedtls_ecp_check_pubkey+0x122>
    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )
   d9a42:	a905      	add	r1, sp, #20
   d9a44:	a802      	add	r0, sp, #8
   d9a46:	f007 fb67 	bl	e1118 <mbedtls_mpi_cmp_mpi>
        ret = MBEDTLS_ERR_ECP_INVALID_KEY;
   d9a4a:	4b07      	ldr	r3, [pc, #28]	; (d9a68 <mbedtls_ecp_check_pubkey+0x164>)
   d9a4c:	1e04      	subs	r4, r0, #0
   d9a4e:	bf18      	it	ne
   d9a50:	461c      	movne	r4, r3
    mbedtls_mpi_free( &YY ); mbedtls_mpi_free( &RHS );
   d9a52:	a802      	add	r0, sp, #8
   d9a54:	f007 f887 	bl	e0b66 <mbedtls_mpi_free>
   d9a58:	a805      	add	r0, sp, #20
   d9a5a:	f007 f884 	bl	e0b66 <mbedtls_mpi_free>
        return( ecp_check_pubkey_sw( grp, pt ) );
#endif
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
   d9a5e:	4620      	mov	r0, r4
   d9a60:	b009      	add	sp, #36	; 0x24
   d9a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d9a64:	4c01      	ldr	r4, [pc, #4]	; (d9a6c <mbedtls_ecp_check_pubkey+0x168>)
   d9a66:	e7fa      	b.n	d9a5e <mbedtls_ecp_check_pubkey+0x15a>
   d9a68:	ffffb380 	.word	0xffffb380
   d9a6c:	ffffb080 	.word	0xffffb080

000d9a70 <mbedtls_ecp_check_privkey>:
/*
 * Check that an mbedtls_mpi is valid as a private key
 */
int mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp,
                               const mbedtls_mpi *d )
{
   d9a70:	b538      	push	{r3, r4, r5, lr}
   d9a72:	460c      	mov	r4, r1
   d9a74:	4605      	mov	r5, r0

        return( 0 );
    }
#endif /* ECP_MONTGOMERY */
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d9a76:	f7fe fdca 	bl	d860e <_ZL12ecp_get_typePK17mbedtls_ecp_group>
   d9a7a:	2801      	cmp	r0, #1
   d9a7c:	4601      	mov	r1, r0
   d9a7e:	d10d      	bne.n	d9a9c <mbedtls_ecp_check_privkey+0x2c>
    {
        /* see SEC1 3.2 */
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
   d9a80:	4620      	mov	r0, r4
   d9a82:	f007 fb8a 	bl	e119a <mbedtls_mpi_cmp_int>
   d9a86:	2800      	cmp	r0, #0
   d9a88:	db06      	blt.n	d9a98 <mbedtls_ecp_check_privkey+0x28>
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
   d9a8a:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   d9a8e:	4620      	mov	r0, r4
   d9a90:	f007 fb42 	bl	e1118 <mbedtls_mpi_cmp_mpi>
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
   d9a94:	2800      	cmp	r0, #0
   d9a96:	db03      	blt.n	d9aa0 <mbedtls_ecp_check_privkey+0x30>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
   d9a98:	4802      	ldr	r0, [pc, #8]	; (d9aa4 <mbedtls_ecp_check_privkey+0x34>)
            return( 0 );
    }
#endif /* ECP_SHORTWEIERSTRASS */

    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
   d9a9a:	bd38      	pop	{r3, r4, r5, pc}
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d9a9c:	4802      	ldr	r0, [pc, #8]	; (d9aa8 <mbedtls_ecp_check_privkey+0x38>)
   d9a9e:	e7fc      	b.n	d9a9a <mbedtls_ecp_check_privkey+0x2a>
            return( 0 );
   d9aa0:	2000      	movs	r0, #0
   d9aa2:	e7fa      	b.n	d9a9a <mbedtls_ecp_check_privkey+0x2a>
   d9aa4:	ffffb380 	.word	0xffffb380
   d9aa8:	ffffb080 	.word	0xffffb080

000d9aac <mbedtls_ecp_mul_restartable>:
{
   d9aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9ab0:	ed2d 8b02 	vpush	{d8}
   d9ab4:	ee08 1a10 	vmov	s16, r1
   d9ab8:	b0ad      	sub	sp, #180	; 0xb4
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
   d9aba:	4611      	mov	r1, r2
{
   d9abc:	ee08 2a90 	vmov	s17, r2
   d9ac0:	4605      	mov	r5, r0
   d9ac2:	4698      	mov	r8, r3
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
   d9ac4:	f7ff ffd4 	bl	d9a70 <mbedtls_ecp_check_privkey>
   d9ac8:	4681      	mov	r9, r0
   d9aca:	2800      	cmp	r0, #0
   d9acc:	f040 8093 	bne.w	d9bf6 <mbedtls_ecp_mul_restartable+0x14a>
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, P ) );
   d9ad0:	4641      	mov	r1, r8
   d9ad2:	4628      	mov	r0, r5
   d9ad4:	f7ff ff16 	bl	d9904 <mbedtls_ecp_check_pubkey>
   d9ad8:	4681      	mov	r9, r0
   d9ada:	2800      	cmp	r0, #0
   d9adc:	f040 808b 	bne.w	d9bf6 <mbedtls_ecp_mul_restartable+0x14a>
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d9ae0:	4628      	mov	r0, r5
   d9ae2:	f7fe fd94 	bl	d860e <_ZL12ecp_get_typePK17mbedtls_ecp_group>
   d9ae6:	2801      	cmp	r0, #1
   d9ae8:	4682      	mov	sl, r0
   d9aea:	f040 8112 	bne.w	d9d12 <mbedtls_ecp_mul_restartable+0x266>
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
   d9aee:	f105 0134 	add.w	r1, r5, #52	; 0x34
   d9af2:	f108 000c 	add.w	r0, r8, #12
   d9af6:	f007 fb0f 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   d9afa:	2800      	cmp	r0, #0
   d9afc:	f040 8081 	bne.w	d9c02 <mbedtls_ecp_mul_restartable+0x156>
               mbedtls_mpi_cmp_mpi( &P->X, &grp->G.X ) == 0 );
   d9b00:	f105 0128 	add.w	r1, r5, #40	; 0x28
   d9b04:	4640      	mov	r0, r8
   d9b06:	f007 fb07 	bl	e1118 <mbedtls_mpi_cmp_mpi>
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
   d9b0a:	fab0 f380 	clz	r3, r0
   d9b0e:	095b      	lsrs	r3, r3, #5
   d9b10:	9307      	str	r3, [sp, #28]
    w = ecp_pick_window_size( grp, p_eq_g );
   d9b12:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    if( p_eq_g )
   d9b14:	9a07      	ldr	r2, [sp, #28]
    w = grp->nbits >= 384 ? 5 : 4;
   d9b16:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   d9b1a:	bf2c      	ite	cs
   d9b1c:	2605      	movcs	r6, #5
   d9b1e:	2604      	movcc	r6, #4
    if( p_eq_g )
   d9b20:	b102      	cbz	r2, d9b24 <mbedtls_ecp_mul_restartable+0x78>
        w++;
   d9b22:	3601      	adds	r6, #1
        w = 2;
   d9b24:	42b3      	cmp	r3, r6
   d9b26:	bf98      	it	ls
   d9b28:	2602      	movls	r6, #2
    T_size = 1U << ( w - 1 );
   d9b2a:	f106 3bff 	add.w	fp, r6, #4294967295
   d9b2e:	2701      	movs	r7, #1
    d = ( grp->nbits + w - 1 ) / w;
   d9b30:	3b01      	subs	r3, #1
    T_size = 1U << ( w - 1 );
   d9b32:	fa07 f70b 	lsl.w	r7, r7, fp
    d = ( grp->nbits + w - 1 ) / w;
   d9b36:	4433      	add	r3, r6
   d9b38:	fbb3 f3f6 	udiv	r3, r3, r6
   d9b3c:	9309      	str	r3, [sp, #36]	; 0x24
    if( p_eq_g && grp->T != NULL )
   d9b3e:	9b07      	ldr	r3, [sp, #28]
    T_size = 1U << ( w - 1 );
   d9b40:	b2fa      	uxtb	r2, r7
   d9b42:	9208      	str	r2, [sp, #32]
    if( p_eq_g && grp->T != NULL )
   d9b44:	b11b      	cbz	r3, d9b4e <mbedtls_ecp_mul_restartable+0xa2>
   d9b46:	6f6c      	ldr	r4, [r5, #116]	; 0x74
   d9b48:	2c00      	cmp	r4, #0
   d9b4a:	f040 80c7 	bne.w	d9cdc <mbedtls_ecp_mul_restartable+0x230>
        T = (mbedtls_ecp_point *)mbedtls_calloc( T_size, sizeof( mbedtls_ecp_point ) );
   d9b4e:	2124      	movs	r1, #36	; 0x24
   d9b50:	4638      	mov	r0, r7
   d9b52:	f00f f8d3 	bl	e8cfc <calloc>
        if( T == NULL )
   d9b56:	4604      	mov	r4, r0
   d9b58:	2800      	cmp	r0, #0
   d9b5a:	f000 80d7 	beq.w	d9d0c <mbedtls_ecp_mul_restartable+0x260>
   d9b5e:	f04f 0900 	mov.w	r9, #0
            mbedtls_ecp_point_init( &T[i] );
   d9b62:	2124      	movs	r1, #36	; 0x24
   d9b64:	fb01 4009 	mla	r0, r1, r9, r4
   d9b68:	f7ff f9d2 	bl	d8f10 <mbedtls_ecp_point_init>
        for( i = 0; i < T_size; i++ )
   d9b6c:	f109 0901 	add.w	r9, r9, #1
   d9b70:	9b08      	ldr	r3, [sp, #32]
   d9b72:	fa5f f289 	uxtb.w	r2, r9
   d9b76:	4293      	cmp	r3, r2
   d9b78:	f04f 0124 	mov.w	r1, #36	; 0x24
   d9b7c:	d8f2      	bhi.n	d9b64 <mbedtls_ecp_mul_restartable+0xb8>
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );
   d9b7e:	4641      	mov	r1, r8
   d9b80:	4620      	mov	r0, r4
   d9b82:	f7ff fa46 	bl	d9012 <mbedtls_ecp_copy>
   d9b86:	4681      	mov	r9, r0
   d9b88:	b9e0      	cbnz	r0, d9bc4 <mbedtls_ecp_mul_restartable+0x118>
    for( ; j < d * ( w - 1 ); j++ )
   d9b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9b8c:	fb03 f30b 	mul.w	r3, r3, fp
   d9b90:	930a      	str	r3, [sp, #40]	; 0x28
        j = 0;
   d9b92:	4680      	mov	r8, r0
    for( ; j < d * ( w - 1 ); j++ )
   d9b94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9b96:	4543      	cmp	r3, r8
   d9b98:	d047      	beq.n	d9c2a <mbedtls_ecp_mul_restartable+0x17e>
        i = 1U << ( j / d );
   d9b9a:	2201      	movs	r2, #1
        if( j % d == 0 )
   d9b9c:	9809      	ldr	r0, [sp, #36]	; 0x24
        i = 1U << ( j / d );
   d9b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9ba0:	fbb8 f3f3 	udiv	r3, r8, r3
   d9ba4:	fa02 f103 	lsl.w	r1, r2, r3
        cur = T + i;
   d9ba8:	fa5f fb81 	uxtb.w	fp, r1
   d9bac:	2224      	movs	r2, #36	; 0x24
        if( j % d == 0 )
   d9bae:	fb00 8313 	mls	r3, r0, r3, r8
        cur = T + i;
   d9bb2:	fb02 420b 	mla	r2, r2, fp, r4
        if( j % d == 0 )
   d9bb6:	b33b      	cbz	r3, d9c08 <mbedtls_ecp_mul_restartable+0x15c>
        MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );
   d9bb8:	4611      	mov	r1, r2
   d9bba:	4628      	mov	r0, r5
   d9bbc:	f7fe fd9a 	bl	d86f4 <_ZL14ecp_double_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_>
   d9bc0:	4681      	mov	r9, r0
   d9bc2:	b378      	cbz	r0, d9c24 <mbedtls_ecp_mul_restartable+0x178>
    if( T == grp->T )
   d9bc4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
   d9bc6:	42a3      	cmp	r3, r4
   d9bc8:	d00e      	beq.n	d9be8 <mbedtls_ecp_mul_restartable+0x13c>
    if( T != NULL )
   d9bca:	b16c      	cbz	r4, d9be8 <mbedtls_ecp_mul_restartable+0x13c>
   d9bcc:	2500      	movs	r5, #0
            mbedtls_ecp_point_free( &T[i] );
   d9bce:	2624      	movs	r6, #36	; 0x24
   d9bd0:	fb06 4005 	mla	r0, r6, r5, r4
   d9bd4:	f7ff f9d9 	bl	d8f8a <mbedtls_ecp_point_free>
        for( i = 0; i < T_size; i++ )
   d9bd8:	3501      	adds	r5, #1
   d9bda:	9a08      	ldr	r2, [sp, #32]
   d9bdc:	b2eb      	uxtb	r3, r5
   d9bde:	429a      	cmp	r2, r3
   d9be0:	d8f6      	bhi.n	d9bd0 <mbedtls_ecp_mul_restartable+0x124>
        mbedtls_free( T );
   d9be2:	4620      	mov	r0, r4
   d9be4:	f00b fee0 	bl	e59a8 <free>
    if( ret != 0 )
   d9be8:	f1b9 0f00 	cmp.w	r9, #0
   d9bec:	d003      	beq.n	d9bf6 <mbedtls_ecp_mul_restartable+0x14a>
        mbedtls_ecp_point_free( R );
   d9bee:	ee18 0a10 	vmov	r0, s16
   d9bf2:	f7ff f9ca 	bl	d8f8a <mbedtls_ecp_point_free>
}
   d9bf6:	4648      	mov	r0, r9
   d9bf8:	b02d      	add	sp, #180	; 0xb4
   d9bfa:	ecbd 8b02 	vpop	{d8}
   d9bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
   d9c02:	f8cd 901c 	str.w	r9, [sp, #28]
   d9c06:	e784      	b.n	d9b12 <mbedtls_ecp_mul_restartable+0x66>
            MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
   d9c08:	2324      	movs	r3, #36	; 0x24
   d9c0a:	f3c1 0146 	ubfx	r1, r1, #1, #7
   d9c0e:	4610      	mov	r0, r2
   d9c10:	fb03 4101 	mla	r1, r3, r1, r4
   d9c14:	920b      	str	r2, [sp, #44]	; 0x2c
   d9c16:	f7ff f9fc 	bl	d9012 <mbedtls_ecp_copy>
   d9c1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d9c1c:	4681      	mov	r9, r0
   d9c1e:	2800      	cmp	r0, #0
   d9c20:	d0ca      	beq.n	d9bb8 <mbedtls_ecp_mul_restartable+0x10c>
   d9c22:	e7cf      	b.n	d9bc4 <mbedtls_ecp_mul_restartable+0x118>
    for( ; j < d * ( w - 1 ); j++ )
   d9c24:	f108 0801 	add.w	r8, r8, #1
   d9c28:	e7b4      	b.n	d9b94 <mbedtls_ecp_mul_restartable+0xe8>
   d9c2a:	f10d 0b34 	add.w	fp, sp, #52	; 0x34
   d9c2e:	4658      	mov	r0, fp
    for( i = 1; i < T_size; i <<= 1 )
   d9c30:	2301      	movs	r3, #1
    j = 0;
   d9c32:	2200      	movs	r2, #0
        TT[j++] = T + i;
   d9c34:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
   d9c38:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   d9c3c:	f840 1b04 	str.w	r1, [r0], #4
    for( i = 1; i < T_size; i <<= 1 )
   d9c40:	005b      	lsls	r3, r3, #1
   d9c42:	9908      	ldr	r1, [sp, #32]
   d9c44:	b2db      	uxtb	r3, r3
   d9c46:	4299      	cmp	r1, r3
        TT[j++] = T + i;
   d9c48:	f102 0201 	add.w	r2, r2, #1
    for( i = 1; i < T_size; i <<= 1 )
   d9c4c:	d8f2      	bhi.n	d9c34 <mbedtls_ecp_mul_restartable+0x188>
    if( T_size < 2 )
   d9c4e:	2a01      	cmp	r2, #1
   d9c50:	d11f      	bne.n	d9c92 <mbedtls_ecp_mul_restartable+0x1e6>
        return( ecp_normalize_jac( grp, *T ) );
   d9c52:	990d      	ldr	r1, [sp, #52]	; 0x34
   d9c54:	4628      	mov	r0, r5
   d9c56:	f7fe ff85 	bl	d8b64 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point>
   d9c5a:	4681      	mov	r9, r0
    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
   d9c5c:	2800      	cmp	r0, #0
   d9c5e:	d1b1      	bne.n	d9bc4 <mbedtls_ecp_mul_restartable+0x118>
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
   d9c60:	fa0f f38a 	sxth.w	r3, sl
   d9c64:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
        j = i;
   d9c68:	46d0      	mov	r8, sl
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
   d9c6a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
        while( j-- )
   d9c6e:	4642      	mov	r2, r8
   d9c70:	f108 38ff 	add.w	r8, r8, #4294967295
   d9c74:	b192      	cbz	r2, d9c9c <mbedtls_ecp_mul_restartable+0x1f0>
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
   d9c76:	2224      	movs	r2, #36	; 0x24
   d9c78:	fb02 f108 	mul.w	r1, r2, r8
   d9c7c:	1862      	adds	r2, r4, r1
   d9c7e:	4628      	mov	r0, r5
   d9c80:	4419      	add	r1, r3
   d9c82:	930a      	str	r3, [sp, #40]	; 0x28
   d9c84:	f7ff f9f2 	bl	d906c <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_>
   d9c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9c8a:	4681      	mov	r9, r0
   d9c8c:	2800      	cmp	r0, #0
   d9c8e:	d0ee      	beq.n	d9c6e <mbedtls_ecp_mul_restartable+0x1c2>
   d9c90:	e798      	b.n	d9bc4 <mbedtls_ecp_mul_restartable+0x118>
   d9c92:	a90d      	add	r1, sp, #52	; 0x34
   d9c94:	4628      	mov	r0, r5
   d9c96:	f7fe ffc3 	bl	d8c20 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0>
   d9c9a:	e7de      	b.n	d9c5a <mbedtls_ecp_mul_restartable+0x1ae>
    for( i = 1; i < T_size; i <<= 1 )
   d9c9c:	9b08      	ldr	r3, [sp, #32]
   d9c9e:	ea4f 004a 	mov.w	r0, sl, lsl #1
   d9ca2:	fa5f fa80 	uxtb.w	sl, r0
   d9ca6:	4553      	cmp	r3, sl
   d9ca8:	d8da      	bhi.n	d9c60 <mbedtls_ecp_mul_restartable+0x1b4>
        TT[j] = T + j + 1;
   d9caa:	2124      	movs	r1, #36	; 0x24
    for( j = 0; j + 1 < T_size; j++ )
   d9cac:	3201      	adds	r2, #1
   d9cae:	4297      	cmp	r7, r2
   d9cb0:	d004      	beq.n	d9cbc <mbedtls_ecp_mul_restartable+0x210>
        TT[j] = T + j + 1;
   d9cb2:	fb01 4302 	mla	r3, r1, r2, r4
   d9cb6:	f84b 3b04 	str.w	r3, [fp], #4
    for( j = 0; j + 1 < T_size; j++ )
   d9cba:	e7f7      	b.n	d9cac <mbedtls_ecp_mul_restartable+0x200>
    if( T_size < 2 )
   d9cbc:	2f02      	cmp	r7, #2
   d9cbe:	f107 32ff 	add.w	r2, r7, #4294967295
   d9cc2:	d11e      	bne.n	d9d02 <mbedtls_ecp_mul_restartable+0x256>
        return( ecp_normalize_jac( grp, *T ) );
   d9cc4:	990d      	ldr	r1, [sp, #52]	; 0x34
   d9cc6:	4628      	mov	r0, r5
   d9cc8:	f7fe ff4c 	bl	d8b64 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point>
    return( ret );
   d9ccc:	4681      	mov	r9, r0
        MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d, rs_ctx ) );
   d9cce:	2800      	cmp	r0, #0
   d9cd0:	f47f af78 	bne.w	d9bc4 <mbedtls_ecp_mul_restartable+0x118>
        if( p_eq_g )
   d9cd4:	9b07      	ldr	r3, [sp, #28]
   d9cd6:	b10b      	cbz	r3, d9cdc <mbedtls_ecp_mul_restartable+0x230>
            grp->T_size = T_size;
   d9cd8:	e9c5 471d 	strd	r4, r7, [r5, #116]	; 0x74
    MBEDTLS_MPI_CHK( ecp_mul_comb_after_precomp( grp, R, m,
   d9cdc:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   d9cde:	9304      	str	r3, [sp, #16]
   d9ce0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   d9ce2:	9303      	str	r3, [sp, #12]
   d9ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9ce6:	e9cd 6301 	strd	r6, r3, [sp, #4]
   d9cea:	9b08      	ldr	r3, [sp, #32]
   d9cec:	9300      	str	r3, [sp, #0]
   d9cee:	ee18 2a90 	vmov	r2, s17
   d9cf2:	ee18 1a10 	vmov	r1, s16
   d9cf6:	4623      	mov	r3, r4
   d9cf8:	4628      	mov	r0, r5
   d9cfa:	f7ff fbab 	bl	d9454 <_ZL26ecp_mul_comb_after_precompPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS2_hhjPFiPvPhjES9_S9_.isra.0>
   d9cfe:	4681      	mov	r9, r0
cleanup:
   d9d00:	e760      	b.n	d9bc4 <mbedtls_ecp_mul_restartable+0x118>
   d9d02:	a90d      	add	r1, sp, #52	; 0x34
   d9d04:	4628      	mov	r0, r5
   d9d06:	f7fe ff8b 	bl	d8c20 <_ZL22ecp_normalize_jac_manyPK17mbedtls_ecp_groupPP17mbedtls_ecp_pointj.part.0>
   d9d0a:	e7df      	b.n	d9ccc <mbedtls_ecp_mul_restartable+0x220>
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
   d9d0c:	f8df 9008 	ldr.w	r9, [pc, #8]	; d9d18 <mbedtls_ecp_mul_restartable+0x26c>
   d9d10:	e758      	b.n	d9bc4 <mbedtls_ecp_mul_restartable+0x118>
    ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   d9d12:	f8df 9008 	ldr.w	r9, [pc, #8]	; d9d1c <mbedtls_ecp_mul_restartable+0x270>
    return( ret );
   d9d16:	e76e      	b.n	d9bf6 <mbedtls_ecp_mul_restartable+0x14a>
   d9d18:	ffffb280 	.word	0xffffb280
   d9d1c:	ffffb080 	.word	0xffffb080

000d9d20 <mbedtls_ecp_mul>:
{
   d9d20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( mbedtls_ecp_mul_restartable( grp, R, m, P, f_rng, p_rng, NULL ) );
   d9d22:	2400      	movs	r4, #0
   d9d24:	9402      	str	r4, [sp, #8]
   d9d26:	9c07      	ldr	r4, [sp, #28]
   d9d28:	9401      	str	r4, [sp, #4]
   d9d2a:	9c06      	ldr	r4, [sp, #24]
   d9d2c:	9400      	str	r4, [sp, #0]
   d9d2e:	f7ff febd 	bl	d9aac <mbedtls_ecp_mul_restartable>
}
   d9d32:	b004      	add	sp, #16
   d9d34:	bd10      	pop	{r4, pc}

000d9d36 <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv>:
{
   d9d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9d3a:	b086      	sub	sp, #24
   d9d3c:	4607      	mov	r7, r0
   d9d3e:	460c      	mov	r4, r1
    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
   d9d40:	4610      	mov	r0, r2
   d9d42:	2101      	movs	r1, #1
{
   d9d44:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d9d48:	4615      	mov	r5, r2
   d9d4a:	461e      	mov	r6, r3
    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
   d9d4c:	f007 fa25 	bl	e119a <mbedtls_mpi_cmp_int>
   d9d50:	b930      	cbnz	r0, d9d60 <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
   d9d52:	4631      	mov	r1, r6
   d9d54:	4620      	mov	r0, r4
}
   d9d56:	b006      	add	sp, #24
   d9d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
   d9d5c:	f7ff b959 	b.w	d9012 <mbedtls_ecp_copy>
    else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )
   d9d60:	f04f 31ff 	mov.w	r1, #4294967295
   d9d64:	4628      	mov	r0, r5
   d9d66:	f007 fa18 	bl	e119a <mbedtls_mpi_cmp_int>
   d9d6a:	b9a0      	cbnz	r0, d9d96 <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv+0x60>
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
   d9d6c:	4631      	mov	r1, r6
   d9d6e:	4620      	mov	r0, r4
   d9d70:	f7ff f94f 	bl	d9012 <mbedtls_ecp_copy>
   d9d74:	b9d0      	cbnz	r0, d9dac <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv+0x76>
        if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )
   d9d76:	f104 020c 	add.w	r2, r4, #12
   d9d7a:	4601      	mov	r1, r0
   d9d7c:	4610      	mov	r0, r2
   d9d7e:	9205      	str	r2, [sp, #20]
   d9d80:	f007 fa0b 	bl	e119a <mbedtls_mpi_cmp_int>
   d9d84:	9a05      	ldr	r2, [sp, #20]
   d9d86:	b188      	cbz	r0, d9dac <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv+0x76>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
   d9d88:	1d39      	adds	r1, r7, #4
   d9d8a:	4610      	mov	r0, r2
}
   d9d8c:	b006      	add	sp, #24
   d9d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
   d9d92:	f007 bacf 	b.w	e1334 <mbedtls_mpi_sub_mpi>
        MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, R, m, P,
   d9d96:	2300      	movs	r3, #0
   d9d98:	e9cd 3300 	strd	r3, r3, [sp]
   d9d9c:	f8cd 8008 	str.w	r8, [sp, #8]
   d9da0:	4633      	mov	r3, r6
   d9da2:	462a      	mov	r2, r5
   d9da4:	4621      	mov	r1, r4
   d9da6:	4638      	mov	r0, r7
   d9da8:	f7ff fe80 	bl	d9aac <mbedtls_ecp_mul_restartable>
}
   d9dac:	b006      	add	sp, #24
   d9dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d9db4 <mbedtls_ecp_muladd_restartable>:
{
   d9db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9db8:	b08c      	sub	sp, #48	; 0x30
   d9dba:	4605      	mov	r5, r0
   d9dbc:	460e      	mov	r6, r1
   d9dbe:	4614      	mov	r4, r2
   d9dc0:	461f      	mov	r7, r3
    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
   d9dc2:	f7fe fc24 	bl	d860e <_ZL12ecp_get_typePK17mbedtls_ecp_group>
   d9dc6:	2801      	cmp	r0, #1
{
   d9dc8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
   d9dcc:	d12a      	bne.n	d9e24 <mbedtls_ecp_muladd_restartable+0x70>
    mbedtls_ecp_point_init( &mP );
   d9dce:	a803      	add	r0, sp, #12
   d9dd0:	f7ff f89e 	bl	d8f10 <mbedtls_ecp_point_init>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pmP, m, P, rs_ctx ) );
   d9dd4:	4622      	mov	r2, r4
   d9dd6:	f8cd 8000 	str.w	r8, [sp]
   d9dda:	463b      	mov	r3, r7
   d9ddc:	a903      	add	r1, sp, #12
   d9dde:	4628      	mov	r0, r5
   d9de0:	f7ff ffa9 	bl	d9d36 <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv>
   d9de4:	4604      	mov	r4, r0
   d9de6:	b9b0      	cbnz	r0, d9e16 <mbedtls_ecp_muladd_restartable+0x62>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pR,  n, Q, rs_ctx ) );
   d9de8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   d9dec:	f8cd 8000 	str.w	r8, [sp]
   d9df0:	4631      	mov	r1, r6
   d9df2:	4628      	mov	r0, r5
   d9df4:	f7ff ff9f 	bl	d9d36 <_ZL25mbedtls_ecp_mul_shortcutsP17mbedtls_ecp_groupP17mbedtls_ecp_pointPK11mbedtls_mpiPKS1_Pv>
   d9df8:	4604      	mov	r4, r0
   d9dfa:	b960      	cbnz	r0, d9e16 <mbedtls_ecp_muladd_restartable+0x62>
    MBEDTLS_MPI_CHK( ecp_add_mixed( grp, pR, pmP, pR ) );
   d9dfc:	4633      	mov	r3, r6
   d9dfe:	aa03      	add	r2, sp, #12
   d9e00:	4631      	mov	r1, r6
   d9e02:	4628      	mov	r0, r5
   d9e04:	f7ff f932 	bl	d906c <_ZL13ecp_add_mixedPK17mbedtls_ecp_groupP17mbedtls_ecp_pointPKS2_S5_>
   d9e08:	4604      	mov	r4, r0
   d9e0a:	b920      	cbnz	r0, d9e16 <mbedtls_ecp_muladd_restartable+0x62>
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, pR ) );
   d9e0c:	4631      	mov	r1, r6
   d9e0e:	4628      	mov	r0, r5
   d9e10:	f7fe fea8 	bl	d8b64 <_ZL17ecp_normalize_jacPK17mbedtls_ecp_groupP17mbedtls_ecp_point>
   d9e14:	4604      	mov	r4, r0
    if( pt == NULL )
   d9e16:	a803      	add	r0, sp, #12
   d9e18:	f7ff f83c 	bl	d8e94 <mbedtls_ecp_point_free.part.0>
}
   d9e1c:	4620      	mov	r0, r4
   d9e1e:	b00c      	add	sp, #48	; 0x30
   d9e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   d9e24:	4c00      	ldr	r4, [pc, #0]	; (d9e28 <mbedtls_ecp_muladd_restartable+0x74>)
   d9e26:	e7f9      	b.n	d9e1c <mbedtls_ecp_muladd_restartable+0x68>
   d9e28:	ffffb180 	.word	0xffffb180

000d9e2c <mbedtls_ecp_gen_privkey>:
 */
int mbedtls_ecp_gen_privkey( const mbedtls_ecp_group *grp,
                     mbedtls_mpi *d,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   d9e2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9e30:	4606      	mov	r6, r0

    ECP_VALIDATE_RET( grp   != NULL );
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    n_size = ( grp->nbits + 7 ) / 8;
   d9e32:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
{
   d9e34:	460c      	mov	r4, r1
   d9e36:	4690      	mov	r8, r2
   d9e38:	4699      	mov	r9, r3
        }
    }
#endif /* ECP_MONTGOMERY */

#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d9e3a:	f7fe fbe8 	bl	d860e <_ZL12ecp_get_typePK17mbedtls_ecp_group>
    n_size = ( grp->nbits + 7 ) / 8;
   d9e3e:	3507      	adds	r5, #7
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d9e40:	2801      	cmp	r0, #1
    n_size = ( grp->nbits + 7 ) / 8;
   d9e42:	ea4f 0bd5 	mov.w	fp, r5, lsr #3
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   d9e46:	d004      	beq.n	d9e52 <mbedtls_ecp_gen_privkey+0x26>
    int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   d9e48:	4d16      	ldr	r5, [pc, #88]	; (d9ea4 <mbedtls_ecp_gen_privkey+0x78>)
    }
#endif /* ECP_SHORTWEIERSTRASS */

cleanup:
    return( ret );
}
   d9e4a:	4628      	mov	r0, r5
   d9e4c:	b003      	add	sp, #12
   d9e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
   d9e52:	f025 0307 	bic.w	r3, r5, #7
   d9e56:	271f      	movs	r7, #31
   d9e58:	9301      	str	r3, [sp, #4]
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
   d9e5a:	f106 0a4c 	add.w	sl, r6, #76	; 0x4c
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
   d9e5e:	464b      	mov	r3, r9
   d9e60:	4642      	mov	r2, r8
   d9e62:	4659      	mov	r1, fp
   d9e64:	4620      	mov	r0, r4
   d9e66:	f007 ffcb 	bl	e1e00 <mbedtls_mpi_fill_random>
   d9e6a:	4605      	mov	r5, r0
   d9e6c:	2800      	cmp	r0, #0
   d9e6e:	d1ec      	bne.n	d9e4a <mbedtls_ecp_gen_privkey+0x1e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
   d9e70:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   d9e72:	9b01      	ldr	r3, [sp, #4]
   d9e74:	4620      	mov	r0, r4
   d9e76:	1a59      	subs	r1, r3, r1
   d9e78:	f007 f874 	bl	e0f64 <mbedtls_mpi_shift_r>
   d9e7c:	4605      	mov	r5, r0
   d9e7e:	2800      	cmp	r0, #0
   d9e80:	d1e3      	bne.n	d9e4a <mbedtls_ecp_gen_privkey+0x1e>
            if( ++count > 30 )
   d9e82:	3f01      	subs	r7, #1
   d9e84:	d00c      	beq.n	d9ea0 <mbedtls_ecp_gen_privkey+0x74>
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
   d9e86:	2101      	movs	r1, #1
   d9e88:	4620      	mov	r0, r4
   d9e8a:	f007 f986 	bl	e119a <mbedtls_mpi_cmp_int>
   d9e8e:	2800      	cmp	r0, #0
   d9e90:	dbe5      	blt.n	d9e5e <mbedtls_ecp_gen_privkey+0x32>
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
   d9e92:	4651      	mov	r1, sl
   d9e94:	4620      	mov	r0, r4
   d9e96:	f007 f93f 	bl	e1118 <mbedtls_mpi_cmp_mpi>
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
   d9e9a:	2800      	cmp	r0, #0
   d9e9c:	dadf      	bge.n	d9e5e <mbedtls_ecp_gen_privkey+0x32>
   d9e9e:	e7d4      	b.n	d9e4a <mbedtls_ecp_gen_privkey+0x1e>
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
   d9ea0:	4d01      	ldr	r5, [pc, #4]	; (d9ea8 <mbedtls_ecp_gen_privkey+0x7c>)
   d9ea2:	e7d2      	b.n	d9e4a <mbedtls_ecp_gen_privkey+0x1e>
   d9ea4:	ffffb080 	.word	0xffffb080
   d9ea8:	ffffb300 	.word	0xffffb300

000d9eac <mbedtls_ecp_check_pub_priv>:

/*
 * Check a public-private key pair
 */
int mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv )
{
   d9eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    mbedtls_ecp_point Q;
    mbedtls_ecp_group grp;
    ECP_VALIDATE_RET( pub != NULL );
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
   d9eb0:	7803      	ldrb	r3, [r0, #0]
{
   d9eb2:	b0aa      	sub	sp, #168	; 0xa8
   d9eb4:	4605      	mov	r5, r0
   d9eb6:	460c      	mov	r4, r1
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
   d9eb8:	b923      	cbnz	r3, d9ec4 <mbedtls_ecp_check_pub_priv+0x18>
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   d9eba:	4c28      	ldr	r4, [pc, #160]	; (d9f5c <mbedtls_ecp_check_pub_priv+0xb0>)
cleanup:
    mbedtls_ecp_point_free( &Q );
    mbedtls_ecp_group_free( &grp );

    return( ret );
}
   d9ebc:	4620      	mov	r0, r4
   d9ebe:	b02a      	add	sp, #168	; 0xa8
   d9ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
   d9ec4:	780a      	ldrb	r2, [r1, #0]
   d9ec6:	429a      	cmp	r2, r3
   d9ec8:	d1f7      	bne.n	d9eba <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
   d9eca:	f101 0888 	add.w	r8, r1, #136	; 0x88
   d9ece:	4641      	mov	r1, r8
   d9ed0:	3088      	adds	r0, #136	; 0x88
   d9ed2:	f007 f921 	bl	e1118 <mbedtls_mpi_cmp_mpi>
        pub->grp.id != prv->grp.id ||
   d9ed6:	2800      	cmp	r0, #0
   d9ed8:	d1ef      	bne.n	d9eba <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
   d9eda:	f104 0794 	add.w	r7, r4, #148	; 0x94
   d9ede:	4639      	mov	r1, r7
   d9ee0:	f105 0094 	add.w	r0, r5, #148	; 0x94
   d9ee4:	f007 f918 	bl	e1118 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
   d9ee8:	2800      	cmp	r0, #0
   d9eea:	d1e6      	bne.n	d9eba <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
   d9eec:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
   d9ef0:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
   d9ef4:	4631      	mov	r1, r6
   d9ef6:	f007 f90f 	bl	e1118 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
   d9efa:	4605      	mov	r5, r0
   d9efc:	2800      	cmp	r0, #0
   d9efe:	d1dc      	bne.n	d9eba <mbedtls_ecp_check_pub_priv+0xe>
    mbedtls_ecp_point_init( &Q );
   d9f00:	a802      	add	r0, sp, #8
   d9f02:	f7ff f805 	bl	d8f10 <mbedtls_ecp_point_init>
    mbedtls_ecp_group_init( &grp );
   d9f06:	a80b      	add	r0, sp, #44	; 0x2c
   d9f08:	f7ff f810 	bl	d8f2c <mbedtls_ecp_group_init>
    mbedtls_ecp_group_copy( &grp, &prv->grp );
   d9f0c:	4621      	mov	r1, r4
   d9f0e:	a80b      	add	r0, sp, #44	; 0x2c
   d9f10:	f7ff f895 	bl	d903e <mbedtls_ecp_group_copy>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );
   d9f14:	f104 0328 	add.w	r3, r4, #40	; 0x28
   d9f18:	f104 027c 	add.w	r2, r4, #124	; 0x7c
   d9f1c:	e9cd 5500 	strd	r5, r5, [sp]
   d9f20:	a902      	add	r1, sp, #8
   d9f22:	a80b      	add	r0, sp, #44	; 0x2c
   d9f24:	f7ff fefc 	bl	d9d20 <mbedtls_ecp_mul>
   d9f28:	4604      	mov	r4, r0
   d9f2a:	b980      	cbnz	r0, d9f4e <mbedtls_ecp_check_pub_priv+0xa2>
    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
   d9f2c:	4641      	mov	r1, r8
   d9f2e:	a802      	add	r0, sp, #8
   d9f30:	f007 f8f2 	bl	e1118 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
   d9f34:	b950      	cbnz	r0, d9f4c <mbedtls_ecp_check_pub_priv+0xa0>
   d9f36:	4639      	mov	r1, r7
   d9f38:	a805      	add	r0, sp, #20
   d9f3a:	f007 f8ed 	bl	e1118 <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
   d9f3e:	b928      	cbnz	r0, d9f4c <mbedtls_ecp_check_pub_priv+0xa0>
        mbedtls_mpi_cmp_mpi( &Q.Z, &prv->Q.Z ) )
   d9f40:	4631      	mov	r1, r6
   d9f42:	a808      	add	r0, sp, #32
   d9f44:	f007 f8e8 	bl	e1118 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
   d9f48:	4604      	mov	r4, r0
   d9f4a:	b100      	cbz	r0, d9f4e <mbedtls_ecp_check_pub_priv+0xa2>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   d9f4c:	4c03      	ldr	r4, [pc, #12]	; (d9f5c <mbedtls_ecp_check_pub_priv+0xb0>)
    if( pt == NULL )
   d9f4e:	a802      	add	r0, sp, #8
   d9f50:	f7fe ffa0 	bl	d8e94 <mbedtls_ecp_point_free.part.0>
    mbedtls_ecp_group_free( &grp );
   d9f54:	a80b      	add	r0, sp, #44	; 0x2c
   d9f56:	f7ff f81c 	bl	d8f92 <mbedtls_ecp_group_free>
    return( ret );
   d9f5a:	e7af      	b.n	d9ebc <mbedtls_ecp_check_pub_priv+0x10>
   d9f5c:	ffffb080 	.word	0xffffb080

000d9f60 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf.part.0>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
   d9f60:	b538      	push	{r3, r4, r5, lr}
   d9f62:	4c08      	ldr	r4, [pc, #32]	; (d9f84 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf.part.0+0x24>)
   d9f64:	4605      	mov	r5, r0
   d9f66:	6820      	ldr	r0, [r4, #0]
   d9f68:	b150      	cbz	r0, d9f80 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf.part.0+0x20>
   d9f6a:	686b      	ldr	r3, [r5, #4]
   d9f6c:	6862      	ldr	r2, [r4, #4]
   d9f6e:	429a      	cmp	r2, r3
   d9f70:	d103      	bne.n	d9f7a <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf.part.0+0x1a>
   d9f72:	68a9      	ldr	r1, [r5, #8]
   d9f74:	f00e ff2c 	bl	e8dd0 <memcmp>
   d9f78:	b108      	cbz	r0, d9f7e <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf.part.0+0x1e>
   d9f7a:	3414      	adds	r4, #20
   d9f7c:	e7f3      	b.n	d9f66 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf.part.0+0x6>
   d9f7e:	4620      	mov	r0, r4
   d9f80:	bd38      	pop	{r3, r4, r5, pc}
   d9f82:	bf00      	nop
   d9f84:	000ec3ec 	.word	0x000ec3ec

000d9f88 <mbedtls_oid_get_attr_short_name>:
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
   d9f88:	b570      	push	{r4, r5, r6, lr}
   d9f8a:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
   d9f8c:	4605      	mov	r5, r0
   d9f8e:	b160      	cbz	r0, d9faa <mbedtls_oid_get_attr_short_name+0x22>
   d9f90:	4c09      	ldr	r4, [pc, #36]	; (d9fb8 <mbedtls_oid_get_attr_short_name+0x30>)
   d9f92:	6820      	ldr	r0, [r4, #0]
   d9f94:	b148      	cbz	r0, d9faa <mbedtls_oid_get_attr_short_name+0x22>
   d9f96:	686b      	ldr	r3, [r5, #4]
   d9f98:	6862      	ldr	r2, [r4, #4]
   d9f9a:	429a      	cmp	r2, r3
   d9f9c:	d103      	bne.n	d9fa6 <mbedtls_oid_get_attr_short_name+0x1e>
   d9f9e:	68a9      	ldr	r1, [r5, #8]
   d9fa0:	f00e ff16 	bl	e8dd0 <memcmp>
   d9fa4:	b120      	cbz	r0, d9fb0 <mbedtls_oid_get_attr_short_name+0x28>
   d9fa6:	3414      	adds	r4, #20
   d9fa8:	e7f3      	b.n	d9f92 <mbedtls_oid_get_attr_short_name+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
   d9faa:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9fae:	bd70      	pop	{r4, r5, r6, pc}
   d9fb0:	6923      	ldr	r3, [r4, #16]
   d9fb2:	6033      	str	r3, [r6, #0]
   d9fb4:	e7fb      	b.n	d9fae <mbedtls_oid_get_attr_short_name+0x26>
   d9fb6:	bf00      	nop
   d9fb8:	000ec650 	.word	0x000ec650

000d9fbc <mbedtls_oid_get_x509_ext_type>:
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
   d9fbc:	b570      	push	{r4, r5, r6, lr}
   d9fbe:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
   d9fc0:	4605      	mov	r5, r0
   d9fc2:	b160      	cbz	r0, d9fde <mbedtls_oid_get_x509_ext_type+0x22>
   d9fc4:	4c09      	ldr	r4, [pc, #36]	; (d9fec <mbedtls_oid_get_x509_ext_type+0x30>)
   d9fc6:	6820      	ldr	r0, [r4, #0]
   d9fc8:	b148      	cbz	r0, d9fde <mbedtls_oid_get_x509_ext_type+0x22>
   d9fca:	686b      	ldr	r3, [r5, #4]
   d9fcc:	6862      	ldr	r2, [r4, #4]
   d9fce:	429a      	cmp	r2, r3
   d9fd0:	d103      	bne.n	d9fda <mbedtls_oid_get_x509_ext_type+0x1e>
   d9fd2:	68a9      	ldr	r1, [r5, #8]
   d9fd4:	f00e fefc 	bl	e8dd0 <memcmp>
   d9fd8:	b120      	cbz	r0, d9fe4 <mbedtls_oid_get_x509_ext_type+0x28>
   d9fda:	3414      	adds	r4, #20
   d9fdc:	e7f3      	b.n	d9fc6 <mbedtls_oid_get_x509_ext_type+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
   d9fde:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   d9fe2:	bd70      	pop	{r4, r5, r6, pc}
   d9fe4:	6923      	ldr	r3, [r4, #16]
   d9fe6:	6033      	str	r3, [r6, #0]
   d9fe8:	e7fb      	b.n	d9fe2 <mbedtls_oid_get_x509_ext_type+0x26>
   d9fea:	bf00      	nop
   d9fec:	000ec4f0 	.word	0x000ec4f0

000d9ff0 <mbedtls_oid_get_extended_key_usage>:
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
   d9ff0:	b570      	push	{r4, r5, r6, lr}
   d9ff2:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
   d9ff4:	4605      	mov	r5, r0
   d9ff6:	b160      	cbz	r0, da012 <mbedtls_oid_get_extended_key_usage+0x22>
   d9ff8:	4c09      	ldr	r4, [pc, #36]	; (da020 <mbedtls_oid_get_extended_key_usage+0x30>)
   d9ffa:	6820      	ldr	r0, [r4, #0]
   d9ffc:	b148      	cbz	r0, da012 <mbedtls_oid_get_extended_key_usage+0x22>
   d9ffe:	686b      	ldr	r3, [r5, #4]
   da000:	6862      	ldr	r2, [r4, #4]
   da002:	429a      	cmp	r2, r3
   da004:	d103      	bne.n	da00e <mbedtls_oid_get_extended_key_usage+0x1e>
   da006:	68a9      	ldr	r1, [r5, #8]
   da008:	f00e fee2 	bl	e8dd0 <memcmp>
   da00c:	b120      	cbz	r0, da018 <mbedtls_oid_get_extended_key_usage+0x28>
   da00e:	3410      	adds	r4, #16
   da010:	e7f3      	b.n	d9ffa <mbedtls_oid_get_extended_key_usage+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
   da012:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   da016:	bd70      	pop	{r4, r5, r6, pc}
   da018:	68e3      	ldr	r3, [r4, #12]
   da01a:	6033      	str	r3, [r6, #0]
   da01c:	e7fb      	b.n	da016 <mbedtls_oid_get_extended_key_usage+0x26>
   da01e:	bf00      	nop
   da020:	000ec5a4 	.word	0x000ec5a4

000da024 <mbedtls_oid_get_sig_alg_desc>:
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
   da024:	b510      	push	{r4, lr}
   da026:	460c      	mov	r4, r1
FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
   da028:	b130      	cbz	r0, da038 <mbedtls_oid_get_sig_alg_desc+0x14>
   da02a:	f7ff ff99 	bl	d9f60 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf.part.0>
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
   da02e:	b118      	cbz	r0, da038 <mbedtls_oid_get_sig_alg_desc+0x14>
   da030:	68c3      	ldr	r3, [r0, #12]
   da032:	6023      	str	r3, [r4, #0]
   da034:	2000      	movs	r0, #0
   da036:	bd10      	pop	{r4, pc}
   da038:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   da03c:	e7fb      	b.n	da036 <mbedtls_oid_get_sig_alg_desc+0x12>

000da03e <mbedtls_oid_get_sig_alg>:
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
   da03e:	b538      	push	{r3, r4, r5, lr}
   da040:	460d      	mov	r5, r1
   da042:	4614      	mov	r4, r2
FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
   da044:	b140      	cbz	r0, da058 <mbedtls_oid_get_sig_alg+0x1a>
   da046:	f7ff ff8b 	bl	d9f60 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf.part.0>
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
   da04a:	b128      	cbz	r0, da058 <mbedtls_oid_get_sig_alg+0x1a>
   da04c:	7c03      	ldrb	r3, [r0, #16]
   da04e:	702b      	strb	r3, [r5, #0]
   da050:	7c43      	ldrb	r3, [r0, #17]
   da052:	7023      	strb	r3, [r4, #0]
   da054:	2000      	movs	r0, #0
   da056:	bd38      	pop	{r3, r4, r5, pc}
   da058:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   da05c:	e7fb      	b.n	da056 <mbedtls_oid_get_sig_alg+0x18>
	...

000da060 <mbedtls_oid_get_pk_alg>:
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
   da060:	b570      	push	{r4, r5, r6, lr}
   da062:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
   da064:	4605      	mov	r5, r0
   da066:	b160      	cbz	r0, da082 <mbedtls_oid_get_pk_alg+0x22>
   da068:	4c09      	ldr	r4, [pc, #36]	; (da090 <mbedtls_oid_get_pk_alg+0x30>)
   da06a:	6820      	ldr	r0, [r4, #0]
   da06c:	b148      	cbz	r0, da082 <mbedtls_oid_get_pk_alg+0x22>
   da06e:	686b      	ldr	r3, [r5, #4]
   da070:	6862      	ldr	r2, [r4, #4]
   da072:	429a      	cmp	r2, r3
   da074:	d103      	bne.n	da07e <mbedtls_oid_get_pk_alg+0x1e>
   da076:	68a9      	ldr	r1, [r5, #8]
   da078:	f00e feaa 	bl	e8dd0 <memcmp>
   da07c:	b120      	cbz	r0, da088 <mbedtls_oid_get_pk_alg+0x28>
   da07e:	3414      	adds	r4, #20
   da080:	e7f3      	b.n	da06a <mbedtls_oid_get_pk_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
   da082:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   da086:	bd70      	pop	{r4, r5, r6, pc}
   da088:	7c23      	ldrb	r3, [r4, #16]
   da08a:	7033      	strb	r3, [r6, #0]
   da08c:	e7fb      	b.n	da086 <mbedtls_oid_get_pk_alg+0x26>
   da08e:	bf00      	nop
   da090:	000ec2fc 	.word	0x000ec2fc

000da094 <mbedtls_oid_get_ec_grp>:
        MBEDTLS_ECP_DP_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
   da094:	b570      	push	{r4, r5, r6, lr}
   da096:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
   da098:	4605      	mov	r5, r0
   da09a:	b160      	cbz	r0, da0b6 <mbedtls_oid_get_ec_grp+0x22>
   da09c:	4c09      	ldr	r4, [pc, #36]	; (da0c4 <mbedtls_oid_get_ec_grp+0x30>)
   da09e:	6820      	ldr	r0, [r4, #0]
   da0a0:	b148      	cbz	r0, da0b6 <mbedtls_oid_get_ec_grp+0x22>
   da0a2:	686b      	ldr	r3, [r5, #4]
   da0a4:	6862      	ldr	r2, [r4, #4]
   da0a6:	429a      	cmp	r2, r3
   da0a8:	d103      	bne.n	da0b2 <mbedtls_oid_get_ec_grp+0x1e>
   da0aa:	68a9      	ldr	r1, [r5, #8]
   da0ac:	f00e fe90 	bl	e8dd0 <memcmp>
   da0b0:	b120      	cbz	r0, da0bc <mbedtls_oid_get_ec_grp+0x28>
   da0b2:	3414      	adds	r4, #20
   da0b4:	e7f3      	b.n	da09e <mbedtls_oid_get_ec_grp+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
   da0b6:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   da0ba:	bd70      	pop	{r4, r5, r6, pc}
   da0bc:	7c23      	ldrb	r3, [r4, #16]
   da0be:	7033      	strb	r3, [r6, #0]
   da0c0:	e7fb      	b.n	da0ba <mbedtls_oid_get_ec_grp+0x26>
   da0c2:	bf00      	nop
   da0c4:	000ec34c 	.word	0x000ec34c

000da0c8 <mbedtls_oid_get_cipher_alg>:
        MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
   da0c8:	b570      	push	{r4, r5, r6, lr}
   da0ca:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
   da0cc:	4605      	mov	r5, r0
   da0ce:	b160      	cbz	r0, da0ea <mbedtls_oid_get_cipher_alg+0x22>
   da0d0:	4c09      	ldr	r4, [pc, #36]	; (da0f8 <mbedtls_oid_get_cipher_alg+0x30>)
   da0d2:	6820      	ldr	r0, [r4, #0]
   da0d4:	b148      	cbz	r0, da0ea <mbedtls_oid_get_cipher_alg+0x22>
   da0d6:	686b      	ldr	r3, [r5, #4]
   da0d8:	6862      	ldr	r2, [r4, #4]
   da0da:	429a      	cmp	r2, r3
   da0dc:	d103      	bne.n	da0e6 <mbedtls_oid_get_cipher_alg+0x1e>
   da0de:	68a9      	ldr	r1, [r5, #8]
   da0e0:	f00e fe76 	bl	e8dd0 <memcmp>
   da0e4:	b120      	cbz	r0, da0f0 <mbedtls_oid_get_cipher_alg+0x28>
   da0e6:	3414      	adds	r4, #20
   da0e8:	e7f3      	b.n	da0d2 <mbedtls_oid_get_cipher_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
   da0ea:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   da0ee:	bd70      	pop	{r4, r5, r6, pc}
   da0f0:	7c23      	ldrb	r3, [r4, #16]
   da0f2:	7033      	strb	r3, [r6, #0]
   da0f4:	e7fb      	b.n	da0ee <mbedtls_oid_get_cipher_alg+0x26>
   da0f6:	bf00      	nop
   da0f8:	000ec568 	.word	0x000ec568

000da0fc <mbedtls_oid_get_md_alg>:
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
   da0fc:	b570      	push	{r4, r5, r6, lr}
   da0fe:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
   da100:	4605      	mov	r5, r0
   da102:	b160      	cbz	r0, da11e <mbedtls_oid_get_md_alg+0x22>
   da104:	4c09      	ldr	r4, [pc, #36]	; (da12c <mbedtls_oid_get_md_alg+0x30>)
   da106:	6820      	ldr	r0, [r4, #0]
   da108:	b148      	cbz	r0, da11e <mbedtls_oid_get_md_alg+0x22>
   da10a:	686b      	ldr	r3, [r5, #4]
   da10c:	6862      	ldr	r2, [r4, #4]
   da10e:	429a      	cmp	r2, r3
   da110:	d103      	bne.n	da11a <mbedtls_oid_get_md_alg+0x1e>
   da112:	68a9      	ldr	r1, [r5, #8]
   da114:	f00e fe5c 	bl	e8dd0 <memcmp>
   da118:	b120      	cbz	r0, da124 <mbedtls_oid_get_md_alg+0x28>
   da11a:	3414      	adds	r4, #20
   da11c:	e7f3      	b.n	da106 <mbedtls_oid_get_md_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
   da11e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   da122:	bd70      	pop	{r4, r5, r6, pc}
   da124:	7c23      	ldrb	r3, [r4, #16]
   da126:	7033      	strb	r3, [r6, #0]
   da128:	e7fb      	b.n	da122 <mbedtls_oid_get_md_alg+0x26>
   da12a:	bf00      	nop
   da12c:	000ec284 	.word	0x000ec284

000da130 <mbedtls_oid_get_oid_by_md>:
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
   da130:	b530      	push	{r4, r5, lr}
   da132:	4b08      	ldr	r3, [pc, #32]	; (da154 <mbedtls_oid_get_oid_by_md+0x24>)
   da134:	681c      	ldr	r4, [r3, #0]
   da136:	b14c      	cbz	r4, da14c <mbedtls_oid_get_oid_by_md+0x1c>
   da138:	7c1d      	ldrb	r5, [r3, #16]
   da13a:	4285      	cmp	r5, r0
   da13c:	d104      	bne.n	da148 <mbedtls_oid_get_oid_by_md+0x18>
   da13e:	600c      	str	r4, [r1, #0]
   da140:	685b      	ldr	r3, [r3, #4]
   da142:	6013      	str	r3, [r2, #0]
   da144:	2000      	movs	r0, #0
   da146:	bd30      	pop	{r4, r5, pc}
   da148:	3314      	adds	r3, #20
   da14a:	e7f3      	b.n	da134 <mbedtls_oid_get_oid_by_md+0x4>
   da14c:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   da150:	e7f9      	b.n	da146 <mbedtls_oid_get_oid_by_md+0x16>
   da152:	bf00      	nop
   da154:	000ec284 	.word	0x000ec284

000da158 <mbedtls_oid_get_md_hmac>:
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
   da158:	b570      	push	{r4, r5, r6, lr}
   da15a:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
   da15c:	4605      	mov	r5, r0
   da15e:	b160      	cbz	r0, da17a <mbedtls_oid_get_md_hmac+0x22>
   da160:	4c09      	ldr	r4, [pc, #36]	; (da188 <mbedtls_oid_get_md_hmac+0x30>)
   da162:	6820      	ldr	r0, [r4, #0]
   da164:	b148      	cbz	r0, da17a <mbedtls_oid_get_md_hmac+0x22>
   da166:	686b      	ldr	r3, [r5, #4]
   da168:	6862      	ldr	r2, [r4, #4]
   da16a:	429a      	cmp	r2, r3
   da16c:	d103      	bne.n	da176 <mbedtls_oid_get_md_hmac+0x1e>
   da16e:	68a9      	ldr	r1, [r5, #8]
   da170:	f00e fe2e 	bl	e8dd0 <memcmp>
   da174:	b120      	cbz	r0, da180 <mbedtls_oid_get_md_hmac+0x28>
   da176:	3414      	adds	r4, #20
   da178:	e7f3      	b.n	da162 <mbedtls_oid_get_md_hmac+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
   da17a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   da17e:	bd70      	pop	{r4, r5, r6, pc}
   da180:	7c23      	ldrb	r3, [r4, #16]
   da182:	7033      	strb	r3, [r6, #0]
   da184:	e7fb      	b.n	da17e <mbedtls_oid_get_md_hmac+0x26>
   da186:	bf00      	nop
   da188:	000ec374 	.word	0x000ec374

000da18c <mbedtls_oid_get_pkcs12_pbe_alg>:
        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
   da18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da18e:	460f      	mov	r7, r1
   da190:	4616      	mov	r6, r2
FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
   da192:	4605      	mov	r5, r0
   da194:	b160      	cbz	r0, da1b0 <mbedtls_oid_get_pkcs12_pbe_alg+0x24>
   da196:	4c0a      	ldr	r4, [pc, #40]	; (da1c0 <mbedtls_oid_get_pkcs12_pbe_alg+0x34>)
   da198:	6820      	ldr	r0, [r4, #0]
   da19a:	b148      	cbz	r0, da1b0 <mbedtls_oid_get_pkcs12_pbe_alg+0x24>
   da19c:	686b      	ldr	r3, [r5, #4]
   da19e:	6862      	ldr	r2, [r4, #4]
   da1a0:	429a      	cmp	r2, r3
   da1a2:	d103      	bne.n	da1ac <mbedtls_oid_get_pkcs12_pbe_alg+0x20>
   da1a4:	68a9      	ldr	r1, [r5, #8]
   da1a6:	f00e fe13 	bl	e8dd0 <memcmp>
   da1aa:	b120      	cbz	r0, da1b6 <mbedtls_oid_get_pkcs12_pbe_alg+0x2a>
   da1ac:	3414      	adds	r4, #20
   da1ae:	e7f3      	b.n	da198 <mbedtls_oid_get_pkcs12_pbe_alg+0xc>
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
   da1b0:	f06f 002d 	mvn.w	r0, #45	; 0x2d
   da1b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   da1b6:	7c23      	ldrb	r3, [r4, #16]
   da1b8:	703b      	strb	r3, [r7, #0]
   da1ba:	7c63      	ldrb	r3, [r4, #17]
   da1bc:	7033      	strb	r3, [r6, #0]
   da1be:	e7f9      	b.n	da1b4 <mbedtls_oid_get_pkcs12_pbe_alg+0x28>
   da1c0:	000ec614 	.word	0x000ec614

000da1c4 <mbedtls_sha1_init>:

void mbedtls_sha1_init( mbedtls_sha1_context *ctx )
{
    SHA1_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha1_context ) );
   da1c4:	225c      	movs	r2, #92	; 0x5c
   da1c6:	2100      	movs	r1, #0
   da1c8:	f00e be38 	b.w	e8e3c <memset>

000da1cc <mbedtls_sha1_free>:
}

void mbedtls_sha1_free( mbedtls_sha1_context *ctx )
{
    if( ctx == NULL )
   da1cc:	b110      	cbz	r0, da1d4 <mbedtls_sha1_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha1_context ) );
   da1ce:	215c      	movs	r1, #92	; 0x5c
   da1d0:	f008 bcf8 	b.w	e2bc4 <mbedtls_platform_zeroize>
}
   da1d4:	4770      	bx	lr

000da1d6 <mbedtls_sha1_clone>:

void mbedtls_sha1_clone( mbedtls_sha1_context *dst,
                         const mbedtls_sha1_context *src )
{
   da1d6:	b508      	push	{r3, lr}
    SHA1_VALIDATE( dst != NULL );
    SHA1_VALIDATE( src != NULL );

    *dst = *src;
   da1d8:	225c      	movs	r2, #92	; 0x5c
   da1da:	f00e fe07 	bl	e8dec <memcpy>
}
   da1de:	bd08      	pop	{r3, pc}

000da1e0 <mbedtls_sha1_starts_ret>:
    SHA1_VALIDATE_RET( ctx != NULL );

    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
   da1e0:	4a0a      	ldr	r2, [pc, #40]	; (da20c <mbedtls_sha1_starts_ret+0x2c>)
   da1e2:	6082      	str	r2, [r0, #8]
    ctx->state[1] = 0xEFCDAB89;
   da1e4:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
   da1e8:	60c2      	str	r2, [r0, #12]
    ctx->state[2] = 0x98BADCFE;
   da1ea:	f102 4229 	add.w	r2, r2, #2835349504	; 0xa9000000
   da1ee:	f5a2 1296 	sub.w	r2, r2, #1228800	; 0x12c000
   da1f2:	f6a2 628b 	subw	r2, r2, #3723	; 0xe8b
   da1f6:	6102      	str	r2, [r0, #16]
    ctx->state[3] = 0x10325476;
   da1f8:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
    ctx->total[0] = 0;
   da1fc:	2300      	movs	r3, #0
    ctx->state[3] = 0x10325476;
   da1fe:	6142      	str	r2, [r0, #20]
    ctx->state[4] = 0xC3D2E1F0;
   da200:	4a03      	ldr	r2, [pc, #12]	; (da210 <mbedtls_sha1_starts_ret+0x30>)
   da202:	6182      	str	r2, [r0, #24]
    ctx->total[1] = 0;
   da204:	e9c0 3300 	strd	r3, r3, [r0]

    return( 0 );
}
   da208:	4618      	mov	r0, r3
   da20a:	4770      	bx	lr
   da20c:	67452301 	.word	0x67452301
   da210:	c3d2e1f0 	.word	0xc3d2e1f0

000da214 <mbedtls_internal_sha1_process>:
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
   da214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da218:	680d      	ldr	r5, [r1, #0]
   da21a:	684a      	ldr	r2, [r1, #4]
   da21c:	698f      	ldr	r7, [r1, #24]
   da21e:	6acc      	ldr	r4, [r1, #44]	; 0x2c
   da220:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
   da224:	f8d1 a008 	ldr.w	sl, [r1, #8]
   da228:	68ce      	ldr	r6, [r1, #12]
   da22a:	f8d1 8010 	ldr.w	r8, [r1, #16]
   da22e:	b099      	sub	sp, #100	; 0x64
   da230:	ba2b      	rev	r3, r5
   da232:	9306      	str	r3, [sp, #24]
   da234:	ba13      	rev	r3, r2
   da236:	9307      	str	r3, [sp, #28]
   da238:	694b      	ldr	r3, [r1, #20]
   da23a:	9000      	str	r0, [sp, #0]
    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( (const unsigned char *)data != NULL );

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
   da23c:	ba1b      	rev	r3, r3
   da23e:	9309      	str	r3, [sp, #36]	; 0x24
   da240:	ba3b      	rev	r3, r7
   da242:	9310      	str	r3, [sp, #64]	; 0x40
   da244:	69cb      	ldr	r3, [r1, #28]
   da246:	6a48      	ldr	r0, [r1, #36]	; 0x24
   da248:	6a0a      	ldr	r2, [r1, #32]
   da24a:	ba1b      	rev	r3, r3
   da24c:	9311      	str	r3, [sp, #68]	; 0x44
   da24e:	ba03      	rev	r3, r0
   da250:	930a      	str	r3, [sp, #40]	; 0x28
   da252:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   da254:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
   da256:	ba1b      	rev	r3, r3
   da258:	930b      	str	r3, [sp, #44]	; 0x2c
   da25a:	ba23      	rev	r3, r4
   da25c:	930c      	str	r3, [sp, #48]	; 0x30
   da25e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   da260:	ba1b      	rev	r3, r3
   da262:	930d      	str	r3, [sp, #52]	; 0x34
   da264:	fa9e f38e 	rev.w	r3, lr
   da268:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
   da26c:	9302      	str	r3, [sp, #8]
   da26e:	fa9e f38e 	rev.w	r3, lr
   da272:	9303      	str	r3, [sp, #12]
   da274:	ba03      	rev	r3, r0
   da276:	9304      	str	r3, [sp, #16]
    {                                                           \
        (e) += S((a),5) + F((b),(c),(d)) + K + (x);             \
        (b) = S((b),30);                                        \
    } while( 0 )

    A = ctx->state[0];
   da278:	9b00      	ldr	r3, [sp, #0]
   da27a:	689b      	ldr	r3, [r3, #8]
   da27c:	930e      	str	r3, [sp, #56]	; 0x38
    B = ctx->state[1];
   da27e:	9b00      	ldr	r3, [sp, #0]
    E = ctx->state[4];

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
   da280:	990e      	ldr	r1, [sp, #56]	; 0x38
    B = ctx->state[1];
   da282:	68db      	ldr	r3, [r3, #12]
   da284:	9301      	str	r3, [sp, #4]
    C = ctx->state[2];
   da286:	9b00      	ldr	r3, [sp, #0]
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
   da288:	9801      	ldr	r0, [sp, #4]
    C = ctx->state[2];
   da28a:	691b      	ldr	r3, [r3, #16]
   da28c:	9305      	str	r3, [sp, #20]
    D = ctx->state[3];
   da28e:	9b00      	ldr	r3, [sp, #0]
    P( C, D, E, A, B, W[3]  );
   da290:	9f01      	ldr	r7, [sp, #4]
    D = ctx->state[3];
   da292:	695b      	ldr	r3, [r3, #20]
   da294:	930f      	str	r3, [sp, #60]	; 0x3c
    E = ctx->state[4];
   da296:	9b00      	ldr	r3, [sp, #0]
    P( B, C, D, E, A, W[4]  );
    P( A, B, C, D, E, W[5]  );
   da298:	9d09      	ldr	r5, [sp, #36]	; 0x24
    E = ctx->state[4];
   da29a:	699b      	ldr	r3, [r3, #24]
   da29c:	9312      	str	r3, [sp, #72]	; 0x48
   da29e:	fa92 f982 	rev.w	r9, r2
    P( A, B, C, D, E, W[0]  );
   da2a2:	9b05      	ldr	r3, [sp, #20]
   da2a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   da2a6:	ea83 0c02 	eor.w	ip, r3, r2
   da2aa:	9b01      	ldr	r3, [sp, #4]
   da2ac:	ea0c 0c03 	and.w	ip, ip, r3
   da2b0:	ea8c 0c02 	eor.w	ip, ip, r2
   da2b4:	4bde      	ldr	r3, [pc, #888]	; (da630 <mbedtls_internal_sha1_process+0x41c>)
   da2b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   da2b8:	441a      	add	r2, r3
   da2ba:	eb02 62f1 	add.w	r2, r2, r1, ror #27
   da2be:	4494      	add	ip, r2
   da2c0:	9a06      	ldr	r2, [sp, #24]
    P( E, A, B, C, D, W[1]  );
   da2c2:	9901      	ldr	r1, [sp, #4]
    P( A, B, C, D, E, W[0]  );
   da2c4:	4494      	add	ip, r2
    P( E, A, B, C, D, W[1]  );
   da2c6:	9a05      	ldr	r2, [sp, #20]
   da2c8:	ea82 02b1 	eor.w	r2, r2, r1, ror #2
   da2cc:	990e      	ldr	r1, [sp, #56]	; 0x38
   da2ce:	400a      	ands	r2, r1
   da2d0:	9905      	ldr	r1, [sp, #20]
   da2d2:	404a      	eors	r2, r1
   da2d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   da2d6:	4419      	add	r1, r3
   da2d8:	440a      	add	r2, r1
   da2da:	9907      	ldr	r1, [sp, #28]
   da2dc:	440a      	add	r2, r1
   da2de:	990e      	ldr	r1, [sp, #56]	; 0x38
   da2e0:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, W[2]  );
   da2e4:	ea81 04b0 	eor.w	r4, r1, r0, ror #2
   da2e8:	ea04 040c 	and.w	r4, r4, ip
   da2ec:	ea84 04b0 	eor.w	r4, r4, r0, ror #2
   da2f0:	9805      	ldr	r0, [sp, #20]
   da2f2:	fa9a fa8a 	rev.w	sl, sl
   da2f6:	4418      	add	r0, r3
   da2f8:	4450      	add	r0, sl
    P( E, A, B, C, D, W[1]  );
   da2fa:	eb02 62fc 	add.w	r2, r2, ip, ror #27
    P( D, E, A, B, C, W[2]  );
   da2fe:	4404      	add	r4, r0
    P( C, D, E, A, B, W[3]  );
   da300:	ea81 00bc 	eor.w	r0, r1, ip, ror #2
   da304:	ba36      	rev	r6, r6
   da306:	4010      	ands	r0, r2
   da308:	eb03 07b7 	add.w	r7, r3, r7, ror #2
    P( D, E, A, B, C, W[2]  );
   da30c:	eb04 64f2 	add.w	r4, r4, r2, ror #27
    P( C, D, E, A, B, W[3]  );
   da310:	4437      	add	r7, r6
   da312:	ea4f 02b2 	mov.w	r2, r2, ror #2
   da316:	4048      	eors	r0, r1
   da318:	4438      	add	r0, r7
    P( B, C, D, E, A, W[4]  );
   da31a:	ea82 07bc 	eor.w	r7, r2, ip, ror #2
   da31e:	fa98 f888 	rev.w	r8, r8
   da322:	4027      	ands	r7, r4
   da324:	4419      	add	r1, r3
   da326:	4441      	add	r1, r8
   da328:	ea87 07bc 	eor.w	r7, r7, ip, ror #2
    P( C, D, E, A, B, W[3]  );
   da32c:	eb00 60f4 	add.w	r0, r0, r4, ror #27
    P( B, C, D, E, A, W[4]  );
   da330:	440f      	add	r7, r1
    P( A, B, C, D, E, W[5]  );
   da332:	ea82 01b4 	eor.w	r1, r2, r4, ror #2
   da336:	eb05 0e03 	add.w	lr, r5, r3
   da33a:	4001      	ands	r1, r0
    P( B, C, D, E, A, W[4]  );
   da33c:	eb07 67f0 	add.w	r7, r7, r0, ror #27
    P( E, A, B, C, D, W[6]  );
   da340:	9d10      	ldr	r5, [sp, #64]	; 0x40
    P( A, B, C, D, E, W[5]  );
   da342:	ea4f 00b0 	mov.w	r0, r0, ror #2
   da346:	eb0e 0cbc 	add.w	ip, lr, ip, ror #2
   da34a:	4051      	eors	r1, r2
   da34c:	4461      	add	r1, ip
    P( E, A, B, C, D, W[6]  );
   da34e:	ea80 0cb4 	eor.w	ip, r0, r4, ror #2
   da352:	eb05 0e03 	add.w	lr, r5, r3
   da356:	ea0c 0c07 	and.w	ip, ip, r7
   da35a:	4472      	add	r2, lr
   da35c:	ea8c 0cb4 	eor.w	ip, ip, r4, ror #2
   da360:	4494      	add	ip, r2
    P( D, E, A, B, C, W[7]  );
   da362:	9a11      	ldr	r2, [sp, #68]	; 0x44
    P( A, B, C, D, E, W[5]  );
   da364:	eb01 61f7 	add.w	r1, r1, r7, ror #27
    P( D, E, A, B, C, W[7]  );
   da368:	ea80 0eb7 	eor.w	lr, r0, r7, ror #2
    P( E, A, B, C, D, W[6]  );
   da36c:	eb0c 6cf1 	add.w	ip, ip, r1, ror #27
    P( D, E, A, B, C, W[7]  );
   da370:	441a      	add	r2, r3
   da372:	ea0e 0e01 	and.w	lr, lr, r1
   da376:	ea4f 01b1 	mov.w	r1, r1, ror #2
   da37a:	eb02 04b4 	add.w	r4, r2, r4, ror #2
   da37e:	ea8e 0e00 	eor.w	lr, lr, r0
    P( C, D, E, A, B, W[8]  );
   da382:	ea81 02b7 	eor.w	r2, r1, r7, ror #2
    P( D, E, A, B, C, W[7]  );
   da386:	44a6      	add	lr, r4
    P( C, D, E, A, B, W[8]  );
   da388:	ea02 020c 	and.w	r2, r2, ip
   da38c:	eb09 0403 	add.w	r4, r9, r3
   da390:	4420      	add	r0, r4
   da392:	ea82 02b7 	eor.w	r2, r2, r7, ror #2
    P( B, C, D, E, A, W[9]  );
   da396:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( D, E, A, B, C, W[7]  );
   da398:	eb0e 6efc 	add.w	lr, lr, ip, ror #27
    P( C, D, E, A, B, W[8]  );
   da39c:	4402      	add	r2, r0
    P( B, C, D, E, A, W[9]  );
   da39e:	ea81 00bc 	eor.w	r0, r1, ip, ror #2
   da3a2:	441c      	add	r4, r3
   da3a4:	ea00 000e 	and.w	r0, r0, lr
    P( C, D, E, A, B, W[8]  );
   da3a8:	eb02 62fe 	add.w	r2, r2, lr, ror #27
    P( B, C, D, E, A, W[9]  );
   da3ac:	eb04 07b7 	add.w	r7, r4, r7, ror #2
   da3b0:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( A, B, C, D, E, W[10] );
   da3b4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    P( B, C, D, E, A, W[9]  );
   da3b6:	4048      	eors	r0, r1
   da3b8:	4438      	add	r0, r7
    P( A, B, C, D, E, W[10] );
   da3ba:	ea8e 07bc 	eor.w	r7, lr, ip, ror #2
   da3be:	441c      	add	r4, r3
   da3c0:	4017      	ands	r7, r2
   da3c2:	4421      	add	r1, r4
   da3c4:	ea87 07bc 	eor.w	r7, r7, ip, ror #2
    P( E, A, B, C, D, W[11] );
   da3c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    P( B, C, D, E, A, W[9]  );
   da3ca:	eb00 60f2 	add.w	r0, r0, r2, ror #27
    P( A, B, C, D, E, W[10] );
   da3ce:	440f      	add	r7, r1
    P( E, A, B, C, D, W[11] );
   da3d0:	ea8e 01b2 	eor.w	r1, lr, r2, ror #2
   da3d4:	441c      	add	r4, r3
   da3d6:	4001      	ands	r1, r0
   da3d8:	ea81 010e 	eor.w	r1, r1, lr
   da3dc:	eb04 0cbc 	add.w	ip, r4, ip, ror #2
    P( A, B, C, D, E, W[10] );
   da3e0:	eb07 67f0 	add.w	r7, r7, r0, ror #27
    P( E, A, B, C, D, W[11] );
   da3e4:	448c      	add	ip, r1
   da3e6:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, W[12] );
   da3ea:	990d      	ldr	r1, [sp, #52]	; 0x34
   da3ec:	ea80 04b2 	eor.w	r4, r0, r2, ror #2
   da3f0:	4419      	add	r1, r3
   da3f2:	403c      	ands	r4, r7
   da3f4:	448e      	add	lr, r1
   da3f6:	ea84 04b2 	eor.w	r4, r4, r2, ror #2
    P( C, D, E, A, B, W[13] );
   da3fa:	9902      	ldr	r1, [sp, #8]
    P( E, A, B, C, D, W[11] );
   da3fc:	eb0c 6cf7 	add.w	ip, ip, r7, ror #27
    P( D, E, A, B, C, W[12] );
   da400:	4474      	add	r4, lr
    P( C, D, E, A, B, W[13] );
   da402:	ea80 0eb7 	eor.w	lr, r0, r7, ror #2
   da406:	4419      	add	r1, r3
   da408:	ea0e 0e0c 	and.w	lr, lr, ip
   da40c:	eb01 02b2 	add.w	r2, r1, r2, ror #2
   da410:	ea8e 0e00 	eor.w	lr, lr, r0
   da414:	4496      	add	lr, r2
    P( B, C, D, E, A, W[14] );
   da416:	9a03      	ldr	r2, [sp, #12]
   da418:	441a      	add	r2, r3
    P( D, E, A, B, C, W[12] );
   da41a:	eb04 64fc 	add.w	r4, r4, ip, ror #27
    P( B, C, D, E, A, W[14] );
   da41e:	4410      	add	r0, r2
    P( C, D, E, A, B, W[13] );
   da420:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( A, B, C, D, E, W[15] );
   da424:	9a04      	ldr	r2, [sp, #16]
    P( B, C, D, E, A, W[14] );
   da426:	ea8c 0bb7 	eor.w	fp, ip, r7, ror #2
    P( A, B, C, D, E, W[15] );
   da42a:	441a      	add	r2, r3
    P( B, C, D, E, A, W[14] );
   da42c:	ea0b 0b04 	and.w	fp, fp, r4
   da430:	ea8b 0bb7 	eor.w	fp, fp, r7, ror #2
    P( A, B, C, D, E, W[15] );
   da434:	eb02 07b7 	add.w	r7, r2, r7, ror #2
    P( E, A, B, C, D, R(16) );
   da438:	9a06      	ldr	r2, [sp, #24]
   da43a:	ea82 050a 	eor.w	r5, r2, sl
   da43e:	9a02      	ldr	r2, [sp, #8]
   da440:	ea85 0509 	eor.w	r5, r5, r9
    P( C, D, E, A, B, W[13] );
   da444:	eb0e 6ef4 	add.w	lr, lr, r4, ror #27
    P( A, B, C, D, E, W[15] );
   da448:	ea8c 01b4 	eor.w	r1, ip, r4, ror #2
    P( E, A, B, C, D, R(16) );
   da44c:	406a      	eors	r2, r5
   da44e:	9206      	str	r2, [sp, #24]
    P( A, B, C, D, E, W[15] );
   da450:	ea01 010e 	and.w	r1, r1, lr
    P( E, A, B, C, D, R(16) );
   da454:	eb03 72f2 	add.w	r2, r3, r2, ror #31
    P( A, B, C, D, E, W[15] );
   da458:	ea81 010c 	eor.w	r1, r1, ip
    P( E, A, B, C, D, R(16) );
   da45c:	4494      	add	ip, r2
    P( D, E, A, B, C, R(17) );
   da45e:	9a07      	ldr	r2, [sp, #28]
    P( B, C, D, E, A, W[14] );
   da460:	4483      	add	fp, r0
    P( D, E, A, B, C, R(17) );
   da462:	980a      	ldr	r0, [sp, #40]	; 0x28
   da464:	4072      	eors	r2, r6
   da466:	4042      	eors	r2, r0
   da468:	9803      	ldr	r0, [sp, #12]
    P( B, C, D, E, A, W[14] );
   da46a:	eb0b 6bfe 	add.w	fp, fp, lr, ror #27
    P( A, B, C, D, E, W[15] );
   da46e:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( D, E, A, B, C, R(17) );
   da472:	4042      	eors	r2, r0
    P( A, B, C, D, E, W[15] );
   da474:	4439      	add	r1, r7
    P( E, A, B, C, D, R(16) );
   da476:	ea8e 07b4 	eor.w	r7, lr, r4, ror #2
    P( D, E, A, B, C, R(17) );
   da47a:	9207      	str	r2, [sp, #28]
    P( E, A, B, C, D, R(16) );
   da47c:	ea07 070b 	and.w	r7, r7, fp
    P( D, E, A, B, C, R(17) );
   da480:	eb03 72f2 	add.w	r2, r3, r2, ror #31
    P( E, A, B, C, D, R(16) );
   da484:	ea87 07b4 	eor.w	r7, r7, r4, ror #2
    P( D, E, A, B, C, R(17) );
   da488:	eb02 04b4 	add.w	r4, r2, r4, ror #2
    P( C, D, E, A, B, R(18) );
   da48c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   da48e:	ea8a 0a08 	eor.w	sl, sl, r8
   da492:	ea8a 0a02 	eor.w	sl, sl, r2
   da496:	9a04      	ldr	r2, [sp, #16]
    P( A, B, C, D, E, W[15] );
   da498:	eb01 61fb 	add.w	r1, r1, fp, ror #27
    P( C, D, E, A, B, R(18) );
   da49c:	ea8a 0a02 	eor.w	sl, sl, r2
    P( E, A, B, C, D, R(16) );
   da4a0:	4467      	add	r7, ip
    P( D, E, A, B, C, R(17) );
   da4a2:	ea8e 0cbb 	eor.w	ip, lr, fp, ror #2
    P( C, D, E, A, B, R(18) );
   da4a6:	eb03 70fa 	add.w	r0, r3, sl, ror #31
    P( D, E, A, B, C, R(17) );
   da4aa:	ea0c 0c01 	and.w	ip, ip, r1
   da4ae:	ea8c 0c0e 	eor.w	ip, ip, lr
    P( C, D, E, A, B, R(18) );
   da4b2:	4486      	add	lr, r0
    P( B, C, D, E, A, R(19) );
   da4b4:	9809      	ldr	r0, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(17) );
   da4b6:	44a4      	add	ip, r4
    P( B, C, D, E, A, R(19) );
   da4b8:	ea86 0400 	eor.w	r4, r6, r0
   da4bc:	980c      	ldr	r0, [sp, #48]	; 0x30
   da4be:	4044      	eors	r4, r0
   da4c0:	9806      	ldr	r0, [sp, #24]
   da4c2:	ea84 74f0 	eor.w	r4, r4, r0, ror #31
    P( E, A, B, C, D, R(16) );
   da4c6:	eb07 67f1 	add.w	r7, r7, r1, ror #27
    P( B, C, D, E, A, R(19) );
   da4ca:	ea4f 70f4 	mov.w	r0, r4, ror #31
    P( D, E, A, B, C, R(17) );
   da4ce:	ea4f 01b1 	mov.w	r1, r1, ror #2
   da4d2:	eb0c 6cf7 	add.w	ip, ip, r7, ror #27
    P( B, C, D, E, A, R(19) );
   da4d6:	9014      	str	r0, [sp, #80]	; 0x50
   da4d8:	ea81 00b7 	eor.w	r0, r1, r7, ror #2
   da4dc:	ea00 000c 	and.w	r0, r0, ip
   da4e0:	eb03 73f4 	add.w	r3, r3, r4, ror #31
   da4e4:	eb03 03bb 	add.w	r3, r3, fp, ror #2
   da4e8:	4048      	eors	r0, r1
   da4ea:	4418      	add	r0, r3
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
   da4ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
   da4ee:	ea88 0803 	eor.w	r8, r8, r3
   da4f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( C, D, E, A, B, R(18) );
   da4f4:	ea4f 72fa 	mov.w	r2, sl, ror #31
    P( A, B, C, D, E, R(20) );
   da4f8:	ea88 0803 	eor.w	r8, r8, r3
   da4fc:	9b07      	ldr	r3, [sp, #28]
    P( C, D, E, A, B, R(18) );
   da4fe:	9213      	str	r2, [sp, #76]	; 0x4c
   da500:	ea81 02bb 	eor.w	r2, r1, fp, ror #2
    P( A, B, C, D, E, R(20) );
   da504:	ea88 73f3 	eor.w	r3, r8, r3, ror #31
    P( C, D, E, A, B, R(18) );
   da508:	403a      	ands	r2, r7
    P( A, B, C, D, E, R(20) );
   da50a:	9308      	str	r3, [sp, #32]
    P( C, D, E, A, B, R(18) );
   da50c:	ea82 02bb 	eor.w	r2, r2, fp, ror #2
    P( A, B, C, D, E, R(20) );
   da510:	4b48      	ldr	r3, [pc, #288]	; (da634 <mbedtls_internal_sha1_process+0x420>)
   da512:	9e08      	ldr	r6, [sp, #32]
    P( C, D, E, A, B, R(18) );
   da514:	4472      	add	r2, lr
   da516:	eb02 62fc 	add.w	r2, r2, ip, ror #27
    P( B, C, D, E, A, R(19) );
   da51a:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( A, B, C, D, E, R(20) );
   da51e:	ea8c 05b7 	eor.w	r5, ip, r7, ror #2
   da522:	eb03 76f6 	add.w	r6, r3, r6, ror #31
   da526:	4431      	add	r1, r6
   da528:	4055      	eors	r5, r2
    P( E, A, B, C, D, R(21) );
   da52a:	9e11      	ldr	r6, [sp, #68]	; 0x44
    P( A, B, C, D, E, R(20) );
   da52c:	440d      	add	r5, r1
    P( E, A, B, C, D, R(21) );
   da52e:	9909      	ldr	r1, [sp, #36]	; 0x24
   da530:	4071      	eors	r1, r6
   da532:	9e02      	ldr	r6, [sp, #8]
   da534:	4071      	eors	r1, r6
   da536:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
    P( B, C, D, E, A, R(19) );
   da53a:	eb00 60f2 	add.w	r0, r0, r2, ror #27
    P( E, A, B, C, D, R(21) );
   da53e:	eb03 7ef1 	add.w	lr, r3, r1, ror #31
   da542:	ea8c 06b2 	eor.w	r6, ip, r2, ror #2
   da546:	eb0e 07b7 	add.w	r7, lr, r7, ror #2
   da54a:	4046      	eors	r6, r0
   da54c:	443e      	add	r6, r7
    P( D, E, A, B, C, R(22) );
   da54e:	9f10      	ldr	r7, [sp, #64]	; 0x40
    P( E, A, B, C, D, R(21) );
   da550:	9109      	str	r1, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(22) );
   da552:	9903      	ldr	r1, [sp, #12]
   da554:	ea87 0709 	eor.w	r7, r7, r9
   da558:	404f      	eors	r7, r1
   da55a:	ea87 77f4 	eor.w	r7, r7, r4, ror #31
    P( A, B, C, D, E, R(20) );
   da55e:	eb05 65f0 	add.w	r5, r5, r0, ror #27
    P( D, E, A, B, C, R(22) );
   da562:	ea4f 71f7 	mov.w	r1, r7, ror #31
    P( E, A, B, C, D, R(21) );
   da566:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(22) );
   da56a:	eb03 7ef7 	add.w	lr, r3, r7, ror #31
   da56e:	ea80 0bb2 	eor.w	fp, r0, r2, ror #2
   da572:	9110      	str	r1, [sp, #64]	; 0x40
    P( C, D, E, A, B, R(23) );
   da574:	9911      	ldr	r1, [sp, #68]	; 0x44
    P( D, E, A, B, C, R(22) );
   da576:	44f4      	add	ip, lr
   da578:	ea8b 0b05 	eor.w	fp, fp, r5
   da57c:	44e3      	add	fp, ip
    P( C, D, E, A, B, R(23) );
   da57e:	468c      	mov	ip, r1
   da580:	990a      	ldr	r1, [sp, #40]	; 0x28
   da582:	ea8c 0801 	eor.w	r8, ip, r1
   da586:	9904      	ldr	r1, [sp, #16]
   da588:	ea88 0801 	eor.w	r8, r8, r1
   da58c:	9908      	ldr	r1, [sp, #32]
   da58e:	ea88 78f1 	eor.w	r8, r8, r1, ror #31
    P( E, A, B, C, D, R(21) );
   da592:	eb06 66f5 	add.w	r6, r6, r5, ror #27
    P( C, D, E, A, B, R(23) );
   da596:	eb03 7cf8 	add.w	ip, r3, r8, ror #31
   da59a:	ea80 0eb5 	eor.w	lr, r0, r5, ror #2
   da59e:	eb0c 02b2 	add.w	r2, ip, r2, ror #2
   da5a2:	ea8e 0e06 	eor.w	lr, lr, r6
   da5a6:	ea4f 71f8 	mov.w	r1, r8, ror #31
   da5aa:	4496      	add	lr, r2
    P( B, C, D, E, A, R(24) );
   da5ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    P( C, D, E, A, B, R(23) );
   da5ae:	9111      	str	r1, [sp, #68]	; 0x44
    P( B, C, D, E, A, R(24) );
   da5b0:	9906      	ldr	r1, [sp, #24]
   da5b2:	ea89 0202 	eor.w	r2, r9, r2
   da5b6:	ea82 72f1 	eor.w	r2, r2, r1, ror #31
   da5ba:	9909      	ldr	r1, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(22) );
   da5bc:	eb0b 6bf6 	add.w	fp, fp, r6, ror #27
    P( B, C, D, E, A, R(24) );
   da5c0:	ea82 72f1 	eor.w	r2, r2, r1, ror #31
    P( C, D, E, A, B, R(23) );
   da5c4:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( B, C, D, E, A, R(24) );
   da5c8:	eb03 79f2 	add.w	r9, r3, r2, ror #31
   da5cc:	ea86 0cb5 	eor.w	ip, r6, r5, ror #2
   da5d0:	4448      	add	r0, r9
   da5d2:	ea8c 0c0b 	eor.w	ip, ip, fp
    P( A, B, C, D, E, R(25) );
   da5d6:	990a      	ldr	r1, [sp, #40]	; 0x28
    P( B, C, D, E, A, R(24) );
   da5d8:	4484      	add	ip, r0
    P( A, B, C, D, E, R(25) );
   da5da:	980c      	ldr	r0, [sp, #48]	; 0x30
   da5dc:	4048      	eors	r0, r1
   da5de:	9907      	ldr	r1, [sp, #28]
   da5e0:	ea80 70f1 	eor.w	r0, r0, r1, ror #31
   da5e4:	ea80 71f7 	eor.w	r1, r0, r7, ror #31
    P( C, D, E, A, B, R(23) );
   da5e8:	eb0e 6efb 	add.w	lr, lr, fp, ror #27
    P( A, B, C, D, E, R(25) );
   da5ec:	eb03 79f1 	add.w	r9, r3, r1, ror #31
   da5f0:	ea86 00bb 	eor.w	r0, r6, fp, ror #2
   da5f4:	eb09 05b5 	add.w	r5, r9, r5, ror #2
   da5f8:	ea80 000e 	eor.w	r0, r0, lr
   da5fc:	910a      	str	r1, [sp, #40]	; 0x28
   da5fe:	4428      	add	r0, r5
    P( E, A, B, C, D, R(26) );
   da600:	990b      	ldr	r1, [sp, #44]	; 0x2c
   da602:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   da604:	404d      	eors	r5, r1
   da606:	ea85 7afa 	eor.w	sl, r5, sl, ror #31
    P( B, C, D, E, A, R(24) );
   da60a:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
    P( E, A, B, C, D, R(26) );
   da60e:	ea8a 7af8 	eor.w	sl, sl, r8, ror #31
    P( A, B, C, D, E, R(25) );
   da612:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( E, A, B, C, D, R(26) );
   da616:	eb03 79fa 	add.w	r9, r3, sl, ror #31
   da61a:	ea8e 05bb 	eor.w	r5, lr, fp, ror #2
   da61e:	ea4f 71fa 	mov.w	r1, sl, ror #31
   da622:	444e      	add	r6, r9
   da624:	ea85 050c 	eor.w	r5, r5, ip
   da628:	9115      	str	r1, [sp, #84]	; 0x54
   da62a:	4435      	add	r5, r6
    P( D, E, A, B, C, R(27) );
   da62c:	990c      	ldr	r1, [sp, #48]	; 0x30
   da62e:	e003      	b.n	da638 <mbedtls_internal_sha1_process+0x424>
   da630:	5a827999 	.word	0x5a827999
   da634:	6ed9eba1 	.word	0x6ed9eba1
   da638:	9e02      	ldr	r6, [sp, #8]
   da63a:	ea81 0906 	eor.w	r9, r1, r6
   da63e:	ea89 74f4 	eor.w	r4, r9, r4, ror #31
   da642:	ea84 74f2 	eor.w	r4, r4, r2, ror #31
    P( A, B, C, D, E, R(25) );
   da646:	eb00 60fc 	add.w	r0, r0, ip, ror #27
    P( D, E, A, B, C, R(27) );
   da64a:	eb03 79f4 	add.w	r9, r3, r4, ror #31
   da64e:	ea8e 06bc 	eor.w	r6, lr, ip, ror #2
   da652:	ea4f 71f4 	mov.w	r1, r4, ror #31
   da656:	4046      	eors	r6, r0
   da658:	eb09 0bbb 	add.w	fp, r9, fp, ror #2
   da65c:	9116      	str	r1, [sp, #88]	; 0x58
   da65e:	44b3      	add	fp, r6
    P( C, D, E, A, B, R(28) );
   da660:	990d      	ldr	r1, [sp, #52]	; 0x34
   da662:	9e03      	ldr	r6, [sp, #12]
   da664:	404e      	eors	r6, r1
   da666:	9908      	ldr	r1, [sp, #32]
   da668:	ea86 76f1 	eor.w	r6, r6, r1, ror #31
   da66c:	990a      	ldr	r1, [sp, #40]	; 0x28
    P( E, A, B, C, D, R(26) );
   da66e:	eb05 65f0 	add.w	r5, r5, r0, ror #27
    P( C, D, E, A, B, R(28) );
   da672:	ea86 71f1 	eor.w	r1, r6, r1, ror #31
    P( D, E, A, B, C, R(27) );
   da676:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( C, D, E, A, B, R(28) );
   da67a:	eb03 79f1 	add.w	r9, r3, r1, ror #31
   da67e:	910b      	str	r1, [sp, #44]	; 0x2c
   da680:	ea80 06bc 	eor.w	r6, r0, ip, ror #2
    P( B, C, D, E, A, R(29) );
   da684:	9902      	ldr	r1, [sp, #8]
    P( C, D, E, A, B, R(28) );
   da686:	44ce      	add	lr, r9
   da688:	406e      	eors	r6, r5
   da68a:	4476      	add	r6, lr
    P( B, C, D, E, A, R(29) );
   da68c:	468e      	mov	lr, r1
   da68e:	9904      	ldr	r1, [sp, #16]
   da690:	ea8e 0e01 	eor.w	lr, lr, r1
   da694:	9909      	ldr	r1, [sp, #36]	; 0x24
   da696:	ea8e 7ef1 	eor.w	lr, lr, r1, ror #31
   da69a:	ea8e 71fa 	eor.w	r1, lr, sl, ror #31
    P( D, E, A, B, C, R(27) );
   da69e:	eb0b 6bf5 	add.w	fp, fp, r5, ror #27
    P( B, C, D, E, A, R(29) );
   da6a2:	eb03 7ef1 	add.w	lr, r3, r1, ror #31
   da6a6:	9102      	str	r1, [sp, #8]
   da6a8:	ea80 09b5 	eor.w	r9, r0, r5, ror #2
    P( A, B, C, D, E, R(30) );
   da6ac:	9903      	ldr	r1, [sp, #12]
    P( B, C, D, E, A, R(29) );
   da6ae:	eb0e 0cbc 	add.w	ip, lr, ip, ror #2
   da6b2:	ea89 090b 	eor.w	r9, r9, fp
   da6b6:	44e1      	add	r9, ip
    P( A, B, C, D, E, R(30) );
   da6b8:	468c      	mov	ip, r1
   da6ba:	9906      	ldr	r1, [sp, #24]
   da6bc:	ea8c 7ef1 	eor.w	lr, ip, r1, ror #31
   da6c0:	ea8e 77f7 	eor.w	r7, lr, r7, ror #31
    P( C, D, E, A, B, R(28) );
   da6c4:	eb06 66fb 	add.w	r6, r6, fp, ror #27
    P( A, B, C, D, E, R(30) );
   da6c8:	ea87 77f4 	eor.w	r7, r7, r4, ror #31
    P( B, C, D, E, A, R(29) );
   da6cc:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( A, B, C, D, E, R(30) );
   da6d0:	eb03 7ef7 	add.w	lr, r3, r7, ror #31
   da6d4:	ea8b 0cb5 	eor.w	ip, fp, r5, ror #2
   da6d8:	ea4f 71f7 	mov.w	r1, r7, ror #31
   da6dc:	4470      	add	r0, lr
   da6de:	ea8c 0c06 	eor.w	ip, ip, r6
   da6e2:	910d      	str	r1, [sp, #52]	; 0x34
   da6e4:	4484      	add	ip, r0
    P( E, A, B, C, D, R(31) );
   da6e6:	9904      	ldr	r1, [sp, #16]
   da6e8:	9807      	ldr	r0, [sp, #28]
   da6ea:	ea81 70f0 	eor.w	r0, r1, r0, ror #31
   da6ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
   da6f0:	ea80 70f8 	eor.w	r0, r0, r8, ror #31
   da6f4:	ea80 71f1 	eor.w	r1, r0, r1, ror #31
   da6f8:	910c      	str	r1, [sp, #48]	; 0x30
   da6fa:	ea4f 71f1 	mov.w	r1, r1, ror #31
   da6fe:	9117      	str	r1, [sp, #92]	; 0x5c
   da700:	990c      	ldr	r1, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
   da702:	9809      	ldr	r0, [sp, #36]	; 0x24
    P( B, C, D, E, A, R(29) );
   da704:	eb09 69f6 	add.w	r9, r9, r6, ror #27
    P( E, A, B, C, D, R(31) );
   da708:	eb03 78f1 	add.w	r8, r3, r1, ror #31
   da70c:	ea8b 0eb6 	eor.w	lr, fp, r6, ror #2
   da710:	eb08 05b5 	add.w	r5, r8, r5, ror #2
   da714:	ea8e 0e09 	eor.w	lr, lr, r9
    P( D, E, A, B, C, R(32) );
   da718:	9913      	ldr	r1, [sp, #76]	; 0x4c
    P( E, A, B, C, D, R(31) );
   da71a:	44ae      	add	lr, r5
    P( D, E, A, B, C, R(32) );
   da71c:	9d06      	ldr	r5, [sp, #24]
   da71e:	ea81 75f5 	eor.w	r5, r1, r5, ror #31
   da722:	9902      	ldr	r1, [sp, #8]
   da724:	ea85 75f2 	eor.w	r5, r5, r2, ror #31
   da728:	ea85 71f1 	eor.w	r1, r5, r1, ror #31
   da72c:	9103      	str	r1, [sp, #12]
   da72e:	eb03 78f1 	add.w	r8, r3, r1, ror #31
    P( C, D, E, A, B, R(33) );
   da732:	9914      	ldr	r1, [sp, #80]	; 0x50
    P( D, E, A, B, C, R(32) );
   da734:	44c3      	add	fp, r8
    P( C, D, E, A, B, R(33) );
   da736:	4688      	mov	r8, r1
   da738:	9907      	ldr	r1, [sp, #28]
   da73a:	ea88 78f1 	eor.w	r8, r8, r1, ror #31
   da73e:	990a      	ldr	r1, [sp, #40]	; 0x28
    P( A, B, C, D, E, R(30) );
   da740:	eb0c 6cf9 	add.w	ip, ip, r9, ror #27
    P( E, A, B, C, D, R(31) );
   da744:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( D, E, A, B, C, R(32) );
   da748:	ea89 05b6 	eor.w	r5, r9, r6, ror #2
    P( C, D, E, A, B, R(33) );
   da74c:	ea88 78f1 	eor.w	r8, r8, r1, ror #31
   da750:	ea88 71f7 	eor.w	r1, r8, r7, ror #31
    P( D, E, A, B, C, R(32) );
   da754:	ea85 050c 	eor.w	r5, r5, ip
    P( E, A, B, C, D, R(31) );
   da758:	eb0e 6efc 	add.w	lr, lr, ip, ror #27
    P( C, D, E, A, B, R(33) );
   da75c:	ea89 08bc 	eor.w	r8, r9, ip, ror #2
    P( D, E, A, B, C, R(32) );
   da760:	445d      	add	r5, fp
    P( C, D, E, A, B, R(33) );
   da762:	eb03 7bf1 	add.w	fp, r3, r1, ror #31
   da766:	eb0b 06b6 	add.w	r6, fp, r6, ror #2
   da76a:	ea88 080e 	eor.w	r8, r8, lr
   da76e:	9104      	str	r1, [sp, #16]
   da770:	44b0      	add	r8, r6
    P( B, C, D, E, A, R(34) );
   da772:	9913      	ldr	r1, [sp, #76]	; 0x4c
   da774:	9e08      	ldr	r6, [sp, #32]
   da776:	ea81 76f6 	eor.w	r6, r1, r6, ror #31
   da77a:	990c      	ldr	r1, [sp, #48]	; 0x30
   da77c:	ea86 7afa 	eor.w	sl, r6, sl, ror #31
   da780:	ea8a 7af1 	eor.w	sl, sl, r1, ror #31
    P( D, E, A, B, C, R(32) );
   da784:	eb05 65fe 	add.w	r5, r5, lr, ror #27
    P( B, C, D, E, A, R(34) );
   da788:	ea4f 71fa 	mov.w	r1, sl, ror #31
    P( C, D, E, A, B, R(33) );
   da78c:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( B, C, D, E, A, R(34) );
   da790:	eb03 7bfa 	add.w	fp, r3, sl, ror #31
   da794:	9113      	str	r1, [sp, #76]	; 0x4c
   da796:	ea8e 06bc 	eor.w	r6, lr, ip, ror #2
    P( A, B, C, D, E, R(35) );
   da79a:	9914      	ldr	r1, [sp, #80]	; 0x50
    P( B, C, D, E, A, R(34) );
   da79c:	44d9      	add	r9, fp
   da79e:	406e      	eors	r6, r5
   da7a0:	444e      	add	r6, r9
    P( A, B, C, D, E, R(35) );
   da7a2:	ea81 79f0 	eor.w	r9, r1, r0, ror #31
   da7a6:	9903      	ldr	r1, [sp, #12]
   da7a8:	ea89 79f4 	eor.w	r9, r9, r4, ror #31
   da7ac:	ea89 79f1 	eor.w	r9, r9, r1, ror #31
   da7b0:	ea4f 71f9 	mov.w	r1, r9, ror #31
    P( C, D, E, A, B, R(33) );
   da7b4:	eb08 68f5 	add.w	r8, r8, r5, ror #27
    P( A, B, C, D, E, R(35) );
   da7b8:	eb03 7bf9 	add.w	fp, r3, r9, ror #31
   da7bc:	9114      	str	r1, [sp, #80]	; 0x50
   da7be:	ea8e 04b5 	eor.w	r4, lr, r5, ror #2
    P( E, A, B, C, D, R(36) );
   da7c2:	9910      	ldr	r1, [sp, #64]	; 0x40
    P( A, B, C, D, E, R(35) );
   da7c4:	eb0b 0cbc 	add.w	ip, fp, ip, ror #2
   da7c8:	ea84 0408 	eor.w	r4, r4, r8
   da7cc:	4464      	add	r4, ip
    P( E, A, B, C, D, R(36) );
   da7ce:	468c      	mov	ip, r1
   da7d0:	9908      	ldr	r1, [sp, #32]
   da7d2:	ea8c 7cf1 	eor.w	ip, ip, r1, ror #31
   da7d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   da7d8:	ea8c 7cf1 	eor.w	ip, ip, r1, ror #31
   da7dc:	9904      	ldr	r1, [sp, #16]
    P( B, C, D, E, A, R(34) );
   da7de:	eb06 66f8 	add.w	r6, r6, r8, ror #27
    P( E, A, B, C, D, R(36) );
   da7e2:	ea8c 71f1 	eor.w	r1, ip, r1, ror #31
    P( A, B, C, D, E, R(35) );
   da7e6:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( E, A, B, C, D, R(36) );
   da7ea:	eb03 7bf1 	add.w	fp, r3, r1, ror #31
   da7ee:	9106      	str	r1, [sp, #24]
   da7f0:	ea88 0cb5 	eor.w	ip, r8, r5, ror #2
    P( D, E, A, B, C, R(37) );
   da7f4:	9911      	ldr	r1, [sp, #68]	; 0x44
    P( E, A, B, C, D, R(36) );
   da7f6:	44de      	add	lr, fp
   da7f8:	ea8c 0c06 	eor.w	ip, ip, r6
   da7fc:	44f4      	add	ip, lr
    P( D, E, A, B, C, R(37) );
   da7fe:	ea81 7ef0 	eor.w	lr, r1, r0, ror #31
   da802:	9902      	ldr	r1, [sp, #8]
   da804:	ea8e 71f1 	eor.w	r1, lr, r1, ror #31
   da808:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
   da80c:	9107      	str	r1, [sp, #28]
   da80e:	eb03 71f1 	add.w	r1, r3, r1, ror #31
   da812:	eb01 05b5 	add.w	r5, r1, r5, ror #2
    P( C, D, E, A, B, R(38) );
   da816:	9910      	ldr	r1, [sp, #64]	; 0x40
   da818:	ea81 7ef2 	eor.w	lr, r1, r2, ror #31
   da81c:	ea8e 7ef7 	eor.w	lr, lr, r7, ror #31
   da820:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
   da824:	ea4f 71fe 	mov.w	r1, lr, ror #31
   da828:	9110      	str	r1, [sp, #64]	; 0x40
   da82a:	eb03 71fe 	add.w	r1, r3, lr, ror #31
    P( B, C, D, E, A, R(39) );
   da82e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(37) );
   da830:	ea88 0bb6 	eor.w	fp, r8, r6, ror #2
    P( C, D, E, A, B, R(38) );
   da834:	4488      	add	r8, r1
    P( B, C, D, E, A, R(39) );
   da836:	9911      	ldr	r1, [sp, #68]	; 0x44
   da838:	ea81 77f7 	eor.w	r7, r1, r7, ror #31
   da83c:	990c      	ldr	r1, [sp, #48]	; 0x30
   da83e:	ea87 70f1 	eor.w	r0, r7, r1, ror #31
   da842:	9906      	ldr	r1, [sp, #24]
    P( A, B, C, D, E, R(35) );
   da844:	eb04 64f6 	add.w	r4, r4, r6, ror #27
    P( B, C, D, E, A, R(39) );
   da848:	ea80 70f1 	eor.w	r0, r0, r1, ror #31
    P( D, E, A, B, C, R(37) );
   da84c:	ea8b 0b04 	eor.w	fp, fp, r4
    P( E, A, B, C, D, R(36) );
   da850:	eb0c 6cf4 	add.w	ip, ip, r4, ror #27
    P( B, C, D, E, A, R(39) );
   da854:	ea4f 71f0 	mov.w	r1, r0, ror #31
    P( D, E, A, B, C, R(37) );
   da858:	ea4f 04b4 	mov.w	r4, r4, ror #2
   da85c:	44ab      	add	fp, r5
   da85e:	eb0b 6bfc 	add.w	fp, fp, ip, ror #27
    P( B, C, D, E, A, R(39) );
   da862:	910c      	str	r1, [sp, #48]	; 0x30
   da864:	eb03 73f0 	add.w	r3, r3, r0, ror #31
   da868:	ea84 01bc 	eor.w	r1, r4, ip, ror #2
   da86c:	eb03 03b6 	add.w	r3, r3, r6, ror #2
   da870:	ea81 010b 	eor.w	r1, r1, fp
   da874:	4419      	add	r1, r3
#undef F

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
   da876:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da878:	ea83 72f2 	eor.w	r2, r3, r2, ror #31
   da87c:	9b03      	ldr	r3, [sp, #12]
   da87e:	ea82 72f3 	eor.w	r2, r2, r3, ror #31
   da882:	9b07      	ldr	r3, [sp, #28]
    P( C, D, E, A, B, R(38) );
   da884:	ea84 05b6 	eor.w	r5, r4, r6, ror #2
    P( A, B, C, D, E, R(40) );
   da888:	ea82 73f3 	eor.w	r3, r2, r3, ror #31
   da88c:	9308      	str	r3, [sp, #32]
    P( C, D, E, A, B, R(38) );
   da88e:	ea85 050c 	eor.w	r5, r5, ip
    P( A, B, C, D, E, R(40) );
   da892:	4bda      	ldr	r3, [pc, #872]	; (dabfc <mbedtls_internal_sha1_process+0x9e8>)
   da894:	9a08      	ldr	r2, [sp, #32]
    P( C, D, E, A, B, R(38) );
   da896:	4445      	add	r5, r8
   da898:	eb05 65fb 	add.w	r5, r5, fp, ror #27
    P( A, B, C, D, E, R(40) );
   da89c:	eb03 76f2 	add.w	r6, r3, r2, ror #31
   da8a0:	ea45 07bb 	orr.w	r7, r5, fp, ror #2
    P( B, C, D, E, A, R(39) );
   da8a4:	eb01 61f5 	add.w	r1, r1, r5, ror #27
    P( A, B, C, D, E, R(40) );
   da8a8:	ea07 07bc 	and.w	r7, r7, ip, ror #2
   da8ac:	4434      	add	r4, r6
   da8ae:	ea05 06bb 	and.w	r6, r5, fp, ror #2
   da8b2:	eb04 64f1 	add.w	r4, r4, r1, ror #27
   da8b6:	433e      	orrs	r6, r7
   da8b8:	4426      	add	r6, r4
    P( E, A, B, C, D, R(41) );
   da8ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
   da8bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(42) );
   da8be:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( E, A, B, C, D, R(41) );
   da8c0:	ea82 72f4 	eor.w	r2, r2, r4, ror #31
   da8c4:	9c04      	ldr	r4, [sp, #16]
   da8c6:	ea82 72f4 	eor.w	r2, r2, r4, ror #31
   da8ca:	ea82 72fe 	eor.w	r2, r2, lr, ror #31
   da8ce:	ea41 04b5 	orr.w	r4, r1, r5, ror #2
   da8d2:	9209      	str	r2, [sp, #36]	; 0x24
   da8d4:	ea04 02bb 	and.w	r2, r4, fp, ror #2
   da8d8:	ea01 04b5 	and.w	r4, r1, r5, ror #2
   da8dc:	4314      	orrs	r4, r2
   da8de:	9a09      	ldr	r2, [sp, #36]	; 0x24
   da8e0:	eb03 72f2 	add.w	r2, r3, r2, ror #31
   da8e4:	eb02 0cbc 	add.w	ip, r2, ip, ror #2
    P( D, E, A, B, C, R(42) );
   da8e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   da8ea:	ea82 72f7 	eor.w	r2, r2, r7, ror #31
   da8ee:	ea82 7afa 	eor.w	sl, r2, sl, ror #31
   da8f2:	ea8a 7af0 	eor.w	sl, sl, r0, ror #31
   da8f6:	ea4f 72fa 	mov.w	r2, sl, ror #31
   da8fa:	9211      	str	r2, [sp, #68]	; 0x44
   da8fc:	eb03 72fa 	add.w	r2, r3, sl, ror #31
    P( E, A, B, C, D, R(41) );
   da900:	4464      	add	r4, ip
    P( D, E, A, B, C, R(42) );
   da902:	eb02 0bbb 	add.w	fp, r2, fp, ror #2
   da906:	ea46 02b1 	orr.w	r2, r6, r1, ror #2
    P( E, A, B, C, D, R(41) );
   da90a:	eb04 64f6 	add.w	r4, r4, r6, ror #27
    P( D, E, A, B, C, R(42) );
   da90e:	ea06 07b1 	and.w	r7, r6, r1, ror #2
   da912:	ea02 02b5 	and.w	r2, r2, r5, ror #2
   da916:	433a      	orrs	r2, r7
   da918:	eb0b 6bf4 	add.w	fp, fp, r4, ror #27
   da91c:	4493      	add	fp, r2
    P( C, D, E, A, B, R(43) );
   da91e:	9f02      	ldr	r7, [sp, #8]
   da920:	9a16      	ldr	r2, [sp, #88]	; 0x58
   da922:	ea82 72f7 	eor.w	r2, r2, r7, ror #31
   da926:	ea82 79f9 	eor.w	r9, r2, r9, ror #31
   da92a:	9a08      	ldr	r2, [sp, #32]
   da92c:	ea89 79f2 	eor.w	r9, r9, r2, ror #31
   da930:	ea44 08b6 	orr.w	r8, r4, r6, ror #2
   da934:	ea4f 72f9 	mov.w	r2, r9, ror #31
   da938:	9215      	str	r2, [sp, #84]	; 0x54
   da93a:	ea08 02b1 	and.w	r2, r8, r1, ror #2
   da93e:	ea04 08b6 	and.w	r8, r4, r6, ror #2
   da942:	ea42 0808 	orr.w	r8, r2, r8
   da946:	eb03 72f9 	add.w	r2, r3, r9, ror #31
   da94a:	eb02 05b5 	add.w	r5, r2, r5, ror #2
   da94e:	44a8      	add	r8, r5
    P( B, C, D, E, A, R(44) );
   da950:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   da952:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   da954:	ea82 75f5 	eor.w	r5, r2, r5, ror #31
   da958:	9a06      	ldr	r2, [sp, #24]
   da95a:	ea85 75f2 	eor.w	r5, r5, r2, ror #31
   da95e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   da960:	ea85 72f2 	eor.w	r2, r5, r2, ror #31
   da964:	eb03 7cf2 	add.w	ip, r3, r2, ror #31
   da968:	920a      	str	r2, [sp, #40]	; 0x28
   da96a:	ea4b 02b4 	orr.w	r2, fp, r4, ror #2
    P( C, D, E, A, B, R(43) );
   da96e:	eb08 68fb 	add.w	r8, r8, fp, ror #27
    P( B, C, D, E, A, R(44) );
   da972:	ea02 02b6 	and.w	r2, r2, r6, ror #2
   da976:	eb0c 01b1 	add.w	r1, ip, r1, ror #2
   da97a:	ea0b 0cb4 	and.w	ip, fp, r4, ror #2
   da97e:	eb01 61f8 	add.w	r1, r1, r8, ror #27
   da982:	ea42 0c0c 	orr.w	ip, r2, ip
    P( A, B, C, D, E, R(45) );
   da986:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    P( E, A, B, C, D, R(46) );
   da988:	9d03      	ldr	r5, [sp, #12]
    P( B, C, D, E, A, R(44) );
   da98a:	448c      	add	ip, r1
    P( A, B, C, D, E, R(45) );
   da98c:	9907      	ldr	r1, [sp, #28]
   da98e:	ea82 72f7 	eor.w	r2, r2, r7, ror #31
   da992:	ea82 72f1 	eor.w	r2, r2, r1, ror #31
   da996:	ea82 72fa 	eor.w	r2, r2, sl, ror #31
   da99a:	9202      	str	r2, [sp, #8]
   da99c:	ea48 02bb 	orr.w	r2, r8, fp, ror #2
   da9a0:	ea02 01b4 	and.w	r1, r2, r4, ror #2
   da9a4:	ea08 02bb 	and.w	r2, r8, fp, ror #2
   da9a8:	430a      	orrs	r2, r1
   da9aa:	9902      	ldr	r1, [sp, #8]
   da9ac:	eb03 71f1 	add.w	r1, r3, r1, ror #31
   da9b0:	eb01 06b6 	add.w	r6, r1, r6, ror #2
    P( E, A, B, C, D, R(46) );
   da9b4:	990d      	ldr	r1, [sp, #52]	; 0x34
   da9b6:	ea81 71f5 	eor.w	r1, r1, r5, ror #31
   da9ba:	ea81 7efe 	eor.w	lr, r1, lr, ror #31
   da9be:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
   da9c2:	ea4f 71fe 	mov.w	r1, lr, ror #31
   da9c6:	910b      	str	r1, [sp, #44]	; 0x2c
   da9c8:	eb03 71fe 	add.w	r1, r3, lr, ror #31
    P( A, B, C, D, E, R(45) );
   da9cc:	4432      	add	r2, r6
    P( E, A, B, C, D, R(46) );
   da9ce:	eb01 04b4 	add.w	r4, r1, r4, ror #2
   da9d2:	ea4c 01b8 	orr.w	r1, ip, r8, ror #2
    P( A, B, C, D, E, R(45) );
   da9d6:	eb02 62fc 	add.w	r2, r2, ip, ror #27
    P( E, A, B, C, D, R(46) );
   da9da:	ea0c 06b8 	and.w	r6, ip, r8, ror #2
   da9de:	ea01 01bb 	and.w	r1, r1, fp, ror #2
   da9e2:	4331      	orrs	r1, r6
   da9e4:	eb04 64f2 	add.w	r4, r4, r2, ror #27
   da9e8:	440c      	add	r4, r1
    P( D, E, A, B, C, R(47) );
   da9ea:	9917      	ldr	r1, [sp, #92]	; 0x5c
   da9ec:	9d04      	ldr	r5, [sp, #16]
   da9ee:	ea81 77f5 	eor.w	r7, r1, r5, ror #31
   da9f2:	990a      	ldr	r1, [sp, #40]	; 0x28
    P( C, D, E, A, B, R(48) );
   da9f4:	9d03      	ldr	r5, [sp, #12]
    P( D, E, A, B, C, R(47) );
   da9f6:	ea87 77f0 	eor.w	r7, r7, r0, ror #31
   da9fa:	ea87 77f1 	eor.w	r7, r7, r1, ror #31
   da9fe:	ea42 00bc 	orr.w	r0, r2, ip, ror #2
   daa02:	ea4f 71f7 	mov.w	r1, r7, ror #31
   daa06:	910d      	str	r1, [sp, #52]	; 0x34
   daa08:	ea00 01b8 	and.w	r1, r0, r8, ror #2
   daa0c:	ea02 00bc 	and.w	r0, r2, ip, ror #2
   daa10:	4308      	orrs	r0, r1
   daa12:	eb03 71f7 	add.w	r1, r3, r7, ror #31
   daa16:	eb01 0bbb 	add.w	fp, r1, fp, ror #2
    P( C, D, E, A, B, R(48) );
   daa1a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   daa1c:	ea81 75f5 	eor.w	r5, r1, r5, ror #31
   daa20:	9908      	ldr	r1, [sp, #32]
   daa22:	ea85 75f1 	eor.w	r5, r5, r1, ror #31
   daa26:	9902      	ldr	r1, [sp, #8]
   daa28:	ea85 71f1 	eor.w	r1, r5, r1, ror #31
   daa2c:	9103      	str	r1, [sp, #12]
    P( D, E, A, B, C, R(47) );
   daa2e:	4458      	add	r0, fp
    P( C, D, E, A, B, R(48) );
   daa30:	eb03 7bf1 	add.w	fp, r3, r1, ror #31
   daa34:	ea44 01b2 	orr.w	r1, r4, r2, ror #2
   daa38:	ea01 01bc 	and.w	r1, r1, ip, ror #2
   daa3c:	eb0b 08b8 	add.w	r8, fp, r8, ror #2
   daa40:	ea04 0bb2 	and.w	fp, r4, r2, ror #2
    P( B, C, D, E, A, R(49) );
   daa44:	9d04      	ldr	r5, [sp, #16]
    P( C, D, E, A, B, R(48) );
   daa46:	ea41 0b0b 	orr.w	fp, r1, fp
    P( B, C, D, E, A, R(49) );
   daa4a:	9914      	ldr	r1, [sp, #80]	; 0x50
   daa4c:	ea81 76f5 	eor.w	r6, r1, r5, ror #31
   daa50:	9909      	ldr	r1, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(47) );
   daa52:	eb00 60f4 	add.w	r0, r0, r4, ror #27
    P( B, C, D, E, A, R(49) );
   daa56:	ea86 76f1 	eor.w	r6, r6, r1, ror #31
   daa5a:	ea86 71fe 	eor.w	r1, r6, lr, ror #31
   daa5e:	ea40 05b4 	orr.w	r5, r0, r4, ror #2
   daa62:	9104      	str	r1, [sp, #16]
   daa64:	ea05 01b2 	and.w	r1, r5, r2, ror #2
   daa68:	ea00 05b4 	and.w	r5, r0, r4, ror #2
   daa6c:	430d      	orrs	r5, r1
   daa6e:	9904      	ldr	r1, [sp, #16]
    P( A, B, C, D, E, R(50) );
   daa70:	9e06      	ldr	r6, [sp, #24]
    P( B, C, D, E, A, R(49) );
   daa72:	eb03 71f1 	add.w	r1, r3, r1, ror #31
   daa76:	eb01 0cbc 	add.w	ip, r1, ip, ror #2
    P( A, B, C, D, E, R(50) );
   daa7a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   daa7c:	ea81 71f6 	eor.w	r1, r1, r6, ror #31
   daa80:	ea81 7afa 	eor.w	sl, r1, sl, ror #31
   daa84:	ea8a 7af7 	eor.w	sl, sl, r7, ror #31
    P( C, D, E, A, B, R(48) );
   daa88:	eb08 68f0 	add.w	r8, r8, r0, ror #27
    P( A, B, C, D, E, R(50) );
   daa8c:	ea4f 71fa 	mov.w	r1, sl, ror #31
    P( C, D, E, A, B, R(48) );
   daa90:	44c3      	add	fp, r8
    P( A, B, C, D, E, R(50) );
   daa92:	9113      	str	r1, [sp, #76]	; 0x4c
   daa94:	eb03 71fa 	add.w	r1, r3, sl, ror #31
    P( B, C, D, E, A, R(49) );
   daa98:	4465      	add	r5, ip
    P( A, B, C, D, E, R(50) );
   daa9a:	eb01 02b2 	add.w	r2, r1, r2, ror #2
   daa9e:	ea4b 01b0 	orr.w	r1, fp, r0, ror #2
    P( B, C, D, E, A, R(49) );
   daaa2:	eb05 65fb 	add.w	r5, r5, fp, ror #27
    P( A, B, C, D, E, R(50) );
   daaa6:	ea0b 0cb0 	and.w	ip, fp, r0, ror #2
   daaaa:	ea01 01b4 	and.w	r1, r1, r4, ror #2
   daaae:	ea41 010c 	orr.w	r1, r1, ip
   daab2:	eb02 62f5 	add.w	r2, r2, r5, ror #27
   daab6:	440a      	add	r2, r1
    P( E, A, B, C, D, R(51) );
   daab8:	9e07      	ldr	r6, [sp, #28]
   daaba:	9914      	ldr	r1, [sp, #80]	; 0x50
   daabc:	ea81 71f6 	eor.w	r1, r1, r6, ror #31
   daac0:	ea81 79f9 	eor.w	r9, r1, r9, ror #31
   daac4:	9903      	ldr	r1, [sp, #12]
   daac6:	ea89 79f1 	eor.w	r9, r9, r1, ror #31
   daaca:	ea45 06bb 	orr.w	r6, r5, fp, ror #2
   daace:	ea4f 71f9 	mov.w	r1, r9, ror #31
   daad2:	9114      	str	r1, [sp, #80]	; 0x50
   daad4:	ea06 01b0 	and.w	r1, r6, r0, ror #2
   daad8:	ea05 06bb 	and.w	r6, r5, fp, ror #2
   daadc:	430e      	orrs	r6, r1
   daade:	eb03 71f9 	add.w	r1, r3, r9, ror #31
   daae2:	eb01 04b4 	add.w	r4, r1, r4, ror #2
   daae6:	4426      	add	r6, r4
    P( D, E, A, B, C, R(52) );
   daae8:	9910      	ldr	r1, [sp, #64]	; 0x40
   daaea:	9c06      	ldr	r4, [sp, #24]
   daaec:	ea81 74f4 	eor.w	r4, r1, r4, ror #31
   daaf0:	990a      	ldr	r1, [sp, #40]	; 0x28
   daaf2:	ea84 74f1 	eor.w	r4, r4, r1, ror #31
   daaf6:	9904      	ldr	r1, [sp, #16]
   daaf8:	ea84 71f1 	eor.w	r1, r4, r1, ror #31
   daafc:	9106      	str	r1, [sp, #24]
   daafe:	eb03 71f1 	add.w	r1, r3, r1, ror #31
   dab02:	eb01 00b0 	add.w	r0, r1, r0, ror #2
   dab06:	ea42 01b5 	orr.w	r1, r2, r5, ror #2
    P( E, A, B, C, D, R(51) );
   dab0a:	eb06 66f2 	add.w	r6, r6, r2, ror #27
    P( D, E, A, B, C, R(52) );
   dab0e:	ea02 04b5 	and.w	r4, r2, r5, ror #2
   dab12:	ea01 01bb 	and.w	r1, r1, fp, ror #2
   dab16:	4321      	orrs	r1, r4
   dab18:	eb00 60f6 	add.w	r0, r0, r6, ror #27
   dab1c:	4408      	add	r0, r1
    P( C, D, E, A, B, R(53) );
   dab1e:	9c07      	ldr	r4, [sp, #28]
   dab20:	990c      	ldr	r1, [sp, #48]	; 0x30
   dab22:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
   dab26:	9c02      	ldr	r4, [sp, #8]
   dab28:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
   dab2c:	ea46 08b2 	orr.w	r8, r6, r2, ror #2
   dab30:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
   dab34:	9107      	str	r1, [sp, #28]
   dab36:	ea08 01b5 	and.w	r1, r8, r5, ror #2
   dab3a:	ea06 08b2 	and.w	r8, r6, r2, ror #2
   dab3e:	ea41 0808 	orr.w	r8, r1, r8
   dab42:	9907      	ldr	r1, [sp, #28]
   dab44:	eb03 71f1 	add.w	r1, r3, r1, ror #31
   dab48:	eb01 0bbb 	add.w	fp, r1, fp, ror #2
    P( B, C, D, E, A, R(54) );
   dab4c:	9910      	ldr	r1, [sp, #64]	; 0x40
   dab4e:	9c08      	ldr	r4, [sp, #32]
   dab50:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
   dab54:	ea81 7efe 	eor.w	lr, r1, lr, ror #31
   dab58:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
   dab5c:	ea4f 71fe 	mov.w	r1, lr, ror #31
   dab60:	9110      	str	r1, [sp, #64]	; 0x40
   dab62:	eb03 71fe 	add.w	r1, r3, lr, ror #31
    P( C, D, E, A, B, R(53) );
   dab66:	44d8      	add	r8, fp
    P( B, C, D, E, A, R(54) );
   dab68:	eb01 05b5 	add.w	r5, r1, r5, ror #2
   dab6c:	ea40 01b6 	orr.w	r1, r0, r6, ror #2
    P( C, D, E, A, B, R(53) );
   dab70:	eb08 68f0 	add.w	r8, r8, r0, ror #27
    P( B, C, D, E, A, R(54) );
   dab74:	ea00 04b6 	and.w	r4, r0, r6, ror #2
   dab78:	ea01 01b2 	and.w	r1, r1, r2, ror #2
   dab7c:	4321      	orrs	r1, r4
   dab7e:	eb05 65f8 	add.w	r5, r5, r8, ror #27
   dab82:	440d      	add	r5, r1
    P( A, B, C, D, E, R(55) );
   dab84:	9c09      	ldr	r4, [sp, #36]	; 0x24
   dab86:	990c      	ldr	r1, [sp, #48]	; 0x30
   dab88:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
   dab8c:	9c06      	ldr	r4, [sp, #24]
   dab8e:	ea81 71f7 	eor.w	r1, r1, r7, ror #31
   dab92:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
   dab96:	ea48 0cb0 	orr.w	ip, r8, r0, ror #2
   dab9a:	ea4f 74f1 	mov.w	r4, r1, ror #31
   dab9e:	940c      	str	r4, [sp, #48]	; 0x30
   daba0:	ea0c 04b6 	and.w	r4, ip, r6, ror #2
   daba4:	ea08 0cb0 	and.w	ip, r8, r0, ror #2
   daba8:	ea44 0c0c 	orr.w	ip, r4, ip
   dabac:	eb03 74f1 	add.w	r4, r3, r1, ror #31
   dabb0:	eb04 02b2 	add.w	r2, r4, r2, ror #2
   dabb4:	4494      	add	ip, r2
    P( E, A, B, C, D, R(56) );
   dabb6:	9c08      	ldr	r4, [sp, #32]
   dabb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   dabba:	ea82 77f4 	eor.w	r7, r2, r4, ror #31
   dabbe:	9a03      	ldr	r2, [sp, #12]
    P( D, E, A, B, C, R(57) );
   dabc0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( E, A, B, C, D, R(56) );
   dabc2:	ea87 77f2 	eor.w	r7, r7, r2, ror #31
   dabc6:	9a07      	ldr	r2, [sp, #28]
   dabc8:	ea87 72f2 	eor.w	r2, r7, r2, ror #31
   dabcc:	9208      	str	r2, [sp, #32]
   dabce:	eb03 77f2 	add.w	r7, r3, r2, ror #31
   dabd2:	ea45 02b8 	orr.w	r2, r5, r8, ror #2
   dabd6:	ea02 02b0 	and.w	r2, r2, r0, ror #2
   dabda:	eb07 06b6 	add.w	r6, r7, r6, ror #2
   dabde:	ea05 07b8 	and.w	r7, r5, r8, ror #2
    P( A, B, C, D, E, R(55) );
   dabe2:	eb0c 6cf5 	add.w	ip, ip, r5, ror #27
    P( E, A, B, C, D, R(56) );
   dabe6:	4317      	orrs	r7, r2
    P( D, E, A, B, C, R(57) );
   dabe8:	9a15      	ldr	r2, [sp, #84]	; 0x54
    P( E, A, B, C, D, R(56) );
   dabea:	eb06 66fc 	add.w	r6, r6, ip, ror #27
   dabee:	4437      	add	r7, r6
    P( D, E, A, B, C, R(57) );
   dabf0:	ea82 76f4 	eor.w	r6, r2, r4, ror #31
   dabf4:	9a04      	ldr	r2, [sp, #16]
   dabf6:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
   dabfa:	e001      	b.n	dac00 <mbedtls_internal_sha1_process+0x9ec>
   dabfc:	8f1bbcdc 	.word	0x8f1bbcdc
   dac00:	ea86 72fe 	eor.w	r2, r6, lr, ror #31
   dac04:	9209      	str	r2, [sp, #36]	; 0x24
   dac06:	ea4c 02b5 	orr.w	r2, ip, r5, ror #2
   dac0a:	ea02 04b8 	and.w	r4, r2, r8, ror #2
   dac0e:	ea0c 02b5 	and.w	r2, ip, r5, ror #2
   dac12:	4322      	orrs	r2, r4
   dac14:	9c09      	ldr	r4, [sp, #36]	; 0x24
   dac16:	eb03 74f4 	add.w	r4, r3, r4, ror #31
   dac1a:	eb04 00b0 	add.w	r0, r4, r0, ror #2
   dac1e:	4402      	add	r2, r0
    P( C, D, E, A, B, R(58) );
   dac20:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   dac22:	9811      	ldr	r0, [sp, #68]	; 0x44
   dac24:	ea80 70f4 	eor.w	r0, r0, r4, ror #31
   dac28:	ea80 7afa 	eor.w	sl, r0, sl, ror #31
   dac2c:	ea8a 7af1 	eor.w	sl, sl, r1, ror #31
   dac30:	ea4f 70fa 	mov.w	r0, sl, ror #31
   dac34:	9011      	str	r0, [sp, #68]	; 0x44
   dac36:	eb03 70fa 	add.w	r0, r3, sl, ror #31
   dac3a:	eb00 08b8 	add.w	r8, r0, r8, ror #2
   dac3e:	ea47 00bc 	orr.w	r0, r7, ip, ror #2
    P( D, E, A, B, C, R(57) );
   dac42:	eb02 62f7 	add.w	r2, r2, r7, ror #27
    P( C, D, E, A, B, R(58) );
   dac46:	ea07 04bc 	and.w	r4, r7, ip, ror #2
   dac4a:	ea00 00b5 	and.w	r0, r0, r5, ror #2
   dac4e:	4320      	orrs	r0, r4
   dac50:	eb08 68f2 	add.w	r8, r8, r2, ror #27
   dac54:	4480      	add	r8, r0
    P( B, C, D, E, A, R(59) );
   dac56:	9c02      	ldr	r4, [sp, #8]
   dac58:	9815      	ldr	r0, [sp, #84]	; 0x54
   dac5a:	ea80 70f4 	eor.w	r0, r0, r4, ror #31
   dac5e:	ea80 79f9 	eor.w	r9, r0, r9, ror #31
   dac62:	9808      	ldr	r0, [sp, #32]
   dac64:	ea89 79f0 	eor.w	r9, r9, r0, ror #31
   dac68:	ea4f 70f9 	mov.w	r0, r9, ror #31
   dac6c:	ea42 04b7 	orr.w	r4, r2, r7, ror #2
   dac70:	9015      	str	r0, [sp, #84]	; 0x54
   dac72:	ea04 04bc 	and.w	r4, r4, ip, ror #2
   dac76:	ea02 00b7 	and.w	r0, r2, r7, ror #2
   dac7a:	eb03 73f9 	add.w	r3, r3, r9, ror #31
   dac7e:	eb03 03b5 	add.w	r3, r3, r5, ror #2
   dac82:	4320      	orrs	r0, r4
   dac84:	4418      	add	r0, r3
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
   dac86:	e9dd 430a 	ldrd	r4, r3, [sp, #40]	; 0x28
   dac8a:	ea83 75f4 	eor.w	r5, r3, r4, ror #31
   dac8e:	9b06      	ldr	r3, [sp, #24]
   dac90:	ea85 75f3 	eor.w	r5, r5, r3, ror #31
   dac94:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dac96:	ea85 73f3 	eor.w	r3, r5, r3, ror #31
   dac9a:	930a      	str	r3, [sp, #40]	; 0x28
   dac9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   dac9e:	4bd8      	ldr	r3, [pc, #864]	; (db000 <mbedtls_internal_sha1_process+0xdec>)
    P( E, A, B, C, D, R(61) );
   daca0:	9d02      	ldr	r5, [sp, #8]
    P( A, B, C, D, E, R(60) );
   daca2:	eb03 74f4 	add.w	r4, r3, r4, ror #31
   daca6:	eb04 0cbc 	add.w	ip, r4, ip, ror #2
    P( E, A, B, C, D, R(61) );
   dacaa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   dacac:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
   dacb0:	9d07      	ldr	r5, [sp, #28]
   dacb2:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
   dacb6:	ea84 74fa 	eor.w	r4, r4, sl, ror #31
   dacba:	9402      	str	r4, [sp, #8]
   dacbc:	9d02      	ldr	r5, [sp, #8]
    P( D, E, A, B, C, R(62) );
   dacbe:	9e03      	ldr	r6, [sp, #12]
    P( B, C, D, E, A, R(59) );
   dacc0:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(61) );
   dacc4:	eb03 75f5 	add.w	r5, r3, r5, ror #31
    P( A, B, C, D, E, R(60) );
   dacc8:	ea82 0bb7 	eor.w	fp, r2, r7, ror #2
    P( E, A, B, C, D, R(61) );
   daccc:	eb05 07b7 	add.w	r7, r5, r7, ror #2
    P( D, E, A, B, C, R(62) );
   dacd0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   dacd2:	ea85 75f6 	eor.w	r5, r5, r6, ror #31
    P( A, B, C, D, E, R(60) );
   dacd6:	ea8b 0b08 	eor.w	fp, fp, r8
    P( D, E, A, B, C, R(62) );
   dacda:	ea85 7efe 	eor.w	lr, r5, lr, ror #31
   dacde:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
    P( B, C, D, E, A, R(59) );
   dace2:	eb00 60f8 	add.w	r0, r0, r8, ror #27
    P( E, A, B, C, D, R(61) );
   dace6:	ea82 04b8 	eor.w	r4, r2, r8, ror #2
    P( A, B, C, D, E, R(60) );
   dacea:	44e3      	add	fp, ip
   dacec:	eb0b 6bf0 	add.w	fp, fp, r0, ror #27
    P( D, E, A, B, C, R(62) );
   dacf0:	ea4f 75fe 	mov.w	r5, lr, ror #31
    P( E, A, B, C, D, R(61) );
   dacf4:	4044      	eors	r4, r0
   dacf6:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(62) );
   dacfa:	950b      	str	r5, [sp, #44]	; 0x2c
   dacfc:	ea80 0cb8 	eor.w	ip, r0, r8, ror #2
   dad00:	eb03 75fe 	add.w	r5, r3, lr, ror #31
   dad04:	442a      	add	r2, r5
   dad06:	ea8c 0c0b 	eor.w	ip, ip, fp
    P( C, D, E, A, B, R(63) );
   dad0a:	9d04      	ldr	r5, [sp, #16]
    P( D, E, A, B, C, R(62) );
   dad0c:	4494      	add	ip, r2
    P( C, D, E, A, B, R(63) );
   dad0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(61) );
   dad10:	443c      	add	r4, r7
    P( C, D, E, A, B, R(63) );
   dad12:	ea82 77f5 	eor.w	r7, r2, r5, ror #31
   dad16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    P( B, C, D, E, A, R(64) );
   dad18:	9d08      	ldr	r5, [sp, #32]
    P( C, D, E, A, B, R(63) );
   dad1a:	ea87 77f1 	eor.w	r7, r7, r1, ror #31
   dad1e:	ea87 77f2 	eor.w	r7, r7, r2, ror #31
   dad22:	ea4f 72f7 	mov.w	r2, r7, ror #31
   dad26:	920d      	str	r2, [sp, #52]	; 0x34
   dad28:	eb03 72f7 	add.w	r2, r3, r7, ror #31
   dad2c:	eb02 08b8 	add.w	r8, r2, r8, ror #2
    P( B, C, D, E, A, R(64) );
   dad30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   dad32:	ea82 72f6 	eor.w	r2, r2, r6, ror #31
   dad36:	ea82 72f5 	eor.w	r2, r2, r5, ror #31
   dad3a:	9d02      	ldr	r5, [sp, #8]
    P( E, A, B, C, D, R(61) );
   dad3c:	eb04 64fb 	add.w	r4, r4, fp, ror #27
    P( C, D, E, A, B, R(63) );
   dad40:	ea80 01bb 	eor.w	r1, r0, fp, ror #2
    P( D, E, A, B, C, R(62) );
   dad44:	eb0c 6cf4 	add.w	ip, ip, r4, ror #27
    P( B, C, D, E, A, R(64) );
   dad48:	ea82 72f5 	eor.w	r2, r2, r5, ror #31
    P( C, D, E, A, B, R(63) );
   dad4c:	4061      	eors	r1, r4
   dad4e:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( B, C, D, E, A, R(64) );
   dad52:	9203      	str	r2, [sp, #12]
    P( C, D, E, A, B, R(63) );
   dad54:	4441      	add	r1, r8
    P( B, C, D, E, A, R(64) );
   dad56:	eb03 72f2 	add.w	r2, r3, r2, ror #31
   dad5a:	ea84 08bb 	eor.w	r8, r4, fp, ror #2
   dad5e:	4410      	add	r0, r2
   dad60:	ea88 080c 	eor.w	r8, r8, ip
    P( A, B, C, D, E, R(65) );
   dad64:	9a14      	ldr	r2, [sp, #80]	; 0x50
    P( B, C, D, E, A, R(64) );
   dad66:	4480      	add	r8, r0
    P( A, B, C, D, E, R(65) );
   dad68:	9804      	ldr	r0, [sp, #16]
   dad6a:	ea82 76f0 	eor.w	r6, r2, r0, ror #31
   dad6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    P( E, A, B, C, D, R(66) );
   dad70:	9806      	ldr	r0, [sp, #24]
    P( A, B, C, D, E, R(65) );
   dad72:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
   dad76:	ea86 72fe 	eor.w	r2, r6, lr, ror #31
   dad7a:	9204      	str	r2, [sp, #16]
   dad7c:	eb03 72f2 	add.w	r2, r3, r2, ror #31
   dad80:	eb02 0bbb 	add.w	fp, r2, fp, ror #2
    P( E, A, B, C, D, R(66) );
   dad84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   dad86:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
   dad8a:	ea82 7afa 	eor.w	sl, r2, sl, ror #31
   dad8e:	ea8a 7af7 	eor.w	sl, sl, r7, ror #31
   dad92:	eb03 72fa 	add.w	r2, r3, sl, ror #31
    P( D, E, A, B, C, R(67) );
   dad96:	9807      	ldr	r0, [sp, #28]
    P( A, B, C, D, E, R(65) );
   dad98:	ea84 06bc 	eor.w	r6, r4, ip, ror #2
    P( E, A, B, C, D, R(66) );
   dad9c:	4414      	add	r4, r2
    P( D, E, A, B, C, R(67) );
   dad9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dada0:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
    P( C, D, E, A, B, R(63) );
   dada4:	eb01 61fc 	add.w	r1, r1, ip, ror #27
    P( D, E, A, B, C, R(67) );
   dada8:	ea82 79f9 	eor.w	r9, r2, r9, ror #31
   dadac:	9a03      	ldr	r2, [sp, #12]
    P( B, C, D, E, A, R(64) );
   dadae:	eb08 68f1 	add.w	r8, r8, r1, ror #27
    P( A, B, C, D, E, R(65) );
   dadb2:	404e      	eors	r6, r1
   dadb4:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, R(67) );
   dadb8:	ea89 79f2 	eor.w	r9, r9, r2, ror #31
    P( A, B, C, D, E, R(65) );
   dadbc:	445e      	add	r6, fp
    P( E, A, B, C, D, R(66) );
   dadbe:	ea81 0bbc 	eor.w	fp, r1, ip, ror #2
    P( D, E, A, B, C, R(67) );
   dadc2:	eb03 70f9 	add.w	r0, r3, r9, ror #31
    P( E, A, B, C, D, R(66) );
   dadc6:	ea8b 0b08 	eor.w	fp, fp, r8
    P( D, E, A, B, C, R(67) );
   dadca:	eb00 0cbc 	add.w	ip, r0, ip, ror #2
    P( E, A, B, C, D, R(66) );
   dadce:	44a3      	add	fp, r4
    P( C, D, E, A, B, R(68) );
   dadd0:	9810      	ldr	r0, [sp, #64]	; 0x40
   dadd2:	9c06      	ldr	r4, [sp, #24]
   dadd4:	ea80 74f4 	eor.w	r4, r0, r4, ror #31
   dadd8:	980a      	ldr	r0, [sp, #40]	; 0x28
   dadda:	ea84 74f0 	eor.w	r4, r4, r0, ror #31
   dadde:	9804      	ldr	r0, [sp, #16]
    P( A, B, C, D, E, R(65) );
   dade0:	eb06 66f8 	add.w	r6, r6, r8, ror #27
    P( D, E, A, B, C, R(67) );
   dade4:	ea81 02b8 	eor.w	r2, r1, r8, ror #2
    P( E, A, B, C, D, R(66) );
   dade8:	eb0b 6bf6 	add.w	fp, fp, r6, ror #27
    P( C, D, E, A, B, R(68) );
   dadec:	ea84 74f0 	eor.w	r4, r4, r0, ror #31
    P( D, E, A, B, C, R(67) );
   dadf0:	4072      	eors	r2, r6
   dadf2:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( C, D, E, A, B, R(68) );
   dadf6:	eb03 70f4 	add.w	r0, r3, r4, ror #31
    P( D, E, A, B, C, R(67) );
   dadfa:	4462      	add	r2, ip
    P( C, D, E, A, B, R(68) );
   dadfc:	ea86 0cb8 	eor.w	ip, r6, r8, ror #2
   dae00:	4401      	add	r1, r0
   dae02:	ea8c 0c0b 	eor.w	ip, ip, fp
    P( B, C, D, E, A, R(69) );
   dae06:	9807      	ldr	r0, [sp, #28]
    P( C, D, E, A, B, R(68) );
   dae08:	448c      	add	ip, r1
    P( B, C, D, E, A, R(69) );
   dae0a:	990c      	ldr	r1, [sp, #48]	; 0x30
   dae0c:	ea81 71f0 	eor.w	r1, r1, r0, ror #31
   dae10:	ea81 71f5 	eor.w	r1, r1, r5, ror #31
   dae14:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
   dae18:	eb03 70f1 	add.w	r0, r3, r1, ror #31
    P( D, E, A, B, C, R(67) );
   dae1c:	eb02 62fb 	add.w	r2, r2, fp, ror #27
    P( B, C, D, E, A, R(69) );
   dae20:	ea86 05bb 	eor.w	r5, r6, fp, ror #2
   dae24:	eb00 08b8 	add.w	r8, r0, r8, ror #2
    P( A, B, C, D, E, R(70) );
   dae28:	9810      	ldr	r0, [sp, #64]	; 0x40
    P( B, C, D, E, A, R(69) );
   dae2a:	4055      	eors	r5, r2
   dae2c:	4445      	add	r5, r8
    P( A, B, C, D, E, R(70) );
   dae2e:	4680      	mov	r8, r0
   dae30:	9808      	ldr	r0, [sp, #32]
   dae32:	ea88 70f0 	eor.w	r0, r8, r0, ror #31
   dae36:	ea80 7efe 	eor.w	lr, r0, lr, ror #31
    P( C, D, E, A, B, R(68) );
   dae3a:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
    P( A, B, C, D, E, R(70) );
   dae3e:	ea8e 70f9 	eor.w	r0, lr, r9, ror #31
    P( B, C, D, E, A, R(69) );
   dae42:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( A, B, C, D, E, R(70) );
   dae46:	9006      	str	r0, [sp, #24]
   dae48:	ea82 08bb 	eor.w	r8, r2, fp, ror #2
   dae4c:	eb03 70f0 	add.w	r0, r3, r0, ror #31
   dae50:	4406      	add	r6, r0
   dae52:	ea88 080c 	eor.w	r8, r8, ip
    P( E, A, B, C, D, R(71) );
   dae56:	980c      	ldr	r0, [sp, #48]	; 0x30
    P( A, B, C, D, E, R(70) );
   dae58:	44b0      	add	r8, r6
    P( E, A, B, C, D, R(71) );
   dae5a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   dae5c:	ea80 70f6 	eor.w	r0, r0, r6, ror #31
   dae60:	ea80 77f7 	eor.w	r7, r0, r7, ror #31
   dae64:	ea87 70f4 	eor.w	r0, r7, r4, ror #31
   dae68:	9007      	str	r0, [sp, #28]
   dae6a:	9e07      	ldr	r6, [sp, #28]
    P( D, E, A, B, C, R(72) );
   dae6c:	9f08      	ldr	r7, [sp, #32]
    P( E, A, B, C, D, R(71) );
   dae6e:	eb03 76f6 	add.w	r6, r3, r6, ror #31
   dae72:	eb06 0bbb 	add.w	fp, r6, fp, ror #2
    P( D, E, A, B, C, R(72) );
   dae76:	9e11      	ldr	r6, [sp, #68]	; 0x44
   dae78:	ea86 77f7 	eor.w	r7, r6, r7, ror #31
   dae7c:	9e03      	ldr	r6, [sp, #12]
    P( B, C, D, E, A, R(69) );
   dae7e:	eb05 65fc 	add.w	r5, r5, ip, ror #27
    P( E, A, B, C, D, R(71) );
   dae82:	ea82 00bc 	eor.w	r0, r2, ip, ror #2
    P( D, E, A, B, C, R(72) );
   dae86:	ea87 77f6 	eor.w	r7, r7, r6, ror #31
    P( A, B, C, D, E, R(70) );
   dae8a:	eb08 68f5 	add.w	r8, r8, r5, ror #27
    P( D, E, A, B, C, R(72) );
   dae8e:	ea87 77f1 	eor.w	r7, r7, r1, ror #31
    P( E, A, B, C, D, R(71) );
   dae92:	4068      	eors	r0, r5
   dae94:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( D, E, A, B, C, R(72) );
   dae98:	eb03 76f7 	add.w	r6, r3, r7, ror #31
   dae9c:	ea85 0ebc 	eor.w	lr, r5, ip, ror #2
   daea0:	4432      	add	r2, r6
   daea2:	ea8e 0e08 	eor.w	lr, lr, r8
    P( C, D, E, A, B, R(73) );
   daea6:	9e09      	ldr	r6, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(72) );
   daea8:	4496      	add	lr, r2
    P( C, D, E, A, B, R(73) );
   daeaa:	9a15      	ldr	r2, [sp, #84]	; 0x54
   daeac:	ea82 76f6 	eor.w	r6, r2, r6, ror #31
   daeb0:	9a04      	ldr	r2, [sp, #16]
   daeb2:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
   daeb6:	9a06      	ldr	r2, [sp, #24]
   daeb8:	ea86 72f2 	eor.w	r2, r6, r2, ror #31
   daebc:	9208      	str	r2, [sp, #32]
   daebe:	9e08      	ldr	r6, [sp, #32]
    P( E, A, B, C, D, R(71) );
   daec0:	4458      	add	r0, fp
   daec2:	eb00 60f8 	add.w	r0, r0, r8, ror #27
    P( C, D, E, A, B, R(73) );
   daec6:	eb03 7bf6 	add.w	fp, r3, r6, ror #31
   daeca:	ea85 02b8 	eor.w	r2, r5, r8, ror #2
    P( B, C, D, E, A, R(74) );
   daece:	9e11      	ldr	r6, [sp, #68]	; 0x44
    P( C, D, E, A, B, R(73) );
   daed0:	eb0b 0cbc 	add.w	ip, fp, ip, ror #2
   daed4:	4042      	eors	r2, r0
   daed6:	4462      	add	r2, ip
    P( B, C, D, E, A, R(74) );
   daed8:	46b4      	mov	ip, r6
   daeda:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   daedc:	ea8c 7cf6 	eor.w	ip, ip, r6, ror #31
   daee0:	9e07      	ldr	r6, [sp, #28]
   daee2:	ea8c 7afa 	eor.w	sl, ip, sl, ror #31
    P( D, E, A, B, C, R(72) );
   daee6:	eb0e 6ef0 	add.w	lr, lr, r0, ror #27
    P( B, C, D, E, A, R(74) );
   daeea:	ea8a 7af6 	eor.w	sl, sl, r6, ror #31
    P( C, D, E, A, B, R(73) );
   daeee:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( B, C, D, E, A, R(74) );
   daef2:	eb03 7bfa 	add.w	fp, r3, sl, ror #31
   daef6:	ea80 0cb8 	eor.w	ip, r0, r8, ror #2
   daefa:	445d      	add	r5, fp
   daefc:	ea8c 0c0e 	eor.w	ip, ip, lr
    P( A, B, C, D, E, R(75) );
   daf00:	9e02      	ldr	r6, [sp, #8]
    P( B, C, D, E, A, R(74) );
   daf02:	44ac      	add	ip, r5
    P( A, B, C, D, E, R(75) );
   daf04:	9d15      	ldr	r5, [sp, #84]	; 0x54
   daf06:	ea85 75f6 	eor.w	r5, r5, r6, ror #31
   daf0a:	ea85 79f9 	eor.w	r9, r5, r9, ror #31
   daf0e:	ea89 77f7 	eor.w	r7, r9, r7, ror #31
   daf12:	eb03 75f7 	add.w	r5, r3, r7, ror #31
   daf16:	eb05 08b8 	add.w	r8, r5, r8, ror #2
    P( E, A, B, C, D, R(76) );
   daf1a:	e9dd 650a 	ldrd	r6, r5, [sp, #40]	; 0x28
   daf1e:	ea85 75f6 	eor.w	r5, r5, r6, ror #31
   daf22:	ea85 74f4 	eor.w	r4, r5, r4, ror #31
   daf26:	9d08      	ldr	r5, [sp, #32]
    P( C, D, E, A, B, R(73) );
   daf28:	eb02 62fe 	add.w	r2, r2, lr, ror #27
    P( A, B, C, D, E, R(75) );
   daf2c:	ea80 0bbe 	eor.w	fp, r0, lr, ror #2
    P( B, C, D, E, A, R(74) );
   daf30:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
    P( E, A, B, C, D, R(76) );
   daf34:	ea84 76f5 	eor.w	r6, r4, r5, ror #31
    P( A, B, C, D, E, R(75) );
   daf38:	ea8b 0b02 	eor.w	fp, fp, r2
   daf3c:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(76) );
   daf40:	eb03 75f6 	add.w	r5, r3, r6, ror #31
   daf44:	ea82 04be 	eor.w	r4, r2, lr, ror #2
   daf48:	ea84 040c 	eor.w	r4, r4, ip
   daf4c:	4428      	add	r0, r5
   daf4e:	4420      	add	r0, r4
    P( D, E, A, B, C, R(77) );
   daf50:	9d02      	ldr	r5, [sp, #8]
   daf52:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   daf54:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
   daf58:	ea84 71f1 	eor.w	r1, r4, r1, ror #31
   daf5c:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
   daf60:	eb03 71f1 	add.w	r1, r3, r1, ror #31
    P( A, B, C, D, E, R(75) );
   daf64:	44c3      	add	fp, r8
   daf66:	eb0b 6bfc 	add.w	fp, fp, ip, ror #27
    P( D, E, A, B, C, R(77) );
   daf6a:	eb01 0ebe 	add.w	lr, r1, lr, ror #2
   daf6e:	ea82 01bc 	eor.w	r1, r2, ip, ror #2
   daf72:	ea81 010b 	eor.w	r1, r1, fp
    P( C, D, E, A, B, R(78) );
   daf76:	9c03      	ldr	r4, [sp, #12]
    P( D, E, A, B, C, R(77) );
   daf78:	448e      	add	lr, r1
    P( C, D, E, A, B, R(78) );
   daf7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   daf7c:	ea81 79f4 	eor.w	r9, r1, r4, ror #31
   daf80:	9906      	ldr	r1, [sp, #24]
    P( B, C, D, E, A, R(79) );
   daf82:	9c04      	ldr	r4, [sp, #16]
    P( C, D, E, A, B, R(78) );
   daf84:	ea89 79f1 	eor.w	r9, r9, r1, ror #31
    P( B, C, D, E, A, R(79) );
   daf88:	990d      	ldr	r1, [sp, #52]	; 0x34
   daf8a:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
   daf8e:	9c07      	ldr	r4, [sp, #28]
   daf90:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
   daf94:	ea81 76f6 	eor.w	r6, r1, r6, ror #31

#undef K
#undef F

    ctx->state[0] += A;
   daf98:	990e      	ldr	r1, [sp, #56]	; 0x38
    P( C, D, E, A, B, R(78) );
   daf9a:	ea89 79f7 	eor.w	r9, r9, r7, ror #31
    P( E, A, B, C, D, R(76) );
   daf9e:	eb00 60fb 	add.w	r0, r0, fp, ror #27
    P( C, D, E, A, B, R(78) );
   dafa2:	eb03 79f9 	add.w	r9, r3, r9, ror #31
    P( D, E, A, B, C, R(77) );
   dafa6:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    ctx->state[0] += A;
   dafaa:	440b      	add	r3, r1
   dafac:	eb03 73f6 	add.w	r3, r3, r6, ror #31
    P( C, D, E, A, B, R(78) );
   dafb0:	444a      	add	r2, r9
   dafb2:	ea8b 09bc 	eor.w	r9, fp, ip, ror #2
    P( D, E, A, B, C, R(77) );
   dafb6:	eb0e 6ef0 	add.w	lr, lr, r0, ror #27
    P( C, D, E, A, B, R(78) );
   dafba:	ea89 0900 	eor.w	r9, r9, r0
    ctx->state[0] += A;
   dafbe:	eb03 0cbc 	add.w	ip, r3, ip, ror #2
    P( B, C, D, E, A, R(79) );
   dafc2:	ea8b 03b0 	eor.w	r3, fp, r0, ror #2
    P( C, D, E, A, B, R(78) );
   dafc6:	444a      	add	r2, r9
    P( B, C, D, E, A, R(79) );
   dafc8:	ea83 030e 	eor.w	r3, r3, lr
    ctx->state[0] += A;
   dafcc:	9900      	ldr	r1, [sp, #0]
    P( C, D, E, A, B, R(78) );
   dafce:	eb02 62fe 	add.w	r2, r2, lr, ror #27
    ctx->state[0] += A;
   dafd2:	4463      	add	r3, ip
   dafd4:	eb03 63f2 	add.w	r3, r3, r2, ror #27
   dafd8:	608b      	str	r3, [r1, #8]
    ctx->state[1] += B;
   dafda:	9b01      	ldr	r3, [sp, #4]
   dafdc:	441a      	add	r2, r3
    ctx->state[2] += C;
   dafde:	9b05      	ldr	r3, [sp, #20]
    ctx->state[1] += B;
   dafe0:	60ca      	str	r2, [r1, #12]
    ctx->state[2] += C;
   dafe2:	eb03 01be 	add.w	r1, r3, lr, ror #2
   dafe6:	9b00      	ldr	r3, [sp, #0]
   dafe8:	6119      	str	r1, [r3, #16]
    ctx->state[3] += D;
   dafea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dafec:	eb03 00b0 	add.w	r0, r3, r0, ror #2
   daff0:	9b00      	ldr	r3, [sp, #0]
   daff2:	6158      	str	r0, [r3, #20]
    ctx->state[4] += E;
   daff4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   daff6:	eb03 050b 	add.w	r5, r3, fp
   daffa:	9b00      	ldr	r3, [sp, #0]

    return( 0 );
}
   daffc:	2000      	movs	r0, #0
   daffe:	e001      	b.n	db004 <mbedtls_internal_sha1_process+0xdf0>
   db000:	ca62c1d6 	.word	0xca62c1d6
    ctx->state[4] += E;
   db004:	619d      	str	r5, [r3, #24]
}
   db006:	b019      	add	sp, #100	; 0x64
   db008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000db00c <mbedtls_sha1_update_ret>:
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
   db00c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db010:	4605      	mov	r5, r0
   db012:	460e      	mov	r6, r1
    uint32_t left;

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
   db014:	4614      	mov	r4, r2
   db016:	b912      	cbnz	r2, db01e <mbedtls_sha1_update_ret+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
   db018:	2000      	movs	r0, #0
}
   db01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    left = ctx->total[0] & 0x3F;
   db01e:	6803      	ldr	r3, [r0, #0]
   db020:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    ctx->total[0] += (uint32_t) ilen;
   db024:	18d3      	adds	r3, r2, r3
   db026:	6003      	str	r3, [r0, #0]
        ctx->total[1]++;
   db028:	bf22      	ittt	cs
   db02a:	6843      	ldrcs	r3, [r0, #4]
   db02c:	3301      	addcs	r3, #1
   db02e:	6043      	strcs	r3, [r0, #4]
    if( left && ilen >= fill )
   db030:	b1a7      	cbz	r7, db05c <mbedtls_sha1_update_ret+0x50>
    fill = 64 - left;
   db032:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
   db036:	454a      	cmp	r2, r9
   db038:	d310      	bcc.n	db05c <mbedtls_sha1_update_ret+0x50>
        memcpy( (void *) (ctx->buffer + left), input, fill );
   db03a:	f100 081c 	add.w	r8, r0, #28
   db03e:	464a      	mov	r2, r9
   db040:	eb08 0007 	add.w	r0, r8, r7
   db044:	f00d fed2 	bl	e8dec <memcpy>
        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
   db048:	4641      	mov	r1, r8
   db04a:	4628      	mov	r0, r5
   db04c:	f7ff f8e2 	bl	da214 <mbedtls_internal_sha1_process>
   db050:	2800      	cmp	r0, #0
   db052:	d1e2      	bne.n	db01a <mbedtls_sha1_update_ret+0xe>
        ilen  -= fill;
   db054:	443c      	add	r4, r7
        input += fill;
   db056:	444e      	add	r6, r9
        ilen  -= fill;
   db058:	3c40      	subs	r4, #64	; 0x40
        left = 0;
   db05a:	4607      	mov	r7, r0
   db05c:	4426      	add	r6, r4
    while( ilen >= 64 )
   db05e:	2c3f      	cmp	r4, #63	; 0x3f
   db060:	eba6 0104 	sub.w	r1, r6, r4
   db064:	d906      	bls.n	db074 <mbedtls_sha1_update_ret+0x68>
        if( ( ret = mbedtls_internal_sha1_process( ctx, input ) ) != 0 )
   db066:	4628      	mov	r0, r5
   db068:	f7ff f8d4 	bl	da214 <mbedtls_internal_sha1_process>
   db06c:	2800      	cmp	r0, #0
   db06e:	d1d4      	bne.n	db01a <mbedtls_sha1_update_ret+0xe>
        ilen  -= 64;
   db070:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
   db072:	e7f4      	b.n	db05e <mbedtls_sha1_update_ret+0x52>
    if( ilen > 0 )
   db074:	2c00      	cmp	r4, #0
   db076:	d0cf      	beq.n	db018 <mbedtls_sha1_update_ret+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
   db078:	f105 001c 	add.w	r0, r5, #28
   db07c:	4622      	mov	r2, r4
   db07e:	4438      	add	r0, r7
   db080:	f00d feb4 	bl	e8dec <memcpy>
   db084:	e7c8      	b.n	db018 <mbedtls_sha1_update_ret+0xc>

000db086 <mbedtls_sha1_finish_ret>:
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
   db086:	b570      	push	{r4, r5, r6, lr}
    SHA1_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   db088:	6803      	ldr	r3, [r0, #0]
   db08a:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
   db08e:	1c5a      	adds	r2, r3, #1
   db090:	4403      	add	r3, r0
{
   db092:	460d      	mov	r5, r1
   db094:	f100 061c 	add.w	r6, r0, #28
    ctx->buffer[used++] = 0x80;
   db098:	2180      	movs	r1, #128	; 0x80

    if( used <= 56 )
   db09a:	2a38      	cmp	r2, #56	; 0x38
{
   db09c:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
   db09e:	7719      	strb	r1, [r3, #28]
    if( used <= 56 )
   db0a0:	eb06 0002 	add.w	r0, r6, r2
   db0a4:	d842      	bhi.n	db12c <mbedtls_sha1_finish_ret+0xa6>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
   db0a6:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
   db0aa:	2100      	movs	r1, #0
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
   db0ac:	f00d fec6 	bl	e8e3c <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
   db0b0:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
   db0b4:	0f5a      	lsrs	r2, r3, #29
   db0b6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
   db0ba:	00db      	lsls	r3, r3, #3
   db0bc:	ba12      	rev	r2, r2
   db0be:	ba1b      	rev	r3, r3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   db0c0:	6562      	str	r2, [r4, #84]	; 0x54
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
   db0c2:	65a3      	str	r3, [r4, #88]	; 0x58

    if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
   db0c4:	4631      	mov	r1, r6
   db0c6:	4620      	mov	r0, r4
   db0c8:	f7ff f8a4 	bl	da214 <mbedtls_internal_sha1_process>
   db0cc:	2800      	cmp	r0, #0
   db0ce:	d12c      	bne.n	db12a <mbedtls_sha1_finish_ret+0xa4>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
   db0d0:	7ae3      	ldrb	r3, [r4, #11]
   db0d2:	702b      	strb	r3, [r5, #0]
   db0d4:	8963      	ldrh	r3, [r4, #10]
   db0d6:	706b      	strb	r3, [r5, #1]
   db0d8:	68a3      	ldr	r3, [r4, #8]
   db0da:	0a1b      	lsrs	r3, r3, #8
   db0dc:	70ab      	strb	r3, [r5, #2]
   db0de:	68a3      	ldr	r3, [r4, #8]
   db0e0:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
   db0e2:	7be3      	ldrb	r3, [r4, #15]
   db0e4:	712b      	strb	r3, [r5, #4]
   db0e6:	89e3      	ldrh	r3, [r4, #14]
   db0e8:	716b      	strb	r3, [r5, #5]
   db0ea:	68e3      	ldr	r3, [r4, #12]
   db0ec:	0a1b      	lsrs	r3, r3, #8
   db0ee:	71ab      	strb	r3, [r5, #6]
   db0f0:	68e3      	ldr	r3, [r4, #12]
   db0f2:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
   db0f4:	7ce3      	ldrb	r3, [r4, #19]
   db0f6:	722b      	strb	r3, [r5, #8]
   db0f8:	8a63      	ldrh	r3, [r4, #18]
   db0fa:	726b      	strb	r3, [r5, #9]
   db0fc:	6923      	ldr	r3, [r4, #16]
   db0fe:	0a1b      	lsrs	r3, r3, #8
   db100:	72ab      	strb	r3, [r5, #10]
   db102:	6923      	ldr	r3, [r4, #16]
   db104:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
   db106:	7de3      	ldrb	r3, [r4, #23]
   db108:	732b      	strb	r3, [r5, #12]
   db10a:	8ae3      	ldrh	r3, [r4, #22]
   db10c:	736b      	strb	r3, [r5, #13]
   db10e:	6963      	ldr	r3, [r4, #20]
   db110:	0a1b      	lsrs	r3, r3, #8
   db112:	73ab      	strb	r3, [r5, #14]
   db114:	6963      	ldr	r3, [r4, #20]
   db116:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
   db118:	7ee3      	ldrb	r3, [r4, #27]
   db11a:	742b      	strb	r3, [r5, #16]
   db11c:	8b63      	ldrh	r3, [r4, #26]
   db11e:	746b      	strb	r3, [r5, #17]
   db120:	69a3      	ldr	r3, [r4, #24]
   db122:	0a1b      	lsrs	r3, r3, #8
   db124:	74ab      	strb	r3, [r5, #18]
   db126:	69a3      	ldr	r3, [r4, #24]
   db128:	74eb      	strb	r3, [r5, #19]

    return( 0 );
}
   db12a:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
   db12c:	2100      	movs	r1, #0
   db12e:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   db132:	f00d fe83 	bl	e8e3c <memset>
        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
   db136:	4631      	mov	r1, r6
   db138:	4620      	mov	r0, r4
   db13a:	f7ff f86b 	bl	da214 <mbedtls_internal_sha1_process>
   db13e:	2800      	cmp	r0, #0
   db140:	d1f3      	bne.n	db12a <mbedtls_sha1_finish_ret+0xa4>
        memset( ctx->buffer, 0, 56 );
   db142:	4601      	mov	r1, r0
   db144:	2238      	movs	r2, #56	; 0x38
   db146:	4630      	mov	r0, r6
   db148:	e7b0      	b.n	db0ac <mbedtls_sha1_finish_ret+0x26>

000db14a <mbedtls_sha1_ret>:
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
   db14a:	b5f0      	push	{r4, r5, r6, r7, lr}
   db14c:	b099      	sub	sp, #100	; 0x64
   db14e:	4606      	mov	r6, r0
    mbedtls_sha1_context ctx;

    SHA1_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA1_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha1_init( &ctx );
   db150:	a801      	add	r0, sp, #4
{
   db152:	460f      	mov	r7, r1
   db154:	4615      	mov	r5, r2
    mbedtls_sha1_init( &ctx );
   db156:	f7ff f835 	bl	da1c4 <mbedtls_sha1_init>

    if( ( ret = mbedtls_sha1_starts_ret( &ctx ) ) != 0 )
   db15a:	a801      	add	r0, sp, #4
   db15c:	f7ff f840 	bl	da1e0 <mbedtls_sha1_starts_ret>
   db160:	4604      	mov	r4, r0
   db162:	b958      	cbnz	r0, db17c <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_update_ret( &ctx, input, ilen ) ) != 0 )
   db164:	463a      	mov	r2, r7
   db166:	4631      	mov	r1, r6
   db168:	a801      	add	r0, sp, #4
   db16a:	f7ff ff4f 	bl	db00c <mbedtls_sha1_update_ret>
   db16e:	4604      	mov	r4, r0
   db170:	b920      	cbnz	r0, db17c <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_finish_ret( &ctx, output ) ) != 0 )
   db172:	4629      	mov	r1, r5
   db174:	a801      	add	r0, sp, #4
   db176:	f7ff ff86 	bl	db086 <mbedtls_sha1_finish_ret>
   db17a:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha1_free( &ctx );
   db17c:	a801      	add	r0, sp, #4
   db17e:	f7ff f825 	bl	da1cc <mbedtls_sha1_free>

    return( ret );
}
   db182:	4620      	mov	r0, r4
   db184:	b019      	add	sp, #100	; 0x64
   db186:	bdf0      	pop	{r4, r5, r6, r7, pc}

000db188 <mbedtls_timing_get_timer.part.0>:
    (void) _beginthread( TimerProc, 0, NULL );
}

#else /* _WIN32 && !EFIX64 && !EFI32 */

unsigned long mbedtls_timing_get_timer( struct mbedtls_timing_hr_time *val, int reset )
   db188:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   db18a:	4604      	mov	r4, r0
    }
    else
    {
        unsigned long delta;
        struct timeval now;
        gettimeofday( &now, NULL );
   db18c:	2100      	movs	r1, #0
   db18e:	4668      	mov	r0, sp
   db190:	f00e fd8c 	bl	e9cac <gettimeofday>
        delta = ( now.tv_sec  - t->start.tv_sec  ) * 1000ul
   db194:	9b00      	ldr	r3, [sp, #0]
   db196:	6822      	ldr	r2, [r4, #0]
              + ( now.tv_usec - t->start.tv_usec ) / 1000;
   db198:	68a1      	ldr	r1, [r4, #8]
        delta = ( now.tv_sec  - t->start.tv_sec  ) * 1000ul
   db19a:	1a9a      	subs	r2, r3, r2
              + ( now.tv_usec - t->start.tv_usec ) / 1000;
   db19c:	9b02      	ldr	r3, [sp, #8]
   db19e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   db1a2:	1a5b      	subs	r3, r3, r1
   db1a4:	fb93 f3f0 	sdiv	r3, r3, r0
        return( delta );
    }
}
   db1a8:	fb00 3002 	mla	r0, r0, r2, r3
   db1ac:	b004      	add	sp, #16
   db1ae:	bd10      	pop	{r4, pc}

000db1b0 <_gettimeofday>:
{
   db1b0:	b538      	push	{r3, r4, r5, lr}
   db1b2:	4604      	mov	r4, r0
    uint32_t t = HAL_Timer_Milliseconds();  // get uptime
   db1b4:	f00a f9d2 	bl	e555c <HAL_Timer_Get_Milli_Seconds>
   db1b8:	4605      	mov	r5, r0
    hal_rtc_init();
}

// There is no replacement for these
inline time32_t __attribute__((deprecated, always_inline)) HAL_RTC_Get_UnixTime(void) {
    return hal_rtc_get_unixtime_deprecated();
   db1ba:	f00a f9d7 	bl	e556c <hal_rtc_get_unixtime_deprecated>
    tv->tv_usec = ( t % 1000 )*1000;        // get remaining microseconds
   db1be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    tv->tv_sec = HAL_RTC_Get_UnixTime();    // get rtc time before Particle.syncTime()
   db1c2:	17c1      	asrs	r1, r0, #31
   db1c4:	e9c4 0100 	strd	r0, r1, [r4]
    tv->tv_usec = ( t % 1000 )*1000;        // get remaining microseconds
   db1c8:	fbb5 f0f3 	udiv	r0, r5, r3
   db1cc:	fb03 5510 	mls	r5, r3, r0, r5
   db1d0:	436b      	muls	r3, r5
   db1d2:	60a3      	str	r3, [r4, #8]
} // end _gettimeofday()
   db1d4:	2000      	movs	r0, #0
   db1d6:	bd38      	pop	{r3, r4, r5, pc}

000db1d8 <mbedtls_timing_set_delay>:
void mbedtls_timing_set_delay( void *data, uint32_t int_ms, uint32_t fin_ms )
{
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;

    ctx->int_ms = int_ms;
    ctx->fin_ms = fin_ms;
   db1d8:	e9c0 1208 	strd	r1, r2, [r0, #32]

    if( fin_ms != 0 )
   db1dc:	b112      	cbz	r2, db1e4 <mbedtls_timing_set_delay+0xc>
        gettimeofday( &t->start, NULL );
   db1de:	2100      	movs	r1, #0
   db1e0:	f00e bd64 	b.w	e9cac <gettimeofday>
        (void) mbedtls_timing_get_timer( &ctx->timer, 1 );
}
   db1e4:	4770      	bx	lr

000db1e6 <mbedtls_timing_get_delay>:

/*
 * Get number of delays expired
 */
int mbedtls_timing_get_delay( void *data )
{
   db1e6:	b510      	push	{r4, lr}
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
   db1e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   db1ea:	4604      	mov	r4, r0
    if( ctx->fin_ms == 0 )
   db1ec:	b153      	cbz	r3, db204 <mbedtls_timing_get_delay+0x1e>
    if( reset )
   db1ee:	f7ff ffcb 	bl	db188 <mbedtls_timing_get_timer.part.0>
        return( -1 );

    elapsed_ms = mbedtls_timing_get_timer( &ctx->timer, 0 );

    if( elapsed_ms >= ctx->fin_ms )
   db1f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   db1f4:	4283      	cmp	r3, r0
   db1f6:	d908      	bls.n	db20a <mbedtls_timing_get_delay+0x24>
        return( 2 );

    if( elapsed_ms >= ctx->int_ms )
   db1f8:	6a23      	ldr	r3, [r4, #32]
   db1fa:	4283      	cmp	r3, r0
   db1fc:	bf8c      	ite	hi
   db1fe:	2000      	movhi	r0, #0
   db200:	2001      	movls	r0, #1
        return( 1 );

    return( 0 );
}
   db202:	bd10      	pop	{r4, pc}
        return( -1 );
   db204:	f04f 30ff 	mov.w	r0, #4294967295
   db208:	e7fb      	b.n	db202 <mbedtls_timing_get_delay+0x1c>
        return( 2 );
   db20a:	2002      	movs	r0, #2
   db20c:	e7f9      	b.n	db202 <mbedtls_timing_get_delay+0x1c>

000db20e <mbedtls_pkcs5_pbkdf2_hmac>:

int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx, const unsigned char *password,
                       size_t plen, const unsigned char *salt, size_t slen,
                       unsigned int iteration_count,
                       uint32_t key_length, unsigned char *output )
{
   db20e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db212:	b0a3      	sub	sp, #140	; 0x8c
   db214:	4604      	mov	r4, r0
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
   db216:	6800      	ldr	r0, [r0, #0]
{
   db218:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   db21a:	461f      	mov	r7, r3
   db21c:	4688      	mov	r8, r1
   db21e:	4691      	mov	r9, r2
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
   db220:	f001 ff5a 	bl	dd0d8 <mbedtls_md_get_size>
    size_t use_len;
    unsigned char *out_p = output;
    unsigned char counter[4];

    memset( counter, 0, 4 );
   db224:	2300      	movs	r3, #0
   db226:	f8ad 3004 	strh.w	r3, [sp, #4]
   db22a:	f88d 3006 	strb.w	r3, [sp, #6]
    counter[3] = 1;
   db22e:	2301      	movs	r3, #1
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
   db230:	4605      	mov	r5, r0
    counter[3] = 1;
   db232:	f88d 3007 	strb.w	r3, [sp, #7]
            return( ret );

        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
            return( ret );

        memcpy( md1, work, md_size );
   db236:	f10d 0a08 	add.w	sl, sp, #8
    while( key_length )
   db23a:	2e00      	cmp	r6, #0
   db23c:	d05f      	beq.n	db2fe <mbedtls_pkcs5_pbkdf2_hmac+0xf0>
        if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
   db23e:	464a      	mov	r2, r9
   db240:	4641      	mov	r1, r8
   db242:	4620      	mov	r0, r4
   db244:	f001 fe88 	bl	dcf58 <mbedtls_md_hmac_starts>
   db248:	2800      	cmp	r0, #0
   db24a:	d159      	bne.n	db300 <mbedtls_pkcs5_pbkdf2_hmac+0xf2>
        if( ( ret = mbedtls_md_hmac_update( ctx, salt, slen ) ) != 0 )
   db24c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   db24e:	4639      	mov	r1, r7
   db250:	4620      	mov	r0, r4
   db252:	f001 fee7 	bl	dd024 <mbedtls_md_hmac_update>
   db256:	2800      	cmp	r0, #0
   db258:	d152      	bne.n	db300 <mbedtls_pkcs5_pbkdf2_hmac+0xf2>
        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
   db25a:	2204      	movs	r2, #4
   db25c:	eb0d 0102 	add.w	r1, sp, r2
   db260:	4620      	mov	r0, r4
   db262:	f001 fedf 	bl	dd024 <mbedtls_md_hmac_update>
   db266:	2800      	cmp	r0, #0
   db268:	d14a      	bne.n	db300 <mbedtls_pkcs5_pbkdf2_hmac+0xf2>
        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
   db26a:	a912      	add	r1, sp, #72	; 0x48
   db26c:	4620      	mov	r0, r4
   db26e:	f001 feeb 	bl	dd048 <mbedtls_md_hmac_finish>
   db272:	2800      	cmp	r0, #0
   db274:	d144      	bne.n	db300 <mbedtls_pkcs5_pbkdf2_hmac+0xf2>
        memcpy( md1, work, md_size );
   db276:	462a      	mov	r2, r5
   db278:	a912      	add	r1, sp, #72	; 0x48
   db27a:	4650      	mov	r0, sl
   db27c:	f00d fdb6 	bl	e8dec <memcpy>

        for( i = 1; i < iteration_count; i++ )
   db280:	f04f 0b01 	mov.w	fp, #1
   db284:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   db286:	459b      	cmp	fp, r3
   db288:	d21e      	bcs.n	db2c8 <mbedtls_pkcs5_pbkdf2_hmac+0xba>
        {
            // U2 ends up in md1
            //
            if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
   db28a:	464a      	mov	r2, r9
   db28c:	4641      	mov	r1, r8
   db28e:	4620      	mov	r0, r4
   db290:	f001 fe62 	bl	dcf58 <mbedtls_md_hmac_starts>
   db294:	bba0      	cbnz	r0, db300 <mbedtls_pkcs5_pbkdf2_hmac+0xf2>
                return( ret );

            if( ( ret = mbedtls_md_hmac_update( ctx, md1, md_size ) ) != 0 )
   db296:	462a      	mov	r2, r5
   db298:	4651      	mov	r1, sl
   db29a:	4620      	mov	r0, r4
   db29c:	f001 fec2 	bl	dd024 <mbedtls_md_hmac_update>
   db2a0:	bb70      	cbnz	r0, db300 <mbedtls_pkcs5_pbkdf2_hmac+0xf2>
                return( ret );

            if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
   db2a2:	4651      	mov	r1, sl
   db2a4:	4620      	mov	r0, r4
   db2a6:	f001 fecf 	bl	dd048 <mbedtls_md_hmac_finish>
   db2aa:	bb48      	cbnz	r0, db300 <mbedtls_pkcs5_pbkdf2_hmac+0xf2>
   db2ac:	ab12      	add	r3, sp, #72	; 0x48
                return( ret );

            // U1 xor U2
            //
            for( j = 0; j < md_size; j++ )
   db2ae:	4285      	cmp	r5, r0
   db2b0:	dd07      	ble.n	db2c2 <mbedtls_pkcs5_pbkdf2_hmac+0xb4>
                work[j] ^= md1[j];
   db2b2:	781a      	ldrb	r2, [r3, #0]
   db2b4:	f810 100a 	ldrb.w	r1, [r0, sl]
   db2b8:	404a      	eors	r2, r1
   db2ba:	f803 2b01 	strb.w	r2, [r3], #1
            for( j = 0; j < md_size; j++ )
   db2be:	3001      	adds	r0, #1
   db2c0:	e7f5      	b.n	db2ae <mbedtls_pkcs5_pbkdf2_hmac+0xa0>
        for( i = 1; i < iteration_count; i++ )
   db2c2:	f10b 0b01 	add.w	fp, fp, #1
   db2c6:	e7dd      	b.n	db284 <mbedtls_pkcs5_pbkdf2_hmac+0x76>
        }

        use_len = ( key_length < md_size ) ? key_length : md_size;
   db2c8:	42b5      	cmp	r5, r6
   db2ca:	46ab      	mov	fp, r5
   db2cc:	bf28      	it	cs
   db2ce:	46b3      	movcs	fp, r6
        memcpy( out_p, work, use_len );
   db2d0:	465a      	mov	r2, fp
   db2d2:	a912      	add	r1, sp, #72	; 0x48
   db2d4:	982f      	ldr	r0, [sp, #188]	; 0xbc
   db2d6:	f00d fd89 	bl	e8dec <memcpy>

        key_length -= (uint32_t) use_len;
        out_p += use_len;
   db2da:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   db2dc:	445b      	add	r3, fp
        key_length -= (uint32_t) use_len;
   db2de:	eba6 060b 	sub.w	r6, r6, fp
        out_p += use_len;
   db2e2:	932f      	str	r3, [sp, #188]	; 0xbc

        for( i = 4; i > 0; i-- )
   db2e4:	f10d 0207 	add.w	r2, sp, #7
        out_p += use_len;
   db2e8:	2104      	movs	r1, #4
            if( ++counter[i - 1] != 0 )
   db2ea:	7813      	ldrb	r3, [r2, #0]
   db2ec:	3301      	adds	r3, #1
   db2ee:	b2db      	uxtb	r3, r3
   db2f0:	f802 3901 	strb.w	r3, [r2], #-1
   db2f4:	2b00      	cmp	r3, #0
   db2f6:	d1a0      	bne.n	db23a <mbedtls_pkcs5_pbkdf2_hmac+0x2c>
        for( i = 4; i > 0; i-- )
   db2f8:	3901      	subs	r1, #1
   db2fa:	d1f6      	bne.n	db2ea <mbedtls_pkcs5_pbkdf2_hmac+0xdc>
   db2fc:	e79d      	b.n	db23a <mbedtls_pkcs5_pbkdf2_hmac+0x2c>
                break;
    }

    return( 0 );
   db2fe:	4630      	mov	r0, r6
}
   db300:	b023      	add	sp, #140	; 0x8c
   db302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000db308 <mbedtls_pkcs5_pbes2>:
{
   db308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db30c:	b0bb      	sub	sp, #236	; 0xec
   db30e:	461f      	mov	r7, r3
    int ret, iterations = 0, keylen = 0;
   db310:	2300      	movs	r3, #0
   db312:	e9cd 3306 	strd	r3, r3, [sp, #24]
{
   db316:	4616      	mov	r6, r2
    size_t olen = 0;
   db318:	9309      	str	r3, [sp, #36]	; 0x24
    end = p + pbe_params->len;
   db31a:	6842      	ldr	r2, [r0, #4]
    p = pbe_params->p;
   db31c:	6883      	ldr	r3, [r0, #8]
   db31e:	9308      	str	r3, [sp, #32]
    end = p + pbe_params->len;
   db320:	eb03 0802 	add.w	r8, r3, r2
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   db324:	6803      	ldr	r3, [r0, #0]
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
   db326:	2404      	movs	r4, #4
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   db328:	2b30      	cmp	r3, #48	; 0x30
{
   db32a:	460d      	mov	r5, r1
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
   db32c:	f88d 4016 	strb.w	r4, [sp, #22]
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   db330:	d11c      	bne.n	db36c <mbedtls_pkcs5_pbes2+0x64>
    if( ( ret = mbedtls_asn1_get_alg( &p, end, &kdf_alg_oid, &kdf_alg_params ) ) != 0 )
   db332:	ab10      	add	r3, sp, #64	; 0x40
   db334:	aa0a      	add	r2, sp, #40	; 0x28
   db336:	4641      	mov	r1, r8
   db338:	a808      	add	r0, sp, #32
   db33a:	f7fb f9f7 	bl	d672c <mbedtls_asn1_get_alg>
   db33e:	b110      	cbz	r0, db346 <mbedtls_pkcs5_pbes2+0x3e>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
   db340:	f5a0 543c 	sub.w	r4, r0, #12032	; 0x2f00
   db344:	e0c9      	b.n	db4da <mbedtls_pkcs5_pbes2+0x1d2>
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
   db346:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   db348:	2a09      	cmp	r2, #9
   db34a:	d001      	beq.n	db350 <mbedtls_pkcs5_pbes2+0x48>
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );
   db34c:	4c66      	ldr	r4, [pc, #408]	; (db4e8 <mbedtls_pkcs5_pbes2+0x1e0>)
   db34e:	e0c4      	b.n	db4da <mbedtls_pkcs5_pbes2+0x1d2>
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
   db350:	990c      	ldr	r1, [sp, #48]	; 0x30
   db352:	4866      	ldr	r0, [pc, #408]	; (db4ec <mbedtls_pkcs5_pbes2+0x1e4>)
   db354:	f00d fd3c 	bl	e8dd0 <memcmp>
   db358:	2800      	cmp	r0, #0
   db35a:	d1f7      	bne.n	db34c <mbedtls_pkcs5_pbes2+0x44>
    unsigned char *p = params->p;
   db35c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    const unsigned char *end = params->p + params->len;
   db35e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    unsigned char *p = params->p;
   db360:	9324      	str	r3, [sp, #144]	; 0x90
    const unsigned char *end = params->p + params->len;
   db362:	eb03 0902 	add.w	r9, r3, r2
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   db366:	9b10      	ldr	r3, [sp, #64]	; 0x40
   db368:	2b30      	cmp	r3, #48	; 0x30
   db36a:	d001      	beq.n	db370 <mbedtls_pkcs5_pbes2+0x68>
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   db36c:	4c60      	ldr	r4, [pc, #384]	; (db4f0 <mbedtls_pkcs5_pbes2+0x1e8>)
   db36e:	e0b4      	b.n	db4da <mbedtls_pkcs5_pbes2+0x1d2>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   db370:	4623      	mov	r3, r4
   db372:	aa17      	add	r2, sp, #92	; 0x5c
   db374:	4649      	mov	r1, r9
   db376:	a824      	add	r0, sp, #144	; 0x90
   db378:	f7fb f902 	bl	d6580 <mbedtls_asn1_get_tag>
   db37c:	2800      	cmp	r0, #0
   db37e:	d078      	beq.n	db472 <mbedtls_pkcs5_pbes2+0x16a>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
   db380:	f5a0 543c 	sub.w	r4, r0, #12032	; 0x2f00
    if( ( ret = pkcs5_parse_pbkdf2_params( &kdf_alg_params,
   db384:	2c00      	cmp	r4, #0
   db386:	f040 80a8 	bne.w	db4da <mbedtls_pkcs5_pbes2+0x1d2>
    md_info = mbedtls_md_info_from_type( md_type );
   db38a:	f89d 0016 	ldrb.w	r0, [sp, #22]
   db38e:	f001 fd69 	bl	dce64 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   db392:	4604      	mov	r4, r0
   db394:	2800      	cmp	r0, #0
   db396:	d0d9      	beq.n	db34c <mbedtls_pkcs5_pbes2+0x44>
    if( ( ret = mbedtls_asn1_get_alg( &p, end, &enc_scheme_oid,
   db398:	ab13      	add	r3, sp, #76	; 0x4c
   db39a:	aa0d      	add	r2, sp, #52	; 0x34
   db39c:	4641      	mov	r1, r8
   db39e:	a808      	add	r0, sp, #32
   db3a0:	f7fb f9c4 	bl	d672c <mbedtls_asn1_get_alg>
   db3a4:	2800      	cmp	r0, #0
   db3a6:	d1cb      	bne.n	db340 <mbedtls_pkcs5_pbes2+0x38>
    if( mbedtls_oid_get_cipher_alg( &enc_scheme_oid, &cipher_alg ) != 0 )
   db3a8:	f10d 0117 	add.w	r1, sp, #23
   db3ac:	a80d      	add	r0, sp, #52	; 0x34
   db3ae:	f7fe fe8b 	bl	da0c8 <mbedtls_oid_get_cipher_alg>
   db3b2:	2800      	cmp	r0, #0
   db3b4:	d1ca      	bne.n	db34c <mbedtls_pkcs5_pbes2+0x44>
    cipher_info = mbedtls_cipher_info_from_type( cipher_alg );
   db3b6:	f89d 0017 	ldrb.w	r0, [sp, #23]
   db3ba:	f7fa ff29 	bl	d6210 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
   db3be:	4680      	mov	r8, r0
   db3c0:	2800      	cmp	r0, #0
   db3c2:	d0c3      	beq.n	db34c <mbedtls_pkcs5_pbes2+0x44>
    keylen = cipher_info->key_bitlen / 8;
   db3c4:	6843      	ldr	r3, [r0, #4]
   db3c6:	08db      	lsrs	r3, r3, #3
   db3c8:	9307      	str	r3, [sp, #28]
    if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
   db3ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   db3cc:	2b04      	cmp	r3, #4
   db3ce:	f040 8088 	bne.w	db4e2 <mbedtls_pkcs5_pbes2+0x1da>
   db3d2:	68c3      	ldr	r3, [r0, #12]
   db3d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   db3d6:	429a      	cmp	r2, r3
   db3d8:	f040 8083 	bne.w	db4e2 <mbedtls_pkcs5_pbes2+0x1da>
    mbedtls_md_init( &md_ctx );
   db3dc:	a819      	add	r0, sp, #100	; 0x64
   db3de:	f001 fd4d 	bl	dce7c <mbedtls_md_init>
    mbedtls_cipher_init( &cipher_ctx );
   db3e2:	a82c      	add	r0, sp, #176	; 0xb0
   db3e4:	f7fa ff34 	bl	d6250 <mbedtls_cipher_init>
    memcpy( iv, enc_scheme_params.p, enc_scheme_params.len );
   db3e8:	e9dd 2114 	ldrd	r2, r1, [sp, #80]	; 0x50
   db3ec:	a824      	add	r0, sp, #144	; 0x90
   db3ee:	f00d fcfd 	bl	e8dec <memcpy>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
   db3f2:	4621      	mov	r1, r4
   db3f4:	2201      	movs	r2, #1
   db3f6:	a819      	add	r0, sp, #100	; 0x64
   db3f8:	f001 fd60 	bl	dcebc <mbedtls_md_setup>
   db3fc:	4604      	mov	r4, r0
   db3fe:	2800      	cmp	r0, #0
   db400:	d130      	bne.n	db464 <mbedtls_pkcs5_pbes2+0x15c>
    if( ( ret = mbedtls_pkcs5_pbkdf2_hmac( &md_ctx, pwd, pwdlen, salt.p, salt.len,
   db402:	9b07      	ldr	r3, [sp, #28]
   db404:	9302      	str	r3, [sp, #8]
   db406:	9b06      	ldr	r3, [sp, #24]
   db408:	9301      	str	r3, [sp, #4]
   db40a:	f10d 0970 	add.w	r9, sp, #112	; 0x70
   db40e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   db410:	9300      	str	r3, [sp, #0]
   db412:	f8cd 900c 	str.w	r9, [sp, #12]
   db416:	9b18      	ldr	r3, [sp, #96]	; 0x60
   db418:	463a      	mov	r2, r7
   db41a:	4631      	mov	r1, r6
   db41c:	a819      	add	r0, sp, #100	; 0x64
   db41e:	f7ff fef6 	bl	db20e <mbedtls_pkcs5_pbkdf2_hmac>
   db422:	4604      	mov	r4, r0
   db424:	b9f0      	cbnz	r0, db464 <mbedtls_pkcs5_pbes2+0x15c>
    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
   db426:	4641      	mov	r1, r8
   db428:	a82c      	add	r0, sp, #176	; 0xb0
   db42a:	f7fa ff25 	bl	d6278 <mbedtls_cipher_setup>
   db42e:	4604      	mov	r4, r0
   db430:	b9c0      	cbnz	r0, db464 <mbedtls_pkcs5_pbes2+0x15c>
    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
   db432:	9a07      	ldr	r2, [sp, #28]
   db434:	b26b      	sxtb	r3, r5
   db436:	00d2      	lsls	r2, r2, #3
   db438:	4649      	mov	r1, r9
   db43a:	a82c      	add	r0, sp, #176	; 0xb0
   db43c:	f7fa ff34 	bl	d62a8 <mbedtls_cipher_setkey>
   db440:	4604      	mov	r4, r0
   db442:	b978      	cbnz	r0, db464 <mbedtls_pkcs5_pbes2+0x15c>
    if( ( ret = mbedtls_cipher_crypt( &cipher_ctx, iv, enc_scheme_params.len,
   db444:	ab09      	add	r3, sp, #36	; 0x24
   db446:	9302      	str	r3, [sp, #8]
   db448:	9b44      	ldr	r3, [sp, #272]	; 0x110
   db44a:	9301      	str	r3, [sp, #4]
   db44c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   db44e:	9300      	str	r3, [sp, #0]
   db450:	9a14      	ldr	r2, [sp, #80]	; 0x50
   db452:	9b42      	ldr	r3, [sp, #264]	; 0x108
   db454:	a924      	add	r1, sp, #144	; 0x90
   db456:	a82c      	add	r0, sp, #176	; 0xb0
   db458:	f7fa ffd4 	bl	d6404 <mbedtls_cipher_crypt>
        ret = MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH;
   db45c:	4b25      	ldr	r3, [pc, #148]	; (db4f4 <mbedtls_pkcs5_pbes2+0x1ec>)
   db45e:	1e04      	subs	r4, r0, #0
   db460:	bf18      	it	ne
   db462:	461c      	movne	r4, r3
    mbedtls_md_free( &md_ctx );
   db464:	a819      	add	r0, sp, #100	; 0x64
   db466:	f001 fd0e 	bl	dce86 <mbedtls_md_free>
    mbedtls_cipher_free( &cipher_ctx );
   db46a:	a82c      	add	r0, sp, #176	; 0xb0
   db46c:	f7fa fef4 	bl	d6258 <mbedtls_cipher_free>
    return( ret );
   db470:	e033      	b.n	db4da <mbedtls_pkcs5_pbes2+0x1d2>
    salt->p = p;
   db472:	9b24      	ldr	r3, [sp, #144]	; 0x90
    p += salt->len;
   db474:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    salt->p = p;
   db476:	9318      	str	r3, [sp, #96]	; 0x60
    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
   db478:	4649      	mov	r1, r9
    p += salt->len;
   db47a:	4413      	add	r3, r2
    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
   db47c:	a824      	add	r0, sp, #144	; 0x90
   db47e:	aa06      	add	r2, sp, #24
    p += salt->len;
   db480:	9324      	str	r3, [sp, #144]	; 0x90
    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
   db482:	f7fb f8aa 	bl	d65da <mbedtls_asn1_get_int>
   db486:	2800      	cmp	r0, #0
   db488:	f47f af7a 	bne.w	db380 <mbedtls_pkcs5_pbes2+0x78>
    if( p == end )
   db48c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   db48e:	4599      	cmp	r9, r3
   db490:	f43f af7b 	beq.w	db38a <mbedtls_pkcs5_pbes2+0x82>
    if( ( ret = mbedtls_asn1_get_int( &p, end, keylen ) ) != 0 )
   db494:	aa07      	add	r2, sp, #28
   db496:	4649      	mov	r1, r9
   db498:	a824      	add	r0, sp, #144	; 0x90
   db49a:	f7fb f89e 	bl	d65da <mbedtls_asn1_get_int>
   db49e:	b118      	cbz	r0, db4a8 <mbedtls_pkcs5_pbes2+0x1a0>
        if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   db4a0:	f110 0f62 	cmn.w	r0, #98	; 0x62
   db4a4:	f47f af6c 	bne.w	db380 <mbedtls_pkcs5_pbes2+0x78>
    if( p == end )
   db4a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   db4aa:	4599      	cmp	r9, r3
   db4ac:	f43f af6d 	beq.w	db38a <mbedtls_pkcs5_pbes2+0x82>
    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
   db4b0:	aa2c      	add	r2, sp, #176	; 0xb0
   db4b2:	4649      	mov	r1, r9
   db4b4:	a824      	add	r0, sp, #144	; 0x90
   db4b6:	f7fb f984 	bl	d67c2 <mbedtls_asn1_get_alg_null>
   db4ba:	2800      	cmp	r0, #0
   db4bc:	f47f af60 	bne.w	db380 <mbedtls_pkcs5_pbes2+0x78>
    if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
   db4c0:	f10d 0116 	add.w	r1, sp, #22
   db4c4:	a82c      	add	r0, sp, #176	; 0xb0
   db4c6:	f7fe fe47 	bl	da158 <mbedtls_oid_get_md_hmac>
   db4ca:	2800      	cmp	r0, #0
   db4cc:	f47f af3e 	bne.w	db34c <mbedtls_pkcs5_pbes2+0x44>
    if( p != end )
   db4d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   db4d2:	4599      	cmp	r9, r3
   db4d4:	f43f af59 	beq.w	db38a <mbedtls_pkcs5_pbes2+0x82>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   db4d8:	4c07      	ldr	r4, [pc, #28]	; (db4f8 <mbedtls_pkcs5_pbes2+0x1f0>)
}
   db4da:	4620      	mov	r0, r4
   db4dc:	b03b      	add	sp, #236	; 0xec
   db4de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
   db4e2:	4c06      	ldr	r4, [pc, #24]	; (db4fc <mbedtls_pkcs5_pbes2+0x1f4>)
   db4e4:	e7f9      	b.n	db4da <mbedtls_pkcs5_pbes2+0x1d2>
   db4e6:	bf00      	nop
   db4e8:	ffffd180 	.word	0xffffd180
   db4ec:	000ec7e0 	.word	0x000ec7e0
   db4f0:	ffffd09e 	.word	0xffffd09e
   db4f4:	ffffd200 	.word	0xffffd200
   db4f8:	ffffd09a 	.word	0xffffd09a
   db4fc:	ffffd100 	.word	0xffffd100

000db500 <_ZL12gcm_ctx_freePv>:

    return( ctx );
}

static void gcm_ctx_free( void *ctx )
{
   db500:	b510      	push	{r4, lr}
   db502:	4604      	mov	r4, r0
    mbedtls_gcm_free( (mbedtls_gcm_context *)ctx );
   db504:	f001 fc03 	bl	dcd0e <mbedtls_gcm_free>
    mbedtls_free( ctx );
   db508:	4620      	mov	r0, r4
}
   db50a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
   db50e:	f00a ba4b 	b.w	e59a8 <free>

000db512 <_ZL13gcm_ctx_allocv>:
{
   db512:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
   db514:	f44f 71c0 	mov.w	r1, #384	; 0x180
   db518:	2001      	movs	r0, #1
   db51a:	f00d fbef 	bl	e8cfc <calloc>
    if( ctx != NULL )
   db51e:	4604      	mov	r4, r0
   db520:	b108      	cbz	r0, db526 <_ZL13gcm_ctx_allocv+0x14>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
   db522:	f001 f979 	bl	dc818 <mbedtls_gcm_init>
}
   db526:	4620      	mov	r0, r4
   db528:	bd10      	pop	{r4, pc}

000db52a <_ZL19gcm_aes_setkey_wrapPvPKhj>:
#endif /* MBEDTLS_CIPHER_MODE_XTS */

#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
   db52a:	4613      	mov	r3, r2
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
   db52c:	460a      	mov	r2, r1
   db52e:	2102      	movs	r1, #2
   db530:	f001 b977 	b.w	dc822 <mbedtls_gcm_setkey>

000db534 <_ZL12aes_ctx_freePv>:
{
   db534:	b510      	push	{r4, lr}
   db536:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
   db538:	f006 feff 	bl	e233a <mbedtls_aes_free>
    mbedtls_free( ctx );
   db53c:	4620      	mov	r0, r4
}
   db53e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
   db542:	f00a ba31 	b.w	e59a8 <free>

000db546 <_ZL13aes_ctx_allocv>:
{
   db546:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = (mbedtls_aes_context *)mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
   db548:	f44f 718c 	mov.w	r1, #280	; 0x118
   db54c:	2001      	movs	r0, #1
   db54e:	f00d fbd5 	bl	e8cfc <calloc>
    if( aes == NULL )
   db552:	4604      	mov	r4, r0
   db554:	b108      	cbz	r0, db55a <_ZL13aes_ctx_allocv+0x14>
    mbedtls_aes_init( aes );
   db556:	f006 feeb 	bl	e2330 <mbedtls_aes_init>
}
   db55a:	4620      	mov	r0, r4
   db55c:	bd10      	pop	{r4, pc}

000db55e <_ZL19aes_setkey_dec_wrapPvPKhj>:
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
   db55e:	f006 bfd9 	b.w	e2514 <mbedtls_aes_setkey_dec>

000db562 <_ZL19aes_setkey_enc_wrapPvPKhj>:
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
   db562:	f006 bef1 	b.w	e2348 <mbedtls_aes_setkey_enc>

000db566 <_ZL18aes_crypt_ecb_wrapPv19mbedtls_operation_tPKhPh>:
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
   db566:	f007 bb1f 	b.w	e2ba8 <mbedtls_aes_crypt_ecb>

000db56a <_ZL10rsa_can_do17mbedtls_pk_type_t>:
#include <stdint.h>

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_RSA ||
   db56a:	2801      	cmp	r0, #1
   db56c:	d002      	beq.n	db574 <_ZL10rsa_can_do17mbedtls_pk_type_t+0xa>
   db56e:	1f83      	subs	r3, r0, #6
   db570:	4258      	negs	r0, r3
   db572:	4158      	adcs	r0, r3
            type == MBEDTLS_PK_RSASSA_PSS );
}
   db574:	4770      	bx	lr
	...

000db578 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item>:
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
   db578:	2301      	movs	r3, #1
    items->name = "rsa.N";
   db57a:	4a06      	ldr	r2, [pc, #24]	; (db594 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x1c>)
    items->type = MBEDTLS_PK_DEBUG_MPI;
   db57c:	700b      	strb	r3, [r1, #0]
    items->name = "rsa.N";
   db57e:	604a      	str	r2, [r1, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
   db580:	730b      	strb	r3, [r1, #12]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
   db582:	f100 0208 	add.w	r2, r0, #8
    items->name = "rsa.E";
   db586:	4b04      	ldr	r3, [pc, #16]	; (db598 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x20>)
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
   db588:	608a      	str	r2, [r1, #8]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
   db58a:	3014      	adds	r0, #20
    items->name = "rsa.E";
   db58c:	610b      	str	r3, [r1, #16]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
   db58e:	6148      	str	r0, [r1, #20]
}
   db590:	4770      	bx	lr
   db592:	bf00      	nop
   db594:	000ec944 	.word	0x000ec944
   db598:	000ec94a 	.word	0x000ec94a

000db59c <_ZL12eckey_can_do17mbedtls_pk_type_t>:
 * Generic EC key
 */
static int eckey_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
            type == MBEDTLS_PK_ECKEY_DH ||
   db59c:	3802      	subs	r0, #2
            type == MBEDTLS_PK_ECDSA );
}
   db59e:	2802      	cmp	r0, #2
   db5a0:	bf8c      	ite	hi
   db5a2:	2000      	movhi	r0, #0
   db5a4:	2001      	movls	r0, #1
   db5a6:	4770      	bx	lr

000db5a8 <_ZL16eckey_get_bitlenPKv>:

static size_t eckey_get_bitlen( const void *ctx )
{
    return( ((mbedtls_ecp_keypair *) ctx)->grp.pbits );
}
   db5a8:	6d80      	ldr	r0, [r0, #88]	; 0x58
   db5aa:	4770      	bx	lr

000db5ac <_ZL11eckey_debugPKvP21mbedtls_pk_debug_item>:
    mbedtls_free( ctx );
}

static void eckey_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_ECP;
   db5ac:	2302      	movs	r3, #2
   db5ae:	700b      	strb	r3, [r1, #0]
    items->name = "eckey.Q";
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
   db5b0:	3088      	adds	r0, #136	; 0x88
    items->name = "eckey.Q";
   db5b2:	4b02      	ldr	r3, [pc, #8]	; (db5bc <_ZL11eckey_debugPKvP21mbedtls_pk_debug_item+0x10>)
   db5b4:	604b      	str	r3, [r1, #4]
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
   db5b6:	6088      	str	r0, [r1, #8]
}
   db5b8:	4770      	bx	lr
   db5ba:	bf00      	nop
   db5bc:	000ec950 	.word	0x000ec950

000db5c0 <_ZL14eckeydh_can_do17mbedtls_pk_type_t>:
/*
 * EC key restricted to ECDH
 */
static int eckeydh_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
   db5c0:	3802      	subs	r0, #2
            type == MBEDTLS_PK_ECKEY_DH );
}
   db5c2:	2801      	cmp	r0, #1
   db5c4:	bf8c      	ite	hi
   db5c6:	2000      	movhi	r0, #0
   db5c8:	2001      	movls	r0, #1
   db5ca:	4770      	bx	lr

000db5cc <_ZL12ecdsa_can_do17mbedtls_pk_type_t>:

#if defined(MBEDTLS_ECDSA_C)
static int ecdsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECDSA );
}
   db5cc:	1f03      	subs	r3, r0, #4
   db5ce:	4258      	negs	r0, r3
   db5d0:	4158      	adcs	r0, r3
   db5d2:	4770      	bx	lr

000db5d4 <_ZL13rsa_free_wrapPv>:
{
   db5d4:	b510      	push	{r4, lr}
   db5d6:	4604      	mov	r4, r0
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
   db5d8:	f7fc ffe0 	bl	d859c <mbedtls_rsa_free>
    mbedtls_free( ctx );
   db5dc:	4620      	mov	r0, r4
}
   db5de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
   db5e2:	f00a b9e1 	b.w	e59a8 <free>

000db5e6 <_ZL14rsa_alloc_wrapv>:
{
   db5e6:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
   db5e8:	21ac      	movs	r1, #172	; 0xac
   db5ea:	2001      	movs	r0, #1
   db5ec:	f00d fb86 	bl	e8cfc <calloc>
    if( ctx != NULL )
   db5f0:	4604      	mov	r4, r0
   db5f2:	b118      	cbz	r0, db5fc <_ZL14rsa_alloc_wrapv+0x16>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
   db5f4:	2200      	movs	r2, #0
   db5f6:	4611      	mov	r1, r2
   db5f8:	f7fb ffaa 	bl	d7550 <mbedtls_rsa_init>
}
   db5fc:	4620      	mov	r0, r4
   db5fe:	bd10      	pop	{r4, pc}

000db600 <_ZL19rsa_check_pair_wrapPKvS0_>:
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
   db600:	f7fc b80a 	b.w	d7618 <mbedtls_rsa_check_pub_priv>

000db604 <_ZL14rsa_get_bitlenPKv>:
{
   db604:	b508      	push	{r3, lr}
    return( 8 * mbedtls_rsa_get_len( rsa ) );
   db606:	f7fb ffae 	bl	d7566 <mbedtls_rsa_get_len>
}
   db60a:	00c0      	lsls	r0, r0, #3
   db60c:	bd08      	pop	{r3, pc}
	...

000db610 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:
{
   db610:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   db614:	460e      	mov	r6, r1
   db616:	4615      	mov	r5, r2
   db618:	990c      	ldr	r1, [sp, #48]	; 0x30
   db61a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   db61c:	9101      	str	r1, [sp, #4]
   db61e:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
   db622:	4604      	mov	r4, r0
   db624:	461f      	mov	r7, r3
   db626:	9200      	str	r2, [sp, #0]
    *olen = mbedtls_rsa_get_len( rsa );
   db628:	f7fb ff9d 	bl	d7566 <mbedtls_rsa_get_len>
    if( *olen > osize )
   db62c:	4540      	cmp	r0, r8
    *olen = mbedtls_rsa_get_len( rsa );
   db62e:	f8c9 0000 	str.w	r0, [r9]
    if( *olen > osize )
   db632:	d80b      	bhi.n	db64c <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x3c>
    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
   db634:	e9dd 2100 	ldrd	r2, r1, [sp]
   db638:	2300      	movs	r3, #0
   db63a:	4620      	mov	r0, r4
   db63c:	e9cd 670b 	strd	r6, r7, [sp, #44]	; 0x2c
   db640:	950a      	str	r5, [sp, #40]	; 0x28
}
   db642:	b003      	add	sp, #12
   db644:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
   db648:	f7fc bb06 	b.w	d7c58 <mbedtls_rsa_pkcs1_encrypt>
}
   db64c:	4801      	ldr	r0, [pc, #4]	; (db654 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x44>)
   db64e:	b003      	add	sp, #12
   db650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db654:	ffffbc00 	.word	0xffffbc00

000db658 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:
{
   db658:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   db65c:	4617      	mov	r7, r2
   db65e:	460d      	mov	r5, r1
   db660:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   db662:	990c      	ldr	r1, [sp, #48]	; 0x30
   db664:	9101      	str	r1, [sp, #4]
   db666:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   db66a:	4604      	mov	r4, r0
   db66c:	461e      	mov	r6, r3
   db66e:	9200      	str	r2, [sp, #0]
    if( ilen != mbedtls_rsa_get_len( rsa ) )
   db670:	f7fb ff79 	bl	d7566 <mbedtls_rsa_get_len>
   db674:	42b8      	cmp	r0, r7
   db676:	d10c      	bne.n	db692 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x3a>
    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
   db678:	e9dd 2100 	ldrd	r2, r1, [sp]
   db67c:	2301      	movs	r3, #1
   db67e:	4620      	mov	r0, r4
   db680:	e9cd 690c 	strd	r6, r9, [sp, #48]	; 0x30
   db684:	e9cd 850a 	strd	r8, r5, [sp, #40]	; 0x28
}
   db688:	b003      	add	sp, #12
   db68a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
   db68e:	f7fc bc9d 	b.w	d7fcc <mbedtls_rsa_pkcs1_decrypt>
}
   db692:	4802      	ldr	r0, [pc, #8]	; (db69c <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x44>)
   db694:	b003      	add	sp, #12
   db696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db69a:	bf00      	nop
   db69c:	ffffbf80 	.word	0xffffbf80

000db6a0 <_ZL13rsa_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_>:
{
   db6a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   db6a4:	460d      	mov	r5, r1
   db6a6:	4617      	mov	r7, r2
   db6a8:	990c      	ldr	r1, [sp, #48]	; 0x30
   db6aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   db6ac:	9101      	str	r1, [sp, #4]
   db6ae:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   db6b2:	461e      	mov	r6, r3
   db6b4:	4604      	mov	r4, r0
   db6b6:	9200      	str	r2, [sp, #0]
    *sig_len = mbedtls_rsa_get_len( rsa );
   db6b8:	f7fb ff55 	bl	d7566 <mbedtls_rsa_get_len>
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
   db6bc:	e9dd 2100 	ldrd	r2, r1, [sp]
    *sig_len = mbedtls_rsa_get_len( rsa );
   db6c0:	f8c9 0000 	str.w	r0, [r9]
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
   db6c4:	2301      	movs	r3, #1
   db6c6:	4620      	mov	r0, r4
   db6c8:	e9cd 780c 	strd	r7, r8, [sp, #48]	; 0x30
   db6cc:	e9cd 560a 	strd	r5, r6, [sp, #40]	; 0x28
}
   db6d0:	b003      	add	sp, #12
   db6d2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
   db6d6:	f7fc bddf 	b.w	d8298 <mbedtls_rsa_pkcs1_sign>
	...

000db6dc <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>:
{
   db6dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db6e0:	b085      	sub	sp, #20
   db6e2:	4605      	mov	r5, r0
   db6e4:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   db6e8:	460e      	mov	r6, r1
   db6ea:	4690      	mov	r8, r2
   db6ec:	461f      	mov	r7, r3
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
   db6ee:	f7fb ff3a 	bl	d7566 <mbedtls_rsa_get_len>
    if( sig_len < rsa_len )
   db6f2:	4548      	cmp	r0, r9
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
   db6f4:	4604      	mov	r4, r0
    if( sig_len < rsa_len )
   db6f6:	d812      	bhi.n	db71e <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x42>
    if( ( ret = mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL,
   db6f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   db6fa:	e9cd 8302 	strd	r8, r3, [sp, #8]
   db6fe:	2300      	movs	r3, #0
   db700:	e9cd 6700 	strd	r6, r7, [sp]
   db704:	461a      	mov	r2, r3
   db706:	4619      	mov	r1, r3
   db708:	4628      	mov	r0, r5
   db70a:	f7fc ff31 	bl	d8570 <mbedtls_rsa_pkcs1_verify>
   db70e:	b918      	cbnz	r0, db718 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3c>
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
   db710:	4b04      	ldr	r3, [pc, #16]	; (db724 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x48>)
   db712:	454c      	cmp	r4, r9
   db714:	bf38      	it	cc
   db716:	4618      	movcc	r0, r3
}
   db718:	b005      	add	sp, #20
   db71a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
   db71e:	4802      	ldr	r0, [pc, #8]	; (db728 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x4c>)
   db720:	e7fa      	b.n	db718 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3c>
   db722:	bf00      	nop
   db724:	ffffc700 	.word	0xffffc700
   db728:	ffffbc80 	.word	0xffffbc80

000db72c <_ZL15eckey_free_wrapPv>:
{
   db72c:	b510      	push	{r4, lr}
   db72e:	4604      	mov	r4, r0
    mbedtls_ecp_keypair_free( (mbedtls_ecp_keypair *) ctx );
   db730:	f7fd fc5f 	bl	d8ff2 <mbedtls_ecp_keypair_free>
    mbedtls_free( ctx );
   db734:	4620      	mov	r0, r4
}
   db736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
   db73a:	f00a b935 	b.w	e59a8 <free>

000db73e <_ZL16eckey_alloc_wrapv>:
{
   db73e:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );
   db740:	21ac      	movs	r1, #172	; 0xac
   db742:	2001      	movs	r0, #1
   db744:	f00d fada 	bl	e8cfc <calloc>
    if( ctx != NULL )
   db748:	4604      	mov	r4, r0
   db74a:	b108      	cbz	r0, db750 <_ZL16eckey_alloc_wrapv+0x12>
        mbedtls_ecp_keypair_init( (mbedtls_ecp_keypair *)ctx );
   db74c:	f7fd fc0f 	bl	d8f6e <mbedtls_ecp_keypair_init>
}
   db750:	4620      	mov	r0, r4
   db752:	bd10      	pop	{r4, pc}

000db754 <_ZL16eckey_check_pairPKvS0_>:
    return( mbedtls_ecp_check_pub_priv( (const mbedtls_ecp_keypair *) pub,
   db754:	f7fe bbaa 	b.w	d9eac <mbedtls_ecp_check_pub_priv>

000db758 <_ZL16ecdsa_alloc_wrapv>:

}
#endif /* MBEDTLS_ECP_RESTARTABLE */

static void *ecdsa_alloc_wrap( void )
{
   db758:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecdsa_context ) );
   db75a:	21ac      	movs	r1, #172	; 0xac
   db75c:	2001      	movs	r0, #1
   db75e:	f00d facd 	bl	e8cfc <calloc>

    if( ctx != NULL )
   db762:	4604      	mov	r4, r0
   db764:	b108      	cbz	r0, db76a <_ZL16ecdsa_alloc_wrapv+0x12>
        mbedtls_ecdsa_init( (mbedtls_ecdsa_context *) ctx );
   db766:	f000 faba 	bl	dbcde <mbedtls_ecdsa_init>

    return( ctx );
}
   db76a:	4620      	mov	r0, r4
   db76c:	bd10      	pop	{r4, pc}

000db76e <_ZL15ecdsa_free_wrapPv>:

static void ecdsa_free_wrap( void *ctx )
{
   db76e:	b510      	push	{r4, lr}
   db770:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( (mbedtls_ecdsa_context *) ctx );
   db772:	f000 fab6 	bl	dbce2 <mbedtls_ecdsa_free>
    mbedtls_free( ctx );
   db776:	4620      	mov	r0, r4
}
   db778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
   db77c:	f00a b914 	b.w	e59a8 <free>

000db780 <_ZL15ecdsa_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_>:
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
   db780:	f000 ba44 	b.w	dbc0c <mbedtls_ecdsa_write_signature>

000db784 <_ZL15eckey_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_>:
{
   db784:	b530      	push	{r4, r5, lr}
   db786:	b0b3      	sub	sp, #204	; 0xcc
   db788:	4604      	mov	r4, r0
    mbedtls_ecdsa_init( &ecdsa );
   db78a:	a807      	add	r0, sp, #28
{
   db78c:	e9cd 3204 	strd	r3, r2, [sp, #16]
   db790:	460d      	mov	r5, r1
    mbedtls_ecdsa_init( &ecdsa );
   db792:	f000 faa4 	bl	dbcde <mbedtls_ecdsa_init>
    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, (const mbedtls_ecp_keypair *)ctx ) ) == 0 )
   db796:	4621      	mov	r1, r4
   db798:	a807      	add	r0, sp, #28
   db79a:	f000 faa6 	bl	dbcea <mbedtls_ecdsa_from_keypair>
   db79e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   db7a2:	4604      	mov	r4, r0
   db7a4:	b960      	cbnz	r0, db7c0 <_ZL15eckey_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_+0x3c>
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
   db7a6:	9939      	ldr	r1, [sp, #228]	; 0xe4
   db7a8:	9103      	str	r1, [sp, #12]
   db7aa:	9938      	ldr	r1, [sp, #224]	; 0xe0
   db7ac:	9102      	str	r1, [sp, #8]
   db7ae:	9937      	ldr	r1, [sp, #220]	; 0xdc
   db7b0:	9101      	str	r1, [sp, #4]
   db7b2:	9936      	ldr	r1, [sp, #216]	; 0xd8
   db7b4:	9100      	str	r1, [sp, #0]
   db7b6:	a807      	add	r0, sp, #28
   db7b8:	4629      	mov	r1, r5
   db7ba:	f000 fa27 	bl	dbc0c <mbedtls_ecdsa_write_signature>
   db7be:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( &ecdsa );
   db7c0:	a807      	add	r0, sp, #28
   db7c2:	f000 fa8e 	bl	dbce2 <mbedtls_ecdsa_free>
}
   db7c6:	4620      	mov	r0, r4
   db7c8:	b033      	add	sp, #204	; 0xcc
   db7ca:	bd30      	pop	{r4, r5, pc}

000db7cc <_ZL17ecdsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>:
{
   db7cc:	b507      	push	{r0, r1, r2, lr}
   db7ce:	4611      	mov	r1, r2
   db7d0:	461a      	mov	r2, r3
    ret = mbedtls_ecdsa_read_signature( (mbedtls_ecdsa_context *) ctx,
   db7d2:	9b05      	ldr	r3, [sp, #20]
   db7d4:	9300      	str	r3, [sp, #0]
   db7d6:	9b04      	ldr	r3, [sp, #16]
   db7d8:	f000 fa78 	bl	dbccc <mbedtls_ecdsa_read_signature>
    if( ret == MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH )
   db7dc:	f510 4f98 	cmn.w	r0, #19456	; 0x4c00
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
   db7e0:	bf08      	it	eq
   db7e2:	f500 5098 	addeq.w	r0, r0, #4864	; 0x1300
}
   db7e6:	b003      	add	sp, #12
   db7e8:	f85d fb04 	ldr.w	pc, [sp], #4

000db7ec <_ZL17eckey_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>:
{
   db7ec:	b530      	push	{r4, r5, lr}
   db7ee:	b0b1      	sub	sp, #196	; 0xc4
   db7f0:	4604      	mov	r4, r0
    mbedtls_ecdsa_init( &ecdsa );
   db7f2:	a805      	add	r0, sp, #20
{
   db7f4:	e9cd 3202 	strd	r3, r2, [sp, #8]
   db7f8:	460d      	mov	r5, r1
    mbedtls_ecdsa_init( &ecdsa );
   db7fa:	f000 fa70 	bl	dbcde <mbedtls_ecdsa_init>
    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, (const mbedtls_ecp_keypair *)ctx ) ) == 0 )
   db7fe:	4621      	mov	r1, r4
   db800:	a805      	add	r0, sp, #20
   db802:	f000 fa72 	bl	dbcea <mbedtls_ecdsa_from_keypair>
   db806:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   db80a:	4604      	mov	r4, r0
   db80c:	b940      	cbnz	r0, db820 <_ZL17eckey_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x34>
        ret = ecdsa_verify_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len );
   db80e:	9935      	ldr	r1, [sp, #212]	; 0xd4
   db810:	9101      	str	r1, [sp, #4]
   db812:	9934      	ldr	r1, [sp, #208]	; 0xd0
   db814:	9100      	str	r1, [sp, #0]
   db816:	a805      	add	r0, sp, #20
   db818:	4629      	mov	r1, r5
   db81a:	f7ff ffd7 	bl	db7cc <_ZL17ecdsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>
   db81e:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( &ecdsa );
   db820:	a805      	add	r0, sp, #20
   db822:	f000 fa5e 	bl	dbce2 <mbedtls_ecdsa_free>
}
   db826:	4620      	mov	r0, r4
   db828:	b031      	add	sp, #196	; 0xc4
   db82a:	bd30      	pop	{r4, r5, pc}

000db82c <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj>:
 * Derive a suitable integer for group grp from a buffer of length len
 * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3
 */
static int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,
                       const unsigned char *buf, size_t blen )
{
   db82c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int ret;
    size_t n_size = ( grp->nbits + 7 ) / 8;
   db82e:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
   db830:	3507      	adds	r5, #7
   db832:	08ed      	lsrs	r5, r5, #3
   db834:	429d      	cmp	r5, r3
   db836:	462c      	mov	r4, r5
{
   db838:	460f      	mov	r7, r1
   db83a:	bf28      	it	cs
   db83c:	461c      	movcs	r4, r3
   db83e:	4611      	mov	r1, r2
   db840:	4606      	mov	r6, r0
    size_t use_size = blen > n_size ? n_size : blen;

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
   db842:	4622      	mov	r2, r4
   db844:	4638      	mov	r0, r7
   db846:	f005 facc 	bl	e0de2 <mbedtls_mpi_read_binary>
   db84a:	4605      	mov	r5, r0
   db84c:	b9e8      	cbnz	r0, db88a <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj+0x5e>
    if( use_size * 8 > grp->nbits )
   db84e:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   db850:	ebb3 0fc4 	cmp.w	r3, r4, lsl #3
   db854:	ea4f 01c4 	mov.w	r1, r4, lsl #3
   db858:	d310      	bcc.n	db87c <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj+0x50>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );

    /* While at it, reduce modulo N */
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
   db85a:	f106 024c 	add.w	r2, r6, #76	; 0x4c
   db85e:	4611      	mov	r1, r2
   db860:	4638      	mov	r0, r7
   db862:	9201      	str	r2, [sp, #4]
   db864:	f005 fc58 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   db868:	2800      	cmp	r0, #0
   db86a:	db0e      	blt.n	db88a <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj+0x5e>
   db86c:	9a01      	ldr	r2, [sp, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
   db86e:	4639      	mov	r1, r7
   db870:	4638      	mov	r0, r7

cleanup:
    return( ret );
}
   db872:	b003      	add	sp, #12
   db874:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
   db878:	f005 bd5c 	b.w	e1334 <mbedtls_mpi_sub_mpi>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );
   db87c:	1ac9      	subs	r1, r1, r3
   db87e:	4638      	mov	r0, r7
   db880:	f005 fb70 	bl	e0f64 <mbedtls_mpi_shift_r>
   db884:	2800      	cmp	r0, #0
   db886:	d0e8      	beq.n	db85a <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj+0x2e>
   db888:	4605      	mov	r5, r0
}
   db88a:	4628      	mov	r0, r5
   db88c:	b003      	add	sp, #12
   db88e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000db890 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0>:
#if !defined(MBEDTLS_ECDSA_SIGN_ALT)
/*
 * Compute ECDSA signature of a hashed message (SEC1 4.1.3)
 * Obviously, compared to SEC1 4.1.3, we skip step 4 (hash message)
 */
static int ecdsa_sign_restartable( mbedtls_ecp_group *grp,
   db890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db894:	ed2d 8b02 	vpush	{d8}
   db898:	4698      	mov	r8, r3
    mbedtls_ecp_point R;
    mbedtls_mpi k, e, t;
    mbedtls_mpi *pk = &k, *pr = r;

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
   db89a:	6d43      	ldr	r3, [r0, #84]	; 0x54
static int ecdsa_sign_restartable( mbedtls_ecp_group *grp,
   db89c:	b09b      	sub	sp, #108	; 0x6c
   db89e:	4605      	mov	r5, r0
   db8a0:	460f      	mov	r7, r1
   db8a2:	4614      	mov	r4, r2
    if( grp->N.p == NULL )
   db8a4:	2b00      	cmp	r3, #0
   db8a6:	f000 80b9 	beq.w	dba1c <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x18c>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /* Make sure d is in range 1..n-1 */
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
   db8aa:	2101      	movs	r1, #1
   db8ac:	4640      	mov	r0, r8
   db8ae:	f005 fc74 	bl	e119a <mbedtls_mpi_cmp_int>
   db8b2:	2800      	cmp	r0, #0
   db8b4:	da06      	bge.n	db8c4 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x34>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
   db8b6:	495a      	ldr	r1, [pc, #360]	; (dba20 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x190>)
    mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );

    ECDSA_RS_LEAVE( sig );

    return( ret );
}
   db8b8:	4608      	mov	r0, r1
   db8ba:	b01b      	add	sp, #108	; 0x6c
   db8bc:	ecbd 8b02 	vpop	{d8}
   db8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
   db8c4:	f105 094c 	add.w	r9, r5, #76	; 0x4c
   db8c8:	4649      	mov	r1, r9
   db8ca:	4640      	mov	r0, r8
   db8cc:	f005 fc24 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   db8d0:	2800      	cmp	r0, #0
   db8d2:	daf0      	bge.n	db8b6 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x26>
    mbedtls_ecp_point_init( &R );
   db8d4:	a811      	add	r0, sp, #68	; 0x44
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
   db8d6:	ae08      	add	r6, sp, #32
    mbedtls_ecp_point_init( &R );
   db8d8:	f7fd fb1a 	bl	d8f10 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
   db8dc:	4630      	mov	r0, r6
   db8de:	f005 f93c 	bl	e0b5a <mbedtls_mpi_init>
   db8e2:	a80b      	add	r0, sp, #44	; 0x2c
   db8e4:	f005 f939 	bl	e0b5a <mbedtls_mpi_init>
   db8e8:	a80e      	add	r0, sp, #56	; 0x38
   db8ea:	f005 f936 	bl	e0b5a <mbedtls_mpi_init>
    *p_sign_tries = 0;
   db8ee:	2300      	movs	r3, #0
   db8f0:	9307      	str	r3, [sp, #28]
    int *p_sign_tries = &sign_tries, *p_key_tries = &key_tries;
   db8f2:	f10d 0a18 	add.w	sl, sp, #24
   db8f6:	f10d 0b1c 	add.w	fp, sp, #28
        *p_key_tries = 0;
   db8fa:	9304      	str	r3, [sp, #16]
        if( *p_sign_tries++ > 10 )
   db8fc:	f85b 3b04 	ldr.w	r3, [fp], #4
   db900:	2b0a      	cmp	r3, #10
   db902:	f300 8089 	bgt.w	dba18 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x188>
        *p_key_tries = 0;
   db906:	9b04      	ldr	r3, [sp, #16]
   db908:	f8ca 3000 	str.w	r3, [sl]
            MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &R, pk, &grp->G,
   db90c:	f105 0328 	add.w	r3, r5, #40	; 0x28
   db910:	ee08 3a10 	vmov	s16, r3
            if( *p_key_tries++ > 10 )
   db914:	f85a 3b04 	ldr.w	r3, [sl], #4
   db918:	2b0a      	cmp	r3, #10
   db91a:	dc7d      	bgt.n	dba18 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x188>
            MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, pk, f_rng, p_rng ) );
   db91c:	4631      	mov	r1, r6
   db91e:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   db922:	4628      	mov	r0, r5
   db924:	f7fe fa82 	bl	d9e2c <mbedtls_ecp_gen_privkey>
   db928:	4601      	mov	r1, r0
   db92a:	2800      	cmp	r0, #0
   db92c:	d165      	bne.n	db9fa <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x16a>
            MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &R, pk, &grp->G,
   db92e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   db930:	9301      	str	r3, [sp, #4]
   db932:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   db934:	9002      	str	r0, [sp, #8]
   db936:	9300      	str	r3, [sp, #0]
   db938:	a911      	add	r1, sp, #68	; 0x44
   db93a:	ee18 3a10 	vmov	r3, s16
   db93e:	4632      	mov	r2, r6
   db940:	4628      	mov	r0, r5
   db942:	f7fe f8b3 	bl	d9aac <mbedtls_ecp_mul_restartable>
   db946:	4601      	mov	r1, r0
   db948:	2800      	cmp	r0, #0
   db94a:	d156      	bne.n	db9fa <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x16a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pr, &R.X, &grp->N ) );
   db94c:	a911      	add	r1, sp, #68	; 0x44
   db94e:	464a      	mov	r2, r9
   db950:	4638      	mov	r0, r7
   db952:	f005 ff76 	bl	e1842 <mbedtls_mpi_mod_mpi>
   db956:	4601      	mov	r1, r0
   db958:	2800      	cmp	r0, #0
   db95a:	d14e      	bne.n	db9fa <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x16a>
        while( mbedtls_mpi_cmp_int( pr, 0 ) == 0 );
   db95c:	4638      	mov	r0, r7
   db95e:	f005 fc1c 	bl	e119a <mbedtls_mpi_cmp_int>
   db962:	2800      	cmp	r0, #0
   db964:	d0d6      	beq.n	db914 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x84>
        MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
   db966:	a90b      	add	r1, sp, #44	; 0x2c
   db968:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
   db96c:	4628      	mov	r0, r5
   db96e:	f7ff ff5d 	bl	db82c <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj>
   db972:	4601      	mov	r1, r0
   db974:	2800      	cmp	r0, #0
   db976:	d140      	bne.n	db9fa <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x16a>
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, &t, f_rng_blind,
   db978:	a90e      	add	r1, sp, #56	; 0x38
   db97a:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
   db97e:	4628      	mov	r0, r5
   db980:	f7fe fa54 	bl	d9e2c <mbedtls_ecp_gen_privkey>
   db984:	4601      	mov	r1, r0
   db986:	2800      	cmp	r0, #0
   db988:	d137      	bne.n	db9fa <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x16a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, pr, d ) );
   db98a:	4639      	mov	r1, r7
   db98c:	4642      	mov	r2, r8
   db98e:	4620      	mov	r0, r4
   db990:	f005 fd1f 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   db994:	4601      	mov	r1, r0
   db996:	bb80      	cbnz	r0, db9fa <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x16a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &e, &e, s ) );
   db998:	a90b      	add	r1, sp, #44	; 0x2c
   db99a:	4608      	mov	r0, r1
   db99c:	4622      	mov	r2, r4
   db99e:	f005 fca7 	bl	e12f0 <mbedtls_mpi_add_mpi>
   db9a2:	4601      	mov	r1, r0
   db9a4:	bb48      	cbnz	r0, db9fa <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x16a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &e, &e, &t ) );
   db9a6:	a90b      	add	r1, sp, #44	; 0x2c
   db9a8:	4608      	mov	r0, r1
   db9aa:	aa0e      	add	r2, sp, #56	; 0x38
   db9ac:	f005 fd11 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   db9b0:	4601      	mov	r1, r0
   db9b2:	bb10      	cbnz	r0, db9fa <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x16a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pk, pk, &t ) );
   db9b4:	4631      	mov	r1, r6
   db9b6:	aa0e      	add	r2, sp, #56	; 0x38
   db9b8:	4630      	mov	r0, r6
   db9ba:	f005 fd0a 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   db9be:	4601      	mov	r1, r0
   db9c0:	b9d8      	cbnz	r0, db9fa <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x16a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( s, pk, &grp->N ) );
   db9c2:	4631      	mov	r1, r6
   db9c4:	464a      	mov	r2, r9
   db9c6:	4620      	mov	r0, r4
   db9c8:	f006 fa4f 	bl	e1e6a <mbedtls_mpi_inv_mod>
   db9cc:	4601      	mov	r1, r0
   db9ce:	b9a0      	cbnz	r0, db9fa <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x16a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, s, &e ) );
   db9d0:	4621      	mov	r1, r4
   db9d2:	aa0b      	add	r2, sp, #44	; 0x2c
   db9d4:	4620      	mov	r0, r4
   db9d6:	f005 fcfc 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   db9da:	4601      	mov	r1, r0
   db9dc:	b968      	cbnz	r0, db9fa <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x16a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( s, s, &grp->N ) );
   db9de:	4621      	mov	r1, r4
   db9e0:	464a      	mov	r2, r9
   db9e2:	4620      	mov	r0, r4
   db9e4:	f005 ff2d 	bl	e1842 <mbedtls_mpi_mod_mpi>
   db9e8:	4601      	mov	r1, r0
   db9ea:	b930      	cbnz	r0, db9fa <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x16a>
    while( mbedtls_mpi_cmp_int( s, 0 ) == 0 );
   db9ec:	9005      	str	r0, [sp, #20]
   db9ee:	4620      	mov	r0, r4
   db9f0:	f005 fbd3 	bl	e119a <mbedtls_mpi_cmp_int>
   db9f4:	9905      	ldr	r1, [sp, #20]
   db9f6:	2800      	cmp	r0, #0
   db9f8:	d080      	beq.n	db8fc <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x6c>
    mbedtls_ecp_point_free( &R );
   db9fa:	a811      	add	r0, sp, #68	; 0x44
   db9fc:	9104      	str	r1, [sp, #16]
   db9fe:	f7fd fac4 	bl	d8f8a <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );
   dba02:	a808      	add	r0, sp, #32
   dba04:	f005 f8af 	bl	e0b66 <mbedtls_mpi_free>
   dba08:	a80b      	add	r0, sp, #44	; 0x2c
   dba0a:	f005 f8ac 	bl	e0b66 <mbedtls_mpi_free>
   dba0e:	a80e      	add	r0, sp, #56	; 0x38
   dba10:	f005 f8a9 	bl	e0b66 <mbedtls_mpi_free>
    return( ret );
   dba14:	9904      	ldr	r1, [sp, #16]
   dba16:	e74f      	b.n	db8b8 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x28>
            ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
   dba18:	4902      	ldr	r1, [pc, #8]	; (dba24 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x194>)
   dba1a:	e7ee      	b.n	db9fa <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x16a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   dba1c:	4902      	ldr	r1, [pc, #8]	; (dba28 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x198>)
   dba1e:	e74b      	b.n	db8b8 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0+0x28>
   dba20:	ffffb380 	.word	0xffffb380
   dba24:	ffffb300 	.word	0xffffb300
   dba28:	ffffb080 	.word	0xffffb080

000dba2c <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0>:
#if !defined(MBEDTLS_ECDSA_VERIFY_ALT)
/*
 * Verify ECDSA signature of hashed message (SEC1 4.1.4)
 * Obviously, compared to SEC1 4.1.3, we skip step 2 (hash message)
 */
static int ecdsa_verify_restartable( mbedtls_ecp_group *grp,
   dba2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dba30:	b09a      	sub	sp, #104	; 0x68
   dba32:	4605      	mov	r5, r0
    int ret;
    mbedtls_mpi e, s_inv, u1, u2;
    mbedtls_ecp_point R;
    mbedtls_mpi *pu1 = &u1, *pu2 = &u2;

    mbedtls_ecp_point_init( &R );
   dba34:	a811      	add	r0, sp, #68	; 0x44
static int ecdsa_verify_restartable( mbedtls_ecp_group *grp,
   dba36:	4698      	mov	r8, r3
   dba38:	460c      	mov	r4, r1
   dba3a:	4692      	mov	sl, r2
   dba3c:	e9dd 6922 	ldrd	r6, r9, [sp, #136]	; 0x88
    mbedtls_ecp_point_init( &R );
   dba40:	f7fd fa66 	bl	d8f10 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv );
   dba44:	a805      	add	r0, sp, #20
   dba46:	f005 f888 	bl	e0b5a <mbedtls_mpi_init>
   dba4a:	a808      	add	r0, sp, #32
   dba4c:	f005 f885 	bl	e0b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );
   dba50:	a80b      	add	r0, sp, #44	; 0x2c
   dba52:	f005 f882 	bl	e0b5a <mbedtls_mpi_init>
   dba56:	a80e      	add	r0, sp, #56	; 0x38
   dba58:	f005 f87f 	bl	e0b5a <mbedtls_mpi_init>

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
   dba5c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   dba5e:	2b00      	cmp	r3, #0
   dba60:	d078      	beq.n	dbb54 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x128>
#endif /* MBEDTLS_ECP_RESTARTABLE */

    /*
     * Step 1: make sure r and s are in range 1..n-1
     */
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
   dba62:	2101      	movs	r1, #1
   dba64:	4630      	mov	r0, r6
   dba66:	f005 fb98 	bl	e119a <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
   dba6a:	2800      	cmp	r0, #0
   dba6c:	db5e      	blt.n	dbb2c <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x100>
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
   dba6e:	f105 074c 	add.w	r7, r5, #76	; 0x4c
   dba72:	4639      	mov	r1, r7
   dba74:	4630      	mov	r0, r6
   dba76:	f005 fb4f 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   dba7a:	2800      	cmp	r0, #0
   dba7c:	da56      	bge.n	dbb2c <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x100>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
   dba7e:	2101      	movs	r1, #1
   dba80:	4648      	mov	r0, r9
   dba82:	f005 fb8a 	bl	e119a <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
   dba86:	2800      	cmp	r0, #0
   dba88:	db50      	blt.n	dbb2c <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x100>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
   dba8a:	4639      	mov	r1, r7
   dba8c:	4648      	mov	r0, r9
   dba8e:	f005 fb43 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   dba92:	2800      	cmp	r0, #0
   dba94:	da4a      	bge.n	dbb2c <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x100>
    }

    /*
     * Step 3: derive MPI from hashed message
     */
    MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
   dba96:	4622      	mov	r2, r4
   dba98:	4653      	mov	r3, sl
   dba9a:	a905      	add	r1, sp, #20
   dba9c:	4628      	mov	r0, r5
   dba9e:	f7ff fec5 	bl	db82c <_ZL10derive_mpiPK17mbedtls_ecp_groupP11mbedtls_mpiPKhj>
   dbaa2:	4604      	mov	r4, r0
   dbaa4:	2800      	cmp	r0, #0
   dbaa6:	d142      	bne.n	dbb2e <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x102>
    /*
     * Step 4: u1 = e / s mod n, u2 = r / s mod n
     */
    ECDSA_BUDGET( MBEDTLS_ECP_OPS_CHK + MBEDTLS_ECP_OPS_INV + 2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &s_inv, s, &grp->N ) );
   dbaa8:	463a      	mov	r2, r7
   dbaaa:	4649      	mov	r1, r9
   dbaac:	a808      	add	r0, sp, #32
   dbaae:	f006 f9dc 	bl	e1e6a <mbedtls_mpi_inv_mod>
   dbab2:	4604      	mov	r4, r0
   dbab4:	2800      	cmp	r0, #0
   dbab6:	d13a      	bne.n	dbb2e <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x102>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu1, &e, &s_inv ) );
   dbab8:	aa08      	add	r2, sp, #32
   dbaba:	a905      	add	r1, sp, #20
   dbabc:	a80b      	add	r0, sp, #44	; 0x2c
   dbabe:	f005 fc88 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   dbac2:	4604      	mov	r4, r0
   dbac4:	bb98      	cbnz	r0, dbb2e <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x102>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu1, pu1, &grp->N ) );
   dbac6:	a90b      	add	r1, sp, #44	; 0x2c
   dbac8:	463a      	mov	r2, r7
   dbaca:	4608      	mov	r0, r1
   dbacc:	f005 feb9 	bl	e1842 <mbedtls_mpi_mod_mpi>
   dbad0:	4604      	mov	r4, r0
   dbad2:	bb60      	cbnz	r0, dbb2e <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x102>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu2, r, &s_inv ) );
   dbad4:	aa08      	add	r2, sp, #32
   dbad6:	4631      	mov	r1, r6
   dbad8:	a80e      	add	r0, sp, #56	; 0x38
   dbada:	f005 fc7a 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   dbade:	4604      	mov	r4, r0
   dbae0:	bb28      	cbnz	r0, dbb2e <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x102>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu2, pu2, &grp->N ) );
   dbae2:	a90e      	add	r1, sp, #56	; 0x38
   dbae4:	463a      	mov	r2, r7
   dbae6:	4608      	mov	r0, r1
   dbae8:	f005 feab 	bl	e1842 <mbedtls_mpi_mod_mpi>
   dbaec:	4604      	mov	r4, r0
   dbaee:	b9f0      	cbnz	r0, dbb2e <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x102>
muladd:
#endif
    /*
     * Step 5: R = u1 G + u2 Q
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_muladd_restartable( grp,
   dbaf0:	a90e      	add	r1, sp, #56	; 0x38
   dbaf2:	e9cd 8001 	strd	r8, r0, [sp, #4]
   dbaf6:	9100      	str	r1, [sp, #0]
   dbaf8:	f105 0328 	add.w	r3, r5, #40	; 0x28
   dbafc:	aa0b      	add	r2, sp, #44	; 0x2c
   dbafe:	a911      	add	r1, sp, #68	; 0x44
   dbb00:	4628      	mov	r0, r5
   dbb02:	f7fe f957 	bl	d9db4 <mbedtls_ecp_muladd_restartable>
   dbb06:	4604      	mov	r4, r0
   dbb08:	b988      	cbnz	r0, dbb2e <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x102>
                     &R, pu1, &grp->G, pu2, Q, ECDSA_RS_ECP ) );

    if( mbedtls_ecp_is_zero( &R ) )
   dbb0a:	a811      	add	r0, sp, #68	; 0x44
   dbb0c:	f7fd fe18 	bl	d9740 <mbedtls_ecp_is_zero>
   dbb10:	b960      	cbnz	r0, dbb2c <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x100>

    /*
     * Step 6: convert xR to an integer (no-op)
     * Step 7: reduce xR mod n (gives v)
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &R.X, &R.X, &grp->N ) );
   dbb12:	a911      	add	r1, sp, #68	; 0x44
   dbb14:	463a      	mov	r2, r7
   dbb16:	4608      	mov	r0, r1
   dbb18:	f005 fe93 	bl	e1842 <mbedtls_mpi_mod_mpi>
   dbb1c:	4604      	mov	r4, r0
   dbb1e:	b930      	cbnz	r0, dbb2e <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x102>

    /*
     * Step 8: check if v (that is, R.X) is equal to r
     */
    if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )
   dbb20:	4631      	mov	r1, r6
   dbb22:	a811      	add	r0, sp, #68	; 0x44
   dbb24:	f005 faf8 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   dbb28:	4604      	mov	r4, r0
   dbb2a:	b100      	cbz	r0, dbb2e <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x102>
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
   dbb2c:	4c0a      	ldr	r4, [pc, #40]	; (dbb58 <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x12c>)
        goto cleanup;
    }

cleanup:
    mbedtls_ecp_point_free( &R );
   dbb2e:	a811      	add	r0, sp, #68	; 0x44
   dbb30:	f7fd fa2b 	bl	d8f8a <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &e ); mbedtls_mpi_free( &s_inv );
   dbb34:	a805      	add	r0, sp, #20
   dbb36:	f005 f816 	bl	e0b66 <mbedtls_mpi_free>
   dbb3a:	a808      	add	r0, sp, #32
   dbb3c:	f005 f813 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );
   dbb40:	a80b      	add	r0, sp, #44	; 0x2c
   dbb42:	f005 f810 	bl	e0b66 <mbedtls_mpi_free>
   dbb46:	a80e      	add	r0, sp, #56	; 0x38
   dbb48:	f005 f80d 	bl	e0b66 <mbedtls_mpi_free>

    ECDSA_RS_LEAVE( ver );

    return( ret );
}
   dbb4c:	4620      	mov	r0, r4
   dbb4e:	b01a      	add	sp, #104	; 0x68
   dbb50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   dbb54:	4c01      	ldr	r4, [pc, #4]	; (dbb5c <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x130>)
   dbb56:	e7f9      	b.n	dbb4c <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0+0x120>
   dbb58:	ffffb200 	.word	0xffffb200
   dbb5c:	ffffb080 	.word	0xffffb080

000dbb60 <mbedtls_ecdsa_write_signature_restartable>:
                           const unsigned char *hash, size_t hlen,
                           unsigned char *sig, size_t *slen,
                           int (*f_rng)(void *, unsigned char *, size_t),
                           void *p_rng,
                           mbedtls_ecdsa_restart_ctx *rs_ctx )
{
   dbb60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dbb64:	b0b2      	sub	sp, #200	; 0xc8
   dbb66:	e9dd 783a 	ldrd	r7, r8, [sp, #232]	; 0xe8
   dbb6a:	4604      	mov	r4, r0
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );

    mbedtls_mpi_init( &r );
   dbb6c:	a808      	add	r0, sp, #32
{
   dbb6e:	461e      	mov	r6, r3
   dbb70:	4615      	mov	r5, r2
    mbedtls_mpi_init( &r );
   dbb72:	f004 fff2 	bl	e0b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
   dbb76:	a80b      	add	r0, sp, #44	; 0x2c
   dbb78:	f004 ffef 	bl	e0b5a <mbedtls_mpi_init>
#if defined(MBEDTLS_ECDSA_SIGN_ALT)
    MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign( &ctx->grp, &r, &s, &ctx->d,
                         hash, hlen, f_rng, p_rng ) );
#else
    /* Use the same RNG for both blinding and ephemeral key generation */
    MBEDTLS_MPI_CHK( ecdsa_sign_restartable( &ctx->grp, &r, &s, &ctx->d,
   dbb7c:	e9cd 5600 	strd	r5, r6, [sp]
   dbb80:	e9cd 7804 	strd	r7, r8, [sp, #16]
   dbb84:	e9cd 7802 	strd	r7, r8, [sp, #8]
   dbb88:	f104 037c 	add.w	r3, r4, #124	; 0x7c
   dbb8c:	aa0b      	add	r2, sp, #44	; 0x2c
   dbb8e:	a908      	add	r1, sp, #32
   dbb90:	4620      	mov	r0, r4
   dbb92:	f7ff fe7d 	bl	db890 <_ZL22ecdsa_sign_restartableP17mbedtls_ecp_groupP11mbedtls_mpiS2_PKS1_PKhjPFiPvPhjES7_SA_S7_S7_.isra.0>
   dbb96:	4606      	mov	r6, r0
   dbb98:	bb50      	cbnz	r0, dbbf0 <mbedtls_ecdsa_write_signature_restartable+0x90>
    unsigned char *p = buf + sizeof( buf );
   dbb9a:	f10d 03c5 	add.w	r3, sp, #197	; 0xc5
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
   dbb9e:	aa0b      	add	r2, sp, #44	; 0x2c
   dbba0:	a90e      	add	r1, sp, #56	; 0x38
   dbba2:	a807      	add	r0, sp, #28
    unsigned char *p = buf + sizeof( buf );
   dbba4:	9307      	str	r3, [sp, #28]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
   dbba6:	f7fa f9eb 	bl	d5f80 <mbedtls_asn1_write_mpi>
   dbbaa:	1e04      	subs	r4, r0, #0
   dbbac:	db1f      	blt.n	dbbee <mbedtls_ecdsa_write_signature_restartable+0x8e>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );
   dbbae:	aa08      	add	r2, sp, #32
   dbbb0:	a90e      	add	r1, sp, #56	; 0x38
   dbbb2:	a807      	add	r0, sp, #28
   dbbb4:	f7fa f9e4 	bl	d5f80 <mbedtls_asn1_write_mpi>
   dbbb8:	1e05      	subs	r5, r0, #0
   dbbba:	db23      	blt.n	dbc04 <mbedtls_ecdsa_write_signature_restartable+0xa4>
   dbbbc:	4425      	add	r5, r4
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
   dbbbe:	462a      	mov	r2, r5
   dbbc0:	a90e      	add	r1, sp, #56	; 0x38
   dbbc2:	a807      	add	r0, sp, #28
   dbbc4:	f7fa f95a 	bl	d5e7c <mbedtls_asn1_write_len>
   dbbc8:	1e04      	subs	r4, r0, #0
   dbbca:	db10      	blt.n	dbbee <mbedtls_ecdsa_write_signature_restartable+0x8e>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
   dbbcc:	2230      	movs	r2, #48	; 0x30
   dbbce:	a90e      	add	r1, sp, #56	; 0x38
   dbbd0:	a807      	add	r0, sp, #28
   dbbd2:	f7fa f9c7 	bl	d5f64 <mbedtls_asn1_write_tag>
   dbbd6:	2800      	cmp	r0, #0
   dbbd8:	db16      	blt.n	dbc08 <mbedtls_ecdsa_write_signature_restartable+0xa8>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
   dbbda:	442c      	add	r4, r5
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
   dbbdc:	4404      	add	r4, r0
    memcpy( sig, p, len );
   dbbde:	4622      	mov	r2, r4
   dbbe0:	9907      	ldr	r1, [sp, #28]
   dbbe2:	9838      	ldr	r0, [sp, #224]	; 0xe0
   dbbe4:	f00d f902 	bl	e8dec <memcpy>
    *slen = len;
   dbbe8:	9b39      	ldr	r3, [sp, #228]	; 0xe4
   dbbea:	601c      	str	r4, [r3, #0]
    return( 0 );
   dbbec:	4634      	mov	r4, r6
                                             hash, hlen, f_rng, p_rng, f_rng,
                                             p_rng, rs_ctx ) );
#endif /* MBEDTLS_ECDSA_SIGN_ALT */
#endif /* MBEDTLS_ECDSA_DETERMINISTIC */

    MBEDTLS_MPI_CHK( ecdsa_signature_to_asn1( &r, &s, sig, slen ) );
   dbbee:	4626      	mov	r6, r4

cleanup:
    mbedtls_mpi_free( &r );
   dbbf0:	a808      	add	r0, sp, #32
   dbbf2:	f004 ffb8 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
   dbbf6:	a80b      	add	r0, sp, #44	; 0x2c
   dbbf8:	f004 ffb5 	bl	e0b66 <mbedtls_mpi_free>

    return( ret );
}
   dbbfc:	4630      	mov	r0, r6
   dbbfe:	b032      	add	sp, #200	; 0xc8
   dbc00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dbc04:	462c      	mov	r4, r5
   dbc06:	e7f2      	b.n	dbbee <mbedtls_ecdsa_write_signature_restartable+0x8e>
   dbc08:	4604      	mov	r4, r0
   dbc0a:	e7f0      	b.n	dbbee <mbedtls_ecdsa_write_signature_restartable+0x8e>

000dbc0c <mbedtls_ecdsa_write_signature>:
                                 mbedtls_md_type_t md_alg,
                                 const unsigned char *hash, size_t hlen,
                                 unsigned char *sig, size_t *slen,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
   dbc0c:	b510      	push	{r4, lr}
   dbc0e:	b086      	sub	sp, #24
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );
    return( mbedtls_ecdsa_write_signature_restartable(
   dbc10:	2400      	movs	r4, #0
   dbc12:	9404      	str	r4, [sp, #16]
   dbc14:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   dbc16:	9403      	str	r4, [sp, #12]
   dbc18:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   dbc1a:	9402      	str	r4, [sp, #8]
   dbc1c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   dbc1e:	9401      	str	r4, [sp, #4]
   dbc20:	9c08      	ldr	r4, [sp, #32]
   dbc22:	9400      	str	r4, [sp, #0]
   dbc24:	f7ff ff9c 	bl	dbb60 <mbedtls_ecdsa_write_signature_restartable>
                ctx, md_alg, hash, hlen, sig, slen, f_rng, p_rng, NULL ) );
}
   dbc28:	b006      	add	sp, #24
   dbc2a:	bd10      	pop	{r4, pc}

000dbc2c <mbedtls_ecdsa_read_signature_restartable>:
 */
int mbedtls_ecdsa_read_signature_restartable( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
   dbc2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dbc30:	b08a      	sub	sp, #40	; 0x28
    mbedtls_mpi r, s;
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );

    mbedtls_mpi_init( &r );
   dbc32:	af04      	add	r7, sp, #16
    const unsigned char *end = sig + slen;
   dbc34:	9d12      	ldr	r5, [sp, #72]	; 0x48
    unsigned char *p = (unsigned char *) sig;
   dbc36:	9302      	str	r3, [sp, #8]
{
   dbc38:	4680      	mov	r8, r0
    mbedtls_mpi_init( &s );
   dbc3a:	ae07      	add	r6, sp, #28
    mbedtls_mpi_init( &r );
   dbc3c:	4638      	mov	r0, r7
    const unsigned char *end = sig + slen;
   dbc3e:	441d      	add	r5, r3
{
   dbc40:	4689      	mov	r9, r1
   dbc42:	4692      	mov	sl, r2
    mbedtls_mpi_init( &r );
   dbc44:	f004 ff89 	bl	e0b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
   dbc48:	4630      	mov	r0, r6
   dbc4a:	f004 ff86 	bl	e0b5a <mbedtls_mpi_init>

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbc4e:	2330      	movs	r3, #48	; 0x30
   dbc50:	aa03      	add	r2, sp, #12
   dbc52:	4629      	mov	r1, r5
   dbc54:	a802      	add	r0, sp, #8
   dbc56:	f7fa fc93 	bl	d6580 <mbedtls_asn1_get_tag>
   dbc5a:	b158      	cbz	r0, dbc74 <mbedtls_ecdsa_read_signature_restartable+0x48>
    }

    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
    {
        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   dbc5c:	f5a0 449f 	sub.w	r4, r0, #20352	; 0x4f80
     * error code if the valid signature is followed by more data. */
    if( p != end )
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;

cleanup:
    mbedtls_mpi_free( &r );
   dbc60:	4638      	mov	r0, r7
   dbc62:	f004 ff80 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
   dbc66:	4630      	mov	r0, r6
   dbc68:	f004 ff7d 	bl	e0b66 <mbedtls_mpi_free>

    return( ret );
}
   dbc6c:	4620      	mov	r0, r4
   dbc6e:	b00a      	add	sp, #40	; 0x28
   dbc70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( p + len != end )
   dbc74:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   dbc78:	4413      	add	r3, r2
   dbc7a:	429d      	cmp	r5, r3
   dbc7c:	d11f      	bne.n	dbcbe <mbedtls_ecdsa_read_signature_restartable+0x92>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
   dbc7e:	463a      	mov	r2, r7
   dbc80:	4629      	mov	r1, r5
   dbc82:	a802      	add	r0, sp, #8
   dbc84:	f7fa fccd 	bl	d6622 <mbedtls_asn1_get_mpi>
   dbc88:	2800      	cmp	r0, #0
   dbc8a:	d1e7      	bne.n	dbc5c <mbedtls_ecdsa_read_signature_restartable+0x30>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
   dbc8c:	4632      	mov	r2, r6
   dbc8e:	4629      	mov	r1, r5
   dbc90:	a802      	add	r0, sp, #8
   dbc92:	f7fa fcc6 	bl	d6622 <mbedtls_asn1_get_mpi>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
   dbc96:	2800      	cmp	r0, #0
   dbc98:	d1e0      	bne.n	dbc5c <mbedtls_ecdsa_read_signature_restartable+0x30>
    if( ( ret = ecdsa_verify_restartable( &ctx->grp, hash, hlen,
   dbc9a:	e9cd 7600 	strd	r7, r6, [sp]
   dbc9e:	f108 0388 	add.w	r3, r8, #136	; 0x88
   dbca2:	4652      	mov	r2, sl
   dbca4:	4649      	mov	r1, r9
   dbca6:	4640      	mov	r0, r8
   dbca8:	f7ff fec0 	bl	dba2c <_ZL24ecdsa_verify_restartableP17mbedtls_ecp_groupPKhjPK17mbedtls_ecp_pointPK11mbedtls_mpiS8_Pv.isra.0>
   dbcac:	4604      	mov	r4, r0
   dbcae:	2800      	cmp	r0, #0
   dbcb0:	d1d6      	bne.n	dbc60 <mbedtls_ecdsa_read_signature_restartable+0x34>
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;
   dbcb2:	9a02      	ldr	r2, [sp, #8]
   dbcb4:	4b03      	ldr	r3, [pc, #12]	; (dbcc4 <mbedtls_ecdsa_read_signature_restartable+0x98>)
   dbcb6:	42aa      	cmp	r2, r5
   dbcb8:	bf18      	it	ne
   dbcba:	461c      	movne	r4, r3
   dbcbc:	e7d0      	b.n	dbc60 <mbedtls_ecdsa_read_signature_restartable+0x34>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
   dbcbe:	4c02      	ldr	r4, [pc, #8]	; (dbcc8 <mbedtls_ecdsa_read_signature_restartable+0x9c>)
   dbcc0:	e7ce      	b.n	dbc60 <mbedtls_ecdsa_read_signature_restartable+0x34>
   dbcc2:	bf00      	nop
   dbcc4:	ffffb400 	.word	0xffffb400
   dbcc8:	ffffb01a 	.word	0xffffb01a

000dbccc <mbedtls_ecdsa_read_signature>:
{
   dbccc:	b513      	push	{r0, r1, r4, lr}
    return( mbedtls_ecdsa_read_signature_restartable(
   dbcce:	2400      	movs	r4, #0
   dbcd0:	9401      	str	r4, [sp, #4]
   dbcd2:	9c04      	ldr	r4, [sp, #16]
   dbcd4:	9400      	str	r4, [sp, #0]
   dbcd6:	f7ff ffa9 	bl	dbc2c <mbedtls_ecdsa_read_signature_restartable>
}
   dbcda:	b002      	add	sp, #8
   dbcdc:	bd10      	pop	{r4, pc}

000dbcde <mbedtls_ecdsa_init>:
 */
void mbedtls_ecdsa_init( mbedtls_ecdsa_context *ctx )
{
    ECDSA_VALIDATE( ctx != NULL );

    mbedtls_ecp_keypair_init( ctx );
   dbcde:	f7fd b946 	b.w	d8f6e <mbedtls_ecp_keypair_init>

000dbce2 <mbedtls_ecdsa_free>:
/*
 * Free context
 */
void mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx )
{
    if( ctx == NULL )
   dbce2:	b108      	cbz	r0, dbce8 <mbedtls_ecdsa_free+0x6>
        return;

    mbedtls_ecp_keypair_free( ctx );
   dbce4:	f7fd b985 	b.w	d8ff2 <mbedtls_ecp_keypair_free>
}
   dbce8:	4770      	bx	lr

000dbcea <mbedtls_ecdsa_from_keypair>:
{
   dbcea:	b570      	push	{r4, r5, r6, lr}
   dbcec:	4605      	mov	r5, r0
   dbcee:	460e      	mov	r6, r1
    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
   dbcf0:	f7fd f9a5 	bl	d903e <mbedtls_ecp_group_copy>
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
   dbcf4:	4604      	mov	r4, r0
   dbcf6:	b978      	cbnz	r0, dbd18 <mbedtls_ecdsa_from_keypair+0x2e>
   dbcf8:	f106 017c 	add.w	r1, r6, #124	; 0x7c
   dbcfc:	f105 007c 	add.w	r0, r5, #124	; 0x7c
   dbd00:	f004 ffa8 	bl	e0c54 <mbedtls_mpi_copy>
    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
   dbd04:	4604      	mov	r4, r0
   dbd06:	b938      	cbnz	r0, dbd18 <mbedtls_ecdsa_from_keypair+0x2e>
        ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 )
   dbd08:	f106 0188 	add.w	r1, r6, #136	; 0x88
   dbd0c:	f105 0088 	add.w	r0, r5, #136	; 0x88
   dbd10:	f7fd f97f 	bl	d9012 <mbedtls_ecp_copy>
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
   dbd14:	4604      	mov	r4, r0
   dbd16:	b110      	cbz	r0, dbd1e <mbedtls_ecdsa_from_keypair+0x34>
        mbedtls_ecdsa_free( ctx );
   dbd18:	4628      	mov	r0, r5
   dbd1a:	f7ff ffe2 	bl	dbce2 <mbedtls_ecdsa_free>
}
   dbd1e:	4620      	mov	r0, r4
   dbd20:	bd70      	pop	{r4, r5, r6, pc}
	...

000dbd24 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context>:
 *  }
 */
static int pk_get_rsapubkey( unsigned char **p,
                             const unsigned char *end,
                             mbedtls_rsa_context *rsa )
{
   dbd24:	b570      	push	{r4, r5, r6, lr}
   dbd26:	b08a      	sub	sp, #40	; 0x28
   dbd28:	4616      	mov	r6, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   dbd2a:	2330      	movs	r3, #48	; 0x30
   dbd2c:	aa09      	add	r2, sp, #36	; 0x24
{
   dbd2e:	4604      	mov	r4, r0
   dbd30:	460d      	mov	r5, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   dbd32:	f7fa fc25 	bl	d6580 <mbedtls_asn1_get_tag>
   dbd36:	b118      	cbz	r0, dbd40 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x1c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
   dbd38:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
    if( *p != end )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
   dbd3c:	b00a      	add	sp, #40	; 0x28
   dbd3e:	bd70      	pop	{r4, r5, r6, pc}
    if( *p + len != end )
   dbd40:	6823      	ldr	r3, [r4, #0]
   dbd42:	9a09      	ldr	r2, [sp, #36]	; 0x24
   dbd44:	4413      	add	r3, r2
   dbd46:	429d      	cmp	r5, r3
   dbd48:	d147      	bne.n	dbdda <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xb6>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   dbd4a:	2302      	movs	r3, #2
   dbd4c:	aa09      	add	r2, sp, #36	; 0x24
   dbd4e:	4629      	mov	r1, r5
   dbd50:	4620      	mov	r0, r4
   dbd52:	f7fa fc15 	bl	d6580 <mbedtls_asn1_get_tag>
   dbd56:	4603      	mov	r3, r0
   dbd58:	b110      	cbz	r0, dbd60 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x3c>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
   dbd5a:	f5a3 506c 	sub.w	r0, r3, #15104	; 0x3b00
   dbd5e:	e7ed      	b.n	dbd3c <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x18>
    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
   dbd60:	e9cd 0005 	strd	r0, r0, [sp, #20]
   dbd64:	e9cd 0003 	strd	r0, r0, [sp, #12]
   dbd68:	e9cd 0001 	strd	r0, r0, [sp, #4]
   dbd6c:	9000      	str	r0, [sp, #0]
   dbd6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   dbd70:	6821      	ldr	r1, [r4, #0]
   dbd72:	4630      	mov	r0, r6
   dbd74:	f7fb fb1a 	bl	d73ac <mbedtls_rsa_import_raw>
   dbd78:	b108      	cbz	r0, dbd7e <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x5a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
   dbd7a:	4819      	ldr	r0, [pc, #100]	; (dbde0 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xbc>)
   dbd7c:	e7de      	b.n	dbd3c <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x18>
    *p += len;
   dbd7e:	6823      	ldr	r3, [r4, #0]
   dbd80:	9a09      	ldr	r2, [sp, #36]	; 0x24
   dbd82:	4413      	add	r3, r2
   dbd84:	6023      	str	r3, [r4, #0]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   dbd86:	aa09      	add	r2, sp, #36	; 0x24
   dbd88:	2302      	movs	r3, #2
   dbd8a:	4629      	mov	r1, r5
   dbd8c:	4620      	mov	r0, r4
   dbd8e:	f7fa fbf7 	bl	d6580 <mbedtls_asn1_get_tag>
   dbd92:	4603      	mov	r3, r0
   dbd94:	2800      	cmp	r0, #0
   dbd96:	d1e0      	bne.n	dbd5a <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x36>
    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
   dbd98:	9a09      	ldr	r2, [sp, #36]	; 0x24
   dbd9a:	9206      	str	r2, [sp, #24]
   dbd9c:	6822      	ldr	r2, [r4, #0]
   dbd9e:	e9cd 0002 	strd	r0, r0, [sp, #8]
   dbda2:	e9cd 0204 	strd	r0, r2, [sp, #16]
   dbda6:	e9cd 0000 	strd	r0, r0, [sp]
   dbdaa:	4602      	mov	r2, r0
   dbdac:	4601      	mov	r1, r0
   dbdae:	4630      	mov	r0, r6
   dbdb0:	f7fb fafc 	bl	d73ac <mbedtls_rsa_import_raw>
   dbdb4:	2800      	cmp	r0, #0
   dbdb6:	d1e0      	bne.n	dbd7a <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x56>
    *p += len;
   dbdb8:	6823      	ldr	r3, [r4, #0]
   dbdba:	9a09      	ldr	r2, [sp, #36]	; 0x24
   dbdbc:	4413      	add	r3, r2
   dbdbe:	6023      	str	r3, [r4, #0]
    if( mbedtls_rsa_complete( rsa ) != 0 ||
   dbdc0:	4630      	mov	r0, r6
   dbdc2:	f7fb fb35 	bl	d7430 <mbedtls_rsa_complete>
   dbdc6:	2800      	cmp	r0, #0
   dbdc8:	d1d7      	bne.n	dbd7a <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x56>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
   dbdca:	4630      	mov	r0, r6
   dbdcc:	f7fb fbce 	bl	d756c <mbedtls_rsa_check_pubkey>
    if( mbedtls_rsa_complete( rsa ) != 0 ||
   dbdd0:	2800      	cmp	r0, #0
   dbdd2:	d1d2      	bne.n	dbd7a <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x56>
    if( *p != end )
   dbdd4:	6823      	ldr	r3, [r4, #0]
   dbdd6:	42ab      	cmp	r3, r5
   dbdd8:	d0b0      	beq.n	dbd3c <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x18>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   dbdda:	4802      	ldr	r0, [pc, #8]	; (dbde4 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0xc0>)
   dbddc:	e7ae      	b.n	dbd3c <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context+0x18>
   dbdde:	bf00      	nop
   dbde0:	ffffc500 	.word	0xffffc500
   dbde4:	ffffc49a 	.word	0xffffc49a

000dbde8 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group>:
{
   dbde8:	b513      	push	{r0, r1, r4, lr}
    if( params->tag == MBEDTLS_ASN1_OID )
   dbdea:	6803      	ldr	r3, [r0, #0]
   dbdec:	2b06      	cmp	r3, #6
{
   dbdee:	460c      	mov	r4, r1
    if( params->tag == MBEDTLS_ASN1_OID )
   dbdf0:	d002      	beq.n	dbdf8 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x10>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
   dbdf2:	480a      	ldr	r0, [pc, #40]	; (dbe1c <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x34>)
}
   dbdf4:	b002      	add	sp, #8
   dbdf6:	bd10      	pop	{r4, pc}
        if( mbedtls_oid_get_ec_grp( params, &grp_id ) != 0 )
   dbdf8:	f10d 0107 	add.w	r1, sp, #7
   dbdfc:	f7fe f94a 	bl	da094 <mbedtls_oid_get_ec_grp>
   dbe00:	b948      	cbnz	r0, dbe16 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x2e>
    if( grp->id != MBEDTLS_ECP_DP_NONE && grp->id != grp_id )
   dbe02:	7823      	ldrb	r3, [r4, #0]
   dbe04:	f89d 1007 	ldrb.w	r1, [sp, #7]
   dbe08:	b10b      	cbz	r3, dbe0e <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x26>
   dbe0a:	428b      	cmp	r3, r1
   dbe0c:	d1f1      	bne.n	dbdf2 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0xa>
    if( ( ret = mbedtls_ecp_group_load( grp, grp_id ) ) != 0 )
   dbe0e:	4620      	mov	r0, r4
   dbe10:	f001 fbea 	bl	dd5e8 <mbedtls_ecp_group_load>
   dbe14:	e7ee      	b.n	dbdf4 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0xc>
            return( MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE );
   dbe16:	4802      	ldr	r0, [pc, #8]	; (dbe20 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0x38>)
   dbe18:	e7ec      	b.n	dbdf4 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group+0xc>
   dbe1a:	bf00      	nop
   dbe1c:	ffffc300 	.word	0xffffc300
   dbe20:	ffffc600 	.word	0xffffc600

000dbe24 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>:
 * Parse a PKCS#1 encoded private RSA key
 */
static int pk_parse_key_pkcs1_der( mbedtls_rsa_context *rsa,
                                   const unsigned char *key,
                                   size_t keylen )
{
   dbe24:	b570      	push	{r4, r5, r6, lr}
   dbe26:	b08e      	sub	sp, #56	; 0x38
   dbe28:	460c      	mov	r4, r1
   dbe2a:	4615      	mov	r5, r2
   dbe2c:	4606      	mov	r6, r0
    int ret, version;
    size_t len;
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );
   dbe2e:	a80b      	add	r0, sp, #44	; 0x2c
   dbe30:	f004 fe93 	bl	e0b5a <mbedtls_mpi_init>
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbe34:	2330      	movs	r3, #48	; 0x30
   dbe36:	aa09      	add	r2, sp, #36	; 0x24
   dbe38:	1961      	adds	r1, r4, r5
   dbe3a:	a80a      	add	r0, sp, #40	; 0x28
    p = (unsigned char *) key;
   dbe3c:	940a      	str	r4, [sp, #40]	; 0x28
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbe3e:	f7fa fb9f 	bl	d6580 <mbedtls_asn1_get_tag>
   dbe42:	b120      	cbz	r0, dbe4e <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x2a>

    end = p + len;

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   dbe44:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00

        mbedtls_rsa_free( rsa );
    }

    return( ret );
}
   dbe48:	4620      	mov	r0, r4
   dbe4a:	b00e      	add	sp, #56	; 0x38
   dbe4c:	bd70      	pop	{r4, r5, r6, pc}
    end = p + len;
   dbe4e:	e9dd 3509 	ldrd	r3, r5, [sp, #36]	; 0x24
   dbe52:	441d      	add	r5, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
   dbe54:	aa08      	add	r2, sp, #32
   dbe56:	4629      	mov	r1, r5
   dbe58:	a80a      	add	r0, sp, #40	; 0x28
   dbe5a:	f7fa fbbe 	bl	d65da <mbedtls_asn1_get_int>
   dbe5e:	2800      	cmp	r0, #0
   dbe60:	d1f0      	bne.n	dbe44 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x20>
    if( version != 0 )
   dbe62:	9b08      	ldr	r3, [sp, #32]
   dbe64:	2b00      	cmp	r3, #0
   dbe66:	f040 80ca 	bne.w	dbffe <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbe6a:	2302      	movs	r3, #2
   dbe6c:	aa09      	add	r2, sp, #36	; 0x24
   dbe6e:	4629      	mov	r1, r5
   dbe70:	a80a      	add	r0, sp, #40	; 0x28
   dbe72:	f7fa fb85 	bl	d6580 <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbe76:	4604      	mov	r4, r0
   dbe78:	2800      	cmp	r0, #0
   dbe7a:	f040 80af 	bne.w	dbfdc <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1b8>
        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
   dbe7e:	e9cd 0005 	strd	r0, r0, [sp, #20]
   dbe82:	e9cd 0003 	strd	r0, r0, [sp, #12]
   dbe86:	e9cd 0001 	strd	r0, r0, [sp, #4]
   dbe8a:	9000      	str	r0, [sp, #0]
   dbe8c:	4603      	mov	r3, r0
   dbe8e:	e9dd 2109 	ldrd	r2, r1, [sp, #36]	; 0x24
   dbe92:	4630      	mov	r0, r6
   dbe94:	f7fb fa8a 	bl	d73ac <mbedtls_rsa_import_raw>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbe98:	4604      	mov	r4, r0
   dbe9a:	2800      	cmp	r0, #0
   dbe9c:	f040 809e 	bne.w	dbfdc <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1b8>
    p += len;
   dbea0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   dbea4:	4413      	add	r3, r2
   dbea6:	930a      	str	r3, [sp, #40]	; 0x28
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbea8:	aa09      	add	r2, sp, #36	; 0x24
   dbeaa:	2302      	movs	r3, #2
   dbeac:	4629      	mov	r1, r5
   dbeae:	a80a      	add	r0, sp, #40	; 0x28
   dbeb0:	f7fa fb66 	bl	d6580 <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbeb4:	4604      	mov	r4, r0
   dbeb6:	2800      	cmp	r0, #0
   dbeb8:	f040 8090 	bne.w	dbfdc <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1b8>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
   dbebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbebe:	9306      	str	r3, [sp, #24]
   dbec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbec2:	e9cd 0002 	strd	r0, r0, [sp, #8]
   dbec6:	e9cd 0304 	strd	r0, r3, [sp, #16]
   dbeca:	e9cd 0000 	strd	r0, r0, [sp]
   dbece:	4603      	mov	r3, r0
   dbed0:	4602      	mov	r2, r0
   dbed2:	4601      	mov	r1, r0
   dbed4:	4630      	mov	r0, r6
   dbed6:	f7fb fa69 	bl	d73ac <mbedtls_rsa_import_raw>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbeda:	4604      	mov	r4, r0
   dbedc:	2800      	cmp	r0, #0
   dbede:	d17d      	bne.n	dbfdc <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1b8>
    p += len;
   dbee0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   dbee4:	4413      	add	r3, r2
   dbee6:	930a      	str	r3, [sp, #40]	; 0x28
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbee8:	aa09      	add	r2, sp, #36	; 0x24
   dbeea:	2302      	movs	r3, #2
   dbeec:	4629      	mov	r1, r5
   dbeee:	a80a      	add	r0, sp, #40	; 0x28
   dbef0:	f7fa fb46 	bl	d6580 <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbef4:	4604      	mov	r4, r0
   dbef6:	2800      	cmp	r0, #0
   dbef8:	d170      	bne.n	dbfdc <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1b8>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
   dbefa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbefc:	9304      	str	r3, [sp, #16]
   dbefe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbf00:	e9cd 0005 	strd	r0, r0, [sp, #20]
   dbf04:	e9cd 0302 	strd	r0, r3, [sp, #8]
   dbf08:	e9cd 0000 	strd	r0, r0, [sp]
   dbf0c:	4603      	mov	r3, r0
   dbf0e:	4602      	mov	r2, r0
   dbf10:	4601      	mov	r1, r0
   dbf12:	4630      	mov	r0, r6
   dbf14:	f7fb fa4a 	bl	d73ac <mbedtls_rsa_import_raw>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbf18:	4604      	mov	r4, r0
   dbf1a:	2800      	cmp	r0, #0
   dbf1c:	d15e      	bne.n	dbfdc <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1b8>
    p += len;
   dbf1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   dbf22:	4413      	add	r3, r2
   dbf24:	930a      	str	r3, [sp, #40]	; 0x28
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbf26:	aa09      	add	r2, sp, #36	; 0x24
   dbf28:	2302      	movs	r3, #2
   dbf2a:	4629      	mov	r1, r5
   dbf2c:	a80a      	add	r0, sp, #40	; 0x28
   dbf2e:	f7fa fb27 	bl	d6580 <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbf32:	4604      	mov	r4, r0
   dbf34:	2800      	cmp	r0, #0
   dbf36:	d151      	bne.n	dbfdc <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1b8>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
   dbf38:	2200      	movs	r2, #0
   dbf3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbf3c:	9300      	str	r3, [sp, #0]
   dbf3e:	e9cd 2205 	strd	r2, r2, [sp, #20]
   dbf42:	e9cd 2203 	strd	r2, r2, [sp, #12]
   dbf46:	e9cd 2201 	strd	r2, r2, [sp, #4]
   dbf4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbf4c:	4611      	mov	r1, r2
   dbf4e:	4630      	mov	r0, r6
   dbf50:	f7fb fa2c 	bl	d73ac <mbedtls_rsa_import_raw>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbf54:	4604      	mov	r4, r0
   dbf56:	2800      	cmp	r0, #0
   dbf58:	d140      	bne.n	dbfdc <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1b8>
    p += len;
   dbf5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   dbf5e:	4413      	add	r3, r2
   dbf60:	930a      	str	r3, [sp, #40]	; 0x28
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dbf62:	aa09      	add	r2, sp, #36	; 0x24
   dbf64:	2302      	movs	r3, #2
   dbf66:	4629      	mov	r1, r5
   dbf68:	a80a      	add	r0, sp, #40	; 0x28
   dbf6a:	f7fa fb09 	bl	d6580 <mbedtls_asn1_get_tag>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbf6e:	4604      	mov	r4, r0
   dbf70:	2800      	cmp	r0, #0
   dbf72:	d133      	bne.n	dbfdc <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1b8>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
   dbf74:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dbf76:	9302      	str	r3, [sp, #8]
   dbf78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dbf7a:	e9cd 0005 	strd	r0, r0, [sp, #20]
   dbf7e:	e9cd 0300 	strd	r0, r3, [sp]
   dbf82:	e9cd 0003 	strd	r0, r0, [sp, #12]
   dbf86:	4603      	mov	r3, r0
   dbf88:	4602      	mov	r2, r0
   dbf8a:	4601      	mov	r1, r0
   dbf8c:	4630      	mov	r0, r6
   dbf8e:	f7fb fa0d 	bl	d73ac <mbedtls_rsa_import_raw>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
   dbf92:	4604      	mov	r4, r0
   dbf94:	bb10      	cbnz	r0, dbfdc <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1b8>
    p += len;
   dbf96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
   dbf9a:	4630      	mov	r0, r6
    p += len;
   dbf9c:	4413      	add	r3, r2
   dbf9e:	930a      	str	r3, [sp, #40]	; 0x28
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
   dbfa0:	f7fb fa46 	bl	d7430 <mbedtls_rsa_complete>
   dbfa4:	4604      	mov	r4, r0
   dbfa6:	b9c8      	cbnz	r0, dbfdc <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1b8>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
   dbfa8:	aa0b      	add	r2, sp, #44	; 0x2c
   dbfaa:	4629      	mov	r1, r5
   dbfac:	a80a      	add	r0, sp, #40	; 0x28
   dbfae:	f7fa fb38 	bl	d6622 <mbedtls_asn1_get_mpi>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
   dbfb2:	4604      	mov	r4, r0
   dbfb4:	b990      	cbnz	r0, dbfdc <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1b8>
   dbfb6:	aa0b      	add	r2, sp, #44	; 0x2c
   dbfb8:	4629      	mov	r1, r5
   dbfba:	a80a      	add	r0, sp, #40	; 0x28
   dbfbc:	f7fa fb31 	bl	d6622 <mbedtls_asn1_get_mpi>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
   dbfc0:	4604      	mov	r4, r0
   dbfc2:	b958      	cbnz	r0, dbfdc <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1b8>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 )
   dbfc4:	aa0b      	add	r2, sp, #44	; 0x2c
   dbfc6:	4629      	mov	r1, r5
   dbfc8:	a80a      	add	r0, sp, #40	; 0x28
   dbfca:	f7fa fb2a 	bl	d6622 <mbedtls_asn1_get_mpi>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
   dbfce:	4604      	mov	r4, r0
   dbfd0:	b920      	cbnz	r0, dbfdc <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1b8>
        ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
   dbfd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dbfd4:	4b0b      	ldr	r3, [pc, #44]	; (dc004 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e0>)
   dbfd6:	42aa      	cmp	r2, r5
   dbfd8:	bf18      	it	ne
   dbfda:	461c      	movne	r4, r3
    mbedtls_mpi_free( &T );
   dbfdc:	a80b      	add	r0, sp, #44	; 0x2c
   dbfde:	f004 fdc2 	bl	e0b66 <mbedtls_mpi_free>
    if( ret != 0 )
   dbfe2:	2c00      	cmp	r4, #0
   dbfe4:	f43f af30 	beq.w	dbe48 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x24>
        if( ( ret & 0xff80 ) == 0 )
   dbfe8:	f64f 7380 	movw	r3, #65408	; 0xff80
   dbfec:	421c      	tst	r4, r3
        mbedtls_rsa_free( rsa );
   dbfee:	4630      	mov	r0, r6
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT;
   dbff0:	bf14      	ite	ne
   dbff2:	4c05      	ldrne	r4, [pc, #20]	; (dc008 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e4>)
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret;
   dbff4:	f5a4 5474 	subeq.w	r4, r4, #15616	; 0x3d00
        mbedtls_rsa_free( rsa );
   dbff8:	f7fc fad0 	bl	d859c <mbedtls_rsa_free>
   dbffc:	e724      	b.n	dbe48 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x24>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
   dbffe:	4c03      	ldr	r4, [pc, #12]	; (dc00c <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e8>)
   dc000:	e722      	b.n	dbe48 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x24>
   dc002:	bf00      	nop
   dc004:	ffffc29a 	.word	0xffffc29a
   dc008:	ffffc300 	.word	0xffffc300
   dc00c:	ffffc280 	.word	0xffffc280

000dc010 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>:
{
   dc010:	b530      	push	{r4, r5, lr}
   dc012:	4615      	mov	r5, r2
   dc014:	b085      	sub	sp, #20
    memset( params, 0, sizeof(mbedtls_asn1_buf) );
   dc016:	2200      	movs	r2, #0
   dc018:	e9c3 2200 	strd	r2, r2, [r3]
   dc01c:	609a      	str	r2, [r3, #8]
    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
   dc01e:	aa01      	add	r2, sp, #4
{
   dc020:	461c      	mov	r4, r3
    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
   dc022:	f7fa fb83 	bl	d672c <mbedtls_asn1_get_alg>
   dc026:	b118      	cbz	r0, dc030 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x20>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
   dc028:	f5a0 506a 	sub.w	r0, r0, #14976	; 0x3a80
}
   dc02c:	b005      	add	sp, #20
   dc02e:	bd30      	pop	{r4, r5, pc}
    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
   dc030:	4629      	mov	r1, r5
   dc032:	a801      	add	r0, sp, #4
   dc034:	f7fe f814 	bl	da060 <mbedtls_oid_get_pk_alg>
   dc038:	b960      	cbnz	r0, dc054 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x44>
    if( *pk_alg == MBEDTLS_PK_RSA &&
   dc03a:	782b      	ldrb	r3, [r5, #0]
   dc03c:	2b01      	cmp	r3, #1
   dc03e:	d1f5      	bne.n	dc02c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x1c>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
   dc040:	6823      	ldr	r3, [r4, #0]
    if( *pk_alg == MBEDTLS_PK_RSA &&
   dc042:	2b05      	cmp	r3, #5
   dc044:	d000      	beq.n	dc048 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x38>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
   dc046:	b93b      	cbnz	r3, dc058 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>
   dc048:	6862      	ldr	r2, [r4, #4]
        return( MBEDTLS_ERR_PK_INVALID_ALG );
   dc04a:	4b04      	ldr	r3, [pc, #16]	; (dc05c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
   dc04c:	2a00      	cmp	r2, #0
   dc04e:	bf18      	it	ne
   dc050:	4618      	movne	r0, r3
   dc052:	e7eb      	b.n	dc02c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x1c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
   dc054:	4802      	ldr	r0, [pc, #8]	; (dc060 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x50>)
   dc056:	e7e9      	b.n	dc02c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x1c>
        return( MBEDTLS_ERR_PK_INVALID_ALG );
   dc058:	4800      	ldr	r0, [pc, #0]	; (dc05c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
   dc05a:	e7e7      	b.n	dc02c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x1c>
   dc05c:	ffffc580 	.word	0xffffc580
   dc060:	ffffc380 	.word	0xffffc380

000dc064 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj>:
 * Parse a SEC1 encoded private EC key
 */
static int pk_parse_key_sec1_der( mbedtls_ecp_keypair *eck,
                                  const unsigned char *key,
                                  size_t keylen )
{
   dc064:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc066:	b08b      	sub	sp, #44	; 0x2c
   dc068:	4605      	mov	r5, r0
   dc06a:	4610      	mov	r0, r2
    int ret;
    int version, pubkey_done;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
   dc06c:	9106      	str	r1, [sp, #24]
     *      privateKey     OCTET STRING,
     *      parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,
     *      publicKey  [1] BIT STRING OPTIONAL
     *    }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dc06e:	2330      	movs	r3, #48	; 0x30
   dc070:	4401      	add	r1, r0
   dc072:	aa05      	add	r2, sp, #20
   dc074:	a806      	add	r0, sp, #24
   dc076:	f7fa fa83 	bl	d6580 <mbedtls_asn1_get_tag>
   dc07a:	b120      	cbz	r0, dc086 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x22>
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 1 ) ) == 0 )
        {
            end2 = p + len;

            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   dc07c:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
        mbedtls_ecp_keypair_free( eck );
        return( ret );
    }

    return( 0 );
}
   dc080:	4620      	mov	r0, r4
   dc082:	b00b      	add	sp, #44	; 0x2c
   dc084:	bdf0      	pop	{r4, r5, r6, r7, pc}
    end = p + len;
   dc086:	e9dd 3705 	ldrd	r3, r7, [sp, #20]
   dc08a:	441f      	add	r7, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
   dc08c:	aa04      	add	r2, sp, #16
   dc08e:	4639      	mov	r1, r7
   dc090:	a806      	add	r0, sp, #24
   dc092:	f7fa faa2 	bl	d65da <mbedtls_asn1_get_int>
   dc096:	2800      	cmp	r0, #0
   dc098:	d1f0      	bne.n	dc07c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x18>
    if( version != 1 )
   dc09a:	9b04      	ldr	r3, [sp, #16]
   dc09c:	2b01      	cmp	r3, #1
   dc09e:	f040 809a 	bne.w	dc1d6 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x172>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   dc0a2:	2304      	movs	r3, #4
   dc0a4:	aa05      	add	r2, sp, #20
   dc0a6:	4639      	mov	r1, r7
   dc0a8:	a806      	add	r0, sp, #24
   dc0aa:	f7fa fa69 	bl	d6580 <mbedtls_asn1_get_tag>
   dc0ae:	2800      	cmp	r0, #0
   dc0b0:	d1e4      	bne.n	dc07c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x18>
    if( ( ret = mbedtls_mpi_read_binary( &eck->d, p, len ) ) != 0 )
   dc0b2:	f105 067c 	add.w	r6, r5, #124	; 0x7c
   dc0b6:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   dc0ba:	4630      	mov	r0, r6
   dc0bc:	f004 fe91 	bl	e0de2 <mbedtls_mpi_read_binary>
   dc0c0:	4604      	mov	r4, r0
   dc0c2:	b128      	cbz	r0, dc0d0 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x6c>
        mbedtls_ecp_keypair_free( eck );
   dc0c4:	4628      	mov	r0, r5
   dc0c6:	f7fc ff94 	bl	d8ff2 <mbedtls_ecp_keypair_free>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   dc0ca:	f5a4 5474 	sub.w	r4, r4, #15616	; 0x3d00
   dc0ce:	e7d7      	b.n	dc080 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x1c>
    p += len;
   dc0d0:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   dc0d4:	4413      	add	r3, r2
    if( p != end )
   dc0d6:	42bb      	cmp	r3, r7
    p += len;
   dc0d8:	9306      	str	r3, [sp, #24]
    if( p != end )
   dc0da:	d06d      	beq.n	dc1b8 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x154>
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dc0dc:	23a0      	movs	r3, #160	; 0xa0
   dc0de:	aa05      	add	r2, sp, #20
   dc0e0:	4639      	mov	r1, r7
   dc0e2:	a806      	add	r0, sp, #24
   dc0e4:	f7fa fa4c 	bl	d6580 <mbedtls_asn1_get_tag>
   dc0e8:	4604      	mov	r4, r0
   dc0ea:	bb48      	cbnz	r0, dc140 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xdc>
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
   dc0ec:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
    if ( end - *p < 1 )
   dc0f0:	2a00      	cmp	r2, #0
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
   dc0f2:	eb03 0402 	add.w	r4, r3, r2
    if ( end - *p < 1 )
   dc0f6:	dd1f      	ble.n	dc138 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xd4>
    params->tag = **p;
   dc0f8:	781b      	ldrb	r3, [r3, #0]
   dc0fa:	9307      	str	r3, [sp, #28]
    if( params->tag != MBEDTLS_ASN1_OID
   dc0fc:	2b06      	cmp	r3, #6
   dc0fe:	d11d      	bne.n	dc13c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xd8>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &params->len, params->tag ) ) != 0 )
   dc100:	aa08      	add	r2, sp, #32
   dc102:	4621      	mov	r1, r4
   dc104:	a806      	add	r0, sp, #24
   dc106:	f7fa fa3b 	bl	d6580 <mbedtls_asn1_get_tag>
   dc10a:	b160      	cbz	r0, dc126 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xc2>
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
   dc10c:	f5b0 5474 	subs.w	r4, r0, #15616	; 0x3d00
   dc110:	d105      	bne.n	dc11e <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xba>
                ( ret = pk_use_ecparams( &params, &eck->grp )  ) != 0 )
   dc112:	4629      	mov	r1, r5
   dc114:	a807      	add	r0, sp, #28
   dc116:	f7ff fe67 	bl	dbde8 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group>
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
   dc11a:	4604      	mov	r4, r0
   dc11c:	b198      	cbz	r0, dc146 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xe2>
        mbedtls_ecp_keypair_free( eck );
   dc11e:	4628      	mov	r0, r5
   dc120:	f7fc ff67 	bl	d8ff2 <mbedtls_ecp_keypair_free>
        return( ret );
   dc124:	e7ac      	b.n	dc080 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x1c>
    params->p = *p;
   dc126:	9b06      	ldr	r3, [sp, #24]
    *p += params->len;
   dc128:	9a08      	ldr	r2, [sp, #32]
    params->p = *p;
   dc12a:	9309      	str	r3, [sp, #36]	; 0x24
    *p += params->len;
   dc12c:	4413      	add	r3, r2
    if( *p != end )
   dc12e:	429c      	cmp	r4, r3
    *p += params->len;
   dc130:	9306      	str	r3, [sp, #24]
    if( *p != end )
   dc132:	d0ee      	beq.n	dc112 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xae>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   dc134:	4c2a      	ldr	r4, [pc, #168]	; (dc1e0 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x17c>)
   dc136:	e7f2      	b.n	dc11e <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xba>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   dc138:	4c2a      	ldr	r4, [pc, #168]	; (dc1e4 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x180>)
   dc13a:	e7f0      	b.n	dc11e <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xba>
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   dc13c:	4c2a      	ldr	r4, [pc, #168]	; (dc1e8 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x184>)
                mbedtls_ecp_keypair_free( eck );
   dc13e:	e7ee      	b.n	dc11e <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xba>
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   dc140:	f110 0f62 	cmn.w	r0, #98	; 0x62
   dc144:	d1be      	bne.n	dc0c4 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x60>
    if( p != end )
   dc146:	9b06      	ldr	r3, [sp, #24]
   dc148:	42bb      	cmp	r3, r7
   dc14a:	d035      	beq.n	dc1b8 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x154>
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dc14c:	23a1      	movs	r3, #161	; 0xa1
   dc14e:	aa05      	add	r2, sp, #20
   dc150:	4639      	mov	r1, r7
   dc152:	a806      	add	r0, sp, #24
   dc154:	f7fa fa14 	bl	d6580 <mbedtls_asn1_get_tag>
   dc158:	4604      	mov	r4, r0
   dc15a:	bb50      	cbnz	r0, dc1b2 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x14e>
            end2 = p + len;
   dc15c:	e9dd 3405 	ldrd	r3, r4, [sp, #20]
   dc160:	441c      	add	r4, r3
            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
   dc162:	aa05      	add	r2, sp, #20
   dc164:	4621      	mov	r1, r4
   dc166:	a806      	add	r0, sp, #24
   dc168:	f7fa fa90 	bl	d668c <mbedtls_asn1_get_bitstring_null>
   dc16c:	2800      	cmp	r0, #0
   dc16e:	d185      	bne.n	dc07c <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x18>
            if( p + len != end2 )
   dc170:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   dc174:	4413      	add	r3, r2
   dc176:	429c      	cmp	r4, r3
   dc178:	d12f      	bne.n	dc1da <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x176>
    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
   dc17a:	f105 0188 	add.w	r1, r5, #136	; 0x88
   dc17e:	1aa3      	subs	r3, r4, r2
   dc180:	4628      	mov	r0, r5
   dc182:	9103      	str	r1, [sp, #12]
   dc184:	f7fd fb34 	bl	d97f0 <mbedtls_ecp_point_read_binary>
   dc188:	9903      	ldr	r1, [sp, #12]
   dc18a:	b910      	cbnz	r0, dc192 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x12e>
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
   dc18c:	4628      	mov	r0, r5
   dc18e:	f7fd fbb9 	bl	d9904 <mbedtls_ecp_check_pubkey>
    *p = (unsigned char *) end;
   dc192:	9406      	str	r4, [sp, #24]
            if( ( ret = pk_get_ecpubkey( &p, end2, eck ) ) == 0 )
   dc194:	b940      	cbnz	r0, dc1a8 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x144>
    if( ( ret = mbedtls_ecp_check_privkey( &eck->grp, &eck->d ) ) != 0 )
   dc196:	4631      	mov	r1, r6
   dc198:	4628      	mov	r0, r5
   dc19a:	f7fd fc69 	bl	d9a70 <mbedtls_ecp_check_privkey>
   dc19e:	4604      	mov	r4, r0
   dc1a0:	2800      	cmp	r0, #0
   dc1a2:	f43f af6d 	beq.w	dc080 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x1c>
   dc1a6:	e7ba      	b.n	dc11e <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0xba>
                if( ret != MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE )
   dc1a8:	f510 4f9d 	cmn.w	r0, #20096	; 0x4e80
   dc1ac:	d004      	beq.n	dc1b8 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x154>
                    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
   dc1ae:	4c0f      	ldr	r4, [pc, #60]	; (dc1ec <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x188>)
   dc1b0:	e766      	b.n	dc080 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x1c>
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   dc1b2:	f110 0f62 	cmn.w	r0, #98	; 0x62
   dc1b6:	d185      	bne.n	dc0c4 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x60>
        ( ret = mbedtls_ecp_mul( &eck->grp, &eck->Q, &eck->d, &eck->grp.G,
   dc1b8:	2300      	movs	r3, #0
   dc1ba:	e9cd 3300 	strd	r3, r3, [sp]
   dc1be:	4632      	mov	r2, r6
   dc1c0:	f105 0328 	add.w	r3, r5, #40	; 0x28
   dc1c4:	f105 0188 	add.w	r1, r5, #136	; 0x88
   dc1c8:	4628      	mov	r0, r5
   dc1ca:	f7fd fda9 	bl	d9d20 <mbedtls_ecp_mul>
    if( ! pubkey_done &&
   dc1ce:	4604      	mov	r4, r0
   dc1d0:	2800      	cmp	r0, #0
   dc1d2:	d0e0      	beq.n	dc196 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x132>
   dc1d4:	e776      	b.n	dc0c4 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x60>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
   dc1d6:	4c06      	ldr	r4, [pc, #24]	; (dc1f0 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x18c>)
   dc1d8:	e752      	b.n	dc080 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x1c>
                        MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   dc1da:	4c01      	ldr	r4, [pc, #4]	; (dc1e0 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x17c>)
   dc1dc:	e750      	b.n	dc080 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj+0x1c>
   dc1de:	bf00      	nop
   dc1e0:	ffffc29a 	.word	0xffffc29a
   dc1e4:	ffffc2a0 	.word	0xffffc2a0
   dc1e8:	ffffc29e 	.word	0xffffc29e
   dc1ec:	ffffc300 	.word	0xffffc300
   dc1f0:	ffffc280 	.word	0xffffc280

000dc1f4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>:
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
   dc1f4:	b530      	push	{r4, r5, lr}
   dc1f6:	b08b      	sub	sp, #44	; 0x2c
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
   dc1f8:	2300      	movs	r3, #0
{
   dc1fa:	4605      	mov	r5, r0
   dc1fc:	4610      	mov	r0, r2
    unsigned char *p = (unsigned char *) key;
   dc1fe:	9106      	str	r1, [sp, #24]
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
   dc200:	f88d 300f 	strb.w	r3, [sp, #15]
     *    PrivateKey ::= OCTET STRING
     *
     *  The PrivateKey OCTET STRING is a SEC1 ECPrivateKey
     */

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dc204:	4401      	add	r1, r0
   dc206:	2330      	movs	r3, #48	; 0x30
   dc208:	aa05      	add	r2, sp, #20
   dc20a:	a806      	add	r0, sp, #24
   dc20c:	f7fa f9b8 	bl	d6580 <mbedtls_asn1_get_tag>
   dc210:	b120      	cbz	r0, dc21c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x28>

    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   dc212:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
    } else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    return( 0 );
}
   dc216:	4620      	mov	r0, r4
   dc218:	b00b      	add	sp, #44	; 0x2c
   dc21a:	bd30      	pop	{r4, r5, pc}
    end = p + len;
   dc21c:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
   dc220:	aa04      	add	r2, sp, #16
    end = p + len;
   dc222:	4419      	add	r1, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
   dc224:	a806      	add	r0, sp, #24
   dc226:	9101      	str	r1, [sp, #4]
   dc228:	f7fa f9d7 	bl	d65da <mbedtls_asn1_get_int>
   dc22c:	9901      	ldr	r1, [sp, #4]
   dc22e:	2800      	cmp	r0, #0
   dc230:	d1ef      	bne.n	dc212 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x1e>
    if( version != 0 )
   dc232:	9b04      	ldr	r3, [sp, #16]
   dc234:	2b00      	cmp	r3, #0
   dc236:	d140      	bne.n	dc2ba <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xc6>
    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
   dc238:	ab07      	add	r3, sp, #28
   dc23a:	f10d 020f 	add.w	r2, sp, #15
   dc23e:	a806      	add	r0, sp, #24
   dc240:	9101      	str	r1, [sp, #4]
   dc242:	f7ff fee5 	bl	dc010 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
   dc246:	9901      	ldr	r1, [sp, #4]
   dc248:	2800      	cmp	r0, #0
   dc24a:	d1e2      	bne.n	dc212 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x1e>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   dc24c:	2304      	movs	r3, #4
   dc24e:	aa05      	add	r2, sp, #20
   dc250:	a806      	add	r0, sp, #24
   dc252:	f7fa f995 	bl	d6580 <mbedtls_asn1_get_tag>
   dc256:	2800      	cmp	r0, #0
   dc258:	d1db      	bne.n	dc212 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x1e>
    if( len < 1 )
   dc25a:	9b05      	ldr	r3, [sp, #20]
   dc25c:	b37b      	cbz	r3, dc2be <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xca>
    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
   dc25e:	f89d 000f 	ldrb.w	r0, [sp, #15]
   dc262:	f002 fcc9 	bl	debf8 <mbedtls_pk_info_from_type>
   dc266:	4601      	mov	r1, r0
   dc268:	b908      	cbnz	r0, dc26e <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x7a>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
   dc26a:	4c16      	ldr	r4, [pc, #88]	; (dc2c4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xd0>)
   dc26c:	e7d3      	b.n	dc216 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x22>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
   dc26e:	4628      	mov	r0, r5
   dc270:	f002 fcce 	bl	dec10 <mbedtls_pk_setup>
   dc274:	4604      	mov	r4, r0
   dc276:	2800      	cmp	r0, #0
   dc278:	d1cd      	bne.n	dc216 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x22>
    if( pk_alg == MBEDTLS_PK_RSA )
   dc27a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   dc27e:	2b01      	cmp	r3, #1
   dc280:	d10b      	bne.n	dc29a <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xa6>
        if( ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), p, len ) ) != 0 )
   dc282:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   dc286:	6868      	ldr	r0, [r5, #4]
   dc288:	f7ff fdcc 	bl	dbe24 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
   dc28c:	4604      	mov	r4, r0
   dc28e:	2800      	cmp	r0, #0
   dc290:	d0c1      	beq.n	dc216 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x22>
            mbedtls_pk_free( pk );
   dc292:	4628      	mov	r0, r5
   dc294:	f002 fca0 	bl	debd8 <mbedtls_pk_free>
            return( ret );
   dc298:	e7bd      	b.n	dc216 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x22>
    if( pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH )
   dc29a:	3b02      	subs	r3, #2
   dc29c:	2b01      	cmp	r3, #1
   dc29e:	d8e4      	bhi.n	dc26a <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x76>
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
   dc2a0:	6869      	ldr	r1, [r5, #4]
   dc2a2:	a807      	add	r0, sp, #28
   dc2a4:	f7ff fda0 	bl	dbde8 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group>
   dc2a8:	4604      	mov	r4, r0
   dc2aa:	2800      	cmp	r0, #0
   dc2ac:	d1f1      	bne.n	dc292 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9e>
            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ), p, len )  ) != 0 )
   dc2ae:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   dc2b2:	6868      	ldr	r0, [r5, #4]
   dc2b4:	f7ff fed6 	bl	dc064 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj>
   dc2b8:	e7e8      	b.n	dc28c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x98>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );
   dc2ba:	4c03      	ldr	r4, [pc, #12]	; (dc2c8 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xd4>)
   dc2bc:	e7ab      	b.n	dc216 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x22>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   dc2be:	4c03      	ldr	r4, [pc, #12]	; (dc2cc <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xd8>)
   dc2c0:	e7a9      	b.n	dc216 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x22>
   dc2c2:	bf00      	nop
   dc2c4:	ffffc380 	.word	0xffffc380
   dc2c8:	ffffc280 	.word	0xffffc280
   dc2cc:	ffffc2a0 	.word	0xffffc2a0

000dc2d0 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>:
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
static int pk_parse_key_pkcs8_encrypted_der(
                                    mbedtls_pk_context *pk,
                                    unsigned char *key, size_t keylen,
                                    const unsigned char *pwd, size_t pwdlen )
{
   dc2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   dc2d2:	b093      	sub	sp, #76	; 0x4c
   dc2d4:	4604      	mov	r4, r0
   dc2d6:	9e18      	ldr	r6, [sp, #96]	; 0x60
#if defined(MBEDTLS_PKCS12_C)
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_md_type_t md_alg;
#endif

    p = key;
   dc2d8:	910b      	str	r1, [sp, #44]	; 0x2c
{
   dc2da:	461d      	mov	r5, r3
    end = p + keylen;
   dc2dc:	4411      	add	r1, r2

    if( pwdlen == 0 )
   dc2de:	2e00      	cmp	r6, #0
   dc2e0:	d070      	beq.n	dc3c4 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf4>
     *  EncryptedData ::= OCTET STRING
     *
     *  The EncryptedData OCTET STRING is a PKCS#8 PrivateKeyInfo
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   dc2e2:	2330      	movs	r3, #48	; 0x30
   dc2e4:	aa0a      	add	r2, sp, #40	; 0x28
   dc2e6:	a80b      	add	r0, sp, #44	; 0x2c
   dc2e8:	f7fa f94a 	bl	d6580 <mbedtls_asn1_get_tag>
   dc2ec:	b118      	cbz	r0, dc2f6 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x26>

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   dc2ee:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00

    if( decrypted == 0 )
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );

    return( pk_parse_key_pkcs8_unencrypted_der( pk, buf, len ) );
}
   dc2f2:	b013      	add	sp, #76	; 0x4c
   dc2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    end = p + len;
   dc2f6:	e9dd 310a 	ldrd	r3, r1, [sp, #40]	; 0x28
    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
   dc2fa:	aa0c      	add	r2, sp, #48	; 0x30
    end = p + len;
   dc2fc:	4419      	add	r1, r3
    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
   dc2fe:	a80b      	add	r0, sp, #44	; 0x2c
   dc300:	ab0f      	add	r3, sp, #60	; 0x3c
   dc302:	9107      	str	r1, [sp, #28]
   dc304:	f7fa fa12 	bl	d672c <mbedtls_asn1_get_alg>
   dc308:	9907      	ldr	r1, [sp, #28]
   dc30a:	2800      	cmp	r0, #0
   dc30c:	d1ef      	bne.n	dc2ee <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x1e>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   dc30e:	2304      	movs	r3, #4
   dc310:	aa0a      	add	r2, sp, #40	; 0x28
   dc312:	a80b      	add	r0, sp, #44	; 0x2c
   dc314:	f7fa f934 	bl	d6580 <mbedtls_asn1_get_tag>
   dc318:	2800      	cmp	r0, #0
   dc31a:	d1e8      	bne.n	dc2ee <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x1e>
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
   dc31c:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   dc320:	f10d 0226 	add.w	r2, sp, #38	; 0x26
   dc324:	a80c      	add	r0, sp, #48	; 0x30
    buf = p;
   dc326:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
   dc328:	f7fd ff30 	bl	da18c <mbedtls_oid_get_pkcs12_pbe_alg>
   dc32c:	4601      	mov	r1, r0
   dc32e:	b998      	cbnz	r0, dc358 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x88>
        if( ( ret = mbedtls_pkcs12_pbe( &pbe_params, MBEDTLS_PKCS12_PBE_DECRYPT,
   dc330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc332:	9303      	str	r3, [sp, #12]
   dc334:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dc336:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   dc33a:	9704      	str	r7, [sp, #16]
   dc33c:	e9cd 6301 	strd	r6, r3, [sp, #4]
   dc340:	9500      	str	r5, [sp, #0]
   dc342:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   dc346:	a80f      	add	r0, sp, #60	; 0x3c
   dc348:	f006 fd52 	bl	e2df0 <mbedtls_pkcs12_pbe>
   dc34c:	b1e8      	cbz	r0, dc38a <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xba>
            if( ret == MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH )
   dc34e:	f510 5ff0 	cmn.w	r0, #7680	; 0x1e00
   dc352:	d1ce      	bne.n	dc2f2 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x22>
                return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
   dc354:	481d      	ldr	r0, [pc, #116]	; (dc3cc <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xfc>)
   dc356:	e7cc      	b.n	dc2f2 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x22>
    else if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS12_PBE_SHA1_RC4_128, &pbe_alg_oid ) == 0 )
   dc358:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   dc35a:	2a0a      	cmp	r2, #10
   dc35c:	d11b      	bne.n	dc396 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xc6>
   dc35e:	990e      	ldr	r1, [sp, #56]	; 0x38
   dc360:	481b      	ldr	r0, [pc, #108]	; (dc3d0 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x100>)
   dc362:	f00c fd35 	bl	e8dd0 <memcmp>
   dc366:	4601      	mov	r1, r0
   dc368:	2800      	cmp	r0, #0
   dc36a:	d12d      	bne.n	dc3c8 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf8>
        if( ( ret = mbedtls_pkcs12_pbe_sha1_rc4_128( &pbe_params,
   dc36c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc36e:	9301      	str	r3, [sp, #4]
   dc370:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dc372:	9300      	str	r3, [sp, #0]
   dc374:	9702      	str	r7, [sp, #8]
   dc376:	4633      	mov	r3, r6
   dc378:	462a      	mov	r2, r5
   dc37a:	a80f      	add	r0, sp, #60	; 0x3c
   dc37c:	f006 fc2c 	bl	e2bd8 <mbedtls_pkcs12_pbe_sha1_rc4_128>
   dc380:	2800      	cmp	r0, #0
   dc382:	d1b6      	bne.n	dc2f2 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x22>
        if( *buf != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   dc384:	783b      	ldrb	r3, [r7, #0]
   dc386:	2b30      	cmp	r3, #48	; 0x30
   dc388:	d1e4      	bne.n	dc354 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x84>
    return( pk_parse_key_pkcs8_unencrypted_der( pk, buf, len ) );
   dc38a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dc38c:	4639      	mov	r1, r7
   dc38e:	4620      	mov	r0, r4
   dc390:	f7ff ff30 	bl	dc1f4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
   dc394:	e7ad      	b.n	dc2f2 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x22>
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBES2, &pbe_alg_oid ) == 0 )
   dc396:	2a09      	cmp	r2, #9
   dc398:	d116      	bne.n	dc3c8 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf8>
   dc39a:	990e      	ldr	r1, [sp, #56]	; 0x38
   dc39c:	480d      	ldr	r0, [pc, #52]	; (dc3d4 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x104>)
   dc39e:	f00c fd17 	bl	e8dd0 <memcmp>
   dc3a2:	4601      	mov	r1, r0
   dc3a4:	b980      	cbnz	r0, dc3c8 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf8>
        if( ( ret = mbedtls_pkcs5_pbes2( &pbe_params, MBEDTLS_PKCS5_DECRYPT, pwd, pwdlen,
   dc3a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dc3a8:	9301      	str	r3, [sp, #4]
   dc3aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dc3ac:	9300      	str	r3, [sp, #0]
   dc3ae:	9702      	str	r7, [sp, #8]
   dc3b0:	4633      	mov	r3, r6
   dc3b2:	462a      	mov	r2, r5
   dc3b4:	a80f      	add	r0, sp, #60	; 0x3c
   dc3b6:	f7fe ffa7 	bl	db308 <mbedtls_pkcs5_pbes2>
   dc3ba:	2800      	cmp	r0, #0
   dc3bc:	d0e5      	beq.n	dc38a <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xba>
            if( ret == MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH )
   dc3be:	f510 5f38 	cmn.w	r0, #11776	; 0x2e00
   dc3c2:	e7c6      	b.n	dc352 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x82>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
   dc3c4:	4804      	ldr	r0, [pc, #16]	; (dc3d8 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x108>)
   dc3c6:	e794      	b.n	dc2f2 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x22>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
   dc3c8:	4804      	ldr	r0, [pc, #16]	; (dc3dc <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x10c>)
   dc3ca:	e792      	b.n	dc2f2 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x22>
   dc3cc:	ffffc480 	.word	0xffffc480
   dc3d0:	000eca28 	.word	0x000eca28
   dc3d4:	000eca33 	.word	0x000eca33
   dc3d8:	ffffc400 	.word	0xffffc400
   dc3dc:	ffffc680 	.word	0xffffc680

000dc3e0 <mbedtls_pk_parse_subpubkey>:
{
   dc3e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dc3e4:	b089      	sub	sp, #36	; 0x24
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
   dc3e6:	2300      	movs	r3, #0
{
   dc3e8:	4690      	mov	r8, r2
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
   dc3ea:	f88d 300f 	strb.w	r3, [sp, #15]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   dc3ee:	aa04      	add	r2, sp, #16
   dc3f0:	2330      	movs	r3, #48	; 0x30
{
   dc3f2:	4606      	mov	r6, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   dc3f4:	f7fa f8c4 	bl	d6580 <mbedtls_asn1_get_tag>
   dc3f8:	b128      	cbz	r0, dc406 <mbedtls_pk_parse_subpubkey+0x26>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   dc3fa:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
}
   dc3fe:	4620      	mov	r0, r4
   dc400:	b009      	add	sp, #36	; 0x24
   dc402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    end = *p + len;
   dc406:	9b04      	ldr	r3, [sp, #16]
   dc408:	6837      	ldr	r7, [r6, #0]
   dc40a:	441f      	add	r7, r3
    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
   dc40c:	f10d 020f 	add.w	r2, sp, #15
   dc410:	ab05      	add	r3, sp, #20
   dc412:	4639      	mov	r1, r7
   dc414:	4630      	mov	r0, r6
   dc416:	f7ff fdfb 	bl	dc010 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
   dc41a:	4604      	mov	r4, r0
   dc41c:	2800      	cmp	r0, #0
   dc41e:	d1ee      	bne.n	dc3fe <mbedtls_pk_parse_subpubkey+0x1e>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
   dc420:	aa04      	add	r2, sp, #16
   dc422:	4639      	mov	r1, r7
   dc424:	4630      	mov	r0, r6
   dc426:	f7fa f931 	bl	d668c <mbedtls_asn1_get_bitstring_null>
   dc42a:	b110      	cbz	r0, dc432 <mbedtls_pk_parse_subpubkey+0x52>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
   dc42c:	f5a0 546c 	sub.w	r4, r0, #15104	; 0x3b00
   dc430:	e7e5      	b.n	dc3fe <mbedtls_pk_parse_subpubkey+0x1e>
    if( *p + len != end )
   dc432:	6833      	ldr	r3, [r6, #0]
   dc434:	9a04      	ldr	r2, [sp, #16]
   dc436:	4413      	add	r3, r2
   dc438:	429f      	cmp	r7, r3
   dc43a:	d144      	bne.n	dc4c6 <mbedtls_pk_parse_subpubkey+0xe6>
    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
   dc43c:	f89d 000f 	ldrb.w	r0, [sp, #15]
   dc440:	f002 fbda 	bl	debf8 <mbedtls_pk_info_from_type>
   dc444:	4601      	mov	r1, r0
   dc446:	2800      	cmp	r0, #0
   dc448:	d03f      	beq.n	dc4ca <mbedtls_pk_parse_subpubkey+0xea>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
   dc44a:	4640      	mov	r0, r8
   dc44c:	f002 fbe0 	bl	dec10 <mbedtls_pk_setup>
   dc450:	4604      	mov	r4, r0
   dc452:	2800      	cmp	r0, #0
   dc454:	d1d3      	bne.n	dc3fe <mbedtls_pk_parse_subpubkey+0x1e>
    if( pk_alg == MBEDTLS_PK_RSA )
   dc456:	f89d 300f 	ldrb.w	r3, [sp, #15]
   dc45a:	2b01      	cmp	r3, #1
   dc45c:	d10c      	bne.n	dc478 <mbedtls_pk_parse_subpubkey+0x98>
        ret = pk_get_rsapubkey( p, end, mbedtls_pk_rsa( *pk ) );
   dc45e:	f8d8 2004 	ldr.w	r2, [r8, #4]
   dc462:	4639      	mov	r1, r7
   dc464:	4630      	mov	r0, r6
   dc466:	f7ff fc5d 	bl	dbd24 <_ZL16pk_get_rsapubkeyPPhPKhP19mbedtls_rsa_context>
    if( ret == 0 && *p != end )
   dc46a:	4605      	mov	r5, r0
   dc46c:	b320      	cbz	r0, dc4b8 <mbedtls_pk_parse_subpubkey+0xd8>
        mbedtls_pk_free( pk );
   dc46e:	4640      	mov	r0, r8
   dc470:	f002 fbb2 	bl	debd8 <mbedtls_pk_free>
   dc474:	462c      	mov	r4, r5
   dc476:	e7c2      	b.n	dc3fe <mbedtls_pk_parse_subpubkey+0x1e>
    if( pk_alg == MBEDTLS_PK_ECKEY_DH || pk_alg == MBEDTLS_PK_ECKEY )
   dc478:	3b02      	subs	r3, #2
   dc47a:	2b01      	cmp	r3, #1
   dc47c:	d821      	bhi.n	dc4c2 <mbedtls_pk_parse_subpubkey+0xe2>
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
   dc47e:	f8d8 1004 	ldr.w	r1, [r8, #4]
   dc482:	a805      	add	r0, sp, #20
   dc484:	f7ff fcb0 	bl	dbde8 <_ZL15pk_use_ecparamsPK16mbedtls_asn1_bufP17mbedtls_ecp_group>
        if( ret == 0 )
   dc488:	4605      	mov	r5, r0
   dc48a:	2800      	cmp	r0, #0
   dc48c:	d1ef      	bne.n	dc46e <mbedtls_pk_parse_subpubkey+0x8e>
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
   dc48e:	f8d8 9004 	ldr.w	r9, [r8, #4]
    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
   dc492:	6832      	ldr	r2, [r6, #0]
   dc494:	f109 0188 	add.w	r1, r9, #136	; 0x88
   dc498:	1abb      	subs	r3, r7, r2
   dc49a:	4648      	mov	r0, r9
   dc49c:	9101      	str	r1, [sp, #4]
   dc49e:	f7fd f9a7 	bl	d97f0 <mbedtls_ecp_point_read_binary>
   dc4a2:	9901      	ldr	r1, [sp, #4]
   dc4a4:	4605      	mov	r5, r0
   dc4a6:	b918      	cbnz	r0, dc4b0 <mbedtls_pk_parse_subpubkey+0xd0>
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
   dc4a8:	4648      	mov	r0, r9
   dc4aa:	f7fd fa2b 	bl	d9904 <mbedtls_ecp_check_pubkey>
   dc4ae:	4605      	mov	r5, r0
    *p = (unsigned char *) end;
   dc4b0:	6037      	str	r7, [r6, #0]
    if( ret == 0 && *p != end )
   dc4b2:	2d00      	cmp	r5, #0
   dc4b4:	d0a3      	beq.n	dc3fe <mbedtls_pk_parse_subpubkey+0x1e>
   dc4b6:	e7da      	b.n	dc46e <mbedtls_pk_parse_subpubkey+0x8e>
   dc4b8:	6833      	ldr	r3, [r6, #0]
   dc4ba:	42bb      	cmp	r3, r7
   dc4bc:	d09f      	beq.n	dc3fe <mbedtls_pk_parse_subpubkey+0x1e>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
   dc4be:	4d04      	ldr	r5, [pc, #16]	; (dc4d0 <mbedtls_pk_parse_subpubkey+0xf0>)
   dc4c0:	e7d5      	b.n	dc46e <mbedtls_pk_parse_subpubkey+0x8e>
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
   dc4c2:	4d04      	ldr	r5, [pc, #16]	; (dc4d4 <mbedtls_pk_parse_subpubkey+0xf4>)
   dc4c4:	e7d3      	b.n	dc46e <mbedtls_pk_parse_subpubkey+0x8e>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   dc4c6:	4c02      	ldr	r4, [pc, #8]	; (dc4d0 <mbedtls_pk_parse_subpubkey+0xf0>)
   dc4c8:	e799      	b.n	dc3fe <mbedtls_pk_parse_subpubkey+0x1e>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
   dc4ca:	4c02      	ldr	r4, [pc, #8]	; (dc4d4 <mbedtls_pk_parse_subpubkey+0xf4>)
   dc4cc:	e797      	b.n	dc3fe <mbedtls_pk_parse_subpubkey+0x1e>
   dc4ce:	bf00      	nop
   dc4d0:	ffffc49a 	.word	0xffffc49a
   dc4d4:	ffffc380 	.word	0xffffc380

000dc4d8 <mbedtls_pk_parse_key>:
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
   dc4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc4dc:	b089      	sub	sp, #36	; 0x24
   dc4de:	4605      	mov	r5, r0
   dc4e0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   dc4e4:	460e      	mov	r6, r1
   dc4e6:	4698      	mov	r8, r3
    size_t len;
    mbedtls_pem_context pem;
#endif

    PK_VALIDATE_RET( pk != NULL );
    if( keylen == 0 )
   dc4e8:	4617      	mov	r7, r2
   dc4ea:	2a00      	cmp	r2, #0
   dc4ec:	f000 80ea 	beq.w	dc6c4 <mbedtls_pk_parse_key+0x1ec>
#if defined(MBEDTLS_PEM_PARSE_C)
   mbedtls_pem_init( &pem );

#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
   dc4f0:	f107 3bff 	add.w	fp, r7, #4294967295
   mbedtls_pem_init( &pem );
   dc4f4:	a805      	add	r0, sp, #20
   dc4f6:	f007 fced 	bl	e3ed4 <mbedtls_pem_init>
    if( key[keylen - 1] != '\0' )
   dc4fa:	f816 300b 	ldrb.w	r3, [r6, fp]
   dc4fe:	2b00      	cmp	r3, #0
   dc500:	f040 808f 	bne.w	dc622 <mbedtls_pk_parse_key+0x14a>
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
   dc504:	f10d 0a10 	add.w	sl, sp, #16
   dc508:	e9cd 9a01 	strd	r9, sl, [sp, #4]
   dc50c:	4a76      	ldr	r2, [pc, #472]	; (dc6e8 <mbedtls_pk_parse_key+0x210>)
   dc50e:	4977      	ldr	r1, [pc, #476]	; (dc6ec <mbedtls_pk_parse_key+0x214>)
   dc510:	f8cd 8000 	str.w	r8, [sp]
   dc514:	4633      	mov	r3, r6
   dc516:	a805      	add	r0, sp, #20
   dc518:	f007 fce2 	bl	e3ee0 <mbedtls_pem_read_buffer>
                               "-----BEGIN RSA PRIVATE KEY-----",
                               "-----END RSA PRIVATE KEY-----",
                               key, pwd, pwdlen, &len );

    if( ret == 0 )
   dc51c:	4604      	mov	r4, r0
   dc51e:	b9b0      	cbnz	r0, dc54e <mbedtls_pk_parse_key+0x76>
    {
        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
   dc520:	2001      	movs	r0, #1
   dc522:	f002 fb69 	bl	debf8 <mbedtls_pk_info_from_type>
   dc526:	4601      	mov	r1, r0
        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
   dc528:	4628      	mov	r0, r5
   dc52a:	f002 fb71 	bl	dec10 <mbedtls_pk_setup>
   dc52e:	4604      	mov	r4, r0
   dc530:	b930      	cbnz	r0, dc540 <mbedtls_pk_parse_key+0x68>
            ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ),
   dc532:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
   dc536:	6868      	ldr	r0, [r5, #4]
   dc538:	f7ff fc74 	bl	dbe24 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
                               "-----BEGIN ENCRYPTED PRIVATE KEY-----",
                               "-----END ENCRYPTED PRIVATE KEY-----",
                               key, NULL, 0, &len );
    if( ret == 0 )
    {
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
   dc53c:	4604      	mov	r4, r0
   dc53e:	b110      	cbz	r0, dc546 <mbedtls_pk_parse_key+0x6e>
                                                      pem.buf, pem.buflen,
                                                      pwd, pwdlen ) ) != 0 )
        {
            mbedtls_pk_free( pk );
   dc540:	4628      	mov	r0, r5
   dc542:	f002 fb49 	bl	debd8 <mbedtls_pk_free>
        }

        mbedtls_pem_free( &pem );
   dc546:	a805      	add	r0, sp, #20
   dc548:	f007 fd54 	bl	e3ff4 <mbedtls_pem_free>
        return( ret );
   dc54c:	e003      	b.n	dc556 <mbedtls_pk_parse_key+0x7e>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
   dc54e:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
   dc552:	d104      	bne.n	dc55e <mbedtls_pk_parse_key+0x86>
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
   dc554:	4c66      	ldr	r4, [pc, #408]	; (dc6f0 <mbedtls_pk_parse_key+0x218>)
     * twice, once here and once by the caller, but this is
     * also ok and in line with the mbedtls_pk_free() calls
     * on failed PEM parsing attempts. */

    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
}
   dc556:	4620      	mov	r0, r4
   dc558:	b009      	add	sp, #36	; 0x24
   dc55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
   dc55e:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
   dc562:	d101      	bne.n	dc568 <mbedtls_pk_parse_key+0x90>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
   dc564:	4c63      	ldr	r4, [pc, #396]	; (dc6f4 <mbedtls_pk_parse_key+0x21c>)
   dc566:	e7f6      	b.n	dc556 <mbedtls_pk_parse_key+0x7e>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   dc568:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   dc56c:	d1f3      	bne.n	dc556 <mbedtls_pk_parse_key+0x7e>
    if( key[keylen - 1] != '\0' )
   dc56e:	f816 300b 	ldrb.w	r3, [r6, fp]
   dc572:	2b00      	cmp	r3, #0
   dc574:	d155      	bne.n	dc622 <mbedtls_pk_parse_key+0x14a>
        ret = mbedtls_pem_read_buffer( &pem,
   dc576:	e9cd 9a01 	strd	r9, sl, [sp, #4]
   dc57a:	4a5f      	ldr	r2, [pc, #380]	; (dc6f8 <mbedtls_pk_parse_key+0x220>)
   dc57c:	495f      	ldr	r1, [pc, #380]	; (dc6fc <mbedtls_pk_parse_key+0x224>)
   dc57e:	f8cd 8000 	str.w	r8, [sp]
   dc582:	4633      	mov	r3, r6
   dc584:	a805      	add	r0, sp, #20
   dc586:	f007 fcab 	bl	e3ee0 <mbedtls_pem_read_buffer>
    if( ret == 0 )
   dc58a:	4604      	mov	r4, r0
   dc58c:	b978      	cbnz	r0, dc5ae <mbedtls_pk_parse_key+0xd6>
        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );
   dc58e:	2002      	movs	r0, #2
   dc590:	f002 fb32 	bl	debf8 <mbedtls_pk_info_from_type>
   dc594:	4601      	mov	r1, r0
        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
   dc596:	4628      	mov	r0, r5
   dc598:	f002 fb3a 	bl	dec10 <mbedtls_pk_setup>
   dc59c:	4604      	mov	r4, r0
   dc59e:	2800      	cmp	r0, #0
   dc5a0:	d1ce      	bne.n	dc540 <mbedtls_pk_parse_key+0x68>
            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
   dc5a2:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
   dc5a6:	6868      	ldr	r0, [r5, #4]
   dc5a8:	f7ff fd5c 	bl	dc064 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj>
   dc5ac:	e7c6      	b.n	dc53c <mbedtls_pk_parse_key+0x64>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
   dc5ae:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
   dc5b2:	d0cf      	beq.n	dc554 <mbedtls_pk_parse_key+0x7c>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
   dc5b4:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
   dc5b8:	d0d4      	beq.n	dc564 <mbedtls_pk_parse_key+0x8c>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   dc5ba:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   dc5be:	d1ca      	bne.n	dc556 <mbedtls_pk_parse_key+0x7e>
    if( key[keylen - 1] != '\0' )
   dc5c0:	f816 300b 	ldrb.w	r3, [r6, fp]
   dc5c4:	bb6b      	cbnz	r3, dc622 <mbedtls_pk_parse_key+0x14a>
        ret = mbedtls_pem_read_buffer( &pem,
   dc5c6:	e9cd 3a01 	strd	r3, sl, [sp, #4]
   dc5ca:	9300      	str	r3, [sp, #0]
   dc5cc:	4a4c      	ldr	r2, [pc, #304]	; (dc700 <mbedtls_pk_parse_key+0x228>)
   dc5ce:	494d      	ldr	r1, [pc, #308]	; (dc704 <mbedtls_pk_parse_key+0x22c>)
   dc5d0:	4633      	mov	r3, r6
   dc5d2:	a805      	add	r0, sp, #20
   dc5d4:	f007 fc84 	bl	e3ee0 <mbedtls_pem_read_buffer>
    if( ret == 0 )
   dc5d8:	4604      	mov	r4, r0
   dc5da:	b928      	cbnz	r0, dc5e8 <mbedtls_pk_parse_key+0x110>
        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
   dc5dc:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
   dc5e0:	4628      	mov	r0, r5
   dc5e2:	f7ff fe07 	bl	dc1f4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
   dc5e6:	e7a9      	b.n	dc53c <mbedtls_pk_parse_key+0x64>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   dc5e8:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   dc5ec:	d1b3      	bne.n	dc556 <mbedtls_pk_parse_key+0x7e>
    if( key[keylen - 1] != '\0' )
   dc5ee:	f816 300b 	ldrb.w	r3, [r6, fp]
   dc5f2:	b9b3      	cbnz	r3, dc622 <mbedtls_pk_parse_key+0x14a>
        ret = mbedtls_pem_read_buffer( &pem,
   dc5f4:	e9cd 3a01 	strd	r3, sl, [sp, #4]
   dc5f8:	9300      	str	r3, [sp, #0]
   dc5fa:	4a43      	ldr	r2, [pc, #268]	; (dc708 <mbedtls_pk_parse_key+0x230>)
   dc5fc:	4943      	ldr	r1, [pc, #268]	; (dc70c <mbedtls_pk_parse_key+0x234>)
   dc5fe:	4633      	mov	r3, r6
   dc600:	a805      	add	r0, sp, #20
   dc602:	f007 fc6d 	bl	e3ee0 <mbedtls_pem_read_buffer>
    if( ret == 0 )
   dc606:	4604      	mov	r4, r0
   dc608:	b940      	cbnz	r0, dc61c <mbedtls_pk_parse_key+0x144>
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
   dc60a:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
   dc60e:	f8cd 9000 	str.w	r9, [sp]
   dc612:	4643      	mov	r3, r8
   dc614:	4628      	mov	r0, r5
   dc616:	f7ff fe5b 	bl	dc2d0 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>
   dc61a:	e78f      	b.n	dc53c <mbedtls_pk_parse_key+0x64>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   dc61c:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   dc620:	d199      	bne.n	dc556 <mbedtls_pk_parse_key+0x7e>
        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
   dc622:	4639      	mov	r1, r7
   dc624:	2001      	movs	r0, #1
   dc626:	f00c fb69 	bl	e8cfc <calloc>
   dc62a:	4604      	mov	r4, r0
   dc62c:	b908      	cbnz	r0, dc632 <mbedtls_pk_parse_key+0x15a>
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );
   dc62e:	4c38      	ldr	r4, [pc, #224]	; (dc710 <mbedtls_pk_parse_key+0x238>)
   dc630:	e791      	b.n	dc556 <mbedtls_pk_parse_key+0x7e>
        memcpy( key_copy, key, keylen );
   dc632:	463a      	mov	r2, r7
   dc634:	4631      	mov	r1, r6
   dc636:	f00c fbd9 	bl	e8dec <memcpy>
        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
   dc63a:	4643      	mov	r3, r8
   dc63c:	463a      	mov	r2, r7
   dc63e:	4621      	mov	r1, r4
   dc640:	f8cd 9000 	str.w	r9, [sp]
   dc644:	4628      	mov	r0, r5
   dc646:	f7ff fe43 	bl	dc2d0 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>
        mbedtls_platform_zeroize( key_copy, keylen );
   dc64a:	4639      	mov	r1, r7
        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
   dc64c:	4680      	mov	r8, r0
        mbedtls_platform_zeroize( key_copy, keylen );
   dc64e:	4620      	mov	r0, r4
   dc650:	f006 fab8 	bl	e2bc4 <mbedtls_platform_zeroize>
        mbedtls_free( key_copy );
   dc654:	4620      	mov	r0, r4
   dc656:	f009 f9a7 	bl	e59a8 <free>
    if( ret == 0 )
   dc65a:	f1b8 0f00 	cmp.w	r8, #0
   dc65e:	d101      	bne.n	dc664 <mbedtls_pk_parse_key+0x18c>
        return( 0 );
   dc660:	2400      	movs	r4, #0
   dc662:	e778      	b.n	dc556 <mbedtls_pk_parse_key+0x7e>
    mbedtls_pk_free( pk );
   dc664:	4628      	mov	r0, r5
   dc666:	f002 fab7 	bl	debd8 <mbedtls_pk_free>
    mbedtls_pk_init( pk );
   dc66a:	4628      	mov	r0, r5
   dc66c:	f002 fab0 	bl	debd0 <mbedtls_pk_init>
    if( ret == MBEDTLS_ERR_PK_PASSWORD_MISMATCH )
   dc670:	f518 5f6e 	cmn.w	r8, #15232	; 0x3b80
   dc674:	f43f af6e 	beq.w	dc554 <mbedtls_pk_parse_key+0x7c>
    if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk, key, keylen ) ) == 0 )
   dc678:	463a      	mov	r2, r7
   dc67a:	4631      	mov	r1, r6
   dc67c:	4628      	mov	r0, r5
   dc67e:	f7ff fdb9 	bl	dc1f4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
   dc682:	2800      	cmp	r0, #0
   dc684:	d0ec      	beq.n	dc660 <mbedtls_pk_parse_key+0x188>
    mbedtls_pk_free( pk );
   dc686:	4628      	mov	r0, r5
   dc688:	f002 faa6 	bl	debd8 <mbedtls_pk_free>
    mbedtls_pk_init( pk );
   dc68c:	4628      	mov	r0, r5
   dc68e:	f002 fa9f 	bl	debd0 <mbedtls_pk_init>
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
   dc692:	2001      	movs	r0, #1
   dc694:	f002 fab0 	bl	debf8 <mbedtls_pk_info_from_type>
   dc698:	4601      	mov	r1, r0
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
   dc69a:	4628      	mov	r0, r5
   dc69c:	f002 fab8 	bl	dec10 <mbedtls_pk_setup>
   dc6a0:	b190      	cbz	r0, dc6c8 <mbedtls_pk_parse_key+0x1f0>
    mbedtls_pk_free( pk );
   dc6a2:	4628      	mov	r0, r5
   dc6a4:	f002 fa98 	bl	debd8 <mbedtls_pk_free>
    mbedtls_pk_init( pk );
   dc6a8:	4628      	mov	r0, r5
   dc6aa:	f002 fa91 	bl	debd0 <mbedtls_pk_init>
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );
   dc6ae:	2002      	movs	r0, #2
   dc6b0:	f002 faa2 	bl	debf8 <mbedtls_pk_info_from_type>
   dc6b4:	4601      	mov	r1, r0
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
   dc6b6:	4628      	mov	r0, r5
   dc6b8:	f002 faaa 	bl	dec10 <mbedtls_pk_setup>
   dc6bc:	b160      	cbz	r0, dc6d8 <mbedtls_pk_parse_key+0x200>
    mbedtls_pk_free( pk );
   dc6be:	4628      	mov	r0, r5
   dc6c0:	f002 fa8a 	bl	debd8 <mbedtls_pk_free>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
   dc6c4:	4c13      	ldr	r4, [pc, #76]	; (dc714 <mbedtls_pk_parse_key+0x23c>)
   dc6c6:	e746      	b.n	dc556 <mbedtls_pk_parse_key+0x7e>
        pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), key, keylen ) == 0 )
   dc6c8:	6868      	ldr	r0, [r5, #4]
   dc6ca:	463a      	mov	r2, r7
   dc6cc:	4631      	mov	r1, r6
   dc6ce:	f7ff fba9 	bl	dbe24 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
   dc6d2:	2800      	cmp	r0, #0
   dc6d4:	d1e5      	bne.n	dc6a2 <mbedtls_pk_parse_key+0x1ca>
   dc6d6:	e7c3      	b.n	dc660 <mbedtls_pk_parse_key+0x188>
        pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
   dc6d8:	6868      	ldr	r0, [r5, #4]
   dc6da:	463a      	mov	r2, r7
   dc6dc:	4631      	mov	r1, r6
   dc6de:	f7ff fcc1 	bl	dc064 <_ZL21pk_parse_key_sec1_derP19mbedtls_ecp_keypairPKhj>
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
   dc6e2:	2800      	cmp	r0, #0
   dc6e4:	d0bc      	beq.n	dc660 <mbedtls_pk_parse_key+0x188>
   dc6e6:	e7ea      	b.n	dc6be <mbedtls_pk_parse_key+0x1e6>
   dc6e8:	000eca3d 	.word	0x000eca3d
   dc6ec:	000eca5b 	.word	0x000eca5b
   dc6f0:	ffffc480 	.word	0xffffc480
   dc6f4:	ffffc400 	.word	0xffffc400
   dc6f8:	000eca7b 	.word	0x000eca7b
   dc6fc:	000eca98 	.word	0x000eca98
   dc700:	000ecab7 	.word	0x000ecab7
   dc704:	000ecad1 	.word	0x000ecad1
   dc708:	000ecaed 	.word	0x000ecaed
   dc70c:	000ecb11 	.word	0x000ecb11
   dc710:	ffffc080 	.word	0xffffc080
   dc714:	ffffc300 	.word	0xffffc300

000dc718 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
   dc718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        mbedtls_aesni_gcm_mult( output, x, h );
        return;
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;
   dc71c:	7bcc      	ldrb	r4, [r1, #15]
   dc71e:	f8df e0f4 	ldr.w	lr, [pc, #244]	; dc814 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0xfc>
{
   dc722:	9100      	str	r1, [sp, #0]
   dc724:	f004 040f 	and.w	r4, r4, #15
   dc728:	eb00 04c4 	add.w	r4, r0, r4, lsl #3

    zh = ctx->HH[lo];
   dc72c:	e9d4 a52e 	ldrd	sl, r5, [r4, #184]	; 0xb8
    zl = ctx->HL[lo];
   dc730:	e9d4 340e 	ldrd	r3, r4, [r4, #56]	; 0x38

    for( i = 15; i >= 0; i-- )
   dc734:	260f      	movs	r6, #15
    {
        lo = x[i] & 0xf;
   dc736:	9900      	ldr	r1, [sp, #0]
   dc738:	5d8f      	ldrb	r7, [r1, r6]
        hi = x[i] >> 4;
   dc73a:	1139      	asrs	r1, r7, #4
        lo = x[i] & 0xf;
   dc73c:	f007 0b0f 	and.w	fp, r7, #15
        hi = x[i] >> 4;
   dc740:	f003 070f 	and.w	r7, r3, #15
   dc744:	9101      	str	r1, [sp, #4]

        if( i != 15 )
   dc746:	f85e 7037 	ldr.w	r7, [lr, r7, lsl #3]
   dc74a:	ea4f 1c13 	mov.w	ip, r3, lsr #4
   dc74e:	0439      	lsls	r1, r7, #16
   dc750:	ea4f 181a 	mov.w	r8, sl, lsr #4
   dc754:	0927      	lsrs	r7, r4, #4
   dc756:	2e0f      	cmp	r6, #15
   dc758:	ea4c 7c04 	orr.w	ip, ip, r4, lsl #28
   dc75c:	ea47 770a 	orr.w	r7, r7, sl, lsl #28
   dc760:	ea48 7805 	orr.w	r8, r8, r5, lsl #28
   dc764:	ea4f 1915 	mov.w	r9, r5, lsr #4
   dc768:	d00d      	beq.n	dc786 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x6e>
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
            zh ^= ctx->HH[lo];
   dc76a:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
   dc76e:	e9d4 352e 	ldrd	r3, r5, [r4, #184]	; 0xb8
   dc772:	ea83 0a08 	eor.w	sl, r3, r8
            zl ^= ctx->HL[lo];
   dc776:	e9d4 340e 	ldrd	r3, r4, [r4, #56]	; 0x38
            zh ^= ctx->HH[lo];
   dc77a:	4069      	eors	r1, r5
   dc77c:	ea81 0509 	eor.w	r5, r1, r9
            zl ^= ctx->HL[lo];
   dc780:	ea8c 0303 	eor.w	r3, ip, r3
   dc784:	407c      	eors	r4, r7

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
   dc786:	9901      	ldr	r1, [sp, #4]
   dc788:	ea4f 770a 	mov.w	r7, sl, lsl #28
   dc78c:	ea4f 1c13 	mov.w	ip, r3, lsr #4
   dc790:	eb00 08c1 	add.w	r8, r0, r1, lsl #3
   dc794:	ea4c 7c04 	orr.w	ip, ip, r4, lsl #28
   dc798:	ea47 1414 	orr.w	r4, r7, r4, lsr #4
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
   dc79c:	e9d8 712e 	ldrd	r7, r1, [r8, #184]	; 0xb8
        zh = ( zh >> 4 );
   dc7a0:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
   dc7a4:	ea4a 7a05 	orr.w	sl, sl, r5, lsl #28
        zh ^= (uint64_t) last4[rem] << 48;
   dc7a8:	f003 030f 	and.w	r3, r3, #15
   dc7ac:	ea81 1515 	eor.w	r5, r1, r5, lsr #4
   dc7b0:	4918      	ldr	r1, [pc, #96]	; (dc814 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0xfc>)
   dc7b2:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
        zh ^= ctx->HH[hi];
   dc7b6:	ea8a 0a07 	eor.w	sl, sl, r7
   dc7ba:	ea85 4503 	eor.w	r5, r5, r3, lsl #16
        zl ^= ctx->HL[hi];
   dc7be:	e9d8 370e 	ldrd	r3, r7, [r8, #56]	; 0x38
    for( i = 15; i >= 0; i-- )
   dc7c2:	3e01      	subs	r6, #1
        zl ^= ctx->HL[hi];
   dc7c4:	ea8c 0303 	eor.w	r3, ip, r3
   dc7c8:	ea84 0407 	eor.w	r4, r4, r7
    for( i = 15; i >= 0; i-- )
   dc7cc:	d2b3      	bcs.n	dc736 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x1e>
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
   dc7ce:	0e29      	lsrs	r1, r5, #24
   dc7d0:	7011      	strb	r1, [r2, #0]
   dc7d2:	0c29      	lsrs	r1, r5, #16
   dc7d4:	7051      	strb	r1, [r2, #1]
   dc7d6:	0a29      	lsrs	r1, r5, #8
   dc7d8:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_BE( zh, output, 4 );
   dc7da:	ea4f 611a 	mov.w	r1, sl, lsr #24
   dc7de:	7111      	strb	r1, [r2, #4]
   dc7e0:	ea4f 411a 	mov.w	r1, sl, lsr #16
   dc7e4:	7151      	strb	r1, [r2, #5]
   dc7e6:	ea4f 211a 	mov.w	r1, sl, lsr #8
   dc7ea:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_BE( zl >> 32, output, 8 );
   dc7ec:	0e21      	lsrs	r1, r4, #24
   dc7ee:	7211      	strb	r1, [r2, #8]
   dc7f0:	0c21      	lsrs	r1, r4, #16
   dc7f2:	7251      	strb	r1, [r2, #9]
   dc7f4:	0a21      	lsrs	r1, r4, #8
   dc7f6:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_BE( zl, output, 12 );
   dc7f8:	0e19      	lsrs	r1, r3, #24
   dc7fa:	7311      	strb	r1, [r2, #12]
   dc7fc:	0c19      	lsrs	r1, r3, #16
   dc7fe:	7351      	strb	r1, [r2, #13]
   dc800:	0a19      	lsrs	r1, r3, #8
    PUT_UINT32_BE( zh >> 32, output, 0 );
   dc802:	70d5      	strb	r5, [r2, #3]
    PUT_UINT32_BE( zh, output, 4 );
   dc804:	f882 a007 	strb.w	sl, [r2, #7]
    PUT_UINT32_BE( zl >> 32, output, 8 );
   dc808:	72d4      	strb	r4, [r2, #11]
    PUT_UINT32_BE( zl, output, 12 );
   dc80a:	7391      	strb	r1, [r2, #14]
   dc80c:	73d3      	strb	r3, [r2, #15]
}
   dc80e:	b003      	add	sp, #12
   dc810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc814:	000ecb38 	.word	0x000ecb38

000dc818 <mbedtls_gcm_init>:
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
   dc818:	f44f 72c0 	mov.w	r2, #384	; 0x180
   dc81c:	2100      	movs	r1, #0
   dc81e:	f00c bb0d 	b.w	e8e3c <memset>

000dc822 <mbedtls_gcm_setkey>:
{
   dc822:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc826:	4604      	mov	r4, r0
   dc828:	b08d      	sub	sp, #52	; 0x34
   dc82a:	4608      	mov	r0, r1
   dc82c:	4690      	mov	r8, r2
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
   dc82e:	4619      	mov	r1, r3
   dc830:	2201      	movs	r2, #1
{
   dc832:	461e      	mov	r6, r3
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
   dc834:	f7f9 fcf8 	bl	d6228 <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
   dc838:	4605      	mov	r5, r0
   dc83a:	2800      	cmp	r0, #0
   dc83c:	f000 8096 	beq.w	dc96c <mbedtls_gcm_setkey+0x14a>
    if( cipher_info->block_size != 16 )
   dc840:	6947      	ldr	r7, [r0, #20]
   dc842:	2f10      	cmp	r7, #16
   dc844:	f040 8092 	bne.w	dc96c <mbedtls_gcm_setkey+0x14a>
    mbedtls_cipher_free( &ctx->cipher_ctx );
   dc848:	4620      	mov	r0, r4
   dc84a:	f7f9 fd05 	bl	d6258 <mbedtls_cipher_free>
    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
   dc84e:	4629      	mov	r1, r5
   dc850:	4620      	mov	r0, r4
   dc852:	f7f9 fd11 	bl	d6278 <mbedtls_cipher_setup>
   dc856:	2800      	cmp	r0, #0
   dc858:	f040 8085 	bne.w	dc966 <mbedtls_gcm_setkey+0x144>
    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
   dc85c:	2301      	movs	r3, #1
   dc85e:	4632      	mov	r2, r6
   dc860:	4641      	mov	r1, r8
   dc862:	4620      	mov	r0, r4
   dc864:	f7f9 fd20 	bl	d62a8 <mbedtls_cipher_setkey>
   dc868:	2800      	cmp	r0, #0
   dc86a:	d17c      	bne.n	dc966 <mbedtls_gcm_setkey+0x144>
    memset( h, 0, 16 );
   dc86c:	4601      	mov	r1, r0
    size_t olen = 0;
   dc86e:	9007      	str	r0, [sp, #28]
    memset( h, 0, 16 );
   dc870:	463a      	mov	r2, r7
   dc872:	a808      	add	r0, sp, #32
   dc874:	f00c fae2 	bl	e8e3c <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
   dc878:	ab07      	add	r3, sp, #28
   dc87a:	9300      	str	r3, [sp, #0]
   dc87c:	ab08      	add	r3, sp, #32
   dc87e:	463a      	mov	r2, r7
   dc880:	4619      	mov	r1, r3
   dc882:	4620      	mov	r0, r4
   dc884:	f7f9 fd5c 	bl	d6340 <mbedtls_cipher_update>
   dc888:	2800      	cmp	r0, #0
   dc88a:	d16c      	bne.n	dc966 <mbedtls_gcm_setkey+0x144>
    GET_UINT32_BE( lo, h,  4  );
   dc88c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   dc88e:	9f08      	ldr	r7, [sp, #32]
   dc890:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   dc892:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   dc894:	ba1b      	rev	r3, r3
   dc896:	ba3f      	rev	r7, r7
    GET_UINT32_BE( lo, h,  12 );
   dc898:	ba36      	rev	r6, r6
   dc89a:	fa92 fc82 	rev.w	ip, r2
    ctx->HL[8] = vl;
   dc89e:	e9c4 6c1e 	strd	r6, ip, [r4, #120]	; 0x78
    ctx->HH[8] = vh;
   dc8a2:	e9c4 373e 	strd	r3, r7, [r4, #248]	; 0xf8
    ctx->HH[0] = 0;
   dc8a6:	f04f 0800 	mov.w	r8, #0
   dc8aa:	f04f 0900 	mov.w	r9, #0
   dc8ae:	e9c4 892e 	strd	r8, r9, [r4, #184]	; 0xb8
    ctx->HL[0] = 0;
   dc8b2:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
   dc8b6:	2103      	movs	r1, #3
    for( i = 4; i > 0; i >>= 1 )
   dc8b8:	2504      	movs	r5, #4
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
   dc8ba:	f04f 4861 	mov.w	r8, #3774873600	; 0xe1000000
   dc8be:	f006 0201 	and.w	r2, r6, #1
   dc8c2:	fb08 f202 	mul.w	r2, r8, r2
        vl  = ( vh << 63 ) | ( vl >> 1 );
   dc8c6:	ea4f 7ec3 	mov.w	lr, r3, lsl #31
   dc8ca:	0876      	lsrs	r6, r6, #1
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
   dc8cc:	085b      	lsrs	r3, r3, #1
        vl  = ( vh << 63 ) | ( vl >> 1 );
   dc8ce:	ea46 76cc 	orr.w	r6, r6, ip, lsl #31
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
   dc8d2:	ea43 73c7 	orr.w	r3, r3, r7, lsl #31
        vl  = ( vh << 63 ) | ( vl >> 1 );
   dc8d6:	ea4e 0c5c 	orr.w	ip, lr, ip, lsr #1
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
   dc8da:	ea82 0757 	eor.w	r7, r2, r7, lsr #1
    for( i = 4; i > 0; i >>= 1 )
   dc8de:	3901      	subs	r1, #1
   dc8e0:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
        ctx->HL[i] = vl;
   dc8e4:	e9c2 6c0e 	strd	r6, ip, [r2, #56]	; 0x38
        ctx->HH[i] = vh;
   dc8e8:	e9c2 372e 	strd	r3, r7, [r2, #184]	; 0xb8
    for( i = 4; i > 0; i >>= 1 )
   dc8ec:	ea4f 0565 	mov.w	r5, r5, asr #1
   dc8f0:	d1e5      	bne.n	dc8be <mbedtls_gcm_setkey+0x9c>
   dc8f2:	f04f 0e03 	mov.w	lr, #3
    for( i = 2; i <= 8; i *= 2 )
   dc8f6:	2202      	movs	r2, #2
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
   dc8f8:	f104 0838 	add.w	r8, r4, #56	; 0x38
   dc8fc:	f104 09b8 	add.w	r9, r4, #184	; 0xb8
   dc900:	eb09 06c2 	add.w	r6, r9, r2, lsl #3
   dc904:	eb08 03c2 	add.w	r3, r8, r2, lsl #3
        vh = *HiH;
   dc908:	6871      	ldr	r1, [r6, #4]
   dc90a:	9103      	str	r1, [sp, #12]
        vl = *HiL;
   dc90c:	f858 1032 	ldr.w	r1, [r8, r2, lsl #3]
   dc910:	9104      	str	r1, [sp, #16]
        vh = *HiH;
   dc912:	f859 b032 	ldr.w	fp, [r9, r2, lsl #3]
        vl = *HiL;
   dc916:	6859      	ldr	r1, [r3, #4]
   dc918:	9105      	str	r1, [sp, #20]
        for( j = 1; j < i; j++ )
   dc91a:	f104 0540 	add.w	r5, r4, #64	; 0x40
   dc91e:	f106 0108 	add.w	r1, r6, #8
   dc922:	9302      	str	r3, [sp, #8]
   dc924:	eb06 0ac2 	add.w	sl, r6, r2, lsl #3
            HiH[j] = vh ^ ctx->HH[j];
   dc928:	e9d5 7620 	ldrd	r7, r6, [r5, #128]	; 0x80
   dc92c:	9b03      	ldr	r3, [sp, #12]
   dc92e:	ea87 070b 	eor.w	r7, r7, fp
   dc932:	405e      	eors	r6, r3
   dc934:	e9c1 7600 	strd	r7, r6, [r1]
            HiL[j] = vl ^ ctx->HL[j];
   dc938:	9b04      	ldr	r3, [sp, #16]
   dc93a:	682e      	ldr	r6, [r5, #0]
   dc93c:	46ac      	mov	ip, r5
   dc93e:	405e      	eors	r6, r3
   dc940:	f8dc 7004 	ldr.w	r7, [ip, #4]
   dc944:	9b05      	ldr	r3, [sp, #20]
   dc946:	405f      	eors	r7, r3
   dc948:	9b02      	ldr	r3, [sp, #8]
   dc94a:	3108      	adds	r1, #8
   dc94c:	f843 6f08 	str.w	r6, [r3, #8]!
        for( j = 1; j < i; j++ )
   dc950:	4551      	cmp	r1, sl
            HiL[j] = vl ^ ctx->HL[j];
   dc952:	f105 0508 	add.w	r5, r5, #8
   dc956:	9302      	str	r3, [sp, #8]
   dc958:	605f      	str	r7, [r3, #4]
        for( j = 1; j < i; j++ )
   dc95a:	d1e5      	bne.n	dc928 <mbedtls_gcm_setkey+0x106>
    for( i = 2; i <= 8; i *= 2 )
   dc95c:	f1be 0e01 	subs.w	lr, lr, #1
   dc960:	ea4f 0242 	mov.w	r2, r2, lsl #1
   dc964:	d1cc      	bne.n	dc900 <mbedtls_gcm_setkey+0xde>
}
   dc966:	b00d      	add	sp, #52	; 0x34
   dc968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
   dc96c:	f06f 0013 	mvn.w	r0, #19
   dc970:	e7f9      	b.n	dc966 <mbedtls_gcm_setkey+0x144>

000dc972 <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
   dc972:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc976:	b089      	sub	sp, #36	; 0x24
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
   dc978:	f04f 0800 	mov.w	r8, #0
{
   dc97c:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
    size_t use_len, olen = 0;
   dc980:	f8cd 800c 	str.w	r8, [sp, #12]
{
   dc984:	4604      	mov	r4, r0
   dc986:	468b      	mov	fp, r1
   dc988:	4616      	mov	r6, r2
    GCM_VALIDATE_RET( iv != NULL );
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
   dc98a:	461d      	mov	r5, r3
   dc98c:	2b00      	cmp	r3, #0
   dc98e:	f000 808f 	beq.w	dcab0 <mbedtls_gcm_starts+0x13e>
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
   dc992:	f500 77ac 	add.w	r7, r0, #344	; 0x158
   dc996:	2210      	movs	r2, #16
   dc998:	4641      	mov	r1, r8
   dc99a:	4638      	mov	r0, r7
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
   dc99c:	f504 7ab4 	add.w	sl, r4, #360	; 0x168
    memset( ctx->y, 0x00, sizeof(ctx->y) );
   dc9a0:	f00c fa4c 	bl	e8e3c <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
   dc9a4:	2210      	movs	r2, #16
   dc9a6:	4641      	mov	r1, r8
   dc9a8:	4650      	mov	r0, sl
   dc9aa:	f00c fa47 	bl	e8e3c <memset>

    ctx->mode = mode;
    ctx->len = 0;
   dc9ae:	2200      	movs	r2, #0
   dc9b0:	2300      	movs	r3, #0
    ctx->add_len = 0;

    if( iv_len == 12 )
   dc9b2:	2d0c      	cmp	r5, #12
    ctx->len = 0;
   dc9b4:	e9c4 234e 	strd	r2, r3, [r4, #312]	; 0x138
    ctx->add_len = 0;
   dc9b8:	e9c4 2350 	strd	r2, r3, [r4, #320]	; 0x140
    ctx->mode = mode;
   dc9bc:	f8c4 b178 	str.w	fp, [r4, #376]	; 0x178
    if( iv_len == 12 )
   dc9c0:	d134      	bne.n	dca2c <mbedtls_gcm_starts+0xba>
    {
        memcpy( ctx->y, iv, iv_len );
   dc9c2:	6833      	ldr	r3, [r6, #0]
   dc9c4:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   dc9c8:	6873      	ldr	r3, [r6, #4]
   dc9ca:	607b      	str	r3, [r7, #4]
   dc9cc:	68b3      	ldr	r3, [r6, #8]
   dc9ce:	60bb      	str	r3, [r7, #8]
        ctx->y[15] = 1;
   dc9d0:	2301      	movs	r3, #1
   dc9d2:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
            ctx->y[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->y, ctx->y );
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
   dc9d6:	ab03      	add	r3, sp, #12
   dc9d8:	9300      	str	r3, [sp, #0]
   dc9da:	2210      	movs	r2, #16
   dc9dc:	f504 73a4 	add.w	r3, r4, #328	; 0x148
   dc9e0:	4639      	mov	r1, r7
   dc9e2:	4620      	mov	r0, r4
   dc9e4:	f7f9 fcac 	bl	d6340 <mbedtls_cipher_update>
   dc9e8:	4605      	mov	r5, r0
   dc9ea:	2800      	cmp	r0, #0
   dc9ec:	d162      	bne.n	dcab4 <mbedtls_gcm_starts+0x142>
      ( (uint64_t) add_len ) >> 61 != 0 )
   dc9ee:	e9c4 9050 	strd	r9, r0, [r4, #320]	; 0x140
        return( ret );
    }

    ctx->add_len = add_len;
    p = add;
    while( add_len > 0 )
   dc9f2:	f1b9 0f00 	cmp.w	r9, #0
   dc9f6:	d05d      	beq.n	dcab4 <mbedtls_gcm_starts+0x142>
    {
        use_len = ( add_len < 16 ) ? add_len : 16;
   dc9f8:	464f      	mov	r7, r9
   dc9fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   dc9fc:	2f10      	cmp	r7, #16
   dc9fe:	bf28      	it	cs
   dca00:	2710      	movcs	r7, #16

        for( i = 0; i < use_len; i++ )
   dca02:	f504 72b4 	add.w	r2, r4, #360	; 0x168
   dca06:	19de      	adds	r6, r3, r7
            ctx->buf[i] ^= p[i];
   dca08:	f813 0b01 	ldrb.w	r0, [r3], #1
   dca0c:	7811      	ldrb	r1, [r2, #0]
        for( i = 0; i < use_len; i++ )
   dca0e:	429e      	cmp	r6, r3
            ctx->buf[i] ^= p[i];
   dca10:	ea81 0100 	eor.w	r1, r1, r0
   dca14:	f802 1b01 	strb.w	r1, [r2], #1
        for( i = 0; i < use_len; i++ )
   dca18:	d1f6      	bne.n	dca08 <mbedtls_gcm_starts+0x96>

        gcm_mult( ctx, ctx->buf, ctx->buf );
   dca1a:	4652      	mov	r2, sl
   dca1c:	4651      	mov	r1, sl
   dca1e:	4620      	mov	r0, r4
   dca20:	f7ff fe7a 	bl	dc718 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        add_len -= use_len;
   dca24:	eba9 0907 	sub.w	r9, r9, r7
        p += use_len;
   dca28:	9612      	str	r6, [sp, #72]	; 0x48
    while( add_len > 0 )
   dca2a:	e7e2      	b.n	dc9f2 <mbedtls_gcm_starts+0x80>
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
   dca2c:	f3c5 5247 	ubfx	r2, r5, #21, #8
   dca30:	f88d 201c 	strb.w	r2, [sp, #28]
        memset( work_buf, 0x00, 16 );
   dca34:	e9cd 8804 	strd	r8, r8, [sp, #16]
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
   dca38:	f3c5 324f 	ubfx	r2, r5, #13, #16
   dca3c:	00eb      	lsls	r3, r5, #3
   dca3e:	f88d 201d 	strb.w	r2, [sp, #29]
   dca42:	f3c5 1257 	ubfx	r2, r5, #5, #24
        memset( work_buf, 0x00, 16 );
   dca46:	f8cd 8018 	str.w	r8, [sp, #24]
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
   dca4a:	f88d 201e 	strb.w	r2, [sp, #30]
   dca4e:	f88d 301f 	strb.w	r3, [sp, #31]
            use_len = ( iv_len < 16 ) ? iv_len : 16;
   dca52:	2d10      	cmp	r5, #16
   dca54:	46ab      	mov	fp, r5
   dca56:	f504 78ac 	add.w	r8, r4, #344	; 0x158
   dca5a:	bf28      	it	cs
   dca5c:	f04f 0b10 	movcs.w	fp, #16
            for( i = 0; i < use_len; i++ )
   dca60:	4633      	mov	r3, r6
   dca62:	eb0b 0006 	add.w	r0, fp, r6
            use_len = ( iv_len < 16 ) ? iv_len : 16;
   dca66:	4642      	mov	r2, r8
                ctx->y[i] ^= p[i];
   dca68:	f813 cb01 	ldrb.w	ip, [r3], #1
   dca6c:	7811      	ldrb	r1, [r2, #0]
            for( i = 0; i < use_len; i++ )
   dca6e:	4283      	cmp	r3, r0
                ctx->y[i] ^= p[i];
   dca70:	ea81 010c 	eor.w	r1, r1, ip
   dca74:	f802 1b01 	strb.w	r1, [r2], #1
            for( i = 0; i < use_len; i++ )
   dca78:	d1f6      	bne.n	dca68 <mbedtls_gcm_starts+0xf6>
            gcm_mult( ctx, ctx->y, ctx->y );
   dca7a:	463a      	mov	r2, r7
   dca7c:	4639      	mov	r1, r7
   dca7e:	4620      	mov	r0, r4
   dca80:	f7ff fe4a 	bl	dc718 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
        while( iv_len > 0 )
   dca84:	ebb5 050b 	subs.w	r5, r5, fp
            p += use_len;
   dca88:	445e      	add	r6, fp
        while( iv_len > 0 )
   dca8a:	d1e2      	bne.n	dca52 <mbedtls_gcm_starts+0xe0>
   dca8c:	aa04      	add	r2, sp, #16
   dca8e:	f504 71b4 	add.w	r1, r4, #360	; 0x168
            ctx->y[i] ^= work_buf[i];
   dca92:	f898 3000 	ldrb.w	r3, [r8]
   dca96:	f812 0b01 	ldrb.w	r0, [r2], #1
   dca9a:	4043      	eors	r3, r0
   dca9c:	f808 3b01 	strb.w	r3, [r8], #1
        for( i = 0; i < 16; i++ )
   dcaa0:	4588      	cmp	r8, r1
   dcaa2:	d1f6      	bne.n	dca92 <mbedtls_gcm_starts+0x120>
        gcm_mult( ctx, ctx->y, ctx->y );
   dcaa4:	463a      	mov	r2, r7
   dcaa6:	4639      	mov	r1, r7
   dcaa8:	4620      	mov	r0, r4
   dcaaa:	f7ff fe35 	bl	dc718 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
   dcaae:	e792      	b.n	dc9d6 <mbedtls_gcm_starts+0x64>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
   dcab0:	f06f 0513 	mvn.w	r5, #19
    }

    return( 0 );
}
   dcab4:	4628      	mov	r0, r5
   dcab6:	b009      	add	sp, #36	; 0x24
   dcab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dcabc <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
   dcabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dcac0:	461f      	mov	r7, r3
   dcac2:	b089      	sub	sp, #36	; 0x24
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
   dcac4:	2300      	movs	r3, #0

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( output > input && (size_t) ( output - input ) < length )
   dcac6:	4297      	cmp	r7, r2
{
   dcac8:	4604      	mov	r4, r0
   dcaca:	460d      	mov	r5, r1
   dcacc:	4616      	mov	r6, r2
    size_t use_len, olen = 0;
   dcace:	9303      	str	r3, [sp, #12]
    if( output > input && (size_t) ( output - input ) < length )
   dcad0:	d902      	bls.n	dcad8 <mbedtls_gcm_update+0x1c>
   dcad2:	1abb      	subs	r3, r7, r2
   dcad4:	428b      	cmp	r3, r1
   dcad6:	d366      	bcc.n	dcba6 <mbedtls_gcm_update+0xea>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
   dcad8:	e9d4 ab4e 	ldrd	sl, fp, [r4, #312]	; 0x138
   dcadc:	2300      	movs	r3, #0
   dcade:	eb1a 0805 	adds.w	r8, sl, r5
   dcae2:	eb5b 0903 	adcs.w	r9, fp, r3
   dcae6:	f04f 0000 	mov.w	r0, #0
   dcaea:	f04f 0100 	mov.w	r1, #0
   dcaee:	bf24      	itt	cs
   dcaf0:	2001      	movcs	r0, #1
   dcaf2:	2100      	movcs	r1, #0
   dcaf4:	ea50 0301 	orrs.w	r3, r0, r1
   dcaf8:	d155      	bne.n	dcba6 <mbedtls_gcm_update+0xea>
   dcafa:	230f      	movs	r3, #15
   dcafc:	f06f 021f 	mvn.w	r2, #31
   dcb00:	454b      	cmp	r3, r9
   dcb02:	bf08      	it	eq
   dcb04:	4542      	cmpeq	r2, r8
   dcb06:	d34e      	bcc.n	dcba6 <mbedtls_gcm_update+0xea>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    ctx->len += length;
   dcb08:	e9c4 894e 	strd	r8, r9, [r4, #312]	; 0x138

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
   dcb0c:	f504 7aac 	add.w	sl, r4, #344	; 0x158
   dcb10:	f204 1963 	addw	r9, r4, #355	; 0x163
    while( length > 0 )
   dcb14:	2d00      	cmp	r5, #0
   dcb16:	d04b      	beq.n	dcbb0 <mbedtls_gcm_update+0xf4>
        use_len = ( length < 16 ) ? length : 16;
   dcb18:	2d10      	cmp	r5, #16
   dcb1a:	46a8      	mov	r8, r5
   dcb1c:	f204 1267 	addw	r2, r4, #359	; 0x167
   dcb20:	bf28      	it	cs
   dcb22:	f04f 0810 	movcs.w	r8, #16
            if( ++ctx->y[i - 1] != 0 )
   dcb26:	7813      	ldrb	r3, [r2, #0]
   dcb28:	3301      	adds	r3, #1
   dcb2a:	b2db      	uxtb	r3, r3
   dcb2c:	f802 3901 	strb.w	r3, [r2], #-1
   dcb30:	b90b      	cbnz	r3, dcb36 <mbedtls_gcm_update+0x7a>
        for( i = 16; i > 12; i-- )
   dcb32:	454a      	cmp	r2, r9
   dcb34:	d1f7      	bne.n	dcb26 <mbedtls_gcm_update+0x6a>
        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
   dcb36:	ab03      	add	r3, sp, #12
   dcb38:	9300      	str	r3, [sp, #0]
   dcb3a:	2210      	movs	r2, #16
   dcb3c:	ab04      	add	r3, sp, #16
   dcb3e:	4651      	mov	r1, sl
   dcb40:	4620      	mov	r0, r4
   dcb42:	f7f9 fbfd 	bl	d6340 <mbedtls_cipher_update>
   dcb46:	bb80      	cbnz	r0, dcbaa <mbedtls_gcm_update+0xee>
   dcb48:	f504 73b4 	add.w	r3, r4, #360	; 0x168
   dcb4c:	4631      	mov	r1, r6
   dcb4e:	f10d 0c10 	add.w	ip, sp, #16
   dcb52:	f107 3eff 	add.w	lr, r7, #4294967295
   dcb56:	4446      	add	r6, r8
   dcb58:	461a      	mov	r2, r3
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
   dcb5a:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
   dcb5e:	b928      	cbnz	r0, dcb6c <mbedtls_gcm_update+0xb0>
                ctx->buf[i] ^= p[i];
   dcb60:	7818      	ldrb	r0, [r3, #0]
   dcb62:	f891 b000 	ldrb.w	fp, [r1]
   dcb66:	ea80 000b 	eor.w	r0, r0, fp
   dcb6a:	7018      	strb	r0, [r3, #0]
            out_p[i] = ectr[i] ^ p[i];
   dcb6c:	f811 0b01 	ldrb.w	r0, [r1], #1
   dcb70:	f81c bb01 	ldrb.w	fp, [ip], #1
   dcb74:	ea8b 0b00 	eor.w	fp, fp, r0
   dcb78:	f80e bf01 	strb.w	fp, [lr, #1]!
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
   dcb7c:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
   dcb80:	2801      	cmp	r0, #1
                ctx->buf[i] ^= out_p[i];
   dcb82:	bf02      	ittt	eq
   dcb84:	7818      	ldrbeq	r0, [r3, #0]
   dcb86:	ea8b 0b00 	eoreq.w	fp, fp, r0
   dcb8a:	f883 b000 	strbeq.w	fp, [r3]
        for( i = 0; i < use_len; i++ )
   dcb8e:	428e      	cmp	r6, r1
   dcb90:	f103 0301 	add.w	r3, r3, #1
   dcb94:	d1e1      	bne.n	dcb5a <mbedtls_gcm_update+0x9e>
        }

        gcm_mult( ctx, ctx->buf, ctx->buf );
   dcb96:	4611      	mov	r1, r2
   dcb98:	4620      	mov	r0, r4
   dcb9a:	f7ff fdbd 	bl	dc718 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        length -= use_len;
   dcb9e:	eba5 0508 	sub.w	r5, r5, r8
        p += use_len;
        out_p += use_len;
   dcba2:	4447      	add	r7, r8
    while( length > 0 )
   dcba4:	e7b6      	b.n	dcb14 <mbedtls_gcm_update+0x58>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
   dcba6:	f06f 0013 	mvn.w	r0, #19
    }

    return( 0 );
}
   dcbaa:	b009      	add	sp, #36	; 0x24
   dcbac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return( 0 );
   dcbb0:	4628      	mov	r0, r5
   dcbb2:	e7fa      	b.n	dcbaa <mbedtls_gcm_update+0xee>

000dcbb4 <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
   dcbb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    uint64_t orig_add_len;

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    orig_len = ctx->len * 8;
   dcbb8:	e9d0 354e 	ldrd	r3, r5, [r0, #312]	; 0x138
   dcbbc:	00ed      	lsls	r5, r5, #3
   dcbbe:	ea45 7553 	orr.w	r5, r5, r3, lsr #29
   dcbc2:	ea4f 08c3 	mov.w	r8, r3, lsl #3
    orig_add_len = ctx->add_len * 8;
   dcbc6:	e9d0 3650 	ldrd	r3, r6, [r0, #320]	; 0x140
   dcbca:	00f6      	lsls	r6, r6, #3
   dcbcc:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
   dcbd0:	ea4f 09c3 	mov.w	r9, r3, lsl #3

    if( tag_len > 16 || tag_len < 4 )
   dcbd4:	1f13      	subs	r3, r2, #4
   dcbd6:	2b0c      	cmp	r3, #12
{
   dcbd8:	4604      	mov	r4, r0
   dcbda:	460f      	mov	r7, r1
   dcbdc:	4692      	mov	sl, r2
    if( tag_len > 16 || tag_len < 4 )
   dcbde:	d847      	bhi.n	dcc70 <mbedtls_gcm_finish+0xbc>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    memcpy( tag, ctx->base_ectr, tag_len );
   dcbe0:	f500 71a4 	add.w	r1, r0, #328	; 0x148
   dcbe4:	4638      	mov	r0, r7
   dcbe6:	f00c f901 	bl	e8dec <memcpy>

    if( orig_len || orig_add_len )
   dcbea:	ea48 0209 	orr.w	r2, r8, r9
   dcbee:	ea45 0306 	orr.w	r3, r5, r6
   dcbf2:	4313      	orrs	r3, r2
   dcbf4:	d103      	bne.n	dcbfe <mbedtls_gcm_finish+0x4a>

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
   dcbf6:	2000      	movs	r0, #0
}
   dcbf8:	b004      	add	sp, #16
   dcbfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
   dcbfe:	0e33      	lsrs	r3, r6, #24
   dcc00:	f88d 3000 	strb.w	r3, [sp]
   dcc04:	0c33      	lsrs	r3, r6, #16
   dcc06:	f88d 3001 	strb.w	r3, [sp, #1]
   dcc0a:	0a33      	lsrs	r3, r6, #8
   dcc0c:	f88d 3002 	strb.w	r3, [sp, #2]
   dcc10:	fa99 f389 	rev.w	r3, r9
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
   dcc14:	9301      	str	r3, [sp, #4]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
   dcc16:	0e2b      	lsrs	r3, r5, #24
   dcc18:	f88d 3008 	strb.w	r3, [sp, #8]
   dcc1c:	0c2b      	lsrs	r3, r5, #16
   dcc1e:	f88d 3009 	strb.w	r3, [sp, #9]
   dcc22:	0a2b      	lsrs	r3, r5, #8
   dcc24:	f88d 300a 	strb.w	r3, [sp, #10]
   dcc28:	f504 72b4 	add.w	r2, r4, #360	; 0x168
   dcc2c:	fa98 f388 	rev.w	r3, r8
   dcc30:	f88d 500b 	strb.w	r5, [sp, #11]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
   dcc34:	9303      	str	r3, [sp, #12]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
   dcc36:	f88d 6003 	strb.w	r6, [sp, #3]
        for( i = 0; i < 16; i++ )
   dcc3a:	4668      	mov	r0, sp
   dcc3c:	f504 75bc 	add.w	r5, r4, #376	; 0x178
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
   dcc40:	4613      	mov	r3, r2
            ctx->buf[i] ^= work_buf[i];
   dcc42:	7819      	ldrb	r1, [r3, #0]
   dcc44:	f810 6b01 	ldrb.w	r6, [r0], #1
   dcc48:	4071      	eors	r1, r6
   dcc4a:	f803 1b01 	strb.w	r1, [r3], #1
        for( i = 0; i < 16; i++ )
   dcc4e:	42ab      	cmp	r3, r5
   dcc50:	d1f7      	bne.n	dcc42 <mbedtls_gcm_finish+0x8e>
        gcm_mult( ctx, ctx->buf, ctx->buf );
   dcc52:	4620      	mov	r0, r4
   dcc54:	4611      	mov	r1, r2
   dcc56:	f7ff fd5f 	bl	dc718 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
        for( i = 0; i < tag_len; i++ )
   dcc5a:	44ba      	add	sl, r7
   dcc5c:	4638      	mov	r0, r7
            tag[i] ^= ctx->buf[i];
   dcc5e:	7803      	ldrb	r3, [r0, #0]
   dcc60:	f812 1b01 	ldrb.w	r1, [r2], #1
   dcc64:	404b      	eors	r3, r1
   dcc66:	f800 3b01 	strb.w	r3, [r0], #1
        for( i = 0; i < tag_len; i++ )
   dcc6a:	4582      	cmp	sl, r0
   dcc6c:	d1f7      	bne.n	dcc5e <mbedtls_gcm_finish+0xaa>
   dcc6e:	e7c2      	b.n	dcbf6 <mbedtls_gcm_finish+0x42>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
   dcc70:	f06f 0013 	mvn.w	r0, #19
   dcc74:	e7c0      	b.n	dcbf8 <mbedtls_gcm_finish+0x44>

000dcc76 <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
   dcc76:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dcc7a:	4615      	mov	r5, r2
   dcc7c:	461a      	mov	r2, r3
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
   dcc7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   dcc80:	9301      	str	r3, [sp, #4]
   dcc82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   dcc84:	9300      	str	r3, [sp, #0]
   dcc86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
   dcc88:	e9dd 890d 	ldrd	r8, r9, [sp, #52]	; 0x34
   dcc8c:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
   dcc90:	4604      	mov	r4, r0
    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
   dcc92:	f7ff fe6e 	bl	dc972 <mbedtls_gcm_starts>
   dcc96:	b970      	cbnz	r0, dccb6 <mbedtls_gcm_crypt_and_tag+0x40>
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
   dcc98:	464b      	mov	r3, r9
   dcc9a:	4642      	mov	r2, r8
   dcc9c:	4629      	mov	r1, r5
   dcc9e:	4620      	mov	r0, r4
   dcca0:	f7ff ff0c 	bl	dcabc <mbedtls_gcm_update>
   dcca4:	b938      	cbnz	r0, dccb6 <mbedtls_gcm_crypt_and_tag+0x40>
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
   dcca6:	463a      	mov	r2, r7
   dcca8:	4631      	mov	r1, r6
   dccaa:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
   dccac:	b003      	add	sp, #12
   dccae:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
   dccb2:	f7ff bf7f 	b.w	dcbb4 <mbedtls_gcm_finish>
}
   dccb6:	b003      	add	sp, #12
   dccb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000dccbc <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
   dccbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   dccbe:	b08d      	sub	sp, #52	; 0x34
   dccc0:	460d      	mov	r5, r1
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( tag != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
   dccc2:	9916      	ldr	r1, [sp, #88]	; 0x58
   dccc4:	9103      	str	r1, [sp, #12]
   dccc6:	9913      	ldr	r1, [sp, #76]	; 0x4c
{
   dccc8:	9c15      	ldr	r4, [sp, #84]	; 0x54
    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
   dccca:	9102      	str	r1, [sp, #8]
   dcccc:	9912      	ldr	r1, [sp, #72]	; 0x48
{
   dccce:	9e17      	ldr	r6, [sp, #92]	; 0x5c
    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
   dccd0:	9604      	str	r6, [sp, #16]
   dccd2:	af08      	add	r7, sp, #32
   dccd4:	e9cd 3100 	strd	r3, r1, [sp]
   dccd8:	e9cd 4705 	strd	r4, r7, [sp, #20]
   dccdc:	4613      	mov	r3, r2
   dccde:	2100      	movs	r1, #0
   dcce0:	462a      	mov	r2, r5
   dcce2:	f7ff ffc8 	bl	dcc76 <mbedtls_gcm_crypt_and_tag>
   dcce6:	b980      	cbnz	r0, dcd0a <mbedtls_gcm_auth_decrypt+0x4e>
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
   dcce8:	4603      	mov	r3, r0
   dccea:	42a3      	cmp	r3, r4
   dccec:	d006      	beq.n	dccfc <mbedtls_gcm_auth_decrypt+0x40>
        diff |= tag[i] ^ check_tag[i];
   dccee:	9a14      	ldr	r2, [sp, #80]	; 0x50
   dccf0:	5cf9      	ldrb	r1, [r7, r3]
   dccf2:	5cd2      	ldrb	r2, [r2, r3]
   dccf4:	404a      	eors	r2, r1
   dccf6:	4310      	orrs	r0, r2
    for( diff = 0, i = 0; i < tag_len; i++ )
   dccf8:	3301      	adds	r3, #1
   dccfa:	e7f6      	b.n	dccea <mbedtls_gcm_auth_decrypt+0x2e>

    if( diff != 0 )
   dccfc:	b128      	cbz	r0, dcd0a <mbedtls_gcm_auth_decrypt+0x4e>
    {
        mbedtls_platform_zeroize( output, length );
   dccfe:	4630      	mov	r0, r6
   dcd00:	4629      	mov	r1, r5
   dcd02:	f005 ff5f 	bl	e2bc4 <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
   dcd06:	f06f 0011 	mvn.w	r0, #17
    }

    return( 0 );
}
   dcd0a:	b00d      	add	sp, #52	; 0x34
   dcd0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dcd0e <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
   dcd0e:	b510      	push	{r4, lr}
    if( ctx == NULL )
   dcd10:	4604      	mov	r4, r0
   dcd12:	b140      	cbz	r0, dcd26 <mbedtls_gcm_free+0x18>
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
   dcd14:	f7f9 faa0 	bl	d6258 <mbedtls_cipher_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
   dcd18:	4620      	mov	r0, r4
   dcd1a:	f44f 71c0 	mov.w	r1, #384	; 0x180
}
   dcd1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
   dcd22:	f005 bf4f 	b.w	e2bc4 <mbedtls_platform_zeroize>
}
   dcd26:	bd10      	pop	{r4, pc}

000dcd28 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
   dcd28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dcd2c:	9e07      	ldr	r6, [sp, #28]
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
   dcd2e:	f8df 812c 	ldr.w	r8, [pc, #300]	; dce5c <mbedtls_base64_decode+0x134>
    for( i = n = j = 0; i < slen; i++ )
   dcd32:	2700      	movs	r7, #0
   dcd34:	463c      	mov	r4, r7
   dcd36:	463d      	mov	r5, r7
   dcd38:	42b5      	cmp	r5, r6
   dcd3a:	d23f      	bcs.n	dcdbc <mbedtls_base64_decode+0x94>
        x = 0;
   dcd3c:	f04f 0e00 	mov.w	lr, #0
        while( i < slen && src[i] == ' ' )
   dcd40:	f813 c005 	ldrb.w	ip, [r3, r5]
   dcd44:	f1bc 0f20 	cmp.w	ip, #32
   dcd48:	d108      	bne.n	dcd5c <mbedtls_base64_decode+0x34>
            ++i;
   dcd4a:	3501      	adds	r5, #1
        while( i < slen && src[i] == ' ' )
   dcd4c:	42ae      	cmp	r6, r5
            ++x;
   dcd4e:	f10e 0e01 	add.w	lr, lr, #1
        while( i < slen && src[i] == ' ' )
   dcd52:	d1f5      	bne.n	dcd40 <mbedtls_base64_decode+0x18>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
    }

    if( n == 0 )
   dcd54:	bba4      	cbnz	r4, dcdc0 <mbedtls_base64_decode+0x98>
    {
        *olen = 0;
   dcd56:	6014      	str	r4, [r2, #0]
        }
    }

    *olen = p - dst;

    return( 0 );
   dcd58:	2000      	movs	r0, #0
   dcd5a:	e071      	b.n	dce40 <mbedtls_base64_decode+0x118>
        if( i == slen )
   dcd5c:	42ae      	cmp	r6, r5
   dcd5e:	d0f9      	beq.n	dcd54 <mbedtls_base64_decode+0x2c>
        if( ( slen - i ) >= 2 &&
   dcd60:	eba6 0905 	sub.w	r9, r6, r5
   dcd64:	f1b9 0f01 	cmp.w	r9, #1
   dcd68:	d915      	bls.n	dcd96 <mbedtls_base64_decode+0x6e>
   dcd6a:	f1bc 0f0d 	cmp.w	ip, #13
   dcd6e:	d112      	bne.n	dcd96 <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
   dcd70:	eb03 0905 	add.w	r9, r3, r5
   dcd74:	f899 9001 	ldrb.w	r9, [r9, #1]
   dcd78:	f1b9 0f0a 	cmp.w	r9, #10
        if( src[i] == '\n' )
   dcd7c:	d01c      	beq.n	dcdb8 <mbedtls_base64_decode+0x90>
        if( x != 0 )
   dcd7e:	f1be 0f00 	cmp.w	lr, #0
   dcd82:	d105      	bne.n	dcd90 <mbedtls_base64_decode+0x68>
        if( src[i] == '=' && ++j > 2 )
   dcd84:	f1bc 0f3d 	cmp.w	ip, #61	; 0x3d
   dcd88:	d108      	bne.n	dcd9c <mbedtls_base64_decode+0x74>
   dcd8a:	3701      	adds	r7, #1
   dcd8c:	2f02      	cmp	r7, #2
   dcd8e:	d908      	bls.n	dcda2 <mbedtls_base64_decode+0x7a>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
   dcd90:	f06f 002b 	mvn.w	r0, #43	; 0x2b
   dcd94:	e054      	b.n	dce40 <mbedtls_base64_decode+0x118>
        if( src[i] == '\n' )
   dcd96:	f1bc 0f0a 	cmp.w	ip, #10
   dcd9a:	e7ef      	b.n	dcd7c <mbedtls_base64_decode+0x54>
        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
   dcd9c:	f01c 0f80 	tst.w	ip, #128	; 0x80
   dcda0:	d1f6      	bne.n	dcd90 <mbedtls_base64_decode+0x68>
   dcda2:	f818 c00c 	ldrb.w	ip, [r8, ip]
   dcda6:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   dcdaa:	d0f1      	beq.n	dcd90 <mbedtls_base64_decode+0x68>
        if( base64_dec_map[src[i]] < 64 && j != 0 )
   dcdac:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
   dcdb0:	d801      	bhi.n	dcdb6 <mbedtls_base64_decode+0x8e>
   dcdb2:	2f00      	cmp	r7, #0
   dcdb4:	d1ec      	bne.n	dcd90 <mbedtls_base64_decode+0x68>
        n++;
   dcdb6:	3401      	adds	r4, #1
    for( i = n = j = 0; i < slen; i++ )
   dcdb8:	3501      	adds	r5, #1
   dcdba:	e7bd      	b.n	dcd38 <mbedtls_base64_decode+0x10>
   dcdbc:	462e      	mov	r6, r5
   dcdbe:	e7c9      	b.n	dcd54 <mbedtls_base64_decode+0x2c>
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
   dcdc0:	f004 0c07 	and.w	ip, r4, #7
   dcdc4:	2506      	movs	r5, #6
   dcdc6:	08e4      	lsrs	r4, r4, #3
   dcdc8:	fb05 fc0c 	mul.w	ip, r5, ip
   dcdcc:	436c      	muls	r4, r5
   dcdce:	f10c 0c07 	add.w	ip, ip, #7
    n -= j;
   dcdd2:	1be4      	subs	r4, r4, r7
   dcdd4:	eb04 04dc 	add.w	r4, r4, ip, lsr #3
    if( dst == NULL || dlen < n )
   dcdd8:	b378      	cbz	r0, dce3a <mbedtls_base64_decode+0x112>
   dcdda:	428c      	cmp	r4, r1
   dcddc:	d82d      	bhi.n	dce3a <mbedtls_base64_decode+0x112>
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   dcdde:	2700      	movs	r7, #0
        j -= ( base64_dec_map[*src] == 64 );
   dcde0:	f8df e078 	ldr.w	lr, [pc, #120]	; dce5c <mbedtls_base64_decode+0x134>
        if( *src == '\r' || *src == '\n' || *src == ' ' )
   dcde4:	f8df 8078 	ldr.w	r8, [pc, #120]	; dce60 <mbedtls_base64_decode+0x138>
   dcde8:	441e      	add	r6, r3
    if( dst == NULL || dlen < n )
   dcdea:	4601      	mov	r1, r0
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   dcdec:	2503      	movs	r5, #3
   dcdee:	463c      	mov	r4, r7
   dcdf0:	429e      	cmp	r6, r3
   dcdf2:	d030      	beq.n	dce56 <mbedtls_base64_decode+0x12e>
        if( *src == '\r' || *src == '\n' || *src == ' ' )
   dcdf4:	f813 9b01 	ldrb.w	r9, [r3], #1
   dcdf8:	f1a9 0c0a 	sub.w	ip, r9, #10
   dcdfc:	fa5f fc8c 	uxtb.w	ip, ip
   dce00:	f1bc 0f16 	cmp.w	ip, #22
   dce04:	d804      	bhi.n	dce10 <mbedtls_base64_decode+0xe8>
   dce06:	fa28 fc0c 	lsr.w	ip, r8, ip
   dce0a:	f01c 0f01 	tst.w	ip, #1
   dce0e:	d1ef      	bne.n	dcdf0 <mbedtls_base64_decode+0xc8>
        j -= ( base64_dec_map[*src] == 64 );
   dce10:	f81e c009 	ldrb.w	ip, [lr, r9]
        if( ++n == 4 )
   dce14:	3401      	adds	r4, #1
        j -= ( base64_dec_map[*src] == 64 );
   dce16:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
   dce1a:	bf08      	it	eq
   dce1c:	3d01      	subeq	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
   dce1e:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
        if( ++n == 4 )
   dce22:	2c04      	cmp	r4, #4
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
   dce24:	ea4c 1787 	orr.w	r7, ip, r7, lsl #6
        if( ++n == 4 )
   dce28:	d1e2      	bne.n	dcdf0 <mbedtls_base64_decode+0xc8>
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
   dce2a:	b125      	cbz	r5, dce36 <mbedtls_base64_decode+0x10e>
   dce2c:	0c3c      	lsrs	r4, r7, #16
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
   dce2e:	2d01      	cmp	r5, #1
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
   dce30:	700c      	strb	r4, [r1, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
   dce32:	d107      	bne.n	dce44 <mbedtls_base64_decode+0x11c>
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
   dce34:	3101      	adds	r1, #1
            n = 0;
   dce36:	2400      	movs	r4, #0
   dce38:	e7da      	b.n	dcdf0 <mbedtls_base64_decode+0xc8>
        *olen = n;
   dce3a:	6014      	str	r4, [r2, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
   dce3c:	f06f 0029 	mvn.w	r0, #41	; 0x29
}
   dce40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if( j > 2 ) *p++ = (unsigned char)( x       );
   dce44:	2d02      	cmp	r5, #2
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
   dce46:	ea4f 2417 	mov.w	r4, r7, lsr #8
   dce4a:	704c      	strb	r4, [r1, #1]
            if( j > 2 ) *p++ = (unsigned char)( x       );
   dce4c:	bf16      	itet	ne
   dce4e:	708f      	strbne	r7, [r1, #2]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
   dce50:	3102      	addeq	r1, #2
            if( j > 2 ) *p++ = (unsigned char)( x       );
   dce52:	3103      	addne	r1, #3
   dce54:	e7ef      	b.n	dce36 <mbedtls_base64_decode+0x10e>
    *olen = p - dst;
   dce56:	1a09      	subs	r1, r1, r0
   dce58:	6011      	str	r1, [r2, #0]
   dce5a:	e77d      	b.n	dcd58 <mbedtls_base64_decode+0x30>
   dce5c:	000ecbb8 	.word	0x000ecbb8
   dce60:	00400009 	.word	0x00400009

000dce64 <mbedtls_md_info_from_type>:
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
    switch( md_type )
   dce64:	3804      	subs	r0, #4
   dce66:	b2c0      	uxtb	r0, r0
   dce68:	2804      	cmp	r0, #4
   dce6a:	bf9a      	itte	ls
   dce6c:	4b02      	ldrls	r3, [pc, #8]	; (dce78 <mbedtls_md_info_from_type+0x14>)
   dce6e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
{
   dce72:	2000      	movhi	r0, #0
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
    }
}
   dce74:	4770      	bx	lr
   dce76:	bf00      	nop
   dce78:	000ecc38 	.word	0x000ecc38

000dce7c <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
   dce7c:	2300      	movs	r3, #0
   dce7e:	6003      	str	r3, [r0, #0]
   dce80:	6043      	str	r3, [r0, #4]
   dce82:	6083      	str	r3, [r0, #8]
}
   dce84:	4770      	bx	lr

000dce86 <mbedtls_md_free>:

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
   dce86:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL )
   dce88:	4604      	mov	r4, r0
   dce8a:	b1a8      	cbz	r0, dceb8 <mbedtls_md_free+0x32>
   dce8c:	6803      	ldr	r3, [r0, #0]
   dce8e:	b19b      	cbz	r3, dceb8 <mbedtls_md_free+0x32>
        return;

    if( ctx->md_ctx != NULL )
   dce90:	6840      	ldr	r0, [r0, #4]
   dce92:	b108      	cbz	r0, dce98 <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
   dce94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dce96:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
   dce98:	68a0      	ldr	r0, [r4, #8]
   dce9a:	b138      	cbz	r0, dceac <mbedtls_md_free+0x26>
    {
        mbedtls_platform_zeroize( ctx->hmac_ctx,
                                  2 * ctx->md_info->block_size );
   dce9c:	6823      	ldr	r3, [r4, #0]
   dce9e:	68d9      	ldr	r1, [r3, #12]
        mbedtls_platform_zeroize( ctx->hmac_ctx,
   dcea0:	0049      	lsls	r1, r1, #1
   dcea2:	f005 fe8f 	bl	e2bc4 <mbedtls_platform_zeroize>
        mbedtls_free( ctx->hmac_ctx );
   dcea6:	68a0      	ldr	r0, [r4, #8]
   dcea8:	f008 fd7e 	bl	e59a8 <free>
    }

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
   dceac:	4620      	mov	r0, r4
   dceae:	210c      	movs	r1, #12
}
   dceb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
   dceb4:	f005 be86 	b.w	e2bc4 <mbedtls_platform_zeroize>
}
   dceb8:	bd10      	pop	{r4, pc}
	...

000dcebc <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
   dcebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dcebe:	4605      	mov	r5, r0
   dcec0:	4617      	mov	r7, r2
    if( md_info == NULL || ctx == NULL )
   dcec2:	460c      	mov	r4, r1
   dcec4:	b1a1      	cbz	r1, dcef0 <mbedtls_md_setup+0x34>
   dcec6:	b198      	cbz	r0, dcef0 <mbedtls_md_setup+0x34>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
   dcec8:	6a0b      	ldr	r3, [r1, #32]
   dceca:	4798      	blx	r3
   dcecc:	4606      	mov	r6, r0
   dcece:	6068      	str	r0, [r5, #4]
   dced0:	b148      	cbz	r0, dcee6 <mbedtls_md_setup+0x2a>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
   dced2:	b157      	cbz	r7, dceea <mbedtls_md_setup+0x2e>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
   dced4:	68e1      	ldr	r1, [r4, #12]
   dced6:	2002      	movs	r0, #2
   dced8:	f00b ff10 	bl	e8cfc <calloc>
   dcedc:	60a8      	str	r0, [r5, #8]
        if( ctx->hmac_ctx == NULL )
   dcede:	b920      	cbnz	r0, dceea <mbedtls_md_setup+0x2e>
        {
            md_info->ctx_free_func( ctx->md_ctx );
   dcee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dcee2:	4630      	mov	r0, r6
   dcee4:	4798      	blx	r3
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
   dcee6:	4803      	ldr	r0, [pc, #12]	; (dcef4 <mbedtls_md_setup+0x38>)
   dcee8:	e001      	b.n	dceee <mbedtls_md_setup+0x32>
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
        }
    }

    ctx->md_info = md_info;
   dceea:	602c      	str	r4, [r5, #0]

    return( 0 );
   dceec:	2000      	movs	r0, #0
}
   dceee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   dcef0:	4801      	ldr	r0, [pc, #4]	; (dcef8 <mbedtls_md_setup+0x3c>)
   dcef2:	e7fc      	b.n	dceee <mbedtls_md_setup+0x32>
   dcef4:	ffffae80 	.word	0xffffae80
   dcef8:	ffffaf00 	.word	0xffffaf00

000dcefc <mbedtls_md_starts>:

int mbedtls_md_starts( mbedtls_md_context_t *ctx )
{
    if( ctx == NULL || ctx->md_info == NULL )
   dcefc:	b120      	cbz	r0, dcf08 <mbedtls_md_starts+0xc>
   dcefe:	6803      	ldr	r3, [r0, #0]
   dcf00:	b113      	cbz	r3, dcf08 <mbedtls_md_starts+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->starts_func( ctx->md_ctx ) );
   dcf02:	691b      	ldr	r3, [r3, #16]
   dcf04:	6840      	ldr	r0, [r0, #4]
   dcf06:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   dcf08:	4800      	ldr	r0, [pc, #0]	; (dcf0c <mbedtls_md_starts+0x10>)
}
   dcf0a:	4770      	bx	lr
   dcf0c:	ffffaf00 	.word	0xffffaf00

000dcf10 <mbedtls_md_update>:

int mbedtls_md_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL )
   dcf10:	b120      	cbz	r0, dcf1c <mbedtls_md_update+0xc>
   dcf12:	6803      	ldr	r3, [r0, #0]
   dcf14:	b113      	cbz	r3, dcf1c <mbedtls_md_update+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
   dcf16:	695b      	ldr	r3, [r3, #20]
   dcf18:	6840      	ldr	r0, [r0, #4]
   dcf1a:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   dcf1c:	4800      	ldr	r0, [pc, #0]	; (dcf20 <mbedtls_md_update+0x10>)
}
   dcf1e:	4770      	bx	lr
   dcf20:	ffffaf00 	.word	0xffffaf00

000dcf24 <mbedtls_md_finish>:

int mbedtls_md_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
    if( ctx == NULL || ctx->md_info == NULL )
   dcf24:	b120      	cbz	r0, dcf30 <mbedtls_md_finish+0xc>
   dcf26:	6803      	ldr	r3, [r0, #0]
   dcf28:	b113      	cbz	r3, dcf30 <mbedtls_md_finish+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
   dcf2a:	699b      	ldr	r3, [r3, #24]
   dcf2c:	6840      	ldr	r0, [r0, #4]
   dcf2e:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   dcf30:	4800      	ldr	r0, [pc, #0]	; (dcf34 <mbedtls_md_finish+0x10>)
}
   dcf32:	4770      	bx	lr
   dcf34:	ffffaf00 	.word	0xffffaf00

000dcf38 <mbedtls_md>:

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
   dcf38:	b410      	push	{r4}
   dcf3a:	4604      	mov	r4, r0
   dcf3c:	4608      	mov	r0, r1
   dcf3e:	4611      	mov	r1, r2
   dcf40:	461a      	mov	r2, r3
    if( md_info == NULL )
   dcf42:	b11c      	cbz	r4, dcf4c <mbedtls_md+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
   dcf44:	69e3      	ldr	r3, [r4, #28]
}
   dcf46:	f85d 4b04 	ldr.w	r4, [sp], #4
    return( md_info->digest_func( input, ilen, output ) );
   dcf4a:	4718      	bx	r3
}
   dcf4c:	4801      	ldr	r0, [pc, #4]	; (dcf54 <mbedtls_md+0x1c>)
   dcf4e:	f85d 4b04 	ldr.w	r4, [sp], #4
   dcf52:	4770      	bx	lr
   dcf54:	ffffaf00 	.word	0xffffaf00

000dcf58 <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
   dcf58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dcf5c:	460e      	mov	r6, r1
   dcf5e:	b090      	sub	sp, #64	; 0x40
   dcf60:	4617      	mov	r7, r2
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   dcf62:	4605      	mov	r5, r0
   dcf64:	2800      	cmp	r0, #0
   dcf66:	d059      	beq.n	dd01c <mbedtls_md_hmac_starts+0xc4>
   dcf68:	6803      	ldr	r3, [r0, #0]
   dcf6a:	2b00      	cmp	r3, #0
   dcf6c:	d056      	beq.n	dd01c <mbedtls_md_hmac_starts+0xc4>
   dcf6e:	6882      	ldr	r2, [r0, #8]
   dcf70:	2a00      	cmp	r2, #0
   dcf72:	d053      	beq.n	dd01c <mbedtls_md_hmac_starts+0xc4>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
   dcf74:	68da      	ldr	r2, [r3, #12]
   dcf76:	42ba      	cmp	r2, r7
   dcf78:	d219      	bcs.n	dcfae <mbedtls_md_hmac_starts+0x56>
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
   dcf7a:	691b      	ldr	r3, [r3, #16]
   dcf7c:	6840      	ldr	r0, [r0, #4]
   dcf7e:	4798      	blx	r3
   dcf80:	4604      	mov	r4, r0
   dcf82:	2800      	cmp	r0, #0
   dcf84:	d142      	bne.n	dd00c <mbedtls_md_hmac_starts+0xb4>
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
   dcf86:	682b      	ldr	r3, [r5, #0]
   dcf88:	6868      	ldr	r0, [r5, #4]
   dcf8a:	695b      	ldr	r3, [r3, #20]
   dcf8c:	463a      	mov	r2, r7
   dcf8e:	4631      	mov	r1, r6
   dcf90:	4798      	blx	r3
   dcf92:	4604      	mov	r4, r0
   dcf94:	2800      	cmp	r0, #0
   dcf96:	d139      	bne.n	dd00c <mbedtls_md_hmac_starts+0xb4>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
   dcf98:	682b      	ldr	r3, [r5, #0]
   dcf9a:	6868      	ldr	r0, [r5, #4]
   dcf9c:	699b      	ldr	r3, [r3, #24]
   dcf9e:	4669      	mov	r1, sp
   dcfa0:	4798      	blx	r3
   dcfa2:	4604      	mov	r4, r0
   dcfa4:	2800      	cmp	r0, #0
   dcfa6:	d131      	bne.n	dd00c <mbedtls_md_hmac_starts+0xb4>
            goto cleanup;

        keylen = ctx->md_info->size;
   dcfa8:	682b      	ldr	r3, [r5, #0]
   dcfaa:	689f      	ldr	r7, [r3, #8]
        key = sum;
   dcfac:	466e      	mov	r6, sp
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
   dcfae:	682b      	ldr	r3, [r5, #0]
    ipad = (unsigned char *) ctx->hmac_ctx;
   dcfb0:	f8d5 8008 	ldr.w	r8, [r5, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
   dcfb4:	68da      	ldr	r2, [r3, #12]

    memset( ipad, 0x36, ctx->md_info->block_size );
   dcfb6:	2136      	movs	r1, #54	; 0x36
   dcfb8:	4640      	mov	r0, r8
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
   dcfba:	eb08 0402 	add.w	r4, r8, r2
    memset( ipad, 0x36, ctx->md_info->block_size );
   dcfbe:	f00b ff3d 	bl	e8e3c <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
   dcfc2:	682b      	ldr	r3, [r5, #0]
   dcfc4:	215c      	movs	r1, #92	; 0x5c
   dcfc6:	68da      	ldr	r2, [r3, #12]
   dcfc8:	4620      	mov	r0, r4
   dcfca:	f00b ff37 	bl	e8e3c <memset>

    for( i = 0; i < keylen; i++ )
   dcfce:	3e01      	subs	r6, #1
   dcfd0:	4643      	mov	r3, r8
   dcfd2:	1e60      	subs	r0, r4, #1
   dcfd4:	4447      	add	r7, r8
   dcfd6:	429f      	cmp	r7, r3
   dcfd8:	d00b      	beq.n	dcff2 <mbedtls_md_hmac_starts+0x9a>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
   dcfda:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   dcfde:	781a      	ldrb	r2, [r3, #0]
   dcfe0:	404a      	eors	r2, r1
   dcfe2:	f803 2b01 	strb.w	r2, [r3], #1
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
   dcfe6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   dcfea:	7831      	ldrb	r1, [r6, #0]
   dcfec:	404a      	eors	r2, r1
   dcfee:	7002      	strb	r2, [r0, #0]
    for( i = 0; i < keylen; i++ )
   dcff0:	e7f1      	b.n	dcfd6 <mbedtls_md_hmac_starts+0x7e>
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
   dcff2:	682b      	ldr	r3, [r5, #0]
   dcff4:	6868      	ldr	r0, [r5, #4]
   dcff6:	691b      	ldr	r3, [r3, #16]
   dcff8:	4798      	blx	r3
   dcffa:	4604      	mov	r4, r0
   dcffc:	b930      	cbnz	r0, dd00c <mbedtls_md_hmac_starts+0xb4>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
   dcffe:	682b      	ldr	r3, [r5, #0]
   dd000:	6868      	ldr	r0, [r5, #4]
   dd002:	695c      	ldr	r4, [r3, #20]
   dd004:	68da      	ldr	r2, [r3, #12]
   dd006:	4641      	mov	r1, r8
   dd008:	47a0      	blx	r4
   dd00a:	4604      	mov	r4, r0
                                           ctx->md_info->block_size ) ) != 0 )
        goto cleanup;

cleanup:
    mbedtls_platform_zeroize( sum, sizeof( sum ) );
   dd00c:	2140      	movs	r1, #64	; 0x40
   dd00e:	4668      	mov	r0, sp
   dd010:	f005 fdd8 	bl	e2bc4 <mbedtls_platform_zeroize>

    return( ret );
}
   dd014:	4620      	mov	r0, r4
   dd016:	b010      	add	sp, #64	; 0x40
   dd018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   dd01c:	4c00      	ldr	r4, [pc, #0]	; (dd020 <mbedtls_md_hmac_starts+0xc8>)
   dd01e:	e7f9      	b.n	dd014 <mbedtls_md_hmac_starts+0xbc>
   dd020:	ffffaf00 	.word	0xffffaf00

000dd024 <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
   dd024:	b410      	push	{r4}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   dd026:	b140      	cbz	r0, dd03a <mbedtls_md_hmac_update+0x16>
   dd028:	6803      	ldr	r3, [r0, #0]
   dd02a:	b133      	cbz	r3, dd03a <mbedtls_md_hmac_update+0x16>
   dd02c:	6884      	ldr	r4, [r0, #8]
   dd02e:	b124      	cbz	r4, dd03a <mbedtls_md_hmac_update+0x16>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
   dd030:	695b      	ldr	r3, [r3, #20]
   dd032:	6840      	ldr	r0, [r0, #4]
}
   dd034:	f85d 4b04 	ldr.w	r4, [sp], #4
    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
   dd038:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   dd03a:	4802      	ldr	r0, [pc, #8]	; (dd044 <mbedtls_md_hmac_update+0x20>)
}
   dd03c:	f85d 4b04 	ldr.w	r4, [sp], #4
   dd040:	4770      	bx	lr
   dd042:	bf00      	nop
   dd044:	ffffaf00 	.word	0xffffaf00

000dd048 <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
   dd048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dd04c:	460d      	mov	r5, r1
   dd04e:	b090      	sub	sp, #64	; 0x40
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   dd050:	4604      	mov	r4, r0
   dd052:	b328      	cbz	r0, dd0a0 <mbedtls_md_hmac_finish+0x58>
   dd054:	6803      	ldr	r3, [r0, #0]
   dd056:	b31b      	cbz	r3, dd0a0 <mbedtls_md_hmac_finish+0x58>
   dd058:	6886      	ldr	r6, [r0, #8]
   dd05a:	b30e      	cbz	r6, dd0a0 <mbedtls_md_hmac_finish+0x58>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
   dd05c:	68df      	ldr	r7, [r3, #12]

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
   dd05e:	6840      	ldr	r0, [r0, #4]
   dd060:	699b      	ldr	r3, [r3, #24]
   dd062:	4669      	mov	r1, sp
   dd064:	4798      	blx	r3
   dd066:	b9c0      	cbnz	r0, dd09a <mbedtls_md_hmac_finish+0x52>
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
   dd068:	6823      	ldr	r3, [r4, #0]
   dd06a:	6860      	ldr	r0, [r4, #4]
   dd06c:	691b      	ldr	r3, [r3, #16]
   dd06e:	4798      	blx	r3
   dd070:	b998      	cbnz	r0, dd09a <mbedtls_md_hmac_finish+0x52>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
   dd072:	6823      	ldr	r3, [r4, #0]
   dd074:	6860      	ldr	r0, [r4, #4]
   dd076:	f8d3 8014 	ldr.w	r8, [r3, #20]
   dd07a:	68da      	ldr	r2, [r3, #12]
   dd07c:	19f1      	adds	r1, r6, r7
   dd07e:	47c0      	blx	r8
   dd080:	b958      	cbnz	r0, dd09a <mbedtls_md_hmac_finish+0x52>
                                           ctx->md_info->block_size ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
   dd082:	6823      	ldr	r3, [r4, #0]
   dd084:	6860      	ldr	r0, [r4, #4]
   dd086:	695e      	ldr	r6, [r3, #20]
   dd088:	689a      	ldr	r2, [r3, #8]
   dd08a:	4669      	mov	r1, sp
   dd08c:	47b0      	blx	r6
   dd08e:	b920      	cbnz	r0, dd09a <mbedtls_md_hmac_finish+0x52>
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
   dd090:	6823      	ldr	r3, [r4, #0]
   dd092:	6860      	ldr	r0, [r4, #4]
   dd094:	699b      	ldr	r3, [r3, #24]
   dd096:	4629      	mov	r1, r5
   dd098:	4798      	blx	r3
}
   dd09a:	b010      	add	sp, #64	; 0x40
   dd09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   dd0a0:	4800      	ldr	r0, [pc, #0]	; (dd0a4 <mbedtls_md_hmac_finish+0x5c>)
   dd0a2:	e7fa      	b.n	dd09a <mbedtls_md_hmac_finish+0x52>
   dd0a4:	ffffaf00 	.word	0xffffaf00

000dd0a8 <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
   dd0a8:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   dd0aa:	4604      	mov	r4, r0
   dd0ac:	b180      	cbz	r0, dd0d0 <mbedtls_md_hmac_reset+0x28>
   dd0ae:	6803      	ldr	r3, [r0, #0]
   dd0b0:	b173      	cbz	r3, dd0d0 <mbedtls_md_hmac_reset+0x28>
   dd0b2:	6885      	ldr	r5, [r0, #8]
   dd0b4:	b165      	cbz	r5, dd0d0 <mbedtls_md_hmac_reset+0x28>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
   dd0b6:	691b      	ldr	r3, [r3, #16]
   dd0b8:	6840      	ldr	r0, [r0, #4]
   dd0ba:	4798      	blx	r3
   dd0bc:	b948      	cbnz	r0, dd0d2 <mbedtls_md_hmac_reset+0x2a>
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
   dd0be:	6823      	ldr	r3, [r4, #0]
   dd0c0:	6860      	ldr	r0, [r4, #4]
   dd0c2:	695e      	ldr	r6, [r3, #20]
   dd0c4:	68da      	ldr	r2, [r3, #12]
   dd0c6:	4629      	mov	r1, r5
   dd0c8:	4633      	mov	r3, r6
                                       ctx->md_info->block_size ) );
}
   dd0ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
   dd0ce:	4718      	bx	r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   dd0d0:	4800      	ldr	r0, [pc, #0]	; (dd0d4 <mbedtls_md_hmac_reset+0x2c>)
}
   dd0d2:	bd70      	pop	{r4, r5, r6, pc}
   dd0d4:	ffffaf00 	.word	0xffffaf00

000dd0d8 <mbedtls_md_get_size>:
    return( ctx->md_info->process_func( ctx->md_ctx, data ) );
}

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
   dd0d8:	b100      	cbz	r0, dd0dc <mbedtls_md_get_size+0x4>
        return( 0 );

    return md_info->size;
   dd0da:	7a00      	ldrb	r0, [r0, #8]
}
   dd0dc:	4770      	bx	lr

000dd0de <mbedtls_md_get_name>:
    return md_info->type;
}

const char *mbedtls_md_get_name( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
   dd0de:	b100      	cbz	r0, dd0e2 <mbedtls_md_get_name+0x4>
        return( NULL );

    return md_info->name;
   dd0e0:	6840      	ldr	r0, [r0, #4]
}
   dd0e2:	4770      	bx	lr

000dd0e4 <_ZL5add32PmmPa>:
/*
 * Helpers for addition and subtraction of chunks, with signed carry.
 */
static inline void add32( uint32_t *dst, uint32_t src, signed char *carry )
{
    *dst += src;
   dd0e4:	6803      	ldr	r3, [r0, #0]
   dd0e6:	1859      	adds	r1, r3, r1
   dd0e8:	6001      	str	r1, [r0, #0]
    *carry += ( *dst < src );
   dd0ea:	7811      	ldrb	r1, [r2, #0]
   dd0ec:	bf2c      	ite	cs
   dd0ee:	2301      	movcs	r3, #1
   dd0f0:	2300      	movcc	r3, #0
   dd0f2:	440b      	add	r3, r1
   dd0f4:	7013      	strb	r3, [r2, #0]
}
   dd0f6:	4770      	bx	lr

000dd0f8 <_ZL5sub32PmmPa>:

static inline void sub32( uint32_t *dst, uint32_t src, signed char *carry )
{
    *carry -= ( *dst < src );
   dd0f8:	7813      	ldrb	r3, [r2, #0]
{
   dd0fa:	b510      	push	{r4, lr}
    *carry -= ( *dst < src );
   dd0fc:	6804      	ldr	r4, [r0, #0]
   dd0fe:	428c      	cmp	r4, r1
   dd100:	bf38      	it	cc
   dd102:	3b01      	subcc	r3, #1
   dd104:	7013      	strb	r3, [r2, #0]
    *dst -= src;
   dd106:	6803      	ldr	r3, [r0, #0]
   dd108:	1a59      	subs	r1, r3, r1
   dd10a:	6001      	str	r1, [r0, #0]
}
   dd10c:	bd10      	pop	{r4, pc}

000dd10e <_ZL12ecp_mod_p256P11mbedtls_mpi>:
#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
/*
 * Fast quasi-reduction modulo p256 (FIPS 186-3 D.2.3)
 */
static int ecp_mod_p256( mbedtls_mpi *N )
{
   dd10e:	b530      	push	{r4, r5, lr}
    INIT( 256 );
   dd110:	2309      	movs	r3, #9
{
   dd112:	b08f      	sub	sp, #60	; 0x3c
    INIT( 256 );
   dd114:	2201      	movs	r2, #1
   dd116:	e9cd 2302 	strd	r2, r3, [sp, #8]
   dd11a:	2100      	movs	r1, #0
{
   dd11c:	4604      	mov	r4, r0
    INIT( 256 );
   dd11e:	2224      	movs	r2, #36	; 0x24
   dd120:	a805      	add	r0, sp, #20
   dd122:	f88d 1003 	strb.w	r1, [sp, #3]
   dd126:	9004      	str	r0, [sp, #16]
   dd128:	f00b fe88 	bl	e8e3c <memset>
   dd12c:	2110      	movs	r1, #16
   dd12e:	4620      	mov	r0, r4
   dd130:	f003 fd2b 	bl	e0b8a <mbedtls_mpi_grow>
   dd134:	4605      	mov	r5, r0
   dd136:	2800      	cmp	r0, #0
   dd138:	f040 8253 	bne.w	dd5e2 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x4d4>
   dd13c:	68a3      	ldr	r3, [r4, #8]
   dd13e:	681a      	ldr	r2, [r3, #0]

    ADD(  8 ); ADD(  9 );
   dd140:	6a19      	ldr	r1, [r3, #32]
    INIT( 256 );
   dd142:	9201      	str	r2, [sp, #4]
    ADD(  8 ); ADD(  9 );
   dd144:	a801      	add	r0, sp, #4
   dd146:	f10d 0203 	add.w	r2, sp, #3
   dd14a:	f7ff ffcb 	bl	dd0e4 <_ZL5add32PmmPa>
   dd14e:	68a3      	ldr	r3, [r4, #8]
   dd150:	f10d 0203 	add.w	r2, sp, #3
   dd154:	6a59      	ldr	r1, [r3, #36]	; 0x24
   dd156:	a801      	add	r0, sp, #4
   dd158:	f7ff ffc4 	bl	dd0e4 <_ZL5add32PmmPa>
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
   dd15c:	68a3      	ldr	r3, [r4, #8]
   dd15e:	f10d 0203 	add.w	r2, sp, #3
   dd162:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   dd164:	a801      	add	r0, sp, #4
   dd166:	f7ff ffc7 	bl	dd0f8 <_ZL5sub32PmmPa>
   dd16a:	68a3      	ldr	r3, [r4, #8]
   dd16c:	f10d 0203 	add.w	r2, sp, #3
   dd170:	6b19      	ldr	r1, [r3, #48]	; 0x30
   dd172:	a801      	add	r0, sp, #4
   dd174:	f7ff ffc0 	bl	dd0f8 <_ZL5sub32PmmPa>
   dd178:	68a3      	ldr	r3, [r4, #8]
   dd17a:	f10d 0203 	add.w	r2, sp, #3
   dd17e:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd180:	a801      	add	r0, sp, #4
   dd182:	f7ff ffb9 	bl	dd0f8 <_ZL5sub32PmmPa>
   dd186:	68a3      	ldr	r3, [r4, #8]
   dd188:	f10d 0203 	add.w	r2, sp, #3
   dd18c:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dd18e:	a801      	add	r0, sp, #4
   dd190:	f7ff ffb2 	bl	dd0f8 <_ZL5sub32PmmPa>
   dd194:	68a3      	ldr	r3, [r4, #8]
   dd196:	9a01      	ldr	r2, [sp, #4]
   dd198:	601a      	str	r2, [r3, #0]
   dd19a:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   dd19e:	68a3      	ldr	r3, [r4, #8]
   dd1a0:	f88d 5003 	strb.w	r5, [sp, #3]
   dd1a4:	685b      	ldr	r3, [r3, #4]
   dd1a6:	9301      	str	r3, [sp, #4]
   dd1a8:	2900      	cmp	r1, #0
   dd1aa:	f10d 0203 	add.w	r2, sp, #3
   dd1ae:	f280 81e7 	bge.w	dd580 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x472>
   dd1b2:	4249      	negs	r1, r1
   dd1b4:	a801      	add	r0, sp, #4
   dd1b6:	f7ff ff9f 	bl	dd0f8 <_ZL5sub32PmmPa>

    ADD(  9 ); ADD( 10 );
   dd1ba:	68a3      	ldr	r3, [r4, #8]
   dd1bc:	f10d 0203 	add.w	r2, sp, #3
   dd1c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
   dd1c2:	a801      	add	r0, sp, #4
   dd1c4:	f7ff ff8e 	bl	dd0e4 <_ZL5add32PmmPa>
   dd1c8:	68a3      	ldr	r3, [r4, #8]
   dd1ca:	f10d 0203 	add.w	r2, sp, #3
   dd1ce:	6a99      	ldr	r1, [r3, #40]	; 0x28
   dd1d0:	a801      	add	r0, sp, #4
   dd1d2:	f7ff ff87 	bl	dd0e4 <_ZL5add32PmmPa>
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
   dd1d6:	68a3      	ldr	r3, [r4, #8]
   dd1d8:	f10d 0203 	add.w	r2, sp, #3
   dd1dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
   dd1de:	a801      	add	r0, sp, #4
   dd1e0:	f7ff ff8a 	bl	dd0f8 <_ZL5sub32PmmPa>
   dd1e4:	68a3      	ldr	r3, [r4, #8]
   dd1e6:	f10d 0203 	add.w	r2, sp, #3
   dd1ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd1ec:	a801      	add	r0, sp, #4
   dd1ee:	f7ff ff83 	bl	dd0f8 <_ZL5sub32PmmPa>
   dd1f2:	68a3      	ldr	r3, [r4, #8]
   dd1f4:	f10d 0203 	add.w	r2, sp, #3
   dd1f8:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dd1fa:	a801      	add	r0, sp, #4
   dd1fc:	f7ff ff7c 	bl	dd0f8 <_ZL5sub32PmmPa>
   dd200:	68a3      	ldr	r3, [r4, #8]
   dd202:	f10d 0203 	add.w	r2, sp, #3
   dd206:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dd208:	a801      	add	r0, sp, #4
   dd20a:	f7ff ff75 	bl	dd0f8 <_ZL5sub32PmmPa>
   dd20e:	68a3      	ldr	r3, [r4, #8]
   dd210:	9a01      	ldr	r2, [sp, #4]
   dd212:	605a      	str	r2, [r3, #4]
   dd214:	68a3      	ldr	r3, [r4, #8]
   dd216:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   dd21a:	689b      	ldr	r3, [r3, #8]
   dd21c:	9301      	str	r3, [sp, #4]
   dd21e:	2300      	movs	r3, #0
   dd220:	4299      	cmp	r1, r3
   dd222:	f88d 3003 	strb.w	r3, [sp, #3]
   dd226:	f10d 0203 	add.w	r2, sp, #3
   dd22a:	f280 81ad 	bge.w	dd588 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x47a>
   dd22e:	4249      	negs	r1, r1
   dd230:	a801      	add	r0, sp, #4
   dd232:	f7ff ff61 	bl	dd0f8 <_ZL5sub32PmmPa>

    ADD( 10 ); ADD( 11 );
   dd236:	68a3      	ldr	r3, [r4, #8]
   dd238:	f10d 0203 	add.w	r2, sp, #3
   dd23c:	6a99      	ldr	r1, [r3, #40]	; 0x28
   dd23e:	a801      	add	r0, sp, #4
   dd240:	f7ff ff50 	bl	dd0e4 <_ZL5add32PmmPa>
   dd244:	68a3      	ldr	r3, [r4, #8]
   dd246:	f10d 0203 	add.w	r2, sp, #3
   dd24a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   dd24c:	a801      	add	r0, sp, #4
   dd24e:	f7ff ff49 	bl	dd0e4 <_ZL5add32PmmPa>
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
   dd252:	68a3      	ldr	r3, [r4, #8]
   dd254:	f10d 0203 	add.w	r2, sp, #3
   dd258:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd25a:	a801      	add	r0, sp, #4
   dd25c:	f7ff ff4c 	bl	dd0f8 <_ZL5sub32PmmPa>
   dd260:	68a3      	ldr	r3, [r4, #8]
   dd262:	f10d 0203 	add.w	r2, sp, #3
   dd266:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dd268:	a801      	add	r0, sp, #4
   dd26a:	f7ff ff45 	bl	dd0f8 <_ZL5sub32PmmPa>
   dd26e:	68a3      	ldr	r3, [r4, #8]
   dd270:	f10d 0203 	add.w	r2, sp, #3
   dd274:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dd276:	a801      	add	r0, sp, #4
   dd278:	f7ff ff3e 	bl	dd0f8 <_ZL5sub32PmmPa>
   dd27c:	68a3      	ldr	r3, [r4, #8]
   dd27e:	9a01      	ldr	r2, [sp, #4]
   dd280:	609a      	str	r2, [r3, #8]
   dd282:	68a3      	ldr	r3, [r4, #8]
   dd284:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   dd288:	68db      	ldr	r3, [r3, #12]
   dd28a:	9301      	str	r3, [sp, #4]
   dd28c:	2300      	movs	r3, #0
   dd28e:	4299      	cmp	r1, r3
   dd290:	f88d 3003 	strb.w	r3, [sp, #3]
   dd294:	f10d 0203 	add.w	r2, sp, #3
   dd298:	f280 817a 	bge.w	dd590 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x482>
   dd29c:	4249      	negs	r1, r1
   dd29e:	a801      	add	r0, sp, #4
   dd2a0:	f7ff ff2a 	bl	dd0f8 <_ZL5sub32PmmPa>

    ADD( 11 ); ADD( 11 ); ADD( 12 ); ADD( 12 ); ADD( 13 );
   dd2a4:	68a3      	ldr	r3, [r4, #8]
   dd2a6:	f10d 0203 	add.w	r2, sp, #3
   dd2aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   dd2ac:	a801      	add	r0, sp, #4
   dd2ae:	f7ff ff19 	bl	dd0e4 <_ZL5add32PmmPa>
   dd2b2:	68a3      	ldr	r3, [r4, #8]
   dd2b4:	f10d 0203 	add.w	r2, sp, #3
   dd2b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   dd2ba:	a801      	add	r0, sp, #4
   dd2bc:	f7ff ff12 	bl	dd0e4 <_ZL5add32PmmPa>
   dd2c0:	68a3      	ldr	r3, [r4, #8]
   dd2c2:	f10d 0203 	add.w	r2, sp, #3
   dd2c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
   dd2c8:	a801      	add	r0, sp, #4
   dd2ca:	f7ff ff0b 	bl	dd0e4 <_ZL5add32PmmPa>
   dd2ce:	68a3      	ldr	r3, [r4, #8]
   dd2d0:	f10d 0203 	add.w	r2, sp, #3
   dd2d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
   dd2d6:	a801      	add	r0, sp, #4
   dd2d8:	f7ff ff04 	bl	dd0e4 <_ZL5add32PmmPa>
   dd2dc:	68a3      	ldr	r3, [r4, #8]
   dd2de:	f10d 0203 	add.w	r2, sp, #3
   dd2e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd2e4:	a801      	add	r0, sp, #4
   dd2e6:	f7ff fefd 	bl	dd0e4 <_ZL5add32PmmPa>
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
   dd2ea:	68a3      	ldr	r3, [r4, #8]
   dd2ec:	f10d 0203 	add.w	r2, sp, #3
   dd2f0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dd2f2:	a801      	add	r0, sp, #4
   dd2f4:	f7ff ff00 	bl	dd0f8 <_ZL5sub32PmmPa>
   dd2f8:	68a3      	ldr	r3, [r4, #8]
   dd2fa:	f10d 0203 	add.w	r2, sp, #3
   dd2fe:	6a19      	ldr	r1, [r3, #32]
   dd300:	a801      	add	r0, sp, #4
   dd302:	f7ff fef9 	bl	dd0f8 <_ZL5sub32PmmPa>
   dd306:	68a3      	ldr	r3, [r4, #8]
   dd308:	f10d 0203 	add.w	r2, sp, #3
   dd30c:	6a59      	ldr	r1, [r3, #36]	; 0x24
   dd30e:	a801      	add	r0, sp, #4
   dd310:	f7ff fef2 	bl	dd0f8 <_ZL5sub32PmmPa>
   dd314:	68a3      	ldr	r3, [r4, #8]
   dd316:	9a01      	ldr	r2, [sp, #4]
   dd318:	60da      	str	r2, [r3, #12]
   dd31a:	68a3      	ldr	r3, [r4, #8]
   dd31c:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   dd320:	691b      	ldr	r3, [r3, #16]
   dd322:	9301      	str	r3, [sp, #4]
   dd324:	2300      	movs	r3, #0
   dd326:	4299      	cmp	r1, r3
   dd328:	f88d 3003 	strb.w	r3, [sp, #3]
   dd32c:	f10d 0203 	add.w	r2, sp, #3
   dd330:	f280 8132 	bge.w	dd598 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x48a>
   dd334:	4249      	negs	r1, r1
   dd336:	a801      	add	r0, sp, #4
   dd338:	f7ff fede 	bl	dd0f8 <_ZL5sub32PmmPa>

    ADD( 12 ); ADD( 12 ); ADD( 13 ); ADD( 13 ); ADD( 14 );
   dd33c:	68a3      	ldr	r3, [r4, #8]
   dd33e:	f10d 0203 	add.w	r2, sp, #3
   dd342:	6b19      	ldr	r1, [r3, #48]	; 0x30
   dd344:	a801      	add	r0, sp, #4
   dd346:	f7ff fecd 	bl	dd0e4 <_ZL5add32PmmPa>
   dd34a:	68a3      	ldr	r3, [r4, #8]
   dd34c:	f10d 0203 	add.w	r2, sp, #3
   dd350:	6b19      	ldr	r1, [r3, #48]	; 0x30
   dd352:	a801      	add	r0, sp, #4
   dd354:	f7ff fec6 	bl	dd0e4 <_ZL5add32PmmPa>
   dd358:	68a3      	ldr	r3, [r4, #8]
   dd35a:	f10d 0203 	add.w	r2, sp, #3
   dd35e:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd360:	a801      	add	r0, sp, #4
   dd362:	f7ff febf 	bl	dd0e4 <_ZL5add32PmmPa>
   dd366:	68a3      	ldr	r3, [r4, #8]
   dd368:	f10d 0203 	add.w	r2, sp, #3
   dd36c:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd36e:	a801      	add	r0, sp, #4
   dd370:	f7ff feb8 	bl	dd0e4 <_ZL5add32PmmPa>
   dd374:	68a3      	ldr	r3, [r4, #8]
   dd376:	f10d 0203 	add.w	r2, sp, #3
   dd37a:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dd37c:	a801      	add	r0, sp, #4
   dd37e:	f7ff feb1 	bl	dd0e4 <_ZL5add32PmmPa>
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
   dd382:	68a3      	ldr	r3, [r4, #8]
   dd384:	f10d 0203 	add.w	r2, sp, #3
   dd388:	6a59      	ldr	r1, [r3, #36]	; 0x24
   dd38a:	a801      	add	r0, sp, #4
   dd38c:	f7ff feb4 	bl	dd0f8 <_ZL5sub32PmmPa>
   dd390:	68a3      	ldr	r3, [r4, #8]
   dd392:	f10d 0203 	add.w	r2, sp, #3
   dd396:	6a99      	ldr	r1, [r3, #40]	; 0x28
   dd398:	a801      	add	r0, sp, #4
   dd39a:	f7ff fead 	bl	dd0f8 <_ZL5sub32PmmPa>
   dd39e:	68a3      	ldr	r3, [r4, #8]
   dd3a0:	9a01      	ldr	r2, [sp, #4]
   dd3a2:	611a      	str	r2, [r3, #16]
   dd3a4:	68a3      	ldr	r3, [r4, #8]
   dd3a6:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   dd3aa:	695b      	ldr	r3, [r3, #20]
   dd3ac:	9301      	str	r3, [sp, #4]
   dd3ae:	2300      	movs	r3, #0
   dd3b0:	4299      	cmp	r1, r3
   dd3b2:	f88d 3003 	strb.w	r3, [sp, #3]
   dd3b6:	f10d 0203 	add.w	r2, sp, #3
   dd3ba:	f280 80f1 	bge.w	dd5a0 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x492>
   dd3be:	4249      	negs	r1, r1
   dd3c0:	a801      	add	r0, sp, #4
   dd3c2:	f7ff fe99 	bl	dd0f8 <_ZL5sub32PmmPa>

    ADD( 13 ); ADD( 13 ); ADD( 14 ); ADD( 14 ); ADD( 15 );
   dd3c6:	68a3      	ldr	r3, [r4, #8]
   dd3c8:	f10d 0203 	add.w	r2, sp, #3
   dd3cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd3ce:	a801      	add	r0, sp, #4
   dd3d0:	f7ff fe88 	bl	dd0e4 <_ZL5add32PmmPa>
   dd3d4:	68a3      	ldr	r3, [r4, #8]
   dd3d6:	f10d 0203 	add.w	r2, sp, #3
   dd3da:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd3dc:	a801      	add	r0, sp, #4
   dd3de:	f7ff fe81 	bl	dd0e4 <_ZL5add32PmmPa>
   dd3e2:	68a3      	ldr	r3, [r4, #8]
   dd3e4:	f10d 0203 	add.w	r2, sp, #3
   dd3e8:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dd3ea:	a801      	add	r0, sp, #4
   dd3ec:	f7ff fe7a 	bl	dd0e4 <_ZL5add32PmmPa>
   dd3f0:	68a3      	ldr	r3, [r4, #8]
   dd3f2:	f10d 0203 	add.w	r2, sp, #3
   dd3f6:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dd3f8:	a801      	add	r0, sp, #4
   dd3fa:	f7ff fe73 	bl	dd0e4 <_ZL5add32PmmPa>
   dd3fe:	68a3      	ldr	r3, [r4, #8]
   dd400:	f10d 0203 	add.w	r2, sp, #3
   dd404:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dd406:	a801      	add	r0, sp, #4
   dd408:	f7ff fe6c 	bl	dd0e4 <_ZL5add32PmmPa>
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
   dd40c:	68a3      	ldr	r3, [r4, #8]
   dd40e:	f10d 0203 	add.w	r2, sp, #3
   dd412:	6a99      	ldr	r1, [r3, #40]	; 0x28
   dd414:	a801      	add	r0, sp, #4
   dd416:	f7ff fe6f 	bl	dd0f8 <_ZL5sub32PmmPa>
   dd41a:	68a3      	ldr	r3, [r4, #8]
   dd41c:	f10d 0203 	add.w	r2, sp, #3
   dd420:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   dd422:	a801      	add	r0, sp, #4
   dd424:	f7ff fe68 	bl	dd0f8 <_ZL5sub32PmmPa>
   dd428:	68a3      	ldr	r3, [r4, #8]
   dd42a:	9a01      	ldr	r2, [sp, #4]
   dd42c:	615a      	str	r2, [r3, #20]
   dd42e:	68a3      	ldr	r3, [r4, #8]
   dd430:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   dd434:	699b      	ldr	r3, [r3, #24]
   dd436:	9301      	str	r3, [sp, #4]
   dd438:	2300      	movs	r3, #0
   dd43a:	4299      	cmp	r1, r3
   dd43c:	f88d 3003 	strb.w	r3, [sp, #3]
   dd440:	f10d 0203 	add.w	r2, sp, #3
   dd444:	f280 80b0 	bge.w	dd5a8 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x49a>
   dd448:	4249      	negs	r1, r1
   dd44a:	a801      	add	r0, sp, #4
   dd44c:	f7ff fe54 	bl	dd0f8 <_ZL5sub32PmmPa>

    ADD( 14 ); ADD( 14 ); ADD( 15 ); ADD( 15 ); ADD( 14 ); ADD( 13 );
   dd450:	68a3      	ldr	r3, [r4, #8]
   dd452:	f10d 0203 	add.w	r2, sp, #3
   dd456:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dd458:	a801      	add	r0, sp, #4
   dd45a:	f7ff fe43 	bl	dd0e4 <_ZL5add32PmmPa>
   dd45e:	68a3      	ldr	r3, [r4, #8]
   dd460:	f10d 0203 	add.w	r2, sp, #3
   dd464:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dd466:	a801      	add	r0, sp, #4
   dd468:	f7ff fe3c 	bl	dd0e4 <_ZL5add32PmmPa>
   dd46c:	68a3      	ldr	r3, [r4, #8]
   dd46e:	f10d 0203 	add.w	r2, sp, #3
   dd472:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dd474:	a801      	add	r0, sp, #4
   dd476:	f7ff fe35 	bl	dd0e4 <_ZL5add32PmmPa>
   dd47a:	68a3      	ldr	r3, [r4, #8]
   dd47c:	f10d 0203 	add.w	r2, sp, #3
   dd480:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dd482:	a801      	add	r0, sp, #4
   dd484:	f7ff fe2e 	bl	dd0e4 <_ZL5add32PmmPa>
   dd488:	68a3      	ldr	r3, [r4, #8]
   dd48a:	f10d 0203 	add.w	r2, sp, #3
   dd48e:	6b99      	ldr	r1, [r3, #56]	; 0x38
   dd490:	a801      	add	r0, sp, #4
   dd492:	f7ff fe27 	bl	dd0e4 <_ZL5add32PmmPa>
   dd496:	68a3      	ldr	r3, [r4, #8]
   dd498:	f10d 0203 	add.w	r2, sp, #3
   dd49c:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd49e:	a801      	add	r0, sp, #4
   dd4a0:	f7ff fe20 	bl	dd0e4 <_ZL5add32PmmPa>
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
   dd4a4:	68a3      	ldr	r3, [r4, #8]
   dd4a6:	f10d 0203 	add.w	r2, sp, #3
   dd4aa:	6a19      	ldr	r1, [r3, #32]
   dd4ac:	a801      	add	r0, sp, #4
   dd4ae:	f7ff fe23 	bl	dd0f8 <_ZL5sub32PmmPa>
   dd4b2:	68a3      	ldr	r3, [r4, #8]
   dd4b4:	f10d 0203 	add.w	r2, sp, #3
   dd4b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
   dd4ba:	a801      	add	r0, sp, #4
   dd4bc:	f7ff fe1c 	bl	dd0f8 <_ZL5sub32PmmPa>
   dd4c0:	68a3      	ldr	r3, [r4, #8]
   dd4c2:	9a01      	ldr	r2, [sp, #4]
   dd4c4:	619a      	str	r2, [r3, #24]
   dd4c6:	68a3      	ldr	r3, [r4, #8]
   dd4c8:	f99d 1003 	ldrsb.w	r1, [sp, #3]
   dd4cc:	69db      	ldr	r3, [r3, #28]
   dd4ce:	9301      	str	r3, [sp, #4]
   dd4d0:	2300      	movs	r3, #0
   dd4d2:	4299      	cmp	r1, r3
   dd4d4:	f88d 3003 	strb.w	r3, [sp, #3]
   dd4d8:	f10d 0203 	add.w	r2, sp, #3
   dd4dc:	da68      	bge.n	dd5b0 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x4a2>
   dd4de:	4249      	negs	r1, r1
   dd4e0:	a801      	add	r0, sp, #4
   dd4e2:	f7ff fe09 	bl	dd0f8 <_ZL5sub32PmmPa>

    ADD( 15 ); ADD( 15 ); ADD( 15 ); ADD( 8 );
   dd4e6:	68a3      	ldr	r3, [r4, #8]
   dd4e8:	f10d 0203 	add.w	r2, sp, #3
   dd4ec:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dd4ee:	a801      	add	r0, sp, #4
   dd4f0:	f7ff fdf8 	bl	dd0e4 <_ZL5add32PmmPa>
   dd4f4:	68a3      	ldr	r3, [r4, #8]
   dd4f6:	f10d 0203 	add.w	r2, sp, #3
   dd4fa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dd4fc:	a801      	add	r0, sp, #4
   dd4fe:	f7ff fdf1 	bl	dd0e4 <_ZL5add32PmmPa>
   dd502:	68a3      	ldr	r3, [r4, #8]
   dd504:	f10d 0203 	add.w	r2, sp, #3
   dd508:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   dd50a:	a801      	add	r0, sp, #4
   dd50c:	f7ff fdea 	bl	dd0e4 <_ZL5add32PmmPa>
   dd510:	68a3      	ldr	r3, [r4, #8]
   dd512:	f10d 0203 	add.w	r2, sp, #3
   dd516:	6a19      	ldr	r1, [r3, #32]
   dd518:	a801      	add	r0, sp, #4
   dd51a:	f7ff fde3 	bl	dd0e4 <_ZL5add32PmmPa>
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
   dd51e:	68a3      	ldr	r3, [r4, #8]
   dd520:	f10d 0203 	add.w	r2, sp, #3
   dd524:	6a99      	ldr	r1, [r3, #40]	; 0x28
   dd526:	a801      	add	r0, sp, #4
   dd528:	f7ff fde6 	bl	dd0f8 <_ZL5sub32PmmPa>
   dd52c:	68a3      	ldr	r3, [r4, #8]
   dd52e:	f10d 0203 	add.w	r2, sp, #3
   dd532:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   dd534:	a801      	add	r0, sp, #4
   dd536:	f7ff fddf 	bl	dd0f8 <_ZL5sub32PmmPa>
   dd53a:	68a3      	ldr	r3, [r4, #8]
   dd53c:	f10d 0203 	add.w	r2, sp, #3
   dd540:	6b19      	ldr	r1, [r3, #48]	; 0x30
   dd542:	a801      	add	r0, sp, #4
   dd544:	f7ff fdd8 	bl	dd0f8 <_ZL5sub32PmmPa>
   dd548:	68a3      	ldr	r3, [r4, #8]
   dd54a:	f10d 0203 	add.w	r2, sp, #3
   dd54e:	6b59      	ldr	r1, [r3, #52]	; 0x34
   dd550:	a801      	add	r0, sp, #4
   dd552:	f7ff fdd1 	bl	dd0f8 <_ZL5sub32PmmPa>
   dd556:	68a3      	ldr	r3, [r4, #8]
   dd558:	9a01      	ldr	r2, [sp, #4]
   dd55a:	61da      	str	r2, [r3, #28]
   dd55c:	f99d 3003 	ldrsb.w	r3, [sp, #3]
   dd560:	68a2      	ldr	r2, [r4, #8]
   dd562:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   dd566:	6213      	str	r3, [r2, #32]
   dd568:	2300      	movs	r3, #0
   dd56a:	9301      	str	r3, [sp, #4]
   dd56c:	2308      	movs	r3, #8
   dd56e:	6862      	ldr	r2, [r4, #4]
   dd570:	3301      	adds	r3, #1
   dd572:	429a      	cmp	r2, r3
   dd574:	d920      	bls.n	dd5b8 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x4aa>
   dd576:	68a2      	ldr	r2, [r4, #8]
   dd578:	9901      	ldr	r1, [sp, #4]
   dd57a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   dd57e:	e7f6      	b.n	dd56e <_ZL12ecp_mod_p256P11mbedtls_mpi+0x460>
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
   dd580:	a801      	add	r0, sp, #4
   dd582:	f7ff fdaf 	bl	dd0e4 <_ZL5add32PmmPa>
   dd586:	e618      	b.n	dd1ba <_ZL12ecp_mod_p256P11mbedtls_mpi+0xac>
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
   dd588:	a801      	add	r0, sp, #4
   dd58a:	f7ff fdab 	bl	dd0e4 <_ZL5add32PmmPa>
   dd58e:	e652      	b.n	dd236 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x128>
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
   dd590:	a801      	add	r0, sp, #4
   dd592:	f7ff fda7 	bl	dd0e4 <_ZL5add32PmmPa>
   dd596:	e685      	b.n	dd2a4 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x196>
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
   dd598:	a801      	add	r0, sp, #4
   dd59a:	f7ff fda3 	bl	dd0e4 <_ZL5add32PmmPa>
   dd59e:	e6cd      	b.n	dd33c <_ZL12ecp_mod_p256P11mbedtls_mpi+0x22e>
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
   dd5a0:	a801      	add	r0, sp, #4
   dd5a2:	f7ff fd9f 	bl	dd0e4 <_ZL5add32PmmPa>
   dd5a6:	e70e      	b.n	dd3c6 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x2b8>
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
   dd5a8:	a801      	add	r0, sp, #4
   dd5aa:	f7ff fd9b 	bl	dd0e4 <_ZL5add32PmmPa>
   dd5ae:	e74f      	b.n	dd450 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x342>
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
   dd5b0:	a801      	add	r0, sp, #4
   dd5b2:	f7ff fd97 	bl	dd0e4 <_ZL5add32PmmPa>
   dd5b6:	e796      	b.n	dd4e6 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x3d8>
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
   dd5b8:	f99d 2003 	ldrsb.w	r2, [sp, #3]
   dd5bc:	2a00      	cmp	r2, #0
   dd5be:	da10      	bge.n	dd5e2 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x4d4>
        C->p[ C->n - 1 ] = (mbedtls_mpi_uint) -c;
   dd5c0:	9b03      	ldr	r3, [sp, #12]
   dd5c2:	9904      	ldr	r1, [sp, #16]
   dd5c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   dd5c8:	3b01      	subs	r3, #1
   dd5ca:	4252      	negs	r2, r2
   dd5cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, C, N ) );
   dd5d0:	4620      	mov	r0, r4
   dd5d2:	4622      	mov	r2, r4
   dd5d4:	a902      	add	r1, sp, #8
   dd5d6:	f003 fe4f 	bl	e1278 <mbedtls_mpi_sub_abs>
   dd5da:	b910      	cbnz	r0, dd5e2 <_ZL12ecp_mod_p256P11mbedtls_mpi+0x4d4>
    N->s = -1;
   dd5dc:	f04f 33ff 	mov.w	r3, #4294967295
   dd5e0:	6023      	str	r3, [r4, #0]

cleanup:
    return( ret );
}
   dd5e2:	4628      	mov	r0, r5
   dd5e4:	b00f      	add	sp, #60	; 0x3c
   dd5e6:	bd30      	pop	{r4, r5, pc}

000dd5e8 <mbedtls_ecp_group_load>:
{
   dd5e8:	b538      	push	{r3, r4, r5, lr}
   dd5ea:	460d      	mov	r5, r1
   dd5ec:	4604      	mov	r4, r0
    mbedtls_ecp_group_free( grp );
   dd5ee:	f7fb fcd0 	bl	d8f92 <mbedtls_ecp_group_free>
    switch( id )
   dd5f2:	2d03      	cmp	r5, #3
    grp->id = id;
   dd5f4:	7025      	strb	r5, [r4, #0]
    switch( id )
   dd5f6:	d127      	bne.n	dd648 <mbedtls_ecp_group_load+0x60>
            NIST_MODP( p256 );
   dd5f8:	4b16      	ldr	r3, [pc, #88]	; (dd654 <mbedtls_ecp_group_load+0x6c>)
    X->p = (mbedtls_mpi_uint *) p;
   dd5fa:	4a17      	ldr	r2, [pc, #92]	; (dd658 <mbedtls_ecp_group_load+0x70>)
            NIST_MODP( p256 );
   dd5fc:	6663      	str	r3, [r4, #100]	; 0x64
    X->n = len / sizeof( mbedtls_mpi_uint );
   dd5fe:	2501      	movs	r5, #1
   dd600:	2308      	movs	r3, #8
    X->p = (mbedtls_mpi_uint *) p;
   dd602:	60e2      	str	r2, [r4, #12]
   dd604:	4a15      	ldr	r2, [pc, #84]	; (dd65c <mbedtls_ecp_group_load+0x74>)
   dd606:	6262      	str	r2, [r4, #36]	; 0x24
    X->n = len / sizeof( mbedtls_mpi_uint );
   dd608:	e9c4 5301 	strd	r5, r3, [r4, #4]
   dd60c:	e9c4 5307 	strd	r5, r3, [r4, #28]
   dd610:	e9c4 5313 	strd	r5, r3, [r4, #76]	; 0x4c
   dd614:	e9c4 530a 	strd	r5, r3, [r4, #40]	; 0x28
    X->p = (mbedtls_mpi_uint *) p;
   dd618:	4a11      	ldr	r2, [pc, #68]	; (dd660 <mbedtls_ecp_group_load+0x78>)
    X->n = len / sizeof( mbedtls_mpi_uint );
   dd61a:	63a3      	str	r3, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
   dd61c:	4b11      	ldr	r3, [pc, #68]	; (dd664 <mbedtls_ecp_group_load+0x7c>)
   dd61e:	6562      	str	r2, [r4, #84]	; 0x54
   dd620:	4a11      	ldr	r2, [pc, #68]	; (dd668 <mbedtls_ecp_group_load+0x80>)
    X->n = 1;
   dd622:	6465      	str	r5, [r4, #68]	; 0x44
    X->s = 1;
   dd624:	e9c4 350f 	strd	r3, r5, [r4, #60]	; 0x3c
    X->p = one;
   dd628:	4b10      	ldr	r3, [pc, #64]	; (dd66c <mbedtls_ecp_group_load+0x84>)
   dd62a:	64a3      	str	r3, [r4, #72]	; 0x48
    X->s = 1;
   dd62c:	e9c4 250c 	strd	r2, r5, [r4, #48]	; 0x30
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
   dd630:	1d20      	adds	r0, r4, #4
   dd632:	f003 fbb5 	bl	e0da0 <mbedtls_mpi_bitlen>
   dd636:	65a0      	str	r0, [r4, #88]	; 0x58
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
   dd638:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   dd63c:	f003 fbb0 	bl	e0da0 <mbedtls_mpi_bitlen>
    grp->h = 1;
   dd640:	e9c4 0517 	strd	r0, r5, [r4, #92]	; 0x5c
            return( LOAD_GROUP( secp256r1 ) );
   dd644:	2000      	movs	r0, #0
}
   dd646:	bd38      	pop	{r3, r4, r5, pc}
            mbedtls_ecp_group_free( grp );
   dd648:	4620      	mov	r0, r4
   dd64a:	f7fb fca2 	bl	d8f92 <mbedtls_ecp_group_free>
            return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   dd64e:	4808      	ldr	r0, [pc, #32]	; (dd670 <mbedtls_ecp_group_load+0x88>)
   dd650:	e7f9      	b.n	dd646 <mbedtls_ecp_group_load+0x5e>
   dd652:	bf00      	nop
   dd654:	000dd10f 	.word	0x000dd10f
   dd658:	000ecc8c 	.word	0x000ecc8c
   dd65c:	000ecc4c 	.word	0x000ecc4c
   dd660:	000ecc6c 	.word	0x000ecc6c
   dd664:	000ecccc 	.word	0x000ecccc
   dd668:	000eccac 	.word	0x000eccac
   dd66c:	2003ac14 	.word	0x2003ac14
   dd670:	ffffb180 	.word	0xffffb180

000dd674 <_ZL15x509_memcasecmpPKvS0_j>:

/*
 * Like memcmp, but case-insensitive and always returns -1 if different
 */
static int x509_memcasecmp( const void *s1, const void *s2, size_t len )
{
   dd674:	b570      	push	{r4, r5, r6, lr}
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = (const unsigned char *)s1, *n2 = (const unsigned char *)s2;

    for( i = 0; i < len; i++ )
   dd676:	2400      	movs	r4, #0
   dd678:	4294      	cmp	r4, r2
   dd67a:	d00e      	beq.n	dd69a <_ZL15x509_memcasecmpPKvS0_j+0x26>
    {
        diff = n1[i] ^ n2[i];
   dd67c:	5d03      	ldrb	r3, [r0, r4]
   dd67e:	5d0d      	ldrb	r5, [r1, r4]

        if( diff == 0 )
   dd680:	42ab      	cmp	r3, r5
        diff = n1[i] ^ n2[i];
   dd682:	ea83 0605 	eor.w	r6, r3, r5
        if( diff == 0 )
   dd686:	d006      	beq.n	dd696 <_ZL15x509_memcasecmpPKvS0_j+0x22>
            continue;

        if( diff == 32 &&
   dd688:	2e20      	cmp	r6, #32
   dd68a:	d108      	bne.n	dd69e <_ZL15x509_memcasecmpPKvS0_j+0x2a>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
   dd68c:	f023 0320 	bic.w	r3, r3, #32
   dd690:	3b41      	subs	r3, #65	; 0x41
   dd692:	2b19      	cmp	r3, #25
   dd694:	d803      	bhi.n	dd69e <_ZL15x509_memcasecmpPKvS0_j+0x2a>
    for( i = 0; i < len; i++ )
   dd696:	3401      	adds	r4, #1
   dd698:	e7ee      	b.n	dd678 <_ZL15x509_memcasecmpPKvS0_j+0x4>
        }

        return( -1 );
    }

    return( 0 );
   dd69a:	2000      	movs	r0, #0
}
   dd69c:	bd70      	pop	{r4, r5, r6, pc}
        return( -1 );
   dd69e:	f04f 30ff 	mov.w	r0, #4294967295
   dd6a2:	e7fb      	b.n	dd69c <_ZL15x509_memcasecmpPKvS0_j+0x28>

000dd6a4 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>:
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
   dd6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dd6a6:	4605      	mov	r5, r0
   dd6a8:	460c      	mov	r4, r1
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
   dd6aa:	b925      	cbnz	r5, dd6b6 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x12>
   dd6ac:	1e20      	subs	r0, r4, #0
   dd6ae:	bf18      	it	ne
   dd6b0:	2001      	movne	r0, #1
   dd6b2:	4240      	negs	r0, r0
        b = b->next;
    }

    /* a == NULL == b */
    return( 0 );
}
   dd6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( a == NULL || b == NULL )
   dd6b6:	2c00      	cmp	r4, #0
   dd6b8:	d031      	beq.n	dd71e <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        if( a->oid.tag != b->oid.tag ||
   dd6ba:	682a      	ldr	r2, [r5, #0]
   dd6bc:	6823      	ldr	r3, [r4, #0]
   dd6be:	429a      	cmp	r2, r3
   dd6c0:	d12d      	bne.n	dd71e <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            a->oid.len != b->oid.len ||
   dd6c2:	6863      	ldr	r3, [r4, #4]
        if( a->oid.tag != b->oid.tag ||
   dd6c4:	686a      	ldr	r2, [r5, #4]
   dd6c6:	429a      	cmp	r2, r3
   dd6c8:	d129      	bne.n	dd71e <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
   dd6ca:	68a1      	ldr	r1, [r4, #8]
   dd6cc:	68a8      	ldr	r0, [r5, #8]
   dd6ce:	f00b fb7f 	bl	e8dd0 <memcmp>
            a->oid.len != b->oid.len ||
   dd6d2:	bb20      	cbnz	r0, dd71e <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
    if( a->tag == b->tag &&
   dd6d4:	68ef      	ldr	r7, [r5, #12]
   dd6d6:	68e6      	ldr	r6, [r4, #12]
   dd6d8:	42b7      	cmp	r7, r6
   dd6da:	d108      	bne.n	dd6ee <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        a->len == b->len &&
   dd6dc:	6923      	ldr	r3, [r4, #16]
    if( a->tag == b->tag &&
   dd6de:	692a      	ldr	r2, [r5, #16]
   dd6e0:	429a      	cmp	r2, r3
   dd6e2:	d104      	bne.n	dd6ee <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        memcmp( a->p, b->p, b->len ) == 0 )
   dd6e4:	6961      	ldr	r1, [r4, #20]
   dd6e6:	6968      	ldr	r0, [r5, #20]
   dd6e8:	f00b fb72 	bl	e8dd0 <memcmp>
        a->len == b->len &&
   dd6ec:	b180      	cbz	r0, dd710 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6c>
        a->len == b->len &&
   dd6ee:	2f0c      	cmp	r7, #12
   dd6f0:	d001      	beq.n	dd6f6 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x52>
    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
   dd6f2:	2f13      	cmp	r7, #19
   dd6f4:	d113      	bne.n	dd71e <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
   dd6f6:	2e0c      	cmp	r6, #12
   dd6f8:	d001      	beq.n	dd6fe <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x5a>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
   dd6fa:	2e13      	cmp	r6, #19
   dd6fc:	d10f      	bne.n	dd71e <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a->len == b->len &&
   dd6fe:	6923      	ldr	r3, [r4, #16]
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
   dd700:	692a      	ldr	r2, [r5, #16]
   dd702:	429a      	cmp	r2, r3
   dd704:	d10b      	bne.n	dd71e <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        x509_memcasecmp( a->p, b->p, b->len ) == 0 )
   dd706:	6961      	ldr	r1, [r4, #20]
   dd708:	6968      	ldr	r0, [r5, #20]
   dd70a:	f7ff ffb3 	bl	dd674 <_ZL15x509_memcasecmpPKvS0_j>
        a->len == b->len &&
   dd70e:	b930      	cbnz	r0, dd71e <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        if( a->next_merged != b->next_merged )
   dd710:	7f2a      	ldrb	r2, [r5, #28]
   dd712:	7f23      	ldrb	r3, [r4, #28]
   dd714:	429a      	cmp	r2, r3
   dd716:	d102      	bne.n	dd71e <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a = a->next;
   dd718:	69ad      	ldr	r5, [r5, #24]
        b = b->next;
   dd71a:	69a4      	ldr	r4, [r4, #24]
    while( a != NULL || b != NULL )
   dd71c:	e7c5      	b.n	dd6aa <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6>
            return( -1 );
   dd71e:	f04f 30ff 	mov.w	r0, #4294967295
   dd722:	e7c7      	b.n	dd6b4 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x10>

000dd724 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj>:
/*
 * Check for CN match
 */
static int x509_crt_check_cn( const mbedtls_x509_buf *name,
                              const char *cn, size_t cn_len )
{
   dd724:	b570      	push	{r4, r5, r6, lr}
    /* try exact match */
    if( name->len == cn_len &&
   dd726:	6845      	ldr	r5, [r0, #4]
   dd728:	4295      	cmp	r5, r2
{
   dd72a:	4606      	mov	r6, r0
   dd72c:	460c      	mov	r4, r1
    if( name->len == cn_len &&
   dd72e:	d104      	bne.n	dd73a <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x16>
        x509_memcasecmp( cn, name->p, cn_len ) == 0 )
   dd730:	6881      	ldr	r1, [r0, #8]
   dd732:	4620      	mov	r0, r4
   dd734:	f7ff ff9e 	bl	dd674 <_ZL15x509_memcasecmpPKvS0_j>
    if( name->len == cn_len &&
   dd738:	b310      	cbz	r0, dd780 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x5c>
    size_t cn_idx = 0, cn_len = strlen( cn );
   dd73a:	4620      	mov	r0, r4
   dd73c:	f00b fbcc 	bl	e8ed8 <strlen>
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
   dd740:	2d02      	cmp	r5, #2
    size_t cn_idx = 0, cn_len = strlen( cn );
   dd742:	4602      	mov	r2, r0
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
   dd744:	d91d      	bls.n	dd782 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x5e>
   dd746:	68b0      	ldr	r0, [r6, #8]
   dd748:	7803      	ldrb	r3, [r0, #0]
   dd74a:	2b2a      	cmp	r3, #42	; 0x2a
   dd74c:	d119      	bne.n	dd782 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x5e>
   dd74e:	7843      	ldrb	r3, [r0, #1]
   dd750:	2b2e      	cmp	r3, #46	; 0x2e
   dd752:	d116      	bne.n	dd782 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x5e>
    for( i = 0; i < cn_len; ++i )
   dd754:	2300      	movs	r3, #0
   dd756:	429a      	cmp	r2, r3
   dd758:	d013      	beq.n	dd782 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x5e>
        if( cn[i] == '.' )
   dd75a:	4621      	mov	r1, r4
   dd75c:	3401      	adds	r4, #1
   dd75e:	780e      	ldrb	r6, [r1, #0]
   dd760:	2e2e      	cmp	r6, #46	; 0x2e
   dd762:	d001      	beq.n	dd768 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x44>
    for( i = 0; i < cn_len; ++i )
   dd764:	3301      	adds	r3, #1
   dd766:	e7f6      	b.n	dd756 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x32>
    if( cn_idx == 0 )
   dd768:	b15b      	cbz	r3, dd782 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x5e>
    if( cn_len - cn_idx == name->len - 1 &&
   dd76a:	3d01      	subs	r5, #1
   dd76c:	1ad2      	subs	r2, r2, r3
   dd76e:	42aa      	cmp	r2, r5
   dd770:	d107      	bne.n	dd782 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x5e>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
   dd772:	3001      	adds	r0, #1
   dd774:	f7ff ff7e 	bl	dd674 <_ZL15x509_memcasecmpPKvS0_j>
    if( cn_len - cn_idx == name->len - 1 &&
   dd778:	3800      	subs	r0, #0
   dd77a:	bf18      	it	ne
   dd77c:	2001      	movne	r0, #1
   dd77e:	4240      	negs	r0, r0
    {
        return( 0 );
    }

    return( -1 );
}
   dd780:	bd70      	pop	{r4, r5, r6, pc}
    return( -1 );
   dd782:	f04f 30ff 	mov.w	r0, #4294967295
   dd786:	e7fb      	b.n	dd780 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj+0x5c>

000dd788 <_ZL25x509_profile_check_pk_algPK24mbedtls_x509_crt_profile17mbedtls_pk_type_t.isra.0>:
    if( pk_alg == MBEDTLS_PK_NONE )
   dd788:	b151      	cbz	r1, dd7a0 <_ZL25x509_profile_check_pk_algPK24mbedtls_x509_crt_profile17mbedtls_pk_type_t.isra.0+0x18>
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
   dd78a:	2301      	movs	r3, #1
   dd78c:	3901      	subs	r1, #1
   dd78e:	fa03 f101 	lsl.w	r1, r3, r1
   dd792:	6803      	ldr	r3, [r0, #0]
   dd794:	4219      	tst	r1, r3
   dd796:	bf0c      	ite	eq
   dd798:	f04f 30ff 	moveq.w	r0, #4294967295
   dd79c:	2000      	movne	r0, #0
   dd79e:	4770      	bx	lr
        return( -1 );
   dd7a0:	f04f 30ff 	mov.w	r0, #4294967295
}
   dd7a4:	4770      	bx	lr

000dd7a6 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>:
{
   dd7a6:	b570      	push	{r4, r5, r6, lr}
   dd7a8:	4615      	mov	r5, r2
    if( *p == end )
   dd7aa:	6802      	ldr	r2, [r0, #0]
   dd7ac:	428a      	cmp	r2, r1
{
   dd7ae:	4604      	mov	r4, r0
    if( *p == end )
   dd7b0:	d101      	bne.n	dd7b6 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x10>
        return( 0 );
   dd7b2:	2000      	movs	r0, #0
}
   dd7b4:	bd70      	pop	{r4, r5, r6, pc}
    uid->tag = **p;
   dd7b6:	7816      	ldrb	r6, [r2, #0]
   dd7b8:	462a      	mov	r2, r5
    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
   dd7ba:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    uid->tag = **p;
   dd7be:	f842 6b04 	str.w	r6, [r2], #4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
   dd7c2:	f7f8 fedd 	bl	d6580 <mbedtls_asn1_get_tag>
   dd7c6:	b128      	cbz	r0, dd7d4 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x2e>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   dd7c8:	f110 0f62 	cmn.w	r0, #98	; 0x62
   dd7cc:	d0f1      	beq.n	dd7b2 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0xc>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
   dd7ce:	f5a0 5006 	sub.w	r0, r0, #8576	; 0x2180
   dd7d2:	e7ef      	b.n	dd7b4 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0xe>
    uid->p = *p;
   dd7d4:	6823      	ldr	r3, [r4, #0]
    *p += uid->len;
   dd7d6:	686a      	ldr	r2, [r5, #4]
    uid->p = *p;
   dd7d8:	60ab      	str	r3, [r5, #8]
    *p += uid->len;
   dd7da:	4413      	add	r3, r2
   dd7dc:	6023      	str	r3, [r4, #0]
    return( 0 );
   dd7de:	e7e9      	b.n	dd7b4 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0xe>

000dd7e0 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context>:
{
   dd7e0:	b538      	push	{r3, r4, r5, lr}
   dd7e2:	4605      	mov	r5, r0
    const mbedtls_pk_type_t pk_alg = mbedtls_pk_get_type( pk );
   dd7e4:	4608      	mov	r0, r1
{
   dd7e6:	460c      	mov	r4, r1
    const mbedtls_pk_type_t pk_alg = mbedtls_pk_get_type( pk );
   dd7e8:	f001 fb12 	bl	dee10 <mbedtls_pk_get_type>
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
   dd7ec:	2801      	cmp	r0, #1
   dd7ee:	d001      	beq.n	dd7f4 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context+0x14>
   dd7f0:	2806      	cmp	r0, #6
   dd7f2:	d109      	bne.n	dd808 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context+0x28>
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
   dd7f4:	4620      	mov	r0, r4
   dd7f6:	f001 faa1 	bl	ded3c <mbedtls_pk_get_bitlen>
   dd7fa:	68eb      	ldr	r3, [r5, #12]
   dd7fc:	4298      	cmp	r0, r3
   dd7fe:	f04f 30ff 	mov.w	r0, #4294967295
   dd802:	bf28      	it	cs
   dd804:	2000      	movcs	r0, #0
}
   dd806:	bd38      	pop	{r3, r4, r5, pc}
    if( pk_alg == MBEDTLS_PK_ECDSA ||
   dd808:	1e83      	subs	r3, r0, #2
   dd80a:	b2db      	uxtb	r3, r3
   dd80c:	2b02      	cmp	r3, #2
   dd80e:	d80d      	bhi.n	dd82c <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context+0x4c>
        const mbedtls_ecp_group_id gid = mbedtls_pk_ec( *pk )->grp.id;
   dd810:	6863      	ldr	r3, [r4, #4]
   dd812:	781b      	ldrb	r3, [r3, #0]
        if( gid == MBEDTLS_ECP_DP_NONE )
   dd814:	b153      	cbz	r3, dd82c <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context+0x4c>
        if( ( profile->allowed_curves & MBEDTLS_X509_ID_FLAG( gid ) ) != 0 )
   dd816:	2201      	movs	r2, #1
   dd818:	3b01      	subs	r3, #1
   dd81a:	fa02 f303 	lsl.w	r3, r2, r3
   dd81e:	68aa      	ldr	r2, [r5, #8]
   dd820:	4213      	tst	r3, r2
   dd822:	bf0c      	ite	eq
   dd824:	f04f 30ff 	moveq.w	r0, #4294967295
   dd828:	2000      	movne	r0, #0
   dd82a:	e7ec      	b.n	dd806 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context+0x26>
    return( -1 );
   dd82c:	f04f 30ff 	mov.w	r0, #4294967295
   dd830:	e7e9      	b.n	dd806 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context+0x26>
	...

000dd834 <mbedtls_x509_crt_info>:
{
   dd834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dd838:	4680      	mov	r8, r0
   dd83a:	b08d      	sub	sp, #52	; 0x34
   dd83c:	468a      	mov	sl, r1
   dd83e:	4691      	mov	r9, r2
    if( NULL == crt )
   dd840:	461f      	mov	r7, r3
   dd842:	b95b      	cbnz	r3, dd85c <mbedtls_x509_crt_info+0x28>
        ret = mbedtls_snprintf( p, n, "\nCertificate is uninitialised!\n" );
   dd844:	4aa4      	ldr	r2, [pc, #656]	; (ddad8 <mbedtls_x509_crt_info+0x2a4>)
   dd846:	f008 f8c7 	bl	e59d8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   dd84a:	2800      	cmp	r0, #0
   dd84c:	da01      	bge.n	dd852 <mbedtls_x509_crt_info+0x1e>
   dd84e:	48a3      	ldr	r0, [pc, #652]	; (ddadc <mbedtls_x509_crt_info+0x2a8>)
   dd850:	e001      	b.n	dd856 <mbedtls_x509_crt_info+0x22>
   dd852:	4550      	cmp	r0, sl
   dd854:	d2fb      	bcs.n	dd84e <mbedtls_x509_crt_info+0x1a>
}
   dd856:	b00d      	add	sp, #52	; 0x34
   dd858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = mbedtls_snprintf( p, n, "%scert. version     : %d\n",
   dd85c:	699b      	ldr	r3, [r3, #24]
   dd85e:	9300      	str	r3, [sp, #0]
   dd860:	4613      	mov	r3, r2
   dd862:	4a9f      	ldr	r2, [pc, #636]	; (ddae0 <mbedtls_x509_crt_info+0x2ac>)
   dd864:	f008 f8b8 	bl	e59d8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd868:	2800      	cmp	r0, #0
   dd86a:	dbf0      	blt.n	dd84e <mbedtls_x509_crt_info+0x1a>
   dd86c:	4550      	cmp	r0, sl
   dd86e:	d2ee      	bcs.n	dd84e <mbedtls_x509_crt_info+0x1a>
   dd870:	ebaa 0500 	sub.w	r5, sl, r0
   dd874:	4480      	add	r8, r0
    ret = mbedtls_snprintf( p, n, "%sserial number     : ",
   dd876:	4a9b      	ldr	r2, [pc, #620]	; (ddae4 <mbedtls_x509_crt_info+0x2b0>)
   dd878:	464b      	mov	r3, r9
   dd87a:	4629      	mov	r1, r5
   dd87c:	4640      	mov	r0, r8
   dd87e:	f008 f8ab 	bl	e59d8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd882:	2800      	cmp	r0, #0
   dd884:	dbe3      	blt.n	dd84e <mbedtls_x509_crt_info+0x1a>
   dd886:	4285      	cmp	r5, r0
   dd888:	d9e1      	bls.n	dd84e <mbedtls_x509_crt_info+0x1a>
   dd88a:	1a2d      	subs	r5, r5, r0
   dd88c:	4480      	add	r8, r0
    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
   dd88e:	f107 021c 	add.w	r2, r7, #28
   dd892:	4629      	mov	r1, r5
   dd894:	4640      	mov	r0, r8
   dd896:	f7f9 fb27 	bl	d6ee8 <mbedtls_x509_serial_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd89a:	2800      	cmp	r0, #0
   dd89c:	dbd7      	blt.n	dd84e <mbedtls_x509_crt_info+0x1a>
   dd89e:	4285      	cmp	r5, r0
   dd8a0:	d9d5      	bls.n	dd84e <mbedtls_x509_crt_info+0x1a>
   dd8a2:	1a2d      	subs	r5, r5, r0
   dd8a4:	eb08 0600 	add.w	r6, r8, r0
    ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
   dd8a8:	4a8f      	ldr	r2, [pc, #572]	; (ddae8 <mbedtls_x509_crt_info+0x2b4>)
   dd8aa:	464b      	mov	r3, r9
   dd8ac:	4629      	mov	r1, r5
   dd8ae:	4630      	mov	r0, r6
   dd8b0:	f008 f892 	bl	e59d8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd8b4:	2800      	cmp	r0, #0
   dd8b6:	dbca      	blt.n	dd84e <mbedtls_x509_crt_info+0x1a>
   dd8b8:	4285      	cmp	r5, r0
   dd8ba:	d9c8      	bls.n	dd84e <mbedtls_x509_crt_info+0x1a>
   dd8bc:	1a2d      	subs	r5, r5, r0
   dd8be:	4406      	add	r6, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
   dd8c0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   dd8c4:	4629      	mov	r1, r5
   dd8c6:	4630      	mov	r0, r6
   dd8c8:	f7f9 fa8a 	bl	d6de0 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd8cc:	2800      	cmp	r0, #0
   dd8ce:	dbbe      	blt.n	dd84e <mbedtls_x509_crt_info+0x1a>
   dd8d0:	4285      	cmp	r5, r0
   dd8d2:	d9bc      	bls.n	dd84e <mbedtls_x509_crt_info+0x1a>
   dd8d4:	1a2d      	subs	r5, r5, r0
   dd8d6:	1834      	adds	r4, r6, r0
    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
   dd8d8:	4a84      	ldr	r2, [pc, #528]	; (ddaec <mbedtls_x509_crt_info+0x2b8>)
   dd8da:	464b      	mov	r3, r9
   dd8dc:	4629      	mov	r1, r5
   dd8de:	4620      	mov	r0, r4
   dd8e0:	f008 f87a 	bl	e59d8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd8e4:	2800      	cmp	r0, #0
   dd8e6:	dbb2      	blt.n	dd84e <mbedtls_x509_crt_info+0x1a>
   dd8e8:	4285      	cmp	r5, r0
   dd8ea:	d9b0      	bls.n	dd84e <mbedtls_x509_crt_info+0x1a>
   dd8ec:	1a2d      	subs	r5, r5, r0
   dd8ee:	4404      	add	r4, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
   dd8f0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
   dd8f4:	4629      	mov	r1, r5
   dd8f6:	4620      	mov	r0, r4
   dd8f8:	f7f9 fa72 	bl	d6de0 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd8fc:	2800      	cmp	r0, #0
   dd8fe:	dba6      	blt.n	dd84e <mbedtls_x509_crt_info+0x1a>
   dd900:	4285      	cmp	r5, r0
   dd902:	d9a4      	bls.n	dd84e <mbedtls_x509_crt_info+0x1a>
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
   dd904:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   dd908:	9305      	str	r3, [sp, #20]
   dd90a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   dd90e:	9304      	str	r3, [sp, #16]
   dd910:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   dd914:	9303      	str	r3, [sp, #12]
   dd916:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   dd91a:	9302      	str	r3, [sp, #8]
   dd91c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   dd920:	9301      	str	r3, [sp, #4]
   dd922:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   dd926:	9300      	str	r3, [sp, #0]
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd928:	1a2d      	subs	r5, r5, r0
   dd92a:	4404      	add	r4, r0
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
   dd92c:	4a70      	ldr	r2, [pc, #448]	; (ddaf0 <mbedtls_x509_crt_info+0x2bc>)
   dd92e:	464b      	mov	r3, r9
   dd930:	4629      	mov	r1, r5
   dd932:	4620      	mov	r0, r4
   dd934:	f008 f850 	bl	e59d8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd938:	2800      	cmp	r0, #0
   dd93a:	db88      	blt.n	dd84e <mbedtls_x509_crt_info+0x1a>
   dd93c:	4285      	cmp	r5, r0
   dd93e:	d986      	bls.n	dd84e <mbedtls_x509_crt_info+0x1a>
    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
   dd940:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   dd944:	9305      	str	r3, [sp, #20]
   dd946:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   dd94a:	9304      	str	r3, [sp, #16]
   dd94c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   dd950:	9303      	str	r3, [sp, #12]
   dd952:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   dd956:	9302      	str	r3, [sp, #8]
   dd958:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
   dd95c:	9301      	str	r3, [sp, #4]
   dd95e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   dd962:	9300      	str	r3, [sp, #0]
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd964:	1a2d      	subs	r5, r5, r0
   dd966:	eb04 0800 	add.w	r8, r4, r0
    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
   dd96a:	4a62      	ldr	r2, [pc, #392]	; (ddaf4 <mbedtls_x509_crt_info+0x2c0>)
   dd96c:	464b      	mov	r3, r9
   dd96e:	4629      	mov	r1, r5
   dd970:	4640      	mov	r0, r8
   dd972:	f008 f831 	bl	e59d8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd976:	2800      	cmp	r0, #0
   dd978:	f6ff af69 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   dd97c:	4285      	cmp	r5, r0
   dd97e:	f67f af66 	bls.w	dd84e <mbedtls_x509_crt_info+0x1a>
   dd982:	1a2d      	subs	r5, r5, r0
   dd984:	4480      	add	r8, r0
    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
   dd986:	4a5c      	ldr	r2, [pc, #368]	; (ddaf8 <mbedtls_x509_crt_info+0x2c4>)
   dd988:	464b      	mov	r3, r9
   dd98a:	4629      	mov	r1, r5
   dd98c:	4640      	mov	r0, r8
   dd98e:	f008 f823 	bl	e59d8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd992:	2800      	cmp	r0, #0
   dd994:	f6ff af5b 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   dd998:	4285      	cmp	r5, r0
   dd99a:	f67f af58 	bls.w	dd84e <mbedtls_x509_crt_info+0x1a>
    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
   dd99e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
   dd9a2:	9301      	str	r3, [sp, #4]
   dd9a4:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
   dd9a8:	9300      	str	r3, [sp, #0]
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd9aa:	1a2d      	subs	r5, r5, r0
   dd9ac:	4480      	add	r8, r0
    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
   dd9ae:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
   dd9b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
   dd9b6:	4629      	mov	r1, r5
   dd9b8:	4640      	mov	r0, r8
   dd9ba:	f7f9 fae3 	bl	d6f84 <mbedtls_x509_sig_alg_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd9be:	1e06      	subs	r6, r0, #0
   dd9c0:	f6ff af45 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   dd9c4:	42b5      	cmp	r5, r6
   dd9c6:	f67f af42 	bls.w	dd84e <mbedtls_x509_crt_info+0x1a>
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
   dd9ca:	f107 04bc 	add.w	r4, r7, #188	; 0xbc
   dd9ce:	4620      	mov	r0, r4
   dd9d0:	f001 fa14 	bl	dedfc <mbedtls_pk_get_name>
   dd9d4:	f10d 0b1c 	add.w	fp, sp, #28
   dd9d8:	4602      	mov	r2, r0
   dd9da:	2112      	movs	r1, #18
   dd9dc:	4658      	mov	r0, fp
   dd9de:	f7f9 fb2f 	bl	d7040 <mbedtls_x509_key_size_helper>
   dd9e2:	2800      	cmp	r0, #0
   dd9e4:	f47f af37 	bne.w	dd856 <mbedtls_x509_crt_info+0x22>
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
   dd9e8:	4620      	mov	r0, r4
   dd9ea:	f001 f9a7 	bl	ded3c <mbedtls_pk_get_bitlen>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dd9ee:	1bad      	subs	r5, r5, r6
   dd9f0:	44b0      	add	r8, r6
    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
   dd9f2:	e9cd b000 	strd	fp, r0, [sp]
   dd9f6:	4a41      	ldr	r2, [pc, #260]	; (ddafc <mbedtls_x509_crt_info+0x2c8>)
   dd9f8:	464b      	mov	r3, r9
   dd9fa:	4629      	mov	r1, r5
   dd9fc:	4640      	mov	r0, r8
   dd9fe:	f007 ffeb 	bl	e59d8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dda02:	2800      	cmp	r0, #0
   dda04:	f6ff af23 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   dda08:	4285      	cmp	r5, r0
   dda0a:	f67f af20 	bls.w	dd84e <mbedtls_x509_crt_info+0x1a>
    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
   dda0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
   dda12:	05de      	lsls	r6, r3, #23
    MBEDTLS_X509_SAFE_SNPRINTF;
   dda14:	eba5 0400 	sub.w	r4, r5, r0
   dda18:	eb08 0500 	add.w	r5, r8, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
   dda1c:	d528      	bpl.n	dda70 <mbedtls_x509_crt_info+0x23c>
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
   dda1e:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
   dda22:	4a37      	ldr	r2, [pc, #220]	; (ddb00 <mbedtls_x509_crt_info+0x2cc>)
   dda24:	4b37      	ldr	r3, [pc, #220]	; (ddb04 <mbedtls_x509_crt_info+0x2d0>)
   dda26:	2900      	cmp	r1, #0
   dda28:	bf08      	it	eq
   dda2a:	4613      	moveq	r3, r2
   dda2c:	9300      	str	r3, [sp, #0]
   dda2e:	4a36      	ldr	r2, [pc, #216]	; (ddb08 <mbedtls_x509_crt_info+0x2d4>)
   dda30:	464b      	mov	r3, r9
   dda32:	4621      	mov	r1, r4
   dda34:	4628      	mov	r0, r5
   dda36:	f007 ffcf 	bl	e59d8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   dda3a:	2800      	cmp	r0, #0
   dda3c:	f6ff af07 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   dda40:	4284      	cmp	r4, r0
   dda42:	f67f af04 	bls.w	dd84e <mbedtls_x509_crt_info+0x1a>
        if( crt->max_pathlen > 0 )
   dda46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
   dda4a:	2b00      	cmp	r3, #0
        MBEDTLS_X509_SAFE_SNPRINTF;
   dda4c:	eba4 0400 	sub.w	r4, r4, r0
   dda50:	4405      	add	r5, r0
        if( crt->max_pathlen > 0 )
   dda52:	dd0d      	ble.n	dda70 <mbedtls_x509_crt_info+0x23c>
            ret = mbedtls_snprintf( p, n, ", max_pathlen=%d", crt->max_pathlen - 1 );
   dda54:	4a2d      	ldr	r2, [pc, #180]	; (ddb0c <mbedtls_x509_crt_info+0x2d8>)
   dda56:	3b01      	subs	r3, #1
   dda58:	4621      	mov	r1, r4
   dda5a:	4628      	mov	r0, r5
   dda5c:	f007 ffbc 	bl	e59d8 <snprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
   dda60:	2800      	cmp	r0, #0
   dda62:	f6ff aef4 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   dda66:	4284      	cmp	r4, r0
   dda68:	f67f aef1 	bls.w	dd84e <mbedtls_x509_crt_info+0x1a>
   dda6c:	1a24      	subs	r4, r4, r0
   dda6e:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
   dda70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
   dda74:	0698      	lsls	r0, r3, #26
   dda76:	d557      	bpl.n	ddb28 <mbedtls_x509_crt_info+0x2f4>
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
   dda78:	4a25      	ldr	r2, [pc, #148]	; (ddb10 <mbedtls_x509_crt_info+0x2dc>)
   dda7a:	464b      	mov	r3, r9
   dda7c:	4621      	mov	r1, r4
   dda7e:	4628      	mov	r0, r5
   dda80:	f007 ffaa 	bl	e59d8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   dda84:	2800      	cmp	r0, #0
   dda86:	f6ff aee2 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   dda8a:	42a0      	cmp	r0, r4
   dda8c:	f4bf aedf 	bcs.w	dd84e <mbedtls_x509_crt_info+0x1a>
   dda90:	1a24      	subs	r4, r4, r0
   dda92:	4405      	add	r5, r0
    size_t sep_len = 0;
   dda94:	2100      	movs	r1, #0
    const char *sep = "";
   dda96:	f8df c080 	ldr.w	ip, [pc, #128]	; ddb18 <mbedtls_x509_crt_info+0x2e4>
        sep = ", ";
   dda9a:	481e      	ldr	r0, [pc, #120]	; (ddb14 <mbedtls_x509_crt_info+0x2e0>)
        if( ( ret = x509_info_subject_alt_name( &p, &n,
   dda9c:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
    while( cur != NULL )
   ddaa0:	460e      	mov	r6, r1
        if( cur->buf.len + sep_len >= n )
   ddaa2:	6853      	ldr	r3, [r2, #4]
   ddaa4:	440b      	add	r3, r1
   ddaa6:	42a3      	cmp	r3, r4
   ddaa8:	d301      	bcc.n	ddaae <mbedtls_x509_crt_info+0x27a>
            *p = '\0';
   ddaaa:	702e      	strb	r6, [r5, #0]
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
   ddaac:	e6cf      	b.n	dd84e <mbedtls_x509_crt_info+0x1a>
        n -= cur->buf.len + sep_len;
   ddaae:	1ae4      	subs	r4, r4, r3
        for( i = 0; i < sep_len; i++ )
   ddab0:	2300      	movs	r3, #0
   ddab2:	428b      	cmp	r3, r1
   ddab4:	d10a      	bne.n	ddacc <mbedtls_x509_crt_info+0x298>
   ddab6:	441d      	add	r5, r3
        for( i = 0; i < cur->buf.len; i++ )
   ddab8:	2300      	movs	r3, #0
   ddaba:	6851      	ldr	r1, [r2, #4]
   ddabc:	4299      	cmp	r1, r3
   ddabe:	d92d      	bls.n	ddb1c <mbedtls_x509_crt_info+0x2e8>
            *p++ = cur->buf.p[i];
   ddac0:	6891      	ldr	r1, [r2, #8]
   ddac2:	5cc9      	ldrb	r1, [r1, r3]
   ddac4:	f805 1b01 	strb.w	r1, [r5], #1
        for( i = 0; i < cur->buf.len; i++ )
   ddac8:	3301      	adds	r3, #1
   ddaca:	e7f6      	b.n	ddaba <mbedtls_x509_crt_info+0x286>
            *p++ = sep[i];
   ddacc:	f81c e003 	ldrb.w	lr, [ip, r3]
   ddad0:	f805 e003 	strb.w	lr, [r5, r3]
        for( i = 0; i < sep_len; i++ )
   ddad4:	3301      	adds	r3, #1
   ddad6:	e7ec      	b.n	ddab2 <mbedtls_x509_crt_info+0x27e>
   ddad8:	000eccf7 	.word	0x000eccf7
   ddadc:	ffffd680 	.word	0xffffd680
   ddae0:	000ecd17 	.word	0x000ecd17
   ddae4:	000ecd31 	.word	0x000ecd31
   ddae8:	000ecd48 	.word	0x000ecd48
   ddaec:	000ecd60 	.word	0x000ecd60
   ddaf0:	000ecd78 	.word	0x000ecd78
   ddaf4:	000ecdad 	.word	0x000ecdad
   ddaf8:	000ecde2 	.word	0x000ecde2
   ddafc:	000ecdfa 	.word	0x000ecdfa
   ddb00:	000eccf1 	.word	0x000eccf1
   ddb04:	000eccec 	.word	0x000eccec
   ddb08:	000ece0c 	.word	0x000ece0c
   ddb0c:	000ece29 	.word	0x000ece29
   ddb10:	000ece3a 	.word	0x000ece3a
   ddb14:	000eb87a 	.word	0x000eb87a
   ddb18:	000ebb9d 	.word	0x000ebb9d
        cur = cur->next;
   ddb1c:	68d2      	ldr	r2, [r2, #12]
        sep_len = 2;
   ddb1e:	2102      	movs	r1, #2
        sep = ", ";
   ddb20:	4684      	mov	ip, r0
    while( cur != NULL )
   ddb22:	2a00      	cmp	r2, #0
   ddb24:	d1bd      	bne.n	ddaa2 <mbedtls_x509_crt_info+0x26e>
    *p = '\0';
   ddb26:	702a      	strb	r2, [r5, #0]
    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
   ddb28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
   ddb2c:	03d9      	lsls	r1, r3, #15
   ddb2e:	f140 8093 	bpl.w	ddc58 <mbedtls_x509_crt_info+0x424>
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
   ddb32:	4abe      	ldr	r2, [pc, #760]	; (dde2c <mbedtls_x509_crt_info+0x5f8>)
   ddb34:	464b      	mov	r3, r9
   ddb36:	4621      	mov	r1, r4
   ddb38:	4628      	mov	r0, r5
   ddb3a:	f007 ff4d 	bl	e59d8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   ddb3e:	2800      	cmp	r0, #0
   ddb40:	f6ff ae85 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddb44:	42a0      	cmp	r0, r4
   ddb46:	f4bf ae82 	bcs.w	dd84e <mbedtls_x509_crt_info+0x1a>
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
   ddb4a:	f997 3118 	ldrsb.w	r3, [r7, #280]	; 0x118
        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
   ddb4e:	f897 6118 	ldrb.w	r6, [r7, #280]	; 0x118
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
   ddb52:	2b00      	cmp	r3, #0
        MBEDTLS_X509_SAFE_SNPRINTF;
   ddb54:	eba4 0400 	sub.w	r4, r4, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
   ddb58:	4bb5      	ldr	r3, [pc, #724]	; (dde30 <mbedtls_x509_crt_info+0x5fc>)
        MBEDTLS_X509_SAFE_SNPRINTF;
   ddb5a:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
   ddb5c:	da0d      	bge.n	ddb7a <mbedtls_x509_crt_info+0x346>
   ddb5e:	4ab5      	ldr	r2, [pc, #724]	; (dde34 <mbedtls_x509_crt_info+0x600>)
   ddb60:	4621      	mov	r1, r4
   ddb62:	4628      	mov	r0, r5
   ddb64:	f007 ff38 	bl	e59d8 <snprintf>
   ddb68:	2800      	cmp	r0, #0
   ddb6a:	f6ff ae70 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddb6e:	4284      	cmp	r4, r0
   ddb70:	f67f ae6d 	bls.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddb74:	4bb0      	ldr	r3, [pc, #704]	; (dde38 <mbedtls_x509_crt_info+0x604>)
   ddb76:	1a24      	subs	r4, r4, r0
   ddb78:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
   ddb7a:	0672      	lsls	r2, r6, #25
   ddb7c:	d50d      	bpl.n	ddb9a <mbedtls_x509_crt_info+0x366>
   ddb7e:	4aaf      	ldr	r2, [pc, #700]	; (dde3c <mbedtls_x509_crt_info+0x608>)
   ddb80:	4621      	mov	r1, r4
   ddb82:	4628      	mov	r0, r5
   ddb84:	f007 ff28 	bl	e59d8 <snprintf>
   ddb88:	2800      	cmp	r0, #0
   ddb8a:	f6ff ae60 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddb8e:	4284      	cmp	r4, r0
   ddb90:	f67f ae5d 	bls.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddb94:	4ba8      	ldr	r3, [pc, #672]	; (dde38 <mbedtls_x509_crt_info+0x604>)
   ddb96:	1a24      	subs	r4, r4, r0
   ddb98:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
   ddb9a:	06b0      	lsls	r0, r6, #26
   ddb9c:	d50d      	bpl.n	ddbba <mbedtls_x509_crt_info+0x386>
   ddb9e:	4aa8      	ldr	r2, [pc, #672]	; (dde40 <mbedtls_x509_crt_info+0x60c>)
   ddba0:	4621      	mov	r1, r4
   ddba2:	4628      	mov	r0, r5
   ddba4:	f007 ff18 	bl	e59d8 <snprintf>
   ddba8:	2800      	cmp	r0, #0
   ddbaa:	f6ff ae50 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddbae:	4284      	cmp	r4, r0
   ddbb0:	f67f ae4d 	bls.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddbb4:	4ba0      	ldr	r3, [pc, #640]	; (dde38 <mbedtls_x509_crt_info+0x604>)
   ddbb6:	1a24      	subs	r4, r4, r0
   ddbb8:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
   ddbba:	06f1      	lsls	r1, r6, #27
   ddbbc:	d50d      	bpl.n	ddbda <mbedtls_x509_crt_info+0x3a6>
   ddbbe:	4aa1      	ldr	r2, [pc, #644]	; (dde44 <mbedtls_x509_crt_info+0x610>)
   ddbc0:	4621      	mov	r1, r4
   ddbc2:	4628      	mov	r0, r5
   ddbc4:	f007 ff08 	bl	e59d8 <snprintf>
   ddbc8:	2800      	cmp	r0, #0
   ddbca:	f6ff ae40 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddbce:	4284      	cmp	r4, r0
   ddbd0:	f67f ae3d 	bls.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddbd4:	4b98      	ldr	r3, [pc, #608]	; (dde38 <mbedtls_x509_crt_info+0x604>)
   ddbd6:	1a24      	subs	r4, r4, r0
   ddbd8:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
   ddbda:	0732      	lsls	r2, r6, #28
   ddbdc:	d50d      	bpl.n	ddbfa <mbedtls_x509_crt_info+0x3c6>
   ddbde:	4a9a      	ldr	r2, [pc, #616]	; (dde48 <mbedtls_x509_crt_info+0x614>)
   ddbe0:	4621      	mov	r1, r4
   ddbe2:	4628      	mov	r0, r5
   ddbe4:	f007 fef8 	bl	e59d8 <snprintf>
   ddbe8:	2800      	cmp	r0, #0
   ddbea:	f6ff ae30 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddbee:	4284      	cmp	r4, r0
   ddbf0:	f67f ae2d 	bls.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddbf4:	4b90      	ldr	r3, [pc, #576]	; (dde38 <mbedtls_x509_crt_info+0x604>)
   ddbf6:	1a24      	subs	r4, r4, r0
   ddbf8:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
   ddbfa:	0770      	lsls	r0, r6, #29
   ddbfc:	d50d      	bpl.n	ddc1a <mbedtls_x509_crt_info+0x3e6>
   ddbfe:	4a93      	ldr	r2, [pc, #588]	; (dde4c <mbedtls_x509_crt_info+0x618>)
   ddc00:	4621      	mov	r1, r4
   ddc02:	4628      	mov	r0, r5
   ddc04:	f007 fee8 	bl	e59d8 <snprintf>
   ddc08:	2800      	cmp	r0, #0
   ddc0a:	f6ff ae20 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddc0e:	4284      	cmp	r4, r0
   ddc10:	f67f ae1d 	bls.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddc14:	4b88      	ldr	r3, [pc, #544]	; (dde38 <mbedtls_x509_crt_info+0x604>)
   ddc16:	1a24      	subs	r4, r4, r0
   ddc18:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
   ddc1a:	07b1      	lsls	r1, r6, #30
   ddc1c:	d50d      	bpl.n	ddc3a <mbedtls_x509_crt_info+0x406>
   ddc1e:	4a8c      	ldr	r2, [pc, #560]	; (dde50 <mbedtls_x509_crt_info+0x61c>)
   ddc20:	4621      	mov	r1, r4
   ddc22:	4628      	mov	r0, r5
   ddc24:	f007 fed8 	bl	e59d8 <snprintf>
   ddc28:	2800      	cmp	r0, #0
   ddc2a:	f6ff ae10 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddc2e:	4284      	cmp	r4, r0
   ddc30:	f67f ae0d 	bls.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddc34:	4b80      	ldr	r3, [pc, #512]	; (dde38 <mbedtls_x509_crt_info+0x604>)
   ddc36:	1a24      	subs	r4, r4, r0
   ddc38:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA,  "Object Signing CA" );
   ddc3a:	07f2      	lsls	r2, r6, #31
   ddc3c:	d50c      	bpl.n	ddc58 <mbedtls_x509_crt_info+0x424>
   ddc3e:	4a85      	ldr	r2, [pc, #532]	; (dde54 <mbedtls_x509_crt_info+0x620>)
   ddc40:	4621      	mov	r1, r4
   ddc42:	4628      	mov	r0, r5
   ddc44:	f007 fec8 	bl	e59d8 <snprintf>
   ddc48:	2800      	cmp	r0, #0
   ddc4a:	f6ff ae00 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddc4e:	4284      	cmp	r4, r0
   ddc50:	f67f adfd 	bls.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddc54:	1a24      	subs	r4, r4, r0
   ddc56:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
   ddc58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
   ddc5c:	075e      	lsls	r6, r3, #29
   ddc5e:	f140 80a0 	bpl.w	ddda2 <mbedtls_x509_crt_info+0x56e>
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
   ddc62:	4a7d      	ldr	r2, [pc, #500]	; (dde58 <mbedtls_x509_crt_info+0x624>)
   ddc64:	464b      	mov	r3, r9
   ddc66:	4621      	mov	r1, r4
   ddc68:	4628      	mov	r0, r5
   ddc6a:	f007 feb5 	bl	e59d8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   ddc6e:	2800      	cmp	r0, #0
   ddc70:	f6ff aded 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddc74:	42a0      	cmp	r0, r4
   ddc76:	f4bf adea 	bcs.w	dd84e <mbedtls_x509_crt_info+0x1a>
        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
   ddc7a:	f8d7 6104 	ldr.w	r6, [r7, #260]	; 0x104
    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
   ddc7e:	4b6c      	ldr	r3, [pc, #432]	; (dde30 <mbedtls_x509_crt_info+0x5fc>)
        MBEDTLS_X509_SAFE_SNPRINTF;
   ddc80:	1a24      	subs	r4, r4, r0
   ddc82:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
   ddc84:	0630      	lsls	r0, r6, #24
   ddc86:	d50d      	bpl.n	ddca4 <mbedtls_x509_crt_info+0x470>
   ddc88:	4a74      	ldr	r2, [pc, #464]	; (dde5c <mbedtls_x509_crt_info+0x628>)
   ddc8a:	4621      	mov	r1, r4
   ddc8c:	4628      	mov	r0, r5
   ddc8e:	f007 fea3 	bl	e59d8 <snprintf>
   ddc92:	2800      	cmp	r0, #0
   ddc94:	f6ff addb 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddc98:	4284      	cmp	r4, r0
   ddc9a:	f67f add8 	bls.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddc9e:	4b66      	ldr	r3, [pc, #408]	; (dde38 <mbedtls_x509_crt_info+0x604>)
   ddca0:	1a24      	subs	r4, r4, r0
   ddca2:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
   ddca4:	0671      	lsls	r1, r6, #25
   ddca6:	d50d      	bpl.n	ddcc4 <mbedtls_x509_crt_info+0x490>
   ddca8:	4a6d      	ldr	r2, [pc, #436]	; (dde60 <mbedtls_x509_crt_info+0x62c>)
   ddcaa:	4621      	mov	r1, r4
   ddcac:	4628      	mov	r0, r5
   ddcae:	f007 fe93 	bl	e59d8 <snprintf>
   ddcb2:	2800      	cmp	r0, #0
   ddcb4:	f6ff adcb 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddcb8:	4284      	cmp	r4, r0
   ddcba:	f67f adc8 	bls.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddcbe:	4b5e      	ldr	r3, [pc, #376]	; (dde38 <mbedtls_x509_crt_info+0x604>)
   ddcc0:	1a24      	subs	r4, r4, r0
   ddcc2:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
   ddcc4:	06b2      	lsls	r2, r6, #26
   ddcc6:	d50d      	bpl.n	ddce4 <mbedtls_x509_crt_info+0x4b0>
   ddcc8:	4a66      	ldr	r2, [pc, #408]	; (dde64 <mbedtls_x509_crt_info+0x630>)
   ddcca:	4621      	mov	r1, r4
   ddccc:	4628      	mov	r0, r5
   ddcce:	f007 fe83 	bl	e59d8 <snprintf>
   ddcd2:	2800      	cmp	r0, #0
   ddcd4:	f6ff adbb 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddcd8:	4284      	cmp	r4, r0
   ddcda:	f67f adb8 	bls.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddcde:	4b56      	ldr	r3, [pc, #344]	; (dde38 <mbedtls_x509_crt_info+0x604>)
   ddce0:	1a24      	subs	r4, r4, r0
   ddce2:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
   ddce4:	06f0      	lsls	r0, r6, #27
   ddce6:	d50d      	bpl.n	ddd04 <mbedtls_x509_crt_info+0x4d0>
   ddce8:	4a5f      	ldr	r2, [pc, #380]	; (dde68 <mbedtls_x509_crt_info+0x634>)
   ddcea:	4621      	mov	r1, r4
   ddcec:	4628      	mov	r0, r5
   ddcee:	f007 fe73 	bl	e59d8 <snprintf>
   ddcf2:	2800      	cmp	r0, #0
   ddcf4:	f6ff adab 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddcf8:	4284      	cmp	r4, r0
   ddcfa:	f67f ada8 	bls.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddcfe:	4b4e      	ldr	r3, [pc, #312]	; (dde38 <mbedtls_x509_crt_info+0x604>)
   ddd00:	1a24      	subs	r4, r4, r0
   ddd02:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
   ddd04:	0731      	lsls	r1, r6, #28
   ddd06:	d50d      	bpl.n	ddd24 <mbedtls_x509_crt_info+0x4f0>
   ddd08:	4a58      	ldr	r2, [pc, #352]	; (dde6c <mbedtls_x509_crt_info+0x638>)
   ddd0a:	4621      	mov	r1, r4
   ddd0c:	4628      	mov	r0, r5
   ddd0e:	f007 fe63 	bl	e59d8 <snprintf>
   ddd12:	2800      	cmp	r0, #0
   ddd14:	f6ff ad9b 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddd18:	4284      	cmp	r4, r0
   ddd1a:	f67f ad98 	bls.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddd1e:	4b46      	ldr	r3, [pc, #280]	; (dde38 <mbedtls_x509_crt_info+0x604>)
   ddd20:	1a24      	subs	r4, r4, r0
   ddd22:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
   ddd24:	0772      	lsls	r2, r6, #29
   ddd26:	d50d      	bpl.n	ddd44 <mbedtls_x509_crt_info+0x510>
   ddd28:	4a51      	ldr	r2, [pc, #324]	; (dde70 <mbedtls_x509_crt_info+0x63c>)
   ddd2a:	4621      	mov	r1, r4
   ddd2c:	4628      	mov	r0, r5
   ddd2e:	f007 fe53 	bl	e59d8 <snprintf>
   ddd32:	2800      	cmp	r0, #0
   ddd34:	f6ff ad8b 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddd38:	4284      	cmp	r4, r0
   ddd3a:	f67f ad88 	bls.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddd3e:	4b3e      	ldr	r3, [pc, #248]	; (dde38 <mbedtls_x509_crt_info+0x604>)
   ddd40:	1a24      	subs	r4, r4, r0
   ddd42:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
   ddd44:	07b0      	lsls	r0, r6, #30
   ddd46:	d50d      	bpl.n	ddd64 <mbedtls_x509_crt_info+0x530>
   ddd48:	4a4a      	ldr	r2, [pc, #296]	; (dde74 <mbedtls_x509_crt_info+0x640>)
   ddd4a:	4621      	mov	r1, r4
   ddd4c:	4628      	mov	r0, r5
   ddd4e:	f007 fe43 	bl	e59d8 <snprintf>
   ddd52:	2800      	cmp	r0, #0
   ddd54:	f6ff ad7b 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddd58:	4284      	cmp	r4, r0
   ddd5a:	f67f ad78 	bls.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddd5e:	4b36      	ldr	r3, [pc, #216]	; (dde38 <mbedtls_x509_crt_info+0x604>)
   ddd60:	1a24      	subs	r4, r4, r0
   ddd62:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
   ddd64:	07f1      	lsls	r1, r6, #31
   ddd66:	d50d      	bpl.n	ddd84 <mbedtls_x509_crt_info+0x550>
   ddd68:	4a43      	ldr	r2, [pc, #268]	; (dde78 <mbedtls_x509_crt_info+0x644>)
   ddd6a:	4621      	mov	r1, r4
   ddd6c:	4628      	mov	r0, r5
   ddd6e:	f007 fe33 	bl	e59d8 <snprintf>
   ddd72:	2800      	cmp	r0, #0
   ddd74:	f6ff ad6b 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddd78:	4284      	cmp	r4, r0
   ddd7a:	f67f ad68 	bls.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddd7e:	4b2e      	ldr	r3, [pc, #184]	; (dde38 <mbedtls_x509_crt_info+0x604>)
   ddd80:	1a24      	subs	r4, r4, r0
   ddd82:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DECIPHER_ONLY,        "Decipher Only" );
   ddd84:	0432      	lsls	r2, r6, #16
   ddd86:	d50c      	bpl.n	ddda2 <mbedtls_x509_crt_info+0x56e>
   ddd88:	4a3c      	ldr	r2, [pc, #240]	; (dde7c <mbedtls_x509_crt_info+0x648>)
   ddd8a:	4621      	mov	r1, r4
   ddd8c:	4628      	mov	r0, r5
   ddd8e:	f007 fe23 	bl	e59d8 <snprintf>
   ddd92:	2800      	cmp	r0, #0
   ddd94:	f6ff ad5b 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddd98:	4284      	cmp	r4, r0
   ddd9a:	f67f ad58 	bls.w	dd84e <mbedtls_x509_crt_info+0x1a>
   ddd9e:	1a24      	subs	r4, r4, r0
   ddda0:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
   ddda2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
   ddda6:	051b      	lsls	r3, r3, #20
   ddda8:	d531      	bpl.n	dde0e <mbedtls_x509_crt_info+0x5da>
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
   dddaa:	4a35      	ldr	r2, [pc, #212]	; (dde80 <mbedtls_x509_crt_info+0x64c>)
   dddac:	464b      	mov	r3, r9
   dddae:	4621      	mov	r1, r4
   dddb0:	4628      	mov	r0, r5
   dddb2:	f007 fe11 	bl	e59d8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   dddb6:	2800      	cmp	r0, #0
   dddb8:	f6ff ad49 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   dddbc:	42a0      	cmp	r0, r4
   dddbe:	f4bf ad46 	bcs.w	dd84e <mbedtls_x509_crt_info+0x1a>
    const char *sep = "";
   dddc2:	f8df b06c 	ldr.w	fp, [pc, #108]	; dde30 <mbedtls_x509_crt_info+0x5fc>
            desc = "???";
   dddc6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; dde88 <mbedtls_x509_crt_info+0x654>
        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
   dddca:	f8df 90c0 	ldr.w	r9, [pc, #192]	; dde8c <mbedtls_x509_crt_info+0x658>
        sep = ", ";
   dddce:	4e1a      	ldr	r6, [pc, #104]	; (dde38 <mbedtls_x509_crt_info+0x604>)
        MBEDTLS_X509_SAFE_SNPRINTF;
   dddd0:	1a24      	subs	r4, r4, r0
   dddd2:	4405      	add	r5, r0
        if( ( ret = x509_info_ext_key_usage( &p, &n,
   dddd4:	f507 7784 	add.w	r7, r7, #264	; 0x108
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
   dddd8:	a906      	add	r1, sp, #24
   dddda:	4638      	mov	r0, r7
   ddddc:	f7fc f908 	bl	d9ff0 <mbedtls_oid_get_extended_key_usage>
   ddde0:	b108      	cbz	r0, ddde6 <mbedtls_x509_crt_info+0x5b2>
            desc = "???";
   ddde2:	f8cd 8018 	str.w	r8, [sp, #24]
        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
   ddde6:	9b06      	ldr	r3, [sp, #24]
   ddde8:	9300      	str	r3, [sp, #0]
   dddea:	464a      	mov	r2, r9
   dddec:	465b      	mov	r3, fp
   dddee:	4621      	mov	r1, r4
   dddf0:	4628      	mov	r0, r5
   dddf2:	f007 fdf1 	bl	e59d8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
   dddf6:	2800      	cmp	r0, #0
   dddf8:	f6ff ad29 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   dddfc:	42a0      	cmp	r0, r4
   dddfe:	f4bf ad26 	bcs.w	dd84e <mbedtls_x509_crt_info+0x1a>
        cur = cur->next;
   dde02:	68ff      	ldr	r7, [r7, #12]
        MBEDTLS_X509_SAFE_SNPRINTF;
   dde04:	1a24      	subs	r4, r4, r0
   dde06:	4405      	add	r5, r0
        sep = ", ";
   dde08:	46b3      	mov	fp, r6
    while( cur != NULL )
   dde0a:	2f00      	cmp	r7, #0
   dde0c:	d1e4      	bne.n	dddd8 <mbedtls_x509_crt_info+0x5a4>
    ret = mbedtls_snprintf( p, n, "\n" );
   dde0e:	4a1d      	ldr	r2, [pc, #116]	; (dde84 <mbedtls_x509_crt_info+0x650>)
   dde10:	4621      	mov	r1, r4
   dde12:	4628      	mov	r0, r5
   dde14:	f007 fde0 	bl	e59d8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
   dde18:	2800      	cmp	r0, #0
   dde1a:	f6ff ad18 	blt.w	dd84e <mbedtls_x509_crt_info+0x1a>
   dde1e:	42a0      	cmp	r0, r4
   dde20:	f4bf ad15 	bcs.w	dd84e <mbedtls_x509_crt_info+0x1a>
    return( (int) ( size - n ) );
   dde24:	1b00      	subs	r0, r0, r4
   dde26:	4450      	add	r0, sl
   dde28:	e515      	b.n	dd856 <mbedtls_x509_crt_info+0x22>
   dde2a:	bf00      	nop
   dde2c:	000ece52 	.word	0x000ece52
   dde30:	000ebb9d 	.word	0x000ebb9d
   dde34:	000ece6a 	.word	0x000ece6a
   dde38:	000eb87a 	.word	0x000eb87a
   dde3c:	000ece77 	.word	0x000ece77
   dde40:	000ece84 	.word	0x000ece84
   dde44:	000ece8c 	.word	0x000ece8c
   dde48:	000ece9d 	.word	0x000ece9d
   dde4c:	000ecea8 	.word	0x000ecea8
   dde50:	000eceb1 	.word	0x000eceb1
   dde54:	000ecebc 	.word	0x000ecebc
   dde58:	000eced0 	.word	0x000eced0
   dde5c:	000ecee8 	.word	0x000ecee8
   dde60:	000ecefc 	.word	0x000ecefc
   dde64:	000ecf0e 	.word	0x000ecf0e
   dde68:	000ecf21 	.word	0x000ecf21
   dde6c:	000ecf35 	.word	0x000ecf35
   dde70:	000ecf45 	.word	0x000ecf45
   dde74:	000ecf55 	.word	0x000ecf55
   dde78:	000ecf60 	.word	0x000ecf60
   dde7c:	000ecf70 	.word	0x000ecf70
   dde80:	000ecf80 	.word	0x000ecf80
   dde84:	000ebdd9 	.word	0x000ebdd9
   dde88:	000eb891 	.word	0x000eb891
   dde8c:	000ecf98 	.word	0x000ecf98

000dde90 <mbedtls_x509_crt_check_key_usage>:
{
   dde90:	b510      	push	{r4, lr}
    if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
   dde92:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
{
   dde96:	4602      	mov	r2, r0
    if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
   dde98:	f013 0004 	ands.w	r0, r3, #4
   dde9c:	d011      	beq.n	ddec2 <mbedtls_x509_crt_check_key_usage+0x32>
    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
   dde9e:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
    usage_must = usage & ~may_mask;
   ddea2:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
   ddea6:	f023 0301 	bic.w	r3, r3, #1
    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
   ddeaa:	4393      	bics	r3, r2
   ddeac:	d10a      	bne.n	ddec4 <mbedtls_x509_crt_check_key_usage+0x34>
    usage_may = usage & may_mask;
   ddeae:	f248 0301 	movw	r3, #32769	; 0x8001
   ddeb2:	ea01 0403 	and.w	r4, r1, r3
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   ddeb6:	4804      	ldr	r0, [pc, #16]	; (ddec8 <mbedtls_x509_crt_check_key_usage+0x38>)
    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
   ddeb8:	4311      	orrs	r1, r2
   ddeba:	4019      	ands	r1, r3
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   ddebc:	428c      	cmp	r4, r1
   ddebe:	bf08      	it	eq
   ddec0:	2000      	moveq	r0, #0
}
   ddec2:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   ddec4:	4800      	ldr	r0, [pc, #0]	; (ddec8 <mbedtls_x509_crt_check_key_usage+0x38>)
   ddec6:	e7fc      	b.n	ddec2 <mbedtls_x509_crt_check_key_usage+0x32>
   ddec8:	ffffd800 	.word	0xffffd800

000ddecc <mbedtls_x509_crt_check_extended_key_usage>:
{
   ddecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
   dded0:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
{
   dded4:	4604      	mov	r4, r0
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
   dded6:	f413 6000 	ands.w	r0, r3, #2048	; 0x800
{
   ddeda:	460e      	mov	r6, r1
   ddedc:	4615      	mov	r5, r2
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
   ddede:	d018      	beq.n	ddf12 <mbedtls_x509_crt_check_extended_key_usage+0x46>
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_ANY_EXTENDED_KEY_USAGE, cur_oid ) == 0 )
   ddee0:	f8df 8038 	ldr.w	r8, [pc, #56]	; ddf1c <mbedtls_x509_crt_check_extended_key_usage+0x50>
    for( cur = &crt->ext_key_usage; cur != NULL; cur = cur->next )
   ddee4:	f504 7484 	add.w	r4, r4, #264	; 0x108
        if( cur_oid->len == usage_len &&
   ddee8:	6867      	ldr	r7, [r4, #4]
   ddeea:	42af      	cmp	r7, r5
   ddeec:	d105      	bne.n	ddefa <mbedtls_x509_crt_check_extended_key_usage+0x2e>
            memcmp( cur_oid->p, usage_oid, usage_len ) == 0 )
   ddeee:	68a0      	ldr	r0, [r4, #8]
   ddef0:	462a      	mov	r2, r5
   ddef2:	4631      	mov	r1, r6
   ddef4:	f00a ff6c 	bl	e8dd0 <memcmp>
        if( cur_oid->len == usage_len &&
   ddef8:	b158      	cbz	r0, ddf12 <mbedtls_x509_crt_check_extended_key_usage+0x46>
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_ANY_EXTENDED_KEY_USAGE, cur_oid ) == 0 )
   ddefa:	2f04      	cmp	r7, #4
   ddefc:	d105      	bne.n	ddf0a <mbedtls_x509_crt_check_extended_key_usage+0x3e>
   ddefe:	68a1      	ldr	r1, [r4, #8]
   ddf00:	463a      	mov	r2, r7
   ddf02:	4640      	mov	r0, r8
   ddf04:	f00a ff64 	bl	e8dd0 <memcmp>
   ddf08:	b118      	cbz	r0, ddf12 <mbedtls_x509_crt_check_extended_key_usage+0x46>
    for( cur = &crt->ext_key_usage; cur != NULL; cur = cur->next )
   ddf0a:	68e4      	ldr	r4, [r4, #12]
   ddf0c:	2c00      	cmp	r4, #0
   ddf0e:	d1eb      	bne.n	ddee8 <mbedtls_x509_crt_check_extended_key_usage+0x1c>
    return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   ddf10:	4801      	ldr	r0, [pc, #4]	; (ddf18 <mbedtls_x509_crt_check_extended_key_usage+0x4c>)
}
   ddf12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ddf16:	bf00      	nop
   ddf18:	ffffd800 	.word	0xffffd800
   ddf1c:	000ecfd3 	.word	0x000ecfd3

000ddf20 <mbedtls_x509_crt_is_revoked>:
{
   ddf20:	b538      	push	{r3, r4, r5, lr}
   ddf22:	4605      	mov	r5, r0
    const mbedtls_x509_crl_entry *cur = &crl->entry;
   ddf24:	f101 0484 	add.w	r4, r1, #132	; 0x84
    while( cur != NULL && cur->serial.len != 0 )
   ddf28:	6922      	ldr	r2, [r4, #16]
   ddf2a:	b12a      	cbz	r2, ddf38 <mbedtls_x509_crt_is_revoked+0x18>
        if( crt->serial.len == cur->serial.len &&
   ddf2c:	6a2b      	ldr	r3, [r5, #32]
   ddf2e:	429a      	cmp	r2, r3
   ddf30:	d004      	beq.n	ddf3c <mbedtls_x509_crt_is_revoked+0x1c>
        cur = cur->next;
   ddf32:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    while( cur != NULL && cur->serial.len != 0 )
   ddf34:	2c00      	cmp	r4, #0
   ddf36:	d1f7      	bne.n	ddf28 <mbedtls_x509_crt_is_revoked+0x8>
    return( 0 );
   ddf38:	2000      	movs	r0, #0
}
   ddf3a:	bd38      	pop	{r3, r4, r5, pc}
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
   ddf3c:	6961      	ldr	r1, [r4, #20]
   ddf3e:	6a68      	ldr	r0, [r5, #36]	; 0x24
   ddf40:	f00a ff46 	bl	e8dd0 <memcmp>
        if( crt->serial.len == cur->serial.len &&
   ddf44:	2800      	cmp	r0, #0
   ddf46:	d1f4      	bne.n	ddf32 <mbedtls_x509_crt_is_revoked+0x12>
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
   ddf48:	f104 0018 	add.w	r0, r4, #24
   ddf4c:	f7f9 f88c 	bl	d7068 <mbedtls_x509_time_is_past>
   ddf50:	2800      	cmp	r0, #0
   ddf52:	d0ee      	beq.n	ddf32 <mbedtls_x509_crt_is_revoked+0x12>
                return( 1 );
   ddf54:	2001      	movs	r0, #1
   ddf56:	e7f0      	b.n	ddf3a <mbedtls_x509_crt_is_revoked+0x1a>

000ddf58 <mbedtls_x509_crt_verify_restartable>:
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy,
                     mbedtls_x509_crt_restart_ctx *rs_ctx )
{
   ddf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ddf5c:	ed2d 8b04 	vpush	{d8-d9}
   ddf60:	b0b5      	sub	sp, #212	; 0xd4
   ddf62:	469a      	mov	sl, r3
   ddf64:	920a      	str	r2, [sp, #40]	; 0x28
    int ret;
    mbedtls_pk_type_t pk_type;
    mbedtls_x509_crt_verify_chain ver_chain;
    uint32_t ee_flags;

    *flags = 0;
   ddf66:	9a43      	ldr	r2, [sp, #268]	; 0x10c
{
   ddf68:	9d42      	ldr	r5, [sp, #264]	; 0x108
   ddf6a:	9107      	str	r1, [sp, #28]
    *flags = 0;
   ddf6c:	2300      	movs	r3, #0
   ddf6e:	af1f      	add	r7, sp, #124	; 0x7c
{
   ddf70:	4604      	mov	r4, r0
    *flags = 0;
   ddf72:	6013      	str	r3, [r2, #0]
        ver_chain->items[i].crt = NULL;
   ddf74:	4618      	mov	r0, r3
    *flags = 0;
   ddf76:	463a      	mov	r2, r7
        ver_chain->items[i].flags = (uint32_t) -1;
   ddf78:	f04f 31ff 	mov.w	r1, #4294967295
    for( i = 0; i < MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE; i++ )
   ddf7c:	3301      	adds	r3, #1
   ddf7e:	2b0a      	cmp	r3, #10
        ver_chain->items[i].flags = (uint32_t) -1;
   ddf80:	e9c2 0100 	strd	r0, r1, [r2]
    for( i = 0; i < MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE; i++ )
   ddf84:	f102 0208 	add.w	r2, r2, #8
   ddf88:	d1f8      	bne.n	ddf7c <mbedtls_x509_crt_verify_restartable+0x24>
    ee_flags = 0;
    x509_crt_verify_chain_reset( &ver_chain );

    if( profile == NULL )
   ddf8a:	f1ba 0f00 	cmp.w	sl, #0
   ddf8e:	f000 81f3 	beq.w	de378 <mbedtls_x509_crt_verify_restartable+0x420>
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
        goto exit;
    }

    /* check name if requested */
    if( cn != NULL )
   ddf92:	b3ad      	cbz	r5, de000 <mbedtls_x509_crt_verify_restartable+0xa8>
    size_t cn_len = strlen( cn );
   ddf94:	4628      	mov	r0, r5
   ddf96:	f00a ff9f 	bl	e8ed8 <strlen>
    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
   ddf9a:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   ddf9e:	069b      	lsls	r3, r3, #26
    size_t cn_len = strlen( cn );
   ddfa0:	4606      	mov	r6, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
   ddfa2:	d511      	bpl.n	ddfc8 <mbedtls_x509_crt_verify_restartable+0x70>
        for( cur = &crt->subject_alt_names; cur != NULL; cur = cur->next )
   ddfa4:	f104 08e8 	add.w	r8, r4, #232	; 0xe8
            if( x509_crt_check_cn( &cur->buf, cn, cn_len ) == 0 )
   ddfa8:	4632      	mov	r2, r6
   ddfaa:	4629      	mov	r1, r5
   ddfac:	4640      	mov	r0, r8
   ddfae:	f7ff fbb9 	bl	dd724 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj>
   ddfb2:	2800      	cmp	r0, #0
   ddfb4:	f000 8092 	beq.w	de0dc <mbedtls_x509_crt_verify_restartable+0x184>
        for( cur = &crt->subject_alt_names; cur != NULL; cur = cur->next )
   ddfb8:	f8d8 800c 	ldr.w	r8, [r8, #12]
   ddfbc:	f1b8 0f00 	cmp.w	r8, #0
   ddfc0:	d1f2      	bne.n	ddfa8 <mbedtls_x509_crt_verify_restartable+0x50>
            *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
   ddfc2:	2304      	movs	r3, #4
   ddfc4:	9305      	str	r3, [sp, #20]
   ddfc6:	e01c      	b.n	de002 <mbedtls_x509_crt_verify_restartable+0xaa>
            if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 &&
   ddfc8:	f8df 8410 	ldr.w	r8, [pc, #1040]	; de3dc <mbedtls_x509_crt_verify_restartable+0x484>
        for( name = &crt->subject; name != NULL; name = name->next )
   ddfcc:	f104 096c 	add.w	r9, r4, #108	; 0x6c
            if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 &&
   ddfd0:	f8d9 2004 	ldr.w	r2, [r9, #4]
   ddfd4:	2a03      	cmp	r2, #3
   ddfd6:	d10d      	bne.n	ddff4 <mbedtls_x509_crt_verify_restartable+0x9c>
   ddfd8:	f8d9 1008 	ldr.w	r1, [r9, #8]
   ddfdc:	4640      	mov	r0, r8
   ddfde:	f00a fef7 	bl	e8dd0 <memcmp>
   ddfe2:	b938      	cbnz	r0, ddff4 <mbedtls_x509_crt_verify_restartable+0x9c>
                x509_crt_check_cn( &name->val, cn, cn_len ) == 0 )
   ddfe4:	4632      	mov	r2, r6
   ddfe6:	4629      	mov	r1, r5
   ddfe8:	f109 000c 	add.w	r0, r9, #12
   ddfec:	f7ff fb9a 	bl	dd724 <_ZL17x509_crt_check_cnPK16mbedtls_asn1_bufPKcj>
            if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 &&
   ddff0:	2800      	cmp	r0, #0
   ddff2:	d073      	beq.n	de0dc <mbedtls_x509_crt_verify_restartable+0x184>
        for( name = &crt->subject; name != NULL; name = name->next )
   ddff4:	f8d9 9018 	ldr.w	r9, [r9, #24]
   ddff8:	f1b9 0f00 	cmp.w	r9, #0
   ddffc:	d1e8      	bne.n	ddfd0 <mbedtls_x509_crt_verify_restartable+0x78>
   ddffe:	e7e0      	b.n	ddfc2 <mbedtls_x509_crt_verify_restartable+0x6a>
    ee_flags = 0;
   de000:	9505      	str	r5, [sp, #20]
        x509_crt_verify_name( crt, cn, &ee_flags );

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
   de002:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
   de006:	4628      	mov	r0, r5
   de008:	f000 ff02 	bl	dee10 <mbedtls_pk_get_type>
   de00c:	f10a 0304 	add.w	r3, sl, #4
   de010:	4601      	mov	r1, r0

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
   de012:	4618      	mov	r0, r3
   de014:	ee08 3a10 	vmov	s16, r3
   de018:	f7ff fbb6 	bl	dd788 <_ZL25x509_profile_check_pk_algPK24mbedtls_x509_crt_profile17mbedtls_pk_type_t.isra.0>
   de01c:	b118      	cbz	r0, de026 <mbedtls_x509_crt_verify_restartable+0xce>
        ee_flags |= MBEDTLS_X509_BADCERT_BAD_PK;
   de01e:	9b05      	ldr	r3, [sp, #20]
   de020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   de024:	9305      	str	r3, [sp, #20]

    if( x509_profile_check_key( profile, &crt->pk ) != 0 )
   de026:	4629      	mov	r1, r5
   de028:	4650      	mov	r0, sl
   de02a:	f7ff fbd9 	bl	dd7e0 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context>
   de02e:	b118      	cbz	r0, de038 <mbedtls_x509_crt_verify_restartable+0xe0>
        ee_flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
   de030:	9b05      	ldr	r3, [sp, #20]
   de032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   de036:	9305      	str	r3, [sp, #20]
    ver_chain->len = 0;
   de038:	f04f 0900 	mov.w	r9, #0
    self_cnt = 0;
   de03c:	f8cd 9020 	str.w	r9, [sp, #32]
    child_is_trusted = 0;
   de040:	464d      	mov	r5, r9
        cur->flags = 0;
   de042:	2300      	movs	r3, #0
        if( mbedtls_x509_time_is_past( &child->valid_to ) )
   de044:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
        cur->crt = child;
   de048:	603c      	str	r4, [r7, #0]
        cur->flags = 0;
   de04a:	607b      	str	r3, [r7, #4]
        ver_chain->len++;
   de04c:	f109 0b01 	add.w	fp, r9, #1
        if( mbedtls_x509_time_is_past( &child->valid_to ) )
   de050:	f7f9 f80a 	bl	d7068 <mbedtls_x509_time_is_past>
   de054:	b108      	cbz	r0, de05a <mbedtls_x509_crt_verify_restartable+0x102>
            *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
   de056:	2301      	movs	r3, #1
   de058:	607b      	str	r3, [r7, #4]
        if( mbedtls_x509_time_is_future( &child->valid_from ) )
   de05a:	f104 008c 	add.w	r0, r4, #140	; 0x8c
   de05e:	f7f9 f805 	bl	d706c <mbedtls_x509_time_is_future>
   de062:	b118      	cbz	r0, de06c <mbedtls_x509_crt_verify_restartable+0x114>
            *flags |= MBEDTLS_X509_BADCERT_FUTURE;
   de064:	687b      	ldr	r3, [r7, #4]
   de066:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   de06a:	607b      	str	r3, [r7, #4]
        if( child_is_trusted )
   de06c:	2d00      	cmp	r5, #0
   de06e:	f040 818e 	bne.w	de38e <mbedtls_x509_crt_verify_restartable+0x436>
        if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
   de072:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    if( md_alg == MBEDTLS_MD_NONE )
   de076:	b13b      	cbz	r3, de088 <mbedtls_x509_crt_verify_restartable+0x130>
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
   de078:	2201      	movs	r2, #1
   de07a:	3b01      	subs	r3, #1
   de07c:	fa02 f303 	lsl.w	r3, r2, r3
   de080:	f8da 2000 	ldr.w	r2, [sl]
   de084:	4213      	tst	r3, r2
   de086:	d103      	bne.n	de090 <mbedtls_x509_crt_verify_restartable+0x138>
            *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
   de088:	687b      	ldr	r3, [r7, #4]
   de08a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   de08e:	607b      	str	r3, [r7, #4]
        if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
   de090:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
   de094:	ee18 0a10 	vmov	r0, s16
   de098:	f7ff fb76 	bl	dd788 <_ZL25x509_profile_check_pk_algPK24mbedtls_x509_crt_profile17mbedtls_pk_type_t.isra.0>
   de09c:	b118      	cbz	r0, de0a6 <mbedtls_x509_crt_verify_restartable+0x14e>
            *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
   de09e:	687b      	ldr	r3, [r7, #4]
   de0a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   de0a4:	607b      	str	r3, [r7, #4]
        if( ver_chain->len == 1 &&
   de0a6:	f1bb 0f01 	cmp.w	fp, #1
   de0aa:	d167      	bne.n	de17c <mbedtls_x509_crt_verify_restartable+0x224>
    if( x509_name_cmp( &crt->issuer, &crt->subject ) != 0 )
   de0ac:	f104 016c 	add.w	r1, r4, #108	; 0x6c
   de0b0:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   de0b4:	f7ff faf6 	bl	dd6a4 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
   de0b8:	9e07      	ldr	r6, [sp, #28]
   de0ba:	b988      	cbnz	r0, de0e0 <mbedtls_x509_crt_verify_restartable+0x188>
    for( cur = trust_ca; cur != NULL; cur = cur->next )
   de0bc:	2e00      	cmp	r6, #0
   de0be:	d05d      	beq.n	de17c <mbedtls_x509_crt_verify_restartable+0x224>
        if( crt->raw.len == cur->raw.len &&
   de0c0:	6862      	ldr	r2, [r4, #4]
   de0c2:	6873      	ldr	r3, [r6, #4]
   de0c4:	429a      	cmp	r2, r3
   de0c6:	d106      	bne.n	de0d6 <mbedtls_x509_crt_verify_restartable+0x17e>
            memcmp( crt->raw.p, cur->raw.p, crt->raw.len ) == 0 )
   de0c8:	68b1      	ldr	r1, [r6, #8]
   de0ca:	68a0      	ldr	r0, [r4, #8]
   de0cc:	f00a fe80 	bl	e8dd0 <memcmp>
        if( crt->raw.len == cur->raw.len &&
   de0d0:	2800      	cmp	r0, #0
   de0d2:	f000 815c 	beq.w	de38e <mbedtls_x509_crt_verify_restartable+0x436>
    for( cur = trust_ca; cur != NULL; cur = cur->next )
   de0d6:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
   de0da:	e7ef      	b.n	de0bc <mbedtls_x509_crt_verify_restartable+0x164>
    ee_flags = 0;
   de0dc:	9005      	str	r0, [sp, #20]
   de0de:	e790      	b.n	de002 <mbedtls_x509_crt_verify_restartable+0xaa>
   de0e0:	f8cd b018 	str.w	fp, [sp, #24]
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
   de0e4:	f104 034c 	add.w	r3, r4, #76	; 0x4c
   de0e8:	ee09 3a90 	vmov	s19, r3
   de0ec:	2300      	movs	r3, #0
   de0ee:	9309      	str	r3, [sp, #36]	; 0x24
   de0f0:	4698      	mov	r8, r3
    for( parent = candidates; parent != NULL; parent = parent->next )
   de0f2:	2e00      	cmp	r6, #0
   de0f4:	f000 8096 	beq.w	de224 <mbedtls_x509_crt_verify_restartable+0x2cc>
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
   de0f8:	ee19 0a90 	vmov	r0, s19
   de0fc:	f106 016c 	add.w	r1, r6, #108	; 0x6c
   de100:	f7ff fad0 	bl	dd6a4 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
   de104:	2800      	cmp	r0, #0
   de106:	d136      	bne.n	de176 <mbedtls_x509_crt_verify_restartable+0x21e>
    if( top && parent->version < 3 )
   de108:	9b06      	ldr	r3, [sp, #24]
   de10a:	b113      	cbz	r3, de112 <mbedtls_x509_crt_verify_restartable+0x1ba>
   de10c:	69b3      	ldr	r3, [r6, #24]
   de10e:	2b02      	cmp	r3, #2
   de110:	dd07      	ble.n	de122 <mbedtls_x509_crt_verify_restartable+0x1ca>
    if( need_ca_bit && ! parent->ca_istrue )
   de112:	f8d6 30fc 	ldr.w	r3, [r6, #252]	; 0xfc
   de116:	b373      	cbz	r3, de176 <mbedtls_x509_crt_verify_restartable+0x21e>
        mbedtls_x509_crt_check_key_usage( parent, MBEDTLS_X509_KU_KEY_CERT_SIGN ) != 0 )
   de118:	2104      	movs	r1, #4
   de11a:	4630      	mov	r0, r6
   de11c:	f7ff feb8 	bl	dde90 <mbedtls_x509_crt_check_key_usage>
    if( need_ca_bit &&
   de120:	bb48      	cbnz	r0, de176 <mbedtls_x509_crt_verify_restartable+0x21e>
        if( parent->max_pathlen > 0 &&
   de122:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
   de126:	2b00      	cmp	r3, #0
   de128:	dd04      	ble.n	de134 <mbedtls_x509_crt_verify_restartable+0x1dc>
            (size_t) parent->max_pathlen < 1 + path_cnt - self_cnt )
   de12a:	9a08      	ldr	r2, [sp, #32]
   de12c:	ebab 0202 	sub.w	r2, fp, r2
        if( parent->max_pathlen > 0 &&
   de130:	4293      	cmp	r3, r2
   de132:	d320      	bcc.n	de176 <mbedtls_x509_crt_verify_restartable+0x21e>
    md_info = mbedtls_md_info_from_type( child->sig_md );
   de134:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   de138:	f7fe fe94 	bl	dce64 <mbedtls_md_info_from_type>
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
   de13c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
   de140:	ab0f      	add	r3, sp, #60	; 0x3c
    md_info = mbedtls_md_info_from_type( child->sig_md );
   de142:	ee08 0a90 	vmov	s17, r0
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
   de146:	f7fe fef7 	bl	dcf38 <mbedtls_md>
   de14a:	b1d8      	cbz	r0, de184 <mbedtls_x509_crt_verify_restartable+0x22c>
        return( -1 );
   de14c:	f04f 30ff 	mov.w	r0, #4294967295
        if( top && ! signature_is_good )
   de150:	9a06      	ldr	r2, [sp, #24]
        signature_is_good = ret == 0;
   de152:	fab0 f380 	clz	r3, r0
   de156:	095b      	lsrs	r3, r3, #5
        if( top && ! signature_is_good )
   de158:	b102      	cbz	r2, de15c <mbedtls_x509_crt_verify_restartable+0x204>
   de15a:	b960      	cbnz	r0, de176 <mbedtls_x509_crt_verify_restartable+0x21e>
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
   de15c:	f106 00a4 	add.w	r0, r6, #164	; 0xa4
   de160:	930b      	str	r3, [sp, #44]	; 0x2c
   de162:	f7f8 ff81 	bl	d7068 <mbedtls_x509_time_is_past>
   de166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   de168:	2800      	cmp	r0, #0
   de16a:	d034      	beq.n	de1d6 <mbedtls_x509_crt_verify_restartable+0x27e>
            if( fallback_parent == NULL )
   de16c:	f1b8 0f00 	cmp.w	r8, #0
   de170:	d101      	bne.n	de176 <mbedtls_x509_crt_verify_restartable+0x21e>
        signature_is_good = ret == 0;
   de172:	9309      	str	r3, [sp, #36]	; 0x24
            if( fallback_parent == NULL )
   de174:	46b0      	mov	r8, r6
    for( parent = candidates; parent != NULL; parent = parent->next )
   de176:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
   de17a:	e7ba      	b.n	de0f2 <mbedtls_x509_crt_verify_restartable+0x19a>
   de17c:	2301      	movs	r3, #1
   de17e:	9e07      	ldr	r6, [sp, #28]
   de180:	9306      	str	r3, [sp, #24]
   de182:	e7af      	b.n	de0e4 <mbedtls_x509_crt_verify_restartable+0x18c>
    if( ! mbedtls_pk_can_do( &parent->pk, child->sig_pk ) )
   de184:	f106 02bc 	add.w	r2, r6, #188	; 0xbc
   de188:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
   de18c:	920d      	str	r2, [sp, #52]	; 0x34
   de18e:	4610      	mov	r0, r2
   de190:	f000 fd54 	bl	dec3c <mbedtls_pk_can_do>
   de194:	2800      	cmp	r0, #0
   de196:	d0d9      	beq.n	de14c <mbedtls_x509_crt_verify_restartable+0x1f4>
    return( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
   de198:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   de19c:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
   de1a0:	910c      	str	r1, [sp, #48]	; 0x30
   de1a2:	ee09 3a10 	vmov	s18, r3
                child->sig_md, hash, mbedtls_md_get_size( md_info ),
   de1a6:	ee18 0a90 	vmov	r0, s17
   de1aa:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   de1ae:	930b      	str	r3, [sp, #44]	; 0x2c
   de1b0:	f7fe ff92 	bl	dd0d8 <mbedtls_md_get_size>
    return( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
   de1b4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   de1b8:	9303      	str	r3, [sp, #12]
   de1ba:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   de1be:	e9cd 0301 	strd	r0, r3, [sp, #4]
   de1c2:	ab0f      	add	r3, sp, #60	; 0x3c
   de1c4:	9300      	str	r3, [sp, #0]
   de1c6:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
   de1ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   de1cc:	ee19 0a10 	vmov	r0, s18
   de1d0:	f000 fdbc 	bl	ded4c <mbedtls_pk_verify_ext>
                child->sig.p, child->sig.len ) );
   de1d4:	e7bc      	b.n	de150 <mbedtls_x509_crt_verify_restartable+0x1f8>
            mbedtls_x509_time_is_future( &parent->valid_from ) )
   de1d6:	f106 008c 	add.w	r0, r6, #140	; 0x8c
   de1da:	930b      	str	r3, [sp, #44]	; 0x2c
   de1dc:	f7f8 ff46 	bl	d706c <mbedtls_x509_time_is_future>
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
   de1e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   de1e2:	2800      	cmp	r0, #0
   de1e4:	d1c2      	bne.n	de16c <mbedtls_x509_crt_verify_restartable+0x214>
   de1e6:	46b0      	mov	r8, r6
        if( ver_chain->len != 1 &&
   de1e8:	f1bb 0f01 	cmp.w	fp, #1
   de1ec:	d027      	beq.n	de23e <mbedtls_x509_crt_verify_restartable+0x2e6>
            x509_name_cmp( &child->issuer, &child->subject ) == 0 )
   de1ee:	f104 016c 	add.w	r1, r4, #108	; 0x6c
   de1f2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   de1f6:	9309      	str	r3, [sp, #36]	; 0x24
   de1f8:	f7ff fa54 	bl	dd6a4 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
        if( ver_chain->len != 1 &&
   de1fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   de1fe:	b910      	cbnz	r0, de206 <mbedtls_x509_crt_verify_restartable+0x2ae>
            self_cnt++;
   de200:	9a08      	ldr	r2, [sp, #32]
   de202:	3201      	adds	r2, #1
   de204:	9208      	str	r2, [sp, #32]
        if( ! parent_is_trusted &&
   de206:	9a06      	ldr	r2, [sp, #24]
   de208:	b9ca      	cbnz	r2, de23e <mbedtls_x509_crt_verify_restartable+0x2e6>
   de20a:	f1bb 0f08 	cmp.w	fp, #8
   de20e:	d916      	bls.n	de23e <mbedtls_x509_crt_verify_restartable+0x2e6>
            return( MBEDTLS_ERR_X509_FATAL_ERROR );
   de210:	486f      	ldr	r0, [pc, #444]	; (de3d0 <mbedtls_x509_crt_verify_restartable+0x478>)
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;

    if( ret != 0 )
    {
        *flags = (uint32_t) -1;
   de212:	9a43      	ldr	r2, [sp, #268]	; 0x10c
   de214:	f04f 33ff 	mov.w	r3, #4294967295
   de218:	6013      	str	r3, [r2, #0]

    if( *flags != 0 )
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );

    return( 0 );
}
   de21a:	b035      	add	sp, #212	; 0xd4
   de21c:	ecbd 8b04 	vpop	{d8-d9}
   de220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( *parent != NULL || *parent_is_trusted == 0 )
   de224:	f1b8 0f00 	cmp.w	r8, #0
   de228:	f040 80cf 	bne.w	de3ca <mbedtls_x509_crt_verify_restartable+0x472>
   de22c:	9b06      	ldr	r3, [sp, #24]
   de22e:	2b00      	cmp	r3, #0
   de230:	f000 80a4 	beq.w	de37c <mbedtls_x509_crt_verify_restartable+0x424>
        search_list = *parent_is_trusted ? trust_ca : child->next;
   de234:	f8d4 6130 	ldr.w	r6, [r4, #304]	; 0x130
   de238:	f8cd 8018 	str.w	r8, [sp, #24]
   de23c:	e756      	b.n	de0ec <mbedtls_x509_crt_verify_restartable+0x194>
        if( ! signature_is_good )
   de23e:	b91b      	cbnz	r3, de248 <mbedtls_x509_crt_verify_restartable+0x2f0>
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
   de240:	687b      	ldr	r3, [r7, #4]
   de242:	f043 0308 	orr.w	r3, r3, #8
   de246:	607b      	str	r3, [r7, #4]
        if( x509_profile_check_key( profile, &parent->pk ) != 0 )
   de248:	f108 09bc 	add.w	r9, r8, #188	; 0xbc
   de24c:	4649      	mov	r1, r9
   de24e:	4650      	mov	r0, sl
   de250:	f7ff fac6 	bl	dd7e0 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context>
   de254:	b118      	cbz	r0, de25e <mbedtls_x509_crt_verify_restartable+0x306>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
   de256:	687b      	ldr	r3, [r7, #4]
   de258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   de25c:	607b      	str	r3, [r7, #4]
            x509_name_cmp( &crl_list->issuer, &ca->subject ) != 0 )
   de25e:	f108 036c 	add.w	r3, r8, #108	; 0x6c
            if( fallback_parent == NULL )
   de262:	9e0a      	ldr	r6, [sp, #40]	; 0x28
            x509_name_cmp( &crl_list->issuer, &ca->subject ) != 0 )
   de264:	ee09 3a90 	vmov	s19, r3
    while( crl_list != NULL )
   de268:	b196      	cbz	r6, de290 <mbedtls_x509_crt_verify_restartable+0x338>
        if( crl_list->version == 0 ||
   de26a:	69b3      	ldr	r3, [r6, #24]
   de26c:	b133      	cbz	r3, de27c <mbedtls_x509_crt_verify_restartable+0x324>
            x509_name_cmp( &crl_list->issuer, &ca->subject ) != 0 )
   de26e:	ee19 1a90 	vmov	r1, s19
   de272:	f106 0034 	add.w	r0, r6, #52	; 0x34
   de276:	f7ff fa15 	bl	dd6a4 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
        if( crl_list->version == 0 ||
   de27a:	b110      	cbz	r0, de282 <mbedtls_x509_crt_verify_restartable+0x32a>
        crl_list = crl_list->next;
   de27c:	f8d6 60f0 	ldr.w	r6, [r6, #240]	; 0xf0
   de280:	e7f2      	b.n	de268 <mbedtls_x509_crt_verify_restartable+0x310>
        if( mbedtls_x509_crt_check_key_usage( ca,
   de282:	2102      	movs	r1, #2
   de284:	4640      	mov	r0, r8
   de286:	f7ff fe03 	bl	dde90 <mbedtls_x509_crt_check_key_usage>
   de28a:	b148      	cbz	r0, de2a0 <mbedtls_x509_crt_verify_restartable+0x348>
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
   de28c:	f045 0510 	orr.w	r5, r5, #16
        *flags |= x509_crt_verifycrl( child, parent, ca_crl, profile );
   de290:	687b      	ldr	r3, [r7, #4]
   de292:	431d      	orrs	r5, r3
   de294:	607d      	str	r5, [r7, #4]
        ver_chain->len++;
   de296:	46d9      	mov	r9, fp
        cur = &ver_chain->items[ver_chain->len];
   de298:	9d06      	ldr	r5, [sp, #24]
   de29a:	3708      	adds	r7, #8
   de29c:	4644      	mov	r4, r8
   de29e:	e6d0      	b.n	de042 <mbedtls_x509_crt_verify_restartable+0xea>
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
   de2a0:	f896 20e8 	ldrb.w	r2, [r6, #232]	; 0xe8
    if( md_alg == MBEDTLS_MD_NONE )
   de2a4:	b132      	cbz	r2, de2b4 <mbedtls_x509_crt_verify_restartable+0x35c>
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
   de2a6:	1e51      	subs	r1, r2, #1
   de2a8:	2301      	movs	r3, #1
   de2aa:	408b      	lsls	r3, r1
   de2ac:	f8da 1000 	ldr.w	r1, [sl]
   de2b0:	420b      	tst	r3, r1
   de2b2:	d101      	bne.n	de2b8 <mbedtls_x509_crt_verify_restartable+0x360>
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;
   de2b4:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
   de2b8:	f896 10e9 	ldrb.w	r1, [r6, #233]	; 0xe9
   de2bc:	ee18 0a10 	vmov	r0, s16
   de2c0:	f7ff fa62 	bl	dd788 <_ZL25x509_profile_check_pk_algPK24mbedtls_x509_crt_profile17mbedtls_pk_type_t.isra.0>
   de2c4:	b108      	cbz	r0, de2ca <mbedtls_x509_crt_verify_restartable+0x372>
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;
   de2c6:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000
        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
   de2ca:	4610      	mov	r0, r2
   de2cc:	f7fe fdca 	bl	dce64 <mbedtls_md_info_from_type>
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
   de2d0:	e9d6 2104 	ldrd	r2, r1, [r6, #16]
   de2d4:	ab0f      	add	r3, sp, #60	; 0x3c
        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
   de2d6:	ee08 0a90 	vmov	s17, r0
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
   de2da:	f7fe fe2d 	bl	dcf38 <mbedtls_md>
   de2de:	2800      	cmp	r0, #0
   de2e0:	d1d4      	bne.n	de28c <mbedtls_x509_crt_verify_restartable+0x334>
        if( x509_profile_check_key( profile, &ca->pk ) != 0 )
   de2e2:	4649      	mov	r1, r9
   de2e4:	4650      	mov	r0, sl
   de2e6:	f7ff fa7b 	bl	dd7e0 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profilePK18mbedtls_pk_context>
   de2ea:	b108      	cbz	r0, de2f0 <mbedtls_x509_crt_verify_restartable+0x398>
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
   de2ec:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
   de2f0:	f896 30e9 	ldrb.w	r3, [r6, #233]	; 0xe9
   de2f4:	f8d6 10ec 	ldr.w	r1, [r6, #236]	; 0xec
   de2f8:	910b      	str	r1, [sp, #44]	; 0x2c
   de2fa:	ee09 3a10 	vmov	s18, r3
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
   de2fe:	ee18 0a90 	vmov	r0, s17
        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
   de302:	f896 30e8 	ldrb.w	r3, [r6, #232]	; 0xe8
   de306:	9309      	str	r3, [sp, #36]	; 0x24
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
   de308:	f7fe fee6 	bl	dd0d8 <mbedtls_md_get_size>
        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
   de30c:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
   de310:	9203      	str	r2, [sp, #12]
   de312:	f8d6 20e4 	ldr.w	r2, [r6, #228]	; 0xe4
   de316:	990b      	ldr	r1, [sp, #44]	; 0x2c
   de318:	ab0f      	add	r3, sp, #60	; 0x3c
   de31a:	e9cd 0201 	strd	r0, r2, [sp, #4]
   de31e:	9300      	str	r3, [sp, #0]
   de320:	ee19 0a10 	vmov	r0, s18
   de324:	9b09      	ldr	r3, [sp, #36]	; 0x24
   de326:	464a      	mov	r2, r9
   de328:	f000 fd10 	bl	ded4c <mbedtls_pk_verify_ext>
   de32c:	2800      	cmp	r0, #0
   de32e:	d1ad      	bne.n	de28c <mbedtls_x509_crt_verify_restartable+0x334>
        if( mbedtls_x509_time_is_past( &crl_list->next_update ) )
   de330:	f106 006c 	add.w	r0, r6, #108	; 0x6c
   de334:	f7f8 fe98 	bl	d7068 <mbedtls_x509_time_is_past>
   de338:	b108      	cbz	r0, de33e <mbedtls_x509_crt_verify_restartable+0x3e6>
            flags |= MBEDTLS_X509_BADCRL_EXPIRED;
   de33a:	f045 0520 	orr.w	r5, r5, #32
        if( mbedtls_x509_time_is_future( &crl_list->this_update ) )
   de33e:	f106 0054 	add.w	r0, r6, #84	; 0x54
   de342:	f7f8 fe93 	bl	d706c <mbedtls_x509_time_is_future>
   de346:	b108      	cbz	r0, de34c <mbedtls_x509_crt_verify_restartable+0x3f4>
            flags |= MBEDTLS_X509_BADCRL_FUTURE;
   de348:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
        if( mbedtls_x509_crt_is_revoked( crt, crl_list ) )
   de34c:	4631      	mov	r1, r6
   de34e:	4620      	mov	r0, r4
   de350:	f7ff fde6 	bl	ddf20 <mbedtls_x509_crt_is_revoked>
   de354:	2800      	cmp	r0, #0
   de356:	d091      	beq.n	de27c <mbedtls_x509_crt_verify_restartable+0x324>
            flags |= MBEDTLS_X509_BADCERT_REVOKED;
   de358:	f045 0502 	orr.w	r5, r5, #2
            break;
   de35c:	e798      	b.n	de290 <mbedtls_x509_crt_verify_restartable+0x338>
            if( ( ret = f_vrfy( p_vrfy, cur->crt, (int) i-1, &cur_flags ) ) != 0 )
   de35e:	e9dd 5044 	ldrd	r5, r0, [sp, #272]	; 0x110
   de362:	f854 1c08 	ldr.w	r1, [r4, #-8]
   de366:	ab0f      	add	r3, sp, #60	; 0x3c
   de368:	465a      	mov	r2, fp
   de36a:	47a8      	blx	r5
   de36c:	b1f0      	cbz	r0, de3ac <mbedtls_x509_crt_verify_restartable+0x454>
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
   de36e:	f510 5f1c 	cmn.w	r0, #9984	; 0x2700
   de372:	f43f af4d 	beq.w	de210 <mbedtls_x509_crt_verify_restartable+0x2b8>
   de376:	e74c      	b.n	de212 <mbedtls_x509_crt_verify_restartable+0x2ba>
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
   de378:	4816      	ldr	r0, [pc, #88]	; (de3d4 <mbedtls_x509_crt_verify_restartable+0x47c>)
   de37a:	e74a      	b.n	de212 <mbedtls_x509_crt_verify_restartable+0x2ba>
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
   de37c:	ab34      	add	r3, sp, #208	; 0xd0
   de37e:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   de382:	f859 3c50 	ldr.w	r3, [r9, #-80]
   de386:	f043 0308 	orr.w	r3, r3, #8
   de38a:	f849 3c50 	str.w	r3, [r9, #-80]
    ver_chain.items[0].flags |= ee_flags;
   de38e:	9820      	ldr	r0, [sp, #128]	; 0x80
   de390:	9b05      	ldr	r3, [sp, #20]
   de392:	4318      	orrs	r0, r3
   de394:	ab1f      	add	r3, sp, #124	; 0x7c
   de396:	9020      	str	r0, [sp, #128]	; 0x80
    for( i = ver_chain->len; i != 0; --i )
   de398:	eb03 04cb 	add.w	r4, r3, fp, lsl #3
        cur_flags = cur->flags;
   de39c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   de3a0:	930f      	str	r3, [sp, #60]	; 0x3c
        if( NULL != f_vrfy )
   de3a2:	9b44      	ldr	r3, [sp, #272]	; 0x110
        cur = &ver_chain->items[i-1];
   de3a4:	f10b 3bff 	add.w	fp, fp, #4294967295
        if( NULL != f_vrfy )
   de3a8:	2b00      	cmp	r3, #0
   de3aa:	d1d8      	bne.n	de35e <mbedtls_x509_crt_verify_restartable+0x406>
        *flags |= cur_flags;
   de3ac:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   de3ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   de3b0:	681b      	ldr	r3, [r3, #0]
   de3b2:	4313      	orrs	r3, r2
   de3b4:	9a43      	ldr	r2, [sp, #268]	; 0x10c
   de3b6:	3c08      	subs	r4, #8
   de3b8:	6013      	str	r3, [r2, #0]
    for( i = ver_chain->len; i != 0; --i )
   de3ba:	f1bb 0f00 	cmp.w	fp, #0
   de3be:	d1ed      	bne.n	de39c <mbedtls_x509_crt_verify_restartable+0x444>
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );
   de3c0:	2b00      	cmp	r3, #0
   de3c2:	4805      	ldr	r0, [pc, #20]	; (de3d8 <mbedtls_x509_crt_verify_restartable+0x480>)
   de3c4:	bf08      	it	eq
   de3c6:	2000      	moveq	r0, #0
   de3c8:	e727      	b.n	de21a <mbedtls_x509_crt_verify_restartable+0x2c2>
   de3ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   de3cc:	e70c      	b.n	de1e8 <mbedtls_x509_crt_verify_restartable+0x290>
   de3ce:	bf00      	nop
   de3d0:	ffffd000 	.word	0xffffd000
   de3d4:	ffffd800 	.word	0xffffd800
   de3d8:	ffffd900 	.word	0xffffd900
   de3dc:	000ebfcd 	.word	0x000ebfcd

000de3e0 <mbedtls_x509_crt_init>:
/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
   de3e0:	f44f 729a 	mov.w	r2, #308	; 0x134
   de3e4:	2100      	movs	r1, #0
   de3e6:	f00a bd29 	b.w	e8e3c <memset>

000de3ea <mbedtls_x509_crt_free>:

/*
 * Unallocate all certificate data
 */
void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
{
   de3ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_sequence *seq_cur;
    mbedtls_x509_sequence *seq_prv;

    if( crt == NULL )
   de3ec:	4605      	mov	r5, r0
   de3ee:	2800      	cmp	r0, #0
   de3f0:	d057      	beq.n	de4a2 <mbedtls_x509_crt_free+0xb8>
   de3f2:	4604      	mov	r4, r0
        return;

    do
    {
        mbedtls_pk_free( &cert_cur->pk );
   de3f4:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   de3f8:	f000 fbee 	bl	debd8 <mbedtls_pk_free>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
   de3fc:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
   de400:	f007 fad2 	bl	e59a8 <free>
#endif

        name_cur = cert_cur->issuer.next;
   de404:	6e66      	ldr	r6, [r4, #100]	; 0x64
        while( name_cur != NULL )
   de406:	b14e      	cbz	r6, de41c <mbedtls_x509_crt_free+0x32>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   de408:	4630      	mov	r0, r6
            name_cur = name_cur->next;
   de40a:	69b7      	ldr	r7, [r6, #24]
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   de40c:	2120      	movs	r1, #32
   de40e:	f004 fbd9 	bl	e2bc4 <mbedtls_platform_zeroize>
            mbedtls_free( name_prv );
   de412:	4630      	mov	r0, r6
   de414:	f007 fac8 	bl	e59a8 <free>
            name_cur = name_cur->next;
   de418:	463e      	mov	r6, r7
        while( name_cur != NULL )
   de41a:	e7f4      	b.n	de406 <mbedtls_x509_crt_free+0x1c>
        }

        name_cur = cert_cur->subject.next;
   de41c:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
        while( name_cur != NULL )
   de420:	b14e      	cbz	r6, de436 <mbedtls_x509_crt_free+0x4c>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   de422:	4630      	mov	r0, r6
            name_cur = name_cur->next;
   de424:	69b7      	ldr	r7, [r6, #24]
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   de426:	2120      	movs	r1, #32
   de428:	f004 fbcc 	bl	e2bc4 <mbedtls_platform_zeroize>
            mbedtls_free( name_prv );
   de42c:	4630      	mov	r0, r6
   de42e:	f007 fabb 	bl	e59a8 <free>
            name_cur = name_cur->next;
   de432:	463e      	mov	r6, r7
        while( name_cur != NULL )
   de434:	e7f4      	b.n	de420 <mbedtls_x509_crt_free+0x36>
        }

        seq_cur = cert_cur->ext_key_usage.next;
   de436:	f8d4 6114 	ldr.w	r6, [r4, #276]	; 0x114
        while( seq_cur != NULL )
   de43a:	b14e      	cbz	r6, de450 <mbedtls_x509_crt_free+0x66>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_platform_zeroize( seq_prv,
   de43c:	4630      	mov	r0, r6
            seq_cur = seq_cur->next;
   de43e:	68f7      	ldr	r7, [r6, #12]
            mbedtls_platform_zeroize( seq_prv,
   de440:	2110      	movs	r1, #16
   de442:	f004 fbbf 	bl	e2bc4 <mbedtls_platform_zeroize>
                                      sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
   de446:	4630      	mov	r0, r6
   de448:	f007 faae 	bl	e59a8 <free>
            seq_cur = seq_cur->next;
   de44c:	463e      	mov	r6, r7
        while( seq_cur != NULL )
   de44e:	e7f4      	b.n	de43a <mbedtls_x509_crt_free+0x50>
        }

        seq_cur = cert_cur->subject_alt_names.next;
   de450:	f8d4 60f4 	ldr.w	r6, [r4, #244]	; 0xf4
        while( seq_cur != NULL )
   de454:	b14e      	cbz	r6, de46a <mbedtls_x509_crt_free+0x80>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_platform_zeroize( seq_prv,
   de456:	4630      	mov	r0, r6
            seq_cur = seq_cur->next;
   de458:	68f7      	ldr	r7, [r6, #12]
            mbedtls_platform_zeroize( seq_prv,
   de45a:	2110      	movs	r1, #16
   de45c:	f004 fbb2 	bl	e2bc4 <mbedtls_platform_zeroize>
                                      sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
   de460:	4630      	mov	r0, r6
   de462:	f007 faa1 	bl	e59a8 <free>
            seq_cur = seq_cur->next;
   de466:	463e      	mov	r6, r7
        while( seq_cur != NULL )
   de468:	e7f4      	b.n	de454 <mbedtls_x509_crt_free+0x6a>
        }

        if( cert_cur->raw.p != NULL )
   de46a:	68a0      	ldr	r0, [r4, #8]
   de46c:	b128      	cbz	r0, de47a <mbedtls_x509_crt_free+0x90>
        {
            mbedtls_platform_zeroize( cert_cur->raw.p, cert_cur->raw.len );
   de46e:	6861      	ldr	r1, [r4, #4]
   de470:	f004 fba8 	bl	e2bc4 <mbedtls_platform_zeroize>
            mbedtls_free( cert_cur->raw.p );
   de474:	68a0      	ldr	r0, [r4, #8]
   de476:	f007 fa97 	bl	e59a8 <free>
        }

        cert_cur = cert_cur->next;
   de47a:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    }
    while( cert_cur != NULL );
   de47e:	2c00      	cmp	r4, #0
   de480:	d1b8      	bne.n	de3f4 <mbedtls_x509_crt_free+0xa>
   de482:	462c      	mov	r4, r5

    cert_cur = crt;
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;
   de484:	4620      	mov	r0, r4

        mbedtls_platform_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
   de486:	f44f 719a 	mov.w	r1, #308	; 0x134
   de48a:	9001      	str	r0, [sp, #4]
        cert_cur = cert_cur->next;
   de48c:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
        mbedtls_platform_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
   de490:	f004 fb98 	bl	e2bc4 <mbedtls_platform_zeroize>
        if( cert_prv != crt )
   de494:	9801      	ldr	r0, [sp, #4]
   de496:	4285      	cmp	r5, r0
   de498:	d001      	beq.n	de49e <mbedtls_x509_crt_free+0xb4>
            mbedtls_free( cert_prv );
   de49a:	f007 fa85 	bl	e59a8 <free>
    }
    while( cert_cur != NULL );
   de49e:	2c00      	cmp	r4, #0
   de4a0:	d1f0      	bne.n	de484 <mbedtls_x509_crt_free+0x9a>
}
   de4a2:	b003      	add	sp, #12
   de4a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000de4a8 <mbedtls_x509_crt_parse_der>:
{
   de4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de4ac:	460e      	mov	r6, r1
   de4ae:	b09b      	sub	sp, #108	; 0x6c
   de4b0:	4615      	mov	r5, r2
    if( crt == NULL || buf == NULL )
   de4b2:	4683      	mov	fp, r0
   de4b4:	2800      	cmp	r0, #0
   de4b6:	f000 82f6 	beq.w	deaa6 <mbedtls_x509_crt_parse_der+0x5fe>
   de4ba:	2900      	cmp	r1, #0
   de4bc:	f000 82f3 	beq.w	deaa6 <mbedtls_x509_crt_parse_der+0x5fe>
   de4c0:	4604      	mov	r4, r0
    mbedtls_x509_crt *crt = chain, *prev = NULL;
   de4c2:	f04f 0a00 	mov.w	sl, #0
    while( crt->version != 0 && crt->next != NULL )
   de4c6:	69a3      	ldr	r3, [r4, #24]
   de4c8:	b163      	cbz	r3, de4e4 <mbedtls_x509_crt_parse_der+0x3c>
   de4ca:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   de4ce:	46a2      	mov	sl, r4
   de4d0:	2b00      	cmp	r3, #0
   de4d2:	f000 82ee 	beq.w	deab2 <mbedtls_x509_crt_parse_der+0x60a>
   de4d6:	461c      	mov	r4, r3
   de4d8:	e7f5      	b.n	de4c6 <mbedtls_x509_crt_parse_der+0x1e>
        mbedtls_x509_crt_init( crt->next );
   de4da:	f7ff ff81 	bl	de3e0 <mbedtls_x509_crt_init>
        crt = crt->next;
   de4de:	46a2      	mov	sl, r4
   de4e0:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
   de4e4:	2300      	movs	r3, #0
   de4e6:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
   de4ea:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   de4ee:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
   de4f2:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
   de4f6:	9313      	str	r3, [sp, #76]	; 0x4c
    if( crt == NULL || buf == NULL )
   de4f8:	2c00      	cmp	r4, #0
   de4fa:	f000 82c8 	beq.w	dea8e <mbedtls_x509_crt_parse_der+0x5e6>
    len = buflen;
   de4fe:	e9cd 5605 	strd	r5, r6, [sp, #20]
    end = p + len;
   de502:	4435      	add	r5, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   de504:	2330      	movs	r3, #48	; 0x30
   de506:	aa05      	add	r2, sp, #20
   de508:	4629      	mov	r1, r5
   de50a:	a806      	add	r0, sp, #24
   de50c:	f7f8 f838 	bl	d6580 <mbedtls_asn1_get_tag>
   de510:	b158      	cbz	r0, de52a <mbedtls_x509_crt_parse_der+0x82>
        mbedtls_x509_crt_free( crt );
   de512:	4620      	mov	r0, r4
   de514:	f7ff ff69 	bl	de3ea <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
   de518:	4eb2      	ldr	r6, [pc, #712]	; (de7e4 <mbedtls_x509_crt_parse_der+0x33c>)
        if( prev )
   de51a:	f1ba 0f00 	cmp.w	sl, #0
   de51e:	f040 82be 	bne.w	dea9e <mbedtls_x509_crt_parse_der+0x5f6>
        if( crt != chain )
   de522:	45a3      	cmp	fp, r4
   de524:	f040 82b7 	bne.w	dea96 <mbedtls_x509_crt_parse_der+0x5ee>
   de528:	e02f      	b.n	de58a <mbedtls_x509_crt_parse_der+0xe2>
    if( len > (size_t) ( end - p ) )
   de52a:	e9dd 8705 	ldrd	r8, r7, [sp, #20]
   de52e:	1bed      	subs	r5, r5, r7
   de530:	4545      	cmp	r5, r8
   de532:	d204      	bcs.n	de53e <mbedtls_x509_crt_parse_der+0x96>
        mbedtls_x509_crt_free( crt );
   de534:	4620      	mov	r0, r4
   de536:	f7ff ff58 	bl	de3ea <mbedtls_x509_crt_free>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   de53a:	4eab      	ldr	r6, [pc, #684]	; (de7e8 <mbedtls_x509_crt_parse_der+0x340>)
   de53c:	e7ed      	b.n	de51a <mbedtls_x509_crt_parse_der+0x72>
    crt_end = p + len;
   de53e:	4447      	add	r7, r8
    crt->raw.len = crt_end - buf;
   de540:	1bbd      	subs	r5, r7, r6
   de542:	6065      	str	r5, [r4, #4]
    crt->raw.p = p = (unsigned char *)mbedtls_calloc( 1, crt->raw.len );
   de544:	4629      	mov	r1, r5
   de546:	2001      	movs	r0, #1
   de548:	f00a fbd8 	bl	e8cfc <calloc>
   de54c:	4607      	mov	r7, r0
   de54e:	9006      	str	r0, [sp, #24]
   de550:	60a0      	str	r0, [r4, #8]
    if( p == NULL )
   de552:	b908      	cbnz	r0, de558 <mbedtls_x509_crt_parse_der+0xb0>
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   de554:	4ea5      	ldr	r6, [pc, #660]	; (de7ec <mbedtls_x509_crt_parse_der+0x344>)
   de556:	e7e0      	b.n	de51a <mbedtls_x509_crt_parse_der+0x72>
    memcpy( p, buf, crt->raw.len );
   de558:	4631      	mov	r1, r6
   de55a:	462a      	mov	r2, r5
   de55c:	f00a fc46 	bl	e8dec <memcpy>
    p += crt->raw.len - len;
   de560:	eba5 0308 	sub.w	r3, r5, r8
   de564:	443b      	add	r3, r7
    end = crt_end = p + len;
   de566:	442f      	add	r7, r5
    p += crt->raw.len - len;
   de568:	9306      	str	r3, [sp, #24]
    crt->tbs.p = p;
   de56a:	6163      	str	r3, [r4, #20]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   de56c:	aa05      	add	r2, sp, #20
   de56e:	2330      	movs	r3, #48	; 0x30
   de570:	4639      	mov	r1, r7
   de572:	a806      	add	r0, sp, #24
   de574:	f7f8 f804 	bl	d6580 <mbedtls_asn1_get_tag>
   de578:	4606      	mov	r6, r0
   de57a:	b150      	cbz	r0, de592 <mbedtls_x509_crt_parse_der+0xea>
        mbedtls_x509_crt_free( crt );
   de57c:	4620      	mov	r0, r4
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
   de57e:	f5a6 5606 	sub.w	r6, r6, #8576	; 0x2180
        mbedtls_x509_crt_free( crt );
   de582:	f7ff ff32 	bl	de3ea <mbedtls_x509_crt_free>
    if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
   de586:	2e00      	cmp	r6, #0
   de588:	d1c7      	bne.n	de51a <mbedtls_x509_crt_parse_der+0x72>
}
   de58a:	4630      	mov	r0, r6
   de58c:	b01b      	add	sp, #108	; 0x6c
   de58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    end = p + len;
   de592:	e9dd 3505 	ldrd	r3, r5, [sp, #20]
   de596:	441d      	add	r5, r3
    crt->tbs.len = end - crt->tbs.p;
   de598:	6963      	ldr	r3, [r4, #20]
   de59a:	1aeb      	subs	r3, r5, r3
   de59c:	6123      	str	r3, [r4, #16]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   de59e:	aa17      	add	r2, sp, #92	; 0x5c
   de5a0:	23a0      	movs	r3, #160	; 0xa0
   de5a2:	4629      	mov	r1, r5
   de5a4:	a806      	add	r0, sp, #24
   de5a6:	f7f7 ffeb 	bl	d6580 <mbedtls_asn1_get_tag>
   de5aa:	b308      	cbz	r0, de5f0 <mbedtls_x509_crt_parse_der+0x148>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   de5ac:	f110 0f62 	cmn.w	r0, #98	; 0x62
   de5b0:	d11a      	bne.n	de5e8 <mbedtls_x509_crt_parse_der+0x140>
            *ver = 0;
   de5b2:	61a6      	str	r6, [r4, #24]
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
   de5b4:	f104 021c 	add.w	r2, r4, #28
   de5b8:	4629      	mov	r1, r5
   de5ba:	a806      	add	r0, sp, #24
   de5bc:	f7f8 f938 	bl	d6830 <mbedtls_x509_get_serial>
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
   de5c0:	4606      	mov	r6, r0
   de5c2:	bb38      	cbnz	r0, de614 <mbedtls_x509_crt_parse_der+0x16c>
        ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
   de5c4:	f104 0828 	add.w	r8, r4, #40	; 0x28
   de5c8:	ab0b      	add	r3, sp, #44	; 0x2c
   de5ca:	4642      	mov	r2, r8
   de5cc:	4629      	mov	r1, r5
   de5ce:	a806      	add	r0, sp, #24
   de5d0:	f7f8 f95b 	bl	d688a <mbedtls_x509_get_alg>
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
   de5d4:	4606      	mov	r6, r0
   de5d6:	b9e8      	cbnz	r0, de614 <mbedtls_x509_crt_parse_der+0x16c>
    if( crt->version < 0 || crt->version > 2 )
   de5d8:	69a3      	ldr	r3, [r4, #24]
   de5da:	2b02      	cmp	r3, #2
   de5dc:	d91e      	bls.n	de61c <mbedtls_x509_crt_parse_der+0x174>
        mbedtls_x509_crt_free( crt );
   de5de:	4620      	mov	r0, r4
   de5e0:	f7ff ff03 	bl	de3ea <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
   de5e4:	4e82      	ldr	r6, [pc, #520]	; (de7f0 <mbedtls_x509_crt_parse_der+0x348>)
   de5e6:	e798      	b.n	de51a <mbedtls_x509_crt_parse_der+0x72>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
   de5e8:	f5a0 5606 	sub.w	r6, r0, #8576	; 0x2180
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
   de5ec:	b996      	cbnz	r6, de614 <mbedtls_x509_crt_parse_der+0x16c>
   de5ee:	e7e1      	b.n	de5b4 <mbedtls_x509_crt_parse_der+0x10c>
    end = *p + len;
   de5f0:	9906      	ldr	r1, [sp, #24]
   de5f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   de5f4:	eb01 0803 	add.w	r8, r1, r3
    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
   de5f8:	f104 0218 	add.w	r2, r4, #24
   de5fc:	4641      	mov	r1, r8
   de5fe:	a806      	add	r0, sp, #24
   de600:	f7f7 ffeb 	bl	d65da <mbedtls_asn1_get_int>
   de604:	b110      	cbz	r0, de60c <mbedtls_x509_crt_parse_der+0x164>
        return( MBEDTLS_ERR_X509_INVALID_VERSION + ret );
   de606:	f5a0 5608 	sub.w	r6, r0, #8704	; 0x2200
   de60a:	e7ef      	b.n	de5ec <mbedtls_x509_crt_parse_der+0x144>
    if( *p != end )
   de60c:	9b06      	ldr	r3, [sp, #24]
   de60e:	4598      	cmp	r8, r3
   de610:	d0d0      	beq.n	de5b4 <mbedtls_x509_crt_parse_der+0x10c>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   de612:	4e78      	ldr	r6, [pc, #480]	; (de7f4 <mbedtls_x509_crt_parse_der+0x34c>)
        mbedtls_x509_crt_free( crt );
   de614:	4620      	mov	r0, r4
   de616:	f7ff fee8 	bl	de3ea <mbedtls_x509_crt_free>
        return( ret );
   de61a:	e77e      	b.n	de51a <mbedtls_x509_crt_parse_der+0x72>
    crt->version++;
   de61c:	3301      	adds	r3, #1
   de61e:	61a3      	str	r3, [r4, #24]
    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
   de620:	f504 7396 	add.w	r3, r4, #300	; 0x12c
   de624:	9300      	str	r3, [sp, #0]
   de626:	f504 7294 	add.w	r2, r4, #296	; 0x128
   de62a:	f204 1329 	addw	r3, r4, #297	; 0x129
   de62e:	a90b      	add	r1, sp, #44	; 0x2c
   de630:	4640      	mov	r0, r8
   de632:	f7f8 fb6b 	bl	d6d0c <mbedtls_x509_get_sig_alg>
   de636:	4606      	mov	r6, r0
   de638:	2800      	cmp	r0, #0
   de63a:	d1eb      	bne.n	de614 <mbedtls_x509_crt_parse_der+0x16c>
    crt->issuer_raw.p = p;
   de63c:	9b06      	ldr	r3, [sp, #24]
   de63e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   de640:	aa05      	add	r2, sp, #20
   de642:	2330      	movs	r3, #48	; 0x30
   de644:	4629      	mov	r1, r5
   de646:	a806      	add	r0, sp, #24
   de648:	f7f7 ff9a 	bl	d6580 <mbedtls_asn1_get_tag>
   de64c:	4606      	mov	r6, r0
   de64e:	2800      	cmp	r0, #0
   de650:	d194      	bne.n	de57c <mbedtls_x509_crt_parse_der+0xd4>
    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
   de652:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
   de656:	f104 024c 	add.w	r2, r4, #76	; 0x4c
   de65a:	4419      	add	r1, r3
   de65c:	a806      	add	r0, sp, #24
   de65e:	f7f8 fa03 	bl	d6a68 <mbedtls_x509_get_name>
   de662:	4606      	mov	r6, r0
   de664:	2800      	cmp	r0, #0
   de666:	d1d5      	bne.n	de614 <mbedtls_x509_crt_parse_der+0x16c>
    crt->issuer_raw.len = p - crt->issuer_raw.p;
   de668:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   de66a:	9b06      	ldr	r3, [sp, #24]
   de66c:	1a9b      	subs	r3, r3, r2
   de66e:	63a3      	str	r3, [r4, #56]	; 0x38
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   de670:	aa17      	add	r2, sp, #92	; 0x5c
   de672:	2330      	movs	r3, #48	; 0x30
   de674:	4629      	mov	r1, r5
   de676:	a806      	add	r0, sp, #24
   de678:	f7f7 ff82 	bl	d6580 <mbedtls_asn1_get_tag>
   de67c:	2800      	cmp	r0, #0
   de67e:	f000 8093 	beq.w	de7a8 <mbedtls_x509_crt_parse_der+0x300>
    if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
   de682:	f5b0 5610 	subs.w	r6, r0, #9216	; 0x2400
   de686:	d1c5      	bne.n	de614 <mbedtls_x509_crt_parse_der+0x16c>
    crt->subject_raw.p = p;
   de688:	9b06      	ldr	r3, [sp, #24]
   de68a:	64a3      	str	r3, [r4, #72]	; 0x48
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   de68c:	aa05      	add	r2, sp, #20
   de68e:	2330      	movs	r3, #48	; 0x30
   de690:	4629      	mov	r1, r5
   de692:	a806      	add	r0, sp, #24
   de694:	f7f7 ff74 	bl	d6580 <mbedtls_asn1_get_tag>
   de698:	4606      	mov	r6, r0
   de69a:	2800      	cmp	r0, #0
   de69c:	f47f af6e 	bne.w	de57c <mbedtls_x509_crt_parse_der+0xd4>
    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
   de6a0:	9b05      	ldr	r3, [sp, #20]
   de6a2:	2b00      	cmp	r3, #0
   de6a4:	f040 80ac 	bne.w	de800 <mbedtls_x509_crt_parse_der+0x358>
    crt->subject_raw.len = p - crt->subject_raw.p;
   de6a8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   de6aa:	9b06      	ldr	r3, [sp, #24]
   de6ac:	1a9b      	subs	r3, r3, r2
   de6ae:	6463      	str	r3, [r4, #68]	; 0x44
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
   de6b0:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
   de6b4:	4629      	mov	r1, r5
   de6b6:	a806      	add	r0, sp, #24
   de6b8:	f7fd fe92 	bl	dc3e0 <mbedtls_pk_parse_subpubkey>
   de6bc:	4606      	mov	r6, r0
   de6be:	2800      	cmp	r0, #0
   de6c0:	d1a8      	bne.n	de614 <mbedtls_x509_crt_parse_der+0x16c>
    if( crt->version == 2 || crt->version == 3 )
   de6c2:	69a3      	ldr	r3, [r4, #24]
   de6c4:	3b02      	subs	r3, #2
   de6c6:	2b01      	cmp	r3, #1
   de6c8:	d817      	bhi.n	de6fa <mbedtls_x509_crt_parse_der+0x252>
        ret = x509_get_uid( &p, end, &crt->issuer_id,  1 );
   de6ca:	2301      	movs	r3, #1
   de6cc:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
   de6d0:	4629      	mov	r1, r5
   de6d2:	a806      	add	r0, sp, #24
   de6d4:	f7ff f867 	bl	dd7a6 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
   de6d8:	4606      	mov	r6, r0
   de6da:	2800      	cmp	r0, #0
   de6dc:	d19a      	bne.n	de614 <mbedtls_x509_crt_parse_der+0x16c>
    if( crt->version == 2 || crt->version == 3 )
   de6de:	69a3      	ldr	r3, [r4, #24]
   de6e0:	3b02      	subs	r3, #2
   de6e2:	2b01      	cmp	r3, #1
   de6e4:	d809      	bhi.n	de6fa <mbedtls_x509_crt_parse_der+0x252>
        ret = x509_get_uid( &p, end, &crt->subject_id,  2 );
   de6e6:	2302      	movs	r3, #2
   de6e8:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
   de6ec:	4629      	mov	r1, r5
   de6ee:	a806      	add	r0, sp, #24
   de6f0:	f7ff f859 	bl	dd7a6 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
   de6f4:	4606      	mov	r6, r0
   de6f6:	2800      	cmp	r0, #0
   de6f8:	d18c      	bne.n	de614 <mbedtls_x509_crt_parse_der+0x16c>
    if( crt->version == 3 )
   de6fa:	69a3      	ldr	r3, [r4, #24]
   de6fc:	2b03      	cmp	r3, #3
   de6fe:	d129      	bne.n	de754 <mbedtls_x509_crt_parse_der+0x2ac>
    if( *p == end )
   de700:	9a06      	ldr	r2, [sp, #24]
   de702:	42aa      	cmp	r2, r5
   de704:	d02a      	beq.n	de75c <mbedtls_x509_crt_parse_der+0x2b4>
    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
   de706:	f104 02dc 	add.w	r2, r4, #220	; 0xdc
   de70a:	4629      	mov	r1, r5
   de70c:	a806      	add	r0, sp, #24
   de70e:	f7f8 fb41 	bl	d6d94 <mbedtls_x509_get_ext>
   de712:	4606      	mov	r6, r0
   de714:	2800      	cmp	r0, #0
   de716:	f47f af7d 	bne.w	de614 <mbedtls_x509_crt_parse_der+0x16c>
    end = crt->v3_ext.p + crt->v3_ext.len;
   de71a:	e9d4 3238 	ldrd	r3, r2, [r4, #224]	; 0xe0
   de71e:	18d3      	adds	r3, r2, r3
   de720:	9302      	str	r3, [sp, #8]
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
   de722:	4681      	mov	r9, r0
    while( *p < end )
   de724:	9b06      	ldr	r3, [sp, #24]
   de726:	9a02      	ldr	r2, [sp, #8]
   de728:	429a      	cmp	r2, r3
   de72a:	f240 819e 	bls.w	dea6a <mbedtls_x509_crt_parse_der+0x5c2>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   de72e:	9902      	ldr	r1, [sp, #8]
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
   de730:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   de734:	2330      	movs	r3, #48	; 0x30
   de736:	aa07      	add	r2, sp, #28
   de738:	a806      	add	r0, sp, #24
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
   de73a:	e9cd 9914 	strd	r9, r9, [sp, #80]	; 0x50
        int ext_type = 0;
   de73e:	e9cd 9908 	strd	r9, r9, [sp, #32]
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   de742:	f7f7 ff1d 	bl	d6580 <mbedtls_asn1_get_tag>
   de746:	2800      	cmp	r0, #0
   de748:	d066      	beq.n	de818 <mbedtls_x509_crt_parse_der+0x370>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
   de74a:	f5a0 5614 	sub.w	r6, r0, #9472	; 0x2500
        if( ret != 0 )
   de74e:	2e00      	cmp	r6, #0
   de750:	f47f af60 	bne.w	de614 <mbedtls_x509_crt_parse_der+0x16c>
    if( p != end )
   de754:	9b06      	ldr	r3, [sp, #24]
   de756:	429d      	cmp	r5, r3
   de758:	f47f aeec 	bne.w	de534 <mbedtls_x509_crt_parse_der+0x8c>
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
   de75c:	ab0e      	add	r3, sp, #56	; 0x38
   de75e:	aa11      	add	r2, sp, #68	; 0x44
   de760:	4639      	mov	r1, r7
   de762:	a806      	add	r0, sp, #24
   de764:	f7f8 f891 	bl	d688a <mbedtls_x509_get_alg>
   de768:	4606      	mov	r6, r0
   de76a:	2800      	cmp	r0, #0
   de76c:	f47f af52 	bne.w	de614 <mbedtls_x509_crt_parse_der+0x16c>
    if( crt->sig_oid.len != sig_oid2.len ||
   de770:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   de772:	9b12      	ldr	r3, [sp, #72]	; 0x48
   de774:	429a      	cmp	r2, r3
   de776:	d112      	bne.n	de79e <mbedtls_x509_crt_parse_der+0x2f6>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
   de778:	9913      	ldr	r1, [sp, #76]	; 0x4c
   de77a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   de77c:	f00a fb28 	bl	e8dd0 <memcmp>
    if( crt->sig_oid.len != sig_oid2.len ||
   de780:	b968      	cbnz	r0, de79e <mbedtls_x509_crt_parse_der+0x2f6>
        sig_params1.len != sig_params2.len ||
   de782:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
   de784:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   de786:	429a      	cmp	r2, r3
   de788:	d109      	bne.n	de79e <mbedtls_x509_crt_parse_der+0x2f6>
        sig_params1.len != sig_params2.len ||
   de78a:	2a00      	cmp	r2, #0
   de78c:	f000 8170 	beq.w	dea70 <mbedtls_x509_crt_parse_der+0x5c8>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
   de790:	9910      	ldr	r1, [sp, #64]	; 0x40
   de792:	980d      	ldr	r0, [sp, #52]	; 0x34
   de794:	f00a fb1c 	bl	e8dd0 <memcmp>
        ( sig_params1.len != 0 &&
   de798:	2800      	cmp	r0, #0
   de79a:	f000 8169 	beq.w	dea70 <mbedtls_x509_crt_parse_der+0x5c8>
        mbedtls_x509_crt_free( crt );
   de79e:	4620      	mov	r0, r4
   de7a0:	f7ff fe23 	bl	de3ea <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
   de7a4:	4e14      	ldr	r6, [pc, #80]	; (de7f8 <mbedtls_x509_crt_parse_der+0x350>)
   de7a6:	e6b8      	b.n	de51a <mbedtls_x509_crt_parse_der+0x72>
    end = *p + len;
   de7a8:	9906      	ldr	r1, [sp, #24]
   de7aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   de7ac:	eb01 0803 	add.w	r8, r1, r3
    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
   de7b0:	f104 028c 	add.w	r2, r4, #140	; 0x8c
   de7b4:	4641      	mov	r1, r8
   de7b6:	a806      	add	r0, sp, #24
   de7b8:	f7f8 f9da 	bl	d6b70 <mbedtls_x509_get_time>
   de7bc:	4606      	mov	r6, r0
   de7be:	2800      	cmp	r0, #0
   de7c0:	f47f af28 	bne.w	de614 <mbedtls_x509_crt_parse_der+0x16c>
    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
   de7c4:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
   de7c8:	4641      	mov	r1, r8
   de7ca:	a806      	add	r0, sp, #24
   de7cc:	f7f8 f9d0 	bl	d6b70 <mbedtls_x509_get_time>
   de7d0:	4606      	mov	r6, r0
   de7d2:	2800      	cmp	r0, #0
   de7d4:	f47f af1e 	bne.w	de614 <mbedtls_x509_crt_parse_der+0x16c>
    if( *p != end )
   de7d8:	9b06      	ldr	r3, [sp, #24]
   de7da:	4598      	cmp	r8, r3
   de7dc:	f43f af54 	beq.w	de688 <mbedtls_x509_crt_parse_der+0x1e0>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   de7e0:	4e06      	ldr	r6, [pc, #24]	; (de7fc <mbedtls_x509_crt_parse_der+0x354>)
        mbedtls_x509_crt_free( crt );
   de7e2:	e717      	b.n	de614 <mbedtls_x509_crt_parse_der+0x16c>
   de7e4:	ffffde80 	.word	0xffffde80
   de7e8:	ffffde1a 	.word	0xffffde1a
   de7ec:	ffffd780 	.word	0xffffd780
   de7f0:	ffffda80 	.word	0xffffda80
   de7f4:	ffffdd9a 	.word	0xffffdd9a
   de7f8:	ffffd980 	.word	0xffffd980
   de7fc:	ffffdb9a 	.word	0xffffdb9a
    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
   de800:	9906      	ldr	r1, [sp, #24]
   de802:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   de806:	4419      	add	r1, r3
   de808:	a806      	add	r0, sp, #24
   de80a:	f7f8 f92d 	bl	d6a68 <mbedtls_x509_get_name>
   de80e:	4606      	mov	r6, r0
   de810:	2800      	cmp	r0, #0
   de812:	f43f af49 	beq.w	de6a8 <mbedtls_x509_crt_parse_der+0x200>
   de816:	e6fd      	b.n	de614 <mbedtls_x509_crt_parse_der+0x16c>
        end_ext_data = *p + len;
   de818:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   de81c:	eb02 0803 	add.w	r8, r2, r3
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &extn_oid.len,
   de820:	4641      	mov	r1, r8
   de822:	2306      	movs	r3, #6
   de824:	aa15      	add	r2, sp, #84	; 0x54
   de826:	a806      	add	r0, sp, #24
   de828:	f7f7 feaa 	bl	d6580 <mbedtls_asn1_get_tag>
   de82c:	2800      	cmp	r0, #0
   de82e:	d18c      	bne.n	de74a <mbedtls_x509_crt_parse_der+0x2a2>
        extn_oid.tag = MBEDTLS_ASN1_OID;
   de830:	2306      	movs	r3, #6
        *p += extn_oid.len;
   de832:	9a15      	ldr	r2, [sp, #84]	; 0x54
        extn_oid.tag = MBEDTLS_ASN1_OID;
   de834:	9314      	str	r3, [sp, #80]	; 0x50
        extn_oid.p = *p;
   de836:	9b06      	ldr	r3, [sp, #24]
   de838:	9316      	str	r3, [sp, #88]	; 0x58
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
   de83a:	4641      	mov	r1, r8
        *p += extn_oid.len;
   de83c:	4413      	add	r3, r2
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
   de83e:	a806      	add	r0, sp, #24
   de840:	aa08      	add	r2, sp, #32
        *p += extn_oid.len;
   de842:	9306      	str	r3, [sp, #24]
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
   de844:	f7f7 feb0 	bl	d65a8 <mbedtls_asn1_get_bool>
   de848:	b118      	cbz	r0, de852 <mbedtls_x509_crt_parse_der+0x3aa>
   de84a:	f110 0f62 	cmn.w	r0, #98	; 0x62
   de84e:	f47f af7c 	bne.w	de74a <mbedtls_x509_crt_parse_der+0x2a2>
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
   de852:	2304      	movs	r3, #4
   de854:	aa07      	add	r2, sp, #28
   de856:	4641      	mov	r1, r8
   de858:	a806      	add	r0, sp, #24
   de85a:	f7f7 fe91 	bl	d6580 <mbedtls_asn1_get_tag>
   de85e:	2800      	cmp	r0, #0
   de860:	f47f af73 	bne.w	de74a <mbedtls_x509_crt_parse_der+0x2a2>
        end_ext_octet = *p + len;
   de864:	e9dd 6306 	ldrd	r6, r3, [sp, #24]
   de868:	441e      	add	r6, r3
        if( end_ext_octet != end_ext_data )
   de86a:	45b0      	cmp	r8, r6
   de86c:	f040 80fb 	bne.w	dea66 <mbedtls_x509_crt_parse_der+0x5be>
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
   de870:	a909      	add	r1, sp, #36	; 0x24
   de872:	a814      	add	r0, sp, #80	; 0x50
   de874:	f7fb fba2 	bl	d9fbc <mbedtls_oid_get_x509_ext_type>
        if( ret != 0 )
   de878:	b138      	cbz	r0, de88a <mbedtls_x509_crt_parse_der+0x3e2>
            if( is_critical )
   de87a:	9b08      	ldr	r3, [sp, #32]
            *p = end_ext_octet;
   de87c:	f8cd 8018 	str.w	r8, [sp, #24]
            if( is_critical )
   de880:	2b00      	cmp	r3, #0
   de882:	f43f af4f 	beq.w	de724 <mbedtls_x509_crt_parse_der+0x27c>
                        MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   de886:	4e92      	ldr	r6, [pc, #584]	; (dead0 <mbedtls_x509_crt_parse_der+0x628>)
   de888:	e6c4      	b.n	de614 <mbedtls_x509_crt_parse_der+0x16c>
        if( ( crt->ext_types & ext_type ) != 0 )
   de88a:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
   de88e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   de890:	ea11 0302 	ands.w	r3, r1, r2
   de894:	f040 8119 	bne.w	deaca <mbedtls_x509_crt_parse_der+0x622>
        crt->ext_types |= ext_type;
   de898:	4311      	orrs	r1, r2
        switch( ext_type )
   de89a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
        crt->ext_types |= ext_type;
   de89e:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
        switch( ext_type )
   de8a2:	d020      	beq.n	de8e6 <mbedtls_x509_crt_parse_der+0x43e>
   de8a4:	dc06      	bgt.n	de8b4 <mbedtls_x509_crt_parse_der+0x40c>
   de8a6:	2a04      	cmp	r2, #4
   de8a8:	d05e      	beq.n	de968 <mbedtls_x509_crt_parse_der+0x4c0>
   de8aa:	2a20      	cmp	r2, #32
   de8ac:	f000 8090 	beq.w	de9d0 <mbedtls_x509_crt_parse_der+0x528>
        if( ret != 0 )
   de8b0:	4e88      	ldr	r6, [pc, #544]	; (dead4 <mbedtls_x509_crt_parse_der+0x62c>)
   de8b2:	e6af      	b.n	de614 <mbedtls_x509_crt_parse_der+0x16c>
        switch( ext_type )
   de8b4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   de8b8:	d07a      	beq.n	de9b0 <mbedtls_x509_crt_parse_der+0x508>
   de8ba:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   de8be:	d1f7      	bne.n	de8b0 <mbedtls_x509_crt_parse_der+0x408>
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
   de8c0:	aa17      	add	r2, sp, #92	; 0x5c
   de8c2:	4641      	mov	r1, r8
   de8c4:	a806      	add	r0, sp, #24
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
   de8c6:	9317      	str	r3, [sp, #92]	; 0x5c
   de8c8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
   de8cc:	9319      	str	r3, [sp, #100]	; 0x64
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
   de8ce:	f7f7 febb 	bl	d6648 <mbedtls_asn1_get_bitstring>
   de8d2:	2800      	cmp	r0, #0
   de8d4:	d152      	bne.n	de97c <mbedtls_x509_crt_parse_der+0x4d4>
    if( bs.len != 1 )
   de8d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   de8d8:	2b01      	cmp	r3, #1
   de8da:	d177      	bne.n	de9cc <mbedtls_x509_crt_parse_der+0x524>
    *ns_cert_type = *bs.p;
   de8dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   de8de:	781b      	ldrb	r3, [r3, #0]
   de8e0:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
            continue;
   de8e4:	e71e      	b.n	de724 <mbedtls_x509_crt_parse_der+0x27c>
    *max_pathlen = 0; /* endless */
   de8e6:	e9c4 333f 	strd	r3, r3, [r4, #252]	; 0xfc
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   de8ea:	aa17      	add	r2, sp, #92	; 0x5c
   de8ec:	2330      	movs	r3, #48	; 0x30
   de8ee:	4641      	mov	r1, r8
   de8f0:	a806      	add	r0, sp, #24
   de8f2:	f7f7 fe45 	bl	d6580 <mbedtls_asn1_get_tag>
   de8f6:	b128      	cbz	r0, de904 <mbedtls_x509_crt_parse_der+0x45c>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
   de8f8:	f5a0 5614 	sub.w	r6, r0, #9472	; 0x2500
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
   de8fc:	2e00      	cmp	r6, #0
   de8fe:	f43f af11 	beq.w	de724 <mbedtls_x509_crt_parse_der+0x27c>
   de902:	e687      	b.n	de614 <mbedtls_x509_crt_parse_der+0x16c>
    if( *p == end )
   de904:	9b06      	ldr	r3, [sp, #24]
   de906:	429e      	cmp	r6, r3
   de908:	f43f af0c 	beq.w	de724 <mbedtls_x509_crt_parse_der+0x27c>
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
   de90c:	f104 02fc 	add.w	r2, r4, #252	; 0xfc
    if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
   de910:	4631      	mov	r1, r6
   de912:	a806      	add	r0, sp, #24
   de914:	9203      	str	r2, [sp, #12]
   de916:	f7f7 fe47 	bl	d65a8 <mbedtls_asn1_get_bool>
   de91a:	b178      	cbz	r0, de93c <mbedtls_x509_crt_parse_der+0x494>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   de91c:	f110 0f62 	cmn.w	r0, #98	; 0x62
   de920:	9a03      	ldr	r2, [sp, #12]
   de922:	d1e9      	bne.n	de8f8 <mbedtls_x509_crt_parse_der+0x450>
            ret = mbedtls_asn1_get_int( p, end, ca_istrue );
   de924:	4631      	mov	r1, r6
   de926:	a806      	add	r0, sp, #24
   de928:	f7f7 fe57 	bl	d65da <mbedtls_asn1_get_int>
        if( ret != 0 )
   de92c:	2800      	cmp	r0, #0
   de92e:	d1e3      	bne.n	de8f8 <mbedtls_x509_crt_parse_der+0x450>
        if( *ca_istrue != 0 )
   de930:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   de934:	b113      	cbz	r3, de93c <mbedtls_x509_crt_parse_der+0x494>
            *ca_istrue = 1;
   de936:	2301      	movs	r3, #1
   de938:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    if( *p == end )
   de93c:	9b06      	ldr	r3, [sp, #24]
   de93e:	429e      	cmp	r6, r3
   de940:	f43f aef0 	beq.w	de724 <mbedtls_x509_crt_parse_der+0x27c>
    if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
   de944:	f504 7280 	add.w	r2, r4, #256	; 0x100
   de948:	4631      	mov	r1, r6
   de94a:	a806      	add	r0, sp, #24
   de94c:	f7f7 fe45 	bl	d65da <mbedtls_asn1_get_int>
   de950:	2800      	cmp	r0, #0
   de952:	d1d1      	bne.n	de8f8 <mbedtls_x509_crt_parse_der+0x450>
    if( *p != end )
   de954:	9b06      	ldr	r3, [sp, #24]
   de956:	429e      	cmp	r6, r3
   de958:	f040 8085 	bne.w	dea66 <mbedtls_x509_crt_parse_der+0x5be>
    (*max_pathlen)++;
   de95c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   de960:	3301      	adds	r3, #1
   de962:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    return( 0 );
   de966:	e6dd      	b.n	de724 <mbedtls_x509_crt_parse_der+0x27c>
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
   de968:	aa17      	add	r2, sp, #92	; 0x5c
   de96a:	4641      	mov	r1, r8
   de96c:	a806      	add	r0, sp, #24
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
   de96e:	9317      	str	r3, [sp, #92]	; 0x5c
   de970:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
   de974:	9319      	str	r3, [sp, #100]	; 0x64
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
   de976:	f7f7 fe67 	bl	d6648 <mbedtls_asn1_get_bitstring>
   de97a:	b120      	cbz	r0, de986 <mbedtls_x509_crt_parse_der+0x4de>
            if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
   de97c:	f5b0 5614 	subs.w	r6, r0, #9472	; 0x2500
   de980:	f43f aed0 	beq.w	de724 <mbedtls_x509_crt_parse_der+0x27c>
   de984:	e646      	b.n	de614 <mbedtls_x509_crt_parse_der+0x16c>
    if( bs.len < 1 )
   de986:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   de988:	b302      	cbz	r2, de9cc <mbedtls_x509_crt_parse_der+0x524>
    *key_usage = 0;
   de98a:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
   de98e:	9919      	ldr	r1, [sp, #100]	; 0x64
   de990:	5c0b      	ldrb	r3, [r1, r0]
   de992:	00c6      	lsls	r6, r0, #3
   de994:	fa03 f606 	lsl.w	r6, r3, r6
   de998:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
   de99c:	3001      	adds	r0, #1
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
   de99e:	4333      	orrs	r3, r6
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
   de9a0:	4282      	cmp	r2, r0
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
   de9a2:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
   de9a6:	f43f aebd 	beq.w	de724 <mbedtls_x509_crt_parse_der+0x27c>
   de9aa:	2804      	cmp	r0, #4
   de9ac:	d1f0      	bne.n	de990 <mbedtls_x509_crt_parse_der+0x4e8>
   de9ae:	e6b9      	b.n	de724 <mbedtls_x509_crt_parse_der+0x27c>
    if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
   de9b0:	2306      	movs	r3, #6
   de9b2:	f504 7284 	add.w	r2, r4, #264	; 0x108
   de9b6:	4641      	mov	r1, r8
   de9b8:	a806      	add	r0, sp, #24
   de9ba:	f7f7 fe7b 	bl	d66b4 <mbedtls_asn1_get_sequence_of>
   de9be:	2800      	cmp	r0, #0
   de9c0:	d1dc      	bne.n	de97c <mbedtls_x509_crt_parse_der+0x4d4>
    if( ext_key_usage->buf.p == NULL )
   de9c2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   de9c6:	2b00      	cmp	r3, #0
   de9c8:	f47f aeac 	bne.w	de724 <mbedtls_x509_crt_parse_der+0x27c>
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   de9cc:	4e42      	ldr	r6, [pc, #264]	; (dead8 <mbedtls_x509_crt_parse_der+0x630>)
        if( ret != 0 )
   de9ce:	e621      	b.n	de614 <mbedtls_x509_crt_parse_der+0x16c>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
   de9d0:	2330      	movs	r3, #48	; 0x30
   de9d2:	aa0a      	add	r2, sp, #40	; 0x28
   de9d4:	4641      	mov	r1, r8
   de9d6:	a806      	add	r0, sp, #24
   de9d8:	f7f7 fdd2 	bl	d6580 <mbedtls_asn1_get_tag>
   de9dc:	2800      	cmp	r0, #0
   de9de:	d18b      	bne.n	de8f8 <mbedtls_x509_crt_parse_der+0x450>
    if( *p + len != end )
   de9e0:	9b06      	ldr	r3, [sp, #24]
   de9e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   de9e4:	4413      	add	r3, r2
   de9e6:	429e      	cmp	r6, r3
   de9e8:	d13d      	bne.n	dea66 <mbedtls_x509_crt_parse_der+0x5be>
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
   de9ea:	f104 08e8 	add.w	r8, r4, #232	; 0xe8
    while( *p < end )
   de9ee:	9a06      	ldr	r2, [sp, #24]
   de9f0:	4296      	cmp	r6, r2
   de9f2:	d934      	bls.n	dea5e <mbedtls_x509_crt_parse_der+0x5b6>
        if( ( end - *p ) < 1 )
   de9f4:	1ab3      	subs	r3, r6, r2
   de9f6:	2b00      	cmp	r3, #0
   de9f8:	dd57      	ble.n	deaaa <mbedtls_x509_crt_parse_der+0x602>
        tag = **p;
   de9fa:	f812 3b01 	ldrb.w	r3, [r2], #1
        (*p)++;
   de9fe:	9206      	str	r2, [sp, #24]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
   dea00:	4631      	mov	r1, r6
   dea02:	aa17      	add	r2, sp, #92	; 0x5c
   dea04:	a806      	add	r0, sp, #24
        tag = **p;
   dea06:	9303      	str	r3, [sp, #12]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
   dea08:	f7f7 fd6e 	bl	d64e8 <mbedtls_asn1_get_len>
   dea0c:	9b03      	ldr	r3, [sp, #12]
   dea0e:	2800      	cmp	r0, #0
   dea10:	f47f af72 	bne.w	de8f8 <mbedtls_x509_crt_parse_der+0x450>
        if( ( tag & MBEDTLS_ASN1_TAG_CLASS_MASK ) !=
   dea14:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   dea18:	2a80      	cmp	r2, #128	; 0x80
   dea1a:	f47f af34 	bne.w	de886 <mbedtls_x509_crt_parse_der+0x3de>
        if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
   dea1e:	2b82      	cmp	r3, #130	; 0x82
   dea20:	d004      	beq.n	dea2c <mbedtls_x509_crt_parse_der+0x584>
            *p += tag_len;
   dea22:	9b06      	ldr	r3, [sp, #24]
   dea24:	9a17      	ldr	r2, [sp, #92]	; 0x5c
        *p += buf->len;
   dea26:	4413      	add	r3, r2
   dea28:	9306      	str	r3, [sp, #24]
   dea2a:	e7e0      	b.n	de9ee <mbedtls_x509_crt_parse_der+0x546>
        if( cur->buf.p != NULL )
   dea2c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   dea30:	b15b      	cbz	r3, dea4a <mbedtls_x509_crt_parse_der+0x5a2>
            if( cur->next != NULL )
   dea32:	f8d8 300c 	ldr.w	r3, [r8, #12]
   dea36:	2b00      	cmp	r3, #0
   dea38:	d147      	bne.n	deaca <mbedtls_x509_crt_parse_der+0x622>
            cur->next = (mbedtls_asn1_sequence *)mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
   dea3a:	2110      	movs	r1, #16
   dea3c:	2001      	movs	r0, #1
   dea3e:	f00a f95d 	bl	e8cfc <calloc>
   dea42:	f8c8 000c 	str.w	r0, [r8, #12]
            if( cur->next == NULL )
   dea46:	b390      	cbz	r0, deaae <mbedtls_x509_crt_parse_der+0x606>
   dea48:	4680      	mov	r8, r0
        buf->tag = tag;
   dea4a:	2382      	movs	r3, #130	; 0x82
   dea4c:	f8c8 3000 	str.w	r3, [r8]
        buf->p = *p;
   dea50:	9b06      	ldr	r3, [sp, #24]
   dea52:	f8c8 3008 	str.w	r3, [r8, #8]
        buf->len = tag_len;
   dea56:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   dea58:	f8c8 2004 	str.w	r2, [r8, #4]
   dea5c:	e7e3      	b.n	dea26 <mbedtls_x509_crt_parse_der+0x57e>
    cur->next = NULL;
   dea5e:	f8c8 900c 	str.w	r9, [r8, #12]
    if( *p != end )
   dea62:	f43f ae5f 	beq.w	de724 <mbedtls_x509_crt_parse_der+0x27c>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   dea66:	4e1d      	ldr	r6, [pc, #116]	; (deadc <mbedtls_x509_crt_parse_der+0x634>)
            mbedtls_x509_crt_free( crt );
   dea68:	e5d4      	b.n	de614 <mbedtls_x509_crt_parse_der+0x16c>
    if( *p != end )
   dea6a:	f43f ae73 	beq.w	de754 <mbedtls_x509_crt_parse_der+0x2ac>
   dea6e:	e7fa      	b.n	dea66 <mbedtls_x509_crt_parse_der+0x5be>
    if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
   dea70:	f504 728e 	add.w	r2, r4, #284	; 0x11c
   dea74:	4639      	mov	r1, r7
   dea76:	a806      	add	r0, sp, #24
   dea78:	f7f8 f92c 	bl	d6cd4 <mbedtls_x509_get_sig>
   dea7c:	4606      	mov	r6, r0
   dea7e:	2800      	cmp	r0, #0
   dea80:	f47f adc8 	bne.w	de614 <mbedtls_x509_crt_parse_der+0x16c>
    if( p != end )
   dea84:	9b06      	ldr	r3, [sp, #24]
   dea86:	429f      	cmp	r7, r3
   dea88:	f43f ad7f 	beq.w	de58a <mbedtls_x509_crt_parse_der+0xe2>
   dea8c:	e552      	b.n	de534 <mbedtls_x509_crt_parse_der+0x8c>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   dea8e:	4e14      	ldr	r6, [pc, #80]	; (deae0 <mbedtls_x509_crt_parse_der+0x638>)
        if( prev )
   dea90:	f1ba 0f00 	cmp.w	sl, #0
   dea94:	d103      	bne.n	dea9e <mbedtls_x509_crt_parse_der+0x5f6>
            mbedtls_free( crt );
   dea96:	4620      	mov	r0, r4
   dea98:	f006 ff86 	bl	e59a8 <free>
   dea9c:	e575      	b.n	de58a <mbedtls_x509_crt_parse_der+0xe2>
            prev->next = NULL;
   dea9e:	2300      	movs	r3, #0
   deaa0:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
   deaa4:	e53d      	b.n	de522 <mbedtls_x509_crt_parse_der+0x7a>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   deaa6:	4e0e      	ldr	r6, [pc, #56]	; (deae0 <mbedtls_x509_crt_parse_der+0x638>)
   deaa8:	e56f      	b.n	de58a <mbedtls_x509_crt_parse_der+0xe2>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   deaaa:	4e0e      	ldr	r6, [pc, #56]	; (deae4 <mbedtls_x509_crt_parse_der+0x63c>)
   deaac:	e5b2      	b.n	de614 <mbedtls_x509_crt_parse_der+0x16c>
                        MBEDTLS_ERR_ASN1_ALLOC_FAILED );
   deaae:	4e0e      	ldr	r6, [pc, #56]	; (deae8 <mbedtls_x509_crt_parse_der+0x640>)
   deab0:	e5b0      	b.n	de614 <mbedtls_x509_crt_parse_der+0x16c>
        crt->next = (mbedtls_x509_crt *)mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
   deab2:	f44f 719a 	mov.w	r1, #308	; 0x134
   deab6:	2001      	movs	r0, #1
   deab8:	f00a f920 	bl	e8cfc <calloc>
   deabc:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
        if( crt->next == NULL )
   deac0:	2800      	cmp	r0, #0
   deac2:	f47f ad0a 	bne.w	de4da <mbedtls_x509_crt_parse_der+0x32>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   deac6:	4e09      	ldr	r6, [pc, #36]	; (deaec <mbedtls_x509_crt_parse_der+0x644>)
   deac8:	e55f      	b.n	de58a <mbedtls_x509_crt_parse_der+0xe2>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
   deaca:	4e09      	ldr	r6, [pc, #36]	; (deaf0 <mbedtls_x509_crt_parse_der+0x648>)
   deacc:	e5a2      	b.n	de614 <mbedtls_x509_crt_parse_der+0x16c>
   deace:	bf00      	nop
   dead0:	ffffda9e 	.word	0xffffda9e
   dead4:	ffffdf80 	.word	0xffffdf80
   dead8:	ffffda9c 	.word	0xffffda9c
   deadc:	ffffda9a 	.word	0xffffda9a
   deae0:	ffffd800 	.word	0xffffd800
   deae4:	ffffdaa0 	.word	0xffffdaa0
   deae8:	ffffda96 	.word	0xffffda96
   deaec:	ffffd780 	.word	0xffffd780
   deaf0:	ffffdb00 	.word	0xffffdb00

000deaf4 <mbedtls_x509_crt_parse>:
{
   deaf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   deaf8:	468a      	mov	sl, r1
   deafa:	b089      	sub	sp, #36	; 0x24
   deafc:	4617      	mov	r7, r2
    if( chain == NULL || buf == NULL )
   deafe:	4680      	mov	r8, r0
   deb00:	2800      	cmp	r0, #0
   deb02:	d059      	beq.n	debb8 <mbedtls_x509_crt_parse+0xc4>
   deb04:	2900      	cmp	r1, #0
   deb06:	d057      	beq.n	debb8 <mbedtls_x509_crt_parse+0xc4>
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
   deb08:	b142      	cbz	r2, deb1c <mbedtls_x509_crt_parse+0x28>
   deb0a:	188a      	adds	r2, r1, r2
   deb0c:	f812 6c01 	ldrb.w	r6, [r2, #-1]
   deb10:	b926      	cbnz	r6, deb1c <mbedtls_x509_crt_parse+0x28>
        strstr( (const char *) buf, "-----BEGIN CERTIFICATE-----" ) != NULL )
   deb12:	492b      	ldr	r1, [pc, #172]	; (debc0 <mbedtls_x509_crt_parse+0xcc>)
   deb14:	4650      	mov	r0, sl
   deb16:	f00a f9f9 	bl	e8f0c <strstr>
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
   deb1a:	b948      	cbnz	r0, deb30 <mbedtls_x509_crt_parse+0x3c>
        return mbedtls_x509_crt_parse_der( chain, buf, buflen );
   deb1c:	463a      	mov	r2, r7
   deb1e:	4651      	mov	r1, sl
   deb20:	4640      	mov	r0, r8
   deb22:	f7ff fcc1 	bl	de4a8 <mbedtls_x509_crt_parse_der>
   deb26:	4604      	mov	r4, r0
}
   deb28:	4620      	mov	r0, r4
   deb2a:	b009      	add	sp, #36	; 0x24
   deb2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ret = mbedtls_pem_read_buffer( &pem,
   deb30:	f8df b08c 	ldr.w	fp, [pc, #140]	; debc0 <mbedtls_x509_crt_parse+0xcc>
    int success = 0, first_error = 0, total_failed = 0;
   deb34:	4634      	mov	r4, r6
   deb36:	46b1      	mov	r9, r6
        while( buflen > 1 )
   deb38:	2f01      	cmp	r7, #1
   deb3a:	d935      	bls.n	deba8 <mbedtls_x509_crt_parse+0xb4>
            mbedtls_pem_init( &pem );
   deb3c:	a805      	add	r0, sp, #20
   deb3e:	f005 f9c9 	bl	e3ed4 <mbedtls_pem_init>
            ret = mbedtls_pem_read_buffer( &pem,
   deb42:	aa04      	add	r2, sp, #16
   deb44:	9202      	str	r2, [sp, #8]
   deb46:	2200      	movs	r2, #0
   deb48:	e9cd 2200 	strd	r2, r2, [sp]
   deb4c:	4653      	mov	r3, sl
   deb4e:	4a1d      	ldr	r2, [pc, #116]	; (debc4 <mbedtls_x509_crt_parse+0xd0>)
   deb50:	4659      	mov	r1, fp
   deb52:	a805      	add	r0, sp, #20
   deb54:	f005 f9c4 	bl	e3ee0 <mbedtls_pem_read_buffer>
            if( ret == 0 )
   deb58:	4605      	mov	r5, r0
   deb5a:	b978      	cbnz	r0, deb7c <mbedtls_x509_crt_parse+0x88>
                buflen -= use_len;
   deb5c:	9a04      	ldr	r2, [sp, #16]
            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
   deb5e:	4640      	mov	r0, r8
                buflen -= use_len;
   deb60:	1abf      	subs	r7, r7, r2
                buf += use_len;
   deb62:	4492      	add	sl, r2
            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
   deb64:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
   deb68:	f7ff fc9e 	bl	de4a8 <mbedtls_x509_crt_parse_der>
   deb6c:	4605      	mov	r5, r0
            mbedtls_pem_free( &pem );
   deb6e:	a805      	add	r0, sp, #20
   deb70:	f005 fa40 	bl	e3ff4 <mbedtls_pem_free>
            if( ret != 0 )
   deb74:	b99d      	cbnz	r5, deb9e <mbedtls_x509_crt_parse+0xaa>
            success = 1;
   deb76:	f04f 0901 	mov.w	r9, #1
   deb7a:	e7dd      	b.n	deb38 <mbedtls_x509_crt_parse+0x44>
            else if( ret == MBEDTLS_ERR_PEM_BAD_INPUT_DATA )
   deb7c:	f510 5fa4 	cmn.w	r0, #5248	; 0x1480
   deb80:	d010      	beq.n	deba4 <mbedtls_x509_crt_parse+0xb0>
            else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   deb82:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
   deb86:	d00f      	beq.n	deba8 <mbedtls_x509_crt_parse+0xb4>
                mbedtls_pem_free( &pem );
   deb88:	a805      	add	r0, sp, #20
   deb8a:	f005 fa33 	bl	e3ff4 <mbedtls_pem_free>
                buflen -= use_len;
   deb8e:	9a04      	ldr	r2, [sp, #16]
   deb90:	1abf      	subs	r7, r7, r2
                buf += use_len;
   deb92:	4492      	add	sl, r2
                if( first_error == 0 )
   deb94:	2c00      	cmp	r4, #0
   deb96:	bf08      	it	eq
   deb98:	462c      	moveq	r4, r5
                total_failed++;
   deb9a:	3601      	adds	r6, #1
                continue;
   deb9c:	e7cc      	b.n	deb38 <mbedtls_x509_crt_parse+0x44>
                if( ret == MBEDTLS_ERR_X509_ALLOC_FAILED )
   deb9e:	f515 5f22 	cmn.w	r5, #10368	; 0x2880
   deba2:	d1f7      	bne.n	deb94 <mbedtls_x509_crt_parse+0xa0>
   deba4:	462c      	mov	r4, r5
   deba6:	e7bf      	b.n	deb28 <mbedtls_x509_crt_parse+0x34>
    if( success )
   deba8:	f1b9 0f00 	cmp.w	r9, #0
   debac:	d106      	bne.n	debbc <mbedtls_x509_crt_parse+0xc8>
        return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
   debae:	4b06      	ldr	r3, [pc, #24]	; (debc8 <mbedtls_x509_crt_parse+0xd4>)
   debb0:	2c00      	cmp	r4, #0
   debb2:	bf08      	it	eq
   debb4:	461c      	moveq	r4, r3
   debb6:	e7b7      	b.n	deb28 <mbedtls_x509_crt_parse+0x34>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   debb8:	4c04      	ldr	r4, [pc, #16]	; (debcc <mbedtls_x509_crt_parse+0xd8>)
   debba:	e7b5      	b.n	deb28 <mbedtls_x509_crt_parse+0x34>
   debbc:	4634      	mov	r4, r6
   debbe:	e7b3      	b.n	deb28 <mbedtls_x509_crt_parse+0x34>
   debc0:	000ecf9d 	.word	0x000ecf9d
   debc4:	000ecfb9 	.word	0x000ecfb9
   debc8:	ffffd880 	.word	0xffffd880
   debcc:	ffffd800 	.word	0xffffd800

000debd0 <mbedtls_pk_init>:
 */
void mbedtls_pk_init( mbedtls_pk_context *ctx )
{
    PK_VALIDATE( ctx != NULL );

    ctx->pk_info = NULL;
   debd0:	2300      	movs	r3, #0
    ctx->pk_ctx = NULL;
   debd2:	e9c0 3300 	strd	r3, r3, [r0]
}
   debd6:	4770      	bx	lr

000debd8 <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
   debd8:	b510      	push	{r4, lr}
    if( ctx == NULL )
   debda:	4604      	mov	r4, r0
   debdc:	b150      	cbz	r0, debf4 <mbedtls_pk_free+0x1c>
        return;

    if ( ctx->pk_info != NULL )
   debde:	6803      	ldr	r3, [r0, #0]
   debe0:	b113      	cbz	r3, debe8 <mbedtls_pk_free+0x10>
        ctx->pk_info->ctx_free_func( ctx->pk_ctx );
   debe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   debe4:	6840      	ldr	r0, [r0, #4]
   debe6:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );
   debe8:	4620      	mov	r0, r4
   debea:	2108      	movs	r1, #8
}
   debec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );
   debf0:	f003 bfe8 	b.w	e2bc4 <mbedtls_platform_zeroize>
}
   debf4:	bd10      	pop	{r4, pc}
	...

000debf8 <mbedtls_pk_info_from_type>:
/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
    switch( pk_type ) {
   debf8:	3801      	subs	r0, #1
   debfa:	b2c0      	uxtb	r0, r0
   debfc:	2803      	cmp	r0, #3
   debfe:	bf9a      	itte	ls
   dec00:	4b02      	ldrls	r3, [pc, #8]	; (dec0c <mbedtls_pk_info_from_type+0x14>)
   dec02:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
{
   dec06:	2000      	movhi	r0, #0
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
    }
}
   dec08:	4770      	bx	lr
   dec0a:	bf00      	nop
   dec0c:	000ed004 	.word	0x000ed004

000dec10 <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
   dec10:	b570      	push	{r4, r5, r6, lr}
   dec12:	4605      	mov	r5, r0
    PK_VALIDATE_RET( ctx != NULL );
    if( info == NULL || ctx->pk_info != NULL )
   dec14:	460e      	mov	r6, r1
   dec16:	b141      	cbz	r1, dec2a <mbedtls_pk_setup+0x1a>
   dec18:	6804      	ldr	r4, [r0, #0]
   dec1a:	b934      	cbnz	r4, dec2a <mbedtls_pk_setup+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
   dec1c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   dec1e:	4798      	blx	r3
   dec20:	6068      	str	r0, [r5, #4]
   dec22:	b120      	cbz	r0, dec2e <mbedtls_pk_setup+0x1e>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );

    ctx->pk_info = info;
   dec24:	602e      	str	r6, [r5, #0]

    return( 0 );
   dec26:	4620      	mov	r0, r4
}
   dec28:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   dec2a:	4802      	ldr	r0, [pc, #8]	; (dec34 <mbedtls_pk_setup+0x24>)
   dec2c:	e7fc      	b.n	dec28 <mbedtls_pk_setup+0x18>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
   dec2e:	4802      	ldr	r0, [pc, #8]	; (dec38 <mbedtls_pk_setup+0x28>)
   dec30:	e7fa      	b.n	dec28 <mbedtls_pk_setup+0x18>
   dec32:	bf00      	nop
   dec34:	ffffc180 	.word	0xffffc180
   dec38:	ffffc080 	.word	0xffffc080

000dec3c <mbedtls_pk_can_do>:

/*
 * Tell if a PK can do the operations of the given type
 */
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
   dec3c:	4603      	mov	r3, r0
   dec3e:	4608      	mov	r0, r1
    /* A context with null pk_info is not set up yet and can't do anything.
     * For backward compatibility, also accept NULL instead of a context
     * pointer. */
    if( ctx == NULL || ctx->pk_info == NULL )
   dec40:	b11b      	cbz	r3, dec4a <mbedtls_pk_can_do+0xe>
   dec42:	681b      	ldr	r3, [r3, #0]
   dec44:	b10b      	cbz	r3, dec4a <mbedtls_pk_can_do+0xe>
        return( 0 );

    return( ctx->pk_info->can_do( type ) );
   dec46:	68db      	ldr	r3, [r3, #12]
   dec48:	4718      	bx	r3
}
   dec4a:	2000      	movs	r0, #0
   dec4c:	4770      	bx	lr
	...

000dec50 <mbedtls_pk_verify_restartable>:
int mbedtls_pk_verify_restartable( mbedtls_pk_context *ctx,
               mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len,
               mbedtls_pk_restart_ctx *rs_ctx )
{
   dec50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dec54:	4616      	mov	r6, r2
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL ||
   dec56:	6802      	ldr	r2, [r0, #0]
{
   dec58:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   dec5c:	4604      	mov	r4, r0
   dec5e:	460d      	mov	r5, r1
    if( ctx->pk_info == NULL ||
   dec60:	b912      	cbnz	r2, dec68 <mbedtls_pk_verify_restartable+0x18>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   dec62:	480d      	ldr	r0, [pc, #52]	; (dec98 <mbedtls_pk_verify_restartable+0x48>)
    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
}
   dec64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( *hash_len != 0 )
   dec68:	b93b      	cbnz	r3, dec7a <mbedtls_pk_verify_restartable+0x2a>
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
   dec6a:	4608      	mov	r0, r1
   dec6c:	f7fe f8fa 	bl	dce64 <mbedtls_md_info_from_type>
   dec70:	2800      	cmp	r0, #0
   dec72:	d0f6      	beq.n	dec62 <mbedtls_pk_verify_restartable+0x12>
    *hash_len = mbedtls_md_get_size( md_info );
   dec74:	f7fe fa30 	bl	dd0d8 <mbedtls_md_get_size>
   dec78:	4603      	mov	r3, r0
    if( ctx->pk_info->verify_func == NULL )
   dec7a:	6822      	ldr	r2, [r4, #0]
   dec7c:	6917      	ldr	r7, [r2, #16]
   dec7e:	b147      	cbz	r7, dec92 <mbedtls_pk_verify_restartable+0x42>
    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
   dec80:	e9cd 8908 	strd	r8, r9, [sp, #32]
   dec84:	6860      	ldr	r0, [r4, #4]
   dec86:	4632      	mov	r2, r6
   dec88:	4629      	mov	r1, r5
   dec8a:	46bc      	mov	ip, r7
}
   dec8c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
   dec90:	4760      	bx	ip
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
   dec92:	4802      	ldr	r0, [pc, #8]	; (dec9c <mbedtls_pk_verify_restartable+0x4c>)
   dec94:	e7e6      	b.n	dec64 <mbedtls_pk_verify_restartable+0x14>
   dec96:	bf00      	nop
   dec98:	ffffc180 	.word	0xffffc180
   dec9c:	ffffc100 	.word	0xffffc100

000deca0 <mbedtls_pk_verify>:
 * Verify a signature
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
   deca0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( mbedtls_pk_verify_restartable( ctx, md_alg, hash, hash_len,
   deca2:	2400      	movs	r4, #0
   deca4:	9402      	str	r4, [sp, #8]
   deca6:	9c07      	ldr	r4, [sp, #28]
   deca8:	9401      	str	r4, [sp, #4]
   decaa:	9c06      	ldr	r4, [sp, #24]
   decac:	9400      	str	r4, [sp, #0]
   decae:	f7ff ffcf 	bl	dec50 <mbedtls_pk_verify_restartable>
                                           sig, sig_len, NULL ) );
}
   decb2:	b004      	add	sp, #16
   decb4:	bd10      	pop	{r4, pc}
	...

000decb8 <mbedtls_pk_sign_restartable>:
             mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_pk_restart_ctx *rs_ctx )
{
   decb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   decbc:	4692      	mov	sl, r2
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL ||
   decbe:	6802      	ldr	r2, [r0, #0]
{
   decc0:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   decc4:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   decc8:	4604      	mov	r4, r0
   decca:	460d      	mov	r5, r1
    if( ctx->pk_info == NULL ||
   deccc:	b912      	cbnz	r2, decd4 <mbedtls_pk_sign_restartable+0x1c>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   decce:	480f      	ldr	r0, [pc, #60]	; (ded0c <mbedtls_pk_sign_restartable+0x54>)
    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
}
   decd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( *hash_len != 0 )
   decd4:	b93b      	cbnz	r3, dece6 <mbedtls_pk_sign_restartable+0x2e>
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
   decd6:	4608      	mov	r0, r1
   decd8:	f7fe f8c4 	bl	dce64 <mbedtls_md_info_from_type>
   decdc:	2800      	cmp	r0, #0
   decde:	d0f6      	beq.n	decce <mbedtls_pk_sign_restartable+0x16>
    *hash_len = mbedtls_md_get_size( md_info );
   dece0:	f7fe f9fa 	bl	dd0d8 <mbedtls_md_get_size>
   dece4:	4603      	mov	r3, r0
    if( ctx->pk_info->sign_func == NULL )
   dece6:	6822      	ldr	r2, [r4, #0]
   dece8:	f8d2 e014 	ldr.w	lr, [r2, #20]
   decec:	f1be 0f00 	cmp.w	lr, #0
   decf0:	d00a      	beq.n	ded08 <mbedtls_pk_sign_restartable+0x50>
    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
   decf2:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
   decf6:	e9cd 6708 	strd	r6, r7, [sp, #32]
   decfa:	6860      	ldr	r0, [r4, #4]
   decfc:	4652      	mov	r2, sl
   decfe:	4629      	mov	r1, r5
   ded00:	46f4      	mov	ip, lr
}
   ded02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
   ded06:	4760      	bx	ip
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
   ded08:	4801      	ldr	r0, [pc, #4]	; (ded10 <mbedtls_pk_sign_restartable+0x58>)
   ded0a:	e7e1      	b.n	decd0 <mbedtls_pk_sign_restartable+0x18>
   ded0c:	ffffc180 	.word	0xffffc180
   ded10:	ffffc100 	.word	0xffffc100

000ded14 <mbedtls_pk_encrypt>:
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
   ded14:	b410      	push	{r4}
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( input != NULL || ilen == 0 );
    PK_VALIDATE_RET( output != NULL || osize == 0 );
    PK_VALIDATE_RET( olen != NULL );

    if( ctx->pk_info == NULL )
   ded16:	6804      	ldr	r4, [r0, #0]
   ded18:	b134      	cbz	r4, ded28 <mbedtls_pk_encrypt+0x14>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->encrypt_func == NULL )
   ded1a:	69e4      	ldr	r4, [r4, #28]
   ded1c:	b144      	cbz	r4, ded30 <mbedtls_pk_encrypt+0x1c>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
   ded1e:	46a4      	mov	ip, r4
   ded20:	6840      	ldr	r0, [r0, #4]
                output, olen, osize, f_rng, p_rng ) );
}
   ded22:	f85d 4b04 	ldr.w	r4, [sp], #4
    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
   ded26:	4760      	bx	ip
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   ded28:	4802      	ldr	r0, [pc, #8]	; (ded34 <mbedtls_pk_encrypt+0x20>)
}
   ded2a:	f85d 4b04 	ldr.w	r4, [sp], #4
   ded2e:	4770      	bx	lr
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
   ded30:	4801      	ldr	r0, [pc, #4]	; (ded38 <mbedtls_pk_encrypt+0x24>)
   ded32:	e7fa      	b.n	ded2a <mbedtls_pk_encrypt+0x16>
   ded34:	ffffc180 	.word	0xffffc180
   ded38:	ffffc100 	.word	0xffffc100

000ded3c <mbedtls_pk_get_bitlen>:
 */
size_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )
{
    /* For backward compatibility, accept NULL or a context that
     * isn't set up yet, and return a fake value that should be safe. */
    if( ctx == NULL || ctx->pk_info == NULL )
   ded3c:	b120      	cbz	r0, ded48 <mbedtls_pk_get_bitlen+0xc>
   ded3e:	6803      	ldr	r3, [r0, #0]
   ded40:	b113      	cbz	r3, ded48 <mbedtls_pk_get_bitlen+0xc>
        return( 0 );

    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
   ded42:	689b      	ldr	r3, [r3, #8]
   ded44:	6840      	ldr	r0, [r0, #4]
   ded46:	4718      	bx	r3
}
   ded48:	2000      	movs	r0, #0
   ded4a:	4770      	bx	lr

000ded4c <mbedtls_pk_verify_ext>:
{
   ded4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ded50:	461e      	mov	r6, r3
    if( ctx->pk_info == NULL )
   ded52:	6813      	ldr	r3, [r2, #0]
{
   ded54:	b087      	sub	sp, #28
   ded56:	e9dd 9b10 	ldrd	r9, fp, [sp, #64]	; 0x40
   ded5a:	e9dd a812 	ldrd	sl, r8, [sp, #72]	; 0x48
   ded5e:	4607      	mov	r7, r0
   ded60:	460c      	mov	r4, r1
   ded62:	4615      	mov	r5, r2
    if( ctx->pk_info == NULL )
   ded64:	b923      	cbnz	r3, ded70 <mbedtls_pk_verify_ext+0x24>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
   ded66:	4c21      	ldr	r4, [pc, #132]	; (dedec <mbedtls_pk_verify_ext+0xa0>)
}
   ded68:	4620      	mov	r0, r4
   ded6a:	b007      	add	sp, #28
   ded6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ! mbedtls_pk_can_do( ctx, type ) )
   ded70:	4601      	mov	r1, r0
   ded72:	4610      	mov	r0, r2
   ded74:	f7ff ff62 	bl	dec3c <mbedtls_pk_can_do>
   ded78:	b398      	cbz	r0, dede2 <mbedtls_pk_verify_ext+0x96>
    if( type == MBEDTLS_PK_RSASSA_PSS )
   ded7a:	2f06      	cmp	r7, #6
   ded7c:	d124      	bne.n	dedc8 <mbedtls_pk_verify_ext+0x7c>
        if( options == NULL )
   ded7e:	2c00      	cmp	r4, #0
   ded80:	d0f1      	beq.n	ded66 <mbedtls_pk_verify_ext+0x1a>
 *
 * \return          Key length in bytes, or 0 on error
 */
static inline size_t mbedtls_pk_get_len( const mbedtls_pk_context *ctx )
{
    return( ( mbedtls_pk_get_bitlen( ctx ) + 7 ) / 8 );
   ded82:	4628      	mov	r0, r5
   ded84:	f7ff ffda 	bl	ded3c <mbedtls_pk_get_bitlen>
   ded88:	3007      	adds	r0, #7
        if( sig_len < mbedtls_pk_get_len( ctx ) )
   ded8a:	ebb8 0fd0 	cmp.w	r8, r0, lsr #3
   ded8e:	d32a      	bcc.n	dede6 <mbedtls_pk_verify_ext+0x9a>
        ret = mbedtls_rsa_rsassa_pss_verify_ext( mbedtls_pk_rsa( *ctx ),
   ded90:	f8cd a014 	str.w	sl, [sp, #20]
   ded94:	6863      	ldr	r3, [r4, #4]
   ded96:	9304      	str	r3, [sp, #16]
   ded98:	7823      	ldrb	r3, [r4, #0]
   ded9a:	6868      	ldr	r0, [r5, #4]
   ded9c:	e9cd 9302 	strd	r9, r3, [sp, #8]
   deda0:	2300      	movs	r3, #0
   deda2:	e9cd 6b00 	strd	r6, fp, [sp]
   deda6:	461a      	mov	r2, r3
   deda8:	4619      	mov	r1, r3
   dedaa:	f7f9 fa8b 	bl	d82c4 <mbedtls_rsa_rsassa_pss_verify_ext>
        if( ret != 0 )
   dedae:	4604      	mov	r4, r0
   dedb0:	2800      	cmp	r0, #0
   dedb2:	d1d9      	bne.n	ded68 <mbedtls_pk_verify_ext+0x1c>
   dedb4:	4628      	mov	r0, r5
   dedb6:	f7ff ffc1 	bl	ded3c <mbedtls_pk_get_bitlen>
            return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
   dedba:	4b0d      	ldr	r3, [pc, #52]	; (dedf0 <mbedtls_pk_verify_ext+0xa4>)
   dedbc:	3007      	adds	r0, #7
   dedbe:	ebb8 0fd0 	cmp.w	r8, r0, lsr #3
   dedc2:	bf88      	it	hi
   dedc4:	461c      	movhi	r4, r3
   dedc6:	e7cf      	b.n	ded68 <mbedtls_pk_verify_ext+0x1c>
    if( options != NULL )
   dedc8:	2c00      	cmp	r4, #0
   dedca:	d1cc      	bne.n	ded66 <mbedtls_pk_verify_ext+0x1a>
    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
   dedcc:	465b      	mov	r3, fp
   dedce:	464a      	mov	r2, r9
   dedd0:	4631      	mov	r1, r6
   dedd2:	4628      	mov	r0, r5
   dedd4:	e9cd a810 	strd	sl, r8, [sp, #64]	; 0x40
}
   dedd8:	b007      	add	sp, #28
   dedda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
   dedde:	f7ff bf5f 	b.w	deca0 <mbedtls_pk_verify>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
   dede2:	4c04      	ldr	r4, [pc, #16]	; (dedf4 <mbedtls_pk_verify_ext+0xa8>)
   dede4:	e7c0      	b.n	ded68 <mbedtls_pk_verify_ext+0x1c>
            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
   dede6:	4c04      	ldr	r4, [pc, #16]	; (dedf8 <mbedtls_pk_verify_ext+0xac>)
   dede8:	e7be      	b.n	ded68 <mbedtls_pk_verify_ext+0x1c>
   dedea:	bf00      	nop
   dedec:	ffffc180 	.word	0xffffc180
   dedf0:	ffffc700 	.word	0xffffc700
   dedf4:	ffffc100 	.word	0xffffc100
   dedf8:	ffffbc80 	.word	0xffffbc80

000dedfc <mbedtls_pk_get_name>:
/*
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
   dedfc:	b118      	cbz	r0, dee06 <mbedtls_pk_get_name+0xa>
   dedfe:	6803      	ldr	r3, [r0, #0]
   dee00:	b10b      	cbz	r3, dee06 <mbedtls_pk_get_name+0xa>
        return( "invalid PK" );

    return( ctx->pk_info->name );
   dee02:	6858      	ldr	r0, [r3, #4]
   dee04:	4770      	bx	lr
        return( "invalid PK" );
   dee06:	4801      	ldr	r0, [pc, #4]	; (dee0c <mbedtls_pk_get_name+0x10>)
}
   dee08:	4770      	bx	lr
   dee0a:	bf00      	nop
   dee0c:	000ecff8 	.word	0x000ecff8

000dee10 <mbedtls_pk_get_type>:
/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
   dee10:	b110      	cbz	r0, dee18 <mbedtls_pk_get_type+0x8>
   dee12:	6800      	ldr	r0, [r0, #0]
   dee14:	b100      	cbz	r0, dee18 <mbedtls_pk_get_type+0x8>
        return( MBEDTLS_PK_NONE );

    return( ctx->pk_info->type );
   dee16:	7800      	ldrb	r0, [r0, #0]
}
   dee18:	4770      	bx	lr

000dee1a <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>:
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
    if( ssl->f_set_timer == NULL )
   dee1a:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   dee1c:	460a      	mov	r2, r1
    if( ssl->f_set_timer == NULL )
   dee1e:	b113      	cbz	r3, dee26 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm+0xc>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "set_timer to %d ms", (int) millisecs ) );
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
   dee20:	6c40      	ldr	r0, [r0, #68]	; 0x44
   dee22:	0889      	lsrs	r1, r1, #2
   dee24:	4718      	bx	r3
}
   dee26:	4770      	bx	lr

000dee28 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>:
        ssl->out_iv  = ssl->out_hdr + 13;
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_hdr - 8;
   dee28:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
   dee2c:	f1a3 0208 	sub.w	r2, r3, #8
   dee30:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
        ssl->out_len = ssl->out_hdr + 3;
   dee34:	1cda      	adds	r2, r3, #3
        ssl->out_iv  = ssl->out_hdr + 5;
   dee36:	3305      	adds	r3, #5
        ssl->out_len = ssl->out_hdr + 3;
   dee38:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
        ssl->out_iv  = ssl->out_hdr + 5;
   dee3c:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    }

    /* Adjust out_msg to make space for explicit IV, if used. */
    if( transform != NULL &&
   dee40:	b131      	cbz	r1, dee50 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform+0x28>
   dee42:	68c2      	ldr	r2, [r0, #12]
   dee44:	2a01      	cmp	r2, #1
        ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->out_msg = ssl->out_iv + transform->ivlen - transform->fixed_ivlen;
   dee46:	bfc2      	ittt	gt
   dee48:	e9d1 2103 	ldrdgt	r2, r1, [r1, #12]
   dee4c:	1a52      	subgt	r2, r2, r1
   dee4e:	189b      	addgt	r3, r3, r2
   dee50:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    }
    else
        ssl->out_msg = ssl->out_iv;
}
   dee54:	4770      	bx	lr
	...

000dee58 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi>:
{
   dee58:	b5f0      	push	{r4, r5, r6, r7, lr}
    mbedtls_ssl_session *session = ssl->session_negotiate;
   dee5a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
{
   dee5c:	b0ab      	sub	sp, #172	; 0xac
   dee5e:	4604      	mov	r4, r0
   dee60:	460e      	mov	r6, r1
   dee62:	4617      	mov	r7, r2
    if( !session )
   dee64:	b905      	cbnz	r5, dee68 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
   dee66:	6a85      	ldr	r5, [r0, #40]	; 0x28
    mbedtls_sha256_init( &sha256 );
   dee68:	a80f      	add	r0, sp, #60	; 0x3c
   dee6a:	f7f6 fb69 	bl	d5540 <mbedtls_sha256_init>
    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
   dee6e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   dee70:	a80f      	add	r0, sp, #60	; 0x3c
   dee72:	f501 71ac 	add.w	r1, r1, #344	; 0x158
   dee76:	f7f6 fb6c 	bl	d5552 <mbedtls_sha256_clone>
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
   dee7a:	4b10      	ldr	r3, [pc, #64]	; (deebc <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x64>)
   dee7c:	4a10      	ldr	r2, [pc, #64]	; (deec0 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x68>)
    mbedtls_sha256_finish_ret( &sha256, padbuf );
   dee7e:	a907      	add	r1, sp, #28
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
   dee80:	2f00      	cmp	r7, #0
   dee82:	bf08      	it	eq
   dee84:	461a      	moveq	r2, r3
    mbedtls_sha256_finish_ret( &sha256, padbuf );
   dee86:	a80f      	add	r0, sp, #60	; 0x3c
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
   dee88:	9205      	str	r2, [sp, #20]
    mbedtls_sha256_finish_ret( &sha256, padbuf );
   dee8a:	f7f6 ff54 	bl	d5d36 <mbedtls_sha256_finish_ret>
    ssl->handshake->tls_prf( session->master, 48, sender,
   dee8e:	210c      	movs	r1, #12
   dee90:	6b23      	ldr	r3, [r4, #48]	; 0x30
   dee92:	9a05      	ldr	r2, [sp, #20]
   dee94:	e9cd 6101 	strd	r6, r1, [sp, #4]
   dee98:	2420      	movs	r4, #32
   dee9a:	9400      	str	r4, [sp, #0]
   dee9c:	f8d3 62ac 	ldr.w	r6, [r3, #684]	; 0x2ac
   deea0:	2130      	movs	r1, #48	; 0x30
   deea2:	ab07      	add	r3, sp, #28
   deea4:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   deea8:	47b0      	blx	r6
    mbedtls_sha256_free( &sha256 );
   deeaa:	a80f      	add	r0, sp, #60	; 0x3c
   deeac:	f7f6 fb4c 	bl	d5548 <mbedtls_sha256_free>
    mbedtls_platform_zeroize(  padbuf, sizeof(  padbuf ) );
   deeb0:	4621      	mov	r1, r4
   deeb2:	a807      	add	r0, sp, #28
   deeb4:	f003 fe86 	bl	e2bc4 <mbedtls_platform_zeroize>
}
   deeb8:	b02b      	add	sp, #172	; 0xac
   deeba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   deebc:	000ed014 	.word	0x000ed014
   deec0:	000ed024 	.word	0x000ed024

000deec4 <_ZL26ssl_calc_verify_tls_sha256P19mbedtls_ssl_contextPh>:
{
   deec4:	b530      	push	{r4, r5, lr}
   deec6:	4605      	mov	r5, r0
   deec8:	b09d      	sub	sp, #116	; 0x74
    mbedtls_sha256_init( &sha256 );
   deeca:	a801      	add	r0, sp, #4
{
   deecc:	460c      	mov	r4, r1
    mbedtls_sha256_init( &sha256 );
   deece:	f7f6 fb37 	bl	d5540 <mbedtls_sha256_init>
    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
   deed2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   deed4:	a801      	add	r0, sp, #4
   deed6:	f501 71ac 	add.w	r1, r1, #344	; 0x158
   deeda:	f7f6 fb3a 	bl	d5552 <mbedtls_sha256_clone>
    mbedtls_sha256_finish_ret( &sha256, hash );
   deede:	4621      	mov	r1, r4
   deee0:	a801      	add	r0, sp, #4
   deee2:	f7f6 ff28 	bl	d5d36 <mbedtls_sha256_finish_ret>
    mbedtls_sha256_free( &sha256 );
   deee6:	a801      	add	r0, sp, #4
   deee8:	f7f6 fb2e 	bl	d5548 <mbedtls_sha256_free>
}
   deeec:	b01d      	add	sp, #116	; 0x74
   deeee:	bd30      	pop	{r4, r5, pc}

000deef0 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>:
{
   deef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   deef4:	ed2d 8b02 	vpush	{d8}
   deef8:	b0b5      	sub	sp, #212	; 0xd4
   deefa:	4604      	mov	r4, r0
    mbedtls_md_init( &md_ctx );
   deefc:	a801      	add	r0, sp, #4
{
   deefe:	ee08 1a10 	vmov	s16, r1
   def02:	4692      	mov	sl, r2
   def04:	4699      	mov	r9, r3
   def06:	9e43      	ldr	r6, [sp, #268]	; 0x10c
    mbedtls_md_init( &md_ctx );
   def08:	f7fd ffb8 	bl	dce7c <mbedtls_md_init>
    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
   def0c:	4620      	mov	r0, r4
   def0e:	f7fd ffa9 	bl	dce64 <mbedtls_md_info_from_type>
   def12:	4607      	mov	r7, r0
   def14:	2800      	cmp	r0, #0
   def16:	d078      	beq.n	df00a <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x11a>
    md_len = mbedtls_md_get_size( md_info );
   def18:	f7fe f8de 	bl	dd0d8 <mbedtls_md_get_size>
   def1c:	4604      	mov	r4, r0
    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
   def1e:	4648      	mov	r0, r9
   def20:	f009 ffda 	bl	e8ed8 <strlen>
   def24:	9b41      	ldr	r3, [sp, #260]	; 0x104
   def26:	eb00 0804 	add.w	r8, r0, r4
   def2a:	eb08 0203 	add.w	r2, r8, r3
   def2e:	2a80      	cmp	r2, #128	; 0x80
   def30:	4605      	mov	r5, r0
   def32:	d86c      	bhi.n	df00e <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x11e>
    memcpy( tmp + md_len, label, nb );
   def34:	ab14      	add	r3, sp, #80	; 0x50
   def36:	eb03 0b04 	add.w	fp, r3, r4
   def3a:	4602      	mov	r2, r0
   def3c:	4649      	mov	r1, r9
   def3e:	4658      	mov	r0, fp
   def40:	f009 ff54 	bl	e8dec <memcpy>
    memcpy( tmp + md_len + nb, random, rlen );
   def44:	ab14      	add	r3, sp, #80	; 0x50
   def46:	e9dd 1240 	ldrd	r1, r2, [sp, #256]	; 0x100
   def4a:	eb03 0008 	add.w	r0, r3, r8
   def4e:	f009 ff4d 	bl	e8dec <memcpy>
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
   def52:	4639      	mov	r1, r7
   def54:	2201      	movs	r2, #1
   def56:	a801      	add	r0, sp, #4
   def58:	f7fd ffb0 	bl	dcebc <mbedtls_md_setup>
   def5c:	4607      	mov	r7, r0
   def5e:	2800      	cmp	r0, #0
   def60:	d14d      	bne.n	deffe <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10e>
    nb += rlen;
   def62:	9b41      	ldr	r3, [sp, #260]	; 0x104
    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
   def64:	ee18 1a10 	vmov	r1, s16
    nb += rlen;
   def68:	441d      	add	r5, r3
    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
   def6a:	4652      	mov	r2, sl
   def6c:	a801      	add	r0, sp, #4
   def6e:	f7fd fff3 	bl	dcf58 <mbedtls_md_hmac_starts>
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
   def72:	462a      	mov	r2, r5
   def74:	4659      	mov	r1, fp
   def76:	a801      	add	r0, sp, #4
   def78:	f7fe f854 	bl	dd024 <mbedtls_md_hmac_update>
    mbedtls_md_hmac_finish( &md_ctx, tmp );
   def7c:	a914      	add	r1, sp, #80	; 0x50
   def7e:	a801      	add	r0, sp, #4
   def80:	f7fe f862 	bl	dd048 <mbedtls_md_hmac_finish>
   def84:	46b9      	mov	r9, r7
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
   def86:	4425      	add	r5, r4
    for( i = 0; i < dlen; i += md_len )
   def88:	454e      	cmp	r6, r9
    mbedtls_md_free( &md_ctx );
   def8a:	a801      	add	r0, sp, #4
    for( i = 0; i < dlen; i += md_len )
   def8c:	d92d      	bls.n	defea <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xfa>
        mbedtls_md_hmac_reset ( &md_ctx );
   def8e:	f7fe f88b 	bl	dd0a8 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
   def92:	462a      	mov	r2, r5
   def94:	a914      	add	r1, sp, #80	; 0x50
   def96:	a801      	add	r0, sp, #4
   def98:	f7fe f844 	bl	dd024 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, h_i );
   def9c:	a904      	add	r1, sp, #16
   def9e:	a801      	add	r0, sp, #4
   defa0:	f7fe f852 	bl	dd048 <mbedtls_md_hmac_finish>
        mbedtls_md_hmac_reset ( &md_ctx );
   defa4:	a801      	add	r0, sp, #4
   defa6:	f7fe f87f 	bl	dd0a8 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
   defaa:	4622      	mov	r2, r4
   defac:	a914      	add	r1, sp, #80	; 0x50
   defae:	a801      	add	r0, sp, #4
   defb0:	f7fe f838 	bl	dd024 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, tmp );
   defb4:	a914      	add	r1, sp, #80	; 0x50
   defb6:	a801      	add	r0, sp, #4
   defb8:	f7fe f846 	bl	dd048 <mbedtls_md_hmac_finish>
        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
   defbc:	eb04 0109 	add.w	r1, r4, r9
   defc0:	9842      	ldr	r0, [sp, #264]	; 0x108
   defc2:	428e      	cmp	r6, r1
   defc4:	bf2c      	ite	cs
   defc6:	4623      	movcs	r3, r4
   defc8:	fbb6 f3f4 	udivcc	r3, r6, r4
   defcc:	4481      	add	r9, r0
   defce:	bf38      	it	cc
   defd0:	fb04 6313 	mlscc	r3, r4, r3, r6
        for( j = 0; j < k; j++ )
   defd4:	aa04      	add	r2, sp, #16
   defd6:	444b      	add	r3, r9
   defd8:	4599      	cmp	r9, r3
   defda:	d004      	beq.n	defe6 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xf6>
            dstbuf[i + j]  = h_i[j];
   defdc:	f812 0b01 	ldrb.w	r0, [r2], #1
   defe0:	f809 0b01 	strb.w	r0, [r9], #1
        for( j = 0; j < k; j++ )
   defe4:	e7f8      	b.n	defd8 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xe8>
   defe6:	4689      	mov	r9, r1
   defe8:	e7ce      	b.n	def88 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x98>
    mbedtls_md_free( &md_ctx );
   defea:	f7fd ff4c 	bl	dce86 <mbedtls_md_free>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
   defee:	2180      	movs	r1, #128	; 0x80
   deff0:	a814      	add	r0, sp, #80	; 0x50
   deff2:	f003 fde7 	bl	e2bc4 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( h_i, sizeof( h_i ) );
   deff6:	2140      	movs	r1, #64	; 0x40
   deff8:	a804      	add	r0, sp, #16
   deffa:	f003 fde3 	bl	e2bc4 <mbedtls_platform_zeroize>
}
   deffe:	4638      	mov	r0, r7
   df000:	b035      	add	sp, #212	; 0xd4
   df002:	ecbd 8b02 	vpop	{d8}
   df006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   df00a:	4f02      	ldr	r7, [pc, #8]	; (df014 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x124>)
   df00c:	e7f7      	b.n	deffe <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10e>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   df00e:	4f02      	ldr	r7, [pc, #8]	; (df018 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x128>)
   df010:	e7f5      	b.n	deffe <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10e>
   df012:	bf00      	nop
   df014:	ffff9400 	.word	0xffff9400
   df018:	ffff8f00 	.word	0xffff8f00

000df01c <_ZL14tls_prf_sha256PKhjPKcS0_jPhj>:
{
   df01c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
   df01e:	9c08      	ldr	r4, [sp, #32]
   df020:	9403      	str	r4, [sp, #12]
   df022:	9c07      	ldr	r4, [sp, #28]
   df024:	9402      	str	r4, [sp, #8]
   df026:	9c06      	ldr	r4, [sp, #24]
   df028:	e9cd 3400 	strd	r3, r4, [sp]
   df02c:	4613      	mov	r3, r2
   df02e:	460a      	mov	r2, r1
   df030:	4601      	mov	r1, r0
   df032:	2006      	movs	r0, #6
   df034:	f7ff ff5c 	bl	deef0 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
   df038:	b004      	add	sp, #16
   df03a:	bd10      	pop	{r4, pc}

000df03c <_ZL14tls_prf_sha384PKhjPKcS0_jPhj>:
{
   df03c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA384, secret, slen,
   df03e:	9c08      	ldr	r4, [sp, #32]
   df040:	9403      	str	r4, [sp, #12]
   df042:	9c07      	ldr	r4, [sp, #28]
   df044:	9402      	str	r4, [sp, #8]
   df046:	9c06      	ldr	r4, [sp, #24]
   df048:	e9cd 3400 	strd	r3, r4, [sp]
   df04c:	4613      	mov	r3, r2
   df04e:	460a      	mov	r2, r1
   df050:	4601      	mov	r1, r0
   df052:	2007      	movs	r0, #7
   df054:	f7ff ff4c 	bl	deef0 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
   df058:	b004      	add	sp, #16
   df05a:	bd10      	pop	{r4, pc}

000df05c <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi>:
{
   df05c:	b5f0      	push	{r4, r5, r6, r7, lr}
    mbedtls_ssl_session *session = ssl->session_negotiate;
   df05e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
{
   df060:	b0c9      	sub	sp, #292	; 0x124
   df062:	4604      	mov	r4, r0
   df064:	460e      	mov	r6, r1
   df066:	4617      	mov	r7, r2
    if( !session )
   df068:	b905      	cbnz	r5, df06c <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
   df06a:	6a85      	ldr	r5, [r0, #40]	; 0x28
    mbedtls_sha512_init( &sha512 );
   df06c:	a812      	add	r0, sp, #72	; 0x48
   df06e:	f003 ff91 	bl	e2f94 <mbedtls_sha512_init>
    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
   df072:	6b21      	ldr	r1, [r4, #48]	; 0x30
   df074:	a812      	add	r0, sp, #72	; 0x48
   df076:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
   df07a:	f003 ff94 	bl	e2fa6 <mbedtls_sha512_clone>
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
   df07e:	4b10      	ldr	r3, [pc, #64]	; (df0c0 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x64>)
   df080:	4a10      	ldr	r2, [pc, #64]	; (df0c4 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x68>)
    mbedtls_sha512_finish_ret( &sha512, padbuf );
   df082:	a906      	add	r1, sp, #24
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
   df084:	2f00      	cmp	r7, #0
   df086:	bf08      	it	eq
   df088:	461a      	moveq	r2, r3
    mbedtls_sha512_finish_ret( &sha512, padbuf );
   df08a:	a812      	add	r0, sp, #72	; 0x48
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
   df08c:	9205      	str	r2, [sp, #20]
    mbedtls_sha512_finish_ret( &sha512, padbuf );
   df08e:	f004 fde4 	bl	e3c5a <mbedtls_sha512_finish_ret>
    ssl->handshake->tls_prf( session->master, 48, sender,
   df092:	210c      	movs	r1, #12
   df094:	6b23      	ldr	r3, [r4, #48]	; 0x30
   df096:	9a05      	ldr	r2, [sp, #20]
   df098:	e9cd 6101 	strd	r6, r1, [sp, #4]
   df09c:	2130      	movs	r1, #48	; 0x30
   df09e:	9100      	str	r1, [sp, #0]
   df0a0:	f8d3 42ac 	ldr.w	r4, [r3, #684]	; 0x2ac
   df0a4:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   df0a8:	ab06      	add	r3, sp, #24
   df0aa:	47a0      	blx	r4
    mbedtls_sha512_free( &sha512 );
   df0ac:	a812      	add	r0, sp, #72	; 0x48
   df0ae:	f003 ff75 	bl	e2f9c <mbedtls_sha512_free>
    mbedtls_platform_zeroize(  padbuf, sizeof( padbuf ) );
   df0b2:	2130      	movs	r1, #48	; 0x30
   df0b4:	a806      	add	r0, sp, #24
   df0b6:	f003 fd85 	bl	e2bc4 <mbedtls_platform_zeroize>
}
   df0ba:	b049      	add	sp, #292	; 0x124
   df0bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   df0be:	bf00      	nop
   df0c0:	000ed014 	.word	0x000ed014
   df0c4:	000ed024 	.word	0x000ed024

000df0c8 <_ZL26ssl_calc_verify_tls_sha384P19mbedtls_ssl_contextPh>:
{
   df0c8:	b530      	push	{r4, r5, lr}
   df0ca:	4605      	mov	r5, r0
   df0cc:	b0b7      	sub	sp, #220	; 0xdc
    mbedtls_sha512_init( &sha512 );
   df0ce:	4668      	mov	r0, sp
{
   df0d0:	460c      	mov	r4, r1
    mbedtls_sha512_init( &sha512 );
   df0d2:	f003 ff5f 	bl	e2f94 <mbedtls_sha512_init>
    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
   df0d6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   df0d8:	4668      	mov	r0, sp
   df0da:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
   df0de:	f003 ff62 	bl	e2fa6 <mbedtls_sha512_clone>
    mbedtls_sha512_finish_ret( &sha512, hash );
   df0e2:	4621      	mov	r1, r4
   df0e4:	4668      	mov	r0, sp
   df0e6:	f004 fdb8 	bl	e3c5a <mbedtls_sha512_finish_ret>
    mbedtls_sha512_free( &sha512 );
   df0ea:	4668      	mov	r0, sp
   df0ec:	f003 ff56 	bl	e2f9c <mbedtls_sha512_free>
}
   df0f0:	b037      	add	sp, #220	; 0xdc
   df0f2:	bd30      	pop	{r4, r5, pc}

000df0f4 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context>:

/* Append a new keycert entry to a (possibly empty) list */
static int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
   df0f4:	b570      	push	{r4, r5, r6, lr}
   df0f6:	4604      	mov	r4, r0
   df0f8:	460e      	mov	r6, r1
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
   df0fa:	2001      	movs	r0, #1
   df0fc:	210c      	movs	r1, #12
{
   df0fe:	4615      	mov	r5, r2
    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
   df100:	f009 fdfc 	bl	e8cfc <calloc>
    if( new_cert == NULL )
   df104:	b170      	cbz	r0, df124 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x30>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new_cert->cert = cert;
    new_cert->key  = key;
    new_cert->next = NULL;
   df106:	2300      	movs	r3, #0
   df108:	6083      	str	r3, [r0, #8]

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
   df10a:	6823      	ldr	r3, [r4, #0]
    new_cert->key  = key;
   df10c:	e9c0 6500 	strd	r6, r5, [r0]
    if( *head == NULL )
   df110:	b913      	cbnz	r3, df118 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x24>
    {
        *head = new_cert;
   df112:	6020      	str	r0, [r4, #0]
        while( cur->next != NULL )
            cur = cur->next;
        cur->next = new_cert;
    }

    return( 0 );
   df114:	4618      	mov	r0, r3
}
   df116:	bd70      	pop	{r4, r5, r6, pc}
        while( cur->next != NULL )
   df118:	461a      	mov	r2, r3
   df11a:	689b      	ldr	r3, [r3, #8]
   df11c:	2b00      	cmp	r3, #0
   df11e:	d1fb      	bne.n	df118 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x24>
        cur->next = new_cert;
   df120:	6090      	str	r0, [r2, #8]
   df122:	e7f7      	b.n	df114 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x20>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   df124:	4800      	ldr	r0, [pc, #0]	; (df128 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x34>)
   df126:	e7f6      	b.n	df116 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x22>
   df128:	ffff8100 	.word	0xffff8100

000df12c <_ZL26ssl_update_checksum_sha256P19mbedtls_ssl_contextPKhj>:
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
   df12c:	6b00      	ldr	r0, [r0, #48]	; 0x30
   df12e:	f500 70ac 	add.w	r0, r0, #344	; 0x158
   df132:	f7f6 bdc3 	b.w	d5cbc <mbedtls_sha256_update_ret>

000df136 <_ZL26ssl_update_checksum_sha384P19mbedtls_ssl_contextPKhj>:
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
   df136:	6b00      	ldr	r0, [r0, #48]	; 0x30
   df138:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
   df13c:	f004 bd3a 	b.w	e3bb4 <mbedtls_sha512_update_ret>

000df140 <_ZL25ssl_update_checksum_startP19mbedtls_ssl_contextPKhj>:
{
   df140:	b570      	push	{r4, r5, r6, lr}
   df142:	4604      	mov	r4, r0
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
   df144:	6b00      	ldr	r0, [r0, #48]	; 0x30
   df146:	f500 70ac 	add.w	r0, r0, #344	; 0x158
{
   df14a:	460d      	mov	r5, r1
   df14c:	4616      	mov	r6, r2
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
   df14e:	f7f6 fdb5 	bl	d5cbc <mbedtls_sha256_update_ret>
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
   df152:	6b20      	ldr	r0, [r4, #48]	; 0x30
   df154:	4632      	mov	r2, r6
   df156:	4629      	mov	r1, r5
   df158:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
}
   df15c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
   df160:	f004 bd28 	b.w	e3bb4 <mbedtls_sha512_update_ret>

000df164 <_ZL25ssl_reset_in_out_pointersP19mbedtls_ssl_context>:
        ssl->out_hdr = ssl->out_buf + 8;
   df164:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
   df168:	3308      	adds	r3, #8
   df16a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
        ssl->in_hdr  = ssl->in_buf  + 8;
   df16e:	6d03      	ldr	r3, [r0, #80]	; 0x50
   df170:	3308      	adds	r3, #8
   df172:	6583      	str	r3, [r0, #88]	; 0x58
{
   df174:	b510      	push	{r4, lr}
    ssl_update_out_pointers( ssl, NULL /* no transform enabled */ );
   df176:	2100      	movs	r1, #0
   df178:	f7ff fe56 	bl	dee28 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>
        ssl->in_ctr = ssl->in_hdr - 8;
   df17c:	6d83      	ldr	r3, [r0, #88]	; 0x58
   df17e:	f1a3 0208 	sub.w	r2, r3, #8
   df182:	6542      	str	r2, [r0, #84]	; 0x54
        ssl->in_len = ssl->in_hdr + 3;
   df184:	1cda      	adds	r2, r3, #3
        ssl->in_iv  = ssl->in_hdr + 5;
   df186:	3305      	adds	r3, #5
        ssl->in_msg = ssl->in_iv;
   df188:	e9c0 3318 	strd	r3, r3, [r0, #96]	; 0x60
        ssl->in_len = ssl->in_hdr + 3;
   df18c:	65c2      	str	r2, [r0, #92]	; 0x5c
}
   df18e:	bd10      	pop	{r4, pc}

000df190 <mbedtls_ssl_derive_keys>:
{
   df190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
   df194:	6c04      	ldr	r4, [r0, #64]	; 0x40
    mbedtls_ssl_session *session = ssl->session_negotiate;
   df196:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
   df198:	6823      	ldr	r3, [r4, #0]
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
   df19a:	6b05      	ldr	r5, [r0, #48]	; 0x30
{
   df19c:	b0d7      	sub	sp, #348	; 0x15c
   df19e:	4680      	mov	r8, r0
    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
   df1a0:	7a18      	ldrb	r0, [r3, #8]
   df1a2:	f7f7 f835 	bl	d6210 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
   df1a6:	4606      	mov	r6, r0
   df1a8:	b920      	cbnz	r0, df1b4 <mbedtls_ssl_derive_keys+0x24>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   df1aa:	4aac      	ldr	r2, [pc, #688]	; (df45c <mbedtls_ssl_derive_keys+0x2cc>)
}
   df1ac:	4610      	mov	r0, r2
   df1ae:	b057      	add	sp, #348	; 0x15c
   df1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
   df1b4:	6823      	ldr	r3, [r4, #0]
   df1b6:	7a58      	ldrb	r0, [r3, #9]
   df1b8:	f7fd fe54 	bl	dce64 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   df1bc:	4681      	mov	r9, r0
   df1be:	2800      	cmp	r0, #0
   df1c0:	d0f3      	beq.n	df1aa <mbedtls_ssl_derive_keys+0x1a>
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
   df1c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   df1c6:	2b03      	cmp	r3, #3
   df1c8:	d001      	beq.n	df1ce <mbedtls_ssl_derive_keys+0x3e>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   df1ca:	4aa5      	ldr	r2, [pc, #660]	; (df460 <mbedtls_ssl_derive_keys+0x2d0>)
   df1cc:	e7ee      	b.n	df1ac <mbedtls_ssl_derive_keys+0x1c>
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
   df1ce:	6823      	ldr	r3, [r4, #0]
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
   df1d0:	7a5b      	ldrb	r3, [r3, #9]
   df1d2:	2b07      	cmp	r3, #7
   df1d4:	f040 810a 	bne.w	df3ec <mbedtls_ssl_derive_keys+0x25c>
        handshake->tls_prf = tls_prf_sha384;
   df1d8:	4ba2      	ldr	r3, [pc, #648]	; (df464 <mbedtls_ssl_derive_keys+0x2d4>)
   df1da:	f8c5 32ac 	str.w	r3, [r5, #684]	; 0x2ac
        handshake->calc_verify = ssl_calc_verify_tls_sha384;
   df1de:	4ba2      	ldr	r3, [pc, #648]	; (df468 <mbedtls_ssl_derive_keys+0x2d8>)
   df1e0:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        handshake->calc_finished = ssl_calc_finished_tls_sha384;
   df1e4:	4ba1      	ldr	r3, [pc, #644]	; (df46c <mbedtls_ssl_derive_keys+0x2dc>)
    if( handshake->resume == 0 )
   df1e6:	f8d5 2348 	ldr.w	r2, [r5, #840]	; 0x348
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
   df1ea:	f8c5 32a8 	str.w	r3, [r5, #680]	; 0x2a8
    if( handshake->resume == 0 )
   df1ee:	f107 0a2c 	add.w	sl, r7, #44	; 0x2c
   df1f2:	f505 732d 	add.w	r3, r5, #692	; 0x2b4
   df1f6:	b9b2      	cbnz	r2, df226 <mbedtls_ssl_derive_keys+0x96>
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
   df1f8:	2230      	movs	r2, #48	; 0x30
   df1fa:	e9cd a201 	strd	sl, r2, [sp, #4]
   df1fe:	2240      	movs	r2, #64	; 0x40
   df200:	9200      	str	r2, [sp, #0]
   df202:	f505 7b3d 	add.w	fp, r5, #756	; 0x2f4
   df206:	4a9a      	ldr	r2, [pc, #616]	; (df470 <mbedtls_ssl_derive_keys+0x2e0>)
   df208:	f8d5 72ac 	ldr.w	r7, [r5, #684]	; 0x2ac
   df20c:	f8d5 12b0 	ldr.w	r1, [r5, #688]	; 0x2b0
   df210:	9305      	str	r3, [sp, #20]
   df212:	4658      	mov	r0, fp
   df214:	47b8      	blx	r7
        if( ret != 0 )
   df216:	4602      	mov	r2, r0
   df218:	2800      	cmp	r0, #0
   df21a:	d1c7      	bne.n	df1ac <mbedtls_ssl_derive_keys+0x1c>
        mbedtls_platform_zeroize( handshake->premaster,
   df21c:	2154      	movs	r1, #84	; 0x54
   df21e:	4658      	mov	r0, fp
   df220:	f003 fcd0 	bl	e2bc4 <mbedtls_platform_zeroize>
   df224:	9b05      	ldr	r3, [sp, #20]
    memcpy( tmp, handshake->randbytes, 64 );
   df226:	461a      	mov	r2, r3
   df228:	f10d 0c18 	add.w	ip, sp, #24
   df22c:	f505 7e3d 	add.w	lr, r5, #756	; 0x2f4
   df230:	6810      	ldr	r0, [r2, #0]
   df232:	6851      	ldr	r1, [r2, #4]
   df234:	4667      	mov	r7, ip
   df236:	c703      	stmia	r7!, {r0, r1}
   df238:	3208      	adds	r2, #8
   df23a:	4572      	cmp	r2, lr
   df23c:	46bc      	mov	ip, r7
   df23e:	d1f7      	bne.n	df230 <mbedtls_ssl_derive_keys+0xa0>
    memcpy( handshake->randbytes, tmp + 32, 32 );
   df240:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
   df244:	469c      	mov	ip, r3
   df246:	af16      	add	r7, sp, #88	; 0x58
   df248:	4672      	mov	r2, lr
   df24a:	ca03      	ldmia	r2!, {r0, r1}
   df24c:	42ba      	cmp	r2, r7
   df24e:	f8cc 0000 	str.w	r0, [ip]
   df252:	f8cc 1004 	str.w	r1, [ip, #4]
   df256:	4696      	mov	lr, r2
   df258:	f10c 0c08 	add.w	ip, ip, #8
   df25c:	d1f4      	bne.n	df248 <mbedtls_ssl_derive_keys+0xb8>
    memcpy( handshake->randbytes + 32, tmp, 32 );
   df25e:	f10d 0e18 	add.w	lr, sp, #24
   df262:	f505 7c35 	add.w	ip, r5, #724	; 0x2d4
   df266:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
   df26a:	4672      	mov	r2, lr
   df26c:	ca03      	ldmia	r2!, {r0, r1}
   df26e:	455a      	cmp	r2, fp
   df270:	f8cc 0000 	str.w	r0, [ip]
   df274:	f8cc 1004 	str.w	r1, [ip, #4]
   df278:	4696      	mov	lr, r2
   df27a:	f10c 0c08 	add.w	ip, ip, #8
   df27e:	d1f4      	bne.n	df26a <mbedtls_ssl_derive_keys+0xda>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
   df280:	2140      	movs	r1, #64	; 0x40
   df282:	a806      	add	r0, sp, #24
   df284:	9305      	str	r3, [sp, #20]
   df286:	f003 fc9d 	bl	e2bc4 <mbedtls_platform_zeroize>
    ret = handshake->tls_prf( session->master, 48, "key expansion",
   df28a:	f44f 7280 	mov.w	r2, #256	; 0x100
   df28e:	e9cd 7201 	strd	r7, r2, [sp, #4]
   df292:	2740      	movs	r7, #64	; 0x40
   df294:	9700      	str	r7, [sp, #0]
   df296:	4a77      	ldr	r2, [pc, #476]	; (df474 <mbedtls_ssl_derive_keys+0x2e4>)
   df298:	f8d5 52ac 	ldr.w	r5, [r5, #684]	; 0x2ac
   df29c:	9b05      	ldr	r3, [sp, #20]
   df29e:	2130      	movs	r1, #48	; 0x30
   df2a0:	4650      	mov	r0, sl
   df2a2:	47a8      	blx	r5
    if( ret != 0 )
   df2a4:	4602      	mov	r2, r0
   df2a6:	2800      	cmp	r0, #0
   df2a8:	d180      	bne.n	df1ac <mbedtls_ssl_derive_keys+0x1c>
    mbedtls_platform_zeroize( handshake->randbytes,
   df2aa:	9b05      	ldr	r3, [sp, #20]
   df2ac:	4639      	mov	r1, r7
   df2ae:	4618      	mov	r0, r3
   df2b0:	f003 fc88 	bl	e2bc4 <mbedtls_platform_zeroize>
    transform->keylen = cipher_info->key_bitlen / 8;
   df2b4:	6873      	ldr	r3, [r6, #4]
   df2b6:	08db      	lsrs	r3, r3, #3
   df2b8:	6063      	str	r3, [r4, #4]
    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
   df2ba:	7873      	ldrb	r3, [r6, #1]
   df2bc:	2b06      	cmp	r3, #6
   df2be:	d004      	beq.n	df2ca <mbedtls_ssl_derive_keys+0x13a>
   df2c0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   df2c4:	2b08      	cmp	r3, #8
   df2c6:	f040 8099 	bne.w	df3fc <mbedtls_ssl_derive_keys+0x26c>
        transform->maclen = 0;
   df2ca:	2000      	movs	r0, #0
        transform->ivlen = 12;
   df2cc:	230c      	movs	r3, #12
        transform->maclen = 0;
   df2ce:	6160      	str	r0, [r4, #20]
        transform->ivlen = 12;
   df2d0:	60e3      	str	r3, [r4, #12]
        if( cipher_info->mode == MBEDTLS_MODE_CHACHAPOLY )
   df2d2:	7873      	ldrb	r3, [r6, #1]
            transform->fixed_ivlen = 4;
   df2d4:	2b0a      	cmp	r3, #10
   df2d6:	bf0c      	ite	eq
   df2d8:	220c      	moveq	r2, #12
   df2da:	2204      	movne	r2, #4
        taglen = transform->ciphersuite_info->flags &
   df2dc:	6823      	ldr	r3, [r4, #0]
   df2de:	6122      	str	r2, [r4, #16]
                  MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   df2e0:	7f1b      	ldrb	r3, [r3, #28]
   df2e2:	f013 0f02 	tst.w	r3, #2
   df2e6:	bf14      	ite	ne
   df2e8:	2308      	movne	r3, #8
   df2ea:	2310      	moveq	r3, #16
        explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
   df2ec:	f1c2 020c 	rsb	r2, r2, #12
        transform->minlen = explicit_ivlen + taglen;
   df2f0:	441a      	add	r2, r3
   df2f2:	60a2      	str	r2, [r4, #8]
        mac_key_len = 0;
   df2f4:	4681      	mov	r9, r0
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   df2f6:	f8d8 3000 	ldr.w	r3, [r8]
   df2fa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   df2fe:	07db      	lsls	r3, r3, #31
   df300:	f53f af63 	bmi.w	df1ca <mbedtls_ssl_derive_keys+0x3a>
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
   df304:	6863      	ldr	r3, [r4, #4]
        iv_copy_len = ( transform->fixed_ivlen ) ?
   df306:	f8d4 b010 	ldr.w	fp, [r4, #16]
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
   df30a:	eb03 0549 	add.w	r5, r3, r9, lsl #1
   df30e:	aa16      	add	r2, sp, #88	; 0x58
        key1 = keyblk + mac_key_len * 2;
   df310:	ea4f 0749 	mov.w	r7, r9, lsl #1
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
   df314:	4415      	add	r5, r2
        iv_copy_len = ( transform->fixed_ivlen ) ?
   df316:	f1bb 0f00 	cmp.w	fp, #0
   df31a:	d101      	bne.n	df320 <mbedtls_ssl_derive_keys+0x190>
   df31c:	f8d4 b00c 	ldr.w	fp, [r4, #12]
        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
   df320:	9305      	str	r3, [sp, #20]
   df322:	18e9      	adds	r1, r5, r3
   df324:	465a      	mov	r2, fp
   df326:	f104 0018 	add.w	r0, r4, #24
   df32a:	f009 fd5f 	bl	e8dec <memcpy>
        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
   df32e:	9b05      	ldr	r3, [sp, #20]
   df330:	eb03 010b 	add.w	r1, r3, fp
   df334:	465a      	mov	r2, fp
   df336:	4429      	add	r1, r5
   df338:	f104 0028 	add.w	r0, r4, #40	; 0x28
   df33c:	f009 fd56 	bl	e8dec <memcpy>
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
   df340:	f8d8 300c 	ldr.w	r3, [r8, #12]
   df344:	2b00      	cmp	r3, #0
   df346:	f77f af40 	ble.w	df1ca <mbedtls_ssl_derive_keys+0x3a>
        if( mac_key_len != 0 )
   df34a:	f1b9 0f00 	cmp.w	r9, #0
   df34e:	d00d      	beq.n	df36c <mbedtls_ssl_derive_keys+0x1dc>
            mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, mac_key_len );
   df350:	464a      	mov	r2, r9
   df352:	a916      	add	r1, sp, #88	; 0x58
   df354:	f104 0038 	add.w	r0, r4, #56	; 0x38
   df358:	f7fd fdfe 	bl	dcf58 <mbedtls_md_hmac_starts>
            mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, mac_key_len );
   df35c:	ab16      	add	r3, sp, #88	; 0x58
   df35e:	464a      	mov	r2, r9
   df360:	eb03 0109 	add.w	r1, r3, r9
   df364:	f104 0044 	add.w	r0, r4, #68	; 0x44
   df368:	f7fd fdf6 	bl	dcf58 <mbedtls_md_hmac_starts>
    if( ssl->conf->f_export_keys != NULL )
   df36c:	f8d8 0000 	ldr.w	r0, [r8]
   df370:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
   df374:	f1b8 0f00 	cmp.w	r8, #0
   df378:	d008      	beq.n	df38c <mbedtls_ssl_derive_keys+0x1fc>
        ssl->conf->f_export_keys( ssl->conf->p_export_keys,
   df37a:	f8cd b004 	str.w	fp, [sp, #4]
   df37e:	6863      	ldr	r3, [r4, #4]
   df380:	9300      	str	r3, [sp, #0]
   df382:	6c80      	ldr	r0, [r0, #72]	; 0x48
   df384:	464b      	mov	r3, r9
   df386:	aa16      	add	r2, sp, #88	; 0x58
   df388:	4651      	mov	r1, sl
   df38a:	47c0      	blx	r8
    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
   df38c:	f104 0850 	add.w	r8, r4, #80	; 0x50
   df390:	4631      	mov	r1, r6
   df392:	4640      	mov	r0, r8
   df394:	f7f6 ff70 	bl	d6278 <mbedtls_cipher_setup>
   df398:	4602      	mov	r2, r0
   df39a:	2800      	cmp	r0, #0
   df39c:	f47f af06 	bne.w	df1ac <mbedtls_ssl_derive_keys+0x1c>
    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
   df3a0:	3488      	adds	r4, #136	; 0x88
   df3a2:	4631      	mov	r1, r6
   df3a4:	4620      	mov	r0, r4
   df3a6:	f7f6 ff67 	bl	d6278 <mbedtls_cipher_setup>
   df3aa:	4602      	mov	r2, r0
   df3ac:	2800      	cmp	r0, #0
   df3ae:	f47f aefd 	bne.w	df1ac <mbedtls_ssl_derive_keys+0x1c>
    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
   df3b2:	a916      	add	r1, sp, #88	; 0x58
   df3b4:	6872      	ldr	r2, [r6, #4]
   df3b6:	2301      	movs	r3, #1
   df3b8:	4439      	add	r1, r7
   df3ba:	4640      	mov	r0, r8
   df3bc:	f7f6 ff74 	bl	d62a8 <mbedtls_cipher_setkey>
   df3c0:	4602      	mov	r2, r0
   df3c2:	2800      	cmp	r0, #0
   df3c4:	f47f aef2 	bne.w	df1ac <mbedtls_ssl_derive_keys+0x1c>
    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
   df3c8:	6872      	ldr	r2, [r6, #4]
   df3ca:	4603      	mov	r3, r0
   df3cc:	4629      	mov	r1, r5
   df3ce:	4620      	mov	r0, r4
   df3d0:	f7f6 ff6a 	bl	d62a8 <mbedtls_cipher_setkey>
   df3d4:	4602      	mov	r2, r0
   df3d6:	2800      	cmp	r0, #0
   df3d8:	f47f aee8 	bne.w	df1ac <mbedtls_ssl_derive_keys+0x1c>
   df3dc:	9005      	str	r0, [sp, #20]
    mbedtls_platform_zeroize( keyblk, sizeof( keyblk ) );
   df3de:	f44f 7180 	mov.w	r1, #256	; 0x100
   df3e2:	a816      	add	r0, sp, #88	; 0x58
   df3e4:	f003 fbee 	bl	e2bc4 <mbedtls_platform_zeroize>
   df3e8:	9a05      	ldr	r2, [sp, #20]
    return( 0 );
   df3ea:	e6df      	b.n	df1ac <mbedtls_ssl_derive_keys+0x1c>
        handshake->tls_prf = tls_prf_sha256;
   df3ec:	4b22      	ldr	r3, [pc, #136]	; (df478 <mbedtls_ssl_derive_keys+0x2e8>)
   df3ee:	f8c5 32ac 	str.w	r3, [r5, #684]	; 0x2ac
        handshake->calc_verify = ssl_calc_verify_tls_sha256;
   df3f2:	4b22      	ldr	r3, [pc, #136]	; (df47c <mbedtls_ssl_derive_keys+0x2ec>)
   df3f4:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
   df3f8:	4b21      	ldr	r3, [pc, #132]	; (df480 <mbedtls_ssl_derive_keys+0x2f0>)
   df3fa:	e6f4      	b.n	df1e6 <mbedtls_ssl_derive_keys+0x56>
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
   df3fc:	2201      	movs	r2, #1
   df3fe:	4649      	mov	r1, r9
   df400:	f104 0038 	add.w	r0, r4, #56	; 0x38
   df404:	f7fd fd5a 	bl	dcebc <mbedtls_md_setup>
   df408:	4602      	mov	r2, r0
   df40a:	2800      	cmp	r0, #0
   df40c:	f47f aece 	bne.w	df1ac <mbedtls_ssl_derive_keys+0x1c>
            ( ret = mbedtls_md_setup( &transform->md_ctx_dec, md_info, 1 ) ) != 0 )
   df410:	2201      	movs	r2, #1
   df412:	4649      	mov	r1, r9
   df414:	f104 0044 	add.w	r0, r4, #68	; 0x44
   df418:	f7fd fd50 	bl	dcebc <mbedtls_md_setup>
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
   df41c:	4602      	mov	r2, r0
   df41e:	2800      	cmp	r0, #0
   df420:	f47f aec4 	bne.w	df1ac <mbedtls_ssl_derive_keys+0x1c>
        mac_key_len = mbedtls_md_get_size( md_info );
   df424:	4648      	mov	r0, r9
   df426:	f7fd fe57 	bl	dd0d8 <mbedtls_md_get_size>
        transform->maclen = mac_key_len;
   df42a:	6160      	str	r0, [r4, #20]
        transform->ivlen = cipher_info->iv_size;
   df42c:	68f2      	ldr	r2, [r6, #12]
   df42e:	60e2      	str	r2, [r4, #12]
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
   df430:	7873      	ldrb	r3, [r6, #1]
   df432:	2b07      	cmp	r3, #7
        mac_key_len = mbedtls_md_get_size( md_info );
   df434:	4681      	mov	r9, r0
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
   df436:	d101      	bne.n	df43c <mbedtls_ssl_derive_keys+0x2ac>
            transform->minlen = transform->maclen;
   df438:	60a0      	str	r0, [r4, #8]
   df43a:	e75c      	b.n	df2f6 <mbedtls_ssl_derive_keys+0x166>
                                  + cipher_info->block_size
   df43c:	6973      	ldr	r3, [r6, #20]
                                  - transform->maclen % cipher_info->block_size;
   df43e:	fbb0 f1f3 	udiv	r1, r0, r3
   df442:	fb03 3301 	mla	r3, r3, r1, r3
                transform->minlen = transform->maclen
   df446:	60a3      	str	r3, [r4, #8]
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
   df448:	f8d8 100c 	ldr.w	r1, [r8, #12]
   df44c:	3902      	subs	r1, #2
   df44e:	2901      	cmp	r1, #1
   df450:	f63f aebb 	bhi.w	df1ca <mbedtls_ssl_derive_keys+0x3a>
                transform->minlen += transform->ivlen;
   df454:	4413      	add	r3, r2
   df456:	60a3      	str	r3, [r4, #8]
   df458:	e74d      	b.n	df2f6 <mbedtls_ssl_derive_keys+0x166>
   df45a:	bf00      	nop
   df45c:	ffff8f00 	.word	0xffff8f00
   df460:	ffff9400 	.word	0xffff9400
   df464:	000df03d 	.word	0x000df03d
   df468:	000df0c9 	.word	0x000df0c9
   df46c:	000df05d 	.word	0x000df05d
   df470:	000ed034 	.word	0x000ed034
   df474:	000ed042 	.word	0x000ed042
   df478:	000df01d 	.word	0x000df01d
   df47c:	000deec5 	.word	0x000deec5
   df480:	000dee59 	.word	0x000dee59

000df484 <mbedtls_ssl_psk_derive_premaster>:
{
   df484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned char *p = ssl->handshake->premaster;
   df488:	6b03      	ldr	r3, [r0, #48]	; 0x30
    const unsigned char *psk = ssl->conf->psk;
   df48a:	6802      	ldr	r2, [r0, #0]
    size_t psk_len = ssl->conf->psk_len;
   df48c:	e9d2 8419 	ldrd	r8, r4, [r2, #100]	; 0x64
    if( ssl->handshake->psk != NULL )
   df490:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
{
   df494:	4607      	mov	r7, r0
    unsigned char *end = p + sizeof( ssl->handshake->premaster );
   df496:	f503 7652 	add.w	r6, r3, #840	; 0x348
    if( ssl->handshake->psk != NULL )
   df49a:	b112      	cbz	r2, df4a2 <mbedtls_ssl_psk_derive_premaster+0x1e>
        psk_len = ssl->handshake->psk_len;
   df49c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
   df4a0:	4690      	mov	r8, r2
    if( key_ex == MBEDTLS_KEY_EXCHANGE_PSK )
   df4a2:	2905      	cmp	r1, #5
   df4a4:	d12d      	bne.n	df502 <mbedtls_ssl_psk_derive_premaster+0x7e>
        *(p++) = (unsigned char)( psk_len >> 8 );
   df4a6:	0a22      	lsrs	r2, r4, #8
        *(p++) = (unsigned char)( psk_len      );
   df4a8:	f203 25f6 	addw	r5, r3, #758	; 0x2f6
        *(p++) = (unsigned char)( psk_len >> 8 );
   df4ac:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
        *(p++) = (unsigned char)( psk_len      );
   df4b0:	f883 42f5 	strb.w	r4, [r3, #757]	; 0x2f5
        if( end < p || (size_t)( end - p ) < psk_len )
   df4b4:	1b73      	subs	r3, r6, r5
   df4b6:	42a3      	cmp	r3, r4
   df4b8:	d202      	bcs.n	df4c0 <mbedtls_ssl_psk_derive_premaster+0x3c>
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   df4ba:	4818      	ldr	r0, [pc, #96]	; (df51c <mbedtls_ssl_psk_derive_premaster+0x98>)
}
   df4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memset( p, 0, psk_len );
   df4c0:	4622      	mov	r2, r4
   df4c2:	2100      	movs	r1, #0
   df4c4:	4628      	mov	r0, r5
   df4c6:	f009 fcb9 	bl	e8e3c <memset>
        p += psk_len;
   df4ca:	192b      	adds	r3, r5, r4
    if( end - p < 2 )
   df4cc:	1af2      	subs	r2, r6, r3
   df4ce:	2a01      	cmp	r2, #1
   df4d0:	ddf3      	ble.n	df4ba <mbedtls_ssl_psk_derive_premaster+0x36>
    *(p++) = (unsigned char)( psk_len >> 8 );
   df4d2:	461d      	mov	r5, r3
   df4d4:	0a22      	lsrs	r2, r4, #8
   df4d6:	f805 2b02 	strb.w	r2, [r5], #2
    if( end < p || (size_t)( end - p ) < psk_len )
   df4da:	42ae      	cmp	r6, r5
    *(p++) = (unsigned char)( psk_len      );
   df4dc:	705c      	strb	r4, [r3, #1]
    if( end < p || (size_t)( end - p ) < psk_len )
   df4de:	d3ec      	bcc.n	df4ba <mbedtls_ssl_psk_derive_premaster+0x36>
   df4e0:	1b76      	subs	r6, r6, r5
   df4e2:	42a6      	cmp	r6, r4
   df4e4:	d3e9      	bcc.n	df4ba <mbedtls_ssl_psk_derive_premaster+0x36>
    memcpy( p, psk, psk_len );
   df4e6:	4622      	mov	r2, r4
   df4e8:	4628      	mov	r0, r5
   df4ea:	4641      	mov	r1, r8
   df4ec:	f009 fc7e 	bl	e8dec <memcpy>
    ssl->handshake->pmslen = p - ssl->handshake->premaster;
   df4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    p += psk_len;
   df4f2:	442c      	add	r4, r5
    ssl->handshake->pmslen = p - ssl->handshake->premaster;
   df4f4:	f503 753d 	add.w	r5, r3, #756	; 0x2f4
   df4f8:	1b64      	subs	r4, r4, r5
   df4fa:	f8c3 42b0 	str.w	r4, [r3, #688]	; 0x2b0
    return( 0 );
   df4fe:	2000      	movs	r0, #0
   df500:	e7dc      	b.n	df4bc <mbedtls_ssl_psk_derive_premaster+0x38>
    if( key_ex == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
   df502:	2907      	cmp	r1, #7
   df504:	d108      	bne.n	df518 <mbedtls_ssl_psk_derive_premaster+0x94>
        *p++ = 0;
   df506:	2200      	movs	r2, #0
   df508:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
        *p++ = 48;
   df50c:	2230      	movs	r2, #48	; 0x30
   df50e:	f883 22f5 	strb.w	r2, [r3, #757]	; 0x2f5
        p += 48;
   df512:	f203 3326 	addw	r3, r3, #806	; 0x326
   df516:	e7d9      	b.n	df4cc <mbedtls_ssl_psk_derive_premaster+0x48>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   df518:	4801      	ldr	r0, [pc, #4]	; (df520 <mbedtls_ssl_psk_derive_premaster+0x9c>)
   df51a:	e7cf      	b.n	df4bc <mbedtls_ssl_psk_derive_premaster+0x38>
   df51c:	ffff8f00 	.word	0xffff8f00
   df520:	ffff9400 	.word	0xffff9400

000df524 <mbedtls_ssl_fetch_input>:
{
   df524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
   df526:	6943      	ldr	r3, [r0, #20]
{
   df528:	4604      	mov	r4, r0
   df52a:	460d      	mov	r5, r1
    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
   df52c:	b90b      	cbnz	r3, df532 <mbedtls_ssl_fetch_input+0xe>
   df52e:	6983      	ldr	r3, [r0, #24]
   df530:	b353      	cbz	r3, df588 <mbedtls_ssl_fetch_input+0x64>
    if( nb_want > MBEDTLS_SSL_IN_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
   df532:	6da3      	ldr	r3, [r4, #88]	; 0x58
   df534:	6d22      	ldr	r2, [r4, #80]	; 0x50
   df536:	1a9b      	subs	r3, r3, r2
   df538:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
   df53c:	332d      	adds	r3, #45	; 0x2d
   df53e:	42ab      	cmp	r3, r5
   df540:	d322      	bcc.n	df588 <mbedtls_ssl_fetch_input+0x64>
        while( ssl->in_left < nb_want )
   df542:	6f66      	ldr	r6, [r4, #116]	; 0x74
   df544:	42b5      	cmp	r5, r6
   df546:	d921      	bls.n	df58c <mbedtls_ssl_fetch_input+0x68>
    if( ssl->f_get_timer == NULL )
   df548:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
            len = nb_want - ssl->in_left;
   df54a:	1bae      	subs	r6, r5, r6
    if( ssl->f_get_timer == NULL )
   df54c:	b94b      	cbnz	r3, df562 <mbedtls_ssl_fetch_input+0x3e>
                if( ssl->f_recv_timeout != NULL )
   df54e:	e9d4 7006 	ldrd	r7, r0, [r4, #24]
   df552:	6da1      	ldr	r1, [r4, #88]	; 0x58
   df554:	6f63      	ldr	r3, [r4, #116]	; 0x74
   df556:	4419      	add	r1, r3
   df558:	b94f      	cbnz	r7, df56e <mbedtls_ssl_fetch_input+0x4a>
                    ret = ssl->f_recv( ssl->p_bio,
   df55a:	6963      	ldr	r3, [r4, #20]
   df55c:	4632      	mov	r2, r6
   df55e:	4798      	blx	r3
   df560:	e009      	b.n	df576 <mbedtls_ssl_fetch_input+0x52>
    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
   df562:	6c60      	ldr	r0, [r4, #68]	; 0x44
   df564:	4798      	blx	r3
   df566:	2802      	cmp	r0, #2
   df568:	d1f1      	bne.n	df54e <mbedtls_ssl_fetch_input+0x2a>
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
   df56a:	480b      	ldr	r0, [pc, #44]	; (df598 <mbedtls_ssl_fetch_input+0x74>)
   df56c:	e00d      	b.n	df58a <mbedtls_ssl_fetch_input+0x66>
                                               ssl->conf->read_timeout );
   df56e:	6823      	ldr	r3, [r4, #0]
                    ret = ssl->f_recv_timeout( ssl->p_bio,
   df570:	4632      	mov	r2, r6
   df572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   df574:	47b8      	blx	r7
            if( ret == 0 )
   df576:	2800      	cmp	r0, #0
   df578:	d00a      	beq.n	df590 <mbedtls_ssl_fetch_input+0x6c>
            if( ret < 0 )
   df57a:	db06      	blt.n	df58a <mbedtls_ssl_fetch_input+0x66>
            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
   df57c:	4286      	cmp	r6, r0
   df57e:	d309      	bcc.n	df594 <mbedtls_ssl_fetch_input+0x70>
            ssl->in_left += ret;
   df580:	6f63      	ldr	r3, [r4, #116]	; 0x74
   df582:	4418      	add	r0, r3
   df584:	6760      	str	r0, [r4, #116]	; 0x74
        while( ssl->in_left < nb_want )
   df586:	e7dc      	b.n	df542 <mbedtls_ssl_fetch_input+0x1e>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   df588:	4804      	ldr	r0, [pc, #16]	; (df59c <mbedtls_ssl_fetch_input+0x78>)
}
   df58a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return( 0 );
   df58c:	2000      	movs	r0, #0
   df58e:	e7fc      	b.n	df58a <mbedtls_ssl_fetch_input+0x66>
                return( MBEDTLS_ERR_SSL_CONN_EOF );
   df590:	4803      	ldr	r0, [pc, #12]	; (df5a0 <mbedtls_ssl_fetch_input+0x7c>)
   df592:	e7fa      	b.n	df58a <mbedtls_ssl_fetch_input+0x66>
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   df594:	4803      	ldr	r0, [pc, #12]	; (df5a4 <mbedtls_ssl_fetch_input+0x80>)
   df596:	e7f8      	b.n	df58a <mbedtls_ssl_fetch_input+0x66>
   df598:	ffff9800 	.word	0xffff9800
   df59c:	ffff8f00 	.word	0xffff8f00
   df5a0:	ffff8d80 	.word	0xffff8d80
   df5a4:	ffff9400 	.word	0xffff9400

000df5a8 <mbedtls_ssl_flush_output>:
{
   df5a8:	b538      	push	{r3, r4, r5, lr}
    if( ssl->f_send == NULL )
   df5aa:	6903      	ldr	r3, [r0, #16]
{
   df5ac:	4605      	mov	r5, r0
    if( ssl->f_send == NULL )
   df5ae:	b313      	cbz	r3, df5f6 <mbedtls_ssl_flush_output+0x4e>
    if( ssl->out_left == 0 )
   df5b0:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
   df5b4:	b1ea      	cbz	r2, df5f2 <mbedtls_ssl_flush_output+0x4a>
    while( ssl->out_left > 0 )
   df5b6:	f8d5 40a4 	ldr.w	r4, [r5, #164]	; 0xa4
   df5ba:	b184      	cbz	r4, df5de <mbedtls_ssl_flush_output+0x36>
        buf = ssl->out_hdr - ssl->out_left;
   df5bc:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
   df5c0:	692b      	ldr	r3, [r5, #16]
   df5c2:	69e8      	ldr	r0, [r5, #28]
   df5c4:	4622      	mov	r2, r4
   df5c6:	1b09      	subs	r1, r1, r4
   df5c8:	4798      	blx	r3
        if( ret <= 0 )
   df5ca:	1e02      	subs	r2, r0, #0
   df5cc:	dd11      	ble.n	df5f2 <mbedtls_ssl_flush_output+0x4a>
        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
   df5ce:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
   df5d2:	4290      	cmp	r0, r2
   df5d4:	d311      	bcc.n	df5fa <mbedtls_ssl_flush_output+0x52>
        ssl->out_left -= ret;
   df5d6:	1a80      	subs	r0, r0, r2
   df5d8:	f8c5 00a4 	str.w	r0, [r5, #164]	; 0xa4
    while( ssl->out_left > 0 )
   df5dc:	e7eb      	b.n	df5b6 <mbedtls_ssl_flush_output+0xe>
        ssl->out_hdr = ssl->out_buf + 8;
   df5de:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    ssl_update_out_pointers( ssl, ssl->transform_out );
   df5e2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
        ssl->out_hdr = ssl->out_buf + 8;
   df5e4:	3308      	adds	r3, #8
   df5e6:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    ssl_update_out_pointers( ssl, ssl->transform_out );
   df5ea:	4628      	mov	r0, r5
   df5ec:	f7ff fc1c 	bl	dee28 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>
   df5f0:	4622      	mov	r2, r4
}
   df5f2:	4610      	mov	r0, r2
   df5f4:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   df5f6:	4a02      	ldr	r2, [pc, #8]	; (df600 <mbedtls_ssl_flush_output+0x58>)
   df5f8:	e7fb      	b.n	df5f2 <mbedtls_ssl_flush_output+0x4a>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   df5fa:	4a02      	ldr	r2, [pc, #8]	; (df604 <mbedtls_ssl_flush_output+0x5c>)
   df5fc:	e7f9      	b.n	df5f2 <mbedtls_ssl_flush_output+0x4a>
   df5fe:	bf00      	nop
   df600:	ffff8f00 	.word	0xffff8f00
   df604:	ffff9400 	.word	0xffff9400

000df608 <mbedtls_ssl_write_record>:
{
   df608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
   df60c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    size_t len = ssl->out_msglen;
   df610:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
{
   df614:	460e      	mov	r6, r1
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
   df616:	f8d0 109c 	ldr.w	r1, [r0, #156]	; 0x9c
   df61a:	7011      	strb	r1, [r2, #0]
                           ssl->conf->transport, ssl->out_hdr + 1 );
   df61c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
   df620:	68c1      	ldr	r1, [r0, #12]
{
   df622:	4604      	mov	r4, r0
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
   df624:	6880      	ldr	r0, [r0, #8]
   df626:	7050      	strb	r0, [r2, #1]
        ver[1] = (unsigned char) minor;
   df628:	7091      	strb	r1, [r2, #2]
        memcpy( ssl->out_ctr, ssl->cur_out_ctr, 8 );
   df62a:	4621      	mov	r1, r4
   df62c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   df630:	f851 2fa8 	ldr.w	r2, [r1, #168]!
   df634:	6002      	str	r2, [r0, #0]
   df636:	684a      	ldr	r2, [r1, #4]
   df638:	6042      	str	r2, [r0, #4]
        ssl->out_len[0] = (unsigned char)( len >> 8 );
   df63a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   df63e:	0a19      	lsrs	r1, r3, #8
   df640:	7011      	strb	r1, [r2, #0]
        ssl->out_len[1] = (unsigned char)( len      );
   df642:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   df646:	7053      	strb	r3, [r2, #1]
        if( ssl->transform_out != NULL )
   df648:	6ba5      	ldr	r5, [r4, #56]	; 0x38
{
   df64a:	b091      	sub	sp, #68	; 0x44
        if( ssl->transform_out != NULL )
   df64c:	2d00      	cmp	r5, #0
   df64e:	d073      	beq.n	df738 <mbedtls_ssl_write_record+0x130>
    if( ssl->session_out == NULL || ssl->transform_out == NULL )
   df650:	6a63      	ldr	r3, [r4, #36]	; 0x24
   df652:	2b00      	cmp	r3, #0
   df654:	f000 80b5 	beq.w	df7c2 <mbedtls_ssl_write_record+0x1ba>
    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_out->cipher_ctx_enc );
   df658:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode(
    const mbedtls_cipher_context_t *ctx )
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, MBEDTLS_MODE_NONE );
    if( ctx->cipher_info == NULL )
   df65a:	2b00      	cmp	r3, #0
   df65c:	f000 80b1 	beq.w	df7c2 <mbedtls_ssl_write_record+0x1ba>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
   df660:	785b      	ldrb	r3, [r3, #1]
    if( mode == MBEDTLS_MODE_GCM ||
   df662:	2b06      	cmp	r3, #6
   df664:	d004      	beq.n	df670 <mbedtls_ssl_write_record+0x68>
   df666:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   df66a:	2b08      	cmp	r3, #8
   df66c:	f040 80a9 	bne.w	df7c2 <mbedtls_ssl_write_record+0x1ba>
        unsigned char taglen = transform->ciphersuite_info->flags &
   df670:	682b      	ldr	r3, [r5, #0]
   df672:	7f1b      	ldrb	r3, [r3, #28]
   df674:	f013 0f02 	tst.w	r3, #2
        memcpy( add_data, ssl->out_ctr, 8 );
   df678:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   df67c:	6818      	ldr	r0, [r3, #0]
   df67e:	6859      	ldr	r1, [r3, #4]
   df680:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   df684:	e8ac 0003 	stmia.w	ip!, {r0, r1}
        add_data[8]  = ssl->out_msgtype;
   df688:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
        size_t explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
   df68c:	e9d5 2903 	ldrd	r2, r9, [r5, #12]
        add_data[8]  = ssl->out_msgtype;
   df690:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
        ver[0] = (unsigned char) major;
   df694:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
        ver[1] = (unsigned char) minor;
   df698:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
   df69c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
        ver[0] = (unsigned char) major;
   df6a0:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
   df6a4:	ea4f 2011 	mov.w	r0, r1, lsr #8
   df6a8:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
        add_data[12] = ssl->out_msglen & 0xFF;
   df6ac:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
   df6b0:	68e9      	ldr	r1, [r5, #12]
        unsigned char taglen = transform->ciphersuite_info->flags &
   df6b2:	bf14      	ite	ne
   df6b4:	2708      	movne	r7, #8
   df6b6:	2710      	moveq	r7, #16
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
   df6b8:	290c      	cmp	r1, #12
   df6ba:	f040 8082 	bne.w	df7c2 <mbedtls_ssl_write_record+0x1ba>
   df6be:	f1b9 0f04 	cmp.w	r9, #4
   df6c2:	d156      	bne.n	df772 <mbedtls_ssl_write_record+0x16a>
            memcpy( iv, transform->iv_enc, transform->fixed_ivlen );
   df6c4:	69a9      	ldr	r1, [r5, #24]
   df6c6:	9109      	str	r1, [sp, #36]	; 0x24
            memcpy( iv + transform->fixed_ivlen, ssl->out_ctr, 8 );
   df6c8:	6818      	ldr	r0, [r3, #0]
   df6ca:	6859      	ldr	r1, [r3, #4]
   df6cc:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   df6d0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
            memcpy( ssl->out_iv, ssl->out_ctr, 8 );
   df6d4:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   df6d8:	6819      	ldr	r1, [r3, #0]
   df6da:	6001      	str	r1, [r0, #0]
   df6dc:	6859      	ldr	r1, [r3, #4]
   df6de:	6041      	str	r1, [r0, #4]
        enc_msglen = ssl->out_msglen;
   df6e0:	f8d4 80a0 	ldr.w	r8, [r4, #160]	; 0xa0
        enc_msg = ssl->out_msg;
   df6e4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
        if( ( ret = mbedtls_cipher_auth_encrypt( &transform->cipher_ctx_enc,
   df6e8:	9706      	str	r7, [sp, #24]
        ssl->out_msglen += explicit_ivlen;
   df6ea:	4442      	add	r2, r8
   df6ec:	eba2 0209 	sub.w	r2, r2, r9
   df6f0:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
        if( ( ret = mbedtls_cipher_auth_encrypt( &transform->cipher_ctx_enc,
   df6f4:	eb03 0208 	add.w	r2, r3, r8
   df6f8:	9205      	str	r2, [sp, #20]
   df6fa:	aa08      	add	r2, sp, #32
   df6fc:	e9cd 3203 	strd	r3, r2, [sp, #12]
   df700:	e9cd 3801 	strd	r3, r8, [sp, #4]
   df704:	230d      	movs	r3, #13
   df706:	9300      	str	r3, [sp, #0]
   df708:	68ea      	ldr	r2, [r5, #12]
   df70a:	ab0c      	add	r3, sp, #48	; 0x30
   df70c:	a909      	add	r1, sp, #36	; 0x24
   df70e:	f105 0050 	add.w	r0, r5, #80	; 0x50
   df712:	f7f6 fe9d 	bl	d6450 <mbedtls_cipher_auth_encrypt>
   df716:	2800      	cmp	r0, #0
   df718:	d150      	bne.n	df7bc <mbedtls_ssl_write_record+0x1b4>
        if( olen != enc_msglen )
   df71a:	9b08      	ldr	r3, [sp, #32]
   df71c:	4598      	cmp	r8, r3
   df71e:	d150      	bne.n	df7c2 <mbedtls_ssl_write_record+0x1ba>
        ssl->out_msglen += taglen;
   df720:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
            ssl->out_len[0] = (unsigned char)( len >> 8 );
   df724:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
        ssl->out_msglen += taglen;
   df728:	443b      	add	r3, r7
            ssl->out_len[0] = (unsigned char)( len >> 8 );
   df72a:	0a19      	lsrs	r1, r3, #8
        ssl->out_msglen += taglen;
   df72c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ssl->out_len[0] = (unsigned char)( len >> 8 );
   df730:	7011      	strb	r1, [r2, #0]
            ssl->out_len[1] = (unsigned char)( len      );
   df732:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   df736:	7053      	strb	r3, [r2, #1]
        ssl->out_left += protected_record_size;
   df738:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
        ssl_update_out_pointers( ssl, ssl->transform_out );
   df73c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        protected_record_size = len + mbedtls_ssl_hdr_len( ssl );
   df73e:	3305      	adds	r3, #5
        ssl->out_left += protected_record_size;
   df740:	441a      	add	r2, r3
   df742:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
        ssl->out_hdr  += protected_record_size;
   df746:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   df74a:	4413      	add	r3, r2
   df74c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        ssl_update_out_pointers( ssl, ssl->transform_out );
   df750:	4620      	mov	r0, r4
   df752:	f7ff fb69 	bl	dee28 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>
    return( 0 );
   df756:	f104 02af 	add.w	r2, r4, #175	; 0xaf
   df75a:	f104 01a7 	add.w	r1, r4, #167	; 0xa7
            if( ++ssl->cur_out_ctr[i - 1] != 0 )
   df75e:	7813      	ldrb	r3, [r2, #0]
   df760:	3301      	adds	r3, #1
   df762:	b2db      	uxtb	r3, r3
   df764:	f802 3901 	strb.w	r3, [r2], #-1
   df768:	b30b      	cbz	r3, df7ae <mbedtls_ssl_write_record+0x1a6>
    if( ( flush == SSL_FORCE_FLUSH ) &&
   df76a:	2e01      	cmp	r6, #1
   df76c:	d023      	beq.n	df7b6 <mbedtls_ssl_write_record+0x1ae>
    return( 0 );
   df76e:	2000      	movs	r0, #0
   df770:	e024      	b.n	df7bc <mbedtls_ssl_write_record+0x1b4>
        else if( transform->ivlen == 12 && transform->fixed_ivlen == 12 )
   df772:	f1b9 0f0c 	cmp.w	r9, #12
   df776:	d124      	bne.n	df7c2 <mbedtls_ssl_write_record+0x1ba>
            memcpy( iv, transform->iv_enc, transform->fixed_ivlen );
   df778:	46ae      	mov	lr, r5
   df77a:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
   df77e:	f85e 0f18 	ldr.w	r0, [lr, #24]!
   df782:	f8de 1004 	ldr.w	r1, [lr, #4]
   df786:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   df78a:	f8de 0008 	ldr.w	r0, [lr, #8]
   df78e:	f8cc 0000 	str.w	r0, [ip]
            for( i = 0; i < 8; i++ )
   df792:	1e59      	subs	r1, r3, #1
   df794:	a80a      	add	r0, sp, #40	; 0x28
   df796:	3307      	adds	r3, #7
                iv[i+4] ^= ssl->out_ctr[i];
   df798:	f811 ef01 	ldrb.w	lr, [r1, #1]!
   df79c:	f890 c000 	ldrb.w	ip, [r0]
            for( i = 0; i < 8; i++ )
   df7a0:	4299      	cmp	r1, r3
                iv[i+4] ^= ssl->out_ctr[i];
   df7a2:	ea8c 0c0e 	eor.w	ip, ip, lr
   df7a6:	f800 cb01 	strb.w	ip, [r0], #1
            for( i = 0; i < 8; i++ )
   df7aa:	d1f5      	bne.n	df798 <mbedtls_ssl_write_record+0x190>
   df7ac:	e798      	b.n	df6e0 <mbedtls_ssl_write_record+0xd8>
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
   df7ae:	4291      	cmp	r1, r2
   df7b0:	d1d5      	bne.n	df75e <mbedtls_ssl_write_record+0x156>
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
   df7b2:	4805      	ldr	r0, [pc, #20]	; (df7c8 <mbedtls_ssl_write_record+0x1c0>)
   df7b4:	e002      	b.n	df7bc <mbedtls_ssl_write_record+0x1b4>
        ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
   df7b6:	4620      	mov	r0, r4
   df7b8:	f7ff fef6 	bl	df5a8 <mbedtls_ssl_flush_output>
}
   df7bc:	b011      	add	sp, #68	; 0x44
   df7be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   df7c2:	4802      	ldr	r0, [pc, #8]	; (df7cc <mbedtls_ssl_write_record+0x1c4>)
   df7c4:	e7fa      	b.n	df7bc <mbedtls_ssl_write_record+0x1b4>
   df7c6:	bf00      	nop
   df7c8:	ffff9480 	.word	0xffff9480
   df7cc:	ffff9400 	.word	0xffff9400

000df7d0 <mbedtls_ssl_write_handshake_msg>:
{
   df7d0:	b538      	push	{r3, r4, r5, lr}
   df7d2:	4604      	mov	r4, r0
    const unsigned char hs_type = ssl->out_msg[0];
   df7d4:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    if( ssl->out_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE          &&
   df7d8:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
    const size_t hs_len = ssl->out_msglen - 4;
   df7dc:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    const unsigned char hs_type = ssl->out_msg[0];
   df7e0:	7808      	ldrb	r0, [r1, #0]
    if( ssl->out_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE          &&
   df7e2:	2a16      	cmp	r2, #22
   df7e4:	d003      	beq.n	df7ee <mbedtls_ssl_write_handshake_msg+0x1e>
   df7e6:	2a14      	cmp	r2, #20
   df7e8:	d002      	beq.n	df7f0 <mbedtls_ssl_write_handshake_msg+0x20>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   df7ea:	4814      	ldr	r0, [pc, #80]	; (df83c <mbedtls_ssl_write_handshake_msg+0x6c>)
}
   df7ec:	bd38      	pop	{r3, r4, r5, pc}
    if( ! ( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
   df7ee:	b308      	cbz	r0, df834 <mbedtls_ssl_write_handshake_msg+0x64>
            hs_type          == MBEDTLS_SSL_HS_HELLO_REQUEST ) &&
   df7f0:	6b25      	ldr	r5, [r4, #48]	; 0x30
   df7f2:	2d00      	cmp	r5, #0
   df7f4:	d0f9      	beq.n	df7ea <mbedtls_ssl_write_handshake_msg+0x1a>
    if( ssl->out_msglen > MBEDTLS_SSL_OUT_CONTENT_LEN )
   df7f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   df7fa:	d8f6      	bhi.n	df7ea <mbedtls_ssl_write_handshake_msg+0x1a>
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   df7fc:	2a16      	cmp	r2, #22
   df7fe:	d113      	bne.n	df828 <mbedtls_ssl_write_handshake_msg+0x58>
    const size_t hs_len = ssl->out_msglen - 4;
   df800:	3b04      	subs	r3, #4
        ssl->out_msg[1] = (unsigned char)( hs_len >> 16 );
   df802:	0c1a      	lsrs	r2, r3, #16
   df804:	704a      	strb	r2, [r1, #1]
        ssl->out_msg[2] = (unsigned char)( hs_len >>  8 );
   df806:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   df80a:	0a19      	lsrs	r1, r3, #8
   df80c:	7091      	strb	r1, [r2, #2]
        ssl->out_msg[3] = (unsigned char)( hs_len       );
   df80e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   df812:	70d3      	strb	r3, [r2, #3]
        if( hs_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
   df814:	b140      	cbz	r0, df828 <mbedtls_ssl_write_handshake_msg+0x58>
            ssl->handshake->update_checksum( ssl, ssl->out_msg, ssl->out_msglen );
   df816:	6b23      	ldr	r3, [r4, #48]	; 0x30
   df818:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   df81c:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
   df820:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   df824:	4620      	mov	r0, r4
   df826:	4798      	blx	r3
        if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
   df828:	4620      	mov	r0, r4
   df82a:	2101      	movs	r1, #1
}
   df82c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
   df830:	f7ff beea 	b.w	df608 <mbedtls_ssl_write_record>
    if( ssl->out_msglen > MBEDTLS_SSL_OUT_CONTENT_LEN )
   df834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   df838:	d9e2      	bls.n	df800 <mbedtls_ssl_write_handshake_msg+0x30>
   df83a:	e7d6      	b.n	df7ea <mbedtls_ssl_write_handshake_msg+0x1a>
   df83c:	ffff9400 	.word	0xffff9400

000df840 <mbedtls_ssl_prepare_handshake_record>:
{
   df840:	b510      	push	{r4, lr}
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
   df842:	6f01      	ldr	r1, [r0, #112]	; 0x70
   df844:	2903      	cmp	r1, #3
   df846:	d90e      	bls.n	df866 <mbedtls_ssl_prepare_handshake_record+0x26>
    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + ssl_get_hs_total_len( ssl );
   df848:	6e42      	ldr	r2, [r0, #100]	; 0x64
            ( ssl->in_msg[2] << 8  ) |
   df84a:	7893      	ldrb	r3, [r2, #2]
    return( ( ssl->in_msg[1] << 16 ) |
   df84c:	7854      	ldrb	r4, [r2, #1]
              ssl->in_msg[3] );
   df84e:	78d2      	ldrb	r2, [r2, #3]
            ( ssl->in_msg[2] << 8  ) |
   df850:	021b      	lsls	r3, r3, #8
    return( ( ssl->in_msg[1] << 16 ) |
   df852:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
            ( ssl->in_msg[2] << 8  ) |
   df856:	4313      	orrs	r3, r2
    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + ssl_get_hs_total_len( ssl );
   df858:	3304      	adds	r3, #4
   df85a:	6783      	str	r3, [r0, #120]	; 0x78
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
   df85c:	4803      	ldr	r0, [pc, #12]	; (df86c <mbedtls_ssl_prepare_handshake_record+0x2c>)
   df85e:	4299      	cmp	r1, r3
   df860:	bf28      	it	cs
   df862:	2000      	movcs	r0, #0
}
   df864:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   df866:	4802      	ldr	r0, [pc, #8]	; (df870 <mbedtls_ssl_prepare_handshake_record+0x30>)
   df868:	e7fc      	b.n	df864 <mbedtls_ssl_prepare_handshake_record+0x24>
   df86a:	bf00      	nop
   df86c:	ffff8f80 	.word	0xffff8f80
   df870:	ffff8e00 	.word	0xffff8e00

000df874 <mbedtls_ssl_update_handshake_status>:
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
   df874:	6842      	ldr	r2, [r0, #4]
   df876:	2a10      	cmp	r2, #16
{
   df878:	b410      	push	{r4}
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
   df87a:	d009      	beq.n	df890 <mbedtls_ssl_update_handshake_status+0x1c>
    mbedtls_ssl_handshake_params * const hs = ssl->handshake;
   df87c:	6b02      	ldr	r2, [r0, #48]	; 0x30
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
   df87e:	b13a      	cbz	r2, df890 <mbedtls_ssl_update_handshake_status+0x1c>
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
   df880:	f8d2 42a0 	ldr.w	r4, [r2, #672]	; 0x2a0
   df884:	6e41      	ldr	r1, [r0, #100]	; 0x64
   df886:	6f82      	ldr	r2, [r0, #120]	; 0x78
   df888:	4623      	mov	r3, r4
}
   df88a:	f85d 4b04 	ldr.w	r4, [sp], #4
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
   df88e:	4718      	bx	r3
}
   df890:	f85d 4b04 	ldr.w	r4, [sp], #4
   df894:	4770      	bx	lr
	...

000df898 <mbedtls_ssl_handle_message_type>:
{
   df898:	b510      	push	{r4, lr}
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   df89a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   df89c:	2b16      	cmp	r3, #22
{
   df89e:	4604      	mov	r4, r0
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   df8a0:	d00c      	beq.n	df8bc <mbedtls_ssl_handle_message_type+0x24>
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
   df8a2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   df8a4:	2b14      	cmp	r3, #20
   df8a6:	d10e      	bne.n	df8c6 <mbedtls_ssl_handle_message_type+0x2e>
        if( ssl->in_msglen != 1 )
   df8a8:	6f23      	ldr	r3, [r4, #112]	; 0x70
   df8aa:	2b01      	cmp	r3, #1
   df8ac:	d11d      	bne.n	df8ea <mbedtls_ssl_handle_message_type+0x52>
        if( ssl->in_msg[0] != 1 )
   df8ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   df8b0:	4812      	ldr	r0, [pc, #72]	; (df8fc <mbedtls_ssl_handle_message_type+0x64>)
        if( ssl->in_msg[0] != 1 )
   df8b2:	781b      	ldrb	r3, [r3, #0]
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   df8b4:	2b01      	cmp	r3, #1
            return( 0 );
   df8b6:	bf08      	it	eq
   df8b8:	2000      	moveq	r0, #0
   df8ba:	e003      	b.n	df8c4 <mbedtls_ssl_handle_message_type+0x2c>
        if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )
   df8bc:	f7ff ffc0 	bl	df840 <mbedtls_ssl_prepare_handshake_record>
   df8c0:	2800      	cmp	r0, #0
   df8c2:	d0ee      	beq.n	df8a2 <mbedtls_ssl_handle_message_type+0xa>
}
   df8c4:	bd10      	pop	{r4, pc}
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
   df8c6:	2b15      	cmp	r3, #21
   df8c8:	d10d      	bne.n	df8e6 <mbedtls_ssl_handle_message_type+0x4e>
        if( ssl->in_msglen != 2 )
   df8ca:	6f23      	ldr	r3, [r4, #112]	; 0x70
   df8cc:	2b02      	cmp	r3, #2
   df8ce:	d10c      	bne.n	df8ea <mbedtls_ssl_handle_message_type+0x52>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
   df8d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   df8d2:	781a      	ldrb	r2, [r3, #0]
   df8d4:	2a02      	cmp	r2, #2
   df8d6:	d00a      	beq.n	df8ee <mbedtls_ssl_handle_message_type+0x56>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
   df8d8:	2a01      	cmp	r2, #1
   df8da:	d10a      	bne.n	df8f2 <mbedtls_ssl_handle_message_type+0x5a>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
   df8dc:	785b      	ldrb	r3, [r3, #1]
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
   df8de:	b153      	cbz	r3, df8f6 <mbedtls_ssl_handle_message_type+0x5e>
            return( 0 );
   df8e0:	4807      	ldr	r0, [pc, #28]	; (df900 <mbedtls_ssl_handle_message_type+0x68>)
   df8e2:	2b64      	cmp	r3, #100	; 0x64
   df8e4:	e7e7      	b.n	df8b6 <mbedtls_ssl_handle_message_type+0x1e>
   df8e6:	2000      	movs	r0, #0
   df8e8:	e7ec      	b.n	df8c4 <mbedtls_ssl_handle_message_type+0x2c>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   df8ea:	4804      	ldr	r0, [pc, #16]	; (df8fc <mbedtls_ssl_handle_message_type+0x64>)
   df8ec:	e7ea      	b.n	df8c4 <mbedtls_ssl_handle_message_type+0x2c>
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
   df8ee:	4805      	ldr	r0, [pc, #20]	; (df904 <mbedtls_ssl_handle_message_type+0x6c>)
   df8f0:	e7e8      	b.n	df8c4 <mbedtls_ssl_handle_message_type+0x2c>
        return MBEDTLS_ERR_SSL_NON_FATAL;
   df8f2:	4803      	ldr	r0, [pc, #12]	; (df900 <mbedtls_ssl_handle_message_type+0x68>)
   df8f4:	e7e6      	b.n	df8c4 <mbedtls_ssl_handle_message_type+0x2c>
            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
   df8f6:	4804      	ldr	r0, [pc, #16]	; (df908 <mbedtls_ssl_handle_message_type+0x70>)
   df8f8:	e7e4      	b.n	df8c4 <mbedtls_ssl_handle_message_type+0x2c>
   df8fa:	bf00      	nop
   df8fc:	ffff8e00 	.word	0xffff8e00
   df900:	ffff9980 	.word	0xffff9980
   df904:	ffff8880 	.word	0xffff8880
   df908:	ffff8780 	.word	0xffff8780

000df90c <mbedtls_ssl_send_alert_message>:
{
   df90c:	b410      	push	{r4}
    if( ssl == NULL || ssl->conf == NULL )
   df90e:	b188      	cbz	r0, df934 <mbedtls_ssl_send_alert_message+0x28>
   df910:	6804      	ldr	r4, [r0, #0]
   df912:	b17c      	cbz	r4, df934 <mbedtls_ssl_send_alert_message+0x28>
    ssl->out_msglen = 2;
   df914:	2402      	movs	r4, #2
   df916:	f04f 0c15 	mov.w	ip, #21
   df91a:	e9c0 c427 	strd	ip, r4, [r0, #156]	; 0x9c
    ssl->out_msg[0] = level;
   df91e:	f8d0 4098 	ldr.w	r4, [r0, #152]	; 0x98
   df922:	7021      	strb	r1, [r4, #0]
    ssl->out_msg[1] = message;
   df924:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   df928:	705a      	strb	r2, [r3, #1]
}
   df92a:	f85d 4b04 	ldr.w	r4, [sp], #4
    if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
   df92e:	2101      	movs	r1, #1
   df930:	f7ff be6a 	b.w	df608 <mbedtls_ssl_write_record>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   df934:	4801      	ldr	r0, [pc, #4]	; (df93c <mbedtls_ssl_send_alert_message+0x30>)
}
   df936:	f85d 4b04 	ldr.w	r4, [sp], #4
   df93a:	4770      	bx	lr
   df93c:	ffff8f00 	.word	0xffff8f00

000df940 <mbedtls_ssl_read_record>:
{
   df940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( ssl->keep_current_message == 0 )
   df944:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
{
   df948:	b091      	sub	sp, #68	; 0x44
   df94a:	4604      	mov	r4, r0
   df94c:	460f      	mov	r7, r1
    if( ssl->keep_current_message == 0 )
   df94e:	2e00      	cmp	r6, #0
   df950:	f040 812c 	bne.w	dfbac <mbedtls_ssl_read_record+0x26c>
    if( ssl->in_hslen != 0 )
   df954:	6fa1      	ldr	r1, [r4, #120]	; 0x78
   df956:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   df958:	2900      	cmp	r1, #0
   df95a:	d032      	beq.n	df9c2 <mbedtls_ssl_read_record+0x82>
        if( ssl->in_offt != NULL )
   df95c:	b10b      	cbz	r3, df962 <mbedtls_ssl_read_record+0x22>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   df95e:	4d95      	ldr	r5, [pc, #596]	; (dfbb4 <mbedtls_ssl_read_record+0x274>)
   df960:	e029      	b.n	df9b6 <mbedtls_ssl_read_record+0x76>
        if( ssl->in_hslen < ssl->in_msglen )
   df962:	6f22      	ldr	r2, [r4, #112]	; 0x70
   df964:	4291      	cmp	r1, r2
   df966:	d22a      	bcs.n	df9be <mbedtls_ssl_read_record+0x7e>
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
   df968:	6e60      	ldr	r0, [r4, #100]	; 0x64
            ssl->in_msglen -= ssl->in_hslen;
   df96a:	1a52      	subs	r2, r2, r1
   df96c:	6722      	str	r2, [r4, #112]	; 0x70
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
   df96e:	4401      	add	r1, r0
   df970:	f009 fa4a 	bl	e8e08 <memmove>
        ssl->in_hslen   = 0;
   df974:	67a6      	str	r6, [r4, #120]	; 0x78
    if( ssl->in_msglen > 0 )
   df976:	6f23      	ldr	r3, [r4, #112]	; 0x70
   df978:	2b00      	cmp	r3, #0
   df97a:	f040 80f9 	bne.w	dfb70 <mbedtls_ssl_read_record+0x230>
    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
   df97e:	2105      	movs	r1, #5
   df980:	4620      	mov	r0, r4
   df982:	f7ff fdcf 	bl	df524 <mbedtls_ssl_fetch_input>
   df986:	4605      	mov	r5, r0
   df988:	2800      	cmp	r0, #0
   df98a:	f040 80b0 	bne.w	dfaee <mbedtls_ssl_read_record+0x1ae>
    ssl->in_msgtype =  ssl->in_hdr[0];
   df98e:	6da2      	ldr	r2, [r4, #88]	; 0x58
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
   df990:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    ssl->in_msgtype =  ssl->in_hdr[0];
   df992:	7813      	ldrb	r3, [r2, #0]
   df994:	66e3      	str	r3, [r4, #108]	; 0x6c
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
   df996:	8809      	ldrh	r1, [r1, #0]
    mbedtls_ssl_read_version( &major_ver, &minor_ver, ssl->conf->transport, ssl->in_hdr + 1 );
   df998:	6820      	ldr	r0, [r4, #0]
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
   df99a:	ba49      	rev16	r1, r1
   df99c:	b289      	uxth	r1, r1
        ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC &&
   df99e:	3b14      	subs	r3, #20
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
   df9a0:	6721      	str	r1, [r4, #112]	; 0x70
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
   df9a2:	2b03      	cmp	r3, #3
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
   df9a4:	7855      	ldrb	r5, [r2, #1]
        *minor = ver[1];
   df9a6:	7892      	ldrb	r2, [r2, #2]
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
   df9a8:	d90f      	bls.n	df9ca <mbedtls_ssl_read_record+0x8a>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   df9aa:	220a      	movs	r2, #10
   df9ac:	2102      	movs	r1, #2
   df9ae:	4620      	mov	r0, r4
   df9b0:	f7ff ffac 	bl	df90c <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   df9b4:	4d80      	ldr	r5, [pc, #512]	; (dfbb8 <mbedtls_ssl_read_record+0x278>)
}
   df9b6:	4628      	mov	r0, r5
   df9b8:	b011      	add	sp, #68	; 0x44
   df9ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            ssl->in_msglen = 0;
   df9be:	6723      	str	r3, [r4, #112]	; 0x70
   df9c0:	e7d8      	b.n	df974 <mbedtls_ssl_read_record+0x34>
    else if( ssl->in_offt != NULL )
   df9c2:	2b00      	cmp	r3, #0
   df9c4:	d1d7      	bne.n	df976 <mbedtls_ssl_read_record+0x36>
        ssl->in_msglen = 0;
   df9c6:	6723      	str	r3, [r4, #112]	; 0x70
            if( ret != 0 )
   df9c8:	e7d5      	b.n	df976 <mbedtls_ssl_read_record+0x36>
    if( major_ver != ssl->major_ver )
   df9ca:	68a3      	ldr	r3, [r4, #8]
   df9cc:	429d      	cmp	r5, r3
   df9ce:	d1f1      	bne.n	df9b4 <mbedtls_ssl_read_record+0x74>
    if( minor_ver > ssl->conf->max_minor_ver )
   df9d0:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
   df9d4:	4293      	cmp	r3, r2
   df9d6:	d3ed      	bcc.n	df9b4 <mbedtls_ssl_read_record+0x74>
                         - (size_t)( ssl->in_msg - ssl->in_buf ) )
   df9d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   df9da:	6d22      	ldr	r2, [r4, #80]	; 0x50
   df9dc:	1a9b      	subs	r3, r3, r2
   df9de:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
   df9e2:	332d      	adds	r3, #45	; 0x2d
    if( ssl->in_msglen > MBEDTLS_SSL_IN_BUFFER_LEN
   df9e4:	4299      	cmp	r1, r3
   df9e6:	d8e5      	bhi.n	df9b4 <mbedtls_ssl_read_record+0x74>
    if( ssl->transform_in == NULL )
   df9e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   df9ea:	b9e3      	cbnz	r3, dfa26 <mbedtls_ssl_read_record+0xe6>
        if( ssl->in_msglen < 1 ||
   df9ec:	1e4b      	subs	r3, r1, #1
   df9ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   df9f2:	d2df      	bcs.n	df9b4 <mbedtls_ssl_read_record+0x74>
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
   df9f4:	3105      	adds	r1, #5
   df9f6:	4620      	mov	r0, r4
   df9f8:	f7ff fd94 	bl	df524 <mbedtls_ssl_fetch_input>
   df9fc:	4605      	mov	r5, r0
   df9fe:	2800      	cmp	r0, #0
   dfa00:	d175      	bne.n	dfaee <mbedtls_ssl_read_record+0x1ae>
    if( !done && ssl->transform_in != NULL )
   dfa02:	6b65      	ldr	r5, [r4, #52]	; 0x34
        ssl->in_left = 0;
   dfa04:	6760      	str	r0, [r4, #116]	; 0x74
    if( !done && ssl->transform_in != NULL )
   dfa06:	2d00      	cmp	r5, #0
   dfa08:	f000 80b2 	beq.w	dfb70 <mbedtls_ssl_read_record+0x230>
    if( ssl->session_in == NULL || ssl->transform_in == NULL )
   dfa0c:	6a23      	ldr	r3, [r4, #32]
   dfa0e:	2b00      	cmp	r3, #0
   dfa10:	d0a5      	beq.n	df95e <mbedtls_ssl_read_record+0x1e>
    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_in->cipher_ctx_dec );
   dfa12:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
    if( ctx->cipher_info == NULL )
   dfa16:	b103      	cbz	r3, dfa1a <mbedtls_ssl_read_record+0xda>
    return ctx->cipher_info->mode;
   dfa18:	785b      	ldrb	r3, [r3, #1]
    if( ssl->in_msglen < ssl->transform_in->minlen )
   dfa1a:	6f22      	ldr	r2, [r4, #112]	; 0x70
   dfa1c:	68a9      	ldr	r1, [r5, #8]
   dfa1e:	428a      	cmp	r2, r1
   dfa20:	d20c      	bcs.n	dfa3c <mbedtls_ssl_read_record+0xfc>
                return( MBEDTLS_ERR_SSL_INVALID_MAC );
   dfa22:	4d66      	ldr	r5, [pc, #408]	; (dfbbc <mbedtls_ssl_read_record+0x27c>)
   dfa24:	e7c7      	b.n	df9b6 <mbedtls_ssl_read_record+0x76>
        if( ssl->in_msglen < ssl->transform_in->minlen )
   dfa26:	689b      	ldr	r3, [r3, #8]
   dfa28:	4299      	cmp	r1, r3
   dfa2a:	d3c3      	bcc.n	df9b4 <mbedtls_ssl_read_record+0x74>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
   dfa2c:	68e2      	ldr	r2, [r4, #12]
   dfa2e:	2a00      	cmp	r2, #0
   dfa30:	dde0      	ble.n	df9f4 <mbedtls_ssl_read_record+0xb4>
                             MBEDTLS_SSL_IN_CONTENT_LEN + 256 )
   dfa32:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
   dfa36:	4299      	cmp	r1, r3
   dfa38:	d9dc      	bls.n	df9f4 <mbedtls_ssl_read_record+0xb4>
   dfa3a:	e7bb      	b.n	df9b4 <mbedtls_ssl_read_record+0x74>
    if( mode == MBEDTLS_MODE_GCM ||
   dfa3c:	2b06      	cmp	r3, #6
   dfa3e:	d003      	beq.n	dfa48 <mbedtls_ssl_read_record+0x108>
   dfa40:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   dfa44:	2b08      	cmp	r3, #8
   dfa46:	d18a      	bne.n	df95e <mbedtls_ssl_read_record+0x1e>
        unsigned char taglen = transform->ciphersuite_info->flags &
   dfa48:	682b      	ldr	r3, [r5, #0]
        size_t explicit_iv_len = transform->ivlen - transform->fixed_ivlen;
   dfa4a:	e9d5 1003 	ldrd	r1, r0, [r5, #12]
        unsigned char taglen = transform->ciphersuite_info->flags &
   dfa4e:	7f1b      	ldrb	r3, [r3, #28]
   dfa50:	f013 0f02 	tst.w	r3, #2
   dfa54:	bf14      	ite	ne
   dfa56:	f04f 0e08 	movne.w	lr, #8
   dfa5a:	f04f 0e10 	moveq.w	lr, #16
        size_t explicit_iv_len = transform->ivlen - transform->fixed_ivlen;
   dfa5e:	1a0b      	subs	r3, r1, r0
        if( ssl->in_msglen < explicit_iv_len + taglen )
   dfa60:	4473      	add	r3, lr
   dfa62:	429a      	cmp	r2, r3
   dfa64:	d3dd      	bcc.n	dfa22 <mbedtls_ssl_read_record+0xe2>
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
   dfa66:	eb02 0800 	add.w	r8, r2, r0
   dfa6a:	eba8 0801 	sub.w	r8, r8, r1
   dfa6e:	eba8 080e 	sub.w	r8, r8, lr
        memcpy( add_data, ssl->in_ctr, 8 );
   dfa72:	6d63      	ldr	r3, [r4, #84]	; 0x54
        ssl->in_msglen = dec_msglen;
   dfa74:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
        memcpy( add_data, ssl->in_ctr, 8 );
   dfa78:	6859      	ldr	r1, [r3, #4]
   dfa7a:	6818      	ldr	r0, [r3, #0]
        add_data[12] = ssl->in_msglen & 0xFF;
   dfa7c:	f88d 803c 	strb.w	r8, [sp, #60]	; 0x3c
        memcpy( add_data, ssl->in_ctr, 8 );
   dfa80:	aa0c      	add	r2, sp, #48	; 0x30
   dfa82:	c203      	stmia	r2!, {r0, r1}
        add_data[8]  = ssl->in_msgtype;
   dfa84:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   dfa86:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
        ver[0] = (unsigned char) major;
   dfa8a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
        ver[1] = (unsigned char) minor;
   dfa8e:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
   dfa92:	ea4f 2218 	mov.w	r2, r8, lsr #8
   dfa96:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
   dfa9a:	68ea      	ldr	r2, [r5, #12]
        dec_msg = ssl->in_msg;
   dfa9c:	f8d4 9064 	ldr.w	r9, [r4, #100]	; 0x64
        ver[0] = (unsigned char) major;
   dfaa0:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
   dfaa4:	2a0c      	cmp	r2, #12
   dfaa6:	f47f af5a 	bne.w	df95e <mbedtls_ssl_read_record+0x1e>
   dfaaa:	692a      	ldr	r2, [r5, #16]
   dfaac:	2a04      	cmp	r2, #4
   dfaae:	d123      	bne.n	dfaf8 <mbedtls_ssl_read_record+0x1b8>
            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );
   dfab0:	6aab      	ldr	r3, [r5, #40]	; 0x28
            memcpy( iv + transform->fixed_ivlen, ssl->in_iv, 8 );
   dfab2:	6e22      	ldr	r2, [r4, #96]	; 0x60
            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );
   dfab4:	9309      	str	r3, [sp, #36]	; 0x24
            memcpy( iv + transform->fixed_ivlen, ssl->in_iv, 8 );
   dfab6:	6810      	ldr	r0, [r2, #0]
   dfab8:	6851      	ldr	r1, [r2, #4]
   dfaba:	ab0a      	add	r3, sp, #40	; 0x28
   dfabc:	c303      	stmia	r3!, {r0, r1}
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
   dfabe:	eb09 0308 	add.w	r3, r9, r8
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
   dfac2:	9305      	str	r3, [sp, #20]
   dfac4:	ab08      	add	r3, sp, #32
   dfac6:	e9cd 9303 	strd	r9, r3, [sp, #12]
   dfaca:	230d      	movs	r3, #13
   dfacc:	9300      	str	r3, [sp, #0]
   dface:	f105 0088 	add.w	r0, r5, #136	; 0x88
   dfad2:	e9cd 9801 	strd	r9, r8, [sp, #4]
   dfad6:	f8cd e018 	str.w	lr, [sp, #24]
   dfada:	ab0c      	add	r3, sp, #48	; 0x30
   dfadc:	220c      	movs	r2, #12
   dfade:	a909      	add	r1, sp, #36	; 0x24
   dfae0:	f7f6 fcda 	bl	d6498 <mbedtls_cipher_auth_decrypt>
   dfae4:	4605      	mov	r5, r0
   dfae6:	b308      	cbz	r0, dfb2c <mbedtls_ssl_read_record+0x1ec>
            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
   dfae8:	f510 4fc6 	cmn.w	r0, #25344	; 0x6300
   dfaec:	d099      	beq.n	dfa22 <mbedtls_ssl_read_record+0xe2>
                    if( ret == MBEDTLS_ERR_SSL_CONTINUE_PROCESSING )
   dfaee:	f515 4fcb 	cmn.w	r5, #25984	; 0x6580
   dfaf2:	f47f af60 	bne.w	df9b6 <mbedtls_ssl_read_record+0x76>
   dfaf6:	e72d      	b.n	df954 <mbedtls_ssl_read_record+0x14>
        else if( transform->ivlen == 12 && transform->fixed_ivlen == 12 )
   dfaf8:	2a0c      	cmp	r2, #12
   dfafa:	f47f af30 	bne.w	df95e <mbedtls_ssl_read_record+0x1e>
            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );
   dfafe:	46ac      	mov	ip, r5
   dfb00:	aa09      	add	r2, sp, #36	; 0x24
   dfb02:	f85c 0f28 	ldr.w	r0, [ip, #40]!
   dfb06:	f8dc 1004 	ldr.w	r1, [ip, #4]
   dfb0a:	c203      	stmia	r2!, {r0, r1}
   dfb0c:	f8dc 0008 	ldr.w	r0, [ip, #8]
   dfb10:	6010      	str	r0, [r2, #0]
            for( i = 0; i < 8; i++ )
   dfb12:	a90a      	add	r1, sp, #40	; 0x28
   dfb14:	1e5a      	subs	r2, r3, #1
   dfb16:	3307      	adds	r3, #7
                iv[i+4] ^= ssl->in_ctr[i];
   dfb18:	f812 cf01 	ldrb.w	ip, [r2, #1]!
   dfb1c:	7808      	ldrb	r0, [r1, #0]
            for( i = 0; i < 8; i++ )
   dfb1e:	429a      	cmp	r2, r3
                iv[i+4] ^= ssl->in_ctr[i];
   dfb20:	ea80 000c 	eor.w	r0, r0, ip
   dfb24:	f801 0b01 	strb.w	r0, [r1], #1
            for( i = 0; i < 8; i++ )
   dfb28:	d1f6      	bne.n	dfb18 <mbedtls_ssl_read_record+0x1d8>
   dfb2a:	e7c8      	b.n	dfabe <mbedtls_ssl_read_record+0x17e>
        if( olen != dec_msglen )
   dfb2c:	9b08      	ldr	r3, [sp, #32]
   dfb2e:	4598      	cmp	r8, r3
   dfb30:	f47f af15 	bne.w	df95e <mbedtls_ssl_read_record+0x1e>
    if( ssl->in_msglen == 0 )
   dfb34:	6f23      	ldr	r3, [r4, #112]	; 0x70
   dfb36:	b10b      	cbz	r3, dfb3c <mbedtls_ssl_read_record+0x1fc>
        ssl->nb_zero = 0;
   dfb38:	67e0      	str	r0, [r4, #124]	; 0x7c
   dfb3a:	e00c      	b.n	dfb56 <mbedtls_ssl_read_record+0x216>
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
   dfb3c:	68e3      	ldr	r3, [r4, #12]
   dfb3e:	2b03      	cmp	r3, #3
   dfb40:	d103      	bne.n	dfb4a <mbedtls_ssl_read_record+0x20a>
            && ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
   dfb42:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   dfb44:	2b17      	cmp	r3, #23
   dfb46:	f47f af35 	bne.w	df9b4 <mbedtls_ssl_read_record+0x74>
        ssl->nb_zero++;
   dfb4a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   dfb4c:	3301      	adds	r3, #1
        if( ssl->nb_zero > 3 )
   dfb4e:	2b03      	cmp	r3, #3
        ssl->nb_zero++;
   dfb50:	67e3      	str	r3, [r4, #124]	; 0x7c
        if( ssl->nb_zero > 3 )
   dfb52:	f73f af66 	bgt.w	dfa22 <mbedtls_ssl_read_record+0xe2>
        unsigned char taglen = transform->ciphersuite_info->flags &
   dfb56:	2207      	movs	r2, #7
            if( ++ssl->in_ctr[i - 1] != 0 )
   dfb58:	6d61      	ldr	r1, [r4, #84]	; 0x54
   dfb5a:	5c8b      	ldrb	r3, [r1, r2]
   dfb5c:	3301      	adds	r3, #1
   dfb5e:	b2db      	uxtb	r3, r3
   dfb60:	548b      	strb	r3, [r1, r2]
   dfb62:	3a01      	subs	r2, #1
   dfb64:	b1f3      	cbz	r3, dfba4 <mbedtls_ssl_read_record+0x264>
        if( ssl->in_msglen > MBEDTLS_SSL_IN_CONTENT_LEN )
   dfb66:	6f23      	ldr	r3, [r4, #112]	; 0x70
   dfb68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   dfb6c:	f63f af22 	bhi.w	df9b4 <mbedtls_ssl_read_record+0x74>
            ret = mbedtls_ssl_handle_message_type( ssl );
   dfb70:	4620      	mov	r0, r4
   dfb72:	f7ff fe91 	bl	df898 <mbedtls_ssl_handle_message_type>
        } while( MBEDTLS_ERR_SSL_NON_FATAL           == ret  ||
   dfb76:	f510 4fcd 	cmn.w	r0, #26240	; 0x6680
            ret = mbedtls_ssl_handle_message_type( ssl );
   dfb7a:	4605      	mov	r5, r0
        } while( MBEDTLS_ERR_SSL_NON_FATAL           == ret  ||
   dfb7c:	f43f aeea 	beq.w	df954 <mbedtls_ssl_read_record+0x14>
   dfb80:	f510 4fcb 	cmn.w	r0, #25984	; 0x6580
   dfb84:	f43f aee6 	beq.w	df954 <mbedtls_ssl_read_record+0x14>
        if( 0 != ret )
   dfb88:	2800      	cmp	r0, #0
   dfb8a:	f47f af14 	bne.w	df9b6 <mbedtls_ssl_read_record+0x76>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
   dfb8e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   dfb90:	2b16      	cmp	r3, #22
   dfb92:	f47f af10 	bne.w	df9b6 <mbedtls_ssl_read_record+0x76>
   dfb96:	2f01      	cmp	r7, #1
   dfb98:	f47f af0d 	bne.w	df9b6 <mbedtls_ssl_read_record+0x76>
            mbedtls_ssl_update_handshake_status( ssl );
   dfb9c:	4620      	mov	r0, r4
   dfb9e:	f7ff fe69 	bl	df874 <mbedtls_ssl_update_handshake_status>
   dfba2:	e708      	b.n	df9b6 <mbedtls_ssl_read_record+0x76>
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
   dfba4:	1c53      	adds	r3, r2, #1
   dfba6:	d1d7      	bne.n	dfb58 <mbedtls_ssl_read_record+0x218>
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
   dfba8:	4d05      	ldr	r5, [pc, #20]	; (dfbc0 <mbedtls_ssl_read_record+0x280>)
   dfbaa:	e704      	b.n	df9b6 <mbedtls_ssl_read_record+0x76>
        ssl->keep_current_message = 0;
   dfbac:	2500      	movs	r5, #0
   dfbae:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
   dfbb2:	e700      	b.n	df9b6 <mbedtls_ssl_read_record+0x76>
   dfbb4:	ffff9400 	.word	0xffff9400
   dfbb8:	ffff8e00 	.word	0xffff8e00
   dfbbc:	ffff8e80 	.word	0xffff8e80
   dfbc0:	ffff9480 	.word	0xffff9480

000dfbc4 <mbedtls_ssl_write_certificate>:
{
   dfbc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
   dfbc8:	6c03      	ldr	r3, [r0, #64]	; 0x40
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   dfbca:	681b      	ldr	r3, [r3, #0]
   dfbcc:	7a9a      	ldrb	r2, [r3, #10]
   dfbce:	2a0b      	cmp	r2, #11
{
   dfbd0:	4604      	mov	r4, r0
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   dfbd2:	d80a      	bhi.n	dfbea <mbedtls_ssl_write_certificate+0x26>
   dfbd4:	f44f 6316 	mov.w	r3, #2400	; 0x960
   dfbd8:	40d3      	lsrs	r3, r2
   dfbda:	07da      	lsls	r2, r3, #31
   dfbdc:	d505      	bpl.n	dfbea <mbedtls_ssl_write_certificate+0x26>
        ssl->state++;
   dfbde:	6863      	ldr	r3, [r4, #4]
   dfbe0:	3301      	adds	r3, #1
   dfbe2:	6063      	str	r3, [r4, #4]
        return( 0 );
   dfbe4:	2000      	movs	r0, #0
}
   dfbe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   dfbea:	6822      	ldr	r2, [r4, #0]
   dfbec:	f892 307c 	ldrb.w	r3, [r2, #124]	; 0x7c
   dfbf0:	07db      	lsls	r3, r3, #31
   dfbf2:	d403      	bmi.n	dfbfc <mbedtls_ssl_write_certificate+0x38>
        if( ssl->client_auth == 0 )
   dfbf4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   dfbf8:	2b00      	cmp	r3, #0
   dfbfa:	d0f0      	beq.n	dfbde <mbedtls_ssl_write_certificate+0x1a>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
   dfbfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   dfbfe:	b113      	cbz	r3, dfc06 <mbedtls_ssl_write_certificate+0x42>
   dfc00:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   dfc04:	b90b      	cbnz	r3, dfc0a <mbedtls_ssl_write_certificate+0x46>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
   dfc06:	6d13      	ldr	r3, [r2, #80]	; 0x50

    return( key_cert == NULL ? NULL : key_cert->cert );
   dfc08:	b31b      	cbz	r3, dfc52 <mbedtls_ssl_write_certificate+0x8e>
   dfc0a:	681e      	ldr	r6, [r3, #0]
        if( n > MBEDTLS_SSL_OUT_CONTENT_LEN - 3 - i )
   dfc0c:	f641 77fd 	movw	r7, #8189	; 0x1ffd
   dfc10:	2307      	movs	r3, #7
    while( crt != NULL )
   dfc12:	b1fe      	cbz	r6, dfc54 <mbedtls_ssl_write_certificate+0x90>
        n = crt->raw.len;
   dfc14:	6875      	ldr	r5, [r6, #4]
        if( n > MBEDTLS_SSL_OUT_CONTENT_LEN - 3 - i )
   dfc16:	1afa      	subs	r2, r7, r3
   dfc18:	42aa      	cmp	r2, r5
   dfc1a:	d338      	bcc.n	dfc8e <mbedtls_ssl_write_certificate+0xca>
        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
   dfc1c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   dfc20:	0c29      	lsrs	r1, r5, #16
   dfc22:	54d1      	strb	r1, [r2, r3]
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
   dfc24:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   dfc28:	441a      	add	r2, r3
   dfc2a:	0a29      	lsrs	r1, r5, #8
   dfc2c:	7051      	strb	r1, [r2, #1]
        ssl->out_msg[i + 2] = (unsigned char)( n       );
   dfc2e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   dfc32:	441a      	add	r2, r3
        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
   dfc34:	f103 0803 	add.w	r8, r3, #3
        ssl->out_msg[i + 2] = (unsigned char)( n       );
   dfc38:	7095      	strb	r5, [r2, #2]
        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
   dfc3a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   dfc3e:	68b1      	ldr	r1, [r6, #8]
   dfc40:	462a      	mov	r2, r5
   dfc42:	4440      	add	r0, r8
   dfc44:	f009 f8d2 	bl	e8dec <memcpy>
        i += n; crt = crt->next;
   dfc48:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
   dfc4c:	eb05 0308 	add.w	r3, r5, r8
    while( crt != NULL )
   dfc50:	e7df      	b.n	dfc12 <mbedtls_ssl_write_certificate+0x4e>
   dfc52:	2307      	movs	r3, #7
    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
   dfc54:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   dfc58:	1fda      	subs	r2, r3, #7
   dfc5a:	0c10      	lsrs	r0, r2, #16
   dfc5c:	7108      	strb	r0, [r1, #4]
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
   dfc5e:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   dfc62:	0a10      	lsrs	r0, r2, #8
   dfc64:	7148      	strb	r0, [r1, #5]
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
   dfc66:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   dfc6a:	718a      	strb	r2, [r1, #6]
    ssl->out_msglen  = i;
   dfc6c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   dfc70:	2316      	movs	r3, #22
   dfc72:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
   dfc76:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   dfc7a:	220b      	movs	r2, #11
   dfc7c:	701a      	strb	r2, [r3, #0]
    ssl->state++;
   dfc7e:	6863      	ldr	r3, [r4, #4]
   dfc80:	3301      	adds	r3, #1
   dfc82:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   dfc84:	4620      	mov	r0, r4
}
   dfc86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   dfc8a:	f7ff bda1 	b.w	df7d0 <mbedtls_ssl_write_handshake_msg>
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
   dfc8e:	4801      	ldr	r0, [pc, #4]	; (dfc94 <mbedtls_ssl_write_certificate+0xd0>)
   dfc90:	e7a9      	b.n	dfbe6 <mbedtls_ssl_write_certificate+0x22>
   dfc92:	bf00      	nop
   dfc94:	ffff8b00 	.word	0xffff8b00

000dfc98 <mbedtls_ssl_write_change_cipher_spec>:
    ssl->out_msglen  = 1;
   dfc98:	2201      	movs	r2, #1
   dfc9a:	2114      	movs	r1, #20
   dfc9c:	e9c0 1227 	strd	r1, r2, [r0, #156]	; 0x9c
    ssl->out_msg[0]  = 1;
   dfca0:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
   dfca4:	700a      	strb	r2, [r1, #0]
    ssl->state++;
   dfca6:	6842      	ldr	r2, [r0, #4]
   dfca8:	3201      	adds	r2, #1
   dfcaa:	6042      	str	r2, [r0, #4]
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   dfcac:	f7ff bd90 	b.w	df7d0 <mbedtls_ssl_write_handshake_msg>

000dfcb0 <mbedtls_ssl_parse_change_cipher_spec>:
{
   dfcb0:	b510      	push	{r4, lr}
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   dfcb2:	2101      	movs	r1, #1
{
   dfcb4:	4604      	mov	r4, r0
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   dfcb6:	f7ff fe43 	bl	df940 <mbedtls_ssl_read_record>
   dfcba:	b940      	cbnz	r0, dfcce <mbedtls_ssl_parse_change_cipher_spec+0x1e>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
   dfcbc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   dfcbe:	2b14      	cmp	r3, #20
   dfcc0:	d006      	beq.n	dfcd0 <mbedtls_ssl_parse_change_cipher_spec+0x20>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   dfcc2:	220a      	movs	r2, #10
   dfcc4:	2102      	movs	r1, #2
   dfcc6:	4620      	mov	r0, r4
   dfcc8:	f7ff fe20 	bl	df90c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   dfccc:	480f      	ldr	r0, [pc, #60]	; (dfd0c <mbedtls_ssl_parse_change_cipher_spec+0x5c>)
}
   dfcce:	bd10      	pop	{r4, pc}
    ssl->transform_in = ssl->transform_negotiate;
   dfcd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
   dfcd2:	6363      	str	r3, [r4, #52]	; 0x34
    ssl->session_in = ssl->session_negotiate;
   dfcd4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   dfcd6:	6223      	str	r3, [r4, #32]
    memset( ssl->in_ctr, 0, 8 );
   dfcd8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   dfcda:	6018      	str	r0, [r3, #0]
   dfcdc:	6058      	str	r0, [r3, #4]
        ssl->in_ctr = ssl->in_hdr - 8;
   dfcde:	6da3      	ldr	r3, [r4, #88]	; 0x58
    ssl_update_in_pointers( ssl, ssl->transform_negotiate );
   dfce0:	6c21      	ldr	r1, [r4, #64]	; 0x40
        ssl->in_ctr = ssl->in_hdr - 8;
   dfce2:	f1a3 0208 	sub.w	r2, r3, #8
   dfce6:	6562      	str	r2, [r4, #84]	; 0x54
        ssl->in_len = ssl->in_hdr + 3;
   dfce8:	1cda      	adds	r2, r3, #3
        ssl->in_iv  = ssl->in_hdr + 5;
   dfcea:	3305      	adds	r3, #5
        ssl->in_len = ssl->in_hdr + 3;
   dfcec:	65e2      	str	r2, [r4, #92]	; 0x5c
        ssl->in_iv  = ssl->in_hdr + 5;
   dfcee:	6623      	str	r3, [r4, #96]	; 0x60
    if( transform != NULL &&
   dfcf0:	b131      	cbz	r1, dfd00 <mbedtls_ssl_parse_change_cipher_spec+0x50>
   dfcf2:	68e2      	ldr	r2, [r4, #12]
   dfcf4:	2a01      	cmp	r2, #1
        ssl->in_msg = ssl->in_iv + transform->ivlen - transform->fixed_ivlen;
   dfcf6:	bfc2      	ittt	gt
   dfcf8:	e9d1 2103 	ldrdgt	r2, r1, [r1, #12]
   dfcfc:	1a52      	subgt	r2, r2, r1
   dfcfe:	189b      	addgt	r3, r3, r2
   dfd00:	6663      	str	r3, [r4, #100]	; 0x64
    ssl->state++;
   dfd02:	6863      	ldr	r3, [r4, #4]
   dfd04:	3301      	adds	r3, #1
   dfd06:	6063      	str	r3, [r4, #4]
    return( 0 );
   dfd08:	e7e1      	b.n	dfcce <mbedtls_ssl_parse_change_cipher_spec+0x1e>
   dfd0a:	bf00      	nop
   dfd0c:	ffff8900 	.word	0xffff8900

000dfd10 <mbedtls_ssl_optimize_checksum>:
    if( ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
   dfd10:	7a4a      	ldrb	r2, [r1, #9]
   dfd12:	6b03      	ldr	r3, [r0, #48]	; 0x30
   dfd14:	2a07      	cmp	r2, #7
        ssl->handshake->update_checksum = ssl_update_checksum_sha384;
   dfd16:	bf0c      	ite	eq
   dfd18:	4a02      	ldreq	r2, [pc, #8]	; (dfd24 <mbedtls_ssl_optimize_checksum+0x14>)
        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
   dfd1a:	4a03      	ldrne	r2, [pc, #12]	; (dfd28 <mbedtls_ssl_optimize_checksum+0x18>)
   dfd1c:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
}
   dfd20:	4770      	bx	lr
   dfd22:	bf00      	nop
   dfd24:	000df137 	.word	0x000df137
   dfd28:	000df12d 	.word	0x000df12d

000dfd2c <mbedtls_ssl_write_finished>:
{
   dfd2c:	b510      	push	{r4, lr}
    ssl_update_out_pointers( ssl, ssl->transform_negotiate );
   dfd2e:	6c01      	ldr	r1, [r0, #64]	; 0x40
{
   dfd30:	4604      	mov	r4, r0
    ssl_update_out_pointers( ssl, ssl->transform_negotiate );
   dfd32:	f7ff f879 	bl	dee28 <_ZL23ssl_update_out_pointersP19mbedtls_ssl_contextP21mbedtls_ssl_transform>
    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
   dfd36:	6803      	ldr	r3, [r0, #0]
   dfd38:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
   dfd3c:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   dfd40:	6b03      	ldr	r3, [r0, #48]	; 0x30
   dfd42:	f002 0201 	and.w	r2, r2, #1
   dfd46:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
   dfd4a:	3104      	adds	r1, #4
   dfd4c:	4798      	blx	r3
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
   dfd4e:	68e3      	ldr	r3, [r4, #12]
   dfd50:	2b00      	cmp	r3, #0
    ssl->out_msglen  = 4 + hash_len;
   dfd52:	bf14      	ite	ne
   dfd54:	2310      	movne	r3, #16
   dfd56:	2328      	moveq	r3, #40	; 0x28
   dfd58:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   dfd5c:	2316      	movs	r3, #22
   dfd5e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
   dfd62:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   dfd66:	2214      	movs	r2, #20
   dfd68:	701a      	strb	r2, [r3, #0]
    if( ssl->handshake->resume != 0 )
   dfd6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   dfd6c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
   dfd70:	b1a3      	cbz	r3, dfd9c <mbedtls_ssl_write_finished+0x70>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   dfd72:	6823      	ldr	r3, [r4, #0]
   dfd74:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   dfd78:	07db      	lsls	r3, r3, #31
   dfd7a:	d401      	bmi.n	dfd80 <mbedtls_ssl_write_finished+0x54>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
   dfd7c:	230f      	movs	r3, #15
        ssl->state++;
   dfd7e:	6063      	str	r3, [r4, #4]
    memset( ssl->cur_out_ctr, 0, 8 );
   dfd80:	2300      	movs	r3, #0
   dfd82:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   dfd86:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    ssl->transform_out = ssl->transform_negotiate;
   dfd8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   dfd8c:	63a3      	str	r3, [r4, #56]	; 0x38
    ssl->session_out = ssl->session_negotiate;
   dfd8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   dfd90:	6263      	str	r3, [r4, #36]	; 0x24
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   dfd92:	4620      	mov	r0, r4
}
   dfd94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   dfd98:	f7ff bd1a 	b.w	df7d0 <mbedtls_ssl_write_handshake_msg>
        ssl->state++;
   dfd9c:	6863      	ldr	r3, [r4, #4]
   dfd9e:	3301      	adds	r3, #1
   dfda0:	e7ed      	b.n	dfd7e <mbedtls_ssl_write_finished+0x52>
	...

000dfda4 <mbedtls_ssl_parse_finished>:
{
   dfda4:	b5f0      	push	{r4, r5, r6, r7, lr}
    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
   dfda6:	6803      	ldr	r3, [r0, #0]
   dfda8:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   dfdac:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
   dfdae:	b085      	sub	sp, #20
    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
   dfdb0:	43d2      	mvns	r2, r2
   dfdb2:	ae01      	add	r6, sp, #4
{
   dfdb4:	4604      	mov	r4, r0
    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
   dfdb6:	4631      	mov	r1, r6
   dfdb8:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
   dfdbc:	f002 0201 	and.w	r2, r2, #1
   dfdc0:	4798      	blx	r3
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   dfdc2:	2101      	movs	r1, #1
   dfdc4:	4620      	mov	r0, r4
   dfdc6:	f7ff fdbb 	bl	df940 <mbedtls_ssl_read_record>
   dfdca:	b940      	cbnz	r0, dfdde <mbedtls_ssl_parse_finished+0x3a>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   dfdcc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   dfdce:	2b16      	cmp	r3, #22
   dfdd0:	d007      	beq.n	dfde2 <mbedtls_ssl_parse_finished+0x3e>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   dfdd2:	220a      	movs	r2, #10
   dfdd4:	2102      	movs	r1, #2
   dfdd6:	4620      	mov	r0, r4
   dfdd8:	f7ff fd98 	bl	df90c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   dfddc:	481a      	ldr	r0, [pc, #104]	; (dfe48 <mbedtls_ssl_parse_finished+0xa4>)
}
   dfdde:	b005      	add	sp, #20
   dfde0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
   dfde2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   dfde4:	7813      	ldrb	r3, [r2, #0]
   dfde6:	2b14      	cmp	r3, #20
   dfde8:	d102      	bne.n	dfdf0 <mbedtls_ssl_parse_finished+0x4c>
   dfdea:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   dfdec:	2b10      	cmp	r3, #16
   dfdee:	d006      	beq.n	dfdfe <mbedtls_ssl_parse_finished+0x5a>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   dfdf0:	2232      	movs	r2, #50	; 0x32
   dfdf2:	2102      	movs	r1, #2
   dfdf4:	4620      	mov	r0, r4
   dfdf6:	f7ff fd89 	bl	df90c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
   dfdfa:	4814      	ldr	r0, [pc, #80]	; (dfe4c <mbedtls_ssl_parse_finished+0xa8>)
   dfdfc:	e7ef      	b.n	dfdde <mbedtls_ssl_parse_finished+0x3a>
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;
   dfdfe:	f88d 0003 	strb.w	r0, [sp, #3]

    for( i = 0; i < n; i++ )
   dfe02:	4603      	mov	r3, r0
   dfe04:	3204      	adds	r2, #4
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
   dfe06:	5cd5      	ldrb	r5, [r2, r3]
   dfe08:	5cf7      	ldrb	r7, [r6, r3]
        diff |= x ^ y;
   dfe0a:	f89d 1003 	ldrb.w	r1, [sp, #3]
   dfe0e:	407d      	eors	r5, r7
    for( i = 0; i < n; i++ )
   dfe10:	3301      	adds	r3, #1
        diff |= x ^ y;
   dfe12:	4329      	orrs	r1, r5
    for( i = 0; i < n; i++ )
   dfe14:	2b0c      	cmp	r3, #12
        diff |= x ^ y;
   dfe16:	f88d 1003 	strb.w	r1, [sp, #3]
    for( i = 0; i < n; i++ )
   dfe1a:	d1f4      	bne.n	dfe06 <mbedtls_ssl_parse_finished+0x62>
    }

    return( diff );
   dfe1c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
   dfe20:	2b00      	cmp	r3, #0
   dfe22:	d1e5      	bne.n	dfdf0 <mbedtls_ssl_parse_finished+0x4c>
    if( ssl->handshake->resume != 0 )
   dfe24:	6b23      	ldr	r3, [r4, #48]	; 0x30
   dfe26:	f8d3 2348 	ldr.w	r2, [r3, #840]	; 0x348
   dfe2a:	b13a      	cbz	r2, dfe3c <mbedtls_ssl_parse_finished+0x98>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   dfe2c:	6823      	ldr	r3, [r4, #0]
   dfe2e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   dfe32:	07db      	lsls	r3, r3, #31
   dfe34:	d4d3      	bmi.n	dfdde <mbedtls_ssl_parse_finished+0x3a>
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
   dfe36:	230a      	movs	r3, #10
   dfe38:	6063      	str	r3, [r4, #4]
   dfe3a:	e7d0      	b.n	dfdde <mbedtls_ssl_parse_finished+0x3a>
        ssl->state++;
   dfe3c:	6863      	ldr	r3, [r4, #4]
   dfe3e:	3301      	adds	r3, #1
   dfe40:	6063      	str	r3, [r4, #4]
    return( 0 );
   dfe42:	4610      	mov	r0, r2
   dfe44:	e7cb      	b.n	dfdde <mbedtls_ssl_parse_finished+0x3a>
   dfe46:	bf00      	nop
   dfe48:	ffff8900 	.word	0xffff8900
   dfe4c:	ffff8180 	.word	0xffff8180

000dfe50 <mbedtls_ssl_session_init>:
    memset( session, 0, sizeof(mbedtls_ssl_session) );
   dfe50:	2274      	movs	r2, #116	; 0x74
   dfe52:	2100      	movs	r1, #0
   dfe54:	f008 bff2 	b.w	e8e3c <memset>

000dfe58 <mbedtls_ssl_init>:
    memset( ssl, 0, sizeof( mbedtls_ssl_context ) );
   dfe58:	22bc      	movs	r2, #188	; 0xbc
   dfe5a:	2100      	movs	r1, #0
   dfe5c:	f008 bfee 	b.w	e8e3c <memset>

000dfe60 <mbedtls_ssl_conf_authmode>:
    conf->authmode   = authmode;
   dfe60:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
   dfe64:	f361 0383 	bfi	r3, r1, #2, #2
   dfe68:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
}
   dfe6c:	4770      	bx	lr

000dfe6e <mbedtls_ssl_conf_verify>:
    conf->p_vrfy      = p_vrfy;
   dfe6e:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
}
   dfe72:	4770      	bx	lr

000dfe74 <mbedtls_ssl_conf_rng>:
    conf->p_rng      = p_rng;
   dfe74:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
   dfe78:	4770      	bx	lr

000dfe7a <mbedtls_ssl_conf_dbg>:
    conf->p_dbg      = p_dbg;
   dfe7a:	e9c0 1204 	strd	r1, r2, [r0, #16]
}
   dfe7e:	4770      	bx	lr

000dfe80 <mbedtls_ssl_set_bio>:
    ssl->f_recv         = f_recv;
   dfe80:	e9c0 2304 	strd	r2, r3, [r0, #16]
    ssl->f_recv_timeout = f_recv_timeout;
   dfe84:	9b00      	ldr	r3, [sp, #0]
    ssl->p_bio          = p_bio;
   dfe86:	61c1      	str	r1, [r0, #28]
    ssl->f_recv_timeout = f_recv_timeout;
   dfe88:	6183      	str	r3, [r0, #24]
}
   dfe8a:	4770      	bx	lr

000dfe8c <mbedtls_ssl_set_timer_cb>:
{
   dfe8c:	b410      	push	{r4}
    ssl->f_set_timer    = f_set_timer;
   dfe8e:	e9c0 1211 	strd	r1, r2, [r0, #68]	; 0x44
}
   dfe92:	f85d 4b04 	ldr.w	r4, [sp], #4
    ssl->f_get_timer    = f_get_timer;
   dfe96:	64c3      	str	r3, [r0, #76]	; 0x4c
    ssl_set_timer( ssl, 0 );
   dfe98:	2100      	movs	r1, #0
   dfe9a:	f7fe bfbe 	b.w	dee1a <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>

000dfe9e <mbedtls_ssl_conf_own_cert>:
    return( ssl_append_key_cert( &conf->key_cert, own_cert, pk_key ) );
   dfe9e:	3050      	adds	r0, #80	; 0x50
   dfea0:	f7ff b928 	b.w	df0f4 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context>

000dfea4 <mbedtls_ssl_conf_ca_chain>:
    conf->ca_crl     = ca_crl;
   dfea4:	e9c0 1215 	strd	r1, r2, [r0, #84]	; 0x54
}
   dfea8:	4770      	bx	lr
	...

000dfeac <mbedtls_ssl_set_hostname>:
{
   dfeac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dfeae:	4606      	mov	r6, r0
    if( hostname != NULL )
   dfeb0:	460c      	mov	r4, r1
   dfeb2:	b139      	cbz	r1, dfec4 <mbedtls_ssl_set_hostname+0x18>
        hostname_len = strlen( hostname );
   dfeb4:	4608      	mov	r0, r1
   dfeb6:	f009 f80f 	bl	e8ed8 <strlen>
        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
   dfeba:	28ff      	cmp	r0, #255	; 0xff
        hostname_len = strlen( hostname );
   dfebc:	4605      	mov	r5, r0
        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
   dfebe:	d902      	bls.n	dfec6 <mbedtls_ssl_set_hostname+0x1a>
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   dfec0:	4813      	ldr	r0, [pc, #76]	; (dff10 <mbedtls_ssl_set_hostname+0x64>)
   dfec2:	e012      	b.n	dfeea <mbedtls_ssl_set_hostname+0x3e>
    size_t hostname_len = 0;
   dfec4:	460d      	mov	r5, r1
    if( ssl->hostname != NULL )
   dfec6:	f8d6 70b4 	ldr.w	r7, [r6, #180]	; 0xb4
   dfeca:	b157      	cbz	r7, dfee2 <mbedtls_ssl_set_hostname+0x36>
        mbedtls_platform_zeroize( ssl->hostname, strlen( ssl->hostname ) );
   dfecc:	4638      	mov	r0, r7
   dfece:	f009 f803 	bl	e8ed8 <strlen>
   dfed2:	4601      	mov	r1, r0
   dfed4:	4638      	mov	r0, r7
   dfed6:	f002 fe75 	bl	e2bc4 <mbedtls_platform_zeroize>
        mbedtls_free( ssl->hostname );
   dfeda:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   dfede:	f005 fd63 	bl	e59a8 <free>
    if( hostname == NULL )
   dfee2:	b91c      	cbnz	r4, dfeec <mbedtls_ssl_set_hostname+0x40>
        ssl->hostname = NULL;
   dfee4:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
    return( 0 );
   dfee8:	4620      	mov	r0, r4
}
   dfeea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ssl->hostname = (char *)mbedtls_calloc( 1, hostname_len + 1 );
   dfeec:	1c69      	adds	r1, r5, #1
   dfeee:	2001      	movs	r0, #1
   dfef0:	f008 ff04 	bl	e8cfc <calloc>
   dfef4:	4607      	mov	r7, r0
   dfef6:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
        if( ssl->hostname == NULL )
   dfefa:	b130      	cbz	r0, dff0a <mbedtls_ssl_set_hostname+0x5e>
        memcpy( ssl->hostname, hostname, hostname_len );
   dfefc:	4621      	mov	r1, r4
   dfefe:	462a      	mov	r2, r5
        ssl->hostname[hostname_len] = '\0';
   dff00:	2400      	movs	r4, #0
        memcpy( ssl->hostname, hostname, hostname_len );
   dff02:	f008 ff73 	bl	e8dec <memcpy>
        ssl->hostname[hostname_len] = '\0';
   dff06:	557c      	strb	r4, [r7, r5]
   dff08:	e7ee      	b.n	dfee8 <mbedtls_ssl_set_hostname+0x3c>
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   dff0a:	4802      	ldr	r0, [pc, #8]	; (dff14 <mbedtls_ssl_set_hostname+0x68>)
   dff0c:	e7ed      	b.n	dfeea <mbedtls_ssl_set_hostname+0x3e>
   dff0e:	bf00      	nop
   dff10:	ffff8f00 	.word	0xffff8f00
   dff14:	ffff8100 	.word	0xffff8100

000dff18 <mbedtls_ssl_conf_min_version>:
    conf->min_major_ver = major;
   dff18:	f880 107a 	strb.w	r1, [r0, #122]	; 0x7a
    conf->min_minor_ver = minor;
   dff1c:	f880 207b 	strb.w	r2, [r0, #123]	; 0x7b
}
   dff20:	4770      	bx	lr
	...

000dff24 <mbedtls_ssl_get_max_frag_len>:
    max_len = ssl_mfl_code_to_length( ssl->conf->mfl_code );
   dff24:	6803      	ldr	r3, [r0, #0]
   dff26:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
    switch( mfl )
   dff2a:	f3c3 1382 	ubfx	r3, r3, #6, #3
   dff2e:	3b01      	subs	r3, #1
   dff30:	2b03      	cmp	r3, #3
{
   dff32:	4602      	mov	r2, r0
   dff34:	bf9c      	itt	ls
   dff36:	4912      	ldrls	r1, [pc, #72]	; (dff80 <mbedtls_ssl_get_max_frag_len+0x5c>)
   dff38:	f831 0013 	ldrhls.w	r0, [r1, r3, lsl #1]
    if( ssl->session_out != NULL &&
   dff3c:	6a53      	ldr	r3, [r2, #36]	; 0x24
    switch( mfl )
   dff3e:	bf88      	it	hi
   dff40:	f44f 5000 	movhi.w	r0, #8192	; 0x2000
    if( ssl->session_out != NULL &&
   dff44:	b163      	cbz	r3, dff60 <mbedtls_ssl_get_max_frag_len+0x3c>
    switch( mfl )
   dff46:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   dff4a:	3b01      	subs	r3, #1
   dff4c:	2b03      	cmp	r3, #3
   dff4e:	bf9a      	itte	ls
   dff50:	490b      	ldrls	r1, [pc, #44]	; (dff80 <mbedtls_ssl_get_max_frag_len+0x5c>)
   dff52:	f831 3013 	ldrhls.w	r3, [r1, r3, lsl #1]
   dff56:	f44f 5300 	movhi.w	r3, #8192	; 0x2000
   dff5a:	4298      	cmp	r0, r3
   dff5c:	bf28      	it	cs
   dff5e:	4618      	movcs	r0, r3
    if( ssl->session_negotiate != NULL &&
   dff60:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   dff62:	b163      	cbz	r3, dff7e <mbedtls_ssl_get_max_frag_len+0x5a>
    switch( mfl )
   dff64:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
   dff68:	3b01      	subs	r3, #1
   dff6a:	2b03      	cmp	r3, #3
   dff6c:	bf9a      	itte	ls
   dff6e:	4a04      	ldrls	r2, [pc, #16]	; (dff80 <mbedtls_ssl_get_max_frag_len+0x5c>)
   dff70:	f832 3013 	ldrhls.w	r3, [r2, r3, lsl #1]
   dff74:	f44f 5300 	movhi.w	r3, #8192	; 0x2000
   dff78:	4298      	cmp	r0, r3
   dff7a:	bf28      	it	cs
   dff7c:	4618      	movcs	r0, r3
}
   dff7e:	4770      	bx	lr
   dff80:	000ed050 	.word	0x000ed050

000dff84 <mbedtls_ssl_get_max_out_record_payload>:
{
   dff84:	b508      	push	{r3, lr}
    const size_t mfl = mbedtls_ssl_get_max_frag_len( ssl );
   dff86:	f7ff ffcd 	bl	dff24 <mbedtls_ssl_get_max_frag_len>
}
   dff8a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
   dff8e:	bf28      	it	cs
   dff90:	f44f 5000 	movcs.w	r0, #8192	; 0x2000
   dff94:	bd08      	pop	{r3, pc}
	...

000dff98 <mbedtls_ssl_handshake_step>:
    if( ssl == NULL || ssl->conf == NULL )
   dff98:	b138      	cbz	r0, dffaa <mbedtls_ssl_handshake_step+0x12>
   dff9a:	6803      	ldr	r3, [r0, #0]
   dff9c:	b12b      	cbz	r3, dffaa <mbedtls_ssl_handshake_step+0x12>
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   dff9e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   dffa2:	07db      	lsls	r3, r3, #31
   dffa4:	d403      	bmi.n	dffae <mbedtls_ssl_handshake_step+0x16>
        ret = mbedtls_ssl_handshake_client_step( ssl );
   dffa6:	f004 bbeb 	b.w	e4780 <mbedtls_ssl_handshake_client_step>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   dffaa:	4802      	ldr	r0, [pc, #8]	; (dffb4 <mbedtls_ssl_handshake_step+0x1c>)
   dffac:	4770      	bx	lr
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
   dffae:	4802      	ldr	r0, [pc, #8]	; (dffb8 <mbedtls_ssl_handshake_step+0x20>)
}
   dffb0:	4770      	bx	lr
   dffb2:	bf00      	nop
   dffb4:	ffff8f00 	.word	0xffff8f00
   dffb8:	ffff8f80 	.word	0xffff8f80

000dffbc <mbedtls_ssl_handshake>:
{
   dffbc:	b510      	push	{r4, lr}
    if( ssl == NULL || ssl->conf == NULL )
   dffbe:	4604      	mov	r4, r0
   dffc0:	b150      	cbz	r0, dffd8 <mbedtls_ssl_handshake+0x1c>
   dffc2:	6803      	ldr	r3, [r0, #0]
   dffc4:	b143      	cbz	r3, dffd8 <mbedtls_ssl_handshake+0x1c>
    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
   dffc6:	6863      	ldr	r3, [r4, #4]
   dffc8:	2b10      	cmp	r3, #16
   dffca:	d007      	beq.n	dffdc <mbedtls_ssl_handshake+0x20>
        ret = mbedtls_ssl_handshake_step( ssl );
   dffcc:	4620      	mov	r0, r4
   dffce:	f7ff ffe3 	bl	dff98 <mbedtls_ssl_handshake_step>
        if( ret != 0 )
   dffd2:	2800      	cmp	r0, #0
   dffd4:	d0f7      	beq.n	dffc6 <mbedtls_ssl_handshake+0xa>
}
   dffd6:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   dffd8:	4801      	ldr	r0, [pc, #4]	; (dffe0 <mbedtls_ssl_handshake+0x24>)
   dffda:	e7fc      	b.n	dffd6 <mbedtls_ssl_handshake+0x1a>
   dffdc:	2000      	movs	r0, #0
   dffde:	e7fa      	b.n	dffd6 <mbedtls_ssl_handshake+0x1a>
   dffe0:	ffff8f00 	.word	0xffff8f00

000dffe4 <mbedtls_ssl_read>:
{
   dffe4:	b570      	push	{r4, r5, r6, lr}
   dffe6:	460e      	mov	r6, r1
   dffe8:	4614      	mov	r4, r2
    if( ssl == NULL || ssl->conf == NULL )
   dffea:	4605      	mov	r5, r0
   dffec:	2800      	cmp	r0, #0
   dffee:	d069      	beq.n	e00c4 <mbedtls_ssl_read+0xe0>
   dfff0:	6803      	ldr	r3, [r0, #0]
   dfff2:	2b00      	cmp	r3, #0
   dfff4:	d066      	beq.n	e00c4 <mbedtls_ssl_read+0xe0>
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
   dfff6:	6843      	ldr	r3, [r0, #4]
   dfff8:	2b10      	cmp	r3, #16
   dfffa:	d005      	beq.n	e0008 <mbedtls_ssl_read+0x24>
        ret = mbedtls_ssl_handshake( ssl );
   dfffc:	f7ff ffde 	bl	dffbc <mbedtls_ssl_handshake>
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
   e0000:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
   e0004:	d000      	beq.n	e0008 <mbedtls_ssl_read+0x24>
   e0006:	b9b0      	cbnz	r0, e0036 <mbedtls_ssl_read+0x52>
    while( ssl->in_offt == NULL )
   e0008:	6ea9      	ldr	r1, [r5, #104]	; 0x68
   e000a:	2900      	cmp	r1, #0
   e000c:	d145      	bne.n	e009a <mbedtls_ssl_read+0xb6>
        if( ssl->f_get_timer != NULL &&
   e000e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   e0010:	b143      	cbz	r3, e0024 <mbedtls_ssl_read+0x40>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
   e0012:	6c68      	ldr	r0, [r5, #68]	; 0x44
   e0014:	4798      	blx	r3
        if( ssl->f_get_timer != NULL &&
   e0016:	3001      	adds	r0, #1
   e0018:	d104      	bne.n	e0024 <mbedtls_ssl_read+0x40>
            ssl_set_timer( ssl, ssl->conf->read_timeout );
   e001a:	682b      	ldr	r3, [r5, #0]
   e001c:	4628      	mov	r0, r5
   e001e:	6f59      	ldr	r1, [r3, #116]	; 0x74
   e0020:	f7fe fefb 	bl	dee1a <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>
        if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e0024:	2101      	movs	r1, #1
   e0026:	4628      	mov	r0, r5
   e0028:	f7ff fc8a 	bl	df940 <mbedtls_ssl_read_record>
   e002c:	b120      	cbz	r0, e0038 <mbedtls_ssl_read+0x54>
            if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
   e002e:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
   e0032:	d100      	bne.n	e0036 <mbedtls_ssl_read+0x52>
                return( 0 );
   e0034:	2000      	movs	r0, #0
}
   e0036:	bd70      	pop	{r4, r5, r6, pc}
        if( ssl->in_msglen  == 0 &&
   e0038:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   e003a:	b943      	cbnz	r3, e004e <mbedtls_ssl_read+0x6a>
   e003c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   e003e:	2b17      	cmp	r3, #23
   e0040:	d105      	bne.n	e004e <mbedtls_ssl_read+0x6a>
            if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e0042:	2101      	movs	r1, #1
   e0044:	4628      	mov	r0, r5
   e0046:	f7ff fc7b 	bl	df940 <mbedtls_ssl_read_record>
   e004a:	2800      	cmp	r0, #0
   e004c:	d1ef      	bne.n	e002e <mbedtls_ssl_read+0x4a>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   e004e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   e0050:	2b16      	cmp	r3, #22
   e0052:	d114      	bne.n	e007e <mbedtls_ssl_read+0x9a>
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
   e0054:	682b      	ldr	r3, [r5, #0]
   e0056:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
   e005a:	07db      	lsls	r3, r3, #31
   e005c:	d406      	bmi.n	e006c <mbedtls_ssl_read+0x88>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
   e005e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
   e0060:	781b      	ldrb	r3, [r3, #0]
   e0062:	2b00      	cmp	r3, #0
   e0064:	d134      	bne.n	e00d0 <mbedtls_ssl_read+0xec>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
   e0066:	6fab      	ldr	r3, [r5, #120]	; 0x78
   e0068:	2b04      	cmp	r3, #4
   e006a:	d131      	bne.n	e00d0 <mbedtls_ssl_read+0xec>
                if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
   e006c:	68eb      	ldr	r3, [r5, #12]
   e006e:	2b00      	cmp	r3, #0
   e0070:	dd2a      	ble.n	e00c8 <mbedtls_ssl_read+0xe4>
                    if( ( ret = mbedtls_ssl_send_alert_message( ssl,
   e0072:	2264      	movs	r2, #100	; 0x64
   e0074:	2101      	movs	r1, #1
   e0076:	4628      	mov	r0, r5
   e0078:	f7ff fc48 	bl	df90c <mbedtls_ssl_send_alert_message>
   e007c:	e7c3      	b.n	e0006 <mbedtls_ssl_read+0x22>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
   e007e:	2b15      	cmp	r3, #21
   e0080:	d024      	beq.n	e00cc <mbedtls_ssl_read+0xe8>
        if( ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
   e0082:	2b17      	cmp	r3, #23
   e0084:	d124      	bne.n	e00d0 <mbedtls_ssl_read+0xec>
        ssl->in_offt = ssl->in_msg;
   e0086:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   e0088:	66ab      	str	r3, [r5, #104]	; 0x68
        if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
   e008a:	686b      	ldr	r3, [r5, #4]
   e008c:	2b10      	cmp	r3, #16
   e008e:	d1bb      	bne.n	e0008 <mbedtls_ssl_read+0x24>
            ssl_set_timer( ssl, 0 );
   e0090:	2100      	movs	r1, #0
   e0092:	4628      	mov	r0, r5
   e0094:	f7fe fec1 	bl	dee1a <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>
   e0098:	e7b6      	b.n	e0008 <mbedtls_ssl_read+0x24>
    n = ( len < ssl->in_msglen )
   e009a:	6f28      	ldr	r0, [r5, #112]	; 0x70
   e009c:	4284      	cmp	r4, r0
   e009e:	bf28      	it	cs
   e00a0:	4604      	movcs	r4, r0
    memcpy( buf, ssl->in_offt, n );
   e00a2:	4622      	mov	r2, r4
   e00a4:	4630      	mov	r0, r6
   e00a6:	f008 fea1 	bl	e8dec <memcpy>
    ssl->in_msglen -= n;
   e00aa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   e00ac:	1b1b      	subs	r3, r3, r4
   e00ae:	672b      	str	r3, [r5, #112]	; 0x70
    if( ssl->in_msglen == 0 )
   e00b0:	b923      	cbnz	r3, e00bc <mbedtls_ssl_read+0xd8>
        ssl->in_offt = NULL;
   e00b2:	66ab      	str	r3, [r5, #104]	; 0x68
        ssl->keep_current_message = 0;
   e00b4:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    return( (int) n );
   e00b8:	4620      	mov	r0, r4
   e00ba:	e7bc      	b.n	e0036 <mbedtls_ssl_read+0x52>
        ssl->in_offt += n;
   e00bc:	6eab      	ldr	r3, [r5, #104]	; 0x68
   e00be:	4423      	add	r3, r4
   e00c0:	66ab      	str	r3, [r5, #104]	; 0x68
   e00c2:	e7f9      	b.n	e00b8 <mbedtls_ssl_read+0xd4>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e00c4:	4803      	ldr	r0, [pc, #12]	; (e00d4 <mbedtls_ssl_read+0xf0>)
   e00c6:	e7b6      	b.n	e0036 <mbedtls_ssl_read+0x52>
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   e00c8:	4803      	ldr	r0, [pc, #12]	; (e00d8 <mbedtls_ssl_read+0xf4>)
   e00ca:	e7b4      	b.n	e0036 <mbedtls_ssl_read+0x52>
            return( MBEDTLS_ERR_SSL_WANT_READ );
   e00cc:	4803      	ldr	r0, [pc, #12]	; (e00dc <mbedtls_ssl_read+0xf8>)
   e00ce:	e7b2      	b.n	e0036 <mbedtls_ssl_read+0x52>
                return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   e00d0:	4803      	ldr	r0, [pc, #12]	; (e00e0 <mbedtls_ssl_read+0xfc>)
   e00d2:	e7b0      	b.n	e0036 <mbedtls_ssl_read+0x52>
   e00d4:	ffff8f00 	.word	0xffff8f00
   e00d8:	ffff9400 	.word	0xffff9400
   e00dc:	ffff9700 	.word	0xffff9700
   e00e0:	ffff8900 	.word	0xffff8900

000e00e4 <mbedtls_ssl_write>:
{
   e00e4:	b570      	push	{r4, r5, r6, lr}
   e00e6:	460e      	mov	r6, r1
   e00e8:	4615      	mov	r5, r2
    if( ssl == NULL || ssl->conf == NULL )
   e00ea:	4604      	mov	r4, r0
   e00ec:	b360      	cbz	r0, e0148 <mbedtls_ssl_write+0x64>
   e00ee:	6803      	ldr	r3, [r0, #0]
   e00f0:	b353      	cbz	r3, e0148 <mbedtls_ssl_write+0x64>
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
   e00f2:	6843      	ldr	r3, [r0, #4]
   e00f4:	2b10      	cmp	r3, #16
   e00f6:	d105      	bne.n	e0104 <mbedtls_ssl_write+0x20>
    int ret = mbedtls_ssl_get_max_out_record_payload( ssl );
   e00f8:	4620      	mov	r0, r4
   e00fa:	f7ff ff43 	bl	dff84 <mbedtls_ssl_get_max_out_record_payload>
    if( ret < 0 )
   e00fe:	2800      	cmp	r0, #0
   e0100:	da05      	bge.n	e010e <mbedtls_ssl_write+0x2a>
}
   e0102:	bd70      	pop	{r4, r5, r6, pc}
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
   e0104:	f7ff ff5a 	bl	dffbc <mbedtls_ssl_handshake>
   e0108:	2800      	cmp	r0, #0
   e010a:	d0f5      	beq.n	e00f8 <mbedtls_ssl_write+0x14>
   e010c:	e7f9      	b.n	e0102 <mbedtls_ssl_write+0x1e>
    if( ssl->out_left != 0 )
   e010e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   e0112:	4285      	cmp	r5, r0
   e0114:	bf28      	it	cs
   e0116:	4605      	movcs	r5, r0
   e0118:	b133      	cbz	r3, e0128 <mbedtls_ssl_write+0x44>
        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
   e011a:	4620      	mov	r0, r4
   e011c:	f7ff fa44 	bl	df5a8 <mbedtls_ssl_flush_output>
   e0120:	2800      	cmp	r0, #0
   e0122:	d1ee      	bne.n	e0102 <mbedtls_ssl_write+0x1e>
    return( (int) len );
   e0124:	4628      	mov	r0, r5
   e0126:	e7ec      	b.n	e0102 <mbedtls_ssl_write+0x1e>
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
   e0128:	2317      	movs	r3, #23
        memcpy( ssl->out_msg, buf, len );
   e012a:	4631      	mov	r1, r6
   e012c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        ssl->out_msglen  = len;
   e0130:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
   e0134:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        memcpy( ssl->out_msg, buf, len );
   e0138:	462a      	mov	r2, r5
   e013a:	f008 fe57 	bl	e8dec <memcpy>
        if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
   e013e:	2101      	movs	r1, #1
   e0140:	4620      	mov	r0, r4
   e0142:	f7ff fa61 	bl	df608 <mbedtls_ssl_write_record>
   e0146:	e7eb      	b.n	e0120 <mbedtls_ssl_write+0x3c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e0148:	4800      	ldr	r0, [pc, #0]	; (e014c <mbedtls_ssl_write+0x68>)
   e014a:	e7da      	b.n	e0102 <mbedtls_ssl_write+0x1e>
   e014c:	ffff8f00 	.word	0xffff8f00

000e0150 <mbedtls_ssl_transform_free>:
{
   e0150:	b510      	push	{r4, lr}
    if( transform == NULL )
   e0152:	4604      	mov	r4, r0
   e0154:	b1a0      	cbz	r0, e0180 <mbedtls_ssl_transform_free+0x30>
    mbedtls_cipher_free( &transform->cipher_ctx_enc );
   e0156:	3050      	adds	r0, #80	; 0x50
   e0158:	f7f6 f87e 	bl	d6258 <mbedtls_cipher_free>
    mbedtls_cipher_free( &transform->cipher_ctx_dec );
   e015c:	f104 0088 	add.w	r0, r4, #136	; 0x88
   e0160:	f7f6 f87a 	bl	d6258 <mbedtls_cipher_free>
    mbedtls_md_free( &transform->md_ctx_enc );
   e0164:	f104 0038 	add.w	r0, r4, #56	; 0x38
   e0168:	f7fc fe8d 	bl	dce86 <mbedtls_md_free>
    mbedtls_md_free( &transform->md_ctx_dec );
   e016c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   e0170:	f7fc fe89 	bl	dce86 <mbedtls_md_free>
    mbedtls_platform_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
   e0174:	4620      	mov	r0, r4
   e0176:	21c0      	movs	r1, #192	; 0xc0
}
   e0178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
   e017c:	f002 bd22 	b.w	e2bc4 <mbedtls_platform_zeroize>
}
   e0180:	bd10      	pop	{r4, pc}

000e0182 <mbedtls_ssl_handshake_free>:
{
   e0182:	b538      	push	{r3, r4, r5, lr}
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
   e0184:	6b04      	ldr	r4, [r0, #48]	; 0x30
    if( handshake == NULL )
   e0186:	b344      	cbz	r4, e01da <mbedtls_ssl_handshake_free+0x58>
    mbedtls_sha256_free(   &handshake->fin_sha256    );
   e0188:	f504 70ac 	add.w	r0, r4, #344	; 0x158
   e018c:	f7f5 f9dc 	bl	d5548 <mbedtls_sha256_free>
    mbedtls_sha512_free(   &handshake->fin_sha512    );
   e0190:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   e0194:	f002 ff02 	bl	e2f9c <mbedtls_sha512_free>
    mbedtls_ecdh_free( &handshake->ecdh_ctx );
   e0198:	1d20      	adds	r0, r4, #4
   e019a:	f7f5 ff9b 	bl	d60d4 <mbedtls_ecdh_free>
    mbedtls_free( (void *) handshake->curves );
   e019e:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
   e01a2:	f005 fc01 	bl	e59a8 <free>
    if( handshake->psk != NULL )
   e01a6:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   e01aa:	b138      	cbz	r0, e01bc <mbedtls_ssl_handshake_free+0x3a>
        mbedtls_platform_zeroize( handshake->psk, handshake->psk_len );
   e01ac:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
   e01b0:	f002 fd08 	bl	e2bc4 <mbedtls_platform_zeroize>
        mbedtls_free( handshake->psk );
   e01b4:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   e01b8:	f005 fbf6 	bl	e59a8 <free>
    if( handshake->sni_key_cert != NULL )
   e01bc:	f8d4 514c 	ldr.w	r5, [r4, #332]	; 0x14c
   e01c0:	b125      	cbz	r5, e01cc <mbedtls_ssl_handshake_free+0x4a>
            next = cur->next;
   e01c2:	4628      	mov	r0, r5
   e01c4:	68ad      	ldr	r5, [r5, #8]
            mbedtls_free( cur );
   e01c6:	f005 fbef 	bl	e59a8 <free>
        while( cur != NULL )
   e01ca:	e7f9      	b.n	e01c0 <mbedtls_ssl_handshake_free+0x3e>
    mbedtls_platform_zeroize( handshake,
   e01cc:	4620      	mov	r0, r4
   e01ce:	f44f 7158 	mov.w	r1, #864	; 0x360
}
   e01d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mbedtls_platform_zeroize( handshake,
   e01d6:	f002 bcf5 	b.w	e2bc4 <mbedtls_platform_zeroize>
}
   e01da:	bd38      	pop	{r3, r4, r5, pc}

000e01dc <mbedtls_ssl_session_free>:
{
   e01dc:	b510      	push	{r4, lr}
    if( session == NULL )
   e01de:	4604      	mov	r4, r0
   e01e0:	b178      	cbz	r0, e0202 <mbedtls_ssl_session_free+0x26>
    if( session->peer_cert != NULL )
   e01e2:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   e01e4:	b120      	cbz	r0, e01f0 <mbedtls_ssl_session_free+0x14>
        mbedtls_x509_crt_free( session->peer_cert );
   e01e6:	f7fe f900 	bl	de3ea <mbedtls_x509_crt_free>
        mbedtls_free( session->peer_cert );
   e01ea:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   e01ec:	f005 fbdc 	bl	e59a8 <free>
    mbedtls_free( session->ticket );
   e01f0:	6e60      	ldr	r0, [r4, #100]	; 0x64
   e01f2:	f005 fbd9 	bl	e59a8 <free>
    mbedtls_platform_zeroize( session, sizeof( mbedtls_ssl_session ) );
   e01f6:	4620      	mov	r0, r4
   e01f8:	2174      	movs	r1, #116	; 0x74
}
   e01fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( session, sizeof( mbedtls_ssl_session ) );
   e01fe:	f002 bce1 	b.w	e2bc4 <mbedtls_platform_zeroize>
}
   e0202:	bd10      	pop	{r4, pc}

000e0204 <mbedtls_ssl_handshake_wrapup>:
{
   e0204:	b538      	push	{r3, r4, r5, lr}
   e0206:	4604      	mov	r4, r0
    int resume = ssl->handshake->resume;
   e0208:	6b03      	ldr	r3, [r0, #48]	; 0x30
    if( ssl->session )
   e020a:	6a80      	ldr	r0, [r0, #40]	; 0x28
    int resume = ssl->handshake->resume;
   e020c:	f8d3 5348 	ldr.w	r5, [r3, #840]	; 0x348
    if( ssl->session )
   e0210:	b120      	cbz	r0, e021c <mbedtls_ssl_handshake_wrapup+0x18>
        mbedtls_ssl_session_free( ssl->session );
   e0212:	f7ff ffe3 	bl	e01dc <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
   e0216:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   e0218:	f005 fbc6 	bl	e59a8 <free>
    ssl->session = ssl->session_negotiate;
   e021c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    if( ssl->conf->f_set_cache != NULL &&
   e021e:	6822      	ldr	r2, [r4, #0]
    ssl->session = ssl->session_negotiate;
   e0220:	62a1      	str	r1, [r4, #40]	; 0x28
    ssl->session_negotiate = NULL;
   e0222:	2300      	movs	r3, #0
   e0224:	62e3      	str	r3, [r4, #44]	; 0x2c
    if( ssl->conf->f_set_cache != NULL &&
   e0226:	6a53      	ldr	r3, [r2, #36]	; 0x24
   e0228:	b123      	cbz	r3, e0234 <mbedtls_ssl_handshake_wrapup+0x30>
   e022a:	6888      	ldr	r0, [r1, #8]
   e022c:	b110      	cbz	r0, e0234 <mbedtls_ssl_handshake_wrapup+0x30>
        ssl->session->id_len != 0 &&
   e022e:	b90d      	cbnz	r5, e0234 <mbedtls_ssl_handshake_wrapup+0x30>
        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
   e0230:	6a90      	ldr	r0, [r2, #40]	; 0x28
   e0232:	4798      	blx	r3
    mbedtls_ssl_handshake_free( ssl );
   e0234:	4620      	mov	r0, r4
   e0236:	f7ff ffa4 	bl	e0182 <mbedtls_ssl_handshake_free>
    mbedtls_free( ssl->handshake );
   e023a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e023c:	f005 fbb4 	bl	e59a8 <free>
    if( ssl->transform )
   e0240:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    ssl->handshake = NULL;
   e0242:	2300      	movs	r3, #0
   e0244:	6323      	str	r3, [r4, #48]	; 0x30
    if( ssl->transform )
   e0246:	b120      	cbz	r0, e0252 <mbedtls_ssl_handshake_wrapup+0x4e>
        mbedtls_ssl_transform_free( ssl->transform );
   e0248:	f7ff ff82 	bl	e0150 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
   e024c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   e024e:	f005 fbab 	bl	e59a8 <free>
    ssl->transform = ssl->transform_negotiate;
   e0252:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e0254:	63e3      	str	r3, [r4, #60]	; 0x3c
    ssl->transform_negotiate = NULL;
   e0256:	2300      	movs	r3, #0
   e0258:	6423      	str	r3, [r4, #64]	; 0x40
    ssl->state++;
   e025a:	6863      	ldr	r3, [r4, #4]
   e025c:	3301      	adds	r3, #1
   e025e:	6063      	str	r3, [r4, #4]
}
   e0260:	bd38      	pop	{r3, r4, r5, pc}
	...

000e0264 <_ZL18ssl_handshake_initP19mbedtls_ssl_context>:
{
   e0264:	b537      	push	{r0, r1, r2, r4, r5, lr}
   e0266:	4604      	mov	r4, r0
    if( ssl->transform_negotiate )
   e0268:	6c00      	ldr	r0, [r0, #64]	; 0x40
   e026a:	b108      	cbz	r0, e0270 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xc>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
   e026c:	f7ff ff70 	bl	e0150 <mbedtls_ssl_transform_free>
    if( ssl->session_negotiate )
   e0270:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e0272:	b108      	cbz	r0, e0278 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x14>
        mbedtls_ssl_session_free( ssl->session_negotiate );
   e0274:	f7ff ffb2 	bl	e01dc <mbedtls_ssl_session_free>
    if( ssl->handshake )
   e0278:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e027a:	b113      	cbz	r3, e0282 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x1e>
        mbedtls_ssl_handshake_free( ssl );
   e027c:	4620      	mov	r0, r4
   e027e:	f7ff ff80 	bl	e0182 <mbedtls_ssl_handshake_free>
    if( ssl->transform_negotiate == NULL )
   e0282:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e0284:	b923      	cbnz	r3, e0290 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x2c>
        ssl->transform_negotiate = (mbedtls_ssl_transform *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
   e0286:	21c0      	movs	r1, #192	; 0xc0
   e0288:	2001      	movs	r0, #1
   e028a:	f008 fd37 	bl	e8cfc <calloc>
   e028e:	6420      	str	r0, [r4, #64]	; 0x40
    if( ssl->session_negotiate == NULL )
   e0290:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e0292:	b923      	cbnz	r3, e029e <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x3a>
        ssl->session_negotiate = (mbedtls_ssl_session *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
   e0294:	2174      	movs	r1, #116	; 0x74
   e0296:	2001      	movs	r0, #1
   e0298:	f008 fd30 	bl	e8cfc <calloc>
   e029c:	62e0      	str	r0, [r4, #44]	; 0x2c
    if( ssl->handshake == NULL )
   e029e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e02a0:	b92b      	cbnz	r3, e02ae <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x4a>
        ssl->handshake = (mbedtls_ssl_handshake_params *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
   e02a2:	f44f 7158 	mov.w	r1, #864	; 0x360
   e02a6:	2001      	movs	r0, #1
   e02a8:	f008 fd28 	bl	e8cfc <calloc>
   e02ac:	6320      	str	r0, [r4, #48]	; 0x30
    if( ssl->handshake == NULL ||
   e02ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e02b0:	b118      	cbz	r0, e02ba <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x56>
   e02b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e02b4:	b10b      	cbz	r3, e02ba <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x56>
        ssl->session_negotiate == NULL )
   e02b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        ssl->transform_negotiate == NULL ||
   e02b8:	b973      	cbnz	r3, e02d8 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x74>
        mbedtls_free( ssl->handshake );
   e02ba:	f005 fb75 	bl	e59a8 <free>
        mbedtls_free( ssl->transform_negotiate );
   e02be:	6c20      	ldr	r0, [r4, #64]	; 0x40
   e02c0:	f005 fb72 	bl	e59a8 <free>
        mbedtls_free( ssl->session_negotiate );
   e02c4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e02c6:	f005 fb6f 	bl	e59a8 <free>
        ssl->handshake = NULL;
   e02ca:	2300      	movs	r3, #0
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   e02cc:	4822      	ldr	r0, [pc, #136]	; (e0358 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xf4>)
        ssl->handshake = NULL;
   e02ce:	6323      	str	r3, [r4, #48]	; 0x30
        ssl->transform_negotiate = NULL;
   e02d0:	6423      	str	r3, [r4, #64]	; 0x40
        ssl->session_negotiate = NULL;
   e02d2:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   e02d4:	b003      	add	sp, #12
   e02d6:	bd30      	pop	{r4, r5, pc}
    mbedtls_ssl_session_init( ssl->session_negotiate );
   e02d8:	4618      	mov	r0, r3
   e02da:	f7ff fdb9 	bl	dfe50 <mbedtls_ssl_session_init>
    ssl_transform_init( ssl->transform_negotiate );
   e02de:	6c25      	ldr	r5, [r4, #64]	; 0x40
    memset( transform, 0, sizeof(mbedtls_ssl_transform) );
   e02e0:	22c0      	movs	r2, #192	; 0xc0
   e02e2:	2100      	movs	r1, #0
   e02e4:	4628      	mov	r0, r5
   e02e6:	f008 fda9 	bl	e8e3c <memset>
    mbedtls_cipher_init( &transform->cipher_ctx_enc );
   e02ea:	f105 0050 	add.w	r0, r5, #80	; 0x50
   e02ee:	f7f5 ffaf 	bl	d6250 <mbedtls_cipher_init>
    mbedtls_cipher_init( &transform->cipher_ctx_dec );
   e02f2:	f105 0088 	add.w	r0, r5, #136	; 0x88
   e02f6:	f7f5 ffab 	bl	d6250 <mbedtls_cipher_init>
    mbedtls_md_init( &transform->md_ctx_enc );
   e02fa:	f105 0038 	add.w	r0, r5, #56	; 0x38
   e02fe:	f7fc fdbd 	bl	dce7c <mbedtls_md_init>
    mbedtls_md_init( &transform->md_ctx_dec );
   e0302:	f105 0044 	add.w	r0, r5, #68	; 0x44
   e0306:	f7fc fdb9 	bl	dce7c <mbedtls_md_init>
    ssl_handshake_params_init( ssl->handshake );
   e030a:	6b24      	ldr	r4, [r4, #48]	; 0x30
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
   e030c:	f44f 7258 	mov.w	r2, #864	; 0x360
   e0310:	2100      	movs	r1, #0
   e0312:	4620      	mov	r0, r4
   e0314:	f008 fd92 	bl	e8e3c <memset>
    mbedtls_sha256_init(   &handshake->fin_sha256    );
   e0318:	f504 70ac 	add.w	r0, r4, #344	; 0x158
   e031c:	9001      	str	r0, [sp, #4]
   e031e:	f7f5 f90f 	bl	d5540 <mbedtls_sha256_init>
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
   e0322:	2100      	movs	r1, #0
   e0324:	9801      	ldr	r0, [sp, #4]
   e0326:	f7f5 f919 	bl	d555c <mbedtls_sha256_starts_ret>
    mbedtls_sha512_init(   &handshake->fin_sha512    );
   e032a:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   e032e:	9001      	str	r0, [sp, #4]
   e0330:	f002 fe30 	bl	e2f94 <mbedtls_sha512_init>
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
   e0334:	2101      	movs	r1, #1
   e0336:	9801      	ldr	r0, [sp, #4]
   e0338:	f002 fe3a 	bl	e2fb0 <mbedtls_sha512_starts_ret>
    set->rsa   = md_alg;
   e033c:	2500      	movs	r5, #0
    handshake->update_checksum = ssl_update_checksum_start;
   e033e:	4b07      	ldr	r3, [pc, #28]	; (e035c <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xf8>)
   e0340:	f8c4 32a0 	str.w	r3, [r4, #672]	; 0x2a0
    mbedtls_ecdh_init( &handshake->ecdh_ctx );
   e0344:	1d20      	adds	r0, r4, #4
    set->rsa   = md_alg;
   e0346:	7025      	strb	r5, [r4, #0]
    set->ecdsa = md_alg;
   e0348:	7065      	strb	r5, [r4, #1]
    mbedtls_ecdh_init( &handshake->ecdh_ctx );
   e034a:	f7f5 fe9f 	bl	d608c <mbedtls_ecdh_init>
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
   e034e:	2303      	movs	r3, #3
   e0350:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    return( 0 );
   e0354:	4628      	mov	r0, r5
}
   e0356:	e7bd      	b.n	e02d4 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x70>
   e0358:	ffff8100 	.word	0xffff8100
   e035c:	000df141 	.word	0x000df141

000e0360 <mbedtls_ssl_setup>:
{
   e0360:	b538      	push	{r3, r4, r5, lr}
    ssl->out_buf = NULL;
   e0362:	2300      	movs	r3, #0
    ssl->conf = conf;
   e0364:	6001      	str	r1, [r0, #0]
{
   e0366:	4604      	mov	r4, r0
    ssl->out_buf = NULL;
   e0368:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    ssl->in_buf = (unsigned char *)mbedtls_calloc( 1, MBEDTLS_SSL_IN_BUFFER_LEN );
   e036c:	f242 012d 	movw	r1, #8237	; 0x202d
   e0370:	2001      	movs	r0, #1
   e0372:	f008 fcc3 	bl	e8cfc <calloc>
   e0376:	6520      	str	r0, [r4, #80]	; 0x50
    if( ssl->in_buf == NULL )
   e0378:	b9c0      	cbnz	r0, e03ac <mbedtls_ssl_setup+0x4c>
        ret = MBEDTLS_ERR_SSL_ALLOC_FAILED;
   e037a:	4d16      	ldr	r5, [pc, #88]	; (e03d4 <mbedtls_ssl_setup+0x74>)
    mbedtls_free( ssl->in_buf );
   e037c:	6d20      	ldr	r0, [r4, #80]	; 0x50
   e037e:	f005 fb13 	bl	e59a8 <free>
    mbedtls_free( ssl->out_buf );
   e0382:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   e0386:	f005 fb0f 	bl	e59a8 <free>
    ssl->conf = NULL;
   e038a:	2300      	movs	r3, #0
    ssl->in_ctr = NULL;
   e038c:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
    ssl->in_iv = NULL;
   e0390:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
    ssl->out_ctr = NULL;
   e0394:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
    ssl->out_iv = NULL;
   e0398:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
    ssl->conf = NULL;
   e039c:	6023      	str	r3, [r4, #0]
    ssl->in_buf = NULL;
   e039e:	6523      	str	r3, [r4, #80]	; 0x50
    ssl->out_buf = NULL;
   e03a0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    ssl->in_msg = NULL;
   e03a4:	6663      	str	r3, [r4, #100]	; 0x64
    ssl->out_msg = NULL;
   e03a6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    return( ret );
   e03aa:	e010      	b.n	e03ce <mbedtls_ssl_setup+0x6e>
    ssl->out_buf = (unsigned char *)mbedtls_calloc( 1, MBEDTLS_SSL_OUT_BUFFER_LEN );
   e03ac:	f242 012d 	movw	r1, #8237	; 0x202d
   e03b0:	2001      	movs	r0, #1
   e03b2:	f008 fca3 	bl	e8cfc <calloc>
   e03b6:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if( ssl->out_buf == NULL )
   e03ba:	2800      	cmp	r0, #0
   e03bc:	d0dd      	beq.n	e037a <mbedtls_ssl_setup+0x1a>
    ssl_reset_in_out_pointers( ssl );
   e03be:	4620      	mov	r0, r4
   e03c0:	f7fe fed0 	bl	df164 <_ZL25ssl_reset_in_out_pointersP19mbedtls_ssl_context>
    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
   e03c4:	f7ff ff4e 	bl	e0264 <_ZL18ssl_handshake_initP19mbedtls_ssl_context>
   e03c8:	4605      	mov	r5, r0
   e03ca:	2800      	cmp	r0, #0
   e03cc:	d1d6      	bne.n	e037c <mbedtls_ssl_setup+0x1c>
}
   e03ce:	4628      	mov	r0, r5
   e03d0:	bd38      	pop	{r3, r4, r5, pc}
   e03d2:	bf00      	nop
   e03d4:	ffff8100 	.word	0xffff8100

000e03d8 <mbedtls_ssl_free>:
{
   e03d8:	b538      	push	{r3, r4, r5, lr}
    if( ssl == NULL )
   e03da:	4604      	mov	r4, r0
   e03dc:	2800      	cmp	r0, #0
   e03de:	d049      	beq.n	e0474 <mbedtls_ssl_free+0x9c>
    if( ssl->out_buf != NULL )
   e03e0:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   e03e4:	b138      	cbz	r0, e03f6 <mbedtls_ssl_free+0x1e>
        mbedtls_platform_zeroize( ssl->out_buf, MBEDTLS_SSL_OUT_BUFFER_LEN );
   e03e6:	f242 012d 	movw	r1, #8237	; 0x202d
   e03ea:	f002 fbeb 	bl	e2bc4 <mbedtls_platform_zeroize>
        mbedtls_free( ssl->out_buf );
   e03ee:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   e03f2:	f005 fad9 	bl	e59a8 <free>
    if( ssl->in_buf != NULL )
   e03f6:	6d20      	ldr	r0, [r4, #80]	; 0x50
   e03f8:	b130      	cbz	r0, e0408 <mbedtls_ssl_free+0x30>
        mbedtls_platform_zeroize( ssl->in_buf, MBEDTLS_SSL_IN_BUFFER_LEN );
   e03fa:	f242 012d 	movw	r1, #8237	; 0x202d
   e03fe:	f002 fbe1 	bl	e2bc4 <mbedtls_platform_zeroize>
        mbedtls_free( ssl->in_buf );
   e0402:	6d20      	ldr	r0, [r4, #80]	; 0x50
   e0404:	f005 fad0 	bl	e59a8 <free>
    if( ssl->transform )
   e0408:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   e040a:	b120      	cbz	r0, e0416 <mbedtls_ssl_free+0x3e>
        mbedtls_ssl_transform_free( ssl->transform );
   e040c:	f7ff fea0 	bl	e0150 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
   e0410:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   e0412:	f005 fac9 	bl	e59a8 <free>
    if( ssl->handshake )
   e0416:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e0418:	b18b      	cbz	r3, e043e <mbedtls_ssl_free+0x66>
        mbedtls_ssl_handshake_free( ssl );
   e041a:	4620      	mov	r0, r4
   e041c:	f7ff feb1 	bl	e0182 <mbedtls_ssl_handshake_free>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
   e0420:	6c20      	ldr	r0, [r4, #64]	; 0x40
   e0422:	f7ff fe95 	bl	e0150 <mbedtls_ssl_transform_free>
        mbedtls_ssl_session_free( ssl->session_negotiate );
   e0426:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e0428:	f7ff fed8 	bl	e01dc <mbedtls_ssl_session_free>
        mbedtls_free( ssl->handshake );
   e042c:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e042e:	f005 fabb 	bl	e59a8 <free>
        mbedtls_free( ssl->transform_negotiate );
   e0432:	6c20      	ldr	r0, [r4, #64]	; 0x40
   e0434:	f005 fab8 	bl	e59a8 <free>
        mbedtls_free( ssl->session_negotiate );
   e0438:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e043a:	f005 fab5 	bl	e59a8 <free>
    if( ssl->session )
   e043e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   e0440:	b120      	cbz	r0, e044c <mbedtls_ssl_free+0x74>
        mbedtls_ssl_session_free( ssl->session );
   e0442:	f7ff fecb 	bl	e01dc <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
   e0446:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   e0448:	f005 faae 	bl	e59a8 <free>
    if( ssl->hostname != NULL )
   e044c:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
   e0450:	b155      	cbz	r5, e0468 <mbedtls_ssl_free+0x90>
        mbedtls_platform_zeroize( ssl->hostname, strlen( ssl->hostname ) );
   e0452:	4628      	mov	r0, r5
   e0454:	f008 fd40 	bl	e8ed8 <strlen>
   e0458:	4601      	mov	r1, r0
   e045a:	4628      	mov	r0, r5
   e045c:	f002 fbb2 	bl	e2bc4 <mbedtls_platform_zeroize>
        mbedtls_free( ssl->hostname );
   e0460:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   e0464:	f005 faa0 	bl	e59a8 <free>
    mbedtls_platform_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
   e0468:	4620      	mov	r0, r4
   e046a:	21bc      	movs	r1, #188	; 0xbc
}
   e046c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mbedtls_platform_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
   e0470:	f002 bba8 	b.w	e2bc4 <mbedtls_platform_zeroize>
}
   e0474:	bd38      	pop	{r3, r4, r5, pc}

000e0476 <mbedtls_ssl_config_init>:
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
   e0476:	2280      	movs	r2, #128	; 0x80
   e0478:	2100      	movs	r1, #0
   e047a:	f008 bcdf 	b.w	e8e3c <memset>
	...

000e0480 <mbedtls_ssl_config_defaults>:
{
   e0480:	b510      	push	{r4, lr}
   e0482:	4604      	mov	r4, r0
    conf->endpoint   = endpoint;
   e0484:	f002 0201 	and.w	r2, r2, #1
   e0488:	f001 0001 	and.w	r0, r1, #1
   e048c:	ea40 0242 	orr.w	r2, r0, r2, lsl #1
   e0490:	f894 007c 	ldrb.w	r0, [r4, #124]	; 0x7c
   e0494:	f020 0003 	bic.w	r0, r0, #3
   e0498:	4302      	orrs	r2, r0
   e049a:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
   e049e:	b939      	cbnz	r1, e04b0 <mbedtls_ssl_config_defaults+0x30>
        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
   e04a0:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   e04a4:	f422 7203 	bic.w	r2, r2, #524	; 0x20c
   e04a8:	f442 7202 	orr.w	r2, r2, #520	; 0x208
   e04ac:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
    switch( preset )
   e04b0:	2b02      	cmp	r3, #2
   e04b2:	f04f 3303 	mov.w	r3, #50529027	; 0x3030303
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
   e04b6:	67a3      	str	r3, [r4, #120]	; 0x78
    switch( preset )
   e04b8:	d10c      	bne.n	e04d4 <mbedtls_ssl_config_defaults+0x54>
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
   e04ba:	4b0d      	ldr	r3, [pc, #52]	; (e04f0 <mbedtls_ssl_config_defaults+0x70>)
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
   e04bc:	e9c4 3302 	strd	r3, r3, [r4, #8]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
   e04c0:	e9c4 3300 	strd	r3, r3, [r4]
            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
   e04c4:	4b0b      	ldr	r3, [pc, #44]	; (e04f4 <mbedtls_ssl_config_defaults+0x74>)
   e04c6:	64e3      	str	r3, [r4, #76]	; 0x4c
            conf->sig_hashes = ssl_preset_suiteb_hashes;
   e04c8:	4b0b      	ldr	r3, [pc, #44]	; (e04f8 <mbedtls_ssl_config_defaults+0x78>)
   e04ca:	65e3      	str	r3, [r4, #92]	; 0x5c
            conf->curve_list = ssl_preset_suiteb_curves;
   e04cc:	4b0b      	ldr	r3, [pc, #44]	; (e04fc <mbedtls_ssl_config_defaults+0x7c>)
   e04ce:	6623      	str	r3, [r4, #96]	; 0x60
}
   e04d0:	2000      	movs	r0, #0
   e04d2:	bd10      	pop	{r4, pc}
                                   mbedtls_ssl_list_ciphersuites();
   e04d4:	f003 fdae 	bl	e4034 <mbedtls_ssl_list_ciphersuites>
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
   e04d8:	4b09      	ldr	r3, [pc, #36]	; (e0500 <mbedtls_ssl_config_defaults+0x80>)
   e04da:	64e3      	str	r3, [r4, #76]	; 0x4c
            conf->sig_hashes = ssl_preset_default_hashes;
   e04dc:	4b09      	ldr	r3, [pc, #36]	; (e0504 <mbedtls_ssl_config_defaults+0x84>)
   e04de:	65e3      	str	r3, [r4, #92]	; 0x5c
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
   e04e0:	e9c4 0002 	strd	r0, r0, [r4, #8]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
   e04e4:	e9c4 0000 	strd	r0, r0, [r4]
            conf->curve_list = mbedtls_ecp_grp_id_list();
   e04e8:	f7f8 fce2 	bl	d8eb0 <mbedtls_ecp_grp_id_list>
   e04ec:	6620      	str	r0, [r4, #96]	; 0x60
   e04ee:	e7ef      	b.n	e04d0 <mbedtls_ssl_config_defaults+0x50>
   e04f0:	2003ac40 	.word	0x2003ac40
   e04f4:	000ecfe8 	.word	0x000ecfe8
   e04f8:	2003ac1c 	.word	0x2003ac1c
   e04fc:	2003ac18 	.word	0x2003ac18
   e0500:	000ecfd8 	.word	0x000ecfd8
   e0504:	2003ac28 	.word	0x2003ac28

000e0508 <mbedtls_ssl_config_free>:
{
   e0508:	b538      	push	{r3, r4, r5, lr}
   e050a:	4604      	mov	r4, r0
    if( conf->psk != NULL )
   e050c:	6e40      	ldr	r0, [r0, #100]	; 0x64
   e050e:	b140      	cbz	r0, e0522 <mbedtls_ssl_config_free+0x1a>
        mbedtls_platform_zeroize( conf->psk, conf->psk_len );
   e0510:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   e0512:	f002 fb57 	bl	e2bc4 <mbedtls_platform_zeroize>
        mbedtls_free( conf->psk );
   e0516:	6e60      	ldr	r0, [r4, #100]	; 0x64
   e0518:	f005 fa46 	bl	e59a8 <free>
        conf->psk = NULL;
   e051c:	2300      	movs	r3, #0
        conf->psk_len = 0;
   e051e:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
    if( conf->psk_identity != NULL )
   e0522:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   e0524:	b140      	cbz	r0, e0538 <mbedtls_ssl_config_free+0x30>
        mbedtls_platform_zeroize( conf->psk_identity, conf->psk_identity_len );
   e0526:	6f21      	ldr	r1, [r4, #112]	; 0x70
   e0528:	f002 fb4c 	bl	e2bc4 <mbedtls_platform_zeroize>
        mbedtls_free( conf->psk_identity );
   e052c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   e052e:	f005 fa3b 	bl	e59a8 <free>
        conf->psk_identity = NULL;
   e0532:	2300      	movs	r3, #0
        conf->psk_identity_len = 0;
   e0534:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
    ssl_key_cert_free( conf->key_cert );
   e0538:	6d20      	ldr	r0, [r4, #80]	; 0x50
    while( cur != NULL )
   e053a:	b120      	cbz	r0, e0546 <mbedtls_ssl_config_free+0x3e>
        next = cur->next;
   e053c:	6885      	ldr	r5, [r0, #8]
        mbedtls_free( cur );
   e053e:	f005 fa33 	bl	e59a8 <free>
        cur = next;
   e0542:	4628      	mov	r0, r5
    while( cur != NULL )
   e0544:	e7f9      	b.n	e053a <mbedtls_ssl_config_free+0x32>
    mbedtls_platform_zeroize( conf, sizeof( mbedtls_ssl_config ) );
   e0546:	4620      	mov	r0, r4
   e0548:	2180      	movs	r1, #128	; 0x80
}
   e054a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mbedtls_platform_zeroize( conf, sizeof( mbedtls_ssl_config ) );
   e054e:	f002 bb39 	b.w	e2bc4 <mbedtls_platform_zeroize>

000e0552 <mbedtls_ssl_sig_from_pk>:
{
   e0552:	b510      	push	{r4, lr}
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
   e0554:	2101      	movs	r1, #1
{
   e0556:	4604      	mov	r4, r0
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
   e0558:	f7fe fb70 	bl	dec3c <mbedtls_pk_can_do>
   e055c:	b940      	cbnz	r0, e0570 <mbedtls_ssl_sig_from_pk+0x1e>
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
   e055e:	2104      	movs	r1, #4
   e0560:	4620      	mov	r0, r4
   e0562:	f7fe fb6b 	bl	dec3c <mbedtls_pk_can_do>
   e0566:	2800      	cmp	r0, #0
        return( MBEDTLS_SSL_SIG_ECDSA );
   e0568:	bf0c      	ite	eq
   e056a:	2000      	moveq	r0, #0
   e056c:	2003      	movne	r0, #3
}
   e056e:	bd10      	pop	{r4, pc}
        return( MBEDTLS_SSL_SIG_RSA );
   e0570:	2001      	movs	r0, #1
   e0572:	e7fc      	b.n	e056e <mbedtls_ssl_sig_from_pk+0x1c>

000e0574 <mbedtls_ssl_pk_alg_from_sig>:
    switch( sig )
   e0574:	2801      	cmp	r0, #1
   e0576:	d003      	beq.n	e0580 <mbedtls_ssl_pk_alg_from_sig+0xc>
   e0578:	2803      	cmp	r0, #3
   e057a:	bf14      	ite	ne
   e057c:	2000      	movne	r0, #0
   e057e:	2004      	moveq	r0, #4
}
   e0580:	4770      	bx	lr

000e0582 <mbedtls_ssl_md_alg_from_hash>:
    switch( hash )
   e0582:	1e83      	subs	r3, r0, #2
   e0584:	2b04      	cmp	r3, #4
   e0586:	bf9a      	itte	ls
   e0588:	3002      	addls	r0, #2
   e058a:	b2c0      	uxtbls	r0, r0
{
   e058c:	2000      	movhi	r0, #0
}
   e058e:	4770      	bx	lr

000e0590 <mbedtls_ssl_hash_from_md_alg>:
    switch( md )
   e0590:	1f03      	subs	r3, r0, #4
   e0592:	2b04      	cmp	r3, #4
   e0594:	bf9a      	itte	ls
   e0596:	3802      	subls	r0, #2
   e0598:	b2c0      	uxtbls	r0, r0
   e059a:	2000      	movhi	r0, #0
}
   e059c:	4770      	bx	lr

000e059e <mbedtls_ssl_check_curve>:
    if( ssl->conf->curve_list == NULL )
   e059e:	6803      	ldr	r3, [r0, #0]
   e05a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   e05a2:	b13b      	cbz	r3, e05b4 <mbedtls_ssl_check_curve+0x16>
   e05a4:	3b01      	subs	r3, #1
    for( gid = ssl->conf->curve_list; *gid != MBEDTLS_ECP_DP_NONE; gid++ )
   e05a6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   e05aa:	b11a      	cbz	r2, e05b4 <mbedtls_ssl_check_curve+0x16>
        if( *gid == grp_id )
   e05ac:	428a      	cmp	r2, r1
   e05ae:	d1fa      	bne.n	e05a6 <mbedtls_ssl_check_curve+0x8>
            return( 0 );
   e05b0:	2000      	movs	r0, #0
   e05b2:	4770      	bx	lr
        return( -1 );
   e05b4:	f04f 30ff 	mov.w	r0, #4294967295
}
   e05b8:	4770      	bx	lr

000e05ba <mbedtls_ssl_check_sig_hash>:
    if( ssl->conf->sig_hashes == NULL )
   e05ba:	6803      	ldr	r3, [r0, #0]
   e05bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   e05be:	b13b      	cbz	r3, e05d0 <mbedtls_ssl_check_sig_hash+0x16>
   e05c0:	3b04      	subs	r3, #4
    for( cur = ssl->conf->sig_hashes; *cur != MBEDTLS_MD_NONE; cur++ )
   e05c2:	f853 2f04 	ldr.w	r2, [r3, #4]!
   e05c6:	b11a      	cbz	r2, e05d0 <mbedtls_ssl_check_sig_hash+0x16>
        if( *cur == (int) md )
   e05c8:	428a      	cmp	r2, r1
   e05ca:	d1fa      	bne.n	e05c2 <mbedtls_ssl_check_sig_hash+0x8>
            return( 0 );
   e05cc:	2000      	movs	r0, #0
   e05ce:	4770      	bx	lr
        return( -1 );
   e05d0:	f04f 30ff 	mov.w	r0, #4294967295
}
   e05d4:	4770      	bx	lr
	...

000e05d8 <mbedtls_ssl_check_cert_usage>:
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
   e05d8:	2a01      	cmp	r2, #1
{
   e05da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e05dc:	4606      	mov	r6, r0
   e05de:	4617      	mov	r7, r2
   e05e0:	461d      	mov	r5, r3
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
   e05e2:	d12a      	bne.n	e063a <mbedtls_ssl_check_cert_usage+0x62>
        switch( ciphersuite->key_exchange )
   e05e4:	7a8b      	ldrb	r3, [r1, #10]
   e05e6:	3b01      	subs	r3, #1
   e05e8:	2b09      	cmp	r3, #9
   e05ea:	d828      	bhi.n	e063e <mbedtls_ssl_check_cert_usage+0x66>
   e05ec:	e8df f003 	tbb	[pc, r3]
   e05f0:	25252505 	.word	0x25252505
   e05f4:	27052727 	.word	0x27052727
   e05f8:	2323      	.short	0x2323
   e05fa:	2120      	movs	r1, #32
    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
   e05fc:	4630      	mov	r0, r6
   e05fe:	f7fd fc47 	bl	dde90 <mbedtls_x509_crt_check_key_usage>
   e0602:	4604      	mov	r4, r0
   e0604:	b128      	cbz	r0, e0612 <mbedtls_ssl_check_cert_usage+0x3a>
        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
   e0606:	682b      	ldr	r3, [r5, #0]
   e0608:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   e060c:	602b      	str	r3, [r5, #0]
        ret = -1;
   e060e:	f04f 34ff 	mov.w	r4, #4294967295
    if( mbedtls_x509_crt_check_extended_key_usage( cert, ext_oid, ext_len ) != 0 )
   e0612:	490c      	ldr	r1, [pc, #48]	; (e0644 <mbedtls_ssl_check_cert_usage+0x6c>)
   e0614:	4b0c      	ldr	r3, [pc, #48]	; (e0648 <mbedtls_ssl_check_cert_usage+0x70>)
   e0616:	2208      	movs	r2, #8
   e0618:	2f01      	cmp	r7, #1
   e061a:	bf18      	it	ne
   e061c:	4619      	movne	r1, r3
   e061e:	4630      	mov	r0, r6
   e0620:	f7fd fc54 	bl	ddecc <mbedtls_x509_crt_check_extended_key_usage>
   e0624:	b128      	cbz	r0, e0632 <mbedtls_ssl_check_cert_usage+0x5a>
        *flags |= MBEDTLS_X509_BADCERT_EXT_KEY_USAGE;
   e0626:	682b      	ldr	r3, [r5, #0]
   e0628:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   e062c:	602b      	str	r3, [r5, #0]
        ret = -1;
   e062e:	f04f 34ff 	mov.w	r4, #4294967295
}
   e0632:	4620      	mov	r0, r4
   e0634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                usage = MBEDTLS_X509_KU_KEY_AGREEMENT;
   e0636:	2108      	movs	r1, #8
                break;
   e0638:	e7e0      	b.n	e05fc <mbedtls_ssl_check_cert_usage+0x24>
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
   e063a:	2180      	movs	r1, #128	; 0x80
   e063c:	e7de      	b.n	e05fc <mbedtls_ssl_check_cert_usage+0x24>
    int usage = 0;
   e063e:	2100      	movs	r1, #0
   e0640:	e7dc      	b.n	e05fc <mbedtls_ssl_check_cert_usage+0x24>
   e0642:	bf00      	nop
   e0644:	000ebde6 	.word	0x000ebde6
   e0648:	000ebe1e 	.word	0x000ebe1e

000e064c <mbedtls_ssl_parse_certificate>:
{
   e064c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const mbedtls_ssl_ciphersuite_t * const ciphersuite_info =
   e0650:	6c03      	ldr	r3, [r0, #64]	; 0x40
   e0652:	f8d3 8000 	ldr.w	r8, [r3]
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e0656:	f898 300a 	ldrb.w	r3, [r8, #10]
   e065a:	2b0b      	cmp	r3, #11
{
   e065c:	b087      	sub	sp, #28
   e065e:	4604      	mov	r4, r0
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e0660:	d80d      	bhi.n	e067e <mbedtls_ssl_parse_certificate+0x32>
   e0662:	f44f 6516 	mov.w	r5, #2400	; 0x960
   e0666:	40dd      	lsrs	r5, r3
   e0668:	43ed      	mvns	r5, r5
   e066a:	f015 0501 	ands.w	r5, r5, #1
   e066e:	d106      	bne.n	e067e <mbedtls_ssl_parse_certificate+0x32>
    ssl->state++;
   e0670:	6863      	ldr	r3, [r4, #4]
   e0672:	3301      	adds	r3, #1
   e0674:	6063      	str	r3, [r4, #4]
}
   e0676:	4628      	mov	r0, r5
   e0678:	b007      	add	sp, #28
   e067a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const int authmode = ssl->conf->authmode;
   e067e:	6823      	ldr	r3, [r4, #0]
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e0680:	2101      	movs	r1, #1
   e0682:	4620      	mov	r0, r4
    const int authmode = ssl->conf->authmode;
   e0684:	f893 907c 	ldrb.w	r9, [r3, #124]	; 0x7c
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e0688:	f7ff f95a 	bl	df940 <mbedtls_ssl_read_record>
    const int authmode = ssl->conf->authmode;
   e068c:	f3c9 0981 	ubfx	r9, r9, #2, #2
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e0690:	4605      	mov	r5, r0
   e0692:	2800      	cmp	r0, #0
   e0694:	d1ef      	bne.n	e0676 <mbedtls_ssl_parse_certificate+0x2a>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e0696:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e0698:	2b16      	cmp	r3, #22
   e069a:	d007      	beq.n	e06ac <mbedtls_ssl_parse_certificate+0x60>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e069c:	220a      	movs	r2, #10
   e069e:	2102      	movs	r1, #2
   e06a0:	4620      	mov	r0, r4
   e06a2:	f7ff f933 	bl	df90c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   e06a6:	f5a5 45ee 	sub.w	r5, r5, #30464	; 0x7700
   e06aa:	e7e1      	b.n	e0670 <mbedtls_ssl_parse_certificate+0x24>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
   e06ac:	6e62      	ldr	r2, [r4, #100]	; 0x64
   e06ae:	7813      	ldrb	r3, [r2, #0]
   e06b0:	2b0b      	cmp	r3, #11
   e06b2:	d102      	bne.n	e06ba <mbedtls_ssl_parse_certificate+0x6e>
        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
   e06b4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
   e06b6:	2909      	cmp	r1, #9
   e06b8:	d806      	bhi.n	e06c8 <mbedtls_ssl_parse_certificate+0x7c>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e06ba:	2232      	movs	r2, #50	; 0x32
   e06bc:	2102      	movs	r1, #2
   e06be:	4620      	mov	r0, r4
   e06c0:	f7ff f924 	bl	df90c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
   e06c4:	4d76      	ldr	r5, [pc, #472]	; (e08a0 <mbedtls_ssl_parse_certificate+0x254>)
   e06c6:	e7d3      	b.n	e0670 <mbedtls_ssl_parse_certificate+0x24>
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];
   e06c8:	f8b2 3005 	ldrh.w	r3, [r2, #5]
    if( ssl->in_msg[i] != 0 ||
   e06cc:	7912      	ldrb	r2, [r2, #4]
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];
   e06ce:	ba5b      	rev16	r3, r3
   e06d0:	b29b      	uxth	r3, r3
    if( ssl->in_msg[i] != 0 ||
   e06d2:	2a00      	cmp	r2, #0
   e06d4:	d1f1      	bne.n	e06ba <mbedtls_ssl_parse_certificate+0x6e>
        ssl->in_hslen != n + 3 + mbedtls_ssl_hs_hdr_len( ssl ) )
   e06d6:	3307      	adds	r3, #7
    if( ssl->in_msg[i] != 0 ||
   e06d8:	4299      	cmp	r1, r3
   e06da:	d1ee      	bne.n	e06ba <mbedtls_ssl_parse_certificate+0x6e>
    if( ssl->session_negotiate->peer_cert != NULL )
   e06dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e06de:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e06e0:	b128      	cbz	r0, e06ee <mbedtls_ssl_parse_certificate+0xa2>
        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
   e06e2:	f7fd fe82 	bl	de3ea <mbedtls_x509_crt_free>
        mbedtls_free( ssl->session_negotiate->peer_cert );
   e06e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e06e8:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e06ea:	f005 f95d 	bl	e59a8 <free>
    if( ( ssl->session_negotiate->peer_cert = (mbedtls_x509_crt *)mbedtls_calloc( 1,
   e06ee:	f44f 719a 	mov.w	r1, #308	; 0x134
   e06f2:	2001      	movs	r0, #1
   e06f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   e06f6:	f008 fb01 	bl	e8cfc <calloc>
   e06fa:	65f0      	str	r0, [r6, #92]	; 0x5c
   e06fc:	b930      	cbnz	r0, e070c <mbedtls_ssl_parse_certificate+0xc0>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e06fe:	2250      	movs	r2, #80	; 0x50
   e0700:	2102      	movs	r1, #2
   e0702:	4620      	mov	r0, r4
   e0704:	f7ff f902 	bl	df90c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   e0708:	4d66      	ldr	r5, [pc, #408]	; (e08a4 <mbedtls_ssl_parse_certificate+0x258>)
   e070a:	e7b1      	b.n	e0670 <mbedtls_ssl_parse_certificate+0x24>
    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
   e070c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        switch( ret )
   e070e:	f8df a19c 	ldr.w	sl, [pc, #412]	; e08ac <mbedtls_ssl_parse_certificate+0x260>
    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
   e0712:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
        switch( ret )
   e0714:	f8df b198 	ldr.w	fp, [pc, #408]	; e08b0 <mbedtls_ssl_parse_certificate+0x264>
    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
   e0718:	f7fd fe62 	bl	de3e0 <mbedtls_x509_crt_init>
    i += 3;
   e071c:	2607      	movs	r6, #7
    while( i < ssl->in_hslen )
   e071e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   e0720:	42b3      	cmp	r3, r6
   e0722:	d92e      	bls.n	e0782 <mbedtls_ssl_parse_certificate+0x136>
        if ( i + 3 > ssl->in_hslen ) {
   e0724:	1cf1      	adds	r1, r6, #3
   e0726:	428b      	cmp	r3, r1
   e0728:	d3c7      	bcc.n	e06ba <mbedtls_ssl_parse_certificate+0x6e>
        if( ssl->in_msg[i] != 0 )
   e072a:	6e60      	ldr	r0, [r4, #100]	; 0x64
   e072c:	5d82      	ldrb	r2, [r0, r6]
   e072e:	2a00      	cmp	r2, #0
   e0730:	d1c3      	bne.n	e06ba <mbedtls_ssl_parse_certificate+0x6e>
        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
   e0732:	4406      	add	r6, r0
   e0734:	7877      	ldrb	r7, [r6, #1]
            | (unsigned int) ssl->in_msg[i + 2];
   e0736:	78b2      	ldrb	r2, [r6, #2]
        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
   e0738:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
        if( n < 128 || i + n > ssl->in_hslen )
   e073c:	2a7f      	cmp	r2, #127	; 0x7f
   e073e:	d9bc      	bls.n	e06ba <mbedtls_ssl_parse_certificate+0x6e>
   e0740:	188e      	adds	r6, r1, r2
   e0742:	42b3      	cmp	r3, r6
   e0744:	d3b9      	bcc.n	e06ba <mbedtls_ssl_parse_certificate+0x6e>
        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
   e0746:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e0748:	4401      	add	r1, r0
   e074a:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e074c:	f7fd feac 	bl	de4a8 <mbedtls_x509_crt_parse_der>
        switch( ret )
   e0750:	f510 5f16 	cmn.w	r0, #9600	; 0x2580
        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
   e0754:	4607      	mov	r7, r0
        switch( ret )
   e0756:	d010      	beq.n	e077a <mbedtls_ssl_parse_certificate+0x12e>
   e0758:	4550      	cmp	r0, sl
   e075a:	da0b      	bge.n	e0774 <mbedtls_ssl_parse_certificate+0x128>
   e075c:	f510 5f22 	cmn.w	r0, #10368	; 0x2880
   e0760:	d00d      	beq.n	e077e <mbedtls_ssl_parse_certificate+0x132>
   e0762:	4558      	cmp	r0, fp
   e0764:	d0db      	beq.n	e071e <mbedtls_ssl_parse_certificate+0xd2>
            alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
   e0766:	222a      	movs	r2, #42	; 0x2a
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL, alert );
   e0768:	2102      	movs	r1, #2
   e076a:	4620      	mov	r0, r4
   e076c:	f7ff f8ce 	bl	df90c <mbedtls_ssl_send_alert_message>
   e0770:	463d      	mov	r5, r7
        ssl->state++;
   e0772:	e77d      	b.n	e0670 <mbedtls_ssl_parse_certificate+0x24>
        switch( ret )
   e0774:	2800      	cmp	r0, #0
   e0776:	d0d2      	beq.n	e071e <mbedtls_ssl_parse_certificate+0xd2>
   e0778:	e7f5      	b.n	e0766 <mbedtls_ssl_parse_certificate+0x11a>
            alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
   e077a:	222b      	movs	r2, #43	; 0x2b
   e077c:	e7f4      	b.n	e0768 <mbedtls_ssl_parse_certificate+0x11c>
        switch( ret )
   e077e:	2250      	movs	r2, #80	; 0x50
   e0780:	e7f2      	b.n	e0768 <mbedtls_ssl_parse_certificate+0x11c>
    if( authmode != MBEDTLS_SSL_VERIFY_NONE )
   e0782:	f1b9 0f00 	cmp.w	r9, #0
   e0786:	f43f af73 	beq.w	e0670 <mbedtls_ssl_parse_certificate+0x24>
        if( ssl->handshake->sni_ca_chain != NULL )
   e078a:	6b22      	ldr	r2, [r4, #48]	; 0x30
   e078c:	6823      	ldr	r3, [r4, #0]
   e078e:	f8d2 7150 	ldr.w	r7, [r2, #336]	; 0x150
   e0792:	2f00      	cmp	r7, #0
   e0794:	d067      	beq.n	e0866 <mbedtls_ssl_parse_certificate+0x21a>
            ca_crl   = ssl->handshake->sni_ca_crl;
   e0796:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
                                ssl->session_negotiate->peer_cert,
   e079a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        ret = mbedtls_x509_crt_verify_restartable(
   e079c:	2100      	movs	r1, #0
   e079e:	9104      	str	r1, [sp, #16]
   e07a0:	6b99      	ldr	r1, [r3, #56]	; 0x38
   e07a2:	9103      	str	r1, [sp, #12]
   e07a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
   e07a6:	9102      	str	r1, [sp, #8]
   e07a8:	f100 0160 	add.w	r1, r0, #96	; 0x60
   e07ac:	9101      	str	r1, [sp, #4]
   e07ae:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   e07b2:	9100      	str	r1, [sp, #0]
   e07b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   e07b6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   e07b8:	4639      	mov	r1, r7
   e07ba:	f7fd fbcd 	bl	ddf58 <mbedtls_x509_crt_verify_restartable>
            const mbedtls_pk_context *pk = &ssl->session_negotiate->peer_cert->pk;
   e07be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e07c0:	f8d3 a05c 	ldr.w	sl, [r3, #92]	; 0x5c
        ret = mbedtls_x509_crt_verify_restartable(
   e07c4:	4606      	mov	r6, r0
            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
   e07c6:	2102      	movs	r1, #2
   e07c8:	f10a 00bc 	add.w	r0, sl, #188	; 0xbc
   e07cc:	f7fe fa36 	bl	dec3c <mbedtls_pk_can_do>
   e07d0:	b178      	cbz	r0, e07f2 <mbedtls_ssl_parse_certificate+0x1a6>
                mbedtls_ssl_check_curve( ssl, mbedtls_pk_ec( *pk )->grp.id ) != 0 )
   e07d2:	f8da 30c0 	ldr.w	r3, [sl, #192]	; 0xc0
   e07d6:	4620      	mov	r0, r4
   e07d8:	7819      	ldrb	r1, [r3, #0]
   e07da:	f7ff fee0 	bl	e059e <mbedtls_ssl_check_curve>
            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
   e07de:	b140      	cbz	r0, e07f2 <mbedtls_ssl_parse_certificate+0x1a6>
   e07e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
                ssl->session_negotiate->verify_result |= MBEDTLS_X509_BADCERT_BAD_KEY;
   e07e2:	6e13      	ldr	r3, [r2, #96]	; 0x60
   e07e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   e07e8:	6613      	str	r3, [r2, #96]	; 0x60
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
   e07ea:	4b2d      	ldr	r3, [pc, #180]	; (e08a0 <mbedtls_ssl_parse_certificate+0x254>)
   e07ec:	2e00      	cmp	r6, #0
   e07ee:	bf08      	it	eq
   e07f0:	461e      	moveq	r6, r3
                                 ! ssl->conf->endpoint,
   e07f2:	6823      	ldr	r3, [r4, #0]
        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
   e07f4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e07f6:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
   e07fa:	43d2      	mvns	r2, r2
   e07fc:	f100 0360 	add.w	r3, r0, #96	; 0x60
   e0800:	f002 0201 	and.w	r2, r2, #1
   e0804:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   e0806:	4641      	mov	r1, r8
   e0808:	f7ff fee6 	bl	e05d8 <mbedtls_ssl_check_cert_usage>
   e080c:	b108      	cbz	r0, e0812 <mbedtls_ssl_parse_certificate+0x1c6>
            if( ret == 0 )
   e080e:	2e00      	cmp	r6, #0
   e0810:	d03a      	beq.n	e0888 <mbedtls_ssl_parse_certificate+0x23c>
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
   e0812:	f1b9 0f01 	cmp.w	r9, #1
   e0816:	d107      	bne.n	e0828 <mbedtls_ssl_parse_certificate+0x1dc>
   e0818:	f516 5f1c 	cmn.w	r6, #9984	; 0x2700
   e081c:	f43f af28 	beq.w	e0670 <mbedtls_ssl_parse_certificate+0x24>
            ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
   e0820:	f516 4ff4 	cmn.w	r6, #31232	; 0x7a00
   e0824:	f43f af24 	beq.w	e0670 <mbedtls_ssl_parse_certificate+0x24>
        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
   e0828:	b917      	cbnz	r7, e0830 <mbedtls_ssl_parse_certificate+0x1e4>
   e082a:	f1b9 0f02 	cmp.w	r9, #2
   e082e:	d01f      	beq.n	e0870 <mbedtls_ssl_parse_certificate+0x224>
        if( ret != 0 )
   e0830:	2e00      	cmp	r6, #0
   e0832:	f43f af1d 	beq.w	e0670 <mbedtls_ssl_parse_certificate+0x24>
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
   e0836:	4635      	mov	r5, r6
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
   e0838:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e083a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   e083c:	05df      	lsls	r7, r3, #23
   e083e:	d419      	bmi.n	e0874 <mbedtls_ssl_parse_certificate+0x228>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
   e0840:	075e      	lsls	r6, r3, #29
   e0842:	d419      	bmi.n	e0878 <mbedtls_ssl_parse_certificate+0x22c>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
   e0844:	f413 3fdc 	tst.w	r3, #112640	; 0x1b800
   e0848:	d118      	bne.n	e087c <mbedtls_ssl_parse_certificate+0x230>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
   e084a:	07d8      	lsls	r0, r3, #31
   e084c:	d418      	bmi.n	e0880 <mbedtls_ssl_parse_certificate+0x234>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
   e084e:	0799      	lsls	r1, r3, #30
   e0850:	d418      	bmi.n	e0884 <mbedtls_ssl_parse_certificate+0x238>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
   e0852:	f013 0f08 	tst.w	r3, #8
   e0856:	bf14      	ite	ne
   e0858:	2230      	movne	r2, #48	; 0x30
   e085a:	222e      	moveq	r2, #46	; 0x2e
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e085c:	2102      	movs	r1, #2
   e085e:	4620      	mov	r0, r4
   e0860:	f7ff f854 	bl	df90c <mbedtls_ssl_send_alert_message>
   e0864:	e704      	b.n	e0670 <mbedtls_ssl_parse_certificate+0x24>
            ca_crl   = ssl->conf->ca_crl;
   e0866:	e9d3 7215 	ldrd	r7, r2, [r3, #84]	; 0x54
   e086a:	e796      	b.n	e079a <mbedtls_ssl_parse_certificate+0x14e>
                ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
   e086c:	4d0c      	ldr	r5, [pc, #48]	; (e08a0 <mbedtls_ssl_parse_certificate+0x254>)
   e086e:	e7e3      	b.n	e0838 <mbedtls_ssl_parse_certificate+0x1ec>
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
   e0870:	4d0d      	ldr	r5, [pc, #52]	; (e08a8 <mbedtls_ssl_parse_certificate+0x25c>)
   e0872:	e7e1      	b.n	e0838 <mbedtls_ssl_parse_certificate+0x1ec>
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
   e0874:	2231      	movs	r2, #49	; 0x31
   e0876:	e7f1      	b.n	e085c <mbedtls_ssl_parse_certificate+0x210>
                alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
   e0878:	222a      	movs	r2, #42	; 0x2a
   e087a:	e7ef      	b.n	e085c <mbedtls_ssl_parse_certificate+0x210>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
   e087c:	222b      	movs	r2, #43	; 0x2b
   e087e:	e7ed      	b.n	e085c <mbedtls_ssl_parse_certificate+0x210>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
   e0880:	222d      	movs	r2, #45	; 0x2d
   e0882:	e7eb      	b.n	e085c <mbedtls_ssl_parse_certificate+0x210>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
   e0884:	222c      	movs	r2, #44	; 0x2c
   e0886:	e7e9      	b.n	e085c <mbedtls_ssl_parse_certificate+0x210>
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
   e0888:	f1b9 0f01 	cmp.w	r9, #1
   e088c:	f43f aef0 	beq.w	e0670 <mbedtls_ssl_parse_certificate+0x24>
        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
   e0890:	2f00      	cmp	r7, #0
   e0892:	d1eb      	bne.n	e086c <mbedtls_ssl_parse_certificate+0x220>
   e0894:	f1b9 0f02 	cmp.w	r9, #2
   e0898:	d0ea      	beq.n	e0870 <mbedtls_ssl_parse_certificate+0x224>
                ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
   e089a:	4e01      	ldr	r6, [pc, #4]	; (e08a0 <mbedtls_ssl_parse_certificate+0x254>)
   e089c:	e7cb      	b.n	e0836 <mbedtls_ssl_parse_certificate+0x1ea>
   e089e:	bf00      	nop
   e08a0:	ffff8600 	.word	0xffff8600
   e08a4:	ffff8100 	.word	0xffff8100
   e08a8:	ffff8980 	.word	0xffff8980
   e08ac:	ffffda81 	.word	0xffffda81
   e08b0:	ffffd9d2 	.word	0xffffd9d2

000e08b4 <mbedtls_ssl_write_version>:
        ver[0] = (unsigned char) major;
   e08b4:	7018      	strb	r0, [r3, #0]
        ver[1] = (unsigned char) minor;
   e08b6:	7059      	strb	r1, [r3, #1]
}
   e08b8:	4770      	bx	lr

000e08ba <mbedtls_ssl_read_version>:
        *major = ver[0];
   e08ba:	781a      	ldrb	r2, [r3, #0]
   e08bc:	6002      	str	r2, [r0, #0]
        *minor = ver[1];
   e08be:	785b      	ldrb	r3, [r3, #1]
   e08c0:	600b      	str	r3, [r1, #0]
    }
}
   e08c2:	4770      	bx	lr

000e08c4 <mbedtls_ssl_get_key_exchange_md_tls1_2>:
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
int mbedtls_ssl_get_key_exchange_md_tls1_2( mbedtls_ssl_context *ssl,
                                            unsigned char *hash, size_t *hashlen,
                                            unsigned char *data, size_t data_len,
                                            mbedtls_md_type_t md_alg )
{
   e08c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   e08c6:	b087      	sub	sp, #28
   e08c8:	4605      	mov	r5, r0
    int ret = 0;
    mbedtls_md_context_t ctx;
    const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
   e08ca:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
{
   e08ce:	4614      	mov	r4, r2
   e08d0:	460e      	mov	r6, r1
   e08d2:	461f      	mov	r7, r3
    const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
   e08d4:	f7fc fac6 	bl	dce64 <mbedtls_md_info_from_type>
   e08d8:	9001      	str	r0, [sp, #4]
    *hashlen = mbedtls_md_get_size( md_info );
   e08da:	f7fc fbfd 	bl	dd0d8 <mbedtls_md_get_size>
   e08de:	6020      	str	r0, [r4, #0]

    mbedtls_md_init( &ctx );
   e08e0:	a803      	add	r0, sp, #12
   e08e2:	f7fc facb 	bl	dce7c <mbedtls_md_init>
     *     opaque client_random[32];
     *     opaque server_random[32];
     *     ServerDHParams params;
     * };
     */
    if( ( ret = mbedtls_md_setup( &ctx, md_info, 0 ) ) != 0 )
   e08e6:	9901      	ldr	r1, [sp, #4]
   e08e8:	2200      	movs	r2, #0
   e08ea:	a803      	add	r0, sp, #12
   e08ec:	f7fc fae6 	bl	dcebc <mbedtls_md_setup>
   e08f0:	4604      	mov	r4, r0
   e08f2:	b9c8      	cbnz	r0, e0928 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x64>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
        goto exit;
    }
    if( ( ret = mbedtls_md_starts( &ctx ) ) != 0 )
   e08f4:	a803      	add	r0, sp, #12
   e08f6:	f7fc fb01 	bl	dcefc <mbedtls_md_starts>
   e08fa:	4604      	mov	r4, r0
   e08fc:	b9a0      	cbnz	r0, e0928 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x64>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_starts", ret );
        goto exit;
    }
    if( ( ret = mbedtls_md_update( &ctx, ssl->handshake->randbytes, 64 ) ) != 0 )
   e08fe:	6b29      	ldr	r1, [r5, #48]	; 0x30
   e0900:	2240      	movs	r2, #64	; 0x40
   e0902:	f501 712d 	add.w	r1, r1, #692	; 0x2b4
   e0906:	a803      	add	r0, sp, #12
   e0908:	f7fc fb02 	bl	dcf10 <mbedtls_md_update>
   e090c:	4604      	mov	r4, r0
   e090e:	b958      	cbnz	r0, e0928 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x64>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_update", ret );
        goto exit;
    }
    if( ( ret = mbedtls_md_update( &ctx, data, data_len ) ) != 0 )
   e0910:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   e0912:	4639      	mov	r1, r7
   e0914:	a803      	add	r0, sp, #12
   e0916:	f7fc fafb 	bl	dcf10 <mbedtls_md_update>
   e091a:	4604      	mov	r4, r0
   e091c:	b920      	cbnz	r0, e0928 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x64>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_update", ret );
        goto exit;
    }
    if( ( ret = mbedtls_md_finish( &ctx, hash ) ) != 0 )
   e091e:	4631      	mov	r1, r6
   e0920:	a803      	add	r0, sp, #12
   e0922:	f7fc faff 	bl	dcf24 <mbedtls_md_finish>
   e0926:	4604      	mov	r4, r0
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_finish", ret );
        goto exit;
    }

exit:
    mbedtls_md_free( &ctx );
   e0928:	a803      	add	r0, sp, #12
   e092a:	f7fc faac 	bl	dce86 <mbedtls_md_free>

    if( ret != 0 )
   e092e:	b124      	cbz	r4, e093a <mbedtls_ssl_get_key_exchange_md_tls1_2+0x76>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e0930:	2250      	movs	r2, #80	; 0x50
   e0932:	2102      	movs	r1, #2
   e0934:	4628      	mov	r0, r5
   e0936:	f7fe ffe9 	bl	df90c <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );

    return( ret );
}
   e093a:	4620      	mov	r0, r4
   e093c:	b007      	add	sp, #28
   e093e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e0940 <_ZL11mpi_sub_hlpjPmS_>:
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
   e0940:	2300      	movs	r3, #0
{
   e0942:	b5f0      	push	{r4, r5, r6, r7, lr}
   e0944:	1f16      	subs	r6, r2, #4
    for( i = c = 0; i < n; i++, s++, d++ )
   e0946:	461c      	mov	r4, r3
   e0948:	4284      	cmp	r4, r0
   e094a:	d10b      	bne.n	e0964 <_ZL11mpi_sub_hlpjPmS_+0x24>
   e094c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
   e0950:	b1f3      	cbz	r3, e0990 <_ZL11mpi_sub_hlpjPmS_+0x50>
    {
        z = ( *d < c ); *d -= c;
   e0952:	6811      	ldr	r1, [r2, #0]
   e0954:	1ac8      	subs	r0, r1, r3
        c = z; d++;
   e0956:	4299      	cmp	r1, r3
        z = ( *d < c ); *d -= c;
   e0958:	f842 0b04 	str.w	r0, [r2], #4
        c = z; d++;
   e095c:	bf2c      	ite	cs
   e095e:	2300      	movcs	r3, #0
   e0960:	2301      	movcc	r3, #1
    while( c != 0 )
   e0962:	e7f5      	b.n	e0950 <_ZL11mpi_sub_hlpjPmS_+0x10>
        z = ( *d <  c );     *d -=  c;
   e0964:	f856 cf04 	ldr.w	ip, [r6, #4]!
   e0968:	ebac 0503 	sub.w	r5, ip, r3
   e096c:	6035      	str	r5, [r6, #0]
        c = ( *d < *s ) + z; *d -= *s;
   e096e:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   e0972:	42bd      	cmp	r5, r7
   e0974:	bf2c      	ite	cs
   e0976:	f04f 0e00 	movcs.w	lr, #0
   e097a:	f04f 0e01 	movcc.w	lr, #1
   e097e:	1bed      	subs	r5, r5, r7
   e0980:	459c      	cmp	ip, r3
   e0982:	bf2c      	ite	cs
   e0984:	4673      	movcs	r3, lr
   e0986:	f10e 0301 	addcc.w	r3, lr, #1
   e098a:	6035      	str	r5, [r6, #0]
    for( i = c = 0; i < n; i++, s++, d++ )
   e098c:	3401      	adds	r4, #1
   e098e:	e7db      	b.n	e0948 <_ZL11mpi_sub_hlpjPmS_+0x8>
    }
}
   e0990:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e0992 <_ZL11mpi_mul_hlpjPmS_m>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
   e0992:	b5f0      	push	{r4, r5, r6, r7, lr}
   e0994:	4605      	mov	r5, r0
   e0996:	4607      	mov	r7, r0
    mbedtls_mpi_uint c = 0, t = 0;
   e0998:	2400      	movs	r4, #0
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
   e099a:	2f0f      	cmp	r7, #15
   e099c:	d84e      	bhi.n	e0a3c <_ZL11mpi_mul_hlpjPmS_m+0xaa>
   e099e:	092e      	lsrs	r6, r5, #4
   e09a0:	f06f 000f 	mvn.w	r0, #15
   e09a4:	fb00 5506 	mla	r5, r0, r6, r5
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
   e09a8:	2d07      	cmp	r5, #7
   e09aa:	d93a      	bls.n	e0a22 <_ZL11mpi_mul_hlpjPmS_m+0x90>
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
   e09ac:	460e      	mov	r6, r1
    for( ; i >= 8; i -= 8 )
   e09ae:	3d08      	subs	r5, #8
        MULADDC_STOP
   e09b0:	f856 0b04 	ldr.w	r0, [r6], #4
   e09b4:	6811      	ldr	r1, [r2, #0]
   e09b6:	fbe3 1460 	umaal	r1, r4, r3, r0
   e09ba:	f842 1b04 	str.w	r1, [r2], #4
   e09be:	f856 0b04 	ldr.w	r0, [r6], #4
   e09c2:	6811      	ldr	r1, [r2, #0]
   e09c4:	fbe3 1460 	umaal	r1, r4, r3, r0
   e09c8:	f842 1b04 	str.w	r1, [r2], #4
   e09cc:	f856 0b04 	ldr.w	r0, [r6], #4
   e09d0:	6811      	ldr	r1, [r2, #0]
   e09d2:	fbe3 1460 	umaal	r1, r4, r3, r0
   e09d6:	f842 1b04 	str.w	r1, [r2], #4
   e09da:	f856 0b04 	ldr.w	r0, [r6], #4
   e09de:	6811      	ldr	r1, [r2, #0]
   e09e0:	fbe3 1460 	umaal	r1, r4, r3, r0
   e09e4:	f842 1b04 	str.w	r1, [r2], #4
   e09e8:	f856 0b04 	ldr.w	r0, [r6], #4
   e09ec:	6811      	ldr	r1, [r2, #0]
   e09ee:	fbe3 1460 	umaal	r1, r4, r3, r0
   e09f2:	f842 1b04 	str.w	r1, [r2], #4
   e09f6:	f856 0b04 	ldr.w	r0, [r6], #4
   e09fa:	6811      	ldr	r1, [r2, #0]
   e09fc:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0a00:	f842 1b04 	str.w	r1, [r2], #4
   e0a04:	f856 0b04 	ldr.w	r0, [r6], #4
   e0a08:	6811      	ldr	r1, [r2, #0]
   e0a0a:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0a0e:	f842 1b04 	str.w	r1, [r2], #4
   e0a12:	f856 0b04 	ldr.w	r0, [r6], #4
   e0a16:	6811      	ldr	r1, [r2, #0]
   e0a18:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0a1c:	f842 1b04 	str.w	r1, [r2], #4
   e0a20:	4631      	mov	r1, r6
    }

    for( ; i > 0; i-- )
   e0a22:	2d00      	cmp	r5, #0
   e0a24:	d07e      	beq.n	e0b24 <_ZL11mpi_mul_hlpjPmS_m+0x192>
    {
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
   e0a26:	460e      	mov	r6, r1
    for( ; i > 0; i-- )
   e0a28:	3d01      	subs	r5, #1
        MULADDC_STOP
   e0a2a:	f856 0b04 	ldr.w	r0, [r6], #4
   e0a2e:	6811      	ldr	r1, [r2, #0]
   e0a30:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0a34:	f842 1b04 	str.w	r1, [r2], #4
   e0a38:	4631      	mov	r1, r6
    for( ; i > 0; i-- )
   e0a3a:	e7f2      	b.n	e0a22 <_ZL11mpi_mul_hlpjPmS_m+0x90>
        MULADDC_STOP
   e0a3c:	460e      	mov	r6, r1
    for( ; i >= 16; i -= 16 )
   e0a3e:	3f10      	subs	r7, #16
        MULADDC_STOP
   e0a40:	f856 0b04 	ldr.w	r0, [r6], #4
   e0a44:	6811      	ldr	r1, [r2, #0]
   e0a46:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0a4a:	f842 1b04 	str.w	r1, [r2], #4
   e0a4e:	f856 0b04 	ldr.w	r0, [r6], #4
   e0a52:	6811      	ldr	r1, [r2, #0]
   e0a54:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0a58:	f842 1b04 	str.w	r1, [r2], #4
   e0a5c:	f856 0b04 	ldr.w	r0, [r6], #4
   e0a60:	6811      	ldr	r1, [r2, #0]
   e0a62:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0a66:	f842 1b04 	str.w	r1, [r2], #4
   e0a6a:	f856 0b04 	ldr.w	r0, [r6], #4
   e0a6e:	6811      	ldr	r1, [r2, #0]
   e0a70:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0a74:	f842 1b04 	str.w	r1, [r2], #4
   e0a78:	f856 0b04 	ldr.w	r0, [r6], #4
   e0a7c:	6811      	ldr	r1, [r2, #0]
   e0a7e:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0a82:	f842 1b04 	str.w	r1, [r2], #4
   e0a86:	f856 0b04 	ldr.w	r0, [r6], #4
   e0a8a:	6811      	ldr	r1, [r2, #0]
   e0a8c:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0a90:	f842 1b04 	str.w	r1, [r2], #4
   e0a94:	f856 0b04 	ldr.w	r0, [r6], #4
   e0a98:	6811      	ldr	r1, [r2, #0]
   e0a9a:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0a9e:	f842 1b04 	str.w	r1, [r2], #4
   e0aa2:	f856 0b04 	ldr.w	r0, [r6], #4
   e0aa6:	6811      	ldr	r1, [r2, #0]
   e0aa8:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0aac:	f842 1b04 	str.w	r1, [r2], #4
   e0ab0:	f856 0b04 	ldr.w	r0, [r6], #4
   e0ab4:	6811      	ldr	r1, [r2, #0]
   e0ab6:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0aba:	f842 1b04 	str.w	r1, [r2], #4
   e0abe:	f856 0b04 	ldr.w	r0, [r6], #4
   e0ac2:	6811      	ldr	r1, [r2, #0]
   e0ac4:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0ac8:	f842 1b04 	str.w	r1, [r2], #4
   e0acc:	f856 0b04 	ldr.w	r0, [r6], #4
   e0ad0:	6811      	ldr	r1, [r2, #0]
   e0ad2:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0ad6:	f842 1b04 	str.w	r1, [r2], #4
   e0ada:	f856 0b04 	ldr.w	r0, [r6], #4
   e0ade:	6811      	ldr	r1, [r2, #0]
   e0ae0:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0ae4:	f842 1b04 	str.w	r1, [r2], #4
   e0ae8:	f856 0b04 	ldr.w	r0, [r6], #4
   e0aec:	6811      	ldr	r1, [r2, #0]
   e0aee:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0af2:	f842 1b04 	str.w	r1, [r2], #4
   e0af6:	f856 0b04 	ldr.w	r0, [r6], #4
   e0afa:	6811      	ldr	r1, [r2, #0]
   e0afc:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0b00:	f842 1b04 	str.w	r1, [r2], #4
   e0b04:	f856 0b04 	ldr.w	r0, [r6], #4
   e0b08:	6811      	ldr	r1, [r2, #0]
   e0b0a:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0b0e:	f842 1b04 	str.w	r1, [r2], #4
   e0b12:	f856 0b04 	ldr.w	r0, [r6], #4
   e0b16:	6811      	ldr	r1, [r2, #0]
   e0b18:	fbe3 1460 	umaal	r1, r4, r3, r0
   e0b1c:	f842 1b04 	str.w	r1, [r2], #4
   e0b20:	4631      	mov	r1, r6
    for( ; i >= 16; i -= 16 )
   e0b22:	e73a      	b.n	e099a <_ZL11mpi_mul_hlpjPmS_m+0x8>
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
   e0b24:	6813      	ldr	r3, [r2, #0]
   e0b26:	191b      	adds	r3, r3, r4
   e0b28:	bf2c      	ite	cs
   e0b2a:	2401      	movcs	r4, #1
   e0b2c:	2400      	movcc	r4, #0
   e0b2e:	f842 3b04 	str.w	r3, [r2], #4
    }
    while( c != 0 );
   e0b32:	2c00      	cmp	r4, #0
   e0b34:	d1f6      	bne.n	e0b24 <_ZL11mpi_mul_hlpjPmS_m+0x192>
}
   e0b36:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e0b38 <_ZL21mpi_bigendian_to_hostPmj.part.0>:
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
   e0b38:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   e0b3c:	3901      	subs	r1, #1
   e0b3e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
         cur_limb_left <= cur_limb_right;
   e0b42:	4281      	cmp	r1, r0
   e0b44:	d308      	bcc.n	e0b58 <_ZL21mpi_bigendian_to_hostPmj.part.0+0x20>
            return( __builtin_bswap32(x) );
   e0b46:	6803      	ldr	r3, [r0, #0]
   e0b48:	680a      	ldr	r2, [r1, #0]
   e0b4a:	ba1b      	rev	r3, r3
   e0b4c:	ba12      	rev	r2, r2
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
   e0b4e:	f840 2b04 	str.w	r2, [r0], #4
        *cur_limb_right = tmp;
   e0b52:	f841 3904 	str.w	r3, [r1], #-4
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
   e0b56:	e7f4      	b.n	e0b42 <_ZL21mpi_bigendian_to_hostPmj.part.0+0xa>
}
   e0b58:	4770      	bx	lr

000e0b5a <mbedtls_mpi_init>:
    X->n = 0;
   e0b5a:	2300      	movs	r3, #0
   e0b5c:	2201      	movs	r2, #1
   e0b5e:	e9c0 2300 	strd	r2, r3, [r0]
    X->p = NULL;
   e0b62:	6083      	str	r3, [r0, #8]
}
   e0b64:	4770      	bx	lr

000e0b66 <mbedtls_mpi_free>:
{
   e0b66:	b510      	push	{r4, lr}
    if( X == NULL )
   e0b68:	4604      	mov	r4, r0
   e0b6a:	b168      	cbz	r0, e0b88 <mbedtls_mpi_free+0x22>
    if( X->p != NULL )
   e0b6c:	6880      	ldr	r0, [r0, #8]
   e0b6e:	b130      	cbz	r0, e0b7e <mbedtls_mpi_free+0x18>
    mbedtls_platform_zeroize( v, ciL * n );
   e0b70:	6861      	ldr	r1, [r4, #4]
   e0b72:	0089      	lsls	r1, r1, #2
   e0b74:	f002 f826 	bl	e2bc4 <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
   e0b78:	68a0      	ldr	r0, [r4, #8]
   e0b7a:	f004 ff15 	bl	e59a8 <free>
    X->n = 0;
   e0b7e:	2300      	movs	r3, #0
   e0b80:	2201      	movs	r2, #1
   e0b82:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
   e0b86:	60a3      	str	r3, [r4, #8]
}
   e0b88:	bd10      	pop	{r4, pc}

000e0b8a <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
   e0b8a:	f242 7310 	movw	r3, #10000	; 0x2710
   e0b8e:	4299      	cmp	r1, r3
{
   e0b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e0b94:	4604      	mov	r4, r0
   e0b96:	460d      	mov	r5, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
   e0b98:	d903      	bls.n	e0ba2 <mbedtls_mpi_grow+0x18>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
   e0b9a:	f06f 000f 	mvn.w	r0, #15
}
   e0b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( X->n < nblimbs )
   e0ba2:	6846      	ldr	r6, [r0, #4]
   e0ba4:	428e      	cmp	r6, r1
   e0ba6:	d219      	bcs.n	e0bdc <mbedtls_mpi_grow+0x52>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
   e0ba8:	2104      	movs	r1, #4
   e0baa:	4628      	mov	r0, r5
   e0bac:	f008 f8a6 	bl	e8cfc <calloc>
   e0bb0:	4607      	mov	r7, r0
   e0bb2:	2800      	cmp	r0, #0
   e0bb4:	d0f1      	beq.n	e0b9a <mbedtls_mpi_grow+0x10>
        if( X->p != NULL )
   e0bb6:	f8d4 8008 	ldr.w	r8, [r4, #8]
   e0bba:	f1b8 0f00 	cmp.w	r8, #0
   e0bbe:	d00b      	beq.n	e0bd8 <mbedtls_mpi_grow+0x4e>
            memcpy( p, X->p, X->n * ciL );
   e0bc0:	00b6      	lsls	r6, r6, #2
   e0bc2:	4632      	mov	r2, r6
   e0bc4:	4641      	mov	r1, r8
   e0bc6:	f008 f911 	bl	e8dec <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
   e0bca:	4640      	mov	r0, r8
   e0bcc:	4631      	mov	r1, r6
   e0bce:	f001 fff9 	bl	e2bc4 <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
   e0bd2:	68a0      	ldr	r0, [r4, #8]
   e0bd4:	f004 fee8 	bl	e59a8 <free>
        X->p = p;
   e0bd8:	e9c4 5701 	strd	r5, r7, [r4, #4]
    return( 0 );
   e0bdc:	2000      	movs	r0, #0
   e0bde:	e7de      	b.n	e0b9e <mbedtls_mpi_grow+0x14>

000e0be0 <mbedtls_mpi_shrink>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
   e0be0:	f242 7310 	movw	r3, #10000	; 0x2710
   e0be4:	4299      	cmp	r1, r3
{
   e0be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e0bea:	4605      	mov	r5, r0
   e0bec:	460c      	mov	r4, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
   e0bee:	d903      	bls.n	e0bf8 <mbedtls_mpi_shrink+0x18>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
   e0bf0:	f06f 000f 	mvn.w	r0, #15
}
   e0bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( X->n <= nblimbs )
   e0bf8:	f8d0 8004 	ldr.w	r8, [r0, #4]
   e0bfc:	4588      	cmp	r8, r1
   e0bfe:	d803      	bhi.n	e0c08 <mbedtls_mpi_shrink+0x28>
}
   e0c00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return( mbedtls_mpi_grow( X, nblimbs ) );
   e0c04:	f7ff bfc1 	b.w	e0b8a <mbedtls_mpi_grow>
    for( i = X->n - 1; i > 0; i-- )
   e0c08:	f108 31ff 	add.w	r1, r8, #4294967295
   e0c0c:	b129      	cbz	r1, e0c1a <mbedtls_mpi_shrink+0x3a>
        if( X->p[i] != 0 )
   e0c0e:	68ab      	ldr	r3, [r5, #8]
   e0c10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   e0c14:	b90b      	cbnz	r3, e0c1a <mbedtls_mpi_shrink+0x3a>
    for( i = X->n - 1; i > 0; i-- )
   e0c16:	3901      	subs	r1, #1
   e0c18:	e7f8      	b.n	e0c0c <mbedtls_mpi_shrink+0x2c>
    i++;
   e0c1a:	3101      	adds	r1, #1
    if( i < nblimbs )
   e0c1c:	428c      	cmp	r4, r1
   e0c1e:	bf38      	it	cc
   e0c20:	460c      	movcc	r4, r1
    if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( i, ciL ) ) == NULL )
   e0c22:	4620      	mov	r0, r4
   e0c24:	2104      	movs	r1, #4
   e0c26:	f008 f869 	bl	e8cfc <calloc>
   e0c2a:	4606      	mov	r6, r0
   e0c2c:	2800      	cmp	r0, #0
   e0c2e:	d0df      	beq.n	e0bf0 <mbedtls_mpi_shrink+0x10>
    if( X->p != NULL )
   e0c30:	68af      	ldr	r7, [r5, #8]
   e0c32:	b15f      	cbz	r7, e0c4c <mbedtls_mpi_shrink+0x6c>
        memcpy( p, X->p, i * ciL );
   e0c34:	00a2      	lsls	r2, r4, #2
   e0c36:	4639      	mov	r1, r7
   e0c38:	f008 f8d8 	bl	e8dec <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
   e0c3c:	4638      	mov	r0, r7
   e0c3e:	ea4f 0188 	mov.w	r1, r8, lsl #2
   e0c42:	f001 ffbf 	bl	e2bc4 <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
   e0c46:	68a8      	ldr	r0, [r5, #8]
   e0c48:	f004 feae 	bl	e59a8 <free>
    X->p = p;
   e0c4c:	e9c5 4601 	strd	r4, r6, [r5, #4]
    return( 0 );
   e0c50:	2000      	movs	r0, #0
   e0c52:	e7cf      	b.n	e0bf4 <mbedtls_mpi_shrink+0x14>

000e0c54 <mbedtls_mpi_copy>:
    if( X == Y )
   e0c54:	4288      	cmp	r0, r1
{
   e0c56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e0c58:	4606      	mov	r6, r0
   e0c5a:	460f      	mov	r7, r1
    if( X == Y )
   e0c5c:	d003      	beq.n	e0c66 <mbedtls_mpi_copy+0x12>
    if( Y->p == NULL )
   e0c5e:	688d      	ldr	r5, [r1, #8]
   e0c60:	b91d      	cbnz	r5, e0c6a <mbedtls_mpi_copy+0x16>
        mbedtls_mpi_free( X );
   e0c62:	f7ff ff80 	bl	e0b66 <mbedtls_mpi_free>
        return( 0 );
   e0c66:	2000      	movs	r0, #0
   e0c68:	e011      	b.n	e0c8e <mbedtls_mpi_copy+0x3a>
    for( i = Y->n - 1; i > 0; i-- )
   e0c6a:	684c      	ldr	r4, [r1, #4]
   e0c6c:	3c01      	subs	r4, #1
   e0c6e:	b11c      	cbz	r4, e0c78 <mbedtls_mpi_copy+0x24>
        if( Y->p[i] != 0 )
   e0c70:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   e0c74:	2b00      	cmp	r3, #0
   e0c76:	d0f9      	beq.n	e0c6c <mbedtls_mpi_copy+0x18>
    if( X->n < i )
   e0c78:	6872      	ldr	r2, [r6, #4]
    X->s = Y->s;
   e0c7a:	683b      	ldr	r3, [r7, #0]
   e0c7c:	6033      	str	r3, [r6, #0]
    i++;
   e0c7e:	3401      	adds	r4, #1
    if( X->n < i )
   e0c80:	42a2      	cmp	r2, r4
   e0c82:	d205      	bcs.n	e0c90 <mbedtls_mpi_copy+0x3c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
   e0c84:	4621      	mov	r1, r4
   e0c86:	4630      	mov	r0, r6
   e0c88:	f7ff ff7f 	bl	e0b8a <mbedtls_mpi_grow>
   e0c8c:	b140      	cbz	r0, e0ca0 <mbedtls_mpi_copy+0x4c>
}
   e0c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memset( X->p + i, 0, ( X->n - i ) * ciL );
   e0c90:	68b0      	ldr	r0, [r6, #8]
   e0c92:	1b12      	subs	r2, r2, r4
   e0c94:	0092      	lsls	r2, r2, #2
   e0c96:	2100      	movs	r1, #0
   e0c98:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   e0c9c:	f008 f8ce 	bl	e8e3c <memset>
    memcpy( X->p, Y->p, i * ciL );
   e0ca0:	68b9      	ldr	r1, [r7, #8]
   e0ca2:	68b0      	ldr	r0, [r6, #8]
   e0ca4:	00a2      	lsls	r2, r4, #2
   e0ca6:	f008 f8a1 	bl	e8dec <memcpy>
   e0caa:	e7dc      	b.n	e0c66 <mbedtls_mpi_copy+0x12>

000e0cac <mbedtls_mpi_safe_cond_assign>:
{
   e0cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e0cae:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
   e0cb0:	6849      	ldr	r1, [r1, #4]
{
   e0cb2:	4605      	mov	r5, r0
   e0cb4:	4614      	mov	r4, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
   e0cb6:	f7ff ff68 	bl	e0b8a <mbedtls_mpi_grow>
   e0cba:	bb40      	cbnz	r0, e0d0e <mbedtls_mpi_safe_cond_assign+0x62>
    assign = (assign | (unsigned char)-assign) >> 7;
   e0cbc:	4262      	negs	r2, r4
   e0cbe:	4322      	orrs	r2, r4
    X->s = X->s * ( 1 - assign ) + Y->s * assign;
   e0cc0:	6834      	ldr	r4, [r6, #0]
   e0cc2:	682b      	ldr	r3, [r5, #0]
    assign = (assign | (unsigned char)-assign) >> 7;
   e0cc4:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    X->s = X->s * ( 1 - assign ) + Y->s * assign;
   e0cc8:	f1c2 0101 	rsb	r1, r2, #1
   e0ccc:	4354      	muls	r4, r2
   e0cce:	fb03 4301 	mla	r3, r3, r1, r4
   e0cd2:	602b      	str	r3, [r5, #0]
    for( i = 0; i < Y->n; i++ )
   e0cd4:	4603      	mov	r3, r0
   e0cd6:	6874      	ldr	r4, [r6, #4]
   e0cd8:	429c      	cmp	r4, r3
   e0cda:	d90d      	bls.n	e0cf8 <mbedtls_mpi_safe_cond_assign+0x4c>
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;
   e0cdc:	f8d5 c008 	ldr.w	ip, [r5, #8]
   e0ce0:	68b4      	ldr	r4, [r6, #8]
   e0ce2:	f85c 7023 	ldr.w	r7, [ip, r3, lsl #2]
   e0ce6:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
   e0cea:	434f      	muls	r7, r1
   e0cec:	fb04 7402 	mla	r4, r4, r2, r7
   e0cf0:	f84c 4023 	str.w	r4, [ip, r3, lsl #2]
    for( i = 0; i < Y->n; i++ )
   e0cf4:	3301      	adds	r3, #1
   e0cf6:	e7ee      	b.n	e0cd6 <mbedtls_mpi_safe_cond_assign+0x2a>
    for( ; i < X->n; i++ )
   e0cf8:	686a      	ldr	r2, [r5, #4]
   e0cfa:	429a      	cmp	r2, r3
   e0cfc:	d907      	bls.n	e0d0e <mbedtls_mpi_safe_cond_assign+0x62>
        X->p[i] *= ( 1 - assign );
   e0cfe:	68ac      	ldr	r4, [r5, #8]
   e0d00:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   e0d04:	434a      	muls	r2, r1
   e0d06:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for( ; i < X->n; i++ )
   e0d0a:	3301      	adds	r3, #1
   e0d0c:	e7f4      	b.n	e0cf8 <mbedtls_mpi_safe_cond_assign+0x4c>
}
   e0d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e0d10 <mbedtls_mpi_lset>:
{
   e0d10:	b570      	push	{r4, r5, r6, lr}
   e0d12:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
   e0d14:	2101      	movs	r1, #1
{
   e0d16:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
   e0d18:	f7ff ff37 	bl	e0b8a <mbedtls_mpi_grow>
   e0d1c:	4605      	mov	r5, r0
   e0d1e:	b988      	cbnz	r0, e0d44 <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
   e0d20:	6862      	ldr	r2, [r4, #4]
   e0d22:	4601      	mov	r1, r0
   e0d24:	0092      	lsls	r2, r2, #2
   e0d26:	68a0      	ldr	r0, [r4, #8]
   e0d28:	f008 f888 	bl	e8e3c <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
   e0d2c:	68a3      	ldr	r3, [r4, #8]
   e0d2e:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
   e0d32:	2e00      	cmp	r6, #0
    X->p[0] = ( z < 0 ) ? -z : z;
   e0d34:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
   e0d38:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
   e0d3a:	bfb4      	ite	lt
   e0d3c:	f04f 33ff 	movlt.w	r3, #4294967295
   e0d40:	2301      	movge	r3, #1
   e0d42:	6023      	str	r3, [r4, #0]
}
   e0d44:	4628      	mov	r0, r5
   e0d46:	bd70      	pop	{r4, r5, r6, pc}

000e0d48 <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
   e0d48:	6843      	ldr	r3, [r0, #4]
   e0d4a:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
   e0d4e:	bf3f      	itttt	cc
   e0d50:	094a      	lsrcc	r2, r1, #5
   e0d52:	6883      	ldrcc	r3, [r0, #8]
   e0d54:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
   e0d58:	f001 011f 	andcc.w	r1, r1, #31
   e0d5c:	bf3a      	itte	cc
   e0d5e:	fa20 f101 	lsrcc.w	r1, r0, r1
   e0d62:	f001 0001 	andcc.w	r0, r1, #1
        return( 0 );
   e0d66:	2000      	movcs	r0, #0
}
   e0d68:	4770      	bx	lr

000e0d6a <mbedtls_mpi_lsb>:
{
   e0d6a:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i, j, count = 0;
   e0d6c:	2200      	movs	r2, #0
    for( i = 0; i < X->n; i++ )
   e0d6e:	6845      	ldr	r5, [r0, #4]
   e0d70:	4611      	mov	r1, r2
   e0d72:	428d      	cmp	r5, r1
   e0d74:	d011      	beq.n	e0d9a <mbedtls_mpi_lsb+0x30>
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
   e0d76:	6883      	ldr	r3, [r0, #8]
   e0d78:	f853 6021 	ldr.w	r6, [r3, r1, lsl #2]
        for( j = 0; j < biL; j++, count++ )
   e0d7c:	2300      	movs	r3, #0
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
   e0d7e:	fa26 f703 	lsr.w	r7, r6, r3
   e0d82:	07ff      	lsls	r7, r7, #31
   e0d84:	eb02 0403 	add.w	r4, r2, r3
   e0d88:	d408      	bmi.n	e0d9c <mbedtls_mpi_lsb+0x32>
        for( j = 0; j < biL; j++, count++ )
   e0d8a:	3301      	adds	r3, #1
   e0d8c:	2b20      	cmp	r3, #32
   e0d8e:	eb02 0403 	add.w	r4, r2, r3
   e0d92:	d1f4      	bne.n	e0d7e <mbedtls_mpi_lsb+0x14>
    for( i = 0; i < X->n; i++ )
   e0d94:	3101      	adds	r1, #1
        for( j = 0; j < biL; j++, count++ )
   e0d96:	4622      	mov	r2, r4
    for( i = 0; i < X->n; i++ )
   e0d98:	e7eb      	b.n	e0d72 <mbedtls_mpi_lsb+0x8>
    return( 0 );
   e0d9a:	2400      	movs	r4, #0
}
   e0d9c:	4620      	mov	r0, r4
   e0d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e0da0 <mbedtls_mpi_bitlen>:
{
   e0da0:	4602      	mov	r2, r0
    if( X->n == 0 )
   e0da2:	6840      	ldr	r0, [r0, #4]
   e0da4:	b1b0      	cbz	r0, e0dd4 <mbedtls_mpi_bitlen+0x34>
    for( i = X->n - 1; i > 0; i-- )
   e0da6:	6892      	ldr	r2, [r2, #8]
   e0da8:	1e43      	subs	r3, r0, #1
   e0daa:	b123      	cbz	r3, e0db6 <mbedtls_mpi_bitlen+0x16>
        if( X->p[i] != 0 )
   e0dac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   e0db0:	b909      	cbnz	r1, e0db6 <mbedtls_mpi_bitlen+0x16>
    for( i = X->n - 1; i > 0; i-- )
   e0db2:	3b01      	subs	r3, #1
   e0db4:	e7f9      	b.n	e0daa <mbedtls_mpi_bitlen+0xa>
    j = biL - mbedtls_clz( X->p[i] );
   e0db6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for( j = 0; j < biL; j++ )
   e0dba:	2000      	movs	r0, #0
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
   e0dbc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
        if( x & mask ) break;
   e0dc0:	4211      	tst	r1, r2
   e0dc2:	d104      	bne.n	e0dce <mbedtls_mpi_bitlen+0x2e>
    for( j = 0; j < biL; j++ )
   e0dc4:	3001      	adds	r0, #1
   e0dc6:	2820      	cmp	r0, #32
        mask >>= 1;
   e0dc8:	ea4f 0252 	mov.w	r2, r2, lsr #1
    for( j = 0; j < biL; j++ )
   e0dcc:	d1f8      	bne.n	e0dc0 <mbedtls_mpi_bitlen+0x20>
    return( ( i * biL ) + j );
   e0dce:	3301      	adds	r3, #1
   e0dd0:	ebc0 1043 	rsb	r0, r0, r3, lsl #5
}
   e0dd4:	4770      	bx	lr

000e0dd6 <mbedtls_mpi_size>:
{
   e0dd6:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
   e0dd8:	f7ff ffe2 	bl	e0da0 <mbedtls_mpi_bitlen>
   e0ddc:	3007      	adds	r0, #7
}
   e0dde:	08c0      	lsrs	r0, r0, #3
   e0de0:	bd08      	pop	{r3, pc}

000e0de2 <mbedtls_mpi_read_binary>:
{
   e0de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
   e0de6:	f012 0503 	ands.w	r5, r2, #3
   e0dea:	bf18      	it	ne
   e0dec:	2501      	movne	r5, #1
    if( X->n != limbs )
   e0dee:	6843      	ldr	r3, [r0, #4]
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
   e0df0:	eb05 0592 	add.w	r5, r5, r2, lsr #2
    if( X->n != limbs )
   e0df4:	42ab      	cmp	r3, r5
{
   e0df6:	4604      	mov	r4, r0
   e0df8:	4688      	mov	r8, r1
   e0dfa:	4617      	mov	r7, r2
    if( X->n != limbs )
   e0dfc:	d108      	bne.n	e0e10 <mbedtls_mpi_read_binary+0x2e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
   e0dfe:	2100      	movs	r1, #0
   e0e00:	4620      	mov	r0, r4
   e0e02:	f7ff ff85 	bl	e0d10 <mbedtls_mpi_lset>
   e0e06:	4606      	mov	r6, r0
   e0e08:	b188      	cbz	r0, e0e2e <mbedtls_mpi_read_binary+0x4c>
}
   e0e0a:	4630      	mov	r0, r6
   e0e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        mbedtls_mpi_free( X );
   e0e10:	f7ff fea9 	bl	e0b66 <mbedtls_mpi_free>
    X->n = 0;
   e0e14:	2300      	movs	r3, #0
   e0e16:	2201      	movs	r2, #1
   e0e18:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
   e0e1c:	60a3      	str	r3, [r4, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
   e0e1e:	4629      	mov	r1, r5
   e0e20:	4620      	mov	r0, r4
   e0e22:	f7ff feb2 	bl	e0b8a <mbedtls_mpi_grow>
   e0e26:	4606      	mov	r6, r0
   e0e28:	2800      	cmp	r0, #0
   e0e2a:	d0e8      	beq.n	e0dfe <mbedtls_mpi_read_binary+0x1c>
   e0e2c:	e7ed      	b.n	e0e0a <mbedtls_mpi_read_binary+0x28>
    if( buf != NULL )
   e0e2e:	f1b8 0f00 	cmp.w	r8, #0
   e0e32:	d0ea      	beq.n	e0e0a <mbedtls_mpi_read_binary+0x28>
        memcpy( Xp + overhead, buf, buflen );
   e0e34:	68a3      	ldr	r3, [r4, #8]
    size_t const overhead = ( limbs * ciL ) - buflen;
   e0e36:	ebc7 0085 	rsb	r0, r7, r5, lsl #2
        memcpy( Xp + overhead, buf, buflen );
   e0e3a:	463a      	mov	r2, r7
   e0e3c:	4641      	mov	r1, r8
   e0e3e:	4418      	add	r0, r3
   e0e40:	f007 ffd4 	bl	e8dec <memcpy>
    if( limbs == 0 )
   e0e44:	2d00      	cmp	r5, #0
   e0e46:	d0e0      	beq.n	e0e0a <mbedtls_mpi_read_binary+0x28>
   e0e48:	68a0      	ldr	r0, [r4, #8]
   e0e4a:	4629      	mov	r1, r5
   e0e4c:	f7ff fe74 	bl	e0b38 <_ZL21mpi_bigendian_to_hostPmj.part.0>
    return( ret );
   e0e50:	e7db      	b.n	e0e0a <mbedtls_mpi_read_binary+0x28>

000e0e52 <mbedtls_mpi_write_binary>:
{
   e0e52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e0e54:	4604      	mov	r4, r0
   e0e56:	4608      	mov	r0, r1
    stored_bytes = X->n * ciL;
   e0e58:	6863      	ldr	r3, [r4, #4]
    if( stored_bytes < buflen )
   e0e5a:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
    stored_bytes = X->n * ciL;
   e0e5e:	ea4f 0583 	mov.w	r5, r3, lsl #2
    if( stored_bytes < buflen )
   e0e62:	d916      	bls.n	e0e92 <mbedtls_mpi_write_binary+0x40>
        p = buf + buflen - stored_bytes;
   e0e64:	1b52      	subs	r2, r2, r5
   e0e66:	188e      	adds	r6, r1, r2
        memset( buf, 0, buflen - stored_bytes );
   e0e68:	2100      	movs	r1, #0
   e0e6a:	f007 ffe7 	bl	e8e3c <memset>
        p = buf + buflen - stored_bytes;
   e0e6e:	4630      	mov	r0, r6
   e0e70:	462a      	mov	r2, r5
    for( i = 0; i < bytes_to_copy; i++ )
   e0e72:	1881      	adds	r1, r0, r2
   e0e74:	2300      	movs	r3, #0
   e0e76:	429a      	cmp	r2, r3
   e0e78:	d01f      	beq.n	e0eba <mbedtls_mpi_write_binary+0x68>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
   e0e7a:	68a7      	ldr	r7, [r4, #8]
   e0e7c:	f023 0603 	bic.w	r6, r3, #3
   e0e80:	f003 0003 	and.w	r0, r3, #3
   e0e84:	00c5      	lsls	r5, r0, #3
   e0e86:	59b8      	ldr	r0, [r7, r6]
   e0e88:	40e8      	lsrs	r0, r5
   e0e8a:	f801 0d01 	strb.w	r0, [r1, #-1]!
    for( i = 0; i < bytes_to_copy; i++ )
   e0e8e:	3301      	adds	r3, #1
   e0e90:	e7f1      	b.n	e0e76 <mbedtls_mpi_write_binary+0x24>
   e0e92:	4613      	mov	r3, r2
        for( i = bytes_to_copy; i < stored_bytes; i++ )
   e0e94:	42ab      	cmp	r3, r5
   e0e96:	d0ec      	beq.n	e0e72 <mbedtls_mpi_write_binary+0x20>
            if( GET_BYTE( X, i ) != 0 )
   e0e98:	68a7      	ldr	r7, [r4, #8]
   e0e9a:	f023 0c03 	bic.w	ip, r3, #3
   e0e9e:	f003 0103 	and.w	r1, r3, #3
   e0ea2:	00ce      	lsls	r6, r1, #3
   e0ea4:	f857 100c 	ldr.w	r1, [r7, ip]
   e0ea8:	40f1      	lsrs	r1, r6
   e0eaa:	f011 0fff 	tst.w	r1, #255	; 0xff
   e0eae:	d101      	bne.n	e0eb4 <mbedtls_mpi_write_binary+0x62>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
   e0eb0:	3301      	adds	r3, #1
   e0eb2:	e7ef      	b.n	e0e94 <mbedtls_mpi_write_binary+0x42>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
   e0eb4:	f06f 0007 	mvn.w	r0, #7
}
   e0eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return( 0 );
   e0eba:	2000      	movs	r0, #0
   e0ebc:	e7fc      	b.n	e0eb8 <mbedtls_mpi_write_binary+0x66>

000e0ebe <mbedtls_mpi_shift_l>:
{
   e0ebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e0ec0:	4605      	mov	r5, r0
   e0ec2:	460e      	mov	r6, r1
    v0 = count / (biL    );
   e0ec4:	094c      	lsrs	r4, r1, #5
    t1 = count & (biL - 1);
   e0ec6:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
   e0eca:	f7ff ff69 	bl	e0da0 <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
   e0ece:	686b      	ldr	r3, [r5, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
   e0ed0:	4430      	add	r0, r6
    if( X->n * biL < i )
   e0ed2:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
   e0ed6:	d804      	bhi.n	e0ee2 <mbedtls_mpi_shift_l+0x24>
    if( v0 > 0 )
   e0ed8:	2e1f      	cmp	r6, #31
   e0eda:	d80e      	bhi.n	e0efa <mbedtls_mpi_shift_l+0x3c>
    if( t1 > 0 )
   e0edc:	bb5f      	cbnz	r7, e0f36 <mbedtls_mpi_shift_l+0x78>
    ret = 0;
   e0ede:	2000      	movs	r0, #0
   e0ee0:	e00a      	b.n	e0ef8 <mbedtls_mpi_shift_l+0x3a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
   e0ee2:	f010 011f 	ands.w	r1, r0, #31
   e0ee6:	bf18      	it	ne
   e0ee8:	2101      	movne	r1, #1
   e0eea:	eb01 1150 	add.w	r1, r1, r0, lsr #5
   e0eee:	4628      	mov	r0, r5
   e0ef0:	f7ff fe4b 	bl	e0b8a <mbedtls_mpi_grow>
   e0ef4:	2800      	cmp	r0, #0
   e0ef6:	d0ef      	beq.n	e0ed8 <mbedtls_mpi_shift_l+0x1a>
}
   e0ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
   e0efa:	686b      	ldr	r3, [r5, #4]
   e0efc:	f06f 0003 	mvn.w	r0, #3
   e0f00:	009a      	lsls	r2, r3, #2
   e0f02:	4360      	muls	r0, r4
   e0f04:	4619      	mov	r1, r3
   e0f06:	42a1      	cmp	r1, r4
   e0f08:	f1a2 0204 	sub.w	r2, r2, #4
   e0f0c:	d80a      	bhi.n	e0f24 <mbedtls_mpi_shift_l+0x66>
   e0f0e:	42a3      	cmp	r3, r4
   e0f10:	bf28      	it	cs
   e0f12:	4623      	movcs	r3, r4
   e0f14:	009b      	lsls	r3, r3, #2
            X->p[i - 1] = 0;
   e0f16:	2100      	movs	r1, #0
        for( ; i > 0; i-- )
   e0f18:	3b04      	subs	r3, #4
   e0f1a:	1d1a      	adds	r2, r3, #4
   e0f1c:	d0de      	beq.n	e0edc <mbedtls_mpi_shift_l+0x1e>
            X->p[i - 1] = 0;
   e0f1e:	68aa      	ldr	r2, [r5, #8]
   e0f20:	50d1      	str	r1, [r2, r3]
        for( ; i > 0; i-- )
   e0f22:	e7f9      	b.n	e0f18 <mbedtls_mpi_shift_l+0x5a>
            X->p[i - 1] = X->p[i - v0 - 1];
   e0f24:	68ae      	ldr	r6, [r5, #8]
   e0f26:	eb06 0c02 	add.w	ip, r6, r2
        for( i = X->n; i > v0; i-- )
   e0f2a:	3901      	subs	r1, #1
            X->p[i - 1] = X->p[i - v0 - 1];
   e0f2c:	f85c c000 	ldr.w	ip, [ip, r0]
   e0f30:	f846 c002 	str.w	ip, [r6, r2]
        for( i = X->n; i > v0; i-- )
   e0f34:	e7e7      	b.n	e0f06 <mbedtls_mpi_shift_l+0x48>
    mbedtls_mpi_uint r0 = 0, r1;
   e0f36:	2200      	movs	r2, #0
            r1 = X->p[i] >> (biL - t1);
   e0f38:	f1c7 0620 	rsb	r6, r7, #32
        for( i = v0; i < X->n; i++ )
   e0f3c:	686b      	ldr	r3, [r5, #4]
   e0f3e:	42a3      	cmp	r3, r4
   e0f40:	d9cd      	bls.n	e0ede <mbedtls_mpi_shift_l+0x20>
            r1 = X->p[i] >> (biL - t1);
   e0f42:	68ab      	ldr	r3, [r5, #8]
   e0f44:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
            X->p[i] <<= t1;
   e0f48:	fa01 f007 	lsl.w	r0, r1, r7
   e0f4c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
            X->p[i] |= r0;
   e0f50:	68a8      	ldr	r0, [r5, #8]
   e0f52:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   e0f56:	4313      	orrs	r3, r2
   e0f58:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
            r0 = r1;
   e0f5c:	fa21 f206 	lsr.w	r2, r1, r6
        for( i = v0; i < X->n; i++ )
   e0f60:	3401      	adds	r4, #1
   e0f62:	e7eb      	b.n	e0f3c <mbedtls_mpi_shift_l+0x7e>

000e0f64 <mbedtls_mpi_shift_r>:
{
   e0f64:	b4f0      	push	{r4, r5, r6, r7}
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
   e0f66:	6843      	ldr	r3, [r0, #4]
    v0 = count /  biL;
   e0f68:	094c      	lsrs	r4, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
   e0f6a:	42a3      	cmp	r3, r4
   e0f6c:	d303      	bcc.n	e0f76 <mbedtls_mpi_shift_r+0x12>
    v1 = count & (biL - 1);
   e0f6e:	f001 021f 	and.w	r2, r1, #31
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
   e0f72:	d104      	bne.n	e0f7e <mbedtls_mpi_shift_r+0x1a>
   e0f74:	b37a      	cbz	r2, e0fd6 <mbedtls_mpi_shift_r+0x72>
}
   e0f76:	bcf0      	pop	{r4, r5, r6, r7}
        return mbedtls_mpi_lset( X, 0 );
   e0f78:	2100      	movs	r1, #0
   e0f7a:	f7ff bec9 	b.w	e0d10 <mbedtls_mpi_lset>
    if( v0 > 0 )
   e0f7e:	291f      	cmp	r1, #31
   e0f80:	d82b      	bhi.n	e0fda <mbedtls_mpi_shift_r+0x76>
    if( v1 > 0 )
   e0f82:	b36a      	cbz	r2, e0fe0 <mbedtls_mpi_shift_r+0x7c>
        for( i = X->n; i > 0; i-- )
   e0f84:	6843      	ldr	r3, [r0, #4]
    mbedtls_mpi_uint r0 = 0, r1;
   e0f86:	2400      	movs	r4, #0
            r1 = X->p[i - 1] << (biL - v1);
   e0f88:	f1c2 0720 	rsb	r7, r2, #32
        for( i = X->n; i > 0; i-- )
   e0f8c:	3b01      	subs	r3, #1
   e0f8e:	d327      	bcc.n	e0fe0 <mbedtls_mpi_shift_r+0x7c>
            r1 = X->p[i - 1] << (biL - v1);
   e0f90:	6881      	ldr	r1, [r0, #8]
   e0f92:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
            X->p[i - 1] >>= v1;
   e0f96:	fa25 f602 	lsr.w	r6, r5, r2
   e0f9a:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
            X->p[i - 1] |= r0;
   e0f9e:	6886      	ldr	r6, [r0, #8]
   e0fa0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   e0fa4:	4321      	orrs	r1, r4
   e0fa6:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
            r0 = r1;
   e0faa:	fa05 f407 	lsl.w	r4, r5, r7
        for( i = X->n; i > 0; i-- )
   e0fae:	e7ed      	b.n	e0f8c <mbedtls_mpi_shift_r+0x28>
            X->p[i] = X->p[i + v0];
   e0fb0:	6885      	ldr	r5, [r0, #8]
   e0fb2:	586e      	ldr	r6, [r5, r1]
   e0fb4:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
   e0fb8:	3104      	adds	r1, #4
   e0fba:	3301      	adds	r3, #1
   e0fbc:	6845      	ldr	r5, [r0, #4]
   e0fbe:	1b2d      	subs	r5, r5, r4
   e0fc0:	429d      	cmp	r5, r3
   e0fc2:	d8f5      	bhi.n	e0fb0 <mbedtls_mpi_shift_r+0x4c>
            X->p[i] = 0;
   e0fc4:	2400      	movs	r4, #0
        for( ; i < X->n; i++ )
   e0fc6:	6841      	ldr	r1, [r0, #4]
   e0fc8:	4299      	cmp	r1, r3
   e0fca:	d9da      	bls.n	e0f82 <mbedtls_mpi_shift_r+0x1e>
            X->p[i] = 0;
   e0fcc:	6881      	ldr	r1, [r0, #8]
   e0fce:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
        for( ; i < X->n; i++ )
   e0fd2:	3301      	adds	r3, #1
   e0fd4:	e7f7      	b.n	e0fc6 <mbedtls_mpi_shift_r+0x62>
    if( v0 > 0 )
   e0fd6:	291f      	cmp	r1, #31
   e0fd8:	d902      	bls.n	e0fe0 <mbedtls_mpi_shift_r+0x7c>
   e0fda:	00a1      	lsls	r1, r4, #2
{
   e0fdc:	2300      	movs	r3, #0
   e0fde:	e7ed      	b.n	e0fbc <mbedtls_mpi_shift_r+0x58>
}
   e0fe0:	2000      	movs	r0, #0
   e0fe2:	bcf0      	pop	{r4, r5, r6, r7}
   e0fe4:	4770      	bx	lr

000e0fe6 <mbedtls_mpi_cmp_abs>:
{
   e0fe6:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
   e0fe8:	6843      	ldr	r3, [r0, #4]
   e0fea:	b13b      	cbz	r3, e0ffc <mbedtls_mpi_cmp_abs+0x16>
        if( X->p[i - 1] != 0 )
   e0fec:	6882      	ldr	r2, [r0, #8]
   e0fee:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   e0ff2:	f852 2c04 	ldr.w	r2, [r2, #-4]
   e0ff6:	b90a      	cbnz	r2, e0ffc <mbedtls_mpi_cmp_abs+0x16>
    for( i = X->n; i > 0; i-- )
   e0ff8:	3b01      	subs	r3, #1
   e0ffa:	e7f6      	b.n	e0fea <mbedtls_mpi_cmp_abs+0x4>
    for( j = Y->n; j > 0; j-- )
   e0ffc:	684a      	ldr	r2, [r1, #4]
   e0ffe:	b302      	cbz	r2, e1042 <mbedtls_mpi_cmp_abs+0x5c>
        if( Y->p[j - 1] != 0 )
   e1000:	688c      	ldr	r4, [r1, #8]
   e1002:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   e1006:	f855 5c04 	ldr.w	r5, [r5, #-4]
   e100a:	b92d      	cbnz	r5, e1018 <mbedtls_mpi_cmp_abs+0x32>
    for( j = Y->n; j > 0; j-- )
   e100c:	3a01      	subs	r2, #1
   e100e:	e7f6      	b.n	e0ffe <mbedtls_mpi_cmp_abs+0x18>
    return( 0 );
   e1010:	2000      	movs	r0, #0
   e1012:	e015      	b.n	e1040 <mbedtls_mpi_cmp_abs+0x5a>
    if( i > j ) return(  1 );
   e1014:	2001      	movs	r0, #1
   e1016:	e013      	b.n	e1040 <mbedtls_mpi_cmp_abs+0x5a>
    if( i == 0 && j == 0 )
   e1018:	b10b      	cbz	r3, e101e <mbedtls_mpi_cmp_abs+0x38>
    if( i > j ) return(  1 );
   e101a:	4293      	cmp	r3, r2
   e101c:	d8fa      	bhi.n	e1014 <mbedtls_mpi_cmp_abs+0x2e>
    if( j > i ) return( -1 );
   e101e:	4293      	cmp	r3, r2
   e1020:	d30c      	bcc.n	e103c <mbedtls_mpi_cmp_abs+0x56>
   e1022:	3b01      	subs	r3, #1
    for( ; i > 0; i-- )
   e1024:	1c5a      	adds	r2, r3, #1
   e1026:	d0f3      	beq.n	e1010 <mbedtls_mpi_cmp_abs+0x2a>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
   e1028:	6882      	ldr	r2, [r0, #8]
   e102a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   e102e:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   e1032:	4291      	cmp	r1, r2
   e1034:	d8ee      	bhi.n	e1014 <mbedtls_mpi_cmp_abs+0x2e>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
   e1036:	f103 33ff 	add.w	r3, r3, #4294967295
   e103a:	d2f3      	bcs.n	e1024 <mbedtls_mpi_cmp_abs+0x3e>
    if( j > i ) return( -1 );
   e103c:	f04f 30ff 	mov.w	r0, #4294967295
}
   e1040:	bd30      	pop	{r4, r5, pc}
    if( i == 0 && j == 0 )
   e1042:	1e18      	subs	r0, r3, #0
   e1044:	bf18      	it	ne
   e1046:	2001      	movne	r0, #1
   e1048:	e7fa      	b.n	e1040 <mbedtls_mpi_cmp_abs+0x5a>

000e104a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
   e104a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e104e:	4614      	mov	r4, r2
   e1050:	9301      	str	r3, [sp, #4]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
   e1052:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e1054:	685a      	ldr	r2, [r3, #4]
   e1056:	6863      	ldr	r3, [r4, #4]
   e1058:	3301      	adds	r3, #1
   e105a:	429a      	cmp	r2, r3
{
   e105c:	4606      	mov	r6, r0
   e105e:	468a      	mov	sl, r1
    if( T->n < N->n + 1 || T->p == NULL )
   e1060:	d357      	bcc.n	e1112 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xc8>
   e1062:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e1064:	6898      	ldr	r0, [r3, #8]
   e1066:	2800      	cmp	r0, #0
   e1068:	d053      	beq.n	e1112 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xc8>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
   e106a:	0092      	lsls	r2, r2, #2
   e106c:	2100      	movs	r1, #0
   e106e:	f007 fee5 	bl	e8e3c <memset>

    d = T->p;
   e1072:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    n = N->n;
   e1074:	6865      	ldr	r5, [r4, #4]
    d = T->p;
   e1076:	689b      	ldr	r3, [r3, #8]
   e1078:	9300      	str	r3, [sp, #0]
    m = ( B->n < n ) ? B->n : n;
   e107a:	f8da 3004 	ldr.w	r3, [sl, #4]
    d = T->p;
   e107e:	f8dd 9000 	ldr.w	r9, [sp]
   e1082:	42ab      	cmp	r3, r5
   e1084:	bf28      	it	cs
   e1086:	462b      	movcs	r3, r5
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
   e1088:	1c6f      	adds	r7, r5, #1
   e108a:	ee07 3a90 	vmov	s15, r3
   e108e:	00bf      	lsls	r7, r7, #2
    for( i = 0; i < n; i++ )
   e1090:	f04f 0800 	mov.w	r8, #0
   e1094:	4545      	cmp	r5, r8
   e1096:	68b0      	ldr	r0, [r6, #8]
   e1098:	d021      	beq.n	e10de <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x94>
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
   e109a:	f8da 1008 	ldr.w	r1, [sl, #8]
        u0 = A->p[i];
   e109e:	f850 b028 	ldr.w	fp, [r0, r8, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
   e10a2:	680b      	ldr	r3, [r1, #0]
   e10a4:	f8d9 0000 	ldr.w	r0, [r9]
   e10a8:	9a01      	ldr	r2, [sp, #4]
   e10aa:	fb03 030b 	mla	r3, r3, fp, r0
   e10ae:	4353      	muls	r3, r2
   e10b0:	ee07 3a10 	vmov	s14, r3
        mpi_mul_hlp( m, B->p, d, u0 );
   e10b4:	ee17 0a90 	vmov	r0, s15
   e10b8:	464a      	mov	r2, r9
   e10ba:	465b      	mov	r3, fp
   e10bc:	f7ff fc69 	bl	e0992 <_ZL11mpi_mul_hlpjPmS_m>
        mpi_mul_hlp( n, N->p, d, u1 );
   e10c0:	464a      	mov	r2, r9
   e10c2:	ee17 3a10 	vmov	r3, s14
   e10c6:	68a1      	ldr	r1, [r4, #8]
   e10c8:	4628      	mov	r0, r5
   e10ca:	f7ff fc62 	bl	e0992 <_ZL11mpi_mul_hlpjPmS_m>
        *d++ = u0; d[n + 1] = 0;
   e10ce:	f849 bb04 	str.w	fp, [r9], #4
   e10d2:	2300      	movs	r3, #0
   e10d4:	f849 3007 	str.w	r3, [r9, r7]
    for( i = 0; i < n; i++ )
   e10d8:	f108 0801 	add.w	r8, r8, #1
   e10dc:	e7da      	b.n	e1094 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x4a>
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
   e10de:	9b00      	ldr	r3, [sp, #0]
   e10e0:	1f39      	subs	r1, r7, #4
   e10e2:	440b      	add	r3, r1
   e10e4:	463a      	mov	r2, r7
   e10e6:	4619      	mov	r1, r3
   e10e8:	f007 fe80 	bl	e8dec <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
   e10ec:	4621      	mov	r1, r4
   e10ee:	4630      	mov	r0, r6
   e10f0:	f7ff ff79 	bl	e0fe6 <mbedtls_mpi_cmp_abs>
   e10f4:	2800      	cmp	r0, #0
        mpi_sub_hlp( n, N->p, A->p );
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
   e10f6:	bfb3      	iteet	lt
   e10f8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
        mpi_sub_hlp( n, N->p, A->p );
   e10fa:	68b2      	ldrge	r2, [r6, #8]
   e10fc:	68a1      	ldrge	r1, [r4, #8]
        mpi_sub_hlp( n, A->p, T->p );
   e10fe:	689a      	ldrlt	r2, [r3, #8]
   e1100:	bfb8      	it	lt
   e1102:	68b1      	ldrlt	r1, [r6, #8]
   e1104:	4628      	mov	r0, r5
   e1106:	f7ff fc1b 	bl	e0940 <_ZL11mpi_sub_hlpjPmS_>

    return( 0 );
   e110a:	2000      	movs	r0, #0
}
   e110c:	b003      	add	sp, #12
   e110e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   e1112:	f06f 0003 	mvn.w	r0, #3
   e1116:	e7f9      	b.n	e110c <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xc2>

000e1118 <mbedtls_mpi_cmp_mpi>:
{
   e1118:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
   e111a:	6843      	ldr	r3, [r0, #4]
{
   e111c:	4602      	mov	r2, r0
    for( i = X->n; i > 0; i-- )
   e111e:	b13b      	cbz	r3, e1130 <mbedtls_mpi_cmp_mpi+0x18>
        if( X->p[i - 1] != 0 )
   e1120:	6890      	ldr	r0, [r2, #8]
   e1122:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   e1126:	f850 0c04 	ldr.w	r0, [r0, #-4]
   e112a:	b908      	cbnz	r0, e1130 <mbedtls_mpi_cmp_mpi+0x18>
    for( i = X->n; i > 0; i-- )
   e112c:	3b01      	subs	r3, #1
   e112e:	e7f6      	b.n	e111e <mbedtls_mpi_cmp_mpi+0x6>
    for( j = Y->n; j > 0; j-- )
   e1130:	6848      	ldr	r0, [r1, #4]
   e1132:	b370      	cbz	r0, e1192 <mbedtls_mpi_cmp_mpi+0x7a>
        if( Y->p[j - 1] != 0 )
   e1134:	688c      	ldr	r4, [r1, #8]
   e1136:	eb04 0580 	add.w	r5, r4, r0, lsl #2
   e113a:	f855 5c04 	ldr.w	r5, [r5, #-4]
   e113e:	bb15      	cbnz	r5, e1186 <mbedtls_mpi_cmp_mpi+0x6e>
    for( j = Y->n; j > 0; j-- )
   e1140:	3801      	subs	r0, #1
   e1142:	e7f6      	b.n	e1132 <mbedtls_mpi_cmp_mpi+0x1a>
    if( j > i ) return( -Y->s );
   e1144:	4283      	cmp	r3, r0
   e1146:	6809      	ldr	r1, [r1, #0]
   e1148:	d201      	bcs.n	e114e <mbedtls_mpi_cmp_mpi+0x36>
   e114a:	4248      	negs	r0, r1
   e114c:	e020      	b.n	e1190 <mbedtls_mpi_cmp_mpi+0x78>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
   e114e:	6810      	ldr	r0, [r2, #0]
   e1150:	2800      	cmp	r0, #0
   e1152:	dd03      	ble.n	e115c <mbedtls_mpi_cmp_mpi+0x44>
   e1154:	2900      	cmp	r1, #0
   e1156:	da04      	bge.n	e1162 <mbedtls_mpi_cmp_mpi+0x4a>
   e1158:	2001      	movs	r0, #1
   e115a:	e019      	b.n	e1190 <mbedtls_mpi_cmp_mpi+0x78>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
   e115c:	2900      	cmp	r1, #0
   e115e:	dd00      	ble.n	e1162 <mbedtls_mpi_cmp_mpi+0x4a>
   e1160:	b970      	cbnz	r0, e1180 <mbedtls_mpi_cmp_mpi+0x68>
   e1162:	3b01      	subs	r3, #1
    for( ; i > 0; i-- )
   e1164:	1c59      	adds	r1, r3, #1
   e1166:	d016      	beq.n	e1196 <mbedtls_mpi_cmp_mpi+0x7e>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
   e1168:	6891      	ldr	r1, [r2, #8]
   e116a:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
   e116e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
   e1172:	428d      	cmp	r5, r1
   e1174:	d80c      	bhi.n	e1190 <mbedtls_mpi_cmp_mpi+0x78>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
   e1176:	f103 33ff 	add.w	r3, r3, #4294967295
   e117a:	d2f3      	bcs.n	e1164 <mbedtls_mpi_cmp_mpi+0x4c>
   e117c:	4240      	negs	r0, r0
   e117e:	e007      	b.n	e1190 <mbedtls_mpi_cmp_mpi+0x78>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
   e1180:	f04f 30ff 	mov.w	r0, #4294967295
   e1184:	e004      	b.n	e1190 <mbedtls_mpi_cmp_mpi+0x78>
    if( i == 0 && j == 0 )
   e1186:	2b00      	cmp	r3, #0
   e1188:	d0dc      	beq.n	e1144 <mbedtls_mpi_cmp_mpi+0x2c>
    if( i > j ) return(  X->s );
   e118a:	4283      	cmp	r3, r0
   e118c:	d9da      	bls.n	e1144 <mbedtls_mpi_cmp_mpi+0x2c>
   e118e:	6810      	ldr	r0, [r2, #0]
}
   e1190:	bd30      	pop	{r4, r5, pc}
    if( i == 0 && j == 0 )
   e1192:	2b00      	cmp	r3, #0
   e1194:	d1fb      	bne.n	e118e <mbedtls_mpi_cmp_mpi+0x76>
    return( 0 );
   e1196:	2000      	movs	r0, #0
   e1198:	e7fa      	b.n	e1190 <mbedtls_mpi_cmp_mpi+0x78>

000e119a <mbedtls_mpi_cmp_int>:
{
   e119a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    *p  = ( z < 0 ) ? -z : z;
   e119c:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
   e11a0:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
   e11a4:	2900      	cmp	r1, #0
    *p  = ( z < 0 ) ? -z : z;
   e11a6:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
   e11a8:	bfb4      	ite	lt
   e11aa:	f04f 33ff 	movlt.w	r3, #4294967295
   e11ae:	2301      	movge	r3, #1
   e11b0:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
   e11b2:	a901      	add	r1, sp, #4
    Y.n = 1;
   e11b4:	2301      	movs	r3, #1
   e11b6:	9302      	str	r3, [sp, #8]
    Y.p = p;
   e11b8:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
   e11bc:	f7ff ffac 	bl	e1118 <mbedtls_mpi_cmp_mpi>
}
   e11c0:	b005      	add	sp, #20
   e11c2:	f85d fb04 	ldr.w	pc, [sp], #4

000e11c6 <mbedtls_mpi_add_abs>:
    if( X == B )
   e11c6:	4290      	cmp	r0, r2
{
   e11c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e11cc:	4607      	mov	r7, r0
   e11ce:	460e      	mov	r6, r1
   e11d0:	4615      	mov	r5, r2
    if( X == B )
   e11d2:	d002      	beq.n	e11da <mbedtls_mpi_add_abs+0x14>
    if( X != A )
   e11d4:	4288      	cmp	r0, r1
   e11d6:	d10c      	bne.n	e11f2 <mbedtls_mpi_add_abs+0x2c>
{
   e11d8:	462e      	mov	r6, r5
    X->s = 1;
   e11da:	2301      	movs	r3, #1
   e11dc:	603b      	str	r3, [r7, #0]
    for( j = B->n; j > 0; j-- )
   e11de:	6875      	ldr	r5, [r6, #4]
   e11e0:	b17d      	cbz	r5, e1202 <mbedtls_mpi_add_abs+0x3c>
        if( B->p[j - 1] != 0 )
   e11e2:	68b3      	ldr	r3, [r6, #8]
   e11e4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   e11e8:	f853 3c04 	ldr.w	r3, [r3, #-4]
   e11ec:	b94b      	cbnz	r3, e1202 <mbedtls_mpi_add_abs+0x3c>
    for( j = B->n; j > 0; j-- )
   e11ee:	3d01      	subs	r5, #1
   e11f0:	e7f6      	b.n	e11e0 <mbedtls_mpi_add_abs+0x1a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
   e11f2:	f7ff fd2f 	bl	e0c54 <mbedtls_mpi_copy>
   e11f6:	4604      	mov	r4, r0
   e11f8:	2800      	cmp	r0, #0
   e11fa:	d0ed      	beq.n	e11d8 <mbedtls_mpi_add_abs+0x12>
}
   e11fc:	4620      	mov	r0, r4
   e11fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
   e1202:	4629      	mov	r1, r5
   e1204:	4638      	mov	r0, r7
   e1206:	f7ff fcc0 	bl	e0b8a <mbedtls_mpi_grow>
   e120a:	4604      	mov	r4, r0
   e120c:	2800      	cmp	r0, #0
   e120e:	d1f5      	bne.n	e11fc <mbedtls_mpi_add_abs+0x36>
    o = B->p; p = X->p; c = 0;
   e1210:	68bb      	ldr	r3, [r7, #8]
   e1212:	68b1      	ldr	r1, [r6, #8]
   e1214:	4606      	mov	r6, r0
    for( i = 0; i < j; i++, o++, p++ )
   e1216:	4285      	cmp	r5, r0
   e1218:	d119      	bne.n	e124e <mbedtls_mpi_add_abs+0x88>
   e121a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    while( c != 0 )
   e121e:	2e00      	cmp	r6, #0
   e1220:	d0ec      	beq.n	e11fc <mbedtls_mpi_add_abs+0x36>
        if( i >= X->n )
   e1222:	687a      	ldr	r2, [r7, #4]
   e1224:	42aa      	cmp	r2, r5
   e1226:	f105 0801 	add.w	r8, r5, #1
   e122a:	d807      	bhi.n	e123c <mbedtls_mpi_add_abs+0x76>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
   e122c:	4641      	mov	r1, r8
   e122e:	4638      	mov	r0, r7
   e1230:	f7ff fcab 	bl	e0b8a <mbedtls_mpi_grow>
   e1234:	b9f0      	cbnz	r0, e1274 <mbedtls_mpi_add_abs+0xae>
            p = X->p + i;
   e1236:	68bb      	ldr	r3, [r7, #8]
   e1238:	eb03 0385 	add.w	r3, r3, r5, lsl #2
        *p += c; c = ( *p < c ); i++; p++;
   e123c:	681a      	ldr	r2, [r3, #0]
   e123e:	1996      	adds	r6, r2, r6
   e1240:	f843 6b04 	str.w	r6, [r3], #4
    while( c != 0 )
   e1244:	4645      	mov	r5, r8
        *p += c; c = ( *p < c ); i++; p++;
   e1246:	bf2c      	ite	cs
   e1248:	2601      	movcs	r6, #1
   e124a:	2600      	movcc	r6, #0
    while( c != 0 )
   e124c:	e7e7      	b.n	e121e <mbedtls_mpi_add_abs+0x58>
        *p +=  c; c  = ( *p <  c );
   e124e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   e1252:	eb12 0c06 	adds.w	ip, r2, r6
   e1256:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
   e125a:	bf2c      	ite	cs
   e125c:	2601      	movcs	r6, #1
   e125e:	2600      	movcc	r6, #0
        *p += tmp; c += ( *p < tmp );
   e1260:	eb1c 0202 	adds.w	r2, ip, r2
   e1264:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
   e1268:	bf2c      	ite	cs
   e126a:	2201      	movcs	r2, #1
   e126c:	2200      	movcc	r2, #0
   e126e:	4416      	add	r6, r2
    for( i = 0; i < j; i++, o++, p++ )
   e1270:	3001      	adds	r0, #1
   e1272:	e7d0      	b.n	e1216 <mbedtls_mpi_add_abs+0x50>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
   e1274:	4604      	mov	r4, r0
    return( ret );
   e1276:	e7c1      	b.n	e11fc <mbedtls_mpi_add_abs+0x36>

000e1278 <mbedtls_mpi_sub_abs>:
{
   e1278:	b5f0      	push	{r4, r5, r6, r7, lr}
   e127a:	460f      	mov	r7, r1
   e127c:	b085      	sub	sp, #20
   e127e:	4606      	mov	r6, r0
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   e1280:	4611      	mov	r1, r2
   e1282:	4638      	mov	r0, r7
{
   e1284:	4615      	mov	r5, r2
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   e1286:	f7ff feae 	bl	e0fe6 <mbedtls_mpi_cmp_abs>
   e128a:	2800      	cmp	r0, #0
   e128c:	db2d      	blt.n	e12ea <mbedtls_mpi_sub_abs+0x72>
    X->n = 0;
   e128e:	2300      	movs	r3, #0
   e1290:	2201      	movs	r2, #1
    if( X == B )
   e1292:	42b5      	cmp	r5, r6
    X->n = 0;
   e1294:	e9cd 2301 	strd	r2, r3, [sp, #4]
    X->p = NULL;
   e1298:	9303      	str	r3, [sp, #12]
    if( X == B )
   e129a:	d106      	bne.n	e12aa <mbedtls_mpi_sub_abs+0x32>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
   e129c:	4629      	mov	r1, r5
   e129e:	a801      	add	r0, sp, #4
   e12a0:	f7ff fcd8 	bl	e0c54 <mbedtls_mpi_copy>
   e12a4:	4604      	mov	r4, r0
   e12a6:	b9a8      	cbnz	r0, e12d4 <mbedtls_mpi_sub_abs+0x5c>
        B = &TB;
   e12a8:	ad01      	add	r5, sp, #4
    if( X != A )
   e12aa:	42b7      	cmp	r7, r6
   e12ac:	d10b      	bne.n	e12c6 <mbedtls_mpi_sub_abs+0x4e>
    X->s = 1;
   e12ae:	2301      	movs	r3, #1
   e12b0:	6033      	str	r3, [r6, #0]
    for( n = B->n; n > 0; n-- )
   e12b2:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   e12b6:	b198      	cbz	r0, e12e0 <mbedtls_mpi_sub_abs+0x68>
        if( B->p[n - 1] != 0 )
   e12b8:	eb01 0380 	add.w	r3, r1, r0, lsl #2
   e12bc:	f853 3c04 	ldr.w	r3, [r3, #-4]
   e12c0:	b973      	cbnz	r3, e12e0 <mbedtls_mpi_sub_abs+0x68>
    for( n = B->n; n > 0; n-- )
   e12c2:	3801      	subs	r0, #1
   e12c4:	e7f7      	b.n	e12b6 <mbedtls_mpi_sub_abs+0x3e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
   e12c6:	4639      	mov	r1, r7
   e12c8:	4630      	mov	r0, r6
   e12ca:	f7ff fcc3 	bl	e0c54 <mbedtls_mpi_copy>
   e12ce:	4604      	mov	r4, r0
   e12d0:	2800      	cmp	r0, #0
   e12d2:	d0ec      	beq.n	e12ae <mbedtls_mpi_sub_abs+0x36>
    mbedtls_mpi_free( &TB );
   e12d4:	a801      	add	r0, sp, #4
   e12d6:	f7ff fc46 	bl	e0b66 <mbedtls_mpi_free>
}
   e12da:	4620      	mov	r0, r4
   e12dc:	b005      	add	sp, #20
   e12de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mpi_sub_hlp( n, B->p, X->p );
   e12e0:	68b2      	ldr	r2, [r6, #8]
   e12e2:	f7ff fb2d 	bl	e0940 <_ZL11mpi_sub_hlpjPmS_>
    ret = 0;
   e12e6:	2400      	movs	r4, #0
   e12e8:	e7f4      	b.n	e12d4 <mbedtls_mpi_sub_abs+0x5c>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
   e12ea:	f06f 0409 	mvn.w	r4, #9
   e12ee:	e7f4      	b.n	e12da <mbedtls_mpi_sub_abs+0x62>

000e12f0 <mbedtls_mpi_add_mpi>:
{
   e12f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
   e12f2:	680d      	ldr	r5, [r1, #0]
    if( A->s * B->s < 0 )
   e12f4:	6813      	ldr	r3, [r2, #0]
   e12f6:	436b      	muls	r3, r5
{
   e12f8:	4604      	mov	r4, r0
   e12fa:	460f      	mov	r7, r1
   e12fc:	4616      	mov	r6, r2
    if( A->s * B->s < 0 )
   e12fe:	d516      	bpl.n	e132e <mbedtls_mpi_add_mpi+0x3e>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
   e1300:	4611      	mov	r1, r2
   e1302:	4638      	mov	r0, r7
   e1304:	f7ff fe6f 	bl	e0fe6 <mbedtls_mpi_cmp_abs>
   e1308:	2800      	cmp	r0, #0
   e130a:	db06      	blt.n	e131a <mbedtls_mpi_add_mpi+0x2a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
   e130c:	4632      	mov	r2, r6
   e130e:	4639      	mov	r1, r7
   e1310:	4620      	mov	r0, r4
   e1312:	f7ff ffb1 	bl	e1278 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
   e1316:	b140      	cbz	r0, e132a <mbedtls_mpi_add_mpi+0x3a>
}
   e1318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
   e131a:	463a      	mov	r2, r7
   e131c:	4631      	mov	r1, r6
   e131e:	4620      	mov	r0, r4
   e1320:	f7ff ffaa 	bl	e1278 <mbedtls_mpi_sub_abs>
   e1324:	2800      	cmp	r0, #0
   e1326:	d1f7      	bne.n	e1318 <mbedtls_mpi_add_mpi+0x28>
            X->s = -s;
   e1328:	426d      	negs	r5, r5
        X->s = s;
   e132a:	6025      	str	r5, [r4, #0]
    return( ret );
   e132c:	e7f4      	b.n	e1318 <mbedtls_mpi_add_mpi+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
   e132e:	f7ff ff4a 	bl	e11c6 <mbedtls_mpi_add_abs>
   e1332:	e7f0      	b.n	e1316 <mbedtls_mpi_add_mpi+0x26>

000e1334 <mbedtls_mpi_sub_mpi>:
{
   e1334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
   e1336:	680d      	ldr	r5, [r1, #0]
    if( A->s * B->s > 0 )
   e1338:	6813      	ldr	r3, [r2, #0]
   e133a:	436b      	muls	r3, r5
   e133c:	2b00      	cmp	r3, #0
{
   e133e:	4604      	mov	r4, r0
   e1340:	460f      	mov	r7, r1
   e1342:	4616      	mov	r6, r2
    if( A->s * B->s > 0 )
   e1344:	dd16      	ble.n	e1374 <mbedtls_mpi_sub_mpi+0x40>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
   e1346:	4611      	mov	r1, r2
   e1348:	4638      	mov	r0, r7
   e134a:	f7ff fe4c 	bl	e0fe6 <mbedtls_mpi_cmp_abs>
   e134e:	2800      	cmp	r0, #0
   e1350:	db06      	blt.n	e1360 <mbedtls_mpi_sub_mpi+0x2c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
   e1352:	4632      	mov	r2, r6
   e1354:	4639      	mov	r1, r7
   e1356:	4620      	mov	r0, r4
   e1358:	f7ff ff8e 	bl	e1278 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
   e135c:	b140      	cbz	r0, e1370 <mbedtls_mpi_sub_mpi+0x3c>
}
   e135e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
   e1360:	463a      	mov	r2, r7
   e1362:	4631      	mov	r1, r6
   e1364:	4620      	mov	r0, r4
   e1366:	f7ff ff87 	bl	e1278 <mbedtls_mpi_sub_abs>
   e136a:	2800      	cmp	r0, #0
   e136c:	d1f7      	bne.n	e135e <mbedtls_mpi_sub_mpi+0x2a>
            X->s = -s;
   e136e:	426d      	negs	r5, r5
        X->s = s;
   e1370:	6025      	str	r5, [r4, #0]
    return( ret );
   e1372:	e7f4      	b.n	e135e <mbedtls_mpi_sub_mpi+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
   e1374:	f7ff ff27 	bl	e11c6 <mbedtls_mpi_add_abs>
   e1378:	e7f0      	b.n	e135c <mbedtls_mpi_sub_mpi+0x28>

000e137a <mbedtls_mpi_add_int>:
{
   e137a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    p[0] = ( b < 0 ) ? -b : b;
   e137c:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
   e1380:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
   e1384:	2a00      	cmp	r2, #0
    p[0] = ( b < 0 ) ? -b : b;
   e1386:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
   e1388:	bfb4      	ite	lt
   e138a:	f04f 33ff 	movlt.w	r3, #4294967295
   e138e:	2301      	movge	r3, #1
   e1390:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
   e1392:	aa01      	add	r2, sp, #4
    _B.n = 1;
   e1394:	2301      	movs	r3, #1
   e1396:	9302      	str	r3, [sp, #8]
    _B.p = p;
   e1398:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
   e139c:	f7ff ffa8 	bl	e12f0 <mbedtls_mpi_add_mpi>
}
   e13a0:	b005      	add	sp, #20
   e13a2:	f85d fb04 	ldr.w	pc, [sp], #4

000e13a6 <mbedtls_mpi_sub_int>:
{
   e13a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    p[0] = ( b < 0 ) ? -b : b;
   e13a8:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
   e13ac:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
   e13b0:	2a00      	cmp	r2, #0
    p[0] = ( b < 0 ) ? -b : b;
   e13b2:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
   e13b4:	bfb4      	ite	lt
   e13b6:	f04f 33ff 	movlt.w	r3, #4294967295
   e13ba:	2301      	movge	r3, #1
   e13bc:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
   e13be:	aa01      	add	r2, sp, #4
    _B.n = 1;
   e13c0:	2301      	movs	r3, #1
   e13c2:	9302      	str	r3, [sp, #8]
    _B.p = p;
   e13c4:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
   e13c8:	f7ff ffb4 	bl	e1334 <mbedtls_mpi_sub_mpi>
}
   e13cc:	b005      	add	sp, #20
   e13ce:	f85d fb04 	ldr.w	pc, [sp], #4

000e13d2 <mbedtls_mpi_mul_mpi>:
{
   e13d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    X->n = 0;
   e13d6:	2300      	movs	r3, #0
{
   e13d8:	b087      	sub	sp, #28
   e13da:	4615      	mov	r5, r2
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
   e13dc:	4288      	cmp	r0, r1
    X->n = 0;
   e13de:	f04f 0201 	mov.w	r2, #1
   e13e2:	e9cd 2300 	strd	r2, r3, [sp]
    X->s = 1;
   e13e6:	e9cd 3202 	strd	r3, r2, [sp, #8]
    X->p = NULL;
   e13ea:	e9cd 3304 	strd	r3, r3, [sp, #16]
{
   e13ee:	4680      	mov	r8, r0
   e13f0:	460e      	mov	r6, r1
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
   e13f2:	d106      	bne.n	e1402 <mbedtls_mpi_mul_mpi+0x30>
   e13f4:	4668      	mov	r0, sp
   e13f6:	f7ff fc2d 	bl	e0c54 <mbedtls_mpi_copy>
   e13fa:	4604      	mov	r4, r0
   e13fc:	2800      	cmp	r0, #0
   e13fe:	d142      	bne.n	e1486 <mbedtls_mpi_mul_mpi+0xb4>
   e1400:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
   e1402:	45a8      	cmp	r8, r5
   e1404:	d107      	bne.n	e1416 <mbedtls_mpi_mul_mpi+0x44>
   e1406:	4641      	mov	r1, r8
   e1408:	a803      	add	r0, sp, #12
   e140a:	f7ff fc23 	bl	e0c54 <mbedtls_mpi_copy>
   e140e:	4604      	mov	r4, r0
   e1410:	2800      	cmp	r0, #0
   e1412:	d138      	bne.n	e1486 <mbedtls_mpi_mul_mpi+0xb4>
   e1414:	ad03      	add	r5, sp, #12
    for( i = A->n; i > 0; i-- )
   e1416:	f8d6 9004 	ldr.w	r9, [r6, #4]
   e141a:	f1b9 0f00 	cmp.w	r9, #0
   e141e:	d008      	beq.n	e1432 <mbedtls_mpi_mul_mpi+0x60>
        if( A->p[i - 1] != 0 )
   e1420:	68b3      	ldr	r3, [r6, #8]
   e1422:	eb03 0389 	add.w	r3, r3, r9, lsl #2
   e1426:	f853 3c04 	ldr.w	r3, [r3, #-4]
   e142a:	b913      	cbnz	r3, e1432 <mbedtls_mpi_mul_mpi+0x60>
    for( i = A->n; i > 0; i-- )
   e142c:	f109 39ff 	add.w	r9, r9, #4294967295
   e1430:	e7f3      	b.n	e141a <mbedtls_mpi_mul_mpi+0x48>
    for( j = B->n; j > 0; j-- )
   e1432:	686f      	ldr	r7, [r5, #4]
   e1434:	b13f      	cbz	r7, e1446 <mbedtls_mpi_mul_mpi+0x74>
        if( B->p[j - 1] != 0 )
   e1436:	68ab      	ldr	r3, [r5, #8]
   e1438:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   e143c:	f853 3c04 	ldr.w	r3, [r3, #-4]
   e1440:	b90b      	cbnz	r3, e1446 <mbedtls_mpi_mul_mpi+0x74>
    for( j = B->n; j > 0; j-- )
   e1442:	3f01      	subs	r7, #1
   e1444:	e7f6      	b.n	e1434 <mbedtls_mpi_mul_mpi+0x62>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
   e1446:	eb09 0107 	add.w	r1, r9, r7
   e144a:	4640      	mov	r0, r8
   e144c:	f7ff fb9d 	bl	e0b8a <mbedtls_mpi_grow>
   e1450:	4604      	mov	r4, r0
   e1452:	b9c0      	cbnz	r0, e1486 <mbedtls_mpi_mul_mpi+0xb4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
   e1454:	4601      	mov	r1, r0
   e1456:	4640      	mov	r0, r8
   e1458:	f7ff fc5a 	bl	e0d10 <mbedtls_mpi_lset>
   e145c:	4604      	mov	r4, r0
   e145e:	b990      	cbnz	r0, e1486 <mbedtls_mpi_mul_mpi+0xb4>
    for( ; j > 0; j-- )
   e1460:	3f01      	subs	r7, #1
   e1462:	d30b      	bcc.n	e147c <mbedtls_mpi_mul_mpi+0xaa>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
   e1464:	68ab      	ldr	r3, [r5, #8]
   e1466:	f8d8 2008 	ldr.w	r2, [r8, #8]
   e146a:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   e146e:	68b1      	ldr	r1, [r6, #8]
   e1470:	eb02 0287 	add.w	r2, r2, r7, lsl #2
   e1474:	4648      	mov	r0, r9
   e1476:	f7ff fa8c 	bl	e0992 <_ZL11mpi_mul_hlpjPmS_m>
    for( ; j > 0; j-- )
   e147a:	e7f1      	b.n	e1460 <mbedtls_mpi_mul_mpi+0x8e>
    X->s = A->s * B->s;
   e147c:	6832      	ldr	r2, [r6, #0]
   e147e:	682b      	ldr	r3, [r5, #0]
   e1480:	4353      	muls	r3, r2
   e1482:	f8c8 3000 	str.w	r3, [r8]
    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
   e1486:	a803      	add	r0, sp, #12
   e1488:	f7ff fb6d 	bl	e0b66 <mbedtls_mpi_free>
   e148c:	4668      	mov	r0, sp
   e148e:	f7ff fb6a 	bl	e0b66 <mbedtls_mpi_free>
}
   e1492:	4620      	mov	r0, r4
   e1494:	b007      	add	sp, #28
   e1496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e149a <mbedtls_mpi_mul_int>:
{
   e149a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _B.s = 1;
   e149c:	2301      	movs	r3, #1
    p[0] = b;
   e149e:	9200      	str	r2, [sp, #0]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
   e14a0:	aa01      	add	r2, sp, #4
    _B.n = 1;
   e14a2:	e9cd 3301 	strd	r3, r3, [sp, #4]
    _B.p = p;
   e14a6:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
   e14aa:	f7ff ff92 	bl	e13d2 <mbedtls_mpi_mul_mpi>
}
   e14ae:	b005      	add	sp, #20
   e14b0:	f85d fb04 	ldr.w	pc, [sp], #4

000e14b4 <mbedtls_mpi_div_mpi>:
{
   e14b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e14b8:	ed2d 8b02 	vpush	{d8}
   e14bc:	4606      	mov	r6, r0
   e14be:	b095      	sub	sp, #84	; 0x54
   e14c0:	4688      	mov	r8, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
   e14c2:	4618      	mov	r0, r3
   e14c4:	2100      	movs	r1, #0
{
   e14c6:	ee08 3a90 	vmov	s17, r3
   e14ca:	4691      	mov	r9, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
   e14cc:	f7ff fe65 	bl	e119a <mbedtls_mpi_cmp_int>
   e14d0:	2800      	cmp	r0, #0
   e14d2:	f000 81b3 	beq.w	e183c <mbedtls_mpi_div_mpi+0x388>
    X->n = 0;
   e14d6:	2400      	movs	r4, #0
   e14d8:	2501      	movs	r5, #1
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   e14da:	ee18 1a90 	vmov	r1, s17
   e14de:	4648      	mov	r0, r9
    X->n = 0;
   e14e0:	e9cd 5405 	strd	r5, r4, [sp, #20]
    X->s = 1;
   e14e4:	e9cd 4507 	strd	r4, r5, [sp, #28]
    X->p = NULL;
   e14e8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    X->n = 0;
   e14ec:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
    X->s = 1;
   e14f0:	e9cd 450d 	strd	r4, r5, [sp, #52]	; 0x34
    X->p = NULL;
   e14f4:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    X->n = 0;
   e14f8:	e9cd 5411 	strd	r5, r4, [sp, #68]	; 0x44
    X->p = NULL;
   e14fc:	9413      	str	r4, [sp, #76]	; 0x4c
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   e14fe:	f7ff fd72 	bl	e0fe6 <mbedtls_mpi_cmp_abs>
   e1502:	42a0      	cmp	r0, r4
   e1504:	da29      	bge.n	e155a <mbedtls_mpi_div_mpi+0xa6>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
   e1506:	b94e      	cbnz	r6, e151c <mbedtls_mpi_div_mpi+0x68>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
   e1508:	f1b8 0f00 	cmp.w	r8, #0
   e150c:	d11d      	bne.n	e154a <mbedtls_mpi_div_mpi+0x96>
        return( 0 );
   e150e:	2400      	movs	r4, #0
}
   e1510:	4620      	mov	r0, r4
   e1512:	b015      	add	sp, #84	; 0x54
   e1514:	ecbd 8b02 	vpop	{d8}
   e1518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
   e151c:	4621      	mov	r1, r4
   e151e:	4630      	mov	r0, r6
   e1520:	f7ff fbf6 	bl	e0d10 <mbedtls_mpi_lset>
   e1524:	4604      	mov	r4, r0
   e1526:	2800      	cmp	r0, #0
   e1528:	d0ee      	beq.n	e1508 <mbedtls_mpi_div_mpi+0x54>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
   e152a:	a805      	add	r0, sp, #20
   e152c:	f7ff fb1b 	bl	e0b66 <mbedtls_mpi_free>
   e1530:	a808      	add	r0, sp, #32
   e1532:	f7ff fb18 	bl	e0b66 <mbedtls_mpi_free>
   e1536:	a80b      	add	r0, sp, #44	; 0x2c
   e1538:	f7ff fb15 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
   e153c:	a80e      	add	r0, sp, #56	; 0x38
   e153e:	f7ff fb12 	bl	e0b66 <mbedtls_mpi_free>
   e1542:	a811      	add	r0, sp, #68	; 0x44
   e1544:	f7ff fb0f 	bl	e0b66 <mbedtls_mpi_free>
    return( ret );
   e1548:	e7e2      	b.n	e1510 <mbedtls_mpi_div_mpi+0x5c>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
   e154a:	4649      	mov	r1, r9
   e154c:	4640      	mov	r0, r8
   e154e:	f7ff fb81 	bl	e0c54 <mbedtls_mpi_copy>
   e1552:	4604      	mov	r4, r0
   e1554:	2800      	cmp	r0, #0
   e1556:	d1e8      	bne.n	e152a <mbedtls_mpi_div_mpi+0x76>
   e1558:	e7d9      	b.n	e150e <mbedtls_mpi_div_mpi+0x5a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
   e155a:	4649      	mov	r1, r9
   e155c:	a805      	add	r0, sp, #20
   e155e:	f7ff fb79 	bl	e0c54 <mbedtls_mpi_copy>
   e1562:	4604      	mov	r4, r0
   e1564:	2800      	cmp	r0, #0
   e1566:	d1e0      	bne.n	e152a <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
   e1568:	af08      	add	r7, sp, #32
   e156a:	ee18 1a90 	vmov	r1, s17
   e156e:	4638      	mov	r0, r7
   e1570:	f7ff fb70 	bl	e0c54 <mbedtls_mpi_copy>
   e1574:	4604      	mov	r4, r0
   e1576:	2800      	cmp	r0, #0
   e1578:	d1d7      	bne.n	e152a <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
   e157a:	f8d9 1004 	ldr.w	r1, [r9, #4]
    X.s = Y.s = 1;
   e157e:	9508      	str	r5, [sp, #32]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
   e1580:	3102      	adds	r1, #2
   e1582:	a80b      	add	r0, sp, #44	; 0x2c
    X.s = Y.s = 1;
   e1584:	9505      	str	r5, [sp, #20]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
   e1586:	f7ff fb00 	bl	e0b8a <mbedtls_mpi_grow>
   e158a:	4604      	mov	r4, r0
   e158c:	2800      	cmp	r0, #0
   e158e:	d1cc      	bne.n	e152a <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
   e1590:	4601      	mov	r1, r0
   e1592:	a80b      	add	r0, sp, #44	; 0x2c
   e1594:	f7ff fbbc 	bl	e0d10 <mbedtls_mpi_lset>
   e1598:	4604      	mov	r4, r0
   e159a:	2800      	cmp	r0, #0
   e159c:	d1c5      	bne.n	e152a <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
   e159e:	2102      	movs	r1, #2
   e15a0:	a80e      	add	r0, sp, #56	; 0x38
   e15a2:	f7ff faf2 	bl	e0b8a <mbedtls_mpi_grow>
   e15a6:	4604      	mov	r4, r0
   e15a8:	2800      	cmp	r0, #0
   e15aa:	d1be      	bne.n	e152a <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
   e15ac:	2103      	movs	r1, #3
   e15ae:	a811      	add	r0, sp, #68	; 0x44
   e15b0:	f7ff faeb 	bl	e0b8a <mbedtls_mpi_grow>
   e15b4:	4604      	mov	r4, r0
   e15b6:	2800      	cmp	r0, #0
   e15b8:	d1b7      	bne.n	e152a <mbedtls_mpi_div_mpi+0x76>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
   e15ba:	4638      	mov	r0, r7
   e15bc:	f7ff fbf0 	bl	e0da0 <mbedtls_mpi_bitlen>
   e15c0:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
   e15c4:	281f      	cmp	r0, #31
   e15c6:	d039      	beq.n	e163c <mbedtls_mpi_div_mpi+0x188>
        k = biL - 1 - k;
   e15c8:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
   e15cc:	4619      	mov	r1, r3
   e15ce:	a805      	add	r0, sp, #20
        k = biL - 1 - k;
   e15d0:	ee08 3a10 	vmov	s16, r3
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
   e15d4:	f7ff fc73 	bl	e0ebe <mbedtls_mpi_shift_l>
   e15d8:	4604      	mov	r4, r0
   e15da:	2800      	cmp	r0, #0
   e15dc:	d1a5      	bne.n	e152a <mbedtls_mpi_div_mpi+0x76>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
   e15de:	ee18 1a10 	vmov	r1, s16
   e15e2:	4638      	mov	r0, r7
   e15e4:	f7ff fc6b 	bl	e0ebe <mbedtls_mpi_shift_l>
   e15e8:	4604      	mov	r4, r0
   e15ea:	2800      	cmp	r0, #0
   e15ec:	d19d      	bne.n	e152a <mbedtls_mpi_div_mpi+0x76>
    n = X.n - 1;
   e15ee:	9d06      	ldr	r5, [sp, #24]
    t = Y.n - 1;
   e15f0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
   e15f4:	eba5 030a 	sub.w	r3, r5, sl
   e15f8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
   e15fc:	4659      	mov	r1, fp
   e15fe:	4638      	mov	r0, r7
   e1600:	9300      	str	r3, [sp, #0]
   e1602:	f7ff fc5c 	bl	e0ebe <mbedtls_mpi_shift_l>
   e1606:	4604      	mov	r4, r0
   e1608:	2800      	cmp	r0, #0
   e160a:	d18e      	bne.n	e152a <mbedtls_mpi_div_mpi+0x76>
        Z.p[n - t]++;
   e160c:	9b00      	ldr	r3, [sp, #0]
   e160e:	009b      	lsls	r3, r3, #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
   e1610:	4639      	mov	r1, r7
   e1612:	a805      	add	r0, sp, #20
   e1614:	9300      	str	r3, [sp, #0]
   e1616:	f7ff fd7f 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   e161a:	2800      	cmp	r0, #0
   e161c:	db11      	blt.n	e1642 <mbedtls_mpi_div_mpi+0x18e>
        Z.p[n - t]++;
   e161e:	990d      	ldr	r1, [sp, #52]	; 0x34
   e1620:	9b00      	ldr	r3, [sp, #0]
   e1622:	58ca      	ldr	r2, [r1, r3]
   e1624:	3201      	adds	r2, #1
   e1626:	50ca      	str	r2, [r1, r3]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
   e1628:	a905      	add	r1, sp, #20
   e162a:	463a      	mov	r2, r7
   e162c:	4608      	mov	r0, r1
   e162e:	f7ff fe81 	bl	e1334 <mbedtls_mpi_sub_mpi>
   e1632:	9b00      	ldr	r3, [sp, #0]
   e1634:	4604      	mov	r4, r0
   e1636:	2800      	cmp	r0, #0
   e1638:	d0ea      	beq.n	e1610 <mbedtls_mpi_div_mpi+0x15c>
   e163a:	e776      	b.n	e152a <mbedtls_mpi_div_mpi+0x76>
    else k = 0;
   e163c:	ee08 4a10 	vmov	s16, r4
   e1640:	e7d5      	b.n	e15ee <mbedtls_mpi_div_mpi+0x13a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
   e1642:	4659      	mov	r1, fp
   e1644:	4638      	mov	r0, r7
   e1646:	f7ff fc8d 	bl	e0f64 <mbedtls_mpi_shift_r>
   e164a:	4604      	mov	r4, r0
   e164c:	2800      	cmp	r0, #0
   e164e:	f47f af6c 	bne.w	e152a <mbedtls_mpi_div_mpi+0x76>
    t = Y.n - 1;
   e1652:	f10a 3bff 	add.w	fp, sl, #4294967295
        if( X.p[i] >= Y.p[t] )
   e1656:	ea4f 038b 	mov.w	r3, fp, lsl #2
    n = X.n - 1;
   e165a:	1e6f      	subs	r7, r5, #1
        if( X.p[i] >= Y.p[t] )
   e165c:	9300      	str	r3, [sp, #0]
   e165e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
   e1662:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
   e1666:	3b02      	subs	r3, #2
   e1668:	3d01      	subs	r5, #1
   e166a:	009b      	lsls	r3, r3, #2
   e166c:	eba5 0a0a 	sub.w	sl, r5, sl
   e1670:	9303      	str	r3, [sp, #12]
   e1672:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
    for( i = n; i > t ; i-- )
   e1676:	455f      	cmp	r7, fp
   e1678:	f240 80b3 	bls.w	e17e2 <mbedtls_mpi_div_mpi+0x32e>
        if( X.p[i] >= Y.p[t] )
   e167c:	00ba      	lsls	r2, r7, #2
   e167e:	9800      	ldr	r0, [sp, #0]
   e1680:	9202      	str	r2, [sp, #8]
   e1682:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   e1684:	9b07      	ldr	r3, [sp, #28]
   e1686:	5812      	ldr	r2, [r2, r0]
   e1688:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
   e168c:	00b8      	lsls	r0, r7, #2
   e168e:	3804      	subs	r0, #4
   e1690:	9001      	str	r0, [sp, #4]
   e1692:	980d      	ldr	r0, [sp, #52]	; 0x34
   e1694:	4291      	cmp	r1, r2
   e1696:	eb00 050a 	add.w	r5, r0, sl
   e169a:	f0c0 808b 	bcc.w	e17b4 <mbedtls_mpi_div_mpi+0x300>
            Z.p[i - t - 1] = ~0;
   e169e:	f04f 33ff 	mov.w	r3, #4294967295
   e16a2:	f840 300a 	str.w	r3, [r0, sl]
        Z.p[i - t - 1]++;
   e16a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   e16a8:	f852 300a 	ldr.w	r3, [r2, sl]
   e16ac:	3301      	adds	r3, #1
   e16ae:	f842 300a 	str.w	r3, [r2, sl]
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
   e16b2:	00bb      	lsls	r3, r7, #2
   e16b4:	f1a3 0508 	sub.w	r5, r3, #8
            Z.p[i - t - 1]--;
   e16b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   e16ba:	f852 300a 	ldr.w	r3, [r2, sl]
   e16be:	3b01      	subs	r3, #1
   e16c0:	f842 300a 	str.w	r3, [r2, sl]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
   e16c4:	2100      	movs	r1, #0
   e16c6:	a80e      	add	r0, sp, #56	; 0x38
   e16c8:	f7ff fb22 	bl	e0d10 <mbedtls_mpi_lset>
   e16cc:	2800      	cmp	r0, #0
   e16ce:	f040 80b1 	bne.w	e1834 <mbedtls_mpi_div_mpi+0x380>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
   e16d2:	f1bb 0f00 	cmp.w	fp, #0
   e16d6:	f000 8082 	beq.w	e17de <mbedtls_mpi_div_mpi+0x32a>
   e16da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e16dc:	9a03      	ldr	r2, [sp, #12]
   e16de:	589b      	ldr	r3, [r3, r2]
   e16e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   e16e2:	6013      	str	r3, [r2, #0]
            T1.p[1] = Y.p[t];
   e16e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e16e6:	9a00      	ldr	r2, [sp, #0]
   e16e8:	589a      	ldr	r2, [r3, r2]
   e16ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
   e16ec:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
   e16ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e16f0:	a90e      	add	r1, sp, #56	; 0x38
   e16f2:	4608      	mov	r0, r1
   e16f4:	f853 200a 	ldr.w	r2, [r3, sl]
   e16f8:	f7ff fecf 	bl	e149a <mbedtls_mpi_mul_int>
   e16fc:	4601      	mov	r1, r0
   e16fe:	2800      	cmp	r0, #0
   e1700:	f040 809a 	bne.w	e1838 <mbedtls_mpi_div_mpi+0x384>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
   e1704:	a811      	add	r0, sp, #68	; 0x44
   e1706:	f7ff fb03 	bl	e0d10 <mbedtls_mpi_lset>
   e170a:	2800      	cmp	r0, #0
   e170c:	f040 8092 	bne.w	e1834 <mbedtls_mpi_div_mpi+0x380>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
   e1710:	2f01      	cmp	r7, #1
   e1712:	bf18      	it	ne
   e1714:	9b07      	ldrne	r3, [sp, #28]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
   e1716:	9a01      	ldr	r2, [sp, #4]
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
   e1718:	bf18      	it	ne
   e171a:	5958      	ldrne	r0, [r3, r5]
   e171c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e171e:	6018      	str	r0, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
   e1720:	9b07      	ldr	r3, [sp, #28]
   e1722:	589a      	ldr	r2, [r3, r2]
   e1724:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e1726:	605a      	str	r2, [r3, #4]
            T2.p[2] = X.p[i];
   e1728:	9b07      	ldr	r3, [sp, #28]
   e172a:	9a02      	ldr	r2, [sp, #8]
   e172c:	589a      	ldr	r2, [r3, r2]
   e172e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
   e1730:	a911      	add	r1, sp, #68	; 0x44
            T2.p[2] = X.p[i];
   e1732:	609a      	str	r2, [r3, #8]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
   e1734:	a80e      	add	r0, sp, #56	; 0x38
   e1736:	f7ff fcef 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   e173a:	2800      	cmp	r0, #0
   e173c:	dcbc      	bgt.n	e16b8 <mbedtls_mpi_div_mpi+0x204>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
   e173e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e1740:	a908      	add	r1, sp, #32
   e1742:	f853 200a 	ldr.w	r2, [r3, sl]
   e1746:	a80e      	add	r0, sp, #56	; 0x38
   e1748:	f7ff fea7 	bl	e149a <mbedtls_mpi_mul_int>
   e174c:	2800      	cmp	r0, #0
   e174e:	d171      	bne.n	e1834 <mbedtls_mpi_div_mpi+0x380>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
   e1750:	ea4f 05ca 	mov.w	r5, sl, lsl #3
   e1754:	4629      	mov	r1, r5
   e1756:	a80e      	add	r0, sp, #56	; 0x38
   e1758:	f7ff fbb1 	bl	e0ebe <mbedtls_mpi_shift_l>
   e175c:	2800      	cmp	r0, #0
   e175e:	d169      	bne.n	e1834 <mbedtls_mpi_div_mpi+0x380>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
   e1760:	a905      	add	r1, sp, #20
   e1762:	4608      	mov	r0, r1
   e1764:	aa0e      	add	r2, sp, #56	; 0x38
   e1766:	f7ff fde5 	bl	e1334 <mbedtls_mpi_sub_mpi>
   e176a:	4601      	mov	r1, r0
   e176c:	2800      	cmp	r0, #0
   e176e:	d163      	bne.n	e1838 <mbedtls_mpi_div_mpi+0x384>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
   e1770:	a805      	add	r0, sp, #20
   e1772:	f7ff fd12 	bl	e119a <mbedtls_mpi_cmp_int>
   e1776:	2800      	cmp	r0, #0
   e1778:	da18      	bge.n	e17ac <mbedtls_mpi_div_mpi+0x2f8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
   e177a:	a908      	add	r1, sp, #32
   e177c:	a80e      	add	r0, sp, #56	; 0x38
   e177e:	f7ff fa69 	bl	e0c54 <mbedtls_mpi_copy>
   e1782:	2800      	cmp	r0, #0
   e1784:	d156      	bne.n	e1834 <mbedtls_mpi_div_mpi+0x380>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
   e1786:	4629      	mov	r1, r5
   e1788:	a80e      	add	r0, sp, #56	; 0x38
   e178a:	f7ff fb98 	bl	e0ebe <mbedtls_mpi_shift_l>
   e178e:	2800      	cmp	r0, #0
   e1790:	d150      	bne.n	e1834 <mbedtls_mpi_div_mpi+0x380>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
   e1792:	a905      	add	r1, sp, #20
   e1794:	aa0e      	add	r2, sp, #56	; 0x38
   e1796:	4608      	mov	r0, r1
   e1798:	f7ff fdaa 	bl	e12f0 <mbedtls_mpi_add_mpi>
   e179c:	2800      	cmp	r0, #0
   e179e:	d149      	bne.n	e1834 <mbedtls_mpi_div_mpi+0x380>
            Z.p[i - t - 1]--;
   e17a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   e17a2:	f852 300a 	ldr.w	r3, [r2, sl]
   e17a6:	3b01      	subs	r3, #1
   e17a8:	f842 300a 	str.w	r3, [r2, sl]
    for( i = n; i > t ; i-- )
   e17ac:	3f01      	subs	r7, #1
   e17ae:	f1aa 0a04 	sub.w	sl, sl, #4
   e17b2:	e760      	b.n	e1676 <mbedtls_mpi_div_mpi+0x1c2>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
   e17b4:	9801      	ldr	r0, [sp, #4]
   e17b6:	5818      	ldr	r0, [r3, r0]
    if( 0 == d || u1 >= d )
   e17b8:	b172      	cbz	r2, e17d8 <mbedtls_mpi_div_mpi+0x324>
    quotient = dividend / d;
   e17ba:	2300      	movs	r3, #0
   e17bc:	f007 f900 	bl	e89c0 <__aeabi_uldivmod>
   e17c0:	460b      	mov	r3, r1
    return (mbedtls_mpi_uint) quotient;
   e17c2:	2100      	movs	r1, #0
    quotient = dividend / d;
   e17c4:	4602      	mov	r2, r0
    return (mbedtls_mpi_uint) quotient;
   e17c6:	4299      	cmp	r1, r3
   e17c8:	f04f 30ff 	mov.w	r0, #4294967295
   e17cc:	bf08      	it	eq
   e17ce:	4290      	cmpeq	r0, r2
   e17d0:	d200      	bcs.n	e17d4 <mbedtls_mpi_div_mpi+0x320>
   e17d2:	4602      	mov	r2, r0
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
   e17d4:	602a      	str	r2, [r5, #0]
   e17d6:	e766      	b.n	e16a6 <mbedtls_mpi_div_mpi+0x1f2>
        return ( ~0 );
   e17d8:	f04f 32ff 	mov.w	r2, #4294967295
   e17dc:	e7fa      	b.n	e17d4 <mbedtls_mpi_div_mpi+0x320>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
   e17de:	465b      	mov	r3, fp
   e17e0:	e77e      	b.n	e16e0 <mbedtls_mpi_div_mpi+0x22c>
    if( Q != NULL )
   e17e2:	b15e      	cbz	r6, e17fc <mbedtls_mpi_div_mpi+0x348>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
   e17e4:	a90b      	add	r1, sp, #44	; 0x2c
   e17e6:	4630      	mov	r0, r6
   e17e8:	f7ff fa34 	bl	e0c54 <mbedtls_mpi_copy>
   e17ec:	bb10      	cbnz	r0, e1834 <mbedtls_mpi_div_mpi+0x380>
        Q->s = A->s * B->s;
   e17ee:	ee18 3a90 	vmov	r3, s17
   e17f2:	f8d9 2000 	ldr.w	r2, [r9]
   e17f6:	681b      	ldr	r3, [r3, #0]
   e17f8:	4353      	muls	r3, r2
   e17fa:	6033      	str	r3, [r6, #0]
    if( R != NULL )
   e17fc:	f1b8 0f00 	cmp.w	r8, #0
   e1800:	f43f ae93 	beq.w	e152a <mbedtls_mpi_div_mpi+0x76>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
   e1804:	ee18 1a10 	vmov	r1, s16
   e1808:	a805      	add	r0, sp, #20
   e180a:	f7ff fbab 	bl	e0f64 <mbedtls_mpi_shift_r>
   e180e:	b988      	cbnz	r0, e1834 <mbedtls_mpi_div_mpi+0x380>
        X.s = A->s;
   e1810:	f8d9 3000 	ldr.w	r3, [r9]
   e1814:	9305      	str	r3, [sp, #20]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
   e1816:	a905      	add	r1, sp, #20
   e1818:	4640      	mov	r0, r8
   e181a:	f7ff fa1b 	bl	e0c54 <mbedtls_mpi_copy>
   e181e:	4601      	mov	r1, r0
   e1820:	b950      	cbnz	r0, e1838 <mbedtls_mpi_div_mpi+0x384>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
   e1822:	4640      	mov	r0, r8
   e1824:	f7ff fcb9 	bl	e119a <mbedtls_mpi_cmp_int>
   e1828:	2800      	cmp	r0, #0
   e182a:	f47f ae7e 	bne.w	e152a <mbedtls_mpi_div_mpi+0x76>
            R->s = 1;
   e182e:	2301      	movs	r3, #1
   e1830:	f8c8 3000 	str.w	r3, [r8]
   e1834:	4604      	mov	r4, r0
   e1836:	e678      	b.n	e152a <mbedtls_mpi_div_mpi+0x76>
   e1838:	460c      	mov	r4, r1
   e183a:	e676      	b.n	e152a <mbedtls_mpi_div_mpi+0x76>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
   e183c:	f06f 040b 	mvn.w	r4, #11
   e1840:	e666      	b.n	e1510 <mbedtls_mpi_div_mpi+0x5c>

000e1842 <mbedtls_mpi_mod_mpi>:
{
   e1842:	b570      	push	{r4, r5, r6, lr}
   e1844:	4604      	mov	r4, r0
   e1846:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
   e1848:	4610      	mov	r0, r2
   e184a:	2100      	movs	r1, #0
{
   e184c:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
   e184e:	f7ff fca4 	bl	e119a <mbedtls_mpi_cmp_int>
   e1852:	2800      	cmp	r0, #0
   e1854:	db24      	blt.n	e18a0 <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
   e1856:	462a      	mov	r2, r5
   e1858:	4633      	mov	r3, r6
   e185a:	4621      	mov	r1, r4
   e185c:	2000      	movs	r0, #0
   e185e:	f7ff fe29 	bl	e14b4 <mbedtls_mpi_div_mpi>
   e1862:	4605      	mov	r5, r0
   e1864:	b9f0      	cbnz	r0, e18a4 <mbedtls_mpi_mod_mpi+0x62>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
   e1866:	2100      	movs	r1, #0
   e1868:	4620      	mov	r0, r4
   e186a:	f7ff fc96 	bl	e119a <mbedtls_mpi_cmp_int>
   e186e:	2800      	cmp	r0, #0
   e1870:	da08      	bge.n	e1884 <mbedtls_mpi_mod_mpi+0x42>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
   e1872:	4632      	mov	r2, r6
   e1874:	4621      	mov	r1, r4
   e1876:	4620      	mov	r0, r4
   e1878:	f7ff fd3a 	bl	e12f0 <mbedtls_mpi_add_mpi>
   e187c:	2800      	cmp	r0, #0
   e187e:	d0f2      	beq.n	e1866 <mbedtls_mpi_mod_mpi+0x24>
   e1880:	4605      	mov	r5, r0
   e1882:	e00f      	b.n	e18a4 <mbedtls_mpi_mod_mpi+0x62>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
   e1884:	4631      	mov	r1, r6
   e1886:	4620      	mov	r0, r4
   e1888:	f7ff fc46 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   e188c:	2800      	cmp	r0, #0
   e188e:	db09      	blt.n	e18a4 <mbedtls_mpi_mod_mpi+0x62>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
   e1890:	4632      	mov	r2, r6
   e1892:	4621      	mov	r1, r4
   e1894:	4620      	mov	r0, r4
   e1896:	f7ff fd4d 	bl	e1334 <mbedtls_mpi_sub_mpi>
   e189a:	2800      	cmp	r0, #0
   e189c:	d0f2      	beq.n	e1884 <mbedtls_mpi_mod_mpi+0x42>
   e189e:	e7ef      	b.n	e1880 <mbedtls_mpi_mod_mpi+0x3e>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
   e18a0:	f06f 0509 	mvn.w	r5, #9
}
   e18a4:	4628      	mov	r0, r5
   e18a6:	bd70      	pop	{r4, r5, r6, pc}

000e18a8 <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *_RR )
{
   e18a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e18ac:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
   e18b0:	4605      	mov	r5, r0
   e18b2:	4688      	mov	r8, r1
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
   e18b4:	4618      	mov	r0, r3
   e18b6:	2100      	movs	r1, #0
{
   e18b8:	9202      	str	r2, [sp, #8]
   e18ba:	461c      	mov	r4, r3
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
   e18bc:	f7ff fc6d 	bl	e119a <mbedtls_mpi_cmp_int>
   e18c0:	2800      	cmp	r0, #0
   e18c2:	f340 8215 	ble.w	e1cf0 <mbedtls_mpi_exp_mod+0x448>
   e18c6:	68a3      	ldr	r3, [r4, #8]
   e18c8:	681e      	ldr	r6, [r3, #0]
   e18ca:	f016 0301 	ands.w	r3, r6, #1
   e18ce:	9304      	str	r3, [sp, #16]
   e18d0:	f000 820e 	beq.w	e1cf0 <mbedtls_mpi_exp_mod+0x448>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
   e18d4:	9802      	ldr	r0, [sp, #8]
   e18d6:	2100      	movs	r1, #0
   e18d8:	f7ff fc5f 	bl	e119a <mbedtls_mpi_cmp_int>
   e18dc:	2800      	cmp	r0, #0
   e18de:	f2c0 8207 	blt.w	e1cf0 <mbedtls_mpi_exp_mod+0x448>
    x += ( ( m0 + 2 ) & 4 ) << 1;
   e18e2:	1cb7      	adds	r7, r6, #2
   e18e4:	007f      	lsls	r7, r7, #1
   e18e6:	f007 0708 	and.w	r7, r7, #8
   e18ea:	4437      	add	r7, r6
   e18ec:	2103      	movs	r1, #3
        x *= ( 2 - ( m0 * x ) );
   e18ee:	fb07 f306 	mul.w	r3, r7, r6
   e18f2:	f1c3 0302 	rsb	r3, r3, #2
    for( i = biL; i >= 8; i /= 2 )
   e18f6:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
   e18f8:	fb03 f707 	mul.w	r7, r3, r7
    for( i = biL; i >= 8; i /= 2 )
   e18fc:	d1f7      	bne.n	e18ee <mbedtls_mpi_exp_mod+0x46>
    X->s = 1;
   e18fe:	2301      	movs	r3, #1
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
   e1900:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   e1904:	a814      	add	r0, sp, #80	; 0x50
    X->n = 0;
   e1906:	e9cd 3108 	strd	r3, r1, [sp, #32]
    X->s = 1;
   e190a:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
    X->p = NULL;
   e190e:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    X->n = 0;
   e1912:	e9cd 310e 	strd	r3, r1, [sp, #56]	; 0x38
    X->p = NULL;
   e1916:	9110      	str	r1, [sp, #64]	; 0x40
    memset( W, 0, sizeof( W ) );
   e1918:	f007 fa90 	bl	e8e3c <memset>

    i = mbedtls_mpi_bitlen( E );
   e191c:	9802      	ldr	r0, [sp, #8]
   e191e:	f7ff fa3f 	bl	e0da0 <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
   e1922:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
   e1926:	f080 80fb 	bcs.w	e1b20 <mbedtls_mpi_exp_mod+0x278>
   e192a:	28ef      	cmp	r0, #239	; 0xef
   e192c:	f200 80fa 	bhi.w	e1b24 <mbedtls_mpi_exp_mod+0x27c>
   e1930:	284f      	cmp	r0, #79	; 0x4f
   e1932:	f200 80f9 	bhi.w	e1b28 <mbedtls_mpi_exp_mod+0x280>
   e1936:	9b04      	ldr	r3, [sp, #16]
   e1938:	2817      	cmp	r0, #23
   e193a:	bf94      	ite	ls
   e193c:	461e      	movls	r6, r3
   e193e:	2603      	movhi	r6, #3
#if( MBEDTLS_MPI_WINDOW_SIZE < 6 )
    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
#endif

    j = N->n + 1;
   e1940:	6861      	ldr	r1, [r4, #4]
   e1942:	f101 0901 	add.w	r9, r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
   e1946:	4649      	mov	r1, r9
   e1948:	4628      	mov	r0, r5
   e194a:	f7ff f91e 	bl	e0b8a <mbedtls_mpi_grow>
   e194e:	4602      	mov	r2, r0
   e1950:	2800      	cmp	r0, #0
   e1952:	f040 817d 	bne.w	e1c50 <mbedtls_mpi_exp_mod+0x3a8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
   e1956:	4649      	mov	r1, r9
   e1958:	a817      	add	r0, sp, #92	; 0x5c
   e195a:	f7ff f916 	bl	e0b8a <mbedtls_mpi_grow>
   e195e:	4602      	mov	r2, r0
   e1960:	2800      	cmp	r0, #0
   e1962:	f040 8175 	bne.w	e1c50 <mbedtls_mpi_exp_mod+0x3a8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
   e1966:	ea4f 0149 	mov.w	r1, r9, lsl #1
   e196a:	a80b      	add	r0, sp, #44	; 0x2c
   e196c:	f7ff f90d 	bl	e0b8a <mbedtls_mpi_grow>
   e1970:	4602      	mov	r2, r0
   e1972:	2800      	cmp	r0, #0
   e1974:	f040 816c 	bne.w	e1c50 <mbedtls_mpi_exp_mod+0x3a8>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
   e1978:	f8d8 3000 	ldr.w	r3, [r8]
   e197c:	9303      	str	r3, [sp, #12]
    if( neg )
   e197e:	3301      	adds	r3, #1
   e1980:	d10b      	bne.n	e199a <mbedtls_mpi_exp_mod+0xf2>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
   e1982:	4641      	mov	r1, r8
   e1984:	a80e      	add	r0, sp, #56	; 0x38
   e1986:	f7ff f965 	bl	e0c54 <mbedtls_mpi_copy>
   e198a:	4602      	mov	r2, r0
   e198c:	2800      	cmp	r0, #0
   e198e:	f040 815f 	bne.w	e1c50 <mbedtls_mpi_exp_mod+0x3a8>
        Apos.s = 1;
   e1992:	2301      	movs	r3, #1
   e1994:	930e      	str	r3, [sp, #56]	; 0x38
        A = &Apos;
   e1996:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
   e199a:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
   e199e:	b11b      	cbz	r3, e19a8 <mbedtls_mpi_exp_mod+0x100>
   e19a0:	689b      	ldr	r3, [r3, #8]
   e19a2:	2b00      	cmp	r3, #0
   e19a4:	f040 80c2 	bne.w	e1b2c <mbedtls_mpi_exp_mod+0x284>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
   e19a8:	2101      	movs	r1, #1
   e19aa:	a808      	add	r0, sp, #32
   e19ac:	f7ff f9b0 	bl	e0d10 <mbedtls_mpi_lset>
   e19b0:	4602      	mov	r2, r0
   e19b2:	2800      	cmp	r0, #0
   e19b4:	f040 814c 	bne.w	e1c50 <mbedtls_mpi_exp_mod+0x3a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
   e19b8:	6861      	ldr	r1, [r4, #4]
   e19ba:	a808      	add	r0, sp, #32
   e19bc:	0189      	lsls	r1, r1, #6
   e19be:	f7ff fa7e 	bl	e0ebe <mbedtls_mpi_shift_l>
   e19c2:	4602      	mov	r2, r0
   e19c4:	2800      	cmp	r0, #0
   e19c6:	f040 8143 	bne.w	e1c50 <mbedtls_mpi_exp_mod+0x3a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
   e19ca:	a908      	add	r1, sp, #32
   e19cc:	4622      	mov	r2, r4
   e19ce:	4608      	mov	r0, r1
   e19d0:	f7ff ff37 	bl	e1842 <mbedtls_mpi_mod_mpi>
   e19d4:	4602      	mov	r2, r0
   e19d6:	2800      	cmp	r0, #0
   e19d8:	f040 813a 	bne.w	e1c50 <mbedtls_mpi_exp_mod+0x3a8>

        if( _RR != NULL )
   e19dc:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
   e19e0:	b13b      	cbz	r3, e19f2 <mbedtls_mpi_exp_mod+0x14a>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
   e19e2:	ab08      	add	r3, sp, #32
   e19e4:	cb03      	ldmia	r3!, {r0, r1}
   e19e6:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
   e19ea:	6010      	str	r0, [r2, #0]
   e19ec:	6818      	ldr	r0, [r3, #0]
   e19ee:	6051      	str	r1, [r2, #4]
   e19f0:	6090      	str	r0, [r2, #8]
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
   e19f2:	4621      	mov	r1, r4
   e19f4:	4640      	mov	r0, r8
   e19f6:	f7ff fb8f 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   e19fa:	2800      	cmp	r0, #0
   e19fc:	f2c0 809f 	blt.w	e1b3e <mbedtls_mpi_exp_mod+0x296>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
   e1a00:	4622      	mov	r2, r4
   e1a02:	4641      	mov	r1, r8
   e1a04:	a817      	add	r0, sp, #92	; 0x5c
   e1a06:	f7ff ff1c 	bl	e1842 <mbedtls_mpi_mod_mpi>
   e1a0a:	4602      	mov	r2, r0
   e1a0c:	2800      	cmp	r0, #0
   e1a0e:	f040 811f 	bne.w	e1c50 <mbedtls_mpi_exp_mod+0x3a8>
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
   e1a12:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
    *mm = ~x + 1;
   e1a16:	427b      	negs	r3, r7
    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
   e1a18:	4622      	mov	r2, r4
   e1a1a:	f8cd 9000 	str.w	r9, [sp]
   e1a1e:	a908      	add	r1, sp, #32
   e1a20:	a817      	add	r0, sp, #92	; 0x5c
   e1a22:	9305      	str	r3, [sp, #20]
   e1a24:	f7ff fb11 	bl	e104a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e1a28:	4602      	mov	r2, r0
   e1a2a:	2800      	cmp	r0, #0
   e1a2c:	f040 8110 	bne.w	e1c50 <mbedtls_mpi_exp_mod+0x3a8>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
   e1a30:	a908      	add	r1, sp, #32
   e1a32:	4628      	mov	r0, r5
   e1a34:	f7ff f90e 	bl	e0c54 <mbedtls_mpi_copy>
   e1a38:	4602      	mov	r2, r0
   e1a3a:	2800      	cmp	r0, #0
   e1a3c:	f040 8108 	bne.w	e1c50 <mbedtls_mpi_exp_mod+0x3a8>
    mbedtls_mpi_uint z = 1;
   e1a40:	aa07      	add	r2, sp, #28
   e1a42:	2701      	movs	r7, #1
    U.p = &z;
   e1a44:	9213      	str	r2, [sp, #76]	; 0x4c
    return( mpi_montmul( A, &U, N, mm, T ) );
   e1a46:	9b05      	ldr	r3, [sp, #20]
   e1a48:	f8cd 9000 	str.w	r9, [sp]
   e1a4c:	4622      	mov	r2, r4
   e1a4e:	a911      	add	r1, sp, #68	; 0x44
   e1a50:	4628      	mov	r0, r5
    U.n = U.s = (int) z;
   e1a52:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
    mbedtls_mpi_uint z = 1;
   e1a56:	9707      	str	r7, [sp, #28]
    return( mpi_montmul( A, &U, N, mm, T ) );
   e1a58:	f7ff faf7 	bl	e104a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
   e1a5c:	4602      	mov	r2, r0
   e1a5e:	2800      	cmp	r0, #0
   e1a60:	f040 80f6 	bne.w	e1c50 <mbedtls_mpi_exp_mod+0x3a8>

    if( wsize > 1 )
   e1a64:	42be      	cmp	r6, r7
   e1a66:	9b05      	ldr	r3, [sp, #20]
   e1a68:	d06e      	beq.n	e1b48 <mbedtls_mpi_exp_mod+0x2a0>
   e1a6a:	f106 3bff 	add.w	fp, r6, #4294967295
   e1a6e:	fa07 f80b 	lsl.w	r8, r7, fp
        /*
         * W[1 << (wsize - 1)] = W[1] ^ (wsize - 1)
         */
        j =  one << ( wsize - 1 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
   e1a72:	270c      	movs	r7, #12
   e1a74:	6861      	ldr	r1, [r4, #4]
   e1a76:	ab14      	add	r3, sp, #80	; 0x50
   e1a78:	fa07 f70b 	lsl.w	r7, r7, fp
   e1a7c:	441f      	add	r7, r3
   e1a7e:	3101      	adds	r1, #1
   e1a80:	4638      	mov	r0, r7
   e1a82:	f7ff f882 	bl	e0b8a <mbedtls_mpi_grow>
   e1a86:	4602      	mov	r2, r0
   e1a88:	2800      	cmp	r0, #0
   e1a8a:	f040 80e1 	bne.w	e1c50 <mbedtls_mpi_exp_mod+0x3a8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
   e1a8e:	a917      	add	r1, sp, #92	; 0x5c
   e1a90:	4638      	mov	r0, r7
   e1a92:	f7ff f8df 	bl	e0c54 <mbedtls_mpi_copy>
   e1a96:	4602      	mov	r2, r0
   e1a98:	2800      	cmp	r0, #0
   e1a9a:	f040 80d9 	bne.w	e1c50 <mbedtls_mpi_exp_mod+0x3a8>

        for( i = 0; i < wsize - 1; i++ )
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
   e1a9e:	9b05      	ldr	r3, [sp, #20]
        for( i = 0; i < wsize - 1; i++ )
   e1aa0:	4682      	mov	sl, r0
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
   e1aa2:	4622      	mov	r2, r4
   e1aa4:	f8cd 9000 	str.w	r9, [sp]
   e1aa8:	4639      	mov	r1, r7
   e1aaa:	4638      	mov	r0, r7
   e1aac:	9305      	str	r3, [sp, #20]
   e1aae:	f7ff facc 	bl	e104a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e1ab2:	4602      	mov	r2, r0
   e1ab4:	2800      	cmp	r0, #0
   e1ab6:	f040 80cb 	bne.w	e1c50 <mbedtls_mpi_exp_mod+0x3a8>
        for( i = 0; i < wsize - 1; i++ )
   e1aba:	f10a 0a01 	add.w	sl, sl, #1
   e1abe:	45d3      	cmp	fp, sl
   e1ac0:	9b05      	ldr	r3, [sp, #20]
   e1ac2:	d8ee      	bhi.n	e1aa2 <mbedtls_mpi_exp_mod+0x1fa>

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
   e1ac4:	f04f 0a01 	mov.w	sl, #1
   e1ac8:	46bb      	mov	fp, r7
   e1aca:	f108 0801 	add.w	r8, r8, #1
   e1ace:	fa0a fa06 	lsl.w	sl, sl, r6
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
   e1ad2:	af0b      	add	r7, sp, #44	; 0x2c
        for( i = j + 1; i < ( one << wsize ); i++ )
   e1ad4:	45c2      	cmp	sl, r8
   e1ad6:	d937      	bls.n	e1b48 <mbedtls_mpi_exp_mod+0x2a0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
   e1ad8:	6861      	ldr	r1, [r4, #4]
   e1ada:	9305      	str	r3, [sp, #20]
   e1adc:	f10b 090c 	add.w	r9, fp, #12
   e1ae0:	3101      	adds	r1, #1
   e1ae2:	4648      	mov	r0, r9
   e1ae4:	f7ff f851 	bl	e0b8a <mbedtls_mpi_grow>
   e1ae8:	4602      	mov	r2, r0
   e1aea:	2800      	cmp	r0, #0
   e1aec:	f040 80b0 	bne.w	e1c50 <mbedtls_mpi_exp_mod+0x3a8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
   e1af0:	4659      	mov	r1, fp
   e1af2:	4648      	mov	r0, r9
   e1af4:	f7ff f8ae 	bl	e0c54 <mbedtls_mpi_copy>
   e1af8:	4602      	mov	r2, r0
   e1afa:	2800      	cmp	r0, #0
   e1afc:	f040 80a8 	bne.w	e1c50 <mbedtls_mpi_exp_mod+0x3a8>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
   e1b00:	4622      	mov	r2, r4
   e1b02:	9b05      	ldr	r3, [sp, #20]
   e1b04:	9700      	str	r7, [sp, #0]
   e1b06:	a917      	add	r1, sp, #92	; 0x5c
   e1b08:	4648      	mov	r0, r9
   e1b0a:	f7ff fa9e 	bl	e104a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e1b0e:	4602      	mov	r2, r0
   e1b10:	2800      	cmp	r0, #0
   e1b12:	f040 809d 	bne.w	e1c50 <mbedtls_mpi_exp_mod+0x3a8>
        for( i = j + 1; i < ( one << wsize ); i++ )
   e1b16:	9b05      	ldr	r3, [sp, #20]
   e1b18:	f108 0801 	add.w	r8, r8, #1
   e1b1c:	46cb      	mov	fp, r9
   e1b1e:	e7d9      	b.n	e1ad4 <mbedtls_mpi_exp_mod+0x22c>
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
   e1b20:	2606      	movs	r6, #6
   e1b22:	e70d      	b.n	e1940 <mbedtls_mpi_exp_mod+0x98>
   e1b24:	2605      	movs	r6, #5
   e1b26:	e70b      	b.n	e1940 <mbedtls_mpi_exp_mod+0x98>
   e1b28:	2604      	movs	r6, #4
   e1b2a:	e709      	b.n	e1940 <mbedtls_mpi_exp_mod+0x98>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
   e1b2c:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
   e1b30:	6810      	ldr	r0, [r2, #0]
   e1b32:	6851      	ldr	r1, [r2, #4]
   e1b34:	ab08      	add	r3, sp, #32
   e1b36:	c303      	stmia	r3!, {r0, r1}
   e1b38:	6890      	ldr	r0, [r2, #8]
   e1b3a:	6018      	str	r0, [r3, #0]
   e1b3c:	e759      	b.n	e19f2 <mbedtls_mpi_exp_mod+0x14a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
   e1b3e:	4641      	mov	r1, r8
   e1b40:	a817      	add	r0, sp, #92	; 0x5c
   e1b42:	f7ff f887 	bl	e0c54 <mbedtls_mpi_copy>
   e1b46:	e760      	b.n	e1a0a <mbedtls_mpi_exp_mod+0x162>
        }
    }

    nblimbs = E->n;
   e1b48:	9a02      	ldr	r2, [sp, #8]
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
   e1b4a:	f04f 0800 	mov.w	r8, #0
    nblimbs = E->n;
   e1b4e:	f8d2 b004 	ldr.w	fp, [r2, #4]
    nbits   = 0;
   e1b52:	4647      	mov	r7, r8
    bufsize = 0;
   e1b54:	46c1      	mov	r9, r8
    wbits   = 0;
   e1b56:	46c2      	mov	sl, r8

    while( 1 )
    {
        if( bufsize == 0 )
   e1b58:	f1b9 0f00 	cmp.w	r9, #0
   e1b5c:	d125      	bne.n	e1baa <mbedtls_mpi_exp_mod+0x302>
        {
            if( nblimbs == 0 )
   e1b5e:	f1bb 0f00 	cmp.w	fp, #0
   e1b62:	d11e      	bne.n	e1ba2 <mbedtls_mpi_exp_mod+0x2fa>
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
   e1b64:	f04f 0901 	mov.w	r9, #1
   e1b68:	fa09 f906 	lsl.w	r9, r9, r6
   e1b6c:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
    for( i = 0; i < nbits; i++ )
   e1b70:	45bb      	cmp	fp, r7
   e1b72:	d07f      	beq.n	e1c74 <mbedtls_mpi_exp_mod+0x3cc>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
   e1b74:	4622      	mov	r2, r4
   e1b76:	f8cd 8000 	str.w	r8, [sp]
   e1b7a:	4629      	mov	r1, r5
   e1b7c:	4628      	mov	r0, r5
   e1b7e:	9304      	str	r3, [sp, #16]
   e1b80:	f7ff fa63 	bl	e104a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e1b84:	4602      	mov	r2, r0
   e1b86:	2800      	cmp	r0, #0
   e1b88:	d162      	bne.n	e1c50 <mbedtls_mpi_exp_mod+0x3a8>
        wbits <<= 1;
   e1b8a:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
        if( ( wbits & ( one << wsize ) ) != 0 )
   e1b8e:	ea19 0f0a 	tst.w	r9, sl
   e1b92:	9b04      	ldr	r3, [sp, #16]
   e1b94:	d150      	bne.n	e1c38 <mbedtls_mpi_exp_mod+0x390>
    for( i = 0; i < nbits; i++ )
   e1b96:	f10b 0b01 	add.w	fp, fp, #1
   e1b9a:	e7e9      	b.n	e1b70 <mbedtls_mpi_exp_mod+0x2c8>
        state = 2;
   e1b9c:	f04f 0802 	mov.w	r8, #2
   e1ba0:	e7da      	b.n	e1b58 <mbedtls_mpi_exp_mod+0x2b0>
            nblimbs--;
   e1ba2:	f10b 3bff 	add.w	fp, fp, #4294967295
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
   e1ba6:	f04f 0920 	mov.w	r9, #32
        ei = (E->p[nblimbs] >> bufsize) & 1;
   e1baa:	9a02      	ldr	r2, [sp, #8]
   e1bac:	6892      	ldr	r2, [r2, #8]
   e1bae:	f852 202b 	ldr.w	r2, [r2, fp, lsl #2]
        bufsize--;
   e1bb2:	f109 39ff 	add.w	r9, r9, #4294967295
        ei = (E->p[nblimbs] >> bufsize) & 1;
   e1bb6:	fa22 f209 	lsr.w	r2, r2, r9
        if( ei == 0 && state == 0 )
   e1bba:	f012 0201 	ands.w	r2, r2, #1
   e1bbe:	d112      	bne.n	e1be6 <mbedtls_mpi_exp_mod+0x33e>
   e1bc0:	f1b8 0f00 	cmp.w	r8, #0
   e1bc4:	d0c8      	beq.n	e1b58 <mbedtls_mpi_exp_mod+0x2b0>
        if( ei == 0 && state == 1 )
   e1bc6:	f1b8 0f01 	cmp.w	r8, #1
   e1bca:	d10c      	bne.n	e1be6 <mbedtls_mpi_exp_mod+0x33e>
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
   e1bcc:	aa0b      	add	r2, sp, #44	; 0x2c
   e1bce:	9200      	str	r2, [sp, #0]
   e1bd0:	4629      	mov	r1, r5
   e1bd2:	4622      	mov	r2, r4
   e1bd4:	4628      	mov	r0, r5
   e1bd6:	9305      	str	r3, [sp, #20]
   e1bd8:	f7ff fa37 	bl	e104a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e1bdc:	4602      	mov	r2, r0
   e1bde:	2800      	cmp	r0, #0
   e1be0:	d136      	bne.n	e1c50 <mbedtls_mpi_exp_mod+0x3a8>
   e1be2:	9b05      	ldr	r3, [sp, #20]
   e1be4:	e7b8      	b.n	e1b58 <mbedtls_mpi_exp_mod+0x2b0>
        nbits++;
   e1be6:	3701      	adds	r7, #1
        wbits |= ( ei << ( wsize - nbits ) );
   e1be8:	1bf1      	subs	r1, r6, r7
   e1bea:	408a      	lsls	r2, r1
        if( nbits == wsize )
   e1bec:	42be      	cmp	r6, r7
        wbits |= ( ei << ( wsize - nbits ) );
   e1bee:	ea4a 0a02 	orr.w	sl, sl, r2
        if( nbits == wsize )
   e1bf2:	d1d3      	bne.n	e1b9c <mbedtls_mpi_exp_mod+0x2f4>
            for( i = 0; i < wsize; i++ )
   e1bf4:	f04f 0800 	mov.w	r8, #0
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
   e1bf8:	aa0b      	add	r2, sp, #44	; 0x2c
   e1bfa:	9200      	str	r2, [sp, #0]
   e1bfc:	4629      	mov	r1, r5
   e1bfe:	4622      	mov	r2, r4
   e1c00:	4628      	mov	r0, r5
   e1c02:	9305      	str	r3, [sp, #20]
   e1c04:	f7ff fa21 	bl	e104a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e1c08:	4602      	mov	r2, r0
   e1c0a:	bb08      	cbnz	r0, e1c50 <mbedtls_mpi_exp_mod+0x3a8>
            for( i = 0; i < wsize; i++ )
   e1c0c:	f108 0801 	add.w	r8, r8, #1
   e1c10:	4547      	cmp	r7, r8
   e1c12:	9b05      	ldr	r3, [sp, #20]
   e1c14:	d8f0      	bhi.n	e1bf8 <mbedtls_mpi_exp_mod+0x350>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
   e1c16:	aa0b      	add	r2, sp, #44	; 0x2c
   e1c18:	a814      	add	r0, sp, #80	; 0x50
   e1c1a:	210c      	movs	r1, #12
   e1c1c:	9200      	str	r2, [sp, #0]
   e1c1e:	fb01 010a 	mla	r1, r1, sl, r0
   e1c22:	4622      	mov	r2, r4
   e1c24:	4628      	mov	r0, r5
   e1c26:	f7ff fa10 	bl	e104a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e1c2a:	4602      	mov	r2, r0
   e1c2c:	b980      	cbnz	r0, e1c50 <mbedtls_mpi_exp_mod+0x3a8>
            state--;
   e1c2e:	f8dd 8010 	ldr.w	r8, [sp, #16]
            nbits = 0;
   e1c32:	4607      	mov	r7, r0
            wbits = 0;
   e1c34:	4682      	mov	sl, r0
   e1c36:	e7d4      	b.n	e1be2 <mbedtls_mpi_exp_mod+0x33a>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
   e1c38:	4622      	mov	r2, r4
   e1c3a:	f8cd 8000 	str.w	r8, [sp]
   e1c3e:	a917      	add	r1, sp, #92	; 0x5c
   e1c40:	4628      	mov	r0, r5
   e1c42:	9304      	str	r3, [sp, #16]
   e1c44:	f7ff fa01 	bl	e104a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
   e1c48:	9b04      	ldr	r3, [sp, #16]
   e1c4a:	4602      	mov	r2, r0
   e1c4c:	2800      	cmp	r0, #0
   e1c4e:	d0a2      	beq.n	e1b96 <mbedtls_mpi_exp_mod+0x2ee>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
   e1c50:	1e74      	subs	r4, r6, #1
   e1c52:	2301      	movs	r3, #1
   e1c54:	fa03 f404 	lsl.w	r4, r3, r4
   e1c58:	fa03 f606 	lsl.w	r6, r3, r6
        mbedtls_mpi_free( &W[i] );
   e1c5c:	250c      	movs	r5, #12
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
   e1c5e:	42a6      	cmp	r6, r4
   e1c60:	9202      	str	r2, [sp, #8]
   e1c62:	d92c      	bls.n	e1cbe <mbedtls_mpi_exp_mod+0x416>
        mbedtls_mpi_free( &W[i] );
   e1c64:	ab14      	add	r3, sp, #80	; 0x50
   e1c66:	fb05 3004 	mla	r0, r5, r4, r3
   e1c6a:	f7fe ff7c 	bl	e0b66 <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
   e1c6e:	3401      	adds	r4, #1
   e1c70:	9a02      	ldr	r2, [sp, #8]
   e1c72:	e7f4      	b.n	e1c5e <mbedtls_mpi_exp_mod+0x3b6>
    mbedtls_mpi_uint z = 1;
   e1c74:	2201      	movs	r2, #1
   e1c76:	a907      	add	r1, sp, #28
    U.n = U.s = (int) z;
   e1c78:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
    mbedtls_mpi_uint z = 1;
   e1c7c:	9207      	str	r2, [sp, #28]
    U.p = &z;
   e1c7e:	9113      	str	r1, [sp, #76]	; 0x4c
    return( mpi_montmul( A, &U, N, mm, T ) );
   e1c80:	4622      	mov	r2, r4
   e1c82:	f8cd 8000 	str.w	r8, [sp]
   e1c86:	a911      	add	r1, sp, #68	; 0x44
   e1c88:	4628      	mov	r0, r5
   e1c8a:	f7ff f9de 	bl	e104a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
   e1c8e:	4602      	mov	r2, r0
   e1c90:	2800      	cmp	r0, #0
   e1c92:	d1dd      	bne.n	e1c50 <mbedtls_mpi_exp_mod+0x3a8>
    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
   e1c94:	9b03      	ldr	r3, [sp, #12]
   e1c96:	3301      	adds	r3, #1
   e1c98:	d1da      	bne.n	e1c50 <mbedtls_mpi_exp_mod+0x3a8>
   e1c9a:	9b02      	ldr	r3, [sp, #8]
   e1c9c:	685b      	ldr	r3, [r3, #4]
   e1c9e:	2b00      	cmp	r3, #0
   e1ca0:	d0d6      	beq.n	e1c50 <mbedtls_mpi_exp_mod+0x3a8>
   e1ca2:	9b02      	ldr	r3, [sp, #8]
   e1ca4:	689b      	ldr	r3, [r3, #8]
   e1ca6:	681b      	ldr	r3, [r3, #0]
   e1ca8:	07db      	lsls	r3, r3, #31
   e1caa:	d5d1      	bpl.n	e1c50 <mbedtls_mpi_exp_mod+0x3a8>
        X->s = -1;
   e1cac:	9b03      	ldr	r3, [sp, #12]
   e1cae:	602b      	str	r3, [r5, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
   e1cb0:	462a      	mov	r2, r5
   e1cb2:	4621      	mov	r1, r4
   e1cb4:	4628      	mov	r0, r5
   e1cb6:	f7ff fb1b 	bl	e12f0 <mbedtls_mpi_add_mpi>
   e1cba:	4602      	mov	r2, r0
   e1cbc:	e7c8      	b.n	e1c50 <mbedtls_mpi_exp_mod+0x3a8>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
   e1cbe:	a817      	add	r0, sp, #92	; 0x5c
   e1cc0:	f7fe ff51 	bl	e0b66 <mbedtls_mpi_free>
   e1cc4:	a80b      	add	r0, sp, #44	; 0x2c
   e1cc6:	f7fe ff4e 	bl	e0b66 <mbedtls_mpi_free>
   e1cca:	a80e      	add	r0, sp, #56	; 0x38
   e1ccc:	f7fe ff4b 	bl	e0b66 <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
   e1cd0:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
   e1cd4:	9a02      	ldr	r2, [sp, #8]
   e1cd6:	b10b      	cbz	r3, e1cdc <mbedtls_mpi_exp_mod+0x434>
   e1cd8:	689b      	ldr	r3, [r3, #8]
   e1cda:	b923      	cbnz	r3, e1ce6 <mbedtls_mpi_exp_mod+0x43e>
        mbedtls_mpi_free( &RR );
   e1cdc:	a808      	add	r0, sp, #32
   e1cde:	9202      	str	r2, [sp, #8]
   e1ce0:	f7fe ff41 	bl	e0b66 <mbedtls_mpi_free>
   e1ce4:	9a02      	ldr	r2, [sp, #8]

    return( ret );
}
   e1ce6:	4610      	mov	r0, r2
   e1ce8:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
   e1cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   e1cf0:	f06f 0203 	mvn.w	r2, #3
   e1cf4:	e7f7      	b.n	e1ce6 <mbedtls_mpi_exp_mod+0x43e>

000e1cf6 <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
   e1cf6:	b5f0      	push	{r4, r5, r6, r7, lr}
   e1cf8:	b08b      	sub	sp, #44	; 0x2c
    X->n = 0;
   e1cfa:	2300      	movs	r3, #0
   e1cfc:	2701      	movs	r7, #1
{
   e1cfe:	4605      	mov	r5, r0
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
   e1d00:	a804      	add	r0, sp, #16
    X->n = 0;
   e1d02:	e9cd 7301 	strd	r7, r3, [sp, #4]
    X->s = 1;
   e1d06:	e9cd 3703 	strd	r3, r7, [sp, #12]
    X->p = NULL;
   e1d0a:	e9cd 3305 	strd	r3, r3, [sp, #20]
    X->n = 0;
   e1d0e:	e9cd 7307 	strd	r7, r3, [sp, #28]
{
   e1d12:	4616      	mov	r6, r2
    X->p = NULL;
   e1d14:	9309      	str	r3, [sp, #36]	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
   e1d16:	f7fe ff9d 	bl	e0c54 <mbedtls_mpi_copy>
   e1d1a:	4604      	mov	r4, r0
   e1d1c:	2800      	cmp	r0, #0
   e1d1e:	d14b      	bne.n	e1db8 <mbedtls_mpi_gcd+0xc2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
   e1d20:	4631      	mov	r1, r6
   e1d22:	a807      	add	r0, sp, #28
   e1d24:	f7fe ff96 	bl	e0c54 <mbedtls_mpi_copy>
   e1d28:	4604      	mov	r4, r0
   e1d2a:	2800      	cmp	r0, #0
   e1d2c:	d144      	bne.n	e1db8 <mbedtls_mpi_gcd+0xc2>

    lz = mbedtls_mpi_lsb( &TA );
   e1d2e:	a804      	add	r0, sp, #16
   e1d30:	f7ff f81b 	bl	e0d6a <mbedtls_mpi_lsb>
   e1d34:	4606      	mov	r6, r0
    lzt = mbedtls_mpi_lsb( &TB );
   e1d36:	a807      	add	r0, sp, #28
   e1d38:	f7ff f817 	bl	e0d6a <mbedtls_mpi_lsb>

    if( lzt < lz )
   e1d3c:	4286      	cmp	r6, r0
   e1d3e:	bf28      	it	cs
   e1d40:	4606      	movcs	r6, r0
        lz = lzt;

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
   e1d42:	4631      	mov	r1, r6
   e1d44:	a804      	add	r0, sp, #16
   e1d46:	f7ff f90d 	bl	e0f64 <mbedtls_mpi_shift_r>
   e1d4a:	4604      	mov	r4, r0
   e1d4c:	2800      	cmp	r0, #0
   e1d4e:	d133      	bne.n	e1db8 <mbedtls_mpi_gcd+0xc2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
   e1d50:	4631      	mov	r1, r6
   e1d52:	a807      	add	r0, sp, #28
   e1d54:	f7ff f906 	bl	e0f64 <mbedtls_mpi_shift_r>
   e1d58:	4604      	mov	r4, r0
   e1d5a:	bb68      	cbnz	r0, e1db8 <mbedtls_mpi_gcd+0xc2>

    TA.s = TB.s = 1;
   e1d5c:	9707      	str	r7, [sp, #28]
   e1d5e:	9704      	str	r7, [sp, #16]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
   e1d60:	2100      	movs	r1, #0
   e1d62:	a804      	add	r0, sp, #16
   e1d64:	f7ff fa19 	bl	e119a <mbedtls_mpi_cmp_int>
   e1d68:	2800      	cmp	r0, #0
   e1d6a:	d03c      	beq.n	e1de6 <mbedtls_mpi_gcd+0xf0>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
   e1d6c:	a804      	add	r0, sp, #16
   e1d6e:	f7fe fffc 	bl	e0d6a <mbedtls_mpi_lsb>
   e1d72:	4601      	mov	r1, r0
   e1d74:	a804      	add	r0, sp, #16
   e1d76:	f7ff f8f5 	bl	e0f64 <mbedtls_mpi_shift_r>
   e1d7a:	4604      	mov	r4, r0
   e1d7c:	b9e0      	cbnz	r0, e1db8 <mbedtls_mpi_gcd+0xc2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
   e1d7e:	a807      	add	r0, sp, #28
   e1d80:	f7fe fff3 	bl	e0d6a <mbedtls_mpi_lsb>
   e1d84:	4601      	mov	r1, r0
   e1d86:	a807      	add	r0, sp, #28
   e1d88:	f7ff f8ec 	bl	e0f64 <mbedtls_mpi_shift_r>
   e1d8c:	4604      	mov	r4, r0
   e1d8e:	b998      	cbnz	r0, e1db8 <mbedtls_mpi_gcd+0xc2>

        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
   e1d90:	a907      	add	r1, sp, #28
   e1d92:	a804      	add	r0, sp, #16
   e1d94:	f7ff f9c0 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   e1d98:	2800      	cmp	r0, #0
   e1d9a:	db19      	blt.n	e1dd0 <mbedtls_mpi_gcd+0xda>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
   e1d9c:	a904      	add	r1, sp, #16
   e1d9e:	aa07      	add	r2, sp, #28
   e1da0:	4608      	mov	r0, r1
   e1da2:	f7ff fa69 	bl	e1278 <mbedtls_mpi_sub_abs>
   e1da6:	4604      	mov	r4, r0
   e1da8:	b930      	cbnz	r0, e1db8 <mbedtls_mpi_gcd+0xc2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
   e1daa:	2101      	movs	r1, #1
   e1dac:	a804      	add	r0, sp, #16
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
   e1dae:	f7ff f8d9 	bl	e0f64 <mbedtls_mpi_shift_r>
   e1db2:	4604      	mov	r4, r0
   e1db4:	2800      	cmp	r0, #0
   e1db6:	d0d3      	beq.n	e1d60 <mbedtls_mpi_gcd+0x6a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );

cleanup:

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
   e1db8:	a801      	add	r0, sp, #4
   e1dba:	f7fe fed4 	bl	e0b66 <mbedtls_mpi_free>
   e1dbe:	a804      	add	r0, sp, #16
   e1dc0:	f7fe fed1 	bl	e0b66 <mbedtls_mpi_free>
   e1dc4:	a807      	add	r0, sp, #28
   e1dc6:	f7fe fece 	bl	e0b66 <mbedtls_mpi_free>

    return( ret );
}
   e1dca:	4620      	mov	r0, r4
   e1dcc:	b00b      	add	sp, #44	; 0x2c
   e1dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
   e1dd0:	a907      	add	r1, sp, #28
   e1dd2:	aa04      	add	r2, sp, #16
   e1dd4:	4608      	mov	r0, r1
   e1dd6:	f7ff fa4f 	bl	e1278 <mbedtls_mpi_sub_abs>
   e1dda:	4604      	mov	r4, r0
   e1ddc:	2800      	cmp	r0, #0
   e1dde:	d1eb      	bne.n	e1db8 <mbedtls_mpi_gcd+0xc2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
   e1de0:	2101      	movs	r1, #1
   e1de2:	a807      	add	r0, sp, #28
   e1de4:	e7e3      	b.n	e1dae <mbedtls_mpi_gcd+0xb8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
   e1de6:	4631      	mov	r1, r6
   e1de8:	a807      	add	r0, sp, #28
   e1dea:	f7ff f868 	bl	e0ebe <mbedtls_mpi_shift_l>
   e1dee:	4604      	mov	r4, r0
   e1df0:	2800      	cmp	r0, #0
   e1df2:	d1e1      	bne.n	e1db8 <mbedtls_mpi_gcd+0xc2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
   e1df4:	a907      	add	r1, sp, #28
   e1df6:	4628      	mov	r0, r5
   e1df8:	f7fe ff2c 	bl	e0c54 <mbedtls_mpi_copy>
   e1dfc:	4604      	mov	r4, r0
cleanup:
   e1dfe:	e7db      	b.n	e1db8 <mbedtls_mpi_gcd+0xc2>

000e1e00 <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
   e1e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int ret;
    size_t const limbs = CHARS_TO_LIMBS( size );
   e1e04:	f011 0503 	ands.w	r5, r1, #3
   e1e08:	bf18      	it	ne
   e1e0a:	2501      	movne	r5, #1
{
   e1e0c:	4699      	mov	r9, r3

    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
   e1e0e:	6843      	ldr	r3, [r0, #4]
    size_t const limbs = CHARS_TO_LIMBS( size );
   e1e10:	eb05 0591 	add.w	r5, r5, r1, lsr #2
    if( X->n != limbs )
   e1e14:	42ab      	cmp	r3, r5
{
   e1e16:	4604      	mov	r4, r0
   e1e18:	460f      	mov	r7, r1
   e1e1a:	4690      	mov	r8, r2
    if( X->n != limbs )
   e1e1c:	d108      	bne.n	e1e30 <mbedtls_mpi_fill_random+0x30>
    {
        mbedtls_mpi_free( X );
        mbedtls_mpi_init( X );
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
   e1e1e:	2100      	movs	r1, #0
   e1e20:	4620      	mov	r0, r4
   e1e22:	f7fe ff75 	bl	e0d10 <mbedtls_mpi_lset>
   e1e26:	4606      	mov	r6, r0
   e1e28:	b188      	cbz	r0, e1e4e <mbedtls_mpi_fill_random+0x4e>

    mpi_bigendian_to_host( X->p, limbs );

cleanup:
    return( ret );
}
   e1e2a:	4630      	mov	r0, r6
   e1e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        mbedtls_mpi_free( X );
   e1e30:	f7fe fe99 	bl	e0b66 <mbedtls_mpi_free>
    X->n = 0;
   e1e34:	2300      	movs	r3, #0
   e1e36:	2201      	movs	r2, #1
   e1e38:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
   e1e3c:	60a3      	str	r3, [r4, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
   e1e3e:	4629      	mov	r1, r5
   e1e40:	4620      	mov	r0, r4
   e1e42:	f7fe fea2 	bl	e0b8a <mbedtls_mpi_grow>
   e1e46:	4606      	mov	r6, r0
   e1e48:	2800      	cmp	r0, #0
   e1e4a:	d0e8      	beq.n	e1e1e <mbedtls_mpi_fill_random+0x1e>
   e1e4c:	e7ed      	b.n	e1e2a <mbedtls_mpi_fill_random+0x2a>
    f_rng( p_rng, Xp + overhead, size );
   e1e4e:	68a1      	ldr	r1, [r4, #8]
    size_t const overhead = ( limbs * ciL ) - size;
   e1e50:	ebc7 0385 	rsb	r3, r7, r5, lsl #2
    f_rng( p_rng, Xp + overhead, size );
   e1e54:	463a      	mov	r2, r7
   e1e56:	4419      	add	r1, r3
   e1e58:	4648      	mov	r0, r9
   e1e5a:	47c0      	blx	r8
    if( limbs == 0 )
   e1e5c:	2d00      	cmp	r5, #0
   e1e5e:	d0e4      	beq.n	e1e2a <mbedtls_mpi_fill_random+0x2a>
   e1e60:	68a0      	ldr	r0, [r4, #8]
   e1e62:	4629      	mov	r1, r5
   e1e64:	f7fe fe68 	bl	e0b38 <_ZL21mpi_bigendian_to_hostPmj.part.0>
    return( ret );
   e1e68:	e7df      	b.n	e1e2a <mbedtls_mpi_fill_random+0x2a>

000e1e6a <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
   e1e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e1e6e:	4606      	mov	r6, r0
   e1e70:	b09c      	sub	sp, #112	; 0x70
   e1e72:	4688      	mov	r8, r1
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
   e1e74:	4610      	mov	r0, r2
   e1e76:	2101      	movs	r1, #1
{
   e1e78:	4615      	mov	r5, r2
    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
   e1e7a:	f7ff f98e 	bl	e119a <mbedtls_mpi_cmp_int>
   e1e7e:	2800      	cmp	r0, #0
   e1e80:	f340 8144 	ble.w	e210c <mbedtls_mpi_inv_mod+0x2a2>
    X->n = 0;
   e1e84:	2300      	movs	r3, #0
   e1e86:	2701      	movs	r7, #1

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
   e1e88:	462a      	mov	r2, r5
   e1e8a:	4641      	mov	r1, r8
   e1e8c:	a801      	add	r0, sp, #4
    X->n = 0;
   e1e8e:	e9cd 7304 	strd	r7, r3, [sp, #16]
    X->s = 1;
   e1e92:	e9cd 3706 	strd	r3, r7, [sp, #24]
    X->p = NULL;
   e1e96:	e9cd 3308 	strd	r3, r3, [sp, #32]
    X->n = 0;
   e1e9a:	e9cd 730a 	strd	r7, r3, [sp, #40]	; 0x28
    X->s = 1;
   e1e9e:	e9cd 370c 	strd	r3, r7, [sp, #48]	; 0x30
    X->p = NULL;
   e1ea2:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
    X->n = 0;
   e1ea6:	e9cd 7301 	strd	r7, r3, [sp, #4]
   e1eaa:	e9cd 7310 	strd	r7, r3, [sp, #64]	; 0x40
    X->s = 1;
   e1eae:	e9cd 3712 	strd	r3, r7, [sp, #72]	; 0x48
    X->p = NULL;
   e1eb2:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
    X->n = 0;
   e1eb6:	e9cd 7316 	strd	r7, r3, [sp, #88]	; 0x58
    X->s = 1;
   e1eba:	e9cd 3718 	strd	r3, r7, [sp, #96]	; 0x60
    X->p = NULL;
   e1ebe:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
   e1ec2:	9303      	str	r3, [sp, #12]
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
   e1ec4:	f7ff ff17 	bl	e1cf6 <mbedtls_mpi_gcd>
   e1ec8:	4604      	mov	r4, r0
   e1eca:	2800      	cmp	r0, #0
   e1ecc:	d154      	bne.n	e1f78 <mbedtls_mpi_inv_mod+0x10e>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
   e1ece:	4639      	mov	r1, r7
   e1ed0:	a801      	add	r0, sp, #4
   e1ed2:	f7ff f962 	bl	e119a <mbedtls_mpi_cmp_int>
   e1ed6:	2800      	cmp	r0, #0
   e1ed8:	f040 8115 	bne.w	e2106 <mbedtls_mpi_inv_mod+0x29c>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
   e1edc:	462a      	mov	r2, r5
   e1ede:	4641      	mov	r1, r8
   e1ee0:	a804      	add	r0, sp, #16
   e1ee2:	f7ff fcae 	bl	e1842 <mbedtls_mpi_mod_mpi>
   e1ee6:	4604      	mov	r4, r0
   e1ee8:	2800      	cmp	r0, #0
   e1eea:	d145      	bne.n	e1f78 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
   e1eec:	a904      	add	r1, sp, #16
   e1eee:	a807      	add	r0, sp, #28
   e1ef0:	f7fe feb0 	bl	e0c54 <mbedtls_mpi_copy>
   e1ef4:	4604      	mov	r4, r0
   e1ef6:	2800      	cmp	r0, #0
   e1ef8:	d13e      	bne.n	e1f78 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
   e1efa:	4629      	mov	r1, r5
   e1efc:	a810      	add	r0, sp, #64	; 0x40
   e1efe:	f7fe fea9 	bl	e0c54 <mbedtls_mpi_copy>
   e1f02:	4604      	mov	r4, r0
   e1f04:	2800      	cmp	r0, #0
   e1f06:	d137      	bne.n	e1f78 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
   e1f08:	4629      	mov	r1, r5
   e1f0a:	a813      	add	r0, sp, #76	; 0x4c
   e1f0c:	f7fe fea2 	bl	e0c54 <mbedtls_mpi_copy>
   e1f10:	4604      	mov	r4, r0
   e1f12:	2800      	cmp	r0, #0
   e1f14:	d130      	bne.n	e1f78 <mbedtls_mpi_inv_mod+0x10e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
   e1f16:	4639      	mov	r1, r7
   e1f18:	a80a      	add	r0, sp, #40	; 0x28
   e1f1a:	f7fe fef9 	bl	e0d10 <mbedtls_mpi_lset>
   e1f1e:	4604      	mov	r4, r0
   e1f20:	bb50      	cbnz	r0, e1f78 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
   e1f22:	4601      	mov	r1, r0
   e1f24:	a80d      	add	r0, sp, #52	; 0x34
   e1f26:	f7fe fef3 	bl	e0d10 <mbedtls_mpi_lset>
   e1f2a:	4604      	mov	r4, r0
   e1f2c:	bb20      	cbnz	r0, e1f78 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
   e1f2e:	4601      	mov	r1, r0
   e1f30:	a816      	add	r0, sp, #88	; 0x58
   e1f32:	f7fe feed 	bl	e0d10 <mbedtls_mpi_lset>
   e1f36:	4604      	mov	r4, r0
   e1f38:	b9f0      	cbnz	r0, e1f78 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
   e1f3a:	4639      	mov	r1, r7
   e1f3c:	a819      	add	r0, sp, #100	; 0x64
   e1f3e:	f7fe fee7 	bl	e0d10 <mbedtls_mpi_lset>
   e1f42:	4604      	mov	r4, r0
   e1f44:	b9c0      	cbnz	r0, e1f78 <mbedtls_mpi_inv_mod+0x10e>

    do
    {
        while( ( TU.p[0] & 1 ) == 0 )
   e1f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e1f48:	681b      	ldr	r3, [r3, #0]
   e1f4a:	07df      	lsls	r7, r3, #31
   e1f4c:	d449      	bmi.n	e1fe2 <mbedtls_mpi_inv_mod+0x178>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
   e1f4e:	2101      	movs	r1, #1
   e1f50:	a807      	add	r0, sp, #28
   e1f52:	f7ff f807 	bl	e0f64 <mbedtls_mpi_shift_r>
   e1f56:	4604      	mov	r4, r0
   e1f58:	b970      	cbnz	r0, e1f78 <mbedtls_mpi_inv_mod+0x10e>

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
   e1f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e1f5c:	681b      	ldr	r3, [r3, #0]
   e1f5e:	07dc      	lsls	r4, r3, #31
   e1f60:	d429      	bmi.n	e1fb6 <mbedtls_mpi_inv_mod+0x14c>
   e1f62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e1f64:	681b      	ldr	r3, [r3, #0]
   e1f66:	07d8      	lsls	r0, r3, #31
   e1f68:	d425      	bmi.n	e1fb6 <mbedtls_mpi_inv_mod+0x14c>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
   e1f6a:	2101      	movs	r1, #1
   e1f6c:	a80a      	add	r0, sp, #40	; 0x28
   e1f6e:	f7fe fff9 	bl	e0f64 <mbedtls_mpi_shift_r>
   e1f72:	4604      	mov	r4, r0
   e1f74:	2800      	cmp	r0, #0
   e1f76:	d02f      	beq.n	e1fd8 <mbedtls_mpi_inv_mod+0x16e>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );

cleanup:

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
   e1f78:	a804      	add	r0, sp, #16
   e1f7a:	f7fe fdf4 	bl	e0b66 <mbedtls_mpi_free>
   e1f7e:	a807      	add	r0, sp, #28
   e1f80:	f7fe fdf1 	bl	e0b66 <mbedtls_mpi_free>
   e1f84:	a80a      	add	r0, sp, #40	; 0x28
   e1f86:	f7fe fdee 	bl	e0b66 <mbedtls_mpi_free>
   e1f8a:	a80d      	add	r0, sp, #52	; 0x34
   e1f8c:	f7fe fdeb 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
   e1f90:	a801      	add	r0, sp, #4
   e1f92:	f7fe fde8 	bl	e0b66 <mbedtls_mpi_free>
   e1f96:	a810      	add	r0, sp, #64	; 0x40
   e1f98:	f7fe fde5 	bl	e0b66 <mbedtls_mpi_free>
   e1f9c:	a813      	add	r0, sp, #76	; 0x4c
   e1f9e:	f7fe fde2 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
   e1fa2:	a816      	add	r0, sp, #88	; 0x58
   e1fa4:	f7fe fddf 	bl	e0b66 <mbedtls_mpi_free>
   e1fa8:	a819      	add	r0, sp, #100	; 0x64
   e1faa:	f7fe fddc 	bl	e0b66 <mbedtls_mpi_free>

    return( ret );
}
   e1fae:	4620      	mov	r0, r4
   e1fb0:	b01c      	add	sp, #112	; 0x70
   e1fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
   e1fb6:	a90a      	add	r1, sp, #40	; 0x28
   e1fb8:	aa10      	add	r2, sp, #64	; 0x40
   e1fba:	4608      	mov	r0, r1
   e1fbc:	f7ff f998 	bl	e12f0 <mbedtls_mpi_add_mpi>
   e1fc0:	4604      	mov	r4, r0
   e1fc2:	2800      	cmp	r0, #0
   e1fc4:	d1d8      	bne.n	e1f78 <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
   e1fc6:	a90d      	add	r1, sp, #52	; 0x34
   e1fc8:	aa04      	add	r2, sp, #16
   e1fca:	4608      	mov	r0, r1
   e1fcc:	f7ff f9b2 	bl	e1334 <mbedtls_mpi_sub_mpi>
   e1fd0:	4604      	mov	r4, r0
   e1fd2:	2800      	cmp	r0, #0
   e1fd4:	d0c9      	beq.n	e1f6a <mbedtls_mpi_inv_mod+0x100>
   e1fd6:	e7cf      	b.n	e1f78 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
   e1fd8:	2101      	movs	r1, #1
   e1fda:	a80d      	add	r0, sp, #52	; 0x34
   e1fdc:	f7fe ffc2 	bl	e0f64 <mbedtls_mpi_shift_r>
   e1fe0:	e7af      	b.n	e1f42 <mbedtls_mpi_inv_mod+0xd8>
        while( ( TV.p[0] & 1 ) == 0 )
   e1fe2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e1fe4:	681b      	ldr	r3, [r3, #0]
   e1fe6:	07d9      	lsls	r1, r3, #31
   e1fe8:	d42e      	bmi.n	e2048 <mbedtls_mpi_inv_mod+0x1de>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
   e1fea:	2101      	movs	r1, #1
   e1fec:	a813      	add	r0, sp, #76	; 0x4c
   e1fee:	f7fe ffb9 	bl	e0f64 <mbedtls_mpi_shift_r>
   e1ff2:	4604      	mov	r4, r0
   e1ff4:	2800      	cmp	r0, #0
   e1ff6:	d1bf      	bne.n	e1f78 <mbedtls_mpi_inv_mod+0x10e>
            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
   e1ff8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   e1ffa:	681b      	ldr	r3, [r3, #0]
   e1ffc:	07da      	lsls	r2, r3, #31
   e1ffe:	d412      	bmi.n	e2026 <mbedtls_mpi_inv_mod+0x1bc>
   e2000:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e2002:	681b      	ldr	r3, [r3, #0]
   e2004:	07db      	lsls	r3, r3, #31
   e2006:	d40e      	bmi.n	e2026 <mbedtls_mpi_inv_mod+0x1bc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
   e2008:	2101      	movs	r1, #1
   e200a:	a816      	add	r0, sp, #88	; 0x58
   e200c:	f7fe ffaa 	bl	e0f64 <mbedtls_mpi_shift_r>
   e2010:	4604      	mov	r4, r0
   e2012:	2800      	cmp	r0, #0
   e2014:	d1b0      	bne.n	e1f78 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
   e2016:	2101      	movs	r1, #1
   e2018:	a819      	add	r0, sp, #100	; 0x64
   e201a:	f7fe ffa3 	bl	e0f64 <mbedtls_mpi_shift_r>
   e201e:	4604      	mov	r4, r0
   e2020:	2800      	cmp	r0, #0
   e2022:	d0de      	beq.n	e1fe2 <mbedtls_mpi_inv_mod+0x178>
   e2024:	e7a8      	b.n	e1f78 <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
   e2026:	a916      	add	r1, sp, #88	; 0x58
   e2028:	aa10      	add	r2, sp, #64	; 0x40
   e202a:	4608      	mov	r0, r1
   e202c:	f7ff f960 	bl	e12f0 <mbedtls_mpi_add_mpi>
   e2030:	4604      	mov	r4, r0
   e2032:	2800      	cmp	r0, #0
   e2034:	d1a0      	bne.n	e1f78 <mbedtls_mpi_inv_mod+0x10e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
   e2036:	a919      	add	r1, sp, #100	; 0x64
   e2038:	aa04      	add	r2, sp, #16
   e203a:	4608      	mov	r0, r1
   e203c:	f7ff f97a 	bl	e1334 <mbedtls_mpi_sub_mpi>
   e2040:	4604      	mov	r4, r0
   e2042:	2800      	cmp	r0, #0
   e2044:	d0e0      	beq.n	e2008 <mbedtls_mpi_inv_mod+0x19e>
   e2046:	e797      	b.n	e1f78 <mbedtls_mpi_inv_mod+0x10e>
        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
   e2048:	a913      	add	r1, sp, #76	; 0x4c
   e204a:	a807      	add	r0, sp, #28
   e204c:	f7ff f864 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   e2050:	2800      	cmp	r0, #0
   e2052:	db2e      	blt.n	e20b2 <mbedtls_mpi_inv_mod+0x248>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
   e2054:	a907      	add	r1, sp, #28
   e2056:	aa13      	add	r2, sp, #76	; 0x4c
   e2058:	4608      	mov	r0, r1
   e205a:	f7ff f96b 	bl	e1334 <mbedtls_mpi_sub_mpi>
   e205e:	4604      	mov	r4, r0
   e2060:	2800      	cmp	r0, #0
   e2062:	d189      	bne.n	e1f78 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
   e2064:	a90a      	add	r1, sp, #40	; 0x28
   e2066:	aa16      	add	r2, sp, #88	; 0x58
   e2068:	4608      	mov	r0, r1
   e206a:	f7ff f963 	bl	e1334 <mbedtls_mpi_sub_mpi>
   e206e:	4604      	mov	r4, r0
   e2070:	2800      	cmp	r0, #0
   e2072:	d181      	bne.n	e1f78 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
   e2074:	aa19      	add	r2, sp, #100	; 0x64
   e2076:	a90d      	add	r1, sp, #52	; 0x34
   e2078:	4608      	mov	r0, r1
   e207a:	f7ff f95b 	bl	e1334 <mbedtls_mpi_sub_mpi>
   e207e:	4604      	mov	r4, r0
   e2080:	2800      	cmp	r0, #0
   e2082:	f47f af79 	bne.w	e1f78 <mbedtls_mpi_inv_mod+0x10e>
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
   e2086:	2100      	movs	r1, #0
   e2088:	a807      	add	r0, sp, #28
   e208a:	f7ff f886 	bl	e119a <mbedtls_mpi_cmp_int>
   e208e:	2800      	cmp	r0, #0
   e2090:	f47f af59 	bne.w	e1f46 <mbedtls_mpi_inv_mod+0xdc>
    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
   e2094:	2100      	movs	r1, #0
   e2096:	a816      	add	r0, sp, #88	; 0x58
   e2098:	f7ff f87f 	bl	e119a <mbedtls_mpi_cmp_int>
   e209c:	2800      	cmp	r0, #0
   e209e:	da1d      	bge.n	e20dc <mbedtls_mpi_inv_mod+0x272>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
   e20a0:	a916      	add	r1, sp, #88	; 0x58
   e20a2:	462a      	mov	r2, r5
   e20a4:	4608      	mov	r0, r1
   e20a6:	f7ff f923 	bl	e12f0 <mbedtls_mpi_add_mpi>
   e20aa:	4604      	mov	r4, r0
   e20ac:	2800      	cmp	r0, #0
   e20ae:	d0f1      	beq.n	e2094 <mbedtls_mpi_inv_mod+0x22a>
   e20b0:	e762      	b.n	e1f78 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
   e20b2:	a913      	add	r1, sp, #76	; 0x4c
   e20b4:	aa07      	add	r2, sp, #28
   e20b6:	4608      	mov	r0, r1
   e20b8:	f7ff f93c 	bl	e1334 <mbedtls_mpi_sub_mpi>
   e20bc:	4604      	mov	r4, r0
   e20be:	2800      	cmp	r0, #0
   e20c0:	f47f af5a 	bne.w	e1f78 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
   e20c4:	a916      	add	r1, sp, #88	; 0x58
   e20c6:	aa0a      	add	r2, sp, #40	; 0x28
   e20c8:	4608      	mov	r0, r1
   e20ca:	f7ff f933 	bl	e1334 <mbedtls_mpi_sub_mpi>
   e20ce:	4604      	mov	r4, r0
   e20d0:	2800      	cmp	r0, #0
   e20d2:	f47f af51 	bne.w	e1f78 <mbedtls_mpi_inv_mod+0x10e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
   e20d6:	aa0d      	add	r2, sp, #52	; 0x34
   e20d8:	a919      	add	r1, sp, #100	; 0x64
   e20da:	e7cd      	b.n	e2078 <mbedtls_mpi_inv_mod+0x20e>
    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
   e20dc:	4629      	mov	r1, r5
   e20de:	a816      	add	r0, sp, #88	; 0x58
   e20e0:	f7ff f81a 	bl	e1118 <mbedtls_mpi_cmp_mpi>
   e20e4:	2800      	cmp	r0, #0
   e20e6:	db08      	blt.n	e20fa <mbedtls_mpi_inv_mod+0x290>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
   e20e8:	a916      	add	r1, sp, #88	; 0x58
   e20ea:	462a      	mov	r2, r5
   e20ec:	4608      	mov	r0, r1
   e20ee:	f7ff f921 	bl	e1334 <mbedtls_mpi_sub_mpi>
   e20f2:	4604      	mov	r4, r0
   e20f4:	2800      	cmp	r0, #0
   e20f6:	d0f1      	beq.n	e20dc <mbedtls_mpi_inv_mod+0x272>
   e20f8:	e73e      	b.n	e1f78 <mbedtls_mpi_inv_mod+0x10e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
   e20fa:	a916      	add	r1, sp, #88	; 0x58
   e20fc:	4630      	mov	r0, r6
   e20fe:	f7fe fda9 	bl	e0c54 <mbedtls_mpi_copy>
   e2102:	4604      	mov	r4, r0
cleanup:
   e2104:	e738      	b.n	e1f78 <mbedtls_mpi_inv_mod+0x10e>
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
   e2106:	f06f 040d 	mvn.w	r4, #13
   e210a:	e735      	b.n	e1f78 <mbedtls_mpi_inv_mod+0x10e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   e210c:	f06f 0403 	mvn.w	r4, #3
   e2110:	e74d      	b.n	e1fae <mbedtls_mpi_inv_mod+0x144>
	...

000e2114 <_ZL14aes_gen_tablesv>:
#define MUL(x,y) ( ( (x) && (y) ) ? pow[(log[(x)]+log[(y)]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
   e2114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2118:	f6ad 0d24 	subw	sp, sp, #2084	; 0x824
   e211c:	ac08      	add	r4, sp, #32
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
   e211e:	2301      	movs	r3, #1
   e2120:	2200      	movs	r2, #0
   e2122:	4626      	mov	r6, r4
    {
        pow[i] = x;
        log[x] = i;
   e2124:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
        x = ( x ^ XTIME( x ) ) & 0xFF;
   e2128:	f013 0080 	ands.w	r0, r3, #128	; 0x80
        log[x] = i;
   e212c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
   e2130:	bf18      	it	ne
   e2132:	201b      	movne	r0, #27
        pow[i] = x;
   e2134:	f844 3b04 	str.w	r3, [r4], #4
    for( i = 0, x = 1; i < 256; i++ )
   e2138:	3201      	adds	r2, #1
        x = ( x ^ XTIME( x ) ) & 0xFF;
   e213a:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
   e213e:	4043      	eors	r3, r0
    for( i = 0, x = 1; i < 256; i++ )
   e2140:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
        x = ( x ^ XTIME( x ) ) & 0xFF;
   e2144:	b2db      	uxtb	r3, r3
    for( i = 0, x = 1; i < 256; i++ )
   e2146:	d1ef      	bne.n	e2128 <_ZL14aes_gen_tablesv+0x14>
   e2148:	4c6d      	ldr	r4, [pc, #436]	; (e2300 <_ZL14aes_gen_tablesv+0x1ec>)
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
   e214a:	2301      	movs	r3, #1
   e214c:	2200      	movs	r2, #0
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
   e214e:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   e2152:	bf18      	it	ne
   e2154:	201b      	movne	r0, #27
    for( i = 0, x = 1; i < 10; i++ )
   e2156:	3201      	adds	r2, #1
        RCON[i] = (uint32_t) x;
   e2158:	f844 3b04 	str.w	r3, [r4], #4
    for( i = 0, x = 1; i < 10; i++ )
   e215c:	2a0a      	cmp	r2, #10
        x = XTIME( x ) & 0xFF;
   e215e:	ea80 0343 	eor.w	r3, r0, r3, lsl #1
   e2162:	b2db      	uxtb	r3, r3
    for( i = 0, x = 1; i < 10; i++ )
   e2164:	d1f3      	bne.n	e214e <_ZL14aes_gen_tablesv+0x3a>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
   e2166:	4d67      	ldr	r5, [pc, #412]	; (e2304 <_ZL14aes_gen_tablesv+0x1f0>)
    RSb[0x63] = 0x00;
   e2168:	4c67      	ldr	r4, [pc, #412]	; (e2308 <_ZL14aes_gen_tablesv+0x1f4>)
    FSb[0x00] = 0x63;
   e216a:	2363      	movs	r3, #99	; 0x63
   e216c:	702b      	strb	r3, [r5, #0]
    RSb[0x63] = 0x00;
   e216e:	2300      	movs	r3, #0
   e2170:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63

    for( i = 1; i < 256; i++ )
   e2174:	2001      	movs	r0, #1
    {
        x = pow[255 - log[i]];
   e2176:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
   e217a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
   e217e:	f856 8023 	ldr.w	r8, [r6, r3, lsl #2]

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
   e2182:	ea4f 12e8 	mov.w	r2, r8, asr #7
   e2186:	ea42 0248 	orr.w	r2, r2, r8, lsl #1
   e218a:	fa5f fe82 	uxtb.w	lr, r2
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
   e218e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
   e2192:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
   e2196:	fa5f fc82 	uxtb.w	ip, r2
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
   e219a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
   e219e:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
   e21a2:	b2d7      	uxtb	r7, r2
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
   e21a4:	f3c2 12c0 	ubfx	r2, r2, #7, #1
   e21a8:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
   e21ac:	b2d3      	uxtb	r3, r2
   e21ae:	ea83 0308 	eor.w	r3, r3, r8
   e21b2:	ea83 030e 	eor.w	r3, r3, lr
   e21b6:	ea83 030c 	eor.w	r3, r3, ip
   e21ba:	407b      	eors	r3, r7
        x ^= y ^ 0x63;
   e21bc:	f083 0363 	eor.w	r3, r3, #99	; 0x63

        FSb[i] = (unsigned char) x;
   e21c0:	542b      	strb	r3, [r5, r0]
        RSb[x] = (unsigned char) i;
   e21c2:	54e0      	strb	r0, [r4, r3]
    for( i = 1; i < 256; i++ )
   e21c4:	3001      	adds	r0, #1
   e21c6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   e21ca:	d1d4      	bne.n	e2176 <_ZL14aes_gen_tablesv+0x62>
        FT3[i] = ROTL8( FT2[i] );
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
   e21cc:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   e21ce:	9303      	str	r3, [sp, #12]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
   e21d0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   e21d2:	9304      	str	r3, [sp, #16]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
   e21d4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   e21d6:	9306      	str	r3, [sp, #24]
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
   e21d8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   e21da:	9307      	str	r3, [sp, #28]
   e21dc:	4b4b      	ldr	r3, [pc, #300]	; (e230c <_ZL14aes_gen_tablesv+0x1f8>)
   e21de:	9302      	str	r3, [sp, #8]
   e21e0:	4848      	ldr	r0, [pc, #288]	; (e2304 <_ZL14aes_gen_tablesv+0x1f0>)
   e21e2:	4b4b      	ldr	r3, [pc, #300]	; (e2310 <_ZL14aes_gen_tablesv+0x1fc>)
   e21e4:	f8df c138 	ldr.w	ip, [pc, #312]	; e2320 <_ZL14aes_gen_tablesv+0x20c>
   e21e8:	4f4a      	ldr	r7, [pc, #296]	; (e2314 <_ZL14aes_gen_tablesv+0x200>)
   e21ea:	4e4b      	ldr	r6, [pc, #300]	; (e2318 <_ZL14aes_gen_tablesv+0x204>)
   e21ec:	f8df a134 	ldr.w	sl, [pc, #308]	; e2324 <_ZL14aes_gen_tablesv+0x210>
   e21f0:	f8df 9134 	ldr.w	r9, [pc, #308]	; e2328 <_ZL14aes_gen_tablesv+0x214>
   e21f4:	f8df 8134 	ldr.w	r8, [pc, #308]	; e232c <_ZL14aes_gen_tablesv+0x218>
   e21f8:	f8df e10c 	ldr.w	lr, [pc, #268]	; e2308 <_ZL14aes_gen_tablesv+0x1f4>
   e21fc:	9301      	str	r3, [sp, #4]
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
   e21fe:	f50d 6584 	add.w	r5, sp, #1056	; 0x420
   e2202:	24ff      	movs	r4, #255	; 0xff
        x = FSb[i];
   e2204:	f810 3b01 	ldrb.w	r3, [r0], #1
        y = XTIME( x ) & 0xFF;
   e2208:	f013 0f80 	tst.w	r3, #128	; 0x80
   e220c:	bf14      	ite	ne
   e220e:	221b      	movne	r2, #27
   e2210:	2200      	moveq	r2, #0
   e2212:	ea82 0243 	eor.w	r2, r2, r3, lsl #1
                 ( (uint32_t) x << 16 ) ^
   e2216:	0419      	lsls	r1, r3, #16
        y = XTIME( x ) & 0xFF;
   e2218:	b2d2      	uxtb	r2, r2
                 ( (uint32_t) x <<  8 ) ^
   e221a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   e221e:	4051      	eors	r1, r2
        z =  ( y ^ x ) & 0xFF;
   e2220:	4053      	eors	r3, r2
                 ( (uint32_t) x << 16 ) ^
   e2222:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
        FT0[i] = ( (uint32_t) y       ) ^
   e2226:	9b01      	ldr	r3, [sp, #4]
   e2228:	f843 1b04 	str.w	r1, [r3], #4
   e222c:	9301      	str	r3, [sp, #4]
        FT1[i] = ROTL8( FT0[i] );
   e222e:	ea4f 6331 	mov.w	r3, r1, ror #24
   e2232:	f84a 3b04 	str.w	r3, [sl], #4
        FT2[i] = ROTL8( FT1[i] );
   e2236:	ea4f 4331 	mov.w	r3, r1, ror #16
   e223a:	f849 3b04 	str.w	r3, [r9], #4
        x = RSb[i];
   e223e:	f81e 3b01 	ldrb.w	r3, [lr], #1
        FT3[i] = ROTL8( FT2[i] );
   e2242:	ea4f 2131 	mov.w	r1, r1, ror #8
   e2246:	f848 1b04 	str.w	r1, [r8], #4
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
   e224a:	2b00      	cmp	r3, #0
   e224c:	d052      	beq.n	e22f4 <_ZL14aes_gen_tablesv+0x1e0>
   e224e:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   e2252:	9903      	ldr	r1, [sp, #12]
   e2254:	4411      	add	r1, r2
   e2256:	fb91 fbf4 	sdiv	fp, r1, r4
   e225a:	ebcb 2b0b 	rsb	fp, fp, fp, lsl #8
   e225e:	eba1 0b0b 	sub.w	fp, r1, fp
   e2262:	a908      	add	r1, sp, #32
   e2264:	f851 b02b 	ldr.w	fp, [r1, fp, lsl #2]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
   e2268:	9904      	ldr	r1, [sp, #16]
   e226a:	440a      	add	r2, r1
   e226c:	fb92 f1f4 	sdiv	r1, r2, r4
   e2270:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
   e2274:	1a51      	subs	r1, r2, r1
   e2276:	aa08      	add	r2, sp, #32
   e2278:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   e227c:	0212      	lsls	r2, r2, #8
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
   e227e:	ea82 020b 	eor.w	r2, r2, fp
   e2282:	9205      	str	r2, [sp, #20]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
   e2284:	2b00      	cmp	r3, #0
   e2286:	d038      	beq.n	e22fa <_ZL14aes_gen_tablesv+0x1e6>
   e2288:	9906      	ldr	r1, [sp, #24]
   e228a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   e228e:	440a      	add	r2, r1
   e2290:	fb92 fbf4 	sdiv	fp, r2, r4
   e2294:	ebcb 2b0b 	rsb	fp, fp, fp, lsl #8
   e2298:	eba2 010b 	sub.w	r1, r2, fp
   e229c:	aa08      	add	r2, sp, #32
   e229e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   e22a2:	0409      	lsls	r1, r1, #16
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
   e22a4:	9a05      	ldr	r2, [sp, #20]
   e22a6:	404a      	eors	r2, r1
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
   e22a8:	b163      	cbz	r3, e22c4 <_ZL14aes_gen_tablesv+0x1b0>
   e22aa:	9907      	ldr	r1, [sp, #28]
   e22ac:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   e22b0:	440b      	add	r3, r1
   e22b2:	fb93 f1f4 	sdiv	r1, r3, r4
   e22b6:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
   e22ba:	1a59      	subs	r1, r3, r1
   e22bc:	ab08      	add	r3, sp, #32
   e22be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   e22c2:	061b      	lsls	r3, r3, #24
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
   e22c4:	405a      	eors	r2, r3
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
   e22c6:	9b02      	ldr	r3, [sp, #8]
   e22c8:	f843 2b04 	str.w	r2, [r3], #4
   e22cc:	9302      	str	r3, [sp, #8]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
   e22ce:	ea4f 6332 	mov.w	r3, r2, ror #24
   e22d2:	f84c 3b04 	str.w	r3, [ip], #4
        RT2[i] = ROTL8( RT1[i] );
   e22d6:	ea4f 4332 	mov.w	r3, r2, ror #16
   e22da:	f847 3b04 	str.w	r3, [r7], #4
    for( i = 0; i < 256; i++ )
   e22de:	4b0f      	ldr	r3, [pc, #60]	; (e231c <_ZL14aes_gen_tablesv+0x208>)
        RT3[i] = ROTL8( RT2[i] );
   e22e0:	ea4f 2232 	mov.w	r2, r2, ror #8
    for( i = 0; i < 256; i++ )
   e22e4:	4283      	cmp	r3, r0
        RT3[i] = ROTL8( RT2[i] );
   e22e6:	f846 2b04 	str.w	r2, [r6], #4
    for( i = 0; i < 256; i++ )
   e22ea:	d18b      	bne.n	e2204 <_ZL14aes_gen_tablesv+0xf0>
#endif /* !MBEDTLS_AES_FEWER_TABLES */
    }
}
   e22ec:	f60d 0d24 	addw	sp, sp, #2084	; 0x824
   e22f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
   e22f4:	469b      	mov	fp, r3
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
   e22f6:	461a      	mov	r2, r3
   e22f8:	e7c1      	b.n	e227e <_ZL14aes_gen_tablesv+0x16a>
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
   e22fa:	4619      	mov	r1, r3
   e22fc:	e7d2      	b.n	e22a4 <_ZL14aes_gen_tablesv+0x190>
   e22fe:	bf00      	nop
   e2300:	2003e5ec 	.word	0x2003e5ec
   e2304:	2003c3ec 	.word	0x2003c3ec
   e2308:	2003d4ec 	.word	0x2003d4ec
   e230c:	2003d5ec 	.word	0x2003d5ec
   e2310:	2003c4ec 	.word	0x2003c4ec
   e2314:	2003ddec 	.word	0x2003ddec
   e2318:	2003e1ec 	.word	0x2003e1ec
   e231c:	2003c4ec 	.word	0x2003c4ec
   e2320:	2003d9ec 	.word	0x2003d9ec
   e2324:	2003c8ec 	.word	0x2003c8ec
   e2328:	2003ccec 	.word	0x2003ccec
   e232c:	2003d0ec 	.word	0x2003d0ec

000e2330 <mbedtls_aes_init>:

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
   e2330:	f44f 728c 	mov.w	r2, #280	; 0x118
   e2334:	2100      	movs	r1, #0
   e2336:	f006 bd81 	b.w	e8e3c <memset>

000e233a <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
   e233a:	b118      	cbz	r0, e2344 <mbedtls_aes_free+0xa>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
   e233c:	f44f 718c 	mov.w	r1, #280	; 0x118
   e2340:	f000 bc40 	b.w	e2bc4 <mbedtls_platform_zeroize>
}
   e2344:	4770      	bx	lr
	...

000e2348 <mbedtls_aes_setkey_enc>:
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
   e2348:	2ac0      	cmp	r2, #192	; 0xc0
{
   e234a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e234c:	4604      	mov	r4, r0
   e234e:	460d      	mov	r5, r1
   e2350:	4616      	mov	r6, r2
    switch( keybits )
   e2352:	d027      	beq.n	e23a4 <mbedtls_aes_setkey_enc+0x5c>
   e2354:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   e2358:	d026      	beq.n	e23a8 <mbedtls_aes_setkey_enc+0x60>
   e235a:	2a80      	cmp	r2, #128	; 0x80
   e235c:	f040 80d0 	bne.w	e2500 <mbedtls_aes_setkey_enc+0x1b8>
    {
        case 128: ctx->nr = 10; break;
   e2360:	230a      	movs	r3, #10
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
   e2362:	4f69      	ldr	r7, [pc, #420]	; (e2508 <mbedtls_aes_setkey_enc+0x1c0>)
        case 256: ctx->nr = 14; break;
   e2364:	6023      	str	r3, [r4, #0]
    if( aes_init_done == 0 )
   e2366:	683b      	ldr	r3, [r7, #0]
   e2368:	b91b      	cbnz	r3, e2372 <mbedtls_aes_setkey_enc+0x2a>
    {
        aes_gen_tables();
   e236a:	f7ff fed3 	bl	e2114 <_ZL14aes_gen_tablesv>
        aes_init_done = 1;
   e236e:	2301      	movs	r3, #1
   e2370:	603b      	str	r3, [r7, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
   e2372:	4622      	mov	r2, r4
   e2374:	f104 0308 	add.w	r3, r4, #8
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
   e2378:	0976      	lsrs	r6, r6, #5
    ctx->rk = RK = ctx->buf;
   e237a:	f842 3f04 	str.w	r3, [r2, #4]!
    for( i = 0; i < ( keybits >> 5 ); i++ )
   e237e:	4629      	mov	r1, r5
   e2380:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   e2384:	428e      	cmp	r6, r1
   e2386:	d011      	beq.n	e23ac <mbedtls_aes_setkey_enc+0x64>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
   e2388:	788b      	ldrb	r3, [r1, #2]
   e238a:	7848      	ldrb	r0, [r1, #1]
   e238c:	041b      	lsls	r3, r3, #16
   e238e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   e2392:	7808      	ldrb	r0, [r1, #0]
   e2394:	4303      	orrs	r3, r0
   e2396:	78c8      	ldrb	r0, [r1, #3]
   e2398:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   e239c:	f842 3f04 	str.w	r3, [r2, #4]!
    for( i = 0; i < ( keybits >> 5 ); i++ )
   e23a0:	3104      	adds	r1, #4
   e23a2:	e7ef      	b.n	e2384 <mbedtls_aes_setkey_enc+0x3c>
        case 192: ctx->nr = 12; break;
   e23a4:	230c      	movs	r3, #12
   e23a6:	e7dc      	b.n	e2362 <mbedtls_aes_setkey_enc+0x1a>
        case 256: ctx->nr = 14; break;
   e23a8:	230e      	movs	r3, #14
   e23aa:	e7da      	b.n	e2362 <mbedtls_aes_setkey_enc+0x1a>
    }

    switch( ctx->nr )
   e23ac:	6823      	ldr	r3, [r4, #0]
   e23ae:	2b0c      	cmp	r3, #12
   e23b0:	d02d      	beq.n	e240e <mbedtls_aes_setkey_enc+0xc6>
   e23b2:	2b0e      	cmp	r3, #14
   e23b4:	d05c      	beq.n	e2470 <mbedtls_aes_setkey_enc+0x128>
   e23b6:	2b0a      	cmp	r3, #10
   e23b8:	d127      	bne.n	e240a <mbedtls_aes_setkey_enc+0xc2>
   e23ba:	4d54      	ldr	r5, [pc, #336]	; (e250c <mbedtls_aes_setkey_enc+0x1c4>)
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
   e23bc:	4954      	ldr	r1, [pc, #336]	; (e2510 <mbedtls_aes_setkey_enc+0x1c8>)
   e23be:	4620      	mov	r0, r4
   e23c0:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
   e23c4:	6942      	ldr	r2, [r0, #20]
                RK[4]  = RK[0] ^ RCON[i] ^
   e23c6:	f855 4b04 	ldr.w	r4, [r5], #4
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
   e23ca:	6887      	ldr	r7, [r0, #8]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
   e23cc:	f3c2 2307 	ubfx	r3, r2, #8, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
   e23d0:	407c      	eors	r4, r7
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
   e23d2:	5ccb      	ldrb	r3, [r1, r3]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
   e23d4:	4063      	eors	r3, r4
   e23d6:	0e14      	lsrs	r4, r2, #24
   e23d8:	3010      	adds	r0, #16
   e23da:	5d0c      	ldrb	r4, [r1, r4]
   e23dc:	ea83 4304 	eor.w	r3, r3, r4, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
   e23e0:	b2d4      	uxtb	r4, r2
   e23e2:	5d0c      	ldrb	r4, [r1, r4]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
   e23e4:	ea83 6304 	eor.w	r3, r3, r4, lsl #24
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
   e23e8:	f3c2 4407 	ubfx	r4, r2, #16, #8
   e23ec:	5d0c      	ldrb	r4, [r1, r4]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
   e23ee:	ea83 2304 	eor.w	r3, r3, r4, lsl #8

                RK[5]  = RK[1] ^ RK[4];
   e23f2:	f850 4c04 	ldr.w	r4, [r0, #-4]
                RK[4]  = RK[0] ^ RCON[i] ^
   e23f6:	6083      	str	r3, [r0, #8]
                RK[5]  = RK[1] ^ RK[4];
   e23f8:	4063      	eors	r3, r4
                RK[6]  = RK[2] ^ RK[5];
   e23fa:	6804      	ldr	r4, [r0, #0]
                RK[5]  = RK[1] ^ RK[4];
   e23fc:	60c3      	str	r3, [r0, #12]
                RK[6]  = RK[2] ^ RK[5];
   e23fe:	4063      	eors	r3, r4
   e2400:	6103      	str	r3, [r0, #16]
                RK[7]  = RK[3] ^ RK[6];
   e2402:	4053      	eors	r3, r2
   e2404:	6143      	str	r3, [r0, #20]
            for( i = 0; i < 10; i++, RK += 4 )
   e2406:	4286      	cmp	r6, r0
   e2408:	d1dc      	bne.n	e23c4 <mbedtls_aes_setkey_enc+0x7c>
    switch( ctx->nr )
   e240a:	2000      	movs	r0, #0
   e240c:	e07a      	b.n	e2504 <mbedtls_aes_setkey_enc+0x1bc>
   e240e:	4620      	mov	r0, r4
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
   e2410:	493f      	ldr	r1, [pc, #252]	; (e2510 <mbedtls_aes_setkey_enc+0x1c8>)
   e2412:	4c3e      	ldr	r4, [pc, #248]	; (e250c <mbedtls_aes_setkey_enc+0x1c4>)
   e2414:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
   e2418:	69c2      	ldr	r2, [r0, #28]
                RK[6]  = RK[0] ^ RCON[i] ^
   e241a:	f854 6b04 	ldr.w	r6, [r4], #4
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   e241e:	6887      	ldr	r7, [r0, #8]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
   e2420:	f3c2 2307 	ubfx	r3, r2, #8, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   e2424:	407e      	eors	r6, r7
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
   e2426:	5ccb      	ldrb	r3, [r1, r3]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   e2428:	4073      	eors	r3, r6
   e242a:	0e16      	lsrs	r6, r2, #24
   e242c:	3018      	adds	r0, #24
   e242e:	5d8e      	ldrb	r6, [r1, r6]
   e2430:	ea83 4306 	eor.w	r3, r3, r6, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
   e2434:	b2d6      	uxtb	r6, r2
   e2436:	5d8e      	ldrb	r6, [r1, r6]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   e2438:	ea83 6306 	eor.w	r3, r3, r6, lsl #24
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
   e243c:	f3c2 4607 	ubfx	r6, r2, #16, #8
   e2440:	5d8e      	ldrb	r6, [r1, r6]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
   e2442:	ea83 2306 	eor.w	r3, r3, r6, lsl #8

                RK[7]  = RK[1] ^ RK[6];
   e2446:	f850 6c0c 	ldr.w	r6, [r0, #-12]
                RK[6]  = RK[0] ^ RCON[i] ^
   e244a:	6083      	str	r3, [r0, #8]
                RK[7]  = RK[1] ^ RK[6];
   e244c:	4073      	eors	r3, r6
                RK[8]  = RK[2] ^ RK[7];
   e244e:	f850 6c08 	ldr.w	r6, [r0, #-8]
                RK[7]  = RK[1] ^ RK[6];
   e2452:	60c3      	str	r3, [r0, #12]
                RK[8]  = RK[2] ^ RK[7];
   e2454:	4073      	eors	r3, r6
                RK[9]  = RK[3] ^ RK[8];
   e2456:	f850 6c04 	ldr.w	r6, [r0, #-4]
                RK[8]  = RK[2] ^ RK[7];
   e245a:	6103      	str	r3, [r0, #16]
                RK[9]  = RK[3] ^ RK[8];
   e245c:	4073      	eors	r3, r6
                RK[10] = RK[4] ^ RK[9];
   e245e:	6806      	ldr	r6, [r0, #0]
                RK[9]  = RK[3] ^ RK[8];
   e2460:	6143      	str	r3, [r0, #20]
                RK[10] = RK[4] ^ RK[9];
   e2462:	4073      	eors	r3, r6
   e2464:	6183      	str	r3, [r0, #24]
                RK[11] = RK[5] ^ RK[10];
   e2466:	4053      	eors	r3, r2
   e2468:	61c3      	str	r3, [r0, #28]
            for( i = 0; i < 8; i++, RK += 6 )
   e246a:	4285      	cmp	r5, r0
   e246c:	d1d4      	bne.n	e2418 <mbedtls_aes_setkey_enc+0xd0>
   e246e:	e7cc      	b.n	e240a <mbedtls_aes_setkey_enc+0xc2>
   e2470:	4d26      	ldr	r5, [pc, #152]	; (e250c <mbedtls_aes_setkey_enc+0x1c4>)
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
   e2472:	4927      	ldr	r1, [pc, #156]	; (e2510 <mbedtls_aes_setkey_enc+0x1c8>)
   e2474:	4620      	mov	r0, r4
   e2476:	f104 06e0 	add.w	r6, r4, #224	; 0xe0
   e247a:	6a44      	ldr	r4, [r0, #36]	; 0x24
                RK[8]  = RK[0] ^ RCON[i] ^
   e247c:	f855 2b04 	ldr.w	r2, [r5], #4
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   e2480:	6887      	ldr	r7, [r0, #8]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
   e2482:	f3c4 2307 	ubfx	r3, r4, #8, #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   e2486:	407a      	eors	r2, r7
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
   e2488:	5ccb      	ldrb	r3, [r1, r3]
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
   e248a:	6987      	ldr	r7, [r0, #24]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   e248c:	4053      	eors	r3, r2
   e248e:	0e22      	lsrs	r2, r4, #24
   e2490:	3020      	adds	r0, #32
   e2492:	5c8a      	ldrb	r2, [r1, r2]
   e2494:	ea83 4302 	eor.w	r3, r3, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
   e2498:	b2e2      	uxtb	r2, r4
   e249a:	5c8a      	ldrb	r2, [r1, r2]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   e249c:	ea83 6302 	eor.w	r3, r3, r2, lsl #24
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
   e24a0:	f3c4 4207 	ubfx	r2, r4, #16, #8
   e24a4:	5c8a      	ldrb	r2, [r1, r2]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
   e24a6:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
                RK[9]  = RK[1] ^ RK[8];
   e24aa:	f850 2c14 	ldr.w	r2, [r0, #-20]
                RK[8]  = RK[0] ^ RCON[i] ^
   e24ae:	6083      	str	r3, [r0, #8]
                RK[9]  = RK[1] ^ RK[8];
   e24b0:	4053      	eors	r3, r2
                RK[10] = RK[2] ^ RK[9];
   e24b2:	f850 2c10 	ldr.w	r2, [r0, #-16]
                RK[9]  = RK[1] ^ RK[8];
   e24b6:	60c3      	str	r3, [r0, #12]
                RK[10] = RK[2] ^ RK[9];
   e24b8:	4053      	eors	r3, r2
                RK[11] = RK[3] ^ RK[10];
   e24ba:	f850 2c0c 	ldr.w	r2, [r0, #-12]
                RK[10] = RK[2] ^ RK[9];
   e24be:	6103      	str	r3, [r0, #16]
                RK[11] = RK[3] ^ RK[10];
   e24c0:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
   e24c2:	b2da      	uxtb	r2, r3
                RK[11] = RK[3] ^ RK[10];
   e24c4:	6143      	str	r3, [r0, #20]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
   e24c6:	5c8a      	ldrb	r2, [r1, r2]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
   e24c8:	407a      	eors	r2, r7
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
   e24ca:	0e1f      	lsrs	r7, r3, #24
   e24cc:	5dcf      	ldrb	r7, [r1, r7]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
   e24ce:	ea82 6207 	eor.w	r2, r2, r7, lsl #24
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
   e24d2:	f3c3 2707 	ubfx	r7, r3, #8, #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
   e24d6:	f3c3 4307 	ubfx	r3, r3, #16, #8
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
   e24da:	5dcf      	ldrb	r7, [r1, r7]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
   e24dc:	5ccb      	ldrb	r3, [r1, r3]
   e24de:	ea82 2207 	eor.w	r2, r2, r7, lsl #8
   e24e2:	ea82 4303 	eor.w	r3, r2, r3, lsl #16

                RK[13] = RK[5] ^ RK[12];
   e24e6:	f850 2c04 	ldr.w	r2, [r0, #-4]
                RK[12] = RK[4] ^
   e24ea:	6183      	str	r3, [r0, #24]
                RK[13] = RK[5] ^ RK[12];
   e24ec:	4053      	eors	r3, r2
                RK[14] = RK[6] ^ RK[13];
   e24ee:	6802      	ldr	r2, [r0, #0]
                RK[13] = RK[5] ^ RK[12];
   e24f0:	61c3      	str	r3, [r0, #28]
                RK[14] = RK[6] ^ RK[13];
   e24f2:	4053      	eors	r3, r2
   e24f4:	6203      	str	r3, [r0, #32]
                RK[15] = RK[7] ^ RK[14];
   e24f6:	4063      	eors	r3, r4
   e24f8:	6243      	str	r3, [r0, #36]	; 0x24
            for( i = 0; i < 7; i++, RK += 8 )
   e24fa:	4286      	cmp	r6, r0
   e24fc:	d1bd      	bne.n	e247a <mbedtls_aes_setkey_enc+0x132>
   e24fe:	e784      	b.n	e240a <mbedtls_aes_setkey_enc+0xc2>
    switch( keybits )
   e2500:	f06f 001f 	mvn.w	r0, #31
            }
            break;
    }

    return( 0 );
}
   e2504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e2506:	bf00      	nop
   e2508:	2003c3e8 	.word	0x2003c3e8
   e250c:	2003e5ec 	.word	0x2003e5ec
   e2510:	2003c3ec 	.word	0x2003c3ec

000e2514 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
   e2514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2518:	b0c9      	sub	sp, #292	; 0x124
   e251a:	4604      	mov	r4, r0
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
   e251c:	a802      	add	r0, sp, #8
{
   e251e:	e9cd 2100 	strd	r2, r1, [sp]
    mbedtls_aes_init( &cty );
   e2522:	f7ff ff05 	bl	e2330 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
   e2526:	f104 0308 	add.w	r3, r4, #8

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
   e252a:	e9dd 2100 	ldrd	r2, r1, [sp]
    ctx->rk = RK = ctx->buf;
   e252e:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
   e2530:	a802      	add	r0, sp, #8
   e2532:	f7ff ff09 	bl	e2348 <mbedtls_aes_setkey_enc>
   e2536:	4607      	mov	r7, r0
   e2538:	2800      	cmp	r0, #0
   e253a:	d165      	bne.n	e2608 <mbedtls_aes_setkey_dec+0xf4>
        goto exit;

    ctx->nr = cty.nr;
   e253c:	9d02      	ldr	r5, [sp, #8]
   e253e:	6025      	str	r5, [r4, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
   e2540:	012b      	lsls	r3, r5, #4
   e2542:	9301      	str	r3, [sp, #4]

    *RK++ = *SK++;
   e2544:	0129      	lsls	r1, r5, #4
    SK = cty.rk + cty.nr * 4;
   e2546:	9b03      	ldr	r3, [sp, #12]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
   e2548:	4833      	ldr	r0, [pc, #204]	; (e2618 <mbedtls_aes_setkey_dec+0x104>)
    SK = cty.rk + cty.nr * 4;
   e254a:	eb03 1205 	add.w	r2, r3, r5, lsl #4
    *RK++ = *SK++;
   e254e:	585b      	ldr	r3, [r3, r1]
   e2550:	60a3      	str	r3, [r4, #8]
    *RK++ = *SK++;
   e2552:	6853      	ldr	r3, [r2, #4]
   e2554:	60e3      	str	r3, [r4, #12]
    *RK++ = *SK++;
   e2556:	6893      	ldr	r3, [r2, #8]
   e2558:	6123      	str	r3, [r4, #16]
    *RK++ = *SK++;
   e255a:	68d3      	ldr	r3, [r2, #12]
   e255c:	6163      	str	r3, [r4, #20]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
   e255e:	f105 3bff 	add.w	fp, r5, #4294967295
   e2562:	3a10      	subs	r2, #16
    *RK++ = *SK++;
   e2564:	f104 0a18 	add.w	sl, r4, #24
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
   e2568:	f104 0328 	add.w	r3, r4, #40	; 0x28
   e256c:	4694      	mov	ip, r2
   e256e:	46de      	mov	lr, fp
   e2570:	f1be 0f00 	cmp.w	lr, #0
   e2574:	f1a3 0810 	sub.w	r8, r3, #16
   e2578:	dd2c      	ble.n	e25d4 <mbedtls_aes_setkey_dec+0xc0>
   e257a:	f1ac 0404 	sub.w	r4, ip, #4
   e257e:	9400      	str	r4, [sp, #0]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
   e2580:	9e00      	ldr	r6, [sp, #0]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
   e2582:	4926      	ldr	r1, [pc, #152]	; (e261c <mbedtls_aes_setkey_dec+0x108>)
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
   e2584:	f856 4f04 	ldr.w	r4, [r6, #4]!
   e2588:	9600      	str	r6, [sp, #0]
   e258a:	b2e6      	uxtb	r6, r4
   e258c:	f810 9006 	ldrb.w	r9, [r0, r6]
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
   e2590:	0e26      	lsrs	r6, r4, #24
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
   e2592:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
   e2596:	5d86      	ldrb	r6, [r0, r6]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
   e2598:	4921      	ldr	r1, [pc, #132]	; (e2620 <mbedtls_aes_setkey_dec+0x10c>)
   e259a:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
   e259e:	4921      	ldr	r1, [pc, #132]	; (e2624 <mbedtls_aes_setkey_dec+0x110>)
   e25a0:	ea89 0906 	eor.w	r9, r9, r6
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
   e25a4:	f3c4 2607 	ubfx	r6, r4, #8, #8
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
   e25a8:	f3c4 4407 	ubfx	r4, r4, #16, #8
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
   e25ac:	5d86      	ldrb	r6, [r0, r6]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
   e25ae:	5d04      	ldrb	r4, [r0, r4]
   e25b0:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
   e25b4:	491c      	ldr	r1, [pc, #112]	; (e2628 <mbedtls_aes_setkey_dec+0x114>)
   e25b6:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
   e25ba:	ea89 0606 	eor.w	r6, r9, r6
   e25be:	4066      	eors	r6, r4
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
   e25c0:	f848 6b04 	str.w	r6, [r8], #4
        for( j = 0; j < 4; j++, SK++ )
   e25c4:	4598      	cmp	r8, r3
   e25c6:	d1db      	bne.n	e2580 <mbedtls_aes_setkey_dec+0x6c>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
   e25c8:	f10e 3eff 	add.w	lr, lr, #4294967295
   e25cc:	f1ac 0c10 	sub.w	ip, ip, #16
   e25d0:	3310      	adds	r3, #16
   e25d2:	e7cd      	b.n	e2570 <mbedtls_aes_setkey_dec+0x5c>
   e25d4:	9b01      	ldr	r3, [sp, #4]
   e25d6:	2d00      	cmp	r5, #0
   e25d8:	f1a3 0110 	sub.w	r1, r3, #16
   e25dc:	f06f 030f 	mvn.w	r3, #15
   e25e0:	fb03 fb0b 	mul.w	fp, r3, fp
   e25e4:	bfdc      	itt	le
   e25e6:	f04f 0b00 	movle.w	fp, #0
   e25ea:	2100      	movle	r1, #0
   e25ec:	eb02 030b 	add.w	r3, r2, fp
        }
    }

    *RK++ = *SK++;
   e25f0:	f852 200b 	ldr.w	r2, [r2, fp]
   e25f4:	f84a 2001 	str.w	r2, [sl, r1]
   e25f8:	eb0a 0001 	add.w	r0, sl, r1
    *RK++ = *SK++;
   e25fc:	685a      	ldr	r2, [r3, #4]
   e25fe:	6042      	str	r2, [r0, #4]
    *RK++ = *SK++;
   e2600:	689a      	ldr	r2, [r3, #8]
   e2602:	6082      	str	r2, [r0, #8]
    *RK++ = *SK++;
   e2604:	68db      	ldr	r3, [r3, #12]
   e2606:	60c3      	str	r3, [r0, #12]

exit:
    mbedtls_aes_free( &cty );
   e2608:	a802      	add	r0, sp, #8
   e260a:	f7ff fe96 	bl	e233a <mbedtls_aes_free>

    return( ret );
}
   e260e:	4638      	mov	r0, r7
   e2610:	b049      	add	sp, #292	; 0x124
   e2612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e2616:	bf00      	nop
   e2618:	2003c3ec 	.word	0x2003c3ec
   e261c:	2003d5ec 	.word	0x2003d5ec
   e2620:	2003e1ec 	.word	0x2003e1ec
   e2624:	2003d9ec 	.word	0x2003d9ec
   e2628:	2003ddec 	.word	0x2003ddec

000e262c <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
   e262c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
   e2630:	6847      	ldr	r7, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
   e2632:	680e      	ldr	r6, [r1, #0]
   e2634:	683b      	ldr	r3, [r7, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
   e2636:	684d      	ldr	r5, [r1, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
   e2638:	688c      	ldr	r4, [r1, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
   e263a:	68c9      	ldr	r1, [r1, #12]
   e263c:	f8df 829c 	ldr.w	r8, [pc, #668]	; e28dc <mbedtls_internal_aes_encrypt+0x2b0>
   e2640:	f8df e29c 	ldr.w	lr, [pc, #668]	; e28e0 <mbedtls_internal_aes_encrypt+0x2b4>
   e2644:	f8df c29c 	ldr.w	ip, [pc, #668]	; e28e4 <mbedtls_internal_aes_encrypt+0x2b8>
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
   e2648:	405e      	eors	r6, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
   e264a:	687b      	ldr	r3, [r7, #4]
   e264c:	405d      	eors	r5, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
   e264e:	68bb      	ldr	r3, [r7, #8]
   e2650:	405c      	eors	r4, r3
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
   e2652:	68fb      	ldr	r3, [r7, #12]
   e2654:	404b      	eors	r3, r1

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e2656:	6801      	ldr	r1, [r0, #0]
{
   e2658:	b08f      	sub	sp, #60	; 0x3c
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e265a:	1049      	asrs	r1, r1, #1
   e265c:	3901      	subs	r1, #1
   e265e:	9100      	str	r1, [sp, #0]
   e2660:	f107 0130 	add.w	r1, r7, #48	; 0x30
   e2664:	f851 7c10 	ldr.w	r7, [r1, #-16]
   e2668:	9701      	str	r7, [sp, #4]
   e266a:	b2f7      	uxtb	r7, r6
   e266c:	f851 0c20 	ldr.w	r0, [r1, #-32]
   e2670:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
   e2674:	ea87 0900 	eor.w	r9, r7, r0
   e2678:	0e1f      	lsrs	r7, r3, #24
   e267a:	4896      	ldr	r0, [pc, #600]	; (e28d4 <mbedtls_internal_aes_encrypt+0x2a8>)
   e267c:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
   e2680:	ea89 0907 	eor.w	r9, r9, r7
   e2684:	f3c5 2707 	ubfx	r7, r5, #8, #8
   e2688:	ea4f 6b15 	mov.w	fp, r5, lsr #24
   e268c:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
   e2690:	f85e b02b 	ldr.w	fp, [lr, fp, lsl #2]
   e2694:	ea89 0907 	eor.w	r9, r9, r7
   e2698:	f3c4 4707 	ubfx	r7, r4, #16, #8
   e269c:	3120      	adds	r1, #32
   e269e:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
   e26a2:	ea89 0907 	eor.w	r9, r9, r7
   e26a6:	b2ef      	uxtb	r7, r5
   e26a8:	fa5f f089 	uxtb.w	r0, r9
   e26ac:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
   e26b0:	9002      	str	r0, [sp, #8]
   e26b2:	f851 0c3c 	ldr.w	r0, [r1, #-60]
   e26b6:	ea87 0a00 	eor.w	sl, r7, r0
   e26ba:	0e37      	lsrs	r7, r6, #24
   e26bc:	4885      	ldr	r0, [pc, #532]	; (e28d4 <mbedtls_internal_aes_encrypt+0x2a8>)
   e26be:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
   e26c2:	ea8a 0a07 	eor.w	sl, sl, r7
   e26c6:	f3c4 2707 	ubfx	r7, r4, #8, #8
   e26ca:	f3c5 4507 	ubfx	r5, r5, #16, #8
   e26ce:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
   e26d2:	ea8a 0a07 	eor.w	sl, sl, r7
   e26d6:	f3c3 4707 	ubfx	r7, r3, #16, #8
   e26da:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
   e26de:	ea8a 0a07 	eor.w	sl, sl, r7
   e26e2:	b2e7      	uxtb	r7, r4
   e26e4:	f3ca 2007 	ubfx	r0, sl, #8, #8
   e26e8:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
   e26ec:	9003      	str	r0, [sp, #12]
   e26ee:	f851 0c38 	ldr.w	r0, [r1, #-56]
   e26f2:	4047      	eors	r7, r0
   e26f4:	ea87 070b 	eor.w	r7, r7, fp
   e26f8:	f3c3 2b07 	ubfx	fp, r3, #8, #8
   e26fc:	4875      	ldr	r0, [pc, #468]	; (e28d4 <mbedtls_internal_aes_encrypt+0x2a8>)
   e26fe:	f85c b02b 	ldr.w	fp, [ip, fp, lsl #2]
   e2702:	ea87 070b 	eor.w	r7, r7, fp
   e2706:	f3c6 4b07 	ubfx	fp, r6, #16, #8
   e270a:	b2db      	uxtb	r3, r3
   e270c:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
   e2710:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   e2714:	ea87 070b 	eor.w	r7, r7, fp
   e2718:	f3c7 4007 	ubfx	r0, r7, #16, #8
   e271c:	0e24      	lsrs	r4, r4, #24
   e271e:	9004      	str	r0, [sp, #16]
   e2720:	f851 0c34 	ldr.w	r0, [r1, #-52]
   e2724:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
   e2728:	f3c6 2607 	ubfx	r6, r6, #8, #8
   e272c:	4043      	eors	r3, r0
   e272e:	4063      	eors	r3, r4
   e2730:	4868      	ldr	r0, [pc, #416]	; (e28d4 <mbedtls_internal_aes_encrypt+0x2a8>)
   e2732:	f85c 4026 	ldr.w	r4, [ip, r6, lsl #2]
   e2736:	4063      	eors	r3, r4
   e2738:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
   e273c:	f851 0c2c 	ldr.w	r0, [r1, #-44]
   e2740:	9005      	str	r0, [sp, #20]
   e2742:	4063      	eors	r3, r4
   e2744:	f3c3 4007 	ubfx	r0, r3, #16, #8
   e2748:	9006      	str	r0, [sp, #24]
   e274a:	f851 0c28 	ldr.w	r0, [r1, #-40]
   e274e:	9007      	str	r0, [sp, #28]
   e2750:	b2f8      	uxtb	r0, r7
   e2752:	9008      	str	r0, [sp, #32]
   e2754:	f3c3 2007 	ubfx	r0, r3, #8, #8
   e2758:	9009      	str	r0, [sp, #36]	; 0x24
   e275a:	0e1e      	lsrs	r6, r3, #24
   e275c:	f3c9 4007 	ubfx	r0, r9, #16, #8
   e2760:	b2db      	uxtb	r3, r3
   e2762:	900a      	str	r0, [sp, #40]	; 0x28
   e2764:	930d      	str	r3, [sp, #52]	; 0x34
   e2766:	9b00      	ldr	r3, [sp, #0]
   e2768:	ea4f 601a 	mov.w	r0, sl, lsr #24
   e276c:	900b      	str	r0, [sp, #44]	; 0x2c
   e276e:	2b00      	cmp	r3, #0
   e2770:	f851 0c24 	ldr.w	r0, [r1, #-36]
   e2774:	900c      	str	r0, [sp, #48]	; 0x30
   e2776:	fa5f f58a 	uxtb.w	r5, sl
   e277a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
   e277e:	ea4f 6419 	mov.w	r4, r9, lsr #24
   e2782:	f3ca 4a07 	ubfx	sl, sl, #16, #8
   e2786:	f3c9 2907 	ubfx	r9, r9, #8, #8
   e278a:	ea4f 6717 	mov.w	r7, r7, lsr #24
   e278e:	dd42      	ble.n	e2816 <mbedtls_internal_aes_encrypt+0x1ea>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   e2790:	9b02      	ldr	r3, [sp, #8]
   e2792:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
   e2796:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   e279a:	9801      	ldr	r0, [sp, #4]
   e279c:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
   e27a0:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
   e27a4:	4073      	eors	r3, r6
   e27a6:	4043      	eors	r3, r0
   e27a8:	9803      	ldr	r0, [sp, #12]
   e27aa:	f85c 6020 	ldr.w	r6, [ip, r0, lsl #2]
   e27ae:	4849      	ldr	r0, [pc, #292]	; (e28d4 <mbedtls_internal_aes_encrypt+0x2a8>)
   e27b0:	405e      	eors	r6, r3
   e27b2:	9b04      	ldr	r3, [sp, #16]
   e27b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   e27b8:	405e      	eors	r6, r3
   e27ba:	f85e 3024 	ldr.w	r3, [lr, r4, lsl #2]
   e27be:	405d      	eors	r5, r3
   e27c0:	9b05      	ldr	r3, [sp, #20]
   e27c2:	405d      	eors	r5, r3
   e27c4:	f85c 302b 	ldr.w	r3, [ip, fp, lsl #2]
   e27c8:	405d      	eors	r5, r3
   e27ca:	9b06      	ldr	r3, [sp, #24]
   e27cc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   e27d0:	405d      	eors	r5, r3
   e27d2:	9b08      	ldr	r3, [sp, #32]
   e27d4:	f858 4023 	ldr.w	r4, [r8, r3, lsl #2]
   e27d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e27da:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   e27de:	405c      	eors	r4, r3
   e27e0:	9b07      	ldr	r3, [sp, #28]
   e27e2:	405c      	eors	r4, r3
   e27e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e27e6:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
   e27ea:	405c      	eors	r4, r3
   e27ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e27ee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   e27f2:	980c      	ldr	r0, [sp, #48]	; 0x30
   e27f4:	405c      	eors	r4, r3
   e27f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e27f8:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   e27fc:	407b      	eors	r3, r7
   e27fe:	4043      	eors	r3, r0
   e2800:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
   e2804:	4833      	ldr	r0, [pc, #204]	; (e28d4 <mbedtls_internal_aes_encrypt+0x2a8>)
   e2806:	407b      	eors	r3, r7
   e2808:	f850 702a 	ldr.w	r7, [r0, sl, lsl #2]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e280c:	9800      	ldr	r0, [sp, #0]
   e280e:	3801      	subs	r0, #1
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   e2810:	407b      	eors	r3, r7
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e2812:	9000      	str	r0, [sp, #0]
   e2814:	e726      	b.n	e2664 <mbedtls_internal_aes_encrypt+0x38>

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
   e2816:	4930      	ldr	r1, [pc, #192]	; (e28d8 <mbedtls_internal_aes_encrypt+0x2ac>)
   e2818:	9b03      	ldr	r3, [sp, #12]
    X0 = *RK++ ^ \
   e281a:	9801      	ldr	r0, [sp, #4]
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
   e281c:	f811 c003 	ldrb.w	ip, [r1, r3]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
   e2820:	9b02      	ldr	r3, [sp, #8]
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
   e2822:	5d4d      	ldrb	r5, [r1, r5]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
   e2824:	5ccb      	ldrb	r3, [r1, r3]
    X0 = *RK++ ^ \
   e2826:	4043      	eors	r3, r0
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
   e2828:	9804      	ldr	r0, [sp, #16]
   e282a:	5c08      	ldrb	r0, [r1, r0]
    X0 = *RK++ ^ \
   e282c:	ea83 230c 	eor.w	r3, r3, ip, lsl #8
   e2830:	ea83 4300 	eor.w	r3, r3, r0, lsl #16
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
   e2834:	5d88      	ldrb	r0, [r1, r6]
    X1 = *RK++ ^ \
   e2836:	9e05      	ldr	r6, [sp, #20]
    X0 = *RK++ ^ \
   e2838:	ea83 6300 	eor.w	r3, r3, r0, lsl #24
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
   e283c:	f811 000b 	ldrb.w	r0, [r1, fp]
    X1 = *RK++ ^ \
   e2840:	4075      	eors	r5, r6
   e2842:	ea85 2500 	eor.w	r5, r5, r0, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   e2846:	9806      	ldr	r0, [sp, #24]
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
   e2848:	9e07      	ldr	r6, [sp, #28]
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   e284a:	5c08      	ldrb	r0, [r1, r0]
    X1 = *RK++ ^ \
   e284c:	ea85 4500 	eor.w	r5, r5, r0, lsl #16
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
   e2850:	5d08      	ldrb	r0, [r1, r4]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
   e2852:	9c08      	ldr	r4, [sp, #32]
    X1 = *RK++ ^ \
   e2854:	ea85 6500 	eor.w	r5, r5, r0, lsl #24
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
   e2858:	9809      	ldr	r0, [sp, #36]	; 0x24
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
   e285a:	5d0c      	ldrb	r4, [r1, r4]
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
   e285c:	5c08      	ldrb	r0, [r1, r0]
    X2 = *RK++ ^ \
   e285e:	4074      	eors	r4, r6
   e2860:	ea84 2400 	eor.w	r4, r4, r0, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   e2864:	980a      	ldr	r0, [sp, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
   e2866:	9e0c      	ldr	r6, [sp, #48]	; 0x30
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   e2868:	5c08      	ldrb	r0, [r1, r0]
    X2 = *RK++ ^ \
   e286a:	ea84 4400 	eor.w	r4, r4, r0, lsl #16
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
   e286e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   e2870:	5c08      	ldrb	r0, [r1, r0]
    X2 = *RK++ ^ \
   e2872:	ea84 6400 	eor.w	r4, r4, r0, lsl #24
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
   e2876:	980d      	ldr	r0, [sp, #52]	; 0x34
   e2878:	5c08      	ldrb	r0, [r1, r0]
    X3 = *RK++ ^ \
   e287a:	4070      	eors	r0, r6
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
   e287c:	f811 6009 	ldrb.w	r6, [r1, r9]
    X3 = *RK++ ^ \
   e2880:	ea80 2006 	eor.w	r0, r0, r6, lsl #8
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   e2884:	f811 600a 	ldrb.w	r6, [r1, sl]
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
   e2888:	5dc9      	ldrb	r1, [r1, r7]

    PUT_UINT32_LE( X0, output,  0 );
   e288a:	7013      	strb	r3, [r2, #0]
    X3 = *RK++ ^ \
   e288c:	ea80 4006 	eor.w	r0, r0, r6, lsl #16
   e2890:	ea80 6101 	eor.w	r1, r0, r1, lsl #24
    PUT_UINT32_LE( X0, output,  0 );
   e2894:	0a18      	lsrs	r0, r3, #8
   e2896:	7050      	strb	r0, [r2, #1]
   e2898:	0c18      	lsrs	r0, r3, #16
   e289a:	0e1b      	lsrs	r3, r3, #24
   e289c:	7090      	strb	r0, [r2, #2]
   e289e:	70d3      	strb	r3, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
   e28a0:	0a2b      	lsrs	r3, r5, #8
   e28a2:	7153      	strb	r3, [r2, #5]
   e28a4:	0c2b      	lsrs	r3, r5, #16
   e28a6:	7193      	strb	r3, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
   e28a8:	0a23      	lsrs	r3, r4, #8
   e28aa:	7253      	strb	r3, [r2, #9]
   e28ac:	0c23      	lsrs	r3, r4, #16
   e28ae:	7293      	strb	r3, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
   e28b0:	0a0b      	lsrs	r3, r1, #8
    PUT_UINT32_LE( X1, output,  4 );
   e28b2:	7115      	strb	r5, [r2, #4]
    PUT_UINT32_LE( X2, output,  8 );
   e28b4:	7214      	strb	r4, [r2, #8]
    PUT_UINT32_LE( X1, output,  4 );
   e28b6:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X2, output,  8 );
   e28b8:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X3, output, 12 );
   e28ba:	7311      	strb	r1, [r2, #12]
   e28bc:	7353      	strb	r3, [r2, #13]

    return( 0 );
}
   e28be:	2000      	movs	r0, #0
    PUT_UINT32_LE( X3, output, 12 );
   e28c0:	0c0b      	lsrs	r3, r1, #16
   e28c2:	0e09      	lsrs	r1, r1, #24
    PUT_UINT32_LE( X1, output,  4 );
   e28c4:	71d5      	strb	r5, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
   e28c6:	72d4      	strb	r4, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
   e28c8:	7393      	strb	r3, [r2, #14]
   e28ca:	73d1      	strb	r1, [r2, #15]
}
   e28cc:	b00f      	add	sp, #60	; 0x3c
   e28ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e28d2:	bf00      	nop
   e28d4:	2003ccec 	.word	0x2003ccec
   e28d8:	2003c3ec 	.word	0x2003c3ec
   e28dc:	2003c4ec 	.word	0x2003c4ec
   e28e0:	2003d0ec 	.word	0x2003d0ec
   e28e4:	2003c8ec 	.word	0x2003c8ec

000e28e8 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
   e28e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
   e28ec:	6847      	ldr	r7, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
   e28ee:	680e      	ldr	r6, [r1, #0]
   e28f0:	683b      	ldr	r3, [r7, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
   e28f2:	684d      	ldr	r5, [r1, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
   e28f4:	688c      	ldr	r4, [r1, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
   e28f6:	68c9      	ldr	r1, [r1, #12]
   e28f8:	f8df 82a0 	ldr.w	r8, [pc, #672]	; e2b9c <mbedtls_internal_aes_decrypt+0x2b4>
   e28fc:	f8df e2a0 	ldr.w	lr, [pc, #672]	; e2ba0 <mbedtls_internal_aes_decrypt+0x2b8>
   e2900:	f8df c2a0 	ldr.w	ip, [pc, #672]	; e2ba4 <mbedtls_internal_aes_decrypt+0x2bc>
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
   e2904:	405e      	eors	r6, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
   e2906:	687b      	ldr	r3, [r7, #4]
   e2908:	405d      	eors	r5, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
   e290a:	68bb      	ldr	r3, [r7, #8]
   e290c:	405c      	eors	r4, r3
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
   e290e:	68fb      	ldr	r3, [r7, #12]
   e2910:	404b      	eors	r3, r1

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e2912:	6801      	ldr	r1, [r0, #0]
{
   e2914:	b08f      	sub	sp, #60	; 0x3c
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e2916:	1049      	asrs	r1, r1, #1
   e2918:	3901      	subs	r1, #1
   e291a:	9100      	str	r1, [sp, #0]
   e291c:	f107 0130 	add.w	r1, r7, #48	; 0x30
   e2920:	f851 7c10 	ldr.w	r7, [r1, #-16]
   e2924:	9701      	str	r7, [sp, #4]
   e2926:	b2f7      	uxtb	r7, r6
   e2928:	f851 0c20 	ldr.w	r0, [r1, #-32]
   e292c:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
   e2930:	ea87 0900 	eor.w	r9, r7, r0
   e2934:	0e2f      	lsrs	r7, r5, #24
   e2936:	4897      	ldr	r0, [pc, #604]	; (e2b94 <mbedtls_internal_aes_decrypt+0x2ac>)
   e2938:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
   e293c:	ea89 0907 	eor.w	r9, r9, r7
   e2940:	f3c3 2707 	ubfx	r7, r3, #8, #8
   e2944:	ea4f 6b13 	mov.w	fp, r3, lsr #24
   e2948:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
   e294c:	f85e b02b 	ldr.w	fp, [lr, fp, lsl #2]
   e2950:	ea89 0907 	eor.w	r9, r9, r7
   e2954:	f3c4 4707 	ubfx	r7, r4, #16, #8
   e2958:	3120      	adds	r1, #32
   e295a:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
   e295e:	ea89 0907 	eor.w	r9, r9, r7
   e2962:	b2df      	uxtb	r7, r3
   e2964:	fa5f f089 	uxtb.w	r0, r9
   e2968:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
   e296c:	9002      	str	r0, [sp, #8]
   e296e:	f851 0c34 	ldr.w	r0, [r1, #-52]
   e2972:	ea87 0a00 	eor.w	sl, r7, r0
   e2976:	0e37      	lsrs	r7, r6, #24
   e2978:	4886      	ldr	r0, [pc, #536]	; (e2b94 <mbedtls_internal_aes_decrypt+0x2ac>)
   e297a:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
   e297e:	ea8a 0a07 	eor.w	sl, sl, r7
   e2982:	f3c4 2707 	ubfx	r7, r4, #8, #8
   e2986:	f3c3 4307 	ubfx	r3, r3, #16, #8
   e298a:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
   e298e:	ea8a 0a07 	eor.w	sl, sl, r7
   e2992:	f3c5 4707 	ubfx	r7, r5, #16, #8
   e2996:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
   e299a:	ea8a 0a07 	eor.w	sl, sl, r7
   e299e:	b2e7      	uxtb	r7, r4
   e29a0:	f3ca 2007 	ubfx	r0, sl, #8, #8
   e29a4:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
   e29a8:	9003      	str	r0, [sp, #12]
   e29aa:	f851 0c38 	ldr.w	r0, [r1, #-56]
   e29ae:	4047      	eors	r7, r0
   e29b0:	ea87 070b 	eor.w	r7, r7, fp
   e29b4:	f3c5 2b07 	ubfx	fp, r5, #8, #8
   e29b8:	4876      	ldr	r0, [pc, #472]	; (e2b94 <mbedtls_internal_aes_decrypt+0x2ac>)
   e29ba:	f85c b02b 	ldr.w	fp, [ip, fp, lsl #2]
   e29be:	ea87 070b 	eor.w	r7, r7, fp
   e29c2:	f3c6 4b07 	ubfx	fp, r6, #16, #8
   e29c6:	b2ed      	uxtb	r5, r5
   e29c8:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
   e29cc:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
   e29d0:	ea87 070b 	eor.w	r7, r7, fp
   e29d4:	f3c7 4007 	ubfx	r0, r7, #16, #8
   e29d8:	0e24      	lsrs	r4, r4, #24
   e29da:	9004      	str	r0, [sp, #16]
   e29dc:	f851 0c3c 	ldr.w	r0, [r1, #-60]
   e29e0:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
   e29e4:	f3c6 2607 	ubfx	r6, r6, #8, #8
   e29e8:	4045      	eors	r5, r0
   e29ea:	486a      	ldr	r0, [pc, #424]	; (e2b94 <mbedtls_internal_aes_decrypt+0x2ac>)
   e29ec:	4065      	eors	r5, r4
   e29ee:	f85c 4026 	ldr.w	r4, [ip, r6, lsl #2]
   e29f2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   e29f6:	f851 0c28 	ldr.w	r0, [r1, #-40]
   e29fa:	9007      	str	r0, [sp, #28]
   e29fc:	4065      	eors	r5, r4
   e29fe:	405d      	eors	r5, r3
   e2a00:	b2f8      	uxtb	r0, r7
   e2a02:	f851 3c2c 	ldr.w	r3, [r1, #-44]
   e2a06:	9008      	str	r0, [sp, #32]
   e2a08:	f3c5 2007 	ubfx	r0, r5, #8, #8
   e2a0c:	9305      	str	r3, [sp, #20]
   e2a0e:	9009      	str	r0, [sp, #36]	; 0x24
   e2a10:	f3ca 4307 	ubfx	r3, sl, #16, #8
   e2a14:	f3c9 4007 	ubfx	r0, r9, #16, #8
   e2a18:	9306      	str	r3, [sp, #24]
   e2a1a:	900a      	str	r0, [sp, #40]	; 0x28
   e2a1c:	ea4f 601a 	mov.w	r0, sl, lsr #24
   e2a20:	900b      	str	r0, [sp, #44]	; 0x2c
   e2a22:	f851 0c24 	ldr.w	r0, [r1, #-36]
   e2a26:	900c      	str	r0, [sp, #48]	; 0x30
   e2a28:	f3c5 4007 	ubfx	r0, r5, #16, #8
   e2a2c:	900d      	str	r0, [sp, #52]	; 0x34
   e2a2e:	9800      	ldr	r0, [sp, #0]
   e2a30:	2800      	cmp	r0, #0
   e2a32:	f3c9 2b07 	ubfx	fp, r9, #8, #8
   e2a36:	ea4f 6317 	mov.w	r3, r7, lsr #24
   e2a3a:	ea4f 6615 	mov.w	r6, r5, lsr #24
   e2a3e:	b2ec      	uxtb	r4, r5
   e2a40:	fa5f fa8a 	uxtb.w	sl, sl
   e2a44:	f3c7 2707 	ubfx	r7, r7, #8, #8
   e2a48:	ea4f 6919 	mov.w	r9, r9, lsr #24
   e2a4c:	dd44      	ble.n	e2ad8 <mbedtls_internal_aes_decrypt+0x1f0>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   e2a4e:	9802      	ldr	r0, [sp, #8]
   e2a50:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
   e2a54:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
   e2a58:	9801      	ldr	r0, [sp, #4]
   e2a5a:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   e2a5e:	f85e 9029 	ldr.w	r9, [lr, r9, lsl #2]
   e2a62:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
   e2a66:	4075      	eors	r5, r6
   e2a68:	4045      	eors	r5, r0
   e2a6a:	9803      	ldr	r0, [sp, #12]
   e2a6c:	f85c 6020 	ldr.w	r6, [ip, r0, lsl #2]
   e2a70:	9804      	ldr	r0, [sp, #16]
   e2a72:	406e      	eors	r6, r5
   e2a74:	4d47      	ldr	r5, [pc, #284]	; (e2b94 <mbedtls_internal_aes_decrypt+0x2ac>)
   e2a76:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
   e2a7a:	4846      	ldr	r0, [pc, #280]	; (e2b94 <mbedtls_internal_aes_decrypt+0x2ac>)
   e2a7c:	406e      	eors	r6, r5
   e2a7e:	f858 5024 	ldr.w	r5, [r8, r4, lsl #2]
   e2a82:	405d      	eors	r5, r3
   e2a84:	9b05      	ldr	r3, [sp, #20]
   e2a86:	405d      	eors	r5, r3
   e2a88:	f85c 302b 	ldr.w	r3, [ip, fp, lsl #2]
   e2a8c:	405d      	eors	r5, r3
   e2a8e:	9b06      	ldr	r3, [sp, #24]
   e2a90:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   e2a94:	405d      	eors	r5, r3
   e2a96:	9b08      	ldr	r3, [sp, #32]
   e2a98:	f858 4023 	ldr.w	r4, [r8, r3, lsl #2]
   e2a9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e2a9e:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
   e2aa2:	405c      	eors	r4, r3
   e2aa4:	9b07      	ldr	r3, [sp, #28]
   e2aa6:	405c      	eors	r4, r3
   e2aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e2aaa:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
   e2aae:	405c      	eors	r4, r3
   e2ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e2ab2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   e2ab6:	980c      	ldr	r0, [sp, #48]	; 0x30
   e2ab8:	405c      	eors	r4, r3
   e2aba:	f858 302a 	ldr.w	r3, [r8, sl, lsl #2]
   e2abe:	ea83 0309 	eor.w	r3, r3, r9
   e2ac2:	4043      	eors	r3, r0
   e2ac4:	407b      	eors	r3, r7
   e2ac6:	980d      	ldr	r0, [sp, #52]	; 0x34
   e2ac8:	4f32      	ldr	r7, [pc, #200]	; (e2b94 <mbedtls_internal_aes_decrypt+0x2ac>)
   e2aca:	f857 7020 	ldr.w	r7, [r7, r0, lsl #2]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e2ace:	9800      	ldr	r0, [sp, #0]
   e2ad0:	3801      	subs	r0, #1
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   e2ad2:	407b      	eors	r3, r7
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   e2ad4:	9000      	str	r0, [sp, #0]
   e2ad6:	e723      	b.n	e2920 <mbedtls_internal_aes_decrypt+0x38>

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
   e2ad8:	492f      	ldr	r1, [pc, #188]	; (e2b98 <mbedtls_internal_aes_decrypt+0x2b0>)
   e2ada:	9803      	ldr	r0, [sp, #12]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
   e2adc:	9d02      	ldr	r5, [sp, #8]
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
   e2ade:	f811 c000 	ldrb.w	ip, [r1, r0]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
   e2ae2:	5d4d      	ldrb	r5, [r1, r5]
    X0 = *RK++ ^ \
   e2ae4:	9801      	ldr	r0, [sp, #4]
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
   e2ae6:	5d0c      	ldrb	r4, [r1, r4]
    X0 = *RK++ ^ \
   e2ae8:	4045      	eors	r5, r0
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
   e2aea:	9804      	ldr	r0, [sp, #16]
   e2aec:	5c08      	ldrb	r0, [r1, r0]
    X0 = *RK++ ^ \
   e2aee:	ea85 250c 	eor.w	r5, r5, ip, lsl #8
   e2af2:	ea85 4500 	eor.w	r5, r5, r0, lsl #16
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
   e2af6:	5d88      	ldrb	r0, [r1, r6]
    X1 = *RK++ ^ \
   e2af8:	9e05      	ldr	r6, [sp, #20]
    X0 = *RK++ ^ \
   e2afa:	ea85 6500 	eor.w	r5, r5, r0, lsl #24
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
   e2afe:	f811 000b 	ldrb.w	r0, [r1, fp]
    X1 = *RK++ ^ \
   e2b02:	4074      	eors	r4, r6
   e2b04:	ea84 2400 	eor.w	r4, r4, r0, lsl #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
   e2b08:	9806      	ldr	r0, [sp, #24]
   e2b0a:	5c08      	ldrb	r0, [r1, r0]
    X1 = *RK++ ^ \
   e2b0c:	ea84 4400 	eor.w	r4, r4, r0, lsl #16
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
   e2b10:	5cc8      	ldrb	r0, [r1, r3]

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
   e2b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    X1 = *RK++ ^ \
   e2b14:	ea84 6400 	eor.w	r4, r4, r0, lsl #24
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
   e2b18:	5cc8      	ldrb	r0, [r1, r3]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
   e2b1a:	9b08      	ldr	r3, [sp, #32]
   e2b1c:	5cce      	ldrb	r6, [r1, r3]
    X2 = *RK++ ^ \
   e2b1e:	9b07      	ldr	r3, [sp, #28]
   e2b20:	405e      	eors	r6, r3
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
   e2b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e2b24:	5ccb      	ldrb	r3, [r1, r3]
    X2 = *RK++ ^ \
   e2b26:	ea86 2600 	eor.w	r6, r6, r0, lsl #8
   e2b2a:	ea86 4603 	eor.w	r6, r6, r3, lsl #16
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
   e2b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    X3 = *RK++ ^ \
   e2b30:	980c      	ldr	r0, [sp, #48]	; 0x30
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
   e2b32:	5ccb      	ldrb	r3, [r1, r3]
    X2 = *RK++ ^ \
   e2b34:	ea86 6603 	eor.w	r6, r6, r3, lsl #24
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
   e2b38:	f811 300a 	ldrb.w	r3, [r1, sl]
    X3 = *RK++ ^ \
   e2b3c:	4043      	eors	r3, r0
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
   e2b3e:	5dc8      	ldrb	r0, [r1, r7]
    X3 = *RK++ ^ \
   e2b40:	ea83 2300 	eor.w	r3, r3, r0, lsl #8
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
   e2b44:	980d      	ldr	r0, [sp, #52]	; 0x34
   e2b46:	5c08      	ldrb	r0, [r1, r0]
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
   e2b48:	f811 1009 	ldrb.w	r1, [r1, r9]

    PUT_UINT32_LE( X0, output,  0 );
   e2b4c:	7015      	strb	r5, [r2, #0]
    X3 = *RK++ ^ \
   e2b4e:	ea83 4300 	eor.w	r3, r3, r0, lsl #16
   e2b52:	ea83 6301 	eor.w	r3, r3, r1, lsl #24
    PUT_UINT32_LE( X0, output,  0 );
   e2b56:	0a29      	lsrs	r1, r5, #8
   e2b58:	7051      	strb	r1, [r2, #1]
   e2b5a:	0c29      	lsrs	r1, r5, #16
   e2b5c:	7091      	strb	r1, [r2, #2]
   e2b5e:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X1, output,  4 );
   e2b60:	0a21      	lsrs	r1, r4, #8
    PUT_UINT32_LE( X0, output,  0 );
   e2b62:	70d5      	strb	r5, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
   e2b64:	7151      	strb	r1, [r2, #5]
   e2b66:	0c21      	lsrs	r1, r4, #16
   e2b68:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
   e2b6a:	0a31      	lsrs	r1, r6, #8
   e2b6c:	7251      	strb	r1, [r2, #9]
   e2b6e:	0c31      	lsrs	r1, r6, #16
   e2b70:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
   e2b72:	0a19      	lsrs	r1, r3, #8
    PUT_UINT32_LE( X1, output,  4 );
   e2b74:	7114      	strb	r4, [r2, #4]
    PUT_UINT32_LE( X2, output,  8 );
   e2b76:	7216      	strb	r6, [r2, #8]
    PUT_UINT32_LE( X1, output,  4 );
   e2b78:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X2, output,  8 );
   e2b7a:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X3, output, 12 );
   e2b7c:	7313      	strb	r3, [r2, #12]
   e2b7e:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
   e2b80:	2000      	movs	r0, #0
    PUT_UINT32_LE( X3, output, 12 );
   e2b82:	0c19      	lsrs	r1, r3, #16
   e2b84:	0e1b      	lsrs	r3, r3, #24
    PUT_UINT32_LE( X1, output,  4 );
   e2b86:	71d4      	strb	r4, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
   e2b88:	72d6      	strb	r6, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
   e2b8a:	7391      	strb	r1, [r2, #14]
   e2b8c:	73d3      	strb	r3, [r2, #15]
}
   e2b8e:	b00f      	add	sp, #60	; 0x3c
   e2b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e2b94:	2003ddec 	.word	0x2003ddec
   e2b98:	2003d4ec 	.word	0x2003d4ec
   e2b9c:	2003d5ec 	.word	0x2003d5ec
   e2ba0:	2003e1ec 	.word	0x2003e1ec
   e2ba4:	2003d9ec 	.word	0x2003d9ec

000e2ba8 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
   e2ba8:	b410      	push	{r4}
   e2baa:	460c      	mov	r4, r1
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
   e2bac:	2c01      	cmp	r4, #1
{
   e2bae:	4611      	mov	r1, r2
   e2bb0:	461a      	mov	r2, r3
    if( mode == MBEDTLS_AES_ENCRYPT )
   e2bb2:	d103      	bne.n	e2bbc <mbedtls_aes_crypt_ecb+0x14>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
   e2bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
   e2bb8:	f7ff bd38 	b.w	e262c <mbedtls_internal_aes_encrypt>
}
   e2bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
   e2bc0:	f7ff be92 	b.w	e28e8 <mbedtls_internal_aes_decrypt>

000e2bc4 <mbedtls_platform_zeroize>:

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
   e2bc4:	460a      	mov	r2, r1
   e2bc6:	b119      	cbz	r1, e2bd0 <mbedtls_platform_zeroize+0xc>
        memset_func( buf, 0, len );
   e2bc8:	4b02      	ldr	r3, [pc, #8]	; (e2bd4 <mbedtls_platform_zeroize+0x10>)
   e2bca:	2100      	movs	r1, #0
   e2bcc:	681b      	ldr	r3, [r3, #0]
   e2bce:	4718      	bx	r3
}
   e2bd0:	4770      	bx	lr
   e2bd2:	bf00      	nop
   e2bd4:	2003ac4c 	.word	0x2003ac4c

000e2bd8 <mbedtls_pkcs12_pbe_sha1_rc4_128>:
    mbedtls_platform_zeroize( key, sizeof( key ) );
    mbedtls_arc4_free( &ctx );

    return( ret );
#endif /* MBEDTLS_ARC4_C */
}
   e2bd8:	4800      	ldr	r0, [pc, #0]	; (e2bdc <mbedtls_pkcs12_pbe_sha1_rc4_128+0x4>)
   e2bda:	4770      	bx	lr
   e2bdc:	ffffe100 	.word	0xffffe100

000e2be0 <mbedtls_pkcs12_derivation>:

int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
                       const unsigned char *pwd, size_t pwdlen,
                       const unsigned char *salt, size_t saltlen,
                       mbedtls_md_type_t md_type, int id, int iterations )
{
   e2be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2be4:	ed2d 8b02 	vpush	{d8}
   e2be8:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c

    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
   e2bec:	2980      	cmp	r1, #128	; 0x80
{
   e2bee:	ee08 2a10 	vmov	s16, r2
   e2bf2:	f8dd a28c 	ldr.w	sl, [sp, #652]	; 0x28c
   e2bf6:	9001      	str	r0, [sp, #4]
   e2bf8:	460d      	mov	r5, r1
   e2bfa:	469b      	mov	fp, r3
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
   e2bfc:	f200 80ef 	bhi.w	e2dde <mbedtls_pkcs12_derivation+0x1fe>
   e2c00:	2b40      	cmp	r3, #64	; 0x40
   e2c02:	f200 80ec 	bhi.w	e2dde <mbedtls_pkcs12_derivation+0x1fe>
   e2c06:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   e2c0a:	f200 80e8 	bhi.w	e2dde <mbedtls_pkcs12_derivation+0x1fe>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( md_type );
   e2c0e:	f89d 0290 	ldrb.w	r0, [sp, #656]	; 0x290
   e2c12:	f7fa f927 	bl	dce64 <mbedtls_md_info_from_type>
    if( md_info == NULL )
   e2c16:	4606      	mov	r6, r0
   e2c18:	2800      	cmp	r0, #0
   e2c1a:	f000 80e2 	beq.w	e2de2 <mbedtls_pkcs12_derivation+0x202>
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    mbedtls_md_init( &md_ctx );
   e2c1e:	a803      	add	r0, sp, #12
   e2c20:	f7fa f92c 	bl	dce7c <mbedtls_md_init>

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   e2c24:	2200      	movs	r2, #0
   e2c26:	4631      	mov	r1, r6
   e2c28:	a803      	add	r0, sp, #12
   e2c2a:	f7fa f947 	bl	dcebc <mbedtls_md_setup>
   e2c2e:	2800      	cmp	r0, #0
   e2c30:	f040 80cf 	bne.w	e2dd2 <mbedtls_pkcs12_derivation+0x1f2>
        return( ret );
    hlen = mbedtls_md_get_size( md_info );
   e2c34:	4630      	mov	r0, r6
   e2c36:	f7fa fa4f 	bl	dd0d8 <mbedtls_md_get_size>

    if( hlen <= 32 )
        v = 64;
    else
        v = 128;
   e2c3a:	2821      	cmp	r0, #33	; 0x21
   e2c3c:	bf34      	ite	cc
   e2c3e:	2440      	movcc	r4, #64	; 0x40
   e2c40:	2480      	movcs	r4, #128	; 0x80

    memset( diversifier, (unsigned char) id, v );
   e2c42:	f89d 1294 	ldrb.w	r1, [sp, #660]	; 0x294
    hlen = mbedtls_md_get_size( md_info );
   e2c46:	4680      	mov	r8, r0
    memset( diversifier, (unsigned char) id, v );
   e2c48:	4622      	mov	r2, r4
   e2c4a:	a816      	add	r0, sp, #88	; 0x58
   e2c4c:	f006 f8f6 	bl	e8e3c <memset>
   e2c50:	46a1      	mov	r9, r4
    unsigned char *p = data;
   e2c52:	ab36      	add	r3, sp, #216	; 0xd8
        use_len = ( data_len > fill_len ) ? fill_len : data_len;
   e2c54:	45ca      	cmp	sl, r9
   e2c56:	4657      	mov	r7, sl
   e2c58:	bf28      	it	cs
   e2c5a:	464f      	movcs	r7, r9
        memcpy( p, filler, use_len );
   e2c5c:	4618      	mov	r0, r3
   e2c5e:	99a2      	ldr	r1, [sp, #648]	; 0x288
   e2c60:	463a      	mov	r2, r7
   e2c62:	f006 f8c3 	bl	e8dec <memcpy>
    while( data_len > 0 )
   e2c66:	ebb9 0907 	subs.w	r9, r9, r7
        memcpy( p, filler, use_len );
   e2c6a:	4603      	mov	r3, r0
        p += use_len;
   e2c6c:	443b      	add	r3, r7
    while( data_len > 0 )
   e2c6e:	d1f1      	bne.n	e2c54 <mbedtls_pkcs12_derivation+0x74>
    unsigned char *p = data;
   e2c70:	ab56      	add	r3, sp, #344	; 0x158
   e2c72:	46a1      	mov	r9, r4
   e2c74:	469a      	mov	sl, r3
        use_len = ( data_len > fill_len ) ? fill_len : data_len;
   e2c76:	45cb      	cmp	fp, r9
   e2c78:	465f      	mov	r7, fp
   e2c7a:	bf28      	it	cs
   e2c7c:	464f      	movcs	r7, r9
        memcpy( p, filler, use_len );
   e2c7e:	4618      	mov	r0, r3
   e2c80:	ee18 1a10 	vmov	r1, s16
   e2c84:	463a      	mov	r2, r7
   e2c86:	f006 f8b1 	bl	e8dec <memcpy>
    while( data_len > 0 )
   e2c8a:	ebb9 0907 	subs.w	r9, r9, r7
        memcpy( p, filler, use_len );
   e2c8e:	4603      	mov	r3, r0
        p += use_len;
   e2c90:	443b      	add	r3, r7
    while( data_len > 0 )
   e2c92:	d1f0      	bne.n	e2c76 <mbedtls_pkcs12_derivation+0x96>

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );

    p = data;
    while( datalen > 0 )
   e2c94:	2d00      	cmp	r5, #0
   e2c96:	f000 8087 	beq.w	e2da8 <mbedtls_pkcs12_derivation+0x1c8>
    {
        // Calculate hash( diversifier || salt_block || pwd_block )
        if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
   e2c9a:	a803      	add	r0, sp, #12
   e2c9c:	f7fa f92e 	bl	dcefc <mbedtls_md_starts>
   e2ca0:	4607      	mov	r7, r0
   e2ca2:	2800      	cmp	r0, #0
   e2ca4:	f040 8081 	bne.w	e2daa <mbedtls_pkcs12_derivation+0x1ca>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, diversifier, v ) ) != 0 )
   e2ca8:	4622      	mov	r2, r4
   e2caa:	a916      	add	r1, sp, #88	; 0x58
   e2cac:	a803      	add	r0, sp, #12
   e2cae:	f7fa f92f 	bl	dcf10 <mbedtls_md_update>
   e2cb2:	4607      	mov	r7, r0
   e2cb4:	2800      	cmp	r0, #0
   e2cb6:	d178      	bne.n	e2daa <mbedtls_pkcs12_derivation+0x1ca>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, salt_block, v ) ) != 0 )
   e2cb8:	4622      	mov	r2, r4
   e2cba:	a936      	add	r1, sp, #216	; 0xd8
   e2cbc:	a803      	add	r0, sp, #12
   e2cbe:	f7fa f927 	bl	dcf10 <mbedtls_md_update>
   e2cc2:	4607      	mov	r7, r0
   e2cc4:	2800      	cmp	r0, #0
   e2cc6:	d170      	bne.n	e2daa <mbedtls_pkcs12_derivation+0x1ca>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, pwd_block, v ) ) != 0 )
   e2cc8:	4622      	mov	r2, r4
   e2cca:	4651      	mov	r1, sl
   e2ccc:	a803      	add	r0, sp, #12
   e2cce:	f7fa f91f 	bl	dcf10 <mbedtls_md_update>
   e2cd2:	4607      	mov	r7, r0
   e2cd4:	2800      	cmp	r0, #0
   e2cd6:	d168      	bne.n	e2daa <mbedtls_pkcs12_derivation+0x1ca>
            goto exit;

        if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
   e2cd8:	a906      	add	r1, sp, #24
   e2cda:	a803      	add	r0, sp, #12
   e2cdc:	f7fa f922 	bl	dcf24 <mbedtls_md_finish>
   e2ce0:	4607      	mov	r7, r0
   e2ce2:	2800      	cmp	r0, #0
   e2ce4:	d161      	bne.n	e2daa <mbedtls_pkcs12_derivation+0x1ca>
            goto exit;

        // Perform remaining ( iterations - 1 ) recursive hash calculations
        for( i = 1; i < (size_t) iterations; i++ )
   e2ce6:	f04f 0901 	mov.w	r9, #1
   e2cea:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   e2cec:	454b      	cmp	r3, r9
   e2cee:	d90b      	bls.n	e2d08 <mbedtls_pkcs12_derivation+0x128>
        {
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
   e2cf0:	ab06      	add	r3, sp, #24
   e2cf2:	4642      	mov	r2, r8
   e2cf4:	4619      	mov	r1, r3
   e2cf6:	4630      	mov	r0, r6
   e2cf8:	f7fa f91e 	bl	dcf38 <mbedtls_md>
   e2cfc:	4607      	mov	r7, r0
   e2cfe:	2800      	cmp	r0, #0
   e2d00:	d153      	bne.n	e2daa <mbedtls_pkcs12_derivation+0x1ca>
        for( i = 1; i < (size_t) iterations; i++ )
   e2d02:	f109 0901 	add.w	r9, r9, #1
   e2d06:	e7f0      	b.n	e2cea <mbedtls_pkcs12_derivation+0x10a>
                goto exit;
        }

        use_len = ( datalen > hlen ) ? hlen : datalen;
   e2d08:	4545      	cmp	r5, r8
   e2d0a:	46a9      	mov	r9, r5
   e2d0c:	bf28      	it	cs
   e2d0e:	46c1      	movcs	r9, r8
        memcpy( p, hash_output, use_len );
   e2d10:	9801      	ldr	r0, [sp, #4]
   e2d12:	464a      	mov	r2, r9
   e2d14:	a906      	add	r1, sp, #24
   e2d16:	f006 f869 	bl	e8dec <memcpy>
        datalen -= use_len;
        p += use_len;
   e2d1a:	9b01      	ldr	r3, [sp, #4]

        if( datalen == 0 )
   e2d1c:	ebb5 0509 	subs.w	r5, r5, r9
        p += use_len;
   e2d20:	444b      	add	r3, r9
   e2d22:	9301      	str	r3, [sp, #4]
        if( datalen == 0 )
   e2d24:	d040      	beq.n	e2da8 <mbedtls_pkcs12_derivation+0x1c8>
    unsigned char *p = data;
   e2d26:	ab76      	add	r3, sp, #472	; 0x1d8
   e2d28:	46a1      	mov	r9, r4
   e2d2a:	469b      	mov	fp, r3
        use_len = ( data_len > fill_len ) ? fill_len : data_len;
   e2d2c:	45c8      	cmp	r8, r9
   e2d2e:	4647      	mov	r7, r8
   e2d30:	bf28      	it	cs
   e2d32:	464f      	movcs	r7, r9
        memcpy( p, filler, use_len );
   e2d34:	4618      	mov	r0, r3
   e2d36:	463a      	mov	r2, r7
   e2d38:	a906      	add	r1, sp, #24
   e2d3a:	f006 f857 	bl	e8dec <memcpy>
    while( data_len > 0 )
   e2d3e:	ebb9 0907 	subs.w	r9, r9, r7
        memcpy( p, filler, use_len );
   e2d42:	4603      	mov	r3, r0
        p += use_len;
   e2d44:	443b      	add	r3, r7
    while( data_len > 0 )
   e2d46:	d1f1      	bne.n	e2d2c <mbedtls_pkcs12_derivation+0x14c>
   e2d48:	ab76      	add	r3, sp, #472	; 0x1d8
   e2d4a:	191a      	adds	r2, r3, r4

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );

        // B += 1
        for( i = v; i > 0; i-- )
   e2d4c:	4621      	mov	r1, r4
            if( ++hash_block[i - 1] != 0 )
   e2d4e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   e2d52:	3301      	adds	r3, #1
   e2d54:	b2db      	uxtb	r3, r3
   e2d56:	3901      	subs	r1, #1
   e2d58:	f802 3c01 	strb.w	r3, [r2, #-1]
   e2d5c:	b913      	cbnz	r3, e2d64 <mbedtls_pkcs12_derivation+0x184>
        for( i = v; i > 0; i-- )
   e2d5e:	3a01      	subs	r2, #1
   e2d60:	2900      	cmp	r1, #0
   e2d62:	d1f4      	bne.n	e2d4e <mbedtls_pkcs12_derivation+0x16e>
   e2d64:	ab36      	add	r3, sp, #216	; 0xd8
   e2d66:	1919      	adds	r1, r3, r4
   e2d68:	2000      	movs	r0, #0
   e2d6a:	4623      	mov	r3, r4

        // salt_block += B
        c = 0;
        for( i = v; i > 0; i-- )
        {
            j = salt_block[i - 1] + hash_block[i - 1] + c;
   e2d6c:	3b01      	subs	r3, #1
   e2d6e:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   e2d72:	f81b c003 	ldrb.w	ip, [fp, r3]
   e2d76:	4462      	add	r2, ip
   e2d78:	4402      	add	r2, r0
            c = (unsigned char) (j >> 8);
            salt_block[i - 1] = j & 0xFF;
   e2d7a:	f801 2d01 	strb.w	r2, [r1, #-1]!
            c = (unsigned char) (j >> 8);
   e2d7e:	f3c2 2007 	ubfx	r0, r2, #8, #8
        for( i = v; i > 0; i-- )
   e2d82:	2b00      	cmp	r3, #0
   e2d84:	d1f2      	bne.n	e2d6c <mbedtls_pkcs12_derivation+0x18c>
   e2d86:	aa56      	add	r2, sp, #344	; 0x158
   e2d88:	1911      	adds	r1, r2, r4
        }

        // pwd_block  += B
        c = 0;
        for( i = v; i > 0; i-- )
   e2d8a:	4620      	mov	r0, r4
        {
            j = pwd_block[i - 1] + hash_block[i - 1] + c;
   e2d8c:	3801      	subs	r0, #1
   e2d8e:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   e2d92:	f81b c000 	ldrb.w	ip, [fp, r0]
   e2d96:	4462      	add	r2, ip
   e2d98:	441a      	add	r2, r3
            c = (unsigned char) (j >> 8);
            pwd_block[i - 1] = j & 0xFF;
   e2d9a:	f801 2d01 	strb.w	r2, [r1, #-1]!
            c = (unsigned char) (j >> 8);
   e2d9e:	f3c2 2307 	ubfx	r3, r2, #8, #8
        for( i = v; i > 0; i-- )
   e2da2:	2800      	cmp	r0, #0
   e2da4:	d1f2      	bne.n	e2d8c <mbedtls_pkcs12_derivation+0x1ac>
   e2da6:	e775      	b.n	e2c94 <mbedtls_pkcs12_derivation+0xb4>
        }
    }

    ret = 0;
   e2da8:	2700      	movs	r7, #0

exit:
    mbedtls_platform_zeroize( salt_block, sizeof( salt_block ) );
   e2daa:	2180      	movs	r1, #128	; 0x80
   e2dac:	a836      	add	r0, sp, #216	; 0xd8
   e2dae:	f7ff ff09 	bl	e2bc4 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( pwd_block, sizeof( pwd_block ) );
   e2db2:	2180      	movs	r1, #128	; 0x80
   e2db4:	4650      	mov	r0, sl
   e2db6:	f7ff ff05 	bl	e2bc4 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( hash_block, sizeof( hash_block ) );
   e2dba:	2180      	movs	r1, #128	; 0x80
   e2dbc:	a876      	add	r0, sp, #472	; 0x1d8
   e2dbe:	f7ff ff01 	bl	e2bc4 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( hash_output, sizeof( hash_output ) );
   e2dc2:	2140      	movs	r1, #64	; 0x40
   e2dc4:	a806      	add	r0, sp, #24
   e2dc6:	f7ff fefd 	bl	e2bc4 <mbedtls_platform_zeroize>

    mbedtls_md_free( &md_ctx );
   e2dca:	a803      	add	r0, sp, #12
   e2dcc:	f7fa f85b 	bl	dce86 <mbedtls_md_free>

    return( ret );
   e2dd0:	4638      	mov	r0, r7
}
   e2dd2:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
   e2dd6:	ecbd 8b02 	vpop	{d8}
   e2dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
   e2dde:	4802      	ldr	r0, [pc, #8]	; (e2de8 <mbedtls_pkcs12_derivation+0x208>)
   e2de0:	e7f7      	b.n	e2dd2 <mbedtls_pkcs12_derivation+0x1f2>
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
   e2de2:	4802      	ldr	r0, [pc, #8]	; (e2dec <mbedtls_pkcs12_derivation+0x20c>)
   e2de4:	e7f5      	b.n	e2dd2 <mbedtls_pkcs12_derivation+0x1f2>
   e2de6:	bf00      	nop
   e2de8:	ffffe080 	.word	0xffffe080
   e2dec:	ffffe100 	.word	0xffffe100

000e2df0 <mbedtls_pkcs12_pbe>:
{
   e2df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2df4:	b0db      	sub	sp, #364	; 0x16c
   e2df6:	4604      	mov	r4, r0
    size_t olen = 0;
   e2df8:	f04f 0b00 	mov.w	fp, #0
    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
   e2dfc:	4610      	mov	r0, r2
{
   e2dfe:	9d65      	ldr	r5, [sp, #404]	; 0x194
    size_t olen = 0;
   e2e00:	f8cd b020 	str.w	fp, [sp, #32]
{
   e2e04:	4689      	mov	r9, r1
   e2e06:	4698      	mov	r8, r3
    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
   e2e08:	f7f3 fa02 	bl	d6210 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
   e2e0c:	4606      	mov	r6, r0
   e2e0e:	2800      	cmp	r0, #0
   e2e10:	f000 80b2 	beq.w	e2f78 <mbedtls_pkcs12_pbe+0x188>
    if( pwdlen > PKCS12_MAX_PWDLEN )
   e2e14:	2d80      	cmp	r5, #128	; 0x80
    keylen = cipher_info->key_bitlen / 8;
   e2e16:	6847      	ldr	r7, [r0, #4]
                                          iv, cipher_info->iv_size ) ) != 0 )
   e2e18:	f8d0 a00c 	ldr.w	sl, [r0, #12]
    int ret, iterations = 0;
   e2e1c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    if( pwdlen > PKCS12_MAX_PWDLEN )
   e2e20:	d904      	bls.n	e2e2c <mbedtls_pkcs12_pbe+0x3c>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
   e2e22:	4c57      	ldr	r4, [pc, #348]	; (e2f80 <mbedtls_pkcs12_pbe+0x190>)
}
   e2e24:	4620      	mov	r0, r4
   e2e26:	b05b      	add	sp, #364	; 0x16c
   e2e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memset( &unipwd, 0, sizeof(unipwd) );
   e2e2c:	4659      	mov	r1, fp
   e2e2e:	f44f 7281 	mov.w	r2, #258	; 0x102
   e2e32:	a819      	add	r0, sp, #100	; 0x64
    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
   e2e34:	e9cd bb0a 	strd	fp, fp, [sp, #40]	; 0x28
   e2e38:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    memset( &unipwd, 0, sizeof(unipwd) );
   e2e3c:	f005 fffe 	bl	e8e3c <memset>
    const unsigned char *end = params->p + params->len;
   e2e40:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   e2e44:	4419      	add	r1, r3
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   e2e46:	6823      	ldr	r3, [r4, #0]
   e2e48:	2b30      	cmp	r3, #48	; 0x30
    unsigned char **p = &params->p;
   e2e4a:	f104 0b08 	add.w	fp, r4, #8
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   e2e4e:	f040 8095 	bne.w	e2f7c <mbedtls_pkcs12_pbe+0x18c>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   e2e52:	2304      	movs	r3, #4
   e2e54:	aa0b      	add	r2, sp, #44	; 0x2c
   e2e56:	4658      	mov	r0, fp
   e2e58:	9107      	str	r1, [sp, #28]
   e2e5a:	f7f3 fb91 	bl	d6580 <mbedtls_asn1_get_tag>
   e2e5e:	9907      	ldr	r1, [sp, #28]
   e2e60:	b170      	cbz	r0, e2e80 <mbedtls_pkcs12_pbe+0x90>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );
   e2e62:	f5a0 54f4 	sub.w	r4, r0, #7808	; 0x1e80
    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
   e2e66:	2c00      	cmp	r4, #0
   e2e68:	d1dc      	bne.n	e2e24 <mbedtls_pkcs12_pbe+0x34>
{
   e2e6a:	2300      	movs	r3, #0
    for( i = 0; i < pwdlen; i++ )
   e2e6c:	429d      	cmp	r5, r3
   e2e6e:	d019      	beq.n	e2ea4 <mbedtls_pkcs12_pbe+0xb4>
        unipwd[i * 2 + 1] = pwd[i];
   e2e70:	9964      	ldr	r1, [sp, #400]	; 0x190
   e2e72:	aa19      	add	r2, sp, #100	; 0x64
   e2e74:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   e2e78:	5cc9      	ldrb	r1, [r1, r3]
   e2e7a:	7051      	strb	r1, [r2, #1]
    for( i = 0; i < pwdlen; i++ )
   e2e7c:	3301      	adds	r3, #1
   e2e7e:	e7f5      	b.n	e2e6c <mbedtls_pkcs12_pbe+0x7c>
    salt->p = *p;
   e2e80:	68a3      	ldr	r3, [r4, #8]
    *p += salt->len;
   e2e82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    salt->p = *p;
   e2e84:	930c      	str	r3, [sp, #48]	; 0x30
    *p += salt->len;
   e2e86:	4413      	add	r3, r2
   e2e88:	60a3      	str	r3, [r4, #8]
    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
   e2e8a:	aa09      	add	r2, sp, #36	; 0x24
   e2e8c:	4658      	mov	r0, fp
   e2e8e:	9107      	str	r1, [sp, #28]
   e2e90:	f7f3 fba3 	bl	d65da <mbedtls_asn1_get_int>
   e2e94:	9907      	ldr	r1, [sp, #28]
   e2e96:	2800      	cmp	r0, #0
   e2e98:	d1e3      	bne.n	e2e62 <mbedtls_pkcs12_pbe+0x72>
    if( *p != end )
   e2e9a:	68a3      	ldr	r3, [r4, #8]
   e2e9c:	4299      	cmp	r1, r3
   e2e9e:	d0e4      	beq.n	e2e6a <mbedtls_pkcs12_pbe+0x7a>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   e2ea0:	4c38      	ldr	r4, [pc, #224]	; (e2f84 <mbedtls_pkcs12_pbe+0x194>)
   e2ea2:	e7bf      	b.n	e2e24 <mbedtls_pkcs12_pbe+0x34>
    if( ( ret = mbedtls_pkcs12_derivation( key, keylen, unipwd, pwdlen * 2 + 2,
   e2ea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   e2ea6:	9204      	str	r2, [sp, #16]
   e2ea8:	2201      	movs	r2, #1
   e2eaa:	e9cd 8202 	strd	r8, r2, [sp, #8]
   e2eae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   e2eb0:	9201      	str	r2, [sp, #4]
    keylen = cipher_info->key_bitlen / 8;
   e2eb2:	08ff      	lsrs	r7, r7, #3
    if( ( ret = mbedtls_pkcs12_derivation( key, keylen, unipwd, pwdlen * 2 + 2,
   e2eb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   e2eb6:	9200      	str	r2, [sp, #0]
   e2eb8:	1c6b      	adds	r3, r5, #1
   e2eba:	005b      	lsls	r3, r3, #1
   e2ebc:	aa19      	add	r2, sp, #100	; 0x64
   e2ebe:	4639      	mov	r1, r7
   e2ec0:	a811      	add	r0, sp, #68	; 0x44
   e2ec2:	9307      	str	r3, [sp, #28]
   e2ec4:	f7ff fe8c 	bl	e2be0 <mbedtls_pkcs12_derivation>
   e2ec8:	4604      	mov	r4, r0
   e2eca:	2800      	cmp	r0, #0
   e2ecc:	d1aa      	bne.n	e2e24 <mbedtls_pkcs12_pbe+0x34>
    if( iv == NULL || ivlen == 0 )
   e2ece:	9b07      	ldr	r3, [sp, #28]
   e2ed0:	f1ba 0f00 	cmp.w	sl, #0
   e2ed4:	d13e      	bne.n	e2f54 <mbedtls_pkcs12_pbe+0x164>
    mbedtls_cipher_init( &cipher_ctx );
   e2ed6:	a819      	add	r0, sp, #100	; 0x64
   e2ed8:	f7f3 f9ba 	bl	d6250 <mbedtls_cipher_init>
    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
   e2edc:	4631      	mov	r1, r6
   e2ede:	a819      	add	r0, sp, #100	; 0x64
   e2ee0:	f7f3 f9ca 	bl	d6278 <mbedtls_cipher_setup>
   e2ee4:	4604      	mov	r4, r0
   e2ee6:	bb48      	cbnz	r0, e2f3c <mbedtls_pkcs12_pbe+0x14c>
    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
   e2ee8:	fa4f f389 	sxtb.w	r3, r9
   e2eec:	00fa      	lsls	r2, r7, #3
   e2eee:	a911      	add	r1, sp, #68	; 0x44
   e2ef0:	a819      	add	r0, sp, #100	; 0x64
   e2ef2:	f7f3 f9d9 	bl	d62a8 <mbedtls_cipher_setkey>
   e2ef6:	4604      	mov	r4, r0
   e2ef8:	bb00      	cbnz	r0, e2f3c <mbedtls_pkcs12_pbe+0x14c>
    if( ( ret = mbedtls_cipher_set_iv( &cipher_ctx, iv, cipher_info->iv_size ) ) != 0 )
   e2efa:	68f2      	ldr	r2, [r6, #12]
   e2efc:	a90d      	add	r1, sp, #52	; 0x34
   e2efe:	a819      	add	r0, sp, #100	; 0x64
   e2f00:	f7f3 f9f2 	bl	d62e8 <mbedtls_cipher_set_iv>
   e2f04:	4604      	mov	r4, r0
   e2f06:	b9c8      	cbnz	r0, e2f3c <mbedtls_pkcs12_pbe+0x14c>
    if( ( ret = mbedtls_cipher_reset( &cipher_ctx ) ) != 0 )
   e2f08:	a819      	add	r0, sp, #100	; 0x64
   e2f0a:	f7f3 fa0f 	bl	d632c <mbedtls_cipher_reset>
   e2f0e:	4604      	mov	r4, r0
   e2f10:	b9a0      	cbnz	r0, e2f3c <mbedtls_pkcs12_pbe+0x14c>
    if( ( ret = mbedtls_cipher_update( &cipher_ctx, data, len,
   e2f12:	ad08      	add	r5, sp, #32
   e2f14:	e9dd 2367 	ldrd	r2, r3, [sp, #412]	; 0x19c
   e2f18:	9966      	ldr	r1, [sp, #408]	; 0x198
   e2f1a:	9500      	str	r5, [sp, #0]
   e2f1c:	a819      	add	r0, sp, #100	; 0x64
   e2f1e:	f7f3 fa0f 	bl	d6340 <mbedtls_cipher_update>
   e2f22:	4604      	mov	r4, r0
   e2f24:	b950      	cbnz	r0, e2f3c <mbedtls_pkcs12_pbe+0x14c>
    if( ( ret = mbedtls_cipher_finish( &cipher_ctx, output + olen, &olen ) ) != 0 )
   e2f26:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
   e2f28:	6829      	ldr	r1, [r5, #0]
   e2f2a:	462a      	mov	r2, r5
   e2f2c:	4419      	add	r1, r3
   e2f2e:	a819      	add	r0, sp, #100	; 0x64
   e2f30:	f7f3 fa46 	bl	d63c0 <mbedtls_cipher_finish>
        ret = MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH;
   e2f34:	4b14      	ldr	r3, [pc, #80]	; (e2f88 <mbedtls_pkcs12_pbe+0x198>)
   e2f36:	1e04      	subs	r4, r0, #0
   e2f38:	bf18      	it	ne
   e2f3a:	461c      	movne	r4, r3
    mbedtls_platform_zeroize( key, sizeof( key ) );
   e2f3c:	a811      	add	r0, sp, #68	; 0x44
   e2f3e:	2120      	movs	r1, #32
   e2f40:	f7ff fe40 	bl	e2bc4 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( iv,  sizeof( iv  ) );
   e2f44:	a80d      	add	r0, sp, #52	; 0x34
   e2f46:	2110      	movs	r1, #16
   e2f48:	f7ff fe3c 	bl	e2bc4 <mbedtls_platform_zeroize>
    mbedtls_cipher_free( &cipher_ctx );
   e2f4c:	a819      	add	r0, sp, #100	; 0x64
   e2f4e:	f7f3 f983 	bl	d6258 <mbedtls_cipher_free>
    return( ret );
   e2f52:	e767      	b.n	e2e24 <mbedtls_pkcs12_pbe+0x34>
    if( ( ret = mbedtls_pkcs12_derivation( iv, ivlen, unipwd, pwdlen * 2 + 2,
   e2f54:	9a09      	ldr	r2, [sp, #36]	; 0x24
   e2f56:	9204      	str	r2, [sp, #16]
   e2f58:	2202      	movs	r2, #2
   e2f5a:	e9cd 8202 	strd	r8, r2, [sp, #8]
   e2f5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   e2f60:	9201      	str	r2, [sp, #4]
   e2f62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   e2f64:	9200      	str	r2, [sp, #0]
   e2f66:	4651      	mov	r1, sl
   e2f68:	aa19      	add	r2, sp, #100	; 0x64
   e2f6a:	a80d      	add	r0, sp, #52	; 0x34
   e2f6c:	f7ff fe38 	bl	e2be0 <mbedtls_pkcs12_derivation>
   e2f70:	4604      	mov	r4, r0
   e2f72:	2800      	cmp	r0, #0
   e2f74:	d0af      	beq.n	e2ed6 <mbedtls_pkcs12_pbe+0xe6>
   e2f76:	e755      	b.n	e2e24 <mbedtls_pkcs12_pbe+0x34>
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
   e2f78:	4c04      	ldr	r4, [pc, #16]	; (e2f8c <mbedtls_pkcs12_pbe+0x19c>)
   e2f7a:	e753      	b.n	e2e24 <mbedtls_pkcs12_pbe+0x34>
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   e2f7c:	4c04      	ldr	r4, [pc, #16]	; (e2f90 <mbedtls_pkcs12_pbe+0x1a0>)
   e2f7e:	e751      	b.n	e2e24 <mbedtls_pkcs12_pbe+0x34>
   e2f80:	ffffe080 	.word	0xffffe080
   e2f84:	ffffe11a 	.word	0xffffe11a
   e2f88:	ffffe200 	.word	0xffffe200
   e2f8c:	ffffe100 	.word	0xffffe100
   e2f90:	ffffe11e 	.word	0xffffe11e

000e2f94 <mbedtls_sha512_init>:

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
    SHA512_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
   e2f94:	22d8      	movs	r2, #216	; 0xd8
   e2f96:	2100      	movs	r1, #0
   e2f98:	f005 bf50 	b.w	e8e3c <memset>

000e2f9c <mbedtls_sha512_free>:
}

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
    if( ctx == NULL )
   e2f9c:	b110      	cbz	r0, e2fa4 <mbedtls_sha512_free+0x8>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
   e2f9e:	21d8      	movs	r1, #216	; 0xd8
   e2fa0:	f7ff be10 	b.w	e2bc4 <mbedtls_platform_zeroize>
}
   e2fa4:	4770      	bx	lr

000e2fa6 <mbedtls_sha512_clone>:

void mbedtls_sha512_clone( mbedtls_sha512_context *dst,
                           const mbedtls_sha512_context *src )
{
   e2fa6:	b508      	push	{r3, lr}
    SHA512_VALIDATE( dst != NULL );
    SHA512_VALIDATE( src != NULL );

    *dst = *src;
   e2fa8:	22d8      	movs	r2, #216	; 0xd8
   e2faa:	f005 ff1f 	bl	e8dec <memcpy>
}
   e2fae:	bd08      	pop	{r3, pc}

000e2fb0 <mbedtls_sha512_starts_ret>:
int mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )
{
    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );

    ctx->total[0] = 0;
   e2fb0:	2200      	movs	r2, #0
   e2fb2:	2300      	movs	r3, #0
   e2fb4:	e9c0 2300 	strd	r2, r3, [r0]
    ctx->total[1] = 0;
   e2fb8:	e9c0 2302 	strd	r2, r3, [r0, #8]

    if( is384 == 0 )
   e2fbc:	bb59      	cbnz	r1, e3016 <mbedtls_sha512_starts_ret+0x66>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
   e2fbe:	a32a      	add	r3, pc, #168	; (adr r3, e3068 <mbedtls_sha512_starts_ret+0xb8>)
   e2fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2fc4:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
   e2fc8:	a329      	add	r3, pc, #164	; (adr r3, e3070 <mbedtls_sha512_starts_ret+0xc0>)
   e2fca:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2fce:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
   e2fd2:	a329      	add	r3, pc, #164	; (adr r3, e3078 <mbedtls_sha512_starts_ret+0xc8>)
   e2fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2fd8:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
   e2fdc:	a328      	add	r3, pc, #160	; (adr r3, e3080 <mbedtls_sha512_starts_ret+0xd0>)
   e2fde:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2fe2:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
   e2fe6:	a328      	add	r3, pc, #160	; (adr r3, e3088 <mbedtls_sha512_starts_ret+0xd8>)
   e2fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2fec:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
   e2ff0:	a327      	add	r3, pc, #156	; (adr r3, e3090 <mbedtls_sha512_starts_ret+0xe0>)
   e2ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2ff6:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
   e2ffa:	a327      	add	r3, pc, #156	; (adr r3, e3098 <mbedtls_sha512_starts_ret+0xe8>)
   e2ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e3000:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
   e3004:	a326      	add	r3, pc, #152	; (adr r3, e30a0 <mbedtls_sha512_starts_ret+0xf0>)
   e3006:	e9d3 2300 	ldrd	r2, r3, [r3]
        ctx->state[2] = UL64(0x9159015A3070DD17);
        ctx->state[3] = UL64(0x152FECD8F70E5939);
        ctx->state[4] = UL64(0x67332667FFC00B31);
        ctx->state[5] = UL64(0x8EB44A8768581511);
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
   e300a:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    }

    ctx->is384 = is384;
   e300e:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0

    return( 0 );
}
   e3012:	2000      	movs	r0, #0
   e3014:	4770      	bx	lr
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
   e3016:	a324      	add	r3, pc, #144	; (adr r3, e30a8 <mbedtls_sha512_starts_ret+0xf8>)
   e3018:	e9d3 2300 	ldrd	r2, r3, [r3]
   e301c:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
   e3020:	a323      	add	r3, pc, #140	; (adr r3, e30b0 <mbedtls_sha512_starts_ret+0x100>)
   e3022:	e9d3 2300 	ldrd	r2, r3, [r3]
   e3026:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
   e302a:	a323      	add	r3, pc, #140	; (adr r3, e30b8 <mbedtls_sha512_starts_ret+0x108>)
   e302c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e3030:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
   e3034:	a322      	add	r3, pc, #136	; (adr r3, e30c0 <mbedtls_sha512_starts_ret+0x110>)
   e3036:	e9d3 2300 	ldrd	r2, r3, [r3]
   e303a:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
   e303e:	a322      	add	r3, pc, #136	; (adr r3, e30c8 <mbedtls_sha512_starts_ret+0x118>)
   e3040:	e9d3 2300 	ldrd	r2, r3, [r3]
   e3044:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
   e3048:	a321      	add	r3, pc, #132	; (adr r3, e30d0 <mbedtls_sha512_starts_ret+0x120>)
   e304a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e304e:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
   e3052:	a321      	add	r3, pc, #132	; (adr r3, e30d8 <mbedtls_sha512_starts_ret+0x128>)
   e3054:	e9d3 2300 	ldrd	r2, r3, [r3]
   e3058:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
   e305c:	a320      	add	r3, pc, #128	; (adr r3, e30e0 <mbedtls_sha512_starts_ret+0x130>)
   e305e:	e9d3 2300 	ldrd	r2, r3, [r3]
   e3062:	e7d2      	b.n	e300a <mbedtls_sha512_starts_ret+0x5a>
   e3064:	f3af 8000 	nop.w
   e3068:	f3bcc908 	.word	0xf3bcc908
   e306c:	6a09e667 	.word	0x6a09e667
   e3070:	84caa73b 	.word	0x84caa73b
   e3074:	bb67ae85 	.word	0xbb67ae85
   e3078:	fe94f82b 	.word	0xfe94f82b
   e307c:	3c6ef372 	.word	0x3c6ef372
   e3080:	5f1d36f1 	.word	0x5f1d36f1
   e3084:	a54ff53a 	.word	0xa54ff53a
   e3088:	ade682d1 	.word	0xade682d1
   e308c:	510e527f 	.word	0x510e527f
   e3090:	2b3e6c1f 	.word	0x2b3e6c1f
   e3094:	9b05688c 	.word	0x9b05688c
   e3098:	fb41bd6b 	.word	0xfb41bd6b
   e309c:	1f83d9ab 	.word	0x1f83d9ab
   e30a0:	137e2179 	.word	0x137e2179
   e30a4:	5be0cd19 	.word	0x5be0cd19
   e30a8:	c1059ed8 	.word	0xc1059ed8
   e30ac:	cbbb9d5d 	.word	0xcbbb9d5d
   e30b0:	367cd507 	.word	0x367cd507
   e30b4:	629a292a 	.word	0x629a292a
   e30b8:	3070dd17 	.word	0x3070dd17
   e30bc:	9159015a 	.word	0x9159015a
   e30c0:	f70e5939 	.word	0xf70e5939
   e30c4:	152fecd8 	.word	0x152fecd8
   e30c8:	ffc00b31 	.word	0xffc00b31
   e30cc:	67332667 	.word	0x67332667
   e30d0:	68581511 	.word	0x68581511
   e30d4:	8eb44a87 	.word	0x8eb44a87
   e30d8:	64f98fa7 	.word	0x64f98fa7
   e30dc:	db0c2e0d 	.word	0xdb0c2e0d
   e30e0:	befa4fa4 	.word	0xbefa4fa4
   e30e4:	47b5481d 	.word	0x47b5481d

000e30e8 <mbedtls_internal_sha512_process>:
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

int mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,
                                     const unsigned char data[128] )
{
   e30e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e30ec:	f5ad 7d3f 	sub.w	sp, sp, #764	; 0x2fc
   e30f0:	f101 0780 	add.w	r7, r1, #128	; 0x80
   e30f4:	9000      	str	r0, [sp, #0]
   e30f6:	a81e      	add	r0, sp, #120	; 0x78
   e30f8:	4606      	mov	r6, r0
        (d) += temp1; (h) = temp1 + temp2;                      \
    } while( 0 )

    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
   e30fa:	784a      	ldrb	r2, [r1, #1]
   e30fc:	780c      	ldrb	r4, [r1, #0]
   e30fe:	f891 8002 	ldrb.w	r8, [r1, #2]
   e3102:	79cb      	ldrb	r3, [r1, #7]
   e3104:	f891 a004 	ldrb.w	sl, [r1, #4]
   e3108:	0412      	lsls	r2, r2, #16
   e310a:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
   e310e:	ea42 2508 	orr.w	r5, r2, r8, lsl #8
   e3112:	794a      	ldrb	r2, [r1, #5]
   e3114:	f891 8003 	ldrb.w	r8, [r1, #3]
   e3118:	ea43 640a 	orr.w	r4, r3, sl, lsl #24
   e311c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   e3120:	798a      	ldrb	r2, [r1, #6]
   e3122:	3108      	adds	r1, #8
   e3124:	ea44 2202 	orr.w	r2, r4, r2, lsl #8
   e3128:	ea45 0508 	orr.w	r5, r5, r8
    for( i = 0; i < 16; i++ )
   e312c:	428f      	cmp	r7, r1
        GET_UINT64_BE( W[i], data, i << 3 );
   e312e:	e9c6 2500 	strd	r2, r5, [r6]
   e3132:	f106 0608 	add.w	r6, r6, #8
    for( i = 0; i < 16; i++ )
   e3136:	d1e0      	bne.n	e30fa <mbedtls_internal_sha512_process+0x12>
   e3138:	4601      	mov	r1, r0
   e313a:	2610      	movs	r6, #16
    }

    for( ; i < 80; i++ )
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
   e313c:	e9d1 421c 	ldrd	r4, r2, [r1, #112]	; 0x70
   e3140:	0ce3      	lsrs	r3, r4, #19
   e3142:	ea4f 4cd2 	mov.w	ip, r2, lsr #19
   e3146:	ea4f 08c2 	mov.w	r8, r2, lsl #3
   e314a:	ea4f 09c4 	mov.w	r9, r4, lsl #3
   e314e:	ea48 7854 	orr.w	r8, r8, r4, lsr #29
   e3152:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
   e3156:	ea4c 3c44 	orr.w	ip, ip, r4, lsl #13
   e315a:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
   e315e:	09a4      	lsrs	r4, r4, #6
   e3160:	468e      	mov	lr, r1
   e3162:	ea8c 0c08 	eor.w	ip, ip, r8
   e3166:	ea44 6482 	orr.w	r4, r4, r2, lsl #26
   e316a:	ea83 0309 	eor.w	r3, r3, r9
   e316e:	4063      	eors	r3, r4
   e3170:	ea8c 1c92 	eor.w	ip, ip, r2, lsr #6
               S0(W[i - 15]) + W[i - 16];
   e3174:	e9de 4212 	ldrd	r4, r2, [lr, #72]	; 0x48
   e3178:	e9de 8e00 	ldrd	r8, lr, [lr]
   e317c:	e9d1 7502 	ldrd	r7, r5, [r1, #8]
   e3180:	eb14 0408 	adds.w	r4, r4, r8
   e3184:	eb42 020e 	adc.w	r2, r2, lr
   e3188:	191b      	adds	r3, r3, r4
   e318a:	eb4c 0c02 	adc.w	ip, ip, r2
   e318e:	087c      	lsrs	r4, r7, #1
   e3190:	0a3a      	lsrs	r2, r7, #8
   e3192:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   e3196:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   e319a:	ea4f 0e55 	mov.w	lr, r5, lsr #1
   e319e:	ea4f 2815 	mov.w	r8, r5, lsr #8
   e31a2:	4054      	eors	r4, r2
   e31a4:	09fa      	lsrs	r2, r7, #7
   e31a6:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
   e31aa:	ea4e 7ec7 	orr.w	lr, lr, r7, lsl #31
   e31ae:	ea48 6807 	orr.w	r8, r8, r7, lsl #24
   e31b2:	ea8e 0e08 	eor.w	lr, lr, r8
   e31b6:	4062      	eors	r2, r4
   e31b8:	189a      	adds	r2, r3, r2
   e31ba:	ea8e 15d5 	eor.w	r5, lr, r5, lsr #7
    for( ; i < 80; i++ )
   e31be:	f106 0601 	add.w	r6, r6, #1
               S0(W[i - 15]) + W[i - 16];
   e31c2:	eb4c 0505 	adc.w	r5, ip, r5
   e31c6:	3108      	adds	r1, #8
    for( ; i < 80; i++ )
   e31c8:	2e50      	cmp	r6, #80	; 0x50
        W[i] = S1(W[i -  2]) + W[i -  7] +
   e31ca:	e9c1 251e 	strd	r2, r5, [r1, #120]	; 0x78
    for( ; i < 80; i++ )
   e31ce:	d1b5      	bne.n	e313c <mbedtls_internal_sha512_process+0x54>
    }

    A = ctx->state[0];
   e31d0:	9b00      	ldr	r3, [sp, #0]
   e31d2:	4926      	ldr	r1, [pc, #152]	; (e326c <mbedtls_internal_sha512_process+0x184>)
   e31d4:	691b      	ldr	r3, [r3, #16]
   e31d6:	930e      	str	r3, [sp, #56]	; 0x38
   e31d8:	9b00      	ldr	r3, [sp, #0]
   e31da:	695b      	ldr	r3, [r3, #20]
   e31dc:	930f      	str	r3, [sp, #60]	; 0x3c
    B = ctx->state[1];
   e31de:	9b00      	ldr	r3, [sp, #0]
   e31e0:	699b      	ldr	r3, [r3, #24]
   e31e2:	9310      	str	r3, [sp, #64]	; 0x40
   e31e4:	9b00      	ldr	r3, [sp, #0]
   e31e6:	69db      	ldr	r3, [r3, #28]
   e31e8:	9311      	str	r3, [sp, #68]	; 0x44
    C = ctx->state[2];
   e31ea:	9b00      	ldr	r3, [sp, #0]
   e31ec:	6a1b      	ldr	r3, [r3, #32]
   e31ee:	9312      	str	r3, [sp, #72]	; 0x48
   e31f0:	9b00      	ldr	r3, [sp, #0]
   e31f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   e31f4:	9313      	str	r3, [sp, #76]	; 0x4c
    D = ctx->state[3];
   e31f6:	9b00      	ldr	r3, [sp, #0]
   e31f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e31fa:	9314      	str	r3, [sp, #80]	; 0x50
   e31fc:	9b00      	ldr	r3, [sp, #0]
   e31fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   e3200:	9315      	str	r3, [sp, #84]	; 0x54
    E = ctx->state[4];
   e3202:	9b00      	ldr	r3, [sp, #0]
   e3204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e3206:	9316      	str	r3, [sp, #88]	; 0x58
   e3208:	9b00      	ldr	r3, [sp, #0]
   e320a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   e320c:	9317      	str	r3, [sp, #92]	; 0x5c
    F = ctx->state[5];
   e320e:	9b00      	ldr	r3, [sp, #0]
   e3210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   e3212:	9318      	str	r3, [sp, #96]	; 0x60
   e3214:	9b00      	ldr	r3, [sp, #0]
   e3216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   e3218:	9319      	str	r3, [sp, #100]	; 0x64
    G = ctx->state[6];
   e321a:	9b00      	ldr	r3, [sp, #0]
   e321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   e321e:	931a      	str	r3, [sp, #104]	; 0x68
   e3220:	9b00      	ldr	r3, [sp, #0]
   e3222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   e3224:	931b      	str	r3, [sp, #108]	; 0x6c
    H = ctx->state[7];
   e3226:	9b00      	ldr	r3, [sp, #0]
   e3228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   e322a:	931c      	str	r3, [sp, #112]	; 0x70
   e322c:	9b00      	ldr	r3, [sp, #0]
   e322e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   e3230:	931d      	str	r3, [sp, #116]	; 0x74
   e3232:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   e3234:	9305      	str	r3, [sp, #20]
   e3236:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e3238:	9306      	str	r3, [sp, #24]
    G = ctx->state[6];
   e323a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   e323c:	9307      	str	r3, [sp, #28]
   e323e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e3240:	9308      	str	r3, [sp, #32]
    F = ctx->state[5];
   e3242:	9b18      	ldr	r3, [sp, #96]	; 0x60
   e3244:	9309      	str	r3, [sp, #36]	; 0x24
   e3246:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e3248:	930a      	str	r3, [sp, #40]	; 0x28
    E = ctx->state[4];
   e324a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   e324c:	930b      	str	r3, [sp, #44]	; 0x2c
   e324e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e3250:	930c      	str	r3, [sp, #48]	; 0x30
    D = ctx->state[3];
   e3252:	e9dd a314 	ldrd	sl, r3, [sp, #80]	; 0x50
   e3256:	9301      	str	r3, [sp, #4]
    C = ctx->state[2];
   e3258:	9b12      	ldr	r3, [sp, #72]	; 0x48
   e325a:	9302      	str	r3, [sp, #8]
    B = ctx->state[1];
   e325c:	e9dd ce10 	ldrd	ip, lr, [sp, #64]	; 0x40
    C = ctx->state[2];
   e3260:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e3262:	9303      	str	r3, [sp, #12]
    A = ctx->state[0];
   e3264:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   e3266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   e3268:	9304      	str	r3, [sp, #16]
   e326a:	e001      	b.n	e3270 <mbedtls_internal_sha512_process+0x188>
   e326c:	000ed058 	.word	0x000ed058
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
   e3270:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   e3272:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   e3274:	9b04      	ldr	r3, [sp, #16]
   e3276:	ea4f 3894 	mov.w	r8, r4, lsr #14
   e327a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   e327c:	ea48 4884 	orr.w	r8, r8, r4, lsl #18
   e3280:	ea4f 3994 	mov.w	r9, r4, lsr #14
   e3284:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   e3286:	ea49 4984 	orr.w	r9, r9, r4, lsl #18
   e328a:	0ca5      	lsrs	r5, r4, #18
   e328c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   e328e:	ea45 3584 	orr.w	r5, r5, r4, lsl #14
   e3292:	0ca4      	lsrs	r4, r4, #18
   e3294:	ea44 3486 	orr.w	r4, r4, r6, lsl #14
   e3298:	ea89 0904 	eor.w	r9, r9, r4
   e329c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   e329e:	05e4      	lsls	r4, r4, #23
   e32a0:	ea44 2456 	orr.w	r4, r4, r6, lsr #9
   e32a4:	ea88 0805 	eor.w	r8, r8, r5
   e32a8:	05f5      	lsls	r5, r6, #23
   e32aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   e32ac:	ea45 2556 	orr.w	r5, r5, r6, lsr #9
   e32b0:	ea88 0805 	eor.w	r8, r8, r5
   e32b4:	ea89 0904 	eor.w	r9, r9, r4
   e32b8:	e9d1 5700 	ldrd	r5, r7, [r1]
   e32bc:	e9d0 6400 	ldrd	r6, r4, [r0]
   e32c0:	19ad      	adds	r5, r5, r6
   e32c2:	eb47 0404 	adc.w	r4, r7, r4
   e32c6:	9e09      	ldr	r6, [sp, #36]	; 0x24
   e32c8:	9f07      	ldr	r7, [sp, #28]
   e32ca:	ea86 0b07 	eor.w	fp, r6, r7
   e32ce:	9f08      	ldr	r7, [sp, #32]
   e32d0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   e32d2:	407e      	eors	r6, r7
   e32d4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   e32d6:	ea0b 0b07 	and.w	fp, fp, r7
   e32da:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   e32dc:	403e      	ands	r6, r7
   e32de:	9f07      	ldr	r7, [sp, #28]
   e32e0:	ea8b 0b07 	eor.w	fp, fp, r7
   e32e4:	9f08      	ldr	r7, [sp, #32]
   e32e6:	eb18 0505 	adds.w	r5, r8, r5
   e32ea:	eb49 0404 	adc.w	r4, r9, r4
   e32ee:	407e      	eors	r6, r7
   e32f0:	eb15 050b 	adds.w	r5, r5, fp
   e32f4:	eb46 0404 	adc.w	r4, r6, r4
   e32f8:	9e05      	ldr	r6, [sp, #20]
   e32fa:	19ad      	adds	r5, r5, r6
   e32fc:	9e06      	ldr	r6, [sp, #24]
   e32fe:	eb44 0606 	adc.w	r6, r4, r6
   e3302:	4634      	mov	r4, r6
   e3304:	eb15 060a 	adds.w	r6, r5, sl
   e3308:	9605      	str	r6, [sp, #20]
   e330a:	9e01      	ldr	r6, [sp, #4]
   e330c:	eb44 0606 	adc.w	r6, r4, r6
   e3310:	960d      	str	r6, [sp, #52]	; 0x34
   e3312:	ea4f 7913 	mov.w	r9, r3, lsr #28
   e3316:	079e      	lsls	r6, r3, #30
   e3318:	ea46 0692 	orr.w	r6, r6, r2, lsr #2
   e331c:	ea49 1902 	orr.w	r9, r9, r2, lsl #4
   e3320:	ea4f 7812 	mov.w	r8, r2, lsr #28
   e3324:	0797      	lsls	r7, r2, #30
   e3326:	ea47 0793 	orr.w	r7, r7, r3, lsr #2
   e332a:	ea48 1803 	orr.w	r8, r8, r3, lsl #4
   e332e:	ea89 0906 	eor.w	r9, r9, r6
   e3332:	065e      	lsls	r6, r3, #25
   e3334:	ea46 16d2 	orr.w	r6, r6, r2, lsr #7
   e3338:	ea88 0807 	eor.w	r8, r8, r7
   e333c:	0657      	lsls	r7, r2, #25
   e333e:	ea47 17d3 	orr.w	r7, r7, r3, lsr #7
   e3342:	ea89 0906 	eor.w	r9, r9, r6
   e3346:	ea43 060c 	orr.w	r6, r3, ip
   e334a:	9b02      	ldr	r3, [sp, #8]
   e334c:	401e      	ands	r6, r3
   e334e:	9b03      	ldr	r3, [sp, #12]
   e3350:	ea88 0807 	eor.w	r8, r8, r7
   e3354:	ea42 070e 	orr.w	r7, r2, lr
   e3358:	401f      	ands	r7, r3
   e335a:	9b04      	ldr	r3, [sp, #16]
   e335c:	ea03 0b0c 	and.w	fp, r3, ip
   e3360:	ea02 0a0e 	and.w	sl, r2, lr
   e3364:	ea46 060b 	orr.w	r6, r6, fp
   e3368:	eb19 0606 	adds.w	r6, r9, r6
   e336c:	ea47 070a 	orr.w	r7, r7, sl
   e3370:	eb48 0707 	adc.w	r7, r8, r7
   e3374:	1973      	adds	r3, r6, r5
   e3376:	9301      	str	r3, [sp, #4]
   e3378:	eb47 0304 	adc.w	r3, r7, r4
   e337c:	9306      	str	r3, [sp, #24]
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
   e337e:	e9d1 4502 	ldrd	r4, r5, [r1, #8]
   e3382:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
   e3386:	9b07      	ldr	r3, [sp, #28]
   e3388:	19a4      	adds	r4, r4, r6
   e338a:	eb47 0505 	adc.w	r5, r7, r5
   e338e:	18e4      	adds	r4, r4, r3
   e3390:	9b08      	ldr	r3, [sp, #32]
   e3392:	eb45 0803 	adc.w	r8, r5, r3
   e3396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e3398:	9d09      	ldr	r5, [sp, #36]	; 0x24
   e339a:	ea83 0a05 	eor.w	sl, r3, r5
   e339e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e33a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   e33a2:	405d      	eors	r5, r3
   e33a4:	9b05      	ldr	r3, [sp, #20]
   e33a6:	ea0a 0a03 	and.w	sl, sl, r3
   e33aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e33ac:	401d      	ands	r5, r3
   e33ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e33b0:	ea8a 0a03 	eor.w	sl, sl, r3
   e33b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e33b6:	ea85 0903 	eor.w	r9, r5, r3
   e33ba:	9b05      	ldr	r3, [sp, #20]
   e33bc:	eb14 0a0a 	adds.w	sl, r4, sl
   e33c0:	ea4f 3493 	mov.w	r4, r3, lsr #14
   e33c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e33c6:	eb48 0509 	adc.w	r5, r8, r9
   e33ca:	ea4f 3b93 	mov.w	fp, r3, lsr #14
   e33ce:	ea44 4983 	orr.w	r9, r4, r3, lsl #18
   e33d2:	9b05      	ldr	r3, [sp, #20]
   e33d4:	ea4b 4883 	orr.w	r8, fp, r3, lsl #18
   e33d8:	0c9c      	lsrs	r4, r3, #18
   e33da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e33dc:	ea4f 4b93 	mov.w	fp, r3, lsr #18
   e33e0:	ea44 3483 	orr.w	r4, r4, r3, lsl #14
   e33e4:	9b05      	ldr	r3, [sp, #20]
   e33e6:	ea4b 3683 	orr.w	r6, fp, r3, lsl #14
   e33ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e33ec:	ea88 0b06 	eor.w	fp, r8, r6
   e33f0:	ea4f 58c3 	mov.w	r8, r3, lsl #23
   e33f4:	9b05      	ldr	r3, [sp, #20]
   e33f6:	ea89 0404 	eor.w	r4, r9, r4
   e33fa:	ea48 2853 	orr.w	r8, r8, r3, lsr #9
   e33fe:	ea4f 59c3 	mov.w	r9, r3, lsl #23
   e3402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e3404:	ea49 2953 	orr.w	r9, r9, r3, lsr #9
   e3408:	ea84 0409 	eor.w	r4, r4, r9
   e340c:	9b02      	ldr	r3, [sp, #8]
   e340e:	eb1a 0404 	adds.w	r4, sl, r4
   e3412:	ea8b 0808 	eor.w	r8, fp, r8
   e3416:	eb45 0808 	adc.w	r8, r5, r8
   e341a:	18e3      	adds	r3, r4, r3
   e341c:	9307      	str	r3, [sp, #28]
   e341e:	9b03      	ldr	r3, [sp, #12]
   e3420:	eb48 0303 	adc.w	r3, r8, r3
   e3424:	9308      	str	r3, [sp, #32]
   e3426:	9b01      	ldr	r3, [sp, #4]
   e3428:	0f1f      	lsrs	r7, r3, #28
   e342a:	9b06      	ldr	r3, [sp, #24]
   e342c:	0f1e      	lsrs	r6, r3, #28
   e342e:	ea47 1703 	orr.w	r7, r7, r3, lsl #4
   e3432:	9b01      	ldr	r3, [sp, #4]
   e3434:	ea46 1903 	orr.w	r9, r6, r3, lsl #4
   e3438:	9b06      	ldr	r3, [sp, #24]
   e343a:	079e      	lsls	r6, r3, #30
   e343c:	9b01      	ldr	r3, [sp, #4]
   e343e:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
   e3442:	079d      	lsls	r5, r3, #30
   e3444:	9b06      	ldr	r3, [sp, #24]
   e3446:	ea89 0606 	eor.w	r6, r9, r6
   e344a:	ea45 0593 	orr.w	r5, r5, r3, lsr #2
   e344e:	ea4f 6943 	mov.w	r9, r3, lsl #25
   e3452:	9b01      	ldr	r3, [sp, #4]
   e3454:	406f      	eors	r7, r5
   e3456:	ea49 19d3 	orr.w	r9, r9, r3, lsr #7
   e345a:	065d      	lsls	r5, r3, #25
   e345c:	9b06      	ldr	r3, [sp, #24]
   e345e:	ea45 15d3 	orr.w	r5, r5, r3, lsr #7
   e3462:	406f      	eors	r7, r5
   e3464:	9b01      	ldr	r3, [sp, #4]
   e3466:	9d04      	ldr	r5, [sp, #16]
   e3468:	431d      	orrs	r5, r3
   e346a:	9b06      	ldr	r3, [sp, #24]
   e346c:	ea86 0609 	eor.w	r6, r6, r9
   e3470:	ea43 0902 	orr.w	r9, r3, r2
   e3474:	ea05 030c 	and.w	r3, r5, ip
   e3478:	9302      	str	r3, [sp, #8]
   e347a:	9d04      	ldr	r5, [sp, #16]
   e347c:	9b01      	ldr	r3, [sp, #4]
   e347e:	ea03 0b05 	and.w	fp, r3, r5
   e3482:	9b06      	ldr	r3, [sp, #24]
   e3484:	ea03 0a02 	and.w	sl, r3, r2
   e3488:	9b02      	ldr	r3, [sp, #8]
   e348a:	ea09 090e 	and.w	r9, r9, lr
   e348e:	ea43 050b 	orr.w	r5, r3, fp
   e3492:	197d      	adds	r5, r7, r5
   e3494:	ea49 090a 	orr.w	r9, r9, sl
   e3498:	eb46 0909 	adc.w	r9, r6, r9
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
   e349c:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
   e34a0:	192b      	adds	r3, r5, r4
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
   e34a2:	e9d1 4504 	ldrd	r4, r5, [r1, #16]
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
   e34a6:	9302      	str	r3, [sp, #8]
   e34a8:	eb49 0308 	adc.w	r3, r9, r8
   e34ac:	9303      	str	r3, [sp, #12]
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
   e34ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e34b0:	19a4      	adds	r4, r4, r6
   e34b2:	eb47 0505 	adc.w	r5, r7, r5
   e34b6:	18e4      	adds	r4, r4, r3
   e34b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e34ba:	eb45 0803 	adc.w	r8, r5, r3
   e34be:	9b05      	ldr	r3, [sp, #20]
   e34c0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   e34c2:	ea83 0a05 	eor.w	sl, r3, r5
   e34c6:	e9dd 530c 	ldrd	r5, r3, [sp, #48]	; 0x30
   e34ca:	405d      	eors	r5, r3
   e34cc:	9b07      	ldr	r3, [sp, #28]
   e34ce:	ea0a 0a03 	and.w	sl, sl, r3
   e34d2:	9b08      	ldr	r3, [sp, #32]
   e34d4:	401d      	ands	r5, r3
   e34d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e34d8:	ea8a 0a03 	eor.w	sl, sl, r3
   e34dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e34de:	ea85 0903 	eor.w	r9, r5, r3
   e34e2:	9b07      	ldr	r3, [sp, #28]
   e34e4:	eb14 0a0a 	adds.w	sl, r4, sl
   e34e8:	ea4f 3493 	mov.w	r4, r3, lsr #14
   e34ec:	9b08      	ldr	r3, [sp, #32]
   e34ee:	eb48 0509 	adc.w	r5, r8, r9
   e34f2:	ea4f 3b93 	mov.w	fp, r3, lsr #14
   e34f6:	ea44 4983 	orr.w	r9, r4, r3, lsl #18
   e34fa:	9b07      	ldr	r3, [sp, #28]
   e34fc:	ea4b 4883 	orr.w	r8, fp, r3, lsl #18
   e3500:	0c9c      	lsrs	r4, r3, #18
   e3502:	9b08      	ldr	r3, [sp, #32]
   e3504:	ea4f 4b93 	mov.w	fp, r3, lsr #18
   e3508:	ea44 3483 	orr.w	r4, r4, r3, lsl #14
   e350c:	9b07      	ldr	r3, [sp, #28]
   e350e:	ea4b 3683 	orr.w	r6, fp, r3, lsl #14
   e3512:	9b08      	ldr	r3, [sp, #32]
   e3514:	ea88 0b06 	eor.w	fp, r8, r6
   e3518:	ea4f 58c3 	mov.w	r8, r3, lsl #23
   e351c:	9b07      	ldr	r3, [sp, #28]
   e351e:	ea89 0404 	eor.w	r4, r9, r4
   e3522:	ea48 2853 	orr.w	r8, r8, r3, lsr #9
   e3526:	ea4f 59c3 	mov.w	r9, r3, lsl #23
   e352a:	9b08      	ldr	r3, [sp, #32]
   e352c:	ea49 2953 	orr.w	r9, r9, r3, lsr #9
   e3530:	ea84 0409 	eor.w	r4, r4, r9
   e3534:	eb1a 0404 	adds.w	r4, sl, r4
   e3538:	ea8b 0808 	eor.w	r8, fp, r8
   e353c:	eb45 0808 	adc.w	r8, r5, r8
   e3540:	eb14 030c 	adds.w	r3, r4, ip
   e3544:	9309      	str	r3, [sp, #36]	; 0x24
   e3546:	eb48 030e 	adc.w	r3, r8, lr
   e354a:	930a      	str	r3, [sp, #40]	; 0x28
   e354c:	9b02      	ldr	r3, [sp, #8]
   e354e:	0f1f      	lsrs	r7, r3, #28
   e3550:	9b03      	ldr	r3, [sp, #12]
   e3552:	0f1e      	lsrs	r6, r3, #28
   e3554:	ea47 1703 	orr.w	r7, r7, r3, lsl #4
   e3558:	9b02      	ldr	r3, [sp, #8]
   e355a:	ea46 1c03 	orr.w	ip, r6, r3, lsl #4
   e355e:	9b03      	ldr	r3, [sp, #12]
   e3560:	079e      	lsls	r6, r3, #30
   e3562:	9b02      	ldr	r3, [sp, #8]
   e3564:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
   e3568:	079d      	lsls	r5, r3, #30
   e356a:	9b03      	ldr	r3, [sp, #12]
   e356c:	ea8c 0606 	eor.w	r6, ip, r6
   e3570:	ea45 0593 	orr.w	r5, r5, r3, lsr #2
   e3574:	ea4f 6c43 	mov.w	ip, r3, lsl #25
   e3578:	9b02      	ldr	r3, [sp, #8]
   e357a:	406f      	eors	r7, r5
   e357c:	ea4c 1cd3 	orr.w	ip, ip, r3, lsr #7
   e3580:	065d      	lsls	r5, r3, #25
   e3582:	9b03      	ldr	r3, [sp, #12]
   e3584:	ea45 15d3 	orr.w	r5, r5, r3, lsr #7
   e3588:	406f      	eors	r7, r5
   e358a:	e9dd 3501 	ldrd	r3, r5, [sp, #4]
   e358e:	431d      	orrs	r5, r3
   e3590:	9b06      	ldr	r3, [sp, #24]
   e3592:	ea86 060c 	eor.w	r6, r6, ip
   e3596:	469c      	mov	ip, r3
   e3598:	9b03      	ldr	r3, [sp, #12]
   e359a:	ea4c 0c03 	orr.w	ip, ip, r3
   e359e:	9b04      	ldr	r3, [sp, #16]
   e35a0:	401d      	ands	r5, r3
   e35a2:	9b01      	ldr	r3, [sp, #4]
   e35a4:	469e      	mov	lr, r3
   e35a6:	9b02      	ldr	r3, [sp, #8]
   e35a8:	ea0e 0903 	and.w	r9, lr, r3
   e35ac:	9b06      	ldr	r3, [sp, #24]
   e35ae:	469e      	mov	lr, r3
   e35b0:	9b03      	ldr	r3, [sp, #12]
   e35b2:	ea0c 0c02 	and.w	ip, ip, r2
   e35b6:	ea0e 0e03 	and.w	lr, lr, r3
   e35ba:	ea45 0509 	orr.w	r5, r5, r9
   e35be:	197d      	adds	r5, r7, r5
   e35c0:	ea4c 0c0e 	orr.w	ip, ip, lr
   e35c4:	eb46 0c0c 	adc.w	ip, r6, ip
   e35c8:	eb15 0904 	adds.w	r9, r5, r4
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
   e35cc:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
   e35d0:	e9d1 4506 	ldrd	r4, r5, [r1, #24]
   e35d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
   e35d6:	eb4c 0b08 	adc.w	fp, ip, r8
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
   e35da:	19a4      	adds	r4, r4, r6
   e35dc:	eb45 0707 	adc.w	r7, r5, r7
   e35e0:	18e4      	adds	r4, r4, r3
   e35e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e35e4:	9d07      	ldr	r5, [sp, #28]
   e35e6:	eb43 0707 	adc.w	r7, r3, r7
   e35ea:	9b05      	ldr	r3, [sp, #20]
   e35ec:	ea83 0605 	eor.w	r6, r3, r5
   e35f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e35f2:	9d08      	ldr	r5, [sp, #32]
   e35f4:	405d      	eors	r5, r3
   e35f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e35f8:	401e      	ands	r6, r3
   e35fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e35fc:	401d      	ands	r5, r3
   e35fe:	9b05      	ldr	r3, [sp, #20]
   e3600:	405e      	eors	r6, r3
   e3602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e3604:	ea85 0c03 	eor.w	ip, r5, r3
   e3608:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e360a:	19a6      	adds	r6, r4, r6
   e360c:	ea4f 3493 	mov.w	r4, r3, lsr #14
   e3610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e3612:	eb47 050c 	adc.w	r5, r7, ip
   e3616:	ea4f 3e93 	mov.w	lr, r3, lsr #14
   e361a:	ea44 4c83 	orr.w	ip, r4, r3, lsl #18
   e361e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e3620:	ea4e 4883 	orr.w	r8, lr, r3, lsl #18
   e3624:	0c9c      	lsrs	r4, r3, #18
   e3626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e3628:	ea4f 4e93 	mov.w	lr, r3, lsr #18
   e362c:	ea44 3483 	orr.w	r4, r4, r3, lsl #14
   e3630:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e3632:	ea4e 3783 	orr.w	r7, lr, r3, lsl #14
   e3636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e3638:	ea88 0e07 	eor.w	lr, r8, r7
   e363c:	05df      	lsls	r7, r3, #23
   e363e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e3640:	ea8c 0404 	eor.w	r4, ip, r4
   e3644:	ea47 2753 	orr.w	r7, r7, r3, lsr #9
   e3648:	ea4f 5cc3 	mov.w	ip, r3, lsl #23
   e364c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e364e:	ea4c 2c53 	orr.w	ip, ip, r3, lsr #9
   e3652:	ea84 040c 	eor.w	r4, r4, ip
   e3656:	9b04      	ldr	r3, [sp, #16]
   e3658:	1934      	adds	r4, r6, r4
   e365a:	ea8e 0707 	eor.w	r7, lr, r7
   e365e:	eb45 0707 	adc.w	r7, r5, r7
   e3662:	eb14 0803 	adds.w	r8, r4, r3
   e3666:	eb47 0302 	adc.w	r3, r7, r2
   e366a:	930b      	str	r3, [sp, #44]	; 0x2c
   e366c:	ea4f 721b 	mov.w	r2, fp, lsr #28
   e3670:	ea4f 7519 	mov.w	r5, r9, lsr #28
   e3674:	ea4f 7389 	mov.w	r3, r9, lsl #30
   e3678:	ea42 1609 	orr.w	r6, r2, r9, lsl #4
   e367c:	ea43 039b 	orr.w	r3, r3, fp, lsr #2
   e3680:	ea45 150b 	orr.w	r5, r5, fp, lsl #4
   e3684:	ea4f 728b 	mov.w	r2, fp, lsl #30
   e3688:	ea42 0299 	orr.w	r2, r2, r9, lsr #2
   e368c:	405d      	eors	r5, r3
   e368e:	ea4f 6349 	mov.w	r3, r9, lsl #25
   e3692:	4072      	eors	r2, r6
   e3694:	ea43 13db 	orr.w	r3, r3, fp, lsr #7
   e3698:	ea4f 664b 	mov.w	r6, fp, lsl #25
   e369c:	ea46 16d9 	orr.w	r6, r6, r9, lsr #7
   e36a0:	405d      	eors	r5, r3
   e36a2:	9b02      	ldr	r3, [sp, #8]
   e36a4:	ea82 0a06 	eor.w	sl, r2, r6
   e36a8:	9a01      	ldr	r2, [sp, #4]
   e36aa:	9e03      	ldr	r6, [sp, #12]
   e36ac:	ea43 0309 	orr.w	r3, r3, r9
   e36b0:	4013      	ands	r3, r2
   e36b2:	9a06      	ldr	r2, [sp, #24]
   e36b4:	ea46 060b 	orr.w	r6, r6, fp
   e36b8:	4016      	ands	r6, r2
   e36ba:	9a02      	ldr	r2, [sp, #8]
   e36bc:	ea02 0e09 	and.w	lr, r2, r9
   e36c0:	9a03      	ldr	r2, [sp, #12]
   e36c2:	ea43 030e 	orr.w	r3, r3, lr
   e36c6:	ea02 0c0b 	and.w	ip, r2, fp
   e36ca:	18eb      	adds	r3, r5, r3
   e36cc:	ea46 060c 	orr.w	r6, r6, ip
   e36d0:	eb4a 0606 	adc.w	r6, sl, r6
   e36d4:	191b      	adds	r3, r3, r4
   e36d6:	9304      	str	r3, [sp, #16]
   e36d8:	eb46 0307 	adc.w	r3, r6, r7
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
   e36dc:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
   e36e0:	930c      	str	r3, [sp, #48]	; 0x30
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
   e36e2:	e9d1 3208 	ldrd	r3, r2, [r1, #32]
   e36e6:	191b      	adds	r3, r3, r4
   e36e8:	eb42 0505 	adc.w	r5, r2, r5
   e36ec:	9a05      	ldr	r2, [sp, #20]
   e36ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   e36f0:	eb13 0a02 	adds.w	sl, r3, r2
   e36f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e36f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   e36f8:	eb43 0505 	adc.w	r5, r3, r5
   e36fc:	9b07      	ldr	r3, [sp, #28]
   e36fe:	4053      	eors	r3, r2
   e3700:	9a08      	ldr	r2, [sp, #32]
   e3702:	4062      	eors	r2, r4
   e3704:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   e3706:	4022      	ands	r2, r4
   e3708:	9c07      	ldr	r4, [sp, #28]
   e370a:	ea03 0308 	and.w	r3, r3, r8
   e370e:	4063      	eors	r3, r4
   e3710:	9c08      	ldr	r4, [sp, #32]
   e3712:	ea82 0604 	eor.w	r6, r2, r4
   e3716:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   e3718:	eb1a 0303 	adds.w	r3, sl, r3
   e371c:	ea4f 3794 	mov.w	r7, r4, lsr #14
   e3720:	eb45 0206 	adc.w	r2, r5, r6
   e3724:	ea4f 3a98 	mov.w	sl, r8, lsr #14
   e3728:	ea47 4588 	orr.w	r5, r7, r8, lsl #18
   e372c:	ea4f 4698 	mov.w	r6, r8, lsr #18
   e3730:	0ca7      	lsrs	r7, r4, #18
   e3732:	ea46 3684 	orr.w	r6, r6, r4, lsl #14
   e3736:	ea4a 4a84 	orr.w	sl, sl, r4, lsl #18
   e373a:	ea47 3488 	orr.w	r4, r7, r8, lsl #14
   e373e:	ea85 0704 	eor.w	r7, r5, r4
   e3742:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   e3744:	ea8a 0a06 	eor.w	sl, sl, r6
   e3748:	ea4f 56c8 	mov.w	r6, r8, lsl #23
   e374c:	ea46 2654 	orr.w	r6, r6, r4, lsr #9
   e3750:	05e5      	lsls	r5, r4, #23
   e3752:	ea8a 0a06 	eor.w	sl, sl, r6
   e3756:	eb13 0a0a 	adds.w	sl, r3, sl
   e375a:	ea45 2558 	orr.w	r5, r5, r8, lsr #9
   e375e:	9b01      	ldr	r3, [sp, #4]
   e3760:	ea85 0507 	eor.w	r5, r5, r7
   e3764:	eb42 0505 	adc.w	r5, r2, r5
   e3768:	eb13 030a 	adds.w	r3, r3, sl
   e376c:	9305      	str	r3, [sp, #20]
   e376e:	9b06      	ldr	r3, [sp, #24]
   e3770:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   e3772:	416b      	adcs	r3, r5
   e3774:	9306      	str	r3, [sp, #24]
   e3776:	9b04      	ldr	r3, [sp, #16]
   e3778:	0f1c      	lsrs	r4, r3, #28
   e377a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e377c:	0f1a      	lsrs	r2, r3, #28
   e377e:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
   e3782:	9b04      	ldr	r3, [sp, #16]
   e3784:	ea42 1603 	orr.w	r6, r2, r3, lsl #4
   e3788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e378a:	079a      	lsls	r2, r3, #30
   e378c:	9b04      	ldr	r3, [sp, #16]
   e378e:	ea42 0293 	orr.w	r2, r2, r3, lsr #2
   e3792:	079b      	lsls	r3, r3, #30
   e3794:	ea43 0397 	orr.w	r3, r3, r7, lsr #2
   e3798:	405c      	eors	r4, r3
   e379a:	9b04      	ldr	r3, [sp, #16]
   e379c:	4072      	eors	r2, r6
   e379e:	067e      	lsls	r6, r7, #25
   e37a0:	ea46 16d3 	orr.w	r6, r6, r3, lsr #7
   e37a4:	065b      	lsls	r3, r3, #25
   e37a6:	ea43 13d7 	orr.w	r3, r3, r7, lsr #7
   e37aa:	405c      	eors	r4, r3
   e37ac:	9b04      	ldr	r3, [sp, #16]
   e37ae:	4072      	eors	r2, r6
   e37b0:	ea4b 0607 	orr.w	r6, fp, r7
   e37b4:	9f02      	ldr	r7, [sp, #8]
   e37b6:	ea49 0303 	orr.w	r3, r9, r3
   e37ba:	403b      	ands	r3, r7
   e37bc:	9f03      	ldr	r7, [sp, #12]
   e37be:	403e      	ands	r6, r7
   e37c0:	9f04      	ldr	r7, [sp, #16]
   e37c2:	ea09 0c07 	and.w	ip, r9, r7
   e37c6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   e37c8:	ea43 030c 	orr.w	r3, r3, ip
   e37cc:	ea0b 0707 	and.w	r7, fp, r7
   e37d0:	18e3      	adds	r3, r4, r3
   e37d2:	ea46 0607 	orr.w	r6, r6, r7
   e37d6:	eb42 0606 	adc.w	r6, r2, r6
   e37da:	eb13 0a0a 	adds.w	sl, r3, sl
   e37de:	eb46 0305 	adc.w	r3, r6, r5
   e37e2:	9301      	str	r3, [sp, #4]
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
   e37e4:	e9d0 450a 	ldrd	r4, r5, [r0, #40]	; 0x28
   e37e8:	e9d1 320a 	ldrd	r3, r2, [r1, #40]	; 0x28
   e37ec:	191b      	adds	r3, r3, r4
   e37ee:	9c07      	ldr	r4, [sp, #28]
   e37f0:	eb45 0202 	adc.w	r2, r5, r2
   e37f4:	191b      	adds	r3, r3, r4
   e37f6:	9c08      	ldr	r4, [sp, #32]
   e37f8:	eb42 0504 	adc.w	r5, r2, r4
   e37fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   e37fe:	ea82 0408 	eor.w	r4, r2, r8
   e3802:	e9dd 260a 	ldrd	r2, r6, [sp, #40]	; 0x28
   e3806:	4072      	eors	r2, r6
   e3808:	9e05      	ldr	r6, [sp, #20]
   e380a:	4034      	ands	r4, r6
   e380c:	9e06      	ldr	r6, [sp, #24]
   e380e:	4032      	ands	r2, r6
   e3810:	9e09      	ldr	r6, [sp, #36]	; 0x24
   e3812:	4074      	eors	r4, r6
   e3814:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   e3816:	191c      	adds	r4, r3, r4
   e3818:	ea82 0606 	eor.w	r6, r2, r6
   e381c:	9b05      	ldr	r3, [sp, #20]
   e381e:	eb45 0206 	adc.w	r2, r5, r6
   e3822:	9d06      	ldr	r5, [sp, #24]
   e3824:	0b9b      	lsrs	r3, r3, #14
   e3826:	ea43 4685 	orr.w	r6, r3, r5, lsl #18
   e382a:	9b05      	ldr	r3, [sp, #20]
   e382c:	0baf      	lsrs	r7, r5, #14
   e382e:	ea47 4c83 	orr.w	ip, r7, r3, lsl #18
   e3832:	0c9b      	lsrs	r3, r3, #18
   e3834:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
   e3838:	0caf      	lsrs	r7, r5, #18
   e383a:	9d05      	ldr	r5, [sp, #20]
   e383c:	ea47 3585 	orr.w	r5, r7, r5, lsl #14
   e3840:	ea8c 0705 	eor.w	r7, ip, r5
   e3844:	9d06      	ldr	r5, [sp, #24]
   e3846:	ea83 0e06 	eor.w	lr, r3, r6
   e384a:	9e05      	ldr	r6, [sp, #20]
   e384c:	9b06      	ldr	r3, [sp, #24]
   e384e:	05ed      	lsls	r5, r5, #23
   e3850:	ea45 2556 	orr.w	r5, r5, r6, lsr #9
   e3854:	05f6      	lsls	r6, r6, #23
   e3856:	ea46 2653 	orr.w	r6, r6, r3, lsr #9
   e385a:	ea8e 0306 	eor.w	r3, lr, r6
   e385e:	18e3      	adds	r3, r4, r3
   e3860:	ea87 0705 	eor.w	r7, r7, r5
   e3864:	eb42 0707 	adc.w	r7, r2, r7
   e3868:	9a02      	ldr	r2, [sp, #8]
   e386a:	930d      	str	r3, [sp, #52]	; 0x34
   e386c:	18d2      	adds	r2, r2, r3
   e386e:	9207      	str	r2, [sp, #28]
   e3870:	9a03      	ldr	r2, [sp, #12]
   e3872:	9b01      	ldr	r3, [sp, #4]
   e3874:	417a      	adcs	r2, r7
   e3876:	9208      	str	r2, [sp, #32]
   e3878:	9a01      	ldr	r2, [sp, #4]
   e387a:	ea4f 751a 	mov.w	r5, sl, lsr #28
   e387e:	0f14      	lsrs	r4, r2, #28
   e3880:	ea44 160a 	orr.w	r6, r4, sl, lsl #4
   e3884:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
   e3888:	0794      	lsls	r4, r2, #30
   e388a:	ea4f 728a 	mov.w	r2, sl, lsl #30
   e388e:	ea42 0293 	orr.w	r2, r2, r3, lsr #2
   e3892:	4055      	eors	r5, r2
   e3894:	ea44 049a 	orr.w	r4, r4, sl, lsr #2
   e3898:	ea4f 624a 	mov.w	r2, sl, lsl #25
   e389c:	ea42 12d3 	orr.w	r2, r2, r3, lsr #7
   e38a0:	4074      	eors	r4, r6
   e38a2:	065e      	lsls	r6, r3, #25
   e38a4:	9b04      	ldr	r3, [sp, #16]
   e38a6:	ea46 16da 	orr.w	r6, r6, sl, lsr #7
   e38aa:	4055      	eors	r5, r2
   e38ac:	4074      	eors	r4, r6
   e38ae:	ea43 020a 	orr.w	r2, r3, sl
   e38b2:	9e01      	ldr	r6, [sp, #4]
   e38b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e38b6:	431e      	orrs	r6, r3
   e38b8:	9b04      	ldr	r3, [sp, #16]
   e38ba:	ea03 0e0a 	and.w	lr, r3, sl
   e38be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e38c0:	469c      	mov	ip, r3
   e38c2:	9b01      	ldr	r3, [sp, #4]
   e38c4:	ea02 0209 	and.w	r2, r2, r9
   e38c8:	ea0c 0c03 	and.w	ip, ip, r3
   e38cc:	ea06 060b 	and.w	r6, r6, fp
   e38d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e38d2:	ea42 020e 	orr.w	r2, r2, lr
   e38d6:	18aa      	adds	r2, r5, r2
   e38d8:	ea46 060c 	orr.w	r6, r6, ip
   e38dc:	eb44 0606 	adc.w	r6, r4, r6
   e38e0:	18d3      	adds	r3, r2, r3
   e38e2:	9302      	str	r3, [sp, #8]
   e38e4:	eb46 0307 	adc.w	r3, r6, r7
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
   e38e8:	e9d0 450c 	ldrd	r4, r5, [r0, #48]	; 0x30
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
   e38ec:	9303      	str	r3, [sp, #12]
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
   e38ee:	e9d1 320c 	ldrd	r3, r2, [r1, #48]	; 0x30
   e38f2:	eb13 0c04 	adds.w	ip, r3, r4
   e38f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e38f8:	9c06      	ldr	r4, [sp, #24]
   e38fa:	eb42 0e05 	adc.w	lr, r2, r5
   e38fe:	eb1c 0c03 	adds.w	ip, ip, r3
   e3902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e3904:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   e3906:	eb4e 0e03 	adc.w	lr, lr, r3
   e390a:	9b05      	ldr	r3, [sp, #20]
   e390c:	ea82 0604 	eor.w	r6, r2, r4
   e3910:	9a07      	ldr	r2, [sp, #28]
   e3912:	ea88 0303 	eor.w	r3, r8, r3
   e3916:	4013      	ands	r3, r2
   e3918:	ea83 0308 	eor.w	r3, r3, r8
   e391c:	9a08      	ldr	r2, [sp, #32]
   e391e:	eb1c 0c03 	adds.w	ip, ip, r3
   e3922:	9b07      	ldr	r3, [sp, #28]
   e3924:	ea06 0602 	and.w	r6, r6, r2
   e3928:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   e392a:	ea4f 3493 	mov.w	r4, r3, lsr #14
   e392e:	9b08      	ldr	r3, [sp, #32]
   e3930:	ea86 0602 	eor.w	r6, r6, r2
   e3934:	9a07      	ldr	r2, [sp, #28]
   e3936:	eb4e 0e06 	adc.w	lr, lr, r6
   e393a:	ea44 4683 	orr.w	r6, r4, r3, lsl #18
   e393e:	0b9b      	lsrs	r3, r3, #14
   e3940:	ea43 4582 	orr.w	r5, r3, r2, lsl #18
   e3944:	9b08      	ldr	r3, [sp, #32]
   e3946:	0c94      	lsrs	r4, r2, #18
   e3948:	ea44 3283 	orr.w	r2, r4, r3, lsl #14
   e394c:	9c07      	ldr	r4, [sp, #28]
   e394e:	0c9b      	lsrs	r3, r3, #18
   e3950:	ea43 3384 	orr.w	r3, r3, r4, lsl #14
   e3954:	ea86 0402 	eor.w	r4, r6, r2
   e3958:	9a08      	ldr	r2, [sp, #32]
   e395a:	9e08      	ldr	r6, [sp, #32]
   e395c:	406b      	eors	r3, r5
   e395e:	05d5      	lsls	r5, r2, #23
   e3960:	9a07      	ldr	r2, [sp, #28]
   e3962:	ea45 2552 	orr.w	r5, r5, r2, lsr #9
   e3966:	05d2      	lsls	r2, r2, #23
   e3968:	ea42 2256 	orr.w	r2, r2, r6, lsr #9
   e396c:	4062      	eors	r2, r4
   e396e:	eb1c 0c02 	adds.w	ip, ip, r2
   e3972:	ea83 0305 	eor.w	r3, r3, r5
   e3976:	eb4e 0e03 	adc.w	lr, lr, r3
   e397a:	eb19 030c 	adds.w	r3, r9, ip
   e397e:	9309      	str	r3, [sp, #36]	; 0x24
   e3980:	eb4b 030e 	adc.w	r3, fp, lr
   e3984:	930a      	str	r3, [sp, #40]	; 0x28
   e3986:	9b02      	ldr	r3, [sp, #8]
   e3988:	9e03      	ldr	r6, [sp, #12]
   e398a:	0f1c      	lsrs	r4, r3, #28
   e398c:	9b03      	ldr	r3, [sp, #12]
   e398e:	0f1a      	lsrs	r2, r3, #28
   e3990:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
   e3994:	9b02      	ldr	r3, [sp, #8]
   e3996:	ea42 1503 	orr.w	r5, r2, r3, lsl #4
   e399a:	9b03      	ldr	r3, [sp, #12]
   e399c:	079a      	lsls	r2, r3, #30
   e399e:	9b02      	ldr	r3, [sp, #8]
   e39a0:	ea42 0293 	orr.w	r2, r2, r3, lsr #2
   e39a4:	079b      	lsls	r3, r3, #30
   e39a6:	ea43 0396 	orr.w	r3, r3, r6, lsr #2
   e39aa:	405c      	eors	r4, r3
   e39ac:	9b02      	ldr	r3, [sp, #8]
   e39ae:	406a      	eors	r2, r5
   e39b0:	0675      	lsls	r5, r6, #25
   e39b2:	ea45 15d3 	orr.w	r5, r5, r3, lsr #7
   e39b6:	065b      	lsls	r3, r3, #25
   e39b8:	ea43 13d6 	orr.w	r3, r3, r6, lsr #7
   e39bc:	406a      	eors	r2, r5
   e39be:	9d01      	ldr	r5, [sp, #4]
   e39c0:	405c      	eors	r4, r3
   e39c2:	9b02      	ldr	r3, [sp, #8]
   e39c4:	4335      	orrs	r5, r6
   e39c6:	9e04      	ldr	r6, [sp, #16]
   e39c8:	ea4a 0303 	orr.w	r3, sl, r3
   e39cc:	4033      	ands	r3, r6
   e39ce:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   e39d0:	4035      	ands	r5, r6
   e39d2:	9e02      	ldr	r6, [sp, #8]
   e39d4:	ea0a 0706 	and.w	r7, sl, r6
   e39d8:	9e01      	ldr	r6, [sp, #4]
   e39da:	46b1      	mov	r9, r6
   e39dc:	9e03      	ldr	r6, [sp, #12]
   e39de:	433b      	orrs	r3, r7
   e39e0:	ea09 0606 	and.w	r6, r9, r6
   e39e4:	18e3      	adds	r3, r4, r3
   e39e6:	ea45 0506 	orr.w	r5, r5, r6
   e39ea:	eb42 0505 	adc.w	r5, r2, r5
   e39ee:	eb13 0c0c 	adds.w	ip, r3, ip
   e39f2:	eb45 0e0e 	adc.w	lr, r5, lr
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
   e39f6:	e9d1 320e 	ldrd	r3, r2, [r1, #56]	; 0x38
   e39fa:	e9d0 450e 	ldrd	r4, r5, [r0, #56]	; 0x38
   e39fe:	191b      	adds	r3, r3, r4
   e3a00:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   e3a02:	eb45 0202 	adc.w	r2, r5, r2
   e3a06:	eb13 0308 	adds.w	r3, r3, r8
   e3a0a:	eb42 0504 	adc.w	r5, r2, r4
   e3a0e:	9a05      	ldr	r2, [sp, #20]
   e3a10:	9c07      	ldr	r4, [sp, #28]
   e3a12:	9e08      	ldr	r6, [sp, #32]
   e3a14:	4054      	eors	r4, r2
   e3a16:	9a06      	ldr	r2, [sp, #24]
   e3a18:	4072      	eors	r2, r6
   e3a1a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   e3a1c:	4034      	ands	r4, r6
   e3a1e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   e3a20:	4032      	ands	r2, r6
   e3a22:	9e05      	ldr	r6, [sp, #20]
   e3a24:	4074      	eors	r4, r6
   e3a26:	eb13 0b04 	adds.w	fp, r3, r4
   e3a2a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   e3a2c:	9e06      	ldr	r6, [sp, #24]
   e3a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e3a30:	ea4f 3794 	mov.w	r7, r4, lsr #14
   e3a34:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   e3a36:	ea82 0606 	eor.w	r6, r2, r6
   e3a3a:	eb45 0206 	adc.w	r2, r5, r6
   e3a3e:	ea47 4984 	orr.w	r9, r7, r4, lsl #18
   e3a42:	0ba6      	lsrs	r6, r4, #14
   e3a44:	9c09      	ldr	r4, [sp, #36]	; 0x24
   e3a46:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   e3a48:	ea46 4884 	orr.w	r8, r6, r4, lsl #18
   e3a4c:	0ca7      	lsrs	r7, r4, #18
   e3a4e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   e3a50:	0cae      	lsrs	r6, r5, #18
   e3a52:	ea47 3484 	orr.w	r4, r7, r4, lsl #14
   e3a56:	9d09      	ldr	r5, [sp, #36]	; 0x24
   e3a58:	ea89 0704 	eor.w	r7, r9, r4
   e3a5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   e3a5e:	ea46 3585 	orr.w	r5, r6, r5, lsl #14
   e3a62:	ea88 0605 	eor.w	r6, r8, r5
   e3a66:	05e5      	lsls	r5, r4, #23
   e3a68:	9c09      	ldr	r4, [sp, #36]	; 0x24
   e3a6a:	ea45 2554 	orr.w	r5, r5, r4, lsr #9
   e3a6e:	05e4      	lsls	r4, r4, #23
   e3a70:	ea44 2453 	orr.w	r4, r4, r3, lsr #9
   e3a74:	407c      	eors	r4, r7
   e3a76:	9b04      	ldr	r3, [sp, #16]
   e3a78:	eb1b 0404 	adds.w	r4, fp, r4
   e3a7c:	ea85 0506 	eor.w	r5, r5, r6
   e3a80:	eb42 0505 	adc.w	r5, r2, r5
   e3a84:	191b      	adds	r3, r3, r4
   e3a86:	930b      	str	r3, [sp, #44]	; 0x2c
   e3a88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e3a8a:	416b      	adcs	r3, r5
   e3a8c:	930c      	str	r3, [sp, #48]	; 0x30
   e3a8e:	ea4f 771c 	mov.w	r7, ip, lsr #28
   e3a92:	ea4f 738c 	mov.w	r3, ip, lsl #30
   e3a96:	ea43 039e 	orr.w	r3, r3, lr, lsr #2
   e3a9a:	ea47 170e 	orr.w	r7, r7, lr, lsl #4
   e3a9e:	405f      	eors	r7, r3
   e3aa0:	ea4f 634c 	mov.w	r3, ip, lsl #25
   e3aa4:	ea4f 721e 	mov.w	r2, lr, lsr #28
   e3aa8:	ea43 13de 	orr.w	r3, r3, lr, lsr #7
   e3aac:	ea42 180c 	orr.w	r8, r2, ip, lsl #4
   e3ab0:	405f      	eors	r7, r3
   e3ab2:	ea4f 728e 	mov.w	r2, lr, lsl #30
   e3ab6:	9b02      	ldr	r3, [sp, #8]
   e3ab8:	ea42 029c 	orr.w	r2, r2, ip, lsr #2
   e3abc:	ea88 0202 	eor.w	r2, r8, r2
   e3ac0:	ea43 060c 	orr.w	r6, r3, ip
   e3ac4:	ea4f 684e 	mov.w	r8, lr, lsl #25
   e3ac8:	9b03      	ldr	r3, [sp, #12]
   e3aca:	ea48 18dc 	orr.w	r8, r8, ip, lsr #7
   e3ace:	ea82 0208 	eor.w	r2, r2, r8
   e3ad2:	ea43 080e 	orr.w	r8, r3, lr
   e3ad6:	9b01      	ldr	r3, [sp, #4]
   e3ad8:	ea08 0803 	and.w	r8, r8, r3
   e3adc:	9b02      	ldr	r3, [sp, #8]
   e3ade:	ea03 0b0c 	and.w	fp, r3, ip
   e3ae2:	9b03      	ldr	r3, [sp, #12]
   e3ae4:	ea06 060a 	and.w	r6, r6, sl
   e3ae8:	ea03 090e 	and.w	r9, r3, lr
   e3aec:	ea4b 0306 	orr.w	r3, fp, r6
   e3af0:	18fb      	adds	r3, r7, r3
   e3af2:	ea48 0809 	orr.w	r8, r8, r9
   e3af6:	eb42 0208 	adc.w	r2, r2, r8
   e3afa:	191b      	adds	r3, r3, r4
   e3afc:	9304      	str	r3, [sp, #16]
    }
    while( i < 80 );
   e3afe:	4b2c      	ldr	r3, [pc, #176]	; (e3bb0 <mbedtls_internal_sha512_process+0xac8>)
   e3b00:	f101 0140 	add.w	r1, r1, #64	; 0x40
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
   e3b04:	eb45 0202 	adc.w	r2, r5, r2
    while( i < 80 );
   e3b08:	428b      	cmp	r3, r1
   e3b0a:	f100 0040 	add.w	r0, r0, #64	; 0x40
   e3b0e:	f47f abaf 	bne.w	e3270 <mbedtls_internal_sha512_process+0x188>

    ctx->state[0] += A;
   e3b12:	9904      	ldr	r1, [sp, #16]
   e3b14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
   e3b16:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    ctx->state[5] += F;
   e3b18:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    ctx->state[0] += A;
   e3b1a:	185b      	adds	r3, r3, r1
   e3b1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   e3b1e:	eb41 0202 	adc.w	r2, r1, r2
   e3b22:	9900      	ldr	r1, [sp, #0]
   e3b24:	610b      	str	r3, [r1, #16]
    ctx->state[1] += B;
   e3b26:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ctx->state[0] += A;
   e3b28:	614a      	str	r2, [r1, #20]
    ctx->state[1] += B;
   e3b2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   e3b2c:	eb13 030c 	adds.w	r3, r3, ip
   e3b30:	eb42 020e 	adc.w	r2, r2, lr
   e3b34:	618b      	str	r3, [r1, #24]
   e3b36:	61ca      	str	r2, [r1, #28]
    ctx->state[2] += C;
   e3b38:	9b12      	ldr	r3, [sp, #72]	; 0x48
   e3b3a:	9a02      	ldr	r2, [sp, #8]
   e3b3c:	9913      	ldr	r1, [sp, #76]	; 0x4c
   e3b3e:	189b      	adds	r3, r3, r2
   e3b40:	9a03      	ldr	r2, [sp, #12]
   e3b42:	eb41 0202 	adc.w	r2, r1, r2
   e3b46:	9900      	ldr	r1, [sp, #0]
   e3b48:	620b      	str	r3, [r1, #32]
    ctx->state[3] += D;
   e3b4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ctx->state[2] += C;
   e3b4c:	624a      	str	r2, [r1, #36]	; 0x24
    ctx->state[3] += D;
   e3b4e:	9915      	ldr	r1, [sp, #84]	; 0x54
   e3b50:	9a01      	ldr	r2, [sp, #4]
   e3b52:	eb13 030a 	adds.w	r3, r3, sl
   e3b56:	eb41 0202 	adc.w	r2, r1, r2
   e3b5a:	9900      	ldr	r1, [sp, #0]
   e3b5c:	628b      	str	r3, [r1, #40]	; 0x28
   e3b5e:	62ca      	str	r2, [r1, #44]	; 0x2c
    ctx->state[4] += E;
   e3b60:	9b16      	ldr	r3, [sp, #88]	; 0x58
   e3b62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   e3b64:	189c      	adds	r4, r3, r2
   e3b66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ctx->state[5] += F;
   e3b68:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ctx->state[4] += E;
   e3b6a:	eb43 0707 	adc.w	r7, r3, r7
    ctx->state[5] += F;
   e3b6e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ctx->state[4] += E;
   e3b70:	e9c1 470c 	strd	r4, r7, [r1, #48]	; 0x30
    ctx->state[5] += F;
   e3b74:	189c      	adds	r4, r3, r2
   e3b76:	9b19      	ldr	r3, [sp, #100]	; 0x64
    ctx->state[6] += G;
   e3b78:	9a07      	ldr	r2, [sp, #28]
    ctx->state[5] += F;
   e3b7a:	eb43 0505 	adc.w	r5, r3, r5
    ctx->state[6] += G;
   e3b7e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    ctx->state[5] += F;
   e3b80:	e9c1 450e 	strd	r4, r5, [r1, #56]	; 0x38
    ctx->state[6] += G;
   e3b84:	189c      	adds	r4, r3, r2
   e3b86:	9d08      	ldr	r5, [sp, #32]
   e3b88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ctx->state[7] += H;
   e3b8a:	9a05      	ldr	r2, [sp, #20]
    ctx->state[6] += G;
   e3b8c:	eb43 0505 	adc.w	r5, r3, r5
    ctx->state[7] += H;
   e3b90:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    ctx->state[6] += G;
   e3b92:	e9c1 4510 	strd	r4, r5, [r1, #64]	; 0x40
    ctx->state[7] += H;
   e3b96:	189d      	adds	r5, r3, r2
   e3b98:	9c06      	ldr	r4, [sp, #24]
   e3b9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74

    return( 0 );
}
   e3b9c:	f04f 0000 	mov.w	r0, #0
    ctx->state[7] += H;
   e3ba0:	eb43 0404 	adc.w	r4, r3, r4
   e3ba4:	e9c1 5412 	strd	r5, r4, [r1, #72]	; 0x48
}
   e3ba8:	f50d 7d3f 	add.w	sp, sp, #764	; 0x2fc
   e3bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e3bb0:	000ed2d8 	.word	0x000ed2d8

000e3bb4 <mbedtls_sha512_update_ret>:
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
   e3bb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e3bb8:	4605      	mov	r5, r0
   e3bba:	460e      	mov	r6, r1
    unsigned int left;

    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
   e3bbc:	4614      	mov	r4, r2
   e3bbe:	b912      	cbnz	r2, e3bc6 <mbedtls_sha512_update_ret+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
   e3bc0:	2000      	movs	r0, #0
}
   e3bc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    left = (unsigned int) (ctx->total[0] & 0x7F);
   e3bc6:	e9d0 ab00 	ldrd	sl, fp, [r0]
   e3bca:	2300      	movs	r3, #0
   e3bcc:	eb1a 0002 	adds.w	r0, sl, r2
   e3bd0:	eb5b 0103 	adcs.w	r1, fp, r3
   e3bd4:	f04f 0800 	mov.w	r8, #0
   e3bd8:	f04f 0900 	mov.w	r9, #0
   e3bdc:	bf24      	itt	cs
   e3bde:	f04f 0801 	movcs.w	r8, #1
   e3be2:	f04f 0900 	movcs.w	r9, #0
    if( ctx->total[0] < (uint64_t) ilen )
   e3be6:	ea58 0309 	orrs.w	r3, r8, r9
    ctx->total[0] += (uint64_t) ilen;
   e3bea:	e9c5 0100 	strd	r0, r1, [r5]
    left = (unsigned int) (ctx->total[0] & 0x7F);
   e3bee:	f00a 077f 	and.w	r7, sl, #127	; 0x7f
    if( ctx->total[0] < (uint64_t) ilen )
   e3bf2:	d006      	beq.n	e3c02 <mbedtls_sha512_update_ret+0x4e>
        ctx->total[1]++;
   e3bf4:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   e3bf8:	3301      	adds	r3, #1
   e3bfa:	f142 0200 	adc.w	r2, r2, #0
   e3bfe:	e9c5 3202 	strd	r3, r2, [r5, #8]
    if( left && ilen >= fill )
   e3c02:	b1af      	cbz	r7, e3c30 <mbedtls_sha512_update_ret+0x7c>
    fill = 128 - left;
   e3c04:	f1c7 0980 	rsb	r9, r7, #128	; 0x80
    if( left && ilen >= fill )
   e3c08:	454c      	cmp	r4, r9
   e3c0a:	d311      	bcc.n	e3c30 <mbedtls_sha512_update_ret+0x7c>
        memcpy( (void *) (ctx->buffer + left), input, fill );
   e3c0c:	f105 0850 	add.w	r8, r5, #80	; 0x50
   e3c10:	4631      	mov	r1, r6
   e3c12:	464a      	mov	r2, r9
   e3c14:	eb08 0007 	add.w	r0, r8, r7
   e3c18:	f005 f8e8 	bl	e8dec <memcpy>
        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
   e3c1c:	4641      	mov	r1, r8
   e3c1e:	4628      	mov	r0, r5
   e3c20:	f7ff fa62 	bl	e30e8 <mbedtls_internal_sha512_process>
   e3c24:	2800      	cmp	r0, #0
   e3c26:	d1cc      	bne.n	e3bc2 <mbedtls_sha512_update_ret+0xe>
        ilen  -= fill;
   e3c28:	3c80      	subs	r4, #128	; 0x80
   e3c2a:	443c      	add	r4, r7
        input += fill;
   e3c2c:	444e      	add	r6, r9
        left = 0;
   e3c2e:	4607      	mov	r7, r0
   e3c30:	4426      	add	r6, r4
    while( ilen >= 128 )
   e3c32:	2c7f      	cmp	r4, #127	; 0x7f
   e3c34:	eba6 0104 	sub.w	r1, r6, r4
   e3c38:	d906      	bls.n	e3c48 <mbedtls_sha512_update_ret+0x94>
        if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )
   e3c3a:	4628      	mov	r0, r5
   e3c3c:	f7ff fa54 	bl	e30e8 <mbedtls_internal_sha512_process>
   e3c40:	2800      	cmp	r0, #0
   e3c42:	d1be      	bne.n	e3bc2 <mbedtls_sha512_update_ret+0xe>
        ilen  -= 128;
   e3c44:	3c80      	subs	r4, #128	; 0x80
    while( ilen >= 128 )
   e3c46:	e7f4      	b.n	e3c32 <mbedtls_sha512_update_ret+0x7e>
    if( ilen > 0 )
   e3c48:	2c00      	cmp	r4, #0
   e3c4a:	d0b9      	beq.n	e3bc0 <mbedtls_sha512_update_ret+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
   e3c4c:	f105 0050 	add.w	r0, r5, #80	; 0x50
   e3c50:	4622      	mov	r2, r4
   e3c52:	4438      	add	r0, r7
   e3c54:	f005 f8ca 	bl	e8dec <memcpy>
   e3c58:	e7b2      	b.n	e3bc0 <mbedtls_sha512_update_ret+0xc>

000e3c5a <mbedtls_sha512_finish_ret>:
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
   e3c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
   e3c5c:	6803      	ldr	r3, [r0, #0]
   e3c5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f

    ctx->buffer[used++] = 0x80;
   e3c62:	1c5a      	adds	r2, r3, #1
   e3c64:	4403      	add	r3, r0
{
   e3c66:	460d      	mov	r5, r1
   e3c68:	f100 0650 	add.w	r6, r0, #80	; 0x50
    ctx->buffer[used++] = 0x80;
   e3c6c:	2180      	movs	r1, #128	; 0x80

    if( used <= 112 )
   e3c6e:	2a70      	cmp	r2, #112	; 0x70
{
   e3c70:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
   e3c72:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
    if( used <= 112 )
   e3c76:	eb06 0002 	add.w	r0, r6, r2
   e3c7a:	f200 80fb 	bhi.w	e3e74 <mbedtls_sha512_finish_ret+0x21a>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 112 - used );
   e3c7e:	f1c2 0270 	rsb	r2, r2, #112	; 0x70
   e3c82:	2100      	movs	r1, #0
        memset( ctx->buffer + used, 0, 128 - used );

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 112 );
   e3c84:	f005 f8da 	bl	e8e3c <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
   e3c88:	e9d4 7202 	ldrd	r7, r2, [r4, #8]
    high = ( ctx->total[0] >> 61 )
   e3c8c:	e9d4 1300 	ldrd	r1, r3, [r4]
         | ( ctx->total[1] <<  3 );
   e3c90:	00d2      	lsls	r2, r2, #3
   e3c92:	ea42 7257 	orr.w	r2, r2, r7, lsr #29
    high = ( ctx->total[0] >> 61 )
   e3c96:	0f58      	lsrs	r0, r3, #29
   e3c98:	ea40 00c7 	orr.w	r0, r0, r7, lsl #3
    low  = ( ctx->total[0] <<  3 );
   e3c9c:	00db      	lsls	r3, r3, #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
   e3c9e:	0e17      	lsrs	r7, r2, #24
    low  = ( ctx->total[0] <<  3 );
   e3ca0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
    PUT_UINT64_BE( high, ctx->buffer, 112 );
   e3ca4:	f884 70c0 	strb.w	r7, [r4, #192]	; 0xc0
   e3ca8:	0c17      	lsrs	r7, r2, #16
   e3caa:	f884 70c1 	strb.w	r7, [r4, #193]	; 0xc1
   e3cae:	f884 20c3 	strb.w	r2, [r4, #195]	; 0xc3
   e3cb2:	0a17      	lsrs	r7, r2, #8
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
   e3cb4:	0e1a      	lsrs	r2, r3, #24
    low  = ( ctx->total[0] <<  3 );
   e3cb6:	00c9      	lsls	r1, r1, #3
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
   e3cb8:	f884 20c8 	strb.w	r2, [r4, #200]	; 0xc8
   e3cbc:	0c1a      	lsrs	r2, r3, #16
   e3cbe:	ba00      	rev	r0, r0
   e3cc0:	ba09      	rev	r1, r1
   e3cc2:	f884 20c9 	strb.w	r2, [r4, #201]	; 0xc9
   e3cc6:	0a1a      	lsrs	r2, r3, #8
    PUT_UINT64_BE( high, ctx->buffer, 112 );
   e3cc8:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
   e3ccc:	f8c4 10cc 	str.w	r1, [r4, #204]	; 0xcc
    PUT_UINT64_BE( high, ctx->buffer, 112 );
   e3cd0:	f884 70c2 	strb.w	r7, [r4, #194]	; 0xc2
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
   e3cd4:	f884 20ca 	strb.w	r2, [r4, #202]	; 0xca
   e3cd8:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb

    if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
   e3cdc:	4631      	mov	r1, r6
   e3cde:	4620      	mov	r0, r4
   e3ce0:	f7ff fa02 	bl	e30e8 <mbedtls_internal_sha512_process>
   e3ce4:	2800      	cmp	r0, #0
   e3ce6:	f040 80c4 	bne.w	e3e72 <mbedtls_sha512_finish_ret+0x218>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT64_BE( ctx->state[0], output,  0 );
   e3cea:	7de3      	ldrb	r3, [r4, #23]
   e3cec:	702b      	strb	r3, [r5, #0]
   e3cee:	8ae3      	ldrh	r3, [r4, #22]
   e3cf0:	706b      	strb	r3, [r5, #1]
   e3cf2:	6963      	ldr	r3, [r4, #20]
   e3cf4:	0a1b      	lsrs	r3, r3, #8
   e3cf6:	70ab      	strb	r3, [r5, #2]
   e3cf8:	6963      	ldr	r3, [r4, #20]
   e3cfa:	70eb      	strb	r3, [r5, #3]
   e3cfc:	7ce3      	ldrb	r3, [r4, #19]
   e3cfe:	712b      	strb	r3, [r5, #4]
   e3d00:	8a63      	ldrh	r3, [r4, #18]
   e3d02:	716b      	strb	r3, [r5, #5]
   e3d04:	6923      	ldr	r3, [r4, #16]
   e3d06:	0a1b      	lsrs	r3, r3, #8
   e3d08:	71ab      	strb	r3, [r5, #6]
   e3d0a:	6923      	ldr	r3, [r4, #16]
   e3d0c:	71eb      	strb	r3, [r5, #7]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
   e3d0e:	7fe3      	ldrb	r3, [r4, #31]
   e3d10:	722b      	strb	r3, [r5, #8]
   e3d12:	8be3      	ldrh	r3, [r4, #30]
   e3d14:	726b      	strb	r3, [r5, #9]
   e3d16:	69e3      	ldr	r3, [r4, #28]
   e3d18:	0a1b      	lsrs	r3, r3, #8
   e3d1a:	72ab      	strb	r3, [r5, #10]
   e3d1c:	69e3      	ldr	r3, [r4, #28]
   e3d1e:	72eb      	strb	r3, [r5, #11]
   e3d20:	7ee3      	ldrb	r3, [r4, #27]
   e3d22:	732b      	strb	r3, [r5, #12]
   e3d24:	8b63      	ldrh	r3, [r4, #26]
   e3d26:	736b      	strb	r3, [r5, #13]
   e3d28:	69a3      	ldr	r3, [r4, #24]
   e3d2a:	0a1b      	lsrs	r3, r3, #8
   e3d2c:	73ab      	strb	r3, [r5, #14]
   e3d2e:	69a3      	ldr	r3, [r4, #24]
   e3d30:	73eb      	strb	r3, [r5, #15]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
   e3d32:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   e3d36:	742b      	strb	r3, [r5, #16]
   e3d38:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   e3d3a:	746b      	strb	r3, [r5, #17]
   e3d3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e3d3e:	0a1b      	lsrs	r3, r3, #8
   e3d40:	74ab      	strb	r3, [r5, #18]
   e3d42:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e3d44:	74eb      	strb	r3, [r5, #19]
   e3d46:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   e3d4a:	752b      	strb	r3, [r5, #20]
   e3d4c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   e3d4e:	756b      	strb	r3, [r5, #21]
   e3d50:	6a23      	ldr	r3, [r4, #32]
   e3d52:	0a1b      	lsrs	r3, r3, #8
   e3d54:	75ab      	strb	r3, [r5, #22]
   e3d56:	6a23      	ldr	r3, [r4, #32]
   e3d58:	75eb      	strb	r3, [r5, #23]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
   e3d5a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   e3d5e:	762b      	strb	r3, [r5, #24]
   e3d60:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   e3d62:	766b      	strb	r3, [r5, #25]
   e3d64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e3d66:	0a1b      	lsrs	r3, r3, #8
   e3d68:	76ab      	strb	r3, [r5, #26]
   e3d6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e3d6c:	76eb      	strb	r3, [r5, #27]
   e3d6e:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   e3d72:	772b      	strb	r3, [r5, #28]
   e3d74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   e3d76:	776b      	strb	r3, [r5, #29]
   e3d78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   e3d7a:	0a1b      	lsrs	r3, r3, #8
   e3d7c:	77ab      	strb	r3, [r5, #30]
   e3d7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   e3d80:	77eb      	strb	r3, [r5, #31]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
   e3d82:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   e3d86:	f885 3020 	strb.w	r3, [r5, #32]
   e3d8a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   e3d8c:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
   e3d90:	6b63      	ldr	r3, [r4, #52]	; 0x34
   e3d92:	0a1b      	lsrs	r3, r3, #8
   e3d94:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   e3d98:	6b63      	ldr	r3, [r4, #52]	; 0x34
   e3d9a:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
   e3d9e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   e3da2:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
   e3da6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   e3da8:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
   e3dac:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e3dae:	0a1b      	lsrs	r3, r3, #8
   e3db0:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
   e3db4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e3db6:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
    PUT_UINT64_BE( ctx->state[5], output, 40 );
   e3dba:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   e3dbe:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
   e3dc2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
   e3dc4:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
   e3dc8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e3dca:	0a1b      	lsrs	r3, r3, #8
   e3dcc:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
   e3dd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e3dd2:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
   e3dd6:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   e3dda:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
   e3dde:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
   e3de0:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
   e3de4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e3de6:	0a1b      	lsrs	r3, r3, #8
   e3de8:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
   e3dec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e3dee:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f

    if( ctx->is384 == 0 )
   e3df2:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   e3df6:	2b00      	cmp	r3, #0
   e3df8:	d13b      	bne.n	e3e72 <mbedtls_sha512_finish_ret+0x218>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
   e3dfa:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   e3dfe:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
   e3e02:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
   e3e06:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
   e3e0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   e3e0c:	0a1b      	lsrs	r3, r3, #8
   e3e0e:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
   e3e12:	6c63      	ldr	r3, [r4, #68]	; 0x44
   e3e14:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
   e3e18:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   e3e1c:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
   e3e20:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   e3e24:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
   e3e28:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e3e2a:	0a1b      	lsrs	r3, r3, #8
   e3e2c:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
   e3e30:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e3e32:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
        PUT_UINT64_BE( ctx->state[7], output, 56 );
   e3e36:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
   e3e3a:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
   e3e3e:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
   e3e42:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
   e3e46:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   e3e48:	0a1b      	lsrs	r3, r3, #8
   e3e4a:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
   e3e4e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   e3e50:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
   e3e54:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
   e3e58:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   e3e5c:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   e3e60:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
   e3e64:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   e3e66:	0a1b      	lsrs	r3, r3, #8
   e3e68:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
   e3e6c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   e3e6e:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
    }

    return( 0 );
}
   e3e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memset( ctx->buffer + used, 0, 128 - used );
   e3e74:	2100      	movs	r1, #0
   e3e76:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
   e3e7a:	f004 ffdf 	bl	e8e3c <memset>
        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
   e3e7e:	4631      	mov	r1, r6
   e3e80:	4620      	mov	r0, r4
   e3e82:	f7ff f931 	bl	e30e8 <mbedtls_internal_sha512_process>
   e3e86:	2800      	cmp	r0, #0
   e3e88:	d1f3      	bne.n	e3e72 <mbedtls_sha512_finish_ret+0x218>
        memset( ctx->buffer, 0, 112 );
   e3e8a:	4601      	mov	r1, r0
   e3e8c:	2270      	movs	r2, #112	; 0x70
   e3e8e:	4630      	mov	r0, r6
   e3e90:	e6f8      	b.n	e3c84 <mbedtls_sha512_finish_ret+0x2a>

000e3e92 <mbedtls_sha512_ret>:
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
   e3e92:	b5f0      	push	{r4, r5, r6, r7, lr}
   e3e94:	b0b9      	sub	sp, #228	; 0xe4
   e3e96:	4606      	mov	r6, r0

    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha512_init( &ctx );
   e3e98:	a802      	add	r0, sp, #8
{
   e3e9a:	460f      	mov	r7, r1
   e3e9c:	4615      	mov	r5, r2
   e3e9e:	9301      	str	r3, [sp, #4]
    mbedtls_sha512_init( &ctx );
   e3ea0:	f7ff f878 	bl	e2f94 <mbedtls_sha512_init>

    if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )
   e3ea4:	9901      	ldr	r1, [sp, #4]
   e3ea6:	a802      	add	r0, sp, #8
   e3ea8:	f7ff f882 	bl	e2fb0 <mbedtls_sha512_starts_ret>
   e3eac:	4604      	mov	r4, r0
   e3eae:	b958      	cbnz	r0, e3ec8 <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )
   e3eb0:	463a      	mov	r2, r7
   e3eb2:	4631      	mov	r1, r6
   e3eb4:	a802      	add	r0, sp, #8
   e3eb6:	f7ff fe7d 	bl	e3bb4 <mbedtls_sha512_update_ret>
   e3eba:	4604      	mov	r4, r0
   e3ebc:	b920      	cbnz	r0, e3ec8 <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )
   e3ebe:	4629      	mov	r1, r5
   e3ec0:	a802      	add	r0, sp, #8
   e3ec2:	f7ff feca 	bl	e3c5a <mbedtls_sha512_finish_ret>
   e3ec6:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha512_free( &ctx );
   e3ec8:	a802      	add	r0, sp, #8
   e3eca:	f7ff f867 	bl	e2f9c <mbedtls_sha512_free>

    return( ret );
}
   e3ece:	4620      	mov	r0, r4
   e3ed0:	b039      	add	sp, #228	; 0xe4
   e3ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e3ed4 <mbedtls_pem_init>:
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
void mbedtls_pem_init( mbedtls_pem_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
   e3ed4:	2300      	movs	r3, #0
   e3ed6:	6003      	str	r3, [r0, #0]
   e3ed8:	6043      	str	r3, [r0, #4]
   e3eda:	6083      	str	r3, [r0, #8]
}
   e3edc:	4770      	bx	lr
	...

000e3ee0 <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
   e3ee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e3ee4:	4689      	mov	r9, r1
   e3ee6:	b087      	sub	sp, #28
   e3ee8:	4690      	mov	r8, r2
   e3eea:	461f      	mov	r7, r3
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
   e3eec:	4606      	mov	r6, r0
   e3eee:	2800      	cmp	r0, #0
   e3ef0:	d065      	beq.n	e3fbe <mbedtls_pem_read_buffer+0xde>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );

    s1 = (unsigned char *) strstr( (const char *) data, header );
   e3ef2:	4618      	mov	r0, r3
   e3ef4:	f005 f80a 	bl	e8f0c <strstr>

    if( s1 == NULL )
   e3ef8:	4604      	mov	r4, r0
   e3efa:	2800      	cmp	r0, #0
   e3efc:	d061      	beq.n	e3fc2 <mbedtls_pem_read_buffer+0xe2>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s2 = (unsigned char *) strstr( (const char *) data, footer );
   e3efe:	4641      	mov	r1, r8
   e3f00:	4638      	mov	r0, r7
   e3f02:	f005 f803 	bl	e8f0c <strstr>

    if( s2 == NULL || s2 <= s1 )
   e3f06:	4605      	mov	r5, r0
   e3f08:	2800      	cmp	r0, #0
   e3f0a:	d05a      	beq.n	e3fc2 <mbedtls_pem_read_buffer+0xe2>
   e3f0c:	4284      	cmp	r4, r0
   e3f0e:	d258      	bcs.n	e3fc2 <mbedtls_pem_read_buffer+0xe2>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
   e3f10:	4648      	mov	r0, r9
   e3f12:	f004 ffe1 	bl	e8ed8 <strlen>
    if( *s1 == ' '  ) s1++;
   e3f16:	5c23      	ldrb	r3, [r4, r0]
    s1 += strlen( header );
   e3f18:	1821      	adds	r1, r4, r0
    if( *s1 == ' '  ) s1++;
   e3f1a:	2b20      	cmp	r3, #32
   e3f1c:	bf08      	it	eq
   e3f1e:	3101      	addeq	r1, #1
    if( *s1 == '\r' ) s1++;
   e3f20:	780b      	ldrb	r3, [r1, #0]
   e3f22:	2b0d      	cmp	r3, #13
   e3f24:	bf08      	it	eq
   e3f26:	3101      	addeq	r1, #1
    if( *s1 == '\n' ) s1++;
   e3f28:	780b      	ldrb	r3, [r1, #0]
   e3f2a:	2b0a      	cmp	r3, #10
   e3f2c:	d149      	bne.n	e3fc2 <mbedtls_pem_read_buffer+0xe2>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
   e3f2e:	4640      	mov	r0, r8
    if( *s1 == '\n' ) s1++;
   e3f30:	1c4c      	adds	r4, r1, #1
    end += strlen( footer );
   e3f32:	f004 ffd1 	bl	e8ed8 <strlen>
    if( *end == ' '  ) end++;
   e3f36:	5c2b      	ldrb	r3, [r5, r0]
    end += strlen( footer );
   e3f38:	182a      	adds	r2, r5, r0
    if( *end == ' '  ) end++;
   e3f3a:	2b20      	cmp	r3, #32
   e3f3c:	bf08      	it	eq
   e3f3e:	3201      	addeq	r2, #1
    if( *end == '\r' ) end++;
   e3f40:	7813      	ldrb	r3, [r2, #0]
   e3f42:	2b0d      	cmp	r3, #13
   e3f44:	bf08      	it	eq
   e3f46:	3201      	addeq	r2, #1
    if( *end == '\n' ) end++;
   e3f48:	7813      	ldrb	r3, [r2, #0]
   e3f4a:	2b0a      	cmp	r3, #10
   e3f4c:	bf08      	it	eq
   e3f4e:	3201      	addeq	r2, #1
    *use_len = end - data;
   e3f50:	1bd2      	subs	r2, r2, r7
   e3f52:	9b10      	ldr	r3, [sp, #64]	; 0x40

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
   e3f54:	1b2f      	subs	r7, r5, r4
   e3f56:	2f15      	cmp	r7, #21
    *use_len = end - data;
   e3f58:	601a      	str	r2, [r3, #0]
    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
   e3f5a:	dd05      	ble.n	e3f68 <mbedtls_pem_read_buffer+0x88>
   e3f5c:	491e      	ldr	r1, [pc, #120]	; (e3fd8 <mbedtls_pem_read_buffer+0xf8>)
   e3f5e:	2216      	movs	r2, #22
   e3f60:	4620      	mov	r0, r4
   e3f62:	f004 ff35 	bl	e8dd0 <memcmp>
   e3f66:	b370      	cbz	r0, e3fc6 <mbedtls_pem_read_buffer+0xe6>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
   e3f68:	42a5      	cmp	r5, r4
   e3f6a:	d92e      	bls.n	e3fca <mbedtls_pem_read_buffer+0xea>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
   e3f6c:	2100      	movs	r1, #0
   e3f6e:	9700      	str	r7, [sp, #0]
   e3f70:	4623      	mov	r3, r4
   e3f72:	aa05      	add	r2, sp, #20
   e3f74:	4608      	mov	r0, r1
   e3f76:	f7f8 fed7 	bl	dcd28 <mbedtls_base64_decode>

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
   e3f7a:	302c      	adds	r0, #44	; 0x2c
   e3f7c:	d027      	beq.n	e3fce <mbedtls_pem_read_buffer+0xee>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );

    if( ( buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
   e3f7e:	9905      	ldr	r1, [sp, #20]
   e3f80:	9103      	str	r1, [sp, #12]
   e3f82:	2001      	movs	r0, #1
   e3f84:	f004 feba 	bl	e8cfc <calloc>
   e3f88:	4605      	mov	r5, r0
   e3f8a:	b310      	cbz	r0, e3fd2 <mbedtls_pem_read_buffer+0xf2>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
   e3f8c:	4623      	mov	r3, r4
   e3f8e:	9903      	ldr	r1, [sp, #12]
   e3f90:	9700      	str	r7, [sp, #0]
   e3f92:	aa05      	add	r2, sp, #20
   e3f94:	f7f8 fec8 	bl	dcd28 <mbedtls_base64_decode>
   e3f98:	4604      	mov	r4, r0
   e3f9a:	b160      	cbz	r0, e3fb6 <mbedtls_pem_read_buffer+0xd6>
    {
        mbedtls_platform_zeroize( buf, len );
   e3f9c:	9905      	ldr	r1, [sp, #20]
   e3f9e:	4628      	mov	r0, r5
   e3fa0:	f7fe fe10 	bl	e2bc4 <mbedtls_platform_zeroize>
        mbedtls_free( buf );
   e3fa4:	4628      	mov	r0, r5
   e3fa6:	f001 fcff 	bl	e59a8 <free>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
   e3faa:	f5a4 5488 	sub.w	r4, r4, #4352	; 0x1100

    ctx->buf = buf;
    ctx->buflen = len;

    return( 0 );
}
   e3fae:	4620      	mov	r0, r4
   e3fb0:	b007      	add	sp, #28
   e3fb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ctx->buflen = len;
   e3fb6:	9b05      	ldr	r3, [sp, #20]
    ctx->buf = buf;
   e3fb8:	6035      	str	r5, [r6, #0]
    ctx->buflen = len;
   e3fba:	6073      	str	r3, [r6, #4]
    return( 0 );
   e3fbc:	e7f7      	b.n	e3fae <mbedtls_pem_read_buffer+0xce>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
   e3fbe:	4c07      	ldr	r4, [pc, #28]	; (e3fdc <mbedtls_pem_read_buffer+0xfc>)
   e3fc0:	e7f5      	b.n	e3fae <mbedtls_pem_read_buffer+0xce>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
   e3fc2:	4c07      	ldr	r4, [pc, #28]	; (e3fe0 <mbedtls_pem_read_buffer+0x100>)
   e3fc4:	e7f3      	b.n	e3fae <mbedtls_pem_read_buffer+0xce>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
   e3fc6:	4c07      	ldr	r4, [pc, #28]	; (e3fe4 <mbedtls_pem_read_buffer+0x104>)
   e3fc8:	e7f1      	b.n	e3fae <mbedtls_pem_read_buffer+0xce>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );
   e3fca:	4c07      	ldr	r4, [pc, #28]	; (e3fe8 <mbedtls_pem_read_buffer+0x108>)
   e3fcc:	e7ef      	b.n	e3fae <mbedtls_pem_read_buffer+0xce>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
   e3fce:	4c07      	ldr	r4, [pc, #28]	; (e3fec <mbedtls_pem_read_buffer+0x10c>)
   e3fd0:	e7ed      	b.n	e3fae <mbedtls_pem_read_buffer+0xce>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
   e3fd2:	4c07      	ldr	r4, [pc, #28]	; (e3ff0 <mbedtls_pem_read_buffer+0x110>)
   e3fd4:	e7eb      	b.n	e3fae <mbedtls_pem_read_buffer+0xce>
   e3fd6:	bf00      	nop
   e3fd8:	000ed2d8 	.word	0x000ed2d8
   e3fdc:	ffffeb80 	.word	0xffffeb80
   e3fe0:	ffffef80 	.word	0xffffef80
   e3fe4:	ffffec00 	.word	0xffffec00
   e3fe8:	ffffef00 	.word	0xffffef00
   e3fec:	ffffeed4 	.word	0xffffeed4
   e3ff0:	ffffee80 	.word	0xffffee80

000e3ff4 <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
   e3ff4:	b510      	push	{r4, lr}
   e3ff6:	4604      	mov	r4, r0
    if ( ctx->buf != NULL )
   e3ff8:	6800      	ldr	r0, [r0, #0]
   e3ffa:	b128      	cbz	r0, e4008 <mbedtls_pem_free+0x14>
    {
        mbedtls_platform_zeroize( ctx->buf, ctx->buflen );
   e3ffc:	6861      	ldr	r1, [r4, #4]
   e3ffe:	f7fe fde1 	bl	e2bc4 <mbedtls_platform_zeroize>
        mbedtls_free( ctx->buf );
   e4002:	6820      	ldr	r0, [r4, #0]
   e4004:	f001 fcd0 	bl	e59a8 <free>
    }
    mbedtls_free( ctx->info );
   e4008:	68a0      	ldr	r0, [r4, #8]
   e400a:	f001 fccd 	bl	e59a8 <free>

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pem_context ) );
   e400e:	4620      	mov	r0, r4
   e4010:	210c      	movs	r1, #12
}
   e4012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pem_context ) );
   e4016:	f7fe bdd5 	b.w	e2bc4 <mbedtls_platform_zeroize>
	...

000e401c <mbedtls_ssl_ciphersuite_from_id>:

    return( NULL );
}

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
   e401c:	4602      	mov	r2, r0
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;
   e401e:	4804      	ldr	r0, [pc, #16]	; (e4030 <mbedtls_ssl_ciphersuite_from_id+0x14>)

    while( cur->id != 0 )
   e4020:	6803      	ldr	r3, [r0, #0]
   e4022:	b11b      	cbz	r3, e402c <mbedtls_ssl_ciphersuite_from_id+0x10>
    {
        if( cur->id == ciphersuite )
   e4024:	4293      	cmp	r3, r2
   e4026:	d002      	beq.n	e402e <mbedtls_ssl_ciphersuite_from_id+0x12>
            return( cur );

        cur++;
   e4028:	3020      	adds	r0, #32
    while( cur->id != 0 )
   e402a:	e7f9      	b.n	e4020 <mbedtls_ssl_ciphersuite_from_id+0x4>
    }

    return( NULL );
   e402c:	4618      	mov	r0, r3
}
   e402e:	4770      	bx	lr
   e4030:	000ed748 	.word	0x000ed748

000e4034 <mbedtls_ssl_list_ciphersuites>:
{
   e4034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( supported_init == 0 )
   e4036:	4e0e      	ldr	r6, [pc, #56]	; (e4070 <mbedtls_ssl_list_ciphersuites+0x3c>)
   e4038:	6832      	ldr	r2, [r6, #0]
   e403a:	b9ba      	cbnz	r2, e406c <mbedtls_ssl_list_ciphersuites+0x38>
        for( p = ciphersuite_preference, q = supported_ciphersuites;
   e403c:	490d      	ldr	r1, [pc, #52]	; (e4074 <mbedtls_ssl_list_ciphersuites+0x40>)
   e403e:	4d0e      	ldr	r5, [pc, #56]	; (e4078 <mbedtls_ssl_list_ciphersuites+0x44>)
             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
   e4040:	f101 0720 	add.w	r7, r1, #32
   e4044:	f855 4b04 	ldr.w	r4, [r5], #4
   e4048:	b164      	cbz	r4, e4064 <mbedtls_ssl_list_ciphersuites+0x30>
   e404a:	42b9      	cmp	r1, r7
   e404c:	d20a      	bcs.n	e4064 <mbedtls_ssl_list_ciphersuites+0x30>
            if( ( cs_info = mbedtls_ssl_ciphersuite_from_id( *p ) ) != NULL &&
   e404e:	4620      	mov	r0, r4
   e4050:	f7ff ffe4 	bl	e401c <mbedtls_ssl_ciphersuite_from_id>
   e4054:	2800      	cmp	r0, #0
   e4056:	d0f5      	beq.n	e4044 <mbedtls_ssl_list_ciphersuites+0x10>
    if( cs_info->cipher == MBEDTLS_CIPHER_ARC4_128 )
   e4058:	7a03      	ldrb	r3, [r0, #8]
   e405a:	2b2a      	cmp	r3, #42	; 0x2a
   e405c:	d0f2      	beq.n	e4044 <mbedtls_ssl_list_ciphersuites+0x10>
                *(q++) = *p;
   e405e:	f841 4b04 	str.w	r4, [r1], #4
        for( p = ciphersuite_preference, q = supported_ciphersuites;
   e4062:	e7ef      	b.n	e4044 <mbedtls_ssl_list_ciphersuites+0x10>
        *q = 0;
   e4064:	2300      	movs	r3, #0
   e4066:	600b      	str	r3, [r1, #0]
        supported_init = 1;
   e4068:	2301      	movs	r3, #1
   e406a:	6033      	str	r3, [r6, #0]
}
   e406c:	4801      	ldr	r0, [pc, #4]	; (e4074 <mbedtls_ssl_list_ciphersuites+0x40>)
   e406e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e4070:	2003e614 	.word	0x2003e614
   e4074:	2003e618 	.word	0x2003e618
   e4078:	000ed408 	.word	0x000ed408

000e407c <mbedtls_ssl_get_ciphersuite_sig_pk_alg>:
}

#if defined(MBEDTLS_PK_C)
mbedtls_pk_type_t mbedtls_ssl_get_ciphersuite_sig_pk_alg( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
   e407c:	7a80      	ldrb	r0, [r0, #10]
   e407e:	1e43      	subs	r3, r0, #1
   e4080:	2b09      	cmp	r3, #9
   e4082:	d808      	bhi.n	e4096 <mbedtls_ssl_get_ciphersuite_sig_pk_alg+0x1a>
   e4084:	e8df f003 	tbb	[pc, r3]
   e4088:	0a090909 	.word	0x0a090909
   e408c:	07090707 	.word	0x07090707
   e4090:	0505      	.short	0x0505
        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
            return( MBEDTLS_PK_ECDSA );

        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
            return( MBEDTLS_PK_ECKEY );
   e4092:	2002      	movs	r0, #2
   e4094:	4770      	bx	lr

        default:
            return( MBEDTLS_PK_NONE );
   e4096:	2000      	movs	r0, #0
   e4098:	4770      	bx	lr
            return( MBEDTLS_PK_RSA );
   e409a:	2001      	movs	r0, #1
    }
}
   e409c:	4770      	bx	lr

000e409e <mbedtls_ssl_ciphersuite_uses_ec>:

#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
int mbedtls_ssl_ciphersuite_uses_ec( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
   e409e:	7a80      	ldrb	r0, [r0, #10]
   e40a0:	2804      	cmp	r0, #4
   e40a2:	d804      	bhi.n	e40ae <mbedtls_ssl_ciphersuite_uses_ec+0x10>
   e40a4:	2802      	cmp	r0, #2
   e40a6:	bf94      	ite	ls
   e40a8:	2000      	movls	r0, #0
   e40aa:	2001      	movhi	r0, #1
   e40ac:	4770      	bx	lr
   e40ae:	3808      	subs	r0, #8
   e40b0:	2803      	cmp	r0, #3
   e40b2:	bf8c      	ite	hi
   e40b4:	2000      	movhi	r0, #0
   e40b6:	2001      	movls	r0, #1
            return( 1 );

        default:
            return( 0 );
    }
}
   e40b8:	4770      	bx	lr

000e40ba <mbedtls_ssl_ciphersuite_uses_psk>:
#endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C || MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED*/

#if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
int mbedtls_ssl_ciphersuite_uses_psk( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
   e40ba:	7a80      	ldrb	r0, [r0, #10]
   e40bc:	3805      	subs	r0, #5
            return( 1 );

        default:
            return( 0 );
    }
}
   e40be:	2803      	cmp	r0, #3
   e40c0:	bf8c      	ite	hi
   e40c2:	2000      	movhi	r0, #0
   e40c4:	2001      	movls	r0, #1
   e40c6:	4770      	bx	lr

000e40c8 <mbedtls_rsa_deduce_primes>:
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
   e40c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e40cc:	b097      	sub	sp, #92	; 0x5c
   e40ce:	461e      	mov	r6, r3
    uint16_t order;    /* Order of 2 in DE - 1 */

    mbedtls_mpi T;  /* Holds largest odd divisor of DE - 1     */
    mbedtls_mpi K;  /* Temporary holding the current candidate */

    const unsigned char primes[] = { 2,
   e40d0:	4b74      	ldr	r3, [pc, #464]	; (e42a4 <mbedtls_rsa_deduce_primes+0x1dc>)
{
   e40d2:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
    const unsigned char primes[] = { 2,
   e40d6:	ac08      	add	r4, sp, #32
{
   e40d8:	4605      	mov	r5, r0
   e40da:	468a      	mov	sl, r1
   e40dc:	4617      	mov	r7, r2
    const unsigned char primes[] = { 2,
   e40de:	f103 0c30 	add.w	ip, r3, #48	; 0x30
   e40e2:	46a1      	mov	r9, r4
   e40e4:	6818      	ldr	r0, [r3, #0]
   e40e6:	6859      	ldr	r1, [r3, #4]
   e40e8:	4622      	mov	r2, r4
   e40ea:	c203      	stmia	r2!, {r0, r1}
   e40ec:	3308      	adds	r3, #8
   e40ee:	4563      	cmp	r3, ip
   e40f0:	4614      	mov	r4, r2
   e40f2:	d1f7      	bne.n	e40e4 <mbedtls_rsa_deduce_primes+0x1c>
   e40f4:	6818      	ldr	r0, [r3, #0]
   e40f6:	889b      	ldrh	r3, [r3, #4]
   e40f8:	6010      	str	r0, [r2, #0]
   e40fa:	8093      	strh	r3, [r2, #4]
         229,  233,  239,  241,  251
    };

    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
   e40fc:	b92e      	cbnz	r6, e410a <mbedtls_rsa_deduce_primes+0x42>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   e40fe:	f06f 0403 	mvn.w	r4, #3
cleanup:

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &T );
    return( ret );
}
   e4102:	4620      	mov	r0, r4
   e4104:	b017      	add	sp, #92	; 0x5c
   e4106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
   e410a:	f1b8 0f00 	cmp.w	r8, #0
   e410e:	d0f6      	beq.n	e40fe <mbedtls_rsa_deduce_primes+0x36>
   e4110:	68b3      	ldr	r3, [r6, #8]
   e4112:	2b00      	cmp	r3, #0
   e4114:	d1f3      	bne.n	e40fe <mbedtls_rsa_deduce_primes+0x36>
   e4116:	f8d8 1008 	ldr.w	r1, [r8, #8]
   e411a:	2900      	cmp	r1, #0
   e411c:	d1ef      	bne.n	e40fe <mbedtls_rsa_deduce_primes+0x36>
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
   e411e:	4628      	mov	r0, r5
   e4120:	f7fd f83b 	bl	e119a <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   e4124:	2800      	cmp	r0, #0
   e4126:	ddea      	ble.n	e40fe <mbedtls_rsa_deduce_primes+0x36>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
   e4128:	2101      	movs	r1, #1
   e412a:	4638      	mov	r0, r7
   e412c:	f7fd f835 	bl	e119a <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
   e4130:	2800      	cmp	r0, #0
   e4132:	dde4      	ble.n	e40fe <mbedtls_rsa_deduce_primes+0x36>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   e4134:	4629      	mov	r1, r5
   e4136:	4638      	mov	r0, r7
   e4138:	f7fc ffee 	bl	e1118 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
   e413c:	2800      	cmp	r0, #0
   e413e:	dade      	bge.n	e40fe <mbedtls_rsa_deduce_primes+0x36>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   e4140:	2101      	movs	r1, #1
   e4142:	4650      	mov	r0, sl
   e4144:	f7fd f829 	bl	e119a <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   e4148:	2800      	cmp	r0, #0
   e414a:	ddd8      	ble.n	e40fe <mbedtls_rsa_deduce_primes+0x36>
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
   e414c:	4629      	mov	r1, r5
   e414e:	4650      	mov	r0, sl
   e4150:	f7fc ffe2 	bl	e1118 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   e4154:	2800      	cmp	r0, #0
   e4156:	dad2      	bge.n	e40fe <mbedtls_rsa_deduce_primes+0x36>
    mbedtls_mpi_init( &K );
   e4158:	a805      	add	r0, sp, #20
   e415a:	f7fc fcfe 	bl	e0b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &T );
   e415e:	a802      	add	r0, sp, #8
   e4160:	f7fc fcfb 	bl	e0b5a <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
   e4164:	4652      	mov	r2, sl
   e4166:	4639      	mov	r1, r7
   e4168:	a802      	add	r0, sp, #8
   e416a:	f7fd f932 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   e416e:	4604      	mov	r4, r0
   e4170:	b980      	cbnz	r0, e4194 <mbedtls_rsa_deduce_primes+0xcc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
   e4172:	a902      	add	r1, sp, #8
   e4174:	2201      	movs	r2, #1
   e4176:	4608      	mov	r0, r1
   e4178:	f7fd f915 	bl	e13a6 <mbedtls_mpi_sub_int>
   e417c:	4604      	mov	r4, r0
   e417e:	b948      	cbnz	r0, e4194 <mbedtls_rsa_deduce_primes+0xcc>
    if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )
   e4180:	a802      	add	r0, sp, #8
   e4182:	f7fc fdf2 	bl	e0d6a <mbedtls_mpi_lsb>
   e4186:	fa1f fb80 	uxth.w	fp, r0
   e418a:	f1bb 0f00 	cmp.w	fp, #0
   e418e:	d108      	bne.n	e41a2 <mbedtls_rsa_deduce_primes+0xda>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
   e4190:	f06f 0403 	mvn.w	r4, #3
    mbedtls_mpi_free( &K );
   e4194:	a805      	add	r0, sp, #20
   e4196:	f7fc fce6 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
   e419a:	a802      	add	r0, sp, #8
   e419c:	f7fc fce3 	bl	e0b66 <mbedtls_mpi_free>
    return( ret );
   e41a0:	e7af      	b.n	e4102 <mbedtls_rsa_deduce_primes+0x3a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
   e41a2:	b281      	uxth	r1, r0
   e41a4:	a802      	add	r0, sp, #8
   e41a6:	f7fc fedd 	bl	e0f64 <mbedtls_mpi_shift_r>
   e41aa:	4604      	mov	r4, r0
   e41ac:	2800      	cmp	r0, #0
   e41ae:	d1f1      	bne.n	e4194 <mbedtls_rsa_deduce_primes+0xcc>
    if( N->p[0] % 8 == 1 )
   e41b0:	68ab      	ldr	r3, [r5, #8]
   e41b2:	681f      	ldr	r7, [r3, #0]
   e41b4:	f007 0707 	and.w	r7, r7, #7
   e41b8:	1e7b      	subs	r3, r7, #1
   e41ba:	425f      	negs	r7, r3
   e41bc:	415f      	adcs	r7, r3
        mbedtls_mpi_lset( &K, primes[attempt] );
   e41be:	f819 1007 	ldrb.w	r1, [r9, r7]
   e41c2:	a805      	add	r0, sp, #20
   e41c4:	f7fc fda4 	bl	e0d10 <mbedtls_mpi_lset>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
   e41c8:	462a      	mov	r2, r5
   e41ca:	a905      	add	r1, sp, #20
   e41cc:	4630      	mov	r0, r6
   e41ce:	f7fd fd92 	bl	e1cf6 <mbedtls_mpi_gcd>
   e41d2:	4604      	mov	r4, r0
   e41d4:	2800      	cmp	r0, #0
   e41d6:	d1dd      	bne.n	e4194 <mbedtls_rsa_deduce_primes+0xcc>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
   e41d8:	2101      	movs	r1, #1
   e41da:	4630      	mov	r0, r6
   e41dc:	f7fc ffdd 	bl	e119a <mbedtls_mpi_cmp_int>
   e41e0:	b120      	cbz	r0, e41ec <mbedtls_rsa_deduce_primes+0x124>
    for( ; attempt < num_primes; ++attempt )
   e41e2:	3701      	adds	r7, #1
   e41e4:	b2bb      	uxth	r3, r7
   e41e6:	2b35      	cmp	r3, #53	; 0x35
   e41e8:	d9e9      	bls.n	e41be <mbedtls_rsa_deduce_primes+0xf6>
   e41ea:	e7d1      	b.n	e4190 <mbedtls_rsa_deduce_primes+0xc8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
   e41ec:	a905      	add	r1, sp, #20
   e41ee:	f8cd 8000 	str.w	r8, [sp]
   e41f2:	462b      	mov	r3, r5
   e41f4:	aa02      	add	r2, sp, #8
   e41f6:	4608      	mov	r0, r1
   e41f8:	f7fd fb56 	bl	e18a8 <mbedtls_mpi_exp_mod>
   e41fc:	4604      	mov	r4, r0
   e41fe:	2800      	cmp	r0, #0
   e4200:	d1c8      	bne.n	e4194 <mbedtls_rsa_deduce_primes+0xcc>
        for( iter = 1; iter <= order; ++iter )
   e4202:	f04f 0a01 	mov.w	sl, #1
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
   e4206:	2101      	movs	r1, #1
   e4208:	a805      	add	r0, sp, #20
   e420a:	f7fc ffc6 	bl	e119a <mbedtls_mpi_cmp_int>
   e420e:	2800      	cmp	r0, #0
   e4210:	d033      	beq.n	e427a <mbedtls_rsa_deduce_primes+0x1b2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
   e4212:	a905      	add	r1, sp, #20
   e4214:	2201      	movs	r2, #1
   e4216:	4608      	mov	r0, r1
   e4218:	f7fd f8af 	bl	e137a <mbedtls_mpi_add_int>
   e421c:	4604      	mov	r4, r0
   e421e:	2800      	cmp	r0, #0
   e4220:	d1b8      	bne.n	e4194 <mbedtls_rsa_deduce_primes+0xcc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
   e4222:	462a      	mov	r2, r5
   e4224:	a905      	add	r1, sp, #20
   e4226:	4630      	mov	r0, r6
   e4228:	f7fd fd65 	bl	e1cf6 <mbedtls_mpi_gcd>
   e422c:	4604      	mov	r4, r0
   e422e:	2800      	cmp	r0, #0
   e4230:	d1b0      	bne.n	e4194 <mbedtls_rsa_deduce_primes+0xcc>
            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
   e4232:	2101      	movs	r1, #1
   e4234:	4630      	mov	r0, r6
   e4236:	f7fc ffb0 	bl	e119a <mbedtls_mpi_cmp_int>
   e423a:	2801      	cmp	r0, #1
   e423c:	d024      	beq.n	e4288 <mbedtls_rsa_deduce_primes+0x1c0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
   e423e:	a905      	add	r1, sp, #20
   e4240:	2201      	movs	r2, #1
   e4242:	4608      	mov	r0, r1
   e4244:	f7fd f8af 	bl	e13a6 <mbedtls_mpi_sub_int>
   e4248:	4604      	mov	r4, r0
   e424a:	2800      	cmp	r0, #0
   e424c:	d1a2      	bne.n	e4194 <mbedtls_rsa_deduce_primes+0xcc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
   e424e:	aa05      	add	r2, sp, #20
   e4250:	4611      	mov	r1, r2
   e4252:	4610      	mov	r0, r2
   e4254:	f7fd f8bd 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   e4258:	4604      	mov	r4, r0
   e425a:	2800      	cmp	r0, #0
   e425c:	d19a      	bne.n	e4194 <mbedtls_rsa_deduce_primes+0xcc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
   e425e:	a905      	add	r1, sp, #20
   e4260:	462a      	mov	r2, r5
   e4262:	4608      	mov	r0, r1
   e4264:	f7fd faed 	bl	e1842 <mbedtls_mpi_mod_mpi>
   e4268:	4604      	mov	r4, r0
   e426a:	2800      	cmp	r0, #0
   e426c:	d192      	bne.n	e4194 <mbedtls_rsa_deduce_primes+0xcc>
        for( iter = 1; iter <= order; ++iter )
   e426e:	f10a 0a01 	add.w	sl, sl, #1
   e4272:	fa1f fa8a 	uxth.w	sl, sl
   e4276:	45d3      	cmp	fp, sl
   e4278:	d2c5      	bcs.n	e4206 <mbedtls_rsa_deduce_primes+0x13e>
        if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )
   e427a:	2101      	movs	r1, #1
   e427c:	a805      	add	r0, sp, #20
   e427e:	f7fc ff8c 	bl	e119a <mbedtls_mpi_cmp_int>
   e4282:	2800      	cmp	r0, #0
   e4284:	d0ad      	beq.n	e41e2 <mbedtls_rsa_deduce_primes+0x11a>
   e4286:	e783      	b.n	e4190 <mbedtls_rsa_deduce_primes+0xc8>
                mbedtls_mpi_cmp_mpi( P, N ) == -1 )
   e4288:	4629      	mov	r1, r5
   e428a:	4630      	mov	r0, r6
   e428c:	f7fc ff44 	bl	e1118 <mbedtls_mpi_cmp_mpi>
            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
   e4290:	3001      	adds	r0, #1
   e4292:	d1d4      	bne.n	e423e <mbedtls_rsa_deduce_primes+0x176>
                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
   e4294:	4621      	mov	r1, r4
   e4296:	4633      	mov	r3, r6
   e4298:	462a      	mov	r2, r5
   e429a:	4640      	mov	r0, r8
   e429c:	f7fd f90a 	bl	e14b4 <mbedtls_mpi_div_mpi>
   e42a0:	4604      	mov	r4, r0
   e42a2:	e777      	b.n	e4194 <mbedtls_rsa_deduce_primes+0xcc>
   e42a4:	000ed868 	.word	0x000ed868

000e42a8 <mbedtls_rsa_deduce_private_exponent>:
 */
int mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,
                                         mbedtls_mpi const *Q,
                                         mbedtls_mpi const *E,
                                         mbedtls_mpi *D )
{
   e42a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e42ac:	4604      	mov	r4, r0
   e42ae:	b086      	sub	sp, #24
   e42b0:	460f      	mov	r7, r1
   e42b2:	4616      	mov	r6, r2
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
   e42b4:	461d      	mov	r5, r3
   e42b6:	b92b      	cbnz	r3, e42c4 <mbedtls_rsa_deduce_private_exponent+0x1c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   e42b8:	f06f 0403 	mvn.w	r4, #3

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &L );

    return( ret );
}
   e42bc:	4620      	mov	r0, r4
   e42be:	b006      	add	sp, #24
   e42c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
   e42c4:	2100      	movs	r1, #0
   e42c6:	4618      	mov	r0, r3
   e42c8:	f7fc ff67 	bl	e119a <mbedtls_mpi_cmp_int>
   e42cc:	4680      	mov	r8, r0
   e42ce:	2800      	cmp	r0, #0
   e42d0:	d1f2      	bne.n	e42b8 <mbedtls_rsa_deduce_private_exponent+0x10>
    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
   e42d2:	2101      	movs	r1, #1
   e42d4:	4620      	mov	r0, r4
   e42d6:	f7fc ff60 	bl	e119a <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
   e42da:	2800      	cmp	r0, #0
   e42dc:	ddec      	ble.n	e42b8 <mbedtls_rsa_deduce_private_exponent+0x10>
   e42de:	2101      	movs	r1, #1
   e42e0:	4638      	mov	r0, r7
   e42e2:	f7fc ff5a 	bl	e119a <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
   e42e6:	2800      	cmp	r0, #0
   e42e8:	dde6      	ble.n	e42b8 <mbedtls_rsa_deduce_private_exponent+0x10>
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
   e42ea:	4641      	mov	r1, r8
   e42ec:	4630      	mov	r0, r6
   e42ee:	f7fc ff54 	bl	e119a <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
   e42f2:	2800      	cmp	r0, #0
   e42f4:	d0e0      	beq.n	e42b8 <mbedtls_rsa_deduce_private_exponent+0x10>
    mbedtls_mpi_init( &K );
   e42f6:	4668      	mov	r0, sp
   e42f8:	f7fc fc2f 	bl	e0b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
   e42fc:	a803      	add	r0, sp, #12
   e42fe:	f7fc fc2c 	bl	e0b5a <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
   e4302:	4621      	mov	r1, r4
   e4304:	2201      	movs	r2, #1
   e4306:	4668      	mov	r0, sp
   e4308:	f7fd f84d 	bl	e13a6 <mbedtls_mpi_sub_int>
   e430c:	4604      	mov	r4, r0
   e430e:	bb10      	cbnz	r0, e4356 <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
   e4310:	2201      	movs	r2, #1
   e4312:	4639      	mov	r1, r7
   e4314:	a803      	add	r0, sp, #12
   e4316:	f7fd f846 	bl	e13a6 <mbedtls_mpi_sub_int>
   e431a:	4604      	mov	r4, r0
   e431c:	b9d8      	cbnz	r0, e4356 <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
   e431e:	aa03      	add	r2, sp, #12
   e4320:	4669      	mov	r1, sp
   e4322:	4628      	mov	r0, r5
   e4324:	f7fd fce7 	bl	e1cf6 <mbedtls_mpi_gcd>
   e4328:	4604      	mov	r4, r0
   e432a:	b9a0      	cbnz	r0, e4356 <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
   e432c:	aa03      	add	r2, sp, #12
   e432e:	4669      	mov	r1, sp
   e4330:	4668      	mov	r0, sp
   e4332:	f7fd f84e 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   e4336:	4604      	mov	r4, r0
   e4338:	b968      	cbnz	r0, e4356 <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
   e433a:	4601      	mov	r1, r0
   e433c:	462b      	mov	r3, r5
   e433e:	466a      	mov	r2, sp
   e4340:	4668      	mov	r0, sp
   e4342:	f7fd f8b7 	bl	e14b4 <mbedtls_mpi_div_mpi>
   e4346:	4604      	mov	r4, r0
   e4348:	b928      	cbnz	r0, e4356 <mbedtls_rsa_deduce_private_exponent+0xae>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );
   e434a:	466a      	mov	r2, sp
   e434c:	4631      	mov	r1, r6
   e434e:	4628      	mov	r0, r5
   e4350:	f7fd fd8b 	bl	e1e6a <mbedtls_mpi_inv_mod>
   e4354:	4604      	mov	r4, r0
    mbedtls_mpi_free( &K );
   e4356:	4668      	mov	r0, sp
   e4358:	f7fc fc05 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
   e435c:	a803      	add	r0, sp, #12
   e435e:	f7fc fc02 	bl	e0b66 <mbedtls_mpi_free>
    return( ret );
   e4362:	e7ab      	b.n	e42bc <mbedtls_rsa_deduce_private_exponent+0x14>

000e4364 <mbedtls_rsa_validate_crt>:
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
   e4364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e4368:	b087      	sub	sp, #28
   e436a:	4604      	mov	r4, r0
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
   e436c:	4668      	mov	r0, sp
{
   e436e:	4699      	mov	r9, r3
   e4370:	e9dd 860e 	ldrd	r8, r6, [sp, #56]	; 0x38
   e4374:	460d      	mov	r5, r1
   e4376:	4617      	mov	r7, r2
    mbedtls_mpi_init( &K );
   e4378:	f7fc fbef 	bl	e0b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
   e437c:	a803      	add	r0, sp, #12
   e437e:	f7fc fbec 	bl	e0b5a <mbedtls_mpi_init>

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
   e4382:	f1b9 0f00 	cmp.w	r9, #0
   e4386:	d106      	bne.n	e4396 <mbedtls_rsa_validate_crt+0x32>
            goto cleanup;
        }
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
   e4388:	f1b8 0f00 	cmp.w	r8, #0
   e438c:	d12c      	bne.n	e43e8 <mbedtls_rsa_validate_crt+0x84>
            goto cleanup;
        }
    }

    /* Check that QP * Q - 1 == 0 mod P */
    if( QP != NULL )
   e438e:	2e00      	cmp	r6, #0
   e4390:	d145      	bne.n	e441e <mbedtls_rsa_validate_crt+0xba>
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
   e4392:	2400      	movs	r4, #0
   e4394:	e001      	b.n	e439a <mbedtls_rsa_validate_crt+0x36>
        if( P == NULL )
   e4396:	b954      	cbnz	r4, e43ae <mbedtls_rsa_validate_crt+0x4a>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   e4398:	4c34      	ldr	r4, [pc, #208]	; (e446c <mbedtls_rsa_validate_crt+0x108>)
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    mbedtls_mpi_free( &K );
   e439a:	4668      	mov	r0, sp
   e439c:	f7fc fbe3 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
   e43a0:	a803      	add	r0, sp, #12
   e43a2:	f7fc fbe0 	bl	e0b66 <mbedtls_mpi_free>

    return( ret );
}
   e43a6:	4620      	mov	r0, r4
   e43a8:	b007      	add	sp, #28
   e43aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
   e43ae:	2201      	movs	r2, #1
   e43b0:	4621      	mov	r1, r4
   e43b2:	4668      	mov	r0, sp
   e43b4:	f7fc fff7 	bl	e13a6 <mbedtls_mpi_sub_int>
   e43b8:	2800      	cmp	r0, #0
   e43ba:	d14d      	bne.n	e4458 <mbedtls_rsa_validate_crt+0xf4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
   e43bc:	463a      	mov	r2, r7
   e43be:	4649      	mov	r1, r9
   e43c0:	a803      	add	r0, sp, #12
   e43c2:	f7fc ffb7 	bl	e1334 <mbedtls_mpi_sub_mpi>
   e43c6:	2800      	cmp	r0, #0
   e43c8:	d146      	bne.n	e4458 <mbedtls_rsa_validate_crt+0xf4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
   e43ca:	a903      	add	r1, sp, #12
   e43cc:	466a      	mov	r2, sp
   e43ce:	4608      	mov	r0, r1
   e43d0:	f7fd fa37 	bl	e1842 <mbedtls_mpi_mod_mpi>
   e43d4:	2800      	cmp	r0, #0
   e43d6:	d13f      	bne.n	e4458 <mbedtls_rsa_validate_crt+0xf4>
        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
   e43d8:	4601      	mov	r1, r0
   e43da:	a803      	add	r0, sp, #12
   e43dc:	f7fc fedd 	bl	e119a <mbedtls_mpi_cmp_int>
   e43e0:	2800      	cmp	r0, #0
   e43e2:	d0d1      	beq.n	e4388 <mbedtls_rsa_validate_crt+0x24>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   e43e4:	4c22      	ldr	r4, [pc, #136]	; (e4470 <mbedtls_rsa_validate_crt+0x10c>)
   e43e6:	e7d8      	b.n	e439a <mbedtls_rsa_validate_crt+0x36>
        if( Q == NULL )
   e43e8:	2d00      	cmp	r5, #0
   e43ea:	d0d5      	beq.n	e4398 <mbedtls_rsa_validate_crt+0x34>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
   e43ec:	2201      	movs	r2, #1
   e43ee:	4629      	mov	r1, r5
   e43f0:	4668      	mov	r0, sp
   e43f2:	f7fc ffd8 	bl	e13a6 <mbedtls_mpi_sub_int>
   e43f6:	bb78      	cbnz	r0, e4458 <mbedtls_rsa_validate_crt+0xf4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
   e43f8:	463a      	mov	r2, r7
   e43fa:	4641      	mov	r1, r8
   e43fc:	a803      	add	r0, sp, #12
   e43fe:	f7fc ff99 	bl	e1334 <mbedtls_mpi_sub_mpi>
   e4402:	bb48      	cbnz	r0, e4458 <mbedtls_rsa_validate_crt+0xf4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
   e4404:	a903      	add	r1, sp, #12
   e4406:	466a      	mov	r2, sp
   e4408:	4608      	mov	r0, r1
   e440a:	f7fd fa1a 	bl	e1842 <mbedtls_mpi_mod_mpi>
   e440e:	bb18      	cbnz	r0, e4458 <mbedtls_rsa_validate_crt+0xf4>
        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
   e4410:	4601      	mov	r1, r0
   e4412:	a803      	add	r0, sp, #12
   e4414:	f7fc fec1 	bl	e119a <mbedtls_mpi_cmp_int>
   e4418:	2800      	cmp	r0, #0
   e441a:	d0b8      	beq.n	e438e <mbedtls_rsa_validate_crt+0x2a>
   e441c:	e7e2      	b.n	e43e4 <mbedtls_rsa_validate_crt+0x80>
        if( P == NULL || Q == NULL )
   e441e:	2c00      	cmp	r4, #0
   e4420:	d0ba      	beq.n	e4398 <mbedtls_rsa_validate_crt+0x34>
   e4422:	2d00      	cmp	r5, #0
   e4424:	d0b8      	beq.n	e4398 <mbedtls_rsa_validate_crt+0x34>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
   e4426:	462a      	mov	r2, r5
   e4428:	4631      	mov	r1, r6
   e442a:	4668      	mov	r0, sp
   e442c:	f7fc ffd1 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   e4430:	b990      	cbnz	r0, e4458 <mbedtls_rsa_validate_crt+0xf4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
   e4432:	2201      	movs	r2, #1
   e4434:	4669      	mov	r1, sp
   e4436:	4668      	mov	r0, sp
   e4438:	f7fc ffb5 	bl	e13a6 <mbedtls_mpi_sub_int>
   e443c:	b960      	cbnz	r0, e4458 <mbedtls_rsa_validate_crt+0xf4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
   e443e:	4622      	mov	r2, r4
   e4440:	4669      	mov	r1, sp
   e4442:	4668      	mov	r0, sp
   e4444:	f7fd f9fd 	bl	e1842 <mbedtls_mpi_mod_mpi>
   e4448:	b930      	cbnz	r0, e4458 <mbedtls_rsa_validate_crt+0xf4>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
   e444a:	4601      	mov	r1, r0
   e444c:	4668      	mov	r0, sp
   e444e:	f7fc fea4 	bl	e119a <mbedtls_mpi_cmp_int>
   e4452:	2800      	cmp	r0, #0
   e4454:	d09d      	beq.n	e4392 <mbedtls_rsa_validate_crt+0x2e>
   e4456:	e7c5      	b.n	e43e4 <mbedtls_rsa_validate_crt+0x80>
    if( ret != 0 &&
   e4458:	f510 4f84 	cmn.w	r0, #16896	; 0x4200
   e445c:	d0c2      	beq.n	e43e4 <mbedtls_rsa_validate_crt+0x80>
        ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&
   e445e:	f510 4f81 	cmn.w	r0, #16512	; 0x4080
   e4462:	d099      	beq.n	e4398 <mbedtls_rsa_validate_crt+0x34>
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   e4464:	f5a0 4484 	sub.w	r4, r0, #16896	; 0x4200
   e4468:	e797      	b.n	e439a <mbedtls_rsa_validate_crt+0x36>
   e446a:	bf00      	nop
   e446c:	ffffbf80 	.word	0xffffbf80
   e4470:	ffffbe00 	.word	0xffffbe00

000e4474 <mbedtls_rsa_validate_params>:
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
   e4474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e4478:	b087      	sub	sp, #28
   e447a:	4681      	mov	r9, r0
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
   e447c:	4668      	mov	r0, sp
{
   e447e:	4688      	mov	r8, r1
   e4480:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   e4482:	4615      	mov	r5, r2
   e4484:	461e      	mov	r6, r3
    mbedtls_mpi_init( &K );
   e4486:	f7fc fb68 	bl	e0b5a <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
   e448a:	a803      	add	r0, sp, #12
   e448c:	f7fc fb65 	bl	e0b5a <mbedtls_mpi_init>

    /*
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
   e4490:	f1b8 0f00 	cmp.w	r8, #0
   e4494:	d077      	beq.n	e4586 <mbedtls_rsa_validate_params+0x112>
   e4496:	2d00      	cmp	r5, #0
   e4498:	f000 80a9 	beq.w	e45ee <mbedtls_rsa_validate_params+0x17a>
   e449c:	f1b9 0f00 	cmp.w	r9, #0
   e44a0:	d15d      	bne.n	e455e <mbedtls_rsa_validate_params+0xea>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
   e44a2:	2e00      	cmp	r6, #0
   e44a4:	f000 8092 	beq.w	e45cc <mbedtls_rsa_validate_params+0x158>
   e44a8:	2f00      	cmp	r7, #0
   e44aa:	f000 808f 	beq.w	e45cc <mbedtls_rsa_validate_params+0x158>
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
   e44ae:	2101      	movs	r1, #1
   e44b0:	4640      	mov	r0, r8
   e44b2:	f7fc fe72 	bl	e119a <mbedtls_mpi_cmp_int>
   e44b6:	2800      	cmp	r0, #0
   e44b8:	dd63      	ble.n	e4582 <mbedtls_rsa_validate_params+0x10e>
            mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )
   e44ba:	2101      	movs	r1, #1
   e44bc:	4628      	mov	r0, r5
   e44be:	f7fc fe6c 	bl	e119a <mbedtls_mpi_cmp_int>
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
   e44c2:	2800      	cmp	r0, #0
   e44c4:	dd5d      	ble.n	e4582 <mbedtls_rsa_validate_params+0x10e>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod P-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
   e44c6:	463a      	mov	r2, r7
   e44c8:	4631      	mov	r1, r6
   e44ca:	4668      	mov	r0, sp
   e44cc:	f7fc ff81 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   e44d0:	4604      	mov	r4, r0
   e44d2:	2800      	cmp	r0, #0
   e44d4:	d17b      	bne.n	e45ce <mbedtls_rsa_validate_params+0x15a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
   e44d6:	2201      	movs	r2, #1
   e44d8:	4669      	mov	r1, sp
   e44da:	4668      	mov	r0, sp
   e44dc:	f7fc ff63 	bl	e13a6 <mbedtls_mpi_sub_int>
   e44e0:	4604      	mov	r4, r0
   e44e2:	2800      	cmp	r0, #0
   e44e4:	d173      	bne.n	e45ce <mbedtls_rsa_validate_params+0x15a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
   e44e6:	2201      	movs	r2, #1
   e44e8:	4641      	mov	r1, r8
   e44ea:	a803      	add	r0, sp, #12
   e44ec:	f7fc ff5b 	bl	e13a6 <mbedtls_mpi_sub_int>
   e44f0:	4604      	mov	r4, r0
   e44f2:	2800      	cmp	r0, #0
   e44f4:	d16b      	bne.n	e45ce <mbedtls_rsa_validate_params+0x15a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
   e44f6:	aa03      	add	r2, sp, #12
   e44f8:	4669      	mov	r1, sp
   e44fa:	4668      	mov	r0, sp
   e44fc:	f7fd f9a1 	bl	e1842 <mbedtls_mpi_mod_mpi>
   e4500:	4604      	mov	r4, r0
   e4502:	2800      	cmp	r0, #0
   e4504:	d163      	bne.n	e45ce <mbedtls_rsa_validate_params+0x15a>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
   e4506:	4601      	mov	r1, r0
   e4508:	4668      	mov	r0, sp
   e450a:	f7fc fe46 	bl	e119a <mbedtls_mpi_cmp_int>
   e450e:	2800      	cmp	r0, #0
   e4510:	d137      	bne.n	e4582 <mbedtls_rsa_validate_params+0x10e>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod Q-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
   e4512:	463a      	mov	r2, r7
   e4514:	4631      	mov	r1, r6
   e4516:	4668      	mov	r0, sp
   e4518:	f7fc ff5b 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   e451c:	4604      	mov	r4, r0
   e451e:	2800      	cmp	r0, #0
   e4520:	d155      	bne.n	e45ce <mbedtls_rsa_validate_params+0x15a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
   e4522:	2201      	movs	r2, #1
   e4524:	4669      	mov	r1, sp
   e4526:	4668      	mov	r0, sp
   e4528:	f7fc ff3d 	bl	e13a6 <mbedtls_mpi_sub_int>
   e452c:	4604      	mov	r4, r0
   e452e:	2800      	cmp	r0, #0
   e4530:	d14d      	bne.n	e45ce <mbedtls_rsa_validate_params+0x15a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
   e4532:	2201      	movs	r2, #1
   e4534:	4629      	mov	r1, r5
   e4536:	a803      	add	r0, sp, #12
   e4538:	f7fc ff35 	bl	e13a6 <mbedtls_mpi_sub_int>
   e453c:	4604      	mov	r4, r0
   e453e:	2800      	cmp	r0, #0
   e4540:	d145      	bne.n	e45ce <mbedtls_rsa_validate_params+0x15a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
   e4542:	aa03      	add	r2, sp, #12
   e4544:	4669      	mov	r1, sp
   e4546:	4668      	mov	r0, sp
   e4548:	f7fd f97b 	bl	e1842 <mbedtls_mpi_mod_mpi>
   e454c:	4604      	mov	r4, r0
   e454e:	2800      	cmp	r0, #0
   e4550:	d13d      	bne.n	e45ce <mbedtls_rsa_validate_params+0x15a>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
   e4552:	4601      	mov	r1, r0
   e4554:	4668      	mov	r0, sp
   e4556:	f7fc fe20 	bl	e119a <mbedtls_mpi_cmp_int>
   e455a:	b3b8      	cbz	r0, e45cc <mbedtls_rsa_validate_params+0x158>
   e455c:	e011      	b.n	e4582 <mbedtls_rsa_validate_params+0x10e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
   e455e:	462a      	mov	r2, r5
   e4560:	4641      	mov	r1, r8
   e4562:	4668      	mov	r0, sp
   e4564:	f7fc ff35 	bl	e13d2 <mbedtls_mpi_mul_mpi>
   e4568:	4604      	mov	r4, r0
   e456a:	bb80      	cbnz	r0, e45ce <mbedtls_rsa_validate_params+0x15a>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
   e456c:	2101      	movs	r1, #1
   e456e:	4648      	mov	r0, r9
   e4570:	f7fc fe13 	bl	e119a <mbedtls_mpi_cmp_int>
   e4574:	2800      	cmp	r0, #0
   e4576:	dd04      	ble.n	e4582 <mbedtls_rsa_validate_params+0x10e>
            mbedtls_mpi_cmp_mpi( &K, N ) != 0 )
   e4578:	4649      	mov	r1, r9
   e457a:	4668      	mov	r0, sp
   e457c:	f7fc fdcc 	bl	e1118 <mbedtls_mpi_cmp_mpi>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
   e4580:	b3c0      	cbz	r0, e45f4 <mbedtls_rsa_validate_params+0x180>
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   e4582:	4c1e      	ldr	r4, [pc, #120]	; (e45fc <mbedtls_rsa_validate_params+0x188>)
            goto cleanup;
   e4584:	e023      	b.n	e45ce <mbedtls_rsa_validate_params+0x15a>
    if( N != NULL && D != NULL && E != NULL )
   e4586:	f1b9 0f00 	cmp.w	r9, #0
   e458a:	d01f      	beq.n	e45cc <mbedtls_rsa_validate_params+0x158>
   e458c:	b1f6      	cbz	r6, e45cc <mbedtls_rsa_validate_params+0x158>
   e458e:	b1bf      	cbz	r7, e45c0 <mbedtls_rsa_validate_params+0x14c>
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
   e4590:	2101      	movs	r1, #1
   e4592:	4630      	mov	r0, r6
   e4594:	f7fc fe01 	bl	e119a <mbedtls_mpi_cmp_int>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   e4598:	2800      	cmp	r0, #0
   e459a:	ddf2      	ble.n	e4582 <mbedtls_rsa_validate_params+0x10e>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   e459c:	2101      	movs	r1, #1
   e459e:	4638      	mov	r0, r7
   e45a0:	f7fc fdfb 	bl	e119a <mbedtls_mpi_cmp_int>
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
   e45a4:	2800      	cmp	r0, #0
   e45a6:	ddec      	ble.n	e4582 <mbedtls_rsa_validate_params+0x10e>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   e45a8:	4649      	mov	r1, r9
   e45aa:	4630      	mov	r0, r6
   e45ac:	f7fc fdb4 	bl	e1118 <mbedtls_mpi_cmp_mpi>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
   e45b0:	2800      	cmp	r0, #0
   e45b2:	dae6      	bge.n	e4582 <mbedtls_rsa_validate_params+0x10e>
             mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
   e45b4:	4649      	mov	r1, r9
   e45b6:	4638      	mov	r0, r7
   e45b8:	f7fc fdae 	bl	e1118 <mbedtls_mpi_cmp_mpi>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
   e45bc:	2800      	cmp	r0, #0
   e45be:	dae0      	bge.n	e4582 <mbedtls_rsa_validate_params+0x10e>
    if( P != NULL && Q != NULL && D != NULL && E != NULL )
   e45c0:	f1b8 0f00 	cmp.w	r8, #0
   e45c4:	d002      	beq.n	e45cc <mbedtls_rsa_validate_params+0x158>
   e45c6:	2d00      	cmp	r5, #0
   e45c8:	f47f af6b 	bne.w	e44a2 <mbedtls_rsa_validate_params+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
   e45cc:	2400      	movs	r4, #0
        }
    }

cleanup:

    mbedtls_mpi_free( &K );
   e45ce:	4668      	mov	r0, sp
   e45d0:	f7fc fac9 	bl	e0b66 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
   e45d4:	a803      	add	r0, sp, #12
   e45d6:	f7fc fac6 	bl	e0b66 <mbedtls_mpi_free>

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
   e45da:	b124      	cbz	r4, e45e6 <mbedtls_rsa_validate_params+0x172>
   e45dc:	f514 4f84 	cmn.w	r4, #16896	; 0x4200
   e45e0:	d001      	beq.n	e45e6 <mbedtls_rsa_validate_params+0x172>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   e45e2:	f5a4 4484 	sub.w	r4, r4, #16896	; 0x4200
    }

    return( ret );
}
   e45e6:	4620      	mov	r0, r4
   e45e8:	b007      	add	sp, #28
   e45ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( N != NULL && D != NULL && E != NULL )
   e45ee:	f1b9 0f00 	cmp.w	r9, #0
   e45f2:	d0eb      	beq.n	e45cc <mbedtls_rsa_validate_params+0x158>
   e45f4:	2e00      	cmp	r6, #0
   e45f6:	d1ca      	bne.n	e458e <mbedtls_rsa_validate_params+0x11a>
   e45f8:	e7e5      	b.n	e45c6 <mbedtls_rsa_validate_params+0x152>
   e45fa:	bf00      	nop
   e45fc:	ffffbe00 	.word	0xffffbe00

000e4600 <mbedtls_rsa_deduce_crt>:

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
   e4600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   e4604:	4606      	mov	r6, r0
   e4606:	469a      	mov	sl, r3
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
   e4608:	a801      	add	r0, sp, #4
{
   e460a:	e9dd 980c 	ldrd	r9, r8, [sp, #48]	; 0x30
   e460e:	460d      	mov	r5, r1
   e4610:	4617      	mov	r7, r2
    mbedtls_mpi_init( &K );
   e4612:	f7fc faa2 	bl	e0b5a <mbedtls_mpi_init>

    /* DP = D mod P-1 */
    if( DP != NULL )
   e4616:	f1ba 0f00 	cmp.w	sl, #0
   e461a:	d107      	bne.n	e462c <mbedtls_rsa_deduce_crt+0x2c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
   e461c:	f1b9 0f00 	cmp.w	r9, #0
   e4620:	d11a      	bne.n	e4658 <mbedtls_rsa_deduce_crt+0x58>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
    }

    /* QP = Q^{-1} mod P */
    if( QP != NULL )
   e4622:	f1b8 0f00 	cmp.w	r8, #0
   e4626:	d128      	bne.n	e467a <mbedtls_rsa_deduce_crt+0x7a>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
    }

cleanup:
   e4628:	4644      	mov	r4, r8
   e462a:	e00e      	b.n	e464a <mbedtls_rsa_deduce_crt+0x4a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
   e462c:	2201      	movs	r2, #1
   e462e:	4631      	mov	r1, r6
   e4630:	a801      	add	r0, sp, #4
   e4632:	f7fc feb8 	bl	e13a6 <mbedtls_mpi_sub_int>
   e4636:	4604      	mov	r4, r0
   e4638:	b938      	cbnz	r0, e464a <mbedtls_rsa_deduce_crt+0x4a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
   e463a:	aa01      	add	r2, sp, #4
   e463c:	4639      	mov	r1, r7
   e463e:	4650      	mov	r0, sl
   e4640:	f7fd f8ff 	bl	e1842 <mbedtls_mpi_mod_mpi>
   e4644:	4604      	mov	r4, r0
   e4646:	2800      	cmp	r0, #0
   e4648:	d0e8      	beq.n	e461c <mbedtls_rsa_deduce_crt+0x1c>
    mbedtls_mpi_free( &K );
   e464a:	a801      	add	r0, sp, #4
   e464c:	f7fc fa8b 	bl	e0b66 <mbedtls_mpi_free>

    return( ret );
}
   e4650:	4620      	mov	r0, r4
   e4652:	b004      	add	sp, #16
   e4654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
   e4658:	2201      	movs	r2, #1
   e465a:	4629      	mov	r1, r5
   e465c:	a801      	add	r0, sp, #4
   e465e:	f7fc fea2 	bl	e13a6 <mbedtls_mpi_sub_int>
   e4662:	4604      	mov	r4, r0
   e4664:	2800      	cmp	r0, #0
   e4666:	d1f0      	bne.n	e464a <mbedtls_rsa_deduce_crt+0x4a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
   e4668:	aa01      	add	r2, sp, #4
   e466a:	4639      	mov	r1, r7
   e466c:	4648      	mov	r0, r9
   e466e:	f7fd f8e8 	bl	e1842 <mbedtls_mpi_mod_mpi>
   e4672:	4604      	mov	r4, r0
   e4674:	2800      	cmp	r0, #0
   e4676:	d0d4      	beq.n	e4622 <mbedtls_rsa_deduce_crt+0x22>
   e4678:	e7e7      	b.n	e464a <mbedtls_rsa_deduce_crt+0x4a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
   e467a:	4632      	mov	r2, r6
   e467c:	4629      	mov	r1, r5
   e467e:	4640      	mov	r0, r8
   e4680:	f7fd fbf3 	bl	e1e6a <mbedtls_mpi_inv_mod>
   e4684:	4604      	mov	r4, r0
   e4686:	e7e0      	b.n	e464a <mbedtls_rsa_deduce_crt+0x4a>

000e4688 <mbedtls_ssl_own_key>:
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
   e4688:	6b02      	ldr	r2, [r0, #48]	; 0x30
{
   e468a:	4603      	mov	r3, r0
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
   e468c:	b112      	cbz	r2, e4694 <mbedtls_ssl_own_key+0xc>
   e468e:	f8d2 0144 	ldr.w	r0, [r2, #324]	; 0x144
   e4692:	b910      	cbnz	r0, e469a <mbedtls_ssl_own_key+0x12>
        key_cert = ssl->conf->key_cert;
   e4694:	681b      	ldr	r3, [r3, #0]
   e4696:	6d18      	ldr	r0, [r3, #80]	; 0x50
    return( key_cert == NULL ? NULL : key_cert->key );
   e4698:	b100      	cbz	r0, e469c <mbedtls_ssl_own_key+0x14>
   e469a:	6840      	ldr	r0, [r0, #4]
}
   e469c:	4770      	bx	lr
	...

000e46a0 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj>:
 * Generate a pre-master secret and encrypt it with the server's RSA key
 */
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
   e46a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e46a4:	4615      	mov	r5, r2
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
   e46a6:	68c2      	ldr	r2, [r0, #12]
   e46a8:	2a00      	cmp	r2, #0
   e46aa:	bf0c      	ite	eq
   e46ac:	f04f 0800 	moveq.w	r8, #0
   e46b0:	f04f 0802 	movne.w	r8, #2
    unsigned char *p = ssl->handshake->premaster + pms_offset;
   e46b4:	6b02      	ldr	r2, [r0, #48]	; 0x30

    if( offset + len_bytes > MBEDTLS_SSL_OUT_CONTENT_LEN )
   e46b6:	eb08 0901 	add.w	r9, r8, r1
    unsigned char *p = ssl->handshake->premaster + pms_offset;
   e46ba:	f502 723d 	add.w	r2, r2, #756	; 0x2f4
    if( offset + len_bytes > MBEDTLS_SSL_OUT_CONTENT_LEN )
   e46be:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
{
   e46c2:	b086      	sub	sp, #24
   e46c4:	4604      	mov	r4, r0
   e46c6:	460f      	mov	r7, r1
    unsigned char *p = ssl->handshake->premaster + pms_offset;
   e46c8:	eb02 0603 	add.w	r6, r2, r3
    if( offset + len_bytes > MBEDTLS_SSL_OUT_CONTENT_LEN )
   e46cc:	d84c      	bhi.n	e4768 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xc8>
     *  struct {
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
   e46ce:	6800      	ldr	r0, [r0, #0]
                       ssl->conf->transport, p );
   e46d0:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
   e46d4:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
   e46d8:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
   e46dc:	4633      	mov	r3, r6
   e46de:	f3c2 0240 	ubfx	r2, r2, #1, #1
   e46e2:	f7fc f8e7 	bl	e08b4 <mbedtls_ssl_write_version>

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
   e46e6:	6823      	ldr	r3, [r4, #0]
   e46e8:	222e      	movs	r2, #46	; 0x2e
   e46ea:	f8d3 a018 	ldr.w	sl, [r3, #24]
   e46ee:	69d8      	ldr	r0, [r3, #28]
   e46f0:	1cb1      	adds	r1, r6, #2
   e46f2:	47d0      	blx	sl
   e46f4:	2800      	cmp	r0, #0
   e46f6:	d134      	bne.n	e4762 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xc2>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "f_rng", ret );
        return( ret );
    }

    ssl->handshake->pmslen = 48;
   e46f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e46fa:	2230      	movs	r2, #48	; 0x30
   e46fc:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0

    if( ssl->session_negotiate->peer_cert == NULL )
   e4700:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e4702:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e4704:	2800      	cmp	r0, #0
   e4706:	d031      	beq.n	e476c <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xcc>
    }

    /*
     * Now write it out, encrypted
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
   e4708:	2101      	movs	r1, #1
   e470a:	30bc      	adds	r0, #188	; 0xbc
   e470c:	f7fa fa96 	bl	dec3c <mbedtls_pk_can_do>
   e4710:	b370      	cbz	r0, e4770 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd0>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
    }

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
   e4712:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
                            p, ssl->handshake->pmslen,
                            ssl->out_msg + offset + len_bytes, olen,
                            MBEDTLS_SSL_OUT_CONTENT_LEN - offset - len_bytes,
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
   e4716:	6822      	ldr	r2, [r4, #0]
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
   e4718:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e471c:	9305      	str	r3, [sp, #20]
   e471e:	69d3      	ldr	r3, [r2, #28]
   e4720:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   e4722:	9303      	str	r3, [sp, #12]
   e4724:	6992      	ldr	r2, [r2, #24]
   e4726:	9202      	str	r2, [sp, #8]
   e4728:	f5c9 5200 	rsb	r2, r9, #8192	; 0x2000
   e472c:	e9cd 5200 	strd	r5, r2, [sp]
   e4730:	9b05      	ldr	r3, [sp, #20]
   e4732:	f8d1 22b0 	ldr.w	r2, [r1, #688]	; 0x2b0
   e4736:	444b      	add	r3, r9
   e4738:	4631      	mov	r1, r6
   e473a:	30bc      	adds	r0, #188	; 0xbc
   e473c:	f7fa faea 	bl	ded14 <mbedtls_pk_encrypt>
   e4740:	b978      	cbnz	r0, e4762 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xc2>
        return( ret );
    }

#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( len_bytes == 2 )
   e4742:	f1b8 0f00 	cmp.w	r8, #0
   e4746:	d00c      	beq.n	e4762 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xc2>
    {
        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );
   e4748:	682b      	ldr	r3, [r5, #0]
   e474a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e474e:	0a1b      	lsrs	r3, r3, #8
   e4750:	55d3      	strb	r3, [r2, r7]
        ssl->out_msg[offset+1] = (unsigned char)( *olen      );
   e4752:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   e4756:	682b      	ldr	r3, [r5, #0]
   e4758:	440f      	add	r7, r1
   e475a:	707b      	strb	r3, [r7, #1]
        *olen += 2;
   e475c:	682b      	ldr	r3, [r5, #0]
   e475e:	3302      	adds	r3, #2
   e4760:	602b      	str	r3, [r5, #0]
    }
#endif

    return( 0 );
}
   e4762:	b006      	add	sp, #24
   e4764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
   e4768:	4802      	ldr	r0, [pc, #8]	; (e4774 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd4>)
   e476a:	e7fa      	b.n	e4762 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xc2>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   e476c:	4802      	ldr	r0, [pc, #8]	; (e4778 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xd8>)
   e476e:	e7f8      	b.n	e4762 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xc2>
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
   e4770:	4802      	ldr	r0, [pc, #8]	; (e477c <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xdc>)
   e4772:	e7f6      	b.n	e4762 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj+0xc2>
   e4774:	ffff9600 	.word	0xffff9600
   e4778:	ffff8900 	.word	0xffff8900
   e477c:	ffff9300 	.word	0xffff9300

000e4780 <mbedtls_ssl_handshake_client_step>:

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
   e4780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
   e4784:	6843      	ldr	r3, [r0, #4]
   e4786:	2b10      	cmp	r3, #16
{
   e4788:	b09d      	sub	sp, #116	; 0x74
   e478a:	4604      	mov	r4, r0
    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
   e478c:	d101      	bne.n	e4792 <mbedtls_ssl_handshake_client_step+0x12>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   e478e:	4dbd      	ldr	r5, [pc, #756]	; (e4a84 <mbedtls_ssl_handshake_client_step+0x304>)
   e4790:	e05b      	b.n	e484a <mbedtls_ssl_handshake_client_step+0xca>
    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
   e4792:	6b03      	ldr	r3, [r0, #48]	; 0x30
   e4794:	2b00      	cmp	r3, #0
   e4796:	d0fa      	beq.n	e478e <mbedtls_ssl_handshake_client_step+0xe>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "client state: %d", ssl->state ) );

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
   e4798:	f7fa ff06 	bl	df5a8 <mbedtls_ssl_flush_output>
   e479c:	4605      	mov	r5, r0
   e479e:	2800      	cmp	r0, #0
   e47a0:	d153      	bne.n	e484a <mbedtls_ssl_handshake_client_step+0xca>
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
   e47a2:	6863      	ldr	r3, [r4, #4]
   e47a4:	2b0c      	cmp	r3, #12
   e47a6:	d124      	bne.n	e47f2 <mbedtls_ssl_handshake_client_step+0x72>
        ssl->handshake->new_session_ticket != 0 )
   e47a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
   e47aa:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
   e47ae:	2b00      	cmp	r3, #0
   e47b0:	f000 864c 	beq.w	e544c <mbedtls_ssl_handshake_client_step+0xccc>
    {
        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;
   e47b4:	2311      	movs	r3, #17
   e47b6:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e47b8:	2101      	movs	r1, #1
   e47ba:	4620      	mov	r0, r4
   e47bc:	f7fb f8c0 	bl	df940 <mbedtls_ssl_read_record>
   e47c0:	4606      	mov	r6, r0
   e47c2:	2800      	cmp	r0, #0
   e47c4:	f040 842a 	bne.w	e501c <mbedtls_ssl_handshake_client_step+0x89c>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e47c8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e47ca:	2b16      	cmp	r3, #22
   e47cc:	f040 824c 	bne.w	e4c68 <mbedtls_ssl_handshake_client_step+0x4e8>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
   e47d0:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64
   e47d4:	f898 3000 	ldrb.w	r3, [r8]
   e47d8:	2b04      	cmp	r3, #4
   e47da:	d103      	bne.n	e47e4 <mbedtls_ssl_handshake_client_step+0x64>
        ssl->in_hslen < 6 + mbedtls_ssl_hs_hdr_len( ssl ) )
   e47dc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
   e47de:	2b09      	cmp	r3, #9
   e47e0:	f200 85f3 	bhi.w	e53ca <mbedtls_ssl_handshake_client_step+0xc4a>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e47e4:	2232      	movs	r2, #50	; 0x32
   e47e6:	2102      	movs	r1, #2
   e47e8:	4620      	mov	r0, r4
   e47ea:	f7fb f88f 	bl	df90c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
   e47ee:	4da6      	ldr	r5, [pc, #664]	; (e4a88 <mbedtls_ssl_handshake_client_step+0x308>)
   e47f0:	e02b      	b.n	e484a <mbedtls_ssl_handshake_client_step+0xca>
    }
#endif

    switch( ssl->state )
   e47f2:	2b11      	cmp	r3, #17
   e47f4:	d8cb      	bhi.n	e478e <mbedtls_ssl_handshake_client_step+0xe>
   e47f6:	a201      	add	r2, pc, #4	; (adr r2, e47fc <mbedtls_ssl_handshake_client_step+0x7c>)
   e47f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   e47fc:	000e4845 	.word	0x000e4845
   e4800:	000e4853 	.word	0x000e4853
   e4804:	000e4c51 	.word	0x000e4c51
   e4808:	000e4f07 	.word	0x000e4f07
   e480c:	000e4f11 	.word	0x000e4f11
   e4810:	000e50bf 	.word	0x000e50bf
   e4814:	000e515b 	.word	0x000e515b
   e4818:	000e5193 	.word	0x000e5193
   e481c:	000e519b 	.word	0x000e519b
   e4820:	000e52cf 	.word	0x000e52cf
   e4824:	000e53bb 	.word	0x000e53bb
   e4828:	000e53c3 	.word	0x000e53c3
   e482c:	000e478f 	.word	0x000e478f
   e4830:	000e5455 	.word	0x000e5455
   e4834:	000e545d 	.word	0x000e545d
   e4838:	000e5461 	.word	0x000e5461
   e483c:	000e478f 	.word	0x000e478f
   e4840:	000e47b9 	.word	0x000e47b9
    {
        case MBEDTLS_SSL_HELLO_REQUEST:
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
   e4844:	2201      	movs	r2, #1
   e4846:	6062      	str	r2, [r4, #4]
    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
   e4848:	461d      	mov	r5, r3
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   }

    return( ret );
}
   e484a:	4628      	mov	r0, r5
   e484c:	b01d      	add	sp, #116	; 0x74
   e484e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ssl->conf->f_rng == NULL )
   e4852:	6821      	ldr	r1, [r4, #0]
   e4854:	698b      	ldr	r3, [r1, #24]
   e4856:	2b00      	cmp	r3, #0
   e4858:	f000 8607 	beq.w	e546a <mbedtls_ssl_handshake_client_step+0xcea>
        ssl->major_ver = ssl->conf->min_major_ver;
   e485c:	f891 307a 	ldrb.w	r3, [r1, #122]	; 0x7a
   e4860:	60a3      	str	r3, [r4, #8]
        ssl->minor_ver = ssl->conf->min_minor_ver;
   e4862:	f891 307b 	ldrb.w	r3, [r1, #123]	; 0x7b
   e4866:	60e3      	str	r3, [r4, #12]
    if( ssl->conf->max_major_ver == 0 )
   e4868:	f891 0078 	ldrb.w	r0, [r1, #120]	; 0x78
   e486c:	2800      	cmp	r0, #0
   e486e:	d08e      	beq.n	e478e <mbedtls_ssl_handshake_client_step+0xe>
                       ssl->conf->transport, p );
   e4870:	f891 207c 	ldrb.w	r2, [r1, #124]	; 0x7c
    buf = ssl->out_msg;
   e4874:	f8d4 a098 	ldr.w	sl, [r4, #152]	; 0x98
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
   e4878:	f891 1079 	ldrb.w	r1, [r1, #121]	; 0x79
   e487c:	f10a 0304 	add.w	r3, sl, #4
   e4880:	f3c2 0240 	ubfx	r2, r2, #1, #1
   e4884:	f7fc f816 	bl	e08b4 <mbedtls_ssl_write_version>
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
   e4888:	6823      	ldr	r3, [r4, #0]
    unsigned char *p = ssl->handshake->randbytes;
   e488a:	6b26      	ldr	r6, [r4, #48]	; 0x30
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
   e488c:	699d      	ldr	r5, [r3, #24]
   e488e:	69d8      	ldr	r0, [r3, #28]
   e4890:	2204      	movs	r2, #4
   e4892:	f506 712d 	add.w	r1, r6, #692	; 0x2b4
   e4896:	47a8      	blx	r5
   e4898:	4605      	mov	r5, r0
   e489a:	2800      	cmp	r0, #0
   e489c:	d1d5      	bne.n	e484a <mbedtls_ssl_handshake_client_step+0xca>
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
   e489e:	6823      	ldr	r3, [r4, #0]
   e48a0:	221c      	movs	r2, #28
   e48a2:	699d      	ldr	r5, [r3, #24]
   e48a4:	69d8      	ldr	r0, [r3, #28]
   e48a6:	f506 712e 	add.w	r1, r6, #696	; 0x2b8
   e48aa:	47a8      	blx	r5
   e48ac:	4681      	mov	r9, r0
   e48ae:	2800      	cmp	r0, #0
   e48b0:	f040 85de 	bne.w	e5470 <mbedtls_ssl_handshake_client_step+0xcf0>
    memcpy( p, ssl->handshake->randbytes, 32 );
   e48b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e48b6:	f10a 0106 	add.w	r1, sl, #6
   e48ba:	f503 722d 	add.w	r2, r3, #692	; 0x2b4
   e48be:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
   e48c2:	f852 0b04 	ldr.w	r0, [r2], #4
   e48c6:	f841 0b04 	str.w	r0, [r1], #4
   e48ca:	429a      	cmp	r2, r3
   e48cc:	d1f9      	bne.n	e48c2 <mbedtls_ssl_handshake_client_step+0x142>
    n = ssl->session_negotiate->id_len;
   e48ce:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   e48d0:	688b      	ldr	r3, [r1, #8]
    if( n < 16 || n > 32 ||
   e48d2:	f1a3 0210 	sub.w	r2, r3, #16
   e48d6:	2a10      	cmp	r2, #16
   e48d8:	d824      	bhi.n	e4924 <mbedtls_ssl_handshake_client_step+0x1a4>
        ssl->handshake->resume == 0 )
   e48da:	6b22      	ldr	r2, [r4, #48]	; 0x30
    if( n < 16 || n > 32 ||
   e48dc:	f8d2 2348 	ldr.w	r2, [r2, #840]	; 0x348
        n = 0;
   e48e0:	2a00      	cmp	r2, #0
   e48e2:	bf08      	it	eq
   e48e4:	2300      	moveq	r3, #0
        if( ssl->session_negotiate->ticket != NULL &&
   e48e6:	6e4a      	ldr	r2, [r1, #100]	; 0x64
   e48e8:	b16a      	cbz	r2, e4906 <mbedtls_ssl_handshake_client_step+0x186>
   e48ea:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   e48ec:	b15a      	cbz	r2, e4906 <mbedtls_ssl_handshake_client_step+0x186>
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->session_negotiate->id, 32 );
   e48ee:	6823      	ldr	r3, [r4, #0]
   e48f0:	2220      	movs	r2, #32
   e48f2:	699d      	ldr	r5, [r3, #24]
   e48f4:	69d8      	ldr	r0, [r3, #28]
   e48f6:	310c      	adds	r1, #12
   e48f8:	47a8      	blx	r5
            if( ret != 0 )
   e48fa:	4605      	mov	r5, r0
   e48fc:	2800      	cmp	r0, #0
   e48fe:	d1a4      	bne.n	e484a <mbedtls_ssl_handshake_client_step+0xca>
            ssl->session_negotiate->id_len = n = 32;
   e4900:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e4902:	2320      	movs	r3, #32
   e4904:	6093      	str	r3, [r2, #8]
    *p++ = (unsigned char) n;
   e4906:	f10a 0527 	add.w	r5, sl, #39	; 0x27
   e490a:	f88a 3026 	strb.w	r3, [sl, #38]	; 0x26
   e490e:	4628      	mov	r0, r5
    for( i = 0; i < n; i++ )
   e4910:	2200      	movs	r2, #0
   e4912:	4293      	cmp	r3, r2
   e4914:	d008      	beq.n	e4928 <mbedtls_ssl_handshake_client_step+0x1a8>
        *p++ = ssl->session_negotiate->id[i];
   e4916:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   e4918:	4411      	add	r1, r2
    for( i = 0; i < n; i++ )
   e491a:	3201      	adds	r2, #1
        *p++ = ssl->session_negotiate->id[i];
   e491c:	7b09      	ldrb	r1, [r1, #12]
   e491e:	f800 1b01 	strb.w	r1, [r0], #1
    for( i = 0; i < n; i++ )
   e4922:	e7f6      	b.n	e4912 <mbedtls_ssl_handshake_client_step+0x192>
        n = 0;
   e4924:	2300      	movs	r3, #0
   e4926:	e7de      	b.n	e48e6 <mbedtls_ssl_handshake_client_step+0x166>
   e4928:	441d      	add	r5, r3
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
   e492a:	68e2      	ldr	r2, [r4, #12]
   e492c:	6823      	ldr	r3, [r4, #0]
   e492e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    p += 2;
   e4932:	1cae      	adds	r6, r5, #2
    for( i = 0; ciphersuites[i] != 0; i++ )
   e4934:	f1a3 0804 	sub.w	r8, r3, #4
    n = 0;
   e4938:	2100      	movs	r1, #0
    for( i = 0; ciphersuites[i] != 0; i++ )
   e493a:	f858 7f04 	ldr.w	r7, [r8, #4]!
   e493e:	9106      	str	r1, [sp, #24]
   e4940:	f101 0b01 	add.w	fp, r1, #1
   e4944:	b307      	cbz	r7, e4988 <mbedtls_ssl_handshake_client_step+0x208>
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );
   e4946:	4638      	mov	r0, r7
   e4948:	f7ff fb68 	bl	e401c <mbedtls_ssl_ciphersuite_from_id>
                                      ssl->conf->min_minor_ver,
   e494c:	6827      	ldr	r7, [r4, #0]
    if( suite_info == NULL )
   e494e:	9906      	ldr	r1, [sp, #24]
        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
   e4950:	f897 c079 	ldrb.w	ip, [r7, #121]	; 0x79
    if( suite_info == NULL )
   e4954:	2800      	cmp	r0, #0
   e4956:	d0f0      	beq.n	e493a <mbedtls_ssl_handshake_client_step+0x1ba>
    if( suite_info->min_minor_ver > max_minor_ver ||
   e4958:	6903      	ldr	r3, [r0, #16]
   e495a:	459c      	cmp	ip, r3
   e495c:	dbed      	blt.n	e493a <mbedtls_ssl_handshake_client_step+0x1ba>
        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
   e495e:	f897 707b 	ldrb.w	r7, [r7, #123]	; 0x7b
    if( suite_info->min_minor_ver > max_minor_ver ||
   e4962:	6983      	ldr	r3, [r0, #24]
   e4964:	429f      	cmp	r7, r3
   e4966:	dce8      	bgt.n	e493a <mbedtls_ssl_handshake_client_step+0x1ba>
        uses_ec |= mbedtls_ssl_ciphersuite_uses_ec( ciphersuite_info );
   e4968:	f7ff fb99 	bl	e409e <mbedtls_ssl_ciphersuite_uses_ec>
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
   e496c:	f8d8 3000 	ldr.w	r3, [r8]
   e4970:	4632      	mov	r2, r6
   e4972:	121b      	asrs	r3, r3, #8
   e4974:	f802 3b02 	strb.w	r3, [r2], #2
        *p++ = (unsigned char)( ciphersuites[i]      );
   e4978:	f8d8 3000 	ldr.w	r3, [r8]
   e497c:	7073      	strb	r3, [r6, #1]
        uses_ec |= mbedtls_ssl_ciphersuite_uses_ec( ciphersuite_info );
   e497e:	ea49 0900 	orr.w	r9, r9, r0
        *p++ = (unsigned char)( ciphersuites[i]      );
   e4982:	4616      	mov	r6, r2
   e4984:	4659      	mov	r1, fp
    for( i = 0; ciphersuites[i] != 0; i++ )
   e4986:	e7d8      	b.n	e493a <mbedtls_ssl_handshake_client_step+0x1ba>
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
   e4988:	23ff      	movs	r3, #255	; 0xff
   e498a:	7073      	strb	r3, [r6, #1]
    *q++ = (unsigned char)( n >> 7 );
   e498c:	ea4f 13db 	mov.w	r3, fp, lsr #7
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
   e4990:	7037      	strb	r7, [r6, #0]
    *q++ = (unsigned char)( n << 1 );
   e4992:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
    *q++ = (unsigned char)( n >> 7 );
   e4996:	702b      	strb	r3, [r5, #0]
        *p++ = 1;
   e4998:	2301      	movs	r3, #1
    *q++ = (unsigned char)( n << 1 );
   e499a:	f885 b001 	strb.w	fp, [r5, #1]
        *p++ = 1;
   e499e:	70b3      	strb	r3, [r6, #2]
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
   e49a0:	70f7      	strb	r7, [r6, #3]
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e49a2:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
    if( ssl->hostname == NULL )
   e49a6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
   e49aa:	f106 0804 	add.w	r8, r6, #4
    ssl_write_hostname_ext( ssl, p + 2 + ext_len, &olen );
   e49ae:	f106 0b06 	add.w	fp, r6, #6
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e49b2:	f501 5500 	add.w	r5, r1, #8192	; 0x2000
    if( ssl->hostname == NULL )
   e49b6:	b378      	cbz	r0, e4a18 <mbedtls_ssl_handshake_client_step+0x298>
    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
   e49b8:	45ab      	cmp	fp, r5
   e49ba:	d82f      	bhi.n	e4a1c <mbedtls_ssl_handshake_client_step+0x29c>
    hostname_len = strlen( ssl->hostname );
   e49bc:	f004 fa8c 	bl	e8ed8 <strlen>
    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
   e49c0:	eba5 010b 	sub.w	r1, r5, fp
   e49c4:	f100 0309 	add.w	r3, r0, #9
   e49c8:	4299      	cmp	r1, r3
   e49ca:	9306      	str	r3, [sp, #24]
   e49cc:	d326      	bcc.n	e4a1c <mbedtls_ssl_handshake_client_step+0x29c>
    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
   e49ce:	1d41      	adds	r1, r0, #5
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );
   e49d0:	b2c2      	uxtb	r2, r0
    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
   e49d2:	0a09      	lsrs	r1, r1, #8
   e49d4:	7231      	strb	r1, [r6, #8]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );
   e49d6:	1d51      	adds	r1, r2, #5
   e49d8:	7271      	strb	r1, [r6, #9]
    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
   e49da:	1cc1      	adds	r1, r0, #3
   e49dc:	0a09      	lsrs	r1, r1, #8
   e49de:	72b1      	strb	r1, [r6, #10]
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );
   e49e0:	1cd1      	adds	r1, r2, #3
   e49e2:	72f1      	strb	r1, [r6, #11]
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
   e49e4:	0a01      	lsrs	r1, r0, #8
    *p++ = (unsigned char)( ( hostname_len      ) & 0xFF );
   e49e6:	73b2      	strb	r2, [r6, #14]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
   e49e8:	71b7      	strb	r7, [r6, #6]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );
   e49ea:	71f7      	strb	r7, [r6, #7]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
   e49ec:	7337      	strb	r7, [r6, #12]
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
   e49ee:	7371      	strb	r1, [r6, #13]
    memcpy( p, ssl->hostname, hostname_len );
   e49f0:	4602      	mov	r2, r0
   e49f2:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   e49f6:	f106 000f 	add.w	r0, r6, #15
   e49fa:	f004 f9f7 	bl	e8dec <memcpy>
    *olen = hostname_len + 9;
   e49fe:	9b06      	ldr	r3, [sp, #24]
    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
   e4a00:	6822      	ldr	r2, [r4, #0]
   e4a02:	f892 1079 	ldrb.w	r1, [r2, #121]	; 0x79
   e4a06:	2903      	cmp	r1, #3
   e4a08:	f040 80dd 	bne.w	e4bc6 <mbedtls_ssl_handshake_client_step+0x446>
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
   e4a0c:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
    size_t sig_alg_len = 0;
   e4a0e:	2200      	movs	r2, #0
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
   e4a10:	588d      	ldr	r5, [r1, r2]
   e4a12:	b12d      	cbz	r5, e4a20 <mbedtls_ssl_handshake_client_step+0x2a0>
        sig_alg_len += 2;
   e4a14:	3204      	adds	r2, #4
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
   e4a16:	e7fb      	b.n	e4a10 <mbedtls_ssl_handshake_client_step+0x290>
    *olen = 0;
   e4a18:	4603      	mov	r3, r0
   e4a1a:	e7f1      	b.n	e4a00 <mbedtls_ssl_handshake_client_step+0x280>
   e4a1c:	463b      	mov	r3, r7
   e4a1e:	e7ef      	b.n	e4a00 <mbedtls_ssl_handshake_client_step+0x280>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e4a20:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
   e4a24:	1c9f      	adds	r7, r3, #2
   e4a26:	4447      	add	r7, r8
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e4a28:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
    if( end < p || (size_t)( end - p ) < sig_alg_len + 6 )
   e4a2c:	4287      	cmp	r7, r0
   e4a2e:	d83b      	bhi.n	e4aa8 <mbedtls_ssl_handshake_client_step+0x328>
   e4a30:	1bc0      	subs	r0, r0, r7
   e4a32:	3206      	adds	r2, #6
   e4a34:	4290      	cmp	r0, r2
   e4a36:	d337      	bcc.n	e4aa8 <mbedtls_ssl_handshake_client_step+0x328>
   e4a38:	3904      	subs	r1, #4
    unsigned char *sig_alg_list = buf + 6;
   e4a3a:	1dba      	adds	r2, r7, #6
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
   e4a3c:	f851 0f04 	ldr.w	r0, [r1, #4]!
   e4a40:	9109      	str	r1, [sp, #36]	; 0x24
   e4a42:	3204      	adds	r2, #4
   e4a44:	e9cd 2206 	strd	r2, r2, [sp, #24]
   e4a48:	f105 0c02 	add.w	ip, r5, #2
   e4a4c:	b1f0      	cbz	r0, e4a8c <mbedtls_ssl_handshake_client_step+0x30c>
   e4a4e:	9308      	str	r3, [sp, #32]
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
   e4a50:	f7fb fd9e 	bl	e0590 <mbedtls_ssl_hash_from_md_alg>
   e4a54:	9a06      	ldr	r2, [sp, #24]
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
   e4a56:	9909      	ldr	r1, [sp, #36]	; 0x24
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
   e4a58:	f802 0c04 	strb.w	r0, [r2, #-4]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
   e4a5c:	f04f 0303 	mov.w	r3, #3
   e4a60:	f802 3c03 	strb.w	r3, [r2, #-3]
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
   e4a64:	6808      	ldr	r0, [r1, #0]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
   e4a66:	9207      	str	r2, [sp, #28]
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
   e4a68:	9106      	str	r1, [sp, #24]
   e4a6a:	f7fb fd91 	bl	e0590 <mbedtls_ssl_hash_from_md_alg>
   e4a6e:	9a07      	ldr	r2, [sp, #28]
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
   e4a70:	9906      	ldr	r1, [sp, #24]
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
   e4a72:	f802 0c02 	strb.w	r0, [r2, #-2]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
   e4a76:	f04f 0301 	mov.w	r3, #1
   e4a7a:	f802 3c01 	strb.w	r3, [r2, #-1]
   e4a7e:	3504      	adds	r5, #4
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
   e4a80:	9b08      	ldr	r3, [sp, #32]
   e4a82:	e7db      	b.n	e4a3c <mbedtls_ssl_handshake_client_step+0x2bc>
   e4a84:	ffff8f00 	.word	0xffff8f00
   e4a88:	ffff9200 	.word	0xffff9200
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
   e4a8c:	220d      	movs	r2, #13
   e4a8e:	707a      	strb	r2, [r7, #1]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
   e4a90:	b2ea      	uxtb	r2, r5
   e4a92:	1c91      	adds	r1, r2, #2
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
   e4a94:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
   e4a98:	70f9      	strb	r1, [r7, #3]
    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
   e4a9a:	0a29      	lsrs	r1, r5, #8
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
   e4a9c:	7038      	strb	r0, [r7, #0]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
   e4a9e:	f887 c002 	strb.w	ip, [r7, #2]
    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
   e4aa2:	7139      	strb	r1, [r7, #4]
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );
   e4aa4:	717a      	strb	r2, [r7, #5]
    *olen = 6 + sig_alg_len;
   e4aa6:	3506      	adds	r5, #6
    ext_len += olen;
   e4aa8:	441d      	add	r5, r3
    if( uses_ec )
   e4aaa:	f1b9 0f00 	cmp.w	r9, #0
   e4aae:	d02b      	beq.n	e4b08 <mbedtls_ssl_handshake_client_step+0x388>
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
   e4ab0:	6822      	ldr	r2, [r4, #0]
   e4ab2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e4ab6:	6e17      	ldr	r7, [r2, #96]	; 0x60
    size_t elliptic_curve_len = 0;
   e4ab8:	f04f 0900 	mov.w	r9, #0
   e4abc:	3f01      	subs	r7, #1
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
   e4abe:	f817 0f01 	ldrb.w	r0, [r7, #1]!
   e4ac2:	2800      	cmp	r0, #0
   e4ac4:	f000 8084 	beq.w	e4bd0 <mbedtls_ssl_handshake_client_step+0x450>
   e4ac8:	9306      	str	r3, [sp, #24]
        info = mbedtls_ecp_curve_info_from_grp_id( *grp_id );
   e4aca:	f7f4 fa0d 	bl	d8ee8 <mbedtls_ecp_curve_info_from_grp_id>
        if( info == NULL )
   e4ace:	9b06      	ldr	r3, [sp, #24]
   e4ad0:	2800      	cmp	r0, #0
   e4ad2:	d17a      	bne.n	e4bca <mbedtls_ssl_handshake_client_step+0x44a>
    *olen = 0;
   e4ad4:	2300      	movs	r3, #0
        ext_len += olen;
   e4ad6:	18e8      	adds	r0, r5, r3
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e4ad8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
        ssl_write_supported_point_formats_ext( ssl, p + 2 + ext_len, &olen );
   e4adc:	1c82      	adds	r2, r0, #2
   e4ade:	4442      	add	r2, r8
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e4ae0:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
    if( end < p || (size_t)( end - p ) < 6 )
   e4ae4:	428a      	cmp	r2, r1
   e4ae6:	f04f 0300 	mov.w	r3, #0
   e4aea:	d80c      	bhi.n	e4b06 <mbedtls_ssl_handshake_client_step+0x386>
   e4aec:	1a89      	subs	r1, r1, r2
   e4aee:	2905      	cmp	r1, #5
   e4af0:	d909      	bls.n	e4b06 <mbedtls_ssl_handshake_client_step+0x386>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS      ) & 0xFF );
   e4af2:	210b      	movs	r1, #11
   e4af4:	7051      	strb	r1, [r2, #1]
    *p++ = 2;
   e4af6:	2102      	movs	r1, #2
   e4af8:	70d1      	strb	r1, [r2, #3]
    *p++ = 1;
   e4afa:	2101      	movs	r1, #1
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS >> 8 ) & 0xFF );
   e4afc:	7013      	strb	r3, [r2, #0]
    *p++ = 0x00;
   e4afe:	7093      	strb	r3, [r2, #2]
    *p++ = MBEDTLS_ECP_PF_UNCOMPRESSED;
   e4b00:	7153      	strb	r3, [r2, #5]
    *p++ = 1;
   e4b02:	7111      	strb	r1, [r2, #4]
    *olen = 6;
   e4b04:	2306      	movs	r3, #6
        ext_len += olen;
   e4b06:	18c5      	adds	r5, r0, r3
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
   e4b08:	6823      	ldr	r3, [r4, #0]
   e4b0a:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
   e4b0e:	f413 73e0 	ands.w	r3, r3, #448	; 0x1c0
   e4b12:	d018      	beq.n	e4b46 <mbedtls_ssl_handshake_client_step+0x3c6>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e4b14:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
   e4b18:	1ca9      	adds	r1, r5, #2
   e4b1a:	4441      	add	r1, r8
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e4b1c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    if( end < p || (size_t)( end - p ) < 5 )
   e4b20:	4291      	cmp	r1, r2
   e4b22:	f04f 0300 	mov.w	r3, #0
   e4b26:	d80e      	bhi.n	e4b46 <mbedtls_ssl_handshake_client_step+0x3c6>
   e4b28:	1a52      	subs	r2, r2, r1
   e4b2a:	2a04      	cmp	r2, #4
   e4b2c:	d90b      	bls.n	e4b46 <mbedtls_ssl_handshake_client_step+0x3c6>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
   e4b2e:	2201      	movs	r2, #1
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
   e4b30:	700b      	strb	r3, [r1, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
   e4b32:	704a      	strb	r2, [r1, #1]
    *p++ = 0x00;
   e4b34:	708b      	strb	r3, [r1, #2]
    *p++ = 1;
   e4b36:	70ca      	strb	r2, [r1, #3]
    *p++ = ssl->conf->mfl_code;
   e4b38:	6823      	ldr	r3, [r4, #0]
   e4b3a:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
   e4b3e:	f3c3 1382 	ubfx	r3, r3, #6, #3
   e4b42:	710b      	strb	r3, [r1, #4]
    *olen = 5;
   e4b44:	2305      	movs	r3, #5
    ext_len += olen;
   e4b46:	441d      	add	r5, r3
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )
   e4b48:	6823      	ldr	r3, [r4, #0]
   e4b4a:	f893 707d 	ldrb.w	r7, [r3, #125]	; 0x7d
   e4b4e:	f017 0702 	ands.w	r7, r7, #2
   e4b52:	d01e      	beq.n	e4b92 <mbedtls_ssl_handshake_client_step+0x412>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e4b54:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );
   e4b58:	1ca8      	adds	r0, r5, #2
   e4b5a:	4440      	add	r0, r8
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   e4b5c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    if( end < p || (size_t)( end - p ) < 4 + tlen )
   e4b60:	4298      	cmp	r0, r3
   e4b62:	d871      	bhi.n	e4c48 <mbedtls_ssl_handshake_client_step+0x4c8>
    size_t tlen = ssl->session_negotiate->ticket_len;
   e4b64:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e4b66:	6e92      	ldr	r2, [r2, #104]	; 0x68
    if( end < p || (size_t)( end - p ) < 4 + tlen )
   e4b68:	1a1b      	subs	r3, r3, r0
   e4b6a:	1d17      	adds	r7, r2, #4
   e4b6c:	42bb      	cmp	r3, r7
   e4b6e:	f04f 0300 	mov.w	r3, #0
   e4b72:	d369      	bcc.n	e4c48 <mbedtls_ssl_handshake_client_step+0x4c8>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET >> 8 ) & 0xFF );
   e4b74:	7003      	strb	r3, [r0, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );
   e4b76:	2323      	movs	r3, #35	; 0x23
   e4b78:	7043      	strb	r3, [r0, #1]
    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
   e4b7a:	0a13      	lsrs	r3, r2, #8
   e4b7c:	7083      	strb	r3, [r0, #2]
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );
   e4b7e:	70c2      	strb	r2, [r0, #3]
    if( ssl->session_negotiate->ticket == NULL || tlen == 0 )
   e4b80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e4b82:	6e59      	ldr	r1, [r3, #100]	; 0x64
   e4b84:	2900      	cmp	r1, #0
   e4b86:	d061      	beq.n	e4c4c <mbedtls_ssl_handshake_client_step+0x4cc>
   e4b88:	2a00      	cmp	r2, #0
   e4b8a:	d05f      	beq.n	e4c4c <mbedtls_ssl_handshake_client_step+0x4cc>
    memcpy( p, ssl->session_negotiate->ticket, tlen );
   e4b8c:	3004      	adds	r0, #4
   e4b8e:	f004 f92d 	bl	e8dec <memcpy>
    if( ext_len > 0 )
   e4b92:	19ed      	adds	r5, r5, r7
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
   e4b94:	bf1e      	ittt	ne
   e4b96:	0a2b      	lsrne	r3, r5, #8
        p += ext_len;
   e4b98:	eb0b 0805 	addne.w	r8, fp, r5
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
   e4b9c:	7133      	strbne	r3, [r6, #4]
    ssl->out_msglen  = p - buf;
   e4b9e:	eba8 030a 	sub.w	r3, r8, sl
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
   e4ba2:	bf18      	it	ne
   e4ba4:	7175      	strbne	r5, [r6, #5]
    ssl->out_msglen  = p - buf;
   e4ba6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   e4baa:	2316      	movs	r3, #22
   e4bac:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
   e4bb0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e4bb4:	2201      	movs	r2, #1
   e4bb6:	701a      	strb	r2, [r3, #0]
    ssl->state++;
   e4bb8:	6863      	ldr	r3, [r4, #4]
   e4bba:	4413      	add	r3, r2
    ssl->state++;
   e4bbc:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   e4bbe:	4620      	mov	r0, r4
   e4bc0:	f7fa fe06 	bl	df7d0 <mbedtls_ssl_write_handshake_msg>
   e4bc4:	e1a2      	b.n	e4f0c <mbedtls_ssl_handshake_client_step+0x78c>
    *olen = 0;
   e4bc6:	2500      	movs	r5, #0
   e4bc8:	e76e      	b.n	e4aa8 <mbedtls_ssl_handshake_client_step+0x328>
        elliptic_curve_len += 2;
   e4bca:	f109 0902 	add.w	r9, r9, #2
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
   e4bce:	e776      	b.n	e4abe <mbedtls_ssl_handshake_client_step+0x33e>
   e4bd0:	1caf      	adds	r7, r5, #2
   e4bd2:	4447      	add	r7, r8
   e4bd4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    if( end < p || (size_t)( end - p ) < 6 + elliptic_curve_len )
   e4bd8:	42bb      	cmp	r3, r7
   e4bda:	f4ff af7b 	bcc.w	e4ad4 <mbedtls_ssl_handshake_client_step+0x354>
   e4bde:	1bdb      	subs	r3, r3, r7
   e4be0:	f109 0206 	add.w	r2, r9, #6
   e4be4:	4293      	cmp	r3, r2
   e4be6:	f4ff af75 	bcc.w	e4ad4 <mbedtls_ssl_handshake_client_step+0x354>
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
   e4bea:	6823      	ldr	r3, [r4, #0]
   e4bec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   e4bee:	f06f 0105 	mvn.w	r1, #5
   e4bf2:	3a01      	subs	r2, #1
    unsigned char *elliptic_curve_list = p + 6;
   e4bf4:	f107 0906 	add.w	r9, r7, #6
   e4bf8:	1bc9      	subs	r1, r1, r7
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
   e4bfa:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   e4bfe:	9107      	str	r1, [sp, #28]
   e4c00:	eb01 0309 	add.w	r3, r1, r9
   e4c04:	9206      	str	r2, [sp, #24]
   e4c06:	9208      	str	r2, [sp, #32]
   e4c08:	f109 0902 	add.w	r9, r9, #2
   e4c0c:	b158      	cbz	r0, e4c26 <mbedtls_ssl_handshake_client_step+0x4a6>
        info = mbedtls_ecp_curve_info_from_grp_id( *grp_id );
   e4c0e:	f7f4 f96b 	bl	d8ee8 <mbedtls_ecp_curve_info_from_grp_id>
        elliptic_curve_list[elliptic_curve_len++] = info->tls_id >> 8;
   e4c12:	8843      	ldrh	r3, [r0, #2]
   e4c14:	121b      	asrs	r3, r3, #8
   e4c16:	f809 3c02 	strb.w	r3, [r9, #-2]
        elliptic_curve_list[elliptic_curve_len++] = info->tls_id & 0xFF;
   e4c1a:	8843      	ldrh	r3, [r0, #2]
   e4c1c:	f809 3c01 	strb.w	r3, [r9, #-1]
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
   e4c20:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
   e4c24:	e7e9      	b.n	e4bfa <mbedtls_ssl_handshake_client_step+0x47a>
    if( elliptic_curve_len == 0 )
   e4c26:	2b00      	cmp	r3, #0
   e4c28:	f43f af54 	beq.w	e4ad4 <mbedtls_ssl_handshake_client_step+0x354>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES      ) & 0xFF );
   e4c2c:	220a      	movs	r2, #10
   e4c2e:	707a      	strb	r2, [r7, #1]
    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 ) >> 8 ) & 0xFF );
   e4c30:	1c9a      	adds	r2, r3, #2
   e4c32:	0a12      	lsrs	r2, r2, #8
   e4c34:	70ba      	strb	r2, [r7, #2]
    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 )      ) & 0xFF );
   e4c36:	b2da      	uxtb	r2, r3
   e4c38:	1c91      	adds	r1, r2, #2
   e4c3a:	70f9      	strb	r1, [r7, #3]
    *p++ = (unsigned char)( ( ( elliptic_curve_len     ) >> 8 ) & 0xFF );
   e4c3c:	0a19      	lsrs	r1, r3, #8
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES >> 8 ) & 0xFF );
   e4c3e:	7038      	strb	r0, [r7, #0]
    *p++ = (unsigned char)( ( ( elliptic_curve_len     ) >> 8 ) & 0xFF );
   e4c40:	7139      	strb	r1, [r7, #4]
    *p++ = (unsigned char)( ( ( elliptic_curve_len     )      ) & 0xFF );
   e4c42:	717a      	strb	r2, [r7, #5]
    *olen = 6 + elliptic_curve_len;
   e4c44:	3306      	adds	r3, #6
   e4c46:	e746      	b.n	e4ad6 <mbedtls_ssl_handshake_client_step+0x356>
    *olen = 0;
   e4c48:	2700      	movs	r7, #0
   e4c4a:	e7a2      	b.n	e4b92 <mbedtls_ssl_handshake_client_step+0x412>
    *olen = 4;
   e4c4c:	2704      	movs	r7, #4
   e4c4e:	e7a0      	b.n	e4b92 <mbedtls_ssl_handshake_client_step+0x412>
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e4c50:	2101      	movs	r1, #1
   e4c52:	4620      	mov	r0, r4
    buf = ssl->in_msg;
   e4c54:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e4c58:	f7fa fe72 	bl	df940 <mbedtls_ssl_read_record>
   e4c5c:	2800      	cmp	r0, #0
   e4c5e:	f040 8155 	bne.w	e4f0c <mbedtls_ssl_handshake_client_step+0x78c>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e4c62:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e4c64:	2b16      	cmp	r3, #22
   e4c66:	d006      	beq.n	e4c76 <mbedtls_ssl_handshake_client_step+0x4f6>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e4c68:	220a      	movs	r2, #10
   e4c6a:	2102      	movs	r1, #2
   e4c6c:	4620      	mov	r0, r4
   e4c6e:	f7fa fe4d 	bl	df90c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   e4c72:	4dad      	ldr	r5, [pc, #692]	; (e4f28 <mbedtls_ssl_handshake_client_step+0x7a8>)
   e4c74:	e5e9      	b.n	e484a <mbedtls_ssl_handshake_client_step+0xca>
    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
   e4c76:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   e4c78:	2b29      	cmp	r3, #41	; 0x29
   e4c7a:	d951      	bls.n	e4d20 <mbedtls_ssl_handshake_client_step+0x5a0>
   e4c7c:	f898 3000 	ldrb.w	r3, [r8]
   e4c80:	2b02      	cmp	r3, #2
   e4c82:	d14d      	bne.n	e4d20 <mbedtls_ssl_handshake_client_step+0x5a0>
                      ssl->conf->transport, buf + 0 );
   e4c84:	4621      	mov	r1, r4
    buf += mbedtls_ssl_hs_hdr_len( ssl );
   e4c86:	f108 0904 	add.w	r9, r8, #4
                      ssl->conf->transport, buf + 0 );
   e4c8a:	f851 3b0c 	ldr.w	r3, [r1], #12
   e4c8e:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
   e4c92:	f104 0008 	add.w	r0, r4, #8
   e4c96:	464b      	mov	r3, r9
   e4c98:	f3c2 0240 	ubfx	r2, r2, #1, #1
   e4c9c:	f7fb fe0d 	bl	e08ba <mbedtls_ssl_read_version>
    if( ssl->major_ver < ssl->conf->min_major_ver ||
   e4ca0:	6823      	ldr	r3, [r4, #0]
   e4ca2:	68a1      	ldr	r1, [r4, #8]
   e4ca4:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
   e4ca8:	4291      	cmp	r1, r2
   e4caa:	da06      	bge.n	e4cba <mbedtls_ssl_handshake_client_step+0x53a>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e4cac:	2246      	movs	r2, #70	; 0x46
   e4cae:	2102      	movs	r1, #2
   e4cb0:	4620      	mov	r0, r4
   e4cb2:	f7fa fe2b 	bl	df90c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
   e4cb6:	4d9d      	ldr	r5, [pc, #628]	; (e4f2c <mbedtls_ssl_handshake_client_step+0x7ac>)
   e4cb8:	e5c7      	b.n	e484a <mbedtls_ssl_handshake_client_step+0xca>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
   e4cba:	68e2      	ldr	r2, [r4, #12]
   e4cbc:	f893 007b 	ldrb.w	r0, [r3, #123]	; 0x7b
    if( ssl->major_ver < ssl->conf->min_major_ver ||
   e4cc0:	4282      	cmp	r2, r0
   e4cc2:	dbf3      	blt.n	e4cac <mbedtls_ssl_handshake_client_step+0x52c>
        ssl->major_ver > ssl->conf->max_major_ver ||
   e4cc4:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
        ssl->minor_ver < ssl->conf->min_minor_ver ||
   e4cc8:	4281      	cmp	r1, r0
   e4cca:	dcef      	bgt.n	e4cac <mbedtls_ssl_handshake_client_step+0x52c>
        ssl->minor_ver > ssl->conf->max_minor_ver )
   e4ccc:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
        ssl->major_ver > ssl->conf->max_major_ver ||
   e4cd0:	429a      	cmp	r2, r3
   e4cd2:	dceb      	bgt.n	e4cac <mbedtls_ssl_handshake_client_step+0x52c>
    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );
   e4cd4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e4cd6:	f108 0206 	add.w	r2, r8, #6
   e4cda:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
   e4cde:	f108 0126 	add.w	r1, r8, #38	; 0x26
   e4ce2:	f852 0b04 	ldr.w	r0, [r2], #4
   e4ce6:	f843 0b04 	str.w	r0, [r3], #4
   e4cea:	428a      	cmp	r2, r1
   e4cec:	d1f9      	bne.n	e4ce2 <mbedtls_ssl_handshake_client_step+0x562>
    n = buf[34];
   e4cee:	f898 6026 	ldrb.w	r6, [r8, #38]	; 0x26
    if( n > 32 )
   e4cf2:	2e20      	cmp	r6, #32
   e4cf4:	d814      	bhi.n	e4d20 <mbedtls_ssl_handshake_client_step+0x5a0>
    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )
   e4cf6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   e4cf8:	f106 032b 	add.w	r3, r6, #43	; 0x2b
   e4cfc:	429a      	cmp	r2, r3
   e4cfe:	d916      	bls.n	e4d2e <mbedtls_ssl_handshake_client_step+0x5ae>
        ext_len = ( ( buf[38 + n] <<  8 )
   e4d00:	eb09 0306 	add.w	r3, r9, r6
   e4d04:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
                  | ( buf[39 + n]       ) );
   e4d08:	f893 7027 	ldrb.w	r7, [r3, #39]	; 0x27
   e4d0c:	ea47 2701 	orr.w	r7, r7, r1, lsl #8
        if( ( ext_len > 0 && ext_len < 4 ) ||
   e4d10:	1e7b      	subs	r3, r7, #1
   e4d12:	2b02      	cmp	r3, #2
   e4d14:	d904      	bls.n	e4d20 <mbedtls_ssl_handshake_client_step+0x5a0>
            ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 40 + n + ext_len )
   e4d16:	f106 032c 	add.w	r3, r6, #44	; 0x2c
   e4d1a:	443b      	add	r3, r7
        if( ( ext_len > 0 && ext_len < 4 ) ||
   e4d1c:	429a      	cmp	r2, r3
   e4d1e:	d00b      	beq.n	e4d38 <mbedtls_ssl_handshake_client_step+0x5b8>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e4d20:	2232      	movs	r2, #50	; 0x32
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e4d22:	2102      	movs	r1, #2
   e4d24:	4620      	mov	r0, r4
   e4d26:	f7fa fdf1 	bl	df90c <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
   e4d2a:	4d81      	ldr	r5, [pc, #516]	; (e4f30 <mbedtls_ssl_handshake_client_step+0x7b0>)
   e4d2c:	e58d      	b.n	e484a <mbedtls_ssl_handshake_client_step+0xca>
    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )
   e4d2e:	f106 032a 	add.w	r3, r6, #42	; 0x2a
   e4d32:	429a      	cmp	r2, r3
   e4d34:	d1f4      	bne.n	e4d20 <mbedtls_ssl_handshake_client_step+0x5a0>
        ext_len = 0;
   e4d36:	2700      	movs	r7, #0
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
   e4d38:	eb09 0306 	add.w	r3, r9, r6
   e4d3c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   e4d40:	f893 a024 	ldrb.w	sl, [r3, #36]	; 0x24
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
   e4d44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
   e4d48:	ea4a 2a02 	orr.w	sl, sl, r2, lsl #8
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
   e4d4c:	b133      	cbz	r3, e4d5c <mbedtls_ssl_handshake_client_step+0x5dc>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e4d4e:	222f      	movs	r2, #47	; 0x2f
   e4d50:	2102      	movs	r1, #2
   e4d52:	4620      	mov	r0, r4
   e4d54:	f7fa fdda 	bl	df90c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
   e4d58:	4d76      	ldr	r5, [pc, #472]	; (e4f34 <mbedtls_ssl_handshake_client_step+0x7b4>)
   e4d5a:	e576      	b.n	e484a <mbedtls_ssl_handshake_client_step+0xca>
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
   e4d5c:	4650      	mov	r0, sl
   e4d5e:	f8d4 b040 	ldr.w	fp, [r4, #64]	; 0x40
   e4d62:	f7ff f95b 	bl	e401c <mbedtls_ssl_ciphersuite_from_id>
   e4d66:	f8cb 0000 	str.w	r0, [fp]
    if( ssl->transform_negotiate->ciphersuite_info == NULL )
   e4d6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e4d6c:	6819      	ldr	r1, [r3, #0]
   e4d6e:	b929      	cbnz	r1, e4d7c <mbedtls_ssl_handshake_client_step+0x5fc>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e4d70:	2250      	movs	r2, #80	; 0x50
   e4d72:	2102      	movs	r1, #2
   e4d74:	4620      	mov	r0, r4
   e4d76:	f7fa fdc9 	bl	df90c <mbedtls_ssl_send_alert_message>
   e4d7a:	e508      	b.n	e478e <mbedtls_ssl_handshake_client_step+0xe>
    mbedtls_ssl_optimize_checksum( ssl, ssl->transform_negotiate->ciphersuite_info );
   e4d7c:	4620      	mov	r0, r4
   e4d7e:	f7fa ffc7 	bl	dfd10 <mbedtls_ssl_optimize_checksum>
    if( ssl->handshake->resume == 0 || n == 0 ||
   e4d82:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
   e4d86:	f8db 3348 	ldr.w	r3, [fp, #840]	; 0x348
   e4d8a:	f108 0127 	add.w	r1, r8, #39	; 0x27
   e4d8e:	b183      	cbz	r3, e4db2 <mbedtls_ssl_handshake_client_step+0x632>
   e4d90:	b17e      	cbz	r6, e4db2 <mbedtls_ssl_handshake_client_step+0x632>
        ssl->session_negotiate->ciphersuite != i ||
   e4d92:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    if( ssl->handshake->resume == 0 || n == 0 ||
   e4d94:	6803      	ldr	r3, [r0, #0]
   e4d96:	459a      	cmp	sl, r3
   e4d98:	d10b      	bne.n	e4db2 <mbedtls_ssl_handshake_client_step+0x632>
        ssl->session_negotiate->ciphersuite != i ||
   e4d9a:	6843      	ldr	r3, [r0, #4]
   e4d9c:	b94b      	cbnz	r3, e4db2 <mbedtls_ssl_handshake_client_step+0x632>
        ssl->session_negotiate->compression != comp ||
   e4d9e:	6883      	ldr	r3, [r0, #8]
   e4da0:	429e      	cmp	r6, r3
   e4da2:	d106      	bne.n	e4db2 <mbedtls_ssl_handshake_client_step+0x632>
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
   e4da4:	4632      	mov	r2, r6
   e4da6:	300c      	adds	r0, #12
   e4da8:	9106      	str	r1, [sp, #24]
   e4daa:	f004 f811 	bl	e8dd0 <memcmp>
        ssl->session_negotiate->id_len != n ||
   e4dae:	9906      	ldr	r1, [sp, #24]
   e4db0:	b1d8      	cbz	r0, e4dea <mbedtls_ssl_handshake_client_step+0x66a>
        ssl->state++;
   e4db2:	6863      	ldr	r3, [r4, #4]
   e4db4:	3301      	adds	r3, #1
   e4db6:	6063      	str	r3, [r4, #4]
        ssl->handshake->resume = 0;
   e4db8:	2300      	movs	r3, #0
   e4dba:	f8cb 3348 	str.w	r3, [fp, #840]	; 0x348
        ssl->session_negotiate->ciphersuite = i;
   e4dbe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e4dc0:	f8c2 a000 	str.w	sl, [r2]
        ssl->session_negotiate->compression = comp;
   e4dc4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e4dc6:	6053      	str	r3, [r2, #4]
        ssl->session_negotiate->id_len = n;
   e4dc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e4dca:	609e      	str	r6, [r3, #8]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
   e4dcc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   e4dce:	4632      	mov	r2, r6
   e4dd0:	300c      	adds	r0, #12
   e4dd2:	f004 f80b 	bl	e8dec <memcpy>
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
   e4dd6:	6823      	ldr	r3, [r4, #0]
   e4dd8:	68e2      	ldr	r2, [r4, #12]
   e4dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   e4dde:	3b04      	subs	r3, #4
   e4de0:	f853 0f04 	ldr.w	r0, [r3, #4]!
   e4de4:	b980      	cbnz	r0, e4e08 <mbedtls_ssl_handshake_client_step+0x688>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e4de6:	222f      	movs	r2, #47	; 0x2f
   e4de8:	e79b      	b.n	e4d22 <mbedtls_ssl_handshake_client_step+0x5a2>
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
   e4dea:	230c      	movs	r3, #12
   e4dec:	6063      	str	r3, [r4, #4]
        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
   e4dee:	4620      	mov	r0, r4
   e4df0:	f7fa f9ce 	bl	df190 <mbedtls_ssl_derive_keys>
   e4df4:	4680      	mov	r8, r0
   e4df6:	2800      	cmp	r0, #0
   e4df8:	d0ed      	beq.n	e4dd6 <mbedtls_ssl_handshake_client_step+0x656>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e4dfa:	2250      	movs	r2, #80	; 0x50
   e4dfc:	2102      	movs	r1, #2
   e4dfe:	4620      	mov	r0, r4
   e4e00:	f7fa fd84 	bl	df90c <mbedtls_ssl_send_alert_message>
            return( ret );
   e4e04:	4645      	mov	r5, r8
   e4e06:	e520      	b.n	e484a <mbedtls_ssl_handshake_client_step+0xca>
            ssl->session_negotiate->ciphersuite )
   e4e08:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e4e0a:	6812      	ldr	r2, [r2, #0]
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
   e4e0c:	4290      	cmp	r0, r2
   e4e0e:	d1e7      	bne.n	e4de0 <mbedtls_ssl_handshake_client_step+0x660>
    suite_info = mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite );
   e4e10:	f7ff f904 	bl	e401c <mbedtls_ssl_ciphersuite_from_id>
    if( suite_info == NULL )
   e4e14:	2800      	cmp	r0, #0
   e4e16:	d0e6      	beq.n	e4de6 <mbedtls_ssl_handshake_client_step+0x666>
    if( ssl_validate_ciphersuite( suite_info, ssl, ssl->minor_ver, ssl->minor_ver ) != 0 )
   e4e18:	68e3      	ldr	r3, [r4, #12]
    if( suite_info->min_minor_ver > max_minor_ver ||
   e4e1a:	6902      	ldr	r2, [r0, #16]
   e4e1c:	4293      	cmp	r3, r2
   e4e1e:	dbe2      	blt.n	e4de6 <mbedtls_ssl_handshake_client_step+0x666>
   e4e20:	6982      	ldr	r2, [r0, #24]
   e4e22:	4293      	cmp	r3, r2
   e4e24:	dcdf      	bgt.n	e4de6 <mbedtls_ssl_handshake_client_step+0x666>
    ssl->session_negotiate->compression = comp;
   e4e26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e4e28:	2200      	movs	r2, #0
    ext = buf + 40 + n;
   e4e2a:	3628      	adds	r6, #40	; 0x28
    ssl->session_negotiate->compression = comp;
   e4e2c:	605a      	str	r2, [r3, #4]
    ext = buf + 40 + n;
   e4e2e:	444e      	add	r6, r9
    ssl->handshake->new_session_ticket = 1;
   e4e30:	2301      	movs	r3, #1
        switch( ext_id )
   e4e32:	f64f 7201 	movw	r2, #65281	; 0xff01
    while( ext_len )
   e4e36:	2f00      	cmp	r7, #0
   e4e38:	d057      	beq.n	e4eea <mbedtls_ssl_handshake_client_step+0x76a>
        unsigned int ext_id   = ( ( ext[0] <<  8 )
   e4e3a:	8871      	ldrh	r1, [r6, #2]
   e4e3c:	8830      	ldrh	r0, [r6, #0]
   e4e3e:	ba49      	rev16	r1, r1
   e4e40:	b289      	uxth	r1, r1
        if( ext_size + 4 > ext_len )
   e4e42:	f101 0c04 	add.w	ip, r1, #4
   e4e46:	ba40      	rev16	r0, r0
   e4e48:	4567      	cmp	r7, ip
   e4e4a:	b280      	uxth	r0, r0
   e4e4c:	f4ff af68 	bcc.w	e4d20 <mbedtls_ssl_handshake_client_step+0x5a0>
        switch( ext_id )
   e4e50:	2823      	cmp	r0, #35	; 0x23
   e4e52:	d027      	beq.n	e4ea4 <mbedtls_ssl_handshake_client_step+0x724>
   e4e54:	dc0a      	bgt.n	e4e6c <mbedtls_ssl_handshake_client_step+0x6ec>
   e4e56:	2801      	cmp	r0, #1
   e4e58:	d013      	beq.n	e4e82 <mbedtls_ssl_handshake_client_step+0x702>
   e4e5a:	280b      	cmp	r0, #11
   e4e5c:	d02d      	beq.n	e4eba <mbedtls_ssl_handshake_client_step+0x73a>
        ext_len -= 4 + ext_size;
   e4e5e:	1a79      	subs	r1, r7, r1
   e4e60:	1f0f      	subs	r7, r1, #4
        if( ext_len > 0 && ext_len < 4 )
   e4e62:	3905      	subs	r1, #5
   e4e64:	2902      	cmp	r1, #2
        ext += 4 + ext_size;
   e4e66:	4466      	add	r6, ip
        if( ext_len > 0 && ext_len < 4 )
   e4e68:	d8e5      	bhi.n	e4e36 <mbedtls_ssl_handshake_client_step+0x6b6>
   e4e6a:	e75e      	b.n	e4d2a <mbedtls_ssl_handshake_client_step+0x5aa>
        switch( ext_id )
   e4e6c:	4290      	cmp	r0, r2
   e4e6e:	d1f6      	bne.n	e4e5e <mbedtls_ssl_handshake_client_step+0x6de>
        if( len != 1 || buf[0] != 0x00 )
   e4e70:	2901      	cmp	r1, #1
   e4e72:	d101      	bne.n	e4e78 <mbedtls_ssl_handshake_client_step+0x6f8>
   e4e74:	7930      	ldrb	r0, [r6, #4]
   e4e76:	b108      	cbz	r0, e4e7c <mbedtls_ssl_handshake_client_step+0x6fc>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e4e78:	2228      	movs	r2, #40	; 0x28
   e4e7a:	e752      	b.n	e4d22 <mbedtls_ssl_handshake_client_step+0x5a2>
        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
   e4e7c:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
    return( 0 );
   e4e80:	e7ed      	b.n	e4e5e <mbedtls_ssl_handshake_client_step+0x6de>
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ||
   e4e82:	6820      	ldr	r0, [r4, #0]
   e4e84:	f8b0 007c 	ldrh.w	r0, [r0, #124]	; 0x7c
   e4e88:	f400 7ee0 	and.w	lr, r0, #448	; 0x1c0
   e4e8c:	f1be 0f00 	cmp.w	lr, #0
   e4e90:	d0f2      	beq.n	e4e78 <mbedtls_ssl_handshake_client_step+0x6f8>
   e4e92:	2901      	cmp	r1, #1
   e4e94:	d1f0      	bne.n	e4e78 <mbedtls_ssl_handshake_client_step+0x6f8>
        len != 1 ||
   e4e96:	f896 e004 	ldrb.w	lr, [r6, #4]
   e4e9a:	f3c0 1082 	ubfx	r0, r0, #6, #3
   e4e9e:	4586      	cmp	lr, r0
   e4ea0:	d0dd      	beq.n	e4e5e <mbedtls_ssl_handshake_client_step+0x6de>
   e4ea2:	e7e9      	b.n	e4e78 <mbedtls_ssl_handshake_client_step+0x6f8>
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED ||
   e4ea4:	6820      	ldr	r0, [r4, #0]
   e4ea6:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
   e4eaa:	0780      	lsls	r0, r0, #30
   e4eac:	d5e4      	bpl.n	e4e78 <mbedtls_ssl_handshake_client_step+0x6f8>
   e4eae:	2900      	cmp	r1, #0
   e4eb0:	d1e2      	bne.n	e4e78 <mbedtls_ssl_handshake_client_step+0x6f8>
    ssl->handshake->new_session_ticket = 1;
   e4eb2:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e4eb4:	f8c0 3358 	str.w	r3, [r0, #856]	; 0x358
    return( 0 );
   e4eb8:	e7d1      	b.n	e4e5e <mbedtls_ssl_handshake_client_step+0x6de>
    if( len == 0 || (size_t)( buf[0] + 1 ) != len )
   e4eba:	2900      	cmp	r1, #0
   e4ebc:	f43f af30 	beq.w	e4d20 <mbedtls_ssl_handshake_client_step+0x5a0>
   e4ec0:	7930      	ldrb	r0, [r6, #4]
   e4ec2:	f100 0e01 	add.w	lr, r0, #1
   e4ec6:	4571      	cmp	r1, lr
   e4ec8:	f47f af2a 	bne.w	e4d20 <mbedtls_ssl_handshake_client_step+0x5a0>
    p = buf + 1;
   e4ecc:	f106 0e04 	add.w	lr, r6, #4
    while( list_size > 0 )
   e4ed0:	2800      	cmp	r0, #0
   e4ed2:	d0d1      	beq.n	e4e78 <mbedtls_ssl_handshake_client_step+0x6f8>
        if( p[0] == MBEDTLS_ECP_PF_UNCOMPRESSED ||
   e4ed4:	f81e 8f01 	ldrb.w	r8, [lr, #1]!
   e4ed8:	f1b8 0f01 	cmp.w	r8, #1
   e4edc:	d803      	bhi.n	e4ee6 <mbedtls_ssl_handshake_client_step+0x766>
            ssl->handshake->ecdh_ctx.point_format = p[0];
   e4ede:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e4ee0:	f8c0 80e0 	str.w	r8, [r0, #224]	; 0xe0
            return( 0 );
   e4ee4:	e7bb      	b.n	e4e5e <mbedtls_ssl_handshake_client_step+0x6de>
        list_size--;
   e4ee6:	3801      	subs	r0, #1
    while( list_size > 0 )
   e4ee8:	e7f2      	b.n	e4ed0 <mbedtls_ssl_handshake_client_step+0x750>
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
   e4eea:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   e4eee:	2b00      	cmp	r3, #0
   e4ef0:	f47f acab 	bne.w	e484a <mbedtls_ssl_handshake_client_step+0xca>
        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
   e4ef4:	6823      	ldr	r3, [r4, #0]
   e4ef6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
   e4efa:	f003 0330 	and.w	r3, r3, #48	; 0x30
   e4efe:	2b20      	cmp	r3, #32
   e4f00:	f47f aca3 	bne.w	e484a <mbedtls_ssl_handshake_client_step+0xca>
   e4f04:	e7b8      	b.n	e4e78 <mbedtls_ssl_handshake_client_step+0x6f8>
           ret = mbedtls_ssl_parse_certificate( ssl );
   e4f06:	4620      	mov	r0, r4
   e4f08:	f7fb fba0 	bl	e064c <mbedtls_ssl_parse_certificate>
   e4f0c:	4605      	mov	r5, r0
   e4f0e:	e49c      	b.n	e484a <mbedtls_ssl_handshake_client_step+0xca>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
   e4f10:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e4f12:	f8d3 8000 	ldr.w	r8, [r3]
    unsigned char *p = NULL, *end = NULL;
   e4f16:	2300      	movs	r3, #0
   e4f18:	930a      	str	r3, [sp, #40]	; 0x28
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
   e4f1a:	f898 300a 	ldrb.w	r3, [r8, #10]
   e4f1e:	2b01      	cmp	r3, #1
   e4f20:	d10a      	bne.n	e4f38 <mbedtls_ssl_handshake_client_step+0x7b8>
        ssl->state++;
   e4f22:	2305      	movs	r3, #5
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
   e4f24:	6063      	str	r3, [r4, #4]
           break;
   e4f26:	e490      	b.n	e484a <mbedtls_ssl_handshake_client_step+0xca>
   e4f28:	ffff8900 	.word	0xffff8900
   e4f2c:	ffff9180 	.word	0xffff9180
   e4f30:	ffff8680 	.word	0xffff8680
   e4f34:	ffff8f80 	.word	0xffff8f80
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e4f38:	2101      	movs	r1, #1
   e4f3a:	4620      	mov	r0, r4
   e4f3c:	f7fa fd00 	bl	df940 <mbedtls_ssl_read_record>
   e4f40:	4605      	mov	r5, r0
   e4f42:	2800      	cmp	r0, #0
   e4f44:	f47f ac81 	bne.w	e484a <mbedtls_ssl_handshake_client_step+0xca>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e4f48:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e4f4a:	2b16      	cmp	r3, #22
   e4f4c:	f47f ae8c 	bne.w	e4c68 <mbedtls_ssl_handshake_client_step+0x4e8>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )
   e4f50:	6e63      	ldr	r3, [r4, #100]	; 0x64
   e4f52:	f898 100a 	ldrb.w	r1, [r8, #10]
   e4f56:	781a      	ldrb	r2, [r3, #0]
   e4f58:	2a0c      	cmp	r2, #12
   e4f5a:	d00a      	beq.n	e4f72 <mbedtls_ssl_handshake_client_step+0x7f2>
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e4f5c:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
   e4f60:	2905      	cmp	r1, #5
   e4f62:	f47f ae81 	bne.w	e4c68 <mbedtls_ssl_handshake_client_step+0x4e8>
            ssl->keep_current_message = 1;
   e4f66:	2301      	movs	r3, #1
   e4f68:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        ssl->state++;
   e4f6c:	6863      	ldr	r3, [r4, #4]
   e4f6e:	3301      	adds	r3, #1
   e4f70:	e7d8      	b.n	e4f24 <mbedtls_ssl_handshake_client_step+0x7a4>
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
   e4f72:	1d1a      	adds	r2, r3, #4
   e4f74:	920a      	str	r2, [sp, #40]	; 0x28
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e4f76:	1f48      	subs	r0, r1, #5
    end = ssl->in_msg + ssl->in_hslen;
   e4f78:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e4f7a:	2803      	cmp	r0, #3
    end = ssl->in_msg + ssl->in_hslen;
   e4f7c:	eb03 0602 	add.w	r6, r3, r2
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e4f80:	d905      	bls.n	e4f8e <mbedtls_ssl_handshake_client_step+0x80e>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
   e4f82:	3903      	subs	r1, #3
   e4f84:	2901      	cmp	r1, #1
   e4f86:	f240 8279 	bls.w	e547c <mbedtls_ssl_handshake_client_step+0xcfc>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   e4f8a:	4da3      	ldr	r5, [pc, #652]	; (e5218 <mbedtls_ssl_handshake_client_step+0xa98>)
   e4f8c:	e45d      	b.n	e484a <mbedtls_ssl_handshake_client_step+0xca>
    if( end - (*p) < 2 )
   e4f8e:	2a05      	cmp	r2, #5
   e4f90:	dd07      	ble.n	e4fa2 <mbedtls_ssl_handshake_client_step+0x822>
    len = (*p)[0] << 8 | (*p)[1];
   e4f92:	889a      	ldrh	r2, [r3, #4]
    *p += 2;
   e4f94:	3306      	adds	r3, #6
   e4f96:	ba52      	rev16	r2, r2
   e4f98:	b292      	uxth	r2, r2
    if( end - (*p) < (int) len )
   e4f9a:	1af0      	subs	r0, r6, r3
   e4f9c:	4282      	cmp	r2, r0
   e4f9e:	dd07      	ble.n	e4fb0 <mbedtls_ssl_handshake_client_step+0x830>
    *p += 2;
   e4fa0:	930a      	str	r3, [sp, #40]	; 0x28
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e4fa2:	222f      	movs	r2, #47	; 0x2f
   e4fa4:	2102      	movs	r1, #2
   e4fa6:	4620      	mov	r0, r4
   e4fa8:	f7fa fcb0 	bl	df90c <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
   e4fac:	4d9b      	ldr	r5, [pc, #620]	; (e521c <mbedtls_ssl_handshake_client_step+0xa9c>)
   e4fae:	e44c      	b.n	e484a <mbedtls_ssl_handshake_client_step+0xca>
    *p += len;
   e4fb0:	4413      	add	r3, r2
   e4fb2:	930a      	str	r3, [sp, #40]	; 0x28
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e4fb4:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
   e4fb8:	2b05      	cmp	r3, #5
   e4fba:	f040 825c 	bne.w	e5476 <mbedtls_ssl_handshake_client_step+0xcf6>
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED) */

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)
static inline int mbedtls_ssl_ciphersuite_uses_server_signature( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
   e4fbe:	f898 300a 	ldrb.w	r3, [r8, #10]
   e4fc2:	3b02      	subs	r3, #2
   e4fc4:	2b02      	cmp	r3, #2
   e4fc6:	d8d1      	bhi.n	e4f6c <mbedtls_ssl_handshake_client_step+0x7ec>
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
   e4fc8:	68e3      	ldr	r3, [r4, #12]
   e4fca:	2b03      	cmp	r3, #3
   e4fcc:	d175      	bne.n	e50ba <mbedtls_ssl_handshake_client_step+0x93a>
        size_t params_len = p - params;
   e4fce:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    if( (*p) + 2 > end )
   e4fd2:	f10a 0302 	add.w	r3, sl, #2
   e4fd6:	429e      	cmp	r6, r3
   e4fd8:	d31a      	bcc.n	e5010 <mbedtls_ssl_handshake_client_step+0x890>
    if( ( *md_alg = mbedtls_ssl_md_alg_from_hash( (*p)[0] ) ) == MBEDTLS_MD_NONE )
   e4fda:	f89a 0000 	ldrb.w	r0, [sl]
        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
   e4fde:	f8d4 b064 	ldr.w	fp, [r4, #100]	; 0x64
    if( ( *md_alg = mbedtls_ssl_md_alg_from_hash( (*p)[0] ) ) == MBEDTLS_MD_NONE )
   e4fe2:	f7fb face 	bl	e0582 <mbedtls_ssl_md_alg_from_hash>
   e4fe6:	4607      	mov	r7, r0
   e4fe8:	b190      	cbz	r0, e5010 <mbedtls_ssl_handshake_client_step+0x890>
    if( ( *pk_alg = mbedtls_ssl_pk_alg_from_sig( (*p)[1] ) ) == MBEDTLS_PK_NONE )
   e4fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e4fec:	7858      	ldrb	r0, [r3, #1]
   e4fee:	f7fb fac1 	bl	e0574 <mbedtls_ssl_pk_alg_from_sig>
   e4ff2:	4681      	mov	r9, r0
   e4ff4:	b160      	cbz	r0, e5010 <mbedtls_ssl_handshake_client_step+0x890>
    if( mbedtls_ssl_check_sig_hash( ssl, *md_alg ) != 0 )
   e4ff6:	4639      	mov	r1, r7
   e4ff8:	4620      	mov	r0, r4
   e4ffa:	f7fb fade 	bl	e05ba <mbedtls_ssl_check_sig_hash>
   e4ffe:	b938      	cbnz	r0, e5010 <mbedtls_ssl_handshake_client_step+0x890>
    *p += 2;
   e5000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            if( pk_alg != mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info ) )
   e5002:	4640      	mov	r0, r8
    *p += 2;
   e5004:	3302      	adds	r3, #2
   e5006:	930a      	str	r3, [sp, #40]	; 0x28
            if( pk_alg != mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info ) )
   e5008:	f7ff f838 	bl	e407c <mbedtls_ssl_get_ciphersuite_sig_pk_alg>
   e500c:	4548      	cmp	r0, r9
   e500e:	d007      	beq.n	e5020 <mbedtls_ssl_handshake_client_step+0x8a0>
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e5010:	222f      	movs	r2, #47	; 0x2f
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e5012:	2102      	movs	r1, #2
   e5014:	4620      	mov	r0, r4
   e5016:	f7fa fc79 	bl	df90c <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
   e501a:	4e80      	ldr	r6, [pc, #512]	; (e521c <mbedtls_ssl_handshake_client_step+0xa9c>)
   e501c:	4635      	mov	r5, r6
   e501e:	e414      	b.n	e484a <mbedtls_ssl_handshake_client_step+0xca>
        if( p > end - 2 )
   e5020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e5022:	1eb2      	subs	r2, r6, #2
   e5024:	4293      	cmp	r3, r2
   e5026:	d901      	bls.n	e502c <mbedtls_ssl_handshake_client_step+0x8ac>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e5028:	2232      	movs	r2, #50	; 0x32
   e502a:	e7f2      	b.n	e5012 <mbedtls_ssl_handshake_client_step+0x892>
        sig_len = ( p[0] << 8 ) | p[1];
   e502c:	f833 8b02 	ldrh.w	r8, [r3], #2
        p += 2;
   e5030:	930a      	str	r3, [sp, #40]	; 0x28
        sig_len = ( p[0] << 8 ) | p[1];
   e5032:	fa98 f898 	rev16.w	r8, r8
   e5036:	fa1f f888 	uxth.w	r8, r8
        if( p != end - sig_len )
   e503a:	eba6 0608 	sub.w	r6, r6, r8
   e503e:	42b3      	cmp	r3, r6
   e5040:	d1f2      	bne.n	e5028 <mbedtls_ssl_handshake_client_step+0x8a8>
        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
   e5042:	f10b 0304 	add.w	r3, fp, #4
        size_t params_len = p - params;
   e5046:	ebaa 0203 	sub.w	r2, sl, r3
            ret = mbedtls_ssl_get_key_exchange_md_tls1_2( ssl, hash, &hashlen,
   e504a:	9200      	str	r2, [sp, #0]
   e504c:	9701      	str	r7, [sp, #4]
   e504e:	aa0b      	add	r2, sp, #44	; 0x2c
   e5050:	a90c      	add	r1, sp, #48	; 0x30
   e5052:	4620      	mov	r0, r4
   e5054:	f7fb fc36 	bl	e08c4 <mbedtls_ssl_get_key_exchange_md_tls1_2>
            if( ret != 0 )
   e5058:	4606      	mov	r6, r0
   e505a:	2800      	cmp	r0, #0
   e505c:	d1de      	bne.n	e501c <mbedtls_ssl_handshake_client_step+0x89c>
        if( ssl->session_negotiate->peer_cert == NULL )
   e505e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e5060:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e5062:	b938      	cbnz	r0, e5074 <mbedtls_ssl_handshake_client_step+0x8f4>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e5064:	2228      	movs	r2, #40	; 0x28
   e5066:	2102      	movs	r1, #2
   e5068:	4620      	mov	r0, r4
   e506a:	f7fa fc4f 	bl	df90c <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   e506e:	f5a6 46ee 	sub.w	r6, r6, #30464	; 0x7700
   e5072:	e7d3      	b.n	e501c <mbedtls_ssl_handshake_client_step+0x89c>
        if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk, pk_alg ) )
   e5074:	4649      	mov	r1, r9
   e5076:	30bc      	adds	r0, #188	; 0xbc
   e5078:	f7f9 fde0 	bl	dec3c <mbedtls_pk_can_do>
   e507c:	b930      	cbnz	r0, e508c <mbedtls_ssl_handshake_client_step+0x90c>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e507e:	2228      	movs	r2, #40	; 0x28
   e5080:	2102      	movs	r1, #2
   e5082:	4620      	mov	r0, r4
   e5084:	f7fa fc42 	bl	df90c <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
   e5088:	4e65      	ldr	r6, [pc, #404]	; (e5220 <mbedtls_ssl_handshake_client_step+0xaa0>)
   e508a:	e7c7      	b.n	e501c <mbedtls_ssl_handshake_client_step+0x89c>
                        &ssl->session_negotiate->peer_cert->pk,
   e508c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        if( ( ret = mbedtls_pk_verify_restartable(
   e508e:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   e5090:	2300      	movs	r3, #0
   e5092:	e9cd 8301 	strd	r8, r3, [sp, #4]
   e5096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e5098:	9300      	str	r3, [sp, #0]
   e509a:	aa0c      	add	r2, sp, #48	; 0x30
   e509c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e509e:	4639      	mov	r1, r7
   e50a0:	30bc      	adds	r0, #188	; 0xbc
   e50a2:	f7f9 fdd5 	bl	dec50 <mbedtls_pk_verify_restartable>
   e50a6:	4606      	mov	r6, r0
   e50a8:	2800      	cmp	r0, #0
   e50aa:	f43f af5f 	beq.w	e4f6c <mbedtls_ssl_handshake_client_step+0x7ec>
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e50ae:	2233      	movs	r2, #51	; 0x33
   e50b0:	2102      	movs	r1, #2
   e50b2:	4620      	mov	r0, r4
   e50b4:	f7fa fc2a 	bl	df90c <mbedtls_ssl_send_alert_message>
            return( ret );
   e50b8:	e7b0      	b.n	e501c <mbedtls_ssl_handshake_client_step+0x89c>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   e50ba:	4e57      	ldr	r6, [pc, #348]	; (e5218 <mbedtls_ssl_handshake_client_step+0xa98>)
   e50bc:	e7ae      	b.n	e501c <mbedtls_ssl_handshake_client_step+0x89c>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
   e50be:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if( ! mbedtls_ssl_ciphersuite_cert_req_allowed( ciphersuite_info ) )
   e50c0:	681b      	ldr	r3, [r3, #0]
   e50c2:	7a9b      	ldrb	r3, [r3, #10]
    switch( info->key_exchange )
   e50c4:	2b04      	cmp	r3, #4
   e50c6:	d81b      	bhi.n	e5100 <mbedtls_ssl_handshake_client_step+0x980>
   e50c8:	b1eb      	cbz	r3, e5106 <mbedtls_ssl_handshake_client_step+0x986>
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e50ca:	2101      	movs	r1, #1
   e50cc:	4620      	mov	r0, r4
   e50ce:	f7fa fc37 	bl	df940 <mbedtls_ssl_read_record>
   e50d2:	2800      	cmp	r0, #0
   e50d4:	f47f af1a 	bne.w	e4f0c <mbedtls_ssl_handshake_client_step+0x78c>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e50d8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e50da:	2b16      	cmp	r3, #22
   e50dc:	f47f adc4 	bne.w	e4c68 <mbedtls_ssl_handshake_client_step+0x4e8>
    ssl->state++;
   e50e0:	6863      	ldr	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
   e50e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
    ssl->state++;
   e50e4:	3301      	adds	r3, #1
   e50e6:	6063      	str	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
   e50e8:	7813      	ldrb	r3, [r2, #0]
   e50ea:	2b0d      	cmp	r3, #13
   e50ec:	bf0c      	ite	eq
   e50ee:	2301      	moveq	r3, #1
   e50f0:	2300      	movne	r3, #0
   e50f2:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    if( ssl->client_auth == 0 )
   e50f6:	d008      	beq.n	e510a <mbedtls_ssl_handshake_client_step+0x98a>
        ssl->keep_current_message = 1;
   e50f8:	2301      	movs	r3, #1
   e50fa:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        goto exit;
   e50fe:	e705      	b.n	e4f0c <mbedtls_ssl_handshake_client_step+0x78c>
   e5100:	3b09      	subs	r3, #9
   e5102:	2b01      	cmp	r3, #1
   e5104:	d9e1      	bls.n	e50ca <mbedtls_ssl_handshake_client_step+0x94a>
        ssl->state++;
   e5106:	2306      	movs	r3, #6
   e5108:	e70c      	b.n	e4f24 <mbedtls_ssl_handshake_client_step+0x7a4>
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) )
   e510a:	6fa6      	ldr	r6, [r4, #120]	; 0x78
   e510c:	2e04      	cmp	r6, #4
   e510e:	d807      	bhi.n	e5120 <mbedtls_ssl_handshake_client_step+0x9a0>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e5110:	2232      	movs	r2, #50	; 0x32
   e5112:	2102      	movs	r1, #2
   e5114:	4620      	mov	r0, r4
   e5116:	f7fa fbf9 	bl	df90c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
   e511a:	4d42      	ldr	r5, [pc, #264]	; (e5224 <mbedtls_ssl_handshake_client_step+0xaa4>)
   e511c:	f7ff bb95 	b.w	e484a <mbedtls_ssl_handshake_client_step+0xca>
    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];
   e5120:	7913      	ldrb	r3, [r2, #4]
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
   e5122:	1d98      	adds	r0, r3, #6
   e5124:	4286      	cmp	r6, r0
   e5126:	d9f3      	bls.n	e5110 <mbedtls_ssl_handshake_client_step+0x990>
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
   e5128:	18d1      	adds	r1, r2, r3
   e512a:	794f      	ldrb	r7, [r1, #5]
   e512c:	5c11      	ldrb	r1, [r2, r0]
   e512e:	68e0      	ldr	r0, [r4, #12]
   e5130:	2803      	cmp	r0, #3
   e5132:	d107      	bne.n	e5144 <mbedtls_ssl_handshake_client_step+0x9c4>
   e5134:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
        if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n + sig_alg_len )
   e5138:	1dd8      	adds	r0, r3, #7
   e513a:	4408      	add	r0, r1
   e513c:	4286      	cmp	r6, r0
   e513e:	d9e7      	bls.n	e5110 <mbedtls_ssl_handshake_client_step+0x990>
        n += 2 + sig_alg_len;
   e5140:	3302      	adds	r3, #2
   e5142:	440b      	add	r3, r1
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
   e5144:	441a      	add	r2, r3
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
   e5146:	3307      	adds	r3, #7
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
   e5148:	7951      	ldrb	r1, [r2, #5]
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
   e514a:	7992      	ldrb	r2, [r2, #6]
   e514c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
   e5150:	4413      	add	r3, r2
   e5152:	429e      	cmp	r6, r3
   e5154:	f43f ab79 	beq.w	e484a <mbedtls_ssl_handshake_client_step+0xca>
   e5158:	e7da      	b.n	e5110 <mbedtls_ssl_handshake_client_step+0x990>
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   e515a:	2101      	movs	r1, #1
   e515c:	4620      	mov	r0, r4
   e515e:	f7fa fbef 	bl	df940 <mbedtls_ssl_read_record>
   e5162:	4605      	mov	r5, r0
   e5164:	2800      	cmp	r0, #0
   e5166:	f47f ab70 	bne.w	e484a <mbedtls_ssl_handshake_client_step+0xca>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   e516a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   e516c:	2b16      	cmp	r3, #22
   e516e:	f47f ad80 	bne.w	e4c72 <mbedtls_ssl_handshake_client_step+0x4f2>
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
   e5172:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   e5174:	2b04      	cmp	r3, #4
   e5176:	d104      	bne.n	e5182 <mbedtls_ssl_handshake_client_step+0xa02>
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
   e5178:	6e63      	ldr	r3, [r4, #100]	; 0x64
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
   e517a:	781b      	ldrb	r3, [r3, #0]
   e517c:	2b0e      	cmp	r3, #14
   e517e:	f43f aef5 	beq.w	e4f6c <mbedtls_ssl_handshake_client_step+0x7ec>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e5182:	2232      	movs	r2, #50	; 0x32
   e5184:	2102      	movs	r1, #2
   e5186:	4620      	mov	r0, r4
   e5188:	f7fa fbc0 	bl	df90c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );
   e518c:	4d26      	ldr	r5, [pc, #152]	; (e5228 <mbedtls_ssl_handshake_client_step+0xaa8>)
   e518e:	f7ff bb5c 	b.w	e484a <mbedtls_ssl_handshake_client_step+0xca>
           ret = mbedtls_ssl_write_certificate( ssl );
   e5192:	4620      	mov	r0, r4
   e5194:	f7fa fd16 	bl	dfbc4 <mbedtls_ssl_write_certificate>
   e5198:	e6b8      	b.n	e4f0c <mbedtls_ssl_handshake_client_step+0x78c>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
   e519a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e519c:	681e      	ldr	r6, [r3, #0]
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
   e519e:	7ab3      	ldrb	r3, [r6, #10]
   e51a0:	1eda      	subs	r2, r3, #3
   e51a2:	2a01      	cmp	r2, #1
   e51a4:	d902      	bls.n	e51ac <mbedtls_ssl_handshake_client_step+0xa2c>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA ||
   e51a6:	3b09      	subs	r3, #9
   e51a8:	2b01      	cmp	r3, #1
   e51aa:	d83f      	bhi.n	e522c <mbedtls_ssl_handshake_client_step+0xaac>
                                ssl->conf->f_rng, ssl->conf->p_rng );
   e51ac:	6823      	ldr	r3, [r4, #0]
        ret = mbedtls_ecdh_make_public( &ssl->handshake->ecdh_ctx,
   e51ae:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e51b2:	69d9      	ldr	r1, [r3, #28]
   e51b4:	9101      	str	r1, [sp, #4]
   e51b6:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e51b8:	699b      	ldr	r3, [r3, #24]
   e51ba:	9300      	str	r3, [sp, #0]
   e51bc:	3204      	adds	r2, #4
   e51be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   e51c2:	a90c      	add	r1, sp, #48	; 0x30
   e51c4:	3004      	adds	r0, #4
   e51c6:	f7f0 ffc9 	bl	d615c <mbedtls_ecdh_make_public>
        if( ret != 0 )
   e51ca:	4605      	mov	r5, r0
   e51cc:	2800      	cmp	r0, #0
   e51ce:	f47f ab3c 	bne.w	e484a <mbedtls_ssl_handshake_client_step+0xca>
                                       ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
   e51d2:	6823      	ldr	r3, [r4, #0]
        if( ( ret = mbedtls_ecdh_calc_secret( &ssl->handshake->ecdh_ctx,
   e51d4:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e51d6:	69da      	ldr	r2, [r3, #28]
   e51d8:	9201      	str	r2, [sp, #4]
   e51da:	699b      	ldr	r3, [r3, #24]
   e51dc:	9300      	str	r3, [sp, #0]
   e51de:	f500 723d 	add.w	r2, r0, #756	; 0x2f4
   e51e2:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
   e51e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   e51ea:	3004      	adds	r0, #4
   e51ec:	f7f0 ffdc 	bl	d61a8 <mbedtls_ecdh_calc_secret>
   e51f0:	4605      	mov	r5, r0
   e51f2:	2800      	cmp	r0, #0
   e51f4:	f47f ab29 	bne.w	e484a <mbedtls_ssl_handshake_client_step+0xca>
        i = 4;
   e51f8:	2704      	movs	r7, #4
    ssl->out_msglen  = i + n;
   e51fa:	990c      	ldr	r1, [sp, #48]	; 0x30
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   e51fc:	2316      	movs	r3, #22
    ssl->out_msglen  = i + n;
   e51fe:	4439      	add	r1, r7
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   e5200:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
   e5204:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ssl->out_msglen  = i + n;
   e5208:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
   e520c:	2210      	movs	r2, #16
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
   e520e:	701a      	strb	r2, [r3, #0]
    ssl->state++;
   e5210:	6863      	ldr	r3, [r4, #4]
   e5212:	3301      	adds	r3, #1
   e5214:	e4d2      	b.n	e4bbc <mbedtls_ssl_handshake_client_step+0x43c>
   e5216:	bf00      	nop
   e5218:	ffff9400 	.word	0xffff9400
   e521c:	ffff8500 	.word	0xffff8500
   e5220:	ffff9300 	.word	0xffff9300
   e5224:	ffff8580 	.word	0xffff8580
   e5228:	ffff8480 	.word	0xffff8480
    if( mbedtls_ssl_ciphersuite_uses_psk( ciphersuite_info ) )
   e522c:	4630      	mov	r0, r6
   e522e:	f7fe ff44 	bl	e40ba <mbedtls_ssl_ciphersuite_uses_psk>
   e5232:	2800      	cmp	r0, #0
   e5234:	d03d      	beq.n	e52b2 <mbedtls_ssl_handshake_client_step+0xb32>
        if( ssl->conf->psk == NULL || ssl->conf->psk_identity == NULL )
   e5236:	6823      	ldr	r3, [r4, #0]
   e5238:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   e523a:	2a00      	cmp	r2, #0
   e523c:	f000 80ba 	beq.w	e53b4 <mbedtls_ssl_handshake_client_step+0xc34>
   e5240:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   e5242:	2a00      	cmp	r2, #0
   e5244:	f000 80b6 	beq.w	e53b4 <mbedtls_ssl_handshake_client_step+0xc34>
        n = ssl->conf->psk_identity_len;
   e5248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   e524a:	930c      	str	r3, [sp, #48]	; 0x30
        if( i + 2 + n > MBEDTLS_SSL_OUT_CONTENT_LEN )
   e524c:	1d9a      	adds	r2, r3, #6
   e524e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   e5252:	d839      	bhi.n	e52c8 <mbedtls_ssl_handshake_client_step+0xb48>
        ssl->out_msg[i++] = (unsigned char)( n >> 8 );
   e5254:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e5258:	0a19      	lsrs	r1, r3, #8
   e525a:	7111      	strb	r1, [r2, #4]
        ssl->out_msg[i++] = (unsigned char)( n      );
   e525c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e5260:	7153      	strb	r3, [r2, #5]
        memcpy( ssl->out_msg + i, ssl->conf->psk_identity, ssl->conf->psk_identity_len );
   e5262:	6823      	ldr	r3, [r4, #0]
   e5264:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   e5268:	e9d3 121b 	ldrd	r1, r2, [r3, #108]	; 0x6c
   e526c:	3006      	adds	r0, #6
   e526e:	f003 fdbd 	bl	e8dec <memcpy>
        i += ssl->conf->psk_identity_len;
   e5272:	6823      	ldr	r3, [r4, #0]
   e5274:	6f1f      	ldr	r7, [r3, #112]	; 0x70
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK )
   e5276:	7ab3      	ldrb	r3, [r6, #10]
   e5278:	2b05      	cmp	r3, #5
        i += ssl->conf->psk_identity_len;
   e527a:	f107 0706 	add.w	r7, r7, #6
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK )
   e527e:	d10a      	bne.n	e5296 <mbedtls_ssl_handshake_client_step+0xb16>
            n = 0;
   e5280:	2300      	movs	r3, #0
   e5282:	930c      	str	r3, [sp, #48]	; 0x30
        if( ( ret = mbedtls_ssl_psk_derive_premaster( ssl,
   e5284:	7ab1      	ldrb	r1, [r6, #10]
   e5286:	4620      	mov	r0, r4
   e5288:	f7fa f8fc 	bl	df484 <mbedtls_ssl_psk_derive_premaster>
   e528c:	4605      	mov	r5, r0
   e528e:	2800      	cmp	r0, #0
   e5290:	d0b3      	beq.n	e51fa <mbedtls_ssl_handshake_client_step+0xa7a>
   e5292:	f7ff bada 	b.w	e484a <mbedtls_ssl_handshake_client_step+0xca>
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
   e5296:	2b07      	cmp	r3, #7
   e5298:	f47f ae77 	bne.w	e4f8a <mbedtls_ssl_handshake_client_step+0x80a>
            if( ( ret = ssl_write_encrypted_pms( ssl, i, &n, 2 ) ) != 0 )
   e529c:	2302      	movs	r3, #2
   e529e:	aa0c      	add	r2, sp, #48	; 0x30
   e52a0:	4639      	mov	r1, r7
   e52a2:	4620      	mov	r0, r4
   e52a4:	f7ff f9fc 	bl	e46a0 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj>
   e52a8:	4605      	mov	r5, r0
   e52aa:	2800      	cmp	r0, #0
   e52ac:	d0ea      	beq.n	e5284 <mbedtls_ssl_handshake_client_step+0xb04>
   e52ae:	f7ff bacc 	b.w	e484a <mbedtls_ssl_handshake_client_step+0xca>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
   e52b2:	7ab3      	ldrb	r3, [r6, #10]
   e52b4:	2b01      	cmp	r3, #1
   e52b6:	f47f ae68 	bne.w	e4f8a <mbedtls_ssl_handshake_client_step+0x80a>
        if( ( ret = ssl_write_encrypted_pms( ssl, i, &n, 0 ) ) != 0 )
   e52ba:	4603      	mov	r3, r0
   e52bc:	aa0c      	add	r2, sp, #48	; 0x30
   e52be:	2104      	movs	r1, #4
   e52c0:	4620      	mov	r0, r4
   e52c2:	f7ff f9ed 	bl	e46a0 <_ZL23ssl_write_encrypted_pmsP19mbedtls_ssl_contextjPjj>
   e52c6:	e793      	b.n	e51f0 <mbedtls_ssl_handshake_client_step+0xa70>
            return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
   e52c8:	4d79      	ldr	r5, [pc, #484]	; (e54b0 <mbedtls_ssl_handshake_client_step+0xd30>)
           break;
   e52ca:	f7ff babe 	b.w	e484a <mbedtls_ssl_handshake_client_step+0xca>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
   e52ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
   e52d0:	4620      	mov	r0, r4
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
   e52d2:	681e      	ldr	r6, [r3, #0]
    size_t n = 0, offset = 0;
   e52d4:	2300      	movs	r3, #0
   e52d6:	930b      	str	r3, [sp, #44]	; 0x2c
    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
   e52d8:	f7f9 ff5a 	bl	df190 <mbedtls_ssl_derive_keys>
   e52dc:	4605      	mov	r5, r0
   e52de:	2800      	cmp	r0, #0
   e52e0:	f47f aab3 	bne.w	e484a <mbedtls_ssl_handshake_client_step+0xca>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   e52e4:	7ab3      	ldrb	r3, [r6, #10]
   e52e6:	1f5a      	subs	r2, r3, #5
   e52e8:	2a03      	cmp	r2, #3
   e52ea:	f67f ae3f 	bls.w	e4f6c <mbedtls_ssl_handshake_client_step+0x7ec>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
   e52ee:	2b0b      	cmp	r3, #11
   e52f0:	f43f ae3c 	beq.w	e4f6c <mbedtls_ssl_handshake_client_step+0x7ec>
    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
   e52f4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   e52f8:	2b00      	cmp	r3, #0
   e52fa:	f43f ae37 	beq.w	e4f6c <mbedtls_ssl_handshake_client_step+0x7ec>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
   e52fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
   e5300:	b111      	cbz	r1, e5308 <mbedtls_ssl_handshake_client_step+0xb88>
   e5302:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
   e5306:	b923      	cbnz	r3, e5312 <mbedtls_ssl_handshake_client_step+0xb92>
        key_cert = ssl->conf->key_cert;
   e5308:	6823      	ldr	r3, [r4, #0]
   e530a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    return( key_cert == NULL ? NULL : key_cert->cert );
   e530c:	2b00      	cmp	r3, #0
   e530e:	f43f ae2d 	beq.w	e4f6c <mbedtls_ssl_handshake_client_step+0x7ec>
   e5312:	681b      	ldr	r3, [r3, #0]
   e5314:	2b00      	cmp	r3, #0
   e5316:	f43f ae29 	beq.w	e4f6c <mbedtls_ssl_handshake_client_step+0x7ec>
    if( mbedtls_ssl_own_key( ssl ) == NULL )
   e531a:	4620      	mov	r0, r4
   e531c:	f7ff f9b4 	bl	e4688 <mbedtls_ssl_own_key>
   e5320:	2800      	cmp	r0, #0
   e5322:	d047      	beq.n	e53b4 <mbedtls_ssl_handshake_client_step+0xc34>
    ssl->handshake->calc_verify( ssl, hash );
   e5324:	f8d1 32a4 	ldr.w	r3, [r1, #676]	; 0x2a4
   e5328:	4620      	mov	r0, r4
   e532a:	a90c      	add	r1, sp, #48	; 0x30
   e532c:	4798      	blx	r3
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
   e532e:	68e3      	ldr	r3, [r4, #12]
   e5330:	2b03      	cmp	r3, #3
   e5332:	f47f ae2a 	bne.w	e4f8a <mbedtls_ssl_handshake_client_step+0x80a>
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
   e5336:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e5338:	681b      	ldr	r3, [r3, #0]
   e533a:	7a5d      	ldrb	r5, [r3, #9]
   e533c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e5340:	2d07      	cmp	r5, #7
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
   e5342:	bf0b      	itete	eq
   e5344:	2205      	moveq	r2, #5
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
   e5346:	2204      	movne	r2, #4
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
   e5348:	711a      	strbeq	r2, [r3, #4]
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
   e534a:	711a      	strbne	r2, [r3, #4]
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
   e534c:	4620      	mov	r0, r4
            md_alg = MBEDTLS_MD_SHA256;
   e534e:	bf18      	it	ne
   e5350:	2506      	movne	r5, #6
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
   e5352:	f7ff f999 	bl	e4688 <mbedtls_ssl_own_key>
   e5356:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
   e535a:	f7fb f8fa 	bl	e0552 <mbedtls_ssl_sig_from_pk>
   e535e:	7170      	strb	r0, [r6, #5]
    if( ( ret = mbedtls_pk_sign_restartable( mbedtls_ssl_own_key( ssl ),
   e5360:	4620      	mov	r0, r4
   e5362:	f7ff f991 	bl	e4688 <mbedtls_ssl_own_key>
                         ssl->conf->f_rng, ssl->conf->p_rng, rs_ctx ) ) != 0 )
   e5366:	6822      	ldr	r2, [r4, #0]
    if( ( ret = mbedtls_pk_sign_restartable( mbedtls_ssl_own_key( ssl ),
   e5368:	2300      	movs	r3, #0
   e536a:	9304      	str	r3, [sp, #16]
   e536c:	69d1      	ldr	r1, [r2, #28]
   e536e:	9103      	str	r1, [sp, #12]
   e5370:	6992      	ldr	r2, [r2, #24]
   e5372:	9202      	str	r2, [sp, #8]
   e5374:	aa0b      	add	r2, sp, #44	; 0x2c
   e5376:	9201      	str	r2, [sp, #4]
   e5378:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e537c:	3208      	adds	r2, #8
   e537e:	9200      	str	r2, [sp, #0]
   e5380:	4629      	mov	r1, r5
   e5382:	aa0c      	add	r2, sp, #48	; 0x30
   e5384:	f7f9 fc98 	bl	decb8 <mbedtls_pk_sign_restartable>
   e5388:	4605      	mov	r5, r0
   e538a:	2800      	cmp	r0, #0
   e538c:	f47f aa5d 	bne.w	e484a <mbedtls_ssl_handshake_client_step+0xca>
    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );
   e5390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e5392:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e5396:	0a19      	lsrs	r1, r3, #8
   e5398:	7191      	strb	r1, [r2, #6]
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
   e539a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   e539e:	71d3      	strb	r3, [r2, #7]
    ssl->out_msglen  = 6 + n + offset;
   e53a0:	3308      	adds	r3, #8
   e53a2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   e53a6:	2316      	movs	r3, #22
   e53a8:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
   e53ac:	220f      	movs	r2, #15
   e53ae:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   e53b2:	e72c      	b.n	e520e <mbedtls_ssl_handshake_client_step+0xa8e>
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
   e53b4:	4d3f      	ldr	r5, [pc, #252]	; (e54b4 <mbedtls_ssl_handshake_client_step+0xd34>)
   e53b6:	f7ff ba48 	b.w	e484a <mbedtls_ssl_handshake_client_step+0xca>
           ret = mbedtls_ssl_write_change_cipher_spec( ssl );
   e53ba:	4620      	mov	r0, r4
   e53bc:	f7fa fc6c 	bl	dfc98 <mbedtls_ssl_write_change_cipher_spec>
   e53c0:	e5a4      	b.n	e4f0c <mbedtls_ssl_handshake_client_step+0x78c>
           ret = mbedtls_ssl_write_finished( ssl );
   e53c2:	4620      	mov	r0, r4
   e53c4:	f7fa fcb2 	bl	dfd2c <mbedtls_ssl_write_finished>
   e53c8:	e5a0      	b.n	e4f0c <mbedtls_ssl_handshake_client_step+0x78c>
    lifetime = ( ((uint32_t) msg[0]) << 24 ) | ( msg[1] << 16 ) |
   e53ca:	f8b8 2008 	ldrh.w	r2, [r8, #8]
   e53ce:	f8d8 7004 	ldr.w	r7, [r8, #4]
    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
   e53d2:	ba52      	rev16	r2, r2
   e53d4:	fa1f f982 	uxth.w	r9, r2
    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
   e53d8:	f109 020a 	add.w	r2, r9, #10
   e53dc:	4293      	cmp	r3, r2
   e53de:	f47f aa01 	bne.w	e47e4 <mbedtls_ssl_handshake_client_step+0x64>
    ssl->handshake->new_session_ticket = 0;
   e53e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e53e4:	f8c3 0358 	str.w	r0, [r3, #856]	; 0x358
    ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
   e53e8:	230c      	movs	r3, #12
   e53ea:	6063      	str	r3, [r4, #4]
    if( ticket_len == 0 )
   e53ec:	f1b9 0f00 	cmp.w	r9, #0
   e53f0:	f43f aa2b 	beq.w	e484a <mbedtls_ssl_handshake_client_step+0xca>
    mbedtls_platform_zeroize( ssl->session_negotiate->ticket,
   e53f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e53f6:	e9d3 0119 	ldrd	r0, r1, [r3, #100]	; 0x64
   e53fa:	f7fd fbe3 	bl	e2bc4 <mbedtls_platform_zeroize>
    mbedtls_free( ssl->session_negotiate->ticket );
   e53fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e5400:	6e58      	ldr	r0, [r3, #100]	; 0x64
   e5402:	f000 fad1 	bl	e59a8 <free>
    ssl->session_negotiate->ticket = NULL;
   e5406:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e5408:	665e      	str	r6, [r3, #100]	; 0x64
    ssl->session_negotiate->ticket_len = 0;
   e540a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
   e540c:	4649      	mov	r1, r9
    ssl->session_negotiate->ticket_len = 0;
   e540e:	669e      	str	r6, [r3, #104]	; 0x68
    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
   e5410:	2001      	movs	r0, #1
   e5412:	f003 fc73 	bl	e8cfc <calloc>
   e5416:	4605      	mov	r5, r0
   e5418:	b940      	cbnz	r0, e542c <mbedtls_ssl_handshake_client_step+0xcac>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   e541a:	2250      	movs	r2, #80	; 0x50
   e541c:	2102      	movs	r1, #2
   e541e:	4620      	mov	r0, r4
   e5420:	f7fa fa74 	bl	df90c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   e5424:	f5a5 45fe 	sub.w	r5, r5, #32512	; 0x7f00
   e5428:	f7ff ba0f 	b.w	e484a <mbedtls_ssl_handshake_client_step+0xca>
    memcpy( ticket, msg + 6, ticket_len );
   e542c:	464a      	mov	r2, r9
   e542e:	f108 010a 	add.w	r1, r8, #10
   e5432:	f003 fcdb 	bl	e8dec <memcpy>
    ssl->session_negotiate->ticket = ticket;
   e5436:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e5438:	665d      	str	r5, [r3, #100]	; 0x64
    ssl->session_negotiate->ticket_len = ticket_len;
   e543a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e543c:	f8c3 9068 	str.w	r9, [r3, #104]	; 0x68
    ssl->session_negotiate->ticket_lifetime = lifetime;
   e5440:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   e5442:	ba3f      	rev	r7, r7
   e5444:	66d7      	str	r7, [r2, #108]	; 0x6c
    ssl->session_negotiate->id_len = 0;
   e5446:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   e5448:	609e      	str	r6, [r3, #8]
    return( 0 );
   e544a:	e5e7      	b.n	e501c <mbedtls_ssl_handshake_client_step+0x89c>
           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
   e544c:	4620      	mov	r0, r4
   e544e:	f7fa fc2f 	bl	dfcb0 <mbedtls_ssl_parse_change_cipher_spec>
   e5452:	e55b      	b.n	e4f0c <mbedtls_ssl_handshake_client_step+0x78c>
           ret = mbedtls_ssl_parse_finished( ssl );
   e5454:	4620      	mov	r0, r4
   e5456:	f7fa fca5 	bl	dfda4 <mbedtls_ssl_parse_finished>
   e545a:	e557      	b.n	e4f0c <mbedtls_ssl_handshake_client_step+0x78c>
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
   e545c:	230f      	movs	r3, #15
   e545e:	e561      	b.n	e4f24 <mbedtls_ssl_handshake_client_step+0x7a4>
           mbedtls_ssl_handshake_wrapup( ssl );
   e5460:	4620      	mov	r0, r4
   e5462:	f7fa fecf 	bl	e0204 <mbedtls_ssl_handshake_wrapup>
           break;
   e5466:	f7ff b9f0 	b.w	e484a <mbedtls_ssl_handshake_client_step+0xca>
        return( MBEDTLS_ERR_SSL_NO_RNG );
   e546a:	4d13      	ldr	r5, [pc, #76]	; (e54b8 <mbedtls_ssl_handshake_client_step+0xd38>)
   e546c:	f7ff b9ed 	b.w	e484a <mbedtls_ssl_handshake_client_step+0xca>
   e5470:	4605      	mov	r5, r0
   e5472:	f7ff b9ea 	b.w	e484a <mbedtls_ssl_handshake_client_step+0xca>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
   e5476:	2908      	cmp	r1, #8
   e5478:	f47f ad87 	bne.w	e4f8a <mbedtls_ssl_handshake_client_step+0x80a>
    if( ( ret = mbedtls_ecdh_read_params( &ssl->handshake->ecdh_ctx,
   e547c:	6b20      	ldr	r0, [r4, #48]	; 0x30
   e547e:	4632      	mov	r2, r6
   e5480:	a90a      	add	r1, sp, #40	; 0x28
   e5482:	3004      	adds	r0, #4
   e5484:	f7f0 fe4a 	bl	d611c <mbedtls_ecdh_read_params>
   e5488:	2800      	cmp	r0, #0
   e548a:	f47f ad8a 	bne.w	e4fa2 <mbedtls_ssl_handshake_client_step+0x822>
    grp_id = ssl->handshake->ecdh_ctx.grp.id;
   e548e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   e5490:	7919      	ldrb	r1, [r3, #4]
    curve_info = mbedtls_ecp_curve_info_from_grp_id( grp_id );
   e5492:	9106      	str	r1, [sp, #24]
   e5494:	4608      	mov	r0, r1
   e5496:	f7f3 fd27 	bl	d8ee8 <mbedtls_ecp_curve_info_from_grp_id>
    if( curve_info == NULL )
   e549a:	2800      	cmp	r0, #0
   e549c:	f43f ad81 	beq.w	e4fa2 <mbedtls_ssl_handshake_client_step+0x822>
    if( mbedtls_ssl_check_curve( ssl, grp_id ) != 0 )
   e54a0:	9906      	ldr	r1, [sp, #24]
   e54a2:	4620      	mov	r0, r4
   e54a4:	f7fb f87b 	bl	e059e <mbedtls_ssl_check_curve>
   e54a8:	2800      	cmp	r0, #0
   e54aa:	f43f ad88 	beq.w	e4fbe <mbedtls_ssl_handshake_client_step+0x83e>
   e54ae:	e578      	b.n	e4fa2 <mbedtls_ssl_handshake_client_step+0x822>
   e54b0:	ffff9600 	.word	0xffff9600
   e54b4:	ffff8a00 	.word	0xffff8a00
   e54b8:	ffff8c00 	.word	0xffff8c00

000e54bc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   e54bc:	b508      	push	{r3, lr}
   e54be:	4b02      	ldr	r3, [pc, #8]	; (e54c8 <netdb_freeaddrinfo+0xc>)
   e54c0:	681b      	ldr	r3, [r3, #0]
   e54c2:	689b      	ldr	r3, [r3, #8]
   e54c4:	9301      	str	r3, [sp, #4]
   e54c6:	bd08      	pop	{r3, pc}
   e54c8:	00030268 	.word	0x00030268

000e54cc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   e54cc:	b508      	push	{r3, lr}
   e54ce:	4b02      	ldr	r3, [pc, #8]	; (e54d8 <netdb_getaddrinfo+0xc>)
   e54d0:	681b      	ldr	r3, [r3, #0]
   e54d2:	68db      	ldr	r3, [r3, #12]
   e54d4:	9301      	str	r3, [sp, #4]
   e54d6:	bd08      	pop	{r3, pc}
   e54d8:	00030268 	.word	0x00030268

000e54dc <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   e54dc:	b508      	push	{r3, lr}
   e54de:	4b02      	ldr	r3, [pc, #8]	; (e54e8 <HAL_Validate_Pin_Function+0xc>)
   e54e0:	681b      	ldr	r3, [r3, #0]
   e54e2:	685b      	ldr	r3, [r3, #4]
   e54e4:	9301      	str	r3, [sp, #4]
   e54e6:	bd08      	pop	{r3, pc}
   e54e8:	0003022c 	.word	0x0003022c

000e54ec <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   e54ec:	b508      	push	{r3, lr}
   e54ee:	4b02      	ldr	r3, [pc, #8]	; (e54f8 <HAL_Pin_Mode+0xc>)
   e54f0:	681b      	ldr	r3, [r3, #0]
   e54f2:	689b      	ldr	r3, [r3, #8]
   e54f4:	9301      	str	r3, [sp, #4]
   e54f6:	bd08      	pop	{r3, pc}
   e54f8:	0003022c 	.word	0x0003022c

000e54fc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   e54fc:	b508      	push	{r3, lr}
   e54fe:	4b02      	ldr	r3, [pc, #8]	; (e5508 <HAL_Get_Pin_Mode+0xc>)
   e5500:	681b      	ldr	r3, [r3, #0]
   e5502:	68db      	ldr	r3, [r3, #12]
   e5504:	9301      	str	r3, [sp, #4]
   e5506:	bd08      	pop	{r3, pc}
   e5508:	0003022c 	.word	0x0003022c

000e550c <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   e550c:	b508      	push	{r3, lr}
   e550e:	4b02      	ldr	r3, [pc, #8]	; (e5518 <HAL_DAC_Write+0xc>)
   e5510:	681b      	ldr	r3, [r3, #0]
   e5512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e5514:	9301      	str	r3, [sp, #4]
   e5516:	bd08      	pop	{r3, pc}
   e5518:	0003022c 	.word	0x0003022c

000e551c <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   e551c:	b508      	push	{r3, lr}
   e551e:	4b02      	ldr	r3, [pc, #8]	; (e5528 <hal_pwm_write_ext+0xc>)
   e5520:	681b      	ldr	r3, [r3, #0]
   e5522:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   e5524:	9301      	str	r3, [sp, #4]
   e5526:	bd08      	pop	{r3, pc}
   e5528:	0003022c 	.word	0x0003022c

000e552c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   e552c:	b508      	push	{r3, lr}
   e552e:	4b02      	ldr	r3, [pc, #8]	; (e5538 <if_index_to_name+0xc>)
   e5530:	681b      	ldr	r3, [r3, #0]
   e5532:	695b      	ldr	r3, [r3, #20]
   e5534:	9301      	str	r3, [sp, #4]
   e5536:	bd08      	pop	{r3, pc}
   e5538:	0003026c 	.word	0x0003026c

000e553c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   e553c:	b508      	push	{r3, lr}
   e553e:	4b02      	ldr	r3, [pc, #8]	; (e5548 <HAL_RNG_GetRandomNumber+0xc>)
   e5540:	681b      	ldr	r3, [r3, #0]
   e5542:	685b      	ldr	r3, [r3, #4]
   e5544:	9301      	str	r3, [sp, #4]
   e5546:	bd08      	pop	{r3, pc}
   e5548:	00030218 	.word	0x00030218

000e554c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   e554c:	b508      	push	{r3, lr}
   e554e:	4b02      	ldr	r3, [pc, #8]	; (e5558 <HAL_Delay_Microseconds+0xc>)
   e5550:	681b      	ldr	r3, [r3, #0]
   e5552:	68db      	ldr	r3, [r3, #12]
   e5554:	9301      	str	r3, [sp, #4]
   e5556:	bd08      	pop	{r3, pc}
   e5558:	00030218 	.word	0x00030218

000e555c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   e555c:	b508      	push	{r3, lr}
   e555e:	4b02      	ldr	r3, [pc, #8]	; (e5568 <HAL_Timer_Get_Milli_Seconds+0xc>)
   e5560:	681b      	ldr	r3, [r3, #0]
   e5562:	695b      	ldr	r3, [r3, #20]
   e5564:	9301      	str	r3, [sp, #4]
   e5566:	bd08      	pop	{r3, pc}
   e5568:	00030218 	.word	0x00030218

000e556c <hal_rtc_get_unixtime_deprecated>:

DYNALIB_FN(BASE_IDX + 4, hal, hal_rtc_init, void(void))

// These functions are deprecated
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
   e556c:	b508      	push	{r3, lr}
   e556e:	4b02      	ldr	r3, [pc, #8]	; (e5578 <hal_rtc_get_unixtime_deprecated+0xc>)
   e5570:	681b      	ldr	r3, [r3, #0]
   e5572:	69db      	ldr	r3, [r3, #28]
   e5574:	9301      	str	r3, [sp, #4]
   e5576:	bd08      	pop	{r3, pc}
   e5578:	00030218 	.word	0x00030218

000e557c <os_thread_scheduling>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   e557c:	b508      	push	{r3, lr}
   e557e:	4b02      	ldr	r3, [pc, #8]	; (e5588 <os_thread_scheduling+0xc>)
   e5580:	681b      	ldr	r3, [r3, #0]
   e5582:	69db      	ldr	r3, [r3, #28]
   e5584:	9301      	str	r3, [sp, #4]
   e5586:	bd08      	pop	{r3, pc}
   e5588:	00030248 	.word	0x00030248

000e558c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   e558c:	b508      	push	{r3, lr}
   e558e:	4b02      	ldr	r3, [pc, #8]	; (e5598 <os_mutex_recursive_create+0xc>)
   e5590:	681b      	ldr	r3, [r3, #0]
   e5592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   e5594:	9301      	str	r3, [sp, #4]
   e5596:	bd08      	pop	{r3, pc}
   e5598:	00030248 	.word	0x00030248

000e559c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   e559c:	b508      	push	{r3, lr}
   e559e:	4b02      	ldr	r3, [pc, #8]	; (e55a8 <os_mutex_recursive_destroy+0xc>)
   e55a0:	681b      	ldr	r3, [r3, #0]
   e55a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   e55a4:	9301      	str	r3, [sp, #4]
   e55a6:	bd08      	pop	{r3, pc}
   e55a8:	00030248 	.word	0x00030248

000e55ac <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   e55ac:	b508      	push	{r3, lr}
   e55ae:	4b02      	ldr	r3, [pc, #8]	; (e55b8 <inet_inet_ntop+0xc>)
   e55b0:	681b      	ldr	r3, [r3, #0]
   e55b2:	695b      	ldr	r3, [r3, #20]
   e55b4:	9301      	str	r3, [sp, #4]
   e55b6:	bd08      	pop	{r3, pc}
   e55b8:	00030264 	.word	0x00030264

000e55bc <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   e55bc:	b508      	push	{r3, lr}
   e55be:	4b02      	ldr	r3, [pc, #8]	; (e55c8 <inet_htonl+0xc>)
   e55c0:	681b      	ldr	r3, [r3, #0]
   e55c2:	6a1b      	ldr	r3, [r3, #32]
   e55c4:	9301      	str	r3, [sp, #4]
   e55c6:	bd08      	pop	{r3, pc}
   e55c8:	00030264 	.word	0x00030264

000e55cc <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   e55cc:	b508      	push	{r3, lr}
   e55ce:	4b02      	ldr	r3, [pc, #8]	; (e55d8 <inet_htons+0xc>)
   e55d0:	681b      	ldr	r3, [r3, #0]
   e55d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e55d4:	9301      	str	r3, [sp, #4]
   e55d6:	bd08      	pop	{r3, pc}
   e55d8:	00030264 	.word	0x00030264

000e55dc <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   e55dc:	b508      	push	{r3, lr}
   e55de:	4b02      	ldr	r3, [pc, #8]	; (e55e8 <hal_usart_init+0xc>)
   e55e0:	681b      	ldr	r3, [r3, #0]
   e55e2:	681b      	ldr	r3, [r3, #0]
   e55e4:	9301      	str	r3, [sp, #4]
   e55e6:	bd08      	pop	{r3, pc}
   e55e8:	0003023c 	.word	0x0003023c

000e55ec <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   e55ec:	b508      	push	{r3, lr}
   e55ee:	4b02      	ldr	r3, [pc, #8]	; (e55f8 <hal_usart_write+0xc>)
   e55f0:	681b      	ldr	r3, [r3, #0]
   e55f2:	68db      	ldr	r3, [r3, #12]
   e55f4:	9301      	str	r3, [sp, #4]
   e55f6:	bd08      	pop	{r3, pc}
   e55f8:	0003023c 	.word	0x0003023c

000e55fc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   e55fc:	b508      	push	{r3, lr}
   e55fe:	4b02      	ldr	r3, [pc, #8]	; (e5608 <hal_usart_available+0xc>)
   e5600:	681b      	ldr	r3, [r3, #0]
   e5602:	691b      	ldr	r3, [r3, #16]
   e5604:	9301      	str	r3, [sp, #4]
   e5606:	bd08      	pop	{r3, pc}
   e5608:	0003023c 	.word	0x0003023c

000e560c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   e560c:	b508      	push	{r3, lr}
   e560e:	4b02      	ldr	r3, [pc, #8]	; (e5618 <hal_usart_read+0xc>)
   e5610:	681b      	ldr	r3, [r3, #0]
   e5612:	695b      	ldr	r3, [r3, #20]
   e5614:	9301      	str	r3, [sp, #4]
   e5616:	bd08      	pop	{r3, pc}
   e5618:	0003023c 	.word	0x0003023c

000e561c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   e561c:	b508      	push	{r3, lr}
   e561e:	4b02      	ldr	r3, [pc, #8]	; (e5628 <hal_usart_peek+0xc>)
   e5620:	681b      	ldr	r3, [r3, #0]
   e5622:	699b      	ldr	r3, [r3, #24]
   e5624:	9301      	str	r3, [sp, #4]
   e5626:	bd08      	pop	{r3, pc}
   e5628:	0003023c 	.word	0x0003023c

000e562c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   e562c:	b508      	push	{r3, lr}
   e562e:	4b02      	ldr	r3, [pc, #8]	; (e5638 <hal_usart_flush+0xc>)
   e5630:	681b      	ldr	r3, [r3, #0]
   e5632:	69db      	ldr	r3, [r3, #28]
   e5634:	9301      	str	r3, [sp, #4]
   e5636:	bd08      	pop	{r3, pc}
   e5638:	0003023c 	.word	0x0003023c

000e563c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   e563c:	b508      	push	{r3, lr}
   e563e:	4b02      	ldr	r3, [pc, #8]	; (e5648 <hal_usart_is_enabled+0xc>)
   e5640:	681b      	ldr	r3, [r3, #0]
   e5642:	6a1b      	ldr	r3, [r3, #32]
   e5644:	9301      	str	r3, [sp, #4]
   e5646:	bd08      	pop	{r3, pc}
   e5648:	0003023c 	.word	0x0003023c

000e564c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   e564c:	b508      	push	{r3, lr}
   e564e:	4b02      	ldr	r3, [pc, #8]	; (e5658 <hal_usart_available_data_for_write+0xc>)
   e5650:	681b      	ldr	r3, [r3, #0]
   e5652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e5654:	9301      	str	r3, [sp, #4]
   e5656:	bd08      	pop	{r3, pc}
   e5658:	0003023c 	.word	0x0003023c

000e565c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   e565c:	b508      	push	{r3, lr}
   e565e:	4b02      	ldr	r3, [pc, #8]	; (e5668 <hal_i2c_write+0xc>)
   e5660:	681b      	ldr	r3, [r3, #0]
   e5662:	6a1b      	ldr	r3, [r3, #32]
   e5664:	9301      	str	r3, [sp, #4]
   e5666:	bd08      	pop	{r3, pc}
   e5668:	00030228 	.word	0x00030228

000e566c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   e566c:	b508      	push	{r3, lr}
   e566e:	4b02      	ldr	r3, [pc, #8]	; (e5678 <hal_i2c_available+0xc>)
   e5670:	681b      	ldr	r3, [r3, #0]
   e5672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   e5674:	9301      	str	r3, [sp, #4]
   e5676:	bd08      	pop	{r3, pc}
   e5678:	00030228 	.word	0x00030228

000e567c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   e567c:	b508      	push	{r3, lr}
   e567e:	4b02      	ldr	r3, [pc, #8]	; (e5688 <hal_i2c_read+0xc>)
   e5680:	681b      	ldr	r3, [r3, #0]
   e5682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e5684:	9301      	str	r3, [sp, #4]
   e5686:	bd08      	pop	{r3, pc}
   e5688:	00030228 	.word	0x00030228

000e568c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   e568c:	b508      	push	{r3, lr}
   e568e:	4b02      	ldr	r3, [pc, #8]	; (e5698 <hal_i2c_peek+0xc>)
   e5690:	681b      	ldr	r3, [r3, #0]
   e5692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   e5694:	9301      	str	r3, [sp, #4]
   e5696:	bd08      	pop	{r3, pc}
   e5698:	00030228 	.word	0x00030228

000e569c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   e569c:	b508      	push	{r3, lr}
   e569e:	4b02      	ldr	r3, [pc, #8]	; (e56a8 <hal_i2c_flush+0xc>)
   e56a0:	681b      	ldr	r3, [r3, #0]
   e56a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e56a4:	9301      	str	r3, [sp, #4]
   e56a6:	bd08      	pop	{r3, pc}
   e56a8:	00030228 	.word	0x00030228

000e56ac <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   e56ac:	b508      	push	{r3, lr}
   e56ae:	4b02      	ldr	r3, [pc, #8]	; (e56b8 <hal_i2c_is_enabled+0xc>)
   e56b0:	681b      	ldr	r3, [r3, #0]
   e56b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   e56b4:	9301      	str	r3, [sp, #4]
   e56b6:	bd08      	pop	{r3, pc}
   e56b8:	00030228 	.word	0x00030228

000e56bc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   e56bc:	b508      	push	{r3, lr}
   e56be:	4b02      	ldr	r3, [pc, #8]	; (e56c8 <hal_i2c_init+0xc>)
   e56c0:	681b      	ldr	r3, [r3, #0]
   e56c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   e56c4:	9301      	str	r3, [sp, #4]
   e56c6:	bd08      	pop	{r3, pc}
   e56c8:	00030228 	.word	0x00030228

000e56cc <sock_accept>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
   e56cc:	b508      	push	{r3, lr}
   e56ce:	4b02      	ldr	r3, [pc, #8]	; (e56d8 <sock_accept+0xc>)
   e56d0:	681b      	ldr	r3, [r3, #0]
   e56d2:	681b      	ldr	r3, [r3, #0]
   e56d4:	9301      	str	r3, [sp, #4]
   e56d6:	bd08      	pop	{r3, pc}
   e56d8:	00030238 	.word	0x00030238

000e56dc <sock_bind>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   e56dc:	b508      	push	{r3, lr}
   e56de:	4b02      	ldr	r3, [pc, #8]	; (e56e8 <sock_bind+0xc>)
   e56e0:	681b      	ldr	r3, [r3, #0]
   e56e2:	685b      	ldr	r3, [r3, #4]
   e56e4:	9301      	str	r3, [sp, #4]
   e56e6:	bd08      	pop	{r3, pc}
   e56e8:	00030238 	.word	0x00030238

000e56ec <sock_getpeername>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
   e56ec:	b508      	push	{r3, lr}
   e56ee:	4b02      	ldr	r3, [pc, #8]	; (e56f8 <sock_getpeername+0xc>)
   e56f0:	681b      	ldr	r3, [r3, #0]
   e56f2:	68db      	ldr	r3, [r3, #12]
   e56f4:	9301      	str	r3, [sp, #4]
   e56f6:	bd08      	pop	{r3, pc}
   e56f8:	00030238 	.word	0x00030238

000e56fc <sock_setsockopt>:
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   e56fc:	b508      	push	{r3, lr}
   e56fe:	4b02      	ldr	r3, [pc, #8]	; (e5708 <sock_setsockopt+0xc>)
   e5700:	681b      	ldr	r3, [r3, #0]
   e5702:	699b      	ldr	r3, [r3, #24]
   e5704:	9301      	str	r3, [sp, #4]
   e5706:	bd08      	pop	{r3, pc}
   e5708:	00030238 	.word	0x00030238

000e570c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   e570c:	b508      	push	{r3, lr}
   e570e:	4b02      	ldr	r3, [pc, #8]	; (e5718 <sock_close+0xc>)
   e5710:	681b      	ldr	r3, [r3, #0]
   e5712:	69db      	ldr	r3, [r3, #28]
   e5714:	9301      	str	r3, [sp, #4]
   e5716:	bd08      	pop	{r3, pc}
   e5718:	00030238 	.word	0x00030238

000e571c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   e571c:	b508      	push	{r3, lr}
   e571e:	4b02      	ldr	r3, [pc, #8]	; (e5728 <sock_connect+0xc>)
   e5720:	681b      	ldr	r3, [r3, #0]
   e5722:	6a1b      	ldr	r3, [r3, #32]
   e5724:	9301      	str	r3, [sp, #4]
   e5726:	bd08      	pop	{r3, pc}
   e5728:	00030238 	.word	0x00030238

000e572c <sock_listen>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
   e572c:	b508      	push	{r3, lr}
   e572e:	4b02      	ldr	r3, [pc, #8]	; (e5738 <sock_listen+0xc>)
   e5730:	681b      	ldr	r3, [r3, #0]
   e5732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   e5734:	9301      	str	r3, [sp, #4]
   e5736:	bd08      	pop	{r3, pc}
   e5738:	00030238 	.word	0x00030238

000e573c <sock_recv>:
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   e573c:	b508      	push	{r3, lr}
   e573e:	4b02      	ldr	r3, [pc, #8]	; (e5748 <sock_recv+0xc>)
   e5740:	681b      	ldr	r3, [r3, #0]
   e5742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   e5744:	9301      	str	r3, [sp, #4]
   e5746:	bd08      	pop	{r3, pc}
   e5748:	00030238 	.word	0x00030238

000e574c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   e574c:	b508      	push	{r3, lr}
   e574e:	4b02      	ldr	r3, [pc, #8]	; (e5758 <sock_send+0xc>)
   e5750:	681b      	ldr	r3, [r3, #0]
   e5752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e5754:	9301      	str	r3, [sp, #4]
   e5756:	bd08      	pop	{r3, pc}
   e5758:	00030238 	.word	0x00030238

000e575c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   e575c:	b508      	push	{r3, lr}
   e575e:	4b02      	ldr	r3, [pc, #8]	; (e5768 <sock_socket+0xc>)
   e5760:	681b      	ldr	r3, [r3, #0]
   e5762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   e5764:	9301      	str	r3, [sp, #4]
   e5766:	bd08      	pop	{r3, pc}
   e5768:	00030238 	.word	0x00030238

000e576c <sock_fcntl>:
DYNALIB_FN(15, hal_socket, sock_fcntl, int(int, int, ...))
   e576c:	b508      	push	{r3, lr}
   e576e:	4b02      	ldr	r3, [pc, #8]	; (e5778 <sock_fcntl+0xc>)
   e5770:	681b      	ldr	r3, [r3, #0]
   e5772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   e5774:	9301      	str	r3, [sp, #4]
   e5776:	bd08      	pop	{r3, pc}
   e5778:	00030238 	.word	0x00030238

000e577c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   e577c:	b508      	push	{r3, lr}
   e577e:	4b02      	ldr	r3, [pc, #8]	; (e5788 <hal_spi_init+0xc>)
   e5780:	681b      	ldr	r3, [r3, #0]
   e5782:	69db      	ldr	r3, [r3, #28]
   e5784:	9301      	str	r3, [sp, #4]
   e5786:	bd08      	pop	{r3, pc}
   e5788:	00030230 	.word	0x00030230

000e578c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   e578c:	b508      	push	{r3, lr}
   e578e:	4b02      	ldr	r3, [pc, #8]	; (e5798 <hal_spi_is_enabled+0xc>)
   e5790:	681b      	ldr	r3, [r3, #0]
   e5792:	6a1b      	ldr	r3, [r3, #32]
   e5794:	9301      	str	r3, [sp, #4]
   e5796:	bd08      	pop	{r3, pc}
   e5798:	00030230 	.word	0x00030230

000e579c <HAL_Servo_Attach>:
DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
DYNALIB_FN(2, hal_peripherals, HAL_Tone_Get_Frequency, uint32_t(uint8_t))
DYNALIB_FN(3, hal_peripherals, HAL_Tone_Is_Stopped, bool(uint8_t))

DYNALIB_FN(4, hal_peripherals, HAL_Servo_Attach, void(uint16_t))
   e579c:	b508      	push	{r3, lr}
   e579e:	4b02      	ldr	r3, [pc, #8]	; (e57a8 <HAL_Servo_Attach+0xc>)
   e57a0:	681b      	ldr	r3, [r3, #0]
   e57a2:	691b      	ldr	r3, [r3, #16]
   e57a4:	9301      	str	r3, [sp, #4]
   e57a6:	bd08      	pop	{r3, pc}
   e57a8:	00030224 	.word	0x00030224

000e57ac <HAL_Servo_Detach>:
DYNALIB_FN(5, hal_peripherals, HAL_Servo_Detach, void(uint16_t))
   e57ac:	b508      	push	{r3, lr}
   e57ae:	4b02      	ldr	r3, [pc, #8]	; (e57b8 <HAL_Servo_Detach+0xc>)
   e57b0:	681b      	ldr	r3, [r3, #0]
   e57b2:	695b      	ldr	r3, [r3, #20]
   e57b4:	9301      	str	r3, [sp, #4]
   e57b6:	bd08      	pop	{r3, pc}
   e57b8:	00030224 	.word	0x00030224

000e57bc <HAL_Servo_Write_Pulse_Width>:
DYNALIB_FN(6, hal_peripherals, HAL_Servo_Write_Pulse_Width, void(uint16_t, uint16_t))
   e57bc:	b508      	push	{r3, lr}
   e57be:	4b02      	ldr	r3, [pc, #8]	; (e57c8 <HAL_Servo_Write_Pulse_Width+0xc>)
   e57c0:	681b      	ldr	r3, [r3, #0]
   e57c2:	699b      	ldr	r3, [r3, #24]
   e57c4:	9301      	str	r3, [sp, #4]
   e57c6:	bd08      	pop	{r3, pc}
   e57c8:	00030224 	.word	0x00030224

000e57cc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   e57cc:	b508      	push	{r3, lr}
   e57ce:	4b02      	ldr	r3, [pc, #8]	; (e57d8 <HAL_USB_USART_Init+0xc>)
   e57d0:	681b      	ldr	r3, [r3, #0]
   e57d2:	681b      	ldr	r3, [r3, #0]
   e57d4:	9301      	str	r3, [sp, #4]
   e57d6:	bd08      	pop	{r3, pc}
   e57d8:	0003024c 	.word	0x0003024c

000e57dc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   e57dc:	b508      	push	{r3, lr}
   e57de:	4b02      	ldr	r3, [pc, #8]	; (e57e8 <HAL_USB_USART_Available_Data+0xc>)
   e57e0:	681b      	ldr	r3, [r3, #0]
   e57e2:	691b      	ldr	r3, [r3, #16]
   e57e4:	9301      	str	r3, [sp, #4]
   e57e6:	bd08      	pop	{r3, pc}
   e57e8:	0003024c 	.word	0x0003024c

000e57ec <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   e57ec:	b508      	push	{r3, lr}
   e57ee:	4b02      	ldr	r3, [pc, #8]	; (e57f8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   e57f0:	681b      	ldr	r3, [r3, #0]
   e57f2:	695b      	ldr	r3, [r3, #20]
   e57f4:	9301      	str	r3, [sp, #4]
   e57f6:	bd08      	pop	{r3, pc}
   e57f8:	0003024c 	.word	0x0003024c

000e57fc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   e57fc:	b508      	push	{r3, lr}
   e57fe:	4b02      	ldr	r3, [pc, #8]	; (e5808 <HAL_USB_USART_Receive_Data+0xc>)
   e5800:	681b      	ldr	r3, [r3, #0]
   e5802:	699b      	ldr	r3, [r3, #24]
   e5804:	9301      	str	r3, [sp, #4]
   e5806:	bd08      	pop	{r3, pc}
   e5808:	0003024c 	.word	0x0003024c

000e580c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   e580c:	b508      	push	{r3, lr}
   e580e:	4b02      	ldr	r3, [pc, #8]	; (e5818 <HAL_USB_USART_Send_Data+0xc>)
   e5810:	681b      	ldr	r3, [r3, #0]
   e5812:	69db      	ldr	r3, [r3, #28]
   e5814:	9301      	str	r3, [sp, #4]
   e5816:	bd08      	pop	{r3, pc}
   e5818:	0003024c 	.word	0x0003024c

000e581c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   e581c:	b508      	push	{r3, lr}
   e581e:	4b02      	ldr	r3, [pc, #8]	; (e5828 <HAL_USB_USART_Flush_Data+0xc>)
   e5820:	681b      	ldr	r3, [r3, #0]
   e5822:	6a1b      	ldr	r3, [r3, #32]
   e5824:	9301      	str	r3, [sp, #4]
   e5826:	bd08      	pop	{r3, pc}
   e5828:	0003024c 	.word	0x0003024c

000e582c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   e582c:	b508      	push	{r3, lr}
   e582e:	4b02      	ldr	r3, [pc, #8]	; (e5838 <panic_+0xc>)
   e5830:	681b      	ldr	r3, [r3, #0]
   e5832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   e5834:	9301      	str	r3, [sp, #4]
   e5836:	bd08      	pop	{r3, pc}
   e5838:	00030260 	.word	0x00030260

000e583c <jsmn_init>:

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   e583c:	b508      	push	{r3, lr}
   e583e:	4b02      	ldr	r3, [pc, #8]	; (e5848 <jsmn_init+0xc>)
   e5840:	681b      	ldr	r3, [r3, #0]
   e5842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   e5844:	9301      	str	r3, [sp, #4]
   e5846:	bd08      	pop	{r3, pc}
   e5848:	00030260 	.word	0x00030260

000e584c <jsmn_parse>:
DYNALIB_FN(15, services, jsmn_parse, jsmnerr_t(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   e584c:	b508      	push	{r3, lr}
   e584e:	4b02      	ldr	r3, [pc, #8]	; (e5858 <jsmn_parse+0xc>)
   e5850:	681b      	ldr	r3, [r3, #0]
   e5852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   e5854:	9301      	str	r3, [sp, #4]
   e5856:	bd08      	pop	{r3, pc}
   e5858:	00030260 	.word	0x00030260

000e585c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   e585c:	b508      	push	{r3, lr}
   e585e:	4b02      	ldr	r3, [pc, #8]	; (e5868 <log_message+0xc>)
   e5860:	681b      	ldr	r3, [r3, #0]
   e5862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   e5864:	9301      	str	r3, [sp, #4]
   e5866:	bd08      	pop	{r3, pc}
   e5868:	00030260 	.word	0x00030260

000e586c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   e586c:	b508      	push	{r3, lr}
   e586e:	4b02      	ldr	r3, [pc, #8]	; (e5878 <set_system_mode+0xc>)
   e5870:	681b      	ldr	r3, [r3, #0]
   e5872:	685b      	ldr	r3, [r3, #4]
   e5874:	9301      	str	r3, [sp, #4]
   e5876:	bd08      	pop	{r3, pc}
   e5878:	00030220 	.word	0x00030220

000e587c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   e587c:	b508      	push	{r3, lr}
   e587e:	4b02      	ldr	r3, [pc, #8]	; (e5888 <system_delay_ms+0xc>)
   e5880:	681b      	ldr	r3, [r3, #0]
   e5882:	695b      	ldr	r3, [r3, #20]
   e5884:	9301      	str	r3, [sp, #4]
   e5886:	bd08      	pop	{r3, pc}
   e5888:	00030220 	.word	0x00030220

000e588c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   e588c:	b508      	push	{r3, lr}
   e588e:	4b03      	ldr	r3, [pc, #12]	; (e589c <system_ctrl_set_app_request_handler+0x10>)
   e5890:	681b      	ldr	r3, [r3, #0]
   e5892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   e5896:	9301      	str	r3, [sp, #4]
   e5898:	bd08      	pop	{r3, pc}
   e589a:	0000      	.short	0x0000
   e589c:	00030220 	.word	0x00030220

000e58a0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   e58a0:	b508      	push	{r3, lr}
   e58a2:	4b03      	ldr	r3, [pc, #12]	; (e58b0 <system_ctrl_set_result+0x10>)
   e58a4:	681b      	ldr	r3, [r3, #0]
   e58a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   e58aa:	9301      	str	r3, [sp, #4]
   e58ac:	bd08      	pop	{r3, pc}
   e58ae:	0000      	.short	0x0000
   e58b0:	00030220 	.word	0x00030220

000e58b4 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   e58b4:	b508      	push	{r3, lr}
   e58b6:	4b03      	ldr	r3, [pc, #12]	; (e58c4 <system_sleep_ext+0x10>)
   e58b8:	681b      	ldr	r3, [r3, #0]
   e58ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   e58be:	9301      	str	r3, [sp, #4]
   e58c0:	bd08      	pop	{r3, pc}
   e58c2:	0000      	.short	0x0000
   e58c4:	00030220 	.word	0x00030220

000e58c8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   e58c8:	b508      	push	{r3, lr}
   e58ca:	4b02      	ldr	r3, [pc, #8]	; (e58d4 <network_connect+0xc>)
   e58cc:	681b      	ldr	r3, [r3, #0]
   e58ce:	685b      	ldr	r3, [r3, #4]
   e58d0:	9301      	str	r3, [sp, #4]
   e58d2:	bd08      	pop	{r3, pc}
   e58d4:	00030240 	.word	0x00030240

000e58d8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   e58d8:	b508      	push	{r3, lr}
   e58da:	4b02      	ldr	r3, [pc, #8]	; (e58e4 <network_connecting+0xc>)
   e58dc:	681b      	ldr	r3, [r3, #0]
   e58de:	689b      	ldr	r3, [r3, #8]
   e58e0:	9301      	str	r3, [sp, #4]
   e58e2:	bd08      	pop	{r3, pc}
   e58e4:	00030240 	.word	0x00030240

000e58e8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   e58e8:	b508      	push	{r3, lr}
   e58ea:	4b02      	ldr	r3, [pc, #8]	; (e58f4 <network_disconnect+0xc>)
   e58ec:	681b      	ldr	r3, [r3, #0]
   e58ee:	68db      	ldr	r3, [r3, #12]
   e58f0:	9301      	str	r3, [sp, #4]
   e58f2:	bd08      	pop	{r3, pc}
   e58f4:	00030240 	.word	0x00030240

000e58f8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   e58f8:	b508      	push	{r3, lr}
   e58fa:	4b02      	ldr	r3, [pc, #8]	; (e5904 <network_ready+0xc>)
   e58fc:	681b      	ldr	r3, [r3, #0]
   e58fe:	691b      	ldr	r3, [r3, #16]
   e5900:	9301      	str	r3, [sp, #4]
   e5902:	bd08      	pop	{r3, pc}
   e5904:	00030240 	.word	0x00030240

000e5908 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   e5908:	b508      	push	{r3, lr}
   e590a:	4b02      	ldr	r3, [pc, #8]	; (e5914 <network_on+0xc>)
   e590c:	681b      	ldr	r3, [r3, #0]
   e590e:	695b      	ldr	r3, [r3, #20]
   e5910:	9301      	str	r3, [sp, #4]
   e5912:	bd08      	pop	{r3, pc}
   e5914:	00030240 	.word	0x00030240

000e5918 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   e5918:	b508      	push	{r3, lr}
   e591a:	4b02      	ldr	r3, [pc, #8]	; (e5924 <network_off+0xc>)
   e591c:	681b      	ldr	r3, [r3, #0]
   e591e:	699b      	ldr	r3, [r3, #24]
   e5920:	9301      	str	r3, [sp, #4]
   e5922:	bd08      	pop	{r3, pc}
   e5924:	00030240 	.word	0x00030240

000e5928 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   e5928:	b508      	push	{r3, lr}
   e592a:	4b02      	ldr	r3, [pc, #8]	; (e5934 <network_listen+0xc>)
   e592c:	681b      	ldr	r3, [r3, #0]
   e592e:	69db      	ldr	r3, [r3, #28]
   e5930:	9301      	str	r3, [sp, #4]
   e5932:	bd08      	pop	{r3, pc}
   e5934:	00030240 	.word	0x00030240

000e5938 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   e5938:	b508      	push	{r3, lr}
   e593a:	4b02      	ldr	r3, [pc, #8]	; (e5944 <network_listening+0xc>)
   e593c:	681b      	ldr	r3, [r3, #0]
   e593e:	6a1b      	ldr	r3, [r3, #32]
   e5940:	9301      	str	r3, [sp, #4]
   e5942:	bd08      	pop	{r3, pc}
   e5944:	00030240 	.word	0x00030240

000e5948 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   e5948:	b508      	push	{r3, lr}
   e594a:	4b02      	ldr	r3, [pc, #8]	; (e5954 <network_set_listen_timeout+0xc>)
   e594c:	681b      	ldr	r3, [r3, #0]
   e594e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e5950:	9301      	str	r3, [sp, #4]
   e5952:	bd08      	pop	{r3, pc}
   e5954:	00030240 	.word	0x00030240

000e5958 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   e5958:	b508      	push	{r3, lr}
   e595a:	4b02      	ldr	r3, [pc, #8]	; (e5964 <network_get_listen_timeout+0xc>)
   e595c:	681b      	ldr	r3, [r3, #0]
   e595e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   e5960:	9301      	str	r3, [sp, #4]
   e5962:	bd08      	pop	{r3, pc}
   e5964:	00030240 	.word	0x00030240

000e5968 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   e5968:	b508      	push	{r3, lr}
   e596a:	4b02      	ldr	r3, [pc, #8]	; (e5974 <spark_cloud_flag_connected+0xc>)
   e596c:	681b      	ldr	r3, [r3, #0]
   e596e:	695b      	ldr	r3, [r3, #20]
   e5970:	9301      	str	r3, [sp, #4]
   e5972:	bd08      	pop	{r3, pc}
   e5974:	00030244 	.word	0x00030244

000e5978 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   e5978:	b508      	push	{r3, lr}
   e597a:	4b02      	ldr	r3, [pc, #8]	; (e5984 <spark_sync_time+0xc>)
   e597c:	681b      	ldr	r3, [r3, #0]
   e597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   e5980:	9301      	str	r3, [sp, #4]
   e5982:	bd08      	pop	{r3, pc}
   e5984:	00030244 	.word	0x00030244

000e5988 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   e5988:	b508      	push	{r3, lr}
   e598a:	4b02      	ldr	r3, [pc, #8]	; (e5994 <spark_set_random_seed_from_cloud_handler+0xc>)
   e598c:	681b      	ldr	r3, [r3, #0]
   e598e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   e5990:	9301      	str	r3, [sp, #4]
   e5992:	bd08      	pop	{r3, pc}
   e5994:	00030244 	.word	0x00030244

000e5998 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   e5998:	b508      	push	{r3, lr}
   e599a:	4b02      	ldr	r3, [pc, #8]	; (e59a4 <malloc+0xc>)
   e599c:	681b      	ldr	r3, [r3, #0]
   e599e:	681b      	ldr	r3, [r3, #0]
   e59a0:	9301      	str	r3, [sp, #4]
   e59a2:	bd08      	pop	{r3, pc}
   e59a4:	0003021c 	.word	0x0003021c

000e59a8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   e59a8:	b508      	push	{r3, lr}
   e59aa:	4b02      	ldr	r3, [pc, #8]	; (e59b4 <free+0xc>)
   e59ac:	681b      	ldr	r3, [r3, #0]
   e59ae:	685b      	ldr	r3, [r3, #4]
   e59b0:	9301      	str	r3, [sp, #4]
   e59b2:	bd08      	pop	{r3, pc}
   e59b4:	0003021c 	.word	0x0003021c

000e59b8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   e59b8:	b508      	push	{r3, lr}
   e59ba:	4b02      	ldr	r3, [pc, #8]	; (e59c4 <realloc+0xc>)
   e59bc:	681b      	ldr	r3, [r3, #0]
   e59be:	689b      	ldr	r3, [r3, #8]
   e59c0:	9301      	str	r3, [sp, #4]
   e59c2:	bd08      	pop	{r3, pc}
   e59c4:	0003021c 	.word	0x0003021c

000e59c8 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   e59c8:	b508      	push	{r3, lr}
   e59ca:	4b02      	ldr	r3, [pc, #8]	; (e59d4 <sprintf+0xc>)
   e59cc:	681b      	ldr	r3, [r3, #0]
   e59ce:	68db      	ldr	r3, [r3, #12]
   e59d0:	9301      	str	r3, [sp, #4]
   e59d2:	bd08      	pop	{r3, pc}
   e59d4:	0003021c 	.word	0x0003021c

000e59d8 <snprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   e59d8:	b508      	push	{r3, lr}
   e59da:	4b02      	ldr	r3, [pc, #8]	; (e59e4 <snprintf+0xc>)
   e59dc:	681b      	ldr	r3, [r3, #0]
   e59de:	69db      	ldr	r3, [r3, #28]
   e59e0:	9301      	str	r3, [sp, #4]
   e59e2:	bd08      	pop	{r3, pc}
   e59e4:	0003021c 	.word	0x0003021c

000e59e8 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   e59e8:	b508      	push	{r3, lr}
   e59ea:	4b02      	ldr	r3, [pc, #8]	; (e59f4 <abort+0xc>)
   e59ec:	681b      	ldr	r3, [r3, #0]
   e59ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   e59f0:	9301      	str	r3, [sp, #4]
   e59f2:	bd08      	pop	{r3, pc}
   e59f4:	0003021c 	.word	0x0003021c

000e59f8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   e59f8:	b508      	push	{r3, lr}
   e59fa:	4b02      	ldr	r3, [pc, #8]	; (e5a04 <_malloc_r+0xc>)
   e59fc:	681b      	ldr	r3, [r3, #0]
   e59fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e5a00:	9301      	str	r3, [sp, #4]
   e5a02:	bd08      	pop	{r3, pc}
   e5a04:	0003021c 	.word	0x0003021c

000e5a08 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   e5a08:	b508      	push	{r3, lr}
   e5a0a:	4b02      	ldr	r3, [pc, #8]	; (e5a14 <__errno+0xc>)
   e5a0c:	681b      	ldr	r3, [r3, #0]
   e5a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   e5a10:	9301      	str	r3, [sp, #4]
   e5a12:	bd08      	pop	{r3, pc}
   e5a14:	0003021c 	.word	0x0003021c

000e5a18 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   e5a18:	b508      	push	{r3, lr}
   e5a1a:	4b02      	ldr	r3, [pc, #8]	; (e5a24 <newlib_impure_ptr_callback+0xc>)
   e5a1c:	681b      	ldr	r3, [r3, #0]
   e5a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   e5a20:	9301      	str	r3, [sp, #4]
   e5a22:	bd08      	pop	{r3, pc}
   e5a24:	0003021c 	.word	0x0003021c

000e5a28 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   e5a28:	2200      	movs	r2, #0
   e5a2a:	6840      	ldr	r0, [r0, #4]
   e5a2c:	4611      	mov	r1, r2
   e5a2e:	f7ff bf83 	b.w	e5938 <network_listening>

000e5a32 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   e5a32:	2200      	movs	r2, #0
   e5a34:	6840      	ldr	r0, [r0, #4]
   e5a36:	4611      	mov	r1, r2
   e5a38:	f7ff bf8e 	b.w	e5958 <network_get_listen_timeout>

000e5a3c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   e5a3c:	6840      	ldr	r0, [r0, #4]
   e5a3e:	2200      	movs	r2, #0
   e5a40:	f7ff bf82 	b.w	e5948 <network_set_listen_timeout>

000e5a44 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   e5a44:	6840      	ldr	r0, [r0, #4]
   e5a46:	2200      	movs	r2, #0
   e5a48:	f081 0101 	eor.w	r1, r1, #1
   e5a4c:	f7ff bf6c 	b.w	e5928 <network_listen>

000e5a50 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   e5a50:	2300      	movs	r3, #0
   e5a52:	6840      	ldr	r0, [r0, #4]
   e5a54:	461a      	mov	r2, r3
   e5a56:	4619      	mov	r1, r3
   e5a58:	f7ff bf5e 	b.w	e5918 <network_off>

000e5a5c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   e5a5c:	2300      	movs	r3, #0
   e5a5e:	6840      	ldr	r0, [r0, #4]
   e5a60:	461a      	mov	r2, r3
   e5a62:	4619      	mov	r1, r3
   e5a64:	f7ff bf50 	b.w	e5908 <network_on>

000e5a68 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   e5a68:	2200      	movs	r2, #0
   e5a6a:	6840      	ldr	r0, [r0, #4]
   e5a6c:	4611      	mov	r1, r2
   e5a6e:	f7ff bf43 	b.w	e58f8 <network_ready>

000e5a72 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   e5a72:	2200      	movs	r2, #0
   e5a74:	6840      	ldr	r0, [r0, #4]
   e5a76:	4611      	mov	r1, r2
   e5a78:	f7ff bf2e 	b.w	e58d8 <network_connecting>

000e5a7c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   e5a7c:	6840      	ldr	r0, [r0, #4]
   e5a7e:	2200      	movs	r2, #0
   e5a80:	2102      	movs	r1, #2
   e5a82:	f7ff bf31 	b.w	e58e8 <network_disconnect>

000e5a86 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   e5a86:	2300      	movs	r3, #0
   e5a88:	6840      	ldr	r0, [r0, #4]
   e5a8a:	461a      	mov	r2, r3
   e5a8c:	f7ff bf1c 	b.w	e58c8 <network_connect>

000e5a90 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   e5a90:	4b02      	ldr	r3, [pc, #8]	; (e5a9c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   e5a92:	2203      	movs	r2, #3
   e5a94:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   e5a96:	4a02      	ldr	r2, [pc, #8]	; (e5aa0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   e5a98:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   e5a9a:	4770      	bx	lr
   e5a9c:	2003e63c 	.word	0x2003e63c
   e5aa0:	000ed8a8 	.word	0x000ed8a8

000e5aa4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   e5aa4:	b510      	push	{r4, lr}
   e5aa6:	4604      	mov	r4, r0
   e5aa8:	4608      	mov	r0, r1
{
    _spi = spi;
   e5aaa:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   e5aac:	f7ff fe66 	bl	e577c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   e5ab0:	2300      	movs	r3, #0
   e5ab2:	6063      	str	r3, [r4, #4]
}
   e5ab4:	4620      	mov	r0, r4
   e5ab6:	bd10      	pop	{r4, pc}

000e5ab8 <_ZN5Servo17writeMicrosecondsEt>:
}

void Servo::writeMicroseconds(uint16_t pulseWidth)
{

  if (!this->attached())
   e5ab8:	f9b0 2000 	ldrsh.w	r2, [r0]
   e5abc:	1c53      	adds	r3, r2, #1
   e5abe:	d00b      	beq.n	e5ad8 <_ZN5Servo17writeMicrosecondsEt+0x20>
  {
    return;
  }

  pulseWidth = constrain(pulseWidth, this->minPW, this->maxPW);
   e5ac0:	8843      	ldrh	r3, [r0, #2]
   e5ac2:	8880      	ldrh	r0, [r0, #4]
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   e5ac4:	428b      	cmp	r3, r1
   e5ac6:	d803      	bhi.n	e5ad0 <_ZN5Servo17writeMicrosecondsEt+0x18>
   e5ac8:	4288      	cmp	r0, r1
   e5aca:	4603      	mov	r3, r0
   e5acc:	bf28      	it	cs
   e5ace:	460b      	movcs	r3, r1

  HAL_Servo_Write_Pulse_Width(this->pin, pulseWidth);
   e5ad0:	4619      	mov	r1, r3
   e5ad2:	b290      	uxth	r0, r2
   e5ad4:	f7ff be72 	b.w	e57bc <HAL_Servo_Write_Pulse_Width>
}
   e5ad8:	4770      	bx	lr

000e5ada <_ZN5Servo5writeEi>:
{
   e5ada:	b513      	push	{r0, r1, r4, lr}
   e5adc:	4604      	mov	r4, r0
   e5ade:	4608      	mov	r0, r1
   e5ae0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   e5ae4:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   e5ae8:	4288      	cmp	r0, r1
   e5aea:	db10      	blt.n	e5b0e <_ZN5Servo5writeEi+0x34>
   e5aec:	4290      	cmp	r0, r2
   e5aee:	bfa8      	it	ge
   e5af0:	4610      	movge	r0, r2
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   e5af2:	88a3      	ldrh	r3, [r4, #4]
   e5af4:	9300      	str	r3, [sp, #0]
   e5af6:	8863      	ldrh	r3, [r4, #2]
   e5af8:	f000 fc52 	bl	e63a0 <_Z3mapiiiii>
   e5afc:	68e3      	ldr	r3, [r4, #12]
   e5afe:	4418      	add	r0, r3
   e5b00:	b281      	uxth	r1, r0
   e5b02:	4620      	mov	r0, r4
}
   e5b04:	b002      	add	sp, #8
   e5b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  this->writeMicroseconds(ANGLE_TO_US(degrees)+trim);
   e5b0a:	f7ff bfd5 	b.w	e5ab8 <_ZN5Servo17writeMicrosecondsEt>
   e5b0e:	4608      	mov	r0, r1
   e5b10:	e7ef      	b.n	e5af2 <_ZN5Servo5writeEi+0x18>
	...

000e5b14 <_ZN5Servo11resetFieldsEv>:
{
  this->pin = NOT_ATTACHED;
  this->minAngle = SERVO_DEFAULT_MIN_ANGLE;
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
  this->minPW = SERVO_DEFAULT_MIN_PW;
  this->maxPW = SERVO_DEFAULT_MAX_PW;
   e5b14:	4a04      	ldr	r2, [pc, #16]	; (e5b28 <_ZN5Servo11resetFieldsEv+0x14>)
   e5b16:	f44f 6316 	mov.w	r3, #2400	; 0x960
   e5b1a:	e9c0 2300 	strd	r2, r3, [r0]
  this->maxAngle = SERVO_DEFAULT_MAX_ANGLE;
   e5b1e:	23b4      	movs	r3, #180	; 0xb4
   e5b20:	8103      	strh	r3, [r0, #8]
  this->trim = 0;
   e5b22:	2300      	movs	r3, #0
   e5b24:	60c3      	str	r3, [r0, #12]
}
   e5b26:	4770      	bx	lr
   e5b28:	0220ffff 	.word	0x0220ffff

000e5b2c <_ZN5ServoC1Ev>:
Servo::Servo()
   e5b2c:	b508      	push	{r3, lr}
  this->resetFields();
   e5b2e:	f7ff fff1 	bl	e5b14 <_ZN5Servo11resetFieldsEv>
}
   e5b32:	bd08      	pop	{r3, pc}

000e5b34 <_ZN5Servo6detachEv>:
{
   e5b34:	b510      	push	{r4, lr}
   e5b36:	4604      	mov	r4, r0
  if (!this->attached())
   e5b38:	f9b0 0000 	ldrsh.w	r0, [r0]
   e5b3c:	1c43      	adds	r3, r0, #1
   e5b3e:	d007      	beq.n	e5b50 <_ZN5Servo6detachEv+0x1c>
  HAL_Servo_Detach(this->pin);
   e5b40:	b280      	uxth	r0, r0
   e5b42:	f7ff fe33 	bl	e57ac <HAL_Servo_Detach>
  this->resetFields();
   e5b46:	4620      	mov	r0, r4
   e5b48:	f7ff ffe4 	bl	e5b14 <_ZN5Servo11resetFieldsEv>
  return true;
   e5b4c:	2001      	movs	r0, #1
}
   e5b4e:	bd10      	pop	{r4, pc}
    return false;
   e5b50:	2000      	movs	r0, #0
   e5b52:	e7fc      	b.n	e5b4e <_ZN5Servo6detachEv+0x1a>

000e5b54 <_ZN5ServoD1Ev>:
Servo::~Servo()
   e5b54:	b510      	push	{r4, lr}
   e5b56:	4604      	mov	r4, r0
  detach();
   e5b58:	f7ff ffec 	bl	e5b34 <_ZN5Servo6detachEv>
}
   e5b5c:	4620      	mov	r0, r4
   e5b5e:	bd10      	pop	{r4, pc}

000e5b60 <_ZN5Servo6attachEtttss>:
{
   e5b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e5b64:	460d      	mov	r5, r1
   e5b66:	4604      	mov	r4, r0
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   e5b68:	2102      	movs	r1, #2
   e5b6a:	4628      	mov	r0, r5
{
   e5b6c:	4690      	mov	r8, r2
   e5b6e:	461f      	mov	r7, r3
  if (HAL_Validate_Pin_Function(pin, PF_TIMER)!=PF_TIMER)
   e5b70:	f7ff fcb4 	bl	e54dc <HAL_Validate_Pin_Function>
   e5b74:	2802      	cmp	r0, #2
   e5b76:	d003      	beq.n	e5b80 <_ZN5Servo6attachEtttss+0x20>
    return false;
   e5b78:	2600      	movs	r6, #0
}
   e5b7a:	4630      	mov	r0, r6
   e5b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!pinAvailable(pin))
   e5b80:	4628      	mov	r0, r5
   e5b82:	f001 fec5 	bl	e7910 <pinAvailable>
   e5b86:	4606      	mov	r6, r0
   e5b88:	2800      	cmp	r0, #0
   e5b8a:	d0f5      	beq.n	e5b78 <_ZN5Servo6attachEtttss+0x18>
  if (this->attached())
   e5b8c:	f9b4 3000 	ldrsh.w	r3, [r4]
   e5b90:	3301      	adds	r3, #1
   e5b92:	d002      	beq.n	e5b9a <_ZN5Servo6attachEtttss+0x3a>
    this->detach();
   e5b94:	4620      	mov	r0, r4
   e5b96:	f7ff ffcd 	bl	e5b34 <_ZN5Servo6detachEv>
  this->minAngle = minAngle;
   e5b9a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   e5b9e:	80e3      	strh	r3, [r4, #6]
  this->maxAngle = maxAngle;
   e5ba0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  this->pin = pin;
   e5ba4:	8025      	strh	r5, [r4, #0]
  this->minPW = minPW;
   e5ba6:	f8a4 8002 	strh.w	r8, [r4, #2]
  this->maxPW = maxPW;
   e5baa:	80a7      	strh	r7, [r4, #4]
  this->maxAngle = maxAngle;
   e5bac:	8123      	strh	r3, [r4, #8]
  HAL_Servo_Attach(this->pin);
   e5bae:	4628      	mov	r0, r5
   e5bb0:	f7ff fdf4 	bl	e579c <HAL_Servo_Attach>
  return true;
   e5bb4:	e7e1      	b.n	e5b7a <_ZN5Servo6attachEtttss+0x1a>

000e5bb6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   e5bb6:	b510      	push	{r4, lr}
   e5bb8:	4604      	mov	r4, r0
        if (wakeupSource_) {
   e5bba:	6800      	ldr	r0, [r0, #0]
   e5bbc:	b118      	cbz	r0, e5bc6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   e5bbe:	f7ff fef3 	bl	e59a8 <free>
            wakeupSource_ = nullptr;
   e5bc2:	2300      	movs	r3, #0
   e5bc4:	6023      	str	r3, [r4, #0]
        }
    }
   e5bc6:	bd10      	pop	{r4, pc}

000e5bc8 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   e5bc8:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   e5bca:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   e5bce:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   e5bd0:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   e5bd2:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   e5bd4:	f853 2f06 	ldr.w	r2, [r3, #6]!
   e5bd8:	f8c0 2006 	str.w	r2, [r0, #6]
   e5bdc:	889b      	ldrh	r3, [r3, #4]
   e5bde:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   e5be0:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   e5be2:	f7ff ffe8 	bl	e5bb6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   e5be6:	682b      	ldr	r3, [r5, #0]
   e5be8:	b113      	cbz	r3, e5bf0 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   e5bea:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   e5bec:	2300      	movs	r3, #0
   e5bee:	602b      	str	r3, [r5, #0]
    }
   e5bf0:	4620      	mov	r0, r4
   e5bf2:	bd38      	pop	{r3, r4, r5, pc}

000e5bf4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   e5bf4:	b538      	push	{r3, r4, r5, lr}
   e5bf6:	460c      	mov	r4, r1
   e5bf8:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   e5bfa:	f7ff ffdc 	bl	e5bb6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   e5bfe:	b144      	cbz	r4, e5c12 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   e5c00:	8820      	ldrh	r0, [r4, #0]
   e5c02:	f7ff fec9 	bl	e5998 <malloc>
   e5c06:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   e5c08:	b128      	cbz	r0, e5c16 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   e5c0a:	8822      	ldrh	r2, [r4, #0]
   e5c0c:	4621      	mov	r1, r4
   e5c0e:	f003 f8ed 	bl	e8dec <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   e5c12:	2000      	movs	r0, #0
    }
   e5c14:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   e5c16:	4801      	ldr	r0, [pc, #4]	; (e5c1c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   e5c18:	e7fc      	b.n	e5c14 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   e5c1a:	bf00      	nop
   e5c1c:	fffffefc 	.word	0xfffffefc

000e5c20 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   e5c20:	b5f0      	push	{r4, r5, r6, r7, lr}
   e5c22:	4d2d      	ldr	r5, [pc, #180]	; (e5cd8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   e5c24:	7d0b      	ldrb	r3, [r1, #20]
   e5c26:	4604      	mov	r4, r0
   e5c28:	b08b      	sub	sp, #44	; 0x2c
   e5c2a:	4608      	mov	r0, r1
   e5c2c:	1daf      	adds	r7, r5, #6
   e5c2e:	2b00      	cmp	r3, #0
   e5c30:	d038      	beq.n	e5ca4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   e5c32:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   e5c34:	791b      	ldrb	r3, [r3, #4]
   e5c36:	2b00      	cmp	r3, #0
   e5c38:	d034      	beq.n	e5ca4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   e5c3a:	2200      	movs	r2, #0
    SleepResult() {}
   e5c3c:	4b27      	ldr	r3, [pc, #156]	; (e5cdc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   e5c3e:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   e5c40:	a902      	add	r1, sp, #8
   e5c42:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   e5c44:	9202      	str	r2, [sp, #8]
   e5c46:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   e5c4a:	f88d 200e 	strb.w	r2, [sp, #14]
   e5c4e:	f7ff fe31 	bl	e58b4 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   e5c52:	f8dd 300e 	ldr.w	r3, [sp, #14]
   e5c56:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   e5c5a:	b200      	sxth	r0, r0
   e5c5c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   e5c60:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   e5c64:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   e5c66:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   e5c68:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   e5c6a:	4628      	mov	r0, r5
   e5c6c:	f7ff ffc2 	bl	e5bf4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   e5c70:	a802      	add	r0, sp, #8
   e5c72:	f7ff ffa0 	bl	e5bb6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   e5c76:	2300      	movs	r3, #0
   e5c78:	6023      	str	r3, [r4, #0]
   e5c7a:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   e5c7c:	71a3      	strb	r3, [r4, #6]
   e5c7e:	8123      	strh	r3, [r4, #8]
   e5c80:	f64f 73ff 	movw	r3, #65535	; 0xffff
   e5c84:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   e5c86:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   e5c8a:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   e5c8c:	683b      	ldr	r3, [r7, #0]
   e5c8e:	f8c4 3006 	str.w	r3, [r4, #6]
   e5c92:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   e5c94:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   e5c96:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   e5c98:	4620      	mov	r0, r4
   e5c9a:	f7ff ffab 	bl	e5bf4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   e5c9e:	4620      	mov	r0, r4
   e5ca0:	b00b      	add	sp, #44	; 0x2c
   e5ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   e5ca4:	2600      	movs	r6, #0
   e5ca6:	2320      	movs	r3, #32
   e5ca8:	e9cd 3602 	strd	r3, r6, [sp, #8]
   e5cac:	4b0c      	ldr	r3, [pc, #48]	; (e5ce0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   e5cae:	9300      	str	r3, [sp, #0]
   e5cb0:	490c      	ldr	r1, [pc, #48]	; (e5ce4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   e5cb2:	4633      	mov	r3, r6
   e5cb4:	aa02      	add	r2, sp, #8
   e5cb6:	2032      	movs	r0, #50	; 0x32
   e5cb8:	f7ff fdd0 	bl	e585c <log_message>
    SleepResult() {}
   e5cbc:	4b07      	ldr	r3, [pc, #28]	; (e5cdc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   e5cbe:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   e5cc0:	a902      	add	r1, sp, #8
        error_ = error;
   e5cc2:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   e5cc6:	4804      	ldr	r0, [pc, #16]	; (e5cd8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   e5cc8:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   e5cca:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   e5cce:	f8ad 300c 	strh.w	r3, [sp, #12]
   e5cd2:	f7ff ff79 	bl	e5bc8 <_ZN17SystemSleepResultaSEOS_>
   e5cd6:	e7cb      	b.n	e5c70 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   e5cd8:	2003e644 	.word	0x2003e644
   e5cdc:	ffff0000 	.word	0xffff0000
   e5ce0:	000ed8db 	.word	0x000ed8db
   e5ce4:	000ed8d4 	.word	0x000ed8d4

000e5ce8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   e5ce8:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   e5cea:	4b09      	ldr	r3, [pc, #36]	; (e5d10 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   e5cec:	4c09      	ldr	r4, [pc, #36]	; (e5d14 <_GLOBAL__sub_I_System+0x2c>)
   e5cee:	2202      	movs	r2, #2
   e5cf0:	2000      	movs	r0, #0
   e5cf2:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   e5cf4:	4b08      	ldr	r3, [pc, #32]	; (e5d18 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   e5cf6:	6020      	str	r0, [r4, #0]
   e5cf8:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   e5cfa:	71a0      	strb	r0, [r4, #6]
   e5cfc:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   e5cfe:	f7ff fdb5 	bl	e586c <set_system_mode>
SystemClass System;
   e5d02:	4620      	mov	r0, r4
   e5d04:	4a05      	ldr	r2, [pc, #20]	; (e5d1c <_GLOBAL__sub_I_System+0x34>)
   e5d06:	4906      	ldr	r1, [pc, #24]	; (e5d20 <_GLOBAL__sub_I_System+0x38>)
   e5d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   e5d0c:	f001 beb6 	b.w	e7a7c <__aeabi_atexit>
   e5d10:	2003e650 	.word	0x2003e650
   e5d14:	2003e644 	.word	0x2003e644
   e5d18:	ffff0000 	.word	0xffff0000
   e5d1c:	2003ae28 	.word	0x2003ae28
   e5d20:	000d4fcd 	.word	0x000d4fcd

000e5d24 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   e5d24:	b510      	push	{r4, lr}
   e5d26:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   e5d28:	f003 f8d6 	bl	e8ed8 <strlen>
   e5d2c:	3801      	subs	r0, #1
   e5d2e:	1823      	adds	r3, r4, r0
   e5d30:	4620      	mov	r0, r4
	while(i<j){
   e5d32:	4283      	cmp	r3, r0
   e5d34:	d906      	bls.n	e5d44 <_Z11str_reversePc+0x20>
		c = *i;
   e5d36:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   e5d38:	7819      	ldrb	r1, [r3, #0]
   e5d3a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   e5d3e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   e5d42:	e7f6      	b.n	e5d32 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   e5d44:	bd10      	pop	{r4, pc}

000e5d46 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   e5d46:	b570      	push	{r4, r5, r6, lr}
   e5d48:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   e5d4a:	1e91      	subs	r1, r2, #2
   e5d4c:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   e5d4e:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   e5d50:	d822      	bhi.n	e5d98 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   e5d52:	4620      	mov	r0, r4

	div_t result;
	while(a){
   e5d54:	b16d      	cbz	r5, e5d72 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   e5d56:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   e5d5a:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   e5d5e:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   e5d60:	2d09      	cmp	r5, #9
                *ptr += '0';
   e5d62:	bf94      	ite	ls
   e5d64:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   e5d66:	3157      	addhi	r1, #87	; 0x57
   e5d68:	b2c9      	uxtb	r1, r1
   e5d6a:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   e5d6e:	4635      	mov	r5, r6
	while(a){
   e5d70:	e7f0      	b.n	e5d54 <ultoa+0xe>
   e5d72:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   e5d74:	4423      	add	r3, r4
            *ptr++ = '0';
   e5d76:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   e5d78:	4293      	cmp	r3, r2
   e5d7a:	d902      	bls.n	e5d82 <ultoa+0x3c>
            *ptr++ = '0';
   e5d7c:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   e5d80:	e7fa      	b.n	e5d78 <ultoa+0x32>
   e5d82:	1a1a      	subs	r2, r3, r0
   e5d84:	4283      	cmp	r3, r0
   e5d86:	bf38      	it	cc
   e5d88:	2200      	movcc	r2, #0

	*ptr = '\0';
   e5d8a:	2300      	movs	r3, #0
   e5d8c:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   e5d8e:	4620      	mov	r0, r4
   e5d90:	f7ff ffc8 	bl	e5d24 <_Z11str_reversePc>
	return buffer;
   e5d94:	4620      	mov	r0, r4
}
   e5d96:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   e5d98:	2000      	movs	r0, #0
   e5d9a:	e7fc      	b.n	e5d96 <ultoa+0x50>

000e5d9c <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   e5d9c:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   e5d9e:	2301      	movs	r3, #1
   e5da0:	f7ff ffd1 	bl	e5d46 <ultoa>
}
   e5da4:	bd08      	pop	{r3, pc}

000e5da6 <_ZN21StringPrintableHelperD1Ev>:
{
	if (buffer) return float(atof(buffer));
	return 0;
}

class StringPrintableHelper : public Print
   e5da6:	4770      	bx	lr

000e5da8 <_ZN21StringPrintableHelperD0Ev>:
   e5da8:	b510      	push	{r4, lr}
   e5daa:	210c      	movs	r1, #12
   e5dac:	4604      	mov	r4, r0
   e5dae:	f001 fe6a 	bl	e7a86 <_ZdlPvj>
   e5db2:	4620      	mov	r0, r4
   e5db4:	bd10      	pop	{r4, pc}

000e5db6 <_ZN6StringD1Ev>:
String::~String()
   e5db6:	b510      	push	{r4, lr}
   e5db8:	4604      	mov	r4, r0
	free(buffer);
   e5dba:	6800      	ldr	r0, [r0, #0]
   e5dbc:	f7ff fdf4 	bl	e59a8 <free>
}
   e5dc0:	4620      	mov	r0, r4
   e5dc2:	bd10      	pop	{r4, pc}

000e5dc4 <_ZN6String10invalidateEv>:
{
   e5dc4:	b510      	push	{r4, lr}
   e5dc6:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   e5dc8:	6800      	ldr	r0, [r0, #0]
   e5dca:	b108      	cbz	r0, e5dd0 <_ZN6String10invalidateEv+0xc>
   e5dcc:	f7ff fdec 	bl	e59a8 <free>
	buffer = NULL;
   e5dd0:	2300      	movs	r3, #0
	capacity = len = 0;
   e5dd2:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   e5dd6:	6023      	str	r3, [r4, #0]
}
   e5dd8:	bd10      	pop	{r4, pc}

000e5dda <_ZN6String12changeBufferEj>:
{
   e5dda:	b538      	push	{r3, r4, r5, lr}
   e5ddc:	4604      	mov	r4, r0
   e5dde:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   e5de0:	6800      	ldr	r0, [r0, #0]
   e5de2:	3101      	adds	r1, #1
   e5de4:	f7ff fde8 	bl	e59b8 <realloc>
	if (newbuffer) {
   e5de8:	b110      	cbz	r0, e5df0 <_ZN6String12changeBufferEj+0x16>
		capacity = maxStrLen;
   e5dea:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   e5dee:	2001      	movs	r0, #1
}
   e5df0:	bd38      	pop	{r3, r4, r5, pc}

000e5df2 <_ZN6String7reserveEj>:
{
   e5df2:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   e5df4:	6803      	ldr	r3, [r0, #0]
{
   e5df6:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   e5df8:	b123      	cbz	r3, e5e04 <_ZN6String7reserveEj+0x12>
   e5dfa:	6843      	ldr	r3, [r0, #4]
   e5dfc:	428b      	cmp	r3, r1
   e5dfe:	d301      	bcc.n	e5e04 <_ZN6String7reserveEj+0x12>
   e5e00:	2001      	movs	r0, #1
}
   e5e02:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   e5e04:	4620      	mov	r0, r4
   e5e06:	f7ff ffe8 	bl	e5dda <_ZN6String12changeBufferEj>
   e5e0a:	2800      	cmp	r0, #0
   e5e0c:	d0f9      	beq.n	e5e02 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   e5e0e:	68a3      	ldr	r3, [r4, #8]
   e5e10:	2b00      	cmp	r3, #0
   e5e12:	d1f5      	bne.n	e5e00 <_ZN6String7reserveEj+0xe>
   e5e14:	6822      	ldr	r2, [r4, #0]
   e5e16:	7013      	strb	r3, [r2, #0]
   e5e18:	e7f2      	b.n	e5e00 <_ZN6String7reserveEj+0xe>

000e5e1a <_ZN6String4copyEPKcj>:
{
   e5e1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   e5e1c:	460d      	mov	r5, r1
	if (!reserve(length)) {
   e5e1e:	4611      	mov	r1, r2
   e5e20:	9201      	str	r2, [sp, #4]
{
   e5e22:	4604      	mov	r4, r0
	if (!reserve(length)) {
   e5e24:	f7ff ffe5 	bl	e5df2 <_ZN6String7reserveEj>
   e5e28:	9a01      	ldr	r2, [sp, #4]
   e5e2a:	b928      	cbnz	r0, e5e38 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   e5e2c:	4620      	mov	r0, r4
   e5e2e:	f7ff ffc9 	bl	e5dc4 <_ZN6String10invalidateEv>
}
   e5e32:	4620      	mov	r0, r4
   e5e34:	b003      	add	sp, #12
   e5e36:	bd30      	pop	{r4, r5, pc}
	len = length;
   e5e38:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   e5e3a:	4629      	mov	r1, r5
   e5e3c:	6820      	ldr	r0, [r4, #0]
   e5e3e:	f002 ffd5 	bl	e8dec <memcpy>
	buffer[len] = 0;
   e5e42:	6822      	ldr	r2, [r4, #0]
   e5e44:	68a3      	ldr	r3, [r4, #8]
   e5e46:	2100      	movs	r1, #0
   e5e48:	54d1      	strb	r1, [r2, r3]
	return *this;
   e5e4a:	e7f2      	b.n	e5e32 <_ZN6String4copyEPKcj+0x18>

000e5e4c <_ZN6StringC1EPKc>:
	buffer = NULL;
   e5e4c:	2300      	movs	r3, #0
String::String(const char *cstr)
   e5e4e:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   e5e50:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   e5e54:	4604      	mov	r4, r0
	len = 0;
   e5e56:	6083      	str	r3, [r0, #8]
	flags = 0;
   e5e58:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   e5e5a:	b141      	cbz	r1, e5e6e <_ZN6StringC1EPKc+0x22>
   e5e5c:	4608      	mov	r0, r1
   e5e5e:	9101      	str	r1, [sp, #4]
   e5e60:	f003 f83a 	bl	e8ed8 <strlen>
   e5e64:	9901      	ldr	r1, [sp, #4]
   e5e66:	4602      	mov	r2, r0
   e5e68:	4620      	mov	r0, r4
   e5e6a:	f7ff ffd6 	bl	e5e1a <_ZN6String4copyEPKcj>
}
   e5e6e:	4620      	mov	r0, r4
   e5e70:	b002      	add	sp, #8
   e5e72:	bd10      	pop	{r4, pc}

000e5e74 <_ZN6String4moveERS_>:
{
   e5e74:	b538      	push	{r3, r4, r5, lr}
   e5e76:	4605      	mov	r5, r0
	if (buffer) {
   e5e78:	6800      	ldr	r0, [r0, #0]
{
   e5e7a:	460c      	mov	r4, r1
	if (buffer) {
   e5e7c:	b168      	cbz	r0, e5e9a <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   e5e7e:	686a      	ldr	r2, [r5, #4]
   e5e80:	688b      	ldr	r3, [r1, #8]
   e5e82:	429a      	cmp	r2, r3
   e5e84:	d307      	bcc.n	e5e96 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   e5e86:	6809      	ldr	r1, [r1, #0]
   e5e88:	f003 f81e 	bl	e8ec8 <strcpy>
			len = rhs.len;
   e5e8c:	68a3      	ldr	r3, [r4, #8]
   e5e8e:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   e5e90:	2300      	movs	r3, #0
	rhs.len = 0;
   e5e92:	60a3      	str	r3, [r4, #8]
}
   e5e94:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   e5e96:	f7ff fd87 	bl	e59a8 <free>
	buffer = rhs.buffer;
   e5e9a:	6823      	ldr	r3, [r4, #0]
   e5e9c:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   e5e9e:	6863      	ldr	r3, [r4, #4]
   e5ea0:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   e5ea2:	68a3      	ldr	r3, [r4, #8]
   e5ea4:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   e5ea6:	2300      	movs	r3, #0
	rhs.capacity = 0;
   e5ea8:	e9c4 3300 	strd	r3, r3, [r4]
   e5eac:	e7f1      	b.n	e5e92 <_ZN6String4moveERS_+0x1e>

000e5eae <_ZN6StringaSERKS_>:
	if (this == &rhs) return *this;
   e5eae:	4288      	cmp	r0, r1
{
   e5eb0:	b510      	push	{r4, lr}
   e5eb2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   e5eb4:	d005      	beq.n	e5ec2 <_ZN6StringaSERKS_+0x14>
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   e5eb6:	680b      	ldr	r3, [r1, #0]
   e5eb8:	b12b      	cbz	r3, e5ec6 <_ZN6StringaSERKS_+0x18>
   e5eba:	688a      	ldr	r2, [r1, #8]
   e5ebc:	4619      	mov	r1, r3
   e5ebe:	f7ff ffac 	bl	e5e1a <_ZN6String4copyEPKcj>
}
   e5ec2:	4620      	mov	r0, r4
   e5ec4:	bd10      	pop	{r4, pc}
	else invalidate();
   e5ec6:	f7ff ff7d 	bl	e5dc4 <_ZN6String10invalidateEv>
   e5eca:	e7fa      	b.n	e5ec2 <_ZN6StringaSERKS_+0x14>

000e5ecc <_ZN6StringC1ERKS_>:
String::String(const String &value)
   e5ecc:	b510      	push	{r4, lr}
	buffer = NULL;
   e5ece:	2300      	movs	r3, #0
String::String(const String &value)
   e5ed0:	4604      	mov	r4, r0
	capacity = 0;
   e5ed2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   e5ed6:	6083      	str	r3, [r0, #8]
	flags = 0;
   e5ed8:	7303      	strb	r3, [r0, #12]
	*this = value;
   e5eda:	f7ff ffe8 	bl	e5eae <_ZN6StringaSERKS_>
}
   e5ede:	4620      	mov	r0, r4
   e5ee0:	bd10      	pop	{r4, pc}

000e5ee2 <_ZN6StringaSEOS_>:
	if (this != &rval) move(rval);
   e5ee2:	4288      	cmp	r0, r1
{
   e5ee4:	b510      	push	{r4, lr}
   e5ee6:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   e5ee8:	d001      	beq.n	e5eee <_ZN6StringaSEOS_+0xc>
   e5eea:	f7ff ffc3 	bl	e5e74 <_ZN6String4moveERS_>
}
   e5eee:	4620      	mov	r0, r4
   e5ef0:	bd10      	pop	{r4, pc}

000e5ef2 <_ZN6StringaSEPKc>:
{
   e5ef2:	b513      	push	{r0, r1, r4, lr}
   e5ef4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   e5ef6:	b159      	cbz	r1, e5f10 <_ZN6StringaSEPKc+0x1e>
   e5ef8:	4608      	mov	r0, r1
   e5efa:	9101      	str	r1, [sp, #4]
   e5efc:	f002 ffec 	bl	e8ed8 <strlen>
   e5f00:	9901      	ldr	r1, [sp, #4]
   e5f02:	4602      	mov	r2, r0
   e5f04:	4620      	mov	r0, r4
   e5f06:	f7ff ff88 	bl	e5e1a <_ZN6String4copyEPKcj>
}
   e5f0a:	4620      	mov	r0, r4
   e5f0c:	b002      	add	sp, #8
   e5f0e:	bd10      	pop	{r4, pc}
	else invalidate();
   e5f10:	f7ff ff58 	bl	e5dc4 <_ZN6String10invalidateEv>
   e5f14:	e7f9      	b.n	e5f0a <_ZN6StringaSEPKc+0x18>

000e5f16 <_ZN6StringC1Ejh>:
String::String(unsigned int value, unsigned char base)
   e5f16:	b510      	push	{r4, lr}
   e5f18:	4604      	mov	r4, r0
   e5f1a:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   e5f1c:	2300      	movs	r3, #0
	capacity = 0;
   e5f1e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   e5f22:	60a3      	str	r3, [r4, #8]
	flags = 0;
   e5f24:	7323      	strb	r3, [r4, #12]
String::String(unsigned int value, unsigned char base)
   e5f26:	4608      	mov	r0, r1
	utoa(value, buf, base);
   e5f28:	a901      	add	r1, sp, #4
   e5f2a:	f7ff ff37 	bl	e5d9c <utoa>
	*this = buf;
   e5f2e:	a901      	add	r1, sp, #4
   e5f30:	4620      	mov	r0, r4
   e5f32:	f7ff ffde 	bl	e5ef2 <_ZN6StringaSEPKc>
}
   e5f36:	4620      	mov	r0, r4
   e5f38:	b00a      	add	sp, #40	; 0x28
   e5f3a:	bd10      	pop	{r4, pc}

000e5f3c <_ZN6StringC1Emh>:
String::String(unsigned long value, unsigned char base)
   e5f3c:	b510      	push	{r4, lr}
   e5f3e:	4604      	mov	r4, r0
   e5f40:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   e5f42:	2300      	movs	r3, #0
	capacity = 0;
   e5f44:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   e5f48:	60a3      	str	r3, [r4, #8]
	flags = 0;
   e5f4a:	7323      	strb	r3, [r4, #12]
String::String(unsigned long value, unsigned char base)
   e5f4c:	4608      	mov	r0, r1
	ultoa(value, buf, base);
   e5f4e:	2301      	movs	r3, #1
   e5f50:	a901      	add	r1, sp, #4
   e5f52:	f7ff fef8 	bl	e5d46 <ultoa>
	*this = buf;
   e5f56:	a901      	add	r1, sp, #4
   e5f58:	4620      	mov	r0, r4
   e5f5a:	f7ff ffca 	bl	e5ef2 <_ZN6StringaSEPKc>
}
   e5f5e:	4620      	mov	r0, r4
   e5f60:	b00a      	add	sp, #40	; 0x28
   e5f62:	bd10      	pop	{r4, pc}

000e5f64 <_ZN6String6concatEPKcj>:
{
   e5f64:	b570      	push	{r4, r5, r6, lr}
   e5f66:	4605      	mov	r5, r0
	if (!cstr) return 0;
   e5f68:	460e      	mov	r6, r1
   e5f6a:	b909      	cbnz	r1, e5f70 <_ZN6String6concatEPKcj+0xc>
   e5f6c:	2000      	movs	r0, #0
}
   e5f6e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   e5f70:	b16a      	cbz	r2, e5f8e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   e5f72:	6884      	ldr	r4, [r0, #8]
   e5f74:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   e5f76:	4621      	mov	r1, r4
   e5f78:	f7ff ff3b 	bl	e5df2 <_ZN6String7reserveEj>
   e5f7c:	2800      	cmp	r0, #0
   e5f7e:	d0f5      	beq.n	e5f6c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   e5f80:	6828      	ldr	r0, [r5, #0]
   e5f82:	68ab      	ldr	r3, [r5, #8]
   e5f84:	4631      	mov	r1, r6
   e5f86:	4418      	add	r0, r3
   e5f88:	f002 ff9e 	bl	e8ec8 <strcpy>
	len = newlen;
   e5f8c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   e5f8e:	2001      	movs	r0, #1
   e5f90:	e7ed      	b.n	e5f6e <_ZN6String6concatEPKcj+0xa>

000e5f92 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   e5f92:	688a      	ldr	r2, [r1, #8]
   e5f94:	6809      	ldr	r1, [r1, #0]
   e5f96:	f7ff bfe5 	b.w	e5f64 <_ZN6String6concatEPKcj>

000e5f9a <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
   e5f9a:	b538      	push	{r3, r4, r5, lr}
   e5f9c:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
   e5f9e:	6880      	ldr	r0, [r0, #8]
   e5fa0:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
   e5fa2:	f7ff ffdf 	bl	e5f64 <_ZN6String6concatEPKcj>
        return s.length()-len;
   e5fa6:	68a3      	ldr	r3, [r4, #8]
   e5fa8:	6898      	ldr	r0, [r3, #8]
    }
   e5faa:	1b40      	subs	r0, r0, r5
   e5fac:	bd38      	pop	{r3, r4, r5, pc}

000e5fae <_ZN6String6concatEPKc>:
{
   e5fae:	b513      	push	{r0, r1, r4, lr}
   e5fb0:	4604      	mov	r4, r0
}
   e5fb2:	4608      	mov	r0, r1
	if (!cstr) return 0;
   e5fb4:	b151      	cbz	r1, e5fcc <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   e5fb6:	9101      	str	r1, [sp, #4]
   e5fb8:	f002 ff8e 	bl	e8ed8 <strlen>
   e5fbc:	9901      	ldr	r1, [sp, #4]
   e5fbe:	4602      	mov	r2, r0
   e5fc0:	4620      	mov	r0, r4
}
   e5fc2:	b002      	add	sp, #8
   e5fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   e5fc8:	f7ff bfcc 	b.w	e5f64 <_ZN6String6concatEPKcj>
}
   e5fcc:	b002      	add	sp, #8
   e5fce:	bd10      	pop	{r4, pc}

000e5fd0 <_ZN6String6concatEc>:
{
   e5fd0:	b507      	push	{r0, r1, r2, lr}
	buf[1] = 0;
   e5fd2:	2300      	movs	r3, #0
	buf[0] = c;
   e5fd4:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   e5fd8:	2201      	movs	r2, #1
   e5fda:	a901      	add	r1, sp, #4
	buf[1] = 0;
   e5fdc:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   e5fe0:	f7ff ffc0 	bl	e5f64 <_ZN6String6concatEPKcj>
}
   e5fe4:	b003      	add	sp, #12
   e5fe6:	f85d fb04 	ldr.w	pc, [sp], #4

000e5fea <_ZN21StringPrintableHelper5writeEh>:

    virtual size_t write(uint8_t c) override
   e5fea:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
   e5fec:	6880      	ldr	r0, [r0, #8]
   e5fee:	f7ff ffef 	bl	e5fd0 <_ZN6String6concatEc>
    }
   e5ff2:	bd08      	pop	{r3, pc}

000e5ff4 <_ZNK6String9compareToERKS_>:
	if (!buffer || !s.buffer) {
   e5ff4:	6802      	ldr	r2, [r0, #0]
{
   e5ff6:	460b      	mov	r3, r1
   e5ff8:	6809      	ldr	r1, [r1, #0]
	if (!buffer || !s.buffer) {
   e5ffa:	b162      	cbz	r2, e6016 <_ZNK6String9compareToERKS_+0x22>
   e5ffc:	b941      	cbnz	r1, e6010 <_ZNK6String9compareToERKS_+0x1c>
		if (buffer && len > 0) return *(unsigned char *)buffer;
   e5ffe:	6880      	ldr	r0, [r0, #8]
   e6000:	b160      	cbz	r0, e601c <_ZNK6String9compareToERKS_+0x28>
   e6002:	7810      	ldrb	r0, [r2, #0]
   e6004:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   e6006:	6898      	ldr	r0, [r3, #8]
   e6008:	b140      	cbz	r0, e601c <_ZNK6String9compareToERKS_+0x28>
   e600a:	7809      	ldrb	r1, [r1, #0]
   e600c:	4248      	negs	r0, r1
   e600e:	4770      	bx	lr
	return strcmp(buffer, s.buffer);
   e6010:	4610      	mov	r0, r2
   e6012:	f002 bf4f 	b.w	e8eb4 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   e6016:	2900      	cmp	r1, #0
   e6018:	d1f5      	bne.n	e6006 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   e601a:	4608      	mov	r0, r1
}
   e601c:	4770      	bx	lr

000e601e <_ZNK6String6equalsERKS_>:
{
   e601e:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   e6020:	6882      	ldr	r2, [r0, #8]
   e6022:	688b      	ldr	r3, [r1, #8]
   e6024:	429a      	cmp	r2, r3
   e6026:	d105      	bne.n	e6034 <_ZNK6String6equalsERKS_+0x16>
   e6028:	f7ff ffe4 	bl	e5ff4 <_ZNK6String9compareToERKS_>
   e602c:	fab0 f080 	clz	r0, r0
   e6030:	0940      	lsrs	r0, r0, #5
}
   e6032:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   e6034:	2000      	movs	r0, #0
   e6036:	e7fc      	b.n	e6032 <_ZNK6String6equalsERKS_+0x14>

000e6038 <_ZNK6String6equalsEPKc>:
{
   e6038:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   e603a:	6882      	ldr	r2, [r0, #8]
   e603c:	b93a      	cbnz	r2, e604e <_ZNK6String6equalsEPKc+0x16>
   e603e:	b121      	cbz	r1, e604a <_ZNK6String6equalsEPKc+0x12>
   e6040:	7808      	ldrb	r0, [r1, #0]
	return strcmp(buffer, cstr) == 0;
   e6042:	fab0 f080 	clz	r0, r0
   e6046:	0940      	lsrs	r0, r0, #5
   e6048:	e000      	b.n	e604c <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   e604a:	2001      	movs	r0, #1
}
   e604c:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   e604e:	6800      	ldr	r0, [r0, #0]
   e6050:	b909      	cbnz	r1, e6056 <_ZNK6String6equalsEPKc+0x1e>
   e6052:	7800      	ldrb	r0, [r0, #0]
   e6054:	e7f5      	b.n	e6042 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   e6056:	f002 ff2d 	bl	e8eb4 <strcmp>
   e605a:	e7f2      	b.n	e6042 <_ZNK6String6equalsEPKc+0xa>

000e605c <_ZN6StringC1ERK9Printable>:
};

String::String(const Printable& printable)
   e605c:	b530      	push	{r4, r5, lr}
   e605e:	b085      	sub	sp, #20
	buffer = NULL;
   e6060:	2300      	movs	r3, #0
String::String(const Printable& printable)
   e6062:	460d      	mov	r5, r1
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   e6064:	9302      	str	r3, [sp, #8]
	capacity = 0;
   e6066:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   e606a:	6083      	str	r3, [r0, #8]
	flags = 0;
   e606c:	7303      	strb	r3, [r0, #12]
        s.reserve(20);
   e606e:	2114      	movs	r1, #20
    StringPrintableHelper(String& s_) : s(s_) {
   e6070:	4b06      	ldr	r3, [pc, #24]	; (e608c <_ZN6StringC1ERK9Printable+0x30>)
   e6072:	9301      	str	r3, [sp, #4]
String::String(const Printable& printable)
   e6074:	4604      	mov	r4, r0
    StringPrintableHelper(String& s_) : s(s_) {
   e6076:	9003      	str	r0, [sp, #12]
        s.reserve(20);
   e6078:	f7ff febb 	bl	e5df2 <_ZN6String7reserveEj>
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
   e607c:	682b      	ldr	r3, [r5, #0]
   e607e:	a901      	add	r1, sp, #4
   e6080:	681b      	ldr	r3, [r3, #0]
   e6082:	4628      	mov	r0, r5
   e6084:	4798      	blx	r3
}
   e6086:	4620      	mov	r0, r4
   e6088:	b005      	add	sp, #20
   e608a:	bd30      	pop	{r4, r5, pc}
   e608c:	000ed90c 	.word	0x000ed90c

000e6090 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   e6090:	b510      	push	{r4, lr}
   e6092:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   e6094:	6800      	ldr	r0, [r0, #0]
   e6096:	b108      	cbz	r0, e609c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   e6098:	f7ff fa80 	bl	e559c <os_mutex_recursive_destroy>
    }
   e609c:	4620      	mov	r0, r4
   e609e:	bd10      	pop	{r4, pc}

000e60a0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   e60a0:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   e60a2:	4c06      	ldr	r4, [pc, #24]	; (e60bc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   e60a4:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   e60a6:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   e60a8:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   e60aa:	f7ff fa6f 	bl	e558c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   e60ae:	4620      	mov	r0, r4
   e60b0:	4a03      	ldr	r2, [pc, #12]	; (e60c0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   e60b2:	4904      	ldr	r1, [pc, #16]	; (e60c4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   e60b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   e60b8:	f001 bce0 	b.w	e7a7c <__aeabi_atexit>
   e60bc:	2003e654 	.word	0x2003e654
   e60c0:	2003ae28 	.word	0x2003ae28
   e60c4:	000e6091 	.word	0x000e6091

000e60c8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   e60c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e60ca:	4606      	mov	r6, r0
   e60cc:	460d      	mov	r5, r1
  size_t n = 0;
   e60ce:	188f      	adds	r7, r1, r2
   e60d0:	2400      	movs	r4, #0
  while (size--) {
   e60d2:	42bd      	cmp	r5, r7
   e60d4:	d00c      	beq.n	e60f0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   e60d6:	6833      	ldr	r3, [r6, #0]
   e60d8:	f815 1b01 	ldrb.w	r1, [r5], #1
   e60dc:	689b      	ldr	r3, [r3, #8]
   e60de:	4630      	mov	r0, r6
   e60e0:	4798      	blx	r3
     if (chunk>=0)
   e60e2:	1e03      	subs	r3, r0, #0
   e60e4:	db01      	blt.n	e60ea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   e60e6:	441c      	add	r4, r3
  while (size--) {
   e60e8:	e7f3      	b.n	e60d2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   e60ea:	2c00      	cmp	r4, #0
   e60ec:	bf08      	it	eq
   e60ee:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   e60f0:	4620      	mov	r0, r4
   e60f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e60f4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   e60f4:	b513      	push	{r0, r1, r4, lr}
   e60f6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   e60f8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   e60fa:	b159      	cbz	r1, e6114 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   e60fc:	9101      	str	r1, [sp, #4]
   e60fe:	f002 feeb 	bl	e8ed8 <strlen>
   e6102:	6823      	ldr	r3, [r4, #0]
   e6104:	9901      	ldr	r1, [sp, #4]
   e6106:	68db      	ldr	r3, [r3, #12]
   e6108:	4602      	mov	r2, r0
   e610a:	4620      	mov	r0, r4
    }
   e610c:	b002      	add	sp, #8
   e610e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   e6112:	4718      	bx	r3
    }
   e6114:	b002      	add	sp, #8
   e6116:	bd10      	pop	{r4, pc}

000e6118 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   e6118:	6803      	ldr	r3, [r0, #0]
   e611a:	689b      	ldr	r3, [r3, #8]
   e611c:	4718      	bx	r3

000e611e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   e611e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   e6120:	210d      	movs	r1, #13
{
   e6122:	4605      	mov	r5, r0
  size_t n = print('\r');
   e6124:	f7ff fff8 	bl	e6118 <_ZN5Print5printEc>
  n += print('\n');
   e6128:	210a      	movs	r1, #10
  size_t n = print('\r');
   e612a:	4604      	mov	r4, r0
  n += print('\n');
   e612c:	4628      	mov	r0, r5
   e612e:	f7ff fff3 	bl	e6118 <_ZN5Print5printEc>
  return n;
}
   e6132:	4420      	add	r0, r4
   e6134:	bd38      	pop	{r3, r4, r5, pc}

000e6136 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   e6136:	b538      	push	{r3, r4, r5, lr}
   e6138:	4605      	mov	r5, r0
  return write(str);
   e613a:	f7ff ffdb 	bl	e60f4 <_ZN5Print5writeEPKc>
   e613e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   e6140:	4628      	mov	r0, r5
   e6142:	f7ff ffec 	bl	e611e <_ZN5Print7printlnEv>
  return n;
}
   e6146:	4420      	add	r0, r4
   e6148:	bd38      	pop	{r3, r4, r5, pc}

000e614a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   e614a:	b530      	push	{r4, r5, lr}
   e614c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   e614e:	2300      	movs	r3, #0
   e6150:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   e6154:	2a01      	cmp	r2, #1
   e6156:	bf98      	it	ls
   e6158:	220a      	movls	r2, #10
   e615a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   e615c:	460d      	mov	r5, r1
   e615e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   e6162:	fb01 5312 	mls	r3, r1, r2, r5
   e6166:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   e616a:	2b09      	cmp	r3, #9
   e616c:	bf94      	ite	ls
   e616e:	3330      	addls	r3, #48	; 0x30
   e6170:	3337      	addhi	r3, #55	; 0x37
   e6172:	b2db      	uxtb	r3, r3
  } while(n);
   e6174:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   e6176:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   e617a:	d9ef      	bls.n	e615c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   e617c:	4621      	mov	r1, r4
   e617e:	f7ff ffb9 	bl	e60f4 <_ZN5Print5writeEPKc>
}
   e6182:	b00b      	add	sp, #44	; 0x2c
   e6184:	bd30      	pop	{r4, r5, pc}
	...

000e6188 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   e6188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e618c:	ec55 4b10 	vmov	r4, r5, d0
   e6190:	4606      	mov	r6, r0
   e6192:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   e6194:	ee10 2a10 	vmov	r2, s0
   e6198:	ee10 0a10 	vmov	r0, s0
   e619c:	462b      	mov	r3, r5
   e619e:	4629      	mov	r1, r5
   e61a0:	f002 fbb0 	bl	e8904 <__aeabi_dcmpun>
   e61a4:	b140      	cbz	r0, e61b8 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   e61a6:	4953      	ldr	r1, [pc, #332]	; (e62f4 <_ZN5Print10printFloatEdh+0x16c>)
   e61a8:	4630      	mov	r0, r6
   e61aa:	f7ff ffa3 	bl	e60f4 <_ZN5Print5writeEPKc>
   e61ae:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   e61b0:	4650      	mov	r0, sl
   e61b2:	b003      	add	sp, #12
   e61b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   e61b8:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   e61bc:	4b4e      	ldr	r3, [pc, #312]	; (e62f8 <_ZN5Print10printFloatEdh+0x170>)
   e61be:	f04f 32ff 	mov.w	r2, #4294967295
   e61c2:	4620      	mov	r0, r4
   e61c4:	4649      	mov	r1, r9
   e61c6:	f002 fb9d 	bl	e8904 <__aeabi_dcmpun>
   e61ca:	b948      	cbnz	r0, e61e0 <_ZN5Print10printFloatEdh+0x58>
   e61cc:	4b4a      	ldr	r3, [pc, #296]	; (e62f8 <_ZN5Print10printFloatEdh+0x170>)
   e61ce:	f04f 32ff 	mov.w	r2, #4294967295
   e61d2:	4620      	mov	r0, r4
   e61d4:	4649      	mov	r1, r9
   e61d6:	f002 fb77 	bl	e88c8 <__aeabi_dcmple>
   e61da:	b908      	cbnz	r0, e61e0 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   e61dc:	4947      	ldr	r1, [pc, #284]	; (e62fc <_ZN5Print10printFloatEdh+0x174>)
   e61de:	e7e3      	b.n	e61a8 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   e61e0:	4b47      	ldr	r3, [pc, #284]	; (e6300 <_ZN5Print10printFloatEdh+0x178>)
   e61e2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   e61e6:	4620      	mov	r0, r4
   e61e8:	4629      	mov	r1, r5
   e61ea:	f002 fb81 	bl	e88f0 <__aeabi_dcmpgt>
   e61ee:	b108      	cbz	r0, e61f4 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   e61f0:	4944      	ldr	r1, [pc, #272]	; (e6304 <_ZN5Print10printFloatEdh+0x17c>)
   e61f2:	e7d9      	b.n	e61a8 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   e61f4:	4b44      	ldr	r3, [pc, #272]	; (e6308 <_ZN5Print10printFloatEdh+0x180>)
   e61f6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   e61fa:	4620      	mov	r0, r4
   e61fc:	4629      	mov	r1, r5
   e61fe:	f002 fb59 	bl	e88b4 <__aeabi_dcmplt>
   e6202:	2800      	cmp	r0, #0
   e6204:	d1f4      	bne.n	e61f0 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   e6206:	2200      	movs	r2, #0
   e6208:	2300      	movs	r3, #0
   e620a:	4620      	mov	r0, r4
   e620c:	4629      	mov	r1, r5
   e620e:	f002 fb51 	bl	e88b4 <__aeabi_dcmplt>
   e6212:	b1d0      	cbz	r0, e624a <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   e6214:	212d      	movs	r1, #45	; 0x2d
   e6216:	4630      	mov	r0, r6
   e6218:	f7ff ff7e 	bl	e6118 <_ZN5Print5printEc>
     number = -number;
   e621c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   e6220:	4682      	mov	sl, r0
     number = -number;
   e6222:	461d      	mov	r5, r3
  double rounding = 0.5;
   e6224:	4939      	ldr	r1, [pc, #228]	; (e630c <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   e6226:	f8df 90ec 	ldr.w	r9, [pc, #236]	; e6314 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   e622a:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   e622e:	2000      	movs	r0, #0
    rounding /= 10.0;
   e6230:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   e6234:	fa5f f38b 	uxtb.w	r3, fp
   e6238:	429f      	cmp	r7, r3
   e623a:	d908      	bls.n	e624e <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   e623c:	4642      	mov	r2, r8
   e623e:	464b      	mov	r3, r9
   e6240:	f002 f9f0 	bl	e8624 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   e6244:	f10b 0b01 	add.w	fp, fp, #1
   e6248:	e7f4      	b.n	e6234 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   e624a:	4682      	mov	sl, r0
   e624c:	e7ea      	b.n	e6224 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   e624e:	4622      	mov	r2, r4
   e6250:	462b      	mov	r3, r5
   e6252:	f001 ff07 	bl	e8064 <__adddf3>
   e6256:	460d      	mov	r5, r1
   e6258:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   e625a:	f002 fb91 	bl	e8980 <__aeabi_d2uiz>
   e625e:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   e6260:	f002 f83c 	bl	e82dc <__aeabi_ui2d>
   e6264:	4602      	mov	r2, r0
   e6266:	460b      	mov	r3, r1
   e6268:	4620      	mov	r0, r4
   e626a:	4629      	mov	r1, r5
   e626c:	f001 fef8 	bl	e8060 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   e6270:	220a      	movs	r2, #10
   e6272:	4604      	mov	r4, r0
   e6274:	460d      	mov	r5, r1
   e6276:	4630      	mov	r0, r6
   e6278:	4641      	mov	r1, r8
   e627a:	f7ff ff66 	bl	e614a <_ZN5Print11printNumberEmh>
  n += print(int_part);
   e627e:	4482      	add	sl, r0
  if (digits > 0) {
   e6280:	b127      	cbz	r7, e628c <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   e6282:	4923      	ldr	r1, [pc, #140]	; (e6310 <_ZN5Print10printFloatEdh+0x188>)
   e6284:	4630      	mov	r0, r6
   e6286:	f7ff ff35 	bl	e60f4 <_ZN5Print5writeEPKc>
    n += print(".");
   e628a:	4482      	add	sl, r0
    remainder *= 10.0;
   e628c:	f8df 9084 	ldr.w	r9, [pc, #132]	; e6314 <_ZN5Print10printFloatEdh+0x18c>
   e6290:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   e6294:	3f01      	subs	r7, #1
   e6296:	b2ff      	uxtb	r7, r7
   e6298:	2fff      	cmp	r7, #255	; 0xff
   e629a:	d089      	beq.n	e61b0 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   e629c:	4642      	mov	r2, r8
   e629e:	464b      	mov	r3, r9
   e62a0:	4620      	mov	r0, r4
   e62a2:	4629      	mov	r1, r5
   e62a4:	f002 f894 	bl	e83d0 <__aeabi_dmul>
   e62a8:	4604      	mov	r4, r0
   e62aa:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   e62ac:	f002 fb40 	bl	e8930 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   e62b0:	f1b0 0b00 	subs.w	fp, r0, #0
   e62b4:	da1a      	bge.n	e62ec <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   e62b6:	212d      	movs	r1, #45	; 0x2d
   e62b8:	4630      	mov	r0, r6
   e62ba:	f7ff ff2d 	bl	e6118 <_ZN5Print5printEc>
            val = -n;
   e62be:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   e62c2:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   e62c4:	220a      	movs	r2, #10
   e62c6:	4630      	mov	r0, r6
   e62c8:	9301      	str	r3, [sp, #4]
   e62ca:	f7ff ff3e 	bl	e614a <_ZN5Print11printNumberEmh>
   e62ce:	9b01      	ldr	r3, [sp, #4]
   e62d0:	4418      	add	r0, r3
    n += print(toPrint);
   e62d2:	4482      	add	sl, r0
    remainder -= toPrint;
   e62d4:	4658      	mov	r0, fp
   e62d6:	f002 f811 	bl	e82fc <__aeabi_i2d>
   e62da:	4602      	mov	r2, r0
   e62dc:	460b      	mov	r3, r1
   e62de:	4620      	mov	r0, r4
   e62e0:	4629      	mov	r1, r5
   e62e2:	f001 febd 	bl	e8060 <__aeabi_dsub>
   e62e6:	4604      	mov	r4, r0
   e62e8:	460d      	mov	r5, r1
  while (digits-- > 0)
   e62ea:	e7d3      	b.n	e6294 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   e62ec:	4659      	mov	r1, fp
        size_t t = 0;
   e62ee:	2300      	movs	r3, #0
   e62f0:	e7e8      	b.n	e62c4 <_ZN5Print10printFloatEdh+0x13c>
   e62f2:	bf00      	nop
   e62f4:	000ed924 	.word	0x000ed924
   e62f8:	7fefffff 	.word	0x7fefffff
   e62fc:	000ed928 	.word	0x000ed928
   e6300:	41efffff 	.word	0x41efffff
   e6304:	000ed92c 	.word	0x000ed92c
   e6308:	c1efffff 	.word	0xc1efffff
   e630c:	3fe00000 	.word	0x3fe00000
   e6310:	000ec1d3 	.word	0x000ec1d3
   e6314:	40240000 	.word	0x40240000

000e6318 <_ZN5Print7printlnEdi>:
{
   e6318:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   e631a:	b2c9      	uxtb	r1, r1
{
   e631c:	4605      	mov	r5, r0
  return printFloat(n, digits);
   e631e:	f7ff ff33 	bl	e6188 <_ZN5Print10printFloatEdh>
   e6322:	4604      	mov	r4, r0
  n += println();
   e6324:	4628      	mov	r0, r5
   e6326:	f7ff fefa 	bl	e611e <_ZN5Print7printlnEv>
}
   e632a:	4420      	add	r0, r4
   e632c:	bd38      	pop	{r3, r4, r5, pc}

000e632e <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   e632e:	b510      	push	{r4, lr}
   e6330:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   e6332:	f7ff f913 	bl	e555c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   e6336:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   e6338:	6823      	ldr	r3, [r4, #0]
   e633a:	4620      	mov	r0, r4
   e633c:	695b      	ldr	r3, [r3, #20]
   e633e:	4798      	blx	r3
    if (c >= 0) return c;
   e6340:	2800      	cmp	r0, #0
   e6342:	da08      	bge.n	e6356 <_ZN6Stream9timedReadEv+0x28>
   e6344:	f7ff f90a 	bl	e555c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   e6348:	68e3      	ldr	r3, [r4, #12]
   e634a:	1ac0      	subs	r0, r0, r3
   e634c:	68a3      	ldr	r3, [r4, #8]
   e634e:	4298      	cmp	r0, r3
   e6350:	d3f2      	bcc.n	e6338 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   e6352:	f04f 30ff 	mov.w	r0, #4294967295
}
   e6356:	bd10      	pop	{r4, pc}

000e6358 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   e6358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e635a:	4606      	mov	r6, r0
   e635c:	460d      	mov	r5, r1
   e635e:	4617      	mov	r7, r2
  size_t count = 0;
   e6360:	2400      	movs	r4, #0
  while (count < length) {
   e6362:	42bc      	cmp	r4, r7
   e6364:	d007      	beq.n	e6376 <_ZN6Stream9readBytesEPcj+0x1e>
    int c = timedRead();
   e6366:	4630      	mov	r0, r6
   e6368:	f7ff ffe1 	bl	e632e <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   e636c:	1e03      	subs	r3, r0, #0
   e636e:	db02      	blt.n	e6376 <_ZN6Stream9readBytesEPcj+0x1e>
    *buffer++ = (char)c;
   e6370:	552b      	strb	r3, [r5, r4]
    count++;
   e6372:	3401      	adds	r4, #1
  while (count < length) {
   e6374:	e7f5      	b.n	e6362 <_ZN6Stream9readBytesEPcj+0xa>
  }
  return count;
}
   e6376:	4620      	mov	r0, r4
   e6378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000e637c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   e637c:	4b01      	ldr	r3, [pc, #4]	; (e6384 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   e637e:	4a02      	ldr	r2, [pc, #8]	; (e6388 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   e6380:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   e6382:	4770      	bx	lr
   e6384:	2003e658 	.word	0x2003e658
   e6388:	000ed930 	.word	0x000ed930

000e638c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   e638c:	4b02      	ldr	r3, [pc, #8]	; (e6398 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   e638e:	681a      	ldr	r2, [r3, #0]
   e6390:	4b02      	ldr	r3, [pc, #8]	; (e639c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   e6392:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   e6394:	4770      	bx	lr
   e6396:	bf00      	nop
   e6398:	2003ac50 	.word	0x2003ac50
   e639c:	2003e65c 	.word	0x2003e65c

000e63a0 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   e63a0:	428a      	cmp	r2, r1
{
   e63a2:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   e63a4:	d007      	beq.n	e63b6 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   e63a6:	9c02      	ldr	r4, [sp, #8]
   e63a8:	1a40      	subs	r0, r0, r1
   e63aa:	1ae4      	subs	r4, r4, r3
   e63ac:	4360      	muls	r0, r4
   e63ae:	1a52      	subs	r2, r2, r1
   e63b0:	fb90 f0f2 	sdiv	r0, r0, r2
   e63b4:	4418      	add	r0, r3
}
   e63b6:	bd10      	pop	{r4, pc}

000e63b8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   e63b8:	2100      	movs	r1, #0
   e63ba:	f7ff ba5f 	b.w	e587c <system_delay_ms>

000e63be <_ZN9TCPServer5writeEhm>:
    }

    return _client;
}

size_t TCPServer::write(uint8_t b, system_tick_t timeout) {
   e63be:	b513      	push	{r0, r1, r4, lr}
   e63c0:	4613      	mov	r3, r2
    return write(&b, sizeof(b), timeout);
   e63c2:	6802      	ldr	r2, [r0, #0]
size_t TCPServer::write(uint8_t b, system_tick_t timeout) {
   e63c4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, sizeof(b), timeout);
   e63c8:	6994      	ldr	r4, [r2, #24]
   e63ca:	f10d 0107 	add.w	r1, sp, #7
   e63ce:	2201      	movs	r2, #1
   e63d0:	47a0      	blx	r4
}
   e63d2:	b002      	add	sp, #8
   e63d4:	bd10      	pop	{r4, pc}

000e63d6 <_ZN9TCPServer5writeEh>:
    size_t ret = _client.write(buf, size, timeout);
    setWriteError(_client.getWriteError());
    return ret;
}

size_t TCPServer::write(uint8_t b) {
   e63d6:	b507      	push	{r0, r1, r2, lr}
    return write(&b, 1);
   e63d8:	6803      	ldr	r3, [r0, #0]
size_t TCPServer::write(uint8_t b) {
   e63da:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1);
   e63de:	68db      	ldr	r3, [r3, #12]
   e63e0:	2201      	movs	r2, #1
   e63e2:	f10d 0107 	add.w	r1, sp, #7
   e63e6:	4798      	blx	r3
}
   e63e8:	b003      	add	sp, #12
   e63ea:	f85d fb04 	ldr.w	pc, [sp], #4

000e63ee <_ZN9TCPServer5writeEPKhj>:

size_t TCPServer::write(const uint8_t *buffer, size_t size) {
   e63ee:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   e63f0:	6803      	ldr	r3, [r0, #0]
   e63f2:	699c      	ldr	r4, [r3, #24]
   e63f4:	f04f 33ff 	mov.w	r3, #4294967295
   e63f8:	46a4      	mov	ip, r4
}
   e63fa:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   e63fe:	4760      	bx	ip

000e6400 <_ZN9TCPServer5writeEPKhjm>:
size_t TCPServer::write(const uint8_t *buf, size_t size, system_tick_t timeout) {
   e6400:	b510      	push	{r4, lr}
   e6402:	4604      	mov	r4, r0
    void setWriteError(int err = 1) { write_error = err; }
   e6404:	2000      	movs	r0, #0
   e6406:	61a0      	str	r0, [r4, #24]
    size_t ret = _client.write(buf, size, timeout);
   e6408:	f104 0014 	add.w	r0, r4, #20
   e640c:	f000 fc75 	bl	e6cfa <_ZN9TCPClient5writeEPKhjm>
   e6410:	69a3      	ldr	r3, [r4, #24]
   e6412:	6063      	str	r3, [r4, #4]
}
   e6414:	bd10      	pop	{r4, pc}

000e6416 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   e6416:	b510      	push	{r4, lr}
          _M_dispose();
   e6418:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   e641a:	4604      	mov	r4, r0
          _M_dispose();
   e641c:	689b      	ldr	r3, [r3, #8]
   e641e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   e6420:	68a3      	ldr	r3, [r4, #8]
   e6422:	3b01      	subs	r3, #1
   e6424:	60a3      	str	r3, [r4, #8]
   e6426:	b92b      	cbnz	r3, e6434 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   e6428:	6823      	ldr	r3, [r4, #0]
   e642a:	4620      	mov	r0, r4
   e642c:	68db      	ldr	r3, [r3, #12]
    }
   e642e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   e6432:	4718      	bx	r3
    }
   e6434:	bd10      	pop	{r4, pc}

000e6436 <_ZN15TCPServerClient8remoteIPEv>:
    virtual IPAddress remoteIP() override {
   e6436:	b570      	push	{r4, r5, r6, lr}
   e6438:	460c      	mov	r4, r1
   e643a:	b094      	sub	sp, #80	; 0x50
        struct sockaddr_storage saddr = {};
   e643c:	251c      	movs	r5, #28
    virtual IPAddress remoteIP() override {
   e643e:	4606      	mov	r6, r0
        IPAddress addr;
   e6440:	f000 fa74 	bl	e692c <_ZN9IPAddressC1Ev>
        struct sockaddr_storage saddr = {};
   e6444:	462a      	mov	r2, r5
   e6446:	2100      	movs	r1, #0
   e6448:	a80d      	add	r0, sp, #52	; 0x34
   e644a:	f002 fcf7 	bl	e8e3c <memset>
    friend class TCPServer;

    using Print::write;

protected:
    inline sock_handle_t sock_handle() { return d_->sock; }
   e644e:	6963      	ldr	r3, [r4, #20]
        socklen_t len = sizeof(saddr);
   e6450:	9501      	str	r5, [sp, #4]
        if (!sock_getpeername(sock_handle(), (struct sockaddr*)&saddr, &len)) {
   e6452:	a90d      	add	r1, sp, #52	; 0x34
   e6454:	6818      	ldr	r0, [r3, #0]
   e6456:	aa01      	add	r2, sp, #4
   e6458:	f7ff f948 	bl	e56ec <sock_getpeername>
   e645c:	4601      	mov	r1, r0
   e645e:	bb20      	cbnz	r0, e64aa <_ZN15TCPServerClient8remoteIPEv+0x74>
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   e6460:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
   e6464:	2b02      	cmp	r3, #2
   e6466:	d104      	bne.n	e6472 <_ZN15TCPServerClient8remoteIPEv+0x3c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   e6468:	a90e      	add	r1, sp, #56	; 0x38
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   e646a:	4630      	mov	r0, r6
   e646c:	f000 faa1 	bl	e69b2 <_ZN9IPAddressaSEPKh>
        return addr;
   e6470:	e01b      	b.n	e64aa <_ZN15TCPServerClient8remoteIPEv+0x74>
    else if (saddr->sa_family == AF_INET6) {
   e6472:	2b0a      	cmp	r3, #10
   e6474:	d119      	bne.n	e64aa <_ZN15TCPServerClient8remoteIPEv+0x74>
        HAL_IPAddress a = {};
   e6476:	ac02      	add	r4, sp, #8
   e6478:	2211      	movs	r2, #17
   e647a:	4620      	mov	r0, r4
   e647c:	f002 fcde 	bl	e8e3c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   e6480:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	; 0x3c
   e6484:	4313      	orrs	r3, r2
   e6486:	d013      	beq.n	e64b0 <_ZN15TCPServerClient8remoteIPEv+0x7a>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   e6488:	ab0f      	add	r3, sp, #60	; 0x3c
   e648a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   e648c:	ad08      	add	r5, sp, #32
   e648e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            a.v = 6;
   e6492:	2306      	movs	r3, #6
            addr = IPAddress(a);
   e6494:	4621      	mov	r1, r4
   e6496:	a807      	add	r0, sp, #28
            a.v = 6;
   e6498:	f88d 3018 	strb.w	r3, [sp, #24]
            addr = IPAddress(a);
   e649c:	f000 fa54 	bl	e6948 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   e64a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e64a2:	1d34      	adds	r4, r6, #4
   e64a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e64a6:	682b      	ldr	r3, [r5, #0]
   e64a8:	7023      	strb	r3, [r4, #0]
    }
   e64aa:	4630      	mov	r0, r6
   e64ac:	b014      	add	sp, #80	; 0x50
   e64ae:	bd70      	pop	{r4, r5, r6, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   e64b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   e64b4:	9d11      	ldr	r5, [sp, #68]	; 0x44
   e64b6:	f7ff f881 	bl	e55bc <inet_htonl>
   e64ba:	4285      	cmp	r5, r0
   e64bc:	d1e4      	bne.n	e6488 <_ZN15TCPServerClient8remoteIPEv+0x52>
            addr = (const uint8_t*)(&ptr[3]);
   e64be:	a912      	add	r1, sp, #72	; 0x48
   e64c0:	e7d3      	b.n	e646a <_ZN15TCPServerClient8remoteIPEv+0x34>
	...

000e64c4 <_ZN9TCPServerC1Etm>:
TCPServer::TCPServer(uint16_t port, network_interface_t nif)
   e64c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Print() : write_error(0) {}
   e64c6:	2500      	movs	r5, #0
          _client(-1) {
   e64c8:	4b11      	ldr	r3, [pc, #68]	; (e6510 <_ZN9TCPServerC1Etm+0x4c>)
   e64ca:	60c2      	str	r2, [r0, #12]
   e64cc:	f04f 37ff 	mov.w	r7, #4294967295
   e64d0:	6045      	str	r5, [r0, #4]
   e64d2:	6003      	str	r3, [r0, #0]
   e64d4:	8101      	strh	r1, [r0, #8]
   e64d6:	6107      	str	r7, [r0, #16]
   e64d8:	4639      	mov	r1, r7
TCPServer::TCPServer(uint16_t port, network_interface_t nif)
   e64da:	4604      	mov	r4, r0
          _client(-1) {
   e64dc:	3014      	adds	r0, #20
   e64de:	f000 fe33 	bl	e7148 <_ZN9TCPClientC1Ei>
        os_thread_scheduling(false, NULL);
   e64e2:	4629      	mov	r1, r5
   e64e4:	4628      	mov	r0, r5
        if (!s_invalid_client) {
   e64e6:	4d0b      	ldr	r5, [pc, #44]	; (e6514 <_ZN9TCPServerC1Etm+0x50>)
   e64e8:	f7ff f848 	bl	e557c <os_thread_scheduling>
   e64ec:	682a      	ldr	r2, [r5, #0]
   e64ee:	b942      	cbnz	r2, e6502 <_ZN9TCPServerC1Etm+0x3e>
            s_invalid_client = new TCPClient(-1);
   e64f0:	201c      	movs	r0, #28
   e64f2:	f7ed fdd0 	bl	d4096 <_Znwj>
   e64f6:	4606      	mov	r6, r0
   e64f8:	b110      	cbz	r0, e6500 <_ZN9TCPServerC1Etm+0x3c>
   e64fa:	4639      	mov	r1, r7
   e64fc:	f000 fe24 	bl	e7148 <_ZN9TCPClientC1Ei>
   e6500:	602e      	str	r6, [r5, #0]
        os_thread_scheduling(true, NULL);
   e6502:	2100      	movs	r1, #0
   e6504:	2001      	movs	r0, #1
   e6506:	f7ff f839 	bl	e557c <os_thread_scheduling>
}
   e650a:	4620      	mov	r0, r4
   e650c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e650e:	bf00      	nop
   e6510:	000ed9cc 	.word	0x000ed9cc
   e6514:	2003e660 	.word	0x2003e660

000e6518 <_ZN9TCPServer4stopEv>:
void TCPServer::stop() {
   e6518:	b510      	push	{r4, lr}
   e651a:	4604      	mov	r4, r0
    _client.stop();
   e651c:	3014      	adds	r0, #20
   e651e:	f000 fdf1 	bl	e7104 <_ZN9TCPClient4stopEv>
    sock_close(_sock);
   e6522:	6920      	ldr	r0, [r4, #16]
   e6524:	f7ff f8f2 	bl	e570c <sock_close>
    _sock = -1;
   e6528:	f04f 33ff 	mov.w	r3, #4294967295
   e652c:	6123      	str	r3, [r4, #16]
}
   e652e:	bd10      	pop	{r4, pc}

000e6530 <_ZN9TCPServer5beginEv>:
bool TCPServer::begin() {
   e6530:	b570      	push	{r4, r5, r6, lr}
   e6532:	4604      	mov	r4, r0
   e6534:	b08c      	sub	sp, #48	; 0x30
    stop();
   e6536:	f7ff ffef 	bl	e6518 <_ZN9TCPServer4stopEv>
    if (socket_handle_valid(_sock)) {
   e653a:	6923      	ldr	r3, [r4, #16]
   e653c:	2b00      	cmp	r3, #0
   e653e:	da5c      	bge.n	e65fa <_ZN9TCPServer5beginEv+0xca>
    struct sockaddr_in6 saddr = {};
   e6540:	221c      	movs	r2, #28
   e6542:	2100      	movs	r1, #0
   e6544:	a805      	add	r0, sp, #20
   e6546:	f002 fc79 	bl	e8e3c <memset>
    saddr.sin6_len = sizeof(saddr);
   e654a:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(_port);
   e654e:	8920      	ldrh	r0, [r4, #8]
    saddr.sin6_len = sizeof(saddr);
   e6550:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(_port);
   e6554:	f7ff f83a 	bl	e55cc <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_STREAM, IPPROTO_TCP);
   e6558:	2206      	movs	r2, #6
    saddr.sin6_port = htons(_port);
   e655a:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_STREAM, IPPROTO_TCP);
   e655e:	2101      	movs	r1, #1
   e6560:	200a      	movs	r0, #10
   e6562:	f7ff f8fb 	bl	e575c <sock_socket>
    CHECK_TRUE(_sock >= 0, false);
   e6566:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_STREAM, IPPROTO_TCP);
   e6568:	6120      	str	r0, [r4, #16]
    CHECK_TRUE(_sock >= 0, false);
   e656a:	da06      	bge.n	e657a <_ZN9TCPServer5beginEv+0x4a>
    NAMED_SCOPE_GUARD(done, {
   e656c:	4620      	mov	r0, r4
            return false;
   e656e:	2500      	movs	r5, #0
    NAMED_SCOPE_GUARD(done, {
   e6570:	f7ff ffd2 	bl	e6518 <_ZN9TCPServer4stopEv>
}
   e6574:	4628      	mov	r0, r5
   e6576:	b00c      	add	sp, #48	; 0x30
   e6578:	bd70      	pop	{r4, r5, r6, pc}
    const int one = 1;
   e657a:	2301      	movs	r3, #1
    CHECK_TRUE(sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one)) == 0, false);
   e657c:	2604      	movs	r6, #4
    const int one = 1;
   e657e:	9302      	str	r3, [sp, #8]
    CHECK_TRUE(sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one)) == 0, false);
   e6580:	9600      	str	r6, [sp, #0]
   e6582:	ab02      	add	r3, sp, #8
   e6584:	4632      	mov	r2, r6
   e6586:	f640 71ff 	movw	r1, #4095	; 0xfff
   e658a:	f7ff f8b7 	bl	e56fc <sock_setsockopt>
   e658e:	4605      	mov	r5, r0
   e6590:	2800      	cmp	r0, #0
   e6592:	d1eb      	bne.n	e656c <_ZN9TCPServer5beginEv+0x3c>
    int flags = sock_fcntl(_sock, F_GETFL, 0);
   e6594:	4602      	mov	r2, r0
   e6596:	2103      	movs	r1, #3
   e6598:	6920      	ldr	r0, [r4, #16]
   e659a:	f7ff f8e7 	bl	e576c <sock_fcntl>
    CHECK_TRUE(flags >= 0, false);
   e659e:	1e02      	subs	r2, r0, #0
   e65a0:	dbe4      	blt.n	e656c <_ZN9TCPServer5beginEv+0x3c>
    CHECK_TRUE(sock_fcntl(_sock, F_SETFL, flags) >= 0, false);
   e65a2:	6920      	ldr	r0, [r4, #16]
   e65a4:	f042 0201 	orr.w	r2, r2, #1
   e65a8:	4631      	mov	r1, r6
   e65aa:	f7ff f8df 	bl	e576c <sock_fcntl>
   e65ae:	2800      	cmp	r0, #0
   e65b0:	dbdc      	blt.n	e656c <_ZN9TCPServer5beginEv+0x3c>
    if (_nif != 0) {
   e65b2:	68e0      	ldr	r0, [r4, #12]
   e65b4:	b1a0      	cbz	r0, e65e0 <_ZN9TCPServer5beginEv+0xb0>
        if (if_index_to_name(_nif, ifr.ifr_name)) {
   e65b6:	a903      	add	r1, sp, #12
   e65b8:	b2c0      	uxtb	r0, r0
        struct ifreq ifr = {};
   e65ba:	9503      	str	r5, [sp, #12]
   e65bc:	f8ad 5010 	strh.w	r5, [sp, #16]
        if (if_index_to_name(_nif, ifr.ifr_name)) {
   e65c0:	f7fe ffb4 	bl	e552c <if_index_to_name>
   e65c4:	2800      	cmp	r0, #0
   e65c6:	d1d1      	bne.n	e656c <_ZN9TCPServer5beginEv+0x3c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   e65c8:	2306      	movs	r3, #6
   e65ca:	9300      	str	r3, [sp, #0]
   e65cc:	6920      	ldr	r0, [r4, #16]
   e65ce:	ab03      	add	r3, sp, #12
   e65d0:	f241 020b 	movw	r2, #4107	; 0x100b
   e65d4:	f640 71ff 	movw	r1, #4095	; 0xfff
   e65d8:	f7ff f890 	bl	e56fc <sock_setsockopt>
   e65dc:	2800      	cmp	r0, #0
   e65de:	d1c5      	bne.n	e656c <_ZN9TCPServer5beginEv+0x3c>
    int r = sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr));
   e65e0:	6920      	ldr	r0, [r4, #16]
   e65e2:	221c      	movs	r2, #28
   e65e4:	a905      	add	r1, sp, #20
   e65e6:	f7ff f879 	bl	e56dc <sock_bind>
    CHECK_TRUE(!r, false);
   e65ea:	2800      	cmp	r0, #0
   e65ec:	d1be      	bne.n	e656c <_ZN9TCPServer5beginEv+0x3c>
    r = sock_listen(_sock, 5);
   e65ee:	6920      	ldr	r0, [r4, #16]
   e65f0:	2105      	movs	r1, #5
   e65f2:	f7ff f89b 	bl	e572c <sock_listen>
    CHECK_TRUE(!r, false);
   e65f6:	2800      	cmp	r0, #0
   e65f8:	d1b8      	bne.n	e656c <_ZN9TCPServer5beginEv+0x3c>
        return true;
   e65fa:	2501      	movs	r5, #1
   e65fc:	e7ba      	b.n	e6574 <_ZN9TCPServer5beginEv+0x44>

000e65fe <_ZN9TCPClientaSERKS_>:
class TCPClient : public Client {
   e65fe:	b538      	push	{r3, r4, r5, lr}
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   e6600:	684b      	ldr	r3, [r1, #4]
class Print
   e6602:	6043      	str	r3, [r0, #4]
   e6604:	688b      	ldr	r3, [r1, #8]
   e6606:	6083      	str	r3, [r0, #8]
   e6608:	68cb      	ldr	r3, [r1, #12]
   e660a:	60c3      	str	r3, [r0, #12]
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   e660c:	690b      	ldr	r3, [r1, #16]
   e660e:	6103      	str	r3, [r0, #16]
    class __shared_ptr
   e6610:	694b      	ldr	r3, [r1, #20]
   e6612:	6143      	str	r3, [r0, #20]
   e6614:	698d      	ldr	r5, [r1, #24]
	if (__tmp != _M_pi)
   e6616:	6983      	ldr	r3, [r0, #24]
   e6618:	429d      	cmp	r5, r3
   e661a:	4604      	mov	r4, r0
   e661c:	d00c      	beq.n	e6638 <_ZN9TCPClientaSERKS_+0x3a>
	    if (__tmp != 0)
   e661e:	b115      	cbz	r5, e6626 <_ZN9TCPClientaSERKS_+0x28>
    { ++_M_use_count; }
   e6620:	686b      	ldr	r3, [r5, #4]
   e6622:	3301      	adds	r3, #1
   e6624:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   e6626:	69a0      	ldr	r0, [r4, #24]
   e6628:	b128      	cbz	r0, e6636 <_ZN9TCPClientaSERKS_+0x38>
      if (--_M_use_count == 0)
   e662a:	6843      	ldr	r3, [r0, #4]
   e662c:	3b01      	subs	r3, #1
   e662e:	6043      	str	r3, [r0, #4]
   e6630:	b90b      	cbnz	r3, e6636 <_ZN9TCPClientaSERKS_+0x38>
   e6632:	f7ff fef0 	bl	e6416 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   e6636:	61a5      	str	r5, [r4, #24]
   e6638:	4620      	mov	r0, r4
   e663a:	bd38      	pop	{r3, r4, r5, pc}

000e663c <_ZN9TCPClientC1ERKS_>:
   e663c:	684b      	ldr	r3, [r1, #4]
   e663e:	6043      	str	r3, [r0, #4]
   e6640:	4b09      	ldr	r3, [pc, #36]	; (e6668 <_ZN9TCPClientC1ERKS_+0x2c>)
   e6642:	6003      	str	r3, [r0, #0]
   e6644:	688b      	ldr	r3, [r1, #8]
   e6646:	6083      	str	r3, [r0, #8]
   e6648:	68cb      	ldr	r3, [r1, #12]
   e664a:	60c3      	str	r3, [r0, #12]
   e664c:	690b      	ldr	r3, [r1, #16]
   e664e:	6103      	str	r3, [r0, #16]
   e6650:	4b06      	ldr	r3, [pc, #24]	; (e666c <_ZN9TCPClientC1ERKS_+0x30>)
   e6652:	6003      	str	r3, [r0, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   e6654:	694b      	ldr	r3, [r1, #20]
   e6656:	6143      	str	r3, [r0, #20]
      : _M_pi(__r._M_pi)
   e6658:	698b      	ldr	r3, [r1, #24]
   e665a:	6183      	str	r3, [r0, #24]
	if (_M_pi != 0)
   e665c:	b113      	cbz	r3, e6664 <_ZN9TCPClientC1ERKS_+0x28>
    { ++_M_use_count; }
   e665e:	685a      	ldr	r2, [r3, #4]
   e6660:	3201      	adds	r2, #1
   e6662:	605a      	str	r2, [r3, #4]
   e6664:	4770      	bx	lr
   e6666:	bf00      	nop
   e6668:	000ed958 	.word	0x000ed958
   e666c:	000edab8 	.word	0x000edab8

000e6670 <_ZN15TCPServerClientD1Ev>:
class TCPServerClient : public TCPClient {
   e6670:	b510      	push	{r4, lr}
    virtual ~TCPClient() {};
   e6672:	4b04      	ldr	r3, [pc, #16]	; (e6684 <_ZN15TCPServerClientD1Ev+0x14>)
   e6674:	4604      	mov	r4, r0
   e6676:	f840 3b18 	str.w	r3, [r0], #24
      ~__shared_ptr() = default;
   e667a:	f7ee fabb 	bl	d4bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   e667e:	4620      	mov	r0, r4
   e6680:	bd10      	pop	{r4, pc}
   e6682:	bf00      	nop
   e6684:	000edab8 	.word	0x000edab8

000e6688 <_ZN15TCPServerClientD0Ev>:
   e6688:	b510      	push	{r4, lr}
   e668a:	4604      	mov	r4, r0
   e668c:	f7ff fff0 	bl	e6670 <_ZN15TCPServerClientD1Ev>
   e6690:	4620      	mov	r0, r4
   e6692:	211c      	movs	r1, #28
   e6694:	f001 f9f7 	bl	e7a86 <_ZdlPvj>
   e6698:	4620      	mov	r0, r4
   e669a:	bd10      	pop	{r4, pc}

000e669c <_ZN9TCPServer9availableEv>:
TCPClient TCPServer::available() {
   e669c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (_sock < 0) {
   e66a0:	690b      	ldr	r3, [r1, #16]
   e66a2:	2b00      	cmp	r3, #0
TCPClient TCPServer::available() {
   e66a4:	b096      	sub	sp, #88	; 0x58
   e66a6:	4606      	mov	r6, r0
   e66a8:	460c      	mov	r4, r1
    if (_sock < 0) {
   e66aa:	da03      	bge.n	e66b4 <_ZN9TCPServer9availableEv+0x18>
        begin();
   e66ac:	680b      	ldr	r3, [r1, #0]
   e66ae:	4608      	mov	r0, r1
   e66b0:	691b      	ldr	r3, [r3, #16]
   e66b2:	4798      	blx	r3
    if (_sock < 0) {
   e66b4:	6925      	ldr	r5, [r4, #16]
   e66b6:	2d00      	cmp	r5, #0
   e66b8:	f104 0714 	add.w	r7, r4, #20
   e66bc:	da0c      	bge.n	e66d8 <_ZN9TCPServer9availableEv+0x3c>
        _client = *s_invalid_client;
   e66be:	4b24      	ldr	r3, [pc, #144]	; (e6750 <_ZN9TCPServer9availableEv+0xb4>)
   e66c0:	4638      	mov	r0, r7
   e66c2:	6819      	ldr	r1, [r3, #0]
   e66c4:	f7ff ff9b 	bl	e65fe <_ZN9TCPClientaSERKS_>
    return _client;
   e66c8:	4639      	mov	r1, r7
   e66ca:	4630      	mov	r0, r6
   e66cc:	f7ff ffb6 	bl	e663c <_ZN9TCPClientC1ERKS_>
}
   e66d0:	4630      	mov	r0, r6
   e66d2:	b016      	add	sp, #88	; 0x58
   e66d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    struct sockaddr_storage saddr = {};
   e66d8:	f04f 081c 	mov.w	r8, #28
   e66dc:	4642      	mov	r2, r8
   e66de:	2100      	movs	r1, #0
   e66e0:	a808      	add	r0, sp, #32
   e66e2:	f002 fbab 	bl	e8e3c <memset>
    int s = sock_accept(_sock, (struct sockaddr*)&saddr, &slen);
   e66e6:	a908      	add	r1, sp, #32
   e66e8:	aa01      	add	r2, sp, #4
   e66ea:	4628      	mov	r0, r5
    socklen_t slen = sizeof(saddr);
   e66ec:	f8cd 8004 	str.w	r8, [sp, #4]
    int s = sock_accept(_sock, (struct sockaddr*)&saddr, &slen);
   e66f0:	f7fe ffec 	bl	e56cc <sock_accept>
    if (s < 0) {
   e66f4:	1e01      	subs	r1, r0, #0
   e66f6:	da12      	bge.n	e671e <_ZN9TCPServer9availableEv+0x82>
        _client = *s_invalid_client;
   e66f8:	4b15      	ldr	r3, [pc, #84]	; (e6750 <_ZN9TCPServer9availableEv+0xb4>)
   e66fa:	4638      	mov	r0, r7
   e66fc:	6819      	ldr	r1, [r3, #0]
   e66fe:	f7ff ff7e 	bl	e65fe <_ZN9TCPClientaSERKS_>
        if (errno != EAGAIN && errno != EWOULDBLOCK) {
   e6702:	f7ff f981 	bl	e5a08 <__errno>
   e6706:	6803      	ldr	r3, [r0, #0]
   e6708:	2b0b      	cmp	r3, #11
   e670a:	d0dd      	beq.n	e66c8 <_ZN9TCPServer9availableEv+0x2c>
   e670c:	f7ff f97c 	bl	e5a08 <__errno>
   e6710:	6803      	ldr	r3, [r0, #0]
   e6712:	2b0b      	cmp	r3, #11
   e6714:	d0d8      	beq.n	e66c8 <_ZN9TCPServer9availableEv+0x2c>
            stop();
   e6716:	4620      	mov	r0, r4
   e6718:	f7ff fefe 	bl	e6518 <_ZN9TCPServer4stopEv>
   e671c:	e7d4      	b.n	e66c8 <_ZN9TCPServer9availableEv+0x2c>
    TCPServerClient(sock_handle_t sock) : TCPClient(sock) {
   e671e:	a80f      	add	r0, sp, #60	; 0x3c
   e6720:	f000 fd12 	bl	e7148 <_ZN9TCPClientC1Ei>
   e6724:	ad03      	add	r5, sp, #12
   e6726:	4b0b      	ldr	r3, [pc, #44]	; (e6754 <_ZN9TCPServer9availableEv+0xb8>)
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   e6728:	9c14      	ldr	r4, [sp, #80]	; 0x50
   e672a:	930f      	str	r3, [sp, #60]	; 0x3c
        client.d_->remoteIP = client.remoteIP(); // fetch the peer IP ready for the copy operator
   e672c:	a90f      	add	r1, sp, #60	; 0x3c
   e672e:	a802      	add	r0, sp, #8
   e6730:	f7ff fe81 	bl	e6436 <_ZN15TCPServerClient8remoteIPEv>
   e6734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e6736:	348c      	adds	r4, #140	; 0x8c
   e6738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e673a:	682b      	ldr	r3, [r5, #0]
   e673c:	7023      	strb	r3, [r4, #0]
        _client = client;
   e673e:	a90f      	add	r1, sp, #60	; 0x3c
   e6740:	4638      	mov	r0, r7
   e6742:	f7ff ff5c 	bl	e65fe <_ZN9TCPClientaSERKS_>
        TCPServerClient client = TCPServerClient(s);
   e6746:	a80f      	add	r0, sp, #60	; 0x3c
   e6748:	f7ff ff92 	bl	e6670 <_ZN15TCPServerClientD1Ev>
   e674c:	e7bc      	b.n	e66c8 <_ZN9TCPServer9availableEv+0x2c>
   e674e:	bf00      	nop
   e6750:	2003e660 	.word	0x2003e660
   e6754:	000ed980 	.word	0x000ed980

000e6758 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   e6758:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   e675a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   e675c:	4604      	mov	r4, r0
      if (_M_manager)
   e675e:	b113      	cbz	r3, e6766 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   e6760:	2203      	movs	r2, #3
   e6762:	4601      	mov	r1, r0
   e6764:	4798      	blx	r3
    }
   e6766:	4620      	mov	r0, r4
   e6768:	bd10      	pop	{r4, pc}

000e676a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   e676a:	b510      	push	{r4, lr}
   e676c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   e676e:	f7ff fff3 	bl	e6758 <_ZNSt14_Function_baseD1Ev>
   e6772:	4620      	mov	r0, r4
   e6774:	bd10      	pop	{r4, pc}
	...

000e6778 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   e6778:	4803      	ldr	r0, [pc, #12]	; (e6788 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   e677a:	4a04      	ldr	r2, [pc, #16]	; (e678c <_GLOBAL__sub_I_RGB+0x14>)
   e677c:	4904      	ldr	r1, [pc, #16]	; (e6790 <_GLOBAL__sub_I_RGB+0x18>)
   e677e:	2300      	movs	r3, #0
   e6780:	6083      	str	r3, [r0, #8]
   e6782:	f001 b97b 	b.w	e7a7c <__aeabi_atexit>
   e6786:	bf00      	nop
   e6788:	2003e664 	.word	0x2003e664
   e678c:	2003ae28 	.word	0x2003ae28
   e6790:	000e676b 	.word	0x000e676b

000e6794 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   e6794:	4b01      	ldr	r3, [pc, #4]	; (e679c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   e6796:	6018      	str	r0, [r3, #0]
    }, nullptr);
   e6798:	4770      	bx	lr
   e679a:	bf00      	nop
   e679c:	2003ac54 	.word	0x2003ac54

000e67a0 <serialEventRun>:
{
   e67a0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   e67a2:	4b0b      	ldr	r3, [pc, #44]	; (e67d0 <serialEventRun+0x30>)
   e67a4:	b143      	cbz	r3, e67b8 <serialEventRun+0x18>
   e67a6:	f000 f967 	bl	e6a78 <_Z16_fetch_usbserialv>
   e67aa:	6803      	ldr	r3, [r0, #0]
   e67ac:	691b      	ldr	r3, [r3, #16]
   e67ae:	4798      	blx	r3
   e67b0:	2800      	cmp	r0, #0
   e67b2:	dd01      	ble.n	e67b8 <serialEventRun+0x18>
        serialEvent();
   e67b4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   e67b8:	4b06      	ldr	r3, [pc, #24]	; (e67d4 <serialEventRun+0x34>)
   e67ba:	b143      	cbz	r3, e67ce <serialEventRun+0x2e>
   e67bc:	f000 f9da 	bl	e6b74 <_Z22__fetch_global_Serial1v>
   e67c0:	6803      	ldr	r3, [r0, #0]
   e67c2:	691b      	ldr	r3, [r3, #16]
   e67c4:	4798      	blx	r3
   e67c6:	2800      	cmp	r0, #0
   e67c8:	dd01      	ble.n	e67ce <serialEventRun+0x2e>
        serialEvent1();
   e67ca:	f3af 8000 	nop.w
}
   e67ce:	bd08      	pop	{r3, pc}
	...

000e67d8 <_post_loop>:
{
   e67d8:	b508      	push	{r3, lr}
	serialEventRun();
   e67da:	f7ff ffe1 	bl	e67a0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   e67de:	f7fe febd 	bl	e555c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   e67e2:	4b01      	ldr	r3, [pc, #4]	; (e67e8 <_post_loop+0x10>)
   e67e4:	6018      	str	r0, [r3, #0]
}
   e67e6:	bd08      	pop	{r3, pc}
   e67e8:	2003e7d0 	.word	0x2003e7d0

000e67ec <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   e67ec:	4802      	ldr	r0, [pc, #8]	; (e67f8 <_Z33system_initialize_user_backup_ramv+0xc>)
   e67ee:	4a03      	ldr	r2, [pc, #12]	; (e67fc <_Z33system_initialize_user_backup_ramv+0x10>)
   e67f0:	4903      	ldr	r1, [pc, #12]	; (e6800 <_Z33system_initialize_user_backup_ramv+0x14>)
   e67f2:	1a12      	subs	r2, r2, r0
   e67f4:	f002 bafa 	b.w	e8dec <memcpy>
   e67f8:	2003f400 	.word	0x2003f400
   e67fc:	2003f404 	.word	0x2003f404
   e6800:	000ee068 	.word	0x000ee068

000e6804 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   e6804:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   e6806:	2300      	movs	r3, #0
   e6808:	9300      	str	r3, [sp, #0]
   e680a:	461a      	mov	r2, r3
   e680c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   e6810:	f7ff f846 	bl	e58a0 <system_ctrl_set_result>
}
   e6814:	b003      	add	sp, #12
   e6816:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000e681c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   e681c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   e681e:	8843      	ldrh	r3, [r0, #2]
   e6820:	2b0a      	cmp	r3, #10
   e6822:	d008      	beq.n	e6836 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   e6824:	2b50      	cmp	r3, #80	; 0x50
   e6826:	d10b      	bne.n	e6840 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   e6828:	4b09      	ldr	r3, [pc, #36]	; (e6850 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   e682a:	681b      	ldr	r3, [r3, #0]
   e682c:	b14b      	cbz	r3, e6842 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   e682e:	b003      	add	sp, #12
   e6830:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   e6834:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   e6836:	f7ff ffe5 	bl	e6804 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   e683a:	b003      	add	sp, #12
   e683c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   e6840:	2300      	movs	r3, #0
   e6842:	9300      	str	r3, [sp, #0]
   e6844:	461a      	mov	r2, r3
   e6846:	f06f 0177 	mvn.w	r1, #119	; 0x77
   e684a:	f7ff f829 	bl	e58a0 <system_ctrl_set_result>
}
   e684e:	e7f4      	b.n	e683a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   e6850:	2003e678 	.word	0x2003e678

000e6854 <module_user_init_hook>:
{
   e6854:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   e6856:	4c12      	ldr	r4, [pc, #72]	; (e68a0 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   e6858:	4812      	ldr	r0, [pc, #72]	; (e68a4 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   e685a:	4d13      	ldr	r5, [pc, #76]	; (e68a8 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   e685c:	2100      	movs	r1, #0
   e685e:	f7ff f8db 	bl	e5a18 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   e6862:	6823      	ldr	r3, [r4, #0]
   e6864:	42ab      	cmp	r3, r5
   e6866:	4b11      	ldr	r3, [pc, #68]	; (e68ac <module_user_init_hook+0x58>)
   e6868:	bf0c      	ite	eq
   e686a:	2201      	moveq	r2, #1
   e686c:	2200      	movne	r2, #0
   e686e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   e6870:	d002      	beq.n	e6878 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   e6872:	f7ff ffbb 	bl	e67ec <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   e6876:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   e6878:	f7fe fe60 	bl	e553c <HAL_RNG_GetRandomNumber>
   e687c:	4604      	mov	r4, r0
    srand(seed);
   e687e:	f002 faf5 	bl	e8e6c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   e6882:	4b0b      	ldr	r3, [pc, #44]	; (e68b0 <module_user_init_hook+0x5c>)
   e6884:	b113      	cbz	r3, e688c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   e6886:	4620      	mov	r0, r4
   e6888:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   e688c:	2100      	movs	r1, #0
   e688e:	4808      	ldr	r0, [pc, #32]	; (e68b0 <module_user_init_hook+0x5c>)
   e6890:	f7ff f87a 	bl	e5988 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   e6894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   e6898:	4806      	ldr	r0, [pc, #24]	; (e68b4 <module_user_init_hook+0x60>)
   e689a:	2100      	movs	r1, #0
   e689c:	f7fe bff6 	b.w	e588c <system_ctrl_set_app_request_handler>
   e68a0:	2003f400 	.word	0x2003f400
   e68a4:	000e6795 	.word	0x000e6795
   e68a8:	9a271c1e 	.word	0x9a271c1e
   e68ac:	2003e674 	.word	0x2003e674
   e68b0:	00000000 	.word	0x00000000
   e68b4:	000e681d 	.word	0x000e681d

000e68b8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   e68b8:	4770      	bx	lr

000e68ba <_ZN9IPAddressD0Ev>:
   e68ba:	b510      	push	{r4, lr}
   e68bc:	2118      	movs	r1, #24
   e68be:	4604      	mov	r4, r0
   e68c0:	f001 f8e1 	bl	e7a86 <_ZdlPvj>
   e68c4:	4620      	mov	r0, r4
   e68c6:	bd10      	pop	{r4, pc}

000e68c8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   e68c8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   e68ca:	7d03      	ldrb	r3, [r0, #20]
   e68cc:	2b06      	cmp	r3, #6
{
   e68ce:	b08d      	sub	sp, #52	; 0x34
   e68d0:	460e      	mov	r6, r1
   e68d2:	f100 0704 	add.w	r7, r0, #4
   e68d6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   e68da:	d012      	beq.n	e6902 <_ZNK9IPAddress7printToER5Print+0x3a>
   e68dc:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   e68e0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   e68e4:	220a      	movs	r2, #10
   e68e6:	4630      	mov	r0, r6
   e68e8:	f7ff fc2f 	bl	e614a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   e68ec:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   e68ee:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   e68f0:	d019      	beq.n	e6926 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   e68f2:	2c00      	cmp	r4, #0
   e68f4:	d0f4      	beq.n	e68e0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   e68f6:	212e      	movs	r1, #46	; 0x2e
   e68f8:	4630      	mov	r0, r6
   e68fa:	f7ff fc0d 	bl	e6118 <_ZN5Print5printEc>
   e68fe:	4404      	add	r4, r0
   e6900:	e7ee      	b.n	e68e0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   e6902:	232f      	movs	r3, #47	; 0x2f
   e6904:	466a      	mov	r2, sp
   e6906:	4639      	mov	r1, r7
   e6908:	200a      	movs	r0, #10
		buf[0] = 0;
   e690a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   e690e:	f7fe fe4d 	bl	e55ac <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   e6912:	4668      	mov	r0, sp
   e6914:	f002 fae0 	bl	e8ed8 <strlen>
   e6918:	6833      	ldr	r3, [r6, #0]
   e691a:	4602      	mov	r2, r0
   e691c:	68db      	ldr	r3, [r3, #12]
   e691e:	4669      	mov	r1, sp
   e6920:	4630      	mov	r0, r6
   e6922:	4798      	blx	r3
   e6924:	4604      	mov	r4, r0
    }
    return n;
}
   e6926:	4620      	mov	r0, r4
   e6928:	b00d      	add	sp, #52	; 0x34
   e692a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e692c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   e692c:	b510      	push	{r4, lr}
   e692e:	4b05      	ldr	r3, [pc, #20]	; (e6944 <_ZN9IPAddressC1Ev+0x18>)
   e6930:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   e6932:	2211      	movs	r2, #17
   e6934:	f840 3b04 	str.w	r3, [r0], #4
   e6938:	2100      	movs	r1, #0
   e693a:	f002 fa7f 	bl	e8e3c <memset>
}
   e693e:	4620      	mov	r0, r4
   e6940:	bd10      	pop	{r4, pc}
   e6942:	bf00      	nop
   e6944:	000ed9f0 	.word	0x000ed9f0

000e6948 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   e6948:	4603      	mov	r3, r0
   e694a:	4a07      	ldr	r2, [pc, #28]	; (e6968 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   e694c:	b510      	push	{r4, lr}
   e694e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   e6952:	f101 0210 	add.w	r2, r1, #16
   e6956:	f851 4b04 	ldr.w	r4, [r1], #4
   e695a:	f843 4b04 	str.w	r4, [r3], #4
   e695e:	4291      	cmp	r1, r2
   e6960:	d1f9      	bne.n	e6956 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   e6962:	780a      	ldrb	r2, [r1, #0]
   e6964:	701a      	strb	r2, [r3, #0]
}
   e6966:	bd10      	pop	{r4, pc}
   e6968:	000ed9f0 	.word	0x000ed9f0

000e696c <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   e696c:	7d03      	ldrb	r3, [r0, #20]
   e696e:	2b04      	cmp	r3, #4
   e6970:	d104      	bne.n	e697c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   e6972:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   e6974:	3800      	subs	r0, #0
   e6976:	bf18      	it	ne
   e6978:	2001      	movne	r0, #1
   e697a:	4770      	bx	lr
    } else if (version() == 6) {
   e697c:	2b06      	cmp	r3, #6
   e697e:	d107      	bne.n	e6990 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   e6980:	6843      	ldr	r3, [r0, #4]
   e6982:	b93b      	cbnz	r3, e6994 <_ZNK9IPAddresscvbEv+0x28>
   e6984:	6883      	ldr	r3, [r0, #8]
   e6986:	b92b      	cbnz	r3, e6994 <_ZNK9IPAddresscvbEv+0x28>
   e6988:	68c3      	ldr	r3, [r0, #12]
   e698a:	b91b      	cbnz	r3, e6994 <_ZNK9IPAddresscvbEv+0x28>
   e698c:	6900      	ldr	r0, [r0, #16]
   e698e:	e7f1      	b.n	e6974 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   e6990:	2000      	movs	r0, #0
   e6992:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   e6994:	2001      	movs	r0, #1
}
   e6996:	4770      	bx	lr

000e6998 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   e6998:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   e699a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   e699e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   e69a2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   e69a6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   e69aa:	2304      	movs	r3, #4
   e69ac:	6041      	str	r1, [r0, #4]
   e69ae:	7503      	strb	r3, [r0, #20]
}
   e69b0:	bd10      	pop	{r4, pc}

000e69b2 <_ZN9IPAddressaSEPKh>:
{
   e69b2:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   e69b4:	78cb      	ldrb	r3, [r1, #3]
   e69b6:	9300      	str	r3, [sp, #0]
   e69b8:	788b      	ldrb	r3, [r1, #2]
   e69ba:	784a      	ldrb	r2, [r1, #1]
   e69bc:	7809      	ldrb	r1, [r1, #0]
   e69be:	f7ff ffeb 	bl	e6998 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   e69c2:	b002      	add	sp, #8
   e69c4:	bd10      	pop	{r4, pc}

000e69c6 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   e69c6:	7441      	strb	r1, [r0, #17]
}
   e69c8:	4770      	bx	lr

000e69ca <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   e69ca:	4770      	bx	lr

000e69cc <_ZN9USBSerial4readEv>:
{
   e69cc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   e69ce:	2100      	movs	r1, #0
   e69d0:	7c00      	ldrb	r0, [r0, #16]
   e69d2:	f7fe ff13 	bl	e57fc <HAL_USB_USART_Receive_Data>
}
   e69d6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   e69da:	bd08      	pop	{r3, pc}

000e69dc <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   e69dc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   e69de:	2101      	movs	r1, #1
   e69e0:	7c00      	ldrb	r0, [r0, #16]
   e69e2:	f7fe ff0b 	bl	e57fc <HAL_USB_USART_Receive_Data>
}
   e69e6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   e69ea:	bd08      	pop	{r3, pc}

000e69ec <_ZN9USBSerial17availableForWriteEv>:
{
   e69ec:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   e69ee:	7c00      	ldrb	r0, [r0, #16]
   e69f0:	f7fe fefc 	bl	e57ec <HAL_USB_USART_Available_Data_For_Write>
}
   e69f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e69f8:	bd08      	pop	{r3, pc}

000e69fa <_ZN9USBSerial9availableEv>:
{
   e69fa:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   e69fc:	7c00      	ldrb	r0, [r0, #16]
   e69fe:	f7fe feed 	bl	e57dc <HAL_USB_USART_Available_Data>
}
   e6a02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e6a06:	bd08      	pop	{r3, pc}

000e6a08 <_ZN9USBSerial5writeEh>:
{
   e6a08:	b513      	push	{r0, r1, r4, lr}
   e6a0a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   e6a0c:	7c00      	ldrb	r0, [r0, #16]
{
   e6a0e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   e6a10:	f7fe feec 	bl	e57ec <HAL_USB_USART_Available_Data_For_Write>
   e6a14:	2800      	cmp	r0, #0
   e6a16:	9901      	ldr	r1, [sp, #4]
   e6a18:	dc01      	bgt.n	e6a1e <_ZN9USBSerial5writeEh+0x16>
   e6a1a:	7c60      	ldrb	r0, [r4, #17]
   e6a1c:	b120      	cbz	r0, e6a28 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   e6a1e:	7c20      	ldrb	r0, [r4, #16]
   e6a20:	f7fe fef4 	bl	e580c <HAL_USB_USART_Send_Data>
   e6a24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   e6a28:	b002      	add	sp, #8
   e6a2a:	bd10      	pop	{r4, pc}

000e6a2c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   e6a2c:	7c00      	ldrb	r0, [r0, #16]
   e6a2e:	f7fe bef5 	b.w	e581c <HAL_USB_USART_Flush_Data>

000e6a32 <_ZN9USBSerialD0Ev>:
   e6a32:	b510      	push	{r4, lr}
   e6a34:	2114      	movs	r1, #20
   e6a36:	4604      	mov	r4, r0
   e6a38:	f001 f825 	bl	e7a86 <_ZdlPvj>
   e6a3c:	4620      	mov	r0, r4
   e6a3e:	bd10      	pop	{r4, pc}

000e6a40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   e6a40:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   e6a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   e6a46:	4604      	mov	r4, r0
   e6a48:	4608      	mov	r0, r1
   e6a4a:	2100      	movs	r1, #0
   e6a4c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   e6a50:	4b04      	ldr	r3, [pc, #16]	; (e6a64 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   e6a52:	6023      	str	r3, [r4, #0]
  _blocking = true;
   e6a54:	2301      	movs	r3, #1
  _serial = serial;
   e6a56:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   e6a58:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   e6a5a:	4611      	mov	r1, r2
   e6a5c:	f7fe feb6 	bl	e57cc <HAL_USB_USART_Init>
}
   e6a60:	4620      	mov	r0, r4
   e6a62:	bd10      	pop	{r4, pc}
   e6a64:	000eda04 	.word	0x000eda04

000e6a68 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   e6a68:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   e6a6a:	2214      	movs	r2, #20
{
   e6a6c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   e6a6e:	2100      	movs	r1, #0
   e6a70:	f002 f9e4 	bl	e8e3c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   e6a74:	4620      	mov	r0, r4
   e6a76:	bd10      	pop	{r4, pc}

000e6a78 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   e6a78:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   e6a7a:	4c10      	ldr	r4, [pc, #64]	; (e6abc <_Z16_fetch_usbserialv+0x44>)
{
   e6a7c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   e6a7e:	a803      	add	r0, sp, #12
   e6a80:	f7ff fff2 	bl	e6a68 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   e6a84:	7821      	ldrb	r1, [r4, #0]
   e6a86:	f3bf 8f5b 	dmb	ish
   e6a8a:	f011 0101 	ands.w	r1, r1, #1
   e6a8e:	d111      	bne.n	e6ab4 <_Z16_fetch_usbserialv+0x3c>
   e6a90:	4620      	mov	r0, r4
   e6a92:	9101      	str	r1, [sp, #4]
   e6a94:	f7ed fb12 	bl	d40bc <__cxa_guard_acquire>
   e6a98:	9901      	ldr	r1, [sp, #4]
   e6a9a:	b158      	cbz	r0, e6ab4 <_Z16_fetch_usbserialv+0x3c>
   e6a9c:	aa03      	add	r2, sp, #12
   e6a9e:	4808      	ldr	r0, [pc, #32]	; (e6ac0 <_Z16_fetch_usbserialv+0x48>)
   e6aa0:	f7ff ffce 	bl	e6a40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   e6aa4:	4620      	mov	r0, r4
   e6aa6:	f7ed fb0e 	bl	d40c6 <__cxa_guard_release>
   e6aaa:	4a06      	ldr	r2, [pc, #24]	; (e6ac4 <_Z16_fetch_usbserialv+0x4c>)
   e6aac:	4906      	ldr	r1, [pc, #24]	; (e6ac8 <_Z16_fetch_usbserialv+0x50>)
   e6aae:	4804      	ldr	r0, [pc, #16]	; (e6ac0 <_Z16_fetch_usbserialv+0x48>)
   e6ab0:	f000 ffe4 	bl	e7a7c <__aeabi_atexit>
	return _usbserial;
}
   e6ab4:	4802      	ldr	r0, [pc, #8]	; (e6ac0 <_Z16_fetch_usbserialv+0x48>)
   e6ab6:	b008      	add	sp, #32
   e6ab8:	bd10      	pop	{r4, pc}
   e6aba:	bf00      	nop
   e6abc:	2003e67c 	.word	0x2003e67c
   e6ac0:	2003e680 	.word	0x2003e680
   e6ac4:	2003ae28 	.word	0x2003ae28
   e6ac8:	000e69cb 	.word	0x000e69cb

000e6acc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   e6acc:	4770      	bx	lr

000e6ace <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   e6ace:	7441      	strb	r1, [r0, #17]
}
   e6ad0:	4770      	bx	lr

000e6ad2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   e6ad2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   e6ad4:	7c00      	ldrb	r0, [r0, #16]
   e6ad6:	f7fe fdb9 	bl	e564c <hal_usart_available_data_for_write>
}
   e6ada:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e6ade:	bd08      	pop	{r3, pc}

000e6ae0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   e6ae0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   e6ae2:	7c00      	ldrb	r0, [r0, #16]
   e6ae4:	f7fe fd8a 	bl	e55fc <hal_usart_available>
}
   e6ae8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e6aec:	bd08      	pop	{r3, pc}

000e6aee <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   e6aee:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   e6af0:	7c00      	ldrb	r0, [r0, #16]
   e6af2:	f7fe fd93 	bl	e561c <hal_usart_peek>
}
   e6af6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   e6afa:	bd08      	pop	{r3, pc}

000e6afc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   e6afc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   e6afe:	7c00      	ldrb	r0, [r0, #16]
   e6b00:	f7fe fd84 	bl	e560c <hal_usart_read>
}
   e6b04:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   e6b08:	bd08      	pop	{r3, pc}

000e6b0a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   e6b0a:	7c00      	ldrb	r0, [r0, #16]
   e6b0c:	f7fe bd8e 	b.w	e562c <hal_usart_flush>

000e6b10 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   e6b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   e6b12:	7c45      	ldrb	r5, [r0, #17]
{
   e6b14:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   e6b16:	b12d      	cbz	r5, e6b24 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   e6b18:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   e6b1a:	b003      	add	sp, #12
   e6b1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   e6b20:	f7fe bd64 	b.w	e55ec <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   e6b24:	7c00      	ldrb	r0, [r0, #16]
   e6b26:	9101      	str	r1, [sp, #4]
   e6b28:	f7fe fd90 	bl	e564c <hal_usart_available_data_for_write>
   e6b2c:	2800      	cmp	r0, #0
   e6b2e:	9901      	ldr	r1, [sp, #4]
   e6b30:	dcf2      	bgt.n	e6b18 <_ZN11USARTSerial5writeEh+0x8>
}
   e6b32:	4628      	mov	r0, r5
   e6b34:	b003      	add	sp, #12
   e6b36:	bd30      	pop	{r4, r5, pc}

000e6b38 <_ZN11USARTSerialD0Ev>:
   e6b38:	b510      	push	{r4, lr}
   e6b3a:	2114      	movs	r1, #20
   e6b3c:	4604      	mov	r4, r0
   e6b3e:	f000 ffa2 	bl	e7a86 <_ZdlPvj>
   e6b42:	4620      	mov	r0, r4
   e6b44:	bd10      	pop	{r4, pc}
	...

000e6b48 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   e6b48:	b510      	push	{r4, lr}
   e6b4a:	f04f 0c00 	mov.w	ip, #0
   e6b4e:	4604      	mov	r4, r0
   e6b50:	4608      	mov	r0, r1
   e6b52:	4611      	mov	r1, r2
   e6b54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   e6b58:	e9c4 c201 	strd	ip, r2, [r4, #4]
   e6b5c:	4a04      	ldr	r2, [pc, #16]	; (e6b70 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   e6b5e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   e6b60:	2201      	movs	r2, #1
  _serial = serial;
   e6b62:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   e6b64:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   e6b66:	461a      	mov	r2, r3
   e6b68:	f7fe fd38 	bl	e55dc <hal_usart_init>
}
   e6b6c:	4620      	mov	r0, r4
   e6b6e:	bd10      	pop	{r4, pc}
   e6b70:	000eda34 	.word	0x000eda34

000e6b74 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   e6b74:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   e6b76:	4c0e      	ldr	r4, [pc, #56]	; (e6bb0 <_Z22__fetch_global_Serial1v+0x3c>)
   e6b78:	7821      	ldrb	r1, [r4, #0]
   e6b7a:	f3bf 8f5b 	dmb	ish
   e6b7e:	f011 0101 	ands.w	r1, r1, #1
   e6b82:	d112      	bne.n	e6baa <_Z22__fetch_global_Serial1v+0x36>
   e6b84:	4620      	mov	r0, r4
   e6b86:	9101      	str	r1, [sp, #4]
   e6b88:	f7ed fa98 	bl	d40bc <__cxa_guard_acquire>
   e6b8c:	9901      	ldr	r1, [sp, #4]
   e6b8e:	b160      	cbz	r0, e6baa <_Z22__fetch_global_Serial1v+0x36>
   e6b90:	4a08      	ldr	r2, [pc, #32]	; (e6bb4 <_Z22__fetch_global_Serial1v+0x40>)
   e6b92:	4b09      	ldr	r3, [pc, #36]	; (e6bb8 <_Z22__fetch_global_Serial1v+0x44>)
   e6b94:	4809      	ldr	r0, [pc, #36]	; (e6bbc <_Z22__fetch_global_Serial1v+0x48>)
   e6b96:	f7ff ffd7 	bl	e6b48 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   e6b9a:	4620      	mov	r0, r4
   e6b9c:	f7ed fa93 	bl	d40c6 <__cxa_guard_release>
   e6ba0:	4a07      	ldr	r2, [pc, #28]	; (e6bc0 <_Z22__fetch_global_Serial1v+0x4c>)
   e6ba2:	4908      	ldr	r1, [pc, #32]	; (e6bc4 <_Z22__fetch_global_Serial1v+0x50>)
   e6ba4:	4805      	ldr	r0, [pc, #20]	; (e6bbc <_Z22__fetch_global_Serial1v+0x48>)
   e6ba6:	f000 ff69 	bl	e7a7c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   e6baa:	4804      	ldr	r0, [pc, #16]	; (e6bbc <_Z22__fetch_global_Serial1v+0x48>)
   e6bac:	b002      	add	sp, #8
   e6bae:	bd10      	pop	{r4, pc}
   e6bb0:	2003e694 	.word	0x2003e694
   e6bb4:	2003e698 	.word	0x2003e698
   e6bb8:	2003e71c 	.word	0x2003e71c
   e6bbc:	2003e7a0 	.word	0x2003e7a0
   e6bc0:	2003ae28 	.word	0x2003ae28
   e6bc4:	000e6acd 	.word	0x000e6acd

000e6bc8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   e6bc8:	4770      	bx	lr

000e6bca <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   e6bca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e6bcc:	4606      	mov	r6, r0
   e6bce:	4615      	mov	r5, r2
   e6bd0:	460c      	mov	r4, r1
   e6bd2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   e6bd4:	42bc      	cmp	r4, r7
   e6bd6:	d006      	beq.n	e6be6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   e6bd8:	6833      	ldr	r3, [r6, #0]
   e6bda:	f814 1b01 	ldrb.w	r1, [r4], #1
   e6bde:	689b      	ldr	r3, [r3, #8]
   e6be0:	4630      	mov	r0, r6
   e6be2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   e6be4:	e7f6      	b.n	e6bd4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   e6be6:	4628      	mov	r0, r5
   e6be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e6bea <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   e6bea:	7c00      	ldrb	r0, [r0, #16]
   e6bec:	2200      	movs	r2, #0
   e6bee:	f7fe bd35 	b.w	e565c <hal_i2c_write>

000e6bf2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   e6bf2:	7c00      	ldrb	r0, [r0, #16]
   e6bf4:	2100      	movs	r1, #0
   e6bf6:	f7fe bd39 	b.w	e566c <hal_i2c_available>

000e6bfa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   e6bfa:	7c00      	ldrb	r0, [r0, #16]
   e6bfc:	2100      	movs	r1, #0
   e6bfe:	f7fe bd3d 	b.w	e567c <hal_i2c_read>

000e6c02 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   e6c02:	7c00      	ldrb	r0, [r0, #16]
   e6c04:	2100      	movs	r1, #0
   e6c06:	f7fe bd41 	b.w	e568c <hal_i2c_peek>

000e6c0a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   e6c0a:	7c00      	ldrb	r0, [r0, #16]
   e6c0c:	2100      	movs	r1, #0
   e6c0e:	f7fe bd45 	b.w	e569c <hal_i2c_flush>

000e6c12 <_ZN7TwoWireD0Ev>:
   e6c12:	b510      	push	{r4, lr}
   e6c14:	2114      	movs	r1, #20
   e6c16:	4604      	mov	r4, r0
   e6c18:	f000 ff35 	bl	e7a86 <_ZdlPvj>
   e6c1c:	4620      	mov	r0, r4
   e6c1e:	bd10      	pop	{r4, pc}

000e6c20 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   e6c20:	b510      	push	{r4, lr}
   e6c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   e6c26:	4604      	mov	r4, r0
   e6c28:	4608      	mov	r0, r1
   e6c2a:	2100      	movs	r1, #0
   e6c2c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   e6c30:	4b03      	ldr	r3, [pc, #12]	; (e6c40 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   e6c32:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   e6c34:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   e6c36:	4611      	mov	r1, r2
   e6c38:	f7fe fd40 	bl	e56bc <hal_i2c_init>
}
   e6c3c:	4620      	mov	r0, r4
   e6c3e:	bd10      	pop	{r4, pc}
   e6c40:	000eda64 	.word	0x000eda64

000e6c44 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   e6c44:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   e6c46:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   e6c48:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   e6c4c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   e6c4e:	2201      	movs	r2, #1
   e6c50:	f04f 33ff 	mov.w	r3, #4294967295
   e6c54:	f10d 0107 	add.w	r1, sp, #7
   e6c58:	47a0      	blx	r4
}
   e6c5a:	b002      	add	sp, #8
   e6c5c:	bd10      	pop	{r4, pc}

000e6c5e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   e6c5e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   e6c60:	6803      	ldr	r3, [r0, #0]
   e6c62:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   e6c64:	f04f 33ff 	mov.w	r3, #4294967295
   e6c68:	46a4      	mov	ip, r4
}
   e6c6a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   e6c6e:	4760      	bx	ip

000e6c70 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   e6c70:	b513      	push	{r0, r1, r4, lr}
   e6c72:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   e6c74:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   e6c76:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   e6c7a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   e6c7c:	f10d 0107 	add.w	r1, sp, #7
   e6c80:	2201      	movs	r2, #1
   e6c82:	47a0      	blx	r4
}
   e6c84:	b002      	add	sp, #8
   e6c86:	bd10      	pop	{r4, pc}

000e6c88 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   e6c88:	4770      	bx	lr

000e6c8a <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   e6c8a:	b538      	push	{r3, r4, r5, lr}
   e6c8c:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   e6c8e:	681a      	ldr	r2, [r3, #0]
   e6c90:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   e6c92:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   e6c94:	da10      	bge.n	e6cb8 <_ZN9TCPClient9connectedEv+0x2e>
   e6c96:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e6c9a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   e6c9e:	429a      	cmp	r2, r3
   e6ca0:	d10a      	bne.n	e6cb8 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   e6ca2:	6803      	ldr	r3, [r0, #0]
   e6ca4:	691b      	ldr	r3, [r3, #16]
   e6ca6:	4798      	blx	r3
        if (!rv) {
   e6ca8:	4604      	mov	r4, r0
   e6caa:	b928      	cbnz	r0, e6cb8 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   e6cac:	682b      	ldr	r3, [r5, #0]
   e6cae:	4628      	mov	r0, r5
   e6cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   e6cb2:	4798      	blx	r3
        rv = available();
   e6cb4:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   e6cb6:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   e6cb8:	2001      	movs	r0, #1
   e6cba:	e7fc      	b.n	e6cb6 <_ZN9TCPClient9connectedEv+0x2c>

000e6cbc <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   e6cbc:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   e6cbe:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   e6cc0:	43c0      	mvns	r0, r0
   e6cc2:	0fc0      	lsrs	r0, r0, #31
   e6cc4:	4770      	bx	lr

000e6cc6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   e6cc6:	4770      	bx	lr

000e6cc8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   e6cc8:	4b06      	ldr	r3, [pc, #24]	; (e6ce4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   e6cca:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   e6ccc:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   e6cce:	f100 040c 	add.w	r4, r0, #12
	    ||
   e6cd2:	d005      	beq.n	e6ce0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   e6cd4:	4608      	mov	r0, r1
   e6cd6:	f000 ff01 	bl	e7adc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   e6cda:	2800      	cmp	r0, #0
	return nullptr;
   e6cdc:	bf08      	it	eq
   e6cde:	2400      	moveq	r4, #0
      }
   e6ce0:	4620      	mov	r0, r4
   e6ce2:	bd10      	pop	{r4, pc}
   e6ce4:	000ed91c 	.word	0x000ed91c

000e6ce8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   e6ce8:	b510      	push	{r4, lr}
   e6cea:	21ac      	movs	r1, #172	; 0xac
   e6cec:	4604      	mov	r4, r0
   e6cee:	f000 feca 	bl	e7a86 <_ZdlPvj>
   e6cf2:	4620      	mov	r0, r4
   e6cf4:	bd10      	pop	{r4, pc}

000e6cf6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   e6cf6:	f7ed b9d2 	b.w	d409e <_ZdlPv>

000e6cfa <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   e6cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   e6cfe:	f04f 0800 	mov.w	r8, #0
   e6d02:	b086      	sub	sp, #24
   e6d04:	461d      	mov	r5, r3
   e6d06:	f8c0 8004 	str.w	r8, [r0, #4]
   e6d0a:	4604      	mov	r4, r0
   e6d0c:	460e      	mov	r6, r1
   e6d0e:	4617      	mov	r7, r2
    struct timeval tv = {};
   e6d10:	4641      	mov	r1, r8
   e6d12:	2210      	movs	r2, #16
   e6d14:	a802      	add	r0, sp, #8
   e6d16:	f002 f891 	bl	e8e3c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   e6d1a:	1c6b      	adds	r3, r5, #1
   e6d1c:	d009      	beq.n	e6d32 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   e6d1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   e6d22:	fbb5 f3f0 	udiv	r3, r5, r0
   e6d26:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   e6d2a:	fb00 5313 	mls	r3, r0, r3, r5
   e6d2e:	4358      	muls	r0, r3
   e6d30:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   e6d32:	6960      	ldr	r0, [r4, #20]
   e6d34:	2310      	movs	r3, #16
   e6d36:	9300      	str	r3, [sp, #0]
   e6d38:	6800      	ldr	r0, [r0, #0]
   e6d3a:	ab02      	add	r3, sp, #8
   e6d3c:	f241 0205 	movw	r2, #4101	; 0x1005
   e6d40:	f640 71ff 	movw	r1, #4095	; 0xfff
   e6d44:	f7fe fcda 	bl	e56fc <sock_setsockopt>
    if (ret < 0) {
   e6d48:	2800      	cmp	r0, #0
   e6d4a:	da07      	bge.n	e6d5c <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   e6d4c:	f7fe fe5c 	bl	e5a08 <__errno>
   e6d50:	6803      	ldr	r3, [r0, #0]
   e6d52:	6063      	str	r3, [r4, #4]
        return 0;
   e6d54:	2000      	movs	r0, #0
}
   e6d56:	b006      	add	sp, #24
   e6d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   e6d5c:	6960      	ldr	r0, [r4, #20]
   e6d5e:	2300      	movs	r3, #0
   e6d60:	6800      	ldr	r0, [r0, #0]
   e6d62:	463a      	mov	r2, r7
   e6d64:	4631      	mov	r1, r6
   e6d66:	f7fe fcf1 	bl	e574c <sock_send>
    if (ret < 0) {
   e6d6a:	1e03      	subs	r3, r0, #0
   e6d6c:	dbee      	blt.n	e6d4c <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   e6d6e:	4618      	mov	r0, r3
   e6d70:	e7f1      	b.n	e6d56 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000e6d74 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   e6d74:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   e6d76:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   e6d78:	4b05      	ldr	r3, [pc, #20]	; (e6d90 <_ZN9TCPClient8remoteIPEv+0x1c>)
   e6d7a:	4604      	mov	r4, r0
   e6d7c:	358c      	adds	r5, #140	; 0x8c
   e6d7e:	f844 3b04 	str.w	r3, [r4], #4
   e6d82:	4606      	mov	r6, r0
   e6d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e6d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e6d88:	682b      	ldr	r3, [r5, #0]
   e6d8a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   e6d8c:	4630      	mov	r0, r6
   e6d8e:	bd70      	pop	{r4, r5, r6, pc}
   e6d90:	000ed9f0 	.word	0x000ed9f0

000e6d94 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   e6d94:	b510      	push	{r4, lr}
   e6d96:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   e6d98:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e6d9c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   e6da0:	429a      	cmp	r2, r3
int TCPClient::peek() {
   e6da2:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   e6da4:	d005      	beq.n	e6db2 <_ZN9TCPClient4peekEv+0x1e>
   e6da6:	6963      	ldr	r3, [r4, #20]
   e6da8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   e6dac:	4413      	add	r3, r2
   e6dae:	7918      	ldrb	r0, [r3, #4]
}
   e6db0:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   e6db2:	6803      	ldr	r3, [r0, #0]
   e6db4:	691b      	ldr	r3, [r3, #16]
   e6db6:	4798      	blx	r3
   e6db8:	2800      	cmp	r0, #0
   e6dba:	d1f4      	bne.n	e6da6 <_ZN9TCPClient4peekEv+0x12>
   e6dbc:	f04f 30ff 	mov.w	r0, #4294967295
   e6dc0:	e7f6      	b.n	e6db0 <_ZN9TCPClient4peekEv+0x1c>

000e6dc2 <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   e6dc2:	b510      	push	{r4, lr}
   e6dc4:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   e6dc6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e6dca:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   e6dce:	429a      	cmp	r2, r3
int TCPClient::read() {
   e6dd0:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   e6dd2:	d008      	beq.n	e6de6 <_ZN9TCPClient4readEv+0x24>
   e6dd4:	6963      	ldr	r3, [r4, #20]
   e6dd6:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   e6dda:	1c51      	adds	r1, r2, #1
   e6ddc:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   e6de0:	4413      	add	r3, r2
   e6de2:	7918      	ldrb	r0, [r3, #4]
}
   e6de4:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   e6de6:	6803      	ldr	r3, [r0, #0]
   e6de8:	691b      	ldr	r3, [r3, #16]
   e6dea:	4798      	blx	r3
   e6dec:	2800      	cmp	r0, #0
   e6dee:	d1f1      	bne.n	e6dd4 <_ZN9TCPClient4readEv+0x12>
   e6df0:	f04f 30ff 	mov.w	r0, #4294967295
   e6df4:	e7f6      	b.n	e6de4 <_ZN9TCPClient4readEv+0x22>

000e6df6 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   e6df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e6df8:	6943      	ldr	r3, [r0, #20]
   e6dfa:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   e6dfc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e6e00:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   e6e04:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   e6e06:	4605      	mov	r5, r0
   e6e08:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   e6e0a:	d016      	beq.n	e6e3a <_ZN9TCPClient4readEPhj+0x44>
   e6e0c:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   e6e0e:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   e6e12:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   e6e16:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   e6e18:	42bc      	cmp	r4, r7
   e6e1a:	bf28      	it	cs
   e6e1c:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   e6e1e:	3304      	adds	r3, #4
   e6e20:	4622      	mov	r2, r4
   e6e22:	4419      	add	r1, r3
   e6e24:	4630      	mov	r0, r6
   e6e26:	f001 ffe1 	bl	e8dec <memcpy>
   e6e2a:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   e6e2c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   e6e30:	4423      	add	r3, r4
   e6e32:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   e6e36:	4620      	mov	r0, r4
   e6e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   e6e3a:	6803      	ldr	r3, [r0, #0]
   e6e3c:	691b      	ldr	r3, [r3, #16]
   e6e3e:	4798      	blx	r3
   e6e40:	2800      	cmp	r0, #0
   e6e42:	d1e3      	bne.n	e6e0c <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   e6e44:	f04f 34ff 	mov.w	r4, #4294967295
   e6e48:	e7f5      	b.n	e6e36 <_ZN9TCPClient4readEPhj+0x40>
	...

000e6e4c <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   e6e4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e6e50:	4698      	mov	r8, r3
    stop();
   e6e52:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   e6e54:	b093      	sub	sp, #76	; 0x4c
   e6e56:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   e6e58:	2400      	movs	r4, #0
    stop();
   e6e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   e6e5c:	4606      	mov	r6, r0
   e6e5e:	4617      	mov	r7, r2
    stop();
   e6e60:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   e6e62:	4628      	mov	r0, r5
   e6e64:	466b      	mov	r3, sp
   e6e66:	4622      	mov	r2, r4
   e6e68:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   e6e6a:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   e6e6c:	f7fe fb2e 	bl	e54cc <netdb_getaddrinfo>
   e6e70:	4605      	mov	r5, r0
   e6e72:	2800      	cmp	r0, #0
   e6e74:	d163      	bne.n	e6f3e <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   e6e76:	9b00      	ldr	r3, [sp, #0]
   e6e78:	2b00      	cmp	r3, #0
   e6e7a:	d04b      	beq.n	e6f14 <_ZN9TCPClient7connectEPKctm+0xc8>
   e6e7c:	695b      	ldr	r3, [r3, #20]
   e6e7e:	2b00      	cmp	r3, #0
   e6e80:	d048      	beq.n	e6f14 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   e6e82:	a806      	add	r0, sp, #24
   e6e84:	f7ff fd52 	bl	e692c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   e6e88:	9b00      	ldr	r3, [sp, #0]
   e6e8a:	695c      	ldr	r4, [r3, #20]
    if (saddr->sa_family == AF_INET) {
   e6e8c:	7863      	ldrb	r3, [r4, #1]
   e6e8e:	2b02      	cmp	r3, #2
   e6e90:	d104      	bne.n	e6e9c <_ZN9TCPClient7connectEPKctm+0x50>
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   e6e92:	1d21      	adds	r1, r4, #4
            addr = (const uint8_t*)(&ptr[3]);
   e6e94:	a806      	add	r0, sp, #24
   e6e96:	f7ff fd8c 	bl	e69b2 <_ZN9IPAddressaSEPKh>
        }
        if (port) {
   e6e9a:	e026      	b.n	e6eea <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   e6e9c:	2b0a      	cmp	r3, #10
   e6e9e:	d124      	bne.n	e6eea <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   e6ea0:	2211      	movs	r2, #17
   e6ea2:	4629      	mov	r1, r5
   e6ea4:	a801      	add	r0, sp, #4
   e6ea6:	f001 ffc9 	bl	e8e3c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   e6eaa:	68a3      	ldr	r3, [r4, #8]
   e6eac:	2b00      	cmp	r3, #0
   e6eae:	d038      	beq.n	e6f22 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   e6eb0:	f104 0308 	add.w	r3, r4, #8
   e6eb4:	f10d 0c04 	add.w	ip, sp, #4
   e6eb8:	3418      	adds	r4, #24
   e6eba:	6818      	ldr	r0, [r3, #0]
   e6ebc:	6859      	ldr	r1, [r3, #4]
   e6ebe:	4662      	mov	r2, ip
   e6ec0:	c203      	stmia	r2!, {r0, r1}
   e6ec2:	3308      	adds	r3, #8
   e6ec4:	42a3      	cmp	r3, r4
   e6ec6:	4694      	mov	ip, r2
   e6ec8:	d1f7      	bne.n	e6eba <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   e6eca:	2306      	movs	r3, #6
            addr = IPAddress(a);
   e6ecc:	a901      	add	r1, sp, #4
   e6ece:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   e6ed0:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   e6ed4:	f7ff fd38 	bl	e6948 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   e6ed8:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   e6edc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   e6ee0:	ac07      	add	r4, sp, #28
   e6ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e6ee4:	f8dc 3000 	ldr.w	r3, [ip]
   e6ee8:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   e6eea:	a806      	add	r0, sp, #24
   e6eec:	f7ff fd3e 	bl	e696c <_ZNK9IPAddresscvbEv>
        if (addr) {
   e6ef0:	b180      	cbz	r0, e6f14 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   e6ef2:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   e6ef4:	ad07      	add	r5, sp, #28
   e6ef6:	f8d3 9020 	ldr.w	r9, [r3, #32]
   e6efa:	4b12      	ldr	r3, [pc, #72]	; (e6f44 <_ZN9TCPClient7connectEPKctm+0xf8>)
   e6efc:	930c      	str	r3, [sp, #48]	; 0x30
   e6efe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e6f00:	ac0d      	add	r4, sp, #52	; 0x34
   e6f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e6f04:	682b      	ldr	r3, [r5, #0]
   e6f06:	7023      	strb	r3, [r4, #0]
   e6f08:	463a      	mov	r2, r7
   e6f0a:	4643      	mov	r3, r8
   e6f0c:	a90c      	add	r1, sp, #48	; 0x30
   e6f0e:	4630      	mov	r0, r6
   e6f10:	47c8      	blx	r9
   e6f12:	4605      	mov	r5, r0
    SCOPE_GUARD({
   e6f14:	9800      	ldr	r0, [sp, #0]
   e6f16:	f7fe fad1 	bl	e54bc <netdb_freeaddrinfo>
}
   e6f1a:	4628      	mov	r0, r5
   e6f1c:	b013      	add	sp, #76	; 0x4c
   e6f1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   e6f22:	68e3      	ldr	r3, [r4, #12]
   e6f24:	2b00      	cmp	r3, #0
   e6f26:	d1c3      	bne.n	e6eb0 <_ZN9TCPClient7connectEPKctm+0x64>
   e6f28:	f64f 70ff 	movw	r0, #65535	; 0xffff
   e6f2c:	f8d4 9010 	ldr.w	r9, [r4, #16]
   e6f30:	f7fe fb44 	bl	e55bc <inet_htonl>
   e6f34:	4581      	cmp	r9, r0
   e6f36:	d1bb      	bne.n	e6eb0 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   e6f38:	f104 0114 	add.w	r1, r4, #20
   e6f3c:	e7aa      	b.n	e6e94 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   e6f3e:	4625      	mov	r5, r4
   e6f40:	e7e8      	b.n	e6f14 <_ZN9TCPClient7connectEPKctm+0xc8>
   e6f42:	bf00      	nop
   e6f44:	000ed9f0 	.word	0x000ed9f0

000e6f48 <_ZN9TCPClient12flush_bufferEv>:
   e6f48:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   e6f4a:	2300      	movs	r3, #0
   e6f4c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   e6f50:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   e6f52:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   e6f56:	4770      	bx	lr

000e6f58 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   e6f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e6f5c:	461f      	mov	r7, r3
    stop();
   e6f5e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   e6f60:	460c      	mov	r4, r1
    stop();
   e6f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   e6f64:	b08a      	sub	sp, #40	; 0x28
   e6f66:	4605      	mov	r5, r0
   e6f68:	4616      	mov	r6, r2
    stop();
   e6f6a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   e6f6c:	7d23      	ldrb	r3, [r4, #20]
   e6f6e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   e6f72:	2b04      	cmp	r3, #4
   e6f74:	bf0c      	ite	eq
   e6f76:	2002      	moveq	r0, #2
   e6f78:	200a      	movne	r0, #10
   e6f7a:	2206      	movs	r2, #6
   e6f7c:	2101      	movs	r1, #1
   e6f7e:	f7fe fbed 	bl	e575c <sock_socket>
   e6f82:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   e6f86:	696b      	ldr	r3, [r5, #20]
   e6f88:	681b      	ldr	r3, [r3, #0]
   e6f8a:	2b00      	cmp	r3, #0
   e6f8c:	da08      	bge.n	e6fa0 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   e6f8e:	682b      	ldr	r3, [r5, #0]
   e6f90:	4628      	mov	r0, r5
   e6f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   e6f94:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   e6f96:	4798      	blx	r3
}
   e6f98:	4620      	mov	r0, r4
   e6f9a:	b00a      	add	sp, #40	; 0x28
   e6f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   e6fa0:	4628      	mov	r0, r5
   e6fa2:	f7ff ffd1 	bl	e6f48 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   e6fa6:	b1b7      	cbz	r7, e6fd6 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   e6fa8:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   e6faa:	a903      	add	r1, sp, #12
   e6fac:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   e6fae:	9303      	str	r3, [sp, #12]
   e6fb0:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   e6fb4:	f7fe faba 	bl	e552c <if_index_to_name>
   e6fb8:	2800      	cmp	r0, #0
   e6fba:	d1e8      	bne.n	e6f8e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   e6fbc:	6968      	ldr	r0, [r5, #20]
   e6fbe:	2306      	movs	r3, #6
   e6fc0:	9300      	str	r3, [sp, #0]
   e6fc2:	6800      	ldr	r0, [r0, #0]
   e6fc4:	ab03      	add	r3, sp, #12
   e6fc6:	f241 020b 	movw	r2, #4107	; 0x100b
   e6fca:	f640 71ff 	movw	r1, #4095	; 0xfff
   e6fce:	f7fe fb95 	bl	e56fc <sock_setsockopt>
   e6fd2:	2800      	cmp	r0, #0
   e6fd4:	d1db      	bne.n	e6f8e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   e6fd6:	221c      	movs	r2, #28
   e6fd8:	2100      	movs	r1, #0
   e6fda:	a803      	add	r0, sp, #12
   e6fdc:	f001 ff2e 	bl	e8e3c <memset>
    if (ip.version() == 4) {
   e6fe0:	7d23      	ldrb	r3, [r4, #20]
   e6fe2:	2b04      	cmp	r3, #4
   e6fe4:	d11d      	bne.n	e7022 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   e6fe6:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   e6fea:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   e6fec:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   e6ff0:	f7fe faec 	bl	e55cc <inet_htons>
   e6ff4:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   e6ff8:	6860      	ldr	r0, [r4, #4]
   e6ffa:	f7fe fadf 	bl	e55bc <inet_htonl>
   e6ffe:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   e7000:	696b      	ldr	r3, [r5, #20]
   e7002:	221c      	movs	r2, #28
   e7004:	6818      	ldr	r0, [r3, #0]
   e7006:	a903      	add	r1, sp, #12
   e7008:	f7fe fb88 	bl	e571c <sock_connect>
   e700c:	2800      	cmp	r0, #0
   e700e:	d1be      	bne.n	e6f8e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   e7010:	3404      	adds	r4, #4
   e7012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   e7014:	696d      	ldr	r5, [r5, #20]
   e7016:	358c      	adds	r5, #140	; 0x8c
   e7018:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   e701a:	6823      	ldr	r3, [r4, #0]
   e701c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   e701e:	2401      	movs	r4, #1
   e7020:	e7ba      	b.n	e6f98 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   e7022:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   e7026:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   e7028:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   e702c:	f7fe face 	bl	e55cc <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   e7030:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   e7032:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   e7036:	1d23      	adds	r3, r4, #4
   e7038:	f104 0714 	add.w	r7, r4, #20
   e703c:	6818      	ldr	r0, [r3, #0]
   e703e:	6859      	ldr	r1, [r3, #4]
   e7040:	4632      	mov	r2, r6
   e7042:	c203      	stmia	r2!, {r0, r1}
   e7044:	3308      	adds	r3, #8
   e7046:	42bb      	cmp	r3, r7
   e7048:	4616      	mov	r6, r2
   e704a:	d1f7      	bne.n	e703c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   e704c:	e7d8      	b.n	e7000 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000e7050 <_ZN9TCPClient9availableEv>:
{
   e7050:	b530      	push	{r4, r5, lr}
   e7052:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   e7054:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   e7058:	b08b      	sub	sp, #44	; 0x2c
   e705a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   e705c:	b12b      	cbz	r3, e706a <_ZN9TCPClient9availableEv+0x1a>
   e705e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   e7062:	429a      	cmp	r2, r3
   e7064:	d101      	bne.n	e706a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   e7066:	f7ff ff6f 	bl	e6f48 <_ZN9TCPClient12flush_bufferEv>
   e706a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   e706c:	6808      	ldr	r0, [r1, #0]
   e706e:	2800      	cmp	r0, #0
   e7070:	db18      	blt.n	e70a4 <_ZN9TCPClient9availableEv+0x54>
   e7072:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   e7076:	2d7f      	cmp	r5, #127	; 0x7f
   e7078:	d814      	bhi.n	e70a4 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   e707a:	3104      	adds	r1, #4
   e707c:	2308      	movs	r3, #8
   e707e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   e7082:	4429      	add	r1, r5
   e7084:	f7fe fb5a 	bl	e573c <sock_recv>
            if (ret > 0) {
   e7088:	2800      	cmp	r0, #0
   e708a:	dd13      	ble.n	e70b4 <_ZN9TCPClient9availableEv+0x64>
   e708c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   e708e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e7092:	b90a      	cbnz	r2, e7098 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   e7094:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   e7098:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   e709a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   e709e:	4410      	add	r0, r2
   e70a0:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   e70a4:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   e70a6:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   e70aa:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   e70ae:	1ac0      	subs	r0, r0, r3
   e70b0:	b00b      	add	sp, #44	; 0x2c
   e70b2:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   e70b4:	f7fe fca8 	bl	e5a08 <__errno>
   e70b8:	6803      	ldr	r3, [r0, #0]
   e70ba:	2b0b      	cmp	r3, #11
   e70bc:	d0f2      	beq.n	e70a4 <_ZN9TCPClient9availableEv+0x54>
   e70be:	f7fe fca3 	bl	e5a08 <__errno>
   e70c2:	6803      	ldr	r3, [r0, #0]
   e70c4:	2b0b      	cmp	r3, #11
   e70c6:	d0ed      	beq.n	e70a4 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   e70c8:	2320      	movs	r3, #32
   e70ca:	2500      	movs	r5, #0
   e70cc:	e9cd 3502 	strd	r3, r5, [sp, #8]
   e70d0:	f7fe fc9a 	bl	e5a08 <__errno>
   e70d4:	6803      	ldr	r3, [r0, #0]
   e70d6:	9301      	str	r3, [sp, #4]
   e70d8:	4b08      	ldr	r3, [pc, #32]	; (e70fc <_ZN9TCPClient9availableEv+0xac>)
   e70da:	4909      	ldr	r1, [pc, #36]	; (e7100 <_ZN9TCPClient9availableEv+0xb0>)
   e70dc:	9300      	str	r3, [sp, #0]
   e70de:	aa02      	add	r2, sp, #8
   e70e0:	462b      	mov	r3, r5
   e70e2:	2032      	movs	r0, #50	; 0x32
   e70e4:	f7fe fbba 	bl	e585c <log_message>
                    sock_close(d_->sock);
   e70e8:	6963      	ldr	r3, [r4, #20]
   e70ea:	6818      	ldr	r0, [r3, #0]
   e70ec:	f7fe fb0e 	bl	e570c <sock_close>
   e70f0:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   e70f2:	f04f 32ff 	mov.w	r2, #4294967295
   e70f6:	601a      	str	r2, [r3, #0]
   e70f8:	e7d4      	b.n	e70a4 <_ZN9TCPClient9availableEv+0x54>
   e70fa:	bf00      	nop
   e70fc:	000eda84 	.word	0x000eda84
   e7100:	000ed8d4 	.word	0x000ed8d4

000e7104 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   e7104:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   e7106:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   e7108:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   e710a:	6818      	ldr	r0, [r3, #0]
   e710c:	2800      	cmp	r0, #0
   e710e:	db01      	blt.n	e7114 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   e7110:	f7fe fafc 	bl	e570c <sock_close>
   e7114:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   e7116:	f04f 32ff 	mov.w	r2, #4294967295
   e711a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   e711c:	6960      	ldr	r0, [r4, #20]
   e711e:	2211      	movs	r2, #17
   e7120:	2100      	movs	r1, #0
   e7122:	308c      	adds	r0, #140	; 0x8c
   e7124:	f001 fe8a 	bl	e8e3c <memset>
    flush_buffer();
   e7128:	4620      	mov	r0, r4
}
   e712a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   e712e:	f7ff bf0b 	b.w	e6f48 <_ZN9TCPClient12flush_bufferEv>

000e7132 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   e7132:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   e7134:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   e7136:	4604      	mov	r4, r0
          total(0) {
   e7138:	6001      	str	r1, [r0, #0]
   e713a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   e713e:	3088      	adds	r0, #136	; 0x88
   e7140:	f7ff fbf4 	bl	e692c <_ZN9IPAddressC1Ev>
}
   e7144:	4620      	mov	r0, r4
   e7146:	bd10      	pop	{r4, pc}

000e7148 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   e7148:	b573      	push	{r0, r1, r4, r5, r6, lr}
   e714a:	2300      	movs	r3, #0
   e714c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   e7150:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   e7154:	4a0e      	ldr	r2, [pc, #56]	; (e7190 <_ZN9TCPClientC1Ei+0x48>)
   e7156:	6103      	str	r3, [r0, #16]
   e7158:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   e715a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   e715c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   e715e:	20ac      	movs	r0, #172	; 0xac
   e7160:	9101      	str	r1, [sp, #4]
   e7162:	f7ec ff98 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   e7166:	1e05      	subs	r5, r0, #0
   e7168:	f105 060c 	add.w	r6, r5, #12
   e716c:	d008      	beq.n	e7180 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   e716e:	2301      	movs	r3, #1
   e7170:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   e7174:	4b07      	ldr	r3, [pc, #28]	; (e7194 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   e7176:	9901      	ldr	r1, [sp, #4]
   e7178:	602b      	str	r3, [r5, #0]
   e717a:	4630      	mov	r0, r6
   e717c:	f7ff ffd9 	bl	e7132 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   e7180:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   e7182:	e9c4 6505 	strd	r6, r5, [r4, #20]
   e7186:	f7ff fedf 	bl	e6f48 <_ZN9TCPClient12flush_bufferEv>
}
   e718a:	b002      	add	sp, #8
   e718c:	bd70      	pop	{r4, r5, r6, pc}
   e718e:	bf00      	nop
   e7190:	000edab8 	.word	0x000edab8
   e7194:	000eda9c 	.word	0x000eda9c

000e7198 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   e7198:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   e719a:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   e719e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   e71a0:	f7ff ffd2 	bl	e7148 <_ZN9TCPClientC1Ei>
}
   e71a4:	4620      	mov	r0, r4
   e71a6:	bd10      	pop	{r4, pc}

000e71a8 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   e71a8:	b510      	push	{r4, lr}
   e71aa:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   e71ac:	6800      	ldr	r0, [r0, #0]
   e71ae:	2800      	cmp	r0, #0
   e71b0:	db01      	blt.n	e71b6 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   e71b2:	f7fe faab 	bl	e570c <sock_close>
    }
}
   e71b6:	4620      	mov	r0, r4
   e71b8:	bd10      	pop	{r4, pc}

000e71ba <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   e71ba:	300c      	adds	r0, #12
   e71bc:	f7ff bff4 	b.w	e71a8 <_ZN9TCPClient4DataD1Ev>

000e71c0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   e71c0:	2200      	movs	r2, #0
   e71c2:	6840      	ldr	r0, [r0, #4]
   e71c4:	4611      	mov	r1, r2
   e71c6:	f7fe bb97 	b.w	e58f8 <network_ready>

000e71ca <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   e71ca:	2200      	movs	r2, #0
   e71cc:	6840      	ldr	r0, [r0, #4]
   e71ce:	4611      	mov	r1, r2
   e71d0:	f7fe bbb2 	b.w	e5938 <network_listening>

000e71d4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   e71d4:	2200      	movs	r2, #0
   e71d6:	6840      	ldr	r0, [r0, #4]
   e71d8:	4611      	mov	r1, r2
   e71da:	f7fe bbbd 	b.w	e5958 <network_get_listen_timeout>

000e71de <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   e71de:	6840      	ldr	r0, [r0, #4]
   e71e0:	2200      	movs	r2, #0
   e71e2:	f7fe bbb1 	b.w	e5948 <network_set_listen_timeout>

000e71e6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   e71e6:	6840      	ldr	r0, [r0, #4]
   e71e8:	2200      	movs	r2, #0
   e71ea:	f081 0101 	eor.w	r1, r1, #1
   e71ee:	f7fe bb9b 	b.w	e5928 <network_listen>

000e71f2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   e71f2:	2300      	movs	r3, #0
   e71f4:	6840      	ldr	r0, [r0, #4]
   e71f6:	461a      	mov	r2, r3
   e71f8:	4619      	mov	r1, r3
   e71fa:	f7fe bb8d 	b.w	e5918 <network_off>

000e71fe <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   e71fe:	2300      	movs	r3, #0
   e7200:	6840      	ldr	r0, [r0, #4]
   e7202:	461a      	mov	r2, r3
   e7204:	4619      	mov	r1, r3
   e7206:	f7fe bb7f 	b.w	e5908 <network_on>

000e720a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   e720a:	2200      	movs	r2, #0
   e720c:	6840      	ldr	r0, [r0, #4]
   e720e:	4611      	mov	r1, r2
   e7210:	f7fe bb62 	b.w	e58d8 <network_connecting>

000e7214 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   e7214:	6840      	ldr	r0, [r0, #4]
   e7216:	2200      	movs	r2, #0
   e7218:	2102      	movs	r1, #2
   e721a:	f7fe bb65 	b.w	e58e8 <network_disconnect>

000e721e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   e721e:	2300      	movs	r3, #0
   e7220:	6840      	ldr	r0, [r0, #4]
   e7222:	461a      	mov	r2, r3
   e7224:	f7fe bb50 	b.w	e58c8 <network_connect>

000e7228 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   e7228:	4b02      	ldr	r3, [pc, #8]	; (e7234 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   e722a:	2204      	movs	r2, #4
   e722c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   e722e:	4a02      	ldr	r2, [pc, #8]	; (e7238 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   e7230:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   e7232:	4770      	bx	lr
   e7234:	2003e7b4 	.word	0x2003e7b4
   e7238:	000edb04 	.word	0x000edb04

000e723c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   e723c:	2300      	movs	r3, #0
   e723e:	6840      	ldr	r0, [r0, #4]
   e7240:	461a      	mov	r2, r3
   e7242:	f7fe bb41 	b.w	e58c8 <network_connect>

000e7246 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   e7246:	6840      	ldr	r0, [r0, #4]
   e7248:	2200      	movs	r2, #0
   e724a:	2102      	movs	r1, #2
   e724c:	f7fe bb4c 	b.w	e58e8 <network_disconnect>

000e7250 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   e7250:	2200      	movs	r2, #0
   e7252:	6840      	ldr	r0, [r0, #4]
   e7254:	4611      	mov	r1, r2
   e7256:	f7fe bb3f 	b.w	e58d8 <network_connecting>

000e725a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   e725a:	2200      	movs	r2, #0
   e725c:	6840      	ldr	r0, [r0, #4]
   e725e:	4611      	mov	r1, r2
   e7260:	f7fe bb4a 	b.w	e58f8 <network_ready>

000e7264 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   e7264:	2300      	movs	r3, #0
   e7266:	6840      	ldr	r0, [r0, #4]
   e7268:	461a      	mov	r2, r3
   e726a:	4619      	mov	r1, r3
   e726c:	f7fe bb4c 	b.w	e5908 <network_on>

000e7270 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   e7270:	2300      	movs	r3, #0
   e7272:	6840      	ldr	r0, [r0, #4]
   e7274:	461a      	mov	r2, r3
   e7276:	4619      	mov	r1, r3
   e7278:	f7fe bb4e 	b.w	e5918 <network_off>

000e727c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   e727c:	6840      	ldr	r0, [r0, #4]
   e727e:	2200      	movs	r2, #0
   e7280:	f081 0101 	eor.w	r1, r1, #1
   e7284:	f7fe bb50 	b.w	e5928 <network_listen>

000e7288 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   e7288:	6840      	ldr	r0, [r0, #4]
   e728a:	2200      	movs	r2, #0
   e728c:	f7fe bb5c 	b.w	e5948 <network_set_listen_timeout>

000e7290 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   e7290:	2200      	movs	r2, #0
   e7292:	6840      	ldr	r0, [r0, #4]
   e7294:	4611      	mov	r1, r2
   e7296:	f7fe bb5f 	b.w	e5958 <network_get_listen_timeout>

000e729a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   e729a:	2200      	movs	r2, #0
   e729c:	6840      	ldr	r0, [r0, #4]
   e729e:	4611      	mov	r1, r2
   e72a0:	f7fe bb4a 	b.w	e5938 <network_listening>

000e72a4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   e72a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   e72a8:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   e72aa:	b095      	sub	sp, #84	; 0x54
   e72ac:	4616      	mov	r6, r2
   e72ae:	460d      	mov	r5, r1
   e72b0:	4607      	mov	r7, r0
    IPAddress addr;
   e72b2:	f7ff fb3b 	bl	e692c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   e72b6:	4621      	mov	r1, r4
   e72b8:	2218      	movs	r2, #24
   e72ba:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   e72bc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   e72be:	f001 fdbd 	bl	e8e3c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   e72c2:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   e72c4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   e72c8:	4621      	mov	r1, r4
   e72ca:	466b      	mov	r3, sp
   e72cc:	aa0c      	add	r2, sp, #48	; 0x30
   e72ce:	4630      	mov	r0, r6
   e72d0:	f7fe f8fc 	bl	e54cc <netdb_getaddrinfo>
    if (!r) {
   e72d4:	4604      	mov	r4, r0
   e72d6:	2800      	cmp	r0, #0
   e72d8:	d146      	bne.n	e7368 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   e72da:	4602      	mov	r2, r0
   e72dc:	2101      	movs	r1, #1
   e72de:	6868      	ldr	r0, [r5, #4]
   e72e0:	f7fe fb0a 	bl	e58f8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e72e4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   e72e6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e72e8:	4622      	mov	r2, r4
   e72ea:	6868      	ldr	r0, [r5, #4]
   e72ec:	f7fe fb04 	bl	e58f8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e72f0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e72f2:	4681      	mov	r9, r0
        bool ok = false;
   e72f4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e72f6:	2e00      	cmp	r6, #0
   e72f8:	d036      	beq.n	e7368 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   e72fa:	2900      	cmp	r1, #0
   e72fc:	d134      	bne.n	e7368 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   e72fe:	6873      	ldr	r3, [r6, #4]
   e7300:	2b02      	cmp	r3, #2
   e7302:	d003      	beq.n	e730c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   e7304:	2b0a      	cmp	r3, #10
   e7306:	d00b      	beq.n	e7320 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e7308:	69f6      	ldr	r6, [r6, #28]
   e730a:	e7f4      	b.n	e72f6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   e730c:	f1b8 0f00 	cmp.w	r8, #0
   e7310:	d004      	beq.n	e731c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   e7312:	6971      	ldr	r1, [r6, #20]
   e7314:	4638      	mov	r0, r7
   e7316:	3104      	adds	r1, #4
   e7318:	f7ff fb4b 	bl	e69b2 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   e731c:	4641      	mov	r1, r8
   e731e:	e7f3      	b.n	e7308 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   e7320:	f1b9 0f00 	cmp.w	r9, #0
   e7324:	d101      	bne.n	e732a <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   e7326:	4649      	mov	r1, r9
   e7328:	e7ee      	b.n	e7308 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   e732a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   e732c:	2210      	movs	r2, #16
   e732e:	a801      	add	r0, sp, #4
   e7330:	f001 fd84 	bl	e8e3c <memset>
                    a.v = 6;
   e7334:	2306      	movs	r3, #6
   e7336:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   e733a:	ad01      	add	r5, sp, #4
   e733c:	f104 0308 	add.w	r3, r4, #8
   e7340:	3418      	adds	r4, #24
   e7342:	6818      	ldr	r0, [r3, #0]
   e7344:	6859      	ldr	r1, [r3, #4]
   e7346:	462a      	mov	r2, r5
   e7348:	c203      	stmia	r2!, {r0, r1}
   e734a:	3308      	adds	r3, #8
   e734c:	42a3      	cmp	r3, r4
   e734e:	4615      	mov	r5, r2
   e7350:	d1f7      	bne.n	e7342 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   e7352:	a901      	add	r1, sp, #4
   e7354:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   e7356:	ad07      	add	r5, sp, #28
   e7358:	f7ff faf6 	bl	e6948 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   e735c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e735e:	1d3c      	adds	r4, r7, #4
   e7360:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e7362:	682b      	ldr	r3, [r5, #0]
   e7364:	7023      	strb	r3, [r4, #0]
   e7366:	e7de      	b.n	e7326 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   e7368:	9800      	ldr	r0, [sp, #0]
   e736a:	f7fe f8a7 	bl	e54bc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   e736e:	4638      	mov	r0, r7
   e7370:	b015      	add	sp, #84	; 0x54
   e7372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000e7378 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   e7378:	4b02      	ldr	r3, [pc, #8]	; (e7384 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   e737a:	4a03      	ldr	r2, [pc, #12]	; (e7388 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   e737c:	601a      	str	r2, [r3, #0]
   e737e:	2200      	movs	r2, #0
   e7380:	605a      	str	r2, [r3, #4]

} // spark
   e7382:	4770      	bx	lr
   e7384:	2003e7bc 	.word	0x2003e7bc
   e7388:	000edb38 	.word	0x000edb38

000e738c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   e738c:	f100 0310 	add.w	r3, r0, #16
   e7390:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   e7392:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   e7396:	2901      	cmp	r1, #1
   e7398:	4618      	mov	r0, r3
   e739a:	d108      	bne.n	e73ae <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   e739c:	f853 1c04 	ldr.w	r1, [r3, #-4]
   e73a0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   e73a4:	3a01      	subs	r2, #1
   e73a6:	f103 0310 	add.w	r3, r3, #16
   e73aa:	d1f2      	bne.n	e7392 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   e73ac:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   e73ae:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   e73b0:	bf04      	itt	eq
   e73b2:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   e73b6:	1852      	addeq	r2, r2, r1
   e73b8:	e7f4      	b.n	e73a4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000e73ba <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   e73ba:	4770      	bx	lr

000e73bc <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   e73bc:	2000      	movs	r0, #0
   e73be:	4770      	bx	lr

000e73c0 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   e73c0:	b510      	push	{r4, lr}
   e73c2:	2110      	movs	r1, #16
   e73c4:	4604      	mov	r4, r0
   e73c6:	f000 fb5e 	bl	e7a86 <_ZdlPvj>
   e73ca:	4620      	mov	r0, r4
   e73cc:	bd10      	pop	{r4, pc}

000e73ce <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   e73ce:	b508      	push	{r3, lr}
      { delete this; }
   e73d0:	f7ff fff6 	bl	e73c0 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   e73d4:	bd08      	pop	{r3, pc}

000e73d6 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   e73d6:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   e73d8:	68c4      	ldr	r4, [r0, #12]
   e73da:	b17c      	cbz	r4, e73fc <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
   e73dc:	6820      	ldr	r0, [r4, #0]
   e73de:	b108      	cbz	r0, e73e4 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   e73e0:	f7ec fe5f 	bl	d40a2 <_ZdaPv>
        if (freeJson) {
   e73e4:	7a23      	ldrb	r3, [r4, #8]
   e73e6:	b11b      	cbz	r3, e73f0 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
            delete[] json;
   e73e8:	6860      	ldr	r0, [r4, #4]
   e73ea:	b108      	cbz	r0, e73f0 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   e73ec:	f7ec fe59 	bl	d40a2 <_ZdaPv>
   e73f0:	4620      	mov	r0, r4
   e73f2:	210c      	movs	r1, #12
   e73f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   e73f8:	f000 bb45 	b.w	e7a86 <_ZdlPvj>
   e73fc:	bd10      	pop	{r4, pc}

000e73fe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   e73fe:	b510      	push	{r4, lr}
          _M_dispose();
   e7400:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   e7402:	4604      	mov	r4, r0
          _M_dispose();
   e7404:	689b      	ldr	r3, [r3, #8]
   e7406:	4798      	blx	r3
          if (--_M_weak_count == 0)
   e7408:	68a3      	ldr	r3, [r4, #8]
   e740a:	3b01      	subs	r3, #1
   e740c:	60a3      	str	r3, [r4, #8]
   e740e:	b92b      	cbnz	r3, e741c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   e7410:	6823      	ldr	r3, [r4, #0]
   e7412:	4620      	mov	r0, r4
   e7414:	68db      	ldr	r3, [r3, #12]
    }
   e7416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   e741a:	4718      	bx	r3
    }
   e741c:	bd10      	pop	{r4, pc}

000e741e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   e741e:	b538      	push	{r3, r4, r5, lr}
   e7420:	680b      	ldr	r3, [r1, #0]
   e7422:	6003      	str	r3, [r0, #0]
   e7424:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   e7426:	6843      	ldr	r3, [r0, #4]
   e7428:	429d      	cmp	r5, r3
    class __shared_ptr
   e742a:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   e742c:	d00c      	beq.n	e7448 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   e742e:	b115      	cbz	r5, e7436 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   e7430:	686b      	ldr	r3, [r5, #4]
   e7432:	3301      	adds	r3, #1
   e7434:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   e7436:	6860      	ldr	r0, [r4, #4]
   e7438:	b128      	cbz	r0, e7446 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   e743a:	6843      	ldr	r3, [r0, #4]
   e743c:	3b01      	subs	r3, #1
   e743e:	6043      	str	r3, [r0, #4]
   e7440:	b90b      	cbnz	r3, e7446 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   e7442:	f7ff ffdc 	bl	e73fe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   e7446:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   e7448:	4620      	mov	r0, r4
   e744a:	bd38      	pop	{r3, r4, r5, pc}

000e744c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   e744c:	460b      	mov	r3, r1
   e744e:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   e7450:	2200      	movs	r2, #0
   e7452:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   e7454:	e9c0 2200 	strd	r2, r2, [r0]
   e7458:	4604      	mov	r4, r0
        JSONValue() {
    if (t) {
        t_ = t;
   e745a:	6083      	str	r3, [r0, #8]
    if (t) {
   e745c:	b90b      	cbnz	r3, e7462 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
        d_ = d;
    }
}
   e745e:	4620      	mov	r0, r4
   e7460:	bd10      	pop	{r4, pc}
    class shared_ptr : public __shared_ptr<_Tp>
   e7462:	f7ff ffdc 	bl	e741e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   e7466:	e7fa      	b.n	e745e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000e7468 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   e7468:	6883      	ldr	r3, [r0, #8]
   e746a:	b1eb      	cbz	r3, e74a8 <_ZNK5spark9JSONValue4typeEv+0x40>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   e746c:	781a      	ldrb	r2, [r3, #0]
   e746e:	2a03      	cmp	r2, #3
   e7470:	d81a      	bhi.n	e74a8 <_ZNK5spark9JSONValue4typeEv+0x40>
   e7472:	e8df f002 	tbb	[pc, r2]
   e7476:	1704      	.short	0x1704
   e7478:	1b02      	.short	0x1b02
   e747a:	2005      	movs	r0, #5
   e747c:	4770      	bx	lr
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   e747e:	6802      	ldr	r2, [r0, #0]
   e7480:	685b      	ldr	r3, [r3, #4]
   e7482:	6852      	ldr	r2, [r2, #4]
   e7484:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   e7486:	282d      	cmp	r0, #45	; 0x2d
   e7488:	d012      	beq.n	e74b0 <_ZNK5spark9JSONValue4typeEv+0x48>
   e748a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   e748e:	2b09      	cmp	r3, #9
   e7490:	d90e      	bls.n	e74b0 <_ZNK5spark9JSONValue4typeEv+0x48>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   e7492:	2874      	cmp	r0, #116	; 0x74
   e7494:	d00e      	beq.n	e74b4 <_ZNK5spark9JSONValue4typeEv+0x4c>
   e7496:	2866      	cmp	r0, #102	; 0x66
   e7498:	d00c      	beq.n	e74b4 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   e749a:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   e749e:	4258      	negs	r0, r3
   e74a0:	4158      	adcs	r0, r3
   e74a2:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   e74a4:	2006      	movs	r0, #6
   e74a6:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   e74a8:	2000      	movs	r0, #0
   e74aa:	4770      	bx	lr
        return JSON_TYPE_STRING;
   e74ac:	2004      	movs	r0, #4
   e74ae:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   e74b0:	2003      	movs	r0, #3
   e74b2:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   e74b4:	2002      	movs	r0, #2
    }
}
   e74b6:	4770      	bx	lr

000e74b8 <_ZNK5spark9JSONValue6toBoolEv>:
bool spark::JSONValue::toBool() const {
   e74b8:	b510      	push	{r4, lr}
   e74ba:	4604      	mov	r4, r0
    switch (type()) {
   e74bc:	f7ff ffd4 	bl	e7468 <_ZNK5spark9JSONValue4typeEv>
   e74c0:	2803      	cmp	r0, #3
   e74c2:	d00d      	beq.n	e74e0 <_ZNK5spark9JSONValue6toBoolEv+0x28>
   e74c4:	2804      	cmp	r0, #4
   e74c6:	d01e      	beq.n	e7506 <_ZNK5spark9JSONValue6toBoolEv+0x4e>
   e74c8:	2802      	cmp	r0, #2
   e74ca:	d12b      	bne.n	e7524 <_ZNK5spark9JSONValue6toBoolEv+0x6c>
        const char* const s = d_->json + t_->start;
   e74cc:	6822      	ldr	r2, [r4, #0]
   e74ce:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   e74d0:	6852      	ldr	r2, [r2, #4]
   e74d2:	685b      	ldr	r3, [r3, #4]
   e74d4:	5cd0      	ldrb	r0, [r2, r3]
   e74d6:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   e74da:	4258      	negs	r0, r3
   e74dc:	4158      	adcs	r0, r3
}
   e74de:	bd10      	pop	{r4, pc}
        const char* const s = d_->json + t_->start;
   e74e0:	68a3      	ldr	r3, [r4, #8]
   e74e2:	6822      	ldr	r2, [r4, #0]
   e74e4:	685b      	ldr	r3, [r3, #4]
   e74e6:	6854      	ldr	r4, [r2, #4]
   e74e8:	441c      	add	r4, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   e74ea:	490f      	ldr	r1, [pc, #60]	; (e7528 <_ZNK5spark9JSONValue6toBoolEv+0x70>)
   e74ec:	4620      	mov	r0, r4
   e74ee:	f001 fce1 	bl	e8eb4 <strcmp>
   e74f2:	2800      	cmp	r0, #0
   e74f4:	d0f3      	beq.n	e74de <_ZNK5spark9JSONValue6toBoolEv+0x26>
   e74f6:	490d      	ldr	r1, [pc, #52]	; (e752c <_ZNK5spark9JSONValue6toBoolEv+0x74>)
   e74f8:	4620      	mov	r0, r4
   e74fa:	f001 fcdb 	bl	e8eb4 <strcmp>
   e74fe:	3800      	subs	r0, #0
   e7500:	bf18      	it	ne
   e7502:	2001      	movne	r0, #1
   e7504:	e7eb      	b.n	e74de <_ZNK5spark9JSONValue6toBoolEv+0x26>
        const char* const s = d_->json + t_->start;
   e7506:	6822      	ldr	r2, [r4, #0]
   e7508:	68a3      	ldr	r3, [r4, #8]
   e750a:	6852      	ldr	r2, [r2, #4]
   e750c:	685b      	ldr	r3, [r3, #4]
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   e750e:	5cd0      	ldrb	r0, [r2, r3]
        const char* const s = d_->json + t_->start;
   e7510:	18d4      	adds	r4, r2, r3
        if (*s == '\0' || strcmp(s, "false") == 0 || strcmp(s, "0") == 0 || strcmp(s, "0.0") == 0) {
   e7512:	2800      	cmp	r0, #0
   e7514:	d0e3      	beq.n	e74de <_ZNK5spark9JSONValue6toBoolEv+0x26>
   e7516:	4906      	ldr	r1, [pc, #24]	; (e7530 <_ZNK5spark9JSONValue6toBoolEv+0x78>)
   e7518:	4620      	mov	r0, r4
   e751a:	f001 fccb 	bl	e8eb4 <strcmp>
   e751e:	2800      	cmp	r0, #0
   e7520:	d1e3      	bne.n	e74ea <_ZNK5spark9JSONValue6toBoolEv+0x32>
   e7522:	e7dc      	b.n	e74de <_ZNK5spark9JSONValue6toBoolEv+0x26>
    switch (type()) {
   e7524:	2000      	movs	r0, #0
   e7526:	e7da      	b.n	e74de <_ZNK5spark9JSONValue6toBoolEv+0x26>
   e7528:	000edb66 	.word	0x000edb66
   e752c:	000edb64 	.word	0x000edb64
   e7530:	000eccf1 	.word	0x000eccf1
   e7534:	00000000 	.word	0x00000000

000e7538 <_ZNK5spark9JSONValue8toDoubleEv>:
double spark::JSONValue::toDouble() const {
   e7538:	b510      	push	{r4, lr}
   e753a:	4604      	mov	r4, r0
    switch (type()) {
   e753c:	f7ff ff94 	bl	e7468 <_ZNK5spark9JSONValue4typeEv>
   e7540:	2802      	cmp	r0, #2
   e7542:	d00d      	beq.n	e7560 <_ZNK5spark9JSONValue8toDoubleEv+0x28>
   e7544:	1ec3      	subs	r3, r0, #3
   e7546:	b2db      	uxtb	r3, r3
   e7548:	2b01      	cmp	r3, #1
   e754a:	d810      	bhi.n	e756e <_ZNK5spark9JSONValue8toDoubleEv+0x36>
        const char* const s = d_->json + t_->start;
   e754c:	6822      	ldr	r2, [r4, #0]
   e754e:	68a3      	ldr	r3, [r4, #8]
   e7550:	6850      	ldr	r0, [r2, #4]
   e7552:	685b      	ldr	r3, [r3, #4]
}
   e7554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtod(s, nullptr);
   e7558:	2100      	movs	r1, #0
   e755a:	4418      	add	r0, r3
   e755c:	f002 bb16 	b.w	e9b8c <strtod>
        const char* const s = d_->json + t_->start;
   e7560:	6822      	ldr	r2, [r4, #0]
   e7562:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   e7564:	6852      	ldr	r2, [r2, #4]
   e7566:	685b      	ldr	r3, [r3, #4]
   e7568:	5cd3      	ldrb	r3, [r2, r3]
   e756a:	2b74      	cmp	r3, #116	; 0x74
   e756c:	d002      	beq.n	e7574 <_ZNK5spark9JSONValue8toDoubleEv+0x3c>
    switch (type()) {
   e756e:	ed9f 0b04 	vldr	d0, [pc, #16]	; e7580 <_ZNK5spark9JSONValue8toDoubleEv+0x48>
}
   e7572:	bd10      	pop	{r4, pc}
        return *s == 't';
   e7574:	ed9f 0b04 	vldr	d0, [pc, #16]	; e7588 <_ZNK5spark9JSONValue8toDoubleEv+0x50>
   e7578:	e7fb      	b.n	e7572 <_ZNK5spark9JSONValue8toDoubleEv+0x3a>
   e757a:	bf00      	nop
   e757c:	f3af 8000 	nop.w
	...
   e758c:	3ff00000 	.word	0x3ff00000

000e7590 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
        return JSONValue();
    }
    return JSONValue(d->tokens, d);
}

bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   e7590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e7594:	b086      	sub	sp, #24
   e7596:	4607      	mov	r7, r0
   e7598:	4688      	mov	r8, r1
    jsmn_parser parser;
    parser.size = sizeof(jsmn_parser);
    jsmn_init(&parser, nullptr);
   e759a:	a802      	add	r0, sp, #8
   e759c:	2100      	movs	r1, #0
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   e759e:	2400      	movs	r4, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   e75a0:	4699      	mov	r9, r3
    parser.size = sizeof(jsmn_parser);
   e75a2:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   e75a4:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   e75a6:	9302      	str	r3, [sp, #8]
    jsmn_init(&parser, nullptr);
   e75a8:	f7fe f948 	bl	e583c <jsmn_init>
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   e75ac:	e9cd 4400 	strd	r4, r4, [sp]
   e75b0:	4623      	mov	r3, r4
   e75b2:	4642      	mov	r2, r8
   e75b4:	4639      	mov	r1, r7
   e75b6:	a802      	add	r0, sp, #8
   e75b8:	f7fe f948 	bl	e584c <jsmn_parse>
    if (n <= 0) {
   e75bc:	1e06      	subs	r6, r0, #0
   e75be:	dd1e      	ble.n	e75fe <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x6e>
        return false; // Parsing error
    }
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   e75c0:	4910      	ldr	r1, [pc, #64]	; (e7604 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x74>)
   e75c2:	0130      	lsls	r0, r6, #4
   e75c4:	f000 fa63 	bl	e7a8e <_ZnajRKSt9nothrow_t>
    if (!t) {
   e75c8:	4605      	mov	r5, r0
   e75ca:	b190      	cbz	r0, e75f2 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x62>
        return false;
    }
    jsmn_init(&parser, nullptr); // Reset parser
   e75cc:	4621      	mov	r1, r4
   e75ce:	a802      	add	r0, sp, #8
   e75d0:	f7fe f934 	bl	e583c <jsmn_init>
    if (jsmn_parse(&parser, json, size, t.get(), n, nullptr) <= 0) {
   e75d4:	e9cd 6400 	strd	r6, r4, [sp]
   e75d8:	462b      	mov	r3, r5
   e75da:	4642      	mov	r2, r8
   e75dc:	4639      	mov	r1, r7
   e75de:	a802      	add	r0, sp, #8
   e75e0:	f7fe f934 	bl	e584c <jsmn_parse>
   e75e4:	42a0      	cmp	r0, r4
   e75e6:	dd07      	ble.n	e75f8 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x68>
        return false;
    }
    *tokens = t.release();
   e75e8:	f8ca 5000 	str.w	r5, [sl]
    *count = n;
    return true;
   e75ec:	2001      	movs	r0, #1
    *count = n;
   e75ee:	f8c9 6000 	str.w	r6, [r9]
}
   e75f2:	b006      	add	sp, #24
   e75f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
	operator()(_Up* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   e75f8:	4628      	mov	r0, r5
   e75fa:	f7ec fd52 	bl	d40a2 <_ZdaPv>
      }
   e75fe:	4620      	mov	r0, r4
   e7600:	e7f7      	b.n	e75f2 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x62>
   e7602:	bf00      	nop
   e7604:	000edb84 	.word	0x000edb84

000e7608 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
        ++t;
    }
    return true;
}

bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   e7608:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   e760c:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   e760e:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   e7610:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   e7612:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   e7614:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   e7616:	4607      	mov	r7, r0
    const char *s1 = str; // Beginning of an unescaped sequence
    const char *s = s1;
   e7618:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   e761a:	4619      	mov	r1, r3
                    break;
                case 'f': // Form feed
                    *str = 0x0c;
                    break;
                case 'r': // Carriage return
                    *str = 0x0d;
   e761c:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   e7620:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   e7624:	42b4      	cmp	r4, r6
   e7626:	d063      	beq.n	e76f0 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
        if (*s == '\\') {
   e7628:	4625      	mov	r5, r4
   e762a:	f815 2b01 	ldrb.w	r2, [r5], #1
   e762e:	2a5c      	cmp	r2, #92	; 0x5c
   e7630:	d12b      	bne.n	e768a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   e7632:	42a1      	cmp	r1, r4
   e7634:	d007      	beq.n	e7646 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   e7636:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   e763a:	4618      	mov	r0, r3
   e763c:	465a      	mov	r2, fp
   e763e:	f001 fbe3 	bl	e8e08 <memmove>
   e7642:	4603      	mov	r3, r0
                str += n;
   e7644:	445b      	add	r3, fp
            if (s == end) {
   e7646:	42b5      	cmp	r5, r6
   e7648:	d039      	beq.n	e76be <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   e764a:	7862      	ldrb	r2, [r4, #1]
   e764c:	2a75      	cmp	r2, #117	; 0x75
   e764e:	d12a      	bne.n	e76a6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   e7650:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   e7652:	1ab2      	subs	r2, r6, r2
   e7654:	2a03      	cmp	r2, #3
   e7656:	dd32      	ble.n	e76be <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   e7658:	1da0      	adds	r0, r4, #6
   e765a:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   e765e:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   e7662:	45ae      	cmp	lr, r5
   e7664:	d053      	beq.n	e770e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   e7666:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   e766a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   e766e:	fa5f fb82 	uxtb.w	fp, r2
   e7672:	f1bb 0f09 	cmp.w	fp, #9
   e7676:	d905      	bls.n	e7684 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   e7678:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   e767c:	2a05      	cmp	r2, #5
   e767e:	d807      	bhi.n	e7690 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   e7680:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   e7684:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   e7688:	e7eb      	b.n	e7662 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
   e768a:	4628      	mov	r0, r5
   e768c:	4604      	mov	r4, r0
   e768e:	e7c9      	b.n	e7624 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   e7690:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   e7694:	2a05      	cmp	r2, #5
   e7696:	d812      	bhi.n	e76be <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   e7698:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   e769c:	e7f2      	b.n	e7684 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   e769e:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   e76a2:	4601      	mov	r1, r0
   e76a4:	e7f2      	b.n	e768c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   e76a6:	2a6e      	cmp	r2, #110	; 0x6e
   e76a8:	d01c      	beq.n	e76e4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   e76aa:	d80e      	bhi.n	e76ca <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   e76ac:	2a62      	cmp	r2, #98	; 0x62
   e76ae:	d013      	beq.n	e76d8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   e76b0:	d807      	bhi.n	e76c2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   e76b2:	2a2f      	cmp	r2, #47	; 0x2f
   e76b4:	d011      	beq.n	e76da <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   e76b6:	2a5c      	cmp	r2, #92	; 0x5c
   e76b8:	d00f      	beq.n	e76da <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   e76ba:	2a22      	cmp	r2, #34	; 0x22
   e76bc:	d00d      	beq.n	e76da <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   e76be:	2000      	movs	r0, #0
   e76c0:	e023      	b.n	e770a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   e76c2:	2a66      	cmp	r2, #102	; 0x66
   e76c4:	d1fb      	bne.n	e76be <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   e76c6:	220c      	movs	r2, #12
   e76c8:	e007      	b.n	e76da <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   e76ca:	2a72      	cmp	r2, #114	; 0x72
   e76cc:	d00d      	beq.n	e76ea <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   e76ce:	2a74      	cmp	r2, #116	; 0x74
   e76d0:	d1f5      	bne.n	e76be <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   e76d2:	f883 a000 	strb.w	sl, [r3]
                    break;
   e76d6:	e001      	b.n	e76dc <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   e76d8:	2208      	movs	r2, #8
   e76da:	701a      	strb	r2, [r3, #0]
                    break;
                default:
                    return false; // Invalid escaped sequence
                }
                ++str;
                ++s;
   e76dc:	1ca1      	adds	r1, r4, #2
                ++str;
   e76de:	3301      	adds	r3, #1
                ++s;
   e76e0:	4608      	mov	r0, r1
   e76e2:	e7d3      	b.n	e768c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   e76e4:	f04f 020a 	mov.w	r2, #10
   e76e8:	e7f7      	b.n	e76da <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   e76ea:	f883 9000 	strb.w	r9, [r3]
                    break;
   e76ee:	e7f5      	b.n	e76dc <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
            }
        } else {
            ++s;
        }
    }
    if (s != s1) {
   e76f0:	42a1      	cmp	r1, r4
   e76f2:	d006      	beq.n	e7702 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   e76f4:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   e76f6:	4618      	mov	r0, r3
   e76f8:	4622      	mov	r2, r4
   e76fa:	f001 fb85 	bl	e8e08 <memmove>
   e76fe:	4603      	mov	r3, r0
        str += n;
   e7700:	4423      	add	r3, r4
    }
    t->end = str - json; // Update string length
   e7702:	eba3 0308 	sub.w	r3, r3, r8
   e7706:	60bb      	str	r3, [r7, #8]
    return true;
   e7708:	2001      	movs	r0, #1
}
   e770a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   e770e:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   e7712:	d9c4      	bls.n	e769e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   e7714:	4621      	mov	r1, r4
   e7716:	e7b9      	b.n	e768c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000e7718 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   e7718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e771a:	4604      	mov	r4, r0
   e771c:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   e771e:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   e7722:	2700      	movs	r7, #0
    while (t != end) {
   e7724:	42b4      	cmp	r4, r6
   e7726:	d010      	beq.n	e774a <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   e7728:	7823      	ldrb	r3, [r4, #0]
   e772a:	2b03      	cmp	r3, #3
   e772c:	d108      	bne.n	e7740 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   e772e:	4629      	mov	r1, r5
   e7730:	4620      	mov	r0, r4
   e7732:	f7ff ff69 	bl	e7608 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   e7736:	b148      	cbz	r0, e774c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   e7738:	68a3      	ldr	r3, [r4, #8]
   e773a:	54ef      	strb	r7, [r5, r3]
        ++t;
   e773c:	3410      	adds	r4, #16
    while (t != end) {
   e773e:	e7f1      	b.n	e7724 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   e7740:	2b00      	cmp	r3, #0
   e7742:	d1fb      	bne.n	e773c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   e7744:	68a2      	ldr	r2, [r4, #8]
   e7746:	54ab      	strb	r3, [r5, r2]
   e7748:	e7f8      	b.n	e773c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   e774a:	2001      	movs	r0, #1
}
   e774c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000e7750 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   e7750:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   e7752:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   e7754:	e9c0 3300 	strd	r3, r3, [r0]
   e7758:	4604      	mov	r4, r0
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   e775a:	480e      	ldr	r0, [pc, #56]	; (e7794 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   e775c:	e9c4 0302 	strd	r0, r3, [r4, #8]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   e7760:	b1a9      	cbz	r1, e778e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   e7762:	780b      	ldrb	r3, [r1, #0]
   e7764:	2b03      	cmp	r3, #3
   e7766:	d006      	beq.n	e7776 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   e7768:	b98b      	cbnz	r3, e778e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   e776a:	6813      	ldr	r3, [r2, #0]
   e776c:	6858      	ldr	r0, [r3, #4]
   e776e:	684b      	ldr	r3, [r1, #4]
   e7770:	5cc3      	ldrb	r3, [r0, r3]
   e7772:	2b6e      	cmp	r3, #110	; 0x6e
   e7774:	d007      	beq.n	e7786 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   e7776:	6813      	ldr	r3, [r2, #0]
   e7778:	684d      	ldr	r5, [r1, #4]
   e777a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   e777c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   e777e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   e7780:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   e7782:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   e7784:	60e3      	str	r3, [r4, #12]
   e7786:	4611      	mov	r1, r2
   e7788:	4620      	mov	r0, r4
   e778a:	f7ff fe48 	bl	e741e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        }
        d_ = d;
    }
}
   e778e:	4620      	mov	r0, r4
   e7790:	bd38      	pop	{r3, r4, r5, pc}
   e7792:	bf00      	nop
   e7794:	000ebb9d 	.word	0x000ebb9d

000e7798 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   e7798:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   e779a:	2500      	movs	r5, #0
   e779c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   e779e:	e9c0 5500 	strd	r5, r5, [r0]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   e77a2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   e77a6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   e77aa:	4604      	mov	r4, r0
   e77ac:	4611      	mov	r1, r2
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   e77ae:	b14b      	cbz	r3, e77c4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   e77b0:	781a      	ldrb	r2, [r3, #0]
   e77b2:	2a01      	cmp	r2, #1
   e77b4:	d106      	bne.n	e77c4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   e77b6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   e77ba:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   e77bc:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   e77be:	6143      	str	r3, [r0, #20]
   e77c0:	f7ff fe2d 	bl	e741e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        d_ = d;
    }
}
   e77c4:	4620      	mov	r0, r4
   e77c6:	bd38      	pop	{r3, r4, r5, pc}

000e77c8 <_ZN5spark18JSONObjectIterator4nextEv>:

bool spark::JSONObjectIterator::next() {
   e77c8:	b510      	push	{r4, lr}
    if (!n_) {
   e77ca:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   e77cc:	4604      	mov	r4, r0
    if (!n_) {
   e77ce:	b163      	cbz	r3, e77ea <_ZN5spark18JSONObjectIterator4nextEv+0x22>
        return false;
    }
    k_ = t_; // Name
   e77d0:	6880      	ldr	r0, [r0, #8]
   e77d2:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   e77d4:	3b01      	subs	r3, #1
    ++t_;
   e77d6:	3010      	adds	r0, #16
   e77d8:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   e77da:	6120      	str	r0, [r4, #16]
    --n_;
   e77dc:	6163      	str	r3, [r4, #20]
    if (n_) {
   e77de:	b113      	cbz	r3, e77e6 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   e77e0:	f7ff fdd4 	bl	e738c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   e77e4:	60a0      	str	r0, [r4, #8]
    }
    return true;
   e77e6:	2001      	movs	r0, #1
   e77e8:	e000      	b.n	e77ec <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   e77ea:	4618      	mov	r0, r3
}
   e77ec:	bd10      	pop	{r4, pc}

000e77ee <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

// spark::JSONArrayIterator
spark::JSONArrayIterator::JSONArrayIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   e77ee:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   e77f0:	2500      	movs	r5, #0
   e77f2:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   e77f4:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   e77f8:	e9c0 5502 	strd	r5, r5, [r0, #8]
   e77fc:	4604      	mov	r4, r0
   e77fe:	4611      	mov	r1, r2
   e7800:	6105      	str	r5, [r0, #16]
        JSONArrayIterator() {
    if (t && t->type == JSMN_ARRAY) {
   e7802:	b14b      	cbz	r3, e7818 <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
   e7804:	781a      	ldrb	r2, [r3, #0]
   e7806:	2a02      	cmp	r2, #2
   e7808:	d106      	bne.n	e7818 <_ZN5spark17JSONArrayIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2a>
        t_ = t + 1; // First element
   e780a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of elements
   e780e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First element
   e7810:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of elements
   e7812:	6103      	str	r3, [r0, #16]
   e7814:	f7ff fe03 	bl	e741e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
        d_ = d;
    }
}
   e7818:	4620      	mov	r0, r4
   e781a:	bd38      	pop	{r3, r4, r5, pc}

000e781c <_ZN5spark17JSONArrayIterator4nextEv>:

bool spark::JSONArrayIterator::next() {
   e781c:	b510      	push	{r4, lr}
    if (!n_) {
   e781e:	6903      	ldr	r3, [r0, #16]
bool spark::JSONArrayIterator::next() {
   e7820:	4604      	mov	r4, r0
    if (!n_) {
   e7822:	b14b      	cbz	r3, e7838 <_ZN5spark17JSONArrayIterator4nextEv+0x1c>
        return false;
    }
    v_ = t_;
   e7824:	6880      	ldr	r0, [r0, #8]
   e7826:	60e0      	str	r0, [r4, #12]
    --n_;
   e7828:	3b01      	subs	r3, #1
   e782a:	6123      	str	r3, [r4, #16]
    if (n_) {
   e782c:	b113      	cbz	r3, e7834 <_ZN5spark17JSONArrayIterator4nextEv+0x18>
        t_ = skipToken(t_);
   e782e:	f7ff fdad 	bl	e738c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   e7832:	60a0      	str	r0, [r4, #8]
    }
    return true;
   e7834:	2001      	movs	r0, #1
   e7836:	e000      	b.n	e783a <_ZN5spark17JSONArrayIterator4nextEv+0x1e>
        return false;
   e7838:	4618      	mov	r0, r3
}
   e783a:	bd10      	pop	{r4, pc}

000e783c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   e783c:	b538      	push	{r3, r4, r5, lr}
   e783e:	2300      	movs	r3, #0
   e7840:	4604      	mov	r4, r0
   e7842:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   e7844:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   e7846:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   e7848:	f7ec fc25 	bl	d4096 <_Znwj>
   e784c:	b128      	cbz	r0, e785a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   e784e:	2301      	movs	r3, #1
   e7850:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   e7854:	4b02      	ldr	r3, [pc, #8]	; (e7860 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   e7856:	6003      	str	r3, [r0, #0]
   e7858:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   e785a:	6020      	str	r0, [r4, #0]
	}
   e785c:	4620      	mov	r0, r4
   e785e:	bd38      	pop	{r3, r4, r5, pc}
   e7860:	000edb70 	.word	0x000edb70

000e7864 <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   e7864:	b5f0      	push	{r4, r5, r6, r7, lr}
   e7866:	4604      	mov	r4, r0
   e7868:	b087      	sub	sp, #28
   e786a:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   e786c:	200c      	movs	r0, #12
   e786e:	4927      	ldr	r1, [pc, #156]	; (e790c <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   e7870:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   e7872:	f000 f90a 	bl	e7a8a <_ZnwjRKSt9nothrow_t>
   e7876:	4601      	mov	r1, r0
   e7878:	b118      	cbz	r0, e7882 <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   e787a:	2300      	movs	r3, #0
   e787c:	e9c0 3300 	strd	r3, r3, [r0]
   e7880:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   e7882:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   e7884:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   e7886:	f7ff ffd9 	bl	e783c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
    if (!d) {
   e788a:	9a02      	ldr	r2, [sp, #8]
   e788c:	b942      	cbnz	r2, e78a0 <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   e788e:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   e7892:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   e7894:	a803      	add	r0, sp, #12
   e7896:	f7ed f9ad 	bl	d4bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   e789a:	4620      	mov	r0, r4
   e789c:	b007      	add	sp, #28
   e789e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   e78a0:	2300      	movs	r3, #0
   e78a2:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   e78a4:	4629      	mov	r1, r5
   e78a6:	ab01      	add	r3, sp, #4
   e78a8:	4630      	mov	r0, r6
   e78aa:	f7ff fe71 	bl	e7590 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   e78ae:	b918      	cbnz	r0, e78b8 <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   e78b0:	e9c4 0000 	strd	r0, r0, [r4]
   e78b4:	60a0      	str	r0, [r4, #8]
}
   e78b6:	e7ed      	b.n	e7894 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   e78b8:	4914      	ldr	r1, [pc, #80]	; (e790c <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   e78ba:	9f02      	ldr	r7, [sp, #8]
   e78bc:	1c68      	adds	r0, r5, #1
   e78be:	f000 f8e6 	bl	e7a8e <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   e78c2:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
   e78c4:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   e78c6:	6858      	ldr	r0, [r3, #4]
   e78c8:	2800      	cmp	r0, #0
   e78ca:	d0f1      	beq.n	e78b0 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
   e78cc:	462a      	mov	r2, r5
   e78ce:	4631      	mov	r1, r6
   e78d0:	f001 fa8c 	bl	e8dec <memcpy>
   e78d4:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   e78d6:	9901      	ldr	r1, [sp, #4]
   e78d8:	6818      	ldr	r0, [r3, #0]
    d->freeJson = true;
   e78da:	2201      	movs	r2, #1
   e78dc:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   e78de:	685a      	ldr	r2, [r3, #4]
   e78e0:	f7ff ff1a 	bl	e7718 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   e78e4:	2800      	cmp	r0, #0
   e78e6:	d0e3      	beq.n	e78b0 <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
   e78e8:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   e78ea:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   e78ec:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   e78ee:	9b03      	ldr	r3, [sp, #12]
   e78f0:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   e78f2:	b113      	cbz	r3, e78fa <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   e78f4:	685a      	ldr	r2, [r3, #4]
   e78f6:	3201      	adds	r2, #1
   e78f8:	605a      	str	r2, [r3, #4]
   e78fa:	aa04      	add	r2, sp, #16
   e78fc:	4620      	mov	r0, r4
   e78fe:	f7ff fda5 	bl	e744c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   e7902:	a805      	add	r0, sp, #20
   e7904:	f7ed f976 	bl	d4bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   e7908:	e7c4      	b.n	e7894 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   e790a:	bf00      	nop
   e790c:	000edb84 	.word	0x000edb84

000e7910 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   e7910:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   e7912:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   e7914:	d902      	bls.n	e791c <pinAvailable+0xc>
    return false;
   e7916:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   e7918:	b002      	add	sp, #8
   e791a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   e791c:	f1a0 030b 	sub.w	r3, r0, #11
   e7920:	2b02      	cmp	r3, #2
   e7922:	d81a      	bhi.n	e795a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   e7924:	4c17      	ldr	r4, [pc, #92]	; (e7984 <pinAvailable+0x74>)
   e7926:	7821      	ldrb	r1, [r4, #0]
   e7928:	f3bf 8f5b 	dmb	ish
   e792c:	f011 0101 	ands.w	r1, r1, #1
   e7930:	d10b      	bne.n	e794a <pinAvailable+0x3a>
   e7932:	4620      	mov	r0, r4
   e7934:	9101      	str	r1, [sp, #4]
   e7936:	f7ec fbc1 	bl	d40bc <__cxa_guard_acquire>
   e793a:	9901      	ldr	r1, [sp, #4]
   e793c:	b128      	cbz	r0, e794a <pinAvailable+0x3a>
   e793e:	4812      	ldr	r0, [pc, #72]	; (e7988 <pinAvailable+0x78>)
   e7940:	f7fe f8b0 	bl	e5aa4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   e7944:	4620      	mov	r0, r4
   e7946:	f7ec fbbe 	bl	d40c6 <__cxa_guard_release>
   e794a:	4b0f      	ldr	r3, [pc, #60]	; (e7988 <pinAvailable+0x78>)
   e794c:	7818      	ldrb	r0, [r3, #0]
   e794e:	f7fd ff1d 	bl	e578c <hal_spi_is_enabled>
   e7952:	2800      	cmp	r0, #0
   e7954:	d1df      	bne.n	e7916 <pinAvailable+0x6>
  return true; // 'pin' is available
   e7956:	2001      	movs	r0, #1
   e7958:	e7de      	b.n	e7918 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   e795a:	2801      	cmp	r0, #1
   e795c:	d809      	bhi.n	e7972 <pinAvailable+0x62>
   e795e:	f000 f865 	bl	e7a2c <_Z19__fetch_global_Wirev>
   e7962:	2100      	movs	r1, #0
   e7964:	7c00      	ldrb	r0, [r0, #16]
   e7966:	f7fd fea1 	bl	e56ac <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   e796a:	f080 0001 	eor.w	r0, r0, #1
   e796e:	b2c0      	uxtb	r0, r0
   e7970:	e7d2      	b.n	e7918 <pinAvailable+0x8>
   e7972:	3809      	subs	r0, #9
   e7974:	2801      	cmp	r0, #1
   e7976:	d8ee      	bhi.n	e7956 <pinAvailable+0x46>
   e7978:	f7ff f8fc 	bl	e6b74 <_Z22__fetch_global_Serial1v>
   e797c:	7c00      	ldrb	r0, [r0, #16]
   e797e:	f7fd fe5d 	bl	e563c <hal_usart_is_enabled>
   e7982:	e7f2      	b.n	e796a <pinAvailable+0x5a>
   e7984:	2003e7c4 	.word	0x2003e7c4
   e7988:	2003e7c8 	.word	0x2003e7c8

000e798c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   e798c:	2823      	cmp	r0, #35	; 0x23
{
   e798e:	b538      	push	{r3, r4, r5, lr}
   e7990:	4604      	mov	r4, r0
   e7992:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   e7994:	d80a      	bhi.n	e79ac <pinMode+0x20>
   e7996:	29ff      	cmp	r1, #255	; 0xff
   e7998:	d008      	beq.n	e79ac <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   e799a:	f7ff ffb9 	bl	e7910 <pinAvailable>
   e799e:	b128      	cbz	r0, e79ac <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   e79a0:	4629      	mov	r1, r5
   e79a2:	4620      	mov	r0, r4
}
   e79a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   e79a8:	f7fd bda0 	b.w	e54ec <HAL_Pin_Mode>
}
   e79ac:	bd38      	pop	{r3, r4, r5, pc}

000e79ae <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   e79ae:	b538      	push	{r3, r4, r5, lr}
   e79b0:	4604      	mov	r4, r0
   e79b2:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   e79b4:	f7ff ffac 	bl	e7910 <pinAvailable>
   e79b8:	b1f0      	cbz	r0, e79f8 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   e79ba:	2104      	movs	r1, #4
   e79bc:	4620      	mov	r0, r4
   e79be:	f7fd fd8d 	bl	e54dc <HAL_Validate_Pin_Function>
   e79c2:	2804      	cmp	r0, #4
   e79c4:	d105      	bne.n	e79d2 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   e79c6:	b2a9      	uxth	r1, r5
   e79c8:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   e79ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   e79ce:	f7fd bd9d 	b.w	e550c <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   e79d2:	2102      	movs	r1, #2
   e79d4:	4620      	mov	r0, r4
   e79d6:	f7fd fd81 	bl	e54dc <HAL_Validate_Pin_Function>
   e79da:	2802      	cmp	r0, #2
   e79dc:	d10c      	bne.n	e79f8 <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   e79de:	4620      	mov	r0, r4
   e79e0:	f7fd fd8c 	bl	e54fc <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   e79e4:	2801      	cmp	r0, #1
   e79e6:	d001      	beq.n	e79ec <_Z11analogWritetm+0x3e>
   e79e8:	2804      	cmp	r0, #4
   e79ea:	d105      	bne.n	e79f8 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   e79ec:	4629      	mov	r1, r5
   e79ee:	4620      	mov	r0, r4
}
   e79f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   e79f4:	f7fd bd92 	b.w	e551c <hal_pwm_write_ext>
}
   e79f8:	bd38      	pop	{r3, r4, r5, pc}
	...

000e79fc <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   e79fc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   e79fe:	2300      	movs	r3, #0
   e7a00:	2520      	movs	r5, #32
   e7a02:	8043      	strh	r3, [r0, #2]
   e7a04:	2314      	movs	r3, #20
{
   e7a06:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   e7a08:	8003      	strh	r3, [r0, #0]
   e7a0a:	6085      	str	r5, [r0, #8]
   e7a0c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   e7a0e:	4906      	ldr	r1, [pc, #24]	; (e7a28 <_Z17acquireWireBufferv+0x2c>)
   e7a10:	4628      	mov	r0, r5
   e7a12:	f000 f83c 	bl	e7a8e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   e7a16:	4904      	ldr	r1, [pc, #16]	; (e7a28 <_Z17acquireWireBufferv+0x2c>)
	};
   e7a18:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   e7a1a:	4628      	mov	r0, r5
   e7a1c:	f000 f837 	bl	e7a8e <_ZnajRKSt9nothrow_t>
	};
   e7a20:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   e7a22:	4620      	mov	r0, r4
   e7a24:	bd38      	pop	{r3, r4, r5, pc}
   e7a26:	bf00      	nop
   e7a28:	000edb84 	.word	0x000edb84

000e7a2c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   e7a2c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   e7a2e:	4d0f      	ldr	r5, [pc, #60]	; (e7a6c <_Z19__fetch_global_Wirev+0x40>)
   e7a30:	7829      	ldrb	r1, [r5, #0]
   e7a32:	f3bf 8f5b 	dmb	ish
   e7a36:	f011 0401 	ands.w	r4, r1, #1
{
   e7a3a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   e7a3c:	d113      	bne.n	e7a66 <_Z19__fetch_global_Wirev+0x3a>
   e7a3e:	4628      	mov	r0, r5
   e7a40:	f7ec fb3c 	bl	d40bc <__cxa_guard_acquire>
   e7a44:	b178      	cbz	r0, e7a66 <_Z19__fetch_global_Wirev+0x3a>
   e7a46:	a801      	add	r0, sp, #4
   e7a48:	f7ff ffd8 	bl	e79fc <_Z17acquireWireBufferv>
   e7a4c:	aa01      	add	r2, sp, #4
   e7a4e:	4621      	mov	r1, r4
   e7a50:	4807      	ldr	r0, [pc, #28]	; (e7a70 <_Z19__fetch_global_Wirev+0x44>)
   e7a52:	f7ff f8e5 	bl	e6c20 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   e7a56:	4628      	mov	r0, r5
   e7a58:	f7ec fb35 	bl	d40c6 <__cxa_guard_release>
   e7a5c:	4a05      	ldr	r2, [pc, #20]	; (e7a74 <_Z19__fetch_global_Wirev+0x48>)
   e7a5e:	4906      	ldr	r1, [pc, #24]	; (e7a78 <_Z19__fetch_global_Wirev+0x4c>)
   e7a60:	4803      	ldr	r0, [pc, #12]	; (e7a70 <_Z19__fetch_global_Wirev+0x44>)
   e7a62:	f000 f80b 	bl	e7a7c <__aeabi_atexit>
	return wire;
}
   e7a66:	4802      	ldr	r0, [pc, #8]	; (e7a70 <_Z19__fetch_global_Wirev+0x44>)
   e7a68:	b007      	add	sp, #28
   e7a6a:	bd30      	pop	{r4, r5, pc}
   e7a6c:	2003e7d4 	.word	0x2003e7d4
   e7a70:	2003e7d8 	.word	0x2003e7d8
   e7a74:	2003ae28 	.word	0x2003ae28
   e7a78:	000e6bc9 	.word	0x000e6bc9

000e7a7c <__aeabi_atexit>:
   e7a7c:	460b      	mov	r3, r1
   e7a7e:	4601      	mov	r1, r0
   e7a80:	4618      	mov	r0, r3
   e7a82:	f001 b943 	b.w	e8d0c <__cxa_atexit>

000e7a86 <_ZdlPvj>:
   e7a86:	f7ec bb0a 	b.w	d409e <_ZdlPv>

000e7a8a <_ZnwjRKSt9nothrow_t>:
   e7a8a:	f7ec bb04 	b.w	d4096 <_Znwj>

000e7a8e <_ZnajRKSt9nothrow_t>:
   e7a8e:	f7ec bb04 	b.w	d409a <_Znaj>

000e7a92 <_ZSt17__throw_bad_allocv>:
   e7a92:	b508      	push	{r3, lr}
   e7a94:	f7fd ffa8 	bl	e59e8 <abort>

000e7a98 <_ZSt19__throw_logic_errorPKc>:
   e7a98:	b508      	push	{r3, lr}
   e7a9a:	f7fd ffa5 	bl	e59e8 <abort>

000e7a9e <_ZSt20__throw_length_errorPKc>:
   e7a9e:	b508      	push	{r3, lr}
   e7aa0:	f7fd ffa2 	bl	e59e8 <abort>

000e7aa4 <_ZSt24__throw_out_of_range_fmtPKcz>:
   e7aa4:	b40f      	push	{r0, r1, r2, r3}
   e7aa6:	b580      	push	{r7, lr}
   e7aa8:	b084      	sub	sp, #16
   e7aaa:	af00      	add	r7, sp, #0
   e7aac:	f107 0418 	add.w	r4, r7, #24
   e7ab0:	f854 2b04 	ldr.w	r2, [r4], #4
   e7ab4:	607a      	str	r2, [r7, #4]
   e7ab6:	4610      	mov	r0, r2
   e7ab8:	f001 fa0e 	bl	e8ed8 <strlen>
   e7abc:	f200 2307 	addw	r3, r0, #519	; 0x207
   e7ac0:	f023 0307 	bic.w	r3, r3, #7
   e7ac4:	ebad 0d03 	sub.w	sp, sp, r3
   e7ac8:	f500 7100 	add.w	r1, r0, #512	; 0x200
   e7acc:	687a      	ldr	r2, [r7, #4]
   e7ace:	60fc      	str	r4, [r7, #12]
   e7ad0:	4623      	mov	r3, r4
   e7ad2:	4668      	mov	r0, sp
   e7ad4:	f000 f85a 	bl	e7b8c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   e7ad8:	f7fd ff86 	bl	e59e8 <abort>

000e7adc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   e7adc:	4901      	ldr	r1, [pc, #4]	; (e7ae4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   e7ade:	f000 baa5 	b.w	e802c <_ZNKSt9type_infoeqERKS_>
   e7ae2:	bf00      	nop
   e7ae4:	000edba0 	.word	0x000edba0

000e7ae8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   e7ae8:	b580      	push	{r7, lr}
   e7aea:	b09c      	sub	sp, #112	; 0x70
   e7aec:	4606      	mov	r6, r0
   e7aee:	af00      	add	r7, sp, #0
   e7af0:	460c      	mov	r4, r1
   e7af2:	1ba4      	subs	r4, r4, r6
   e7af4:	490e      	ldr	r1, [pc, #56]	; (e7b30 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   e7af6:	2269      	movs	r2, #105	; 0x69
   e7af8:	1d38      	adds	r0, r7, #4
   e7afa:	f001 f977 	bl	e8dec <memcpy>
   e7afe:	f104 0370 	add.w	r3, r4, #112	; 0x70
   e7b02:	f023 0307 	bic.w	r3, r3, #7
   e7b06:	ebad 0d03 	sub.w	sp, sp, r3
   e7b0a:	466d      	mov	r5, sp
   e7b0c:	2268      	movs	r2, #104	; 0x68
   e7b0e:	1d39      	adds	r1, r7, #4
   e7b10:	4628      	mov	r0, r5
   e7b12:	f001 f96b 	bl	e8dec <memcpy>
   e7b16:	4622      	mov	r2, r4
   e7b18:	4631      	mov	r1, r6
   e7b1a:	f105 0068 	add.w	r0, r5, #104	; 0x68
   e7b1e:	442c      	add	r4, r5
   e7b20:	f001 f964 	bl	e8dec <memcpy>
   e7b24:	2300      	movs	r3, #0
   e7b26:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   e7b2a:	4628      	mov	r0, r5
   e7b2c:	f7ff ffb4 	bl	e7a98 <_ZSt19__throw_logic_errorPKc>
   e7b30:	000edba8 	.word	0x000edba8

000e7b34 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   e7b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e7b38:	af00      	add	r7, sp, #0
   e7b3a:	b084      	sub	sp, #16
   e7b3c:	466d      	mov	r5, sp
   e7b3e:	f105 040c 	add.w	r4, r5, #12
   e7b42:	f8df 8044 	ldr.w	r8, [pc, #68]	; e7b88 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   e7b46:	4623      	mov	r3, r4
   e7b48:	f04f 0c0a 	mov.w	ip, #10
   e7b4c:	fbb2 f6fc 	udiv	r6, r2, ip
   e7b50:	fb0c 2e16 	mls	lr, ip, r6, r2
   e7b54:	f818 e00e 	ldrb.w	lr, [r8, lr]
   e7b58:	f803 ed01 	strb.w	lr, [r3, #-1]!
   e7b5c:	4696      	mov	lr, r2
   e7b5e:	f1be 0f09 	cmp.w	lr, #9
   e7b62:	4632      	mov	r2, r6
   e7b64:	d8f2      	bhi.n	e7b4c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   e7b66:	1ae4      	subs	r4, r4, r3
   e7b68:	428c      	cmp	r4, r1
   e7b6a:	d809      	bhi.n	e7b80 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   e7b6c:	f1c4 010c 	rsb	r1, r4, #12
   e7b70:	4622      	mov	r2, r4
   e7b72:	4429      	add	r1, r5
   e7b74:	f001 f93a 	bl	e8dec <memcpy>
   e7b78:	4620      	mov	r0, r4
   e7b7a:	46bd      	mov	sp, r7
   e7b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e7b80:	f04f 34ff 	mov.w	r4, #4294967295
   e7b84:	e7f8      	b.n	e7b78 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   e7b86:	bf00      	nop
   e7b88:	000edc11 	.word	0x000edc11

000e7b8c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   e7b8c:	3901      	subs	r1, #1
   e7b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e7b92:	4607      	mov	r7, r0
   e7b94:	4615      	mov	r5, r2
   e7b96:	eb00 0801 	add.w	r8, r0, r1
   e7b9a:	4604      	mov	r4, r0
   e7b9c:	782a      	ldrb	r2, [r5, #0]
   e7b9e:	b362      	cbz	r2, e7bfa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   e7ba0:	4544      	cmp	r4, r8
   e7ba2:	d22e      	bcs.n	e7c02 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   e7ba4:	2a25      	cmp	r2, #37	; 0x25
   e7ba6:	d107      	bne.n	e7bb8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   e7ba8:	786a      	ldrb	r2, [r5, #1]
   e7baa:	2a73      	cmp	r2, #115	; 0x73
   e7bac:	d009      	beq.n	e7bc2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   e7bae:	2a7a      	cmp	r2, #122	; 0x7a
   e7bb0:	d012      	beq.n	e7bd8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   e7bb2:	2a25      	cmp	r2, #37	; 0x25
   e7bb4:	d100      	bne.n	e7bb8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   e7bb6:	3501      	adds	r5, #1
   e7bb8:	f815 2b01 	ldrb.w	r2, [r5], #1
   e7bbc:	f804 2b01 	strb.w	r2, [r4], #1
   e7bc0:	e7ec      	b.n	e7b9c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   e7bc2:	f853 2b04 	ldr.w	r2, [r3], #4
   e7bc6:	3a01      	subs	r2, #1
   e7bc8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   e7bcc:	b1e9      	cbz	r1, e7c0a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7e>
   e7bce:	4544      	cmp	r4, r8
   e7bd0:	d017      	beq.n	e7c02 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   e7bd2:	f804 1b01 	strb.w	r1, [r4], #1
   e7bd6:	e7f7      	b.n	e7bc8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   e7bd8:	78aa      	ldrb	r2, [r5, #2]
   e7bda:	2a75      	cmp	r2, #117	; 0x75
   e7bdc:	d1ec      	bne.n	e7bb8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   e7bde:	461e      	mov	r6, r3
   e7be0:	eba8 0104 	sub.w	r1, r8, r4
   e7be4:	f856 2b04 	ldr.w	r2, [r6], #4
   e7be8:	4620      	mov	r0, r4
   e7bea:	f7ff ffa3 	bl	e7b34 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   e7bee:	2800      	cmp	r0, #0
   e7bf0:	dd07      	ble.n	e7c02 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   e7bf2:	4404      	add	r4, r0
   e7bf4:	3503      	adds	r5, #3
   e7bf6:	4633      	mov	r3, r6
   e7bf8:	e7d0      	b.n	e7b9c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   e7bfa:	7022      	strb	r2, [r4, #0]
   e7bfc:	1be0      	subs	r0, r4, r7
   e7bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e7c02:	4621      	mov	r1, r4
   e7c04:	4638      	mov	r0, r7
   e7c06:	f7ff ff6f 	bl	e7ae8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   e7c0a:	3502      	adds	r5, #2
   e7c0c:	e7c6      	b.n	e7b9c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>

000e7c0e <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
   e7c0e:	b10a      	cbz	r2, e7c14 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
   e7c10:	f001 b8de 	b.w	e8dd0 <memcmp>
   e7c14:	4610      	mov	r0, r2
   e7c16:	4770      	bx	lr

000e7c18 <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
   e7c18:	4613      	mov	r3, r2
   e7c1a:	460a      	mov	r2, r1
   e7c1c:	b111      	cbz	r1, e7c24 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
   e7c1e:	7819      	ldrb	r1, [r3, #0]
   e7c20:	f001 b886 	b.w	e8d30 <memchr>
   e7c24:	4608      	mov	r0, r1
   e7c26:	4770      	bx	lr

000e7c28 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
   e7c28:	b10a      	cbz	r2, e7c2e <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
   e7c2a:	f001 b8df 	b.w	e8dec <memcpy>
   e7c2e:	4770      	bx	lr

000e7c30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   e7c30:	b508      	push	{r3, lr}
   e7c32:	680b      	ldr	r3, [r1, #0]
   e7c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   e7c38:	d302      	bcc.n	e7c40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   e7c3a:	480d      	ldr	r0, [pc, #52]	; (e7c70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   e7c3c:	f7ff ff2f 	bl	e7a9e <_ZSt20__throw_length_errorPKc>
   e7c40:	4293      	cmp	r3, r2
   e7c42:	d90b      	bls.n	e7c5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   e7c44:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   e7c48:	ea4f 0042 	mov.w	r0, r2, lsl #1
   e7c4c:	d206      	bcs.n	e7c5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   e7c4e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   e7c52:	bf2a      	itet	cs
   e7c54:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   e7c58:	6008      	strcc	r0, [r1, #0]
   e7c5a:	600b      	strcs	r3, [r1, #0]
   e7c5c:	6808      	ldr	r0, [r1, #0]
   e7c5e:	3001      	adds	r0, #1
   e7c60:	d501      	bpl.n	e7c66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   e7c62:	f7ff ff16 	bl	e7a92 <_ZSt17__throw_bad_allocv>
   e7c66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   e7c6a:	f7ec ba14 	b.w	d4096 <_Znwj>
   e7c6e:	bf00      	nop
   e7c70:	000edc1c 	.word	0x000edc1c

000e7c74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   e7c74:	f850 3b08 	ldr.w	r3, [r0], #8
   e7c78:	4283      	cmp	r3, r0
   e7c7a:	d002      	beq.n	e7c82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   e7c7c:	4618      	mov	r0, r3
   e7c7e:	f7ec ba0e 	b.w	d409e <_ZdlPv>
   e7c82:	4770      	bx	lr

000e7c84 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
   e7c84:	b508      	push	{r3, lr}
   e7c86:	4603      	mov	r3, r0
   e7c88:	4608      	mov	r0, r1
   e7c8a:	685b      	ldr	r3, [r3, #4]
   e7c8c:	4298      	cmp	r0, r3
   e7c8e:	4611      	mov	r1, r2
   e7c90:	d903      	bls.n	e7c9a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
   e7c92:	4602      	mov	r2, r0
   e7c94:	4801      	ldr	r0, [pc, #4]	; (e7c9c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
   e7c96:	f7ff ff05 	bl	e7aa4 <_ZSt24__throw_out_of_range_fmtPKcz>
   e7c9a:	bd08      	pop	{r3, pc}
   e7c9c:	000edc34 	.word	0x000edc34

000e7ca0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   e7ca0:	2a01      	cmp	r2, #1
   e7ca2:	b510      	push	{r4, lr}
   e7ca4:	d102      	bne.n	e7cac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
   e7ca6:	780a      	ldrb	r2, [r1, #0]
   e7ca8:	7002      	strb	r2, [r0, #0]
   e7caa:	bd10      	pop	{r4, pc}
   e7cac:	f7ff ffbc 	bl	e7c28 <_ZNSt11char_traitsIcE4copyEPcPKcj>
   e7cb0:	e7fb      	b.n	e7caa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

000e7cb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   e7cb2:	b508      	push	{r3, lr}
   e7cb4:	1a52      	subs	r2, r2, r1
   e7cb6:	f7ff fff3 	bl	e7ca0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   e7cba:	bd08      	pop	{r3, pc}

000e7cbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
   e7cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e7cbe:	460d      	mov	r5, r1
   e7cc0:	f851 3b08 	ldr.w	r3, [r1], #8
   e7cc4:	686a      	ldr	r2, [r5, #4]
   e7cc6:	4299      	cmp	r1, r3
   e7cc8:	4604      	mov	r4, r0
   e7cca:	6800      	ldr	r0, [r0, #0]
   e7ccc:	d10d      	bne.n	e7cea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
   e7cce:	b10a      	cbz	r2, e7cd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x18>
   e7cd0:	f7ff ffe6 	bl	e7ca0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   e7cd4:	686b      	ldr	r3, [r5, #4]
   e7cd6:	6822      	ldr	r2, [r4, #0]
   e7cd8:	6063      	str	r3, [r4, #4]
   e7cda:	2100      	movs	r1, #0
   e7cdc:	54d1      	strb	r1, [r2, r3]
   e7cde:	682a      	ldr	r2, [r5, #0]
   e7ce0:	2300      	movs	r3, #0
   e7ce2:	606b      	str	r3, [r5, #4]
   e7ce4:	7013      	strb	r3, [r2, #0]
   e7ce6:	4620      	mov	r0, r4
   e7ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   e7cea:	e9c4 3200 	strd	r3, r2, [r4]
   e7cee:	f104 0708 	add.w	r7, r4, #8
   e7cf2:	42b8      	cmp	r0, r7
   e7cf4:	68ab      	ldr	r3, [r5, #8]
   e7cf6:	bf18      	it	ne
   e7cf8:	68a6      	ldrne	r6, [r4, #8]
   e7cfa:	60a3      	str	r3, [r4, #8]
   e7cfc:	bf08      	it	eq
   e7cfe:	2000      	moveq	r0, #0
   e7d00:	b110      	cbz	r0, e7d08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x4c>
   e7d02:	6028      	str	r0, [r5, #0]
   e7d04:	60ae      	str	r6, [r5, #8]
   e7d06:	e7ea      	b.n	e7cde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>
   e7d08:	6029      	str	r1, [r5, #0]
   e7d0a:	e7e8      	b.n	e7cde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>

000e7d0c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>:
   e7d0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e7d10:	460e      	mov	r6, r1
   e7d12:	461d      	mov	r5, r3
   e7d14:	6841      	ldr	r1, [r0, #4]
   e7d16:	b923      	cbnz	r3, e7d22 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x16>
   e7d18:	4291      	cmp	r1, r2
   e7d1a:	d221      	bcs.n	e7d60 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
   e7d1c:	f04f 32ff 	mov.w	r2, #4294967295
   e7d20:	e01e      	b.n	e7d60 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
   e7d22:	4291      	cmp	r1, r2
   e7d24:	d9fa      	bls.n	e7d1c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   e7d26:	f8d0 8000 	ldr.w	r8, [r0]
   e7d2a:	7833      	ldrb	r3, [r6, #0]
   e7d2c:	f88d 3007 	strb.w	r3, [sp, #7]
   e7d30:	eb08 0701 	add.w	r7, r8, r1
   e7d34:	eb08 0002 	add.w	r0, r8, r2
   e7d38:	1a89      	subs	r1, r1, r2
   e7d3a:	f1c5 0901 	rsb	r9, r5, #1
   e7d3e:	42a9      	cmp	r1, r5
   e7d40:	d3ec      	bcc.n	e7d1c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   e7d42:	f10d 0207 	add.w	r2, sp, #7
   e7d46:	4449      	add	r1, r9
   e7d48:	f7ff ff66 	bl	e7c18 <_ZNSt11char_traitsIcE4findEPKcjRS1_>
   e7d4c:	4604      	mov	r4, r0
   e7d4e:	2800      	cmp	r0, #0
   e7d50:	d0e4      	beq.n	e7d1c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   e7d52:	462a      	mov	r2, r5
   e7d54:	4631      	mov	r1, r6
   e7d56:	f7ff ff5a 	bl	e7c0e <_ZNSt11char_traitsIcE7compareEPKcS2_j>
   e7d5a:	b928      	cbnz	r0, e7d68 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x5c>
   e7d5c:	eba4 0208 	sub.w	r2, r4, r8
   e7d60:	4610      	mov	r0, r2
   e7d62:	b003      	add	sp, #12
   e7d64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e7d68:	1c60      	adds	r0, r4, #1
   e7d6a:	1a39      	subs	r1, r7, r0
   e7d6c:	e7e7      	b.n	e7d3e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x32>

000e7d6e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>:
   e7d6e:	b513      	push	{r0, r1, r4, lr}
   e7d70:	4604      	mov	r4, r0
   e7d72:	4608      	mov	r0, r1
   e7d74:	9201      	str	r2, [sp, #4]
   e7d76:	9100      	str	r1, [sp, #0]
   e7d78:	f001 f8ae 	bl	e8ed8 <strlen>
   e7d7c:	e9dd 1200 	ldrd	r1, r2, [sp]
   e7d80:	4603      	mov	r3, r0
   e7d82:	4620      	mov	r0, r4
   e7d84:	f7ff ffc2 	bl	e7d0c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
   e7d88:	b002      	add	sp, #8
   e7d8a:	bd10      	pop	{r4, pc}

000e7d8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
   e7d8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   e7d8e:	4604      	mov	r4, r0
   e7d90:	4616      	mov	r6, r2
   e7d92:	460d      	mov	r5, r1
   e7d94:	b919      	cbnz	r1, e7d9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
   e7d96:	b112      	cbz	r2, e7d9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
   e7d98:	480d      	ldr	r0, [pc, #52]	; (e7dd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
   e7d9a:	f7ff fe7d 	bl	e7a98 <_ZSt19__throw_logic_errorPKc>
   e7d9e:	1b73      	subs	r3, r6, r5
   e7da0:	2b0f      	cmp	r3, #15
   e7da2:	9301      	str	r3, [sp, #4]
   e7da4:	d907      	bls.n	e7db6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
   e7da6:	2200      	movs	r2, #0
   e7da8:	a901      	add	r1, sp, #4
   e7daa:	4620      	mov	r0, r4
   e7dac:	f7ff ff40 	bl	e7c30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   e7db0:	9b01      	ldr	r3, [sp, #4]
   e7db2:	6020      	str	r0, [r4, #0]
   e7db4:	60a3      	str	r3, [r4, #8]
   e7db6:	4632      	mov	r2, r6
   e7db8:	4629      	mov	r1, r5
   e7dba:	6820      	ldr	r0, [r4, #0]
   e7dbc:	f7ff ff79 	bl	e7cb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
   e7dc0:	9b01      	ldr	r3, [sp, #4]
   e7dc2:	6822      	ldr	r2, [r4, #0]
   e7dc4:	6063      	str	r3, [r4, #4]
   e7dc6:	2100      	movs	r1, #0
   e7dc8:	54d1      	strb	r1, [r2, r3]
   e7dca:	b002      	add	sp, #8
   e7dcc:	bd70      	pop	{r4, r5, r6, pc}
   e7dce:	bf00      	nop
   e7dd0:	000eb727 	.word	0x000eb727

000e7dd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
   e7dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e7dd8:	460d      	mov	r5, r1
   e7dda:	4617      	mov	r7, r2
   e7ddc:	4698      	mov	r8, r3
   e7dde:	f100 0308 	add.w	r3, r0, #8
   e7de2:	4604      	mov	r4, r0
   e7de4:	6003      	str	r3, [r0, #0]
   e7de6:	4639      	mov	r1, r7
   e7de8:	4a0a      	ldr	r2, [pc, #40]	; (e7e14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x40>)
   e7dea:	4628      	mov	r0, r5
   e7dec:	f7ff ff4a 	bl	e7c84 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
   e7df0:	682e      	ldr	r6, [r5, #0]
   e7df2:	686a      	ldr	r2, [r5, #4]
   e7df4:	1831      	adds	r1, r6, r0
   e7df6:	1bd2      	subs	r2, r2, r7
   e7df8:	4620      	mov	r0, r4
   e7dfa:	f04f 0300 	mov.w	r3, #0
   e7dfe:	4542      	cmp	r2, r8
   e7e00:	bf94      	ite	ls
   e7e02:	188a      	addls	r2, r1, r2
   e7e04:	eb01 0208 	addhi.w	r2, r1, r8
   e7e08:	f7ff ffc0 	bl	e7d8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
   e7e0c:	4620      	mov	r0, r4
   e7e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e7e12:	bf00      	nop
   e7e14:	000edc6b 	.word	0x000edc6b

000e7e18 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
   e7e18:	b537      	push	{r0, r1, r2, r4, r5, lr}
   e7e1a:	460d      	mov	r5, r1
   e7e1c:	4604      	mov	r4, r0
   e7e1e:	4611      	mov	r1, r2
   e7e20:	4628      	mov	r0, r5
   e7e22:	4a06      	ldr	r2, [pc, #24]	; (e7e3c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
   e7e24:	9301      	str	r3, [sp, #4]
   e7e26:	f7ff ff2d 	bl	e7c84 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
   e7e2a:	9b01      	ldr	r3, [sp, #4]
   e7e2c:	4602      	mov	r2, r0
   e7e2e:	4629      	mov	r1, r5
   e7e30:	4620      	mov	r0, r4
   e7e32:	f7ff ffcf 	bl	e7dd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
   e7e36:	4620      	mov	r0, r4
   e7e38:	b003      	add	sp, #12
   e7e3a:	bd30      	pop	{r4, r5, pc}
   e7e3c:	000edc86 	.word	0x000edc86

000e7e40 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   e7e40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   e7e42:	2400      	movs	r4, #0
   e7e44:	2310      	movs	r3, #16
   e7e46:	e9cd 3402 	strd	r3, r4, [sp, #8]
   e7e4a:	6803      	ldr	r3, [r0, #0]
   e7e4c:	9400      	str	r4, [sp, #0]
   e7e4e:	699e      	ldr	r6, [r3, #24]
   e7e50:	f88d 4004 	strb.w	r4, [sp, #4]
   e7e54:	4615      	mov	r5, r2
   e7e56:	466b      	mov	r3, sp
   e7e58:	6812      	ldr	r2, [r2, #0]
   e7e5a:	47b0      	blx	r6
   e7e5c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   e7e60:	f003 0306 	and.w	r3, r3, #6
   e7e64:	2b06      	cmp	r3, #6
   e7e66:	bf03      	ittte	eq
   e7e68:	9b00      	ldreq	r3, [sp, #0]
   e7e6a:	602b      	streq	r3, [r5, #0]
   e7e6c:	2001      	moveq	r0, #1
   e7e6e:	4620      	movne	r0, r4
   e7e70:	b004      	add	sp, #16
   e7e72:	bd70      	pop	{r4, r5, r6, pc}

000e7e74 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   e7e74:	9800      	ldr	r0, [sp, #0]
   e7e76:	4290      	cmp	r0, r2
   e7e78:	bf14      	ite	ne
   e7e7a:	2001      	movne	r0, #1
   e7e7c:	2006      	moveq	r0, #6
   e7e7e:	4770      	bx	lr

000e7e80 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   e7e80:	b510      	push	{r4, lr}
   e7e82:	4b03      	ldr	r3, [pc, #12]	; (e7e90 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   e7e84:	6003      	str	r3, [r0, #0]
   e7e86:	4604      	mov	r4, r0
   e7e88:	f000 f8cd 	bl	e8026 <_ZNSt9type_infoD1Ev>
   e7e8c:	4620      	mov	r0, r4
   e7e8e:	bd10      	pop	{r4, pc}
   e7e90:	000edcd4 	.word	0x000edcd4

000e7e94 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   e7e94:	b510      	push	{r4, lr}
   e7e96:	4604      	mov	r4, r0
   e7e98:	f7ff fff2 	bl	e7e80 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   e7e9c:	4620      	mov	r0, r4
   e7e9e:	2108      	movs	r1, #8
   e7ea0:	f7ff fdf1 	bl	e7a86 <_ZdlPvj>
   e7ea4:	4620      	mov	r0, r4
   e7ea6:	bd10      	pop	{r4, pc}

000e7ea8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   e7ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e7eac:	461f      	mov	r7, r3
   e7eae:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   e7eb2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   e7eb6:	4598      	cmp	r8, r3
   e7eb8:	4606      	mov	r6, r0
   e7eba:	4615      	mov	r5, r2
   e7ebc:	d107      	bne.n	e7ece <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   e7ebe:	9907      	ldr	r1, [sp, #28]
   e7ec0:	f000 f8b4 	bl	e802c <_ZNKSt9type_infoeqERKS_>
   e7ec4:	b118      	cbz	r0, e7ece <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   e7ec6:	7165      	strb	r5, [r4, #5]
   e7ec8:	2000      	movs	r0, #0
   e7eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e7ece:	4639      	mov	r1, r7
   e7ed0:	4630      	mov	r0, r6
   e7ed2:	f000 f8ab 	bl	e802c <_ZNKSt9type_infoeqERKS_>
   e7ed6:	2800      	cmp	r0, #0
   e7ed8:	d0f6      	beq.n	e7ec8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   e7eda:	2301      	movs	r3, #1
   e7edc:	f8c4 8000 	str.w	r8, [r4]
   e7ee0:	7125      	strb	r5, [r4, #4]
   e7ee2:	71a3      	strb	r3, [r4, #6]
   e7ee4:	e7f0      	b.n	e7ec8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000e7ee6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   e7ee6:	b538      	push	{r3, r4, r5, lr}
   e7ee8:	4615      	mov	r5, r2
   e7eea:	461c      	mov	r4, r3
   e7eec:	f000 f89e 	bl	e802c <_ZNKSt9type_infoeqERKS_>
   e7ef0:	b120      	cbz	r0, e7efc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   e7ef2:	2308      	movs	r3, #8
   e7ef4:	60e3      	str	r3, [r4, #12]
   e7ef6:	2306      	movs	r3, #6
   e7ef8:	6025      	str	r5, [r4, #0]
   e7efa:	7123      	strb	r3, [r4, #4]
   e7efc:	bd38      	pop	{r3, r4, r5, pc}

000e7efe <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   e7efe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   e7f00:	4605      	mov	r5, r0
   e7f02:	460c      	mov	r4, r1
   e7f04:	9201      	str	r2, [sp, #4]
   e7f06:	461e      	mov	r6, r3
   e7f08:	f000 f890 	bl	e802c <_ZNKSt9type_infoeqERKS_>
   e7f0c:	b950      	cbnz	r0, e7f24 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   e7f0e:	2e03      	cmp	r6, #3
   e7f10:	d808      	bhi.n	e7f24 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   e7f12:	6823      	ldr	r3, [r4, #0]
   e7f14:	9a01      	ldr	r2, [sp, #4]
   e7f16:	695b      	ldr	r3, [r3, #20]
   e7f18:	4629      	mov	r1, r5
   e7f1a:	4620      	mov	r0, r4
   e7f1c:	b002      	add	sp, #8
   e7f1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   e7f22:	4718      	bx	r3
   e7f24:	b002      	add	sp, #8
   e7f26:	bd70      	pop	{r4, r5, r6, pc}

000e7f28 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   e7f28:	b510      	push	{r4, lr}
   e7f2a:	4b03      	ldr	r3, [pc, #12]	; (e7f38 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   e7f2c:	6003      	str	r3, [r0, #0]
   e7f2e:	4604      	mov	r4, r0
   e7f30:	f7ff ffa6 	bl	e7e80 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   e7f34:	4620      	mov	r0, r4
   e7f36:	bd10      	pop	{r4, pc}
   e7f38:	000edd34 	.word	0x000edd34

000e7f3c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   e7f3c:	b510      	push	{r4, lr}
   e7f3e:	4604      	mov	r4, r0
   e7f40:	f7ff fff2 	bl	e7f28 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   e7f44:	4620      	mov	r0, r4
   e7f46:	210c      	movs	r1, #12
   e7f48:	f7ff fd9d 	bl	e7a86 <_ZdlPvj>
   e7f4c:	4620      	mov	r0, r4
   e7f4e:	bd10      	pop	{r4, pc}

000e7f50 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   e7f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   e7f52:	9f08      	ldr	r7, [sp, #32]
   e7f54:	4297      	cmp	r7, r2
   e7f56:	4605      	mov	r5, r0
   e7f58:	460e      	mov	r6, r1
   e7f5a:	4614      	mov	r4, r2
   e7f5c:	d00a      	beq.n	e7f74 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   e7f5e:	68a8      	ldr	r0, [r5, #8]
   e7f60:	6802      	ldr	r2, [r0, #0]
   e7f62:	9708      	str	r7, [sp, #32]
   e7f64:	6a15      	ldr	r5, [r2, #32]
   e7f66:	4631      	mov	r1, r6
   e7f68:	4622      	mov	r2, r4
   e7f6a:	46ac      	mov	ip, r5
   e7f6c:	b003      	add	sp, #12
   e7f6e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   e7f72:	4760      	bx	ip
   e7f74:	4619      	mov	r1, r3
   e7f76:	9301      	str	r3, [sp, #4]
   e7f78:	f000 f858 	bl	e802c <_ZNKSt9type_infoeqERKS_>
   e7f7c:	9b01      	ldr	r3, [sp, #4]
   e7f7e:	2800      	cmp	r0, #0
   e7f80:	d0ed      	beq.n	e7f5e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   e7f82:	2006      	movs	r0, #6
   e7f84:	b003      	add	sp, #12
   e7f86:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e7f88 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   e7f88:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e7f8c:	460d      	mov	r5, r1
   e7f8e:	4619      	mov	r1, r3
   e7f90:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   e7f94:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   e7f98:	4681      	mov	r9, r0
   e7f9a:	4617      	mov	r7, r2
   e7f9c:	4698      	mov	r8, r3
   e7f9e:	f000 f845 	bl	e802c <_ZNKSt9type_infoeqERKS_>
   e7fa2:	b190      	cbz	r0, e7fca <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   e7fa4:	2d00      	cmp	r5, #0
   e7fa6:	6034      	str	r4, [r6, #0]
   e7fa8:	7137      	strb	r7, [r6, #4]
   e7faa:	db09      	blt.n	e7fc0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   e7fac:	1961      	adds	r1, r4, r5
   e7fae:	458a      	cmp	sl, r1
   e7fb0:	bf0c      	ite	eq
   e7fb2:	2106      	moveq	r1, #6
   e7fb4:	2101      	movne	r1, #1
   e7fb6:	71b1      	strb	r1, [r6, #6]
   e7fb8:	2000      	movs	r0, #0
   e7fba:	b001      	add	sp, #4
   e7fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e7fc0:	3502      	adds	r5, #2
   e7fc2:	d1f9      	bne.n	e7fb8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   e7fc4:	2301      	movs	r3, #1
   e7fc6:	71b3      	strb	r3, [r6, #6]
   e7fc8:	e7f6      	b.n	e7fb8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   e7fca:	4554      	cmp	r4, sl
   e7fcc:	d106      	bne.n	e7fdc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   e7fce:	4659      	mov	r1, fp
   e7fd0:	4648      	mov	r0, r9
   e7fd2:	f000 f82b 	bl	e802c <_ZNKSt9type_infoeqERKS_>
   e7fd6:	b108      	cbz	r0, e7fdc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   e7fd8:	7177      	strb	r7, [r6, #5]
   e7fda:	e7ed      	b.n	e7fb8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   e7fdc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   e7fe0:	6803      	ldr	r3, [r0, #0]
   e7fe2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   e7fe6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   e7fea:	69dc      	ldr	r4, [r3, #28]
   e7fec:	463a      	mov	r2, r7
   e7fee:	4643      	mov	r3, r8
   e7ff0:	4629      	mov	r1, r5
   e7ff2:	46a4      	mov	ip, r4
   e7ff4:	b001      	add	sp, #4
   e7ff6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e7ffa:	4760      	bx	ip

000e7ffc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   e7ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e8000:	4607      	mov	r7, r0
   e8002:	460c      	mov	r4, r1
   e8004:	4615      	mov	r5, r2
   e8006:	461e      	mov	r6, r3
   e8008:	f7ff ff6d 	bl	e7ee6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   e800c:	b948      	cbnz	r0, e8022 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   e800e:	68b8      	ldr	r0, [r7, #8]
   e8010:	6803      	ldr	r3, [r0, #0]
   e8012:	699f      	ldr	r7, [r3, #24]
   e8014:	462a      	mov	r2, r5
   e8016:	4633      	mov	r3, r6
   e8018:	4621      	mov	r1, r4
   e801a:	46bc      	mov	ip, r7
   e801c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   e8020:	4760      	bx	ip
   e8022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e8026 <_ZNSt9type_infoD1Ev>:
   e8026:	4770      	bx	lr

000e8028 <_ZNKSt9type_info14__is_pointer_pEv>:
   e8028:	2000      	movs	r0, #0
   e802a:	4770      	bx	lr

000e802c <_ZNKSt9type_infoeqERKS_>:
   e802c:	4281      	cmp	r1, r0
   e802e:	b508      	push	{r3, lr}
   e8030:	d00e      	beq.n	e8050 <_ZNKSt9type_infoeqERKS_+0x24>
   e8032:	6840      	ldr	r0, [r0, #4]
   e8034:	7803      	ldrb	r3, [r0, #0]
   e8036:	2b2a      	cmp	r3, #42	; 0x2a
   e8038:	d00c      	beq.n	e8054 <_ZNKSt9type_infoeqERKS_+0x28>
   e803a:	6849      	ldr	r1, [r1, #4]
   e803c:	780b      	ldrb	r3, [r1, #0]
   e803e:	2b2a      	cmp	r3, #42	; 0x2a
   e8040:	bf08      	it	eq
   e8042:	3101      	addeq	r1, #1
   e8044:	f000 ff36 	bl	e8eb4 <strcmp>
   e8048:	fab0 f080 	clz	r0, r0
   e804c:	0940      	lsrs	r0, r0, #5
   e804e:	bd08      	pop	{r3, pc}
   e8050:	2001      	movs	r0, #1
   e8052:	e7fc      	b.n	e804e <_ZNKSt9type_infoeqERKS_+0x22>
   e8054:	2000      	movs	r0, #0
   e8056:	e7fa      	b.n	e804e <_ZNKSt9type_infoeqERKS_+0x22>

000e8058 <__aeabi_drsub>:
   e8058:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   e805c:	e002      	b.n	e8064 <__adddf3>
   e805e:	bf00      	nop

000e8060 <__aeabi_dsub>:
   e8060:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000e8064 <__adddf3>:
   e8064:	b530      	push	{r4, r5, lr}
   e8066:	ea4f 0441 	mov.w	r4, r1, lsl #1
   e806a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   e806e:	ea94 0f05 	teq	r4, r5
   e8072:	bf08      	it	eq
   e8074:	ea90 0f02 	teqeq	r0, r2
   e8078:	bf1f      	itttt	ne
   e807a:	ea54 0c00 	orrsne.w	ip, r4, r0
   e807e:	ea55 0c02 	orrsne.w	ip, r5, r2
   e8082:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   e8086:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e808a:	f000 80e2 	beq.w	e8252 <__adddf3+0x1ee>
   e808e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   e8092:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   e8096:	bfb8      	it	lt
   e8098:	426d      	neglt	r5, r5
   e809a:	dd0c      	ble.n	e80b6 <__adddf3+0x52>
   e809c:	442c      	add	r4, r5
   e809e:	ea80 0202 	eor.w	r2, r0, r2
   e80a2:	ea81 0303 	eor.w	r3, r1, r3
   e80a6:	ea82 0000 	eor.w	r0, r2, r0
   e80aa:	ea83 0101 	eor.w	r1, r3, r1
   e80ae:	ea80 0202 	eor.w	r2, r0, r2
   e80b2:	ea81 0303 	eor.w	r3, r1, r3
   e80b6:	2d36      	cmp	r5, #54	; 0x36
   e80b8:	bf88      	it	hi
   e80ba:	bd30      	pophi	{r4, r5, pc}
   e80bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e80c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e80c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   e80c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   e80cc:	d002      	beq.n	e80d4 <__adddf3+0x70>
   e80ce:	4240      	negs	r0, r0
   e80d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e80d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   e80d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e80dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   e80e0:	d002      	beq.n	e80e8 <__adddf3+0x84>
   e80e2:	4252      	negs	r2, r2
   e80e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   e80e8:	ea94 0f05 	teq	r4, r5
   e80ec:	f000 80a7 	beq.w	e823e <__adddf3+0x1da>
   e80f0:	f1a4 0401 	sub.w	r4, r4, #1
   e80f4:	f1d5 0e20 	rsbs	lr, r5, #32
   e80f8:	db0d      	blt.n	e8116 <__adddf3+0xb2>
   e80fa:	fa02 fc0e 	lsl.w	ip, r2, lr
   e80fe:	fa22 f205 	lsr.w	r2, r2, r5
   e8102:	1880      	adds	r0, r0, r2
   e8104:	f141 0100 	adc.w	r1, r1, #0
   e8108:	fa03 f20e 	lsl.w	r2, r3, lr
   e810c:	1880      	adds	r0, r0, r2
   e810e:	fa43 f305 	asr.w	r3, r3, r5
   e8112:	4159      	adcs	r1, r3
   e8114:	e00e      	b.n	e8134 <__adddf3+0xd0>
   e8116:	f1a5 0520 	sub.w	r5, r5, #32
   e811a:	f10e 0e20 	add.w	lr, lr, #32
   e811e:	2a01      	cmp	r2, #1
   e8120:	fa03 fc0e 	lsl.w	ip, r3, lr
   e8124:	bf28      	it	cs
   e8126:	f04c 0c02 	orrcs.w	ip, ip, #2
   e812a:	fa43 f305 	asr.w	r3, r3, r5
   e812e:	18c0      	adds	r0, r0, r3
   e8130:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   e8134:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e8138:	d507      	bpl.n	e814a <__adddf3+0xe6>
   e813a:	f04f 0e00 	mov.w	lr, #0
   e813e:	f1dc 0c00 	rsbs	ip, ip, #0
   e8142:	eb7e 0000 	sbcs.w	r0, lr, r0
   e8146:	eb6e 0101 	sbc.w	r1, lr, r1
   e814a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   e814e:	d31b      	bcc.n	e8188 <__adddf3+0x124>
   e8150:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   e8154:	d30c      	bcc.n	e8170 <__adddf3+0x10c>
   e8156:	0849      	lsrs	r1, r1, #1
   e8158:	ea5f 0030 	movs.w	r0, r0, rrx
   e815c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   e8160:	f104 0401 	add.w	r4, r4, #1
   e8164:	ea4f 5244 	mov.w	r2, r4, lsl #21
   e8168:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   e816c:	f080 809a 	bcs.w	e82a4 <__adddf3+0x240>
   e8170:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   e8174:	bf08      	it	eq
   e8176:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e817a:	f150 0000 	adcs.w	r0, r0, #0
   e817e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e8182:	ea41 0105 	orr.w	r1, r1, r5
   e8186:	bd30      	pop	{r4, r5, pc}
   e8188:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   e818c:	4140      	adcs	r0, r0
   e818e:	eb41 0101 	adc.w	r1, r1, r1
   e8192:	3c01      	subs	r4, #1
   e8194:	bf28      	it	cs
   e8196:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   e819a:	d2e9      	bcs.n	e8170 <__adddf3+0x10c>
   e819c:	f091 0f00 	teq	r1, #0
   e81a0:	bf04      	itt	eq
   e81a2:	4601      	moveq	r1, r0
   e81a4:	2000      	moveq	r0, #0
   e81a6:	fab1 f381 	clz	r3, r1
   e81aa:	bf08      	it	eq
   e81ac:	3320      	addeq	r3, #32
   e81ae:	f1a3 030b 	sub.w	r3, r3, #11
   e81b2:	f1b3 0220 	subs.w	r2, r3, #32
   e81b6:	da0c      	bge.n	e81d2 <__adddf3+0x16e>
   e81b8:	320c      	adds	r2, #12
   e81ba:	dd08      	ble.n	e81ce <__adddf3+0x16a>
   e81bc:	f102 0c14 	add.w	ip, r2, #20
   e81c0:	f1c2 020c 	rsb	r2, r2, #12
   e81c4:	fa01 f00c 	lsl.w	r0, r1, ip
   e81c8:	fa21 f102 	lsr.w	r1, r1, r2
   e81cc:	e00c      	b.n	e81e8 <__adddf3+0x184>
   e81ce:	f102 0214 	add.w	r2, r2, #20
   e81d2:	bfd8      	it	le
   e81d4:	f1c2 0c20 	rsble	ip, r2, #32
   e81d8:	fa01 f102 	lsl.w	r1, r1, r2
   e81dc:	fa20 fc0c 	lsr.w	ip, r0, ip
   e81e0:	bfdc      	itt	le
   e81e2:	ea41 010c 	orrle.w	r1, r1, ip
   e81e6:	4090      	lslle	r0, r2
   e81e8:	1ae4      	subs	r4, r4, r3
   e81ea:	bfa2      	ittt	ge
   e81ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   e81f0:	4329      	orrge	r1, r5
   e81f2:	bd30      	popge	{r4, r5, pc}
   e81f4:	ea6f 0404 	mvn.w	r4, r4
   e81f8:	3c1f      	subs	r4, #31
   e81fa:	da1c      	bge.n	e8236 <__adddf3+0x1d2>
   e81fc:	340c      	adds	r4, #12
   e81fe:	dc0e      	bgt.n	e821e <__adddf3+0x1ba>
   e8200:	f104 0414 	add.w	r4, r4, #20
   e8204:	f1c4 0220 	rsb	r2, r4, #32
   e8208:	fa20 f004 	lsr.w	r0, r0, r4
   e820c:	fa01 f302 	lsl.w	r3, r1, r2
   e8210:	ea40 0003 	orr.w	r0, r0, r3
   e8214:	fa21 f304 	lsr.w	r3, r1, r4
   e8218:	ea45 0103 	orr.w	r1, r5, r3
   e821c:	bd30      	pop	{r4, r5, pc}
   e821e:	f1c4 040c 	rsb	r4, r4, #12
   e8222:	f1c4 0220 	rsb	r2, r4, #32
   e8226:	fa20 f002 	lsr.w	r0, r0, r2
   e822a:	fa01 f304 	lsl.w	r3, r1, r4
   e822e:	ea40 0003 	orr.w	r0, r0, r3
   e8232:	4629      	mov	r1, r5
   e8234:	bd30      	pop	{r4, r5, pc}
   e8236:	fa21 f004 	lsr.w	r0, r1, r4
   e823a:	4629      	mov	r1, r5
   e823c:	bd30      	pop	{r4, r5, pc}
   e823e:	f094 0f00 	teq	r4, #0
   e8242:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   e8246:	bf06      	itte	eq
   e8248:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   e824c:	3401      	addeq	r4, #1
   e824e:	3d01      	subne	r5, #1
   e8250:	e74e      	b.n	e80f0 <__adddf3+0x8c>
   e8252:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e8256:	bf18      	it	ne
   e8258:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e825c:	d029      	beq.n	e82b2 <__adddf3+0x24e>
   e825e:	ea94 0f05 	teq	r4, r5
   e8262:	bf08      	it	eq
   e8264:	ea90 0f02 	teqeq	r0, r2
   e8268:	d005      	beq.n	e8276 <__adddf3+0x212>
   e826a:	ea54 0c00 	orrs.w	ip, r4, r0
   e826e:	bf04      	itt	eq
   e8270:	4619      	moveq	r1, r3
   e8272:	4610      	moveq	r0, r2
   e8274:	bd30      	pop	{r4, r5, pc}
   e8276:	ea91 0f03 	teq	r1, r3
   e827a:	bf1e      	ittt	ne
   e827c:	2100      	movne	r1, #0
   e827e:	2000      	movne	r0, #0
   e8280:	bd30      	popne	{r4, r5, pc}
   e8282:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   e8286:	d105      	bne.n	e8294 <__adddf3+0x230>
   e8288:	0040      	lsls	r0, r0, #1
   e828a:	4149      	adcs	r1, r1
   e828c:	bf28      	it	cs
   e828e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   e8292:	bd30      	pop	{r4, r5, pc}
   e8294:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   e8298:	bf3c      	itt	cc
   e829a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   e829e:	bd30      	popcc	{r4, r5, pc}
   e82a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e82a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   e82a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e82ac:	f04f 0000 	mov.w	r0, #0
   e82b0:	bd30      	pop	{r4, r5, pc}
   e82b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e82b6:	bf1a      	itte	ne
   e82b8:	4619      	movne	r1, r3
   e82ba:	4610      	movne	r0, r2
   e82bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   e82c0:	bf1c      	itt	ne
   e82c2:	460b      	movne	r3, r1
   e82c4:	4602      	movne	r2, r0
   e82c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e82ca:	bf06      	itte	eq
   e82cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   e82d0:	ea91 0f03 	teqeq	r1, r3
   e82d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   e82d8:	bd30      	pop	{r4, r5, pc}
   e82da:	bf00      	nop

000e82dc <__aeabi_ui2d>:
   e82dc:	f090 0f00 	teq	r0, #0
   e82e0:	bf04      	itt	eq
   e82e2:	2100      	moveq	r1, #0
   e82e4:	4770      	bxeq	lr
   e82e6:	b530      	push	{r4, r5, lr}
   e82e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e82ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e82f0:	f04f 0500 	mov.w	r5, #0
   e82f4:	f04f 0100 	mov.w	r1, #0
   e82f8:	e750      	b.n	e819c <__adddf3+0x138>
   e82fa:	bf00      	nop

000e82fc <__aeabi_i2d>:
   e82fc:	f090 0f00 	teq	r0, #0
   e8300:	bf04      	itt	eq
   e8302:	2100      	moveq	r1, #0
   e8304:	4770      	bxeq	lr
   e8306:	b530      	push	{r4, r5, lr}
   e8308:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e830c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e8310:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   e8314:	bf48      	it	mi
   e8316:	4240      	negmi	r0, r0
   e8318:	f04f 0100 	mov.w	r1, #0
   e831c:	e73e      	b.n	e819c <__adddf3+0x138>
   e831e:	bf00      	nop

000e8320 <__aeabi_f2d>:
   e8320:	0042      	lsls	r2, r0, #1
   e8322:	ea4f 01e2 	mov.w	r1, r2, asr #3
   e8326:	ea4f 0131 	mov.w	r1, r1, rrx
   e832a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   e832e:	bf1f      	itttt	ne
   e8330:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   e8334:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e8338:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   e833c:	4770      	bxne	lr
   e833e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   e8342:	bf08      	it	eq
   e8344:	4770      	bxeq	lr
   e8346:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   e834a:	bf04      	itt	eq
   e834c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   e8350:	4770      	bxeq	lr
   e8352:	b530      	push	{r4, r5, lr}
   e8354:	f44f 7460 	mov.w	r4, #896	; 0x380
   e8358:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e835c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e8360:	e71c      	b.n	e819c <__adddf3+0x138>
   e8362:	bf00      	nop

000e8364 <__aeabi_ul2d>:
   e8364:	ea50 0201 	orrs.w	r2, r0, r1
   e8368:	bf08      	it	eq
   e836a:	4770      	bxeq	lr
   e836c:	b530      	push	{r4, r5, lr}
   e836e:	f04f 0500 	mov.w	r5, #0
   e8372:	e00a      	b.n	e838a <__aeabi_l2d+0x16>

000e8374 <__aeabi_l2d>:
   e8374:	ea50 0201 	orrs.w	r2, r0, r1
   e8378:	bf08      	it	eq
   e837a:	4770      	bxeq	lr
   e837c:	b530      	push	{r4, r5, lr}
   e837e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   e8382:	d502      	bpl.n	e838a <__aeabi_l2d+0x16>
   e8384:	4240      	negs	r0, r0
   e8386:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e838a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e838e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e8392:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   e8396:	f43f aed8 	beq.w	e814a <__adddf3+0xe6>
   e839a:	f04f 0203 	mov.w	r2, #3
   e839e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e83a2:	bf18      	it	ne
   e83a4:	3203      	addne	r2, #3
   e83a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e83aa:	bf18      	it	ne
   e83ac:	3203      	addne	r2, #3
   e83ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   e83b2:	f1c2 0320 	rsb	r3, r2, #32
   e83b6:	fa00 fc03 	lsl.w	ip, r0, r3
   e83ba:	fa20 f002 	lsr.w	r0, r0, r2
   e83be:	fa01 fe03 	lsl.w	lr, r1, r3
   e83c2:	ea40 000e 	orr.w	r0, r0, lr
   e83c6:	fa21 f102 	lsr.w	r1, r1, r2
   e83ca:	4414      	add	r4, r2
   e83cc:	e6bd      	b.n	e814a <__adddf3+0xe6>
   e83ce:	bf00      	nop

000e83d0 <__aeabi_dmul>:
   e83d0:	b570      	push	{r4, r5, r6, lr}
   e83d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e83d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e83da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e83de:	bf1d      	ittte	ne
   e83e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e83e4:	ea94 0f0c 	teqne	r4, ip
   e83e8:	ea95 0f0c 	teqne	r5, ip
   e83ec:	f000 f8de 	bleq	e85ac <__aeabi_dmul+0x1dc>
   e83f0:	442c      	add	r4, r5
   e83f2:	ea81 0603 	eor.w	r6, r1, r3
   e83f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   e83fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   e83fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   e8402:	bf18      	it	ne
   e8404:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   e8408:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e840c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e8410:	d038      	beq.n	e8484 <__aeabi_dmul+0xb4>
   e8412:	fba0 ce02 	umull	ip, lr, r0, r2
   e8416:	f04f 0500 	mov.w	r5, #0
   e841a:	fbe1 e502 	umlal	lr, r5, r1, r2
   e841e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   e8422:	fbe0 e503 	umlal	lr, r5, r0, r3
   e8426:	f04f 0600 	mov.w	r6, #0
   e842a:	fbe1 5603 	umlal	r5, r6, r1, r3
   e842e:	f09c 0f00 	teq	ip, #0
   e8432:	bf18      	it	ne
   e8434:	f04e 0e01 	orrne.w	lr, lr, #1
   e8438:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   e843c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   e8440:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   e8444:	d204      	bcs.n	e8450 <__aeabi_dmul+0x80>
   e8446:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   e844a:	416d      	adcs	r5, r5
   e844c:	eb46 0606 	adc.w	r6, r6, r6
   e8450:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   e8454:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   e8458:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   e845c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   e8460:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   e8464:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e8468:	bf88      	it	hi
   e846a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e846e:	d81e      	bhi.n	e84ae <__aeabi_dmul+0xde>
   e8470:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   e8474:	bf08      	it	eq
   e8476:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   e847a:	f150 0000 	adcs.w	r0, r0, #0
   e847e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e8482:	bd70      	pop	{r4, r5, r6, pc}
   e8484:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   e8488:	ea46 0101 	orr.w	r1, r6, r1
   e848c:	ea40 0002 	orr.w	r0, r0, r2
   e8490:	ea81 0103 	eor.w	r1, r1, r3
   e8494:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   e8498:	bfc2      	ittt	gt
   e849a:	ebd4 050c 	rsbsgt	r5, r4, ip
   e849e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e84a2:	bd70      	popgt	{r4, r5, r6, pc}
   e84a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e84a8:	f04f 0e00 	mov.w	lr, #0
   e84ac:	3c01      	subs	r4, #1
   e84ae:	f300 80ab 	bgt.w	e8608 <__aeabi_dmul+0x238>
   e84b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   e84b6:	bfde      	ittt	le
   e84b8:	2000      	movle	r0, #0
   e84ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   e84be:	bd70      	pople	{r4, r5, r6, pc}
   e84c0:	f1c4 0400 	rsb	r4, r4, #0
   e84c4:	3c20      	subs	r4, #32
   e84c6:	da35      	bge.n	e8534 <__aeabi_dmul+0x164>
   e84c8:	340c      	adds	r4, #12
   e84ca:	dc1b      	bgt.n	e8504 <__aeabi_dmul+0x134>
   e84cc:	f104 0414 	add.w	r4, r4, #20
   e84d0:	f1c4 0520 	rsb	r5, r4, #32
   e84d4:	fa00 f305 	lsl.w	r3, r0, r5
   e84d8:	fa20 f004 	lsr.w	r0, r0, r4
   e84dc:	fa01 f205 	lsl.w	r2, r1, r5
   e84e0:	ea40 0002 	orr.w	r0, r0, r2
   e84e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   e84e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e84ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e84f0:	fa21 f604 	lsr.w	r6, r1, r4
   e84f4:	eb42 0106 	adc.w	r1, r2, r6
   e84f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e84fc:	bf08      	it	eq
   e84fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e8502:	bd70      	pop	{r4, r5, r6, pc}
   e8504:	f1c4 040c 	rsb	r4, r4, #12
   e8508:	f1c4 0520 	rsb	r5, r4, #32
   e850c:	fa00 f304 	lsl.w	r3, r0, r4
   e8510:	fa20 f005 	lsr.w	r0, r0, r5
   e8514:	fa01 f204 	lsl.w	r2, r1, r4
   e8518:	ea40 0002 	orr.w	r0, r0, r2
   e851c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e8520:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e8524:	f141 0100 	adc.w	r1, r1, #0
   e8528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e852c:	bf08      	it	eq
   e852e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e8532:	bd70      	pop	{r4, r5, r6, pc}
   e8534:	f1c4 0520 	rsb	r5, r4, #32
   e8538:	fa00 f205 	lsl.w	r2, r0, r5
   e853c:	ea4e 0e02 	orr.w	lr, lr, r2
   e8540:	fa20 f304 	lsr.w	r3, r0, r4
   e8544:	fa01 f205 	lsl.w	r2, r1, r5
   e8548:	ea43 0302 	orr.w	r3, r3, r2
   e854c:	fa21 f004 	lsr.w	r0, r1, r4
   e8550:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e8554:	fa21 f204 	lsr.w	r2, r1, r4
   e8558:	ea20 0002 	bic.w	r0, r0, r2
   e855c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   e8560:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e8564:	bf08      	it	eq
   e8566:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e856a:	bd70      	pop	{r4, r5, r6, pc}
   e856c:	f094 0f00 	teq	r4, #0
   e8570:	d10f      	bne.n	e8592 <__aeabi_dmul+0x1c2>
   e8572:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   e8576:	0040      	lsls	r0, r0, #1
   e8578:	eb41 0101 	adc.w	r1, r1, r1
   e857c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e8580:	bf08      	it	eq
   e8582:	3c01      	subeq	r4, #1
   e8584:	d0f7      	beq.n	e8576 <__aeabi_dmul+0x1a6>
   e8586:	ea41 0106 	orr.w	r1, r1, r6
   e858a:	f095 0f00 	teq	r5, #0
   e858e:	bf18      	it	ne
   e8590:	4770      	bxne	lr
   e8592:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   e8596:	0052      	lsls	r2, r2, #1
   e8598:	eb43 0303 	adc.w	r3, r3, r3
   e859c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   e85a0:	bf08      	it	eq
   e85a2:	3d01      	subeq	r5, #1
   e85a4:	d0f7      	beq.n	e8596 <__aeabi_dmul+0x1c6>
   e85a6:	ea43 0306 	orr.w	r3, r3, r6
   e85aa:	4770      	bx	lr
   e85ac:	ea94 0f0c 	teq	r4, ip
   e85b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e85b4:	bf18      	it	ne
   e85b6:	ea95 0f0c 	teqne	r5, ip
   e85ba:	d00c      	beq.n	e85d6 <__aeabi_dmul+0x206>
   e85bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e85c0:	bf18      	it	ne
   e85c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e85c6:	d1d1      	bne.n	e856c <__aeabi_dmul+0x19c>
   e85c8:	ea81 0103 	eor.w	r1, r1, r3
   e85cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e85d0:	f04f 0000 	mov.w	r0, #0
   e85d4:	bd70      	pop	{r4, r5, r6, pc}
   e85d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e85da:	bf06      	itte	eq
   e85dc:	4610      	moveq	r0, r2
   e85de:	4619      	moveq	r1, r3
   e85e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e85e4:	d019      	beq.n	e861a <__aeabi_dmul+0x24a>
   e85e6:	ea94 0f0c 	teq	r4, ip
   e85ea:	d102      	bne.n	e85f2 <__aeabi_dmul+0x222>
   e85ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   e85f0:	d113      	bne.n	e861a <__aeabi_dmul+0x24a>
   e85f2:	ea95 0f0c 	teq	r5, ip
   e85f6:	d105      	bne.n	e8604 <__aeabi_dmul+0x234>
   e85f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   e85fc:	bf1c      	itt	ne
   e85fe:	4610      	movne	r0, r2
   e8600:	4619      	movne	r1, r3
   e8602:	d10a      	bne.n	e861a <__aeabi_dmul+0x24a>
   e8604:	ea81 0103 	eor.w	r1, r1, r3
   e8608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e860c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e8610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e8614:	f04f 0000 	mov.w	r0, #0
   e8618:	bd70      	pop	{r4, r5, r6, pc}
   e861a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e861e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   e8622:	bd70      	pop	{r4, r5, r6, pc}

000e8624 <__aeabi_ddiv>:
   e8624:	b570      	push	{r4, r5, r6, lr}
   e8626:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e862a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e862e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e8632:	bf1d      	ittte	ne
   e8634:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e8638:	ea94 0f0c 	teqne	r4, ip
   e863c:	ea95 0f0c 	teqne	r5, ip
   e8640:	f000 f8a7 	bleq	e8792 <__aeabi_ddiv+0x16e>
   e8644:	eba4 0405 	sub.w	r4, r4, r5
   e8648:	ea81 0e03 	eor.w	lr, r1, r3
   e864c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e8650:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e8654:	f000 8088 	beq.w	e8768 <__aeabi_ddiv+0x144>
   e8658:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e865c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   e8660:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   e8664:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   e8668:	ea4f 2202 	mov.w	r2, r2, lsl #8
   e866c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   e8670:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   e8674:	ea4f 2600 	mov.w	r6, r0, lsl #8
   e8678:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   e867c:	429d      	cmp	r5, r3
   e867e:	bf08      	it	eq
   e8680:	4296      	cmpeq	r6, r2
   e8682:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   e8686:	f504 7440 	add.w	r4, r4, #768	; 0x300
   e868a:	d202      	bcs.n	e8692 <__aeabi_ddiv+0x6e>
   e868c:	085b      	lsrs	r3, r3, #1
   e868e:	ea4f 0232 	mov.w	r2, r2, rrx
   e8692:	1ab6      	subs	r6, r6, r2
   e8694:	eb65 0503 	sbc.w	r5, r5, r3
   e8698:	085b      	lsrs	r3, r3, #1
   e869a:	ea4f 0232 	mov.w	r2, r2, rrx
   e869e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   e86a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   e86a6:	ebb6 0e02 	subs.w	lr, r6, r2
   e86aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   e86ae:	bf22      	ittt	cs
   e86b0:	1ab6      	subcs	r6, r6, r2
   e86b2:	4675      	movcs	r5, lr
   e86b4:	ea40 000c 	orrcs.w	r0, r0, ip
   e86b8:	085b      	lsrs	r3, r3, #1
   e86ba:	ea4f 0232 	mov.w	r2, r2, rrx
   e86be:	ebb6 0e02 	subs.w	lr, r6, r2
   e86c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   e86c6:	bf22      	ittt	cs
   e86c8:	1ab6      	subcs	r6, r6, r2
   e86ca:	4675      	movcs	r5, lr
   e86cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   e86d0:	085b      	lsrs	r3, r3, #1
   e86d2:	ea4f 0232 	mov.w	r2, r2, rrx
   e86d6:	ebb6 0e02 	subs.w	lr, r6, r2
   e86da:	eb75 0e03 	sbcs.w	lr, r5, r3
   e86de:	bf22      	ittt	cs
   e86e0:	1ab6      	subcs	r6, r6, r2
   e86e2:	4675      	movcs	r5, lr
   e86e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   e86e8:	085b      	lsrs	r3, r3, #1
   e86ea:	ea4f 0232 	mov.w	r2, r2, rrx
   e86ee:	ebb6 0e02 	subs.w	lr, r6, r2
   e86f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   e86f6:	bf22      	ittt	cs
   e86f8:	1ab6      	subcs	r6, r6, r2
   e86fa:	4675      	movcs	r5, lr
   e86fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   e8700:	ea55 0e06 	orrs.w	lr, r5, r6
   e8704:	d018      	beq.n	e8738 <__aeabi_ddiv+0x114>
   e8706:	ea4f 1505 	mov.w	r5, r5, lsl #4
   e870a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   e870e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   e8712:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   e8716:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   e871a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   e871e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   e8722:	d1c0      	bne.n	e86a6 <__aeabi_ddiv+0x82>
   e8724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e8728:	d10b      	bne.n	e8742 <__aeabi_ddiv+0x11e>
   e872a:	ea41 0100 	orr.w	r1, r1, r0
   e872e:	f04f 0000 	mov.w	r0, #0
   e8732:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   e8736:	e7b6      	b.n	e86a6 <__aeabi_ddiv+0x82>
   e8738:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e873c:	bf04      	itt	eq
   e873e:	4301      	orreq	r1, r0
   e8740:	2000      	moveq	r0, #0
   e8742:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e8746:	bf88      	it	hi
   e8748:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e874c:	f63f aeaf 	bhi.w	e84ae <__aeabi_dmul+0xde>
   e8750:	ebb5 0c03 	subs.w	ip, r5, r3
   e8754:	bf04      	itt	eq
   e8756:	ebb6 0c02 	subseq.w	ip, r6, r2
   e875a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e875e:	f150 0000 	adcs.w	r0, r0, #0
   e8762:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e8766:	bd70      	pop	{r4, r5, r6, pc}
   e8768:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   e876c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   e8770:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   e8774:	bfc2      	ittt	gt
   e8776:	ebd4 050c 	rsbsgt	r5, r4, ip
   e877a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e877e:	bd70      	popgt	{r4, r5, r6, pc}
   e8780:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e8784:	f04f 0e00 	mov.w	lr, #0
   e8788:	3c01      	subs	r4, #1
   e878a:	e690      	b.n	e84ae <__aeabi_dmul+0xde>
   e878c:	ea45 0e06 	orr.w	lr, r5, r6
   e8790:	e68d      	b.n	e84ae <__aeabi_dmul+0xde>
   e8792:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e8796:	ea94 0f0c 	teq	r4, ip
   e879a:	bf08      	it	eq
   e879c:	ea95 0f0c 	teqeq	r5, ip
   e87a0:	f43f af3b 	beq.w	e861a <__aeabi_dmul+0x24a>
   e87a4:	ea94 0f0c 	teq	r4, ip
   e87a8:	d10a      	bne.n	e87c0 <__aeabi_ddiv+0x19c>
   e87aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e87ae:	f47f af34 	bne.w	e861a <__aeabi_dmul+0x24a>
   e87b2:	ea95 0f0c 	teq	r5, ip
   e87b6:	f47f af25 	bne.w	e8604 <__aeabi_dmul+0x234>
   e87ba:	4610      	mov	r0, r2
   e87bc:	4619      	mov	r1, r3
   e87be:	e72c      	b.n	e861a <__aeabi_dmul+0x24a>
   e87c0:	ea95 0f0c 	teq	r5, ip
   e87c4:	d106      	bne.n	e87d4 <__aeabi_ddiv+0x1b0>
   e87c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e87ca:	f43f aefd 	beq.w	e85c8 <__aeabi_dmul+0x1f8>
   e87ce:	4610      	mov	r0, r2
   e87d0:	4619      	mov	r1, r3
   e87d2:	e722      	b.n	e861a <__aeabi_dmul+0x24a>
   e87d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e87d8:	bf18      	it	ne
   e87da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e87de:	f47f aec5 	bne.w	e856c <__aeabi_dmul+0x19c>
   e87e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   e87e6:	f47f af0d 	bne.w	e8604 <__aeabi_dmul+0x234>
   e87ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   e87ee:	f47f aeeb 	bne.w	e85c8 <__aeabi_dmul+0x1f8>
   e87f2:	e712      	b.n	e861a <__aeabi_dmul+0x24a>

000e87f4 <__gedf2>:
   e87f4:	f04f 3cff 	mov.w	ip, #4294967295
   e87f8:	e006      	b.n	e8808 <__cmpdf2+0x4>
   e87fa:	bf00      	nop

000e87fc <__ledf2>:
   e87fc:	f04f 0c01 	mov.w	ip, #1
   e8800:	e002      	b.n	e8808 <__cmpdf2+0x4>
   e8802:	bf00      	nop

000e8804 <__cmpdf2>:
   e8804:	f04f 0c01 	mov.w	ip, #1
   e8808:	f84d cd04 	str.w	ip, [sp, #-4]!
   e880c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e8810:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e8814:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e8818:	bf18      	it	ne
   e881a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   e881e:	d01b      	beq.n	e8858 <__cmpdf2+0x54>
   e8820:	b001      	add	sp, #4
   e8822:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   e8826:	bf0c      	ite	eq
   e8828:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   e882c:	ea91 0f03 	teqne	r1, r3
   e8830:	bf02      	ittt	eq
   e8832:	ea90 0f02 	teqeq	r0, r2
   e8836:	2000      	moveq	r0, #0
   e8838:	4770      	bxeq	lr
   e883a:	f110 0f00 	cmn.w	r0, #0
   e883e:	ea91 0f03 	teq	r1, r3
   e8842:	bf58      	it	pl
   e8844:	4299      	cmppl	r1, r3
   e8846:	bf08      	it	eq
   e8848:	4290      	cmpeq	r0, r2
   e884a:	bf2c      	ite	cs
   e884c:	17d8      	asrcs	r0, r3, #31
   e884e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   e8852:	f040 0001 	orr.w	r0, r0, #1
   e8856:	4770      	bx	lr
   e8858:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e885c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e8860:	d102      	bne.n	e8868 <__cmpdf2+0x64>
   e8862:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e8866:	d107      	bne.n	e8878 <__cmpdf2+0x74>
   e8868:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e886c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e8870:	d1d6      	bne.n	e8820 <__cmpdf2+0x1c>
   e8872:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e8876:	d0d3      	beq.n	e8820 <__cmpdf2+0x1c>
   e8878:	f85d 0b04 	ldr.w	r0, [sp], #4
   e887c:	4770      	bx	lr
   e887e:	bf00      	nop

000e8880 <__aeabi_cdrcmple>:
   e8880:	4684      	mov	ip, r0
   e8882:	4610      	mov	r0, r2
   e8884:	4662      	mov	r2, ip
   e8886:	468c      	mov	ip, r1
   e8888:	4619      	mov	r1, r3
   e888a:	4663      	mov	r3, ip
   e888c:	e000      	b.n	e8890 <__aeabi_cdcmpeq>
   e888e:	bf00      	nop

000e8890 <__aeabi_cdcmpeq>:
   e8890:	b501      	push	{r0, lr}
   e8892:	f7ff ffb7 	bl	e8804 <__cmpdf2>
   e8896:	2800      	cmp	r0, #0
   e8898:	bf48      	it	mi
   e889a:	f110 0f00 	cmnmi.w	r0, #0
   e889e:	bd01      	pop	{r0, pc}

000e88a0 <__aeabi_dcmpeq>:
   e88a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   e88a4:	f7ff fff4 	bl	e8890 <__aeabi_cdcmpeq>
   e88a8:	bf0c      	ite	eq
   e88aa:	2001      	moveq	r0, #1
   e88ac:	2000      	movne	r0, #0
   e88ae:	f85d fb08 	ldr.w	pc, [sp], #8
   e88b2:	bf00      	nop

000e88b4 <__aeabi_dcmplt>:
   e88b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   e88b8:	f7ff ffea 	bl	e8890 <__aeabi_cdcmpeq>
   e88bc:	bf34      	ite	cc
   e88be:	2001      	movcc	r0, #1
   e88c0:	2000      	movcs	r0, #0
   e88c2:	f85d fb08 	ldr.w	pc, [sp], #8
   e88c6:	bf00      	nop

000e88c8 <__aeabi_dcmple>:
   e88c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   e88cc:	f7ff ffe0 	bl	e8890 <__aeabi_cdcmpeq>
   e88d0:	bf94      	ite	ls
   e88d2:	2001      	movls	r0, #1
   e88d4:	2000      	movhi	r0, #0
   e88d6:	f85d fb08 	ldr.w	pc, [sp], #8
   e88da:	bf00      	nop

000e88dc <__aeabi_dcmpge>:
   e88dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   e88e0:	f7ff ffce 	bl	e8880 <__aeabi_cdrcmple>
   e88e4:	bf94      	ite	ls
   e88e6:	2001      	movls	r0, #1
   e88e8:	2000      	movhi	r0, #0
   e88ea:	f85d fb08 	ldr.w	pc, [sp], #8
   e88ee:	bf00      	nop

000e88f0 <__aeabi_dcmpgt>:
   e88f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   e88f4:	f7ff ffc4 	bl	e8880 <__aeabi_cdrcmple>
   e88f8:	bf34      	ite	cc
   e88fa:	2001      	movcc	r0, #1
   e88fc:	2000      	movcs	r0, #0
   e88fe:	f85d fb08 	ldr.w	pc, [sp], #8
   e8902:	bf00      	nop

000e8904 <__aeabi_dcmpun>:
   e8904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e8908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e890c:	d102      	bne.n	e8914 <__aeabi_dcmpun+0x10>
   e890e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e8912:	d10a      	bne.n	e892a <__aeabi_dcmpun+0x26>
   e8914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e8918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e891c:	d102      	bne.n	e8924 <__aeabi_dcmpun+0x20>
   e891e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e8922:	d102      	bne.n	e892a <__aeabi_dcmpun+0x26>
   e8924:	f04f 0000 	mov.w	r0, #0
   e8928:	4770      	bx	lr
   e892a:	f04f 0001 	mov.w	r0, #1
   e892e:	4770      	bx	lr

000e8930 <__aeabi_d2iz>:
   e8930:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e8934:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e8938:	d215      	bcs.n	e8966 <__aeabi_d2iz+0x36>
   e893a:	d511      	bpl.n	e8960 <__aeabi_d2iz+0x30>
   e893c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e8940:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e8944:	d912      	bls.n	e896c <__aeabi_d2iz+0x3c>
   e8946:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e894a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e894e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e8952:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e8956:	fa23 f002 	lsr.w	r0, r3, r2
   e895a:	bf18      	it	ne
   e895c:	4240      	negne	r0, r0
   e895e:	4770      	bx	lr
   e8960:	f04f 0000 	mov.w	r0, #0
   e8964:	4770      	bx	lr
   e8966:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e896a:	d105      	bne.n	e8978 <__aeabi_d2iz+0x48>
   e896c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   e8970:	bf08      	it	eq
   e8972:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   e8976:	4770      	bx	lr
   e8978:	f04f 0000 	mov.w	r0, #0
   e897c:	4770      	bx	lr
   e897e:	bf00      	nop

000e8980 <__aeabi_d2uiz>:
   e8980:	004a      	lsls	r2, r1, #1
   e8982:	d211      	bcs.n	e89a8 <__aeabi_d2uiz+0x28>
   e8984:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e8988:	d211      	bcs.n	e89ae <__aeabi_d2uiz+0x2e>
   e898a:	d50d      	bpl.n	e89a8 <__aeabi_d2uiz+0x28>
   e898c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e8990:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e8994:	d40e      	bmi.n	e89b4 <__aeabi_d2uiz+0x34>
   e8996:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e899a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e899e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e89a2:	fa23 f002 	lsr.w	r0, r3, r2
   e89a6:	4770      	bx	lr
   e89a8:	f04f 0000 	mov.w	r0, #0
   e89ac:	4770      	bx	lr
   e89ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e89b2:	d102      	bne.n	e89ba <__aeabi_d2uiz+0x3a>
   e89b4:	f04f 30ff 	mov.w	r0, #4294967295
   e89b8:	4770      	bx	lr
   e89ba:	f04f 0000 	mov.w	r0, #0
   e89be:	4770      	bx	lr

000e89c0 <__aeabi_uldivmod>:
   e89c0:	b953      	cbnz	r3, e89d8 <__aeabi_uldivmod+0x18>
   e89c2:	b94a      	cbnz	r2, e89d8 <__aeabi_uldivmod+0x18>
   e89c4:	2900      	cmp	r1, #0
   e89c6:	bf08      	it	eq
   e89c8:	2800      	cmpeq	r0, #0
   e89ca:	bf1c      	itt	ne
   e89cc:	f04f 31ff 	movne.w	r1, #4294967295
   e89d0:	f04f 30ff 	movne.w	r0, #4294967295
   e89d4:	f000 b98c 	b.w	e8cf0 <__aeabi_idiv0>
   e89d8:	f1ad 0c08 	sub.w	ip, sp, #8
   e89dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   e89e0:	f000 f824 	bl	e8a2c <__udivmoddi4>
   e89e4:	f8dd e004 	ldr.w	lr, [sp, #4]
   e89e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   e89ec:	b004      	add	sp, #16
   e89ee:	4770      	bx	lr

000e89f0 <__aeabi_d2ulz>:
   e89f0:	b5d0      	push	{r4, r6, r7, lr}
   e89f2:	4b0c      	ldr	r3, [pc, #48]	; (e8a24 <__aeabi_d2ulz+0x34>)
   e89f4:	2200      	movs	r2, #0
   e89f6:	4606      	mov	r6, r0
   e89f8:	460f      	mov	r7, r1
   e89fa:	f7ff fce9 	bl	e83d0 <__aeabi_dmul>
   e89fe:	f7ff ffbf 	bl	e8980 <__aeabi_d2uiz>
   e8a02:	4604      	mov	r4, r0
   e8a04:	f7ff fc6a 	bl	e82dc <__aeabi_ui2d>
   e8a08:	4b07      	ldr	r3, [pc, #28]	; (e8a28 <__aeabi_d2ulz+0x38>)
   e8a0a:	2200      	movs	r2, #0
   e8a0c:	f7ff fce0 	bl	e83d0 <__aeabi_dmul>
   e8a10:	4602      	mov	r2, r0
   e8a12:	460b      	mov	r3, r1
   e8a14:	4630      	mov	r0, r6
   e8a16:	4639      	mov	r1, r7
   e8a18:	f7ff fb22 	bl	e8060 <__aeabi_dsub>
   e8a1c:	f7ff ffb0 	bl	e8980 <__aeabi_d2uiz>
   e8a20:	4621      	mov	r1, r4
   e8a22:	bdd0      	pop	{r4, r6, r7, pc}
   e8a24:	3df00000 	.word	0x3df00000
   e8a28:	41f00000 	.word	0x41f00000

000e8a2c <__udivmoddi4>:
   e8a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e8a30:	9d08      	ldr	r5, [sp, #32]
   e8a32:	4604      	mov	r4, r0
   e8a34:	468c      	mov	ip, r1
   e8a36:	2b00      	cmp	r3, #0
   e8a38:	f040 8083 	bne.w	e8b42 <__udivmoddi4+0x116>
   e8a3c:	428a      	cmp	r2, r1
   e8a3e:	4617      	mov	r7, r2
   e8a40:	d947      	bls.n	e8ad2 <__udivmoddi4+0xa6>
   e8a42:	fab2 f282 	clz	r2, r2
   e8a46:	b142      	cbz	r2, e8a5a <__udivmoddi4+0x2e>
   e8a48:	f1c2 0020 	rsb	r0, r2, #32
   e8a4c:	fa24 f000 	lsr.w	r0, r4, r0
   e8a50:	4091      	lsls	r1, r2
   e8a52:	4097      	lsls	r7, r2
   e8a54:	ea40 0c01 	orr.w	ip, r0, r1
   e8a58:	4094      	lsls	r4, r2
   e8a5a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   e8a5e:	0c23      	lsrs	r3, r4, #16
   e8a60:	fbbc f6f8 	udiv	r6, ip, r8
   e8a64:	fa1f fe87 	uxth.w	lr, r7
   e8a68:	fb08 c116 	mls	r1, r8, r6, ip
   e8a6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   e8a70:	fb06 f10e 	mul.w	r1, r6, lr
   e8a74:	4299      	cmp	r1, r3
   e8a76:	d909      	bls.n	e8a8c <__udivmoddi4+0x60>
   e8a78:	18fb      	adds	r3, r7, r3
   e8a7a:	f106 30ff 	add.w	r0, r6, #4294967295
   e8a7e:	f080 8119 	bcs.w	e8cb4 <__udivmoddi4+0x288>
   e8a82:	4299      	cmp	r1, r3
   e8a84:	f240 8116 	bls.w	e8cb4 <__udivmoddi4+0x288>
   e8a88:	3e02      	subs	r6, #2
   e8a8a:	443b      	add	r3, r7
   e8a8c:	1a5b      	subs	r3, r3, r1
   e8a8e:	b2a4      	uxth	r4, r4
   e8a90:	fbb3 f0f8 	udiv	r0, r3, r8
   e8a94:	fb08 3310 	mls	r3, r8, r0, r3
   e8a98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   e8a9c:	fb00 fe0e 	mul.w	lr, r0, lr
   e8aa0:	45a6      	cmp	lr, r4
   e8aa2:	d909      	bls.n	e8ab8 <__udivmoddi4+0x8c>
   e8aa4:	193c      	adds	r4, r7, r4
   e8aa6:	f100 33ff 	add.w	r3, r0, #4294967295
   e8aaa:	f080 8105 	bcs.w	e8cb8 <__udivmoddi4+0x28c>
   e8aae:	45a6      	cmp	lr, r4
   e8ab0:	f240 8102 	bls.w	e8cb8 <__udivmoddi4+0x28c>
   e8ab4:	3802      	subs	r0, #2
   e8ab6:	443c      	add	r4, r7
   e8ab8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   e8abc:	eba4 040e 	sub.w	r4, r4, lr
   e8ac0:	2600      	movs	r6, #0
   e8ac2:	b11d      	cbz	r5, e8acc <__udivmoddi4+0xa0>
   e8ac4:	40d4      	lsrs	r4, r2
   e8ac6:	2300      	movs	r3, #0
   e8ac8:	e9c5 4300 	strd	r4, r3, [r5]
   e8acc:	4631      	mov	r1, r6
   e8ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e8ad2:	b902      	cbnz	r2, e8ad6 <__udivmoddi4+0xaa>
   e8ad4:	deff      	udf	#255	; 0xff
   e8ad6:	fab2 f282 	clz	r2, r2
   e8ada:	2a00      	cmp	r2, #0
   e8adc:	d150      	bne.n	e8b80 <__udivmoddi4+0x154>
   e8ade:	1bcb      	subs	r3, r1, r7
   e8ae0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   e8ae4:	fa1f f887 	uxth.w	r8, r7
   e8ae8:	2601      	movs	r6, #1
   e8aea:	fbb3 fcfe 	udiv	ip, r3, lr
   e8aee:	0c21      	lsrs	r1, r4, #16
   e8af0:	fb0e 331c 	mls	r3, lr, ip, r3
   e8af4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   e8af8:	fb08 f30c 	mul.w	r3, r8, ip
   e8afc:	428b      	cmp	r3, r1
   e8afe:	d907      	bls.n	e8b10 <__udivmoddi4+0xe4>
   e8b00:	1879      	adds	r1, r7, r1
   e8b02:	f10c 30ff 	add.w	r0, ip, #4294967295
   e8b06:	d202      	bcs.n	e8b0e <__udivmoddi4+0xe2>
   e8b08:	428b      	cmp	r3, r1
   e8b0a:	f200 80e9 	bhi.w	e8ce0 <__udivmoddi4+0x2b4>
   e8b0e:	4684      	mov	ip, r0
   e8b10:	1ac9      	subs	r1, r1, r3
   e8b12:	b2a3      	uxth	r3, r4
   e8b14:	fbb1 f0fe 	udiv	r0, r1, lr
   e8b18:	fb0e 1110 	mls	r1, lr, r0, r1
   e8b1c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   e8b20:	fb08 f800 	mul.w	r8, r8, r0
   e8b24:	45a0      	cmp	r8, r4
   e8b26:	d907      	bls.n	e8b38 <__udivmoddi4+0x10c>
   e8b28:	193c      	adds	r4, r7, r4
   e8b2a:	f100 33ff 	add.w	r3, r0, #4294967295
   e8b2e:	d202      	bcs.n	e8b36 <__udivmoddi4+0x10a>
   e8b30:	45a0      	cmp	r8, r4
   e8b32:	f200 80d9 	bhi.w	e8ce8 <__udivmoddi4+0x2bc>
   e8b36:	4618      	mov	r0, r3
   e8b38:	eba4 0408 	sub.w	r4, r4, r8
   e8b3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   e8b40:	e7bf      	b.n	e8ac2 <__udivmoddi4+0x96>
   e8b42:	428b      	cmp	r3, r1
   e8b44:	d909      	bls.n	e8b5a <__udivmoddi4+0x12e>
   e8b46:	2d00      	cmp	r5, #0
   e8b48:	f000 80b1 	beq.w	e8cae <__udivmoddi4+0x282>
   e8b4c:	2600      	movs	r6, #0
   e8b4e:	e9c5 0100 	strd	r0, r1, [r5]
   e8b52:	4630      	mov	r0, r6
   e8b54:	4631      	mov	r1, r6
   e8b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e8b5a:	fab3 f683 	clz	r6, r3
   e8b5e:	2e00      	cmp	r6, #0
   e8b60:	d14a      	bne.n	e8bf8 <__udivmoddi4+0x1cc>
   e8b62:	428b      	cmp	r3, r1
   e8b64:	d302      	bcc.n	e8b6c <__udivmoddi4+0x140>
   e8b66:	4282      	cmp	r2, r0
   e8b68:	f200 80b8 	bhi.w	e8cdc <__udivmoddi4+0x2b0>
   e8b6c:	1a84      	subs	r4, r0, r2
   e8b6e:	eb61 0103 	sbc.w	r1, r1, r3
   e8b72:	2001      	movs	r0, #1
   e8b74:	468c      	mov	ip, r1
   e8b76:	2d00      	cmp	r5, #0
   e8b78:	d0a8      	beq.n	e8acc <__udivmoddi4+0xa0>
   e8b7a:	e9c5 4c00 	strd	r4, ip, [r5]
   e8b7e:	e7a5      	b.n	e8acc <__udivmoddi4+0xa0>
   e8b80:	f1c2 0320 	rsb	r3, r2, #32
   e8b84:	fa20 f603 	lsr.w	r6, r0, r3
   e8b88:	4097      	lsls	r7, r2
   e8b8a:	fa01 f002 	lsl.w	r0, r1, r2
   e8b8e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   e8b92:	40d9      	lsrs	r1, r3
   e8b94:	4330      	orrs	r0, r6
   e8b96:	0c03      	lsrs	r3, r0, #16
   e8b98:	fbb1 f6fe 	udiv	r6, r1, lr
   e8b9c:	fa1f f887 	uxth.w	r8, r7
   e8ba0:	fb0e 1116 	mls	r1, lr, r6, r1
   e8ba4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   e8ba8:	fb06 f108 	mul.w	r1, r6, r8
   e8bac:	4299      	cmp	r1, r3
   e8bae:	fa04 f402 	lsl.w	r4, r4, r2
   e8bb2:	d909      	bls.n	e8bc8 <__udivmoddi4+0x19c>
   e8bb4:	18fb      	adds	r3, r7, r3
   e8bb6:	f106 3cff 	add.w	ip, r6, #4294967295
   e8bba:	f080 808d 	bcs.w	e8cd8 <__udivmoddi4+0x2ac>
   e8bbe:	4299      	cmp	r1, r3
   e8bc0:	f240 808a 	bls.w	e8cd8 <__udivmoddi4+0x2ac>
   e8bc4:	3e02      	subs	r6, #2
   e8bc6:	443b      	add	r3, r7
   e8bc8:	1a5b      	subs	r3, r3, r1
   e8bca:	b281      	uxth	r1, r0
   e8bcc:	fbb3 f0fe 	udiv	r0, r3, lr
   e8bd0:	fb0e 3310 	mls	r3, lr, r0, r3
   e8bd4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   e8bd8:	fb00 f308 	mul.w	r3, r0, r8
   e8bdc:	428b      	cmp	r3, r1
   e8bde:	d907      	bls.n	e8bf0 <__udivmoddi4+0x1c4>
   e8be0:	1879      	adds	r1, r7, r1
   e8be2:	f100 3cff 	add.w	ip, r0, #4294967295
   e8be6:	d273      	bcs.n	e8cd0 <__udivmoddi4+0x2a4>
   e8be8:	428b      	cmp	r3, r1
   e8bea:	d971      	bls.n	e8cd0 <__udivmoddi4+0x2a4>
   e8bec:	3802      	subs	r0, #2
   e8bee:	4439      	add	r1, r7
   e8bf0:	1acb      	subs	r3, r1, r3
   e8bf2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   e8bf6:	e778      	b.n	e8aea <__udivmoddi4+0xbe>
   e8bf8:	f1c6 0c20 	rsb	ip, r6, #32
   e8bfc:	fa03 f406 	lsl.w	r4, r3, r6
   e8c00:	fa22 f30c 	lsr.w	r3, r2, ip
   e8c04:	431c      	orrs	r4, r3
   e8c06:	fa20 f70c 	lsr.w	r7, r0, ip
   e8c0a:	fa01 f306 	lsl.w	r3, r1, r6
   e8c0e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   e8c12:	fa21 f10c 	lsr.w	r1, r1, ip
   e8c16:	431f      	orrs	r7, r3
   e8c18:	0c3b      	lsrs	r3, r7, #16
   e8c1a:	fbb1 f9fe 	udiv	r9, r1, lr
   e8c1e:	fa1f f884 	uxth.w	r8, r4
   e8c22:	fb0e 1119 	mls	r1, lr, r9, r1
   e8c26:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   e8c2a:	fb09 fa08 	mul.w	sl, r9, r8
   e8c2e:	458a      	cmp	sl, r1
   e8c30:	fa02 f206 	lsl.w	r2, r2, r6
   e8c34:	fa00 f306 	lsl.w	r3, r0, r6
   e8c38:	d908      	bls.n	e8c4c <__udivmoddi4+0x220>
   e8c3a:	1861      	adds	r1, r4, r1
   e8c3c:	f109 30ff 	add.w	r0, r9, #4294967295
   e8c40:	d248      	bcs.n	e8cd4 <__udivmoddi4+0x2a8>
   e8c42:	458a      	cmp	sl, r1
   e8c44:	d946      	bls.n	e8cd4 <__udivmoddi4+0x2a8>
   e8c46:	f1a9 0902 	sub.w	r9, r9, #2
   e8c4a:	4421      	add	r1, r4
   e8c4c:	eba1 010a 	sub.w	r1, r1, sl
   e8c50:	b2bf      	uxth	r7, r7
   e8c52:	fbb1 f0fe 	udiv	r0, r1, lr
   e8c56:	fb0e 1110 	mls	r1, lr, r0, r1
   e8c5a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   e8c5e:	fb00 f808 	mul.w	r8, r0, r8
   e8c62:	45b8      	cmp	r8, r7
   e8c64:	d907      	bls.n	e8c76 <__udivmoddi4+0x24a>
   e8c66:	19e7      	adds	r7, r4, r7
   e8c68:	f100 31ff 	add.w	r1, r0, #4294967295
   e8c6c:	d22e      	bcs.n	e8ccc <__udivmoddi4+0x2a0>
   e8c6e:	45b8      	cmp	r8, r7
   e8c70:	d92c      	bls.n	e8ccc <__udivmoddi4+0x2a0>
   e8c72:	3802      	subs	r0, #2
   e8c74:	4427      	add	r7, r4
   e8c76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   e8c7a:	eba7 0708 	sub.w	r7, r7, r8
   e8c7e:	fba0 8902 	umull	r8, r9, r0, r2
   e8c82:	454f      	cmp	r7, r9
   e8c84:	46c6      	mov	lr, r8
   e8c86:	4649      	mov	r1, r9
   e8c88:	d31a      	bcc.n	e8cc0 <__udivmoddi4+0x294>
   e8c8a:	d017      	beq.n	e8cbc <__udivmoddi4+0x290>
   e8c8c:	b15d      	cbz	r5, e8ca6 <__udivmoddi4+0x27a>
   e8c8e:	ebb3 020e 	subs.w	r2, r3, lr
   e8c92:	eb67 0701 	sbc.w	r7, r7, r1
   e8c96:	fa07 fc0c 	lsl.w	ip, r7, ip
   e8c9a:	40f2      	lsrs	r2, r6
   e8c9c:	ea4c 0202 	orr.w	r2, ip, r2
   e8ca0:	40f7      	lsrs	r7, r6
   e8ca2:	e9c5 2700 	strd	r2, r7, [r5]
   e8ca6:	2600      	movs	r6, #0
   e8ca8:	4631      	mov	r1, r6
   e8caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e8cae:	462e      	mov	r6, r5
   e8cb0:	4628      	mov	r0, r5
   e8cb2:	e70b      	b.n	e8acc <__udivmoddi4+0xa0>
   e8cb4:	4606      	mov	r6, r0
   e8cb6:	e6e9      	b.n	e8a8c <__udivmoddi4+0x60>
   e8cb8:	4618      	mov	r0, r3
   e8cba:	e6fd      	b.n	e8ab8 <__udivmoddi4+0x8c>
   e8cbc:	4543      	cmp	r3, r8
   e8cbe:	d2e5      	bcs.n	e8c8c <__udivmoddi4+0x260>
   e8cc0:	ebb8 0e02 	subs.w	lr, r8, r2
   e8cc4:	eb69 0104 	sbc.w	r1, r9, r4
   e8cc8:	3801      	subs	r0, #1
   e8cca:	e7df      	b.n	e8c8c <__udivmoddi4+0x260>
   e8ccc:	4608      	mov	r0, r1
   e8cce:	e7d2      	b.n	e8c76 <__udivmoddi4+0x24a>
   e8cd0:	4660      	mov	r0, ip
   e8cd2:	e78d      	b.n	e8bf0 <__udivmoddi4+0x1c4>
   e8cd4:	4681      	mov	r9, r0
   e8cd6:	e7b9      	b.n	e8c4c <__udivmoddi4+0x220>
   e8cd8:	4666      	mov	r6, ip
   e8cda:	e775      	b.n	e8bc8 <__udivmoddi4+0x19c>
   e8cdc:	4630      	mov	r0, r6
   e8cde:	e74a      	b.n	e8b76 <__udivmoddi4+0x14a>
   e8ce0:	f1ac 0c02 	sub.w	ip, ip, #2
   e8ce4:	4439      	add	r1, r7
   e8ce6:	e713      	b.n	e8b10 <__udivmoddi4+0xe4>
   e8ce8:	3802      	subs	r0, #2
   e8cea:	443c      	add	r4, r7
   e8cec:	e724      	b.n	e8b38 <__udivmoddi4+0x10c>
   e8cee:	bf00      	nop

000e8cf0 <__aeabi_idiv0>:
   e8cf0:	4770      	bx	lr
   e8cf2:	bf00      	nop

000e8cf4 <atoi>:
   e8cf4:	220a      	movs	r2, #10
   e8cf6:	2100      	movs	r1, #0
   e8cf8:	f000 bfce 	b.w	e9c98 <strtol>

000e8cfc <calloc>:
   e8cfc:	4b02      	ldr	r3, [pc, #8]	; (e8d08 <calloc+0xc>)
   e8cfe:	460a      	mov	r2, r1
   e8d00:	4601      	mov	r1, r0
   e8d02:	6818      	ldr	r0, [r3, #0]
   e8d04:	f000 b8a2 	b.w	e8e4c <_calloc_r>
   e8d08:	2003ac54 	.word	0x2003ac54

000e8d0c <__cxa_atexit>:
   e8d0c:	b510      	push	{r4, lr}
   e8d0e:	4c05      	ldr	r4, [pc, #20]	; (e8d24 <__cxa_atexit+0x18>)
   e8d10:	4613      	mov	r3, r2
   e8d12:	b12c      	cbz	r4, e8d20 <__cxa_atexit+0x14>
   e8d14:	460a      	mov	r2, r1
   e8d16:	4601      	mov	r1, r0
   e8d18:	2002      	movs	r0, #2
   e8d1a:	f3af 8000 	nop.w
   e8d1e:	bd10      	pop	{r4, pc}
   e8d20:	4620      	mov	r0, r4
   e8d22:	e7fc      	b.n	e8d1e <__cxa_atexit+0x12>
	...

000e8d30 <memchr>:
   e8d30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   e8d34:	2a10      	cmp	r2, #16
   e8d36:	db2b      	blt.n	e8d90 <memchr+0x60>
   e8d38:	f010 0f07 	tst.w	r0, #7
   e8d3c:	d008      	beq.n	e8d50 <memchr+0x20>
   e8d3e:	f810 3b01 	ldrb.w	r3, [r0], #1
   e8d42:	3a01      	subs	r2, #1
   e8d44:	428b      	cmp	r3, r1
   e8d46:	d02d      	beq.n	e8da4 <memchr+0x74>
   e8d48:	f010 0f07 	tst.w	r0, #7
   e8d4c:	b342      	cbz	r2, e8da0 <memchr+0x70>
   e8d4e:	d1f6      	bne.n	e8d3e <memchr+0xe>
   e8d50:	b4f0      	push	{r4, r5, r6, r7}
   e8d52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   e8d56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   e8d5a:	f022 0407 	bic.w	r4, r2, #7
   e8d5e:	f07f 0700 	mvns.w	r7, #0
   e8d62:	2300      	movs	r3, #0
   e8d64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   e8d68:	3c08      	subs	r4, #8
   e8d6a:	ea85 0501 	eor.w	r5, r5, r1
   e8d6e:	ea86 0601 	eor.w	r6, r6, r1
   e8d72:	fa85 f547 	uadd8	r5, r5, r7
   e8d76:	faa3 f587 	sel	r5, r3, r7
   e8d7a:	fa86 f647 	uadd8	r6, r6, r7
   e8d7e:	faa5 f687 	sel	r6, r5, r7
   e8d82:	b98e      	cbnz	r6, e8da8 <memchr+0x78>
   e8d84:	d1ee      	bne.n	e8d64 <memchr+0x34>
   e8d86:	bcf0      	pop	{r4, r5, r6, r7}
   e8d88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   e8d8c:	f002 0207 	and.w	r2, r2, #7
   e8d90:	b132      	cbz	r2, e8da0 <memchr+0x70>
   e8d92:	f810 3b01 	ldrb.w	r3, [r0], #1
   e8d96:	3a01      	subs	r2, #1
   e8d98:	ea83 0301 	eor.w	r3, r3, r1
   e8d9c:	b113      	cbz	r3, e8da4 <memchr+0x74>
   e8d9e:	d1f8      	bne.n	e8d92 <memchr+0x62>
   e8da0:	2000      	movs	r0, #0
   e8da2:	4770      	bx	lr
   e8da4:	3801      	subs	r0, #1
   e8da6:	4770      	bx	lr
   e8da8:	2d00      	cmp	r5, #0
   e8daa:	bf06      	itte	eq
   e8dac:	4635      	moveq	r5, r6
   e8dae:	3803      	subeq	r0, #3
   e8db0:	3807      	subne	r0, #7
   e8db2:	f015 0f01 	tst.w	r5, #1
   e8db6:	d107      	bne.n	e8dc8 <memchr+0x98>
   e8db8:	3001      	adds	r0, #1
   e8dba:	f415 7f80 	tst.w	r5, #256	; 0x100
   e8dbe:	bf02      	ittt	eq
   e8dc0:	3001      	addeq	r0, #1
   e8dc2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   e8dc6:	3001      	addeq	r0, #1
   e8dc8:	bcf0      	pop	{r4, r5, r6, r7}
   e8dca:	3801      	subs	r0, #1
   e8dcc:	4770      	bx	lr
   e8dce:	bf00      	nop

000e8dd0 <memcmp>:
   e8dd0:	b530      	push	{r4, r5, lr}
   e8dd2:	3901      	subs	r1, #1
   e8dd4:	2400      	movs	r4, #0
   e8dd6:	42a2      	cmp	r2, r4
   e8dd8:	d101      	bne.n	e8dde <memcmp+0xe>
   e8dda:	2000      	movs	r0, #0
   e8ddc:	e005      	b.n	e8dea <memcmp+0x1a>
   e8dde:	5d03      	ldrb	r3, [r0, r4]
   e8de0:	3401      	adds	r4, #1
   e8de2:	5d0d      	ldrb	r5, [r1, r4]
   e8de4:	42ab      	cmp	r3, r5
   e8de6:	d0f6      	beq.n	e8dd6 <memcmp+0x6>
   e8de8:	1b58      	subs	r0, r3, r5
   e8dea:	bd30      	pop	{r4, r5, pc}

000e8dec <memcpy>:
   e8dec:	440a      	add	r2, r1
   e8dee:	4291      	cmp	r1, r2
   e8df0:	f100 33ff 	add.w	r3, r0, #4294967295
   e8df4:	d100      	bne.n	e8df8 <memcpy+0xc>
   e8df6:	4770      	bx	lr
   e8df8:	b510      	push	{r4, lr}
   e8dfa:	f811 4b01 	ldrb.w	r4, [r1], #1
   e8dfe:	f803 4f01 	strb.w	r4, [r3, #1]!
   e8e02:	4291      	cmp	r1, r2
   e8e04:	d1f9      	bne.n	e8dfa <memcpy+0xe>
   e8e06:	bd10      	pop	{r4, pc}

000e8e08 <memmove>:
   e8e08:	4288      	cmp	r0, r1
   e8e0a:	b510      	push	{r4, lr}
   e8e0c:	eb01 0402 	add.w	r4, r1, r2
   e8e10:	d902      	bls.n	e8e18 <memmove+0x10>
   e8e12:	4284      	cmp	r4, r0
   e8e14:	4623      	mov	r3, r4
   e8e16:	d807      	bhi.n	e8e28 <memmove+0x20>
   e8e18:	1e43      	subs	r3, r0, #1
   e8e1a:	42a1      	cmp	r1, r4
   e8e1c:	d008      	beq.n	e8e30 <memmove+0x28>
   e8e1e:	f811 2b01 	ldrb.w	r2, [r1], #1
   e8e22:	f803 2f01 	strb.w	r2, [r3, #1]!
   e8e26:	e7f8      	b.n	e8e1a <memmove+0x12>
   e8e28:	4402      	add	r2, r0
   e8e2a:	4601      	mov	r1, r0
   e8e2c:	428a      	cmp	r2, r1
   e8e2e:	d100      	bne.n	e8e32 <memmove+0x2a>
   e8e30:	bd10      	pop	{r4, pc}
   e8e32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   e8e36:	f802 4d01 	strb.w	r4, [r2, #-1]!
   e8e3a:	e7f7      	b.n	e8e2c <memmove+0x24>

000e8e3c <memset>:
   e8e3c:	4402      	add	r2, r0
   e8e3e:	4603      	mov	r3, r0
   e8e40:	4293      	cmp	r3, r2
   e8e42:	d100      	bne.n	e8e46 <memset+0xa>
   e8e44:	4770      	bx	lr
   e8e46:	f803 1b01 	strb.w	r1, [r3], #1
   e8e4a:	e7f9      	b.n	e8e40 <memset+0x4>

000e8e4c <_calloc_r>:
   e8e4c:	b513      	push	{r0, r1, r4, lr}
   e8e4e:	434a      	muls	r2, r1
   e8e50:	4611      	mov	r1, r2
   e8e52:	9201      	str	r2, [sp, #4]
   e8e54:	f7fc fdd0 	bl	e59f8 <_malloc_r>
   e8e58:	4604      	mov	r4, r0
   e8e5a:	b118      	cbz	r0, e8e64 <_calloc_r+0x18>
   e8e5c:	9a01      	ldr	r2, [sp, #4]
   e8e5e:	2100      	movs	r1, #0
   e8e60:	f7ff ffec 	bl	e8e3c <memset>
   e8e64:	4620      	mov	r0, r4
   e8e66:	b002      	add	sp, #8
   e8e68:	bd10      	pop	{r4, pc}
	...

000e8e6c <srand>:
   e8e6c:	b538      	push	{r3, r4, r5, lr}
   e8e6e:	4b0d      	ldr	r3, [pc, #52]	; (e8ea4 <srand+0x38>)
   e8e70:	681d      	ldr	r5, [r3, #0]
   e8e72:	6bab      	ldr	r3, [r5, #56]	; 0x38
   e8e74:	4604      	mov	r4, r0
   e8e76:	b97b      	cbnz	r3, e8e98 <srand+0x2c>
   e8e78:	2018      	movs	r0, #24
   e8e7a:	f7fc fd8d 	bl	e5998 <malloc>
   e8e7e:	4a0a      	ldr	r2, [pc, #40]	; (e8ea8 <srand+0x3c>)
   e8e80:	4b0a      	ldr	r3, [pc, #40]	; (e8eac <srand+0x40>)
   e8e82:	63a8      	str	r0, [r5, #56]	; 0x38
   e8e84:	e9c0 2300 	strd	r2, r3, [r0]
   e8e88:	4b09      	ldr	r3, [pc, #36]	; (e8eb0 <srand+0x44>)
   e8e8a:	6083      	str	r3, [r0, #8]
   e8e8c:	230b      	movs	r3, #11
   e8e8e:	8183      	strh	r3, [r0, #12]
   e8e90:	2201      	movs	r2, #1
   e8e92:	2300      	movs	r3, #0
   e8e94:	e9c0 2304 	strd	r2, r3, [r0, #16]
   e8e98:	6bab      	ldr	r3, [r5, #56]	; 0x38
   e8e9a:	2200      	movs	r2, #0
   e8e9c:	611c      	str	r4, [r3, #16]
   e8e9e:	615a      	str	r2, [r3, #20]
   e8ea0:	bd38      	pop	{r3, r4, r5, pc}
   e8ea2:	bf00      	nop
   e8ea4:	2003ac54 	.word	0x2003ac54
   e8ea8:	abcd330e 	.word	0xabcd330e
   e8eac:	e66d1234 	.word	0xe66d1234
   e8eb0:	0005deec 	.word	0x0005deec

000e8eb4 <strcmp>:
   e8eb4:	f810 2b01 	ldrb.w	r2, [r0], #1
   e8eb8:	f811 3b01 	ldrb.w	r3, [r1], #1
   e8ebc:	2a01      	cmp	r2, #1
   e8ebe:	bf28      	it	cs
   e8ec0:	429a      	cmpcs	r2, r3
   e8ec2:	d0f7      	beq.n	e8eb4 <strcmp>
   e8ec4:	1ad0      	subs	r0, r2, r3
   e8ec6:	4770      	bx	lr

000e8ec8 <strcpy>:
   e8ec8:	4603      	mov	r3, r0
   e8eca:	f811 2b01 	ldrb.w	r2, [r1], #1
   e8ece:	f803 2b01 	strb.w	r2, [r3], #1
   e8ed2:	2a00      	cmp	r2, #0
   e8ed4:	d1f9      	bne.n	e8eca <strcpy+0x2>
   e8ed6:	4770      	bx	lr

000e8ed8 <strlen>:
   e8ed8:	4603      	mov	r3, r0
   e8eda:	f813 2b01 	ldrb.w	r2, [r3], #1
   e8ede:	2a00      	cmp	r2, #0
   e8ee0:	d1fb      	bne.n	e8eda <strlen+0x2>
   e8ee2:	1a18      	subs	r0, r3, r0
   e8ee4:	3801      	subs	r0, #1
   e8ee6:	4770      	bx	lr

000e8ee8 <strncmp>:
   e8ee8:	b510      	push	{r4, lr}
   e8eea:	b16a      	cbz	r2, e8f08 <strncmp+0x20>
   e8eec:	3901      	subs	r1, #1
   e8eee:	1884      	adds	r4, r0, r2
   e8ef0:	f810 3b01 	ldrb.w	r3, [r0], #1
   e8ef4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   e8ef8:	4293      	cmp	r3, r2
   e8efa:	d103      	bne.n	e8f04 <strncmp+0x1c>
   e8efc:	42a0      	cmp	r0, r4
   e8efe:	d001      	beq.n	e8f04 <strncmp+0x1c>
   e8f00:	2b00      	cmp	r3, #0
   e8f02:	d1f5      	bne.n	e8ef0 <strncmp+0x8>
   e8f04:	1a98      	subs	r0, r3, r2
   e8f06:	bd10      	pop	{r4, pc}
   e8f08:	4610      	mov	r0, r2
   e8f0a:	e7fc      	b.n	e8f06 <strncmp+0x1e>

000e8f0c <strstr>:
   e8f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   e8f0e:	780c      	ldrb	r4, [r1, #0]
   e8f10:	b164      	cbz	r4, e8f2c <strstr+0x20>
   e8f12:	4603      	mov	r3, r0
   e8f14:	781a      	ldrb	r2, [r3, #0]
   e8f16:	4618      	mov	r0, r3
   e8f18:	1c5e      	adds	r6, r3, #1
   e8f1a:	b90a      	cbnz	r2, e8f20 <strstr+0x14>
   e8f1c:	4610      	mov	r0, r2
   e8f1e:	e005      	b.n	e8f2c <strstr+0x20>
   e8f20:	4294      	cmp	r4, r2
   e8f22:	d108      	bne.n	e8f36 <strstr+0x2a>
   e8f24:	460d      	mov	r5, r1
   e8f26:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   e8f2a:	b902      	cbnz	r2, e8f2e <strstr+0x22>
   e8f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e8f2e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   e8f32:	4297      	cmp	r7, r2
   e8f34:	d0f7      	beq.n	e8f26 <strstr+0x1a>
   e8f36:	4633      	mov	r3, r6
   e8f38:	e7ec      	b.n	e8f14 <strstr+0x8>

000e8f3a <sulp>:
   e8f3a:	b570      	push	{r4, r5, r6, lr}
   e8f3c:	4604      	mov	r4, r0
   e8f3e:	460d      	mov	r5, r1
   e8f40:	ec45 4b10 	vmov	d0, r4, r5
   e8f44:	4616      	mov	r6, r2
   e8f46:	f001 fd37 	bl	ea9b8 <__ulp>
   e8f4a:	ec51 0b10 	vmov	r0, r1, d0
   e8f4e:	b17e      	cbz	r6, e8f70 <sulp+0x36>
   e8f50:	f3c5 530a 	ubfx	r3, r5, #20, #11
   e8f54:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e8f58:	2b00      	cmp	r3, #0
   e8f5a:	dd09      	ble.n	e8f70 <sulp+0x36>
   e8f5c:	051b      	lsls	r3, r3, #20
   e8f5e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   e8f62:	2400      	movs	r4, #0
   e8f64:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   e8f68:	4622      	mov	r2, r4
   e8f6a:	462b      	mov	r3, r5
   e8f6c:	f7ff fa30 	bl	e83d0 <__aeabi_dmul>
   e8f70:	bd70      	pop	{r4, r5, r6, pc}
   e8f72:	0000      	movs	r0, r0
   e8f74:	0000      	movs	r0, r0
	...

000e8f78 <_strtod_l>:
   e8f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e8f7c:	b0a3      	sub	sp, #140	; 0x8c
   e8f7e:	461f      	mov	r7, r3
   e8f80:	2300      	movs	r3, #0
   e8f82:	931e      	str	r3, [sp, #120]	; 0x78
   e8f84:	4ba4      	ldr	r3, [pc, #656]	; (e9218 <_strtod_l+0x2a0>)
   e8f86:	9219      	str	r2, [sp, #100]	; 0x64
   e8f88:	681b      	ldr	r3, [r3, #0]
   e8f8a:	9307      	str	r3, [sp, #28]
   e8f8c:	4604      	mov	r4, r0
   e8f8e:	4618      	mov	r0, r3
   e8f90:	4688      	mov	r8, r1
   e8f92:	f7ff ffa1 	bl	e8ed8 <strlen>
   e8f96:	f04f 0a00 	mov.w	sl, #0
   e8f9a:	4605      	mov	r5, r0
   e8f9c:	f04f 0b00 	mov.w	fp, #0
   e8fa0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   e8fa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e8fa6:	781a      	ldrb	r2, [r3, #0]
   e8fa8:	2a2b      	cmp	r2, #43	; 0x2b
   e8faa:	d04c      	beq.n	e9046 <_strtod_l+0xce>
   e8fac:	d839      	bhi.n	e9022 <_strtod_l+0xaa>
   e8fae:	2a0d      	cmp	r2, #13
   e8fb0:	d832      	bhi.n	e9018 <_strtod_l+0xa0>
   e8fb2:	2a08      	cmp	r2, #8
   e8fb4:	d832      	bhi.n	e901c <_strtod_l+0xa4>
   e8fb6:	2a00      	cmp	r2, #0
   e8fb8:	d03c      	beq.n	e9034 <_strtod_l+0xbc>
   e8fba:	2300      	movs	r3, #0
   e8fbc:	930e      	str	r3, [sp, #56]	; 0x38
   e8fbe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   e8fc0:	7833      	ldrb	r3, [r6, #0]
   e8fc2:	2b30      	cmp	r3, #48	; 0x30
   e8fc4:	f040 80b4 	bne.w	e9130 <_strtod_l+0x1b8>
   e8fc8:	7873      	ldrb	r3, [r6, #1]
   e8fca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   e8fce:	2b58      	cmp	r3, #88	; 0x58
   e8fd0:	d16c      	bne.n	e90ac <_strtod_l+0x134>
   e8fd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   e8fd4:	9301      	str	r3, [sp, #4]
   e8fd6:	ab1e      	add	r3, sp, #120	; 0x78
   e8fd8:	9702      	str	r7, [sp, #8]
   e8fda:	9300      	str	r3, [sp, #0]
   e8fdc:	4a8f      	ldr	r2, [pc, #572]	; (e921c <_strtod_l+0x2a4>)
   e8fde:	ab1f      	add	r3, sp, #124	; 0x7c
   e8fe0:	a91d      	add	r1, sp, #116	; 0x74
   e8fe2:	4620      	mov	r0, r4
   e8fe4:	f000 fed2 	bl	e9d8c <__gethex>
   e8fe8:	f010 0707 	ands.w	r7, r0, #7
   e8fec:	4605      	mov	r5, r0
   e8fee:	d005      	beq.n	e8ffc <_strtod_l+0x84>
   e8ff0:	2f06      	cmp	r7, #6
   e8ff2:	d12a      	bne.n	e904a <_strtod_l+0xd2>
   e8ff4:	3601      	adds	r6, #1
   e8ff6:	2300      	movs	r3, #0
   e8ff8:	961d      	str	r6, [sp, #116]	; 0x74
   e8ffa:	930e      	str	r3, [sp, #56]	; 0x38
   e8ffc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e8ffe:	2b00      	cmp	r3, #0
   e9000:	f040 8596 	bne.w	e9b30 <_strtod_l+0xbb8>
   e9004:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   e9006:	b1db      	cbz	r3, e9040 <_strtod_l+0xc8>
   e9008:	4652      	mov	r2, sl
   e900a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   e900e:	ec43 2b10 	vmov	d0, r2, r3
   e9012:	b023      	add	sp, #140	; 0x8c
   e9014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e9018:	2a20      	cmp	r2, #32
   e901a:	d1ce      	bne.n	e8fba <_strtod_l+0x42>
   e901c:	3301      	adds	r3, #1
   e901e:	931d      	str	r3, [sp, #116]	; 0x74
   e9020:	e7c0      	b.n	e8fa4 <_strtod_l+0x2c>
   e9022:	2a2d      	cmp	r2, #45	; 0x2d
   e9024:	d1c9      	bne.n	e8fba <_strtod_l+0x42>
   e9026:	2201      	movs	r2, #1
   e9028:	920e      	str	r2, [sp, #56]	; 0x38
   e902a:	1c5a      	adds	r2, r3, #1
   e902c:	921d      	str	r2, [sp, #116]	; 0x74
   e902e:	785b      	ldrb	r3, [r3, #1]
   e9030:	2b00      	cmp	r3, #0
   e9032:	d1c4      	bne.n	e8fbe <_strtod_l+0x46>
   e9034:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e9036:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   e903a:	2b00      	cmp	r3, #0
   e903c:	f040 8576 	bne.w	e9b2c <_strtod_l+0xbb4>
   e9040:	4652      	mov	r2, sl
   e9042:	465b      	mov	r3, fp
   e9044:	e7e3      	b.n	e900e <_strtod_l+0x96>
   e9046:	2200      	movs	r2, #0
   e9048:	e7ee      	b.n	e9028 <_strtod_l+0xb0>
   e904a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   e904c:	b13a      	cbz	r2, e905e <_strtod_l+0xe6>
   e904e:	2135      	movs	r1, #53	; 0x35
   e9050:	a820      	add	r0, sp, #128	; 0x80
   e9052:	f001 fdb0 	bl	eabb6 <__copybits>
   e9056:	991e      	ldr	r1, [sp, #120]	; 0x78
   e9058:	4620      	mov	r0, r4
   e905a:	f001 f9e5 	bl	ea428 <_Bfree>
   e905e:	3f01      	subs	r7, #1
   e9060:	2f05      	cmp	r7, #5
   e9062:	d807      	bhi.n	e9074 <_strtod_l+0xfc>
   e9064:	e8df f007 	tbb	[pc, r7]
   e9068:	1d180b0e 	.word	0x1d180b0e
   e906c:	030e      	.short	0x030e
   e906e:	f04f 0b00 	mov.w	fp, #0
   e9072:	46da      	mov	sl, fp
   e9074:	0728      	lsls	r0, r5, #28
   e9076:	d5c1      	bpl.n	e8ffc <_strtod_l+0x84>
   e9078:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   e907c:	e7be      	b.n	e8ffc <_strtod_l+0x84>
   e907e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   e9082:	e7f7      	b.n	e9074 <_strtod_l+0xfc>
   e9084:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   e9088:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   e908a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   e908e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   e9092:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   e9096:	e7ed      	b.n	e9074 <_strtod_l+0xfc>
   e9098:	f8df b184 	ldr.w	fp, [pc, #388]	; e9220 <_strtod_l+0x2a8>
   e909c:	f04f 0a00 	mov.w	sl, #0
   e90a0:	e7e8      	b.n	e9074 <_strtod_l+0xfc>
   e90a2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   e90a6:	f04f 3aff 	mov.w	sl, #4294967295
   e90aa:	e7e3      	b.n	e9074 <_strtod_l+0xfc>
   e90ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e90ae:	1c5a      	adds	r2, r3, #1
   e90b0:	921d      	str	r2, [sp, #116]	; 0x74
   e90b2:	785b      	ldrb	r3, [r3, #1]
   e90b4:	2b30      	cmp	r3, #48	; 0x30
   e90b6:	d0f9      	beq.n	e90ac <_strtod_l+0x134>
   e90b8:	2b00      	cmp	r3, #0
   e90ba:	d09f      	beq.n	e8ffc <_strtod_l+0x84>
   e90bc:	2301      	movs	r3, #1
   e90be:	f04f 0900 	mov.w	r9, #0
   e90c2:	9304      	str	r3, [sp, #16]
   e90c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e90c6:	930a      	str	r3, [sp, #40]	; 0x28
   e90c8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   e90cc:	464f      	mov	r7, r9
   e90ce:	220a      	movs	r2, #10
   e90d0:	981d      	ldr	r0, [sp, #116]	; 0x74
   e90d2:	7806      	ldrb	r6, [r0, #0]
   e90d4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   e90d8:	b2d9      	uxtb	r1, r3
   e90da:	2909      	cmp	r1, #9
   e90dc:	d92a      	bls.n	e9134 <_strtod_l+0x1bc>
   e90de:	9907      	ldr	r1, [sp, #28]
   e90e0:	462a      	mov	r2, r5
   e90e2:	f7ff ff01 	bl	e8ee8 <strncmp>
   e90e6:	b398      	cbz	r0, e9150 <_strtod_l+0x1d8>
   e90e8:	2000      	movs	r0, #0
   e90ea:	4633      	mov	r3, r6
   e90ec:	463d      	mov	r5, r7
   e90ee:	9007      	str	r0, [sp, #28]
   e90f0:	4602      	mov	r2, r0
   e90f2:	2b65      	cmp	r3, #101	; 0x65
   e90f4:	d001      	beq.n	e90fa <_strtod_l+0x182>
   e90f6:	2b45      	cmp	r3, #69	; 0x45
   e90f8:	d118      	bne.n	e912c <_strtod_l+0x1b4>
   e90fa:	b91d      	cbnz	r5, e9104 <_strtod_l+0x18c>
   e90fc:	9b04      	ldr	r3, [sp, #16]
   e90fe:	4303      	orrs	r3, r0
   e9100:	d098      	beq.n	e9034 <_strtod_l+0xbc>
   e9102:	2500      	movs	r5, #0
   e9104:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   e9108:	f108 0301 	add.w	r3, r8, #1
   e910c:	931d      	str	r3, [sp, #116]	; 0x74
   e910e:	f898 3001 	ldrb.w	r3, [r8, #1]
   e9112:	2b2b      	cmp	r3, #43	; 0x2b
   e9114:	d075      	beq.n	e9202 <_strtod_l+0x28a>
   e9116:	2b2d      	cmp	r3, #45	; 0x2d
   e9118:	d07b      	beq.n	e9212 <_strtod_l+0x29a>
   e911a:	f04f 0c00 	mov.w	ip, #0
   e911e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   e9122:	2909      	cmp	r1, #9
   e9124:	f240 8082 	bls.w	e922c <_strtod_l+0x2b4>
   e9128:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   e912c:	2600      	movs	r6, #0
   e912e:	e09d      	b.n	e926c <_strtod_l+0x2f4>
   e9130:	2300      	movs	r3, #0
   e9132:	e7c4      	b.n	e90be <_strtod_l+0x146>
   e9134:	2f08      	cmp	r7, #8
   e9136:	bfd8      	it	le
   e9138:	9909      	ldrle	r1, [sp, #36]	; 0x24
   e913a:	f100 0001 	add.w	r0, r0, #1
   e913e:	bfda      	itte	le
   e9140:	fb02 3301 	mlale	r3, r2, r1, r3
   e9144:	9309      	strle	r3, [sp, #36]	; 0x24
   e9146:	fb02 3909 	mlagt	r9, r2, r9, r3
   e914a:	3701      	adds	r7, #1
   e914c:	901d      	str	r0, [sp, #116]	; 0x74
   e914e:	e7bf      	b.n	e90d0 <_strtod_l+0x158>
   e9150:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e9152:	195a      	adds	r2, r3, r5
   e9154:	921d      	str	r2, [sp, #116]	; 0x74
   e9156:	5d5b      	ldrb	r3, [r3, r5]
   e9158:	2f00      	cmp	r7, #0
   e915a:	d037      	beq.n	e91cc <_strtod_l+0x254>
   e915c:	9007      	str	r0, [sp, #28]
   e915e:	463d      	mov	r5, r7
   e9160:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   e9164:	2a09      	cmp	r2, #9
   e9166:	d912      	bls.n	e918e <_strtod_l+0x216>
   e9168:	2201      	movs	r2, #1
   e916a:	e7c2      	b.n	e90f2 <_strtod_l+0x17a>
   e916c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e916e:	1c5a      	adds	r2, r3, #1
   e9170:	921d      	str	r2, [sp, #116]	; 0x74
   e9172:	785b      	ldrb	r3, [r3, #1]
   e9174:	3001      	adds	r0, #1
   e9176:	2b30      	cmp	r3, #48	; 0x30
   e9178:	d0f8      	beq.n	e916c <_strtod_l+0x1f4>
   e917a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   e917e:	2a08      	cmp	r2, #8
   e9180:	f200 84db 	bhi.w	e9b3a <_strtod_l+0xbc2>
   e9184:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   e9186:	9007      	str	r0, [sp, #28]
   e9188:	2000      	movs	r0, #0
   e918a:	920a      	str	r2, [sp, #40]	; 0x28
   e918c:	4605      	mov	r5, r0
   e918e:	3b30      	subs	r3, #48	; 0x30
   e9190:	f100 0201 	add.w	r2, r0, #1
   e9194:	d014      	beq.n	e91c0 <_strtod_l+0x248>
   e9196:	9907      	ldr	r1, [sp, #28]
   e9198:	4411      	add	r1, r2
   e919a:	9107      	str	r1, [sp, #28]
   e919c:	462a      	mov	r2, r5
   e919e:	eb00 0e05 	add.w	lr, r0, r5
   e91a2:	210a      	movs	r1, #10
   e91a4:	4572      	cmp	r2, lr
   e91a6:	d113      	bne.n	e91d0 <_strtod_l+0x258>
   e91a8:	182a      	adds	r2, r5, r0
   e91aa:	2a08      	cmp	r2, #8
   e91ac:	f105 0501 	add.w	r5, r5, #1
   e91b0:	4405      	add	r5, r0
   e91b2:	dc1c      	bgt.n	e91ee <_strtod_l+0x276>
   e91b4:	9909      	ldr	r1, [sp, #36]	; 0x24
   e91b6:	220a      	movs	r2, #10
   e91b8:	fb02 3301 	mla	r3, r2, r1, r3
   e91bc:	9309      	str	r3, [sp, #36]	; 0x24
   e91be:	2200      	movs	r2, #0
   e91c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e91c2:	1c59      	adds	r1, r3, #1
   e91c4:	911d      	str	r1, [sp, #116]	; 0x74
   e91c6:	785b      	ldrb	r3, [r3, #1]
   e91c8:	4610      	mov	r0, r2
   e91ca:	e7c9      	b.n	e9160 <_strtod_l+0x1e8>
   e91cc:	4638      	mov	r0, r7
   e91ce:	e7d2      	b.n	e9176 <_strtod_l+0x1fe>
   e91d0:	2a08      	cmp	r2, #8
   e91d2:	dc04      	bgt.n	e91de <_strtod_l+0x266>
   e91d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
   e91d6:	434e      	muls	r6, r1
   e91d8:	9609      	str	r6, [sp, #36]	; 0x24
   e91da:	3201      	adds	r2, #1
   e91dc:	e7e2      	b.n	e91a4 <_strtod_l+0x22c>
   e91de:	f102 0c01 	add.w	ip, r2, #1
   e91e2:	f1bc 0f10 	cmp.w	ip, #16
   e91e6:	bfd8      	it	le
   e91e8:	fb01 f909 	mulle.w	r9, r1, r9
   e91ec:	e7f5      	b.n	e91da <_strtod_l+0x262>
   e91ee:	2d10      	cmp	r5, #16
   e91f0:	bfdc      	itt	le
   e91f2:	220a      	movle	r2, #10
   e91f4:	fb02 3909 	mlale	r9, r2, r9, r3
   e91f8:	e7e1      	b.n	e91be <_strtod_l+0x246>
   e91fa:	2300      	movs	r3, #0
   e91fc:	9307      	str	r3, [sp, #28]
   e91fe:	2201      	movs	r2, #1
   e9200:	e77c      	b.n	e90fc <_strtod_l+0x184>
   e9202:	f04f 0c00 	mov.w	ip, #0
   e9206:	f108 0302 	add.w	r3, r8, #2
   e920a:	931d      	str	r3, [sp, #116]	; 0x74
   e920c:	f898 3002 	ldrb.w	r3, [r8, #2]
   e9210:	e785      	b.n	e911e <_strtod_l+0x1a6>
   e9212:	f04f 0c01 	mov.w	ip, #1
   e9216:	e7f6      	b.n	e9206 <_strtod_l+0x28e>
   e9218:	000edf2c 	.word	0x000edf2c
   e921c:	000eddd8 	.word	0x000eddd8
   e9220:	7ff00000 	.word	0x7ff00000
   e9224:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e9226:	1c59      	adds	r1, r3, #1
   e9228:	911d      	str	r1, [sp, #116]	; 0x74
   e922a:	785b      	ldrb	r3, [r3, #1]
   e922c:	2b30      	cmp	r3, #48	; 0x30
   e922e:	d0f9      	beq.n	e9224 <_strtod_l+0x2ac>
   e9230:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   e9234:	2908      	cmp	r1, #8
   e9236:	f63f af79 	bhi.w	e912c <_strtod_l+0x1b4>
   e923a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   e923e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e9240:	9308      	str	r3, [sp, #32]
   e9242:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e9244:	1c59      	adds	r1, r3, #1
   e9246:	911d      	str	r1, [sp, #116]	; 0x74
   e9248:	785b      	ldrb	r3, [r3, #1]
   e924a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   e924e:	2e09      	cmp	r6, #9
   e9250:	d937      	bls.n	e92c2 <_strtod_l+0x34a>
   e9252:	9e08      	ldr	r6, [sp, #32]
   e9254:	1b89      	subs	r1, r1, r6
   e9256:	2908      	cmp	r1, #8
   e9258:	f644 661f 	movw	r6, #19999	; 0x4e1f
   e925c:	dc02      	bgt.n	e9264 <_strtod_l+0x2ec>
   e925e:	4576      	cmp	r6, lr
   e9260:	bfa8      	it	ge
   e9262:	4676      	movge	r6, lr
   e9264:	f1bc 0f00 	cmp.w	ip, #0
   e9268:	d000      	beq.n	e926c <_strtod_l+0x2f4>
   e926a:	4276      	negs	r6, r6
   e926c:	2d00      	cmp	r5, #0
   e926e:	d14f      	bne.n	e9310 <_strtod_l+0x398>
   e9270:	9904      	ldr	r1, [sp, #16]
   e9272:	4301      	orrs	r1, r0
   e9274:	f47f aec2 	bne.w	e8ffc <_strtod_l+0x84>
   e9278:	2a00      	cmp	r2, #0
   e927a:	f47f aedb 	bne.w	e9034 <_strtod_l+0xbc>
   e927e:	2b69      	cmp	r3, #105	; 0x69
   e9280:	d027      	beq.n	e92d2 <_strtod_l+0x35a>
   e9282:	dc24      	bgt.n	e92ce <_strtod_l+0x356>
   e9284:	2b49      	cmp	r3, #73	; 0x49
   e9286:	d024      	beq.n	e92d2 <_strtod_l+0x35a>
   e9288:	2b4e      	cmp	r3, #78	; 0x4e
   e928a:	f47f aed3 	bne.w	e9034 <_strtod_l+0xbc>
   e928e:	499e      	ldr	r1, [pc, #632]	; (e9508 <_strtod_l+0x590>)
   e9290:	a81d      	add	r0, sp, #116	; 0x74
   e9292:	f000 ffc1 	bl	ea218 <__match>
   e9296:	2800      	cmp	r0, #0
   e9298:	f43f aecc 	beq.w	e9034 <_strtod_l+0xbc>
   e929c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e929e:	781b      	ldrb	r3, [r3, #0]
   e92a0:	2b28      	cmp	r3, #40	; 0x28
   e92a2:	d12d      	bne.n	e9300 <_strtod_l+0x388>
   e92a4:	4999      	ldr	r1, [pc, #612]	; (e950c <_strtod_l+0x594>)
   e92a6:	aa20      	add	r2, sp, #128	; 0x80
   e92a8:	a81d      	add	r0, sp, #116	; 0x74
   e92aa:	f000 ffc9 	bl	ea240 <__hexnan>
   e92ae:	2805      	cmp	r0, #5
   e92b0:	d126      	bne.n	e9300 <_strtod_l+0x388>
   e92b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   e92b4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   e92b8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   e92bc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   e92c0:	e69c      	b.n	e8ffc <_strtod_l+0x84>
   e92c2:	210a      	movs	r1, #10
   e92c4:	fb01 3e0e 	mla	lr, r1, lr, r3
   e92c8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   e92cc:	e7b9      	b.n	e9242 <_strtod_l+0x2ca>
   e92ce:	2b6e      	cmp	r3, #110	; 0x6e
   e92d0:	e7db      	b.n	e928a <_strtod_l+0x312>
   e92d2:	498f      	ldr	r1, [pc, #572]	; (e9510 <_strtod_l+0x598>)
   e92d4:	a81d      	add	r0, sp, #116	; 0x74
   e92d6:	f000 ff9f 	bl	ea218 <__match>
   e92da:	2800      	cmp	r0, #0
   e92dc:	f43f aeaa 	beq.w	e9034 <_strtod_l+0xbc>
   e92e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e92e2:	498c      	ldr	r1, [pc, #560]	; (e9514 <_strtod_l+0x59c>)
   e92e4:	3b01      	subs	r3, #1
   e92e6:	a81d      	add	r0, sp, #116	; 0x74
   e92e8:	931d      	str	r3, [sp, #116]	; 0x74
   e92ea:	f000 ff95 	bl	ea218 <__match>
   e92ee:	b910      	cbnz	r0, e92f6 <_strtod_l+0x37e>
   e92f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e92f2:	3301      	adds	r3, #1
   e92f4:	931d      	str	r3, [sp, #116]	; 0x74
   e92f6:	f8df b22c 	ldr.w	fp, [pc, #556]	; e9524 <_strtod_l+0x5ac>
   e92fa:	f04f 0a00 	mov.w	sl, #0
   e92fe:	e67d      	b.n	e8ffc <_strtod_l+0x84>
   e9300:	4885      	ldr	r0, [pc, #532]	; (e9518 <_strtod_l+0x5a0>)
   e9302:	f001 fc9d 	bl	eac40 <nan>
   e9306:	ed8d 0b04 	vstr	d0, [sp, #16]
   e930a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   e930e:	e675      	b.n	e8ffc <_strtod_l+0x84>
   e9310:	9b07      	ldr	r3, [sp, #28]
   e9312:	9809      	ldr	r0, [sp, #36]	; 0x24
   e9314:	1af3      	subs	r3, r6, r3
   e9316:	2f00      	cmp	r7, #0
   e9318:	bf08      	it	eq
   e931a:	462f      	moveq	r7, r5
   e931c:	2d10      	cmp	r5, #16
   e931e:	9308      	str	r3, [sp, #32]
   e9320:	46a8      	mov	r8, r5
   e9322:	bfa8      	it	ge
   e9324:	f04f 0810 	movge.w	r8, #16
   e9328:	f7fe ffd8 	bl	e82dc <__aeabi_ui2d>
   e932c:	2d09      	cmp	r5, #9
   e932e:	4682      	mov	sl, r0
   e9330:	468b      	mov	fp, r1
   e9332:	dd13      	ble.n	e935c <_strtod_l+0x3e4>
   e9334:	4b79      	ldr	r3, [pc, #484]	; (e951c <_strtod_l+0x5a4>)
   e9336:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   e933a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   e933e:	f7ff f847 	bl	e83d0 <__aeabi_dmul>
   e9342:	4682      	mov	sl, r0
   e9344:	4648      	mov	r0, r9
   e9346:	468b      	mov	fp, r1
   e9348:	f7fe ffc8 	bl	e82dc <__aeabi_ui2d>
   e934c:	4602      	mov	r2, r0
   e934e:	460b      	mov	r3, r1
   e9350:	4650      	mov	r0, sl
   e9352:	4659      	mov	r1, fp
   e9354:	f7fe fe86 	bl	e8064 <__adddf3>
   e9358:	4682      	mov	sl, r0
   e935a:	468b      	mov	fp, r1
   e935c:	2d0f      	cmp	r5, #15
   e935e:	dc38      	bgt.n	e93d2 <_strtod_l+0x45a>
   e9360:	9b08      	ldr	r3, [sp, #32]
   e9362:	2b00      	cmp	r3, #0
   e9364:	f43f ae4a 	beq.w	e8ffc <_strtod_l+0x84>
   e9368:	dd24      	ble.n	e93b4 <_strtod_l+0x43c>
   e936a:	2b16      	cmp	r3, #22
   e936c:	dc0b      	bgt.n	e9386 <_strtod_l+0x40e>
   e936e:	4d6b      	ldr	r5, [pc, #428]	; (e951c <_strtod_l+0x5a4>)
   e9370:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   e9374:	e9d5 0100 	ldrd	r0, r1, [r5]
   e9378:	4652      	mov	r2, sl
   e937a:	465b      	mov	r3, fp
   e937c:	f7ff f828 	bl	e83d0 <__aeabi_dmul>
   e9380:	4682      	mov	sl, r0
   e9382:	468b      	mov	fp, r1
   e9384:	e63a      	b.n	e8ffc <_strtod_l+0x84>
   e9386:	9a08      	ldr	r2, [sp, #32]
   e9388:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   e938c:	4293      	cmp	r3, r2
   e938e:	db20      	blt.n	e93d2 <_strtod_l+0x45a>
   e9390:	4c62      	ldr	r4, [pc, #392]	; (e951c <_strtod_l+0x5a4>)
   e9392:	f1c5 050f 	rsb	r5, r5, #15
   e9396:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   e939a:	4652      	mov	r2, sl
   e939c:	465b      	mov	r3, fp
   e939e:	e9d1 0100 	ldrd	r0, r1, [r1]
   e93a2:	f7ff f815 	bl	e83d0 <__aeabi_dmul>
   e93a6:	9b08      	ldr	r3, [sp, #32]
   e93a8:	1b5d      	subs	r5, r3, r5
   e93aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   e93ae:	e9d4 2300 	ldrd	r2, r3, [r4]
   e93b2:	e7e3      	b.n	e937c <_strtod_l+0x404>
   e93b4:	9b08      	ldr	r3, [sp, #32]
   e93b6:	3316      	adds	r3, #22
   e93b8:	db0b      	blt.n	e93d2 <_strtod_l+0x45a>
   e93ba:	9b07      	ldr	r3, [sp, #28]
   e93bc:	4a57      	ldr	r2, [pc, #348]	; (e951c <_strtod_l+0x5a4>)
   e93be:	1b9e      	subs	r6, r3, r6
   e93c0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   e93c4:	e9d6 2300 	ldrd	r2, r3, [r6]
   e93c8:	4650      	mov	r0, sl
   e93ca:	4659      	mov	r1, fp
   e93cc:	f7ff f92a 	bl	e8624 <__aeabi_ddiv>
   e93d0:	e7d6      	b.n	e9380 <_strtod_l+0x408>
   e93d2:	9b08      	ldr	r3, [sp, #32]
   e93d4:	eba5 0808 	sub.w	r8, r5, r8
   e93d8:	4498      	add	r8, r3
   e93da:	f1b8 0f00 	cmp.w	r8, #0
   e93de:	dd71      	ble.n	e94c4 <_strtod_l+0x54c>
   e93e0:	f018 030f 	ands.w	r3, r8, #15
   e93e4:	d00a      	beq.n	e93fc <_strtod_l+0x484>
   e93e6:	494d      	ldr	r1, [pc, #308]	; (e951c <_strtod_l+0x5a4>)
   e93e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   e93ec:	4652      	mov	r2, sl
   e93ee:	465b      	mov	r3, fp
   e93f0:	e9d1 0100 	ldrd	r0, r1, [r1]
   e93f4:	f7fe ffec 	bl	e83d0 <__aeabi_dmul>
   e93f8:	4682      	mov	sl, r0
   e93fa:	468b      	mov	fp, r1
   e93fc:	f038 080f 	bics.w	r8, r8, #15
   e9400:	d04d      	beq.n	e949e <_strtod_l+0x526>
   e9402:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   e9406:	dd22      	ble.n	e944e <_strtod_l+0x4d6>
   e9408:	2500      	movs	r5, #0
   e940a:	462e      	mov	r6, r5
   e940c:	9509      	str	r5, [sp, #36]	; 0x24
   e940e:	9507      	str	r5, [sp, #28]
   e9410:	2322      	movs	r3, #34	; 0x22
   e9412:	f8df b110 	ldr.w	fp, [pc, #272]	; e9524 <_strtod_l+0x5ac>
   e9416:	6023      	str	r3, [r4, #0]
   e9418:	f04f 0a00 	mov.w	sl, #0
   e941c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e941e:	2b00      	cmp	r3, #0
   e9420:	f43f adec 	beq.w	e8ffc <_strtod_l+0x84>
   e9424:	991e      	ldr	r1, [sp, #120]	; 0x78
   e9426:	4620      	mov	r0, r4
   e9428:	f000 fffe 	bl	ea428 <_Bfree>
   e942c:	9907      	ldr	r1, [sp, #28]
   e942e:	4620      	mov	r0, r4
   e9430:	f000 fffa 	bl	ea428 <_Bfree>
   e9434:	4631      	mov	r1, r6
   e9436:	4620      	mov	r0, r4
   e9438:	f000 fff6 	bl	ea428 <_Bfree>
   e943c:	9909      	ldr	r1, [sp, #36]	; 0x24
   e943e:	4620      	mov	r0, r4
   e9440:	f000 fff2 	bl	ea428 <_Bfree>
   e9444:	4629      	mov	r1, r5
   e9446:	4620      	mov	r0, r4
   e9448:	f000 ffee 	bl	ea428 <_Bfree>
   e944c:	e5d6      	b.n	e8ffc <_strtod_l+0x84>
   e944e:	2300      	movs	r3, #0
   e9450:	ea4f 1828 	mov.w	r8, r8, asr #4
   e9454:	4650      	mov	r0, sl
   e9456:	4659      	mov	r1, fp
   e9458:	4699      	mov	r9, r3
   e945a:	f1b8 0f01 	cmp.w	r8, #1
   e945e:	dc21      	bgt.n	e94a4 <_strtod_l+0x52c>
   e9460:	b10b      	cbz	r3, e9466 <_strtod_l+0x4ee>
   e9462:	4682      	mov	sl, r0
   e9464:	468b      	mov	fp, r1
   e9466:	4b2e      	ldr	r3, [pc, #184]	; (e9520 <_strtod_l+0x5a8>)
   e9468:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e946c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   e9470:	4652      	mov	r2, sl
   e9472:	465b      	mov	r3, fp
   e9474:	e9d9 0100 	ldrd	r0, r1, [r9]
   e9478:	f7fe ffaa 	bl	e83d0 <__aeabi_dmul>
   e947c:	4b29      	ldr	r3, [pc, #164]	; (e9524 <_strtod_l+0x5ac>)
   e947e:	460a      	mov	r2, r1
   e9480:	400b      	ands	r3, r1
   e9482:	4929      	ldr	r1, [pc, #164]	; (e9528 <_strtod_l+0x5b0>)
   e9484:	428b      	cmp	r3, r1
   e9486:	4682      	mov	sl, r0
   e9488:	d8be      	bhi.n	e9408 <_strtod_l+0x490>
   e948a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   e948e:	428b      	cmp	r3, r1
   e9490:	bf86      	itte	hi
   e9492:	f8df b098 	ldrhi.w	fp, [pc, #152]	; e952c <_strtod_l+0x5b4>
   e9496:	f04f 3aff 	movhi.w	sl, #4294967295
   e949a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   e949e:	2300      	movs	r3, #0
   e94a0:	9304      	str	r3, [sp, #16]
   e94a2:	e081      	b.n	e95a8 <_strtod_l+0x630>
   e94a4:	f018 0f01 	tst.w	r8, #1
   e94a8:	d007      	beq.n	e94ba <_strtod_l+0x542>
   e94aa:	4b1d      	ldr	r3, [pc, #116]	; (e9520 <_strtod_l+0x5a8>)
   e94ac:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   e94b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e94b4:	f7fe ff8c 	bl	e83d0 <__aeabi_dmul>
   e94b8:	2301      	movs	r3, #1
   e94ba:	f109 0901 	add.w	r9, r9, #1
   e94be:	ea4f 0868 	mov.w	r8, r8, asr #1
   e94c2:	e7ca      	b.n	e945a <_strtod_l+0x4e2>
   e94c4:	d0eb      	beq.n	e949e <_strtod_l+0x526>
   e94c6:	f1c8 0800 	rsb	r8, r8, #0
   e94ca:	f018 020f 	ands.w	r2, r8, #15
   e94ce:	d00a      	beq.n	e94e6 <_strtod_l+0x56e>
   e94d0:	4b12      	ldr	r3, [pc, #72]	; (e951c <_strtod_l+0x5a4>)
   e94d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   e94d6:	4650      	mov	r0, sl
   e94d8:	4659      	mov	r1, fp
   e94da:	e9d3 2300 	ldrd	r2, r3, [r3]
   e94de:	f7ff f8a1 	bl	e8624 <__aeabi_ddiv>
   e94e2:	4682      	mov	sl, r0
   e94e4:	468b      	mov	fp, r1
   e94e6:	ea5f 1828 	movs.w	r8, r8, asr #4
   e94ea:	d0d8      	beq.n	e949e <_strtod_l+0x526>
   e94ec:	f1b8 0f1f 	cmp.w	r8, #31
   e94f0:	dd1e      	ble.n	e9530 <_strtod_l+0x5b8>
   e94f2:	2500      	movs	r5, #0
   e94f4:	462e      	mov	r6, r5
   e94f6:	9509      	str	r5, [sp, #36]	; 0x24
   e94f8:	9507      	str	r5, [sp, #28]
   e94fa:	2322      	movs	r3, #34	; 0x22
   e94fc:	f04f 0a00 	mov.w	sl, #0
   e9500:	f04f 0b00 	mov.w	fp, #0
   e9504:	6023      	str	r3, [r4, #0]
   e9506:	e789      	b.n	e941c <_strtod_l+0x4a4>
   e9508:	000ed925 	.word	0x000ed925
   e950c:	000eddec 	.word	0x000eddec
   e9510:	000ed929 	.word	0x000ed929
   e9514:	000eddd0 	.word	0x000eddd0
   e9518:	000ebb9d 	.word	0x000ebb9d
   e951c:	000edf68 	.word	0x000edf68
   e9520:	000edf40 	.word	0x000edf40
   e9524:	7ff00000 	.word	0x7ff00000
   e9528:	7ca00000 	.word	0x7ca00000
   e952c:	7fefffff 	.word	0x7fefffff
   e9530:	f018 0310 	ands.w	r3, r8, #16
   e9534:	bf18      	it	ne
   e9536:	236a      	movne	r3, #106	; 0x6a
   e9538:	f8df 93b4 	ldr.w	r9, [pc, #948]	; e98f0 <_strtod_l+0x978>
   e953c:	9304      	str	r3, [sp, #16]
   e953e:	4650      	mov	r0, sl
   e9540:	4659      	mov	r1, fp
   e9542:	2300      	movs	r3, #0
   e9544:	f018 0f01 	tst.w	r8, #1
   e9548:	d004      	beq.n	e9554 <_strtod_l+0x5dc>
   e954a:	e9d9 2300 	ldrd	r2, r3, [r9]
   e954e:	f7fe ff3f 	bl	e83d0 <__aeabi_dmul>
   e9552:	2301      	movs	r3, #1
   e9554:	ea5f 0868 	movs.w	r8, r8, asr #1
   e9558:	f109 0908 	add.w	r9, r9, #8
   e955c:	d1f2      	bne.n	e9544 <_strtod_l+0x5cc>
   e955e:	b10b      	cbz	r3, e9564 <_strtod_l+0x5ec>
   e9560:	4682      	mov	sl, r0
   e9562:	468b      	mov	fp, r1
   e9564:	9b04      	ldr	r3, [sp, #16]
   e9566:	b1bb      	cbz	r3, e9598 <_strtod_l+0x620>
   e9568:	f3cb 530a 	ubfx	r3, fp, #20, #11
   e956c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e9570:	2b00      	cmp	r3, #0
   e9572:	4659      	mov	r1, fp
   e9574:	dd10      	ble.n	e9598 <_strtod_l+0x620>
   e9576:	2b1f      	cmp	r3, #31
   e9578:	f340 8128 	ble.w	e97cc <_strtod_l+0x854>
   e957c:	2b34      	cmp	r3, #52	; 0x34
   e957e:	bfde      	ittt	le
   e9580:	3b20      	suble	r3, #32
   e9582:	f04f 32ff 	movle.w	r2, #4294967295
   e9586:	fa02 f303 	lslle.w	r3, r2, r3
   e958a:	f04f 0a00 	mov.w	sl, #0
   e958e:	bfcc      	ite	gt
   e9590:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   e9594:	ea03 0b01 	andle.w	fp, r3, r1
   e9598:	2200      	movs	r2, #0
   e959a:	2300      	movs	r3, #0
   e959c:	4650      	mov	r0, sl
   e959e:	4659      	mov	r1, fp
   e95a0:	f7ff f97e 	bl	e88a0 <__aeabi_dcmpeq>
   e95a4:	2800      	cmp	r0, #0
   e95a6:	d1a4      	bne.n	e94f2 <_strtod_l+0x57a>
   e95a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e95aa:	9300      	str	r3, [sp, #0]
   e95ac:	990a      	ldr	r1, [sp, #40]	; 0x28
   e95ae:	462b      	mov	r3, r5
   e95b0:	463a      	mov	r2, r7
   e95b2:	4620      	mov	r0, r4
   e95b4:	f000 ff8d 	bl	ea4d2 <__s2b>
   e95b8:	9009      	str	r0, [sp, #36]	; 0x24
   e95ba:	2800      	cmp	r0, #0
   e95bc:	f43f af24 	beq.w	e9408 <_strtod_l+0x490>
   e95c0:	9b07      	ldr	r3, [sp, #28]
   e95c2:	1b9e      	subs	r6, r3, r6
   e95c4:	9b08      	ldr	r3, [sp, #32]
   e95c6:	2b00      	cmp	r3, #0
   e95c8:	bfb4      	ite	lt
   e95ca:	4633      	movlt	r3, r6
   e95cc:	2300      	movge	r3, #0
   e95ce:	9310      	str	r3, [sp, #64]	; 0x40
   e95d0:	9b08      	ldr	r3, [sp, #32]
   e95d2:	2500      	movs	r5, #0
   e95d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   e95d8:	9318      	str	r3, [sp, #96]	; 0x60
   e95da:	462e      	mov	r6, r5
   e95dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e95de:	4620      	mov	r0, r4
   e95e0:	6859      	ldr	r1, [r3, #4]
   e95e2:	f000 feed 	bl	ea3c0 <_Balloc>
   e95e6:	9007      	str	r0, [sp, #28]
   e95e8:	2800      	cmp	r0, #0
   e95ea:	f43f af11 	beq.w	e9410 <_strtod_l+0x498>
   e95ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e95f0:	691a      	ldr	r2, [r3, #16]
   e95f2:	3202      	adds	r2, #2
   e95f4:	f103 010c 	add.w	r1, r3, #12
   e95f8:	0092      	lsls	r2, r2, #2
   e95fa:	300c      	adds	r0, #12
   e95fc:	f7ff fbf6 	bl	e8dec <memcpy>
   e9600:	ec4b ab10 	vmov	d0, sl, fp
   e9604:	aa20      	add	r2, sp, #128	; 0x80
   e9606:	a91f      	add	r1, sp, #124	; 0x7c
   e9608:	4620      	mov	r0, r4
   e960a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   e960e:	f001 fa4f 	bl	eaab0 <__d2b>
   e9612:	901e      	str	r0, [sp, #120]	; 0x78
   e9614:	2800      	cmp	r0, #0
   e9616:	f43f aefb 	beq.w	e9410 <_strtod_l+0x498>
   e961a:	2101      	movs	r1, #1
   e961c:	4620      	mov	r0, r4
   e961e:	f000 ffe6 	bl	ea5ee <__i2b>
   e9622:	4606      	mov	r6, r0
   e9624:	2800      	cmp	r0, #0
   e9626:	f43f aef3 	beq.w	e9410 <_strtod_l+0x498>
   e962a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   e962c:	9904      	ldr	r1, [sp, #16]
   e962e:	2b00      	cmp	r3, #0
   e9630:	bfab      	itete	ge
   e9632:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   e9634:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   e9636:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   e9638:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   e963c:	bfac      	ite	ge
   e963e:	eb03 0902 	addge.w	r9, r3, r2
   e9642:	1ad7      	sublt	r7, r2, r3
   e9644:	9a20      	ldr	r2, [sp, #128]	; 0x80
   e9646:	eba3 0801 	sub.w	r8, r3, r1
   e964a:	4490      	add	r8, r2
   e964c:	4ba3      	ldr	r3, [pc, #652]	; (e98dc <_strtod_l+0x964>)
   e964e:	f108 38ff 	add.w	r8, r8, #4294967295
   e9652:	4598      	cmp	r8, r3
   e9654:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   e9658:	f280 80cc 	bge.w	e97f4 <_strtod_l+0x87c>
   e965c:	eba3 0308 	sub.w	r3, r3, r8
   e9660:	2b1f      	cmp	r3, #31
   e9662:	eba2 0203 	sub.w	r2, r2, r3
   e9666:	f04f 0101 	mov.w	r1, #1
   e966a:	f300 80b6 	bgt.w	e97da <_strtod_l+0x862>
   e966e:	fa01 f303 	lsl.w	r3, r1, r3
   e9672:	9311      	str	r3, [sp, #68]	; 0x44
   e9674:	2300      	movs	r3, #0
   e9676:	930c      	str	r3, [sp, #48]	; 0x30
   e9678:	eb09 0802 	add.w	r8, r9, r2
   e967c:	9b04      	ldr	r3, [sp, #16]
   e967e:	45c1      	cmp	r9, r8
   e9680:	4417      	add	r7, r2
   e9682:	441f      	add	r7, r3
   e9684:	464b      	mov	r3, r9
   e9686:	bfa8      	it	ge
   e9688:	4643      	movge	r3, r8
   e968a:	42bb      	cmp	r3, r7
   e968c:	bfa8      	it	ge
   e968e:	463b      	movge	r3, r7
   e9690:	2b00      	cmp	r3, #0
   e9692:	bfc2      	ittt	gt
   e9694:	eba8 0803 	subgt.w	r8, r8, r3
   e9698:	1aff      	subgt	r7, r7, r3
   e969a:	eba9 0903 	subgt.w	r9, r9, r3
   e969e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   e96a0:	2b00      	cmp	r3, #0
   e96a2:	dd17      	ble.n	e96d4 <_strtod_l+0x75c>
   e96a4:	4631      	mov	r1, r6
   e96a6:	461a      	mov	r2, r3
   e96a8:	4620      	mov	r0, r4
   e96aa:	f001 f845 	bl	ea738 <__pow5mult>
   e96ae:	4606      	mov	r6, r0
   e96b0:	2800      	cmp	r0, #0
   e96b2:	f43f aead 	beq.w	e9410 <_strtod_l+0x498>
   e96b6:	4601      	mov	r1, r0
   e96b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   e96ba:	4620      	mov	r0, r4
   e96bc:	f000 ffa0 	bl	ea600 <__multiply>
   e96c0:	900f      	str	r0, [sp, #60]	; 0x3c
   e96c2:	2800      	cmp	r0, #0
   e96c4:	f43f aea4 	beq.w	e9410 <_strtod_l+0x498>
   e96c8:	991e      	ldr	r1, [sp, #120]	; 0x78
   e96ca:	4620      	mov	r0, r4
   e96cc:	f000 feac 	bl	ea428 <_Bfree>
   e96d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e96d2:	931e      	str	r3, [sp, #120]	; 0x78
   e96d4:	f1b8 0f00 	cmp.w	r8, #0
   e96d8:	f300 8091 	bgt.w	e97fe <_strtod_l+0x886>
   e96dc:	9b08      	ldr	r3, [sp, #32]
   e96de:	2b00      	cmp	r3, #0
   e96e0:	dd08      	ble.n	e96f4 <_strtod_l+0x77c>
   e96e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e96e4:	9907      	ldr	r1, [sp, #28]
   e96e6:	4620      	mov	r0, r4
   e96e8:	f001 f826 	bl	ea738 <__pow5mult>
   e96ec:	9007      	str	r0, [sp, #28]
   e96ee:	2800      	cmp	r0, #0
   e96f0:	f43f ae8e 	beq.w	e9410 <_strtod_l+0x498>
   e96f4:	2f00      	cmp	r7, #0
   e96f6:	dd08      	ble.n	e970a <_strtod_l+0x792>
   e96f8:	9907      	ldr	r1, [sp, #28]
   e96fa:	463a      	mov	r2, r7
   e96fc:	4620      	mov	r0, r4
   e96fe:	f001 f869 	bl	ea7d4 <__lshift>
   e9702:	9007      	str	r0, [sp, #28]
   e9704:	2800      	cmp	r0, #0
   e9706:	f43f ae83 	beq.w	e9410 <_strtod_l+0x498>
   e970a:	f1b9 0f00 	cmp.w	r9, #0
   e970e:	dd08      	ble.n	e9722 <_strtod_l+0x7aa>
   e9710:	4631      	mov	r1, r6
   e9712:	464a      	mov	r2, r9
   e9714:	4620      	mov	r0, r4
   e9716:	f001 f85d 	bl	ea7d4 <__lshift>
   e971a:	4606      	mov	r6, r0
   e971c:	2800      	cmp	r0, #0
   e971e:	f43f ae77 	beq.w	e9410 <_strtod_l+0x498>
   e9722:	9a07      	ldr	r2, [sp, #28]
   e9724:	991e      	ldr	r1, [sp, #120]	; 0x78
   e9726:	4620      	mov	r0, r4
   e9728:	f001 f8cf 	bl	ea8ca <__mdiff>
   e972c:	4605      	mov	r5, r0
   e972e:	2800      	cmp	r0, #0
   e9730:	f43f ae6e 	beq.w	e9410 <_strtod_l+0x498>
   e9734:	68c3      	ldr	r3, [r0, #12]
   e9736:	930f      	str	r3, [sp, #60]	; 0x3c
   e9738:	2300      	movs	r3, #0
   e973a:	60c3      	str	r3, [r0, #12]
   e973c:	4631      	mov	r1, r6
   e973e:	f001 f8a8 	bl	ea892 <__mcmp>
   e9742:	2800      	cmp	r0, #0
   e9744:	da65      	bge.n	e9812 <_strtod_l+0x89a>
   e9746:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e9748:	ea53 030a 	orrs.w	r3, r3, sl
   e974c:	f040 8087 	bne.w	e985e <_strtod_l+0x8e6>
   e9750:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e9754:	2b00      	cmp	r3, #0
   e9756:	f040 8082 	bne.w	e985e <_strtod_l+0x8e6>
   e975a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e975e:	0d1b      	lsrs	r3, r3, #20
   e9760:	051b      	lsls	r3, r3, #20
   e9762:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e9766:	d97a      	bls.n	e985e <_strtod_l+0x8e6>
   e9768:	696b      	ldr	r3, [r5, #20]
   e976a:	b913      	cbnz	r3, e9772 <_strtod_l+0x7fa>
   e976c:	692b      	ldr	r3, [r5, #16]
   e976e:	2b01      	cmp	r3, #1
   e9770:	dd75      	ble.n	e985e <_strtod_l+0x8e6>
   e9772:	4629      	mov	r1, r5
   e9774:	2201      	movs	r2, #1
   e9776:	4620      	mov	r0, r4
   e9778:	f001 f82c 	bl	ea7d4 <__lshift>
   e977c:	4631      	mov	r1, r6
   e977e:	4605      	mov	r5, r0
   e9780:	f001 f887 	bl	ea892 <__mcmp>
   e9784:	2800      	cmp	r0, #0
   e9786:	dd6a      	ble.n	e985e <_strtod_l+0x8e6>
   e9788:	9904      	ldr	r1, [sp, #16]
   e978a:	4a55      	ldr	r2, [pc, #340]	; (e98e0 <_strtod_l+0x968>)
   e978c:	465b      	mov	r3, fp
   e978e:	2900      	cmp	r1, #0
   e9790:	f000 8085 	beq.w	e989e <_strtod_l+0x926>
   e9794:	ea02 010b 	and.w	r1, r2, fp
   e9798:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   e979c:	dc7f      	bgt.n	e989e <_strtod_l+0x926>
   e979e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   e97a2:	f77f aeaa 	ble.w	e94fa <_strtod_l+0x582>
   e97a6:	4a4f      	ldr	r2, [pc, #316]	; (e98e4 <_strtod_l+0x96c>)
   e97a8:	2300      	movs	r3, #0
   e97aa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   e97ae:	4650      	mov	r0, sl
   e97b0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   e97b4:	4659      	mov	r1, fp
   e97b6:	f7fe fe0b 	bl	e83d0 <__aeabi_dmul>
   e97ba:	460b      	mov	r3, r1
   e97bc:	4303      	orrs	r3, r0
   e97be:	bf08      	it	eq
   e97c0:	2322      	moveq	r3, #34	; 0x22
   e97c2:	4682      	mov	sl, r0
   e97c4:	468b      	mov	fp, r1
   e97c6:	bf08      	it	eq
   e97c8:	6023      	streq	r3, [r4, #0]
   e97ca:	e62b      	b.n	e9424 <_strtod_l+0x4ac>
   e97cc:	f04f 32ff 	mov.w	r2, #4294967295
   e97d0:	fa02 f303 	lsl.w	r3, r2, r3
   e97d4:	ea03 0a0a 	and.w	sl, r3, sl
   e97d8:	e6de      	b.n	e9598 <_strtod_l+0x620>
   e97da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   e97de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   e97e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   e97e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   e97ea:	fa01 f308 	lsl.w	r3, r1, r8
   e97ee:	930c      	str	r3, [sp, #48]	; 0x30
   e97f0:	9111      	str	r1, [sp, #68]	; 0x44
   e97f2:	e741      	b.n	e9678 <_strtod_l+0x700>
   e97f4:	2300      	movs	r3, #0
   e97f6:	930c      	str	r3, [sp, #48]	; 0x30
   e97f8:	2301      	movs	r3, #1
   e97fa:	9311      	str	r3, [sp, #68]	; 0x44
   e97fc:	e73c      	b.n	e9678 <_strtod_l+0x700>
   e97fe:	991e      	ldr	r1, [sp, #120]	; 0x78
   e9800:	4642      	mov	r2, r8
   e9802:	4620      	mov	r0, r4
   e9804:	f000 ffe6 	bl	ea7d4 <__lshift>
   e9808:	901e      	str	r0, [sp, #120]	; 0x78
   e980a:	2800      	cmp	r0, #0
   e980c:	f47f af66 	bne.w	e96dc <_strtod_l+0x764>
   e9810:	e5fe      	b.n	e9410 <_strtod_l+0x498>
   e9812:	465f      	mov	r7, fp
   e9814:	d16e      	bne.n	e98f4 <_strtod_l+0x97c>
   e9816:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   e9818:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e981c:	b342      	cbz	r2, e9870 <_strtod_l+0x8f8>
   e981e:	4a32      	ldr	r2, [pc, #200]	; (e98e8 <_strtod_l+0x970>)
   e9820:	4293      	cmp	r3, r2
   e9822:	d128      	bne.n	e9876 <_strtod_l+0x8fe>
   e9824:	9b04      	ldr	r3, [sp, #16]
   e9826:	4650      	mov	r0, sl
   e9828:	b1eb      	cbz	r3, e9866 <_strtod_l+0x8ee>
   e982a:	4a2d      	ldr	r2, [pc, #180]	; (e98e0 <_strtod_l+0x968>)
   e982c:	403a      	ands	r2, r7
   e982e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   e9832:	f04f 31ff 	mov.w	r1, #4294967295
   e9836:	d819      	bhi.n	e986c <_strtod_l+0x8f4>
   e9838:	0d12      	lsrs	r2, r2, #20
   e983a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   e983e:	fa01 f303 	lsl.w	r3, r1, r3
   e9842:	4298      	cmp	r0, r3
   e9844:	d117      	bne.n	e9876 <_strtod_l+0x8fe>
   e9846:	4b29      	ldr	r3, [pc, #164]	; (e98ec <_strtod_l+0x974>)
   e9848:	429f      	cmp	r7, r3
   e984a:	d102      	bne.n	e9852 <_strtod_l+0x8da>
   e984c:	3001      	adds	r0, #1
   e984e:	f43f addf 	beq.w	e9410 <_strtod_l+0x498>
   e9852:	4b23      	ldr	r3, [pc, #140]	; (e98e0 <_strtod_l+0x968>)
   e9854:	403b      	ands	r3, r7
   e9856:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   e985a:	f04f 0a00 	mov.w	sl, #0
   e985e:	9b04      	ldr	r3, [sp, #16]
   e9860:	2b00      	cmp	r3, #0
   e9862:	d1a0      	bne.n	e97a6 <_strtod_l+0x82e>
   e9864:	e5de      	b.n	e9424 <_strtod_l+0x4ac>
   e9866:	f04f 33ff 	mov.w	r3, #4294967295
   e986a:	e7ea      	b.n	e9842 <_strtod_l+0x8ca>
   e986c:	460b      	mov	r3, r1
   e986e:	e7e8      	b.n	e9842 <_strtod_l+0x8ca>
   e9870:	ea53 030a 	orrs.w	r3, r3, sl
   e9874:	d088      	beq.n	e9788 <_strtod_l+0x810>
   e9876:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e9878:	b1db      	cbz	r3, e98b2 <_strtod_l+0x93a>
   e987a:	423b      	tst	r3, r7
   e987c:	d0ef      	beq.n	e985e <_strtod_l+0x8e6>
   e987e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e9880:	9a04      	ldr	r2, [sp, #16]
   e9882:	4650      	mov	r0, sl
   e9884:	4659      	mov	r1, fp
   e9886:	b1c3      	cbz	r3, e98ba <_strtod_l+0x942>
   e9888:	f7ff fb57 	bl	e8f3a <sulp>
   e988c:	4602      	mov	r2, r0
   e988e:	460b      	mov	r3, r1
   e9890:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e9894:	f7fe fbe6 	bl	e8064 <__adddf3>
   e9898:	4682      	mov	sl, r0
   e989a:	468b      	mov	fp, r1
   e989c:	e7df      	b.n	e985e <_strtod_l+0x8e6>
   e989e:	4013      	ands	r3, r2
   e98a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   e98a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   e98a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   e98ac:	f04f 3aff 	mov.w	sl, #4294967295
   e98b0:	e7d5      	b.n	e985e <_strtod_l+0x8e6>
   e98b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   e98b4:	ea13 0f0a 	tst.w	r3, sl
   e98b8:	e7e0      	b.n	e987c <_strtod_l+0x904>
   e98ba:	f7ff fb3e 	bl	e8f3a <sulp>
   e98be:	4602      	mov	r2, r0
   e98c0:	460b      	mov	r3, r1
   e98c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   e98c6:	f7fe fbcb 	bl	e8060 <__aeabi_dsub>
   e98ca:	2200      	movs	r2, #0
   e98cc:	2300      	movs	r3, #0
   e98ce:	4682      	mov	sl, r0
   e98d0:	468b      	mov	fp, r1
   e98d2:	f7fe ffe5 	bl	e88a0 <__aeabi_dcmpeq>
   e98d6:	2800      	cmp	r0, #0
   e98d8:	d0c1      	beq.n	e985e <_strtod_l+0x8e6>
   e98da:	e60e      	b.n	e94fa <_strtod_l+0x582>
   e98dc:	fffffc02 	.word	0xfffffc02
   e98e0:	7ff00000 	.word	0x7ff00000
   e98e4:	39500000 	.word	0x39500000
   e98e8:	000fffff 	.word	0x000fffff
   e98ec:	7fefffff 	.word	0x7fefffff
   e98f0:	000ede00 	.word	0x000ede00
   e98f4:	4631      	mov	r1, r6
   e98f6:	4628      	mov	r0, r5
   e98f8:	f001 f92a 	bl	eab50 <__ratio>
   e98fc:	ec59 8b10 	vmov	r8, r9, d0
   e9900:	ee10 0a10 	vmov	r0, s0
   e9904:	2200      	movs	r2, #0
   e9906:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e990a:	4649      	mov	r1, r9
   e990c:	f7fe ffdc 	bl	e88c8 <__aeabi_dcmple>
   e9910:	2800      	cmp	r0, #0
   e9912:	d07c      	beq.n	e9a0e <_strtod_l+0xa96>
   e9914:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e9916:	2b00      	cmp	r3, #0
   e9918:	d04c      	beq.n	e99b4 <_strtod_l+0xa3c>
   e991a:	4b95      	ldr	r3, [pc, #596]	; (e9b70 <_strtod_l+0xbf8>)
   e991c:	2200      	movs	r2, #0
   e991e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   e9922:	f8df 924c 	ldr.w	r9, [pc, #588]	; e9b70 <_strtod_l+0xbf8>
   e9926:	f04f 0800 	mov.w	r8, #0
   e992a:	4b92      	ldr	r3, [pc, #584]	; (e9b74 <_strtod_l+0xbfc>)
   e992c:	403b      	ands	r3, r7
   e992e:	9311      	str	r3, [sp, #68]	; 0x44
   e9930:	9a11      	ldr	r2, [sp, #68]	; 0x44
   e9932:	4b91      	ldr	r3, [pc, #580]	; (e9b78 <_strtod_l+0xc00>)
   e9934:	429a      	cmp	r2, r3
   e9936:	f040 80b2 	bne.w	e9a9e <_strtod_l+0xb26>
   e993a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e993e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e9942:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   e9946:	ec4b ab10 	vmov	d0, sl, fp
   e994a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   e994e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   e9952:	f001 f831 	bl	ea9b8 <__ulp>
   e9956:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e995a:	ec53 2b10 	vmov	r2, r3, d0
   e995e:	f7fe fd37 	bl	e83d0 <__aeabi_dmul>
   e9962:	4652      	mov	r2, sl
   e9964:	465b      	mov	r3, fp
   e9966:	f7fe fb7d 	bl	e8064 <__adddf3>
   e996a:	460b      	mov	r3, r1
   e996c:	4981      	ldr	r1, [pc, #516]	; (e9b74 <_strtod_l+0xbfc>)
   e996e:	4a83      	ldr	r2, [pc, #524]	; (e9b7c <_strtod_l+0xc04>)
   e9970:	4019      	ands	r1, r3
   e9972:	4291      	cmp	r1, r2
   e9974:	4682      	mov	sl, r0
   e9976:	d95e      	bls.n	e9a36 <_strtod_l+0xabe>
   e9978:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   e997a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   e997e:	4293      	cmp	r3, r2
   e9980:	d103      	bne.n	e998a <_strtod_l+0xa12>
   e9982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e9984:	3301      	adds	r3, #1
   e9986:	f43f ad43 	beq.w	e9410 <_strtod_l+0x498>
   e998a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; e9b88 <_strtod_l+0xc10>
   e998e:	f04f 3aff 	mov.w	sl, #4294967295
   e9992:	991e      	ldr	r1, [sp, #120]	; 0x78
   e9994:	4620      	mov	r0, r4
   e9996:	f000 fd47 	bl	ea428 <_Bfree>
   e999a:	9907      	ldr	r1, [sp, #28]
   e999c:	4620      	mov	r0, r4
   e999e:	f000 fd43 	bl	ea428 <_Bfree>
   e99a2:	4631      	mov	r1, r6
   e99a4:	4620      	mov	r0, r4
   e99a6:	f000 fd3f 	bl	ea428 <_Bfree>
   e99aa:	4629      	mov	r1, r5
   e99ac:	4620      	mov	r0, r4
   e99ae:	f000 fd3b 	bl	ea428 <_Bfree>
   e99b2:	e613      	b.n	e95dc <_strtod_l+0x664>
   e99b4:	f1ba 0f00 	cmp.w	sl, #0
   e99b8:	d11b      	bne.n	e99f2 <_strtod_l+0xa7a>
   e99ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e99be:	b9f3      	cbnz	r3, e99fe <_strtod_l+0xa86>
   e99c0:	4b6b      	ldr	r3, [pc, #428]	; (e9b70 <_strtod_l+0xbf8>)
   e99c2:	2200      	movs	r2, #0
   e99c4:	4640      	mov	r0, r8
   e99c6:	4649      	mov	r1, r9
   e99c8:	f7fe ff74 	bl	e88b4 <__aeabi_dcmplt>
   e99cc:	b9d0      	cbnz	r0, e9a04 <_strtod_l+0xa8c>
   e99ce:	4640      	mov	r0, r8
   e99d0:	4649      	mov	r1, r9
   e99d2:	4b6b      	ldr	r3, [pc, #428]	; (e9b80 <_strtod_l+0xc08>)
   e99d4:	2200      	movs	r2, #0
   e99d6:	f7fe fcfb 	bl	e83d0 <__aeabi_dmul>
   e99da:	4680      	mov	r8, r0
   e99dc:	4689      	mov	r9, r1
   e99de:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   e99e2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   e99e6:	931b      	str	r3, [sp, #108]	; 0x6c
   e99e8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   e99ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   e99f0:	e79b      	b.n	e992a <_strtod_l+0x9b2>
   e99f2:	f1ba 0f01 	cmp.w	sl, #1
   e99f6:	d102      	bne.n	e99fe <_strtod_l+0xa86>
   e99f8:	2f00      	cmp	r7, #0
   e99fa:	f43f ad7e 	beq.w	e94fa <_strtod_l+0x582>
   e99fe:	4b61      	ldr	r3, [pc, #388]	; (e9b84 <_strtod_l+0xc0c>)
   e9a00:	2200      	movs	r2, #0
   e9a02:	e78c      	b.n	e991e <_strtod_l+0x9a6>
   e9a04:	f8df 9178 	ldr.w	r9, [pc, #376]	; e9b80 <_strtod_l+0xc08>
   e9a08:	f04f 0800 	mov.w	r8, #0
   e9a0c:	e7e7      	b.n	e99de <_strtod_l+0xa66>
   e9a0e:	4b5c      	ldr	r3, [pc, #368]	; (e9b80 <_strtod_l+0xc08>)
   e9a10:	4640      	mov	r0, r8
   e9a12:	4649      	mov	r1, r9
   e9a14:	2200      	movs	r2, #0
   e9a16:	f7fe fcdb 	bl	e83d0 <__aeabi_dmul>
   e9a1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e9a1c:	4680      	mov	r8, r0
   e9a1e:	4689      	mov	r9, r1
   e9a20:	b933      	cbnz	r3, e9a30 <_strtod_l+0xab8>
   e9a22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e9a26:	9012      	str	r0, [sp, #72]	; 0x48
   e9a28:	9313      	str	r3, [sp, #76]	; 0x4c
   e9a2a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   e9a2e:	e7dd      	b.n	e99ec <_strtod_l+0xa74>
   e9a30:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   e9a34:	e7f9      	b.n	e9a2a <_strtod_l+0xab2>
   e9a36:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   e9a3a:	9b04      	ldr	r3, [sp, #16]
   e9a3c:	2b00      	cmp	r3, #0
   e9a3e:	d1a8      	bne.n	e9992 <_strtod_l+0xa1a>
   e9a40:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e9a44:	9a11      	ldr	r2, [sp, #68]	; 0x44
   e9a46:	0d1b      	lsrs	r3, r3, #20
   e9a48:	051b      	lsls	r3, r3, #20
   e9a4a:	429a      	cmp	r2, r3
   e9a4c:	d1a1      	bne.n	e9992 <_strtod_l+0xa1a>
   e9a4e:	4640      	mov	r0, r8
   e9a50:	4649      	mov	r1, r9
   e9a52:	f001 f90b 	bl	eac6c <__aeabi_d2lz>
   e9a56:	f7fe fc8d 	bl	e8374 <__aeabi_l2d>
   e9a5a:	4602      	mov	r2, r0
   e9a5c:	460b      	mov	r3, r1
   e9a5e:	4640      	mov	r0, r8
   e9a60:	4649      	mov	r1, r9
   e9a62:	f7fe fafd 	bl	e8060 <__aeabi_dsub>
   e9a66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   e9a68:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e9a6c:	ea43 030a 	orr.w	r3, r3, sl
   e9a70:	4313      	orrs	r3, r2
   e9a72:	4680      	mov	r8, r0
   e9a74:	4689      	mov	r9, r1
   e9a76:	d053      	beq.n	e9b20 <_strtod_l+0xba8>
   e9a78:	a335      	add	r3, pc, #212	; (adr r3, e9b50 <_strtod_l+0xbd8>)
   e9a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e9a7e:	f7fe ff19 	bl	e88b4 <__aeabi_dcmplt>
   e9a82:	2800      	cmp	r0, #0
   e9a84:	f47f acce 	bne.w	e9424 <_strtod_l+0x4ac>
   e9a88:	a333      	add	r3, pc, #204	; (adr r3, e9b58 <_strtod_l+0xbe0>)
   e9a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e9a8e:	4640      	mov	r0, r8
   e9a90:	4649      	mov	r1, r9
   e9a92:	f7fe ff2d 	bl	e88f0 <__aeabi_dcmpgt>
   e9a96:	2800      	cmp	r0, #0
   e9a98:	f43f af7b 	beq.w	e9992 <_strtod_l+0xa1a>
   e9a9c:	e4c2      	b.n	e9424 <_strtod_l+0x4ac>
   e9a9e:	9b04      	ldr	r3, [sp, #16]
   e9aa0:	b333      	cbz	r3, e9af0 <_strtod_l+0xb78>
   e9aa2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   e9aa4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e9aa8:	d822      	bhi.n	e9af0 <_strtod_l+0xb78>
   e9aaa:	a32d      	add	r3, pc, #180	; (adr r3, e9b60 <_strtod_l+0xbe8>)
   e9aac:	e9d3 2300 	ldrd	r2, r3, [r3]
   e9ab0:	4640      	mov	r0, r8
   e9ab2:	4649      	mov	r1, r9
   e9ab4:	f7fe ff08 	bl	e88c8 <__aeabi_dcmple>
   e9ab8:	b1a0      	cbz	r0, e9ae4 <_strtod_l+0xb6c>
   e9aba:	4649      	mov	r1, r9
   e9abc:	4640      	mov	r0, r8
   e9abe:	f7fe ff5f 	bl	e8980 <__aeabi_d2uiz>
   e9ac2:	2801      	cmp	r0, #1
   e9ac4:	bf38      	it	cc
   e9ac6:	2001      	movcc	r0, #1
   e9ac8:	f7fe fc08 	bl	e82dc <__aeabi_ui2d>
   e9acc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   e9ace:	4680      	mov	r8, r0
   e9ad0:	4689      	mov	r9, r1
   e9ad2:	bb13      	cbnz	r3, e9b1a <_strtod_l+0xba2>
   e9ad4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e9ad8:	9014      	str	r0, [sp, #80]	; 0x50
   e9ada:	9315      	str	r3, [sp, #84]	; 0x54
   e9adc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   e9ae0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   e9ae4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e9ae6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   e9ae8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   e9aec:	1a9b      	subs	r3, r3, r2
   e9aee:	930d      	str	r3, [sp, #52]	; 0x34
   e9af0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e9af4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   e9af8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   e9afc:	f000 ff5c 	bl	ea9b8 <__ulp>
   e9b00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   e9b04:	ec53 2b10 	vmov	r2, r3, d0
   e9b08:	f7fe fc62 	bl	e83d0 <__aeabi_dmul>
   e9b0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e9b10:	f7fe faa8 	bl	e8064 <__adddf3>
   e9b14:	4682      	mov	sl, r0
   e9b16:	468b      	mov	fp, r1
   e9b18:	e78f      	b.n	e9a3a <_strtod_l+0xac2>
   e9b1a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   e9b1e:	e7dd      	b.n	e9adc <_strtod_l+0xb64>
   e9b20:	a311      	add	r3, pc, #68	; (adr r3, e9b68 <_strtod_l+0xbf0>)
   e9b22:	e9d3 2300 	ldrd	r2, r3, [r3]
   e9b26:	f7fe fec5 	bl	e88b4 <__aeabi_dcmplt>
   e9b2a:	e7b4      	b.n	e9a96 <_strtod_l+0xb1e>
   e9b2c:	2300      	movs	r3, #0
   e9b2e:	930e      	str	r3, [sp, #56]	; 0x38
   e9b30:	9a19      	ldr	r2, [sp, #100]	; 0x64
   e9b32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   e9b34:	6013      	str	r3, [r2, #0]
   e9b36:	f7ff ba65 	b.w	e9004 <_strtod_l+0x8c>
   e9b3a:	2b65      	cmp	r3, #101	; 0x65
   e9b3c:	f43f ab5d 	beq.w	e91fa <_strtod_l+0x282>
   e9b40:	2b45      	cmp	r3, #69	; 0x45
   e9b42:	f43f ab5a 	beq.w	e91fa <_strtod_l+0x282>
   e9b46:	2201      	movs	r2, #1
   e9b48:	f7ff bb92 	b.w	e9270 <_strtod_l+0x2f8>
   e9b4c:	f3af 8000 	nop.w
   e9b50:	94a03595 	.word	0x94a03595
   e9b54:	3fdfffff 	.word	0x3fdfffff
   e9b58:	35afe535 	.word	0x35afe535
   e9b5c:	3fe00000 	.word	0x3fe00000
   e9b60:	ffc00000 	.word	0xffc00000
   e9b64:	41dfffff 	.word	0x41dfffff
   e9b68:	94a03595 	.word	0x94a03595
   e9b6c:	3fcfffff 	.word	0x3fcfffff
   e9b70:	3ff00000 	.word	0x3ff00000
   e9b74:	7ff00000 	.word	0x7ff00000
   e9b78:	7fe00000 	.word	0x7fe00000
   e9b7c:	7c9fffff 	.word	0x7c9fffff
   e9b80:	3fe00000 	.word	0x3fe00000
   e9b84:	bff00000 	.word	0xbff00000
   e9b88:	7fefffff 	.word	0x7fefffff

000e9b8c <strtod>:
   e9b8c:	460a      	mov	r2, r1
   e9b8e:	4601      	mov	r1, r0
   e9b90:	4802      	ldr	r0, [pc, #8]	; (e9b9c <strtod+0x10>)
   e9b92:	4b03      	ldr	r3, [pc, #12]	; (e9ba0 <strtod+0x14>)
   e9b94:	6800      	ldr	r0, [r0, #0]
   e9b96:	f7ff b9ef 	b.w	e8f78 <_strtod_l>
   e9b9a:	bf00      	nop
   e9b9c:	2003ac54 	.word	0x2003ac54
   e9ba0:	2003acbc 	.word	0x2003acbc

000e9ba4 <_strtol_l.isra.0>:
   e9ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e9ba8:	4e3a      	ldr	r6, [pc, #232]	; (e9c94 <_strtol_l.isra.0+0xf0>)
   e9baa:	4686      	mov	lr, r0
   e9bac:	468c      	mov	ip, r1
   e9bae:	4660      	mov	r0, ip
   e9bb0:	f81c 4b01 	ldrb.w	r4, [ip], #1
   e9bb4:	5da5      	ldrb	r5, [r4, r6]
   e9bb6:	f015 0508 	ands.w	r5, r5, #8
   e9bba:	d1f8      	bne.n	e9bae <_strtol_l.isra.0+0xa>
   e9bbc:	2c2d      	cmp	r4, #45	; 0x2d
   e9bbe:	d133      	bne.n	e9c28 <_strtol_l.isra.0+0x84>
   e9bc0:	f89c 4000 	ldrb.w	r4, [ip]
   e9bc4:	f04f 0801 	mov.w	r8, #1
   e9bc8:	f100 0c02 	add.w	ip, r0, #2
   e9bcc:	2b00      	cmp	r3, #0
   e9bce:	d05c      	beq.n	e9c8a <_strtol_l.isra.0+0xe6>
   e9bd0:	2b10      	cmp	r3, #16
   e9bd2:	d10c      	bne.n	e9bee <_strtol_l.isra.0+0x4a>
   e9bd4:	2c30      	cmp	r4, #48	; 0x30
   e9bd6:	d10a      	bne.n	e9bee <_strtol_l.isra.0+0x4a>
   e9bd8:	f89c 0000 	ldrb.w	r0, [ip]
   e9bdc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e9be0:	2858      	cmp	r0, #88	; 0x58
   e9be2:	d14d      	bne.n	e9c80 <_strtol_l.isra.0+0xdc>
   e9be4:	f89c 4001 	ldrb.w	r4, [ip, #1]
   e9be8:	2310      	movs	r3, #16
   e9bea:	f10c 0c02 	add.w	ip, ip, #2
   e9bee:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   e9bf2:	3f01      	subs	r7, #1
   e9bf4:	2600      	movs	r6, #0
   e9bf6:	fbb7 f9f3 	udiv	r9, r7, r3
   e9bfa:	4630      	mov	r0, r6
   e9bfc:	fb03 7a19 	mls	sl, r3, r9, r7
   e9c00:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   e9c04:	2d09      	cmp	r5, #9
   e9c06:	d818      	bhi.n	e9c3a <_strtol_l.isra.0+0x96>
   e9c08:	462c      	mov	r4, r5
   e9c0a:	42a3      	cmp	r3, r4
   e9c0c:	dd24      	ble.n	e9c58 <_strtol_l.isra.0+0xb4>
   e9c0e:	1c75      	adds	r5, r6, #1
   e9c10:	d007      	beq.n	e9c22 <_strtol_l.isra.0+0x7e>
   e9c12:	4581      	cmp	r9, r0
   e9c14:	d31d      	bcc.n	e9c52 <_strtol_l.isra.0+0xae>
   e9c16:	d101      	bne.n	e9c1c <_strtol_l.isra.0+0x78>
   e9c18:	45a2      	cmp	sl, r4
   e9c1a:	db1a      	blt.n	e9c52 <_strtol_l.isra.0+0xae>
   e9c1c:	fb00 4003 	mla	r0, r0, r3, r4
   e9c20:	2601      	movs	r6, #1
   e9c22:	f81c 4b01 	ldrb.w	r4, [ip], #1
   e9c26:	e7eb      	b.n	e9c00 <_strtol_l.isra.0+0x5c>
   e9c28:	2c2b      	cmp	r4, #43	; 0x2b
   e9c2a:	bf08      	it	eq
   e9c2c:	f89c 4000 	ldrbeq.w	r4, [ip]
   e9c30:	46a8      	mov	r8, r5
   e9c32:	bf08      	it	eq
   e9c34:	f100 0c02 	addeq.w	ip, r0, #2
   e9c38:	e7c8      	b.n	e9bcc <_strtol_l.isra.0+0x28>
   e9c3a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   e9c3e:	2d19      	cmp	r5, #25
   e9c40:	d801      	bhi.n	e9c46 <_strtol_l.isra.0+0xa2>
   e9c42:	3c37      	subs	r4, #55	; 0x37
   e9c44:	e7e1      	b.n	e9c0a <_strtol_l.isra.0+0x66>
   e9c46:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   e9c4a:	2d19      	cmp	r5, #25
   e9c4c:	d804      	bhi.n	e9c58 <_strtol_l.isra.0+0xb4>
   e9c4e:	3c57      	subs	r4, #87	; 0x57
   e9c50:	e7db      	b.n	e9c0a <_strtol_l.isra.0+0x66>
   e9c52:	f04f 36ff 	mov.w	r6, #4294967295
   e9c56:	e7e4      	b.n	e9c22 <_strtol_l.isra.0+0x7e>
   e9c58:	1c73      	adds	r3, r6, #1
   e9c5a:	d106      	bne.n	e9c6a <_strtol_l.isra.0+0xc6>
   e9c5c:	2322      	movs	r3, #34	; 0x22
   e9c5e:	f8ce 3000 	str.w	r3, [lr]
   e9c62:	4638      	mov	r0, r7
   e9c64:	b942      	cbnz	r2, e9c78 <_strtol_l.isra.0+0xd4>
   e9c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e9c6a:	f1b8 0f00 	cmp.w	r8, #0
   e9c6e:	d000      	beq.n	e9c72 <_strtol_l.isra.0+0xce>
   e9c70:	4240      	negs	r0, r0
   e9c72:	2a00      	cmp	r2, #0
   e9c74:	d0f7      	beq.n	e9c66 <_strtol_l.isra.0+0xc2>
   e9c76:	b10e      	cbz	r6, e9c7c <_strtol_l.isra.0+0xd8>
   e9c78:	f10c 31ff 	add.w	r1, ip, #4294967295
   e9c7c:	6011      	str	r1, [r2, #0]
   e9c7e:	e7f2      	b.n	e9c66 <_strtol_l.isra.0+0xc2>
   e9c80:	2430      	movs	r4, #48	; 0x30
   e9c82:	2b00      	cmp	r3, #0
   e9c84:	d1b3      	bne.n	e9bee <_strtol_l.isra.0+0x4a>
   e9c86:	2308      	movs	r3, #8
   e9c88:	e7b1      	b.n	e9bee <_strtol_l.isra.0+0x4a>
   e9c8a:	2c30      	cmp	r4, #48	; 0x30
   e9c8c:	d0a4      	beq.n	e9bd8 <_strtol_l.isra.0+0x34>
   e9c8e:	230a      	movs	r3, #10
   e9c90:	e7ad      	b.n	e9bee <_strtol_l.isra.0+0x4a>
   e9c92:	bf00      	nop
   e9c94:	000ede29 	.word	0x000ede29

000e9c98 <strtol>:
   e9c98:	4613      	mov	r3, r2
   e9c9a:	460a      	mov	r2, r1
   e9c9c:	4601      	mov	r1, r0
   e9c9e:	4802      	ldr	r0, [pc, #8]	; (e9ca8 <strtol+0x10>)
   e9ca0:	6800      	ldr	r0, [r0, #0]
   e9ca2:	f7ff bf7f 	b.w	e9ba4 <_strtol_l.isra.0>
   e9ca6:	bf00      	nop
   e9ca8:	2003ac54 	.word	0x2003ac54

000e9cac <gettimeofday>:
   e9cac:	4b02      	ldr	r3, [pc, #8]	; (e9cb8 <gettimeofday+0xc>)
   e9cae:	460a      	mov	r2, r1
   e9cb0:	4601      	mov	r1, r0
   e9cb2:	6818      	ldr	r0, [r3, #0]
   e9cb4:	f000 bb60 	b.w	ea378 <_gettimeofday_r>
   e9cb8:	2003ac54 	.word	0x2003ac54

000e9cbc <rshift>:
   e9cbc:	6903      	ldr	r3, [r0, #16]
   e9cbe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   e9cc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   e9cc6:	ea4f 1261 	mov.w	r2, r1, asr #5
   e9cca:	f100 0414 	add.w	r4, r0, #20
   e9cce:	dd45      	ble.n	e9d5c <rshift+0xa0>
   e9cd0:	f011 011f 	ands.w	r1, r1, #31
   e9cd4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   e9cd8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   e9cdc:	d10c      	bne.n	e9cf8 <rshift+0x3c>
   e9cde:	f100 0710 	add.w	r7, r0, #16
   e9ce2:	4629      	mov	r1, r5
   e9ce4:	42b1      	cmp	r1, r6
   e9ce6:	d334      	bcc.n	e9d52 <rshift+0x96>
   e9ce8:	1a9b      	subs	r3, r3, r2
   e9cea:	009b      	lsls	r3, r3, #2
   e9cec:	1eea      	subs	r2, r5, #3
   e9cee:	4296      	cmp	r6, r2
   e9cf0:	bf38      	it	cc
   e9cf2:	2300      	movcc	r3, #0
   e9cf4:	4423      	add	r3, r4
   e9cf6:	e015      	b.n	e9d24 <rshift+0x68>
   e9cf8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   e9cfc:	f1c1 0820 	rsb	r8, r1, #32
   e9d00:	40cf      	lsrs	r7, r1
   e9d02:	f105 0e04 	add.w	lr, r5, #4
   e9d06:	46a1      	mov	r9, r4
   e9d08:	4576      	cmp	r6, lr
   e9d0a:	46f4      	mov	ip, lr
   e9d0c:	d815      	bhi.n	e9d3a <rshift+0x7e>
   e9d0e:	1a9b      	subs	r3, r3, r2
   e9d10:	009a      	lsls	r2, r3, #2
   e9d12:	3a04      	subs	r2, #4
   e9d14:	3501      	adds	r5, #1
   e9d16:	42ae      	cmp	r6, r5
   e9d18:	bf38      	it	cc
   e9d1a:	2200      	movcc	r2, #0
   e9d1c:	18a3      	adds	r3, r4, r2
   e9d1e:	50a7      	str	r7, [r4, r2]
   e9d20:	b107      	cbz	r7, e9d24 <rshift+0x68>
   e9d22:	3304      	adds	r3, #4
   e9d24:	1b1a      	subs	r2, r3, r4
   e9d26:	42a3      	cmp	r3, r4
   e9d28:	ea4f 02a2 	mov.w	r2, r2, asr #2
   e9d2c:	bf08      	it	eq
   e9d2e:	2300      	moveq	r3, #0
   e9d30:	6102      	str	r2, [r0, #16]
   e9d32:	bf08      	it	eq
   e9d34:	6143      	streq	r3, [r0, #20]
   e9d36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   e9d3a:	f8dc c000 	ldr.w	ip, [ip]
   e9d3e:	fa0c fc08 	lsl.w	ip, ip, r8
   e9d42:	ea4c 0707 	orr.w	r7, ip, r7
   e9d46:	f849 7b04 	str.w	r7, [r9], #4
   e9d4a:	f85e 7b04 	ldr.w	r7, [lr], #4
   e9d4e:	40cf      	lsrs	r7, r1
   e9d50:	e7da      	b.n	e9d08 <rshift+0x4c>
   e9d52:	f851 cb04 	ldr.w	ip, [r1], #4
   e9d56:	f847 cf04 	str.w	ip, [r7, #4]!
   e9d5a:	e7c3      	b.n	e9ce4 <rshift+0x28>
   e9d5c:	4623      	mov	r3, r4
   e9d5e:	e7e1      	b.n	e9d24 <rshift+0x68>

000e9d60 <__hexdig_fun>:
   e9d60:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   e9d64:	2b09      	cmp	r3, #9
   e9d66:	d802      	bhi.n	e9d6e <__hexdig_fun+0xe>
   e9d68:	3820      	subs	r0, #32
   e9d6a:	b2c0      	uxtb	r0, r0
   e9d6c:	4770      	bx	lr
   e9d6e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   e9d72:	2b05      	cmp	r3, #5
   e9d74:	d801      	bhi.n	e9d7a <__hexdig_fun+0x1a>
   e9d76:	3847      	subs	r0, #71	; 0x47
   e9d78:	e7f7      	b.n	e9d6a <__hexdig_fun+0xa>
   e9d7a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   e9d7e:	2b05      	cmp	r3, #5
   e9d80:	d801      	bhi.n	e9d86 <__hexdig_fun+0x26>
   e9d82:	3827      	subs	r0, #39	; 0x27
   e9d84:	e7f1      	b.n	e9d6a <__hexdig_fun+0xa>
   e9d86:	2000      	movs	r0, #0
   e9d88:	4770      	bx	lr
	...

000e9d8c <__gethex>:
   e9d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e9d90:	ed2d 8b02 	vpush	{d8}
   e9d94:	b089      	sub	sp, #36	; 0x24
   e9d96:	ee08 0a10 	vmov	s16, r0
   e9d9a:	9304      	str	r3, [sp, #16]
   e9d9c:	4bbc      	ldr	r3, [pc, #752]	; (ea090 <__gethex+0x304>)
   e9d9e:	681b      	ldr	r3, [r3, #0]
   e9da0:	9301      	str	r3, [sp, #4]
   e9da2:	4618      	mov	r0, r3
   e9da4:	468b      	mov	fp, r1
   e9da6:	4690      	mov	r8, r2
   e9da8:	f7ff f896 	bl	e8ed8 <strlen>
   e9dac:	9b01      	ldr	r3, [sp, #4]
   e9dae:	f8db 2000 	ldr.w	r2, [fp]
   e9db2:	4403      	add	r3, r0
   e9db4:	4682      	mov	sl, r0
   e9db6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   e9dba:	9305      	str	r3, [sp, #20]
   e9dbc:	1c93      	adds	r3, r2, #2
   e9dbe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   e9dc2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   e9dc6:	32fe      	adds	r2, #254	; 0xfe
   e9dc8:	18d1      	adds	r1, r2, r3
   e9dca:	461f      	mov	r7, r3
   e9dcc:	f813 0b01 	ldrb.w	r0, [r3], #1
   e9dd0:	9100      	str	r1, [sp, #0]
   e9dd2:	2830      	cmp	r0, #48	; 0x30
   e9dd4:	d0f8      	beq.n	e9dc8 <__gethex+0x3c>
   e9dd6:	f7ff ffc3 	bl	e9d60 <__hexdig_fun>
   e9dda:	4604      	mov	r4, r0
   e9ddc:	2800      	cmp	r0, #0
   e9dde:	d13a      	bne.n	e9e56 <__gethex+0xca>
   e9de0:	9901      	ldr	r1, [sp, #4]
   e9de2:	4652      	mov	r2, sl
   e9de4:	4638      	mov	r0, r7
   e9de6:	f7ff f87f 	bl	e8ee8 <strncmp>
   e9dea:	4605      	mov	r5, r0
   e9dec:	2800      	cmp	r0, #0
   e9dee:	d168      	bne.n	e9ec2 <__gethex+0x136>
   e9df0:	f817 000a 	ldrb.w	r0, [r7, sl]
   e9df4:	eb07 060a 	add.w	r6, r7, sl
   e9df8:	f7ff ffb2 	bl	e9d60 <__hexdig_fun>
   e9dfc:	2800      	cmp	r0, #0
   e9dfe:	d062      	beq.n	e9ec6 <__gethex+0x13a>
   e9e00:	4633      	mov	r3, r6
   e9e02:	7818      	ldrb	r0, [r3, #0]
   e9e04:	2830      	cmp	r0, #48	; 0x30
   e9e06:	461f      	mov	r7, r3
   e9e08:	f103 0301 	add.w	r3, r3, #1
   e9e0c:	d0f9      	beq.n	e9e02 <__gethex+0x76>
   e9e0e:	f7ff ffa7 	bl	e9d60 <__hexdig_fun>
   e9e12:	2301      	movs	r3, #1
   e9e14:	fab0 f480 	clz	r4, r0
   e9e18:	0964      	lsrs	r4, r4, #5
   e9e1a:	4635      	mov	r5, r6
   e9e1c:	9300      	str	r3, [sp, #0]
   e9e1e:	463a      	mov	r2, r7
   e9e20:	4616      	mov	r6, r2
   e9e22:	3201      	adds	r2, #1
   e9e24:	7830      	ldrb	r0, [r6, #0]
   e9e26:	f7ff ff9b 	bl	e9d60 <__hexdig_fun>
   e9e2a:	2800      	cmp	r0, #0
   e9e2c:	d1f8      	bne.n	e9e20 <__gethex+0x94>
   e9e2e:	9901      	ldr	r1, [sp, #4]
   e9e30:	4652      	mov	r2, sl
   e9e32:	4630      	mov	r0, r6
   e9e34:	f7ff f858 	bl	e8ee8 <strncmp>
   e9e38:	b980      	cbnz	r0, e9e5c <__gethex+0xd0>
   e9e3a:	b94d      	cbnz	r5, e9e50 <__gethex+0xc4>
   e9e3c:	eb06 050a 	add.w	r5, r6, sl
   e9e40:	462a      	mov	r2, r5
   e9e42:	4616      	mov	r6, r2
   e9e44:	3201      	adds	r2, #1
   e9e46:	7830      	ldrb	r0, [r6, #0]
   e9e48:	f7ff ff8a 	bl	e9d60 <__hexdig_fun>
   e9e4c:	2800      	cmp	r0, #0
   e9e4e:	d1f8      	bne.n	e9e42 <__gethex+0xb6>
   e9e50:	1bad      	subs	r5, r5, r6
   e9e52:	00ad      	lsls	r5, r5, #2
   e9e54:	e004      	b.n	e9e60 <__gethex+0xd4>
   e9e56:	2400      	movs	r4, #0
   e9e58:	4625      	mov	r5, r4
   e9e5a:	e7e0      	b.n	e9e1e <__gethex+0x92>
   e9e5c:	2d00      	cmp	r5, #0
   e9e5e:	d1f7      	bne.n	e9e50 <__gethex+0xc4>
   e9e60:	7833      	ldrb	r3, [r6, #0]
   e9e62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   e9e66:	2b50      	cmp	r3, #80	; 0x50
   e9e68:	d13b      	bne.n	e9ee2 <__gethex+0x156>
   e9e6a:	7873      	ldrb	r3, [r6, #1]
   e9e6c:	2b2b      	cmp	r3, #43	; 0x2b
   e9e6e:	d02c      	beq.n	e9eca <__gethex+0x13e>
   e9e70:	2b2d      	cmp	r3, #45	; 0x2d
   e9e72:	d02e      	beq.n	e9ed2 <__gethex+0x146>
   e9e74:	1c71      	adds	r1, r6, #1
   e9e76:	f04f 0900 	mov.w	r9, #0
   e9e7a:	7808      	ldrb	r0, [r1, #0]
   e9e7c:	f7ff ff70 	bl	e9d60 <__hexdig_fun>
   e9e80:	1e43      	subs	r3, r0, #1
   e9e82:	b2db      	uxtb	r3, r3
   e9e84:	2b18      	cmp	r3, #24
   e9e86:	d82c      	bhi.n	e9ee2 <__gethex+0x156>
   e9e88:	f1a0 0210 	sub.w	r2, r0, #16
   e9e8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   e9e90:	f7ff ff66 	bl	e9d60 <__hexdig_fun>
   e9e94:	1e43      	subs	r3, r0, #1
   e9e96:	b2db      	uxtb	r3, r3
   e9e98:	2b18      	cmp	r3, #24
   e9e9a:	d91d      	bls.n	e9ed8 <__gethex+0x14c>
   e9e9c:	f1b9 0f00 	cmp.w	r9, #0
   e9ea0:	d000      	beq.n	e9ea4 <__gethex+0x118>
   e9ea2:	4252      	negs	r2, r2
   e9ea4:	4415      	add	r5, r2
   e9ea6:	f8cb 1000 	str.w	r1, [fp]
   e9eaa:	b1e4      	cbz	r4, e9ee6 <__gethex+0x15a>
   e9eac:	9b00      	ldr	r3, [sp, #0]
   e9eae:	2b00      	cmp	r3, #0
   e9eb0:	bf14      	ite	ne
   e9eb2:	2700      	movne	r7, #0
   e9eb4:	2706      	moveq	r7, #6
   e9eb6:	4638      	mov	r0, r7
   e9eb8:	b009      	add	sp, #36	; 0x24
   e9eba:	ecbd 8b02 	vpop	{d8}
   e9ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e9ec2:	463e      	mov	r6, r7
   e9ec4:	4625      	mov	r5, r4
   e9ec6:	2401      	movs	r4, #1
   e9ec8:	e7ca      	b.n	e9e60 <__gethex+0xd4>
   e9eca:	f04f 0900 	mov.w	r9, #0
   e9ece:	1cb1      	adds	r1, r6, #2
   e9ed0:	e7d3      	b.n	e9e7a <__gethex+0xee>
   e9ed2:	f04f 0901 	mov.w	r9, #1
   e9ed6:	e7fa      	b.n	e9ece <__gethex+0x142>
   e9ed8:	230a      	movs	r3, #10
   e9eda:	fb03 0202 	mla	r2, r3, r2, r0
   e9ede:	3a10      	subs	r2, #16
   e9ee0:	e7d4      	b.n	e9e8c <__gethex+0x100>
   e9ee2:	4631      	mov	r1, r6
   e9ee4:	e7df      	b.n	e9ea6 <__gethex+0x11a>
   e9ee6:	1bf3      	subs	r3, r6, r7
   e9ee8:	3b01      	subs	r3, #1
   e9eea:	4621      	mov	r1, r4
   e9eec:	2b07      	cmp	r3, #7
   e9eee:	dc52      	bgt.n	e9f96 <__gethex+0x20a>
   e9ef0:	ee18 0a10 	vmov	r0, s16
   e9ef4:	f000 fa64 	bl	ea3c0 <_Balloc>
   e9ef8:	f04f 0b00 	mov.w	fp, #0
   e9efc:	f100 0914 	add.w	r9, r0, #20
   e9f00:	f1ca 0301 	rsb	r3, sl, #1
   e9f04:	4604      	mov	r4, r0
   e9f06:	f8cd 9008 	str.w	r9, [sp, #8]
   e9f0a:	f8cd b000 	str.w	fp, [sp]
   e9f0e:	9306      	str	r3, [sp, #24]
   e9f10:	42b7      	cmp	r7, r6
   e9f12:	d343      	bcc.n	e9f9c <__gethex+0x210>
   e9f14:	9802      	ldr	r0, [sp, #8]
   e9f16:	9b00      	ldr	r3, [sp, #0]
   e9f18:	f840 3b04 	str.w	r3, [r0], #4
   e9f1c:	eba0 0009 	sub.w	r0, r0, r9
   e9f20:	1080      	asrs	r0, r0, #2
   e9f22:	0146      	lsls	r6, r0, #5
   e9f24:	6120      	str	r0, [r4, #16]
   e9f26:	4618      	mov	r0, r3
   e9f28:	f000 fb11 	bl	ea54e <__hi0bits>
   e9f2c:	1a30      	subs	r0, r6, r0
   e9f2e:	f8d8 6000 	ldr.w	r6, [r8]
   e9f32:	42b0      	cmp	r0, r6
   e9f34:	dd66      	ble.n	ea004 <__gethex+0x278>
   e9f36:	1b87      	subs	r7, r0, r6
   e9f38:	4639      	mov	r1, r7
   e9f3a:	4620      	mov	r0, r4
   e9f3c:	f000 fe5e 	bl	eabfc <__any_on>
   e9f40:	4682      	mov	sl, r0
   e9f42:	b1a8      	cbz	r0, e9f70 <__gethex+0x1e4>
   e9f44:	1e7b      	subs	r3, r7, #1
   e9f46:	1159      	asrs	r1, r3, #5
   e9f48:	f003 021f 	and.w	r2, r3, #31
   e9f4c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   e9f50:	f04f 0a01 	mov.w	sl, #1
   e9f54:	fa0a f202 	lsl.w	r2, sl, r2
   e9f58:	420a      	tst	r2, r1
   e9f5a:	d009      	beq.n	e9f70 <__gethex+0x1e4>
   e9f5c:	4553      	cmp	r3, sl
   e9f5e:	dd05      	ble.n	e9f6c <__gethex+0x1e0>
   e9f60:	1eb9      	subs	r1, r7, #2
   e9f62:	4620      	mov	r0, r4
   e9f64:	f000 fe4a 	bl	eabfc <__any_on>
   e9f68:	2800      	cmp	r0, #0
   e9f6a:	d148      	bne.n	e9ffe <__gethex+0x272>
   e9f6c:	f04f 0a02 	mov.w	sl, #2
   e9f70:	4639      	mov	r1, r7
   e9f72:	4620      	mov	r0, r4
   e9f74:	f7ff fea2 	bl	e9cbc <rshift>
   e9f78:	443d      	add	r5, r7
   e9f7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e9f7e:	42ab      	cmp	r3, r5
   e9f80:	da4f      	bge.n	ea022 <__gethex+0x296>
   e9f82:	ee18 0a10 	vmov	r0, s16
   e9f86:	4621      	mov	r1, r4
   e9f88:	f000 fa4e 	bl	ea428 <_Bfree>
   e9f8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e9f8e:	2300      	movs	r3, #0
   e9f90:	6013      	str	r3, [r2, #0]
   e9f92:	27a3      	movs	r7, #163	; 0xa3
   e9f94:	e78f      	b.n	e9eb6 <__gethex+0x12a>
   e9f96:	3101      	adds	r1, #1
   e9f98:	105b      	asrs	r3, r3, #1
   e9f9a:	e7a7      	b.n	e9eec <__gethex+0x160>
   e9f9c:	1e73      	subs	r3, r6, #1
   e9f9e:	9a05      	ldr	r2, [sp, #20]
   e9fa0:	9303      	str	r3, [sp, #12]
   e9fa2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   e9fa6:	4293      	cmp	r3, r2
   e9fa8:	d019      	beq.n	e9fde <__gethex+0x252>
   e9faa:	f1bb 0f20 	cmp.w	fp, #32
   e9fae:	d107      	bne.n	e9fc0 <__gethex+0x234>
   e9fb0:	9b02      	ldr	r3, [sp, #8]
   e9fb2:	9a00      	ldr	r2, [sp, #0]
   e9fb4:	f843 2b04 	str.w	r2, [r3], #4
   e9fb8:	9302      	str	r3, [sp, #8]
   e9fba:	2300      	movs	r3, #0
   e9fbc:	9300      	str	r3, [sp, #0]
   e9fbe:	469b      	mov	fp, r3
   e9fc0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   e9fc4:	f7ff fecc 	bl	e9d60 <__hexdig_fun>
   e9fc8:	9b00      	ldr	r3, [sp, #0]
   e9fca:	f000 000f 	and.w	r0, r0, #15
   e9fce:	fa00 f00b 	lsl.w	r0, r0, fp
   e9fd2:	4303      	orrs	r3, r0
   e9fd4:	9300      	str	r3, [sp, #0]
   e9fd6:	f10b 0b04 	add.w	fp, fp, #4
   e9fda:	9b03      	ldr	r3, [sp, #12]
   e9fdc:	e00d      	b.n	e9ffa <__gethex+0x26e>
   e9fde:	9b03      	ldr	r3, [sp, #12]
   e9fe0:	9a06      	ldr	r2, [sp, #24]
   e9fe2:	4413      	add	r3, r2
   e9fe4:	42bb      	cmp	r3, r7
   e9fe6:	d3e0      	bcc.n	e9faa <__gethex+0x21e>
   e9fe8:	4618      	mov	r0, r3
   e9fea:	9901      	ldr	r1, [sp, #4]
   e9fec:	9307      	str	r3, [sp, #28]
   e9fee:	4652      	mov	r2, sl
   e9ff0:	f7fe ff7a 	bl	e8ee8 <strncmp>
   e9ff4:	9b07      	ldr	r3, [sp, #28]
   e9ff6:	2800      	cmp	r0, #0
   e9ff8:	d1d7      	bne.n	e9faa <__gethex+0x21e>
   e9ffa:	461e      	mov	r6, r3
   e9ffc:	e788      	b.n	e9f10 <__gethex+0x184>
   e9ffe:	f04f 0a03 	mov.w	sl, #3
   ea002:	e7b5      	b.n	e9f70 <__gethex+0x1e4>
   ea004:	da0a      	bge.n	ea01c <__gethex+0x290>
   ea006:	1a37      	subs	r7, r6, r0
   ea008:	4621      	mov	r1, r4
   ea00a:	ee18 0a10 	vmov	r0, s16
   ea00e:	463a      	mov	r2, r7
   ea010:	f000 fbe0 	bl	ea7d4 <__lshift>
   ea014:	1bed      	subs	r5, r5, r7
   ea016:	4604      	mov	r4, r0
   ea018:	f100 0914 	add.w	r9, r0, #20
   ea01c:	f04f 0a00 	mov.w	sl, #0
   ea020:	e7ab      	b.n	e9f7a <__gethex+0x1ee>
   ea022:	f8d8 0004 	ldr.w	r0, [r8, #4]
   ea026:	42a8      	cmp	r0, r5
   ea028:	dd6d      	ble.n	ea106 <__gethex+0x37a>
   ea02a:	1b45      	subs	r5, r0, r5
   ea02c:	42ae      	cmp	r6, r5
   ea02e:	dc31      	bgt.n	ea094 <__gethex+0x308>
   ea030:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ea034:	2b02      	cmp	r3, #2
   ea036:	d023      	beq.n	ea080 <__gethex+0x2f4>
   ea038:	2b03      	cmp	r3, #3
   ea03a:	d025      	beq.n	ea088 <__gethex+0x2fc>
   ea03c:	2b01      	cmp	r3, #1
   ea03e:	d115      	bne.n	ea06c <__gethex+0x2e0>
   ea040:	42ae      	cmp	r6, r5
   ea042:	d113      	bne.n	ea06c <__gethex+0x2e0>
   ea044:	2e01      	cmp	r6, #1
   ea046:	d10b      	bne.n	ea060 <__gethex+0x2d4>
   ea048:	9a04      	ldr	r2, [sp, #16]
   ea04a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   ea04e:	6013      	str	r3, [r2, #0]
   ea050:	2301      	movs	r3, #1
   ea052:	6123      	str	r3, [r4, #16]
   ea054:	f8c9 3000 	str.w	r3, [r9]
   ea058:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ea05a:	2762      	movs	r7, #98	; 0x62
   ea05c:	601c      	str	r4, [r3, #0]
   ea05e:	e72a      	b.n	e9eb6 <__gethex+0x12a>
   ea060:	1e71      	subs	r1, r6, #1
   ea062:	4620      	mov	r0, r4
   ea064:	f000 fdca 	bl	eabfc <__any_on>
   ea068:	2800      	cmp	r0, #0
   ea06a:	d1ed      	bne.n	ea048 <__gethex+0x2bc>
   ea06c:	ee18 0a10 	vmov	r0, s16
   ea070:	4621      	mov	r1, r4
   ea072:	f000 f9d9 	bl	ea428 <_Bfree>
   ea076:	9a14      	ldr	r2, [sp, #80]	; 0x50
   ea078:	2300      	movs	r3, #0
   ea07a:	6013      	str	r3, [r2, #0]
   ea07c:	2750      	movs	r7, #80	; 0x50
   ea07e:	e71a      	b.n	e9eb6 <__gethex+0x12a>
   ea080:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ea082:	2b00      	cmp	r3, #0
   ea084:	d1f2      	bne.n	ea06c <__gethex+0x2e0>
   ea086:	e7df      	b.n	ea048 <__gethex+0x2bc>
   ea088:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ea08a:	2b00      	cmp	r3, #0
   ea08c:	d1dc      	bne.n	ea048 <__gethex+0x2bc>
   ea08e:	e7ed      	b.n	ea06c <__gethex+0x2e0>
   ea090:	000edf2c 	.word	0x000edf2c
   ea094:	1e6f      	subs	r7, r5, #1
   ea096:	f1ba 0f00 	cmp.w	sl, #0
   ea09a:	d131      	bne.n	ea100 <__gethex+0x374>
   ea09c:	b127      	cbz	r7, ea0a8 <__gethex+0x31c>
   ea09e:	4639      	mov	r1, r7
   ea0a0:	4620      	mov	r0, r4
   ea0a2:	f000 fdab 	bl	eabfc <__any_on>
   ea0a6:	4682      	mov	sl, r0
   ea0a8:	117b      	asrs	r3, r7, #5
   ea0aa:	2101      	movs	r1, #1
   ea0ac:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   ea0b0:	f007 071f 	and.w	r7, r7, #31
   ea0b4:	fa01 f707 	lsl.w	r7, r1, r7
   ea0b8:	421f      	tst	r7, r3
   ea0ba:	4629      	mov	r1, r5
   ea0bc:	4620      	mov	r0, r4
   ea0be:	bf18      	it	ne
   ea0c0:	f04a 0a02 	orrne.w	sl, sl, #2
   ea0c4:	1b76      	subs	r6, r6, r5
   ea0c6:	f7ff fdf9 	bl	e9cbc <rshift>
   ea0ca:	f8d8 5004 	ldr.w	r5, [r8, #4]
   ea0ce:	2702      	movs	r7, #2
   ea0d0:	f1ba 0f00 	cmp.w	sl, #0
   ea0d4:	d048      	beq.n	ea168 <__gethex+0x3dc>
   ea0d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   ea0da:	2b02      	cmp	r3, #2
   ea0dc:	d015      	beq.n	ea10a <__gethex+0x37e>
   ea0de:	2b03      	cmp	r3, #3
   ea0e0:	d017      	beq.n	ea112 <__gethex+0x386>
   ea0e2:	2b01      	cmp	r3, #1
   ea0e4:	d109      	bne.n	ea0fa <__gethex+0x36e>
   ea0e6:	f01a 0f02 	tst.w	sl, #2
   ea0ea:	d006      	beq.n	ea0fa <__gethex+0x36e>
   ea0ec:	f8d9 0000 	ldr.w	r0, [r9]
   ea0f0:	ea4a 0a00 	orr.w	sl, sl, r0
   ea0f4:	f01a 0f01 	tst.w	sl, #1
   ea0f8:	d10e      	bne.n	ea118 <__gethex+0x38c>
   ea0fa:	f047 0710 	orr.w	r7, r7, #16
   ea0fe:	e033      	b.n	ea168 <__gethex+0x3dc>
   ea100:	f04f 0a01 	mov.w	sl, #1
   ea104:	e7d0      	b.n	ea0a8 <__gethex+0x31c>
   ea106:	2701      	movs	r7, #1
   ea108:	e7e2      	b.n	ea0d0 <__gethex+0x344>
   ea10a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ea10c:	f1c3 0301 	rsb	r3, r3, #1
   ea110:	9315      	str	r3, [sp, #84]	; 0x54
   ea112:	9b15      	ldr	r3, [sp, #84]	; 0x54
   ea114:	2b00      	cmp	r3, #0
   ea116:	d0f0      	beq.n	ea0fa <__gethex+0x36e>
   ea118:	f8d4 9010 	ldr.w	r9, [r4, #16]
   ea11c:	f104 0314 	add.w	r3, r4, #20
   ea120:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   ea124:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   ea128:	f04f 0c00 	mov.w	ip, #0
   ea12c:	4618      	mov	r0, r3
   ea12e:	f853 2b04 	ldr.w	r2, [r3], #4
   ea132:	f1b2 3fff 	cmp.w	r2, #4294967295
   ea136:	d01c      	beq.n	ea172 <__gethex+0x3e6>
   ea138:	3201      	adds	r2, #1
   ea13a:	6002      	str	r2, [r0, #0]
   ea13c:	2f02      	cmp	r7, #2
   ea13e:	f104 0314 	add.w	r3, r4, #20
   ea142:	d13a      	bne.n	ea1ba <__gethex+0x42e>
   ea144:	f8d8 2000 	ldr.w	r2, [r8]
   ea148:	3a01      	subs	r2, #1
   ea14a:	42b2      	cmp	r2, r6
   ea14c:	d10a      	bne.n	ea164 <__gethex+0x3d8>
   ea14e:	1171      	asrs	r1, r6, #5
   ea150:	2201      	movs	r2, #1
   ea152:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   ea156:	f006 061f 	and.w	r6, r6, #31
   ea15a:	fa02 f606 	lsl.w	r6, r2, r6
   ea15e:	421e      	tst	r6, r3
   ea160:	bf18      	it	ne
   ea162:	4617      	movne	r7, r2
   ea164:	f047 0720 	orr.w	r7, r7, #32
   ea168:	9b14      	ldr	r3, [sp, #80]	; 0x50
   ea16a:	601c      	str	r4, [r3, #0]
   ea16c:	9b04      	ldr	r3, [sp, #16]
   ea16e:	601d      	str	r5, [r3, #0]
   ea170:	e6a1      	b.n	e9eb6 <__gethex+0x12a>
   ea172:	4299      	cmp	r1, r3
   ea174:	f843 cc04 	str.w	ip, [r3, #-4]
   ea178:	d8d8      	bhi.n	ea12c <__gethex+0x3a0>
   ea17a:	68a3      	ldr	r3, [r4, #8]
   ea17c:	4599      	cmp	r9, r3
   ea17e:	db14      	blt.n	ea1aa <__gethex+0x41e>
   ea180:	6861      	ldr	r1, [r4, #4]
   ea182:	ee18 0a10 	vmov	r0, s16
   ea186:	3101      	adds	r1, #1
   ea188:	f000 f91a 	bl	ea3c0 <_Balloc>
   ea18c:	6922      	ldr	r2, [r4, #16]
   ea18e:	3202      	adds	r2, #2
   ea190:	f104 010c 	add.w	r1, r4, #12
   ea194:	4682      	mov	sl, r0
   ea196:	0092      	lsls	r2, r2, #2
   ea198:	300c      	adds	r0, #12
   ea19a:	f7fe fe27 	bl	e8dec <memcpy>
   ea19e:	4621      	mov	r1, r4
   ea1a0:	ee18 0a10 	vmov	r0, s16
   ea1a4:	f000 f940 	bl	ea428 <_Bfree>
   ea1a8:	4654      	mov	r4, sl
   ea1aa:	6923      	ldr	r3, [r4, #16]
   ea1ac:	1c5a      	adds	r2, r3, #1
   ea1ae:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   ea1b2:	6122      	str	r2, [r4, #16]
   ea1b4:	2201      	movs	r2, #1
   ea1b6:	615a      	str	r2, [r3, #20]
   ea1b8:	e7c0      	b.n	ea13c <__gethex+0x3b0>
   ea1ba:	6922      	ldr	r2, [r4, #16]
   ea1bc:	454a      	cmp	r2, r9
   ea1be:	dd0b      	ble.n	ea1d8 <__gethex+0x44c>
   ea1c0:	2101      	movs	r1, #1
   ea1c2:	4620      	mov	r0, r4
   ea1c4:	f7ff fd7a 	bl	e9cbc <rshift>
   ea1c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   ea1cc:	3501      	adds	r5, #1
   ea1ce:	42ab      	cmp	r3, r5
   ea1d0:	f6ff aed7 	blt.w	e9f82 <__gethex+0x1f6>
   ea1d4:	2701      	movs	r7, #1
   ea1d6:	e7c5      	b.n	ea164 <__gethex+0x3d8>
   ea1d8:	f016 061f 	ands.w	r6, r6, #31
   ea1dc:	d0fa      	beq.n	ea1d4 <__gethex+0x448>
   ea1de:	449b      	add	fp, r3
   ea1e0:	f1c6 0620 	rsb	r6, r6, #32
   ea1e4:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   ea1e8:	f000 f9b1 	bl	ea54e <__hi0bits>
   ea1ec:	42b0      	cmp	r0, r6
   ea1ee:	dbe7      	blt.n	ea1c0 <__gethex+0x434>
   ea1f0:	e7f0      	b.n	ea1d4 <__gethex+0x448>
   ea1f2:	bf00      	nop

000ea1f4 <L_shift>:
   ea1f4:	f1c2 0208 	rsb	r2, r2, #8
   ea1f8:	0092      	lsls	r2, r2, #2
   ea1fa:	b570      	push	{r4, r5, r6, lr}
   ea1fc:	f1c2 0620 	rsb	r6, r2, #32
   ea200:	6843      	ldr	r3, [r0, #4]
   ea202:	6804      	ldr	r4, [r0, #0]
   ea204:	fa03 f506 	lsl.w	r5, r3, r6
   ea208:	432c      	orrs	r4, r5
   ea20a:	40d3      	lsrs	r3, r2
   ea20c:	6004      	str	r4, [r0, #0]
   ea20e:	f840 3f04 	str.w	r3, [r0, #4]!
   ea212:	4288      	cmp	r0, r1
   ea214:	d3f4      	bcc.n	ea200 <L_shift+0xc>
   ea216:	bd70      	pop	{r4, r5, r6, pc}

000ea218 <__match>:
   ea218:	b530      	push	{r4, r5, lr}
   ea21a:	6803      	ldr	r3, [r0, #0]
   ea21c:	3301      	adds	r3, #1
   ea21e:	f811 4b01 	ldrb.w	r4, [r1], #1
   ea222:	b914      	cbnz	r4, ea22a <__match+0x12>
   ea224:	6003      	str	r3, [r0, #0]
   ea226:	2001      	movs	r0, #1
   ea228:	bd30      	pop	{r4, r5, pc}
   ea22a:	f813 2b01 	ldrb.w	r2, [r3], #1
   ea22e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   ea232:	2d19      	cmp	r5, #25
   ea234:	bf98      	it	ls
   ea236:	3220      	addls	r2, #32
   ea238:	42a2      	cmp	r2, r4
   ea23a:	d0f0      	beq.n	ea21e <__match+0x6>
   ea23c:	2000      	movs	r0, #0
   ea23e:	e7f3      	b.n	ea228 <__match+0x10>

000ea240 <__hexnan>:
   ea240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ea244:	680b      	ldr	r3, [r1, #0]
   ea246:	6801      	ldr	r1, [r0, #0]
   ea248:	115e      	asrs	r6, r3, #5
   ea24a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   ea24e:	f013 031f 	ands.w	r3, r3, #31
   ea252:	b087      	sub	sp, #28
   ea254:	bf18      	it	ne
   ea256:	3604      	addne	r6, #4
   ea258:	2500      	movs	r5, #0
   ea25a:	1f37      	subs	r7, r6, #4
   ea25c:	4682      	mov	sl, r0
   ea25e:	4690      	mov	r8, r2
   ea260:	9301      	str	r3, [sp, #4]
   ea262:	f846 5c04 	str.w	r5, [r6, #-4]
   ea266:	46b9      	mov	r9, r7
   ea268:	463c      	mov	r4, r7
   ea26a:	9502      	str	r5, [sp, #8]
   ea26c:	46ab      	mov	fp, r5
   ea26e:	784a      	ldrb	r2, [r1, #1]
   ea270:	1c4b      	adds	r3, r1, #1
   ea272:	9303      	str	r3, [sp, #12]
   ea274:	b342      	cbz	r2, ea2c8 <__hexnan+0x88>
   ea276:	4610      	mov	r0, r2
   ea278:	9105      	str	r1, [sp, #20]
   ea27a:	9204      	str	r2, [sp, #16]
   ea27c:	f7ff fd70 	bl	e9d60 <__hexdig_fun>
   ea280:	2800      	cmp	r0, #0
   ea282:	d14f      	bne.n	ea324 <__hexnan+0xe4>
   ea284:	9a04      	ldr	r2, [sp, #16]
   ea286:	9905      	ldr	r1, [sp, #20]
   ea288:	2a20      	cmp	r2, #32
   ea28a:	d818      	bhi.n	ea2be <__hexnan+0x7e>
   ea28c:	9b02      	ldr	r3, [sp, #8]
   ea28e:	459b      	cmp	fp, r3
   ea290:	dd13      	ble.n	ea2ba <__hexnan+0x7a>
   ea292:	454c      	cmp	r4, r9
   ea294:	d206      	bcs.n	ea2a4 <__hexnan+0x64>
   ea296:	2d07      	cmp	r5, #7
   ea298:	dc04      	bgt.n	ea2a4 <__hexnan+0x64>
   ea29a:	462a      	mov	r2, r5
   ea29c:	4649      	mov	r1, r9
   ea29e:	4620      	mov	r0, r4
   ea2a0:	f7ff ffa8 	bl	ea1f4 <L_shift>
   ea2a4:	4544      	cmp	r4, r8
   ea2a6:	d950      	bls.n	ea34a <__hexnan+0x10a>
   ea2a8:	2300      	movs	r3, #0
   ea2aa:	f1a4 0904 	sub.w	r9, r4, #4
   ea2ae:	f844 3c04 	str.w	r3, [r4, #-4]
   ea2b2:	f8cd b008 	str.w	fp, [sp, #8]
   ea2b6:	464c      	mov	r4, r9
   ea2b8:	461d      	mov	r5, r3
   ea2ba:	9903      	ldr	r1, [sp, #12]
   ea2bc:	e7d7      	b.n	ea26e <__hexnan+0x2e>
   ea2be:	2a29      	cmp	r2, #41	; 0x29
   ea2c0:	d156      	bne.n	ea370 <__hexnan+0x130>
   ea2c2:	3102      	adds	r1, #2
   ea2c4:	f8ca 1000 	str.w	r1, [sl]
   ea2c8:	f1bb 0f00 	cmp.w	fp, #0
   ea2cc:	d050      	beq.n	ea370 <__hexnan+0x130>
   ea2ce:	454c      	cmp	r4, r9
   ea2d0:	d206      	bcs.n	ea2e0 <__hexnan+0xa0>
   ea2d2:	2d07      	cmp	r5, #7
   ea2d4:	dc04      	bgt.n	ea2e0 <__hexnan+0xa0>
   ea2d6:	462a      	mov	r2, r5
   ea2d8:	4649      	mov	r1, r9
   ea2da:	4620      	mov	r0, r4
   ea2dc:	f7ff ff8a 	bl	ea1f4 <L_shift>
   ea2e0:	4544      	cmp	r4, r8
   ea2e2:	d934      	bls.n	ea34e <__hexnan+0x10e>
   ea2e4:	f1a8 0204 	sub.w	r2, r8, #4
   ea2e8:	4623      	mov	r3, r4
   ea2ea:	f853 1b04 	ldr.w	r1, [r3], #4
   ea2ee:	f842 1f04 	str.w	r1, [r2, #4]!
   ea2f2:	429f      	cmp	r7, r3
   ea2f4:	d2f9      	bcs.n	ea2ea <__hexnan+0xaa>
   ea2f6:	1b3b      	subs	r3, r7, r4
   ea2f8:	f023 0303 	bic.w	r3, r3, #3
   ea2fc:	3304      	adds	r3, #4
   ea2fe:	3401      	adds	r4, #1
   ea300:	3e03      	subs	r6, #3
   ea302:	42b4      	cmp	r4, r6
   ea304:	bf88      	it	hi
   ea306:	2304      	movhi	r3, #4
   ea308:	4443      	add	r3, r8
   ea30a:	2200      	movs	r2, #0
   ea30c:	f843 2b04 	str.w	r2, [r3], #4
   ea310:	429f      	cmp	r7, r3
   ea312:	d2fb      	bcs.n	ea30c <__hexnan+0xcc>
   ea314:	683b      	ldr	r3, [r7, #0]
   ea316:	b91b      	cbnz	r3, ea320 <__hexnan+0xe0>
   ea318:	4547      	cmp	r7, r8
   ea31a:	d127      	bne.n	ea36c <__hexnan+0x12c>
   ea31c:	2301      	movs	r3, #1
   ea31e:	603b      	str	r3, [r7, #0]
   ea320:	2005      	movs	r0, #5
   ea322:	e026      	b.n	ea372 <__hexnan+0x132>
   ea324:	3501      	adds	r5, #1
   ea326:	2d08      	cmp	r5, #8
   ea328:	f10b 0b01 	add.w	fp, fp, #1
   ea32c:	dd06      	ble.n	ea33c <__hexnan+0xfc>
   ea32e:	4544      	cmp	r4, r8
   ea330:	d9c3      	bls.n	ea2ba <__hexnan+0x7a>
   ea332:	2300      	movs	r3, #0
   ea334:	f844 3c04 	str.w	r3, [r4, #-4]
   ea338:	2501      	movs	r5, #1
   ea33a:	3c04      	subs	r4, #4
   ea33c:	6822      	ldr	r2, [r4, #0]
   ea33e:	f000 000f 	and.w	r0, r0, #15
   ea342:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   ea346:	6022      	str	r2, [r4, #0]
   ea348:	e7b7      	b.n	ea2ba <__hexnan+0x7a>
   ea34a:	2508      	movs	r5, #8
   ea34c:	e7b5      	b.n	ea2ba <__hexnan+0x7a>
   ea34e:	9b01      	ldr	r3, [sp, #4]
   ea350:	2b00      	cmp	r3, #0
   ea352:	d0df      	beq.n	ea314 <__hexnan+0xd4>
   ea354:	f04f 32ff 	mov.w	r2, #4294967295
   ea358:	f1c3 0320 	rsb	r3, r3, #32
   ea35c:	fa22 f303 	lsr.w	r3, r2, r3
   ea360:	f856 2c04 	ldr.w	r2, [r6, #-4]
   ea364:	401a      	ands	r2, r3
   ea366:	f846 2c04 	str.w	r2, [r6, #-4]
   ea36a:	e7d3      	b.n	ea314 <__hexnan+0xd4>
   ea36c:	3f04      	subs	r7, #4
   ea36e:	e7d1      	b.n	ea314 <__hexnan+0xd4>
   ea370:	2004      	movs	r0, #4
   ea372:	b007      	add	sp, #28
   ea374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000ea378 <_gettimeofday_r>:
   ea378:	b538      	push	{r3, r4, r5, lr}
   ea37a:	4d07      	ldr	r5, [pc, #28]	; (ea398 <_gettimeofday_r+0x20>)
   ea37c:	2300      	movs	r3, #0
   ea37e:	4604      	mov	r4, r0
   ea380:	4608      	mov	r0, r1
   ea382:	4611      	mov	r1, r2
   ea384:	602b      	str	r3, [r5, #0]
   ea386:	f7f0 ff13 	bl	db1b0 <_gettimeofday>
   ea38a:	1c43      	adds	r3, r0, #1
   ea38c:	d102      	bne.n	ea394 <_gettimeofday_r+0x1c>
   ea38e:	682b      	ldr	r3, [r5, #0]
   ea390:	b103      	cbz	r3, ea394 <_gettimeofday_r+0x1c>
   ea392:	6023      	str	r3, [r4, #0]
   ea394:	bd38      	pop	{r3, r4, r5, pc}
   ea396:	bf00      	nop
   ea398:	2003e7ec 	.word	0x2003e7ec

000ea39c <__ascii_mbtowc>:
   ea39c:	b082      	sub	sp, #8
   ea39e:	b901      	cbnz	r1, ea3a2 <__ascii_mbtowc+0x6>
   ea3a0:	a901      	add	r1, sp, #4
   ea3a2:	b142      	cbz	r2, ea3b6 <__ascii_mbtowc+0x1a>
   ea3a4:	b14b      	cbz	r3, ea3ba <__ascii_mbtowc+0x1e>
   ea3a6:	7813      	ldrb	r3, [r2, #0]
   ea3a8:	600b      	str	r3, [r1, #0]
   ea3aa:	7812      	ldrb	r2, [r2, #0]
   ea3ac:	1e10      	subs	r0, r2, #0
   ea3ae:	bf18      	it	ne
   ea3b0:	2001      	movne	r0, #1
   ea3b2:	b002      	add	sp, #8
   ea3b4:	4770      	bx	lr
   ea3b6:	4610      	mov	r0, r2
   ea3b8:	e7fb      	b.n	ea3b2 <__ascii_mbtowc+0x16>
   ea3ba:	f06f 0001 	mvn.w	r0, #1
   ea3be:	e7f8      	b.n	ea3b2 <__ascii_mbtowc+0x16>

000ea3c0 <_Balloc>:
   ea3c0:	b570      	push	{r4, r5, r6, lr}
   ea3c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
   ea3c4:	4604      	mov	r4, r0
   ea3c6:	460d      	mov	r5, r1
   ea3c8:	b93e      	cbnz	r6, ea3da <_Balloc+0x1a>
   ea3ca:	2010      	movs	r0, #16
   ea3cc:	f7fb fae4 	bl	e5998 <malloc>
   ea3d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
   ea3d4:	6260      	str	r0, [r4, #36]	; 0x24
   ea3d6:	6006      	str	r6, [r0, #0]
   ea3d8:	60c6      	str	r6, [r0, #12]
   ea3da:	6a66      	ldr	r6, [r4, #36]	; 0x24
   ea3dc:	68f3      	ldr	r3, [r6, #12]
   ea3de:	b183      	cbz	r3, ea402 <_Balloc+0x42>
   ea3e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ea3e2:	68db      	ldr	r3, [r3, #12]
   ea3e4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   ea3e8:	b9b8      	cbnz	r0, ea41a <_Balloc+0x5a>
   ea3ea:	2101      	movs	r1, #1
   ea3ec:	fa01 f605 	lsl.w	r6, r1, r5
   ea3f0:	1d72      	adds	r2, r6, #5
   ea3f2:	0092      	lsls	r2, r2, #2
   ea3f4:	4620      	mov	r0, r4
   ea3f6:	f7fe fd29 	bl	e8e4c <_calloc_r>
   ea3fa:	b160      	cbz	r0, ea416 <_Balloc+0x56>
   ea3fc:	e9c0 5601 	strd	r5, r6, [r0, #4]
   ea400:	e00e      	b.n	ea420 <_Balloc+0x60>
   ea402:	2221      	movs	r2, #33	; 0x21
   ea404:	2104      	movs	r1, #4
   ea406:	4620      	mov	r0, r4
   ea408:	f7fe fd20 	bl	e8e4c <_calloc_r>
   ea40c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   ea40e:	60f0      	str	r0, [r6, #12]
   ea410:	68db      	ldr	r3, [r3, #12]
   ea412:	2b00      	cmp	r3, #0
   ea414:	d1e4      	bne.n	ea3e0 <_Balloc+0x20>
   ea416:	2000      	movs	r0, #0
   ea418:	bd70      	pop	{r4, r5, r6, pc}
   ea41a:	6802      	ldr	r2, [r0, #0]
   ea41c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   ea420:	2300      	movs	r3, #0
   ea422:	e9c0 3303 	strd	r3, r3, [r0, #12]
   ea426:	e7f7      	b.n	ea418 <_Balloc+0x58>

000ea428 <_Bfree>:
   ea428:	b570      	push	{r4, r5, r6, lr}
   ea42a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   ea42c:	4605      	mov	r5, r0
   ea42e:	460c      	mov	r4, r1
   ea430:	b93e      	cbnz	r6, ea442 <_Bfree+0x1a>
   ea432:	2010      	movs	r0, #16
   ea434:	f7fb fab0 	bl	e5998 <malloc>
   ea438:	e9c0 6601 	strd	r6, r6, [r0, #4]
   ea43c:	6268      	str	r0, [r5, #36]	; 0x24
   ea43e:	6006      	str	r6, [r0, #0]
   ea440:	60c6      	str	r6, [r0, #12]
   ea442:	b13c      	cbz	r4, ea454 <_Bfree+0x2c>
   ea444:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   ea446:	6862      	ldr	r2, [r4, #4]
   ea448:	68db      	ldr	r3, [r3, #12]
   ea44a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   ea44e:	6021      	str	r1, [r4, #0]
   ea450:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   ea454:	bd70      	pop	{r4, r5, r6, pc}

000ea456 <__multadd>:
   ea456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ea45a:	690e      	ldr	r6, [r1, #16]
   ea45c:	4607      	mov	r7, r0
   ea45e:	4698      	mov	r8, r3
   ea460:	460c      	mov	r4, r1
   ea462:	f101 0014 	add.w	r0, r1, #20
   ea466:	2300      	movs	r3, #0
   ea468:	6805      	ldr	r5, [r0, #0]
   ea46a:	b2a9      	uxth	r1, r5
   ea46c:	fb02 8101 	mla	r1, r2, r1, r8
   ea470:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   ea474:	0c2d      	lsrs	r5, r5, #16
   ea476:	fb02 c505 	mla	r5, r2, r5, ip
   ea47a:	b289      	uxth	r1, r1
   ea47c:	3301      	adds	r3, #1
   ea47e:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   ea482:	429e      	cmp	r6, r3
   ea484:	f840 1b04 	str.w	r1, [r0], #4
   ea488:	ea4f 4815 	mov.w	r8, r5, lsr #16
   ea48c:	dcec      	bgt.n	ea468 <__multadd+0x12>
   ea48e:	f1b8 0f00 	cmp.w	r8, #0
   ea492:	d01b      	beq.n	ea4cc <__multadd+0x76>
   ea494:	68a3      	ldr	r3, [r4, #8]
   ea496:	42b3      	cmp	r3, r6
   ea498:	dc12      	bgt.n	ea4c0 <__multadd+0x6a>
   ea49a:	6861      	ldr	r1, [r4, #4]
   ea49c:	4638      	mov	r0, r7
   ea49e:	3101      	adds	r1, #1
   ea4a0:	f7ff ff8e 	bl	ea3c0 <_Balloc>
   ea4a4:	6922      	ldr	r2, [r4, #16]
   ea4a6:	3202      	adds	r2, #2
   ea4a8:	f104 010c 	add.w	r1, r4, #12
   ea4ac:	4605      	mov	r5, r0
   ea4ae:	0092      	lsls	r2, r2, #2
   ea4b0:	300c      	adds	r0, #12
   ea4b2:	f7fe fc9b 	bl	e8dec <memcpy>
   ea4b6:	4621      	mov	r1, r4
   ea4b8:	4638      	mov	r0, r7
   ea4ba:	f7ff ffb5 	bl	ea428 <_Bfree>
   ea4be:	462c      	mov	r4, r5
   ea4c0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   ea4c4:	3601      	adds	r6, #1
   ea4c6:	f8c3 8014 	str.w	r8, [r3, #20]
   ea4ca:	6126      	str	r6, [r4, #16]
   ea4cc:	4620      	mov	r0, r4
   ea4ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ea4d2 <__s2b>:
   ea4d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ea4d6:	460c      	mov	r4, r1
   ea4d8:	4615      	mov	r5, r2
   ea4da:	461f      	mov	r7, r3
   ea4dc:	2209      	movs	r2, #9
   ea4de:	3308      	adds	r3, #8
   ea4e0:	4606      	mov	r6, r0
   ea4e2:	fb93 f3f2 	sdiv	r3, r3, r2
   ea4e6:	2100      	movs	r1, #0
   ea4e8:	2201      	movs	r2, #1
   ea4ea:	429a      	cmp	r2, r3
   ea4ec:	db20      	blt.n	ea530 <__s2b+0x5e>
   ea4ee:	4630      	mov	r0, r6
   ea4f0:	f7ff ff66 	bl	ea3c0 <_Balloc>
   ea4f4:	9b08      	ldr	r3, [sp, #32]
   ea4f6:	6143      	str	r3, [r0, #20]
   ea4f8:	2d09      	cmp	r5, #9
   ea4fa:	f04f 0301 	mov.w	r3, #1
   ea4fe:	6103      	str	r3, [r0, #16]
   ea500:	dd19      	ble.n	ea536 <__s2b+0x64>
   ea502:	f104 0909 	add.w	r9, r4, #9
   ea506:	46c8      	mov	r8, r9
   ea508:	442c      	add	r4, r5
   ea50a:	f818 3b01 	ldrb.w	r3, [r8], #1
   ea50e:	4601      	mov	r1, r0
   ea510:	3b30      	subs	r3, #48	; 0x30
   ea512:	220a      	movs	r2, #10
   ea514:	4630      	mov	r0, r6
   ea516:	f7ff ff9e 	bl	ea456 <__multadd>
   ea51a:	45a0      	cmp	r8, r4
   ea51c:	d1f5      	bne.n	ea50a <__s2b+0x38>
   ea51e:	f1a5 0408 	sub.w	r4, r5, #8
   ea522:	444c      	add	r4, r9
   ea524:	1b2d      	subs	r5, r5, r4
   ea526:	1963      	adds	r3, r4, r5
   ea528:	42bb      	cmp	r3, r7
   ea52a:	db07      	blt.n	ea53c <__s2b+0x6a>
   ea52c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ea530:	0052      	lsls	r2, r2, #1
   ea532:	3101      	adds	r1, #1
   ea534:	e7d9      	b.n	ea4ea <__s2b+0x18>
   ea536:	340a      	adds	r4, #10
   ea538:	2509      	movs	r5, #9
   ea53a:	e7f3      	b.n	ea524 <__s2b+0x52>
   ea53c:	f814 3b01 	ldrb.w	r3, [r4], #1
   ea540:	4601      	mov	r1, r0
   ea542:	3b30      	subs	r3, #48	; 0x30
   ea544:	220a      	movs	r2, #10
   ea546:	4630      	mov	r0, r6
   ea548:	f7ff ff85 	bl	ea456 <__multadd>
   ea54c:	e7eb      	b.n	ea526 <__s2b+0x54>

000ea54e <__hi0bits>:
   ea54e:	0c03      	lsrs	r3, r0, #16
   ea550:	041b      	lsls	r3, r3, #16
   ea552:	b9d3      	cbnz	r3, ea58a <__hi0bits+0x3c>
   ea554:	0400      	lsls	r0, r0, #16
   ea556:	2310      	movs	r3, #16
   ea558:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   ea55c:	bf04      	itt	eq
   ea55e:	0200      	lsleq	r0, r0, #8
   ea560:	3308      	addeq	r3, #8
   ea562:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   ea566:	bf04      	itt	eq
   ea568:	0100      	lsleq	r0, r0, #4
   ea56a:	3304      	addeq	r3, #4
   ea56c:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   ea570:	bf04      	itt	eq
   ea572:	0080      	lsleq	r0, r0, #2
   ea574:	3302      	addeq	r3, #2
   ea576:	2800      	cmp	r0, #0
   ea578:	db05      	blt.n	ea586 <__hi0bits+0x38>
   ea57a:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   ea57e:	f103 0301 	add.w	r3, r3, #1
   ea582:	bf08      	it	eq
   ea584:	2320      	moveq	r3, #32
   ea586:	4618      	mov	r0, r3
   ea588:	4770      	bx	lr
   ea58a:	2300      	movs	r3, #0
   ea58c:	e7e4      	b.n	ea558 <__hi0bits+0xa>

000ea58e <__lo0bits>:
   ea58e:	6803      	ldr	r3, [r0, #0]
   ea590:	f013 0207 	ands.w	r2, r3, #7
   ea594:	4601      	mov	r1, r0
   ea596:	d00b      	beq.n	ea5b0 <__lo0bits+0x22>
   ea598:	07da      	lsls	r2, r3, #31
   ea59a:	d424      	bmi.n	ea5e6 <__lo0bits+0x58>
   ea59c:	0798      	lsls	r0, r3, #30
   ea59e:	bf49      	itett	mi
   ea5a0:	085b      	lsrmi	r3, r3, #1
   ea5a2:	089b      	lsrpl	r3, r3, #2
   ea5a4:	2001      	movmi	r0, #1
   ea5a6:	600b      	strmi	r3, [r1, #0]
   ea5a8:	bf5c      	itt	pl
   ea5aa:	600b      	strpl	r3, [r1, #0]
   ea5ac:	2002      	movpl	r0, #2
   ea5ae:	4770      	bx	lr
   ea5b0:	b298      	uxth	r0, r3
   ea5b2:	b9b0      	cbnz	r0, ea5e2 <__lo0bits+0x54>
   ea5b4:	0c1b      	lsrs	r3, r3, #16
   ea5b6:	2010      	movs	r0, #16
   ea5b8:	f013 0fff 	tst.w	r3, #255	; 0xff
   ea5bc:	bf04      	itt	eq
   ea5be:	0a1b      	lsreq	r3, r3, #8
   ea5c0:	3008      	addeq	r0, #8
   ea5c2:	071a      	lsls	r2, r3, #28
   ea5c4:	bf04      	itt	eq
   ea5c6:	091b      	lsreq	r3, r3, #4
   ea5c8:	3004      	addeq	r0, #4
   ea5ca:	079a      	lsls	r2, r3, #30
   ea5cc:	bf04      	itt	eq
   ea5ce:	089b      	lsreq	r3, r3, #2
   ea5d0:	3002      	addeq	r0, #2
   ea5d2:	07da      	lsls	r2, r3, #31
   ea5d4:	d403      	bmi.n	ea5de <__lo0bits+0x50>
   ea5d6:	085b      	lsrs	r3, r3, #1
   ea5d8:	f100 0001 	add.w	r0, r0, #1
   ea5dc:	d005      	beq.n	ea5ea <__lo0bits+0x5c>
   ea5de:	600b      	str	r3, [r1, #0]
   ea5e0:	4770      	bx	lr
   ea5e2:	4610      	mov	r0, r2
   ea5e4:	e7e8      	b.n	ea5b8 <__lo0bits+0x2a>
   ea5e6:	2000      	movs	r0, #0
   ea5e8:	4770      	bx	lr
   ea5ea:	2020      	movs	r0, #32
   ea5ec:	4770      	bx	lr

000ea5ee <__i2b>:
   ea5ee:	b510      	push	{r4, lr}
   ea5f0:	460c      	mov	r4, r1
   ea5f2:	2101      	movs	r1, #1
   ea5f4:	f7ff fee4 	bl	ea3c0 <_Balloc>
   ea5f8:	2201      	movs	r2, #1
   ea5fa:	6144      	str	r4, [r0, #20]
   ea5fc:	6102      	str	r2, [r0, #16]
   ea5fe:	bd10      	pop	{r4, pc}

000ea600 <__multiply>:
   ea600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ea604:	4615      	mov	r5, r2
   ea606:	690a      	ldr	r2, [r1, #16]
   ea608:	692b      	ldr	r3, [r5, #16]
   ea60a:	429a      	cmp	r2, r3
   ea60c:	bfb8      	it	lt
   ea60e:	460b      	movlt	r3, r1
   ea610:	460c      	mov	r4, r1
   ea612:	bfbc      	itt	lt
   ea614:	462c      	movlt	r4, r5
   ea616:	461d      	movlt	r5, r3
   ea618:	6927      	ldr	r7, [r4, #16]
   ea61a:	f8d5 9010 	ldr.w	r9, [r5, #16]
   ea61e:	68a3      	ldr	r3, [r4, #8]
   ea620:	6861      	ldr	r1, [r4, #4]
   ea622:	eb07 0609 	add.w	r6, r7, r9
   ea626:	42b3      	cmp	r3, r6
   ea628:	bfb8      	it	lt
   ea62a:	3101      	addlt	r1, #1
   ea62c:	b085      	sub	sp, #20
   ea62e:	f7ff fec7 	bl	ea3c0 <_Balloc>
   ea632:	f100 0114 	add.w	r1, r0, #20
   ea636:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   ea63a:	460b      	mov	r3, r1
   ea63c:	2200      	movs	r2, #0
   ea63e:	4543      	cmp	r3, r8
   ea640:	d31d      	bcc.n	ea67e <__multiply+0x7e>
   ea642:	f104 0314 	add.w	r3, r4, #20
   ea646:	f105 0214 	add.w	r2, r5, #20
   ea64a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   ea64e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   ea652:	9302      	str	r3, [sp, #8]
   ea654:	1b3b      	subs	r3, r7, r4
   ea656:	3b15      	subs	r3, #21
   ea658:	f023 0303 	bic.w	r3, r3, #3
   ea65c:	3304      	adds	r3, #4
   ea65e:	f104 0515 	add.w	r5, r4, #21
   ea662:	42af      	cmp	r7, r5
   ea664:	bf38      	it	cc
   ea666:	2304      	movcc	r3, #4
   ea668:	9301      	str	r3, [sp, #4]
   ea66a:	9b02      	ldr	r3, [sp, #8]
   ea66c:	9203      	str	r2, [sp, #12]
   ea66e:	4293      	cmp	r3, r2
   ea670:	d808      	bhi.n	ea684 <__multiply+0x84>
   ea672:	2e00      	cmp	r6, #0
   ea674:	dc5a      	bgt.n	ea72c <__multiply+0x12c>
   ea676:	6106      	str	r6, [r0, #16]
   ea678:	b005      	add	sp, #20
   ea67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ea67e:	f843 2b04 	str.w	r2, [r3], #4
   ea682:	e7dc      	b.n	ea63e <__multiply+0x3e>
   ea684:	f8b2 a000 	ldrh.w	sl, [r2]
   ea688:	f1ba 0f00 	cmp.w	sl, #0
   ea68c:	d024      	beq.n	ea6d8 <__multiply+0xd8>
   ea68e:	f104 0e14 	add.w	lr, r4, #20
   ea692:	4689      	mov	r9, r1
   ea694:	f04f 0c00 	mov.w	ip, #0
   ea698:	f85e 5b04 	ldr.w	r5, [lr], #4
   ea69c:	f8d9 b000 	ldr.w	fp, [r9]
   ea6a0:	b2ab      	uxth	r3, r5
   ea6a2:	fa1f fb8b 	uxth.w	fp, fp
   ea6a6:	fb0a b303 	mla	r3, sl, r3, fp
   ea6aa:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   ea6ae:	f8d9 5000 	ldr.w	r5, [r9]
   ea6b2:	4463      	add	r3, ip
   ea6b4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   ea6b8:	fb0a c50b 	mla	r5, sl, fp, ip
   ea6bc:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   ea6c0:	b29b      	uxth	r3, r3
   ea6c2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   ea6c6:	4577      	cmp	r7, lr
   ea6c8:	f849 3b04 	str.w	r3, [r9], #4
   ea6cc:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   ea6d0:	d8e2      	bhi.n	ea698 <__multiply+0x98>
   ea6d2:	9b01      	ldr	r3, [sp, #4]
   ea6d4:	f841 c003 	str.w	ip, [r1, r3]
   ea6d8:	9b03      	ldr	r3, [sp, #12]
   ea6da:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   ea6de:	3204      	adds	r2, #4
   ea6e0:	f1b9 0f00 	cmp.w	r9, #0
   ea6e4:	d020      	beq.n	ea728 <__multiply+0x128>
   ea6e6:	680b      	ldr	r3, [r1, #0]
   ea6e8:	f104 0c14 	add.w	ip, r4, #20
   ea6ec:	468e      	mov	lr, r1
   ea6ee:	f04f 0a00 	mov.w	sl, #0
   ea6f2:	f8bc 5000 	ldrh.w	r5, [ip]
   ea6f6:	f8be b002 	ldrh.w	fp, [lr, #2]
   ea6fa:	fb09 b505 	mla	r5, r9, r5, fp
   ea6fe:	44aa      	add	sl, r5
   ea700:	b29b      	uxth	r3, r3
   ea702:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   ea706:	f84e 3b04 	str.w	r3, [lr], #4
   ea70a:	f85c 3b04 	ldr.w	r3, [ip], #4
   ea70e:	f8be 5000 	ldrh.w	r5, [lr]
   ea712:	0c1b      	lsrs	r3, r3, #16
   ea714:	fb09 5303 	mla	r3, r9, r3, r5
   ea718:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   ea71c:	4567      	cmp	r7, ip
   ea71e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   ea722:	d8e6      	bhi.n	ea6f2 <__multiply+0xf2>
   ea724:	9d01      	ldr	r5, [sp, #4]
   ea726:	514b      	str	r3, [r1, r5]
   ea728:	3104      	adds	r1, #4
   ea72a:	e79e      	b.n	ea66a <__multiply+0x6a>
   ea72c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   ea730:	2b00      	cmp	r3, #0
   ea732:	d1a0      	bne.n	ea676 <__multiply+0x76>
   ea734:	3e01      	subs	r6, #1
   ea736:	e79c      	b.n	ea672 <__multiply+0x72>

000ea738 <__pow5mult>:
   ea738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ea73c:	4615      	mov	r5, r2
   ea73e:	f012 0203 	ands.w	r2, r2, #3
   ea742:	4606      	mov	r6, r0
   ea744:	460f      	mov	r7, r1
   ea746:	d007      	beq.n	ea758 <__pow5mult+0x20>
   ea748:	4c21      	ldr	r4, [pc, #132]	; (ea7d0 <__pow5mult+0x98>)
   ea74a:	3a01      	subs	r2, #1
   ea74c:	2300      	movs	r3, #0
   ea74e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   ea752:	f7ff fe80 	bl	ea456 <__multadd>
   ea756:	4607      	mov	r7, r0
   ea758:	10ad      	asrs	r5, r5, #2
   ea75a:	d035      	beq.n	ea7c8 <__pow5mult+0x90>
   ea75c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   ea75e:	b93c      	cbnz	r4, ea770 <__pow5mult+0x38>
   ea760:	2010      	movs	r0, #16
   ea762:	f7fb f919 	bl	e5998 <malloc>
   ea766:	e9c0 4401 	strd	r4, r4, [r0, #4]
   ea76a:	6270      	str	r0, [r6, #36]	; 0x24
   ea76c:	6004      	str	r4, [r0, #0]
   ea76e:	60c4      	str	r4, [r0, #12]
   ea770:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   ea774:	f8d8 4008 	ldr.w	r4, [r8, #8]
   ea778:	b94c      	cbnz	r4, ea78e <__pow5mult+0x56>
   ea77a:	f240 2171 	movw	r1, #625	; 0x271
   ea77e:	4630      	mov	r0, r6
   ea780:	f7ff ff35 	bl	ea5ee <__i2b>
   ea784:	2300      	movs	r3, #0
   ea786:	f8c8 0008 	str.w	r0, [r8, #8]
   ea78a:	4604      	mov	r4, r0
   ea78c:	6003      	str	r3, [r0, #0]
   ea78e:	f04f 0900 	mov.w	r9, #0
   ea792:	07eb      	lsls	r3, r5, #31
   ea794:	d50a      	bpl.n	ea7ac <__pow5mult+0x74>
   ea796:	4639      	mov	r1, r7
   ea798:	4622      	mov	r2, r4
   ea79a:	4630      	mov	r0, r6
   ea79c:	f7ff ff30 	bl	ea600 <__multiply>
   ea7a0:	4639      	mov	r1, r7
   ea7a2:	4680      	mov	r8, r0
   ea7a4:	4630      	mov	r0, r6
   ea7a6:	f7ff fe3f 	bl	ea428 <_Bfree>
   ea7aa:	4647      	mov	r7, r8
   ea7ac:	106d      	asrs	r5, r5, #1
   ea7ae:	d00b      	beq.n	ea7c8 <__pow5mult+0x90>
   ea7b0:	6820      	ldr	r0, [r4, #0]
   ea7b2:	b938      	cbnz	r0, ea7c4 <__pow5mult+0x8c>
   ea7b4:	4622      	mov	r2, r4
   ea7b6:	4621      	mov	r1, r4
   ea7b8:	4630      	mov	r0, r6
   ea7ba:	f7ff ff21 	bl	ea600 <__multiply>
   ea7be:	6020      	str	r0, [r4, #0]
   ea7c0:	f8c0 9000 	str.w	r9, [r0]
   ea7c4:	4604      	mov	r4, r0
   ea7c6:	e7e4      	b.n	ea792 <__pow5mult+0x5a>
   ea7c8:	4638      	mov	r0, r7
   ea7ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ea7ce:	bf00      	nop
   ea7d0:	000ee030 	.word	0x000ee030

000ea7d4 <__lshift>:
   ea7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ea7d8:	460c      	mov	r4, r1
   ea7da:	6849      	ldr	r1, [r1, #4]
   ea7dc:	6923      	ldr	r3, [r4, #16]
   ea7de:	eb03 1862 	add.w	r8, r3, r2, asr #5
   ea7e2:	68a3      	ldr	r3, [r4, #8]
   ea7e4:	4607      	mov	r7, r0
   ea7e6:	4691      	mov	r9, r2
   ea7e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   ea7ec:	f108 0601 	add.w	r6, r8, #1
   ea7f0:	42b3      	cmp	r3, r6
   ea7f2:	db3f      	blt.n	ea874 <__lshift+0xa0>
   ea7f4:	4638      	mov	r0, r7
   ea7f6:	f7ff fde3 	bl	ea3c0 <_Balloc>
   ea7fa:	2300      	movs	r3, #0
   ea7fc:	4605      	mov	r5, r0
   ea7fe:	f100 0114 	add.w	r1, r0, #20
   ea802:	f100 0210 	add.w	r2, r0, #16
   ea806:	4618      	mov	r0, r3
   ea808:	4553      	cmp	r3, sl
   ea80a:	db36      	blt.n	ea87a <__lshift+0xa6>
   ea80c:	6920      	ldr	r0, [r4, #16]
   ea80e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   ea812:	f104 0314 	add.w	r3, r4, #20
   ea816:	f019 091f 	ands.w	r9, r9, #31
   ea81a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   ea81e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   ea822:	d02e      	beq.n	ea882 <__lshift+0xae>
   ea824:	f1c9 0e20 	rsb	lr, r9, #32
   ea828:	468a      	mov	sl, r1
   ea82a:	2200      	movs	r2, #0
   ea82c:	6818      	ldr	r0, [r3, #0]
   ea82e:	fa00 f009 	lsl.w	r0, r0, r9
   ea832:	4302      	orrs	r2, r0
   ea834:	f84a 2b04 	str.w	r2, [sl], #4
   ea838:	f853 2b04 	ldr.w	r2, [r3], #4
   ea83c:	459c      	cmp	ip, r3
   ea83e:	fa22 f20e 	lsr.w	r2, r2, lr
   ea842:	d8f3      	bhi.n	ea82c <__lshift+0x58>
   ea844:	ebac 0304 	sub.w	r3, ip, r4
   ea848:	3b15      	subs	r3, #21
   ea84a:	f023 0303 	bic.w	r3, r3, #3
   ea84e:	3304      	adds	r3, #4
   ea850:	f104 0015 	add.w	r0, r4, #21
   ea854:	4560      	cmp	r0, ip
   ea856:	bf88      	it	hi
   ea858:	2304      	movhi	r3, #4
   ea85a:	50ca      	str	r2, [r1, r3]
   ea85c:	b10a      	cbz	r2, ea862 <__lshift+0x8e>
   ea85e:	f108 0602 	add.w	r6, r8, #2
   ea862:	3e01      	subs	r6, #1
   ea864:	4638      	mov	r0, r7
   ea866:	612e      	str	r6, [r5, #16]
   ea868:	4621      	mov	r1, r4
   ea86a:	f7ff fddd 	bl	ea428 <_Bfree>
   ea86e:	4628      	mov	r0, r5
   ea870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ea874:	3101      	adds	r1, #1
   ea876:	005b      	lsls	r3, r3, #1
   ea878:	e7ba      	b.n	ea7f0 <__lshift+0x1c>
   ea87a:	f842 0f04 	str.w	r0, [r2, #4]!
   ea87e:	3301      	adds	r3, #1
   ea880:	e7c2      	b.n	ea808 <__lshift+0x34>
   ea882:	3904      	subs	r1, #4
   ea884:	f853 2b04 	ldr.w	r2, [r3], #4
   ea888:	f841 2f04 	str.w	r2, [r1, #4]!
   ea88c:	459c      	cmp	ip, r3
   ea88e:	d8f9      	bhi.n	ea884 <__lshift+0xb0>
   ea890:	e7e7      	b.n	ea862 <__lshift+0x8e>

000ea892 <__mcmp>:
   ea892:	b530      	push	{r4, r5, lr}
   ea894:	6902      	ldr	r2, [r0, #16]
   ea896:	690c      	ldr	r4, [r1, #16]
   ea898:	1b12      	subs	r2, r2, r4
   ea89a:	d10e      	bne.n	ea8ba <__mcmp+0x28>
   ea89c:	f100 0314 	add.w	r3, r0, #20
   ea8a0:	3114      	adds	r1, #20
   ea8a2:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   ea8a6:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   ea8aa:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   ea8ae:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   ea8b2:	42a5      	cmp	r5, r4
   ea8b4:	d003      	beq.n	ea8be <__mcmp+0x2c>
   ea8b6:	d305      	bcc.n	ea8c4 <__mcmp+0x32>
   ea8b8:	2201      	movs	r2, #1
   ea8ba:	4610      	mov	r0, r2
   ea8bc:	bd30      	pop	{r4, r5, pc}
   ea8be:	4283      	cmp	r3, r0
   ea8c0:	d3f3      	bcc.n	ea8aa <__mcmp+0x18>
   ea8c2:	e7fa      	b.n	ea8ba <__mcmp+0x28>
   ea8c4:	f04f 32ff 	mov.w	r2, #4294967295
   ea8c8:	e7f7      	b.n	ea8ba <__mcmp+0x28>

000ea8ca <__mdiff>:
   ea8ca:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ea8ce:	460c      	mov	r4, r1
   ea8d0:	4606      	mov	r6, r0
   ea8d2:	4611      	mov	r1, r2
   ea8d4:	4620      	mov	r0, r4
   ea8d6:	4617      	mov	r7, r2
   ea8d8:	f7ff ffdb 	bl	ea892 <__mcmp>
   ea8dc:	1e05      	subs	r5, r0, #0
   ea8de:	d108      	bne.n	ea8f2 <__mdiff+0x28>
   ea8e0:	4629      	mov	r1, r5
   ea8e2:	4630      	mov	r0, r6
   ea8e4:	f7ff fd6c 	bl	ea3c0 <_Balloc>
   ea8e8:	2301      	movs	r3, #1
   ea8ea:	e9c0 3504 	strd	r3, r5, [r0, #16]
   ea8ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ea8f2:	bfa4      	itt	ge
   ea8f4:	463b      	movge	r3, r7
   ea8f6:	4627      	movge	r7, r4
   ea8f8:	4630      	mov	r0, r6
   ea8fa:	6879      	ldr	r1, [r7, #4]
   ea8fc:	bfa6      	itte	ge
   ea8fe:	461c      	movge	r4, r3
   ea900:	2500      	movge	r5, #0
   ea902:	2501      	movlt	r5, #1
   ea904:	f7ff fd5c 	bl	ea3c0 <_Balloc>
   ea908:	693e      	ldr	r6, [r7, #16]
   ea90a:	60c5      	str	r5, [r0, #12]
   ea90c:	6925      	ldr	r5, [r4, #16]
   ea90e:	f107 0114 	add.w	r1, r7, #20
   ea912:	f104 0914 	add.w	r9, r4, #20
   ea916:	f100 0e14 	add.w	lr, r0, #20
   ea91a:	f107 0210 	add.w	r2, r7, #16
   ea91e:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   ea922:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   ea926:	46f2      	mov	sl, lr
   ea928:	2700      	movs	r7, #0
   ea92a:	f859 3b04 	ldr.w	r3, [r9], #4
   ea92e:	f852 bf04 	ldr.w	fp, [r2, #4]!
   ea932:	fa1f f883 	uxth.w	r8, r3
   ea936:	fa17 f78b 	uxtah	r7, r7, fp
   ea93a:	0c1b      	lsrs	r3, r3, #16
   ea93c:	eba7 0808 	sub.w	r8, r7, r8
   ea940:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   ea944:	eb03 4328 	add.w	r3, r3, r8, asr #16
   ea948:	fa1f f888 	uxth.w	r8, r8
   ea94c:	141f      	asrs	r7, r3, #16
   ea94e:	454d      	cmp	r5, r9
   ea950:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   ea954:	f84a 3b04 	str.w	r3, [sl], #4
   ea958:	d8e7      	bhi.n	ea92a <__mdiff+0x60>
   ea95a:	1b2b      	subs	r3, r5, r4
   ea95c:	3b15      	subs	r3, #21
   ea95e:	f023 0303 	bic.w	r3, r3, #3
   ea962:	3304      	adds	r3, #4
   ea964:	3415      	adds	r4, #21
   ea966:	42a5      	cmp	r5, r4
   ea968:	bf38      	it	cc
   ea96a:	2304      	movcc	r3, #4
   ea96c:	4419      	add	r1, r3
   ea96e:	4473      	add	r3, lr
   ea970:	469e      	mov	lr, r3
   ea972:	460d      	mov	r5, r1
   ea974:	4565      	cmp	r5, ip
   ea976:	d30e      	bcc.n	ea996 <__mdiff+0xcc>
   ea978:	f10c 0203 	add.w	r2, ip, #3
   ea97c:	1a52      	subs	r2, r2, r1
   ea97e:	f022 0203 	bic.w	r2, r2, #3
   ea982:	3903      	subs	r1, #3
   ea984:	458c      	cmp	ip, r1
   ea986:	bf38      	it	cc
   ea988:	2200      	movcc	r2, #0
   ea98a:	441a      	add	r2, r3
   ea98c:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   ea990:	b17b      	cbz	r3, ea9b2 <__mdiff+0xe8>
   ea992:	6106      	str	r6, [r0, #16]
   ea994:	e7ab      	b.n	ea8ee <__mdiff+0x24>
   ea996:	f855 8b04 	ldr.w	r8, [r5], #4
   ea99a:	fa17 f488 	uxtah	r4, r7, r8
   ea99e:	1422      	asrs	r2, r4, #16
   ea9a0:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   ea9a4:	b2a4      	uxth	r4, r4
   ea9a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   ea9aa:	f84e 4b04 	str.w	r4, [lr], #4
   ea9ae:	1417      	asrs	r7, r2, #16
   ea9b0:	e7e0      	b.n	ea974 <__mdiff+0xaa>
   ea9b2:	3e01      	subs	r6, #1
   ea9b4:	e7ea      	b.n	ea98c <__mdiff+0xc2>
	...

000ea9b8 <__ulp>:
   ea9b8:	b082      	sub	sp, #8
   ea9ba:	ed8d 0b00 	vstr	d0, [sp]
   ea9be:	9b01      	ldr	r3, [sp, #4]
   ea9c0:	4912      	ldr	r1, [pc, #72]	; (eaa0c <__ulp+0x54>)
   ea9c2:	4019      	ands	r1, r3
   ea9c4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   ea9c8:	2900      	cmp	r1, #0
   ea9ca:	dd05      	ble.n	ea9d8 <__ulp+0x20>
   ea9cc:	2200      	movs	r2, #0
   ea9ce:	460b      	mov	r3, r1
   ea9d0:	ec43 2b10 	vmov	d0, r2, r3
   ea9d4:	b002      	add	sp, #8
   ea9d6:	4770      	bx	lr
   ea9d8:	4249      	negs	r1, r1
   ea9da:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   ea9de:	ea4f 5021 	mov.w	r0, r1, asr #20
   ea9e2:	f04f 0200 	mov.w	r2, #0
   ea9e6:	f04f 0300 	mov.w	r3, #0
   ea9ea:	da04      	bge.n	ea9f6 <__ulp+0x3e>
   ea9ec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   ea9f0:	fa41 f300 	asr.w	r3, r1, r0
   ea9f4:	e7ec      	b.n	ea9d0 <__ulp+0x18>
   ea9f6:	f1a0 0114 	sub.w	r1, r0, #20
   ea9fa:	291e      	cmp	r1, #30
   ea9fc:	bfda      	itte	le
   ea9fe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   eaa02:	fa20 f101 	lsrle.w	r1, r0, r1
   eaa06:	2101      	movgt	r1, #1
   eaa08:	460a      	mov	r2, r1
   eaa0a:	e7e1      	b.n	ea9d0 <__ulp+0x18>
   eaa0c:	7ff00000 	.word	0x7ff00000

000eaa10 <__b2d>:
   eaa10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   eaa12:	6905      	ldr	r5, [r0, #16]
   eaa14:	f100 0714 	add.w	r7, r0, #20
   eaa18:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   eaa1c:	1f2e      	subs	r6, r5, #4
   eaa1e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   eaa22:	4620      	mov	r0, r4
   eaa24:	f7ff fd93 	bl	ea54e <__hi0bits>
   eaa28:	f1c0 0320 	rsb	r3, r0, #32
   eaa2c:	280a      	cmp	r0, #10
   eaa2e:	f8df c07c 	ldr.w	ip, [pc, #124]	; eaaac <__b2d+0x9c>
   eaa32:	600b      	str	r3, [r1, #0]
   eaa34:	dc14      	bgt.n	eaa60 <__b2d+0x50>
   eaa36:	f1c0 0e0b 	rsb	lr, r0, #11
   eaa3a:	fa24 f10e 	lsr.w	r1, r4, lr
   eaa3e:	42b7      	cmp	r7, r6
   eaa40:	ea41 030c 	orr.w	r3, r1, ip
   eaa44:	bf34      	ite	cc
   eaa46:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   eaa4a:	2100      	movcs	r1, #0
   eaa4c:	3015      	adds	r0, #21
   eaa4e:	fa04 f000 	lsl.w	r0, r4, r0
   eaa52:	fa21 f10e 	lsr.w	r1, r1, lr
   eaa56:	ea40 0201 	orr.w	r2, r0, r1
   eaa5a:	ec43 2b10 	vmov	d0, r2, r3
   eaa5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   eaa60:	42b7      	cmp	r7, r6
   eaa62:	bf3a      	itte	cc
   eaa64:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   eaa68:	f1a5 0608 	subcc.w	r6, r5, #8
   eaa6c:	2100      	movcs	r1, #0
   eaa6e:	380b      	subs	r0, #11
   eaa70:	d017      	beq.n	eaaa2 <__b2d+0x92>
   eaa72:	f1c0 0c20 	rsb	ip, r0, #32
   eaa76:	fa04 f500 	lsl.w	r5, r4, r0
   eaa7a:	42be      	cmp	r6, r7
   eaa7c:	fa21 f40c 	lsr.w	r4, r1, ip
   eaa80:	ea45 0504 	orr.w	r5, r5, r4
   eaa84:	bf8c      	ite	hi
   eaa86:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   eaa8a:	2400      	movls	r4, #0
   eaa8c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   eaa90:	fa01 f000 	lsl.w	r0, r1, r0
   eaa94:	fa24 f40c 	lsr.w	r4, r4, ip
   eaa98:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   eaa9c:	ea40 0204 	orr.w	r2, r0, r4
   eaaa0:	e7db      	b.n	eaa5a <__b2d+0x4a>
   eaaa2:	ea44 030c 	orr.w	r3, r4, ip
   eaaa6:	460a      	mov	r2, r1
   eaaa8:	e7d7      	b.n	eaa5a <__b2d+0x4a>
   eaaaa:	bf00      	nop
   eaaac:	3ff00000 	.word	0x3ff00000

000eaab0 <__d2b>:
   eaab0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   eaab4:	4689      	mov	r9, r1
   eaab6:	2101      	movs	r1, #1
   eaab8:	ec57 6b10 	vmov	r6, r7, d0
   eaabc:	4690      	mov	r8, r2
   eaabe:	f7ff fc7f 	bl	ea3c0 <_Balloc>
   eaac2:	f3c7 550a 	ubfx	r5, r7, #20, #11
   eaac6:	4604      	mov	r4, r0
   eaac8:	f3c7 0313 	ubfx	r3, r7, #0, #20
   eaacc:	bb35      	cbnz	r5, eab1c <__d2b+0x6c>
   eaace:	2e00      	cmp	r6, #0
   eaad0:	9301      	str	r3, [sp, #4]
   eaad2:	d028      	beq.n	eab26 <__d2b+0x76>
   eaad4:	4668      	mov	r0, sp
   eaad6:	9600      	str	r6, [sp, #0]
   eaad8:	f7ff fd59 	bl	ea58e <__lo0bits>
   eaadc:	9900      	ldr	r1, [sp, #0]
   eaade:	b300      	cbz	r0, eab22 <__d2b+0x72>
   eaae0:	9a01      	ldr	r2, [sp, #4]
   eaae2:	f1c0 0320 	rsb	r3, r0, #32
   eaae6:	fa02 f303 	lsl.w	r3, r2, r3
   eaaea:	430b      	orrs	r3, r1
   eaaec:	40c2      	lsrs	r2, r0
   eaaee:	6163      	str	r3, [r4, #20]
   eaaf0:	9201      	str	r2, [sp, #4]
   eaaf2:	9b01      	ldr	r3, [sp, #4]
   eaaf4:	61a3      	str	r3, [r4, #24]
   eaaf6:	2b00      	cmp	r3, #0
   eaaf8:	bf14      	ite	ne
   eaafa:	2202      	movne	r2, #2
   eaafc:	2201      	moveq	r2, #1
   eaafe:	6122      	str	r2, [r4, #16]
   eab00:	b1d5      	cbz	r5, eab38 <__d2b+0x88>
   eab02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   eab06:	4405      	add	r5, r0
   eab08:	f8c9 5000 	str.w	r5, [r9]
   eab0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   eab10:	f8c8 0000 	str.w	r0, [r8]
   eab14:	4620      	mov	r0, r4
   eab16:	b003      	add	sp, #12
   eab18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   eab1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   eab20:	e7d5      	b.n	eaace <__d2b+0x1e>
   eab22:	6161      	str	r1, [r4, #20]
   eab24:	e7e5      	b.n	eaaf2 <__d2b+0x42>
   eab26:	a801      	add	r0, sp, #4
   eab28:	f7ff fd31 	bl	ea58e <__lo0bits>
   eab2c:	9b01      	ldr	r3, [sp, #4]
   eab2e:	6163      	str	r3, [r4, #20]
   eab30:	2201      	movs	r2, #1
   eab32:	6122      	str	r2, [r4, #16]
   eab34:	3020      	adds	r0, #32
   eab36:	e7e3      	b.n	eab00 <__d2b+0x50>
   eab38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   eab3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   eab40:	f8c9 0000 	str.w	r0, [r9]
   eab44:	6918      	ldr	r0, [r3, #16]
   eab46:	f7ff fd02 	bl	ea54e <__hi0bits>
   eab4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   eab4e:	e7df      	b.n	eab10 <__d2b+0x60>

000eab50 <__ratio>:
   eab50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   eab54:	4688      	mov	r8, r1
   eab56:	4669      	mov	r1, sp
   eab58:	4681      	mov	r9, r0
   eab5a:	f7ff ff59 	bl	eaa10 <__b2d>
   eab5e:	a901      	add	r1, sp, #4
   eab60:	4640      	mov	r0, r8
   eab62:	ec55 4b10 	vmov	r4, r5, d0
   eab66:	f7ff ff53 	bl	eaa10 <__b2d>
   eab6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   eab6e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   eab72:	eba3 0c02 	sub.w	ip, r3, r2
   eab76:	e9dd 3200 	ldrd	r3, r2, [sp]
   eab7a:	1a9b      	subs	r3, r3, r2
   eab7c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   eab80:	ec51 0b10 	vmov	r0, r1, d0
   eab84:	2b00      	cmp	r3, #0
   eab86:	bfd6      	itet	le
   eab88:	460a      	movle	r2, r1
   eab8a:	462a      	movgt	r2, r5
   eab8c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   eab90:	468b      	mov	fp, r1
   eab92:	462f      	mov	r7, r5
   eab94:	bfd4      	ite	le
   eab96:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   eab9a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   eab9e:	4620      	mov	r0, r4
   eaba0:	ee10 2a10 	vmov	r2, s0
   eaba4:	465b      	mov	r3, fp
   eaba6:	4639      	mov	r1, r7
   eaba8:	f7fd fd3c 	bl	e8624 <__aeabi_ddiv>
   eabac:	ec41 0b10 	vmov	d0, r0, r1
   eabb0:	b003      	add	sp, #12
   eabb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000eabb6 <__copybits>:
   eabb6:	3901      	subs	r1, #1
   eabb8:	b570      	push	{r4, r5, r6, lr}
   eabba:	1149      	asrs	r1, r1, #5
   eabbc:	6914      	ldr	r4, [r2, #16]
   eabbe:	3101      	adds	r1, #1
   eabc0:	f102 0314 	add.w	r3, r2, #20
   eabc4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   eabc8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   eabcc:	1f05      	subs	r5, r0, #4
   eabce:	42a3      	cmp	r3, r4
   eabd0:	d30c      	bcc.n	eabec <__copybits+0x36>
   eabd2:	1aa3      	subs	r3, r4, r2
   eabd4:	3b11      	subs	r3, #17
   eabd6:	f023 0303 	bic.w	r3, r3, #3
   eabda:	3211      	adds	r2, #17
   eabdc:	42a2      	cmp	r2, r4
   eabde:	bf88      	it	hi
   eabe0:	2300      	movhi	r3, #0
   eabe2:	4418      	add	r0, r3
   eabe4:	2300      	movs	r3, #0
   eabe6:	4288      	cmp	r0, r1
   eabe8:	d305      	bcc.n	eabf6 <__copybits+0x40>
   eabea:	bd70      	pop	{r4, r5, r6, pc}
   eabec:	f853 6b04 	ldr.w	r6, [r3], #4
   eabf0:	f845 6f04 	str.w	r6, [r5, #4]!
   eabf4:	e7eb      	b.n	eabce <__copybits+0x18>
   eabf6:	f840 3b04 	str.w	r3, [r0], #4
   eabfa:	e7f4      	b.n	eabe6 <__copybits+0x30>

000eabfc <__any_on>:
   eabfc:	f100 0214 	add.w	r2, r0, #20
   eac00:	6900      	ldr	r0, [r0, #16]
   eac02:	114b      	asrs	r3, r1, #5
   eac04:	4298      	cmp	r0, r3
   eac06:	b510      	push	{r4, lr}
   eac08:	db11      	blt.n	eac2e <__any_on+0x32>
   eac0a:	dd0a      	ble.n	eac22 <__any_on+0x26>
   eac0c:	f011 011f 	ands.w	r1, r1, #31
   eac10:	d007      	beq.n	eac22 <__any_on+0x26>
   eac12:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   eac16:	fa24 f001 	lsr.w	r0, r4, r1
   eac1a:	fa00 f101 	lsl.w	r1, r0, r1
   eac1e:	428c      	cmp	r4, r1
   eac20:	d10b      	bne.n	eac3a <__any_on+0x3e>
   eac22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   eac26:	4293      	cmp	r3, r2
   eac28:	d803      	bhi.n	eac32 <__any_on+0x36>
   eac2a:	2000      	movs	r0, #0
   eac2c:	bd10      	pop	{r4, pc}
   eac2e:	4603      	mov	r3, r0
   eac30:	e7f7      	b.n	eac22 <__any_on+0x26>
   eac32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   eac36:	2900      	cmp	r1, #0
   eac38:	d0f5      	beq.n	eac26 <__any_on+0x2a>
   eac3a:	2001      	movs	r0, #1
   eac3c:	e7f6      	b.n	eac2c <__any_on+0x30>
	...

000eac40 <nan>:
   eac40:	ed9f 0b01 	vldr	d0, [pc, #4]	; eac48 <nan+0x8>
   eac44:	4770      	bx	lr
   eac46:	bf00      	nop
   eac48:	00000000 	.word	0x00000000
   eac4c:	7ff80000 	.word	0x7ff80000

000eac50 <__ascii_wctomb>:
   eac50:	b149      	cbz	r1, eac66 <__ascii_wctomb+0x16>
   eac52:	2aff      	cmp	r2, #255	; 0xff
   eac54:	bf85      	ittet	hi
   eac56:	238a      	movhi	r3, #138	; 0x8a
   eac58:	6003      	strhi	r3, [r0, #0]
   eac5a:	700a      	strbls	r2, [r1, #0]
   eac5c:	f04f 30ff 	movhi.w	r0, #4294967295
   eac60:	bf98      	it	ls
   eac62:	2001      	movls	r0, #1
   eac64:	4770      	bx	lr
   eac66:	4608      	mov	r0, r1
   eac68:	4770      	bx	lr
	...

000eac6c <__aeabi_d2lz>:
   eac6c:	b538      	push	{r3, r4, r5, lr}
   eac6e:	2200      	movs	r2, #0
   eac70:	2300      	movs	r3, #0
   eac72:	4604      	mov	r4, r0
   eac74:	460d      	mov	r5, r1
   eac76:	f7fd fe1d 	bl	e88b4 <__aeabi_dcmplt>
   eac7a:	b928      	cbnz	r0, eac88 <__aeabi_d2lz+0x1c>
   eac7c:	4620      	mov	r0, r4
   eac7e:	4629      	mov	r1, r5
   eac80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   eac84:	f7fd beb4 	b.w	e89f0 <__aeabi_d2ulz>
   eac88:	4620      	mov	r0, r4
   eac8a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   eac8e:	f7fd feaf 	bl	e89f0 <__aeabi_d2ulz>
   eac92:	4240      	negs	r0, r0
   eac94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   eac98:	bd38      	pop	{r3, r4, r5, pc}
   eac9a:	bf00      	nop

000eac9c <dynalib_user>:
   eac9c:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   eacac:	0000 0000 3733 6236 6362 6365 332d 3736     ....376bbcec-367
   eacbc:	2d39 3034 6366 392d 3264 2d35 3035 3237     9-40fc-9d25-5072
   eaccc:	3864 3265 3439 3333 6200 3562 6435 3738     d8e29433.bb55d87
   eacdc:	2d64 3839 3839 342d 3833 2d66 3462 6262     d-9898-438f-b4bb
   eacec:	322d 3532 6639 3363 6330 6236 0065 6566     -2259fc30c6be.fe
   eacfc:	3234 3830 3231 312d 3765 2d30 3934 3064     420812-1e70-49d0
   ead0c:	612d 6434 2d30 6662 3832 3436 6537 3164     -a4d0-bf28647ed1
   ead1c:	3134 6300 3338 3435 3030 2d64 3865 6239     41.c835400d-e89b
   ead2c:	342d 3036 2d32 6662 6564 302d 6233 6664     -4602-bfde-03bdf
   ead3c:	3032 3832 6235 0033 2d2d 2d2d 422d 4745     20285b3.-----BEG
   ead4c:	4e49 4320 5245 4954 4946 4143 4554 2d2d     IN CERTIFICATE--
   ead5c:	2d2d 202d 0a0d 494d 4649 546a 4343 3341     --- ..MIIFjTCCA3
   ead6c:	6757 7741 4249 6741 5249 4e41 784f 6963     WgAwIBAgIRANOxci
   ead7c:	3059 7a49 634c 4139 6f55 5355 7372 476e     Y0IzLc9AUoUSrsnG
   ead8c:	776f 5144 4a59 6f4b 495a 7668 4e63 5141     owDQYJKoZIhvcNAQ
   ead9c:	4c45 5142 7741 0a0d 7a54 4c45 414d 476b     ELBQAw..TzELMAkG
   eadac:	3141 4555 6842 434d 5656 784d 544b 6e41     A1UEBhMCVVMxKTAn
   eadbc:	6742 564e 4142 546f 4549 756c 4764 7956     BgNVBAoTIEludGVy
   eadcc:	6d62 3056 4649 6c4e 3359 7956 5861 3552     bmV0IFNlY3VyaXR5
   eaddc:	4649 6c4a 3263 6856 0a0d 6d63 6f4e 4549     IFJlc2Vh..cmNoIE
   eadec:	7964 3362 7756 524d 7755 7745 4459 5156     dyb3VwMRUwEwYDVQ
   eadfc:	4451 7745 4a78 3155 484a 4649 764a 3362     QDEwxJU1JHIFJvb3
   eae0c:	6751 4457 7745 6848 4e63 544d 7859 444d     QgWDEwHhcNMTYxMD
   eae1c:	3241 544d 3055 7a4d 3155 0a0d 6857 4e63     A2MTU0MzU1..WhcN
   eae2c:	6a4d 7845 444d 3241 544d 3055 7a4d 3155     MjExMDA2MTU0MzU1
   eae3c:	6a57 4b42 514d 7773 5143 4459 5156 4751     WjBKMQswCQYDVQQG
   eae4c:	7745 564a 7a55 5745 424d 4751 3141 4555     EwJVUzEWMBQGA1UE
   eae5c:	6843 4e4d 4754 3056 334a 674d 0a0d 5752     ChMNTGV0J3Mg..RW
   eae6c:	6a35 6e63 776c 4464 6a45 434d 4745 3141     5jcnlwdDEjMCEGA1
   eae7c:	4555 7841 614d 4754 3056 334a 674d 5752     UEAxMaTGV0J3MgRW
   eae8c:	6a35 6e63 776c 4364 4242 5864 6f52 3362     5jcnlwdCBBdXRob3
   eae9c:	704a 4864 676b 4457 774d 6767 6945 0a0d     JpdHkgWDMwggEi..
   eaeac:	414d 4730 5343 4771 4953 3362 5144 4245     MA0GCSqGSIb3DQEB
   eaebc:	5141 4155 3441 4249 7744 7741 6767 4b45     AQUAA4IBDwAwggEK
   eaecc:	6f41 4249 5141 6343 7730 777a 7557 7555     AoIBAQCc0wzwWuUu
   eaedc:	3752 7964 5458 4465 3273 6a68 4f4d 5872     R7dyXTeDs2hjMOrX
   eaeec:	0a0d 534e 5a59 654a 3947 6a76 7858 4a63     ..NSYZJeG9vjXxcJ
   eaefc:	7649 3774 4c68 5151 7257 5a71 3134 4643     Ivt7hLQQWrqZ41CF
   eaf0c:	736a 5373 4572 4961 4c63 2b6f 314e 4f35     jssSrEaIcLo+N15O
   eaf1c:	7a62 3270 784a 6e75 426d 4259 582f 5a6b     bzp2JxunmBYB/XkZ
   eaf2c:	6671 0a0d 3938 3442 335a 4948 5161 5636     qf..89B4Z3HIaQ6V
   eaf3c:	636b 2b2f 7035 706e 4459 4978 487a 4b37     kc/+5pnpYDxIzH7K
   eaf4c:	5854 5363 4a4a 4831 3147 7272 6575 6577     TXcSJJ1HG1rruewe
   eaf5c:	774e 6341 4b6e 3778 7770 7158 6b7a 7272     NwAcnKx7pwXqzkrr
   eaf6c:	5576 6c48 0a0d 704e 3569 2f79 7431 4a50     vUHl..Npi5y/1tPJ
   eaf7c:	6f5a 7933 714d 7051 4d41 6e68 6e52 4879     Zo3yMqQpAMhnRnyH
   eaf8c:	6c2b 726d 5368 5259 5451 3250 7058 6f67     +lmrhSYRQTP2Xpgo
   eaf9c:	4c66 2f32 4f6f 7656 4761 6669 464f 3550     fL2/oOVvaGifOFP5
   eafac:	4765 3772 6344 0a0d 7547 7239 5a44 5755     eGr7Dc..Gu9rDZUW
   eafbc:	6366 7251 476f 7957 516d 3251 5964 7242     fcQroGWymQQ2dYBr
   eafcc:	4572 7a72 3547 4a42 4365 692b 6b6c 7138     rErzG5BJeC+ilk8q
   eafdc:	4349 7055 4d42 305a 4e77 7841 597a 7838     ICUpBMZ0wNAxzY8x
   eafec:	4a4f 5755 7175 7a67 0a0d 4575 7850 5273     OJUWuqgz..uEPxsR
   eaffc:	442f 484d 692b 5465 5445 5350 3230 4f2b     /DMH+ieTETPS02+O
   eb00c:	3850 6a38 714e 5475 786b 6178 452f 516a     P88jNquTkxxa/EjQ
   eb01c:	6430 425a 7a59 7671 4571 624b 5562 3843     0dZBYzqvqEKbbUC8
   eb02c:	5944 6366 544f 6741 424d 0a0d 4141 6a47     DYfcOTAgMB..AAGj
   eb03c:	6767 6e46 494d 4249 7a59 4f41 6742 564e     ggFnMIIBYzAOBgNV
   eb04c:	5148 4238 6641 4538 4142 434d 5941 7759     HQ8BAf8EBAMCAYYw
   eb05c:	6745 4459 5256 5430 5141 2f48 4142 7767     EgYDVR0TAQH/BAgw
   eb06c:	6742 4245 772f 4249 4441 5542 0a0d 6742     BgEB/wIBADBU..Bg
   eb07c:	564e 5348 4541 5454 4c42 414d 4767 6d42     NVHSAETTBLMAgGBm
   eb08c:	4265 4144 4345 5441 2f41 6742 7273 6742     eBDAECATA/BgsrBg
   eb09c:	4545 5941 664c 7745 4245 5441 7741 434d     EEAYLfEwEBATAwMC
   eb0ac:	4734 4343 4773 5141 4655 7742 4249 0a0d     4GCCsGAQUFBwIB..
   eb0bc:	6946 6f4a 4864 7752 694f 7638 3359 7a42     FiJodHRwOi8vY3Bz
   eb0cc:	6e4c 764a 3362 7451 4465 7545 4762 3056     LnJvb3QteDEubGV0
   eb0dc:	3263 7556 3359 354a 4863 7551 3362 6e4a     c2VuY3J5cHQub3Jn
   eb0ec:	424d 4730 3141 6455 6744 5751 4242 6f53     MB0GA1UdDgQWBBSo
   eb0fc:	0a0d 6d53 6a70 4842 6433 7575 5262 624f     ..SmpjBH3duubROb
   eb10c:	6d65 5752 7658 3638 736a 546f 7a41 6742     emRWXv86jsoTAzBg
   eb11c:	564e 5248 4538 444c 7141 434d 6769 714a     NVHR8ELDAqMCigJq
   eb12c:	6b41 6968 6f4a 4864 7752 694f 7638 3359     AkhiJodHRwOi8vY3
   eb13c:	734a 0a0d 6e4c 764a 3362 7451 4465 7545     Js..LnJvb3QteDEu
   eb14c:	4762 3056 3263 7556 3359 354a 4863 7551     bGV0c2VuY3J5cHQu
   eb15c:	3362 6e4a 484d 4749 4343 4773 5141 4655     b3JnMHIGCCsGAQUF
   eb16c:	7742 4245 4742 7759 445a 7741 6742 7267     BwEBBGYwZDAwBggr
   eb17c:	6742 4645 0a0d 5142 7763 5941 6b59 4861     BgEF..BQcwAYYkaH
   eb18c:	3052 4463 766f 324c 6a39 3363 7541 6d63     R0cDovL29jc3Aucm
   eb19c:	7639 4364 3431 534d 7335 585a 7a52 575a     9vdC14MS5sZXRzZW
   eb1ac:	6a35 6e63 776c 4364 7635 6d63 7663 444d     5jcnlwdC5vcmcvMD
   eb1bc:	4741 4343 4773 0a0d 5141 4655 7a42 4341     AGCCsG..AQUFBzAC
   eb1cc:	6968 6f52 4864 7752 694f 7638 3259 7956     hiRodHRwOi8vY2Vy
   eb1dc:	4364 7935 3262 3039 584c 7867 6d4c 6c78     dC5yb290LXgxLmxl
   eb1ec:	4864 6c4e 6d62 794e 5865 3042 6d4c 7939     dHNlbmNyeXB0Lm9y
   eb1fc:	795a 7738 7748 4459 0a0d 5256 6a30 4242     Zy8wHwYD..VR0jBB
   eb20c:	7767 6f46 5541 6265 5a52 6e35 3275 6535     gwFoAUebRZ5nu25e
   eb21c:	4251 3463 4941 4d69 6167 5057 7062 326d     QBc4AIiMgaWPbpm2
   eb22c:	7734 5144 4a59 6f4b 495a 7668 4e63 5141     4wDQYJKoZIhvcNAQ
   eb23c:	4c45 5142 4441 6767 4249 0a0d 4241 506e     ELBQADggIB..ABnP
   eb24c:	5364 3041 544c 6d71 6652 512f 6531 4d61     dSA0LTqmRf/Q1eaM
   eb25c:	6a32 6f4c 476e 6234 6451 6e45 4f71 514a     2jLonG4bQdEnqOJQ
   eb26c:	6e38 7143 4f78 5465 7252 6f54 4b45 7774     8nCqxOeTRrToEKtw
   eb27c:	2b54 332b 6736 5354 426c 7847 0a0d 2f41     T++36gTSlBGx..A/
   eb28c:	6435 7475 3238 4a6a 3251 786a 384e 4952     5dut82jJQ2jxN8RI
   eb29c:	4c38 5139 5846 5772 3469 5878 416e 4532     8L9QFXrWi4xXnA2E
   eb2ac:	4171 3031 6a79 6948 3652 3948 6a63 4d36     qA10yjHiR6H9cj6M
   eb2bc:	6946 6e4f 3562 6e49 6531 7357 4d52 0a0d     FiOnb5In1eWsRM..
   eb2cc:	4d55 7632 6533 7439 734e 4143 4267 6b75     UM2v3e9tNsCAgBuk
   eb2dc:	4850 6741 6c31 6851 3730 7672 4b46 2f6d     PHAg1lQh07rvFKm/
   eb2ec:	7a42 4239 6a43 7861 726f 4c41 4e49 6655     Bz9BCjaxorALINUf
   eb2fc:	395a 4444 3436 326a 6769 494c 6c78 3265     Z9DD64j2igLIxle2
   eb30c:	0a0d 5044 5778 6438 2f49 3246 6f6c 4d48     ..DPxW8dI/F2loHM
   eb31c:	586a 6a5a 4771 5238 716b 555a 6f64 7478     jXZjqG8RkqZUdoxt
   eb32c:	4449 2b35 3039 6746 4773 6649 4d6b 7170     ID5+90FgsGIfkMpq
   eb33c:	5267 3053 6635 7a34 6250 4543 7148 5843     gRS05f4zPbCEHqCX
   eb34c:	316c 0a0d 4f65 4835 4579 544c 6367 6c56     l1..eO5HyELTgcVl
   eb35c:	584c 5158 6744 5741 526e 757a 3174 4668     LXXQDgAWnRzut1hF
   eb36c:	654a 7a63 3159 6a74 5151 6f6e 6636 7336     JeczY1tjQQno6f6s
   eb37c:	6e2b 794d 4c64 324e 5736 5575 7334 5533     +nMydLN26WuU4s3U
   eb38c:	7659 754f 0a0d 734f 7855 6c52 754a 5437     YvOu..OsUxRlJu7T
   eb39c:	5253 7148 4344 6c33 4553 5835 6767 6b56     SRHqDC3lSE5XggVk
   eb3ac:	647a 5061 756b 474b 6251 7047 796e 302b     zdaPkuKGQbGpny+0
   eb3bc:	2f31 3734 6668 5858 424e 4837 746e 4e57     1/47hfXXNB7HntWN
   eb3cc:	365a 324e 7756 0a0d 3770 3647 664f 2b59     Z6N2Vw..p7G6OfY+
   eb3dc:	5159 5a72 4977 5161 686d 4972 4a71 755a     YQrZwIaQmhrIqJZu
   eb3ec:	6769 7273 6562 5733 672b 6e64 7935 456b     igsrbe3W+gdn5ykE
   eb3fc:	2b39 794b 5630 5667 7355 7866 356f 6d32     9+Ky0VgVUsfxo52m
   eb40c:	4677 7359 4a31 594b 0a0d 5032 4447 5775     wFYs1JKY..2PGDuW
   eb41c:	3878 364d 6c44 3653 5171 766b 6148 5552     x8M6DlS6qQkvHaRU
   eb42c:	306f 4d46 3864 7354 6c53 4662 2f30 3976     o0FMd8TsSlbF0/v9
   eb43c:	3536 4771 4b46 5368 6544 6f51 704d 6e59     65qGFKhSDeQoMpYn
   eb44c:	6377 516d 6c69 6852 302f 0a0d 7961 544c     wcmQilRh/0..ayLT
   eb45c:	6c68 4c48 384e 6731 6b53 6a4a 7256 4950     hlHLN81gSkJjVrPI
   eb46c:	5930 7838 5643 4250 7434 6277 5031 5546     0Y8xCVPB4twb1PFU
   eb47c:	3264 5066 334d 4173 7431 384a 7333 355a     d2fPM3sA1tJ83sZ5
   eb48c:	3876 6776 7646 7932 666f 524b 0a0d 4250     v8vgFv2yofKR..PB
   eb49c:	7430 4a36 557a 3841 6d31 7153 334d 786b     0t6JzUA81mSqM3kx
   eb4ac:	356c 2b65 5a49 6877 4159 4f79 4f30 6754     l5e+IZwhYAyO0OTg
   eb4bc:	2f33 7366 4838 4771 4e54 644b 4239 6f71     3/fs8HqGTNKd9Bqo
   eb4cc:	7755 5253 7a42 3070 4a36 674d 6235 0a0d     UwSRBzp06JMg5b..
   eb4dc:	5572 4743 6277 5543 4944 6d30 6178 4a64     rUCGwbCUDI0mxadJ
   eb4ec:	4233 347a 7857 3652 7966 704e 4b42 7932     3Bz4WxR6fyNpBK2y
   eb4fc:	6941 576e 7345 6b69 7178 7445 0a0d 2d2d     AinWEsikxqEt..--
   eb50c:	2d2d 452d 444e 4320 5245 4954 4946 4143     ---END CERTIFICA
   eb51c:	4554 2d2d 2d2d 202d 6900 746f 662d 6361     TE----- .iot-fac
   eb52c:	6169 2d6c 6f63 706d 7261 2d65 6574 7473     ial-compare-test
   eb53c:	632e 676f 696e 6974 6576 6573 7672 6369     .cognitiveservic
   eb54c:	7365 612e 757a 6572 632e 6d6f 2f00 6166     es.azure.com./fa
   eb55c:	6563 762f 2e31 2f30 6576 6972 7966 6200     ce/v1.0/verify.b
   eb56c:	3233 3431 6134 6162 6666 3437 6330 6163     32144abaff740cca
   eb57c:	3130 6663 3032 3835 6534 3862 3030 0064     01cf20584eb800d.
   eb58c:	662f 6361 2f65 3176 302e 642f 7465 6365     /face/v1.0/detec
   eb59c:	3f74 6572 7574 6e72 6146 6563 6449 743d     t?returnFaceId=t
   eb5ac:	7572 2665 6572 7574 6e72 6146 6563 614c     rue&returnFaceLa
   eb5bc:	646e 616d 6b72 3d73 6166 736c 2665 6572     ndmarks=false&re
   eb5cc:	6f63 6e67 7469 6f69 4d6e 646f 6c65 723d     cognitionModel=r
   eb5dc:	6365 676f 696e 6974 6e6f 305f 2633 6572     ecognition_03&re
   eb5ec:	7574 6e72 6552 6f63 6e67 7469 6f69 4d6e     turnRecognitionM
   eb5fc:	646f 6c65 663d 6c61 6573 6426 7465 6365     odel=false&detec
   eb60c:	6974 6e6f 6f4d 6564 3d6c 6564 6574 7463     tionModel=detect
   eb61c:	6f69 5f6e 3230 4300 6f6c 6973 676e 7420     ion_02.Closing t
   eb62c:	6568 6c20 636f 006b 704f 6e65 6e69 2067     he lock.Opening 
   eb63c:	6874 2065 6f6c 6b63 4700 5445 5000 534f     the lock.GET.POS
   eb64c:	0054 5550 0054 4544 454c 4554 5000 5441     T.PUT.DELETE.PAT
   eb65c:	4843 6100 7070 696c 6163 6974 6e6f 6a2f     CH.application/j
   eb66c:	6f73 006e 7061 6c70 6369 7461 6f69 2f6e     son.application/
   eb67c:	636f 6574 2d74 7473 6572 6d61 7b00 2200     octet-stream.{."
   eb68c:	6166 6563 6449 3a22 0022 2c22 7022 7265     faceId":".","per
   eb69c:	6f73 496e 2264 223a 2200 222c 6550 7372     sonId":".","Pers
   eb6ac:	6e6f 7247 756f 4970 2264 223a 2200 0d7d     onGroupId":"."}.
   eb6bc:	0d0a 000a 4820 5454 2f50 2e31 0030 634f     .... HTTP/1.0.Oc
   eb6cc:	2d70 7041 6d69 532d 6275 6373 6972 7470     p-Apim-Subscript
   eb6dc:	6f69 2d6e 654b 3a79 4300 6e6f 6574 746e     ion-Key:.Content
   eb6ec:	542d 7079 3a65 4800 736f 3a74 4300 6e6f     -Type:.Host:.Con
   eb6fc:	6574 746e 4c2d 6e65 7467 3a68 6600 6361     tent-Length:.fac
   eb70c:	4965 0064 7369 6449 6e65 6974 6163 006c     eId.isIdentical.
   eb71c:	6f63 666e 6469 6e65 6563 6200 7361 6369     confidence.basic
   eb72c:	735f 7274 6e69 3a67 5f3a 5f4d 6f63 736e     _string::_M_cons
   eb73c:	7274 6375 2074 756e 6c6c 6e20 746f 7620     truct null not v
   eb74c:	6c61 6469 7600 6365 6f74 3a72 5f3a 5f4d     alid.vector::_M_
   eb75c:	6172 676e 5f65 6e69 6573 7472 0000 0000     range_insert....

000eb76c <_ZL1K>:
   eb76c:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
   eb77c:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
   eb78c:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
   eb79c:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
   eb7ac:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
   eb7bc:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
   eb7cc:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
   eb7dc:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
   eb7ec:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
   eb7fc:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
   eb80c:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
   eb81c:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
   eb82c:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
   eb83c:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
   eb84c:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
   eb85c:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.
   eb86c:	862a 8648 0df7 0101 0008 2b20 0020 202c     *.H....... + ., 
   eb87c:	2500 3d73 3f00 3d3f 2500 3230 2558 0073     .%s=.??=.%02X%s.
   eb88c:	2e2e 2e2e 3f00 3f3f 2000 2528 2c73 4d20     .....???. (%s, M
   eb89c:	4647 2d31 7325 202c 7830 3025 5832 0029     GF1-%s, 0x%02X).
   eb8ac:	7325 6b20 7965 7320 7a69 0065               %s key size.

000eb8b8 <mbedtls_sha1_info>:
   eb8b8:	0004 0000 bd18 000e 0014 0000 0040 0000     ............@...
   eb8c8:	70a9 000d 70a5 000d 70a1 000d b14b 000d     .p...p...p..K...
   eb8d8:	708b 000d 7079 000d 7075 000d 7071 000d     .p..yp..up..qp..

000eb8e8 <mbedtls_sha224_info>:
   eb8e8:	0005 0000 bd43 000e 001c 0000 0040 0000     ....C.......@...
   eb8f8:	70f1 000d 70ed 000d 70e9 000d 70dd 000d     .p...p...p...p..
   eb908:	70c7 000d 70b5 000d 70b1 000d 70ad 000d     .p...p...p...p..

000eb918 <mbedtls_sha256_info>:
   eb918:	0006 0000 bd70 000e 0020 0000 0040 0000     ....p... ...@...
   eb928:	70f7 000d 70ed 000d 70e9 000d 70e3 000d     .p...p...p...p..
   eb938:	70c7 000d 70b5 000d 70b1 000d 70ad 000d     .p...p...p...p..

000eb948 <mbedtls_sha384_info>:
   eb948:	0007 0000 bd9d 000e 0030 0000 0080 0000     ........0.......
   eb958:	7141 000d 713d 000d 7139 000d 712d 000d     Aq..=q..9q..-q..
   eb968:	7117 000d 7105 000d 7101 000d 70fd 000d     .q...q...q...p..

000eb978 <mbedtls_sha512_info>:
   eb978:	0008 0000 bdca 000e 0040 0000 0080 0000     ........@.......
   eb988:	7147 000d 713d 000d 7139 000d 7133 000d     Gq..=q..9q..3q..
   eb998:	7117 000d 7105 000d 7101 000d 70fd 000d     .q...q...q...p..
   eb9a8:	6573 7063 3532 7236 0031 0000               secp256r1...

000eb9b4 <_ZL20ecp_supported_curves>:
   eb9b4:	0003 0017 0100 0000 b9a8 000e 0000 0000     ................
	...
   eb9cc:	862a 8648 0df7 0c01 0301 7000 6562 6957     *.H........pbeWi
   eb9dc:	6874 4853 4141 646e 2d33 654b 5479 6972     thSHAAnd3-KeyTri
   eb9ec:	6c70 4465 5345 432d 4342 5000 4542 7720     pleDES-CBC.PBE w
   eb9fc:	7469 2068 4853 3141 6120 646e 3320 4b2d     ith SHA1 and 3-K
   eba0c:	7965 3320 4544 0053 862a 8648 0df7 0c01     ey 3DES.*.H.....
   eba1c:	0401 7000 6562 6957 6874 4853 4141 646e     ...pbeWithSHAAnd
   eba2c:	2d32 654b 5479 6972 6c70 4465 5345 432d     2-KeyTripleDES-C
   eba3c:	4342 5000 4542 7720 7469 2068 4853 3141     BC.PBE with SHA1
   eba4c:	6120 646e 3220 4b2d 7965 3320 4544 0053      and 2-Key 3DES.
   eba5c:	862a 8648 0df7 0702 6800 616d 5363 4148     *.H......hmacSHA
   eba6c:	0031 4d48 4341 532d 4148 312d 2a00 4886     1.HMAC-SHA-1.*.H
   eba7c:	f786 020d 0008 6d68 6361 4853 3241 3432     ......hmacSHA224
   eba8c:	4800 414d 2d43 4853 2d41 3232 0034 862a     .HMAC-SHA-224.*.
   eba9c:	8648 0df7 0902 6800 616d 5363 4148 3532     H......hmacSHA25
   ebaac:	0036 4d48 4341 532d 4148 322d 3635 2a00     6.HMAC-SHA-256.*
   ebabc:	4886 f786 020d 000a 6d68 6361 4853 3341     .H......hmacSHA3
   ebacc:	3438 4800 414d 2d43 4853 2d41 3833 0034     84.HMAC-SHA-384.
   ebadc:	862a 8648 0df7 0b02 6800 616d 5363 4148     *.H......hmacSHA
   ebaec:	3135 0032 4d48 4341 532d 4148 352d 3231     512.HMAC-SHA-512
   ebafc:	2b00 030e 1a02 6900 2d64 6873 3161 6000     .+.....id-sha1.`
   ebb0c:	4886 6501 0403 0402 6900 2d64 6873 3261     .H.e.....id-sha2
   ebb1c:	3432 6000 4886 6501 0403 0102 6900 2d64     24.`.H.e.....id-
   ebb2c:	6873 3261 3635 6000 4886 6501 0403 0202     sha256.`.H.e....
   ebb3c:	6900 2d64 6873 3361 3438 6000 4886 6501     .id-sha384.`.H.e
   ebb4c:	0403 0302 6900 2d64 6873 3561 3231 2b00     .....id-sha512.+
   ebb5c:	030e 0702 6400 7365 4243 0043 862a 8648     .....desCBC.*.H.
   ebb6c:	0df7 0703 6400 7365 652d 6564 2d33 6263     .....des-ede3-cb
   ebb7c:	0063 4544 2d53 4445 3345 432d 4342 2a00     c.DES-EDE3-CBC.*
   ebb8c:	4886 3dce 0103 0007 862a 8648 0df7 0101     .H.=....*.H.....
   ebb9c:	0001 7372 4561 636e 7972 7470 6f69 006e     ..rsaEncryption.
   ebbac:	5352 0041 862a ce48 023d 0001 6469 652d     RSA.*.H.=...id-e
   ebbbc:	5063 6275 696c 4b63 7965 4700 6e65 7265     cPublicKey.Gener
   ebbcc:	6369 4520 2043 656b 0079 812b 0104 000c     ic EC key.+.....
   ebbdc:	6469 652d 4463 0048 4345 6b20 7965 6620     id-ecDH.EC key f
   ebbec:	726f 4520 4443 0048 862a 8648 0df7 0101     or ECDH.*.H.....
   ebbfc:	0005 6873 2d61 5731 7469 5268 4153 6e45     ..sha-1WithRSAEn
   ebc0c:	7263 7079 6974 6e6f 5200 4153 7720 7469     cryption.RSA wit
   ebc1c:	2068 4853 3141 2a00 4886 f786 010d 0e01     h SHA1.*.H......
   ebc2c:	7300 6168 3232 5734 7469 5268 4153 6e45     .sha224WithRSAEn
   ebc3c:	7263 7079 6974 6e6f 5200 4153 7720 7469     cryption.RSA wit
   ebc4c:	2068 4853 2d41 3232 0034 862a 8648 0df7     h SHA-224.*.H...
   ebc5c:	0101 000b 6873 3261 3635 6957 6874 5352     ....sha256WithRS
   ebc6c:	4541 636e 7972 7470 6f69 006e 5352 2041     AEncryption.RSA 
   ebc7c:	6977 6874 5320 4148 322d 3635 2a00 4886     with SHA-256.*.H
   ebc8c:	f786 010d 0c01 7300 6168 3833 5734 7469     .......sha384Wit
   ebc9c:	5268 4153 6e45 7263 7079 6974 6e6f 5200     hRSAEncryption.R
   ebcac:	4153 7720 7469 2068 4853 2d41 3833 0034     SA with SHA-384.
   ebcbc:	862a 8648 0df7 0101 000d 6873 3561 3231     *.H.......sha512
   ebccc:	6957 6874 5352 4541 636e 7972 7470 6f69     WithRSAEncryptio
   ebcdc:	006e 5352 2041 6977 6874 5320 4148 352d     n.RSA with SHA-5
   ebcec:	3231 2b00 030e 1d02 2a00 4886 3dce 0104     12.+.....*.H.=..
   ebcfc:	6500 6463 6173 772d 7469 2d68 4853 3141     .ecdsa-with-SHA1
   ebd0c:	4500 4443 4153 7720 7469 2068 4853 3141     .ECDSA with SHA1
   ebd1c:	2a00 4886 3dce 0304 0001 6365 7364 2d61     .*.H.=....ecdsa-
   ebd2c:	6977 6874 532d 4148 3232 0034 4345 5344     with-SHA224.ECDS
   ebd3c:	2041 6977 6874 5320 4148 3232 0034 862a     A with SHA224.*.
   ebd4c:	ce48 043d 0203 6500 6463 6173 772d 7469     H.=....ecdsa-wit
   ebd5c:	2d68 4853 3241 3635 4500 4443 4153 7720     h-SHA256.ECDSA w
   ebd6c:	7469 2068 4853 3241 3635 2a00 4886 3dce     ith SHA256.*.H.=
   ebd7c:	0304 0003 6365 7364 2d61 6977 6874 532d     ....ecdsa-with-S
   ebd8c:	4148 3833 0034 4345 5344 2041 6977 6874     HA384.ECDSA with
   ebd9c:	5320 4148 3833 0034 862a ce48 043d 0403      SHA384.*.H.=...
   ebdac:	6500 6463 6173 772d 7469 2d68 4853 3541     .ecdsa-with-SHA5
   ebdbc:	3231 4500 4443 4153 7720 7469 2068 4853     12.ECDSA with SH
   ebdcc:	3541 3231 2a00 4886 f786 010d 0a01 5200     A512.*.H.......R
   ebddc:	4153 5353 2d41 5350 0053 062b 0501 0705     SASSA-PSS.+.....
   ebdec:	0103 6900 2d64 706b 732d 7265 6576 4172     ...id-kp-serverA
   ebdfc:	7475 0068 4c54 2053 6557 2062 6553 7672     uth.TLS Web Serv
   ebe0c:	7265 4120 7475 6568 746e 6369 7461 6f69     er Authenticatio
   ebe1c:	006e 062b 0501 0705 0203 6900 2d64 706b     n.+........id-kp
   ebe2c:	632d 696c 6e65 4174 7475 0068 4c54 2053     -clientAuth.TLS 
   ebe3c:	6557 2062 6c43 6569 746e 4120 7475 6568     Web Client Authe
   ebe4c:	746e 6369 7461 6f69 006e 062b 0501 0705     ntication.+.....
   ebe5c:	0303 6900 2d64 706b 632d 646f 5365 6769     ...id-kp-codeSig
   ebe6c:	696e 676e 4300 646f 2065 6953 6e67 6e69     ning.Code Signin
   ebe7c:	0067 062b 0501 0705 0403 6900 2d64 706b     g.+........id-kp
   ebe8c:	652d 616d 6c69 7250 746f 6365 6974 6e6f     -emailProtection
   ebe9c:	4500 6d2d 6961 206c 7250 746f 6365 6974     .E-mail Protecti
   ebeac:	6e6f 2b00 0106 0505 0307 0008 6469 6b2d     on.+........id-k
   ebebc:	2d70 6974 656d 7453 6d61 6970 676e 5400     p-timeStamping.T
   ebecc:	6d69 2065 7453 6d61 6970 676e 2b00 0106     ime Stamping.+..
   ebedc:	0505 0307 0009 6469 6b2d 2d70 434f 5053     ......id-kp-OCSP
   ebeec:	6953 6e67 6e69 0067 434f 5053 5320 6769     Signing.OCSP Sig
   ebefc:	696e 676e 5500 131d 6900 2d64 6563 622d     ning.U...id-ce-b
   ebf0c:	7361 6369 6f43 736e 7274 6961 746e 0073     asicConstraints.
   ebf1c:	6142 6973 2063 6f43 736e 7274 6961 746e     Basic Constraint
   ebf2c:	0073 1d55 000f 6469 632d 2d65 656b 5579     s.U...id-ce-keyU
   ebf3c:	6173 6567 5500 251d 6900 2d64 6563 652d     sage.U.%.id-ce-e
   ebf4c:	7478 654b 5579 6173 6567 4500 7478 6e65     xtKeyUsage.Exten
   ebf5c:	6564 2064 654b 2079 7355 6761 0065 1d55     ded Key Usage.U.
   ebf6c:	0011 6469 632d 2d65 7573 6a62 6365 4174     ..id-ce-subjectA
   ebf7c:	746c 614e 656d 5300 6275 656a 7463 4120     ltName.Subject A
   ebf8c:	746c 4e20 6d61 0065 8660 0148 f886 0142     lt Name.`.H...B.
   ebf9c:	0001 6469 6e2d 7465 6373 7061 2d65 6563     ..id-netscape-ce
   ebfac:	7472 7974 6570 4e00 7465 6373 7061 2065     rttype.Netscape 
   ebfbc:	6543 7472 6669 6369 7461 2065 7954 6570     Certificate Type
   ebfcc:	5500 0304 6900 2d64 7461 632d 6d6f 6f6d     .U...id-at-commo
   ebfdc:	4e6e 6d61 0065 6f43 6d6d 6e6f 4e20 6d61     nName.Common Nam
   ebfec:	0065 4e43 5500 0604 6900 2d64 7461 632d     e.CN.U...id-at-c
   ebffc:	756f 746e 7972 614e 656d 4300 756f 746e     ountryName.Count
   ec00c:	7972 5500 0704 6900 2d64 7461 6c2d 636f     ry.U...id-at-loc
   ec01c:	6c61 7469 0079 6f4c 6163 696c 7974 4c00     ality.Locality.L
   ec02c:	5500 0804 6900 2d64 7461 732d 6174 6574     .U...id-at-state
   ec03c:	5300 6174 6574 5500 0a04 6900 2d64 7461     .State.U...id-at
   ec04c:	6f2d 6772 6e61 7a69 7461 6f69 4e6e 6d61     -organizationNam
   ec05c:	0065 724f 6167 696e 617a 6974 6e6f 4f00     e.Organization.O
   ec06c:	5500 0b04 6900 2d64 7461 6f2d 6772 6e61     .U...id-at-organ
   ec07c:	7a69 7461 6f69 616e 556c 696e 4e74 6d61     izationalUnitNam
   ec08c:	0065 724f 2067 6e55 7469 4f00 0055 862a     e.Org Unit.OU.*.
   ec09c:	8648 0df7 0901 0001 6d65 6961 416c 6464     H.......emailAdd
   ec0ac:	6572 7373 4500 6d2d 6961 206c 6461 7264     ress.E-mail addr
   ec0bc:	7365 0073 0455 0005 6469 612d 2d74 6573     ess.U...id-at-se
   ec0cc:	6972 6c61 754e 626d 7265 5300 7265 6169     rialNumber.Seria
   ec0dc:	206c 756e 626d 7265 5500 1004 6900 2d64     l number.U...id-
   ec0ec:	7461 702d 736f 6174 416c 6464 6572 7373     at-postalAddress
   ec0fc:	5000 736f 6174 206c 6461 7264 7365 0073     .Postal address.
   ec10c:	0455 0011 6469 612d 2d74 6f70 7473 6c61     U...id-at-postal
   ec11c:	6f43 6564 5000 736f 6174 206c 6f63 6564     Code.Postal code
   ec12c:	5500 0404 6900 2d64 7461 732d 7275 614e     .U...id-at-surNa
   ec13c:	656d 5300 7275 616e 656d 5300 004e 0455     me.Surname.SN.U.
   ec14c:	002a 6469 612d 2d74 6967 6576 4e6e 6d61     *.id-at-givenNam
   ec15c:	0065 6947 6576 206e 616e 656d 4700 004e     e.Given name.GN.
   ec16c:	0455 002b 6469 612d 2d74 6e69 7469 6169     U.+.id-at-initia
   ec17c:	736c 4900 696e 6974 6c61 0073 0455 002c     ls.Initials.U.,.
   ec18c:	6469 612d 2d74 6567 656e 6172 6974 6e6f     id-at-generation
   ec19c:	7551 6c61 6669 6569 0072 6547 656e 6172     Qualifier.Genera
   ec1ac:	6974 6e6f 7120 6175 696c 6966 7265 5500     tion qualifier.U
   ec1bc:	0c04 6900 2d64 7461 742d 7469 656c 5400     ...id-at-title.T
   ec1cc:	7469 656c 5500 2e04 6900 2d64 7461 642d     itle.U...id-at-d
   ec1dc:	516e 6175 696c 6966 7265 4400 7369 6974     nQualifier.Disti
   ec1ec:	676e 6975 6873 6465 4e20 6d61 2065 7571     nguished Name qu
   ec1fc:	6c61 6669 6569 0072 0455 0041 6469 612d     alifier.U.A.id-a
   ec20c:	2d74 7370 7565 6f64 796e 006d 7350 7565     t-pseudonym.Pseu
   ec21c:	6f64 796e 006d 9209 8926 f293 642c 1901     donym...&...,d..
   ec22c:	6900 2d64 6f64 616d 6e69 6f43 706d 6e6f     .id-domainCompon
   ec23c:	6e65 0074 6f44 616d 6e69 6320 6d6f 6f70     ent.Domain compo
   ec24c:	656e 746e 4400 0043 0455 002d 6469 612d     nent.DC.U.-.id-a
   ec25c:	2d74 6e75 7169 6575 6449 6e65 6974 6966     t-uniqueIdentifi
   ec26c:	7265 5500 696e 7571 2065 6449 6e65 6974     er.Unique Identi
   ec27c:	6966 7265 0000 0000                         fier....

000ec284 <_ZL10oid_md_alg>:
   ec284:	bafd 000e 0005 0000 bb03 000e ba73 000e     ............s...
   ec294:	0004 0000 bb0b 000e 0009 0000 bb15 000e     ................
   ec2a4:	bc4e 000e 0005 0000 bb1f 000e 0009 0000     N...............
   ec2b4:	bb29 000e bc81 000e 0006 0000 bb33 000e     )...........3...
   ec2c4:	0009 0000 bb3d 000e bcb4 000e 0007 0000     ....=...........
   ec2d4:	bb47 000e 0009 0000 bb51 000e bce7 000e     G.......Q.......
   ec2e4:	0008 0000 0000 0000 0000 0000 0000 0000     ................
	...

000ec2fc <_ZL10oid_pk_alg>:
   ec2fc:	bb94 000e 0009 0000 bb9e 000e bbac 000e     ................
   ec30c:	0001 0000 bbb0 000e 0007 0000 bbb8 000e     ................
   ec31c:	bbc7 000e 0002 0000 bbd6 000e 0005 0000     ................
   ec32c:	bbdc 000e bbe4 000e 0003 0000 0000 0000     ................
	...

000ec34c <_ZL11oid_ecp_grp>:
   ec34c:	bb8b 000e 0008 0000 b9a8 000e b9a8 000e     ................
   ec35c:	0003 0000 0000 0000 0000 0000 0000 0000     ................
	...

000ec374 <_ZL11oid_md_hmac>:
   ec374:	ba5c 000e 0008 0000 ba65 000e ba6e 000e     \.......e...n...
   ec384:	0004 0000 ba79 000e 0008 0000 ba82 000e     ....y...........
   ec394:	ba8d 000e 0005 0000 ba9a 000e 0008 0000     ................
   ec3a4:	baa3 000e baae 000e 0006 0000 babb 000e     ................
   ec3b4:	0008 0000 bac4 000e bacf 000e 0007 0000     ................
   ec3c4:	badc 000e 0008 0000 bae5 000e baf0 000e     ................
   ec3d4:	0008 0000 0000 0000 0000 0000 0000 0000     ................
	...

000ec3ec <_ZL11oid_sig_alg>:
   ec3ec:	bbf4 000e 0009 0000 bbfe 000e bc15 000e     ................
   ec3fc:	0104 0000 bc23 000e 0009 0000 bc2d 000e     ....#.......-...
   ec40c:	bc45 000e 0105 0000 bc56 000e 0009 0000     E.......V.......
   ec41c:	bc60 000e bc78 000e 0106 0000 bc89 000e     `...x...........
   ec42c:	0009 0000 bc93 000e bcab 000e 0107 0000     ................
   ec43c:	bcbc 000e 0009 0000 bcc6 000e bcde 000e     ................
   ec44c:	0108 0000 bcef 000e 0005 0000 bbfe 000e     ................
   ec45c:	bc15 000e 0104 0000 bcf5 000e 0007 0000     ................
   ec46c:	bcfd 000e bd0d 000e 0404 0000 bd1d 000e     ................
   ec47c:	0008 0000 bd26 000e bd38 000e 0405 0000     ....&...8.......
   ec48c:	bd4a 000e 0008 0000 bd53 000e bd65 000e     J.......S...e...
   ec49c:	0406 0000 bd77 000e 0008 0000 bd80 000e     ....w...........
   ec4ac:	bd92 000e 0407 0000 bda4 000e 0008 0000     ................
   ec4bc:	bdad 000e bdbf 000e 0408 0000 bdd1 000e     ................
   ec4cc:	0009 0000 bddb 000e bddb 000e 0600 0000     ................
	...

000ec4f0 <_ZL12oid_x509_ext>:
   ec4f0:	bf01 000e 0003 0000 bf05 000e bf1c 000e     ................
   ec500:	0100 0000 bf2e 000e 0003 0000 bf32 000e     ............2...
   ec510:	bf60 000e 0004 0000 bf41 000e 0003 0000     `.......A.......
   ec520:	bf45 000e bf57 000e 0800 0000 bf6a 000e     E...W.......j...
   ec530:	0003 0000 bf6e 000e bf83 000e 0020 0000     ....n....... ...
   ec540:	bf94 000e 0009 0000 bf9e 000e bfb3 000e     ................
   ec550:	0000 0001 0000 0000 0000 0000 0000 0000     ................
	...

000ec568 <_ZL14oid_cipher_alg>:
   ec568:	bb5b 000e 0005 0000 bb61 000e ba37 000e     [.......a...7...
   ec578:	0021 0000 bb68 000e 0008 0000 bb71 000e     !...h.......q...
   ec588:	bb7e 000e 0025 0000 0000 0000 0000 0000     ~...%...........
	...

000ec5a4 <_ZL17oid_ext_key_usage>:
   ec5a4:	bde6 000e 0008 0000 bdef 000e be00 000e     ................
   ec5b4:	be1e 000e 0008 0000 be27 000e be38 000e     ........'...8...
   ec5c4:	be56 000e 0008 0000 be5f 000e be71 000e     V......._...q...
   ec5d4:	be7e 000e 0008 0000 be87 000e be9d 000e     ~...............
   ec5e4:	beaf 000e 0008 0000 beb8 000e becb 000e     ................
   ec5f4:	bed9 000e 0008 0000 bee2 000e bef4 000e     ................
	...

000ec614 <_ZL18oid_pkcs12_pbe_alg>:
   ec614:	b9cc 000e 000a 0000 b9d7 000e b9f7 000e     ................
   ec624:	2504 0000 ba14 000e 000a 0000 ba1f 000e     .%..............
   ec634:	ba3f 000e 2304 0000 0000 0000 0000 0000     ?....#..........
	...

000ec650 <_ZL18oid_x520_attr_type>:
   ec650:	bfcd 000e 0003 0000 bfd1 000e bfe2 000e     ................
   ec660:	bfee 000e bff1 000e 0003 0000 bff5 000e     ................
   ec670:	c007 000e bb89 000e c00f 000e 0003 0000     ................
   ec680:	c013 000e c022 000e c02b 000e c02d 000e     ...."...+...-...
   ec690:	0003 0000 c031 000e c03d 000e b64b 000e     ....1...=...K...
   ec6a0:	c043 000e 0003 0000 c047 000e c05e 000e     C.......G...^...
   ec6b0:	c06b 000e c06d 000e 0003 0000 c071 000e     k...m.......q...
   ec6c0:	c08e 000e c097 000e c09a 000e 0009 0000     ................
   ec6d0:	c0a4 000e c0b1 000e c0a4 000e c0c0 000e     ................
   ec6e0:	0003 0000 c0c4 000e c0d7 000e c0ca 000e     ................
   ec6f0:	c0e5 000e 0003 0000 c0e9 000e c0fd 000e     ................
   ec700:	c0ef 000e c10c 000e 0003 0000 c110 000e     ................
   ec710:	c121 000e c116 000e c12d 000e 0003 0000     !.......-.......
   ec720:	c131 000e c13f 000e c147 000e c14a 000e     1...?...G...J...
   ec730:	0003 0000 c14e 000e c15e 000e c169 000e     ....N...^...i...
   ec740:	c16c 000e 0003 0000 c170 000e c17f 000e     l.......p.......
   ec750:	c176 000e c188 000e 0003 0000 c18c 000e     v...............
   ec760:	c1a6 000e c192 000e c1bb 000e 0003 0000     ................
   ec770:	c1bf 000e c1cb 000e c1c5 000e c1d1 000e     ................
   ec780:	0003 0000 c1d5 000e c1e7 000e c1db 000e     ................
   ec790:	c204 000e 0003 0000 c208 000e c218 000e     ................
   ec7a0:	c20e 000e c222 000e 000a 0000 c22d 000e     ....".......-...
   ec7b0:	c240 000e c251 000e c254 000e 0003 0000     @...Q...T.......
   ec7c0:	c258 000e c26f 000e c25e 000e 0000 0000     X...o...^.......
	...
   ec7e0:	862a 8648 0df7 0501 000c 4541 2d53 3532     *.H.......AES-25
   ec7f0:	2d36 4347 004d 4541 2d53 3931 2d32 4347     6-GCM.AES-192-GC
   ec800:	004d 4541 2d53 3231 2d38 4347 004d 4541     M.AES-128-GCM.AE
   ec810:	2d53 3532 2d36 4345 0042 4541 2d53 3931     S-256-ECB.AES-19
   ec820:	2d32 4345 0042 4541 2d53 3231 2d38 4345     2-ECB.AES-128-EC
   ec830:	0042 0000                                   B...

000ec834 <_ZL12gcm_aes_info>:
   ec834:	0002 0000 0000 0000 b52b 000d b52b 000d     ........+...+...
   ec844:	b513 000d b501 000d                         ........

000ec84c <_ZL16aes_128_ecb_info>:
   ec84c:	0102 0000 0080 0000 c826 000e 0000 0000     ........&.......
   ec85c:	0000 0000 0010 0000 c8f4 000e               ............

000ec868 <_ZL16aes_128_gcm_info>:
   ec868:	060e 0000 0080 0000 c802 000e 000c 0000     ................
   ec878:	0001 0000 0010 0000 c834 000e               ........4...

000ec884 <_ZL16aes_192_ecb_info>:
   ec884:	0103 0000 00c0 0000 c81a 000e 0000 0000     ................
   ec894:	0000 0000 0010 0000 c8f4 000e               ............

000ec8a0 <_ZL16aes_192_gcm_info>:
   ec8a0:	060f 0000 00c0 0000 c7f6 000e 000c 0000     ................
   ec8b0:	0001 0000 0010 0000 c834 000e               ........4...

000ec8bc <_ZL16aes_256_ecb_info>:
   ec8bc:	0104 0000 0100 0000 c80e 000e 0000 0000     ................
   ec8cc:	0000 0000 0010 0000 c8f4 000e               ............

000ec8d8 <_ZL16aes_256_gcm_info>:
   ec8d8:	0610 0000 0100 0000 c7ea 000e 000c 0000     ................
   ec8e8:	0001 0000 0010 0000 c834 000e               ........4...

000ec8f4 <_ZL8aes_info>:
   ec8f4:	0002 0000 b567 000d b563 000d b55f 000d     ....g...c..._...
   ec904:	b547 000d b535 000d                         G...5...

000ec90c <mbedtls_cipher_definitions>:
   ec90c:	0002 0000 c84c 000e 0003 0000 c884 000e     ....L...........
   ec91c:	0004 0000 c8bc 000e 000e 0000 c868 000e     ............h...
   ec92c:	000f 0000 c8a0 000e 0010 0000 c8d8 000e     ................
	...
   ec944:	7372 2e61 004e 7372 2e61 0045 6365 656b     rsa.N.rsa.E.ecke
   ec954:	2e79 0051 4345 5344 0041 4345 445f 0048     y.Q.ECDSA.EC_DH.
   ec964:	4345 0000                                   EC..

000ec968 <mbedtls_ecdsa_info>:
   ec968:	0004 0000 c958 000e b5a9 000d b5cd 000d     ....X...........
   ec978:	b7cd 000d b781 000d 0000 0000 0000 0000     ................
   ec988:	b755 000d b759 000d b76f 000d b5ad 000d     U...Y...o.......

000ec998 <mbedtls_eckey_info>:
   ec998:	0002 0000 c964 000e b5a9 000d b59d 000d     ....d...........
   ec9a8:	b7ed 000d b785 000d 0000 0000 0000 0000     ................
   ec9b8:	b755 000d b73f 000d b72d 000d b5ad 000d     U...?...-.......

000ec9c8 <mbedtls_eckeydh_info>:
   ec9c8:	0003 0000 c95e 000e b5a9 000d b5c1 000d     ....^...........
	...
   ec9e8:	b755 000d b73f 000d b72d 000d b5ad 000d     U...?...-.......

000ec9f8 <mbedtls_rsa_info>:
   ec9f8:	0001 0000 bbac 000e b605 000d b56b 000d     ............k...
   eca08:	b6dd 000d b6a1 000d b659 000d b611 000d     ........Y.......
   eca18:	b601 000d b5e7 000d b5d5 000d b579 000d     ............y...
   eca28:	862a 8648 0df7 0c01 0101 2a00 4886 f786     *.H........*.H..
   eca38:	010d 0d05 2d00 2d2d 2d2d 4e45 2044 5352     .....-----END RS
   eca48:	2041 5250 5649 5441 2045 454b 2d59 2d2d     A PRIVATE KEY---
   eca58:	2d2d 2d00 2d2d 2d2d 4542 4947 204e 5352     --.-----BEGIN RS
   eca68:	2041 5250 5649 5441 2045 454b 2d59 2d2d     A PRIVATE KEY---
   eca78:	2d2d 2d00 2d2d 2d2d 4e45 2044 4345 5020     --.-----END EC P
   eca88:	4952 4156 4554 4b20 5945 2d2d 2d2d 002d     RIVATE KEY-----.
   eca98:	2d2d 2d2d 422d 4745 4e49 4520 2043 5250     -----BEGIN EC PR
   ecaa8:	5649 5441 2045 454b 2d59 2d2d 2d2d 2d00     IVATE KEY-----.-
   ecab8:	2d2d 2d2d 4e45 2044 5250 5649 5441 2045     ----END PRIVATE 
   ecac8:	454b 2d59 2d2d 2d2d 2d00 2d2d 2d2d 4542     KEY-----.-----BE
   ecad8:	4947 204e 5250 5649 5441 2045 454b 2d59     GIN PRIVATE KEY-
   ecae8:	2d2d 2d2d 2d00 2d2d 2d2d 4e45 2044 4e45     ----.-----END EN
   ecaf8:	5243 5059 4554 2044 5250 5649 5441 2045     CRYPTED PRIVATE 
   ecb08:	454b 2d59 2d2d 2d2d 2d00 2d2d 2d2d 4542     KEY-----.-----BE
   ecb18:	4947 204e 4e45 5243 5059 4554 2044 5250     GIN ENCRYPTED PR
   ecb28:	5649 5441 2045 454b 2d59 2d2d 2d2d 0000     IVATE KEY-----..

000ecb38 <_ZL5last4>:
	...
   ecb40:	1c20 0000 0000 0000 3840 0000 0000 0000      .......@8......
   ecb50:	2460 0000 0000 0000 7080 0000 0000 0000     `$.......p......
   ecb60:	6ca0 0000 0000 0000 48c0 0000 0000 0000     .l.......H......
   ecb70:	54e0 0000 0000 0000 e100 0000 0000 0000     .T..............
   ecb80:	fd20 0000 0000 0000 d940 0000 0000 0000      .......@.......
   ecb90:	c560 0000 0000 0000 9180 0000 0000 0000     `...............
   ecba0:	8da0 0000 0000 0000 a9c0 0000 0000 0000     ................
   ecbb0:	b5e0 0000 0000 0000                         ........

000ecbb8 <_ZL14base64_dec_map>:
   ecbb8:	7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f     ................
   ecbc8:	7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f     ................
   ecbd8:	7f7f 7f7f 7f7f 7f7f 7f7f 3e7f 7f7f 3f7f     ...........>...?
   ecbe8:	3534 3736 3938 3b3a 3d3c 7f7f 407f 7f7f     456789:;<=...@..
   ecbf8:	007f 0201 0403 0605 0807 0a09 0c0b 0e0d     ................
   ecc08:	100f 1211 1413 1615 1817 7f19 7f7f 7f7f     ................
   ecc18:	1a7f 1c1b 1e1d 201f 2221 2423 2625 2827     ....... !"#$%&'(
   ecc28:	2a29 2c2b 2e2d 302f 3231 7f33 7f7f 7f7f     )*+,-./0123.....

000ecc38 <CSWTCH.17>:
   ecc38:	b8b8 000e b8e8 000e b918 000e b948 000e     ............H...
   ecc48:	b978 000e                                   x...

000ecc4c <_ZL11secp256r1_b>:
   ecc4c:	604b 27d2 3c3e 3bce b0f6 cc53 06b0 651d     K`.'><.;..S....e
   ecc5c:	86bc 7698 bd55 b3eb 93e7 aa3a 35d8 5ac6     ...vU.....:..5.Z

000ecc6c <_ZL11secp256r1_n>:
   ecc6c:	2551 fc63 cac2 f3b9 9e84 a717 faad bce6     Q%c.............
   ecc7c:	ffff ffff ffff ffff 0000 0000 ffff ffff     ................

000ecc8c <_ZL11secp256r1_p>:
   ecc8c:	ffff ffff ffff ffff ffff ffff 0000 0000     ................
	...
   ecca4:	0001 0000 ffff ffff                         ........

000eccac <_ZL12secp256r1_gx>:
   eccac:	c296 d898 3945 f4a1 33a0 2deb 7d81 7703     ....E9...3.-.}.w
   eccbc:	40f2 63a4 e6e5 f8bc 4247 e12c d1f2 6b17     .@.c....GB,....k

000ecccc <_ZL12secp256r1_gy>:
   ecccc:	51f5 37bf 4068 cbb6 5ece 6b31 3357 2bce     .Q.7h@...^1kW3.+
   eccdc:	9e16 7c0f eb4a 8ee7 7f9b fe1a 42e2 4fe3     ...|J........B.O
   eccec:	7274 6575 6600 6c61 6573 0a00 6543 7472     true.false..Cert
   eccfc:	6669 6369 7461 2065 7369 7520 696e 696e     ificate is unini
   ecd0c:	6974 6c61 7369 6465 0a21 2500 6373 7265     tialised!..%scer
   ecd1c:	2e74 7620 7265 6973 6e6f 2020 2020 3a20     t. version     :
   ecd2c:	2520 0a64 2500 7373 7265 6169 206c 756e      %d..%sserial nu
   ecd3c:	626d 7265 2020 2020 3a20 0020 250a 6973     mber     : ..%si
   ecd4c:	7373 6575 2072 616e 656d 2020 2020 2020     ssuer name      
   ecd5c:	3a20 0020 250a 7373 6275 656a 7463 6e20      : ..%ssubject n
   ecd6c:	6d61 2065 2020 2020 3a20 0020 250a 6973     ame      : ..%si
   ecd7c:	7373 6575 2064 6f20 206e 2020 2020 2020     ssued  on       
   ecd8c:	3a20 2520 3430 2d64 3025 6432 252d 3230      : %04d-%02d-%02
   ecd9c:	2064 3025 6432 253a 3230 3a64 3025 6432     d %02d:%02d:%02d
   ecdac:	0a00 7325 7865 6970 6572 2073 6e6f 2020     ..%sexpires on  
   ecdbc:	2020 2020 2020 203a 3025 6434 252d 3230           : %04d-%02
   ecdcc:	2d64 3025 6432 2520 3230 3a64 3025 6432     d-%02d %02d:%02d
   ecddc:	253a 3230 0064 250a 7373 6769 656e 2064     :%02d..%ssigned 
   ecdec:	7375 6e69 2067 2020 2020 3a20 0020 250a     using      : ..%
   ecdfc:	2573 312d 7338 203a 6425 6220 7469 0073     s%-18s: %d bits.
   ece0c:	250a 6273 7361 6369 6320 6e6f 7473 6172     .%sbasic constra
   ece1c:	6e69 7374 3a20 4320 3d41 7325 2c00 6d20     ints : CA=%s., m
   ece2c:	7861 705f 7461 6c68 6e65 253d 0064 250a     ax_pathlen=%d..%
   ece3c:	7373 6275 656a 7463 6120 746c 6e20 6d61     ssubject alt nam
   ece4c:	2065 3a20 0020 250a 6373 7265 2e74 7420     e  : ..%scert. t
   ece5c:	7079 2065 2020 2020 2020 3a20 0020 7325     ype        : .%s
   ece6c:	5353 204c 6c43 6569 746e 2500 5373 4c53     SSL Client.%sSSL
   ece7c:	5320 7265 6576 0072 7325 6d45 6961 006c      Server.%sEmail.
   ece8c:	7325 624f 656a 7463 5320 6769 696e 676e     %sObject Signing
   ece9c:	2500 5273 7365 7265 6576 0064 7325 5353     .%sReserved.%sSS
   eceac:	204c 4143 2500 4573 616d 6c69 4320 0041     L CA.%sEmail CA.
   ecebc:	7325 624f 656a 7463 5320 6769 696e 676e     %sObject Signing
   ececc:	4320 0041 250a 6b73 7965 7520 6173 6567      CA..%skey usage
   ecedc:	2020 2020 2020 2020 3a20 0020 7325 6944              : .%sDi
   eceec:	6967 6174 206c 6953 6e67 7461 7275 0065     gital Signature.
   ecefc:	7325 6f4e 206e 6552 7570 6964 7461 6f69     %sNon Repudiatio
   ecf0c:	006e 7325 654b 2079 6e45 6963 6870 7265     n.%sKey Encipher
   ecf1c:	656d 746e 2500 4473 7461 2061 6e45 6963     ment.%sData Enci
   ecf2c:	6870 7265 656d 746e 2500 4b73 7965 4120     pherment.%sKey A
   ecf3c:	7267 6565 656d 746e 2500 4b73 7965 4320     greement.%sKey C
   ecf4c:	7265 2074 6953 6e67 2500 4373 4c52 5320     ert Sign.%sCRL S
   ecf5c:	6769 006e 7325 6e45 6963 6870 7265 4f20     ign.%sEncipher O
   ecf6c:	6c6e 0079 7325 6544 6963 6870 7265 4f20     nly.%sDecipher O
   ecf7c:	6c6e 0079 250a 6573 7478 6b20 7965 7520     nly..%sext key u
   ecf8c:	6173 6567 2020 2020 3a20 0020 7325 7325     sage     : .%s%s
   ecf9c:	2d00 2d2d 2d2d 4542 4947 204e 4543 5452     .-----BEGIN CERT
   ecfac:	4649 4349 5441 2d45 2d2d 2d2d 2d00 2d2d     IFICATE-----.---
   ecfbc:	2d2d 4e45 2044 4543 5452 4649 4349 5441     --END CERTIFICAT
   ecfcc:	2d45 2d2d 2d2d 5500 251d 0000               E-----.U.%..

000ecfd8 <mbedtls_x509_crt_profile_default>:
   ecfd8:	00f0 0000 ffff 0fff ffff 0fff 0800 0000     ................

000ecfe8 <mbedtls_x509_crt_profile_suiteb>:
   ecfe8:	0060 0000 000a 0000 000c 0000 0000 0000     `...............
   ecff8:	6e69 6176 696c 2064 4b50 0000               invalid PK..

000ed004 <CSWTCH.17>:
   ed004:	c9f8 000e c998 000e c9c8 000e c968 000e     ............h...
   ed014:	6c63 6569 746e 6620 6e69 7369 6568 0064     client finished.
   ed024:	6573 7672 7265 6620 6e69 7369 6568 0064     server finished.
   ed034:	616d 7473 7265 7320 6365 6572 0074 656b     master secret.ke
   ed044:	2079 7865 6170 736e 6f69 006e               y expansion.

000ed050 <CSWTCH.133>:
   ed050:	0200 0400 0800 1000                         ........

000ed058 <_ZL1K>:
   ed058:	ae22 d728 2f98 428a 65cd 23ef 4491 7137     ".(../.B.e.#.D7q
   ed068:	3b2f ec4d fbcf b5c0 dbbc 8189 dba5 e9b5     /;M.............
   ed078:	b538 f348 c25b 3956 d019 b605 11f1 59f1     8.H.[.V9.......Y
   ed088:	4f9b af19 82a4 923f 8118 da6d 5ed5 ab1c     .O....?...m..^..
   ed098:	0242 a303 aa98 d807 6fbe 4570 5b01 1283     B........opE.[..
   ed0a8:	b28c 4ee4 85be 2431 b4e2 d5ff 7dc3 550c     ...N..1$.....}.U
   ed0b8:	896f f27b 5d74 72be 96b1 3b16 b1fe 80de     o.{.t].r...;....
   ed0c8:	1235 25c7 06a7 9bdc 2694 cf69 f174 c19b     5..%.....&i.t...
   ed0d8:	4ad2 9ef1 69c1 e49b 25e3 384f 4786 efbe     .J...i...%O8.G..
   ed0e8:	d5b5 8b8c 9dc6 0fc1 9c65 77ac a1cc 240c     ........e..w...$
   ed0f8:	0275 592b 2c6f 2de9 e483 6ea6 84aa 4a74     u.+Yo,.-...n..tJ
   ed108:	fbd4 bd41 a9dc 5cb0 53b5 8311 88da 76f9     ..A....\.S.....v
   ed118:	dfab ee66 5152 983e 3210 2db4 c66d a831     ..f.RQ>..2.-m.1.
   ed128:	213f 98fb 27c8 b003 0ee4 beef 7fc7 bf59     ?!...'........Y.
   ed138:	8fc2 3da8 0bf3 c6e0 a725 930a 9147 d5a7     ...=....%...G...
   ed148:	826f e003 6351 06ca 6e70 0a0e 2967 1429     o...Qc..pn..g)).
   ed158:	2ffc 46d2 0a85 27b7 c926 5c26 2138 2e1b     ./.F...'&.&\8!..
   ed168:	2aed 5ac4 6dfc 4d2c b3df 9d95 0d13 5338     .*.Z.m,M......8S
   ed178:	63de 8baf 7354 650a b2a8 3c77 0abb 766a     .c..Ts.e..w<..jv
   ed188:	aee6 47ed c92e 81c2 353b 1482 2c85 9272     ...G....;5...,r.
   ed198:	0364 4cf1 e8a1 a2bf 3001 bc42 664b a81a     d..L.....0B.Kf..
   ed1a8:	9791 d0f8 8b70 c24b be30 0654 51a3 c76c     ....p.K.0.T..Ql.
   ed1b8:	5218 d6ef e819 d192 a910 5565 0624 d699     .R........eU$...
   ed1c8:	202a 5771 3585 f40e d1b8 32bb a070 106a     * qW.5.....2p.j.
   ed1d8:	d0c8 b8d2 c116 19a4 ab53 5141 6c08 1e37     ........S.AQ.l7.
   ed1e8:	eb99 df8e 774c 2748 48a8 e19b bcb5 34b0     ....LwH'.H.....4
   ed1f8:	5a63 c5c9 0cb3 391c 8acb e341 aa4a 4ed8     cZ.....9..A.J..N
   ed208:	e373 7763 ca4f 5b9c b8a3 d6b2 6ff3 682e     s.cwO..[.....o.h
   ed218:	b2fc 5def 82ee 748f 2f60 4317 636f 78a5     ...]...t`/.Coc.x
   ed228:	ab72 a1f0 7814 84c8 39ec 1a64 0208 8cc7     r....x...9d.....
   ed238:	1e28 2363 fffa 90be bde9 de82 6ceb a450     (.c#.........lP.
   ed248:	7915 b2c6 a3f7 bef9 532b e372 78f2 c671     .y......+Sr..xq.
   ed258:	619c ea26 3ece ca27 c207 21c0 b8c7 d186     .a&..>'....!....
   ed268:	eb1e cde0 7dd6 eada d178 ee6e 4f7f f57d     .....}..x.n..O}.
   ed278:	6fba 7217 67aa 06f0 98a6 a2c8 7dc5 0a63     .o.r.g.......}c.
   ed288:	0dae bef9 9804 113f 471b 131c 0b35 1b71     ......?..G..5.q.
   ed298:	7d84 2304 77f5 28db 2493 40c7 ab7b 32ca     .}.#.w.(.$.@{..2
   ed2a8:	bebc 15c9 be0a 3c9e 0d4c 9c10 67c4 431d     .......<L....g.C
   ed2b8:	42b6 cb3e d4be 4cc5 7e2a fc65 299c 597f     .B>....L*~e..).Y
   ed2c8:	faec 3ad6 6fab 5fcb 5817 4a47 198c 6c44     ...:.o._.XGJ..Dl
   ed2d8:	7250 636f 542d 7079 3a65 3420 452c 434e     Proc-Type: 4,ENC
   ed2e8:	5952 5450 4445 5400 534c 452d 4443 4548     RYPTED.TLS-ECDHE
   ed2f8:	452d 4443 4153 572d 5449 2d48 4541 2d53     -ECDSA-WITH-AES-
   ed308:	3231 2d38 4347 2d4d 4853 3241 3635 5400     128-GCM-SHA256.T
   ed318:	534c 452d 4443 4548 452d 4443 4153 572d     LS-ECDHE-ECDSA-W
   ed328:	5449 2d48 4541 2d53 3532 2d36 4347 2d4d     ITH-AES-256-GCM-
   ed338:	4853 3341 3438 5400 534c 522d 4153 572d     SHA384.TLS-RSA-W
   ed348:	5449 2d48 4541 2d53 3532 2d36 4347 2d4d     ITH-AES-256-GCM-
   ed358:	4853 3341 3438 5400 534c 522d 4153 572d     SHA384.TLS-RSA-W
   ed368:	5449 2d48 4541 2d53 3231 2d38 4347 2d4d     ITH-AES-128-GCM-
   ed378:	4853 3241 3635 5400 534c 502d 4b53 572d     SHA256.TLS-PSK-W
   ed388:	5449 2d48 4541 2d53 3231 2d38 4347 2d4d     ITH-AES-128-GCM-
   ed398:	4853 3241 3635 5400 534c 502d 4b53 572d     SHA256.TLS-PSK-W
   ed3a8:	5449 2d48 4541 2d53 3532 2d36 4347 2d4d     ITH-AES-256-GCM-
   ed3b8:	4853 3341 3438 5400 534c 522d 4153 502d     SHA384.TLS-RSA-P
   ed3c8:	4b53 572d 5449 2d48 4541 2d53 3231 2d38     SK-WITH-AES-128-
   ed3d8:	4347 2d4d 4853 3241 3635 5400 534c 522d     GCM-SHA256.TLS-R
   ed3e8:	4153 502d 4b53 572d 5449 2d48 4541 2d53     SA-PSK-WITH-AES-
   ed3f8:	3532 2d36 4347 2d4d 4853 3341 3438 0000     256-GCM-SHA384..

000ed408 <_ZL22ciphersuite_preference>:
   ed408:	cca8 0000 cca9 0000 ccaa 0000 c02c 0000     ............,...
   ed418:	c030 0000 009f 0000 c0ad 0000 c09f 0000     0...............
   ed428:	c024 0000 c028 0000 006b 0000 c00a 0000     $...(...k.......
   ed438:	c014 0000 0039 0000 c0af 0000 c0a3 0000     ....9...........
   ed448:	c087 0000 c08b 0000 c07d 0000 c073 0000     ........}...s...
   ed458:	c077 0000 00c4 0000 0088 0000 c05d 0000     w...........]...
   ed468:	c061 0000 c053 0000 c049 0000 c04d 0000     a...S...I...M...
   ed478:	c045 0000 c02b 0000 c02f 0000 009e 0000     E...+.../.......
   ed488:	c0ac 0000 c09e 0000 c023 0000 c027 0000     ........#...'...
   ed498:	0067 0000 c009 0000 c013 0000 0033 0000     g...........3...
   ed4a8:	c0ae 0000 c0a2 0000 c086 0000 c08a 0000     ................
   ed4b8:	c07c 0000 c072 0000 c076 0000 00be 0000     |...r...v.......
   ed4c8:	0045 0000 c05c 0000 c060 0000 c052 0000     E...\...`...R...
   ed4d8:	c048 0000 c04c 0000 c044 0000 ccac 0000     H...L...D.......
   ed4e8:	ccad 0000 00ab 0000 c0a7 0000 c038 0000     ............8...
   ed4f8:	00b3 0000 c036 0000 0091 0000 c091 0000     ....6...........
   ed508:	c09b 0000 c097 0000 c0ab 0000 c06d 0000     ............m...
   ed518:	c071 0000 c067 0000 00aa 0000 c0a6 0000     q...g...........
   ed528:	c037 0000 00b2 0000 c035 0000 0090 0000     7.......5.......
   ed538:	c090 0000 c096 0000 c09a 0000 c0aa 0000     ................
   ed548:	c06c 0000 c070 0000 c066 0000 c0ff 0000     l...p...f.......
   ed558:	009d 0000 c09d 0000 003d 0000 0035 0000     ........=...5...
   ed568:	c032 0000 c02a 0000 c00f 0000 c02e 0000     2...*...........
   ed578:	c026 0000 c005 0000 c0a1 0000 c07b 0000     &...........{...
   ed588:	00c0 0000 0084 0000 c08d 0000 c079 0000     ............y...
   ed598:	c089 0000 c075 0000 c05f 0000 c063 0000     ....u..._...c...
   ed5a8:	c051 0000 c04b 0000 c04f 0000 c03d 0000     Q...K...O...=...
   ed5b8:	009c 0000 c09c 0000 003c 0000 002f 0000     ........<.../...
   ed5c8:	c031 0000 c029 0000 c00e 0000 c02d 0000     1...).......-...
   ed5d8:	c025 0000 c004 0000 c0a0 0000 c07a 0000     %...........z...
   ed5e8:	00ba 0000 0041 0000 c08c 0000 c078 0000     ....A.......x...
   ed5f8:	c088 0000 c074 0000 c05e 0000 c062 0000     ....t...^...b...
   ed608:	c050 0000 c04a 0000 c04e 0000 c03c 0000     P...J...N...<...
   ed618:	ccae 0000 00ad 0000 00b7 0000 0095 0000     ................
   ed628:	c093 0000 c099 0000 c06f 0000 c069 0000     ........o...i...
   ed638:	00ac 0000 00b6 0000 0094 0000 c092 0000     ................
   ed648:	c098 0000 c06e 0000 c068 0000 ccab 0000     ....n...h.......
   ed658:	00a9 0000 c0a5 0000 00af 0000 008d 0000     ................
   ed668:	c08f 0000 c095 0000 c0a9 0000 c06b 0000     ............k...
   ed678:	c065 0000 00a8 0000 c0a4 0000 00ae 0000     e...............
   ed688:	008c 0000 c08e 0000 c094 0000 c0a8 0000     ................
   ed698:	c06a 0000 c064 0000 c008 0000 c012 0000     j...d...........
   ed6a8:	0016 0000 c034 0000 008f 0000 000a 0000     ....4...........
   ed6b8:	c00d 0000 c003 0000 0093 0000 008b 0000     ................
   ed6c8:	c007 0000 c011 0000 c033 0000 008e 0000     ........3.......
   ed6d8:	0005 0000 0004 0000 c00c 0000 c002 0000     ................
   ed6e8:	0092 0000 008a 0000 0015 0000 0009 0000     ................
   ed6f8:	c006 0000 c010 0000 c03b 0000 c03a 0000     ........;...:...
   ed708:	c039 0000 00b5 0000 00b4 0000 002d 0000     9...........-...
   ed718:	003b 0000 0002 0000 0001 0000 c00b 0000     ;...............
   ed728:	c001 0000 00b9 0000 00b8 0000 002e 0000     ................
   ed738:	00b1 0000 00b0 0000 002c 0000 0000 0000     ........,.......

000ed748 <_ZL23ciphersuite_definitions>:
   ed748:	c02b 0000 d2ef 000e 060e 0004 0003 0000     +...............
   ed758:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   ed768:	c02c 0000 d317 000e 0710 0004 0003 0000     ,...............
   ed778:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   ed788:	009d 0000 d33f 000e 0710 0001 0003 0000     ....?...........
   ed798:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   ed7a8:	009c 0000 d35f 000e 060e 0001 0003 0000     ...._...........
   ed7b8:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   ed7c8:	00a8 0000 d37f 000e 060e 0005 0003 0000     ................
   ed7d8:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   ed7e8:	00a9 0000 d39f 000e 0710 0005 0003 0000     ................
   ed7f8:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   ed808:	00ac 0000 d3bf 000e 060e 0007 0003 0000     ................
   ed818:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   ed828:	00ad 0000 d3e3 000e 0710 0007 0003 0000     ................
   ed838:	0003 0000 0003 0000 0003 0000 0000 0000     ................
   ed848:	0000 0000 bb9d 000e 0000 0000 0000 0000     ................
	...
   ed868:	0302 0705 0d0b 1311 1d17 251f 2b29 352f     ...........%)+/5
   ed878:	3d3b 4743 4f49 5953 6561 6b67 716d 837f     ;=CGIOSYaegkmq..
   ed888:	8b89 9795 a39d ada7 b5b3 c1bf c7c5 dfd3     ................
   ed898:	e5e3 efe9 fbf1 0000                         ........

000ed8a0 <_ZTVN5spark13EthernetClassE>:
	...
   ed8a8:	5a87 000e 5a7d 000e 5a73 000e 5a69 000e     .Z..}Z..sZ..iZ..
   ed8b8:	5a5d 000e 5a51 000e 5a45 000e 5a3d 000e     ]Z..QZ..EZ..=Z..
   ed8c8:	5a33 000e 5a29 000e 72a5 000e 6977 6972     3Z..)Z...r..wiri
   ed8d8:	676e 5300 7379 6574 206d 6c73 6565 2070     ng.System sleep 
   ed8e8:	6f63 666e 6769 7275 7461 6f69 206e 7369     configuration is
   ed8f8:	6920 766e 6c61 6469 002e 0000                invalid....

000ed904 <_ZTV21StringPrintableHelper>:
	...
   ed90c:	5da7 000e 5da9 000e 5feb 000e 5f9b 000e     .]...]..._..._..

000ed91c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   ed924:	616e 006e 6e69 0066 766f 0066 7061 0070     nan.inf.ovf.app.
   ed934:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   ed944:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000ed950 <_ZTV6Stream>:
	...
   ed960:	40a9 000d 60c9 000e 40a9 000d 40a9 000d     .@...`...@...@..
   ed970:	40a9 000d 40a9 000d                         .@...@..

000ed978 <_ZTV15TCPServerClient>:
	...
   ed980:	6671 000e 6689 000e 6c45 000e 6c5f 000e     qf...f..El.._l..
   ed990:	7051 000e 6dc3 000e 6d95 000e 6c89 000e     Qp...m...m...l..
   ed9a0:	6f59 000e 6e4d 000e 6df7 000e 7105 000e     Yo..Mn...m...q..
   ed9b0:	6c8b 000e 6cbd 000e 6c71 000e 6cfb 000e     .l...l..ql...l..
   ed9c0:	6437 000e                                   7d..

000ed9c4 <_ZTV9TCPServer>:
	...
   ed9cc:	5015 000d 5049 000d 63d7 000e 63ef 000e     .P..IP...c...c..
   ed9dc:	6531 000e 63bf 000e 6401 000e               1e...c...d..

000ed9e8 <_ZTV9IPAddress>:
	...
   ed9f0:	68c9 000e 68b9 000e 68bb 000e               .h...h...h..

000ed9fc <_ZTV9USBSerial>:
	...
   eda04:	69cb 000e 6a33 000e 6a09 000e 60c9 000e     .i..3j...j...`..
   eda14:	69fb 000e 69cd 000e 69dd 000e 6a2d 000e     .i...i...i..-j..
   eda24:	69ed 000e 69c7 000e                         .i...i..

000eda2c <_ZTV11USARTSerial>:
	...
   eda34:	6acd 000e 6b39 000e 6b11 000e 60c9 000e     .j..9k...k...`..
   eda44:	6ae1 000e 6afd 000e 6aef 000e 6b0b 000e     .j...j...j...k..
   eda54:	6acf 000e 6ad3 000e                         .j...j..

000eda5c <_ZTV7TwoWire>:
	...
   eda64:	6bc9 000e 6c13 000e 6beb 000e 6bcb 000e     .k...l...k...k..
   eda74:	6bf3 000e 6bfb 000e 6c03 000e 6c0b 000e     .k...k...l...l..
   eda84:	6572 7663 6520 7272 726f 3d20 2520 0064     recv error = %d.

000eda94 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   eda9c:	6cc7 000e 6ce9 000e 71bb 000e 6cf7 000e     .l...l...q...l..
   edaac:	6cc9 000e                                   .l..

000edab0 <_ZTV9TCPClient>:
	...
   edab8:	4ff5 000d 5035 000d 6c45 000e 6c5f 000e     .O..5P..El.._l..
   edac8:	7051 000e 6dc3 000e 6d95 000e 6c89 000e     Qp...m...m...l..
   edad8:	6f59 000e 6e4d 000e 6df7 000e 7105 000e     Yo..Mn...m...q..
   edae8:	6c8b 000e 6cbd 000e 6c71 000e 6cfb 000e     .l...l..ql...l..
   edaf8:	6d75 000e                                   um..

000edafc <_ZTVN5spark9WiFiClassE>:
	...
   edb04:	721f 000e 7215 000e 720b 000e 71c1 000e     .r...r...r...q..
   edb14:	71ff 000e 71f3 000e 71e7 000e 71df 000e     .q...q...q...q..
   edb24:	71d5 000e 71cb 000e 72a5 000e               .q...q...r..

000edb30 <_ZTVN5spark12NetworkClassE>:
	...
   edb38:	723d 000e 7247 000e 7251 000e 725b 000e     =r..Gr..Qr..[r..
   edb48:	7265 000e 7271 000e 727d 000e 7289 000e     er..qr..}r...r..
   edb58:	7291 000e 729b 000e 72a5 000e 2e30 0030     .r...r...r..0.0.

000edb68 <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   edb70:	73bb 000e 73c1 000e 73d7 000e 73cf 000e     .s...s...s...s..
   edb80:	73bd 000e                                   .s..

000edb84 <_ZSt7nothrow>:
	...

000edb85 <_ZTSSt19_Sp_make_shared_tag>:
   edb85:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   edb95:	6572 5f64 6174 0067 0000                     red_tag....

000edba0 <_ZTISt19_Sp_make_shared_tag>:
   edba0:	dcd4 000e db85 000e 6f6e 2074 6e65 756f     ........not enou
   edbb0:	6867 7320 6170 6563 6620 726f 6620 726f     gh space for for
   edbc0:	616d 2074 7865 6170 736e 6f69 206e 5028     mat expansion (P
   edbd0:	656c 7361 2065 7573 6d62 7469 6620 6c75     lease submit ful
   edbe0:	206c 7562 2067 6572 6f70 7472 6120 2074     l bug report at 
   edbf0:	7468 7074 3a73 2f2f 6367 2e63 6e67 2e75     https://gcc.gnu.
   edc00:	726f 2f67 7562 7367 292f 0a3a 2020 2020     org/bugs/):.    
   edc10:	3000 3231 3433 3635 3837 0039 6162 6973     .0123456789.basi
   edc20:	5f63 7473 6972 676e 3a3a 4d5f 635f 6572     c_string::_M_cre
   edc30:	7461 0065 7325 203a 5f5f 6f70 2073 7728     ate.%s: __pos (w
   edc40:	6968 6863 6920 2073 7a25 2975 3e20 7420     hich is %zu) > t
   edc50:	6968 2d73 733e 7a69 2865 2029 7728 6968     his->size() (whi
   edc60:	6863 6920 2073 7a25 2975 6200 7361 6369     ch is %zu).basic
   edc70:	735f 7274 6e69 3a67 623a 7361 6369 735f     _string::basic_s
   edc80:	7274 6e69 0067 6162 6973 5f63 7473 6972     tring.basic_stri
   edc90:	676e 3a3a 7573 7362 7274 0000               ng::substr..

000edc9c <_ZTIN10__cxxabiv117__class_type_infoE>:
   edc9c:	dd34 000e dca8 000e dd58 000e               4.......X...

000edca8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   edca8:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   edcb8:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   edcc8:	0045 0000                                   E...

000edccc <_ZTVN10__cxxabiv117__class_type_infoE>:
   edccc:	0000 0000 dc9c 000e 7e81 000e 7e95 000e     .........~...~..
   edcdc:	8029 000e 8029 000e 7eff 000e 7e41 000e     )...)....~..A~..
   edcec:	7ee7 000e 7ea9 000e 7e75 000e               .~...~..u~..

000edcf8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   edcf8:	dd34 000e dd04 000e dc9c 000e               4...........

000edd04 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   edd04:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   edd14:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   edd24:	666e 456f 0000 0000                         nfoE....

000edd2c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   edd2c:	0000 0000 dcf8 000e 7f29 000e 7f3d 000e     ........)...=...
   edd3c:	8029 000e 8029 000e 7eff 000e 7e41 000e     )...)....~..A~..
   edd4c:	7ffd 000e 7f89 000e 7f51 000e               ........Q...

000edd58 <_ZTISt9type_info>:
   edd58:	dcd4 000e dd60 000e                         ....`...

000edd60 <_ZTSSt9type_info>:
   edd60:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....

000edd70 <__sf_fake_stderr>:
	...

000edd90 <__sf_fake_stdin>:
	...

000eddb0 <__sf_fake_stdout>:
	...
   eddd0:	6e69 7469 0079 0000                         inity...

000eddd8 <fpi.7566>:
   eddd8:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   edde8:	0000 0000                                   ....

000eddec <fpinan.7602>:
   eddec:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   eddfc:	0000 0000                                   ....

000ede00 <tinytens>:
   ede00:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   ede10:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   ede20:	6f43 64ac 0628 1168                         Co.d(.h.

000ede28 <_ctype_>:
   ede28:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   ede38:	2020 2020 2020 2020 2020 2020 2020 2020                     
   ede48:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   ede58:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   ede68:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   ede78:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   ede88:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   ede98:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   edea8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000edf2c <_C_numeric_locale>:
   edf2c:	c1d3 000e bb9d 000e acb8 2003 4f50 4953     ........... POSI
   edf3c:	0058 0000                                   X...

000edf40 <__mprec_bigtens>:
   edf40:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   edf50:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   edf60:	bf3c 7f73 4fdd 7515                         <.s..O.u

000edf68 <__mprec_tens>:
   edf68:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   edf78:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   edf88:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   edf98:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   edfa8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   edfb8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   edfc8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   edfd8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   edfe8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   edff8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   ee008:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   ee018:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   ee028:	9db4 79d9 7843 44ea                         ...yCx.D

000ee030 <p05.7490>:
   ee030:	0005 0000 0019 0000 007d 0000               ........}...

000ee03c <link_const_variable_data_end>:
   ee03c:	000d5431 	.word	0x000d5431
   ee040:	000e5a91 	.word	0x000e5a91
   ee044:	000e5ce9 	.word	0x000e5ce9
   ee048:	000e60a1 	.word	0x000e60a1
   ee04c:	000e637d 	.word	0x000e637d
   ee050:	000e638d 	.word	0x000e638d
   ee054:	000e6779 	.word	0x000e6779
   ee058:	000e7229 	.word	0x000e7229
   ee05c:	000e7379 	.word	0x000e7379
